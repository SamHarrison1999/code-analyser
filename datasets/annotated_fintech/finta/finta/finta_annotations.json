[
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default parameter value for flexibility and ease of use",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value for flexibility and ease of use"
  },
  {
    "line": 8,
    "text": "    def dfcheck(func):",
    "annotation": "\u2705 Best Practice: Use of @wraps decorator to preserve metadata of the original function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      47764,
      9122,
      7,
      20786,
      2599
    ],
    "start_token": 0,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      29988,
      862,
      11705,
      1352,
      284,
      12201,
      20150,
      286,
      262,
      2656,
      2163
    ],
    "label": "best_practice",
    "reason": "Use of @wraps decorator to preserve metadata of the original function"
  },
  {
    "line": 10,
    "text": "        def wrap(*args, **kwargs):",
    "annotation": "\u2705 Best Practice: Use of isinstance to check the type of the first argument",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      14441,
      46491,
      22046,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 9,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      262,
      717,
      4578
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check the type of the first argument"
  },
  {
    "line": 12,
    "text": "            args = list(args)",
    "annotation": "\u2705 Best Practice: Use of dictionary comprehension for renaming columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26498,
      796,
      1351,
      7,
      22046,
      8
    ],
    "start_token": 25,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      35915,
      329,
      8851,
      3723,
      15180
    ],
    "label": "best_practice",
    "reason": "Use of dictionary comprehension for renaming columns"
  },
  {
    "line": 19,
    "text": "                \"h\": \"high\",",
    "annotation": "\u2705 Best Practice: Use of kwargs.get with default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      71,
      1298,
      366,
      8929,
      1600
    ],
    "start_token": 42,
    "end_token": 63,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      479,
      86,
      22046,
      13,
      1136,
      351,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Use of kwargs.get with default value"
  },
  {
    "line": 22,
    "text": "                \"v\": \"volume\",",
    "annotation": "\u2705 Best Practice: Conditional logic to update kwargs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      85,
      1298,
      366,
      29048,
      1600
    ],
    "start_token": 63,
    "end_token": 84,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      9156,
      284,
      4296,
      479,
      86,
      22046
    ],
    "label": "best_practice",
    "reason": "Conditional logic to update kwargs"
  },
  {
    "line": 26,
    "text": "                kwargs[\"column\"] = inputs[\"c\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if 'input_' is not defined",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      86,
      22046,
      14692,
      28665,
      8973,
      796,
      17311,
      14692,
      66,
      8973
    ],
    "start_token": 84,
    "end_token": 110,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      705,
      15414,
      62,
      6,
      318,
      407,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if 'input_' is not defined"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if column name is not found",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 110,
    "end_token": 110,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      5721,
      1438,
      318,
      407,
      1043
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if column name is not found"
  },
  {
    "line": 29,
    "text": "                if inputs[l] not in args[i].columns:",
    "annotation": "\u2705 Best Practice: Use of formatted string for error message",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      17311,
      58,
      75,
      60,
      407,
      287,
      26498,
      58,
      72,
      4083,
      28665,
      82,
      25
    ],
    "start_token": 110,
    "end_token": 139,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      39559,
      4731,
      329,
      4049,
      3275
    ],
    "label": "best_practice",
    "reason": "Use of formatted string for error message"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calling a function with dynamic arguments",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4585,
      257,
      2163,
      351,
      8925,
      7159
    ],
    "label": "ml_signal",
    "reason": "Pattern of calling a function with dynamic arguments"
  },
  {
    "line": 29,
    "text": "                if inputs[l] not in args[i].columns:",
    "annotation": "\u2705 Best Practice: Add a docstring to describe the purpose and usage of the function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      17311,
      58,
      75,
      60,
      407,
      287,
      26498,
      58,
      72,
      4083,
      28665,
      82,
      25
    ],
    "start_token": 139,
    "end_token": 168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Add a docstring to describe the purpose and usage of the function"
  },
  {
    "line": 31,
    "text": "                        'Must have a dataframe column named \"{0}\"'.format(inputs[l])",
    "annotation": "\u2705 Best Practice: Add a docstring to describe the purpose and usage of the inner function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      34320,
      423,
      257,
      1366,
      14535,
      5721,
      3706,
      45144,
      15,
      36786,
      4458,
      18982,
      7,
      15414,
      82,
      58,
      75,
      12962
    ],
    "start_token": 168,
    "end_token": 210,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      8434,
      2163
    ],
    "label": "best_practice",
    "reason": "Add a docstring to describe the purpose and usage of the inner function"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of decorators, which is a common pattern in Python",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11705,
      2024,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      11361
    ],
    "label": "ml_signal",
    "reason": "Usage of decorators, which is a common pattern in Python"
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a function from another function, indicating higher-order function usage",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      2163,
      422,
      1194,
      2163,
      11,
      12739,
      2440,
      12,
      2875,
      2163,
      8748
    ],
    "label": "ml_signal",
    "reason": "Returning a function from another function, indicating higher-order function usage"
  },
  {
    "line": 31,
    "text": "                        'Must have a dataframe column named \"{0}\"'.format(inputs[l])",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over class attributes to apply a decorator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      34320,
      423,
      257,
      1366,
      14535,
      5721,
      3706,
      45144,
      15,
      36786,
      4458,
      18982,
      7,
      15414,
      82,
      58,
      75,
      12962
    ],
    "start_token": 210,
    "end_token": 252,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1398,
      12608,
      284,
      4174,
      257,
      11705,
      1352
    ],
    "label": "ml_signal",
    "reason": "Iterating over class attributes to apply a decorator"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an attribute is callable",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 252,
    "end_token": 252,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      11688,
      318,
      869,
      540
    ],
    "label": "ml_signal",
    "reason": "Checking if an attribute is callable"
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potentially modifying class methods without explicit consent",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 252,
    "end_token": 252,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6902,
      3746,
      30620,
      1398,
      5050,
      1231,
      7952,
      8281
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potentially modifying class methods without explicit consent"
  },
  {
    "line": 38,
    "text": "    return dfcheck",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using a decorator without verifying its source or behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764,
      9122
    ],
    "start_token": 252,
    "end_token": 258,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      257,
      11705,
      1352,
      1231,
      45505,
      663,
      2723,
      393,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using a decorator without verifying its source or behavior"
  },
  {
    "line": 38,
    "text": "    return dfcheck",
    "annotation": "\ud83e\udde0 ML Signal: Use of class variables to store metadata like versioning",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764,
      9122
    ],
    "start_token": 258,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      9633,
      284,
      3650,
      20150,
      588,
      2196,
      278
    ],
    "label": "ml_signal",
    "reason": "Use of class variables to store metadata like versioning"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 264,
    "end_token": 264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 45,
    "text": "                setattr(cls, attr, decorator(getattr(cls, attr)))",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling mean indicates a pattern for time series analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      900,
      35226,
      7,
      565,
      82,
      11,
      708,
      81,
      11,
      11705,
      1352,
      7,
      1136,
      35226,
      7,
      565,
      82,
      11,
      708,
      81,
      22305
    ],
    "start_token": 264,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      1612,
      9217,
      257,
      3912,
      329,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of rolling mean indicates a pattern for time series analysis."
  },
  {
    "line": 48,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific column in a DataFrame is a common data manipulation pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      5721,
      287,
      257,
      6060,
      19778,
      318,
      257,
      2219,
      1366,
      17512,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific column in a DataFrame is a common data manipulation pattern."
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of format method for string formatting is more readable and maintainable.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      2446,
      329,
      4731,
      33313,
      318,
      517,
      31744,
      290,
      5529,
      540,
      13
    ],
    "label": "best_practice",
    "reason": "Use of format method for string formatting is more readable and maintainable."
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates a method that operates on the class rather than instance.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      257,
      2446,
      326,
      14051,
      319,
      262,
      1398,
      2138,
      621,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates a method that operates on the class rather than instance."
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters."
  },
  {
    "line": 55,
    "text": "    __version__ = \"1.3\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window operations on time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      11593,
      9641,
      834,
      796,
      366,
      16,
      13,
      18,
      1
    ],
    "start_token": 300,
    "end_token": 312,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      4560,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window operations on time series data."
  },
  {
    "line": 55,
    "text": "    __version__ = \"1.3\"",
    "annotation": "\u2705 Best Practice: Using pandas' rolling and median functions for efficient computation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      9641,
      834,
      796,
      366,
      16,
      13,
      18,
      1
    ],
    "start_token": 312,
    "end_token": 324,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      19798,
      292,
      6,
      10708,
      290,
      14288,
      5499,
      329,
      6942,
      29964,
      13
    ],
    "label": "best_practice",
    "reason": "Using pandas' rolling and median functions for efficient computation."
  },
  {
    "line": 60,
    "text": "        Simple moving average - rolling mean in pandas lingo. Also known as 'MA'.",
    "annotation": "\u2705 Best Practice: Using format for string interpolation improves readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17427,
      3867,
      2811,
      532,
      10708,
      1612,
      287,
      19798,
      292,
      18459,
      78,
      13,
      4418,
      1900,
      355,
      705,
      5673,
      4458
    ],
    "start_token": 324,
    "end_token": 349,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      39555,
      341,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using format for string interpolation improves readability."
  },
  {
    "line": 60,
    "text": "        Simple moving average - rolling mean in pandas lingo. Also known as 'MA'.",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates method is bound to the class and not the instance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17427,
      3867,
      2811,
      532,
      10708,
      1612,
      287,
      19798,
      292,
      18459,
      78,
      13,
      4418,
      1900,
      355,
      705,
      5673,
      4458
    ],
    "start_token": 349,
    "end_token": 374,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      2446,
      318,
      5421,
      284,
      262,
      1398,
      290,
      407,
      262,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates method is bound to the class and not the instance."
  },
  {
    "line": 67,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 374,
    "end_token": 382,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 74,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted moving average, common in financial data analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 382,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      3867,
      2811,
      11,
      2219,
      287,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted moving average, common in financial data analysis"
  },
  {
    "line": 81,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Naming the Series for better readability and debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 390,
    "end_token": 396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      262,
      7171,
      329,
      1365,
      1100,
      1799,
      290,
      28769
    ],
    "label": "best_practice",
    "reason": "Naming the Series for better readability and debugging"
  },
  {
    "line": 81,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on the class rather than instance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 396,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      262,
      1398,
      2138,
      621,
      4554
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on the class rather than instance"
  },
  {
    "line": 88,
    "text": "    ) -> Series:",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      7171,
      25
    ],
    "start_token": 402,
    "end_token": 409,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 93,
    "text": "        :param period: range",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas ewm method to calculate exponential moving average.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      2278,
      25,
      2837
    ],
    "start_token": 409,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      304,
      26377,
      2446,
      284,
      15284,
      39682,
      3867,
      2811,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas ewm method to calculate exponential moving average."
  },
  {
    "line": 98,
    "text": "        return pd.Series(",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to define a method that operates on the class rather than instance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 421,
    "end_token": 434,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      8160,
      257,
      2446,
      326,
      14051,
      319,
      262,
      1398,
      2138,
      621,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to define a method that operates on the class rather than instance."
  },
  {
    "line": 105,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 434,
    "end_token": 440,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior"
  },
  {
    "line": 113,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like DEMA can be a signal for financial data analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 440,
    "end_token": 448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      360,
      27630,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like DEMA can be a signal for financial data analysis"
  },
  {
    "line": 113,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of class method allows for potential inheritance and method overriding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 448,
    "end_token": 456,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      2446,
      3578,
      329,
      2785,
      24155,
      290,
      2446,
      44987
    ],
    "label": "best_practice",
    "reason": "Use of class method allows for potential inheritance and method overriding"
  },
  {
    "line": 120,
    "text": "            ohlc[column].ewm(span=period, adjust=adjust).mean(),",
    "annotation": "\u2705 Best Practice: Returning a named Series improves readability and data handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      58,
      28665,
      4083,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784
    ],
    "start_token": 456,
    "end_token": 485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      19575,
      1100,
      1799,
      290,
      1366,
      9041
    ],
    "label": "best_practice",
    "reason": "Returning a named Series improves readability and data handling"
  },
  {
    "line": 120,
    "text": "            ohlc[column].ewm(span=period, adjust=adjust).mean(),",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      58,
      28665,
      4083,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784
    ],
    "start_token": 485,
    "end_token": 514,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and behavior."
  },
  {
    "line": 130,
    "text": "        adjust: bool = True,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom TEMA function for financial data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 514,
    "end_token": 527,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      309,
      27630,
      2163,
      329,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom TEMA function for financial data analysis."
  },
  {
    "line": 130,
    "text": "        adjust: bool = True,",
    "annotation": "\ud83e\udde0 ML Signal: Chaining of pandas ewm and mean methods for calculating moving averages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 527,
    "end_token": 540,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      609,
      1397,
      286,
      19798,
      292,
      304,
      26377,
      290,
      1612,
      5050,
      329,
      26019,
      3867,
      25694,
      13
    ],
    "label": "ml_signal",
    "reason": "Chaining of pandas ewm and mean methods for calculating moving averages."
  },
  {
    "line": 142,
    "text": "            2 * cls.EMA(ohlc, period)",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of TEMA using a combination of EMA and ewm methods.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      362,
      1635,
      537,
      82,
      13,
      27630,
      7,
      1219,
      44601,
      11,
      2278,
      8
    ],
    "start_token": 540,
    "end_token": 563,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      309,
      27630,
      1262,
      257,
      6087,
      286,
      412,
      5673,
      290,
      304,
      26377,
      5050,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of TEMA using a combination of EMA and ewm methods."
  },
  {
    "line": 145,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a pandas Series with a descriptive name.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 563,
    "end_token": 563,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      19798,
      292,
      7171,
      351,
      257,
      35644,
      1438,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a pandas Series with a descriptive name."
  },
  {
    "line": 145,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and source.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 563,
    "end_token": 563,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      2723,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and source."
  },
  {
    "line": 152,
    "text": "        The name suggests this is achieved by applying a triple exponential smoothing which is not the case. The name triple comes from the fact that the",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom moving average function could indicate financial data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      1438,
      5644,
      428,
      318,
      8793,
      416,
      11524,
      257,
      15055,
      39682,
      32746,
      722,
      543,
      318,
      407,
      262,
      1339,
      13,
      383,
      1438,
      15055,
      2058,
      422,
      262,
      1109,
      326,
      262
    ],
    "start_token": 563,
    "end_token": 598,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      3867,
      2811,
      2163,
      714,
      7603,
      3176,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom moving average function could indicate financial data processing."
  },
  {
    "line": 152,
    "text": "        The name suggests this is achieved by applying a triple exponential smoothing which is not the case. The name triple comes from the fact that the",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like 'SMA' improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      1438,
      5644,
      428,
      318,
      8793,
      416,
      11524,
      257,
      15055,
      39682,
      32746,
      722,
      543,
      318,
      407,
      262,
      1339,
      13,
      383,
      1438,
      15055,
      2058,
      422,
      262,
      1109,
      326,
      262
    ],
    "start_token": 598,
    "end_token": 633,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      705,
      50,
      5673,
      6,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like 'SMA' improves code readability."
  },
  {
    "line": 154,
    "text": "        To keep it in line with the actual data and to remove the lag the value 'EMA of EMA' is subtracted 3 times from the previously tripled EMA.",
    "annotation": "\u2705 Best Practice: Using 'pd.Series' with a descriptive name improves the output's interpretability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1675,
      1394,
      340,
      287,
      1627,
      351,
      262,
      4036,
      1366,
      290,
      284,
      4781,
      262,
      19470,
      262,
      1988,
      705,
      27630,
      286,
      412,
      5673,
      6,
      318,
      13284,
      20216,
      513,
      1661,
      422,
      262,
      4271,
      43761,
      412,
      5673,
      13
    ],
    "start_token": 633,
    "end_token": 674,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      30094,
      13,
      27996,
      6,
      351,
      257,
      35644,
      1438,
      19575,
      262,
      5072,
      338,
      6179,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using 'pd.Series' with a descriptive name improves the output's interpretability."
  },
  {
    "line": 169,
    "text": "        TEMA = (",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for trading strategies",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      309,
      27630,
      796,
      357
    ],
    "start_token": 674,
    "end_token": 685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      7313,
      10064
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for trading strategies"
  },
  {
    "line": 170,
    "text": "            triple_ema",
    "annotation": "\u2705 Best Practice: Accessing DataFrame column using a variable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15055,
      62,
      19687
    ],
    "start_token": 685,
    "end_token": 699,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8798,
      278,
      6060,
      19778,
      5721,
      1262,
      257,
      7885
    ],
    "label": "best_practice",
    "reason": "Accessing DataFrame column using a variable"
  },
  {
    "line": 171,
    "text": "            - 3 * cls.EMA(ohlc, period).ewm(span=period, adjust=adjust).mean()",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential moving average, common in financial data analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      513,
      1635,
      537,
      82,
      13,
      27630,
      7,
      1219,
      44601,
      11,
      2278,
      737,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      3419
    ],
    "start_token": 699,
    "end_token": 736,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      3867,
      2811,
      11,
      2219,
      287,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of exponential moving average, common in financial data analysis"
  },
  {
    "line": 173,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Triple application of exponential moving average, indicating a TRIX calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 736,
    "end_token": 744,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19817,
      3586,
      286,
      39682,
      3867,
      2811,
      11,
      12739,
      257,
      37679,
      55,
      17952
    ],
    "label": "ml_signal",
    "reason": "Triple application of exponential moving average, indicating a TRIX calculation"
  },
  {
    "line": 175,
    "text": "        return pd.Series(TEMA, name=\"{0} period TEMA\".format(period))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if `m` contains zero values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7,
      51,
      27630,
      11,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      309,
      27630,
      1911,
      18982,
      7,
      41007,
      4008
    ],
    "start_token": 744,
    "end_token": 773,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      4600,
      76,
      63,
      4909,
      6632,
      3815
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if `m` contains zero values"
  },
  {
    "line": 176,
    "text": "",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 773,
    "end_token": 773,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose"
  },
  {
    "line": 182,
    "text": "        The calculations double-smooth the data using a window width that is one-half the length of the series.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function is not implemented, which may lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      16765,
      4274,
      12,
      5796,
      5226,
      262,
      1366,
      1262,
      257,
      4324,
      9647,
      326,
      318,
      530,
      12,
      13959,
      262,
      4129,
      286,
      262,
      2168,
      13
    ],
    "start_token": 773,
    "end_token": 803,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      318,
      407,
      9177,
      11,
      543,
      743,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function is not implemented, which may lead to runtime errors if called"
  },
  {
    "line": 183,
    "text": "        source: https://www.thebalance.com/triangular-moving-average-tma-description-and-uses-1031203",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to indicate method is bound to the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2723,
      25,
      3740,
      1378,
      2503,
      13,
      1169,
      20427,
      13,
      785,
      14,
      28461,
      21413,
      12,
      31462,
      12,
      23913,
      12,
      83,
      2611,
      12,
      11213,
      12,
      392,
      12,
      2664,
      12,
      15197,
      1065,
      3070
    ],
    "start_token": 803,
    "end_token": 840,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      7603,
      2446,
      318,
      5421,
      284,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to indicate method is bound to the class"
  },
  {
    "line": 186,
    "text": "        SMA = cls.SMA(ohlc, period).rolling(window=period).sum()",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators to enforce input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      311,
      5673,
      796,
      537,
      82,
      13,
      50,
      5673,
      7,
      1219,
      44601,
      11,
      2278,
      737,
      18886,
      7,
      17497,
      28,
      41007,
      737,
      16345,
      3419
    ],
    "start_token": 840,
    "end_token": 869,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      284,
      4605,
      5128,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of decorators to enforce input validation"
  },
  {
    "line": 186,
    "text": "        SMA = cls.SMA(ohlc, period).rolling(window=period).sum()",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      311,
      5673,
      796,
      537,
      82,
      13,
      50,
      5673,
      7,
      1219,
      44601,
      11,
      2278,
      737,
      18886,
      7,
      17497,
      28,
      41007,
      737,
      16345,
      3419
    ],
    "start_token": 869,
    "end_token": 898,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 188,
    "text": "        return pd.Series(SMA / period, name=\"{0} period TRIMA\".format(period))",
    "annotation": "\u2705 Best Practice: Use rolling mean for moving average calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7,
      50,
      5673,
      1220,
      2278,
      11,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      7579,
      3955,
      32,
      1911,
      18982,
      7,
      41007,
      4008
    ],
    "start_token": 898,
    "end_token": 930,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10708,
      1612,
      329,
      3867,
      2811,
      16765
    ],
    "label": "best_practice",
    "reason": "Use rolling mean for moving average calculations"
  },
  {
    "line": 190,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 930,
    "end_token": 936,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 191,
    "text": "    def TRIX(",
    "annotation": "\u2705 Best Practice: Use rolling sum for cumulative calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      37679,
      55,
      7
    ],
    "start_token": 936,
    "end_token": 943,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10708,
      2160,
      329,
      23818,
      16765
    ],
    "label": "best_practice",
    "reason": "Use rolling sum for cumulative calculations"
  },
  {
    "line": 194,
    "text": "        period: int = 20,",
    "annotation": "\u2705 Best Practice: Use rolling sum for cumulative calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2278,
      25,
      493,
      796,
      1160,
      11
    ],
    "start_token": 943,
    "end_token": 956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10708,
      2160,
      329,
      23818,
      16765
    ],
    "label": "best_practice",
    "reason": "Use rolling sum for cumulative calculations"
  },
  {
    "line": 194,
    "text": "        period: int = 20,",
    "annotation": "\u2705 Best Practice: Use format method for string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2278,
      25,
      493,
      796,
      1160,
      11
    ],
    "start_token": 956,
    "end_token": 969,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      5794,
      2446,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use format method for string formatting"
  },
  {
    "line": 199,
    "text": "        The TRIX indicator calculates the rate of change of a triple exponential moving average.",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators for input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      37679,
      55,
      16916,
      43707,
      262,
      2494,
      286,
      1487,
      286,
      257,
      15055,
      39682,
      3867,
      2811,
      13
    ],
    "start_token": 969,
    "end_token": 992,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      329,
      5128,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of decorators for input validation"
  },
  {
    "line": 201,
    "text": "        A (typically) 9 period exponential moving average of the TRIX can be used as a signal line.",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      357,
      48126,
      8,
      860,
      2278,
      39682,
      3867,
      2811,
      286,
      262,
      37679,
      55,
      460,
      307,
      973,
      355,
      257,
      6737,
      1627,
      13
    ],
    "start_token": 992,
    "end_token": 1020,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 201,
    "text": "        A (typically) 9 period exponential moving average of the TRIX can be used as a signal line.",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      357,
      48126,
      8,
      860,
      2278,
      39682,
      3867,
      2811,
      286,
      262,
      37679,
      55,
      460,
      307,
      973,
      355,
      257,
      6737,
      1627,
      13
    ],
    "start_token": 1020,
    "end_token": 1048,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters and return type"
  },
  {
    "line": 207,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1048,
    "end_token": 1048,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the method parameters and return type for better readability and maintainability."
  },
  {
    "line": 211,
    "text": "            return pd.Series(data.ewm(span=period, adjust=adjust).mean())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame and Series from pandas, indicating data manipulation and analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7,
      7890,
      13,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      28955
    ],
    "start_token": 1048,
    "end_token": 1080,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      290,
      7171,
      422,
      19798,
      292,
      11,
      12739,
      1366,
      17512,
      290,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame and Series from pandas, indicating data manipulation and analysis."
  },
  {
    "line": 212,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of volatility using rolling window, a common pattern in time series analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1080,
    "end_token": 1080,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      30772,
      1262,
      10708,
      4324,
      11,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of volatility using rolling window, a common pattern in time series analysis."
  },
  {
    "line": 214,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if volatility contains zero values.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1080,
    "end_token": 1080,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      30772,
      4909,
      6632,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if volatility contains zero values."
  },
  {
    "line": 214,
    "text": "",
    "annotation": "\u2705 Best Practice: The @classmethod decorator should be placed directly above the method definition.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1080,
    "end_token": 1080,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      383,
      2488,
      4871,
      24396,
      11705,
      1352,
      815,
      307,
      4624,
      3264,
      2029,
      262,
      2446,
      6770,
      13
    ],
    "label": "best_practice",
    "reason": "The @classmethod decorator should be placed directly above the method definition."
  },
  {
    "line": 223,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1080,
    "end_token": 1080,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 226,
    "text": "    def VAMA(cls, ohlcv: DataFrame, period: int = 8, column: str = \"close\") -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a class method to calculate a financial indicator.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      569,
      25087,
      7,
      565,
      82,
      11,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      807,
      11,
      5721,
      25,
      965,
      796,
      366,
      19836,
      4943,
      4613,
      7171,
      25
    ],
    "start_token": 1080,
    "end_token": 1113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1398,
      2446,
      284,
      15284,
      257,
      3176,
      16916,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a class method to calculate a financial indicator."
  },
  {
    "line": 228,
    "text": "        Volume Adjusted Moving Average",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like 'smoothing_constant' improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14701,
      45624,
      26768,
      13475
    ],
    "start_token": 1113,
    "end_token": 1124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      705,
      5796,
      1025,
      722,
      62,
      9979,
      415,
      6,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like 'smoothing_constant' improves code readability."
  },
  {
    "line": 235,
    "text": "        cumDiv = volRatio.rolling(window=period).sum()",
    "annotation": "\u2705 Best Practice: Using rolling mean for calculating simple moving average.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10973,
      24095,
      796,
      2322,
      29665,
      952,
      13,
      18886,
      7,
      17497,
      28,
      41007,
      737,
      16345,
      3419
    ],
    "start_token": 1124,
    "end_token": 1146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10708,
      1612,
      329,
      26019,
      2829,
      3867,
      2811,
      13
    ],
    "label": "best_practice",
    "reason": "Using rolling mean for calculating simple moving average."
  },
  {
    "line": 243,
    "text": "        ohlcv: DataFrame,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError or TypeError if 'kama' list is empty or contains non-numeric values.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 1146,
    "end_token": 1160,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      393,
      5994,
      12331,
      611,
      705,
      74,
      1689,
      6,
      1351,
      318,
      6565,
      393,
      4909,
      1729,
      12,
      77,
      39223,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError or TypeError if 'kama' list is empty or contains non-numeric values."
  },
  {
    "line": 251,
    "text": "        in Vidya the smoothing factor is variable and depends on bar-to-bar price movements.\"\"\"",
    "annotation": "\u2705 Best Practice: Using format method for string formatting enhances readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      287,
      38965,
      3972,
      262,
      32746,
      722,
      5766,
      318,
      7885,
      290,
      8338,
      319,
      2318,
      12,
      1462,
      12,
      5657,
      2756,
      8650,
      526,
      15931
    ],
    "start_token": 1160,
    "end_token": 1188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      2446,
      329,
      4731,
      33313,
      32479,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using format method for string formatting enhances readability."
  },
  {
    "line": 256,
    "text": "    def ER(cls, ohlc: DataFrame, period: int = 10, column: str = \"close\") -> Series:",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates that the method operates on the class rather than an instance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      13793,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      838,
      11,
      5721,
      25,
      965,
      796,
      366,
      19836,
      4943,
      4613,
      7171,
      25
    ],
    "start_token": 1188,
    "end_token": 1219,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      326,
      262,
      2446,
      14051,
      319,
      262,
      1398,
      2138,
      621,
      281,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates that the method operates on the class rather than an instance."
  },
  {
    "line": 258,
    "text": "         +100 is upward forex trending market and -100 is downwards trending markets.\"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1343,
      3064,
      318,
      18644,
      1674,
      87,
      29056,
      1910,
      290,
      532,
      3064,
      318,
      44890,
      29056,
      5939,
      526,
      15931
    ],
    "start_token": 1219,
    "end_token": 1244,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 262,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for division by zero if period is 1.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1244,
    "end_token": 1244,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7297,
      416,
      6632,
      611,
      2278,
      318,
      352,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for division by zero if period is 1."
  },
  {
    "line": 266,
    "text": "    def KAMA(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas Series and ewm method indicates time series data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      509,
      25087,
      7
    ],
    "start_token": 1244,
    "end_token": 1251,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      7171,
      290,
      304,
      26377,
      2446,
      9217,
      640,
      2168,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas Series and ewm method indicates time series data processing."
  },
  {
    "line": 273,
    "text": "        column: str = \"close\",",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates method is intended to be called on the class itself.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 1251,
    "end_token": 1265,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates method is intended to be called on the class itself."
  },
  {
    "line": 273,
    "text": "        column: str = \"close\",",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 1265,
    "end_token": 1279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 280,
    "text": "        slow_alpha = 2 / (ema_slow + 1)",
    "annotation": "\u2705 Best Practice: Use of numpy to generate a range of weights for the WMA calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3105,
      62,
      26591,
      796,
      362,
      1220,
      357,
      19687,
      62,
      38246,
      1343,
      352,
      8
    ],
    "start_token": 1279,
    "end_token": 1299,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      284,
      7716,
      257,
      2837,
      286,
      19590,
      329,
      262,
      370,
      5673,
      17952
    ],
    "label": "best_practice",
    "reason": "Use of numpy to generate a range of weights for the WMA calculation"
  },
  {
    "line": 281,
    "text": "        sc = pd.Series(",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      629,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 1299,
    "end_token": 1313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 282,
    "text": "            (er * (fast_alpha - slow_alpha) + slow_alpha) ** 2,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of undefined variables 'w' and 'd' could lead to NameError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      263,
      1635,
      357,
      7217,
      62,
      26591,
      532,
      3105,
      62,
      26591,
      8,
      1343,
      3105,
      62,
      26591,
      8,
      12429,
      362,
      11
    ],
    "start_token": 1313,
    "end_token": 1344,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      28721,
      9633,
      705,
      86,
      6,
      290,
      705,
      67,
      6,
      714,
      1085,
      284,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of undefined variables 'w' and 'd' could lead to NameError"
  },
  {
    "line": 285,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of 'ohlc' and 'column' if not properly validated",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1344,
    "end_token": 1344,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      705,
      1219,
      44601,
      6,
      290,
      705,
      28665,
      6,
      611,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of 'ohlc' and 'column' if not properly validated"
  },
  {
    "line": 286,
    "text": "        sma = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations, common in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      895,
      64,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 1344,
    "end_token": 1359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      11,
      2219,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations, common in time series analysis"
  },
  {
    "line": 288,
    "text": "        )  ## first KAMA is SMA",
    "annotation": "\ud83e\udde0 ML Signal: Use of custom weights in rolling apply, indicating custom aggregation logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      220,
      22492,
      717,
      509,
      25087,
      318,
      311,
      5673
    ],
    "start_token": 1359,
    "end_token": 1375,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2183,
      19590,
      287,
      10708,
      4174,
      11,
      12739,
      2183,
      46500,
      9156
    ],
    "label": "ml_signal",
    "reason": "Use of custom weights in rolling apply, indicating custom aggregation logic"
  },
  {
    "line": 289,
    "text": "        kama = []",
    "annotation": "\u2705 Best Practice: Use of format method for string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      1689,
      796,
      17635
    ],
    "start_token": 1375,
    "end_token": 1386,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      2446,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use of format method for string formatting"
  },
  {
    "line": 289,
    "text": "        kama = []",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameter values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      1689,
      796,
      17635
    ],
    "start_token": 1386,
    "end_token": 1397,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameter values"
  },
  {
    "line": 299,
    "text": "                else:",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1397,
    "end_token": 1414,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names"
  },
  {
    "line": 302,
    "text": "        sma[\"KAMA\"] = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Use of class method for calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      895,
      64,
      14692,
      42,
      25087,
      8973,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 1414,
    "end_token": 1433,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      2446,
      329,
      17952
    ],
    "label": "ml_signal",
    "reason": "Use of class method for calculation"
  },
  {
    "line": 304,
    "text": "        )  ## apply the kama list to existing index",
    "annotation": "\u2705 Best Practice: Use of intermediate variables for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      220,
      22492,
      4174,
      262,
      479,
      1689,
      1351,
      284,
      4683,
      6376
    ],
    "start_token": 1433,
    "end_token": 1451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19898,
      9633,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of intermediate variables for clarity"
  },
  {
    "line": 307,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of class method for calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 1451,
    "end_token": 1457,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      2446,
      329,
      17952
    ],
    "label": "ml_signal",
    "reason": "Use of class method for calculation"
  },
  {
    "line": 308,
    "text": "    def ZLEMA(",
    "annotation": "\u2705 Best Practice: Use of formatted string for naming",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1168,
      2538,
      5673,
      7
    ],
    "start_token": 1457,
    "end_token": 1465,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      39559,
      4731,
      329,
      19264
    ],
    "label": "best_practice",
    "reason": "Use of formatted string for naming"
  },
  {
    "line": 313,
    "text": "        column: str = \"close\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of decorator without validation logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 1465,
    "end_token": 1479,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      11705,
      1352,
      1231,
      21201,
      9156
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of decorator without validation logic"
  },
  {
    "line": 313,
    "text": "        column: str = \"close\",",
    "annotation": "\u2705 Best Practice: Use of rolling window for time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 1479,
    "end_token": 1493,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10708,
      4324,
      329,
      640,
      2168,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of rolling window for time series data"
  },
  {
    "line": 317,
    "text": "        and other trend following indicators. As it follows price closer, it also provides better price averaging and responds better to price swings.\"\"\"",
    "annotation": "\u2705 Best Practice: Vectorized operations for performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      290,
      584,
      5182,
      1708,
      21337,
      13,
      1081,
      340,
      5679,
      2756,
      5699,
      11,
      340,
      635,
      3769,
      1365,
      2756,
      20430,
      290,
      20067,
      1365,
      284,
      2756,
      26728,
      526,
      15931
    ],
    "start_token": 1493,
    "end_token": 1526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20650,
      1143,
      4560,
      329,
      2854
    ],
    "label": "best_practice",
    "reason": "Vectorized operations for performance"
  },
  {
    "line": 321,
    "text": "        ema = pd.Series(",
    "annotation": "\u2705 Best Practice: Use of zip for iterating over two sequences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      795,
      64,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 1526,
    "end_token": 1541,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19974,
      329,
      11629,
      803,
      625,
      734,
      16311
    ],
    "label": "best_practice",
    "reason": "Use of zip for iterating over two sequences"
  },
  {
    "line": 329,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Returning a pandas Series with index and name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1541,
    "end_token": 1549,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      19798,
      292,
      7171,
      351,
      6376,
      290,
      1438
    ],
    "label": "best_practice",
    "reason": "Returning a pandas Series with index and name"
  },
  {
    "line": 330,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorator for input validation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1549,
    "end_token": 1549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      1352,
      329,
      5128,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of decorator for input validation"
  },
  {
    "line": 330,
    "text": "",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1549,
    "end_token": 1549,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and usage."
  },
  {
    "line": 335,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of financial calculations, which could be relevant for financial ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1549,
    "end_token": 1557,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3176,
      16765,
      11,
      543,
      714,
      307,
      5981,
      329,
      3176,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of financial calculations, which could be relevant for financial ML models."
  },
  {
    "line": 335,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'ohlcv' DataFrame has specific columns without validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1557,
    "end_token": 1565,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      48988,
      33967,
      6,
      6060,
      19778,
      468,
      2176,
      15180,
      1231,
      21201,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'ohlcv' DataFrame has specific columns without validation."
  },
  {
    "line": 340,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of cumulative sum, a common pattern in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1565,
    "end_token": 1573,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      23818,
      2160,
      11,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of cumulative sum, a common pattern in time series analysis."
  },
  {
    "line": 347,
    "text": "                return (w * x).sum() / d",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      357,
      86,
      1635,
      2124,
      737,
      16345,
      3419,
      1220,
      288
    ],
    "start_token": 1573,
    "end_token": 1598,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 348,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Exponential Weighted Moving Average (ewm) indicates time series analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1598,
    "end_token": 1598,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      5518,
      35470,
      14331,
      276,
      26768,
      13475,
      357,
      413,
      76,
      8,
      9217,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Exponential Weighted Moving Average (ewm) indicates time series analysis."
  },
  {
    "line": 348,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'column' exists in 'ohlc', which may lead to KeyError if not validated.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1598,
    "end_token": 1598,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      28665,
      6,
      7160,
      287,
      705,
      1219,
      44601,
      3256,
      543,
      743,
      1085,
      284,
      7383,
      12331,
      611,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'column' exists in 'ohlc', which may lead to KeyError if not validated."
  },
  {
    "line": 355,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates method is intended to be called on the class itself.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1598,
    "end_token": 1598,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates method is intended to be called on the class itself."
  },
  {
    "line": 355,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the function's purpose.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1598,
    "end_token": 1598,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the function's purpose."
  },
  {
    "line": 356,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: The commented-out code provides insight into the intended algorithm, useful for understanding developer intent.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 1598,
    "end_token": 1604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      16476,
      12,
      448,
      2438,
      3769,
      11281,
      656,
      262,
      5292,
      11862,
      11,
      4465,
      329,
      4547,
      8517,
      6824,
      13
    ],
    "label": "ml_signal",
    "reason": "The commented-out code provides insight into the intended algorithm, useful for understanding developer intent."
  },
  {
    "line": 369,
    "text": "        half_length = int(period / 2)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The function raises NotImplementedError, indicating incomplete implementation which could lead to runtime errors if called.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2063,
      62,
      13664,
      796,
      493,
      7,
      41007,
      1220,
      362,
      8
    ],
    "start_token": 1604,
    "end_token": 1621,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      2163,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      12739,
      17503,
      7822,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The function raises NotImplementedError, indicating incomplete implementation which could lead to runtime errors if called."
  },
  {
    "line": 371,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates the method is intended to be called on the class itself, not instances.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1621,
    "end_token": 1621,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      262,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      11,
      407,
      10245,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates the method is intended to be called on the class itself, not instances."
  },
  {
    "line": 370,
    "text": "        sqrt_length = int(math.sqrt(period))",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19862,
      17034,
      62,
      13664,
      796,
      493,
      7,
      11018,
      13,
      31166,
      17034,
      7,
      41007,
      4008
    ],
    "start_token": 1621,
    "end_token": 1642,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose"
  },
  {
    "line": 371,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function is not implemented, which may lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1642,
    "end_token": 1642,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      318,
      407,
      9177,
      11,
      543,
      743,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function is not implemented, which may lead to runtime errors if called"
  },
  {
    "line": 374,
    "text": "        ohlc[\"deltawma\"] = 2 * wmaf - wmas",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to define a method that operates on the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      14692,
      67,
      2120,
      707,
      2611,
      8973,
      796,
      362,
      1635,
      266,
      76,
      1878,
      532,
      266,
      5356
    ],
    "start_token": 1642,
    "end_token": 1666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      8160,
      257,
      2446,
      326,
      14051,
      319,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to define a method that operates on the class"
  },
  {
    "line": 374,
    "text": "        ohlc[\"deltawma\"] = 2 * wmaf - wmas",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function and its parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      14692,
      67,
      2120,
      707,
      2611,
      8973,
      796,
      362,
      1635,
      266,
      76,
      1878,
      532,
      266,
      5356
    ],
    "start_token": 1666,
    "end_token": 1690,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function and its parameters"
  },
  {
    "line": 381,
    "text": "    def EVWMA(cls, ohlcv: DataFrame, period: int = 20) -> Series:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert with a function call that has side effects (print)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      8696,
      54,
      5673,
      7,
      565,
      82,
      11,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1160,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 1690,
    "end_token": 1717,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      351,
      257,
      2163,
      869,
      326,
      468,
      1735,
      3048,
      357,
      4798,
      8
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert with a function call that has side effects (print)"
  },
  {
    "line": 383,
    "text": "        The eVWMA can be looked at as an approximation to the",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame and Series, common in data processing tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      304,
      30133,
      5673,
      460,
      307,
      3114,
      379,
      355,
      281,
      40874,
      284,
      262
    ],
    "start_token": 1717,
    "end_token": 1737,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      290,
      7171,
      11,
      2219,
      287,
      1366,
      7587,
      8861
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame and Series, common in data processing tasks"
  },
  {
    "line": 395,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of np.clip to ensure values are within a specified range",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1737,
    "end_token": 1737,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      45941,
      13,
      15036,
      284,
      4155,
      3815,
      389,
      1626,
      257,
      7368,
      2837
    ],
    "label": "best_practice",
    "reason": "Use of np.clip to ensure values are within a specified range"
  },
  {
    "line": 401,
    "text": "                evwma.append(0)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a pandas Series, indicating time series data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      819,
      86,
      2611,
      13,
      33295,
      7,
      15,
      8
    ],
    "start_token": 1737,
    "end_token": 1760,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      19798,
      292,
      7171,
      11,
      12739,
      640,
      2168,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Returning a pandas Series, indicating time series data processing"
  },
  {
    "line": 401,
    "text": "                evwma.append(0)",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      819,
      86,
      2611,
      13,
      33295,
      7,
      15,
      8
    ],
    "start_token": 1760,
    "end_token": 1783,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition"
  },
  {
    "line": 410,
    "text": "    @inputvalidator(input_=\"ohlcv\")",
    "annotation": "\u2705 Best Practice: Docstring provides a detailed explanation of the MACD calculation and its components.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      15414,
      12102,
      1352,
      7,
      15414,
      62,
      2625,
      48988,
      33967,
      4943
    ],
    "start_token": 1783,
    "end_token": 1797,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      6496,
      7468,
      286,
      262,
      20582,
      35,
      17952,
      290,
      663,
      6805,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a detailed explanation of the MACD calculation and its components."
  },
  {
    "line": 422,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Exponential Moving Average (EMA) for financial data analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1797,
    "end_token": 1797,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      5518,
      35470,
      26768,
      13475,
      357,
      27630,
      8,
      329,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Exponential Moving Average (EMA) for financial data analysis."
  },
  {
    "line": 426,
    "text": "        ohlc: DataFrame,",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of slow EMA for MACD.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 1797,
    "end_token": 1810,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      3105,
      412,
      5673,
      329,
      20582,
      35,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of slow EMA for MACD."
  },
  {
    "line": 434,
    "text": "            ohlc[column].ewm(alpha=1 / period, adjust=adjust).mean(), name=\"SMMA\"",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD line as the difference between fast and slow EMA.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      58,
      28665,
      4083,
      413,
      76,
      7,
      26591,
      28,
      16,
      1220,
      2278,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784,
      1438,
      2625,
      12310,
      5673,
      1
    ],
    "start_token": 1810,
    "end_token": 1846,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      1627,
      355,
      262,
      3580,
      1022,
      3049,
      290,
      3105,
      412,
      5673,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD line as the difference between fast and slow EMA."
  },
  {
    "line": 434,
    "text": "            ohlc[column].ewm(alpha=1 / period, adjust=adjust).mean(), name=\"SMMA\"",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD signal line using EMA.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      58,
      28665,
      4083,
      413,
      76,
      7,
      26591,
      28,
      16,
      1220,
      2278,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784,
      1438,
      2625,
      12310,
      5673,
      1
    ],
    "start_token": 1846,
    "end_token": 1882,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      6737,
      1627,
      1262,
      412,
      5673,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD signal line using EMA."
  },
  {
    "line": 436,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a DataFrame with both MACD and signal line for further analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1882,
    "end_token": 1882,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      351,
      1111,
      20582,
      35,
      290,
      6737,
      1627,
      329,
      2252,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame with both MACD and signal line for further analysis."
  },
  {
    "line": 445,
    "text": "        m = offset * (size - 1)",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      285,
      796,
      11677,
      1635,
      357,
      7857,
      532,
      352,
      8
    ],
    "start_token": 1882,
    "end_token": 1898,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior"
  },
  {
    "line": 451,
    "text": "        sum = sum + dataWindow[i] * coeff",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2160,
      796,
      2160,
      1343,
      1366,
      27703,
      58,
      72,
      60,
      1635,
      763,
      14822
    ],
    "start_token": 1898,
    "end_token": 1917,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for clarity"
  },
  {
    "line": 455,
    "text": "        raise NotImplementedError",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 1917,
    "end_token": 1930,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for clarity"
  },
  {
    "line": 463,
    "text": "    def FRAMA(cls, ohlc: DataFrame, period: int = 16, batch: int=10) -> Series:",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      8782,
      25087,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1467,
      11,
      15458,
      25,
      493,
      28,
      940,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 1930,
    "end_token": 1961,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for clarity"
  },
  {
    "line": 464,
    "text": "        \"\"\"Fractal Adaptive Moving Average",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      37,
      974,
      282,
      30019,
      425,
      26768,
      13475
    ],
    "start_token": 1961,
    "end_token": 1976,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for clarity"
  },
  {
    "line": 467,
    "text": "",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1976,
    "end_token": 1976,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for clarity"
  },
  {
    "line": 467,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a DataFrame with concatenated series for structured output",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1976,
    "end_token": 1976,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      351,
      1673,
      36686,
      515,
      2168,
      329,
      20793,
      5072
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame with concatenated series for structured output"
  },
  {
    "line": 472,
    "text": "        assert period % 2 == 0, print(\"FRAMA period must be even\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of decorators if input validation is not properly handled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      2278,
      4064,
      362,
      6624,
      657,
      11,
      3601,
      7203,
      10913,
      25087,
      2278,
      1276,
      307,
      772,
      4943
    ],
    "start_token": 1976,
    "end_token": 1999,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      11705,
      2024,
      611,
      5128,
      21201,
      318,
      407,
      6105,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of decorators if input validation is not properly handled"
  },
  {
    "line": 474,
    "text": "        c = ohlc.close.copy()",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators to enforce input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      796,
      11752,
      44601,
      13,
      19836,
      13,
      30073,
      3419
    ],
    "start_token": 1999,
    "end_token": 2015,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      284,
      4605,
      5128,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of decorators to enforce input validation"
  },
  {
    "line": 476,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and origin.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2015,
    "end_token": 2015,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8159,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and origin."
  },
  {
    "line": 479,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of volume-weighted calculations for financial indicators.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2015,
    "end_token": 2015,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6115,
      12,
      6551,
      276,
      16765,
      329,
      3176,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of volume-weighted calculations for financial indicators."
  },
  {
    "line": 479,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted moving average for fast period.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2015,
    "end_token": 2015,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      3867,
      2811,
      329,
      3049,
      2278,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted moving average for fast period."
  },
  {
    "line": 488,
    "text": "        D = (np.log(n1 + n2) - np.log(n3)) / np.log(2)",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted moving average for slow period.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      360,
      796,
      357,
      37659,
      13,
      6404,
      7,
      77,
      16,
      1343,
      299,
      17,
      8,
      532,
      45941,
      13,
      6404,
      7,
      77,
      18,
      4008,
      1220,
      45941,
      13,
      6404,
      7,
      17,
      8
    ],
    "start_token": 2015,
    "end_token": 2050,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      3867,
      2811,
      329,
      3105,
      2278,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted moving average for slow period."
  },
  {
    "line": 501,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD line from fast and slow indicators.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 2050,
    "end_token": 2056,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      1627,
      422,
      3049,
      290,
      3105,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD line from fast and slow indicators."
  },
  {
    "line": 504,
    "text": "        ohlc: DataFrame,",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD signal line using exponential weighted moving average.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 2056,
    "end_token": 2069,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      6737,
      1627,
      1262,
      39682,
      26356,
      3867,
      2811,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD signal line using exponential weighted moving average."
  },
  {
    "line": 504,
    "text": "        ohlc: DataFrame,",
    "annotation": "\u2705 Best Practice: Returning a DataFrame with both MACD and SIGNAL columns for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 2069,
    "end_token": 2082,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      351,
      1111,
      20582,
      35,
      290,
      36771,
      1847,
      15180,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame with both MACD and SIGNAL columns for clarity."
  },
  {
    "line": 509,
    "text": "        adjust: bool = True,",
    "annotation": "\u2705 Best Practice: Use of classmethod decorator for methods that operate on class-level data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 2082,
    "end_token": 2095,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      12,
      5715,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of classmethod decorator for methods that operate on class-level data."
  },
  {
    "line": 512,
    "text": "        MACD, MACD Signal and MACD difference.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if input validation is not properly implemented in inputvalidator.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      11,
      20582,
      35,
      26484,
      290,
      20582,
      35,
      3580,
      13
    ],
    "start_token": 2095,
    "end_token": 2113,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      5128,
      21201,
      318,
      407,
      6105,
      9177,
      287,
      5128,
      12102,
      1352,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if input validation is not properly implemented in inputvalidator."
  },
  {
    "line": 512,
    "text": "        MACD, MACD Signal and MACD difference.",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function and its parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      11,
      20582,
      35,
      26484,
      290,
      20582,
      35,
      3580,
      13
    ],
    "start_token": 2113,
    "end_token": 2131,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function and its parameters"
  },
  {
    "line": 520,
    "text": "        As a moving average of the indicator, it trails the MACD and makes it easier to spot MACD turns.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom method EVWMA for financial calculations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1081,
      257,
      3867,
      2811,
      286,
      262,
      16916,
      11,
      340,
      19196,
      262,
      20582,
      35,
      290,
      1838,
      340,
      4577,
      284,
      4136,
      20582,
      35,
      4962,
      13
    ],
    "start_token": 2131,
    "end_token": 2161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      2446,
      8696,
      54,
      5673,
      329,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Usage of custom method EVWMA for financial calculations"
  },
  {
    "line": 522,
    "text": "        A bearish crossover occurs when the MACD turns down and crosses below the signal line.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom method EVWMA for financial calculations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      6842,
      680,
      27668,
      8833,
      618,
      262,
      20582,
      35,
      4962,
      866,
      290,
      24234,
      2174,
      262,
      6737,
      1627,
      13
    ],
    "start_token": 2161,
    "end_token": 2186,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      2446,
      8696,
      54,
      5673,
      329,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Usage of custom method EVWMA for financial calculations"
  },
  {
    "line": 525,
    "text": "        EMA_fast = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD using financial data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      412,
      5673,
      62,
      7217,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 2186,
    "end_token": 2203,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      1262,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD using financial data"
  },
  {
    "line": 525,
    "text": "        EMA_fast = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average for signal line",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      412,
      5673,
      62,
      7217,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 2203,
    "end_token": 2220,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      329,
      6737,
      1627
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average for signal line"
  },
  {
    "line": 531,
    "text": "            name=\"EMA_slow\",",
    "annotation": "\u2705 Best Practice: Returning a DataFrame with concatenated results for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      27630,
      62,
      38246,
      1600
    ],
    "start_token": 2220,
    "end_token": 2237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      351,
      1673,
      36686,
      515,
      2482,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame with concatenated results for clarity"
  },
  {
    "line": 531,
    "text": "            name=\"EMA_slow\",",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on class level",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      27630,
      62,
      38246,
      1600
    ],
    "start_token": 2237,
    "end_token": 2254,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      1241
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on class level"
  },
  {
    "line": 527,
    "text": "            name=\"EMA_fast\",",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      27630,
      62,
      7217,
      1600
    ],
    "start_token": 2254,
    "end_token": 2271,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 531,
    "text": "            name=\"EMA_slow\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of a fixed time interval for calculating momentum is a common pattern in financial analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      27630,
      62,
      38246,
      1600
    ],
    "start_token": 2271,
    "end_token": 2288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      5969,
      640,
      16654,
      329,
      26019,
      12858,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a fixed time interval for calculating momentum is a common pattern in financial analysis."
  },
  {
    "line": 533,
    "text": "        MACD = pd.Series(EMA_fast - EMA_slow, name=\"MACD\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if the specified column does not exist in the DataFrame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      796,
      279,
      67,
      13,
      27996,
      7,
      27630,
      62,
      7217,
      532,
      412,
      5673,
      62,
      38246,
      11,
      1438,
      2625,
      44721,
      35,
      4943
    ],
    "start_token": 2288,
    "end_token": 2317,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      262,
      7368,
      5721,
      857,
      407,
      2152,
      287,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if the specified column does not exist in the DataFrame."
  },
  {
    "line": 534,
    "text": "        MACD_signal = pd.Series(",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      62,
      12683,
      282,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 2317,
    "end_token": 2335,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      326,
      262,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      11,
      407,
      319,
      10245,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances."
  },
  {
    "line": 533,
    "text": "        MACD = pd.Series(EMA_fast - EMA_slow, name=\"MACD\")",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      796,
      279,
      67,
      13,
      27996,
      7,
      27630,
      62,
      7217,
      532,
      412,
      5673,
      62,
      38246,
      11,
      1438,
      2625,
      44721,
      35,
      4943
    ],
    "start_token": 2335,
    "end_token": 2364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 537,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of financial indicators like ROC can be a feature in ML models for stock price prediction.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2364,
    "end_token": 2364,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3176,
      21337,
      588,
      371,
      4503,
      460,
      307,
      257,
      3895,
      287,
      10373,
      4981,
      329,
      4283,
      2756,
      17724,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of financial indicators like ROC can be a feature in ML models for stock price prediction."
  },
  {
    "line": 537,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'column' exists in 'ohlc', which may lead to a KeyError if it doesn't.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2364,
    "end_token": 2364,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      28665,
      6,
      7160,
      287,
      705,
      1219,
      44601,
      3256,
      543,
      743,
      1085,
      284,
      257,
      7383,
      12331,
      611,
      340,
      1595,
      470,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'column' exists in 'ohlc', which may lead to a KeyError if it doesn't."
  },
  {
    "line": 541,
    "text": "    def PPO(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if ohlc[column].shift(period) contains zero values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      350,
      16402,
      7
    ],
    "start_token": 2364,
    "end_token": 2371,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      11752,
      44601,
      58,
      28665,
      4083,
      30846,
      7,
      41007,
      8,
      4909,
      6632,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if ohlc[column].shift(period) contains zero values."
  },
  {
    "line": 541,
    "text": "    def PPO(",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      350,
      16402,
      7
    ],
    "start_token": 2371,
    "end_token": 2378,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      326,
      262,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      11,
      407,
      319,
      10245,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances."
  },
  {
    "line": 548,
    "text": "        adjust: bool = True,",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and calculation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 2378,
    "end_token": 2391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      17952,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and calculation."
  },
  {
    "line": 553,
    "text": "        As with MACD, the PPO reflects the convergence and divergence of two moving averages.",
    "annotation": "\ud83e\udde0 ML Signal: Use of financial indicators like VBM can be a feature in ML models for trading strategies.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1081,
      351,
      20582,
      35,
      11,
      262,
      350,
      16402,
      12497,
      262,
      40826,
      290,
      43366,
      286,
      734,
      3867,
      25694,
      13
    ],
    "start_token": 2391,
    "end_token": 2416,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3176,
      21337,
      588,
      569,
      12261,
      460,
      307,
      257,
      3895,
      287,
      10373,
      4981,
      329,
      7313,
      10064,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of financial indicators like VBM can be a feature in ML models for trading strategies."
  },
  {
    "line": 553,
    "text": "        As with MACD, the PPO reflects the convergence and divergence of two moving averages.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if ATR returns zero; ensure ATR is never zero.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1081,
      351,
      20582,
      35,
      11,
      262,
      350,
      16402,
      12497,
      262,
      40826,
      290,
      43366,
      286,
      734,
      3867,
      25694,
      13
    ],
    "start_token": 2416,
    "end_token": 2441,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      5161,
      49,
      5860,
      6632,
      26,
      4155,
      5161,
      49,
      318,
      1239,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if ATR returns zero; ensure ATR is never zero."
  },
  {
    "line": 568,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2441,
    "end_token": 2449,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 579,
    "text": "        period_slow: int = 26,",
    "annotation": "\ud83e\udde0 ML Signal: Use of financial indicators like RSI can be a feature in trading algorithms.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2278,
      62,
      38246,
      25,
      493,
      796,
      2608,
      11
    ],
    "start_token": 2449,
    "end_token": 2464,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3176,
      21337,
      588,
      371,
      11584,
      460,
      307,
      257,
      3895,
      287,
      7313,
      16113,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of financial indicators like RSI can be a feature in trading algorithms."
  },
  {
    "line": 588,
    "text": "        _fast = pd.Series(",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7217,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 2464,
    "end_token": 2479,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and usage."
  },
  {
    "line": 593,
    "text": "                .mean()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of RSI and IFT can indicate trading strategy patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      32604,
      3419
    ],
    "start_token": 2479,
    "end_token": 2497,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      371,
      11584,
      290,
      314,
      9792,
      460,
      7603,
      7313,
      4811,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of RSI and IFT can indicate trading strategy patterns."
  },
  {
    "line": 595,
    "text": "            name=\"_fast\",",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names like 'd' and 'weights' improves readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      62,
      7217,
      1600
    ],
    "start_token": 2497,
    "end_token": 2513,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      588,
      705,
      67,
      6,
      290,
      705,
      43775,
      6,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names like 'd' and 'weights' improves readability."
  },
  {
    "line": 597,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of weights for WMA can be a pattern for feature engineering.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2513,
    "end_token": 2513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      19590,
      329,
      370,
      5673,
      460,
      307,
      257,
      3912,
      329,
      3895,
      8705,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of weights for WMA can be a pattern for feature engineering."
  },
  {
    "line": 595,
    "text": "            name=\"_fast\",",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a single parameter, common in mathematical operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      62,
      7217,
      1600
    ],
    "start_token": 2513,
    "end_token": 2529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2060,
      11507,
      11,
      2219,
      287,
      18069,
      4560
    ],
    "label": "ml_signal",
    "reason": "Function definition with a single parameter, common in mathematical operations"
  },
  {
    "line": 600,
    "text": "            / (",
    "annotation": "\ud83e\udde0 ML Signal: Usage of apply with a custom function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1220,
      357
    ],
    "start_token": 2529,
    "end_token": 2542,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4174,
      351,
      257,
      2183,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of apply with a custom function"
  },
  {
    "line": 602,
    "text": "                .ewm(ignore_na=False, span=period_slow, adjust=adjust)",
    "annotation": "\ud83e\udde0 ML Signal: Creation of a pandas Series with mathematical operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      413,
      76,
      7,
      46430,
      62,
      2616,
      28,
      25101,
      11,
      11506,
      28,
      41007,
      62,
      38246,
      11,
      4532,
      28,
      23032,
      8
    ],
    "start_token": 2542,
    "end_token": 2577,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      257,
      19798,
      292,
      7171,
      351,
      18069,
      4560
    ],
    "label": "ml_signal",
    "reason": "Creation of a pandas Series with mathematical operations"
  },
  {
    "line": 605,
    "text": "            name=\"_slow\",",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      62,
      38246,
      1600
    ],
    "start_token": 2577,
    "end_token": 2593,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose"
  },
  {
    "line": 606,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function is not implemented, which may lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2593,
    "end_token": 2601,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      318,
      407,
      9177,
      11,
      543,
      743,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function is not implemented, which may lead to runtime errors if called"
  },
  {
    "line": 611,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters and type hints",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2601,
    "end_token": 2609,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007,
      290,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters and type hints"
  },
  {
    "line": 625,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of lambda for inline function definition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2609,
    "end_token": 2617,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      26098,
      2163,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of lambda for inline function definition"
  },
  {
    "line": 627,
    "text": "        calculated using two EVWMA's.",
    "annotation": "\ud83e\udde0 ML Signal: Data transformation and normalization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10488,
      1262,
      734,
      8696,
      54,
      5673,
      338,
      13
    ],
    "start_token": 2617,
    "end_token": 2632,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      13389,
      290,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Data transformation and normalization"
  },
  {
    "line": 629,
    "text": "        :period_slow: Specifies the number of Periods used for the slow EVWMA calculation",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if 'index' is out of bounds for 't'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      41007,
      62,
      38246,
      25,
      18291,
      6945,
      262,
      1271,
      286,
      18581,
      82,
      973,
      329,
      262,
      3105,
      8696,
      54,
      5673,
      17952
    ],
    "start_token": 2632,
    "end_token": 2659,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      705,
      9630,
      6,
      318,
      503,
      286,
      22303,
      329,
      705,
      83,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if 'index' is out of bounds for 't'"
  },
  {
    "line": 634,
    "text": "        evwma_slow = cls.EVWMA(ohlcv, period_slow)",
    "annotation": "\ud83e\udde0 ML Signal: Use of RSI calculation, which is a common financial indicator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      819,
      86,
      2611,
      62,
      38246,
      796,
      537,
      82,
      13,
      20114,
      54,
      5673,
      7,
      48988,
      33967,
      11,
      2278,
      62,
      38246,
      8
    ],
    "start_token": 2659,
    "end_token": 2686,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      371,
      11584,
      17952,
      11,
      543,
      318,
      257,
      2219,
      3176,
      16916
    ],
    "label": "ml_signal",
    "reason": "Use of RSI calculation, which is a common financial indicator"
  },
  {
    "line": 636,
    "text": "        evwma_fast = cls.EVWMA(ohlcv, period_fast)",
    "annotation": "\ud83e\udde0 ML Signal: Use of time series data for financial analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      819,
      86,
      2611,
      62,
      7217,
      796,
      537,
      82,
      13,
      20114,
      54,
      5673,
      7,
      48988,
      33967,
      11,
      2278,
      62,
      7217,
      8
    ],
    "start_token": 2686,
    "end_token": 2713,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      640,
      2168,
      1366,
      329,
      3176,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of time series data for financial analysis"
  },
  {
    "line": 637,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly specify dtype for Series for better performance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2713,
    "end_token": 2713,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      288,
      4906,
      329,
      7171,
      329,
      1365,
      2854
    ],
    "label": "best_practice",
    "reason": "Explicitly specify dtype for Series for better performance"
  },
  {
    "line": 640,
    "text": "            MACD.ewm(ignore_na=False, span=signal, adjust=adjust).mean(), name=\"SIGNAL\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'column' is not in 'ohlc'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      13,
      413,
      76,
      7,
      46430,
      62,
      2616,
      28,
      25101,
      11,
      11506,
      28,
      12683,
      282,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784,
      1438,
      2625,
      46224,
      1847,
      1
    ],
    "start_token": 2713,
    "end_token": 2752,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      28665,
      6,
      318,
      407,
      287,
      705,
      1219,
      44601,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'column' is not in 'ohlc'"
  },
  {
    "line": 640,
    "text": "            MACD.ewm(ignore_na=False, span=signal, adjust=adjust).mean(), name=\"SIGNAL\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of map with a lambda function for transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20582,
      35,
      13,
      413,
      76,
      7,
      46430,
      62,
      2616,
      28,
      25101,
      11,
      11506,
      28,
      12683,
      282,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784,
      1438,
      2625,
      46224,
      1847,
      1
    ],
    "start_token": 2752,
    "end_token": 2791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3975,
      351,
      257,
      37456,
      2163,
      329,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of map with a lambda function for transformation"
  },
  {
    "line": 644,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial data (ohlc) to calculate technical indicators",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2791,
    "end_token": 2791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      1366,
      357,
      1219,
      44601,
      8,
      284,
      15284,
      6276,
      21337
    ],
    "label": "ml_signal",
    "reason": "Usage of financial data (ohlc) to calculate technical indicators"
  },
  {
    "line": 645,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of price range differences",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 2791,
    "end_token": 2797,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2756,
      2837,
      5400
    ],
    "label": "ml_signal",
    "reason": "Calculation of price range differences"
  },
  {
    "line": 651,
    "text": "        return pd.Series(ohlc[column].diff(period), name=\"MOM\".format(period))",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of price range differences",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7,
      1219,
      44601,
      58,
      28665,
      4083,
      26069,
      7,
      41007,
      828,
      1438,
      2625,
      44,
      2662,
      1911,
      18982,
      7,
      41007,
      4008
    ],
    "start_token": 2797,
    "end_token": 2828,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2756,
      2837,
      5400
    ],
    "label": "ml_signal",
    "reason": "Calculation of price range differences"
  },
  {
    "line": 653,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Concatenation of multiple Series for comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 2828,
    "end_token": 2834,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      341,
      286,
      3294,
      7171,
      329,
      7208
    ],
    "label": "ml_signal",
    "reason": "Concatenation of multiple Series for comparison"
  },
  {
    "line": 656,
    "text": "        is a pure momentum oscillator that measures the percent change in price from one period to the next.",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of maximum value across different price ranges",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      318,
      257,
      5899,
      12858,
      24969,
      1352,
      326,
      5260,
      262,
      1411,
      1487,
      287,
      2756,
      422,
      530,
      2278,
      284,
      262,
      1306,
      13
    ],
    "start_token": 2834,
    "end_token": 2861,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      5415,
      1988,
      1973,
      1180,
      2756,
      16069
    ],
    "label": "ml_signal",
    "reason": "Calculation of maximum value across different price ranges"
  },
  {
    "line": 658,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a named Series for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2861,
    "end_token": 2861,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Returning a named Series for clarity"
  },
  {
    "line": 658,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2861,
    "end_token": 2861,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition"
  },
  {
    "line": 655,
    "text": "        \"\"\"The Rate-of-Change (ROC) indicator, which is also referred to as simply Momentum,",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      14806,
      12,
      1659,
      12,
      19400,
      357,
      49,
      4503,
      8,
      16916,
      11,
      543,
      318,
      635,
      6412,
      284,
      355,
      2391,
      29278,
      388,
      11
    ],
    "start_token": 2861,
    "end_token": 2891,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type for better readability and maintainability"
  },
  {
    "line": 658,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class method to calculate a financial indicator",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2891,
    "end_token": 2891,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      2446,
      284,
      15284,
      257,
      3176,
      16916
    ],
    "label": "ml_signal",
    "reason": "Usage of class method to calculate a financial indicator"
  },
  {
    "line": 658,
    "text": "",
    "annotation": "\u2705 Best Practice: Use f-string for better readability and performance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2891,
    "end_token": 2891,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1365,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use f-string for better readability and performance"
  },
  {
    "line": 664,
    "text": "    def VBM(",
    "annotation": "\u2705 Best Practice: Decorator should be placed directly above the method it decorates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      569,
      12261,
      7
    ],
    "start_token": 2891,
    "end_token": 2898,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      815,
      307,
      4624,
      3264,
      2029,
      262,
      2446,
      340,
      11705,
      689
    ],
    "label": "best_practice",
    "reason": "Decorator should be placed directly above the method it decorates"
  },
  {
    "line": 664,
    "text": "    def VBM(",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      569,
      12261,
      7
    ],
    "start_token": 2898,
    "end_token": 2905,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior."
  },
  {
    "line": 669,
    "text": "        column: str = \"close\",",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of variables with first data point values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 2905,
    "end_token": 2919,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      9633,
      351,
      717,
      1366,
      966,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Initialization of variables with first data point values."
  },
  {
    "line": 671,
    "text": "        \"\"\"The Volatility-Based-Momentum (VBM) indicator, The calculation for a volatility based momentum (VBM)",
    "annotation": "\ud83e\udde0 ML Signal: Use of standard deviation for initial SAR value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      4709,
      18486,
      12,
      15001,
      12,
      29252,
      298,
      388,
      357,
      53,
      12261,
      8,
      16916,
      11,
      383,
      17952,
      329,
      257,
      30772,
      1912,
      12858,
      357,
      53,
      12261,
      8
    ],
    "start_token": 2919,
    "end_token": 2953,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3210,
      28833,
      329,
      4238,
      47341,
      1988,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of standard deviation for initial SAR value."
  },
  {
    "line": 674,
    "text": "        VBM(n,v) = (Close \u2014 Close n periods ago) / ATR(v periods)",
    "annotation": "\ud83e\udde0 ML Signal: Iterative pattern over financial data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      569,
      12261,
      7,
      77,
      11,
      85,
      8,
      796,
      357,
      26125,
      851,
      13872,
      299,
      9574,
      2084,
      8,
      1220,
      5161,
      49,
      7,
      85,
      9574,
      8
    ],
    "start_token": 2953,
    "end_token": 2983,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      876,
      3912,
      625,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterative pattern over financial data."
  },
  {
    "line": 696,
    "text": "        RSI can also be used to identify the general trend.\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if ohlc.index is not unique or not aligned with _sar length.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      371,
      11584,
      460,
      635,
      307,
      973,
      284,
      5911,
      262,
      2276,
      5182,
      526,
      15931
    ],
    "start_token": 2983,
    "end_token": 3003,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      11752,
      44601,
      13,
      9630,
      318,
      407,
      3748,
      393,
      407,
      19874,
      351,
      4808,
      82,
      283,
      4129,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if ohlc.index is not unique or not aligned with _sar length."
  },
  {
    "line": 703,
    "text": "        up[up < 0] = 0",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      510,
      58,
      929,
      1279,
      657,
      60,
      796,
      657
    ],
    "start_token": 3003,
    "end_token": 3018,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition."
  },
  {
    "line": 696,
    "text": "        RSI can also be used to identify the general trend.\"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      371,
      11584,
      460,
      635,
      307,
      973,
      284,
      5911,
      262,
      2276,
      5182,
      526,
      15931
    ],
    "start_token": 3018,
    "end_token": 3038,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 705,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial data (ohlc) for technical analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3038,
    "end_token": 3038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      1366,
      357,
      1219,
      44601,
      8,
      329,
      6276,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial data (ohlc) for technical analysis."
  },
  {
    "line": 755,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for index out of range if ohlc is empty.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3038,
    "end_token": 3046,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6376,
      503,
      286,
      2837,
      611,
      11752,
      44601,
      318,
      6565,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for index out of range if ohlc is empty."
  },
  {
    "line": 756,
    "text": "        The Dynamic Momentum Index is a variable term RSI. The RSI term varies from 3 to 30. The variable",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Incorrect variable assignment, psarbear should be assigned to psarbear.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      26977,
      29278,
      388,
      12901,
      318,
      257,
      7885,
      3381,
      371,
      11584,
      13,
      383,
      371,
      11584,
      3381,
      17806,
      422,
      513,
      284,
      1542,
      13,
      383,
      7885
    ],
    "start_token": 3046,
    "end_token": 3077,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3457,
      47315,
      7885,
      16237,
      11,
      26692,
      283,
      33227,
      815,
      307,
      8686,
      284,
      26692,
      283,
      33227,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Incorrect variable assignment, psarbear should be assigned to psarbear."
  },
  {
    "line": 758,
    "text": "        the shorter the time period is. It is interpreted in the same way as the RSI, but provides signals earlier.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Incorrect variable assignment, psarbull should be assigned to psarbull.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      12238,
      262,
      640,
      2278,
      318,
      13,
      632,
      318,
      16173,
      287,
      262,
      976,
      835,
      355,
      262,
      371,
      11584,
      11,
      475,
      3769,
      10425,
      2961,
      13
    ],
    "start_token": 3077,
    "end_token": 3108,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3457,
      47315,
      7885,
      16237,
      11,
      26692,
      283,
      16308,
      815,
      307,
      8686,
      284,
      26692,
      283,
      16308,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Incorrect variable assignment, psarbull should be assigned to psarbull."
  },
  {
    "line": 766,
    "text": "            sd = close.rolling(5).std()",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters and type hints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      45647,
      796,
      1969,
      13,
      18886,
      7,
      20,
      737,
      19282,
      3419
    ],
    "start_token": 3108,
    "end_token": 3129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007,
      290,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters and type hints"
  },
  {
    "line": 775,
    "text": "            time = t.iloc[index]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'column' does not exist in 'ohlc'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      796,
      256,
      13,
      346,
      420,
      58,
      9630,
      60
    ],
    "start_token": 3129,
    "end_token": 3149,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      28665,
      6,
      857,
      407,
      2152,
      287,
      705,
      1219,
      44601,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'column' does not exist in 'ohlc'"
  },
  {
    "line": 777,
    "text": "                subset = ohlc.iloc[0:index]",
    "annotation": "\u2705 Best Practice: Use isinstance to check the type of 'MA'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24637,
      796,
      11752,
      44601,
      13,
      346,
      420,
      58,
      15,
      25,
      9630,
      60
    ],
    "start_token": 3149,
    "end_token": 3176,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      705,
      5673,
      6
    ],
    "label": "best_practice",
    "reason": "Use isinstance to check the type of 'MA'"
  },
  {
    "line": 779,
    "text": "                subset = ohlc.iloc[(index - time) : index]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential AttributeError if 'SMA' is not defined in 'cls'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24637,
      796,
      11752,
      44601,
      13,
      346,
      420,
      58,
      7,
      9630,
      532,
      640,
      8,
      1058,
      6376,
      60
    ],
    "start_token": 3176,
    "end_token": 3207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3460,
      4163,
      12331,
      611,
      705,
      50,
      5673,
      6,
      318,
      407,
      5447,
      287,
      705,
      565,
      82,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential AttributeError if 'SMA' is not defined in 'cls'"
  },
  {
    "line": 782,
    "text": "        dates = Series(ohlc.index)",
    "annotation": "\u2705 Best Practice: Use pd.concat for combining Series into a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9667,
      796,
      7171,
      7,
      1219,
      44601,
      13,
      9630,
      8
    ],
    "start_token": 3207,
    "end_token": 3223,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      7171,
      656,
      257,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use pd.concat for combining Series into a DataFrame"
  },
  {
    "line": 787,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use @classmethod decorator for methods that operate on the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 3223,
    "end_token": 3229,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use @classmethod decorator for methods that operate on the class"
  },
  {
    "line": 789,
    "text": "        \"\"\"True Range is the maximum of three price ranges.",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      17821,
      13667,
      318,
      262,
      5415,
      286,
      1115,
      2756,
      16069,
      13
    ],
    "start_token": 3229,
    "end_token": 3247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior"
  },
  {
    "line": 795,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a technical analysis function to calculate bands",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3247,
    "end_token": 3247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      6276,
      3781,
      2163,
      284,
      15284,
      11760
    ],
    "label": "ml_signal",
    "reason": "Usage of a technical analysis function to calculate bands"
  },
  {
    "line": 795,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if TA.BBANDS is not properly validated or sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3247,
    "end_token": 3247,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      21664,
      13,
      15199,
      1565,
      5258,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if TA.BBANDS is not properly validated or sanitized"
  },
  {
    "line": 797,
    "text": "            ohlc[\"high\"] - ohlc[\"close\"].shift()",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame, which is a common pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      14692,
      8929,
      8973,
      532,
      11752,
      44601,
      14692,
      19836,
      1,
      4083,
      30846,
      3419
    ],
    "start_token": 3247,
    "end_token": 3272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame, which is a common pattern in data processing"
  },
  {
    "line": 800,
    "text": "        TR3 = pd.Series(",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7579,
      18,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 3272,
    "end_token": 3287,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition"
  },
  {
    "line": 800,
    "text": "        TR3 = pd.Series(",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7579,
      18,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 3287,
    "end_token": 3302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 802,
    "text": "        ).abs()  # True Range = Previous Close less Low",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.BBANDS indicates a pattern of using technical analysis indicators.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6739,
      8937,
      3419,
      220,
      1303,
      6407,
      13667,
      796,
      21801,
      13872,
      1342,
      7754
    ],
    "start_token": 3302,
    "end_token": 3321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      15199,
      1565,
      5258,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.BBANDS indicates a pattern of using technical analysis indicators."
  },
  {
    "line": 802,
    "text": "        ).abs()  # True Range = Previous Close less Low",
    "annotation": "\u2705 Best Practice: Using pd.Series with a name parameter improves readability and data handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6739,
      8937,
      3419,
      220,
      1303,
      6407,
      13667,
      796,
      21801,
      13872,
      1342,
      7754
    ],
    "start_token": 3321,
    "end_token": 3340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      27996,
      351,
      257,
      1438,
      11507,
      19575,
      1100,
      1799,
      290,
      1366,
      9041,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.Series with a name parameter improves readability and data handling."
  },
  {
    "line": 810,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use of @classmethod indicates a pattern of defining methods that operate on the class itself.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 3340,
    "end_token": 3346,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      9217,
      257,
      3912,
      286,
      16215,
      5050,
      326,
      8076,
      319,
      262,
      1398,
      2346,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod indicates a pattern of defining methods that operate on the class itself."
  },
  {
    "line": 810,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 3346,
    "end_token": 3352,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior."
  },
  {
    "line": 815,
    "text": "        return pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a technical indicator function, which could be used to train financial models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 3352,
    "end_token": 3365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      6276,
      16916,
      2163,
      11,
      543,
      714,
      307,
      973,
      284,
      4512,
      3176,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a technical indicator function, which could be used to train financial models."
  },
  {
    "line": 815,
    "text": "        return pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of a financial metric, which could be used to train financial models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 3365,
    "end_token": 3378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      257,
      3176,
      18663,
      11,
      543,
      714,
      307,
      973,
      284,
      4512,
      3176,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of a financial metric, which could be used to train financial models."
  },
  {
    "line": 821,
    "text": "    def SAR(cls, ohlc: DataFrame, af: int = 0.02, amax: int = 0.2) -> Series:",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to indicate that the method is a class method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      47341,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      6580,
      25,
      493,
      796,
      657,
      13,
      2999,
      11,
      716,
      897,
      25,
      493,
      796,
      657,
      13,
      17,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 3378,
    "end_token": 3413,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      7603,
      326,
      262,
      2446,
      318,
      257,
      1398,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to indicate that the method is a class method."
  },
  {
    "line": 829,
    "text": "        _sar = [low[0] - (high - low).std()]",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      82,
      283,
      796,
      685,
      9319,
      58,
      15,
      60,
      532,
      357,
      8929,
      532,
      1877,
      737,
      19282,
      3419,
      60
    ],
    "start_token": 3413,
    "end_token": 3438,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 837,
    "text": "            if sig1:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if 'cls.EMA' or 'ohlc' is not properly validated or sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      43237,
      16,
      25
    ],
    "start_token": 3438,
    "end_token": 3453,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      705,
      565,
      82,
      13,
      27630,
      6,
      393,
      705,
      1219,
      44601,
      6,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if 'cls.EMA' or 'ohlc' is not properly validated or sanitized."
  },
  {
    "line": 841,
    "text": "                sig0 = high[i] >= _sar[-1]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      43237,
      15,
      796,
      1029,
      58,
      72,
      60,
      18189,
      4808,
      82,
      283,
      58,
      12,
      16,
      60
    ],
    "start_token": 3453,
    "end_token": 3483,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      705,
      565,
      82,
      13,
      1404,
      49,
      6,
      393,
      705,
      1219,
      44601,
      6,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized."
  },
  {
    "line": 844,
    "text": "            if sig0 == sig1:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      43237,
      15,
      6624,
      43237,
      16,
      25
    ],
    "start_token": 3483,
    "end_token": 3501,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      705,
      565,
      82,
      13,
      1404,
      49,
      6,
      393,
      705,
      1219,
      44601,
      6,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized."
  },
  {
    "line": 849,
    "text": "                    af0 = af0 if xpt0 > xpt1 else af1",
    "annotation": "\u2705 Best Practice: Using pd.concat for combining series ensures scalability and flexibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6580,
      15,
      796,
      6580,
      15,
      611,
      2124,
      457,
      15,
      1875,
      2124,
      457,
      16,
      2073,
      6580,
      16
    ],
    "start_token": 3501,
    "end_token": 3536,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      2168,
      19047,
      16578,
      1799,
      290,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat for combining series ensures scalability and flexibility."
  },
  {
    "line": 849,
    "text": "                    af0 = af0 if xpt0 > xpt1 else af1",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates method is bound to the class and not the instance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6580,
      15,
      796,
      6580,
      15,
      611,
      2124,
      457,
      15,
      1875,
      2124,
      457,
      16,
      2073,
      6580,
      16
    ],
    "start_token": 3536,
    "end_token": 3571,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      2446,
      318,
      5421,
      284,
      262,
      1398,
      290,
      407,
      262,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates method is bound to the class and not the instance."
  },
  {
    "line": 849,
    "text": "                    af0 = af0 if xpt0 > xpt1 else af1",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6580,
      15,
      796,
      6580,
      15,
      611,
      2124,
      457,
      15,
      1875,
      2124,
      457,
      16,
      2073,
      6580,
      16
    ],
    "start_token": 3571,
    "end_token": 3606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 851,
    "text": "                else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window operations on time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 3606,
    "end_token": 3623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      4560,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window operations on time series data."
  },
  {
    "line": 857,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window operations on time series data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3623,
    "end_token": 3623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      4560,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window operations on time series data."
  },
  {
    "line": 860,
    "text": "        return pd.Series(_sar, index=ohlc.index)",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of a middle line as an average of two series.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      28264,
      82,
      283,
      11,
      6376,
      28,
      1219,
      44601,
      13,
      9630,
      8
    ],
    "start_token": 3623,
    "end_token": 3646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      257,
      3504,
      1627,
      355,
      281,
      2811,
      286,
      734,
      2168,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of a middle line as an average of two series."
  },
  {
    "line": 861,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.concat to combine multiple Series into a DataFrame.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3646,
    "end_token": 3646,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      3294,
      7171,
      656,
      257,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat to combine multiple Series into a DataFrame."
  },
  {
    "line": 861,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on class variables.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3646,
    "end_token": 3646,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      9633,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on class variables."
  },
  {
    "line": 860,
    "text": "        return pd.Series(_sar, index=ohlc.index)",
    "annotation": "\u2705 Best Practice: Use of class method decorator to indicate this is a class method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      28264,
      82,
      283,
      11,
      6376,
      28,
      1219,
      44601,
      13,
      9630,
      8
    ],
    "start_token": 3646,
    "end_token": 3669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      2446,
      11705,
      1352,
      284,
      7603,
      428,
      318,
      257,
      1398,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of class method decorator to indicate this is a class method"
  },
  {
    "line": 861,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3669,
    "end_token": 3669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters"
  },
  {
    "line": 871,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying the input DataFrame could lead to unintended side effects",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3669,
    "end_token": 3669,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      262,
      5128,
      6060,
      19778,
      714,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying the input DataFrame could lead to unintended side effects"
  },
  {
    "line": 873,
    "text": "        high, low, close = ohlc.high, ohlc.low, ohlc.close",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying the input DataFrame could lead to unintended side effects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1029,
      11,
      1877,
      11,
      1969,
      796,
      11752,
      44601,
      13,
      8929,
      11,
      11752,
      44601,
      13,
      9319,
      11,
      11752,
      44601,
      13,
      19836
    ],
    "start_token": 3669,
    "end_token": 3696,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      262,
      5128,
      6060,
      19778,
      714,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying the input DataFrame could lead to unintended side effects"
  },
  {
    "line": 871,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive function name for better readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3696,
    "end_token": 3696,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name for better readability"
  },
  {
    "line": 873,
    "text": "        high, low, close = ohlc.high, ohlc.low, ohlc.close",
    "annotation": "\u2705 Best Practice: Clear conditional logic for determining return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1029,
      11,
      1877,
      11,
      1969,
      796,
      11752,
      44601,
      13,
      8929,
      11,
      11752,
      44601,
      13,
      9319,
      11,
      11752,
      44601,
      13,
      19836
    ],
    "start_token": 3696,
    "end_token": 3723,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      26340,
      9156,
      329,
      13213,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Clear conditional logic for determining return value"
  },
  {
    "line": 875,
    "text": "        psarbull = [None] * length",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of returning specific column value based on condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26692,
      283,
      16308,
      796,
      685,
      14202,
      60,
      1635,
      4129
    ],
    "start_token": 3723,
    "end_token": 3739,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      8024,
      2176,
      5721,
      1988,
      1912,
      319,
      4006
    ],
    "label": "ml_signal",
    "reason": "Pattern of returning specific column value based on condition"
  },
  {
    "line": 878,
    "text": "        af = iaf",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of returning a default value when condition is not met",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6580,
      796,
      220,
      544,
      69
    ],
    "start_token": 3739,
    "end_token": 3751,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      8024,
      257,
      4277,
      1988,
      618,
      4006,
      318,
      407,
      1138
    ],
    "label": "ml_signal",
    "reason": "Pattern of returning a default value when condition is not met"
  },
  {
    "line": 877,
    "text": "        bull = True",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6473,
      796,
      6407
    ],
    "start_token": 3751,
    "end_token": 3761,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 882,
    "text": "        for i in range(2, length):",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame apply method indicates a pattern of row-wise operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      17,
      11,
      4129,
      2599
    ],
    "start_token": 3761,
    "end_token": 3777,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      4174,
      2446,
      9217,
      257,
      3912,
      286,
      5752,
      12,
      3083,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame apply method indicates a pattern of row-wise operations."
  },
  {
    "line": 883,
    "text": "            if bull:",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame apply method indicates a pattern of row-wise operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6473,
      25
    ],
    "start_token": 3777,
    "end_token": 3791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      4174,
      2446,
      9217,
      257,
      3912,
      286,
      5752,
      12,
      3083,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame apply method indicates a pattern of row-wise operations."
  },
  {
    "line": 883,
    "text": "            if bull:",
    "annotation": "\ud83e\udde0 ML Signal: Use of pd.Series and ewm suggests a pattern of time series analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6473,
      25
    ],
    "start_token": 3791,
    "end_token": 3805,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      279,
      67,
      13,
      27996,
      290,
      304,
      26377,
      5644,
      257,
      3912,
      286,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pd.Series and ewm suggests a pattern of time series analysis."
  },
  {
    "line": 897,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Use of pd.Series and ewm suggests a pattern of time series analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 3805,
    "end_token": 3818,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      279,
      67,
      13,
      27996,
      290,
      304,
      26377,
      5644,
      257,
      3912,
      286,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pd.Series and ewm suggests a pattern of time series analysis."
  },
  {
    "line": 903,
    "text": "                    af = iaf",
    "annotation": "\u2705 Best Practice: Returning a concatenated DataFrame is a clear and organized way to return multiple series.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6580,
      796,
      220,
      544,
      69
    ],
    "start_token": 3818,
    "end_token": 3842,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1673,
      36686,
      515,
      6060,
      19778,
      318,
      257,
      1598,
      290,
      8389,
      835,
      284,
      1441,
      3294,
      2168,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a concatenated DataFrame is a clear and organized way to return multiple series."
  },
  {
    "line": 900,
    "text": "                    reverse = True",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9575,
      796,
      6407
    ],
    "start_token": 3842,
    "end_token": 3864,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 904,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a class method to calculate a financial indicator.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3864,
    "end_token": 3864,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1398,
      2446,
      284,
      15284,
      257,
      3176,
      16916,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a class method to calculate a financial indicator."
  },
  {
    "line": 909,
    "text": "                        af = min(af + iaf, maxaf)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if dmi[\"DI+\"] + dmi[\"DI-\"] is zero.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6580,
      796,
      949,
      7,
      1878,
      1343,
      220,
      544,
      69,
      11,
      3509,
      1878,
      8
    ],
    "start_token": 3864,
    "end_token": 3900,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      288,
      11632,
      14692,
      17931,
      10,
      8973,
      1343,
      288,
      11632,
      14692,
      17931,
      12,
      8973,
      318,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if dmi[\"DI+\"] + dmi[\"DI-\"] is zero."
  },
  {
    "line": 912,
    "text": "                    if low[i - 2] < psar[i]:",
    "annotation": "\u2705 Best Practice: Naming the Series for better readability and debugging.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1877,
      58,
      72,
      532,
      362,
      60,
      1279,
      26692,
      283,
      58,
      72,
      5974
    ],
    "start_token": 3900,
    "end_token": 3932,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      262,
      7171,
      329,
      1365,
      1100,
      1799,
      290,
      28769,
      13
    ],
    "label": "best_practice",
    "reason": "Naming the Series for better readability and debugging."
  },
  {
    "line": 913,
    "text": "                        psar[i] = low[i - 2]",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to indicate that the method operates on the class rather than an instance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26692,
      283,
      58,
      72,
      60,
      796,
      1877,
      58,
      72,
      532,
      362,
      60
    ],
    "start_token": 3932,
    "end_token": 3967,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      7603,
      326,
      262,
      2446,
      14051,
      319,
      262,
      1398,
      2138,
      621,
      281,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to indicate that the method operates on the class rather than an instance."
  },
  {
    "line": 920,
    "text": "                    if high[i - 2] > psar[i]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of shift() indicates time series data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1029,
      58,
      72,
      532,
      362,
      60,
      1875,
      26692,
      283,
      58,
      72,
      5974
    ],
    "start_token": 3967,
    "end_token": 3999,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6482,
      3419,
      9217,
      640,
      2168,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of shift() indicates time series data manipulation"
  },
  {
    "line": 922,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of technical indicators like pivot points",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3999,
    "end_token": 3999,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      6276,
      21337,
      588,
      30355,
      2173
    ],
    "label": "ml_signal",
    "reason": "Calculation of technical indicators like pivot points"
  },
  {
    "line": 924,
    "text": "                psarbull[i] = psar[i]",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of support levels",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26692,
      283,
      16308,
      58,
      72,
      60,
      796,
      26692,
      283,
      58,
      72,
      60
    ],
    "start_token": 3999,
    "end_token": 4026,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1104,
      2974
    ],
    "label": "ml_signal",
    "reason": "Calculation of support levels"
  },
  {
    "line": 929,
    "text": "        psarbear = pd.Series(psarbull, name=\"psarbear\", index=ohlc.index)",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of resistance levels",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26692,
      283,
      33227,
      796,
      279,
      67,
      13,
      27996,
      7,
      862,
      283,
      16308,
      11,
      1438,
      2625,
      862,
      283,
      33227,
      1600,
      6376,
      28,
      1219,
      44601,
      13,
      9630,
      8
    ],
    "start_token": 4026,
    "end_token": 4059,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      6625,
      2974
    ],
    "label": "ml_signal",
    "reason": "Calculation of resistance levels"
  },
  {
    "line": 930,
    "text": "        psarbull = pd.Series(psarbear, name=\"psarbull\", index=ohlc.index)",
    "annotation": "\u2705 Best Practice: Use pd.concat for combining multiple Series into a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26692,
      283,
      16308,
      796,
      279,
      67,
      13,
      27996,
      7,
      862,
      283,
      33227,
      11,
      1438,
      2625,
      862,
      283,
      16308,
      1600,
      6376,
      28,
      1219,
      44601,
      13,
      9630,
      8
    ],
    "start_token": 4059,
    "end_token": 4092,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      3294,
      7171,
      656,
      257,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use pd.concat for combining multiple Series into a DataFrame"
  },
  {
    "line": 951,
    "text": "",
    "annotation": "\u2705 Best Practice: Use @classmethod decorator for methods that operate on class variables",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4092,
    "end_token": 4092,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      9633
    ],
    "label": "best_practice",
    "reason": "Use @classmethod decorator for methods that operate on class variables"
  },
  {
    "line": 946,
    "text": "         The bands automatically widen when volatility increases and narrow when volatility decreases.",
    "annotation": "\ud83e\udde0 ML Signal: Method for calculating Fibonacci pivot points, useful for financial data analysis models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      11760,
      6338,
      45676,
      618,
      30772,
      5732,
      290,
      7135,
      618,
      30772,
      20638,
      13
    ],
    "start_token": 4092,
    "end_token": 4113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      26019,
      41566,
      261,
      44456,
      30355,
      2173,
      11,
      4465,
      329,
      3176,
      1366,
      3781,
      4981
    ],
    "label": "ml_signal",
    "reason": "Method for calculating Fibonacci pivot points, useful for financial data analysis models"
  },
  {
    "line": 953,
    "text": "",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like 'pp' for pivot points improves readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4113,
    "end_token": 4113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      705,
      381,
      6,
      329,
      30355,
      2173,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like 'pp' for pivot points improves readability"
  },
  {
    "line": 961,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.concat for DataFrame construction is efficient and readable",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4113,
    "end_token": 4113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      329,
      6060,
      19778,
      5103,
      318,
      6942,
      290,
      31744
    ],
    "label": "best_practice",
    "reason": "Using pd.concat for DataFrame construction is efficient and readable"
  },
  {
    "line": 977,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 4113,
    "end_token": 4121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 984,
    "text": "        cls, ohlc: DataFrame, period: int = 20, MA: Series = None, column: str = \"close\"",
    "annotation": "\u2705 Best Practice: Using descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1160,
      11,
      8779,
      25,
      7171,
      796,
      6045,
      11,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1
    ],
    "start_token": 4121,
    "end_token": 4156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names improves code readability."
  },
  {
    "line": 985,
    "text": "    ) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of a financial indicator, which could be used in predictive models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      7171,
      25
    ],
    "start_token": 4156,
    "end_token": 4163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      257,
      3176,
      16916,
      11,
      543,
      714,
      307,
      973,
      287,
      33344,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of a financial indicator, which could be used in predictive models."
  },
  {
    "line": 989,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.Series with a descriptive name improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4163,
    "end_token": 4163,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      27996,
      351,
      257,
      35644,
      1438,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.Series with a descriptive name improves code readability and maintainability."
  },
  {
    "line": 995,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates the method is bound to the class and not the instance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 4163,
    "end_token": 4169,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      262,
      2446,
      318,
      5421,
      284,
      262,
      1398,
      290,
      407,
      262,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates the method is bound to the class and not the instance."
  },
  {
    "line": 992,
    "text": "            name=\"{0} period BBWITH\".format(period),",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      12597,
      54,
      10554,
      1911,
      18982,
      7,
      41007,
      828
    ],
    "start_token": 4169,
    "end_token": 4194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 995,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window and mean for time series data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 4194,
    "end_token": 4200,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      290,
      1612,
      329,
      640,
      2168,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window and mean for time series data processing."
  },
  {
    "line": 998,
    "text": "    ) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining with rolling and mean for data transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      7171,
      25
    ],
    "start_token": 4200,
    "end_token": 4207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      351,
      10708,
      290,
      1612,
      329,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining with rolling and mean for data transformation."
  },
  {
    "line": 1000,
    "text": "        %b (pronounced 'percent b') is derived from the formula for Stochastics and shows where price is in relation to the bands.",
    "annotation": "\u2705 Best Practice: Use of format for string formatting improves readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4064,
      65,
      357,
      31186,
      8918,
      705,
      25067,
      275,
      11537,
      318,
      10944,
      422,
      262,
      10451,
      329,
      520,
      5374,
      24232,
      290,
      2523,
      810,
      2756,
      318,
      287,
      8695,
      284,
      262,
      11760,
      13
    ],
    "start_token": 4207,
    "end_token": 4243,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      329,
      4731,
      33313,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of format for string formatting improves readability."
  },
  {
    "line": 1003,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates method is bound to class, not instance.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4243,
    "end_token": 4243,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      2446,
      318,
      5421,
      284,
      1398,
      11,
      407,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates method is bound to class, not instance."
  },
  {
    "line": 1006,
    "text": "            (ohlc[\"close\"] - BB[\"BB_LOWER\"]) / (BB[\"BB_UPPER\"] - BB[\"BB_LOWER\"]),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of RSI and StochRSI can indicate financial data analysis patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      1219,
      44601,
      14692,
      19836,
      8973,
      532,
      12597,
      14692,
      15199,
      62,
      43,
      36048,
      8973,
      8,
      1220,
      357,
      15199,
      14692,
      15199,
      62,
      8577,
      18973,
      8973,
      532,
      12597,
      14692,
      15199,
      62,
      43,
      36048,
      8973,
      828
    ],
    "start_token": 4243,
    "end_token": 4287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      371,
      11584,
      290,
      520,
      5374,
      6998,
      40,
      460,
      7603,
      3176,
      1366,
      3781,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of RSI and StochRSI can indicate financial data analysis patterns."
  },
  {
    "line": 1007,
    "text": "            name=\"%b\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if rsi.max() equals rsi.min().",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      4,
      65,
      1600
    ],
    "start_token": 4287,
    "end_token": 4303,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      374,
      13396,
      13,
      9806,
      3419,
      21767,
      374,
      13396,
      13,
      1084,
      22446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if rsi.max() equals rsi.min()."
  },
  {
    "line": 1014,
    "text": "        cls,",
    "annotation": "\u2705 Best Practice: Use f-string for better readability and performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      82,
      11
    ],
    "start_token": 4303,
    "end_token": 4313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1365,
      1100,
      1799,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use f-string for better readability and performance."
  },
  {
    "line": 1015,
    "text": "        ohlc: DataFrame,",
    "annotation": "\ud83e\udde0 ML Signal: Function signature and default parameter values can be used to learn API usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 4313,
    "end_token": 4326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      290,
      4277,
      11507,
      3815,
      460,
      307,
      973,
      284,
      2193,
      7824,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Function signature and default parameter values can be used to learn API usage patterns."
  },
  {
    "line": 1015,
    "text": "        ohlc: DataFrame,",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 4326,
    "end_token": 4339,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1015,
    "text": "        ohlc: DataFrame,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window operations on DataFrame columns is a common pattern in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 4339,
    "end_token": 4352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      4560,
      319,
      6060,
      19778,
      15180,
      318,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window operations on DataFrame columns is a common pattern in time series analysis."
  },
  {
    "line": 1021,
    "text": "        \"\"\"Keltner Channels [KC] are volatility-based envelopes set above and below an exponential moving average.",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of min and max over a rolling window is a common pattern in financial data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      42,
      2120,
      1008,
      609,
      8961,
      685,
      36222,
      60,
      389,
      30772,
      12,
      3106,
      16441,
      274,
      900,
      2029,
      290,
      2174,
      281,
      39682,
      3867,
      2811,
      13
    ],
    "start_token": 4352,
    "end_token": 4383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      949,
      290,
      3509,
      625,
      257,
      10708,
      4324,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of min and max over a rolling window is a common pattern in financial data analysis."
  },
  {
    "line": 1023,
    "text": "        Instead of using the standard deviation, Keltner Channels use the Average True Range (ATR) to set channel distance.",
    "annotation": "\u2705 Best Practice: Naming the Series with a descriptive name aids in debugging and readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5455,
      286,
      1262,
      262,
      3210,
      28833,
      11,
      509,
      2120,
      1008,
      609,
      8961,
      779,
      262,
      13475,
      6407,
      13667,
      357,
      1404,
      49,
      8,
      284,
      900,
      6518,
      5253,
      13
    ],
    "start_token": 4383,
    "end_token": 4416,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      262,
      7171,
      351,
      257,
      35644,
      1438,
      31378,
      287,
      28769,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Naming the Series with a descriptive name aids in debugging and readability."
  },
  {
    "line": 1027,
    "text": "        Channels can also be used to identify overbought and oversold levels when the trend is flat.\"\"\"",
    "annotation": "\u2705 Best Practice: Returning a transformed Series directly is efficient and clear.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      609,
      8961,
      460,
      635,
      307,
      973,
      284,
      5911,
      625,
      65,
      2917,
      290,
      625,
      24120,
      2974,
      618,
      262,
      5182,
      318,
      6228,
      526,
      15931
    ],
    "start_token": 4416,
    "end_token": 4445,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      14434,
      7171,
      3264,
      318,
      6942,
      290,
      1598,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a transformed Series directly is efficient and clear."
  },
  {
    "line": 1029,
    "text": "        if not isinstance(MA, pd.core.series.Series):",
    "annotation": "\u2705 Best Practice: Using @classmethod allows the method to be called on the class itself, which is useful for factory methods.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      318,
      39098,
      7,
      5673,
      11,
      279,
      67,
      13,
      7295,
      13,
      25076,
      13,
      27996,
      2599
    ],
    "start_token": 4445,
    "end_token": 4468,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      4871,
      24396,
      3578,
      262,
      2446,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      11,
      543,
      318,
      4465,
      329,
      8860,
      5050,
      13
    ],
    "label": "best_practice",
    "reason": "Using @classmethod allows the method to be called on the class itself, which is useful for factory methods."
  },
  {
    "line": 1030,
    "text": "            middle = pd.Series(cls.EMA(ohlc, period), name=\"KC_MIDDLE\")",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and methodology.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3504,
      796,
      279,
      67,
      13,
      27996,
      7,
      565,
      82,
      13,
      27630,
      7,
      1219,
      44601,
      11,
      2278,
      828,
      1438,
      2625,
      36222,
      62,
      44,
      2389,
      35,
      2538,
      4943
    ],
    "start_token": 4468,
    "end_token": 4505,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      20411,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and methodology."
  },
  {
    "line": 1038,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows using itertuples, a common pattern in data processing.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4505,
    "end_token": 4505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      1262,
      340,
      861,
      84,
      2374,
      11,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows using itertuples, a common pattern in data processing."
  },
  {
    "line": 1041,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window calculations, a common pattern in time series analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 4505,
    "end_token": 4511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      16765,
      11,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window calculations, a common pattern in time series analysis."
  },
  {
    "line": 1047,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to indicate method operates on the class rather than instance.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4511,
    "end_token": 4511,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      7603,
      2446,
      14051,
      319,
      262,
      1398,
      2138,
      621,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to indicate method operates on the class rather than instance."
  },
  {
    "line": 1047,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4511,
    "end_token": 4511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters"
  },
  {
    "line": 1047,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring explaining the function's purpose and usage",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4511,
    "end_token": 4511,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      11170,
      262,
      2163,
      338,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Docstring explaining the function's purpose and usage"
  },
  {
    "line": 1055,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4511,
    "end_token": 4511,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names"
  },
  {
    "line": 1062,
    "text": "         relative strength index. DMI tells you when to be long or short.",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3585,
      4202,
      6376,
      13,
      360,
      8895,
      4952,
      345,
      618,
      284,
      307,
      890,
      393,
      1790,
      13
    ],
    "start_token": 4511,
    "end_token": 4534,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names"
  },
  {
    "line": 1065,
    "text": "        source: https://www.tradingview.com/wiki/Directional_Movement_(DMI)#CALCULATION",
    "annotation": "\u2705 Best Practice: Returning a named Series for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2723,
      25,
      3740,
      1378,
      2503,
      13,
      2213,
      4980,
      1177,
      13,
      785,
      14,
      15466,
      14,
      35,
      4154,
      282,
      62,
      21774,
      434,
      41052,
      35,
      8895,
      8,
      2,
      34,
      1847,
      34,
      6239,
      6234
    ],
    "start_token": 4534,
    "end_token": 4571,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Returning a named Series for clarity"
  },
  {
    "line": 1066,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4571,
    "end_token": 4571,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method"
  },
  {
    "line": 1062,
    "text": "         relative strength index. DMI tells you when to be long or short.",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3585,
      4202,
      6376,
      13,
      360,
      8895,
      4952,
      345,
      618,
      284,
      307,
      890,
      393,
      1790,
      13
    ],
    "start_token": 4571,
    "end_token": 4594,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1065,
    "text": "        source: https://www.tradingview.com/wiki/Directional_Movement_(DMI)#CALCULATION",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas Series for financial data manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2723,
      25,
      3740,
      1378,
      2503,
      13,
      2213,
      4980,
      1177,
      13,
      785,
      14,
      15466,
      14,
      35,
      4154,
      282,
      62,
      21774,
      434,
      41052,
      35,
      8895,
      8,
      2,
      34,
      1847,
      34,
      6239,
      6234
    ],
    "start_token": 4594,
    "end_token": 4631,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      7171,
      329,
      3176,
      1366,
      17512,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas Series for financial data manipulation."
  },
  {
    "line": 1066,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Exponential moving average calculation, common in financial analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4631,
    "end_token": 4631,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5518,
      35470,
      3867,
      2811,
      17952,
      11,
      2219,
      287,
      3176,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Exponential moving average calculation, common in financial analysis."
  },
  {
    "line": 1068,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Double exponential moving average calculation, indicating advanced financial analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 4631,
    "end_token": 4639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11198,
      39682,
      3867,
      2811,
      17952,
      11,
      12739,
      6190,
      3176,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Double exponential moving average calculation, indicating advanced financial analysis."
  },
  {
    "line": 1069,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Ratio calculation between two moving averages, a pattern in financial algorithms.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4639,
    "end_token": 4639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      33956,
      17952,
      1022,
      734,
      3867,
      25694,
      11,
      257,
      3912,
      287,
      3176,
      16113,
      13
    ],
    "label": "ml_signal",
    "reason": "Ratio calculation between two moving averages, a pattern in financial algorithms."
  },
  {
    "line": 1072,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Rolling window sum, a common technique in time series analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4639,
    "end_token": 4639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21567,
      4324,
      2160,
      11,
      257,
      2219,
      8173,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Rolling window sum, a common technique in time series analysis."
  },
  {
    "line": 1073,
    "text": "        # positive Dmi",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on class-level data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3967,
      360,
      11632
    ],
    "start_token": 4639,
    "end_token": 4650,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      12,
      5715,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on class-level data."
  },
  {
    "line": 1071,
    "text": "        ohlc[\"down_move\"] = -ohlc[\"low\"].diff()",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      14692,
      2902,
      62,
      21084,
      8973,
      796,
      532,
      1219,
      44601,
      14692,
      9319,
      1,
      4083,
      26069,
      3419
    ],
    "start_token": 4650,
    "end_token": 4674,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the function"
  },
  {
    "line": 1073,
    "text": "        # positive Dmi",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas for financial calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3967,
      360,
      11632
    ],
    "start_token": 4674,
    "end_token": 4685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      329,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas for financial calculations"
  },
  {
    "line": 1073,
    "text": "        # positive Dmi",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if ohlc.high equals ohlc.low",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3967,
      360,
      11632
    ],
    "start_token": 4685,
    "end_token": 4696,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      11752,
      44601,
      13,
      8929,
      21767,
      11752,
      44601,
      13,
      9319
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if ohlc.high equals ohlc.low"
  },
  {
    "line": 1078,
    "text": "                return 0",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to indicate method is bound to class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      657
    ],
    "start_token": 4696,
    "end_token": 4713,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      7603,
      2446,
      318,
      5421,
      284,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to indicate method is bound to class"
  },
  {
    "line": 1078,
    "text": "                return 0",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      657
    ],
    "start_token": 4713,
    "end_token": 4730,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior"
  },
  {
    "line": 1086,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas for financial data manipulation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4730,
    "end_token": 4730,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      329,
      3176,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas for financial data manipulation"
  },
  {
    "line": 1088,
    "text": "        ohlc[\"minus\"] = ohlc.apply(_dmn, axis=1)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas for financial data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      14692,
      40191,
      8973,
      796,
      11752,
      44601,
      13,
      39014,
      28264,
      67,
      10295,
      11,
      16488,
      28,
      16,
      8
    ],
    "start_token": 4730,
    "end_token": 4755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      329,
      3176,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas for financial data manipulation"
  },
  {
    "line": 1090,
    "text": "        diplus = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window for time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2566,
      9541,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 4755,
    "end_token": 4770,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      329,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window for time series analysis"
  },
  {
    "line": 1092,
    "text": "            * (ohlc[\"plus\"] / cls.ATR(ohlc, period))",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window for time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      357,
      1219,
      44601,
      14692,
      9541,
      8973,
      1220,
      537,
      82,
      13,
      1404,
      49,
      7,
      1219,
      44601,
      11,
      2278,
      4008
    ],
    "start_token": 4770,
    "end_token": 4800,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      329,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window for time series analysis"
  },
  {
    "line": 1094,
    "text": "            .mean(),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class method for technical indicator calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      32604,
      22784
    ],
    "start_token": 4800,
    "end_token": 4814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      2446,
      329,
      6276,
      16916,
      17952
    ],
    "label": "ml_signal",
    "reason": "Usage of class method for technical indicator calculation"
  },
  {
    "line": 1097,
    "text": "        diminus = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas for financial data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12110,
      385,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 4814,
    "end_token": 4829,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      329,
      3176,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas for financial data manipulation"
  },
  {
    "line": 1097,
    "text": "        diminus = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas for financial data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12110,
      385,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 4829,
    "end_token": 4844,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      329,
      3176,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas for financial data manipulation"
  },
  {
    "line": 1100,
    "text": "            .ewm(alpha=1 / period, adjust=adjust)",
    "annotation": "\ud83e\udde0 ML Signal: Concatenation of DataFrame columns for indicator output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      413,
      76,
      7,
      26591,
      28,
      16,
      1220,
      2278,
      11,
      4532,
      28,
      23032,
      8
    ],
    "start_token": 4844,
    "end_token": 4869,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      341,
      286,
      6060,
      19778,
      15180,
      329,
      16916,
      5072
    ],
    "label": "ml_signal",
    "reason": "Concatenation of DataFrame columns for indicator output"
  },
  {
    "line": 1102,
    "text": "            name=\"DI-\",",
    "annotation": "\u2705 Best Practice: Use of classmethod decorator for methods that operate on class variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      17931,
      12,
      1600
    ],
    "start_token": 4869,
    "end_token": 4885,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of classmethod decorator for methods that operate on class variables"
  },
  {
    "line": 1097,
    "text": "        diminus = pd.Series(",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12110,
      385,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 4885,
    "end_token": 4900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1101,
    "text": "            .mean(),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling mean indicates a pattern for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      32604,
      22784
    ],
    "start_token": 4900,
    "end_token": 4914,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      1612,
      9217,
      257,
      3912,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling mean indicates a pattern for smoothing data."
  },
  {
    "line": 1103,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling mean indicates a pattern for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 4914,
    "end_token": 4922,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      1612,
      9217,
      257,
      3912,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling mean indicates a pattern for smoothing data."
  },
  {
    "line": 1105,
    "text": "        return pd.concat([diplus, diminus], axis=1)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling mean indicates a pattern for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      1102,
      9246,
      26933,
      10989,
      9541,
      11,
      12110,
      385,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 4922,
    "end_token": 4946,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      1612,
      9217,
      257,
      3912,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling mean indicates a pattern for smoothing data."
  },
  {
    "line": 1106,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling mean indicates a pattern for smoothing data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4946,
    "end_token": 4946,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      1612,
      9217,
      257,
      3912,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling mean indicates a pattern for smoothing data."
  },
  {
    "line": 1108,
    "text": "    def ADX(cls, ohlc: DataFrame, period: int = 14, adjust: bool = True) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Creation of a composite indicator from multiple smoothed series.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      5984,
      55,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1478,
      11,
      4532,
      25,
      20512,
      796,
      6407,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 4946,
    "end_token": 4977,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      257,
      24185,
      16916,
      422,
      3294,
      32746,
      704,
      2168,
      13
    ],
    "label": "ml_signal",
    "reason": "Creation of a composite indicator from multiple smoothed series."
  },
  {
    "line": 1108,
    "text": "    def ADX(cls, ohlc: DataFrame, period: int = 14, adjust: bool = True) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling mean to create a signal line for the indicator.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      5984,
      55,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1478,
      11,
      4532,
      25,
      20512,
      796,
      6407,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 4977,
    "end_token": 5008,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      1612,
      284,
      2251,
      257,
      6737,
      1627,
      329,
      262,
      16916,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling mean to create a signal line for the indicator."
  },
  {
    "line": 1113,
    "text": "        dmi = cls.DMI(ohlc, period)",
    "annotation": "\u2705 Best Practice: Returning a DataFrame with named columns improves readability and usability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      288,
      11632,
      796,
      537,
      82,
      13,
      35,
      8895,
      7,
      1219,
      44601,
      11,
      2278,
      8
    ],
    "start_token": 5008,
    "end_token": 5029,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      351,
      3706,
      15180,
      19575,
      1100,
      1799,
      290,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame with named columns improves readability and usability."
  },
  {
    "line": 1115,
    "text": "            100",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates the method is bound to the class and not the instance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1802
    ],
    "start_token": 5029,
    "end_token": 5041,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      262,
      2446,
      318,
      5421,
      284,
      262,
      1398,
      290,
      407,
      262,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates the method is bound to the class and not the instance."
  },
  {
    "line": 1118,
    "text": "            .mean(),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like TSI can be a signal for financial data analysis models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      32604,
      22784
    ],
    "start_token": 5041,
    "end_token": 5055,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      309,
      11584,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781,
      4981
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like TSI can be a signal for financial data analysis models"
  },
  {
    "line": 1119,
    "text": "            name=\"{0} period ADX.\".format(period),",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      5984,
      55,
      526,
      13,
      18982,
      7,
      41007,
      828
    ],
    "start_token": 5055,
    "end_token": 5080,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for readability"
  },
  {
    "line": 1128,
    "text": "        This means you\u2019ll have to use the previous day\u2019s range for today\u2019s pivot points.",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      770,
      1724,
      345,
      447,
      247,
      297,
      423,
      284,
      779,
      262,
      2180,
      1110,
      447,
      247,
      82,
      2837,
      329,
      1909,
      447,
      247,
      82,
      30355,
      2173,
      13
    ],
    "start_token": 5080,
    "end_token": 5111,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for readability"
  },
  {
    "line": 1144,
    "text": "        r4 = df[\"high\"] + (3 * (pivot - df[\"low\"]))",
    "annotation": "\u2705 Best Practice: Return a DataFrame for structured data output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      19,
      796,
      47764,
      14692,
      8929,
      8973,
      1343,
      357,
      18,
      1635,
      357,
      79,
      45785,
      532,
      47764,
      14692,
      9319,
      8973,
      4008
    ],
    "start_token": 5111,
    "end_token": 5138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      6060,
      19778,
      329,
      20793,
      1366,
      5072
    ],
    "label": "best_practice",
    "reason": "Return a DataFrame for structured data output"
  },
  {
    "line": 1148,
    "text": "                pivot,",
    "annotation": "\u2705 Best Practice: Use @classmethod decorator for methods that operate on the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      30355,
      11
    ],
    "start_token": 5138,
    "end_token": 5155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use @classmethod decorator for methods that operate on the class"
  },
  {
    "line": 1144,
    "text": "        r4 = df[\"high\"] + (3 * (pivot - df[\"low\"]))",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      19,
      796,
      47764,
      14692,
      8929,
      8973,
      1343,
      357,
      18,
      1635,
      357,
      79,
      45785,
      532,
      47764,
      14692,
      9319,
      8973,
      4008
    ],
    "start_token": 5155,
    "end_token": 5182,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 1145,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of arithmetic operations on DataFrame columns.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5182,
    "end_token": 5182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      34768,
      4560,
      319,
      6060,
      19778,
      15180,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of arithmetic operations on DataFrame columns."
  },
  {
    "line": 1149,
    "text": "                pd.Series(s1, name=\"s1\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators to modify or enhance class methods.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      27996,
      7,
      82,
      16,
      11,
      1438,
      2625,
      82,
      16,
      12340
    ],
    "start_token": 5182,
    "end_token": 5210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      284,
      13096,
      393,
      9494,
      1398,
      5050,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators to modify or enhance class methods."
  },
  {
    "line": 1149,
    "text": "                pd.Series(s1, name=\"s1\"),",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      27996,
      7,
      82,
      16,
      11,
      1438,
      2625,
      82,
      16,
      12340
    ],
    "start_token": 5210,
    "end_token": 5238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1159,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like MFM can be a signal for financial data analysis models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 5238,
    "end_token": 5246,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      337,
      23264,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like MFM can be a signal for financial data analysis models."
  },
  {
    "line": 1162,
    "text": "    def PIVOT_FIB(cls, ohlc: DataFrame) -> DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Cumulative sum operations are common in time series analysis and financial computations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      350,
      3824,
      2394,
      62,
      37,
      9865,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      8,
      4613,
      6060,
      19778,
      25
    ],
    "start_token": 5246,
    "end_token": 5270,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27843,
      13628,
      2160,
      4560,
      389,
      2219,
      287,
      640,
      2168,
      3781,
      290,
      3176,
      2653,
      602,
      13
    ],
    "label": "ml_signal",
    "reason": "Cumulative sum operations are common in time series analysis and financial computations."
  },
  {
    "line": 1163,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Decorator usage indicates this method is intended to be used with a class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5270,
    "end_token": 5278,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      8748,
      9217,
      428,
      2446,
      318,
      5292,
      284,
      307,
      973,
      351,
      257,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Decorator usage indicates this method is intended to be used with a class."
  },
  {
    "line": 1167,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the inputvalidator decorator is implemented securely to avoid input validation issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5278,
    "end_token": 5286,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      5128,
      12102,
      1352,
      11705,
      1352,
      318,
      9177,
      30835,
      284,
      3368,
      5128,
      21201,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the inputvalidator decorator is implemented securely to avoid input validation issues."
  },
  {
    "line": 1163,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and calculation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5286,
    "end_token": 5294,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      17952,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and calculation."
  },
  {
    "line": 1167,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas Series and ewm method indicates time series data manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5294,
    "end_token": 5302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      7171,
      290,
      304,
      26377,
      2446,
      9217,
      640,
      2168,
      1366,
      17512,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas Series and ewm method indicates time series data manipulation."
  },
  {
    "line": 1167,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Repeated calls to cls.ADL suggest a pattern of using class methods for data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5302,
    "end_token": 5310,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      3848,
      284,
      537,
      82,
      13,
      2885,
      43,
      1950,
      257,
      3912,
      286,
      1262,
      1398,
      5050,
      329,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Repeated calls to cls.ADL suggest a pattern of using class methods for data processing."
  },
  {
    "line": 1174,
    "text": "        r2 = pp + ((df[\"high\"] - df[\"low\"]) * 0.618)",
    "annotation": "\u2705 Best Practice: Decorator indicates method is intended to be used with class, not instance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      17,
      796,
      9788,
      1343,
      14808,
      7568,
      14692,
      8929,
      8973,
      532,
      47764,
      14692,
      9319,
      8973,
      8,
      1635,
      657,
      13,
      47448,
      8
    ],
    "start_token": 5310,
    "end_token": 5338,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      9217,
      2446,
      318,
      5292,
      284,
      307,
      973,
      351,
      1398,
      11,
      407,
      4554,
      13
    ],
    "label": "best_practice",
    "reason": "Decorator indicates method is intended to be used with class, not instance."
  },
  {
    "line": 1173,
    "text": "        r3 = pp + ((df[\"high\"] - df[\"low\"]) * 1)",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      18,
      796,
      9788,
      1343,
      14808,
      7568,
      14692,
      8929,
      8973,
      532,
      47764,
      14692,
      9319,
      8973,
      8,
      1635,
      352,
      8
    ],
    "start_token": 5338,
    "end_token": 5364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 1180,
    "text": "        s4 = pp - ((df[\"high\"] - df[\"low\"]) * 1.382)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like MFI can be a signal for financial data analysis models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      19,
      796,
      9788,
      532,
      14808,
      7568,
      14692,
      8929,
      8973,
      532,
      47764,
      14692,
      9319,
      8973,
      8,
      1635,
      352,
      13,
      36243,
      8
    ],
    "start_token": 5364,
    "end_token": 5392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      337,
      11674,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like MFI can be a signal for financial data analysis models."
  },
  {
    "line": 1182,
    "text": "        return pd.concat(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of raw money flow (rmf) is a key step in financial analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      1102,
      9246,
      7
    ],
    "start_token": 5392,
    "end_token": 5406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      8246,
      1637,
      5202,
      357,
      26224,
      69,
      8,
      318,
      257,
      1994,
      2239,
      287,
      3176,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of raw money flow (rmf) is a key step in financial analysis."
  },
  {
    "line": 1184,
    "text": "                pp,",
    "annotation": "\u2705 Best Practice: Using pd.concat for combining data ensures flexibility and readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9788,
      11
    ],
    "start_token": 5406,
    "end_token": 5423,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      1366,
      19047,
      13688,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat for combining data ensures flexibility and readability."
  },
  {
    "line": 1185,
    "text": "                pd.Series(s1, name=\"s1\"),",
    "annotation": "\ud83e\udde0 ML Signal: Calculating the difference in typical price is a common pattern in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      27996,
      7,
      82,
      16,
      11,
      1438,
      2625,
      82,
      16,
      12340
    ],
    "start_token": 5423,
    "end_token": 5451,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      262,
      3580,
      287,
      7226,
      2756,
      318,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculating the difference in typical price is a common pattern in time series analysis."
  },
  {
    "line": 1183,
    "text": "            [",
    "annotation": "\u2705 Best Practice: Function should have a docstring explaining its purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      685
    ],
    "start_token": 5451,
    "end_token": 5463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Function should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 1185,
    "text": "                pd.Series(s1, name=\"s1\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of conditional logic to determine return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      27996,
      7,
      82,
      16,
      11,
      1438,
      2625,
      82,
      16,
      12340
    ],
    "start_token": 5463,
    "end_token": 5491,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      26340,
      9156,
      284,
      5004,
      1441,
      1988
    ],
    "label": "ml_signal",
    "reason": "Use of conditional logic to determine return value"
  },
  {
    "line": 1187,
    "text": "                pd.Series(s3, name=\"s3\"),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary values by key",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      27996,
      7,
      82,
      18,
      11,
      1438,
      2625,
      82,
      18,
      12340
    ],
    "start_token": 5491,
    "end_token": 5519,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      3815,
      416,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary values by key"
  },
  {
    "line": 1194,
    "text": "            axis=1,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of apply function with custom function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16488,
      28,
      16,
      11
    ],
    "start_token": 5519,
    "end_token": 5534,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4174,
      2163,
      351,
      2183,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of apply function with custom function"
  },
  {
    "line": 1195,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window for time series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 5534,
    "end_token": 5542,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      329,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window for time series analysis"
  },
  {
    "line": 1199,
    "text": "        \"\"\"Stochastic oscillator %K",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of financial indicator (MFI)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1273,
      5374,
      3477,
      24969,
      1352,
      4064,
      42
    ],
    "start_token": 5542,
    "end_token": 5557,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      3176,
      16916,
      357,
      44,
      11674,
      8
    ],
    "label": "ml_signal",
    "reason": "Calculation of financial indicator (MFI)"
  },
  {
    "line": 1205,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of decorator to define class method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5557,
    "end_token": 5557,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11705,
      1352,
      284,
      8160,
      1398,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of decorator to define class method"
  },
  {
    "line": 1214,
    "text": "        return STOCH",
    "annotation": "\u2705 Best Practice: Initialize new columns with NaN to avoid unintentional data leakage or incorrect calculations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      3563,
      46,
      3398
    ],
    "start_token": 5557,
    "end_token": 5568,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      649,
      15180,
      351,
      11013,
      45,
      284,
      3368,
      48398,
      1366,
      47988,
      393,
      11491,
      16765,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize new columns with NaN to avoid unintentional data leakage or incorrect calculations."
  },
  {
    "line": 1216,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use vectorized operations for performance efficiency in pandas.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 5568,
    "end_token": 5574,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      15879,
      1143,
      4560,
      329,
      2854,
      9332,
      287,
      19798,
      292,
      13
    ],
    "label": "best_practice",
    "reason": "Use vectorized operations for performance efficiency in pandas."
  },
  {
    "line": 1220,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check for any positive changes before applying the condition to avoid unnecessary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5574,
    "end_token": 5582,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      597,
      3967,
      2458,
      878,
      11524,
      262,
      4006,
      284,
      3368,
      13114,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Check for any positive changes before applying the condition to avoid unnecessary operations."
  },
  {
    "line": 1223,
    "text": "            cls.STOCH(ohlc, stoch_period).rolling(center=False, window=period).mean(),",
    "annotation": "\u2705 Best Practice: Check for any negative changes before applying the condition to avoid unnecessary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      82,
      13,
      2257,
      46,
      3398,
      7,
      1219,
      44601,
      11,
      3995,
      354,
      62,
      41007,
      737,
      18886,
      7,
      16159,
      28,
      25101,
      11,
      4324,
      28,
      41007,
      737,
      32604,
      22784
    ],
    "start_token": 5582,
    "end_token": 5620,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      597,
      4633,
      2458,
      878,
      11524,
      262,
      4006,
      284,
      3368,
      13114,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Check for any negative changes before applying the condition to avoid unnecessary operations."
  },
  {
    "line": 1227,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Check for no changes before applying the condition to avoid unnecessary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 5620,
    "end_token": 5626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      645,
      2458,
      878,
      11524,
      262,
      4006,
      284,
      3368,
      13114,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Check for no changes before applying the condition to avoid unnecessary operations."
  },
  {
    "line": 1228,
    "text": "    def STOCHRSI(",
    "annotation": "\u2705 Best Practice: Use cumsum to efficiently calculate the cumulative sum of the OBV column.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3563,
      46,
      3398,
      6998,
      40,
      7
    ],
    "start_token": 5626,
    "end_token": 5636,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      269,
      5700,
      388,
      284,
      18306,
      15284,
      262,
      23818,
      2160,
      286,
      262,
      25334,
      53,
      5721,
      13
    ],
    "label": "best_practice",
    "reason": "Use cumsum to efficiently calculate the cumulative sum of the OBV column."
  },
  {
    "line": 1228,
    "text": "    def STOCHRSI(",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators like @classmethod can indicate class-level operations, useful for ML models to understand code structure.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3563,
      46,
      3398,
      6998,
      40,
      7
    ],
    "start_token": 5636,
    "end_token": 5646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      588,
      2488,
      4871,
      24396,
      460,
      7603,
      1398,
      12,
      5715,
      4560,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      1833,
      2438,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators like @classmethod can indicate class-level operations, useful for ML models to understand code structure."
  },
  {
    "line": 1228,
    "text": "    def STOCHRSI(",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3563,
      46,
      3398,
      6998,
      40,
      7
    ],
    "start_token": 5646,
    "end_token": 5656,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior."
  },
  {
    "line": 1237,
    "text": "            ((rsi - rsi.min()) / (rsi.max() - rsi.min()))",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like OBV can be a signal for financial data analysis models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14808,
      3808,
      72,
      532,
      374,
      13396,
      13,
      1084,
      28955,
      1220,
      357,
      3808,
      72,
      13,
      9806,
      3419,
      532,
      374,
      13396,
      13,
      1084,
      3419,
      4008
    ],
    "start_token": 5656,
    "end_token": 5690,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      25334,
      53,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like OBV can be a signal for financial data analysis models."
  },
  {
    "line": 1237,
    "text": "            ((rsi - rsi.min()) / (rsi.max() - rsi.min()))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'volume' and specified 'column' exist in 'ohlcv', potential KeyError if not.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14808,
      3808,
      72,
      532,
      374,
      13396,
      13,
      1084,
      28955,
      1220,
      357,
      3808,
      72,
      13,
      9806,
      3419,
      532,
      374,
      13396,
      13,
      1084,
      3419,
      4008
    ],
    "start_token": 5690,
    "end_token": 5724,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      29048,
      6,
      290,
      7368,
      705,
      28665,
      6,
      2152,
      287,
      705,
      48988,
      33967,
      3256,
      2785,
      7383,
      12331,
      611,
      407,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'volume' and specified 'column' exist in 'ohlcv', potential KeyError if not."
  },
  {
    "line": 1240,
    "text": "            name=\"{0} period stochastic RSI.\".format(rsi_period),",
    "annotation": "\ud83e\udde0 ML Signal: Cumulative sum operations are common in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      3995,
      354,
      3477,
      371,
      11584,
      526,
      13,
      18982,
      7,
      3808,
      72,
      62,
      41007,
      828
    ],
    "start_token": 5724,
    "end_token": 5755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27843,
      13628,
      2160,
      4560,
      389,
      2219,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Cumulative sum operations are common in time series analysis."
  },
  {
    "line": 1240,
    "text": "            name=\"{0} period stochastic RSI.\".format(rsi_period),",
    "annotation": "\u2705 Best Practice: Decorator usage indicates method is a class method, which is important for class design.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      3995,
      354,
      3477,
      371,
      11584,
      526,
      13,
      18982,
      7,
      3808,
      72,
      62,
      41007,
      828
    ],
    "start_token": 5755,
    "end_token": 5786,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      8748,
      9217,
      2446,
      318,
      257,
      1398,
      2446,
      11,
      543,
      318,
      1593,
      329,
      1398,
      1486,
      13
    ],
    "label": "best_practice",
    "reason": "Decorator usage indicates method is a class method, which is important for class design."
  },
  {
    "line": 1247,
    "text": "         Its purpose is to tell whether a stock or commodity market is trading near the high or the low, or somewhere in between,",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6363,
      4007,
      318,
      284,
      1560,
      1771,
      257,
      4283,
      393,
      19464,
      1910,
      318,
      7313,
      1474,
      262,
      1029,
      393,
      262,
      1877,
      11,
      393,
      7382,
      287,
      1022,
      11
    ],
    "start_token": 5786,
    "end_token": 5819,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and behavior."
  },
  {
    "line": 1253,
    "text": "        lowest_low = ohlc[\"low\"].rolling(center=False, window=period).min()",
    "annotation": "\u2705 Best Practice: Use of lambda for concise function definition.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9016,
      62,
      9319,
      796,
      11752,
      44601,
      14692,
      9319,
      1,
      4083,
      18886,
      7,
      16159,
      28,
      25101,
      11,
      4324,
      28,
      41007,
      737,
      1084,
      3419
    ],
    "start_token": 5819,
    "end_token": 5848,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      35327,
      2163,
      6770,
      13
    ],
    "label": "best_practice",
    "reason": "Use of lambda for concise function definition."
  },
  {
    "line": 1255,
    "text": "        WR = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame operations and diff method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11342,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 5848,
    "end_token": 5862,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4560,
      290,
      814,
      2446,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame operations and diff method."
  },
  {
    "line": 1256,
    "text": "            (highest_high - ohlc[\"close\"]) / (highest_high - lowest_low),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      35323,
      62,
      8929,
      532,
      11752,
      44601,
      14692,
      19836,
      8973,
      8,
      1220,
      357,
      35323,
      62,
      8929,
      532,
      9016,
      62,
      9319,
      828
    ],
    "start_token": 5862,
    "end_token": 5894,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average."
  },
  {
    "line": 1258,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 5894,
    "end_token": 5902,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average."
  },
  {
    "line": 1258,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Creation of a pandas Series with a specific name.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 5902,
    "end_token": 5910,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      257,
      19798,
      292,
      7171,
      351,
      257,
      2176,
      1438,
      13
    ],
    "label": "ml_signal",
    "reason": "Creation of a pandas Series with a specific name."
  },
  {
    "line": 1263,
    "text": "    def UO(cls, ohlc: DataFrame, column: str = \"close\") -> Series:",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      471,
      46,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      5721,
      25,
      965,
      796,
      366,
      19836,
      4943,
      4613,
      7171,
      25
    ],
    "start_token": 5910,
    "end_token": 5936,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition."
  },
  {
    "line": 1265,
    "text": "        The multiple time frame objective seeks to avoid the pitfalls of other oscillators.",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      3294,
      640,
      5739,
      9432,
      12932,
      284,
      3368,
      262,
      45716,
      286,
      584,
      24969,
      2024,
      13
    ],
    "start_token": 5936,
    "end_token": 5958,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 1272,
    "text": "            k.append(min(row.low, _row.close))",
    "annotation": "\u2705 Best Practice: Using a lambda function for concise and readable code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      13,
      33295,
      7,
      1084,
      7,
      808,
      13,
      9319,
      11,
      4808,
      808,
      13,
      19836,
      4008
    ],
    "start_token": 5958,
    "end_token": 5984,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      37456,
      2163,
      329,
      35327,
      290,
      31744,
      2438
    ],
    "label": "best_practice",
    "reason": "Using a lambda function for concise and readable code"
  },
  {
    "line": 1274,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas DataFrame and Series operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5984,
    "end_token": 5984,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6060,
      19778,
      290,
      7171,
      4560
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas DataFrame and Series operations"
  },
  {
    "line": 1275,
    "text": "        Average7 = bp.rolling(window=7).sum() / cls.TR(ohlc).rolling(window=7).sum()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13475,
      22,
      796,
      275,
      79,
      13,
      18886,
      7,
      17497,
      28,
      22,
      737,
      16345,
      3419,
      1220,
      537,
      82,
      13,
      5446,
      7,
      1219,
      44601,
      737,
      18886,
      7,
      17497,
      28,
      22,
      737,
      16345,
      3419
    ],
    "start_token": 5984,
    "end_token": 6022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average"
  },
  {
    "line": 1278,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class method for EMA calculation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6022,
    "end_token": 6022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      2446,
      329,
      412,
      5673,
      17952
    ],
    "label": "ml_signal",
    "reason": "Usage of class method for EMA calculation"
  },
  {
    "line": 1278,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas Series for financial calculations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6022,
    "end_token": 6022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      7171,
      329,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas Series for financial calculations"
  },
  {
    "line": 1282,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of classmethod decorator for class-level method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6022,
    "end_token": 6022,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      24396,
      11705,
      1352,
      329,
      1398,
      12,
      5715,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of classmethod decorator for class-level method"
  },
  {
    "line": 1285,
    "text": "        \"\"\"'EMA',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if input validation is not properly implemented in inputvalidator",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      30543,
      27630,
      3256
    ],
    "start_token": 6022,
    "end_token": 6033,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      5128,
      21201,
      318,
      407,
      6105,
      9177,
      287,
      5128,
      12102,
      1352
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if input validation is not properly implemented in inputvalidator"
  },
  {
    "line": 1285,
    "text": "        \"\"\"'EMA',",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      30543,
      27630,
      3256
    ],
    "start_token": 6033,
    "end_token": 6044,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 1288,
    "text": "        AO is generally used to affirm trends or to anticipate possible reversals. \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas Series and DataFrame indicates data manipulation patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      46,
      318,
      4143,
      973,
      284,
      16266,
      11257,
      393,
      284,
      23794,
      1744,
      10372,
      874,
      13,
      37227
    ],
    "start_token": 6044,
    "end_token": 6067,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      7171,
      290,
      6060,
      19778,
      9217,
      1366,
      17512,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas Series and DataFrame indicates data manipulation patterns."
  },
  {
    "line": 1288,
    "text": "        AO is generally used to affirm trends or to anticipate possible reversals. \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted mean for time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      46,
      318,
      4143,
      973,
      284,
      16266,
      11257,
      393,
      284,
      23794,
      1744,
      10372,
      874,
      13,
      37227
    ],
    "start_token": 6067,
    "end_token": 6090,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      1612,
      329,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted mean for time series data."
  },
  {
    "line": 1294,
    "text": "        fast = pd.Series(",
    "annotation": "\u2705 Best Practice: Use of classmethod decorator for class-level method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3049,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 6090,
    "end_token": 6104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      24396,
      11705,
      1352,
      329,
      1398,
      12,
      5715,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Use of classmethod decorator for class-level method."
  },
  {
    "line": 1297,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if inputvalidator does not properly validate input.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 6104,
    "end_token": 6112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      5128,
      12102,
      1352,
      857,
      407,
      6105,
      26571,
      5128,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if inputvalidator does not properly validate input."
  },
  {
    "line": 1297,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the function's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 6112,
    "end_token": 6120,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the function's purpose."
  },
  {
    "line": 1302,
    "text": "    def MI(cls, ohlc: DataFrame, period: int = 9, adjust: bool = True) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial data (ohlcv) and calculation of indicators.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      15789,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      860,
      11,
      4532,
      25,
      20512,
      796,
      6407,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 6120,
    "end_token": 6150,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      1366,
      357,
      48988,
      33967,
      8,
      290,
      17952,
      286,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial data (ohlcv) and calculation of indicators."
  },
  {
    "line": 1302,
    "text": "    def MI(cls, ohlc: DataFrame, period: int = 9, adjust: bool = True) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted moving average for time series data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      15789,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      860,
      11,
      4532,
      25,
      20512,
      796,
      6407,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 6150,
    "end_token": 6180,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      3867,
      2811,
      329,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted moving average for time series data."
  },
  {
    "line": 1309,
    "text": "        DEMA9 = EMA9.ewm(span=period, ignore_na=False, adjust=adjust).mean()",
    "annotation": "\ud83e\udde0 ML Signal: Cumulative sum operation on a financial indicator.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      360,
      27630,
      24,
      796,
      412,
      5673,
      24,
      13,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      8856,
      62,
      2616,
      28,
      25101,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      3419
    ],
    "start_token": 6180,
    "end_token": 6214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27843,
      13628,
      2160,
      4905,
      319,
      257,
      3176,
      16916,
      13
    ],
    "label": "ml_signal",
    "reason": "Cumulative sum operation on a financial indicator."
  },
  {
    "line": 1311,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6214,
    "end_token": 6214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition."
  },
  {
    "line": 1308,
    "text": "        EMA9 = _range.ewm(span=period, ignore_na=False, adjust=adjust).mean()",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      412,
      5673,
      24,
      796,
      4808,
      9521,
      13,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      8856,
      62,
      2616,
      28,
      25101,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      3419
    ],
    "start_token": 6214,
    "end_token": 6247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the method parameters and return type for better readability and maintainability."
  },
  {
    "line": 1311,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like EMA can be a signal for financial data analysis models.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6247,
    "end_token": 6247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      412,
      5673,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like EMA can be a signal for financial data analysis models."
  },
  {
    "line": 1312,
    "text": "        return pd.Series(mass.rolling(window=25).sum(), name=\"Mass Index\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7,
      22208,
      13,
      18886,
      7,
      17497,
      28,
      1495,
      737,
      16345,
      22784,
      1438,
      2625,
      20273,
      12901,
      4943
    ],
    "start_token": 6247,
    "end_token": 6275,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      705,
      1219,
      44601,
      6,
      6060,
      19778,
      4909,
      262,
      2938,
      15180,
      284,
      2948,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError."
  },
  {
    "line": 1315,
    "text": "    def BOP(cls, ohlc: DataFrame) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators like EMA can be a signal for financial data analysis models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      347,
      3185,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 6275,
    "end_token": 6294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      588,
      412,
      5673,
      460,
      307,
      257,
      6737,
      329,
      3176,
      1366,
      3781,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators like EMA can be a signal for financial data analysis models."
  },
  {
    "line": 1315,
    "text": "    def BOP(cls, ohlc: DataFrame) -> Series:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      347,
      3185,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 6294,
    "end_token": 6313,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      705,
      1219,
      44601,
      6,
      6060,
      19778,
      4909,
      262,
      2938,
      15180,
      284,
      2948,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError."
  },
  {
    "line": 1316,
    "text": "        \"\"\"Balance Of Power indicator\"\"\"",
    "annotation": "\u2705 Best Practice: Using pd.concat is a good practice for combining Series into a DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      45866,
      3226,
      4333,
      16916,
      37811
    ],
    "start_token": 6313,
    "end_token": 6326,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      318,
      257,
      922,
      3357,
      329,
      19771,
      7171,
      656,
      257,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat is a good practice for combining Series into a DataFrame."
  },
  {
    "line": 1320,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Decorators like @inputvalidator can help enforce input validation, improving code robustness.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 6326,
    "end_token": 6334,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      2024,
      588,
      2488,
      15414,
      12102,
      1352,
      460,
      1037,
      4605,
      5128,
      21201,
      11,
      10068,
      2438,
      12373,
      1108,
      13
    ],
    "label": "best_practice",
    "reason": "Decorators like @inputvalidator can help enforce input validation, improving code robustness."
  },
  {
    "line": 1315,
    "text": "    def BOP(cls, ohlc: DataFrame) -> Series:",
    "annotation": "\u2705 Best Practice: Use of class method decorator for a method that operates on class-level data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      347,
      3185,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 6334,
    "end_token": 6353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      2446,
      11705,
      1352,
      329,
      257,
      2446,
      326,
      14051,
      319,
      1398,
      12,
      5715,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of class method decorator for a method that operates on class-level data"
  },
  {
    "line": 1320,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of pandas Series for vectorized operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 6353,
    "end_token": 6361,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      329,
      15879,
      1143,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of pandas Series for vectorized operations"
  },
  {
    "line": 1327,
    "text": "         The distance from the current high to the prior low designates positive trend movement while the",
    "annotation": "\u2705 Best Practice: Use of pandas Series for vectorized operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      5253,
      422,
      262,
      1459,
      1029,
      284,
      262,
      3161,
      1877,
      1486,
      689,
      3967,
      5182,
      3356,
      981,
      262
    ],
    "start_token": 6361,
    "end_token": 6386,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      329,
      15879,
      1143,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of pandas Series for vectorized operations"
  },
  {
    "line": 1328,
    "text": "         distance between the current low and the prior high designates negative trend movement.",
    "annotation": "\u2705 Best Practice: Use of pandas Series for vectorized operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5253,
      1022,
      262,
      1459,
      1877,
      290,
      262,
      3161,
      1029,
      1486,
      689,
      4633,
      5182,
      3356,
      13
    ],
    "start_token": 6386,
    "end_token": 6409,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      329,
      15879,
      1143,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of pandas Series for vectorized operations"
  },
  {
    "line": 1332,
    "text": "        VMP = pd.Series((ohlc[\"high\"] - ohlc[\"low\"].shift()).abs())",
    "annotation": "\u2705 Best Practice: Use of rolling mean for time series data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      569,
      7378,
      796,
      279,
      67,
      13,
      27996,
      19510,
      1219,
      44601,
      14692,
      8929,
      8973,
      532,
      11752,
      44601,
      14692,
      9319,
      1,
      4083,
      30846,
      3419,
      737,
      8937,
      28955
    ],
    "start_token": 6409,
    "end_token": 6441,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10708,
      1612,
      329,
      640,
      2168,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of rolling mean for time series data"
  },
  {
    "line": 1333,
    "text": "        VMM = pd.Series((ohlc[\"low\"] - ohlc[\"high\"].shift()).abs())",
    "annotation": "\u2705 Best Practice: Use of class method decorator for a method that operates on class-level data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      569,
      12038,
      796,
      279,
      67,
      13,
      27996,
      19510,
      1219,
      44601,
      14692,
      9319,
      8973,
      532,
      11752,
      44601,
      14692,
      8929,
      1,
      4083,
      30846,
      3419,
      737,
      8937,
      28955
    ],
    "start_token": 6441,
    "end_token": 6473,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      2446,
      11705,
      1352,
      329,
      257,
      2446,
      326,
      14051,
      319,
      1398,
      12,
      5715,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of class method decorator for a method that operates on class-level data"
  },
  {
    "line": 1332,
    "text": "        VMP = pd.Series((ohlc[\"high\"] - ohlc[\"low\"].shift()).abs())",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      569,
      7378,
      796,
      279,
      67,
      13,
      27996,
      19510,
      1219,
      44601,
      14692,
      8929,
      8973,
      532,
      11752,
      44601,
      14692,
      9319,
      1,
      4083,
      30846,
      3419,
      737,
      8937,
      28955
    ],
    "start_token": 6473,
    "end_token": 6505,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 1333,
    "text": "        VMM = pd.Series((ohlc[\"low\"] - ohlc[\"high\"].shift()).abs())",
    "annotation": "\ud83e\udde0 ML Signal: Docstring provides detailed information about the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      569,
      12038,
      796,
      279,
      67,
      13,
      27996,
      19510,
      1219,
      44601,
      14692,
      9319,
      8973,
      532,
      11752,
      44601,
      14692,
      8929,
      1,
      4083,
      30846,
      3419,
      737,
      8937,
      28955
    ],
    "start_token": 6505,
    "end_token": 6537,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14432,
      8841,
      3769,
      6496,
      1321,
      546,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Docstring provides detailed information about the function's purpose and usage."
  },
  {
    "line": 1346,
    "text": "        cls, ohlc: DataFrame, r1: int = 10, r2: int = 15, r3: int = 20, r4: int = 30",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like 'tp' for typical price improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      374,
      16,
      25,
      493,
      796,
      838,
      11,
      374,
      17,
      25,
      493,
      796,
      1315,
      11,
      374,
      18,
      25,
      493,
      796,
      1160,
      11,
      374,
      19,
      25,
      493,
      796,
      1542
    ],
    "start_token": 6537,
    "end_token": 6580,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      705,
      34788,
      6,
      329,
      7226,
      2756,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like 'tp' for typical price improves code readability."
  },
  {
    "line": 1347,
    "text": "    ) -> DataFrame:",
    "annotation": "\u2705 Best Practice: Using rolling window functions for time series data is efficient and clear.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6060,
      19778,
      25
    ],
    "start_token": 6580,
    "end_token": 6588,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10708,
      4324,
      5499,
      329,
      640,
      2168,
      1366,
      318,
      6942,
      290,
      1598,
      13
    ],
    "label": "best_practice",
    "reason": "Using rolling window functions for time series data is efficient and clear."
  },
  {
    "line": 1350,
    "text": "        Chartists can look for divergences, overbought/oversold readings, signal line crossovers and centerline crossovers.\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using 'apply' with 'lambda' can be less efficient; consider using built-in functions if possible.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      22086,
      1023,
      460,
      804,
      329,
      12312,
      70,
      3007,
      11,
      625,
      65,
      2917,
      14,
      2502,
      24120,
      24654,
      11,
      6737,
      1627,
      269,
      21074,
      690,
      290,
      3641,
      1370,
      269,
      21074,
      690,
      526,
      15931
    ],
    "start_token": 6588,
    "end_token": 6625,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      705,
      39014,
      6,
      351,
      705,
      50033,
      6,
      460,
      307,
      1342,
      6942,
      26,
      2074,
      1262,
      3170,
      12,
      259,
      5499,
      611,
      1744,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using 'apply' with 'lambda' can be less efficient; consider using built-in functions if possible."
  },
  {
    "line": 1352,
    "text": "        r1 = cls.ROC(ohlc, r1).rolling(window=10).mean()",
    "annotation": "\u2705 Best Practice: Returning a named Series improves the clarity of the output.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      16,
      796,
      537,
      82,
      13,
      49,
      4503,
      7,
      1219,
      44601,
      11,
      374,
      16,
      737,
      18886,
      7,
      17497,
      28,
      940,
      737,
      32604,
      3419
    ],
    "start_token": 6625,
    "end_token": 6655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      19575,
      262,
      16287,
      286,
      262,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a named Series improves the clarity of the output."
  },
  {
    "line": 1356,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates that this method is intended to be called on the class itself, not instances.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6655,
    "end_token": 6655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      326,
      428,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346,
      11,
      407,
      10245,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates that this method is intended to be called on the class itself, not instances."
  },
  {
    "line": 1353,
    "text": "        r2 = cls.ROC(ohlc, r2).rolling(window=10).mean()",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      17,
      796,
      537,
      82,
      13,
      49,
      4503,
      7,
      1219,
      44601,
      11,
      374,
      17,
      737,
      18886,
      7,
      17497,
      28,
      940,
      737,
      32604,
      3419
    ],
    "start_token": 6655,
    "end_token": 6685,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 1355,
    "text": "        r4 = cls.ROC(ohlc, r4).rolling(window=15).mean()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific period (14) for ROC calculation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      19,
      796,
      537,
      82,
      13,
      49,
      4503,
      7,
      1219,
      44601,
      11,
      374,
      19,
      737,
      18886,
      7,
      17497,
      28,
      1314,
      737,
      32604,
      3419
    ],
    "start_token": 6685,
    "end_token": 6715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2278,
      357,
      1415,
      8,
      329,
      371,
      4503,
      17952,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific period (14) for ROC calculation."
  },
  {
    "line": 1356,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific period (11) for ROC calculation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6715,
    "end_token": 6715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2278,
      357,
      1157,
      8,
      329,
      371,
      4503,
      17952,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific period (11) for ROC calculation."
  },
  {
    "line": 1361,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific parameters for EWM (span=10, min_periods=9).",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6715,
    "end_token": 6715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      10007,
      329,
      412,
      22117,
      357,
      12626,
      28,
      940,
      11,
      949,
      62,
      41007,
      82,
      28,
      24,
      737
    ],
    "label": "ml_signal",
    "reason": "Usage of specific parameters for EWM (span=10, min_periods=9)."
  },
  {
    "line": 1362,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Naming the Series for clarity and easier identification.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 6715,
    "end_token": 6721,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      262,
      7171,
      329,
      16287,
      290,
      4577,
      11795,
      13
    ],
    "label": "best_practice",
    "reason": "Naming the Series for clarity and easier identification."
  },
  {
    "line": 1365,
    "text": "        ohlc: DataFrame,",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on class-level data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 6721,
    "end_token": 6734,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      12,
      5715,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on class-level data."
  },
  {
    "line": 1362,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 6734,
    "end_token": 6740,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose."
  },
  {
    "line": 1372,
    "text": "        \"\"\"True Strength Index (TSI) is a momentum oscillator based on a double smoothing of price changes.\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Creation of new features (nbp, nsp, nv) from existing data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      17821,
      14646,
      12901,
      357,
      4694,
      40,
      8,
      318,
      257,
      12858,
      24969,
      1352,
      1912,
      319,
      257,
      4274,
      32746,
      722,
      286,
      2756,
      2458,
      526,
      15931
    ],
    "start_token": 6740,
    "end_token": 6771,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      649,
      3033,
      357,
      77,
      46583,
      11,
      299,
      2777,
      11,
      299,
      85,
      8,
      422,
      4683,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Creation of new features (nbp, nsp, nv) from existing data."
  },
  {
    "line": 1375,
    "text": "        momentum = pd.Series(ohlc[column].diff())  ## 1 period momentum",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame with calculated indicators.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12858,
      796,
      279,
      67,
      13,
      27996,
      7,
      1219,
      44601,
      58,
      28665,
      4083,
      26069,
      28955,
      220,
      22492,
      352,
      2278,
      12858
    ],
    "start_token": 6771,
    "end_token": 6797,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      351,
      10488,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame with calculated indicators."
  },
  {
    "line": 1376,
    "text": "        _EMA25 = pd.Series(",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      27630,
      1495,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 6797,
    "end_token": 6813,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition."
  },
  {
    "line": 1376,
    "text": "        _EMA25 = pd.Series(",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the function's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      27630,
      1495,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 6813,
    "end_token": 6829,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the function's purpose."
  },
  {
    "line": 1382,
    "text": "            name=\"_price change double smoothed DEMA13\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      62,
      20888,
      1487,
      4274,
      32746,
      704,
      360,
      27630,
      1485,
      1600
    ],
    "start_token": 6829,
    "end_token": 6852,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      357,
      413,
      76,
      8,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average (ewm) for smoothing data."
  },
  {
    "line": 1384,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6852,
    "end_token": 6852,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      357,
      413,
      76,
      8,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average (ewm) for smoothing data."
  },
  {
    "line": 1388,
    "text": "            absmomentum.ewm(span=long, min_periods=long - 1, adjust=adjust).mean(),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2352,
      32542,
      298,
      388,
      13,
      413,
      76,
      7,
      12626,
      28,
      6511,
      11,
      949,
      62,
      41007,
      82,
      28,
      6511,
      532,
      352,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784
    ],
    "start_token": 6852,
    "end_token": 6890,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      357,
      413,
      76,
      8,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average (ewm) for smoothing data."
  },
  {
    "line": 1391,
    "text": "        _aDEMA13 = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      64,
      35,
      27630,
      1485,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 6890,
    "end_token": 6908,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      357,
      413,
      76,
      8,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average (ewm) for smoothing data."
  },
  {
    "line": 1391,
    "text": "        _aDEMA13 = pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      64,
      35,
      27630,
      1485,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 6908,
    "end_token": 6926,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      39682,
      26356,
      3867,
      2811,
      357,
      413,
      76,
      8,
      329,
      32746,
      722,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of exponential weighted moving average (ewm) for smoothing data."
  },
  {
    "line": 1391,
    "text": "        _aDEMA13 = pd.Series(",
    "annotation": "\u2705 Best Practice: Using pd.concat to combine series into a DataFrame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      64,
      35,
      27630,
      1485,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 6926,
    "end_token": 6944,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      2168,
      656,
      257,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat to combine series into a DataFrame."
  },
  {
    "line": 1399,
    "text": "            name=\"signal\",",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator to indicate method operates on the class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      12683,
      282,
      1600
    ],
    "start_token": 6944,
    "end_token": 6960,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      284,
      7603,
      2446,
      14051,
      319,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator to indicate method operates on the class."
  },
  {
    "line": 1399,
    "text": "            name=\"signal\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameters for period, factor, column, and adjust",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      12683,
      282,
      1600
    ],
    "start_token": 6960,
    "end_token": 6976,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      10007,
      329,
      2278,
      11,
      5766,
      11,
      5721,
      11,
      290,
      4532
    ],
    "label": "ml_signal",
    "reason": "Use of default parameters for period, factor, column, and adjust"
  },
  {
    "line": 1407,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if the specified column does not exist in the DataFrame",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6976,
    "end_token": 6976,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      262,
      7368,
      5721,
      857,
      407,
      2152,
      287,
      262,
      6060,
      19778
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if the specified column does not exist in the DataFrame"
  },
  {
    "line": 1413,
    "text": "        \"\"\"The accumulation/distribution line was created by Marc Chaikin to determine the flow of money into or out of a security.",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names (_gain, _loss) for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      24106,
      14,
      17080,
      3890,
      1627,
      373,
      2727,
      416,
      13067,
      20703,
      1134,
      259,
      284,
      5004,
      262,
      5202,
      286,
      1637,
      656,
      393,
      503,
      286,
      257,
      2324,
      13
    ],
    "start_token": 6976,
    "end_token": 7010,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      44104,
      48544,
      11,
      4808,
      22462,
      8,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names (_gain, _loss) for readability"
  },
  {
    "line": 1413,
    "text": "        \"\"\"The accumulation/distribution line was created by Marc Chaikin to determine the flow of money into or out of a security.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by zero risk if _gain + _loss results in zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      24106,
      14,
      17080,
      3890,
      1627,
      373,
      2727,
      416,
      13067,
      20703,
      1134,
      259,
      284,
      5004,
      262,
      5202,
      286,
      1637,
      656,
      393,
      503,
      286,
      257,
      2324,
      13
    ],
    "start_token": 7010,
    "end_token": 7044,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      6632,
      2526,
      611,
      4808,
      48544,
      1343,
      4808,
      22462,
      2482,
      287,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by zero risk if _gain + _loss results in zero"
  },
  {
    "line": 1417,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7044,
    "end_token": 7044,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition"
  },
  {
    "line": 1420,
    "text": "            - (ohlcv[\"high\"] - ohlcv[\"close\"])) / (ohlcv[\"high\"] - ohlcv[\"low\"]),",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      357,
      48988,
      33967,
      14692,
      8929,
      8973,
      532,
      11752,
      75,
      33967,
      14692,
      19836,
      8973,
      4008,
      1220,
      357,
      48988,
      33967,
      14692,
      8929,
      8973,
      532,
      11752,
      75,
      33967,
      14692,
      9319,
      8973,
      828
    ],
    "start_token": 7044,
    "end_token": 7085,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1425,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window operations on financial data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7085,
    "end_token": 7085,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      4560,
      319,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window operations on financial data."
  },
  {
    "line": 1425,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if 'high' column is missing in the DataFrame.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7085,
    "end_token": 7085,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      705,
      8929,
      6,
      5721,
      318,
      4814,
      287,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if 'high' column is missing in the DataFrame."
  },
  {
    "line": 1429,
    "text": "        \"\"\"Chaikin Oscillator, named after its creator, Marc Chaikin, the Chaikin oscillator is an oscillator that measures the accumulation/distribution",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom ATR function on financial data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1925,
      64,
      1134,
      259,
      440,
      22360,
      1352,
      11,
      3706,
      706,
      663,
      13172,
      11,
      13067,
      20703,
      1134,
      259,
      11,
      262,
      20703,
      1134,
      259,
      24969,
      1352,
      318,
      281,
      24969,
      1352,
      326,
      5260,
      262,
      24106,
      14,
      17080,
      3890
    ],
    "start_token": 7085,
    "end_token": 7128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      5161,
      49,
      2163,
      319,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of custom ATR function on financial data."
  },
  {
    "line": 1433,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window operations on financial data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7128,
    "end_token": 7128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      4560,
      319,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window operations on financial data."
  },
  {
    "line": 1433,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if 'low' column is missing in the DataFrame.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7128,
    "end_token": 7128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      705,
      9319,
      6,
      5721,
      318,
      4814,
      287,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if 'low' column is missing in the DataFrame."
  },
  {
    "line": 1436,
    "text": "            - cls.ADL(ohlcv).ewm(span=10, min_periods=9, adjust=adjust).mean()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom ATR function on financial data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      537,
      82,
      13,
      2885,
      43,
      7,
      48988,
      33967,
      737,
      413,
      76,
      7,
      12626,
      28,
      940,
      11,
      949,
      62,
      41007,
      82,
      28,
      24,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      3419
    ],
    "start_token": 7128,
    "end_token": 7169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      5161,
      49,
      2163,
      319,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of custom ATR function on financial data."
  },
  {
    "line": 1440,
    "text": "    @inputvalidator(input_=\"ohlcv\")",
    "annotation": "\u2705 Best Practice: Using pd.concat to combine Series into a DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      15414,
      12102,
      1352,
      7,
      15414,
      62,
      2625,
      48988,
      33967,
      4943
    ],
    "start_token": 7169,
    "end_token": 7183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      7171,
      656,
      257,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat to combine Series into a DataFrame."
  },
  {
    "line": 1441,
    "text": "    def MFI(cls, ohlc: DataFrame, period: int = 14) -> Series:",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on class-level data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      337,
      11674,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1478,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 7183,
    "end_token": 7208,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      12,
      5715,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on class-level data."
  },
  {
    "line": 1435,
    "text": "            cls.ADL(ohlcv).ewm(span=3, min_periods=2, adjust=adjust).mean()",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      82,
      13,
      2885,
      43,
      7,
      48988,
      33967,
      737,
      413,
      76,
      7,
      12626,
      28,
      18,
      11,
      949,
      62,
      41007,
      82,
      28,
      17,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      3419
    ],
    "start_token": 7208,
    "end_token": 7248,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the method parameters and return type for better readability and maintainability."
  },
  {
    "line": 1440,
    "text": "    @inputvalidator(input_=\"ohlcv\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame column access and tail method indicates a pattern for time series data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      15414,
      12102,
      1352,
      7,
      15414,
      62,
      2625,
      48988,
      33967,
      4943
    ],
    "start_token": 7248,
    "end_token": 7262,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      5721,
      1895,
      290,
      7894,
      2446,
      9217,
      257,
      3912,
      329,
      640,
      2168,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame column access and tail method indicates a pattern for time series data processing."
  },
  {
    "line": 1441,
    "text": "    def MFI(cls, ohlc: DataFrame, period: int = 14) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame column access and tail method indicates a pattern for time series data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      337,
      11674,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1478,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 7262,
    "end_token": 7287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      5721,
      1895,
      290,
      7894,
      2446,
      9217,
      257,
      3912,
      329,
      640,
      2168,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame column access and tail method indicates a pattern for time series data processing."
  },
  {
    "line": 1445,
    "text": "        The money flow indicator is one of the more reliable indicators of overbought and oversold conditions, perhaps partly because",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if period is set to 0.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      1637,
      5202,
      16916,
      318,
      530,
      286,
      262,
      517,
      9314,
      21337,
      286,
      625,
      65,
      2917,
      290,
      625,
      24120,
      3403,
      11,
      3737,
      11476,
      780
    ],
    "start_token": 7287,
    "end_token": 7317,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      2278,
      318,
      900,
      284,
      657,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if period is set to 0."
  },
  {
    "line": 1446,
    "text": "        it uses the higher readings of 80 and 20 as compared to the RSI's overbought/oversold readings of 70 and 30\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of difference between two series and division by a constant is a common pattern in financial indicators.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      340,
      3544,
      262,
      2440,
      24654,
      286,
      4019,
      290,
      1160,
      355,
      3688,
      284,
      262,
      371,
      11584,
      338,
      625,
      65,
      2917,
      14,
      2502,
      24120,
      24654,
      286,
      4317,
      290,
      1542,
      37811
    ],
    "start_token": 7317,
    "end_token": 7352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      3580,
      1022,
      734,
      2168,
      290,
      7297,
      416,
      257,
      6937,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of difference between two series and division by a constant is a common pattern in financial indicators."
  },
  {
    "line": 1449,
    "text": "        rmf = pd.Series(tp * ohlc[\"volume\"], name=\"rmf\")  ## Real Money Flow",
    "annotation": "\u2705 Best Practice: The @classmethod decorator should be placed directly above the method definition for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      42721,
      69,
      796,
      279,
      67,
      13,
      27996,
      7,
      34788,
      1635,
      11752,
      44601,
      14692,
      29048,
      33116,
      1438,
      2625,
      26224,
      69,
      4943,
      220,
      22492,
      6416,
      12911,
      27782
    ],
    "start_token": 7352,
    "end_token": 7384,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      383,
      2488,
      4871,
      24396,
      11705,
      1352,
      815,
      307,
      4624,
      3264,
      2029,
      262,
      2446,
      6770,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "The @classmethod decorator should be placed directly above the method definition for clarity."
  },
  {
    "line": 1446,
    "text": "        it uses the higher readings of 80 and 20 as compared to the RSI's overbought/oversold readings of 70 and 30\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      340,
      3544,
      262,
      2440,
      24654,
      286,
      4019,
      290,
      1160,
      355,
      3688,
      284,
      262,
      371,
      11584,
      338,
      625,
      65,
      2917,
      14,
      2502,
      24120,
      24654,
      286,
      4317,
      290,
      1542,
      37811
    ],
    "start_token": 7384,
    "end_token": 7419,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 1449,
    "text": "        rmf = pd.Series(tp * ohlc[\"volume\"], name=\"rmf\")  ## Real Money Flow",
    "annotation": "\u2705 Best Practice: Use of list comprehension for concise and efficient iteration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      42721,
      69,
      796,
      279,
      67,
      13,
      27996,
      7,
      34788,
      1635,
      11752,
      44601,
      14692,
      29048,
      33116,
      1438,
      2625,
      26224,
      69,
      4943,
      220,
      22492,
      6416,
      12911,
      27782
    ],
    "start_token": 7419,
    "end_token": 7451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1351,
      35915,
      329,
      35327,
      290,
      6942,
      24415
    ],
    "label": "best_practice",
    "reason": "Use of list comprehension for concise and efficient iteration"
  },
  {
    "line": 1452,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of list comprehension for concise and efficient iteration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7451,
    "end_token": 7451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1351,
      35915,
      329,
      35327,
      290,
      6942,
      24415
    ],
    "label": "best_practice",
    "reason": "Use of list comprehension for concise and efficient iteration"
  },
  {
    "line": 1455,
    "text": "                return row[\"rmf\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if ohlcv[\"hh\"] equals ohlcv[\"ll\"]",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      5752,
      14692,
      26224,
      69,
      8973
    ],
    "start_token": 7451,
    "end_token": 7472,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      11752,
      75,
      33967,
      14692,
      12337,
      8973,
      21767,
      11752,
      75,
      33967,
      14692,
      297,
      8973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if ohlcv[\"hh\"] equals ohlcv[\"ll\"]"
  },
  {
    "line": 1458,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize new DataFrame columns before use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7472,
    "end_token": 7472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      649,
      6060,
      19778,
      15180,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Initialize new DataFrame columns before use"
  },
  {
    "line": 1458,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function is incomplete and raises NotImplementedError",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7472,
    "end_token": 7472,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      318,
      17503,
      290,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function is incomplete and raises NotImplementedError"
  },
  {
    "line": 1463,
    "text": "                return 0",
    "annotation": "\u2705 Best Practice: Use of classmethod decorator for methods that operate on the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      657
    ],
    "start_token": 7472,
    "end_token": 7489,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of classmethod decorator for methods that operate on the class"
  },
  {
    "line": 1469,
    "text": "            _mf[\"pos\"].rolling(window=period).sum()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a class method to perform financial calculations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      76,
      69,
      14692,
      1930,
      1,
      4083,
      18886,
      7,
      17497,
      28,
      41007,
      737,
      16345,
      3419
    ],
    "start_token": 7489,
    "end_token": 7515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1398,
      2446,
      284,
      1620,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Usage of a class method to perform financial calculations"
  },
  {
    "line": 1471,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted moving average",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 7515,
    "end_token": 7523,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      3867,
      2811
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted moving average"
  },
  {
    "line": 1474,
    "text": "            100 - (100 / (1 + mfratio)), name=\"{0} period MFI\".format(period)",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1802,
      532,
      357,
      3064,
      1220,
      357,
      16,
      1343,
      285,
      8310,
      39485,
      36911,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      337,
      11674,
      1911,
      18982,
      7,
      41007,
      8
    ],
    "start_token": 7523,
    "end_token": 7559,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 1477,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of a custom indicator using financial data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 7559,
    "end_token": 7565,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      257,
      2183,
      16916,
      1262,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Calculation of a custom indicator using financial data"
  },
  {
    "line": 1479,
    "text": "    def OBV(cls, ohlcv: DataFrame, column: str = \"close\") -> Series:",
    "annotation": "\u2705 Best Practice: Use of pandas Series for time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      25334,
      53,
      7,
      565,
      82,
      11,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11,
      5721,
      25,
      965,
      796,
      366,
      19836,
      4943,
      4613,
      7171,
      25
    ],
    "start_token": 7565,
    "end_token": 7592,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      329,
      640,
      2168,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of pandas Series for time series data"
  },
  {
    "line": 1480,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of rolling window for smoothing data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 7592,
    "end_token": 7600,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10708,
      4324,
      329,
      32746,
      722,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of rolling window for smoothing data"
  },
  {
    "line": 1483,
    "text": "        It was one of the first indicators to measure positive and negative volume flow.",
    "annotation": "\u2705 Best Practice: Concatenating results for a combined DataFrame output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      632,
      373,
      530,
      286,
      262,
      717,
      21337,
      284,
      3953,
      3967,
      290,
      4633,
      6115,
      5202,
      13
    ],
    "start_token": 7600,
    "end_token": 7622,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1482,
      9246,
      268,
      803,
      2482,
      329,
      257,
      5929,
      6060,
      19778,
      5072
    ],
    "label": "best_practice",
    "reason": "Concatenating results for a combined DataFrame output"
  },
  {
    "line": 1480,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters and type hints",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 7622,
    "end_token": 7630,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007,
      290,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters and type hints"
  },
  {
    "line": 1485,
    "text": "",
    "annotation": "\u2705 Best Practice: Handle floating point errors by setting numpy error handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7630,
    "end_token": 7630,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33141,
      12462,
      966,
      8563,
      416,
      4634,
      299,
      32152,
      4049,
      9041
    ],
    "label": "best_practice",
    "reason": "Handle floating point errors by setting numpy error handling"
  },
  {
    "line": 1488,
    "text": "        :param pd.DataFrame ohlc: 'open, high, low, close' pandas DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations on DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      279,
      67,
      13,
      6601,
      19778,
      11752,
      44601,
      25,
      705,
      9654,
      11,
      1029,
      11,
      1877,
      11,
      1969,
      6,
      19798,
      292,
      6060,
      19778
    ],
    "start_token": 7630,
    "end_token": 7660,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      319,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations on DataFrame"
  },
  {
    "line": 1491,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted moving average",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7660,
    "end_token": 7660,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      3867,
      2811
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted moving average"
  },
  {
    "line": 1496,
    "text": "        no_change = ohlcv[column] == ohlcv[column].shift(1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if _smooth is 1 or -1",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      645,
      62,
      3803,
      796,
      11752,
      75,
      33967,
      58,
      28665,
      60,
      6624,
      11752,
      75,
      33967,
      58,
      28665,
      4083,
      30846,
      7,
      16,
      8
    ],
    "start_token": 7660,
    "end_token": 7688,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      4808,
      5796,
      5226,
      318,
      352,
      393,
      532,
      16
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if _smooth is 1 or -1"
  },
  {
    "line": 1501,
    "text": "            ohlcv.loc[neg_change, \"OBV\"] = -ohlcv[\"volume\"]",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      75,
      33967,
      13,
      17946,
      58,
      12480,
      62,
      3803,
      11,
      366,
      9864,
      53,
      8973,
      796,
      532,
      48988,
      33967,
      14692,
      29048,
      8973
    ],
    "start_token": 7688,
    "end_token": 7720,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method"
  },
  {
    "line": 1504,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7720,
    "end_token": 7720,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1509,
    "text": "    def WOBV(cls, ohlcv: DataFrame, column: str = \"close\") -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window calculations on time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      370,
      9864,
      53,
      7,
      565,
      82,
      11,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11,
      5721,
      25,
      965,
      796,
      366,
      19836,
      4943,
      4613,
      7171,
      25
    ],
    "start_token": 7720,
    "end_token": 7748,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      16765,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window calculations on time series data."
  },
  {
    "line": 1517,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window calculations on time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 7748,
    "end_token": 7756,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      16765,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window calculations on time series data."
  },
  {
    "line": 1528,
    "text": "        column: str = \"close\",",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of moving averages and shifts for time series forecasting.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 7756,
    "end_token": 7770,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      3867,
      25694,
      290,
      15381,
      329,
      640,
      2168,
      41164,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of moving averages and shifts for time series forecasting."
  },
  {
    "line": 1528,
    "text": "        column: str = \"close\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window calculations on time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 7770,
    "end_token": 7784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      16765,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window calculations on time series data."
  },
  {
    "line": 1542,
    "text": "        return pd.Series(100 * (dvma / vma), name=\"VZO\")",
    "annotation": "\ud83e\udde0 ML Signal: Shifting time series data for lagging indicators.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7,
      3064,
      1635,
      357,
      67,
      85,
      2611,
      1220,
      410,
      2611,
      828,
      1438,
      2625,
      53,
      57,
      46,
      4943
    ],
    "start_token": 7784,
    "end_token": 7813,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      911,
      13309,
      640,
      2168,
      1366,
      329,
      300,
      16406,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Shifting time series data for lagging indicators."
  },
  {
    "line": 1546,
    "text": "        cls,",
    "annotation": "\u2705 Best Practice: Using pd.concat for combining multiple series into a DataFrame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      82,
      11
    ],
    "start_token": 7813,
    "end_token": 7823,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      3294,
      2168,
      656,
      257,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat for combining multiple series into a DataFrame."
  },
  {
    "line": 1554,
    "text": "        then the closing price will have a positive value (bullish); otherwise it will have a negative value (bearish).",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters and type hints",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      788,
      262,
      9605,
      2756,
      481,
      423,
      257,
      3967,
      1988,
      357,
      16308,
      680,
      1776,
      4306,
      340,
      481,
      423,
      257,
      4633,
      1988,
      357,
      33227,
      680,
      737
    ],
    "start_token": 7823,
    "end_token": 7854,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007,
      290,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters and type hints"
  },
  {
    "line": 1562,
    "text": "        cp = pd.Series(r.ewm(span=period, adjust=adjust).mean())",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if MA is not a pd.Series and cls.DEMA is not defined",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31396,
      796,
      279,
      67,
      13,
      27996,
      7,
      81,
      13,
      413,
      76,
      7,
      12626,
      28,
      41007,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      28955
    ],
    "start_token": 7854,
    "end_token": 7883,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      8779,
      318,
      407,
      257,
      279,
      67,
      13,
      27996,
      290,
      537,
      82,
      13,
      35,
      27630,
      318,
      407,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if MA is not a pd.Series and cls.DEMA is not defined"
  },
  {
    "line": 1568,
    "text": "    @inputvalidator(input_=\"ohlcv\")",
    "annotation": "\u2705 Best Practice: Use of pd.Series to ensure consistent data structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      15414,
      12102,
      1352,
      7,
      15414,
      62,
      2625,
      48988,
      33967,
      4943
    ],
    "start_token": 7883,
    "end_token": 7897,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      27996,
      284,
      4155,
      6414,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Use of pd.Series to ensure consistent data structure"
  },
  {
    "line": 1573,
    "text": "        column: str = \"close\",",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining Series into a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 7897,
    "end_token": 7911,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      7171,
      656,
      257,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining Series into a DataFrame"
  },
  {
    "line": 1573,
    "text": "        column: str = \"close\",",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for class method definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5721,
      25,
      965,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 7911,
    "end_token": 7925,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      1398,
      2446,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for class method definition"
  },
  {
    "line": 1585,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Type check for MA could be bypassed if a subclass of Series is passed",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7925,
    "end_token": 7925,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      2198,
      329,
      8779,
      714,
      307,
      17286,
      276,
      611,
      257,
      47611,
      286,
      7171,
      318,
      3804
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Type check for MA could be bypassed if a subclass of Series is passed"
  },
  {
    "line": 1586,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use of pd.Series to ensure consistent data structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 7925,
    "end_token": 7931,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      27996,
      284,
      4155,
      6414,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Use of pd.Series to ensure consistent data structure"
  },
  {
    "line": 1591,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of BBANDS function indicates a pattern for technical analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 7931,
    "end_token": 7939,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12597,
      1565,
      5258,
      2163,
      9217,
      257,
      3912,
      329,
      6276,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of BBANDS function indicates a pattern for technical analysis"
  },
  {
    "line": 1593,
    "text": "        Adopted from  Elder's Force Index.",
    "annotation": "\ud83e\udde0 ML Signal: Use of KC function indicates a pattern for technical analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1215,
      45256,
      422,
      220,
      15624,
      338,
      5221,
      12901,
      13
    ],
    "start_token": 7939,
    "end_token": 7955,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      25247,
      2163,
      9217,
      257,
      3912,
      329,
      6276,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of KC function indicates a pattern for technical analysis"
  },
  {
    "line": 1594,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining DataFrames ensures scalability and readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 7955,
    "end_token": 7963,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      35439,
      19047,
      16578,
      1799,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining DataFrames ensures scalability and readability"
  },
  {
    "line": 1593,
    "text": "        Adopted from  Elder's Force Index.",
    "annotation": "\ud83e\udde0 ML Signal: Function checks conditions on row data, useful for feature extraction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1215,
      45256,
      422,
      220,
      15624,
      338,
      5221,
      12901,
      13
    ],
    "start_token": 7963,
    "end_token": 7979,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8794,
      3403,
      319,
      5752,
      1366,
      11,
      4465,
      329,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Function checks conditions on row data, useful for feature extraction"
  },
  {
    "line": 1598,
    "text": "            fi1.ewm(ignore_na=False, min_periods=9, span=10, adjust=adjust).mean(),",
    "annotation": "\ud83e\udde0 ML Signal: Applying a function across DataFrame rows, common pattern in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25912,
      16,
      13,
      413,
      76,
      7,
      46430,
      62,
      2616,
      28,
      25101,
      11,
      949,
      62,
      41007,
      82,
      28,
      24,
      11,
      11506,
      28,
      940,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784
    ],
    "start_token": 7979,
    "end_token": 8019,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      2163,
      1973,
      6060,
      19778,
      15274,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Applying a function across DataFrame rows, common pattern in data processing"
  },
  {
    "line": 1601,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.Series to ensure consistent return type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8019,
    "end_token": 8019,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      27996,
      284,
      4155,
      6414,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Using pd.Series to ensure consistent return type"
  },
  {
    "line": 1602,
    "text": "        return cfi.cumsum()",
    "annotation": "\u2705 Best Practice: Using decorators to enforce input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      269,
      12463,
      13,
      66,
      5700,
      388,
      3419
    ],
    "start_token": 8019,
    "end_token": 8034,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11705,
      2024,
      284,
      4605,
      5128,
      21201
    ],
    "label": "best_practice",
    "reason": "Using decorators to enforce input validation"
  },
  {
    "line": 1602,
    "text": "        return cfi.cumsum()",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      269,
      12463,
      13,
      66,
      5700,
      388,
      3419
    ],
    "start_token": 8034,
    "end_token": 8049,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 1612,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if \"high\" equals \"low\".",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8049,
    "end_token": 8049,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      366,
      8929,
      1,
      21767,
      366,
      9319,
      1911
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if \"high\" equals \"low\"."
  },
  {
    "line": 1616,
    "text": "        \"\"\"Ease of Movement (EMV) is a volume-based oscillator that fluctuates above and below the zero line.",
    "annotation": "\u2705 Best Practice: Returning a named Series improves readability and usability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      36,
      589,
      286,
      15477,
      357,
      3620,
      53,
      8,
      318,
      257,
      6115,
      12,
      3106,
      24969,
      1352,
      326,
      19180,
      12632,
      2029,
      290,
      2174,
      262,
      6632,
      1627,
      13
    ],
    "start_token": 8049,
    "end_token": 8082,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      19575,
      1100,
      1799,
      290,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a named Series improves readability and usability."
  },
  {
    "line": 1617,
    "text": "        As its name implies, it is designed to measure the 'ease' of price movement.",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators indicates a pattern for class method definition.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1081,
      663,
      1438,
      15565,
      11,
      340,
      318,
      3562,
      284,
      3953,
      262,
      705,
      68,
      589,
      6,
      286,
      2756,
      3356,
      13
    ],
    "start_token": 8082,
    "end_token": 8108,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      9217,
      257,
      3912,
      329,
      1398,
      2446,
      6770,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators indicates a pattern for class method definition."
  },
  {
    "line": 1617,
    "text": "        As its name implies, it is designed to measure the 'ease' of price movement.",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with default parameters and type hints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1081,
      663,
      1438,
      15565,
      11,
      340,
      318,
      3562,
      284,
      3953,
      262,
      705,
      68,
      589,
      6,
      286,
      2756,
      3356,
      13
    ],
    "start_token": 8108,
    "end_token": 8134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      4277,
      10007,
      290,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Method signature with default parameters and type hints"
  },
  {
    "line": 1623,
    "text": "            - (ohlcv[\"high\"].shift() + ohlcv[\"low\"].shift()) / 2",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      357,
      48988,
      33967,
      14692,
      8929,
      1,
      4083,
      30846,
      3419,
      1343,
      11752,
      75,
      33967,
      14692,
      9319,
      1,
      4083,
      30846,
      28955,
      1220,
      362
    ],
    "start_token": 8134,
    "end_token": 8167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 1625,
    "text": "        box_ratio = pd.Series(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if TA.TP is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3091,
      62,
      10366,
      952,
      796,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 8167,
    "end_token": 8184,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      21664,
      13,
      7250,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if TA.TP is not validated or sanitized"
  },
  {
    "line": 1627,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of rolling mean for time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8184,
    "end_token": 8192,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10708,
      1612,
      329,
      640,
      2168,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of rolling mean for time series data"
  },
  {
    "line": 1629,
    "text": "        _emv = pd.Series(distance / box_ratio)",
    "annotation": "\u2705 Best Practice: Use of pd.Series with a name for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      368,
      85,
      796,
      279,
      67,
      13,
      27996,
      7,
      30246,
      1220,
      3091,
      62,
      10366,
      952,
      8
    ],
    "start_token": 8192,
    "end_token": 8215,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      27996,
      351,
      257,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of pd.Series with a name for clarity"
  },
  {
    "line": 1630,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining DataFrame columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8215,
    "end_token": 8215,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      19778,
      15180
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining DataFrame columns"
  },
  {
    "line": 1627,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on data values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8215,
    "end_token": 8223,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1366,
      3815
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on data values"
  },
  {
    "line": 1630,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on data values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8223,
    "end_token": 8223,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1366,
      3815
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on data values"
  },
  {
    "line": 1635,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame apply method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 8223,
    "end_token": 8229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      4174,
      2446
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame apply method"
  },
  {
    "line": 1637,
    "text": "        \"\"\"Commodity Channel Index (CCI) is a versatile indicator that can be used to identify a new trend or warn of extreme conditions.",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      6935,
      375,
      414,
      11102,
      12901,
      357,
      4093,
      40,
      8,
      318,
      257,
      21362,
      16916,
      326,
      460,
      307,
      973,
      284,
      5911,
      257,
      649,
      5182,
      393,
      9828,
      286,
      3257,
      3403,
      13
    ],
    "start_token": 8229,
    "end_token": 8265,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4905
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operation"
  },
  {
    "line": 1637,
    "text": "        \"\"\"Commodity Channel Index (CCI) is a versatile indicator that can be used to identify a new trend or warn of extreme conditions.",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas Series for return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      6935,
      375,
      414,
      11102,
      12901,
      357,
      4093,
      40,
      8,
      318,
      257,
      21362,
      16916,
      326,
      460,
      307,
      973,
      284,
      5911,
      257,
      649,
      5182,
      393,
      9828,
      286,
      3257,
      3403,
      13
    ],
    "start_token": 8265,
    "end_token": 8301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      329,
      1441,
      1988
    ],
    "label": "ml_signal",
    "reason": "Use of pandas Series for return value"
  },
  {
    "line": 1657,
    "text": "            (tp - tp_rolling.mean()) / (constant * mad),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a technical indicator function for financial data analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      34788,
      532,
      256,
      79,
      62,
      18886,
      13,
      32604,
      28955,
      1220,
      357,
      9979,
      415,
      1635,
      8805,
      828
    ],
    "start_token": 8301,
    "end_token": 8329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      6276,
      16916,
      2163,
      329,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of a technical indicator function for financial data analysis"
  },
  {
    "line": 1659,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of logarithmic transformation and differencing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8329,
    "end_token": 8337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2604,
      283,
      342,
      9383,
      13389,
      290,
      980,
      77,
      2259
    ],
    "label": "ml_signal",
    "reason": "Use of logarithmic transformation and differencing"
  },
  {
    "line": 1661,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Rolling standard deviation calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 8337,
    "end_token": 8343,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21567,
      3210,
      28833,
      17952
    ],
    "label": "ml_signal",
    "reason": "Rolling standard deviation calculation"
  },
  {
    "line": 1662,
    "text": "    def COPP(cls, ohlc: DataFrame, adjust: bool = True) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Use of a scaling factor in financial calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      27975,
      47,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      4532,
      25,
      20512,
      796,
      6407,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 8343,
    "end_token": 8368,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      20796,
      5766,
      287,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Use of a scaling factor in financial calculations"
  },
  {
    "line": 1665,
    "text": "        roc1 = cls.ROC(ohlc, 14)",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of price change",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      686,
      66,
      16,
      796,
      537,
      82,
      13,
      49,
      4503,
      7,
      1219,
      44601,
      11,
      1478,
      8
    ],
    "start_token": 8368,
    "end_token": 8390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2756,
      1487
    ],
    "label": "ml_signal",
    "reason": "Calculation of price change"
  },
  {
    "line": 1667,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Rolling mean calculation for volume",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8390,
    "end_token": 8390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21567,
      1612,
      17952,
      329,
      6115
    ],
    "label": "ml_signal",
    "reason": "Rolling mean calculation for volume"
  },
  {
    "line": 1671,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8390,
    "end_token": 8398,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining DataFrames"
  },
  {
    "line": 1673,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 8398,
    "end_token": 8404,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining DataFrames"
  },
  {
    "line": 1675,
    "text": "        \"\"\"BASP indicator serves to identify buying and selling pressure.\"\"\"",
    "annotation": "\u2705 Best Practice: Use of fillna to handle missing data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      33,
      1921,
      47,
      16916,
      9179,
      284,
      5911,
      7067,
      290,
      6301,
      3833,
      526,
      15931
    ],
    "start_token": 8404,
    "end_token": 8425,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6070,
      2616,
      284,
      5412,
      4814,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of fillna to handle missing data"
  },
  {
    "line": 1669,
    "text": "            (roc1 + roc2).ewm(span=10, min_periods=9, adjust=adjust).mean(),",
    "annotation": "\u2705 Best Practice: Add a docstring to describe the function's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      12204,
      16,
      1343,
      686,
      66,
      17,
      737,
      413,
      76,
      7,
      12626,
      28,
      940,
      11,
      949,
      62,
      41007,
      82,
      28,
      24,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784
    ],
    "start_token": 8425,
    "end_token": 8464,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Add a docstring to describe the function's purpose"
  },
  {
    "line": 1671,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on data values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8464,
    "end_token": 8472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1366,
      3815
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on data values"
  },
  {
    "line": 1676,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame apply method with custom function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8472,
    "end_token": 8472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      4174,
      2446,
      351,
      2183,
      2163
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame apply method with custom function"
  },
  {
    "line": 1681,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of clear and descriptive variable names",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8472,
    "end_token": 8472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1598,
      290,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of clear and descriptive variable names"
  },
  {
    "line": 1688,
    "text": "        nbfraw = pd.Series(nbp * nv, name=\"Buy.\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of apply function on DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      19881,
      1831,
      796,
      279,
      67,
      13,
      27996,
      7,
      77,
      46583,
      1635,
      299,
      85,
      11,
      1438,
      2625,
      14518,
      19570
    ],
    "start_token": 8472,
    "end_token": 8498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4174,
      2163,
      319,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Use of apply function on DataFrame"
  },
  {
    "line": 1690,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8498,
    "end_token": 8498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      2163
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window function"
  },
  {
    "line": 1690,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of shift function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8498,
    "end_token": 8498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6482,
      2163
    ],
    "label": "ml_signal",
    "reason": "Use of shift function"
  },
  {
    "line": 1690,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of exponential weighted mean",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8498,
    "end_token": 8498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39682,
      26356,
      1612
    ],
    "label": "ml_signal",
    "reason": "Use of exponential weighted mean"
  },
  {
    "line": 1704,
    "text": "        nbp = bp / bpavg",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      46583,
      796,
      275,
      79,
      1220,
      275,
      79,
      615,
      70
    ],
    "start_token": 8498,
    "end_token": 8515,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 1714,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling window and standard deviation calculation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8515,
    "end_token": 8515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      4324,
      290,
      3210,
      28833,
      17952
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling window and standard deviation calculation"
  },
  {
    "line": 1726,
    "text": "        It is created by calculating the difference between the sum of all recent gains and the sum of all recent losses and then",
    "annotation": "\u2705 Best Practice: Docstring provides a detailed explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      632,
      318,
      2727,
      416,
      26019,
      262,
      3580,
      1022,
      262,
      2160,
      286,
      477,
      2274,
      8810,
      290,
      262,
      2160,
      286,
      477,
      2274,
      9089,
      290,
      788
    ],
    "start_token": 8515,
    "end_token": 8545,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      6496,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a detailed explanation of the function's purpose and usage."
  },
  {
    "line": 1746,
    "text": "    def CHANDELIER(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Exponential Moving Average (EMA) for financial data analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      5870,
      6981,
      3698,
      38311,
      7
    ],
    "start_token": 8545,
    "end_token": 8554,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      5518,
      35470,
      26768,
      13475,
      357,
      27630,
      8,
      329,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Exponential Moving Average (EMA) for financial data analysis."
  },
  {
    "line": 1750,
    "text": "        long_period: int = 22,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Exponential Moving Average (EMA) for financial data analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      41007,
      25,
      493,
      796,
      2534,
      11
    ],
    "start_token": 8554,
    "end_token": 8569,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      5518,
      35470,
      26768,
      13475,
      357,
      27630,
      8,
      329,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Exponential Moving Average (EMA) for financial data analysis."
  },
  {
    "line": 1755,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD, a common financial indicator.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8569,
    "end_token": 8569,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      11,
      257,
      2219,
      3176,
      16916,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD, a common financial indicator."
  },
  {
    "line": 1759,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of Stochastic Oscillator, a common financial indicator.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 8569,
    "end_token": 8577,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      520,
      5374,
      3477,
      440,
      22360,
      1352,
      11,
      257,
      2219,
      3176,
      16916,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of Stochastic Oscillator, a common financial indicator."
  },
  {
    "line": 1764,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Smoothing of Stochastic Oscillator values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8577,
    "end_token": 8585,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2439,
      1025,
      722,
      286,
      520,
      5374,
      3477,
      440,
      22360,
      1352,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Smoothing of Stochastic Oscillator values."
  },
  {
    "line": 1764,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Double smoothing of Stochastic Oscillator values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8585,
    "end_token": 8593,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11198,
      32746,
      722,
      286,
      520,
      5374,
      3477,
      440,
      22360,
      1352,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Double smoothing of Stochastic Oscillator values."
  },
  {
    "line": 1764,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Returning a named Series for clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 8593,
    "end_token": 8601,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a named Series for clarity."
  },
  {
    "line": 1770,
    "text": "        return pd.concat([s, l], axis=1)",
    "annotation": "\u2705 Best Practice: Use of classmethod decorator for class-level method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      1102,
      9246,
      26933,
      82,
      11,
      300,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 8601,
    "end_token": 8623,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      24396,
      11705,
      1352,
      329,
      1398,
      12,
      5715,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Use of classmethod decorator for class-level method."
  },
  {
    "line": 1773,
    "text": "    def QSTICK(cls, ohlc: DataFrame, period: int = 14) -> Series:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse if input validation is not properly implemented in inputvalidator.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1195,
      2257,
      11860,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1478,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 8623,
    "end_token": 8649,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      611,
      5128,
      21201,
      318,
      407,
      6105,
      9177,
      287,
      5128,
      12102,
      1352,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse if input validation is not properly implemented in inputvalidator."
  },
  {
    "line": 1773,
    "text": "    def QSTICK(cls, ohlc: DataFrame, period: int = 14) -> Series:",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the function's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1195,
      2257,
      11860,
      7,
      565,
      82,
      11,
      11752,
      44601,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      1478,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 8649,
    "end_token": 8675,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the function's purpose."
  },
  {
    "line": 1775,
    "text": "        QStick indicator shows the dominance of black (down) or white (up) candlesticks, which are red and green in Chart,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom EVWMA method for financial calculations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1195,
      1273,
      624,
      16916,
      2523,
      262,
      18648,
      286,
      2042,
      357,
      2902,
      8,
      393,
      2330,
      357,
      929,
      8,
      2658,
      32712,
      3378,
      11,
      543,
      389,
      2266,
      290,
      4077,
      287,
      22086,
      11
    ],
    "start_token": 8675,
    "end_token": 8711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      8696,
      54,
      5673,
      2446,
      329,
      3176,
      16765,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of custom EVWMA method for financial calculations."
  },
  {
    "line": 1777,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom EVWMA method for financial calculations.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8711,
    "end_token": 8711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      8696,
      54,
      5673,
      2446,
      329,
      3176,
      16765,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of custom EVWMA method for financial calculations."
  },
  {
    "line": 1777,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of MACD using fast and slow EMA values.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8711,
    "end_token": 8711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      20582,
      35,
      1262,
      3049,
      290,
      3105,
      412,
      5673,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of MACD using fast and slow EMA values."
  },
  {
    "line": 1781,
    "text": "        return pd.Series(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of stochastic oscillator values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 8711,
    "end_token": 8724,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      3995,
      354,
      3477,
      24969,
      1352,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of stochastic oscillator values."
  },
  {
    "line": 1786,
    "text": "    def TMF(cls, ohlcv: DataFrame, period: int = 21) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of smoothed stochastic oscillator values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      21232,
      37,
      7,
      565,
      82,
      11,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      2310,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 8724,
    "end_token": 8750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      32746,
      704,
      3995,
      354,
      3477,
      24969,
      1352,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of smoothed stochastic oscillator values."
  },
  {
    "line": 1786,
    "text": "    def TMF(cls, ohlcv: DataFrame, period: int = 21) -> Series:",
    "annotation": "\ud83e\udde0 ML Signal: Double smoothing of stochastic oscillator values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      21232,
      37,
      7,
      565,
      82,
      11,
      11752,
      75,
      33967,
      25,
      6060,
      19778,
      11,
      2278,
      25,
      493,
      796,
      2310,
      8,
      4613,
      7171,
      25
    ],
    "start_token": 8750,
    "end_token": 8776,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11198,
      32746,
      722,
      286,
      3995,
      354,
      3477,
      24969,
      1352,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Double smoothing of stochastic oscillator values."
  },
  {
    "line": 1793,
    "text": "        ]",
    "annotation": "\u2705 Best Practice: Returning a named Series for better readability and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 8776,
    "end_token": 8784,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      3706,
      7171,
      329,
      1365,
      1100,
      1799,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a named Series for better readability and usage."
  },
  {
    "line": 1793,
    "text": "        ]",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator for methods that operate on class-level data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 8784,
    "end_token": 8792,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      1398,
      12,
      5715,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator for methods that operate on class-level data."
  },
  {
    "line": 1793,
    "text": "        ]",
    "annotation": "\u2705 Best Practice: Function should have a docstring explaining its purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 8792,
    "end_token": 8800,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Function should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 1795,
    "text": "        ohlcv[\"range\"] = (",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing 'x[period]' without checking if 'period' is a valid index/key",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      75,
      33967,
      14692,
      9521,
      8973,
      796,
      357
    ],
    "start_token": 8800,
    "end_token": 8815,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      705,
      87,
      58,
      41007,
      49946,
      1231,
      10627,
      611,
      705,
      41007,
      6,
      318,
      257,
      4938,
      6376,
      14,
      2539
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing 'x[period]' without checking if 'period' is a valid index/key"
  },
  {
    "line": 1798,
    "text": "        ohlcv[\"rangev\"] = None",
    "annotation": "\u2705 Best Practice: Use of descriptive function name for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      75,
      33967,
      14692,
      9521,
      85,
      8973,
      796,
      6045
    ],
    "start_token": 8815,
    "end_token": 8831,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name for clarity"
  },
  {
    "line": 1802,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations on time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 8831,
    "end_token": 8844,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      319,
      640,
      2168,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations on time series data"
  },
  {
    "line": 1808,
    "text": "        channel_length: int = 10,",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations on time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6518,
      62,
      13664,
      25,
      493,
      796,
      838,
      11
    ],
    "start_token": 8844,
    "end_token": 8859,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      319,
      640,
      2168,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations on time series data"
  },
  {
    "line": 1817,
    "text": "        ap = cls.TP(ohlc)",
    "annotation": "\ud83e\udde0 ML Signal: Concatenation of multiple time series features",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2471,
      796,
      537,
      82,
      13,
      7250,
      7,
      1219,
      44601,
      8
    ],
    "start_token": 8859,
    "end_token": 8876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      341,
      286,
      3294,
      640,
      2168,
      3033
    ],
    "label": "ml_signal",
    "reason": "Concatenation of multiple time series features"
  },
  {
    "line": 1817,
    "text": "        ap = cls.TP(ohlc)",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2471,
      796,
      537,
      82,
      13,
      7250,
      7,
      1219,
      44601,
      8
    ],
    "start_token": 8876,
    "end_token": 8893,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 1822,
    "text": "        ci = (ap - esa) / (0.015 * d)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling mean indicates a pattern for time series data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      72,
      796,
      357,
      499,
      532,
      1658,
      64,
      8,
      1220,
      357,
      15,
      13,
      25150,
      1635,
      288,
      8
    ],
    "start_token": 8893,
    "end_token": 8917,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      1612,
      9217,
      257,
      3912,
      329,
      640,
      2168,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling mean indicates a pattern for time series data processing"
  },
  {
    "line": 1824,
    "text": "        wt1 = pd.Series(ci.ewm(span=average_length, adjust=adjust).mean(), name=\"WT1.\")",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of volatility unit is a common pattern in financial data analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      83,
      16,
      796,
      279,
      67,
      13,
      27996,
      7,
      979,
      13,
      413,
      76,
      7,
      12626,
      28,
      23913,
      62,
      13664,
      11,
      4532,
      28,
      23032,
      737,
      32604,
      22784,
      1438,
      2625,
      39386,
      16,
      19570
    ],
    "start_token": 8917,
    "end_token": 8955,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      30772,
      4326,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculation of volatility unit is a common pattern in financial data analysis"
  },
  {
    "line": 1826,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Creation of new series for transformed data is a common pattern in data preprocessing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8955,
    "end_token": 8955,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      649,
      2168,
      329,
      14434,
      1366,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Creation of new series for transformed data is a common pattern in data preprocessing"
  },
  {
    "line": 1829,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Using pd.concat to combine series into a DataFrame is efficient and readable",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 8955,
    "end_token": 8961,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      2168,
      656,
      257,
      6060,
      19778,
      318,
      6942,
      290,
      31744
    ],
    "label": "best_practice",
    "reason": "Using pd.concat to combine series into a DataFrame is efficient and readable"
  },
  {
    "line": 1833,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of @classmethod decorator indicates method is intended to be called on the class itself",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 8961,
    "end_token": 8969,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      11705,
      1352,
      9217,
      2446,
      318,
      5292,
      284,
      307,
      1444,
      319,
      262,
      1398,
      2346
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod decorator indicates method is intended to be called on the class itself"
  },
  {
    "line": 1844,
    "text": "        _smooth = smooth.fillna(0)",
    "annotation": "\u2705 Best Practice: Use of rolling window for moving average calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      5796,
      5226,
      796,
      7209,
      13,
      20797,
      2616,
      7,
      15,
      8
    ],
    "start_token": 8969,
    "end_token": 8987,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10708,
      4324,
      329,
      3867,
      2811,
      17952
    ],
    "label": "best_practice",
    "reason": "Use of rolling window for moving average calculation"
  },
  {
    "line": 1846,
    "text": "        return pd.Series(",
    "annotation": "\u2705 Best Practice: Use of rolling window for standard deviation calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 8987,
    "end_token": 9000,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10708,
      4324,
      329,
      3210,
      28833,
      17952
    ],
    "label": "best_practice",
    "reason": "Use of rolling window for standard deviation calculation"
  },
  {
    "line": 1846,
    "text": "        return pd.Series(",
    "annotation": "\u2705 Best Practice: Function should have a docstring explaining its purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27996,
      7
    ],
    "start_token": 9000,
    "end_token": 9013,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Function should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 1848,
    "text": "            name=\"{0} period FISH.\".format(period),",
    "annotation": "\ud83e\udde0 ML Signal: Use of np.where for element-wise conditional logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      90,
      15,
      92,
      2278,
      376,
      18422,
      526,
      13,
      18982,
      7,
      41007,
      828
    ],
    "start_token": 9013,
    "end_token": 9038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      45941,
      13,
      3003,
      329,
      5002,
      12,
      3083,
      26340,
      9156
    ],
    "label": "ml_signal",
    "reason": "Use of np.where for element-wise conditional logic"
  },
  {
    "line": 1850,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Element-wise operations on numpy arrays",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9038,
    "end_token": 9038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11703,
      12,
      3083,
      4560,
      319,
      299,
      32152,
      26515
    ],
    "label": "ml_signal",
    "reason": "Element-wise operations on numpy arrays"
  },
  {
    "line": 1852,
    "text": "    def ICHIMOKU(",
    "annotation": "\ud83e\udde0 ML Signal: Use of np.exp for element-wise exponential calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      314,
      3398,
      3955,
      11380,
      52,
      7
    ],
    "start_token": 9038,
    "end_token": 9048,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      45941,
      13,
      11201,
      329,
      5002,
      12,
      3083,
      39682,
      17952
    ],
    "label": "ml_signal",
    "reason": "Use of np.exp for element-wise exponential calculation"
  },
  {
    "line": 1854,
    "text": "        ohlc: DataFrame,",
    "annotation": "\ud83e\udde0 ML Signal: Element-wise subtraction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11752,
      44601,
      25,
      6060,
      19778,
      11
    ],
    "start_token": 9048,
    "end_token": 9061,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11703,
      12,
      3083,
      13284,
      7861
    ],
    "label": "ml_signal",
    "reason": "Element-wise subtraction"
  },
  {
    "line": 1856,
    "text": "        kijun_period: int = 26,",
    "annotation": "\ud83e\udde0 ML Signal: Element-wise subtraction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      2926,
      403,
      62,
      41007,
      25,
      493,
      796,
      2608,
      11
    ],
    "start_token": 9061,
    "end_token": 9078,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11703,
      12,
      3083,
      13284,
      7861
    ],
    "label": "ml_signal",
    "reason": "Element-wise subtraction"
  },
  {
    "line": 1858,
    "text": "        chikou_period: int = 26,",
    "annotation": "\ud83e\udde0 ML Signal: Use of np.where for element-wise conditional logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      442,
      1134,
      280,
      62,
      41007,
      25,
      493,
      796,
      2608,
      11
    ],
    "start_token": 9078,
    "end_token": 9095,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      45941,
      13,
      3003,
      329,
      5002,
      12,
      3083,
      26340,
      9156
    ],
    "label": "ml_signal",
    "reason": "Use of np.where for element-wise conditional logic"
  },
  {
    "line": 1860,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Element-wise division",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 9095,
    "end_token": 9103,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11703,
      12,
      3083,
      7297
    ],
    "label": "ml_signal",
    "reason": "Element-wise division"
  },
  {
    "line": 1862,
    "text": "        identifies trend direction, gauges momentum and provides trading signals.",
    "annotation": "\u2705 Best Practice: Explicit return statement for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      21079,
      5182,
      4571,
      11,
      14885,
      3212,
      12858,
      290,
      3769,
      7313,
      10425,
      13
    ],
    "start_token": 9103,
    "end_token": 9122,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      2643,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicit return statement for clarity"
  },
  {
    "line": 1856,
    "text": "        kijun_period: int = 26,",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window for time series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      2926,
      403,
      62,
      41007,
      25,
      493,
      796,
      2608,
      11
    ],
    "start_token": 9122,
    "end_token": 9139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      329,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window for time series analysis"
  },
  {
    "line": 1858,
    "text": "        chikou_period: int = 26,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variable 'lookback_period'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      442,
      1134,
      280,
      62,
      41007,
      25,
      493,
      796,
      2608,
      11
    ],
    "start_token": 9139,
    "end_token": 9156,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      7885,
      705,
      5460,
      1891,
      62,
      41007,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variable 'lookback_period'"
  },
  {
    "line": 1861,
    "text": "        The Ichimoku Cloud, also known as Ichimoku Kinko Hyo, is a versatile indicator that defines support and resistance,",
    "annotation": "\ud83e\udde0 ML Signal: Use of hyperbolic tangent function for normalization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      26364,
      320,
      11601,
      10130,
      11,
      635,
      1900,
      355,
      26364,
      320,
      11601,
      509,
      676,
      78,
      6707,
      78,
      11,
      318,
      257,
      21362,
      16916,
      326,
      15738,
      1104,
      290,
      6625,
      11
    ],
    "start_token": 9156,
    "end_token": 9191,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8718,
      65,
      4160,
      13875,
      298,
      2163,
      329,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Use of hyperbolic tangent function for normalization"
  },
  {
    "line": 1864,
    "text": "        Ichimoku Kinko Hyo translates into \u201cone look equilibrium chart\u201d.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variable 'std'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26364,
      320,
      11601,
      509,
      676,
      78,
      6707,
      78,
      23677,
      656,
      564,
      250,
      505,
      804,
      29163,
      8262,
      447,
      251,
      13
    ],
    "start_token": 9191,
    "end_token": 9217,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      7885,
      705,
      19282,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variable 'std'"
  },
  {
    "line": 1866,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variable 'ma'",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9217,
    "end_token": 9217,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      7885,
      705,
      2611,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variable 'ma'"
  },
  {
    "line": 1866,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with calculated parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9217,
    "end_token": 9217,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      10488,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function call with calculated parameters"
  },
  {
    "line": 1866,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variable 'period'",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9217,
    "end_token": 9217,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      7885,
      705,
      41007,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variable 'period'"
  },
  {
    "line": 1866,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __name__ guard for script entry point",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9217,
    "end_token": 9217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      4860,
      329,
      4226,
      5726,
      966
    ],
    "label": "best_practice",
    "reason": "Use of __name__ guard for script entry point"
  },
  {
    "line": 1866,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic attribute access and filtering",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9217,
    "end_token": 9217,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      11688,
      1895,
      290,
      25431
    ],
    "label": "ml_signal",
    "reason": "Dynamic attribute access and filtering"
  }
]
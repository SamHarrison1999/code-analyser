annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of default parameter value for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 13688, 290, 10152, 286, 779]",1.0,0,best_practice,6,Use of default parameter value for flexibility and ease of use,,0,,[]
‚úÖ Best Practice: Use of @wraps decorator to preserve metadata of the original function,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 29988, 862, 11705, 1352, 284, 12201, 20150, 286, 262, 2656, 2163]",1.0,9,best_practice,8,Use of @wraps decorator to preserve metadata of the original function,,0,    def dfcheck(func):,"[220, 220, 220, 825, 47764, 9122, 7, 20786, 2599]"
‚úÖ Best Practice: Use of isinstance to check the type of the first argument,"[26486, 227, 6705, 19939, 25, 5765, 286, 318, 39098, 284, 2198, 262, 2099, 286, 262, 717, 4578]",0.5,25,best_practice,10,Use of isinstance to check the type of the first argument,,9,"        def wrap(*args, **kwargs):","[220, 220, 220, 220, 220, 220, 220, 825, 14441, 46491, 22046, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Use of dictionary comprehension for renaming columns,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 35915, 329, 8851, 3723, 15180]",0.5,42,best_practice,12,Use of dictionary comprehension for renaming columns,,25,            args = list(args),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26498, 796, 1351, 7, 22046, 8]"
‚úÖ Best Practice: Use of kwargs.get with default value,"[26486, 227, 6705, 19939, 25, 5765, 286, 479, 86, 22046, 13, 1136, 351, 4277, 1988]",0.5,63,best_practice,19,Use of kwargs.get with default value,,42,"                ""h"": ""high"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 71, 1298, 366, 8929, 1600]"
‚úÖ Best Practice: Conditional logic to update kwargs,"[26486, 227, 6705, 19939, 25, 9724, 1859, 9156, 284, 4296, 479, 86, 22046]",0.5,84,best_practice,22,Conditional logic to update kwargs,,63,"                ""v"": ""volume"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 85, 1298, 366, 29048, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if 'input_' is not defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 705, 15414, 62, 6, 318, 407, 5447]",0.5,110,sast_risk,26,Potential for KeyError if 'input_' is not defined,Low,84,"                kwargs[""column""] = inputs[""c""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 86, 22046, 14692, 28665, 8973, 796, 17311, 14692, 66, 8973]"
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if column name is not found,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 5721, 1438, 318, 407, 1043]",0.5,110,sast_risk,27,Potential for KeyError if column name is not found,Low,110,,[]
‚úÖ Best Practice: Use of formatted string for error message,"[26486, 227, 6705, 19939, 25, 5765, 286, 39559, 4731, 329, 4049, 3275]",0.5,139,best_practice,29,Use of formatted string for error message,,110,                if inputs[l] not in args[i].columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 17311, 58, 75, 60, 407, 287, 26498, 58, 72, 4083, 28665, 82, 25]"
üß† ML Signal: Pattern of calling a function with dynamic arguments,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4585, 257, 2163, 351, 8925, 7159]",0.5,139,ml_signal,33,Pattern of calling a function with dynamic arguments,,139,,[]
‚úÖ Best Practice: Add a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",1.0,168,best_practice,29,Add a docstring to describe the purpose and usage of the function,,139,                if inputs[l] not in args[i].columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 17311, 58, 75, 60, 407, 287, 26498, 58, 72, 4083, 28665, 82, 25]"
‚úÖ Best Practice: Add a docstring to describe the purpose and usage of the inner function,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 8434, 2163]",1.0,210,best_practice,31,Add a docstring to describe the purpose and usage of the inner function,,168,"                        'Must have a dataframe column named ""{0}""'.format(inputs[l])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 34320, 423, 257, 1366, 14535, 5721, 3706, 45144, 15, 36786, 4458, 18982, 7, 15414, 82, 58, 75, 12962]"
"üß† ML Signal: Usage of decorators, which is a common pattern in Python","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11705, 2024, 11, 543, 318, 257, 2219, 3912, 287, 11361]",0.5,210,ml_signal,33,"Usage of decorators, which is a common pattern in Python",,210,,[]
"üß† ML Signal: Returning a function from another function, indicating higher-order function usage","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 2163, 422, 1194, 2163, 11, 12739, 2440, 12, 2875, 2163, 8748]",1.0,210,ml_signal,35,"Returning a function from another function, indicating higher-order function usage",,210,,[]
üß† ML Signal: Iterating over class attributes to apply a decorator,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 1398, 12608, 284, 4174, 257, 11705, 1352]",1.0,252,ml_signal,31,Iterating over class attributes to apply a decorator,,210,"                        'Must have a dataframe column named ""{0}""'.format(inputs[l])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 34320, 423, 257, 1366, 14535, 5721, 3706, 45144, 15, 36786, 4458, 18982, 7, 15414, 82, 58, 75, 12962]"
üß† ML Signal: Checking if an attribute is callable,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 11688, 318, 869, 540]",1.0,252,ml_signal,33,Checking if an attribute is callable,,252,,[]
‚ö†Ô∏è SAST Risk (Low): Potentially modifying class methods without explicit consent,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 30620, 1398, 5050, 1231, 7952, 8281]",0.5,252,sast_risk,35,Potentially modifying class methods without explicit consent,Low,252,,[]
‚ö†Ô∏è SAST Risk (Low): Using a decorator without verifying its source or behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 11705, 1352, 1231, 45505, 663, 2723, 393, 4069]",0.5,258,sast_risk,38,Using a decorator without verifying its source or behavior,Low,252,    return dfcheck,"[220, 220, 220, 1441, 47764, 9122]"
üß† ML Signal: Use of class variables to store metadata like versioning,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 9633, 284, 3650, 20150, 588, 2196, 278]",0.5,264,ml_signal,38,Use of class variables to store metadata like versioning,,258,    return dfcheck,"[220, 220, 220, 1441, 47764, 9122]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,264,best_practice,40,Use of type hints for function parameters and return type improves code readability and maintainability.,,264,,[]
üß† ML Signal: Use of rolling mean indicates a pattern for time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 1612, 9217, 257, 3912, 329, 640, 2168, 3781, 13]",1.0,300,ml_signal,45,Use of rolling mean indicates a pattern for time series analysis.,,264,"                setattr(cls, attr, decorator(getattr(cls, attr)))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 565, 82, 11, 708, 81, 11, 11705, 1352, 7, 1136, 35226, 7, 565, 82, 11, 708, 81, 22305]"
üß† ML Signal: Accessing a specific column in a DataFrame is a common data manipulation pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 287, 257, 6060, 19778, 318, 257, 2219, 1366, 17512, 3912, 13]",0.5,300,ml_signal,48,Accessing a specific column in a DataFrame is a common data manipulation pattern.,,300,,[]
‚úÖ Best Practice: Use of format method for string formatting is more readable and maintainable.,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 2446, 329, 4731, 33313, 318, 517, 31744, 290, 5529, 540, 13]",1.0,300,best_practice,50,Use of format method for string formatting is more readable and maintainable.,,300,,[]
‚úÖ Best Practice: Use of @classmethod decorator indicates a method that operates on the class rather than instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 257, 2446, 326, 14051, 319, 262, 1398, 2138, 621, 4554, 13]",1.0,300,best_practice,51,Use of @classmethod decorator indicates a method that operates on the class rather than instance.,,300,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007, 13]",0.5,300,best_practice,51,Docstring provides a clear explanation of the function's purpose and parameters.,,300,,[]
üß† ML Signal: Usage of rolling window operations on time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 4560, 319, 640, 2168, 1366, 13]",1.0,312,ml_signal,55,Usage of rolling window operations on time series data.,,300,"    __version__ = ""1.3""","[220, 220, 220, 11593, 9641, 834, 796, 366, 16, 13, 18, 1]"
‚úÖ Best Practice: Using pandas' rolling and median functions for efficient computation.,"[26486, 227, 6705, 19939, 25, 8554, 19798, 292, 6, 10708, 290, 14288, 5499, 329, 6942, 29964, 13]",0.5,324,best_practice,55,Using pandas' rolling and median functions for efficient computation.,,312,"    __version__ = ""1.3""","[220, 220, 220, 11593, 9641, 834, 796, 366, 16, 13, 18, 1]"
‚úÖ Best Practice: Using format for string interpolation improves readability.,"[26486, 227, 6705, 19939, 25, 8554, 5794, 329, 4731, 39555, 341, 19575, 1100, 1799, 13]",0.5,349,best_practice,60,Using format for string interpolation improves readability.,,324,        Simple moving average - rolling mean in pandas lingo. Also known as 'MA'.,"[220, 220, 220, 220, 220, 220, 220, 17427, 3867, 2811, 532, 10708, 1612, 287, 19798, 292, 18459, 78, 13, 4418, 1900, 355, 705, 5673, 4458]"
‚úÖ Best Practice: Use of @classmethod decorator indicates method is bound to the class and not the instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 2446, 318, 5421, 284, 262, 1398, 290, 407, 262, 4554, 13]",0.5,374,best_practice,60,Use of @classmethod decorator indicates method is bound to the class and not the instance.,,349,        Simple moving average - rolling mean in pandas lingo. Also known as 'MA'.,"[220, 220, 220, 220, 220, 220, 220, 17427, 3867, 2811, 532, 10708, 1612, 287, 19798, 292, 18459, 78, 13, 4418, 1900, 355, 705, 5673, 4458]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007]",1.0,382,best_practice,67,Docstring provides a clear explanation of the function's purpose and parameters,,374,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Use of exponential weighted moving average, common in financial data analysis","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 3867, 2811, 11, 2219, 287, 3176, 1366, 3781]",0.5,390,ml_signal,74,"Use of exponential weighted moving average, common in financial data analysis",,382,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Naming the Series for better readability and debugging,"[26486, 227, 6705, 19939, 25, 399, 3723, 262, 7171, 329, 1365, 1100, 1799, 290, 28769]",0.5,396,best_practice,81,Naming the Series for better readability and debugging,,390,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on the class rather than instance,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 262, 1398, 2138, 621, 4554]",0.5,402,best_practice,81,Use of @classmethod decorator for methods that operate on the class rather than instance,,396,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,409,best_practice,88,Docstring provides a clear explanation of the function's purpose and usage.,,402,    ) -> Series:,"[220, 220, 220, 1267, 4613, 7171, 25]"
üß† ML Signal: Usage of pandas ewm method to calculate exponential moving average.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 304, 26377, 2446, 284, 15284, 39682, 3867, 2811, 13]",1.0,421,ml_signal,93,Usage of pandas ewm method to calculate exponential moving average.,,409,        :param period: range,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 2278, 25, 2837]"
‚úÖ Best Practice: Use of @classmethod decorator to define a method that operates on the class rather than instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 8160, 257, 2446, 326, 14051, 319, 262, 1398, 2138, 621, 4554, 13]",1.0,434,best_practice,98,Use of @classmethod decorator to define a method that operates on the class rather than instance.,,421,        return pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069]",1.0,440,best_practice,105,Docstring provides a clear explanation of the function's purpose and behavior,,434,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Usage of financial indicators like DEMA can be a signal for financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 360, 27630, 460, 307, 257, 6737, 329, 3176, 1366, 3781]",0.5,448,ml_signal,113,Usage of financial indicators like DEMA can be a signal for financial data analysis,,440,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of class method allows for potential inheritance and method overriding,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 3578, 329, 2785, 24155, 290, 2446, 44987]",1.0,456,best_practice,113,Use of class method allows for potential inheritance and method overriding,,448,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Returning a named Series improves readability and data handling,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 19575, 1100, 1799, 290, 1366, 9041]",1.0,485,best_practice,120,Returning a named Series improves readability and data handling,,456,"            ohlc[column].ewm(span=period, adjust=adjust).mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11752, 44601, 58, 28665, 4083, 413, 76, 7, 12626, 28, 41007, 11, 4532, 28, 23032, 737, 32604, 22784]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 4069, 13]",0.5,514,best_practice,120,Docstring provides a clear explanation of the method's purpose and behavior.,,485,"            ohlc[column].ewm(span=period, adjust=adjust).mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11752, 44601, 58, 28665, 4083, 413, 76, 7, 12626, 28, 41007, 11, 4532, 28, 23032, 737, 32604, 22784]"
üß† ML Signal: Usage of a custom TEMA function for financial data analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 309, 27630, 2163, 329, 3176, 1366, 3781, 13]",0.5,527,ml_signal,130,Usage of a custom TEMA function for financial data analysis.,,514,"        adjust: bool = True,","[220, 220, 220, 220, 220, 220, 220, 4532, 25, 20512, 796, 6407, 11]"
üß† ML Signal: Chaining of pandas ewm and mean methods for calculating moving averages.,"[8582, 100, 254, 10373, 26484, 25, 609, 1397, 286, 19798, 292, 304, 26377, 290, 1612, 5050, 329, 26019, 3867, 25694, 13]",0.5,540,ml_signal,130,Chaining of pandas ewm and mean methods for calculating moving averages.,,527,"        adjust: bool = True,","[220, 220, 220, 220, 220, 220, 220, 4532, 25, 20512, 796, 6407, 11]"
üß† ML Signal: Calculation of TEMA using a combination of EMA and ewm methods.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 309, 27630, 1262, 257, 6087, 286, 412, 5673, 290, 304, 26377, 5050, 13]",0.5,563,ml_signal,142,Calculation of TEMA using a combination of EMA and ewm methods.,,540,"            2 * cls.EMA(ohlc, period)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 362, 1635, 537, 82, 13, 27630, 7, 1219, 44601, 11, 2278, 8]"
‚úÖ Best Practice: Returning a pandas Series with a descriptive name.,"[26486, 227, 6705, 19939, 25, 42882, 257, 19798, 292, 7171, 351, 257, 35644, 1438, 13]",0.5,563,best_practice,145,Returning a pandas Series with a descriptive name.,,563,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and source.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 2723, 13]",1.0,563,best_practice,145,Docstring provides a clear explanation of the function's purpose and source.,,563,,[]
üß† ML Signal: Usage of a custom moving average function could indicate financial data processing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 3867, 2811, 2163, 714, 7603, 3176, 1366, 7587, 13]",1.0,598,ml_signal,152,Usage of a custom moving average function could indicate financial data processing.,,563,        The name suggests this is achieved by applying a triple exponential smoothing which is not the case. The name triple comes from the fact that the,"[220, 220, 220, 220, 220, 220, 220, 383, 1438, 5644, 428, 318, 8793, 416, 11524, 257, 15055, 39682, 32746, 722, 543, 318, 407, 262, 1339, 13, 383, 1438, 15055, 2058, 422, 262, 1109, 326, 262]"
‚úÖ Best Practice: Using descriptive variable names like 'SMA' improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 705, 50, 5673, 6, 19575, 2438, 1100, 1799, 13]",0.5,633,best_practice,152,Using descriptive variable names like 'SMA' improves code readability.,,598,        The name suggests this is achieved by applying a triple exponential smoothing which is not the case. The name triple comes from the fact that the,"[220, 220, 220, 220, 220, 220, 220, 383, 1438, 5644, 428, 318, 8793, 416, 11524, 257, 15055, 39682, 32746, 722, 543, 318, 407, 262, 1339, 13, 383, 1438, 15055, 2058, 422, 262, 1109, 326, 262]"
‚úÖ Best Practice: Using 'pd.Series' with a descriptive name improves the output's interpretability.,"[26486, 227, 6705, 19939, 25, 8554, 705, 30094, 13, 27996, 6, 351, 257, 35644, 1438, 19575, 262, 5072, 338, 6179, 1799, 13]",0.5,674,best_practice,154,Using 'pd.Series' with a descriptive name improves the output's interpretability.,,633,        To keep it in line with the actual data and to remove the lag the value 'EMA of EMA' is subtracted 3 times from the previously tripled EMA.,"[220, 220, 220, 220, 220, 220, 220, 1675, 1394, 340, 287, 1627, 351, 262, 4036, 1366, 290, 284, 4781, 262, 19470, 262, 1988, 705, 27630, 286, 412, 5673, 6, 318, 13284, 20216, 513, 1661, 422, 262, 4271, 43761, 412, 5673, 13]"
üß† ML Signal: Usage of financial indicators for trading strategies,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 7313, 10064]",1.0,685,ml_signal,169,Usage of financial indicators for trading strategies,,674,        TEMA = (,"[220, 220, 220, 220, 220, 220, 220, 309, 27630, 796, 357]"
‚úÖ Best Practice: Accessing DataFrame column using a variable,"[26486, 227, 6705, 19939, 25, 8798, 278, 6060, 19778, 5721, 1262, 257, 7885]",0.5,699,best_practice,170,Accessing DataFrame column using a variable,,685,            triple_ema,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15055, 62, 19687]"
"üß† ML Signal: Use of exponential moving average, common in financial data analysis","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 3867, 2811, 11, 2219, 287, 3176, 1366, 3781]",0.5,736,ml_signal,171,"Use of exponential moving average, common in financial data analysis",,699,"            - 3 * cls.EMA(ohlc, period).ewm(span=period, adjust=adjust).mean()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 513, 1635, 537, 82, 13, 27630, 7, 1219, 44601, 11, 2278, 737, 413, 76, 7, 12626, 28, 41007, 11, 4532, 28, 23032, 737, 32604, 3419]"
"üß† ML Signal: Triple application of exponential moving average, indicating a TRIX calculation","[8582, 100, 254, 10373, 26484, 25, 19817, 3586, 286, 39682, 3867, 2811, 11, 12739, 257, 37679, 55, 17952]",1.0,744,ml_signal,173,"Triple application of exponential moving average, indicating a TRIX calculation",,736,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if `m` contains zero values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 4600, 76, 63, 4909, 6632, 3815]",0.5,773,sast_risk,175,Potential division by zero if `m` contains zero values,Low,744,"        return pd.Series(TEMA, name=""{0} period TEMA"".format(period))","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7, 51, 27630, 11, 1438, 2625, 90, 15, 92, 2278, 309, 27630, 1911, 18982, 7, 41007, 4008]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",0.5,773,best_practice,176,Include a docstring to describe the function's purpose,,773,,[]
"‚ö†Ô∏è SAST Risk (Low): Function is not implemented, which may lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 318, 407, 9177, 11, 543, 743, 1085, 284, 19124, 8563, 611, 1444]",1.0,803,sast_risk,182,"Function is not implemented, which may lead to runtime errors if called",Low,773,        The calculations double-smooth the data using a window width that is one-half the length of the series.,"[220, 220, 220, 220, 220, 220, 220, 383, 16765, 4274, 12, 5796, 5226, 262, 1366, 1262, 257, 4324, 9647, 326, 318, 530, 12, 13959, 262, 4129, 286, 262, 2168, 13]"
‚úÖ Best Practice: Use of @classmethod decorator to indicate method is bound to the class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 7603, 2446, 318, 5421, 284, 262, 1398]",0.5,840,best_practice,183,Use of @classmethod decorator to indicate method is bound to the class,,803,        source: https://www.thebalance.com/triangular-moving-average-tma-description-and-uses-1031203,"[220, 220, 220, 220, 220, 220, 220, 2723, 25, 3740, 1378, 2503, 13, 1169, 20427, 13, 785, 14, 28461, 21413, 12, 31462, 12, 23913, 12, 83, 2611, 12, 11213, 12, 392, 12, 2664, 12, 15197, 1065, 3070]"
üß† ML Signal: Use of decorators to enforce input validation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 284, 4605, 5128, 21201]",0.5,869,ml_signal,186,Use of decorators to enforce input validation,,840,"        SMA = cls.SMA(ohlc, period).rolling(window=period).sum()","[220, 220, 220, 220, 220, 220, 220, 311, 5673, 796, 537, 82, 13, 50, 5673, 7, 1219, 44601, 11, 2278, 737, 18886, 7, 17497, 28, 41007, 737, 16345, 3419]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,898,best_practice,186,Use descriptive variable names for better readability,,869,"        SMA = cls.SMA(ohlc, period).rolling(window=period).sum()","[220, 220, 220, 220, 220, 220, 220, 311, 5673, 796, 537, 82, 13, 50, 5673, 7, 1219, 44601, 11, 2278, 737, 18886, 7, 17497, 28, 41007, 737, 16345, 3419]"
‚úÖ Best Practice: Use rolling mean for moving average calculations,"[26486, 227, 6705, 19939, 25, 5765, 10708, 1612, 329, 3867, 2811, 16765]",0.5,930,best_practice,188,Use rolling mean for moving average calculations,,898,"        return pd.Series(SMA / period, name=""{0} period TRIMA"".format(period))","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7, 50, 5673, 1220, 2278, 11, 1438, 2625, 90, 15, 92, 2278, 7579, 3955, 32, 1911, 18982, 7, 41007, 4008]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,936,best_practice,190,Use descriptive variable names for better readability,,930,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use rolling sum for cumulative calculations,"[26486, 227, 6705, 19939, 25, 5765, 10708, 2160, 329, 23818, 16765]",0.5,943,best_practice,191,Use rolling sum for cumulative calculations,,936,    def TRIX(,"[220, 220, 220, 825, 37679, 55, 7]"
‚úÖ Best Practice: Use rolling sum for cumulative calculations,"[26486, 227, 6705, 19939, 25, 5765, 10708, 2160, 329, 23818, 16765]",0.5,956,best_practice,194,Use rolling sum for cumulative calculations,,943,"        period: int = 20,","[220, 220, 220, 220, 220, 220, 220, 2278, 25, 493, 796, 1160, 11]"
‚úÖ Best Practice: Use format method for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 5794, 2446, 329, 4731, 33313]",0.5,969,best_practice,194,Use format method for string formatting,,956,"        period: int = 20,","[220, 220, 220, 220, 220, 220, 220, 2278, 25, 493, 796, 1160, 11]"
üß† ML Signal: Use of decorators for input validation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 329, 5128, 21201]",0.5,992,ml_signal,199,Use of decorators for input validation,,969,        The TRIX indicator calculates the rate of change of a triple exponential moving average.,"[220, 220, 220, 220, 220, 220, 220, 383, 37679, 55, 16916, 43707, 262, 2494, 286, 1487, 286, 257, 15055, 39682, 3867, 2811, 13]"
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",0.5,1020,ml_signal,201,Use of default parameter values,,992,        A (typically) 9 period exponential moving average of the TRIX can be used as a signal line.,"[220, 220, 220, 220, 220, 220, 220, 317, 357, 48126, 8, 860, 2278, 39682, 3867, 2811, 286, 262, 37679, 55, 460, 307, 973, 355, 257, 6737, 1627, 13]"
‚úÖ Best Practice: Type hinting for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099]",0.5,1048,best_practice,201,Type hinting for function parameters and return type,,1020,        A (typically) 9 period exponential moving average of the TRIX can be used as a signal line.,"[220, 220, 220, 220, 220, 220, 220, 317, 357, 48126, 8, 860, 2278, 39682, 3867, 2811, 286, 262, 37679, 55, 460, 307, 973, 355, 257, 6737, 1627, 13]"
‚úÖ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1048,best_practice,207,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,1048,,[]
"üß† ML Signal: Usage of DataFrame and Series from pandas, indicating data manipulation and analysis.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 290, 7171, 422, 19798, 292, 11, 12739, 1366, 17512, 290, 3781, 13]",1.0,1080,ml_signal,211,"Usage of DataFrame and Series from pandas, indicating data manipulation and analysis.",,1048,"            return pd.Series(data.ewm(span=period, adjust=adjust).mean())","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7, 7890, 13, 413, 76, 7, 12626, 28, 41007, 11, 4532, 28, 23032, 737, 32604, 28955]"
"üß† ML Signal: Calculation of volatility using rolling window, a common pattern in time series analysis.","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 30772, 1262, 10708, 4324, 11, 257, 2219, 3912, 287, 640, 2168, 3781, 13]",1.0,1080,ml_signal,212,"Calculation of volatility using rolling window, a common pattern in time series analysis.",,1080,,[]
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if volatility contains zero values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 30772, 4909, 6632, 3815, 13]",0.5,1080,sast_risk,214,Potential division by zero if volatility contains zero values.,Low,1080,,[]
‚úÖ Best Practice: The @classmethod decorator should be placed directly above the method definition.,"[26486, 227, 6705, 19939, 25, 383, 2488, 4871, 24396, 11705, 1352, 815, 307, 4624, 3264, 2029, 262, 2446, 6770, 13]",0.5,1080,best_practice,214,The @classmethod decorator should be placed directly above the method definition.,,1080,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,1080,best_practice,223,Docstring provides a clear explanation of the function's purpose and usage.,,1080,,[]
üß† ML Signal: Usage of a class method to calculate a financial indicator.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1398, 2446, 284, 15284, 257, 3176, 16916, 13]",1.0,1113,ml_signal,226,Usage of a class method to calculate a financial indicator.,,1080,"    def VAMA(cls, ohlcv: DataFrame, period: int = 8, column: str = ""close"") -> Series:","[220, 220, 220, 825, 569, 25087, 7, 565, 82, 11, 11752, 75, 33967, 25, 6060, 19778, 11, 2278, 25, 493, 796, 807, 11, 5721, 25, 965, 796, 366, 19836, 4943, 4613, 7171, 25]"
‚úÖ Best Practice: Using descriptive variable names like 'smoothing_constant' improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 705, 5796, 1025, 722, 62, 9979, 415, 6, 19575, 2438, 1100, 1799, 13]",1.0,1124,best_practice,228,Using descriptive variable names like 'smoothing_constant' improves code readability.,,1113,        Volume Adjusted Moving Average,"[220, 220, 220, 220, 220, 220, 220, 14701, 45624, 26768, 13475]"
‚úÖ Best Practice: Using rolling mean for calculating simple moving average.,"[26486, 227, 6705, 19939, 25, 8554, 10708, 1612, 329, 26019, 2829, 3867, 2811, 13]",1.0,1146,best_practice,235,Using rolling mean for calculating simple moving average.,,1124,        cumDiv = volRatio.rolling(window=period).sum(),"[220, 220, 220, 220, 220, 220, 220, 10973, 24095, 796, 2322, 29665, 952, 13, 18886, 7, 17497, 28, 41007, 737, 16345, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError or TypeError if 'kama' list is empty or contains non-numeric values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 393, 5994, 12331, 611, 705, 74, 1689, 6, 1351, 318, 6565, 393, 4909, 1729, 12, 77, 39223, 3815, 13]",1.0,1160,sast_risk,243,Potential IndexError or TypeError if 'kama' list is empty or contains non-numeric values.,Low,1146,"        ohlcv: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 75, 33967, 25, 6060, 19778, 11]"
‚úÖ Best Practice: Using format method for string formatting enhances readability.,"[26486, 227, 6705, 19939, 25, 8554, 5794, 2446, 329, 4731, 33313, 32479, 1100, 1799, 13]",0.5,1188,best_practice,251,Using format method for string formatting enhances readability.,,1160,"        in Vidya the smoothing factor is variable and depends on bar-to-bar price movements.""""""","[220, 220, 220, 220, 220, 220, 220, 287, 38965, 3972, 262, 32746, 722, 5766, 318, 7885, 290, 8338, 319, 2318, 12, 1462, 12, 5657, 2756, 8650, 526, 15931]"
‚úÖ Best Practice: Use of @classmethod decorator indicates that the method operates on the class rather than an instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 326, 262, 2446, 14051, 319, 262, 1398, 2138, 621, 281, 4554, 13]",0.5,1219,best_practice,256,Use of @classmethod decorator indicates that the method operates on the class rather than an instance.,,1188,"    def ER(cls, ohlc: DataFrame, period: int = 10, column: str = ""close"") -> Series:","[220, 220, 220, 825, 13793, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 838, 11, 5721, 25, 965, 796, 366, 19836, 4943, 4613, 7171, 25]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,1244,best_practice,258,Docstring provides a clear explanation of the function's purpose and usage.,,1219,"         +100 is upward forex trending market and -100 is downwards trending markets.""""""","[220, 220, 220, 220, 220, 220, 220, 220, 1343, 3064, 318, 18644, 1674, 87, 29056, 1910, 290, 532, 3064, 318, 44890, 29056, 5939, 526, 15931]"
‚ö†Ô∏è SAST Risk (Low): Potential for division by zero if period is 1.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7297, 416, 6632, 611, 2278, 318, 352, 13]",1.0,1244,sast_risk,262,Potential for division by zero if period is 1.,Low,1244,,[]
üß† ML Signal: Usage of pandas Series and ewm method indicates time series data processing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 7171, 290, 304, 26377, 2446, 9217, 640, 2168, 1366, 7587, 13]",0.5,1251,ml_signal,266,Usage of pandas Series and ewm method indicates time series data processing.,,1244,    def KAMA(,"[220, 220, 220, 825, 509, 25087, 7]"
‚úÖ Best Practice: Use of @classmethod decorator indicates method is intended to be called on the class itself.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346, 13]",1.0,1265,best_practice,273,Use of @classmethod decorator indicates method is intended to be called on the class itself.,,1251,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007]",1.0,1279,best_practice,273,Docstring provides a clear explanation of the function's purpose and parameters,,1265,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
‚úÖ Best Practice: Use of numpy to generate a range of weights for the WMA calculation,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 284, 7716, 257, 2837, 286, 19590, 329, 262, 370, 5673, 17952]",1.0,1299,best_practice,280,Use of numpy to generate a range of weights for the WMA calculation,,1279,        slow_alpha = 2 / (ema_slow + 1),"[220, 220, 220, 220, 220, 220, 220, 3105, 62, 26591, 796, 362, 1220, 357, 19687, 62, 38246, 1343, 352, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,1313,best_practice,281,Consider adding a docstring to describe the function's purpose and parameters,,1299,        sc = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 629, 796, 279, 67, 13, 27996, 7]"
‚ö†Ô∏è SAST Risk (Low): Use of undefined variables 'w' and 'd' could lead to NameError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 9633, 705, 86, 6, 290, 705, 67, 6, 714, 1085, 284, 6530, 12331]",0.5,1344,sast_risk,282,Use of undefined variables 'w' and 'd' could lead to NameError,Low,1313,"            (er * (fast_alpha - slow_alpha) + slow_alpha) ** 2,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 263, 1635, 357, 7217, 62, 26591, 532, 3105, 62, 26591, 8, 1343, 3105, 62, 26591, 8, 12429, 362, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse of 'ohlc' and 'column' if not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 705, 1219, 44601, 6, 290, 705, 28665, 6, 611, 407, 6105, 31031]",0.5,1344,sast_risk,285,Potential misuse of 'ohlc' and 'column' if not properly validated,Low,1344,,[]
"üß† ML Signal: Use of rolling window operations, common in time series analysis","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 4560, 11, 2219, 287, 640, 2168, 3781]",1.0,1359,ml_signal,286,"Use of rolling window operations, common in time series analysis",,1344,        sma = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 895, 64, 796, 279, 67, 13, 27996, 7]"
"üß† ML Signal: Use of custom weights in rolling apply, indicating custom aggregation logic","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2183, 19590, 287, 10708, 4174, 11, 12739, 2183, 46500, 9156]",0.5,1375,ml_signal,288,"Use of custom weights in rolling apply, indicating custom aggregation logic",,1359,        )  ## first KAMA is SMA,"[220, 220, 220, 220, 220, 220, 220, 1267, 220, 22492, 717, 509, 25087, 318, 311, 5673]"
‚úÖ Best Practice: Use of format method for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 2446, 329, 4731, 33313]",0.5,1386,best_practice,289,Use of format method for string formatting,,1375,        kama = [],"[220, 220, 220, 220, 220, 220, 220, 479, 1689, 796, 17635]"
üß† ML Signal: Function signature with default parameter values,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 11507, 3815]",1.0,1397,ml_signal,289,Function signature with default parameter values,,1386,        kama = [],"[220, 220, 220, 220, 220, 220, 220, 479, 1689, 796, 17635]"
‚úÖ Best Practice: Use of descriptive variable names,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891]",1.0,1414,best_practice,299,Use of descriptive variable names,,1397,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Use of class method for calculation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 2446, 329, 17952]",1.0,1433,ml_signal,302,Use of class method for calculation,,1414,"        sma[""KAMA""] = pd.Series(","[220, 220, 220, 220, 220, 220, 220, 895, 64, 14692, 42, 25087, 8973, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Use of intermediate variables for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 19898, 9633, 329, 16287]",1.0,1451,best_practice,304,Use of intermediate variables for clarity,,1433,        )  ## apply the kama list to existing index,"[220, 220, 220, 220, 220, 220, 220, 1267, 220, 22492, 4174, 262, 479, 1689, 1351, 284, 4683, 6376]"
üß† ML Signal: Use of class method for calculation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 2446, 329, 17952]",1.0,1457,ml_signal,307,Use of class method for calculation,,1451,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of formatted string for naming,"[26486, 227, 6705, 19939, 25, 5765, 286, 39559, 4731, 329, 19264]",1.0,1465,best_practice,308,Use of formatted string for naming,,1457,    def ZLEMA(,"[220, 220, 220, 825, 1168, 2538, 5673, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse of decorator without validation logic,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 11705, 1352, 1231, 21201, 9156]",1.0,1479,sast_risk,313,Potential misuse of decorator without validation logic,Low,1465,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
‚úÖ Best Practice: Use of rolling window for time series data,"[26486, 227, 6705, 19939, 25, 5765, 286, 10708, 4324, 329, 640, 2168, 1366]",0.5,1493,best_practice,313,Use of rolling window for time series data,,1479,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
‚úÖ Best Practice: Vectorized operations for performance,"[26486, 227, 6705, 19939, 25, 20650, 1143, 4560, 329, 2854]",0.5,1526,best_practice,317,Vectorized operations for performance,,1493,"        and other trend following indicators. As it follows price closer, it also provides better price averaging and responds better to price swings.""""""","[220, 220, 220, 220, 220, 220, 220, 290, 584, 5182, 1708, 21337, 13, 1081, 340, 5679, 2756, 5699, 11, 340, 635, 3769, 1365, 2756, 20430, 290, 20067, 1365, 284, 2756, 26728, 526, 15931]"
‚úÖ Best Practice: Use of zip for iterating over two sequences,"[26486, 227, 6705, 19939, 25, 5765, 286, 19974, 329, 11629, 803, 625, 734, 16311]",0.5,1541,best_practice,321,Use of zip for iterating over two sequences,,1526,        ema = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 795, 64, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Returning a pandas Series with index and name,"[26486, 227, 6705, 19939, 25, 42882, 257, 19798, 292, 7171, 351, 6376, 290, 1438]",0.5,1549,best_practice,329,Returning a pandas Series with index and name,,1541,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of decorator for input validation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 1352, 329, 5128, 21201]",1.0,1549,ml_signal,330,Use of decorator for input validation,,1549,,[]
‚úÖ Best Practice: Include a docstring to describe the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 8748, 13]",0.5,1549,best_practice,330,Include a docstring to describe the function's purpose and usage.,,1549,,[]
"üß† ML Signal: Use of financial calculations, which could be relevant for financial ML models.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 16765, 11, 543, 714, 307, 5981, 329, 3176, 10373, 4981, 13]",0.5,1557,ml_signal,335,"Use of financial calculations, which could be relevant for financial ML models.",,1549,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'ohlcv' DataFrame has specific columns without validation.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 48988, 33967, 6, 6060, 19778, 468, 2176, 15180, 1231, 21201, 13]",0.5,1565,sast_risk,335,Assumes 'ohlcv' DataFrame has specific columns without validation.,Low,1557,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Use of cumulative sum, a common pattern in time series analysis.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23818, 2160, 11, 257, 2219, 3912, 287, 640, 2168, 3781, 13]",0.5,1573,ml_signal,340,"Use of cumulative sum, a common pattern in time series analysis.",,1565,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",1.0,1598,best_practice,347,Docstring provides a clear explanation of the function's purpose.,,1573,                return (w * x).sum() / d,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 357, 86, 1635, 2124, 737, 16345, 3419, 1220, 288]"
üß† ML Signal: Usage of Exponential Weighted Moving Average (ewm) indicates time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5518, 35470, 14331, 276, 26768, 13475, 357, 413, 76, 8, 9217, 640, 2168, 3781, 13]",1.0,1598,ml_signal,348,Usage of Exponential Weighted Moving Average (ewm) indicates time series analysis.,,1598,,[]
"‚ö†Ô∏è SAST Risk (Low): Assumes 'column' exists in 'ohlc', which may lead to KeyError if not validated.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 28665, 6, 7160, 287, 705, 1219, 44601, 3256, 543, 743, 1085, 284, 7383, 12331, 611, 407, 31031, 13]",1.0,1598,sast_risk,348,"Assumes 'column' exists in 'ohlc', which may lead to KeyError if not validated.",Low,1598,,[]
‚úÖ Best Practice: Use of @classmethod decorator indicates method is intended to be called on the class itself.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346, 13]",1.0,1598,best_practice,355,Use of @classmethod decorator indicates method is intended to be called on the class itself.,,1598,,[]
‚úÖ Best Practice: Docstring provides a brief description of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2163, 338, 4007, 13]",1.0,1598,best_practice,355,Docstring provides a brief description of the function's purpose.,,1598,,[]
"üß† ML Signal: The commented-out code provides insight into the intended algorithm, useful for understanding developer intent.","[8582, 100, 254, 10373, 26484, 25, 383, 16476, 12, 448, 2438, 3769, 11281, 656, 262, 5292, 11862, 11, 4465, 329, 4547, 8517, 6824, 13]",0.5,1604,ml_signal,356,"The commented-out code provides insight into the intended algorithm, useful for understanding developer intent.",,1598,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
"‚ö†Ô∏è SAST Risk (Low): The function raises NotImplementedError, indicating incomplete implementation which could lead to runtime errors if called.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 2163, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 17503, 7822, 543, 714, 1085, 284, 19124, 8563, 611, 1444, 13]",1.0,1621,sast_risk,369,"The function raises NotImplementedError, indicating incomplete implementation which could lead to runtime errors if called.",Low,1604,        half_length = int(period / 2),"[220, 220, 220, 220, 220, 220, 220, 2063, 62, 13664, 796, 493, 7, 41007, 1220, 362, 8]"
"‚úÖ Best Practice: Use of @classmethod decorator indicates the method is intended to be called on the class itself, not instances.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 262, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346, 11, 407, 10245, 13]",1.0,1621,best_practice,371,"Use of @classmethod decorator indicates the method is intended to be called on the class itself, not instances.",,1621,,[]
‚úÖ Best Practice: Include a docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",1.0,1642,best_practice,370,Include a docstring to describe the function's purpose,,1621,        sqrt_length = int(math.sqrt(period)),"[220, 220, 220, 220, 220, 220, 220, 19862, 17034, 62, 13664, 796, 493, 7, 11018, 13, 31166, 17034, 7, 41007, 4008]"
"‚ö†Ô∏è SAST Risk (Low): Function is not implemented, which may lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 318, 407, 9177, 11, 543, 743, 1085, 284, 19124, 8563, 611, 1444]",1.0,1642,sast_risk,371,"Function is not implemented, which may lead to runtime errors if called",Low,1642,,[]
‚úÖ Best Practice: Use of @classmethod decorator to define a method that operates on the class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 8160, 257, 2446, 326, 14051, 319, 262, 1398]",0.5,1666,best_practice,374,Use of @classmethod decorator to define a method that operates on the class,,1642,"        ohlc[""deltawma""] = 2 * wmaf - wmas","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 14692, 67, 2120, 707, 2611, 8973, 796, 362, 1635, 266, 76, 1878, 532, 266, 5356]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function and its parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 290, 663, 10007]",1.0,1690,best_practice,374,Docstring provides a clear explanation of the function and its parameters,,1666,"        ohlc[""deltawma""] = 2 * wmaf - wmas","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 14692, 67, 2120, 707, 2611, 8973, 796, 362, 1635, 266, 76, 1878, 532, 266, 5356]"
‚ö†Ô∏è SAST Risk (Low): Use of assert with a function call that has side effects (print),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 351, 257, 2163, 869, 326, 468, 1735, 3048, 357, 4798, 8]",0.5,1717,sast_risk,381,Use of assert with a function call that has side effects (print),Low,1690,"    def EVWMA(cls, ohlcv: DataFrame, period: int = 20) -> Series:","[220, 220, 220, 825, 8696, 54, 5673, 7, 565, 82, 11, 11752, 75, 33967, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1160, 8, 4613, 7171, 25]"
"üß† ML Signal: Usage of DataFrame and Series, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 290, 7171, 11, 2219, 287, 1366, 7587, 8861]",0.5,1737,ml_signal,383,"Usage of DataFrame and Series, common in data processing tasks",,1717,        The eVWMA can be looked at as an approximation to the,"[220, 220, 220, 220, 220, 220, 220, 383, 304, 30133, 5673, 460, 307, 3114, 379, 355, 281, 40874, 284, 262]"
‚úÖ Best Practice: Use of np.clip to ensure values are within a specified range,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 15036, 284, 4155, 3815, 389, 1626, 257, 7368, 2837]",0.5,1737,best_practice,395,Use of np.clip to ensure values are within a specified range,,1737,,[]
"üß† ML Signal: Returning a pandas Series, indicating time series data processing","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 19798, 292, 7171, 11, 12739, 640, 2168, 1366, 7587]",0.5,1760,ml_signal,401,"Returning a pandas Series, indicating time series data processing",,1737,                evwma.append(0),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 819, 86, 2611, 13, 33295, 7, 15, 8]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770]",1.0,1783,best_practice,401,Use of @classmethod decorator for class method definition,,1760,                evwma.append(0),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 819, 86, 2611, 13, 33295, 7, 15, 8]"
‚úÖ Best Practice: Docstring provides a detailed explanation of the MACD calculation and its components.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 6496, 7468, 286, 262, 20582, 35, 17952, 290, 663, 6805, 13]",1.0,1797,best_practice,410,Docstring provides a detailed explanation of the MACD calculation and its components.,,1783,"    @inputvalidator(input_=""ohlcv"")","[220, 220, 220, 2488, 15414, 12102, 1352, 7, 15414, 62, 2625, 48988, 33967, 4943]"
üß† ML Signal: Usage of Exponential Moving Average (EMA) for financial data analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5518, 35470, 26768, 13475, 357, 27630, 8, 329, 3176, 1366, 3781, 13]",0.5,1797,ml_signal,422,Usage of Exponential Moving Average (EMA) for financial data analysis.,,1797,,[]
üß† ML Signal: Calculation of slow EMA for MACD.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3105, 412, 5673, 329, 20582, 35, 13]",0.5,1810,ml_signal,426,Calculation of slow EMA for MACD.,,1797,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
üß† ML Signal: Calculation of MACD line as the difference between fast and slow EMA.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 1627, 355, 262, 3580, 1022, 3049, 290, 3105, 412, 5673, 13]",1.0,1846,ml_signal,434,Calculation of MACD line as the difference between fast and slow EMA.,,1810,"            ohlc[column].ewm(alpha=1 / period, adjust=adjust).mean(), name=""SMMA""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11752, 44601, 58, 28665, 4083, 413, 76, 7, 26591, 28, 16, 1220, 2278, 11, 4532, 28, 23032, 737, 32604, 22784, 1438, 2625, 12310, 5673, 1]"
üß† ML Signal: Calculation of MACD signal line using EMA.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 6737, 1627, 1262, 412, 5673, 13]",1.0,1882,ml_signal,434,Calculation of MACD signal line using EMA.,,1846,"            ohlc[column].ewm(alpha=1 / period, adjust=adjust).mean(), name=""SMMA""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11752, 44601, 58, 28665, 4083, 413, 76, 7, 26591, 28, 16, 1220, 2278, 11, 4532, 28, 23032, 737, 32604, 22784, 1438, 2625, 12310, 5673, 1]"
‚úÖ Best Practice: Returning a DataFrame with both MACD and signal line for further analysis.,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 351, 1111, 20582, 35, 290, 6737, 1627, 329, 2252, 3781, 13]",1.0,1882,best_practice,436,Returning a DataFrame with both MACD and signal line for further analysis.,,1882,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069]",1.0,1898,best_practice,445,Docstring provides a clear explanation of the function's purpose and behavior,,1882,        m = offset * (size - 1),"[220, 220, 220, 220, 220, 220, 220, 285, 796, 11677, 1635, 357, 7857, 532, 352, 8]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",0.5,1917,best_practice,451,Using descriptive variable names for clarity,,1898,        sum = sum + dataWindow[i] * coeff,"[220, 220, 220, 220, 220, 220, 220, 2160, 796, 2160, 1343, 1366, 27703, 58, 72, 60, 1635, 763, 14822]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",0.5,1930,best_practice,455,Using descriptive variable names for clarity,,1917,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",0.5,1961,best_practice,463,Using descriptive variable names for clarity,,1930,"    def FRAMA(cls, ohlc: DataFrame, period: int = 16, batch: int=10) -> Series:","[220, 220, 220, 825, 8782, 25087, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1467, 11, 15458, 25, 493, 28, 940, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",0.5,1976,best_practice,464,Using descriptive variable names for clarity,,1961,"        """"""Fractal Adaptive Moving Average","[220, 220, 220, 220, 220, 220, 220, 37227, 37, 974, 282, 30019, 425, 26768, 13475]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",0.5,1976,best_practice,467,Using descriptive variable names for clarity,,1976,,[]
‚úÖ Best Practice: Returning a DataFrame with concatenated series for structured output,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 351, 1673, 36686, 515, 2168, 329, 20793, 5072]",0.5,1976,best_practice,467,Returning a DataFrame with concatenated series for structured output,,1976,,[]
‚ö†Ô∏è SAST Risk (Low): Potential misuse of decorators if input validation is not properly handled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 11705, 2024, 611, 5128, 21201, 318, 407, 6105, 12118]",1.0,1999,sast_risk,472,Potential misuse of decorators if input validation is not properly handled,Low,1976,"        assert period % 2 == 0, print(""FRAMA period must be even"")","[220, 220, 220, 220, 220, 220, 220, 6818, 2278, 4064, 362, 6624, 657, 11, 3601, 7203, 10913, 25087, 2278, 1276, 307, 772, 4943]"
üß† ML Signal: Use of decorators to enforce input validation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 284, 4605, 5128, 21201]",0.5,2015,ml_signal,474,Use of decorators to enforce input validation,,1999,        c = ohlc.close.copy(),"[220, 220, 220, 220, 220, 220, 220, 269, 796, 11752, 44601, 13, 19836, 13, 30073, 3419]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and origin.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8159, 13]",1.0,2015,best_practice,476,Docstring provides a clear explanation of the function's purpose and origin.,,2015,,[]
üß† ML Signal: Usage of volume-weighted calculations for financial indicators.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6115, 12, 6551, 276, 16765, 329, 3176, 21337, 13]",1.0,2015,ml_signal,479,Usage of volume-weighted calculations for financial indicators.,,2015,,[]
üß† ML Signal: Use of exponential weighted moving average for fast period.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 3867, 2811, 329, 3049, 2278, 13]",1.0,2015,ml_signal,479,Use of exponential weighted moving average for fast period.,,2015,,[]
üß† ML Signal: Use of exponential weighted moving average for slow period.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 3867, 2811, 329, 3105, 2278, 13]",1.0,2050,ml_signal,488,Use of exponential weighted moving average for slow period.,,2015,        D = (np.log(n1 + n2) - np.log(n3)) / np.log(2),"[220, 220, 220, 220, 220, 220, 220, 360, 796, 357, 37659, 13, 6404, 7, 77, 16, 1343, 299, 17, 8, 532, 45941, 13, 6404, 7, 77, 18, 4008, 1220, 45941, 13, 6404, 7, 17, 8]"
üß† ML Signal: Calculation of MACD line from fast and slow indicators.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 1627, 422, 3049, 290, 3105, 21337, 13]",0.5,2056,ml_signal,501,Calculation of MACD line from fast and slow indicators.,,2050,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Calculation of MACD signal line using exponential weighted moving average.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 6737, 1627, 1262, 39682, 26356, 3867, 2811, 13]",0.5,2069,ml_signal,504,Calculation of MACD signal line using exponential weighted moving average.,,2056,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
‚úÖ Best Practice: Returning a DataFrame with both MACD and SIGNAL columns for clarity.,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 351, 1111, 20582, 35, 290, 36771, 1847, 15180, 329, 16287, 13]",0.5,2082,best_practice,504,Returning a DataFrame with both MACD and SIGNAL columns for clarity.,,2069,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
‚úÖ Best Practice: Use of classmethod decorator for methods that operate on class-level data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 12, 5715, 1366, 13]",1.0,2095,best_practice,509,Use of classmethod decorator for methods that operate on class-level data.,,2082,"        adjust: bool = True,","[220, 220, 220, 220, 220, 220, 220, 4532, 25, 20512, 796, 6407, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if input validation is not properly implemented in inputvalidator.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5128, 21201, 318, 407, 6105, 9177, 287, 5128, 12102, 1352, 13]",1.0,2113,sast_risk,512,Potential risk if input validation is not properly implemented in inputvalidator.,Low,2095,"        MACD, MACD Signal and MACD difference.","[220, 220, 220, 220, 220, 220, 220, 20582, 35, 11, 20582, 35, 26484, 290, 20582, 35, 3580, 13]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function and its parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 290, 663, 10007]",1.0,2131,best_practice,512,Docstring provides a clear explanation of the function and its parameters,,2113,"        MACD, MACD Signal and MACD difference.","[220, 220, 220, 220, 220, 220, 220, 20582, 35, 11, 20582, 35, 26484, 290, 20582, 35, 3580, 13]"
üß† ML Signal: Usage of custom method EVWMA for financial calculations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 2446, 8696, 54, 5673, 329, 3176, 16765]",1.0,2161,ml_signal,520,Usage of custom method EVWMA for financial calculations,,2131,"        As a moving average of the indicator, it trails the MACD and makes it easier to spot MACD turns.","[220, 220, 220, 220, 220, 220, 220, 1081, 257, 3867, 2811, 286, 262, 16916, 11, 340, 19196, 262, 20582, 35, 290, 1838, 340, 4577, 284, 4136, 20582, 35, 4962, 13]"
üß† ML Signal: Usage of custom method EVWMA for financial calculations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 2446, 8696, 54, 5673, 329, 3176, 16765]",1.0,2186,ml_signal,522,Usage of custom method EVWMA for financial calculations,,2161,        A bearish crossover occurs when the MACD turns down and crosses below the signal line.,"[220, 220, 220, 220, 220, 220, 220, 317, 6842, 680, 27668, 8833, 618, 262, 20582, 35, 4962, 866, 290, 24234, 2174, 262, 6737, 1627, 13]"
üß† ML Signal: Calculation of MACD using financial data,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 1262, 3176, 1366]",1.0,2203,ml_signal,525,Calculation of MACD using financial data,,2186,        EMA_fast = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 412, 5673, 62, 7217, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of exponential weighted moving average for signal line,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 329, 6737, 1627]",1.0,2220,ml_signal,525,Usage of exponential weighted moving average for signal line,,2203,        EMA_fast = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 412, 5673, 62, 7217, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Returning a DataFrame with concatenated results for clarity,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 351, 1673, 36686, 515, 2482, 329, 16287]",1.0,2237,best_practice,531,Returning a DataFrame with concatenated results for clarity,,2220,"            name=""EMA_slow"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 27630, 62, 38246, 1600]"
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on class level,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 1241]",1.0,2254,best_practice,531,Use of @classmethod decorator for methods that operate on class level,,2237,"            name=""EMA_slow"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 27630, 62, 38246, 1600]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2271,best_practice,527,Use of type hints for function parameters and return type improves code readability and maintainability.,,2254,"            name=""EMA_fast"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 27630, 62, 7217, 1600]"
üß† ML Signal: Use of a fixed time interval for calculating momentum is a common pattern in financial analysis.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 5969, 640, 16654, 329, 26019, 12858, 318, 257, 2219, 3912, 287, 3176, 3781, 13]",0.5,2288,ml_signal,531,Use of a fixed time interval for calculating momentum is a common pattern in financial analysis.,,2271,"            name=""EMA_slow"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 27630, 62, 38246, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if the specified column does not exist in the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 262, 7368, 5721, 857, 407, 2152, 287, 262, 6060, 19778, 13]",1.0,2317,sast_risk,533,Potential KeyError if the specified column does not exist in the DataFrame.,Low,2288,"        MACD = pd.Series(EMA_fast - EMA_slow, name=""MACD"")","[220, 220, 220, 220, 220, 220, 220, 20582, 35, 796, 279, 67, 13, 27996, 7, 27630, 62, 7217, 532, 412, 5673, 62, 38246, 11, 1438, 2625, 44721, 35, 4943]"
"‚úÖ Best Practice: Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 326, 262, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346, 11, 407, 319, 10245, 13]",0.5,2335,best_practice,534,"Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances.",,2317,        MACD_signal = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 20582, 35, 62, 12683, 282, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2364,best_practice,533,Use of type hints for function parameters and return type improves code readability and maintainability.,,2335,"        MACD = pd.Series(EMA_fast - EMA_slow, name=""MACD"")","[220, 220, 220, 220, 220, 220, 220, 20582, 35, 796, 279, 67, 13, 27996, 7, 27630, 62, 7217, 532, 412, 5673, 62, 38246, 11, 1438, 2625, 44721, 35, 4943]"
üß† ML Signal: Use of financial indicators like ROC can be a feature in ML models for stock price prediction.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 21337, 588, 371, 4503, 460, 307, 257, 3895, 287, 10373, 4981, 329, 4283, 2756, 17724, 13]",1.0,2364,ml_signal,537,Use of financial indicators like ROC can be a feature in ML models for stock price prediction.,,2364,,[]
"‚ö†Ô∏è SAST Risk (Low): Assumes 'column' exists in 'ohlc', which may lead to a KeyError if it doesn't.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 28665, 6, 7160, 287, 705, 1219, 44601, 3256, 543, 743, 1085, 284, 257, 7383, 12331, 611, 340, 1595, 470, 13]",1.0,2364,sast_risk,537,"Assumes 'column' exists in 'ohlc', which may lead to a KeyError if it doesn't.",Low,2364,,[]
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if ohlc[column].shift(period) contains zero values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 11752, 44601, 58, 28665, 4083, 30846, 7, 41007, 8, 4909, 6632, 3815, 13]",0.5,2371,sast_risk,541,Potential division by zero if ohlc[column].shift(period) contains zero values.,Low,2364,    def PPO(,"[220, 220, 220, 825, 350, 16402, 7]"
"‚úÖ Best Practice: Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 326, 262, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346, 11, 407, 319, 10245, 13]",1.0,2378,best_practice,541,"Use of @classmethod decorator indicates that the method is intended to be called on the class itself, not on instances.",,2371,    def PPO(,"[220, 220, 220, 825, 350, 16402, 7]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and calculation.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 17952, 13]",1.0,2391,best_practice,548,Docstring provides a clear explanation of the function's purpose and calculation.,,2378,"        adjust: bool = True,","[220, 220, 220, 220, 220, 220, 220, 4532, 25, 20512, 796, 6407, 11]"
üß† ML Signal: Use of financial indicators like VBM can be a feature in ML models for trading strategies.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 21337, 588, 569, 12261, 460, 307, 257, 3895, 287, 10373, 4981, 329, 7313, 10064, 13]",0.5,2416,ml_signal,553,Use of financial indicators like VBM can be a feature in ML models for trading strategies.,,2391,"        As with MACD, the PPO reflects the convergence and divergence of two moving averages.","[220, 220, 220, 220, 220, 220, 220, 1081, 351, 20582, 35, 11, 262, 350, 16402, 12497, 262, 40826, 290, 43366, 286, 734, 3867, 25694, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if ATR returns zero; ensure ATR is never zero.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 5161, 49, 5860, 6632, 26, 4155, 5161, 49, 318, 1239, 6632, 13]",0.5,2441,sast_risk,553,Potential division by zero if ATR returns zero; ensure ATR is never zero.,Low,2416,"        As with MACD, the PPO reflects the convergence and divergence of two moving averages.","[220, 220, 220, 220, 220, 220, 220, 1081, 351, 20582, 35, 11, 262, 350, 16402, 12497, 262, 40826, 290, 43366, 286, 734, 3867, 25694, 13]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",0.5,2449,best_practice,568,Docstring provides a clear explanation of the function's purpose and usage.,,2441,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of financial indicators like RSI can be a feature in trading algorithms.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 21337, 588, 371, 11584, 460, 307, 257, 3895, 287, 7313, 16113, 13]",0.5,2464,ml_signal,579,Use of financial indicators like RSI can be a feature in trading algorithms.,,2449,"        period_slow: int = 26,","[220, 220, 220, 220, 220, 220, 220, 2278, 62, 38246, 25, 493, 796, 2608, 11]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 8748, 13]",1.0,2479,best_practice,588,Docstring provides a clear explanation of the method's purpose and usage.,,2464,        _fast = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 4808, 7217, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of RSI and IFT can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 371, 11584, 290, 314, 9792, 460, 7603, 7313, 4811, 7572, 13]",0.5,2497,ml_signal,593,Usage of RSI and IFT can indicate trading strategy patterns.,,2479,                .mean(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 32604, 3419]"
‚úÖ Best Practice: Use of descriptive variable names like 'd' and 'weights' improves readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 588, 705, 67, 6, 290, 705, 43775, 6, 19575, 1100, 1799, 13]",1.0,2513,best_practice,595,Use of descriptive variable names like 'd' and 'weights' improves readability.,,2497,"            name=""_fast"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 62, 7217, 1600]"
üß† ML Signal: Calculation of weights for WMA can be a pattern for feature engineering.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 19590, 329, 370, 5673, 460, 307, 257, 3912, 329, 3895, 8705, 13]",0.5,2513,ml_signal,597,Calculation of weights for WMA can be a pattern for feature engineering.,,2513,,[]
"üß† ML Signal: Function definition with a single parameter, common in mathematical operations","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2060, 11507, 11, 2219, 287, 18069, 4560]",0.5,2529,ml_signal,595,"Function definition with a single parameter, common in mathematical operations",,2513,"            name=""_fast"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 62, 7217, 1600]"
üß† ML Signal: Usage of apply with a custom function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4174, 351, 257, 2183, 2163]",0.5,2542,ml_signal,600,Usage of apply with a custom function,,2529,            / (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1220, 357]"
üß† ML Signal: Creation of a pandas Series with mathematical operations,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 257, 19798, 292, 7171, 351, 18069, 4560]",1.0,2577,ml_signal,602,Creation of a pandas Series with mathematical operations,,2542,"                .ewm(ignore_na=False, span=period_slow, adjust=adjust)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 413, 76, 7, 46430, 62, 2616, 28, 25101, 11, 11506, 28, 41007, 62, 38246, 11, 4532, 28, 23032, 8]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",1.0,2593,best_practice,605,Include a docstring to describe the function's purpose,,2577,"            name=""_slow"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 62, 38246, 1600]"
"‚ö†Ô∏è SAST Risk (Low): Function is not implemented, which may lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 318, 407, 9177, 11, 543, 743, 1085, 284, 19124, 8563, 611, 1444]",1.0,2601,sast_risk,606,"Function is not implemented, which may lead to runtime errors if called",Low,2593,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Function signature with default parameters and type hints,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007, 290, 2099, 20269]",1.0,2609,ml_signal,611,Function signature with default parameters and type hints,,2601,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of lambda for inline function definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 26098, 2163, 6770]",0.5,2617,best_practice,625,Use of lambda for inline function definition,,2609,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Data transformation and normalization,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 290, 3487, 1634]",0.5,2632,ml_signal,627,Data transformation and normalization,,2617,        calculated using two EVWMA's.,"[220, 220, 220, 220, 220, 220, 220, 10488, 1262, 734, 8696, 54, 5673, 338, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if 'index' is out of bounds for 't',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 705, 9630, 6, 318, 503, 286, 22303, 329, 705, 83, 6]",1.0,2659,sast_risk,629,Potential IndexError if 'index' is out of bounds for 't',Low,2632,        :period_slow: Specifies the number of Periods used for the slow EVWMA calculation,"[220, 220, 220, 220, 220, 220, 220, 1058, 41007, 62, 38246, 25, 18291, 6945, 262, 1271, 286, 18581, 82, 973, 329, 262, 3105, 8696, 54, 5673, 17952]"
"üß† ML Signal: Use of RSI calculation, which is a common financial indicator","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 371, 11584, 17952, 11, 543, 318, 257, 2219, 3176, 16916]",1.0,2686,ml_signal,634,"Use of RSI calculation, which is a common financial indicator",,2659,"        evwma_slow = cls.EVWMA(ohlcv, period_slow)","[220, 220, 220, 220, 220, 220, 220, 819, 86, 2611, 62, 38246, 796, 537, 82, 13, 20114, 54, 5673, 7, 48988, 33967, 11, 2278, 62, 38246, 8]"
üß† ML Signal: Use of time series data for financial analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 640, 2168, 1366, 329, 3176, 3781]",0.5,2713,ml_signal,636,Use of time series data for financial analysis,,2686,"        evwma_fast = cls.EVWMA(ohlcv, period_fast)","[220, 220, 220, 220, 220, 220, 220, 819, 86, 2611, 62, 7217, 796, 537, 82, 13, 20114, 54, 5673, 7, 48988, 33967, 11, 2278, 62, 7217, 8]"
‚úÖ Best Practice: Explicitly specify dtype for Series for better performance,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 288, 4906, 329, 7171, 329, 1365, 2854]",0.5,2713,best_practice,637,Explicitly specify dtype for Series for better performance,,2713,,[]
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'column' is not in 'ohlc',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 28665, 6, 318, 407, 287, 705, 1219, 44601, 6]",0.5,2752,sast_risk,640,Potential KeyError if 'column' is not in 'ohlc',Low,2713,"            MACD.ewm(ignore_na=False, span=signal, adjust=adjust).mean(), name=""SIGNAL""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20582, 35, 13, 413, 76, 7, 46430, 62, 2616, 28, 25101, 11, 11506, 28, 12683, 282, 11, 4532, 28, 23032, 737, 32604, 22784, 1438, 2625, 46224, 1847, 1]"
üß† ML Signal: Use of map with a lambda function for transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3975, 351, 257, 37456, 2163, 329, 13389]",0.5,2791,ml_signal,640,Use of map with a lambda function for transformation,,2752,"            MACD.ewm(ignore_na=False, span=signal, adjust=adjust).mean(), name=""SIGNAL""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20582, 35, 13, 413, 76, 7, 46430, 62, 2616, 28, 25101, 11, 11506, 28, 12683, 282, 11, 4532, 28, 23032, 737, 32604, 22784, 1438, 2625, 46224, 1847, 1]"
üß† ML Signal: Usage of financial data (ohlc) to calculate technical indicators,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 1366, 357, 1219, 44601, 8, 284, 15284, 6276, 21337]",1.0,2791,ml_signal,644,Usage of financial data (ohlc) to calculate technical indicators,,2791,,[]
üß† ML Signal: Calculation of price range differences,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2756, 2837, 5400]",1.0,2797,ml_signal,645,Calculation of price range differences,,2791,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Calculation of price range differences,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2756, 2837, 5400]",1.0,2828,ml_signal,651,Calculation of price range differences,,2797,"        return pd.Series(ohlc[column].diff(period), name=""MOM"".format(period))","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7, 1219, 44601, 58, 28665, 4083, 26069, 7, 41007, 828, 1438, 2625, 44, 2662, 1911, 18982, 7, 41007, 4008]"
üß† ML Signal: Concatenation of multiple Series for comparison,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 341, 286, 3294, 7171, 329, 7208]",0.5,2834,ml_signal,653,Concatenation of multiple Series for comparison,,2828,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Calculation of maximum value across different price ranges,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 5415, 1988, 1973, 1180, 2756, 16069]",0.5,2861,ml_signal,656,Calculation of maximum value across different price ranges,,2834,        is a pure momentum oscillator that measures the percent change in price from one period to the next.,"[220, 220, 220, 220, 220, 220, 220, 318, 257, 5899, 12858, 24969, 1352, 326, 5260, 262, 1411, 1487, 287, 2756, 422, 530, 2278, 284, 262, 1306, 13]"
‚úÖ Best Practice: Returning a named Series for clarity,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 329, 16287]",0.5,2861,best_practice,658,Returning a named Series for clarity,,2861,,[]
‚úÖ Best Practice: Use of @classmethod decorator for class method definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770]",1.0,2861,best_practice,658,Use of @classmethod decorator for class method definition,,2861,,[]
‚úÖ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,2891,best_practice,655,Include type hints for method parameters and return type for better readability and maintainability,,2861,"        """"""The Rate-of-Change (ROC) indicator, which is also referred to as simply Momentum,","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 14806, 12, 1659, 12, 19400, 357, 49, 4503, 8, 16916, 11, 543, 318, 635, 6412, 284, 355, 2391, 29278, 388, 11]"
üß† ML Signal: Usage of class method to calculate a financial indicator,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 2446, 284, 15284, 257, 3176, 16916]",0.5,2891,ml_signal,658,Usage of class method to calculate a financial indicator,,2891,,[]
‚úÖ Best Practice: Use f-string for better readability and performance,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1365, 1100, 1799, 290, 2854]",0.5,2891,best_practice,658,Use f-string for better readability and performance,,2891,,[]
‚úÖ Best Practice: Decorator should be placed directly above the method it decorates,"[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 815, 307, 4624, 3264, 2029, 262, 2446, 340, 11705, 689]",0.5,2898,best_practice,664,Decorator should be placed directly above the method it decorates,,2891,    def VBM(,"[220, 220, 220, 825, 569, 12261, 7]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069, 13]",1.0,2905,best_practice,664,Docstring provides a clear explanation of the function's purpose and behavior.,,2898,    def VBM(,"[220, 220, 220, 825, 569, 12261, 7]"
üß† ML Signal: Initialization of variables with first data point values.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 9633, 351, 717, 1366, 966, 3815, 13]",0.5,2919,ml_signal,669,Initialization of variables with first data point values.,,2905,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
üß† ML Signal: Use of standard deviation for initial SAR value.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3210, 28833, 329, 4238, 47341, 1988, 13]",0.5,2953,ml_signal,671,Use of standard deviation for initial SAR value.,,2919,"        """"""The Volatility-Based-Momentum (VBM) indicator, The calculation for a volatility based momentum (VBM)","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 4709, 18486, 12, 15001, 12, 29252, 298, 388, 357, 53, 12261, 8, 16916, 11, 383, 17952, 329, 257, 30772, 1912, 12858, 357, 53, 12261, 8]"
üß† ML Signal: Iterative pattern over financial data.,"[8582, 100, 254, 10373, 26484, 25, 40806, 876, 3912, 625, 3176, 1366, 13]",0.5,2983,ml_signal,674,Iterative pattern over financial data.,,2953,"        VBM(n,v) = (Close ‚Äî Close n periods ago) / ATR(v periods)","[220, 220, 220, 220, 220, 220, 220, 569, 12261, 7, 77, 11, 85, 8, 796, 357, 26125, 851, 13872, 299, 9574, 2084, 8, 1220, 5161, 49, 7, 85, 9574, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if ohlc.index is not unique or not aligned with _sar length.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 11752, 44601, 13, 9630, 318, 407, 3748, 393, 407, 19874, 351, 4808, 82, 283, 4129, 13]",1.0,3003,sast_risk,696,Potential risk if ohlc.index is not unique or not aligned with _sar length.,Low,2983,"        RSI can also be used to identify the general trend.""""""","[220, 220, 220, 220, 220, 220, 220, 371, 11584, 460, 635, 307, 973, 284, 5911, 262, 2276, 5182, 526, 15931]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770, 13]",1.0,3018,best_practice,703,Use of @classmethod decorator for class method definition.,,3003,        up[up < 0] = 0,"[220, 220, 220, 220, 220, 220, 220, 510, 58, 929, 1279, 657, 60, 796, 657]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,3038,best_practice,696,Docstring provides a clear explanation of the function's purpose and usage.,,3018,"        RSI can also be used to identify the general trend.""""""","[220, 220, 220, 220, 220, 220, 220, 371, 11584, 460, 635, 307, 973, 284, 5911, 262, 2276, 5182, 526, 15931]"
üß† ML Signal: Usage of financial data (ohlc) for technical analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 1366, 357, 1219, 44601, 8, 329, 6276, 3781, 13]",1.0,3038,ml_signal,705,Usage of financial data (ohlc) for technical analysis.,,3038,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for index out of range if ohlc is empty.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6376, 503, 286, 2837, 611, 11752, 44601, 318, 6565, 13]",0.5,3046,sast_risk,755,Potential for index out of range if ohlc is empty.,Low,3038,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"‚ö†Ô∏è SAST Risk (Low): Incorrect variable assignment, psarbear should be assigned to psarbear.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3457, 47315, 7885, 16237, 11, 26692, 283, 33227, 815, 307, 8686, 284, 26692, 283, 33227, 13]",1.0,3077,sast_risk,756,"Incorrect variable assignment, psarbear should be assigned to psarbear.",Low,3046,        The Dynamic Momentum Index is a variable term RSI. The RSI term varies from 3 to 30. The variable,"[220, 220, 220, 220, 220, 220, 220, 383, 26977, 29278, 388, 12901, 318, 257, 7885, 3381, 371, 11584, 13, 383, 371, 11584, 3381, 17806, 422, 513, 284, 1542, 13, 383, 7885]"
"‚ö†Ô∏è SAST Risk (Low): Incorrect variable assignment, psarbull should be assigned to psarbull.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3457, 47315, 7885, 16237, 11, 26692, 283, 16308, 815, 307, 8686, 284, 26692, 283, 16308, 13]",1.0,3108,sast_risk,758,"Incorrect variable assignment, psarbull should be assigned to psarbull.",Low,3077,"        the shorter the time period is. It is interpreted in the same way as the RSI, but provides signals earlier.","[220, 220, 220, 220, 220, 220, 220, 262, 12238, 262, 640, 2278, 318, 13, 632, 318, 16173, 287, 262, 976, 835, 355, 262, 371, 11584, 11, 475, 3769, 10425, 2961, 13]"
üß† ML Signal: Function signature with default parameters and type hints,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007, 290, 2099, 20269]",0.5,3129,ml_signal,766,Function signature with default parameters and type hints,,3108,            sd = close.rolling(5).std(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 45647, 796, 1969, 13, 18886, 7, 20, 737, 19282, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'column' does not exist in 'ohlc',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 28665, 6, 857, 407, 2152, 287, 705, 1219, 44601, 6]",0.5,3149,sast_risk,775,Potential KeyError if 'column' does not exist in 'ohlc',Low,3129,            time = t.iloc[index],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 796, 256, 13, 346, 420, 58, 9630, 60]"
‚úÖ Best Practice: Use isinstance to check the type of 'MA',"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 262, 2099, 286, 705, 5673, 6]",0.5,3176,best_practice,777,Use isinstance to check the type of 'MA',,3149,                subset = ohlc.iloc[0:index],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24637, 796, 11752, 44601, 13, 346, 420, 58, 15, 25, 9630, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential AttributeError if 'SMA' is not defined in 'cls',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 705, 50, 5673, 6, 318, 407, 5447, 287, 705, 565, 82, 6]",0.5,3207,sast_risk,779,Potential AttributeError if 'SMA' is not defined in 'cls',Low,3176,                subset = ohlc.iloc[(index - time) : index],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24637, 796, 11752, 44601, 13, 346, 420, 58, 7, 9630, 532, 640, 8, 1058, 6376, 60]"
‚úÖ Best Practice: Use pd.concat for combining Series into a DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 329, 19771, 7171, 656, 257, 6060, 19778]",0.5,3223,best_practice,782,Use pd.concat for combining Series into a DataFrame,,3207,        dates = Series(ohlc.index),"[220, 220, 220, 220, 220, 220, 220, 9667, 796, 7171, 7, 1219, 44601, 13, 9630, 8]"
‚úÖ Best Practice: Use @classmethod decorator for methods that operate on the class,"[26486, 227, 6705, 19939, 25, 5765, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 262, 1398]",0.5,3229,best_practice,787,Use @classmethod decorator for methods that operate on the class,,3223,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069]",1.0,3247,best_practice,789,Docstring provides a clear explanation of the function's purpose and behavior,,3229,"        """"""True Range is the maximum of three price ranges.","[220, 220, 220, 220, 220, 220, 220, 37227, 17821, 13667, 318, 262, 5415, 286, 1115, 2756, 16069, 13]"
üß† ML Signal: Usage of a technical analysis function to calculate bands,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6276, 3781, 2163, 284, 15284, 11760]",1.0,3247,ml_signal,795,Usage of a technical analysis function to calculate bands,,3247,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if TA.BBANDS is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 21664, 13, 15199, 1565, 5258, 318, 407, 6105, 31031, 393, 5336, 36951]",0.5,3247,sast_risk,795,Potential risk if TA.BBANDS is not properly validated or sanitized,Low,3247,,[]
"üß† ML Signal: Returning a DataFrame, which is a common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587]",0.5,3272,ml_signal,797,"Returning a DataFrame, which is a common pattern in data processing",,3247,"            ohlc[""high""] - ohlc[""close""].shift()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11752, 44601, 14692, 8929, 8973, 532, 11752, 44601, 14692, 19836, 1, 4083, 30846, 3419]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770]",0.5,3287,best_practice,800,Use of @classmethod decorator for class method definition,,3272,        TR3 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 7579, 18, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",0.5,3302,best_practice,800,Docstring provides a clear explanation of the function's purpose.,,3287,        TR3 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 7579, 18, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of TA.BBANDS indicates a pattern of using technical analysis indicators.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 21664, 13, 15199, 1565, 5258, 9217, 257, 3912, 286, 1262, 6276, 3781, 21337, 13]",0.5,3321,ml_signal,802,Usage of TA.BBANDS indicates a pattern of using technical analysis indicators.,,3302,        ).abs()  # True Range = Previous Close less Low,"[220, 220, 220, 220, 220, 220, 220, 6739, 8937, 3419, 220, 1303, 6407, 13667, 796, 21801, 13872, 1342, 7754]"
‚úÖ Best Practice: Using pd.Series with a name parameter improves readability and data handling.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 27996, 351, 257, 1438, 11507, 19575, 1100, 1799, 290, 1366, 9041, 13]",0.5,3340,best_practice,802,Using pd.Series with a name parameter improves readability and data handling.,,3321,        ).abs()  # True Range = Previous Close less Low,"[220, 220, 220, 220, 220, 220, 220, 6739, 8937, 3419, 220, 1303, 6407, 13667, 796, 21801, 13872, 1342, 7754]"
‚úÖ Best Practice: Use of @classmethod indicates a pattern of defining methods that operate on the class itself.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 9217, 257, 3912, 286, 16215, 5050, 326, 8076, 319, 262, 1398, 2346, 13]",0.5,3346,best_practice,810,Use of @classmethod indicates a pattern of defining methods that operate on the class itself.,,3340,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069, 13]",1.0,3352,best_practice,810,Docstring provides a clear explanation of the function's purpose and behavior.,,3346,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
"üß† ML Signal: Usage of a technical indicator function, which could be used to train financial models.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6276, 16916, 2163, 11, 543, 714, 307, 973, 284, 4512, 3176, 4981, 13]",0.5,3365,ml_signal,815,"Usage of a technical indicator function, which could be used to train financial models.",,3352,        return pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7]"
"üß† ML Signal: Calculation of a financial metric, which could be used to train financial models.","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 3176, 18663, 11, 543, 714, 307, 973, 284, 4512, 3176, 4981, 13]",0.5,3378,ml_signal,815,"Calculation of a financial metric, which could be used to train financial models.",,3365,        return pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Use of @classmethod decorator to indicate that the method is a class method.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 7603, 326, 262, 2446, 318, 257, 1398, 2446, 13]",1.0,3413,best_practice,821,Use of @classmethod decorator to indicate that the method is a class method.,,3378,"    def SAR(cls, ohlc: DataFrame, af: int = 0.02, amax: int = 0.2) -> Series:","[220, 220, 220, 825, 47341, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 6580, 25, 493, 796, 657, 13, 2999, 11, 716, 897, 25, 493, 796, 657, 13, 17, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,3438,best_practice,829,Docstring provides a clear explanation of the function's purpose and usage.,,3413,        _sar = [low[0] - (high - low).std()],"[220, 220, 220, 220, 220, 220, 220, 4808, 82, 283, 796, 685, 9319, 58, 15, 60, 532, 357, 8929, 532, 1877, 737, 19282, 3419, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'cls.EMA' or 'ohlc' is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 565, 82, 13, 27630, 6, 393, 705, 1219, 44601, 6, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",0.5,3453,sast_risk,837,Potential issue if 'cls.EMA' or 'ohlc' is not properly validated or sanitized.,Low,3438,            if sig1:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 43237, 16, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 565, 82, 13, 1404, 49, 6, 393, 705, 1219, 44601, 6, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",0.5,3483,sast_risk,841,Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized.,Low,3453,                sig0 = high[i] >= _sar[-1],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43237, 15, 796, 1029, 58, 72, 60, 18189, 4808, 82, 283, 58, 12, 16, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 565, 82, 13, 1404, 49, 6, 393, 705, 1219, 44601, 6, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",0.5,3501,sast_risk,844,Potential issue if 'cls.ATR' or 'ohlc' is not properly validated or sanitized.,Low,3483,            if sig0 == sig1:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 43237, 15, 6624, 43237, 16, 25]"
‚úÖ Best Practice: Using pd.concat for combining series ensures scalability and flexibility.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 19771, 2168, 19047, 16578, 1799, 290, 13688, 13]",0.5,3536,best_practice,849,Using pd.concat for combining series ensures scalability and flexibility.,,3501,                    af0 = af0 if xpt0 > xpt1 else af1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6580, 15, 796, 6580, 15, 611, 2124, 457, 15, 1875, 2124, 457, 16, 2073, 6580, 16]"
‚úÖ Best Practice: Use of @classmethod decorator indicates method is bound to the class and not the instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 2446, 318, 5421, 284, 262, 1398, 290, 407, 262, 4554, 13]",0.5,3571,best_practice,849,Use of @classmethod decorator indicates method is bound to the class and not the instance.,,3536,                    af0 = af0 if xpt0 > xpt1 else af1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6580, 15, 796, 6580, 15, 611, 2124, 457, 15, 1875, 2124, 457, 16, 2073, 6580, 16]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,3606,best_practice,849,Docstring provides a clear explanation of the function's purpose and usage.,,3571,                    af0 = af0 if xpt0 > xpt1 else af1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6580, 15, 796, 6580, 15, 611, 2124, 457, 15, 1875, 2124, 457, 16, 2073, 6580, 16]"
üß† ML Signal: Usage of rolling window operations on time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 4560, 319, 640, 2168, 1366, 13]",1.0,3623,ml_signal,851,Usage of rolling window operations on time series data.,,3606,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of rolling window operations on time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 4560, 319, 640, 2168, 1366, 13]",1.0,3623,ml_signal,857,Usage of rolling window operations on time series data.,,3623,,[]
üß† ML Signal: Calculation of a middle line as an average of two series.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 3504, 1627, 355, 281, 2811, 286, 734, 2168, 13]",1.0,3646,ml_signal,860,Calculation of a middle line as an average of two series.,,3623,"        return pd.Series(_sar, index=ohlc.index)","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 28264, 82, 283, 11, 6376, 28, 1219, 44601, 13, 9630, 8]"
‚úÖ Best Practice: Using pd.concat to combine multiple Series into a DataFrame.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 12082, 3294, 7171, 656, 257, 6060, 19778, 13]",1.0,3646,best_practice,861,Using pd.concat to combine multiple Series into a DataFrame.,,3646,,[]
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on class variables.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 9633, 13]",0.5,3646,best_practice,861,Use of @classmethod decorator for methods that operate on class variables.,,3646,,[]
‚úÖ Best Practice: Use of class method decorator to indicate this is a class method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 11705, 1352, 284, 7603, 428, 318, 257, 1398, 2446]",1.0,3669,best_practice,860,Use of class method decorator to indicate this is a class method,,3646,"        return pd.Series(_sar, index=ohlc.index)","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 28264, 82, 283, 11, 6376, 28, 1219, 44601, 13, 9630, 8]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 10007]",1.0,3669,best_practice,861,Docstring provides a clear explanation of the method's purpose and parameters,,3669,,[]
‚ö†Ô∏è SAST Risk (Low): Directly modifying the input DataFrame could lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 262, 5128, 6060, 19778, 714, 1085, 284, 30261, 1735, 3048]",0.5,3669,sast_risk,871,Directly modifying the input DataFrame could lead to unintended side effects,Low,3669,,[]
‚ö†Ô∏è SAST Risk (Low): Directly modifying the input DataFrame could lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 262, 5128, 6060, 19778, 714, 1085, 284, 30261, 1735, 3048]",0.5,3696,sast_risk,873,Directly modifying the input DataFrame could lead to unintended side effects,Low,3669,"        high, low, close = ohlc.high, ohlc.low, ohlc.close","[220, 220, 220, 220, 220, 220, 220, 1029, 11, 1877, 11, 1969, 796, 11752, 44601, 13, 8929, 11, 11752, 44601, 13, 9319, 11, 11752, 44601, 13, 19836]"
‚úÖ Best Practice: Use of descriptive function name for better readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 329, 1365, 1100, 1799]",0.5,3696,best_practice,871,Use of descriptive function name for better readability,,3696,,[]
‚úÖ Best Practice: Clear conditional logic for determining return value,"[26486, 227, 6705, 19939, 25, 11459, 26340, 9156, 329, 13213, 1441, 1988]",0.5,3723,best_practice,873,Clear conditional logic for determining return value,,3696,"        high, low, close = ohlc.high, ohlc.low, ohlc.close","[220, 220, 220, 220, 220, 220, 220, 1029, 11, 1877, 11, 1969, 796, 11752, 44601, 13, 8929, 11, 11752, 44601, 13, 9319, 11, 11752, 44601, 13, 19836]"
üß† ML Signal: Pattern of returning specific column value based on condition,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8024, 2176, 5721, 1988, 1912, 319, 4006]",1.0,3739,ml_signal,875,Pattern of returning specific column value based on condition,,3723,        psarbull = [None] * length,"[220, 220, 220, 220, 220, 220, 220, 26692, 283, 16308, 796, 685, 14202, 60, 1635, 4129]"
üß† ML Signal: Pattern of returning a default value when condition is not met,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8024, 257, 4277, 1988, 618, 4006, 318, 407, 1138]",1.0,3751,ml_signal,878,Pattern of returning a default value when condition is not met,,3739,        af = iaf,"[220, 220, 220, 220, 220, 220, 220, 6580, 796, 220, 544, 69]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,3761,best_practice,877,Use of descriptive variable names improves code readability.,,3751,        bull = True,"[220, 220, 220, 220, 220, 220, 220, 6473, 796, 6407]"
üß† ML Signal: Use of DataFrame apply method indicates a pattern of row-wise operations.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 4174, 2446, 9217, 257, 3912, 286, 5752, 12, 3083, 4560, 13]",1.0,3777,ml_signal,882,Use of DataFrame apply method indicates a pattern of row-wise operations.,,3761,"        for i in range(2, length):","[220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 17, 11, 4129, 2599]"
üß† ML Signal: Use of DataFrame apply method indicates a pattern of row-wise operations.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 4174, 2446, 9217, 257, 3912, 286, 5752, 12, 3083, 4560, 13]",1.0,3791,ml_signal,883,Use of DataFrame apply method indicates a pattern of row-wise operations.,,3777,            if bull:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 6473, 25]"
üß† ML Signal: Use of pd.Series and ewm suggests a pattern of time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 279, 67, 13, 27996, 290, 304, 26377, 5644, 257, 3912, 286, 640, 2168, 3781, 13]",1.0,3805,ml_signal,883,Use of pd.Series and ewm suggests a pattern of time series analysis.,,3791,            if bull:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 6473, 25]"
üß† ML Signal: Use of pd.Series and ewm suggests a pattern of time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 279, 67, 13, 27996, 290, 304, 26377, 5644, 257, 3912, 286, 640, 2168, 3781, 13]",1.0,3818,ml_signal,897,Use of pd.Series and ewm suggests a pattern of time series analysis.,,3805,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Returning a concatenated DataFrame is a clear and organized way to return multiple series.,"[26486, 227, 6705, 19939, 25, 42882, 257, 1673, 36686, 515, 6060, 19778, 318, 257, 1598, 290, 8389, 835, 284, 1441, 3294, 2168, 13]",1.0,3842,best_practice,903,Returning a concatenated DataFrame is a clear and organized way to return multiple series.,,3818,                    af = iaf,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6580, 796, 220, 544, 69]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",0.5,3864,best_practice,900,Docstring provides a clear explanation of the function's purpose and usage.,,3842,                    reverse = True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9575, 796, 6407]"
üß† ML Signal: Usage of a class method to calculate a financial indicator.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1398, 2446, 284, 15284, 257, 3176, 16916, 13]",1.0,3864,ml_signal,904,Usage of a class method to calculate a financial indicator.,,3864,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if dmi[""DI+""] + dmi[""DI-""] is zero.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 288, 11632, 14692, 17931, 10, 8973, 1343, 288, 11632, 14692, 17931, 12, 8973, 318, 6632, 13]",0.5,3900,sast_risk,909,"Potential division by zero if dmi[""DI+""] + dmi[""DI-""] is zero.",Low,3864,"                        af = min(af + iaf, maxaf)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6580, 796, 949, 7, 1878, 1343, 220, 544, 69, 11, 3509, 1878, 8]"
‚úÖ Best Practice: Naming the Series for better readability and debugging.,"[26486, 227, 6705, 19939, 25, 399, 3723, 262, 7171, 329, 1365, 1100, 1799, 290, 28769, 13]",0.5,3932,best_practice,912,Naming the Series for better readability and debugging.,,3900,                    if low[i - 2] < psar[i]:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1877, 58, 72, 532, 362, 60, 1279, 26692, 283, 58, 72, 5974]"
‚úÖ Best Practice: Use of @classmethod decorator to indicate that the method operates on the class rather than an instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 7603, 326, 262, 2446, 14051, 319, 262, 1398, 2138, 621, 281, 4554, 13]",0.5,3967,best_practice,913,Use of @classmethod decorator to indicate that the method operates on the class rather than an instance.,,3932,                        psar[i] = low[i - 2],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26692, 283, 58, 72, 60, 796, 1877, 58, 72, 532, 362, 60]"
üß† ML Signal: Usage of shift() indicates time series data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6482, 3419, 9217, 640, 2168, 1366, 17512]",0.5,3999,ml_signal,920,Usage of shift() indicates time series data manipulation,,3967,                    if high[i - 2] > psar[i]:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1029, 58, 72, 532, 362, 60, 1875, 26692, 283, 58, 72, 5974]"
üß† ML Signal: Calculation of technical indicators like pivot points,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6276, 21337, 588, 30355, 2173]",0.5,3999,ml_signal,922,Calculation of technical indicators like pivot points,,3999,,[]
üß† ML Signal: Calculation of support levels,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1104, 2974]",1.0,4026,ml_signal,924,Calculation of support levels,,3999,                psarbull[i] = psar[i],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26692, 283, 16308, 58, 72, 60, 796, 26692, 283, 58, 72, 60]"
üß† ML Signal: Calculation of resistance levels,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6625, 2974]",1.0,4059,ml_signal,929,Calculation of resistance levels,,4026,"        psarbear = pd.Series(psarbull, name=""psarbear"", index=ohlc.index)","[220, 220, 220, 220, 220, 220, 220, 26692, 283, 33227, 796, 279, 67, 13, 27996, 7, 862, 283, 16308, 11, 1438, 2625, 862, 283, 33227, 1600, 6376, 28, 1219, 44601, 13, 9630, 8]"
‚úÖ Best Practice: Use pd.concat for combining multiple Series into a DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 329, 19771, 3294, 7171, 656, 257, 6060, 19778]",1.0,4092,best_practice,930,Use pd.concat for combining multiple Series into a DataFrame,,4059,"        psarbull = pd.Series(psarbear, name=""psarbull"", index=ohlc.index)","[220, 220, 220, 220, 220, 220, 220, 26692, 283, 16308, 796, 279, 67, 13, 27996, 7, 862, 283, 33227, 11, 1438, 2625, 862, 283, 16308, 1600, 6376, 28, 1219, 44601, 13, 9630, 8]"
‚úÖ Best Practice: Use @classmethod decorator for methods that operate on class variables,"[26486, 227, 6705, 19939, 25, 5765, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 9633]",1.0,4092,best_practice,951,Use @classmethod decorator for methods that operate on class variables,,4092,,[]
"üß† ML Signal: Method for calculating Fibonacci pivot points, useful for financial data analysis models","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 26019, 41566, 261, 44456, 30355, 2173, 11, 4465, 329, 3176, 1366, 3781, 4981]",0.5,4113,ml_signal,946,"Method for calculating Fibonacci pivot points, useful for financial data analysis models",,4092,         The bands automatically widen when volatility increases and narrow when volatility decreases.,"[220, 220, 220, 220, 220, 220, 220, 220, 383, 11760, 6338, 45676, 618, 30772, 5732, 290, 7135, 618, 30772, 20638, 13]"
‚úÖ Best Practice: Using descriptive variable names like 'pp' for pivot points improves readability,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 705, 381, 6, 329, 30355, 2173, 19575, 1100, 1799]",1.0,4113,best_practice,953,Using descriptive variable names like 'pp' for pivot points improves readability,,4113,,[]
‚úÖ Best Practice: Using pd.concat for DataFrame construction is efficient and readable,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 6060, 19778, 5103, 318, 6942, 290, 31744]",0.5,4113,best_practice,961,Using pd.concat for DataFrame construction is efficient and readable,,4113,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,4121,best_practice,977,Docstring provides a clear explanation of the function's purpose and usage.,,4113,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Using descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,4156,best_practice,984,Using descriptive variable names improves code readability.,,4121,"        cls, ohlc: DataFrame, period: int = 20, MA: Series = None, column: str = ""close""","[220, 220, 220, 220, 220, 220, 220, 537, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1160, 11, 8779, 25, 7171, 796, 6045, 11, 5721, 25, 965, 796, 366, 19836, 1]"
"üß† ML Signal: Calculation of a financial indicator, which could be used in predictive models.","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 3176, 16916, 11, 543, 714, 307, 973, 287, 33344, 4981, 13]",0.5,4163,ml_signal,985,"Calculation of a financial indicator, which could be used in predictive models.",,4156,    ) -> Series:,"[220, 220, 220, 1267, 4613, 7171, 25]"
‚úÖ Best Practice: Using pd.Series with a descriptive name improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 27996, 351, 257, 35644, 1438, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,4163,best_practice,989,Using pd.Series with a descriptive name improves code readability and maintainability.,,4163,,[]
‚úÖ Best Practice: Use of @classmethod decorator indicates the method is bound to the class and not the instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 262, 2446, 318, 5421, 284, 262, 1398, 290, 407, 262, 4554, 13]",1.0,4169,best_practice,995,Use of @classmethod decorator indicates the method is bound to the class and not the instance.,,4163,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",1.0,4194,best_practice,992,Docstring provides a clear explanation of the function's purpose.,,4169,"            name=""{0} period BBWITH"".format(period),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 90, 15, 92, 2278, 12597, 54, 10554, 1911, 18982, 7, 41007, 828]"
üß† ML Signal: Usage of rolling window and mean for time series data processing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 290, 1612, 329, 640, 2168, 1366, 7587, 13]",1.0,4200,ml_signal,995,Usage of rolling window and mean for time series data processing.,,4194,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Method chaining with rolling and mean for data transformation.,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 351, 10708, 290, 1612, 329, 1366, 13389, 13]",0.5,4207,ml_signal,998,Method chaining with rolling and mean for data transformation.,,4200,    ) -> Series:,"[220, 220, 220, 1267, 4613, 7171, 25]"
‚úÖ Best Practice: Use of format for string formatting improves readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 329, 4731, 33313, 19575, 1100, 1799, 13]",1.0,4243,best_practice,1000,Use of format for string formatting improves readability.,,4207,        %b (pronounced 'percent b') is derived from the formula for Stochastics and shows where price is in relation to the bands.,"[220, 220, 220, 220, 220, 220, 220, 4064, 65, 357, 31186, 8918, 705, 25067, 275, 11537, 318, 10944, 422, 262, 10451, 329, 520, 5374, 24232, 290, 2523, 810, 2756, 318, 287, 8695, 284, 262, 11760, 13]"
"‚úÖ Best Practice: Use of @classmethod decorator indicates method is bound to class, not instance.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 2446, 318, 5421, 284, 1398, 11, 407, 4554, 13]",1.0,4243,best_practice,1003,"Use of @classmethod decorator indicates method is bound to class, not instance.",,4243,,[]
üß† ML Signal: Usage of RSI and StochRSI can indicate financial data analysis patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 371, 11584, 290, 520, 5374, 6998, 40, 460, 7603, 3176, 1366, 3781, 7572, 13]",1.0,4287,ml_signal,1006,Usage of RSI and StochRSI can indicate financial data analysis patterns.,,4243,"            (ohlc[""close""] - BB[""BB_LOWER""]) / (BB[""BB_UPPER""] - BB[""BB_LOWER""]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 1219, 44601, 14692, 19836, 8973, 532, 12597, 14692, 15199, 62, 43, 36048, 8973, 8, 1220, 357, 15199, 14692, 15199, 62, 8577, 18973, 8973, 532, 12597, 14692, 15199, 62, 43, 36048, 8973, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if rsi.max() equals rsi.min().,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 374, 13396, 13, 9806, 3419, 21767, 374, 13396, 13, 1084, 22446]",0.5,4303,sast_risk,1007,Potential division by zero if rsi.max() equals rsi.min().,Low,4287,"            name=""%b"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 4, 65, 1600]"
‚úÖ Best Practice: Use f-string for better readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1365, 1100, 1799, 290, 2854, 13]",0.5,4313,best_practice,1014,Use f-string for better readability and performance.,,4303,"        cls,","[220, 220, 220, 220, 220, 220, 220, 537, 82, 11]"
üß† ML Signal: Function signature and default parameter values can be used to learn API usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 290, 4277, 11507, 3815, 460, 307, 973, 284, 2193, 7824, 8748, 7572, 13]",0.5,4326,ml_signal,1015,Function signature and default parameter values can be used to learn API usage patterns.,,4313,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,4339,best_practice,1015,Docstring provides a clear explanation of the function's purpose and usage.,,4326,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
üß† ML Signal: Usage of rolling window operations on DataFrame columns is a common pattern in time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 4560, 319, 6060, 19778, 15180, 318, 257, 2219, 3912, 287, 640, 2168, 3781, 13]",0.5,4352,ml_signal,1015,Usage of rolling window operations on DataFrame columns is a common pattern in time series analysis.,,4339,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
üß† ML Signal: Calculation of min and max over a rolling window is a common pattern in financial data analysis.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 949, 290, 3509, 625, 257, 10708, 4324, 318, 257, 2219, 3912, 287, 3176, 1366, 3781, 13]",0.5,4383,ml_signal,1021,Calculation of min and max over a rolling window is a common pattern in financial data analysis.,,4352,"        """"""Keltner Channels [KC] are volatility-based envelopes set above and below an exponential moving average.","[220, 220, 220, 220, 220, 220, 220, 37227, 42, 2120, 1008, 609, 8961, 685, 36222, 60, 389, 30772, 12, 3106, 16441, 274, 900, 2029, 290, 2174, 281, 39682, 3867, 2811, 13]"
‚úÖ Best Practice: Naming the Series with a descriptive name aids in debugging and readability.,"[26486, 227, 6705, 19939, 25, 399, 3723, 262, 7171, 351, 257, 35644, 1438, 31378, 287, 28769, 290, 1100, 1799, 13]",0.5,4416,best_practice,1023,Naming the Series with a descriptive name aids in debugging and readability.,,4383,"        Instead of using the standard deviation, Keltner Channels use the Average True Range (ATR) to set channel distance.","[220, 220, 220, 220, 220, 220, 220, 5455, 286, 1262, 262, 3210, 28833, 11, 509, 2120, 1008, 609, 8961, 779, 262, 13475, 6407, 13667, 357, 1404, 49, 8, 284, 900, 6518, 5253, 13]"
‚úÖ Best Practice: Returning a transformed Series directly is efficient and clear.,"[26486, 227, 6705, 19939, 25, 42882, 257, 14434, 7171, 3264, 318, 6942, 290, 1598, 13]",0.5,4445,best_practice,1027,Returning a transformed Series directly is efficient and clear.,,4416,"        Channels can also be used to identify overbought and oversold levels when the trend is flat.""""""","[220, 220, 220, 220, 220, 220, 220, 609, 8961, 460, 635, 307, 973, 284, 5911, 625, 65, 2917, 290, 625, 24120, 2974, 618, 262, 5182, 318, 6228, 526, 15931]"
"‚úÖ Best Practice: Using @classmethod allows the method to be called on the class itself, which is useful for factory methods.","[26486, 227, 6705, 19939, 25, 8554, 2488, 4871, 24396, 3578, 262, 2446, 284, 307, 1444, 319, 262, 1398, 2346, 11, 543, 318, 4465, 329, 8860, 5050, 13]",0.5,4468,best_practice,1029,"Using @classmethod allows the method to be called on the class itself, which is useful for factory methods.",,4445,"        if not isinstance(MA, pd.core.series.Series):","[220, 220, 220, 220, 220, 220, 220, 611, 407, 318, 39098, 7, 5673, 11, 279, 67, 13, 7295, 13, 25076, 13, 27996, 2599]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and methodology.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 20411, 13]",1.0,4505,best_practice,1030,Docstring provides a clear explanation of the function's purpose and methodology.,,4468,"            middle = pd.Series(cls.EMA(ohlc, period), name=""KC_MIDDLE"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3504, 796, 279, 67, 13, 27996, 7, 565, 82, 13, 27630, 7, 1219, 44601, 11, 2278, 828, 1438, 2625, 36222, 62, 44, 2389, 35, 2538, 4943]"
"üß† ML Signal: Iterating over DataFrame rows using itertuples, a common pattern in data processing.","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15274, 1262, 340, 861, 84, 2374, 11, 257, 2219, 3912, 287, 1366, 7587, 13]",1.0,4505,ml_signal,1038,"Iterating over DataFrame rows using itertuples, a common pattern in data processing.",,4505,,[]
"üß† ML Signal: Use of rolling window calculations, a common pattern in time series analysis.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 16765, 11, 257, 2219, 3912, 287, 640, 2168, 3781, 13]",1.0,4511,ml_signal,1041,"Use of rolling window calculations, a common pattern in time series analysis.",,4505,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of @classmethod decorator to indicate method operates on the class rather than instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 7603, 2446, 14051, 319, 262, 1398, 2138, 621, 4554, 13]",1.0,4511,best_practice,1047,Use of @classmethod decorator to indicate method operates on the class rather than instance.,,4511,,[]
üß† ML Signal: Function signature with default parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007]",0.5,4511,ml_signal,1047,Function signature with default parameters,,4511,,[]
‚úÖ Best Practice: Docstring explaining the function's purpose and usage,"[26486, 227, 6705, 19939, 25, 14432, 8841, 11170, 262, 2163, 338, 4007, 290, 8748]",1.0,4511,best_practice,1047,Docstring explaining the function's purpose and usage,,4511,,[]
‚úÖ Best Practice: Use of descriptive variable names,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891]",0.5,4511,best_practice,1055,Use of descriptive variable names,,4511,,[]
‚úÖ Best Practice: Use of descriptive variable names,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891]",0.5,4534,best_practice,1062,Use of descriptive variable names,,4511,         relative strength index. DMI tells you when to be long or short.,"[220, 220, 220, 220, 220, 220, 220, 220, 3585, 4202, 6376, 13, 360, 8895, 4952, 345, 618, 284, 307, 890, 393, 1790, 13]"
‚úÖ Best Practice: Returning a named Series for clarity,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 329, 16287]",0.5,4571,best_practice,1065,Returning a named Series for clarity,,4534,        source: https://www.tradingview.com/wiki/Directional_Movement_(DMI)#CALCULATION,"[220, 220, 220, 220, 220, 220, 220, 2723, 25, 3740, 1378, 2503, 13, 2213, 4980, 1177, 13, 785, 14, 15466, 14, 35, 4154, 282, 62, 21774, 434, 41052, 35, 8895, 8, 2, 34, 1847, 34, 6239, 6234]"
‚úÖ Best Practice: Use of @classmethod decorator for class method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446]",0.5,4571,best_practice,1066,Use of @classmethod decorator for class method,,4571,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",0.5,4594,best_practice,1062,Docstring provides a clear explanation of the function's purpose and usage.,,4571,         relative strength index. DMI tells you when to be long or short.,"[220, 220, 220, 220, 220, 220, 220, 220, 3585, 4202, 6376, 13, 360, 8895, 4952, 345, 618, 284, 307, 890, 393, 1790, 13]"
üß† ML Signal: Usage of pandas Series for financial data manipulation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 7171, 329, 3176, 1366, 17512, 13]",0.5,4631,ml_signal,1065,Usage of pandas Series for financial data manipulation.,,4594,        source: https://www.tradingview.com/wiki/Directional_Movement_(DMI)#CALCULATION,"[220, 220, 220, 220, 220, 220, 220, 2723, 25, 3740, 1378, 2503, 13, 2213, 4980, 1177, 13, 785, 14, 15466, 14, 35, 4154, 282, 62, 21774, 434, 41052, 35, 8895, 8, 2, 34, 1847, 34, 6239, 6234]"
"üß† ML Signal: Exponential moving average calculation, common in financial analysis.","[8582, 100, 254, 10373, 26484, 25, 5518, 35470, 3867, 2811, 17952, 11, 2219, 287, 3176, 3781, 13]",0.5,4631,ml_signal,1066,"Exponential moving average calculation, common in financial analysis.",,4631,,[]
"üß† ML Signal: Double exponential moving average calculation, indicating advanced financial analysis.","[8582, 100, 254, 10373, 26484, 25, 11198, 39682, 3867, 2811, 17952, 11, 12739, 6190, 3176, 3781, 13]",0.5,4639,ml_signal,1068,"Double exponential moving average calculation, indicating advanced financial analysis.",,4631,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Ratio calculation between two moving averages, a pattern in financial algorithms.","[8582, 100, 254, 10373, 26484, 25, 33956, 17952, 1022, 734, 3867, 25694, 11, 257, 3912, 287, 3176, 16113, 13]",0.5,4639,ml_signal,1069,"Ratio calculation between two moving averages, a pattern in financial algorithms.",,4639,,[]
"üß† ML Signal: Rolling window sum, a common technique in time series analysis.","[8582, 100, 254, 10373, 26484, 25, 21567, 4324, 2160, 11, 257, 2219, 8173, 287, 640, 2168, 3781, 13]",1.0,4639,ml_signal,1072,"Rolling window sum, a common technique in time series analysis.",,4639,,[]
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on class-level data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 12, 5715, 1366, 13]",0.5,4650,best_practice,1073,Use of @classmethod decorator for methods that operate on class-level data.,,4639,        # positive Dmi,"[220, 220, 220, 220, 220, 220, 220, 1303, 3967, 360, 11632]"
‚úÖ Best Practice: Include a docstring to describe the purpose of the function,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 2163]",0.5,4674,best_practice,1071,Include a docstring to describe the purpose of the function,,4650,"        ohlc[""down_move""] = -ohlc[""low""].diff()","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 14692, 2902, 62, 21084, 8973, 796, 532, 1219, 44601, 14692, 9319, 1, 4083, 26069, 3419]"
üß† ML Signal: Usage of pandas for financial calculations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 3176, 16765]",0.5,4685,ml_signal,1073,Usage of pandas for financial calculations,,4674,        # positive Dmi,"[220, 220, 220, 220, 220, 220, 220, 1303, 3967, 360, 11632]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if ohlc.high equals ohlc.low,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 11752, 44601, 13, 8929, 21767, 11752, 44601, 13, 9319]",1.0,4696,sast_risk,1073,Potential division by zero if ohlc.high equals ohlc.low,Low,4685,        # positive Dmi,"[220, 220, 220, 220, 220, 220, 220, 1303, 3967, 360, 11632]"
‚úÖ Best Practice: Use of @classmethod decorator to indicate method is bound to class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 7603, 2446, 318, 5421, 284, 1398]",0.5,4713,best_practice,1078,Use of @classmethod decorator to indicate method is bound to class,,4696,                return 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 657]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069]",1.0,4730,best_practice,1078,Docstring provides a clear explanation of the function's purpose and behavior,,4713,                return 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 657]"
üß† ML Signal: Usage of pandas for financial data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 3176, 1366, 17512]",1.0,4730,ml_signal,1086,Usage of pandas for financial data manipulation,,4730,,[]
üß† ML Signal: Usage of pandas for financial data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 3176, 1366, 17512]",1.0,4755,ml_signal,1088,Usage of pandas for financial data manipulation,,4730,"        ohlc[""minus""] = ohlc.apply(_dmn, axis=1)","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 14692, 40191, 8973, 796, 11752, 44601, 13, 39014, 28264, 67, 10295, 11, 16488, 28, 16, 8]"
üß† ML Signal: Usage of rolling window for time series analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 329, 640, 2168, 3781]",1.0,4770,ml_signal,1090,Usage of rolling window for time series analysis,,4755,        diplus = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 2566, 9541, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of rolling window for time series analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 329, 640, 2168, 3781]",1.0,4800,ml_signal,1092,Usage of rolling window for time series analysis,,4770,"            * (ohlc[""plus""] / cls.ATR(ohlc, period))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1635, 357, 1219, 44601, 14692, 9541, 8973, 1220, 537, 82, 13, 1404, 49, 7, 1219, 44601, 11, 2278, 4008]"
üß† ML Signal: Usage of class method for technical indicator calculation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 2446, 329, 6276, 16916, 17952]",1.0,4814,ml_signal,1094,Usage of class method for technical indicator calculation,,4800,"            .mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 32604, 22784]"
üß† ML Signal: Usage of pandas for financial data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 3176, 1366, 17512]",1.0,4829,ml_signal,1097,Usage of pandas for financial data manipulation,,4814,        diminus = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 12110, 385, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of pandas for financial data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 3176, 1366, 17512]",1.0,4844,ml_signal,1097,Usage of pandas for financial data manipulation,,4829,        diminus = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 12110, 385, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Concatenation of DataFrame columns for indicator output,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 341, 286, 6060, 19778, 15180, 329, 16916, 5072]",0.5,4869,ml_signal,1100,Concatenation of DataFrame columns for indicator output,,4844,"            .ewm(alpha=1 / period, adjust=adjust)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 413, 76, 7, 26591, 28, 16, 1220, 2278, 11, 4532, 28, 23032, 8]"
‚úÖ Best Practice: Use of classmethod decorator for methods that operate on class variables,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 9633]",1.0,4885,best_practice,1102,Use of classmethod decorator for methods that operate on class variables,,4869,"            name=""DI-"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 17931, 12, 1600]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,4900,best_practice,1097,Docstring provides a clear explanation of the function's purpose and usage.,,4885,        diminus = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 12110, 385, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of rolling mean indicates a pattern for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 1612, 9217, 257, 3912, 329, 32746, 722, 1366, 13]",1.0,4914,ml_signal,1101,Usage of rolling mean indicates a pattern for smoothing data.,,4900,"            .mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 32604, 22784]"
üß† ML Signal: Usage of rolling mean indicates a pattern for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 1612, 9217, 257, 3912, 329, 32746, 722, 1366, 13]",1.0,4922,ml_signal,1103,Usage of rolling mean indicates a pattern for smoothing data.,,4914,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of rolling mean indicates a pattern for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 1612, 9217, 257, 3912, 329, 32746, 722, 1366, 13]",1.0,4946,ml_signal,1105,Usage of rolling mean indicates a pattern for smoothing data.,,4922,"        return pd.concat([diplus, diminus], axis=1)","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 1102, 9246, 26933, 10989, 9541, 11, 12110, 385, 4357, 16488, 28, 16, 8]"
üß† ML Signal: Usage of rolling mean indicates a pattern for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 1612, 9217, 257, 3912, 329, 32746, 722, 1366, 13]",1.0,4946,ml_signal,1106,Usage of rolling mean indicates a pattern for smoothing data.,,4946,,[]
üß† ML Signal: Creation of a composite indicator from multiple smoothed series.,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 257, 24185, 16916, 422, 3294, 32746, 704, 2168, 13]",1.0,4977,ml_signal,1108,Creation of a composite indicator from multiple smoothed series.,,4946,"    def ADX(cls, ohlc: DataFrame, period: int = 14, adjust: bool = True) -> Series:","[220, 220, 220, 825, 5984, 55, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1478, 11, 4532, 25, 20512, 796, 6407, 8, 4613, 7171, 25]"
üß† ML Signal: Usage of rolling mean to create a signal line for the indicator.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 1612, 284, 2251, 257, 6737, 1627, 329, 262, 16916, 13]",0.5,5008,ml_signal,1108,Usage of rolling mean to create a signal line for the indicator.,,4977,"    def ADX(cls, ohlc: DataFrame, period: int = 14, adjust: bool = True) -> Series:","[220, 220, 220, 825, 5984, 55, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1478, 11, 4532, 25, 20512, 796, 6407, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Returning a DataFrame with named columns improves readability and usability.,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 351, 3706, 15180, 19575, 1100, 1799, 290, 42863, 13]",1.0,5029,best_practice,1113,Returning a DataFrame with named columns improves readability and usability.,,5008,"        dmi = cls.DMI(ohlc, period)","[220, 220, 220, 220, 220, 220, 220, 288, 11632, 796, 537, 82, 13, 35, 8895, 7, 1219, 44601, 11, 2278, 8]"
‚úÖ Best Practice: Use of @classmethod decorator indicates the method is bound to the class and not the instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 262, 2446, 318, 5421, 284, 262, 1398, 290, 407, 262, 4554, 13]",1.0,5041,best_practice,1115,Use of @classmethod decorator indicates the method is bound to the class and not the instance.,,5029,            100,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1802]"
üß† ML Signal: Usage of financial indicators like TSI can be a signal for financial data analysis models,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 309, 11584, 460, 307, 257, 6737, 329, 3176, 1366, 3781, 4981]",0.5,5055,ml_signal,1118,Usage of financial indicators like TSI can be a signal for financial data analysis models,,5041,"            .mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 32604, 22784]"
‚úÖ Best Practice: Use descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1100, 1799]",0.5,5080,best_practice,1119,Use descriptive variable names for readability,,5055,"            name=""{0} period ADX."".format(period),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 90, 15, 92, 2278, 5984, 55, 526, 13, 18982, 7, 41007, 828]"
‚úÖ Best Practice: Use descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1100, 1799]",0.5,5111,best_practice,1128,Use descriptive variable names for readability,,5080,        This means you‚Äôll have to use the previous day‚Äôs range for today‚Äôs pivot points.,"[220, 220, 220, 220, 220, 220, 220, 770, 1724, 345, 447, 247, 297, 423, 284, 779, 262, 2180, 1110, 447, 247, 82, 2837, 329, 1909, 447, 247, 82, 30355, 2173, 13]"
‚úÖ Best Practice: Return a DataFrame for structured data output,"[26486, 227, 6705, 19939, 25, 8229, 257, 6060, 19778, 329, 20793, 1366, 5072]",0.5,5138,best_practice,1144,Return a DataFrame for structured data output,,5111,"        r4 = df[""high""] + (3 * (pivot - df[""low""]))","[220, 220, 220, 220, 220, 220, 220, 374, 19, 796, 47764, 14692, 8929, 8973, 1343, 357, 18, 1635, 357, 79, 45785, 532, 47764, 14692, 9319, 8973, 4008]"
‚úÖ Best Practice: Use @classmethod decorator for methods that operate on the class,"[26486, 227, 6705, 19939, 25, 5765, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 262, 1398]",0.5,5155,best_practice,1148,Use @classmethod decorator for methods that operate on the class,,5138,"                pivot,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 30355, 11]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",0.5,5182,best_practice,1144,Docstring provides a clear explanation of the function's purpose.,,5155,"        r4 = df[""high""] + (3 * (pivot - df[""low""]))","[220, 220, 220, 220, 220, 220, 220, 374, 19, 796, 47764, 14692, 8929, 8973, 1343, 357, 18, 1635, 357, 79, 45785, 532, 47764, 14692, 9319, 8973, 4008]"
üß† ML Signal: Usage of arithmetic operations on DataFrame columns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 34768, 4560, 319, 6060, 19778, 15180, 13]",1.0,5182,ml_signal,1145,Usage of arithmetic operations on DataFrame columns.,,5182,,[]
üß† ML Signal: Use of decorators to modify or enhance class methods.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 284, 13096, 393, 9494, 1398, 5050, 13]",0.5,5210,ml_signal,1149,Use of decorators to modify or enhance class methods.,,5182,"                pd.Series(s1, name=""s1""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996, 7, 82, 16, 11, 1438, 2625, 82, 16, 12340]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,5238,best_practice,1149,Docstring provides a clear explanation of the function's purpose and usage.,,5210,"                pd.Series(s1, name=""s1""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996, 7, 82, 16, 11, 1438, 2625, 82, 16, 12340]"
üß† ML Signal: Usage of financial indicators like MFM can be a signal for financial data analysis models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 337, 23264, 460, 307, 257, 6737, 329, 3176, 1366, 3781, 4981, 13]",1.0,5246,ml_signal,1159,Usage of financial indicators like MFM can be a signal for financial data analysis models.,,5238,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Cumulative sum operations are common in time series analysis and financial computations.,"[8582, 100, 254, 10373, 26484, 25, 27843, 13628, 2160, 4560, 389, 2219, 287, 640, 2168, 3781, 290, 3176, 2653, 602, 13]",0.5,5270,ml_signal,1162,Cumulative sum operations are common in time series analysis and financial computations.,,5246,"    def PIVOT_FIB(cls, ohlc: DataFrame) -> DataFrame:","[220, 220, 220, 825, 350, 3824, 2394, 62, 37, 9865, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 8, 4613, 6060, 19778, 25]"
‚úÖ Best Practice: Decorator usage indicates this method is intended to be used with a class.,"[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 8748, 9217, 428, 2446, 318, 5292, 284, 307, 973, 351, 257, 1398, 13]",1.0,5278,best_practice,1163,Decorator usage indicates this method is intended to be used with a class.,,5270,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the inputvalidator decorator is implemented securely to avoid input validation issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 5128, 12102, 1352, 11705, 1352, 318, 9177, 30835, 284, 3368, 5128, 21201, 2428, 13]",0.5,5286,sast_risk,1167,Ensure that the inputvalidator decorator is implemented securely to avoid input validation issues.,Low,5278,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and calculation.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 17952, 13]",1.0,5294,best_practice,1163,Docstring provides a clear explanation of the function's purpose and calculation.,,5286,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Usage of pandas Series and ewm method indicates time series data manipulation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 7171, 290, 304, 26377, 2446, 9217, 640, 2168, 1366, 17512, 13]",0.5,5302,ml_signal,1167,Usage of pandas Series and ewm method indicates time series data manipulation.,,5294,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Repeated calls to cls.ADL suggest a pattern of using class methods for data processing.,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 3848, 284, 537, 82, 13, 2885, 43, 1950, 257, 3912, 286, 1262, 1398, 5050, 329, 1366, 7587, 13]",0.5,5310,ml_signal,1167,Repeated calls to cls.ADL suggest a pattern of using class methods for data processing.,,5302,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"‚úÖ Best Practice: Decorator indicates method is intended to be used with class, not instance.","[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 9217, 2446, 318, 5292, 284, 307, 973, 351, 1398, 11, 407, 4554, 13]",0.5,5338,best_practice,1174,"Decorator indicates method is intended to be used with class, not instance.",,5310,"        r2 = pp + ((df[""high""] - df[""low""]) * 0.618)","[220, 220, 220, 220, 220, 220, 220, 374, 17, 796, 9788, 1343, 14808, 7568, 14692, 8929, 8973, 532, 47764, 14692, 9319, 8973, 8, 1635, 657, 13, 47448, 8]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,5364,best_practice,1173,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,5338,"        r3 = pp + ((df[""high""] - df[""low""]) * 1)","[220, 220, 220, 220, 220, 220, 220, 374, 18, 796, 9788, 1343, 14808, 7568, 14692, 8929, 8973, 532, 47764, 14692, 9319, 8973, 8, 1635, 352, 8]"
üß† ML Signal: Usage of financial indicators like MFI can be a signal for financial data analysis models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 337, 11674, 460, 307, 257, 6737, 329, 3176, 1366, 3781, 4981, 13]",0.5,5392,ml_signal,1180,Usage of financial indicators like MFI can be a signal for financial data analysis models.,,5364,"        s4 = pp - ((df[""high""] - df[""low""]) * 1.382)","[220, 220, 220, 220, 220, 220, 220, 264, 19, 796, 9788, 532, 14808, 7568, 14692, 8929, 8973, 532, 47764, 14692, 9319, 8973, 8, 1635, 352, 13, 36243, 8]"
üß† ML Signal: Calculation of raw money flow (rmf) is a key step in financial analysis.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 8246, 1637, 5202, 357, 26224, 69, 8, 318, 257, 1994, 2239, 287, 3176, 3781, 13]",0.5,5406,ml_signal,1182,Calculation of raw money flow (rmf) is a key step in financial analysis.,,5392,        return pd.concat(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 1102, 9246, 7]"
‚úÖ Best Practice: Using pd.concat for combining data ensures flexibility and readability.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 19771, 1366, 19047, 13688, 290, 1100, 1799, 13]",0.5,5423,best_practice,1184,Using pd.concat for combining data ensures flexibility and readability.,,5406,"                pp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9788, 11]"
üß† ML Signal: Calculating the difference in typical price is a common pattern in time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 262, 3580, 287, 7226, 2756, 318, 257, 2219, 3912, 287, 640, 2168, 3781, 13]",0.5,5451,ml_signal,1185,Calculating the difference in typical price is a common pattern in time series analysis.,,5423,"                pd.Series(s1, name=""s1""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996, 7, 82, 16, 11, 1438, 2625, 82, 16, 12340]"
‚úÖ Best Practice: Function should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 15553, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",0.5,5463,best_practice,1183,Function should have a docstring explaining its purpose and parameters,,5451,            [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685]"
üß† ML Signal: Use of conditional logic to determine return value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5004, 1441, 1988]",0.5,5491,ml_signal,1185,Use of conditional logic to determine return value,,5463,"                pd.Series(s1, name=""s1""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996, 7, 82, 16, 11, 1438, 2625, 82, 16, 12340]"
üß† ML Signal: Accessing dictionary values by key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 3815, 416, 1994]",0.5,5519,ml_signal,1187,Accessing dictionary values by key,,5491,"                pd.Series(s3, name=""s3""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996, 7, 82, 18, 11, 1438, 2625, 82, 18, 12340]"
üß† ML Signal: Usage of apply function with custom function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4174, 2163, 351, 2183, 2163]",0.5,5534,ml_signal,1194,Usage of apply function with custom function,,5519,"            axis=1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16488, 28, 16, 11]"
üß† ML Signal: Usage of rolling window for time series analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 329, 640, 2168, 3781]",0.5,5542,ml_signal,1195,Usage of rolling window for time series analysis,,5534,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Calculation of financial indicator (MFI),"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3176, 16916, 357, 44, 11674, 8]",0.5,5557,ml_signal,1199,Calculation of financial indicator (MFI),,5542,"        """"""Stochastic oscillator %K","[220, 220, 220, 220, 220, 220, 220, 37227, 1273, 5374, 3477, 24969, 1352, 4064, 42]"
‚úÖ Best Practice: Use of decorator to define class method,"[26486, 227, 6705, 19939, 25, 5765, 286, 11705, 1352, 284, 8160, 1398, 2446]",0.5,5557,best_practice,1205,Use of decorator to define class method,,5557,,[]
‚úÖ Best Practice: Initialize new columns with NaN to avoid unintentional data leakage or incorrect calculations.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 649, 15180, 351, 11013, 45, 284, 3368, 48398, 1366, 47988, 393, 11491, 16765, 13]",1.0,5568,best_practice,1214,Initialize new columns with NaN to avoid unintentional data leakage or incorrect calculations.,,5557,        return STOCH,"[220, 220, 220, 220, 220, 220, 220, 1441, 3563, 46, 3398]"
‚úÖ Best Practice: Use vectorized operations for performance efficiency in pandas.,"[26486, 227, 6705, 19939, 25, 5765, 15879, 1143, 4560, 329, 2854, 9332, 287, 19798, 292, 13]",1.0,5574,best_practice,1216,Use vectorized operations for performance efficiency in pandas.,,5568,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Check for any positive changes before applying the condition to avoid unnecessary operations.,"[26486, 227, 6705, 19939, 25, 6822, 329, 597, 3967, 2458, 878, 11524, 262, 4006, 284, 3368, 13114, 4560, 13]",1.0,5582,best_practice,1220,Check for any positive changes before applying the condition to avoid unnecessary operations.,,5574,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Check for any negative changes before applying the condition to avoid unnecessary operations.,"[26486, 227, 6705, 19939, 25, 6822, 329, 597, 4633, 2458, 878, 11524, 262, 4006, 284, 3368, 13114, 4560, 13]",1.0,5620,best_practice,1223,Check for any negative changes before applying the condition to avoid unnecessary operations.,,5582,"            cls.STOCH(ohlc, stoch_period).rolling(center=False, window=period).mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 537, 82, 13, 2257, 46, 3398, 7, 1219, 44601, 11, 3995, 354, 62, 41007, 737, 18886, 7, 16159, 28, 25101, 11, 4324, 28, 41007, 737, 32604, 22784]"
‚úÖ Best Practice: Check for no changes before applying the condition to avoid unnecessary operations.,"[26486, 227, 6705, 19939, 25, 6822, 329, 645, 2458, 878, 11524, 262, 4006, 284, 3368, 13114, 4560, 13]",1.0,5626,best_practice,1227,Check for no changes before applying the condition to avoid unnecessary operations.,,5620,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use cumsum to efficiently calculate the cumulative sum of the OBV column.,"[26486, 227, 6705, 19939, 25, 5765, 269, 5700, 388, 284, 18306, 15284, 262, 23818, 2160, 286, 262, 25334, 53, 5721, 13]",0.5,5636,best_practice,1228,Use cumsum to efficiently calculate the cumulative sum of the OBV column.,,5626,    def STOCHRSI(,"[220, 220, 220, 825, 3563, 46, 3398, 6998, 40, 7]"
"üß† ML Signal: Use of decorators like @classmethod can indicate class-level operations, useful for ML models to understand code structure.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 588, 2488, 4871, 24396, 460, 7603, 1398, 12, 5715, 4560, 11, 4465, 329, 10373, 4981, 284, 1833, 2438, 4645, 13]",0.5,5646,ml_signal,1228,"Use of decorators like @classmethod can indicate class-level operations, useful for ML models to understand code structure.",,5636,    def STOCHRSI(,"[220, 220, 220, 825, 3563, 46, 3398, 6998, 40, 7]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069, 13]",1.0,5656,best_practice,1228,Docstring provides a clear explanation of the function's purpose and behavior.,,5646,    def STOCHRSI(,"[220, 220, 220, 825, 3563, 46, 3398, 6998, 40, 7]"
üß† ML Signal: Usage of financial indicators like OBV can be a signal for financial data analysis models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 25334, 53, 460, 307, 257, 6737, 329, 3176, 1366, 3781, 4981, 13]",0.5,5690,ml_signal,1237,Usage of financial indicators like OBV can be a signal for financial data analysis models.,,5656,            ((rsi - rsi.min()) / (rsi.max() - rsi.min())),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14808, 3808, 72, 532, 374, 13396, 13, 1084, 28955, 1220, 357, 3808, 72, 13, 9806, 3419, 532, 374, 13396, 13, 1084, 3419, 4008]"
"‚ö†Ô∏è SAST Risk (Low): Assumes 'volume' and specified 'column' exist in 'ohlcv', potential KeyError if not.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 29048, 6, 290, 7368, 705, 28665, 6, 2152, 287, 705, 48988, 33967, 3256, 2785, 7383, 12331, 611, 407, 13]",0.5,5724,sast_risk,1237,"Assumes 'volume' and specified 'column' exist in 'ohlcv', potential KeyError if not.",Low,5690,            ((rsi - rsi.min()) / (rsi.max() - rsi.min())),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14808, 3808, 72, 532, 374, 13396, 13, 1084, 28955, 1220, 357, 3808, 72, 13, 9806, 3419, 532, 374, 13396, 13, 1084, 3419, 4008]"
üß† ML Signal: Cumulative sum operations are common in time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 27843, 13628, 2160, 4560, 389, 2219, 287, 640, 2168, 3781, 13]",0.5,5755,ml_signal,1240,Cumulative sum operations are common in time series analysis.,,5724,"            name=""{0} period stochastic RSI."".format(rsi_period),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 90, 15, 92, 2278, 3995, 354, 3477, 371, 11584, 526, 13, 18982, 7, 3808, 72, 62, 41007, 828]"
"‚úÖ Best Practice: Decorator usage indicates method is a class method, which is important for class design.","[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 8748, 9217, 2446, 318, 257, 1398, 2446, 11, 543, 318, 1593, 329, 1398, 1486, 13]",0.5,5786,best_practice,1240,"Decorator usage indicates method is a class method, which is important for class design.",,5755,"            name=""{0} period stochastic RSI."".format(rsi_period),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 90, 15, 92, 2278, 3995, 354, 3477, 371, 11584, 526, 13, 18982, 7, 3808, 72, 62, 41007, 828]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 4069, 13]",1.0,5819,best_practice,1247,Docstring provides a clear explanation of the function's purpose and behavior.,,5786,"         Its purpose is to tell whether a stock or commodity market is trading near the high or the low, or somewhere in between,","[220, 220, 220, 220, 220, 220, 220, 220, 6363, 4007, 318, 284, 1560, 1771, 257, 4283, 393, 19464, 1910, 318, 7313, 1474, 262, 1029, 393, 262, 1877, 11, 393, 7382, 287, 1022, 11]"
‚úÖ Best Practice: Use of lambda for concise function definition.,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 35327, 2163, 6770, 13]",1.0,5848,best_practice,1253,Use of lambda for concise function definition.,,5819,"        lowest_low = ohlc[""low""].rolling(center=False, window=period).min()","[220, 220, 220, 220, 220, 220, 220, 9016, 62, 9319, 796, 11752, 44601, 14692, 9319, 1, 4083, 18886, 7, 16159, 28, 25101, 11, 4324, 28, 41007, 737, 1084, 3419]"
üß† ML Signal: Usage of DataFrame operations and diff method.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 4560, 290, 814, 2446, 13]",0.5,5862,ml_signal,1255,Usage of DataFrame operations and diff method.,,5848,        WR = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 11342, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of exponential weighted moving average.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 13]",0.5,5894,ml_signal,1256,Usage of exponential weighted moving average.,,5862,"            (highest_high - ohlc[""close""]) / (highest_high - lowest_low),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 35323, 62, 8929, 532, 11752, 44601, 14692, 19836, 8973, 8, 1220, 357, 35323, 62, 8929, 532, 9016, 62, 9319, 828]"
üß† ML Signal: Usage of exponential weighted moving average.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 13]",0.5,5902,ml_signal,1258,Usage of exponential weighted moving average.,,5894,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Creation of a pandas Series with a specific name.,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 257, 19798, 292, 7171, 351, 257, 2176, 1438, 13]",0.5,5910,ml_signal,1258,Creation of a pandas Series with a specific name.,,5902,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770, 13]",1.0,5936,best_practice,1263,Use of @classmethod decorator for class method definition.,,5910,"    def UO(cls, ohlc: DataFrame, column: str = ""close"") -> Series:","[220, 220, 220, 825, 471, 46, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 5721, 25, 965, 796, 366, 19836, 4943, 4613, 7171, 25]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007]",0.5,5958,best_practice,1265,Docstring provides a clear explanation of the function's purpose and parameters,,5936,        The multiple time frame objective seeks to avoid the pitfalls of other oscillators.,"[220, 220, 220, 220, 220, 220, 220, 383, 3294, 640, 5739, 9432, 12932, 284, 3368, 262, 45716, 286, 584, 24969, 2024, 13]"
‚úÖ Best Practice: Using a lambda function for concise and readable code,"[26486, 227, 6705, 19939, 25, 8554, 257, 37456, 2163, 329, 35327, 290, 31744, 2438]",0.5,5984,best_practice,1272,Using a lambda function for concise and readable code,,5958,"            k.append(min(row.low, _row.close))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 13, 33295, 7, 1084, 7, 808, 13, 9319, 11, 4808, 808, 13, 19836, 4008]"
üß† ML Signal: Usage of pandas DataFrame and Series operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 290, 7171, 4560]",0.5,5984,ml_signal,1274,Usage of pandas DataFrame and Series operations,,5984,,[]
üß† ML Signal: Usage of exponential weighted moving average,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811]",0.5,6022,ml_signal,1275,Usage of exponential weighted moving average,,5984,        Average7 = bp.rolling(window=7).sum() / cls.TR(ohlc).rolling(window=7).sum(),"[220, 220, 220, 220, 220, 220, 220, 13475, 22, 796, 275, 79, 13, 18886, 7, 17497, 28, 22, 737, 16345, 3419, 1220, 537, 82, 13, 5446, 7, 1219, 44601, 737, 18886, 7, 17497, 28, 22, 737, 16345, 3419]"
üß† ML Signal: Usage of class method for EMA calculation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 2446, 329, 412, 5673, 17952]",0.5,6022,ml_signal,1278,Usage of class method for EMA calculation,,6022,,[]
üß† ML Signal: Usage of pandas Series for financial calculations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 7171, 329, 3176, 16765]",0.5,6022,ml_signal,1278,Usage of pandas Series for financial calculations,,6022,,[]
‚úÖ Best Practice: Use of classmethod decorator for class-level method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 1398, 12, 5715, 2446]",0.5,6022,best_practice,1282,Use of classmethod decorator for class-level method,,6022,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if input validation is not properly implemented in inputvalidator,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5128, 21201, 318, 407, 6105, 9177, 287, 5128, 12102, 1352]",0.5,6033,sast_risk,1285,Potential risk if input validation is not properly implemented in inputvalidator,Low,6022,"        """"""'EMA',","[220, 220, 220, 220, 220, 220, 220, 13538, 30543, 27630, 3256]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",1.0,6044,best_practice,1285,Docstring provides a clear explanation of the function's purpose.,,6033,"        """"""'EMA',","[220, 220, 220, 220, 220, 220, 220, 13538, 30543, 27630, 3256]"
üß† ML Signal: Usage of pandas Series and DataFrame indicates data manipulation patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 7171, 290, 6060, 19778, 9217, 1366, 17512, 7572, 13]",1.0,6067,ml_signal,1288,Usage of pandas Series and DataFrame indicates data manipulation patterns.,,6044,"        AO is generally used to affirm trends or to anticipate possible reversals. """"""","[220, 220, 220, 220, 220, 220, 220, 317, 46, 318, 4143, 973, 284, 16266, 11257, 393, 284, 23794, 1744, 10372, 874, 13, 37227]"
üß† ML Signal: Use of exponential weighted mean for time series data.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 1612, 329, 640, 2168, 1366, 13]",1.0,6090,ml_signal,1288,Use of exponential weighted mean for time series data.,,6067,"        AO is generally used to affirm trends or to anticipate possible reversals. """"""","[220, 220, 220, 220, 220, 220, 220, 317, 46, 318, 4143, 973, 284, 16266, 11257, 393, 284, 23794, 1744, 10372, 874, 13, 37227]"
‚úÖ Best Practice: Use of classmethod decorator for class-level method.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 1398, 12, 5715, 2446, 13]",1.0,6104,best_practice,1294,Use of classmethod decorator for class-level method.,,6090,        fast = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 3049, 796, 279, 67, 13, 27996, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if inputvalidator does not properly validate input.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5128, 12102, 1352, 857, 407, 6105, 26571, 5128, 13]",1.0,6112,sast_risk,1297,Potential risk if inputvalidator does not properly validate input.,Low,6104,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Docstring provides a brief description of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2163, 338, 4007, 13]",0.5,6120,best_practice,1297,Docstring provides a brief description of the function's purpose.,,6112,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of financial data (ohlcv) and calculation of indicators.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 1366, 357, 48988, 33967, 8, 290, 17952, 286, 21337, 13]",1.0,6150,ml_signal,1302,Usage of financial data (ohlcv) and calculation of indicators.,,6120,"    def MI(cls, ohlc: DataFrame, period: int = 9, adjust: bool = True) -> Series:","[220, 220, 220, 825, 15789, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 860, 11, 4532, 25, 20512, 796, 6407, 8, 4613, 7171, 25]"
üß† ML Signal: Use of exponential weighted moving average for time series data.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 3867, 2811, 329, 640, 2168, 1366, 13]",0.5,6180,ml_signal,1302,Use of exponential weighted moving average for time series data.,,6150,"    def MI(cls, ohlc: DataFrame, period: int = 9, adjust: bool = True) -> Series:","[220, 220, 220, 825, 15789, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 860, 11, 4532, 25, 20512, 796, 6407, 8, 4613, 7171, 25]"
üß† ML Signal: Cumulative sum operation on a financial indicator.,"[8582, 100, 254, 10373, 26484, 25, 27843, 13628, 2160, 4905, 319, 257, 3176, 16916, 13]",0.5,6214,ml_signal,1309,Cumulative sum operation on a financial indicator.,,6180,"        DEMA9 = EMA9.ewm(span=period, ignore_na=False, adjust=adjust).mean()","[220, 220, 220, 220, 220, 220, 220, 360, 27630, 24, 796, 412, 5673, 24, 13, 413, 76, 7, 12626, 28, 41007, 11, 8856, 62, 2616, 28, 25101, 11, 4532, 28, 23032, 737, 32604, 3419]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770, 13]",0.5,6214,best_practice,1311,Use of @classmethod decorator for class method definition.,,6214,,[]
‚úÖ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,6247,best_practice,1308,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,6214,"        EMA9 = _range.ewm(span=period, ignore_na=False, adjust=adjust).mean()","[220, 220, 220, 220, 220, 220, 220, 412, 5673, 24, 796, 4808, 9521, 13, 413, 76, 7, 12626, 28, 41007, 11, 8856, 62, 2616, 28, 25101, 11, 4532, 28, 23032, 737, 32604, 3419]"
üß† ML Signal: Usage of financial indicators like EMA can be a signal for financial data analysis models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 412, 5673, 460, 307, 257, 6737, 329, 3176, 1366, 3781, 4981, 13]",1.0,6247,ml_signal,1311,Usage of financial indicators like EMA can be a signal for financial data analysis models.,,6247,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 705, 1219, 44601, 6, 6060, 19778, 4909, 262, 2938, 15180, 284, 2948, 7383, 12331, 13]",0.5,6275,sast_risk,1312,Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError.,Low,6247,"        return pd.Series(mass.rolling(window=25).sum(), name=""Mass Index"")","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7, 22208, 13, 18886, 7, 17497, 28, 1495, 737, 16345, 22784, 1438, 2625, 20273, 12901, 4943]"
üß† ML Signal: Usage of financial indicators like EMA can be a signal for financial data analysis models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 588, 412, 5673, 460, 307, 257, 6737, 329, 3176, 1366, 3781, 4981, 13]",1.0,6294,ml_signal,1315,Usage of financial indicators like EMA can be a signal for financial data analysis models.,,6275,"    def BOP(cls, ohlc: DataFrame) -> Series:","[220, 220, 220, 825, 347, 3185, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 8, 4613, 7171, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 705, 1219, 44601, 6, 6060, 19778, 4909, 262, 2938, 15180, 284, 2948, 7383, 12331, 13]",0.5,6313,sast_risk,1315,Ensure that the 'ohlc' DataFrame contains the expected columns to prevent KeyError.,Low,6294,"    def BOP(cls, ohlc: DataFrame) -> Series:","[220, 220, 220, 825, 347, 3185, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Using pd.concat is a good practice for combining Series into a DataFrame.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 318, 257, 922, 3357, 329, 19771, 7171, 656, 257, 6060, 19778, 13]",0.5,6326,best_practice,1316,Using pd.concat is a good practice for combining Series into a DataFrame.,,6313,"        """"""Balance Of Power indicator""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 45866, 3226, 4333, 16916, 37811]"
"‚úÖ Best Practice: Decorators like @inputvalidator can help enforce input validation, improving code robustness.","[26486, 227, 6705, 19939, 25, 4280, 273, 2024, 588, 2488, 15414, 12102, 1352, 460, 1037, 4605, 5128, 21201, 11, 10068, 2438, 12373, 1108, 13]",1.0,6334,best_practice,1320,"Decorators like @inputvalidator can help enforce input validation, improving code robustness.",,6326,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of class method decorator for a method that operates on class-level data,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 11705, 1352, 329, 257, 2446, 326, 14051, 319, 1398, 12, 5715, 1366]",1.0,6353,best_practice,1315,Use of class method decorator for a method that operates on class-level data,,6334,"    def BOP(cls, ohlc: DataFrame) -> Series:","[220, 220, 220, 825, 347, 3185, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Use of pandas Series for vectorized operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 7171, 329, 15879, 1143, 4560]",0.5,6361,best_practice,1320,Use of pandas Series for vectorized operations,,6353,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of pandas Series for vectorized operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 7171, 329, 15879, 1143, 4560]",0.5,6386,best_practice,1327,Use of pandas Series for vectorized operations,,6361,         The distance from the current high to the prior low designates positive trend movement while the,"[220, 220, 220, 220, 220, 220, 220, 220, 383, 5253, 422, 262, 1459, 1029, 284, 262, 3161, 1877, 1486, 689, 3967, 5182, 3356, 981, 262]"
‚úÖ Best Practice: Use of pandas Series for vectorized operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 7171, 329, 15879, 1143, 4560]",0.5,6409,best_practice,1328,Use of pandas Series for vectorized operations,,6386,         distance between the current low and the prior high designates negative trend movement.,"[220, 220, 220, 220, 220, 220, 220, 220, 5253, 1022, 262, 1459, 1877, 290, 262, 3161, 1029, 1486, 689, 4633, 5182, 3356, 13]"
‚úÖ Best Practice: Use of rolling mean for time series data,"[26486, 227, 6705, 19939, 25, 5765, 286, 10708, 1612, 329, 640, 2168, 1366]",1.0,6441,best_practice,1332,Use of rolling mean for time series data,,6409,"        VMP = pd.Series((ohlc[""high""] - ohlc[""low""].shift()).abs())","[220, 220, 220, 220, 220, 220, 220, 569, 7378, 796, 279, 67, 13, 27996, 19510, 1219, 44601, 14692, 8929, 8973, 532, 11752, 44601, 14692, 9319, 1, 4083, 30846, 3419, 737, 8937, 28955]"
‚úÖ Best Practice: Use of class method decorator for a method that operates on class-level data,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 11705, 1352, 329, 257, 2446, 326, 14051, 319, 1398, 12, 5715, 1366]",1.0,6473,best_practice,1333,Use of class method decorator for a method that operates on class-level data,,6441,"        VMM = pd.Series((ohlc[""low""] - ohlc[""high""].shift()).abs())","[220, 220, 220, 220, 220, 220, 220, 569, 12038, 796, 279, 67, 13, 27996, 19510, 1219, 44601, 14692, 9319, 8973, 532, 11752, 44601, 14692, 8929, 1, 4083, 30846, 3419, 737, 8937, 28955]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,6505,best_practice,1332,Use of type hints for function parameters and return type improves code readability and maintainability.,,6473,"        VMP = pd.Series((ohlc[""high""] - ohlc[""low""].shift()).abs())","[220, 220, 220, 220, 220, 220, 220, 569, 7378, 796, 279, 67, 13, 27996, 19510, 1219, 44601, 14692, 8929, 8973, 532, 11752, 44601, 14692, 9319, 1, 4083, 30846, 3419, 737, 8937, 28955]"
üß† ML Signal: Docstring provides detailed information about the function's purpose and usage.,"[8582, 100, 254, 10373, 26484, 25, 14432, 8841, 3769, 6496, 1321, 546, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,6537,ml_signal,1333,Docstring provides detailed information about the function's purpose and usage.,,6505,"        VMM = pd.Series((ohlc[""low""] - ohlc[""high""].shift()).abs())","[220, 220, 220, 220, 220, 220, 220, 569, 12038, 796, 279, 67, 13, 27996, 19510, 1219, 44601, 14692, 9319, 8973, 532, 11752, 44601, 14692, 8929, 1, 4083, 30846, 3419, 737, 8937, 28955]"
‚úÖ Best Practice: Using descriptive variable names like 'tp' for typical price improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 705, 34788, 6, 329, 7226, 2756, 19575, 2438, 1100, 1799, 13]",1.0,6580,best_practice,1346,Using descriptive variable names like 'tp' for typical price improves code readability.,,6537,"        cls, ohlc: DataFrame, r1: int = 10, r2: int = 15, r3: int = 20, r4: int = 30","[220, 220, 220, 220, 220, 220, 220, 537, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 374, 16, 25, 493, 796, 838, 11, 374, 17, 25, 493, 796, 1315, 11, 374, 18, 25, 493, 796, 1160, 11, 374, 19, 25, 493, 796, 1542]"
‚úÖ Best Practice: Using rolling window functions for time series data is efficient and clear.,"[26486, 227, 6705, 19939, 25, 8554, 10708, 4324, 5499, 329, 640, 2168, 1366, 318, 6942, 290, 1598, 13]",1.0,6588,best_practice,1347,Using rolling window functions for time series data is efficient and clear.,,6580,    ) -> DataFrame:,"[220, 220, 220, 1267, 4613, 6060, 19778, 25]"
‚ö†Ô∏è SAST Risk (Low): Using 'apply' with 'lambda' can be less efficient; consider using built-in functions if possible.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 705, 39014, 6, 351, 705, 50033, 6, 460, 307, 1342, 6942, 26, 2074, 1262, 3170, 12, 259, 5499, 611, 1744, 13]",0.5,6625,sast_risk,1350,Using 'apply' with 'lambda' can be less efficient; consider using built-in functions if possible.,Low,6588,"        Chartists can look for divergences, overbought/oversold readings, signal line crossovers and centerline crossovers.""""""","[220, 220, 220, 220, 220, 220, 220, 22086, 1023, 460, 804, 329, 12312, 70, 3007, 11, 625, 65, 2917, 14, 2502, 24120, 24654, 11, 6737, 1627, 269, 21074, 690, 290, 3641, 1370, 269, 21074, 690, 526, 15931]"
‚úÖ Best Practice: Returning a named Series improves the clarity of the output.,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 19575, 262, 16287, 286, 262, 5072, 13]",1.0,6655,best_practice,1352,Returning a named Series improves the clarity of the output.,,6625,"        r1 = cls.ROC(ohlc, r1).rolling(window=10).mean()","[220, 220, 220, 220, 220, 220, 220, 374, 16, 796, 537, 82, 13, 49, 4503, 7, 1219, 44601, 11, 374, 16, 737, 18886, 7, 17497, 28, 940, 737, 32604, 3419]"
"‚úÖ Best Practice: Use of @classmethod decorator indicates that this method is intended to be called on the class itself, not instances.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 326, 428, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346, 11, 407, 10245, 13]",1.0,6655,best_practice,1356,"Use of @classmethod decorator indicates that this method is intended to be called on the class itself, not instances.",,6655,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",0.5,6685,best_practice,1353,Docstring provides a clear explanation of the function's purpose.,,6655,"        r2 = cls.ROC(ohlc, r2).rolling(window=10).mean()","[220, 220, 220, 220, 220, 220, 220, 374, 17, 796, 537, 82, 13, 49, 4503, 7, 1219, 44601, 11, 374, 17, 737, 18886, 7, 17497, 28, 940, 737, 32604, 3419]"
üß† ML Signal: Usage of a specific period (14) for ROC calculation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2278, 357, 1415, 8, 329, 371, 4503, 17952, 13]",0.5,6715,ml_signal,1355,Usage of a specific period (14) for ROC calculation.,,6685,"        r4 = cls.ROC(ohlc, r4).rolling(window=15).mean()","[220, 220, 220, 220, 220, 220, 220, 374, 19, 796, 537, 82, 13, 49, 4503, 7, 1219, 44601, 11, 374, 19, 737, 18886, 7, 17497, 28, 1314, 737, 32604, 3419]"
üß† ML Signal: Usage of a specific period (11) for ROC calculation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2278, 357, 1157, 8, 329, 371, 4503, 17952, 13]",0.5,6715,ml_signal,1356,Usage of a specific period (11) for ROC calculation.,,6715,,[]
"üß† ML Signal: Usage of specific parameters for EWM (span=10, min_periods=9).","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 10007, 329, 412, 22117, 357, 12626, 28, 940, 11, 949, 62, 41007, 82, 28, 24, 737]",0.5,6715,ml_signal,1361,"Usage of specific parameters for EWM (span=10, min_periods=9).",,6715,,[]
‚úÖ Best Practice: Naming the Series for clarity and easier identification.,"[26486, 227, 6705, 19939, 25, 399, 3723, 262, 7171, 329, 16287, 290, 4577, 11795, 13]",0.5,6721,best_practice,1362,Naming the Series for clarity and easier identification.,,6715,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on class-level data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 12, 5715, 1366, 13]",1.0,6734,best_practice,1365,Use of @classmethod decorator for methods that operate on class-level data.,,6721,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 13]",0.5,6740,best_practice,1362,Docstring provides a clear explanation of the function's purpose.,,6734,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
"üß† ML Signal: Creation of new features (nbp, nsp, nv) from existing data.","[8582, 100, 254, 10373, 26484, 25, 21582, 286, 649, 3033, 357, 77, 46583, 11, 299, 2777, 11, 299, 85, 8, 422, 4683, 1366, 13]",0.5,6771,ml_signal,1372,"Creation of new features (nbp, nsp, nv) from existing data.",,6740,"        """"""True Strength Index (TSI) is a momentum oscillator based on a double smoothing of price changes.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 17821, 14646, 12901, 357, 4694, 40, 8, 318, 257, 12858, 24969, 1352, 1912, 319, 257, 4274, 32746, 722, 286, 2756, 2458, 526, 15931]"
üß† ML Signal: Returning a DataFrame with calculated indicators.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 351, 10488, 21337, 13]",0.5,6797,ml_signal,1375,Returning a DataFrame with calculated indicators.,,6771,        momentum = pd.Series(ohlc[column].diff())  ## 1 period momentum,"[220, 220, 220, 220, 220, 220, 220, 12858, 796, 279, 67, 13, 27996, 7, 1219, 44601, 58, 28665, 4083, 26069, 28955, 220, 22492, 352, 2278, 12858]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770, 13]",0.5,6813,best_practice,1376,Use of @classmethod decorator for class method definition.,,6797,        _EMA25 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 4808, 27630, 1495, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Docstring provides a brief description of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2163, 338, 4007, 13]",1.0,6829,best_practice,1376,Docstring provides a brief description of the function's purpose.,,6813,        _EMA25 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 4808, 27630, 1495, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 357, 413, 76, 8, 329, 32746, 722, 1366, 13]",1.0,6852,ml_signal,1382,Usage of exponential weighted moving average (ewm) for smoothing data.,,6829,"            name=""_price change double smoothed DEMA13"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 62, 20888, 1487, 4274, 32746, 704, 360, 27630, 1485, 1600]"
üß† ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 357, 413, 76, 8, 329, 32746, 722, 1366, 13]",1.0,6852,ml_signal,1384,Usage of exponential weighted moving average (ewm) for smoothing data.,,6852,,[]
üß† ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 357, 413, 76, 8, 329, 32746, 722, 1366, 13]",1.0,6890,ml_signal,1388,Usage of exponential weighted moving average (ewm) for smoothing data.,,6852,"            absmomentum.ewm(span=long, min_periods=long - 1, adjust=adjust).mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2352, 32542, 298, 388, 13, 413, 76, 7, 12626, 28, 6511, 11, 949, 62, 41007, 82, 28, 6511, 532, 352, 11, 4532, 28, 23032, 737, 32604, 22784]"
üß† ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 357, 413, 76, 8, 329, 32746, 722, 1366, 13]",1.0,6908,ml_signal,1391,Usage of exponential weighted moving average (ewm) for smoothing data.,,6890,        _aDEMA13 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 4808, 64, 35, 27630, 1485, 796, 279, 67, 13, 27996, 7]"
üß† ML Signal: Usage of exponential weighted moving average (ewm) for smoothing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39682, 26356, 3867, 2811, 357, 413, 76, 8, 329, 32746, 722, 1366, 13]",1.0,6926,ml_signal,1391,Usage of exponential weighted moving average (ewm) for smoothing data.,,6908,        _aDEMA13 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 4808, 64, 35, 27630, 1485, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Using pd.concat to combine series into a DataFrame.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 12082, 2168, 656, 257, 6060, 19778, 13]",1.0,6944,best_practice,1391,Using pd.concat to combine series into a DataFrame.,,6926,        _aDEMA13 = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 4808, 64, 35, 27630, 1485, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Use of @classmethod decorator to indicate method operates on the class.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 7603, 2446, 14051, 319, 262, 1398, 13]",1.0,6960,best_practice,1399,Use of @classmethod decorator to indicate method operates on the class.,,6944,"            name=""signal"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 12683, 282, 1600]"
"üß† ML Signal: Use of default parameters for period, factor, column, and adjust","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 329, 2278, 11, 5766, 11, 5721, 11, 290, 4532]",0.5,6976,ml_signal,1399,"Use of default parameters for period, factor, column, and adjust",,6960,"            name=""signal"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 12683, 282, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if the specified column does not exist in the DataFrame,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 262, 7368, 5721, 857, 407, 2152, 287, 262, 6060, 19778]",0.5,6976,sast_risk,1407,Potential KeyError if the specified column does not exist in the DataFrame,Low,6976,,[]
"‚úÖ Best Practice: Use of descriptive variable names (_gain, _loss) for readability","[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 44104, 48544, 11, 4808, 22462, 8, 329, 1100, 1799]",0.5,7010,best_practice,1413,"Use of descriptive variable names (_gain, _loss) for readability",,6976,"        """"""The accumulation/distribution line was created by Marc Chaikin to determine the flow of money into or out of a security.","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 24106, 14, 17080, 3890, 1627, 373, 2727, 416, 13067, 20703, 1134, 259, 284, 5004, 262, 5202, 286, 1637, 656, 393, 503, 286, 257, 2324, 13]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if _gain + _loss results in zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 4808, 48544, 1343, 4808, 22462, 2482, 287, 6632]",1.0,7044,sast_risk,1413,Division by zero risk if _gain + _loss results in zero,Low,7010,"        """"""The accumulation/distribution line was created by Marc Chaikin to determine the flow of money into or out of a security.","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 24106, 14, 17080, 3890, 1627, 373, 2727, 416, 13067, 20703, 1134, 259, 284, 5004, 262, 5202, 286, 1637, 656, 393, 503, 286, 257, 2324, 13]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770]",0.5,7044,best_practice,1417,Use of @classmethod decorator for class method definition,,7044,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,7085,best_practice,1420,Docstring provides a clear explanation of the function's purpose and usage.,,7044,"            - (ohlcv[""high""] - ohlcv[""close""])) / (ohlcv[""high""] - ohlcv[""low""]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 357, 48988, 33967, 14692, 8929, 8973, 532, 11752, 75, 33967, 14692, 19836, 8973, 4008, 1220, 357, 48988, 33967, 14692, 8929, 8973, 532, 11752, 75, 33967, 14692, 9319, 8973, 828]"
üß† ML Signal: Usage of rolling window operations on financial data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 4560, 319, 3176, 1366, 13]",1.0,7085,ml_signal,1425,Usage of rolling window operations on financial data.,,7085,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if 'high' column is missing in the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 705, 8929, 6, 5721, 318, 4814, 287, 262, 6060, 19778, 13]",0.5,7085,sast_risk,1425,Potential for KeyError if 'high' column is missing in the DataFrame.,Low,7085,,[]
üß† ML Signal: Usage of custom ATR function on financial data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 5161, 49, 2163, 319, 3176, 1366, 13]",1.0,7128,ml_signal,1429,Usage of custom ATR function on financial data.,,7085,"        """"""Chaikin Oscillator, named after its creator, Marc Chaikin, the Chaikin oscillator is an oscillator that measures the accumulation/distribution","[220, 220, 220, 220, 220, 220, 220, 37227, 1925, 64, 1134, 259, 440, 22360, 1352, 11, 3706, 706, 663, 13172, 11, 13067, 20703, 1134, 259, 11, 262, 20703, 1134, 259, 24969, 1352, 318, 281, 24969, 1352, 326, 5260, 262, 24106, 14, 17080, 3890]"
üß† ML Signal: Usage of rolling window operations on financial data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 4560, 319, 3176, 1366, 13]",1.0,7128,ml_signal,1433,Usage of rolling window operations on financial data.,,7128,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if 'low' column is missing in the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 705, 9319, 6, 5721, 318, 4814, 287, 262, 6060, 19778, 13]",0.5,7128,sast_risk,1433,Potential for KeyError if 'low' column is missing in the DataFrame.,Low,7128,,[]
üß† ML Signal: Usage of custom ATR function on financial data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 5161, 49, 2163, 319, 3176, 1366, 13]",1.0,7169,ml_signal,1436,Usage of custom ATR function on financial data.,,7128,"            - cls.ADL(ohlcv).ewm(span=10, min_periods=9, adjust=adjust).mean()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 537, 82, 13, 2885, 43, 7, 48988, 33967, 737, 413, 76, 7, 12626, 28, 940, 11, 949, 62, 41007, 82, 28, 24, 11, 4532, 28, 23032, 737, 32604, 3419]"
‚úÖ Best Practice: Using pd.concat to combine Series into a DataFrame.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 12082, 7171, 656, 257, 6060, 19778, 13]",0.5,7183,best_practice,1440,Using pd.concat to combine Series into a DataFrame.,,7169,"    @inputvalidator(input_=""ohlcv"")","[220, 220, 220, 2488, 15414, 12102, 1352, 7, 15414, 62, 2625, 48988, 33967, 4943]"
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on class-level data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 12, 5715, 1366, 13]",1.0,7208,best_practice,1441,Use of @classmethod decorator for methods that operate on class-level data.,,7183,"    def MFI(cls, ohlc: DataFrame, period: int = 14) -> Series:","[220, 220, 220, 825, 337, 11674, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1478, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,7248,best_practice,1435,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,7208,"            cls.ADL(ohlcv).ewm(span=3, min_periods=2, adjust=adjust).mean()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 537, 82, 13, 2885, 43, 7, 48988, 33967, 737, 413, 76, 7, 12626, 28, 18, 11, 949, 62, 41007, 82, 28, 17, 11, 4532, 28, 23032, 737, 32604, 3419]"
üß† ML Signal: Usage of DataFrame column access and tail method indicates a pattern for time series data processing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 5721, 1895, 290, 7894, 2446, 9217, 257, 3912, 329, 640, 2168, 1366, 7587, 13]",0.5,7262,ml_signal,1440,Usage of DataFrame column access and tail method indicates a pattern for time series data processing.,,7248,"    @inputvalidator(input_=""ohlcv"")","[220, 220, 220, 2488, 15414, 12102, 1352, 7, 15414, 62, 2625, 48988, 33967, 4943]"
üß† ML Signal: Usage of DataFrame column access and tail method indicates a pattern for time series data processing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 5721, 1895, 290, 7894, 2446, 9217, 257, 3912, 329, 640, 2168, 1366, 7587, 13]",0.5,7287,ml_signal,1441,Usage of DataFrame column access and tail method indicates a pattern for time series data processing.,,7262,"    def MFI(cls, ohlc: DataFrame, period: int = 14) -> Series:","[220, 220, 220, 825, 337, 11674, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1478, 8, 4613, 7171, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if period is set to 0.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2278, 318, 900, 284, 657, 13]",0.5,7317,sast_risk,1445,Potential division by zero if period is set to 0.,Low,7287,"        The money flow indicator is one of the more reliable indicators of overbought and oversold conditions, perhaps partly because","[220, 220, 220, 220, 220, 220, 220, 383, 1637, 5202, 16916, 318, 530, 286, 262, 517, 9314, 21337, 286, 625, 65, 2917, 290, 625, 24120, 3403, 11, 3737, 11476, 780]"
üß† ML Signal: Calculation of difference between two series and division by a constant is a common pattern in financial indicators.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3580, 1022, 734, 2168, 290, 7297, 416, 257, 6937, 318, 257, 2219, 3912, 287, 3176, 21337, 13]",0.5,7352,ml_signal,1446,Calculation of difference between two series and division by a constant is a common pattern in financial indicators.,,7317,"        it uses the higher readings of 80 and 20 as compared to the RSI's overbought/oversold readings of 70 and 30""""""","[220, 220, 220, 220, 220, 220, 220, 340, 3544, 262, 2440, 24654, 286, 4019, 290, 1160, 355, 3688, 284, 262, 371, 11584, 338, 625, 65, 2917, 14, 2502, 24120, 24654, 286, 4317, 290, 1542, 37811]"
‚úÖ Best Practice: The @classmethod decorator should be placed directly above the method definition for clarity.,"[26486, 227, 6705, 19939, 25, 383, 2488, 4871, 24396, 11705, 1352, 815, 307, 4624, 3264, 2029, 262, 2446, 6770, 329, 16287, 13]",0.5,7384,best_practice,1449,The @classmethod decorator should be placed directly above the method definition for clarity.,,7352,"        rmf = pd.Series(tp * ohlc[""volume""], name=""rmf"")  ## Real Money Flow","[220, 220, 220, 220, 220, 220, 220, 42721, 69, 796, 279, 67, 13, 27996, 7, 34788, 1635, 11752, 44601, 14692, 29048, 33116, 1438, 2625, 26224, 69, 4943, 220, 22492, 6416, 12911, 27782]"
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",0.5,7419,ml_signal,1446,Use of default parameter values,,7384,"        it uses the higher readings of 80 and 20 as compared to the RSI's overbought/oversold readings of 70 and 30""""""","[220, 220, 220, 220, 220, 220, 220, 340, 3544, 262, 2440, 24654, 286, 4019, 290, 1160, 355, 3688, 284, 262, 371, 11584, 338, 625, 65, 2917, 14, 2502, 24120, 24654, 286, 4317, 290, 1542, 37811]"
‚úÖ Best Practice: Use of list comprehension for concise and efficient iteration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 35327, 290, 6942, 24415]",1.0,7451,best_practice,1449,Use of list comprehension for concise and efficient iteration,,7419,"        rmf = pd.Series(tp * ohlc[""volume""], name=""rmf"")  ## Real Money Flow","[220, 220, 220, 220, 220, 220, 220, 42721, 69, 796, 279, 67, 13, 27996, 7, 34788, 1635, 11752, 44601, 14692, 29048, 33116, 1438, 2625, 26224, 69, 4943, 220, 22492, 6416, 12911, 27782]"
‚úÖ Best Practice: Use of list comprehension for concise and efficient iteration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 35327, 290, 6942, 24415]",1.0,7451,best_practice,1452,Use of list comprehension for concise and efficient iteration,,7451,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if ohlcv[""hh""] equals ohlcv[""ll""]","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 11752, 75, 33967, 14692, 12337, 8973, 21767, 11752, 75, 33967, 14692, 297, 8973]",0.5,7472,sast_risk,1455,"Potential division by zero if ohlcv[""hh""] equals ohlcv[""ll""]",Low,7451,"                return row[""rmf""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 5752, 14692, 26224, 69, 8973]"
‚úÖ Best Practice: Initialize new DataFrame columns before use,"[26486, 227, 6705, 19939, 25, 20768, 1096, 649, 6060, 19778, 15180, 878, 779]",0.5,7472,best_practice,1458,Initialize new DataFrame columns before use,,7472,,[]
‚ö†Ô∏è SAST Risk (Low): Function is incomplete and raises NotImplementedError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 318, 17503, 290, 12073, 1892, 3546, 1154, 12061, 12331]",1.0,7472,sast_risk,1458,Function is incomplete and raises NotImplementedError,Low,7472,,[]
‚úÖ Best Practice: Use of classmethod decorator for methods that operate on the class,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 262, 1398]",0.5,7489,best_practice,1463,Use of classmethod decorator for methods that operate on the class,,7472,                return 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 657]"
üß† ML Signal: Usage of a class method to perform financial calculations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1398, 2446, 284, 1620, 3176, 16765]",1.0,7515,ml_signal,1469,Usage of a class method to perform financial calculations,,7489,"            _mf[""pos""].rolling(window=period).sum()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 76, 69, 14692, 1930, 1, 4083, 18886, 7, 17497, 28, 41007, 737, 16345, 3419]"
üß† ML Signal: Use of exponential weighted moving average,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 3867, 2811]",1.0,7523,ml_signal,1471,Use of exponential weighted moving average,,7515,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 1100, 1799]",1.0,7559,best_practice,1474,Use of descriptive variable names for readability,,7523,"            100 - (100 / (1 + mfratio)), name=""{0} period MFI"".format(period)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1802, 532, 357, 3064, 1220, 357, 16, 1343, 285, 8310, 39485, 36911, 1438, 2625, 90, 15, 92, 2278, 337, 11674, 1911, 18982, 7, 41007, 8]"
üß† ML Signal: Calculation of a custom indicator using financial data,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 2183, 16916, 1262, 3176, 1366]",1.0,7565,ml_signal,1477,Calculation of a custom indicator using financial data,,7559,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of pandas Series for time series data,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 7171, 329, 640, 2168, 1366]",0.5,7592,best_practice,1479,Use of pandas Series for time series data,,7565,"    def OBV(cls, ohlcv: DataFrame, column: str = ""close"") -> Series:","[220, 220, 220, 825, 25334, 53, 7, 565, 82, 11, 11752, 75, 33967, 25, 6060, 19778, 11, 5721, 25, 965, 796, 366, 19836, 4943, 4613, 7171, 25]"
‚úÖ Best Practice: Use of rolling window for smoothing data,"[26486, 227, 6705, 19939, 25, 5765, 286, 10708, 4324, 329, 32746, 722, 1366]",0.5,7600,best_practice,1480,Use of rolling window for smoothing data,,7592,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Concatenating results for a combined DataFrame output,"[26486, 227, 6705, 19939, 25, 1482, 9246, 268, 803, 2482, 329, 257, 5929, 6060, 19778, 5072]",1.0,7622,best_practice,1483,Concatenating results for a combined DataFrame output,,7600,        It was one of the first indicators to measure positive and negative volume flow.,"[220, 220, 220, 220, 220, 220, 220, 632, 373, 530, 286, 262, 717, 21337, 284, 3953, 3967, 290, 4633, 6115, 5202, 13]"
üß† ML Signal: Function signature with default parameters and type hints,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007, 290, 2099, 20269]",1.0,7630,ml_signal,1480,Function signature with default parameters and type hints,,7622,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Handle floating point errors by setting numpy error handling,"[26486, 227, 6705, 19939, 25, 33141, 12462, 966, 8563, 416, 4634, 299, 32152, 4049, 9041]",0.5,7630,best_practice,1485,Handle floating point errors by setting numpy error handling,,7630,,[]
üß† ML Signal: Use of rolling window operations on DataFrame,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 4560, 319, 6060, 19778]",1.0,7660,ml_signal,1488,Use of rolling window operations on DataFrame,,7630,"        :param pd.DataFrame ohlc: 'open, high, low, close' pandas DataFrame","[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 279, 67, 13, 6601, 19778, 11752, 44601, 25, 705, 9654, 11, 1029, 11, 1877, 11, 1969, 6, 19798, 292, 6060, 19778]"
üß† ML Signal: Use of exponential weighted moving average,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 3867, 2811]",1.0,7660,ml_signal,1491,Use of exponential weighted moving average,,7660,,[]
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if _smooth is 1 or -1,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 4808, 5796, 5226, 318, 352, 393, 532, 16]",1.0,7688,sast_risk,1496,Potential division by zero if _smooth is 1 or -1,Low,7660,        no_change = ohlcv[column] == ohlcv[column].shift(1),"[220, 220, 220, 220, 220, 220, 220, 645, 62, 3803, 796, 11752, 75, 33967, 58, 28665, 60, 6624, 11752, 75, 33967, 58, 28665, 4083, 30846, 7, 16, 8]"
‚úÖ Best Practice: Use of @classmethod decorator for class method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446]",1.0,7720,best_practice,1501,Use of @classmethod decorator for class method,,7688,"            ohlcv.loc[neg_change, ""OBV""] = -ohlcv[""volume""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11752, 75, 33967, 13, 17946, 58, 12480, 62, 3803, 11, 366, 9864, 53, 8973, 796, 532, 48988, 33967, 14692, 29048, 8973]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,7720,best_practice,1504,Docstring provides a clear explanation of the function's purpose and usage.,,7720,,[]
üß† ML Signal: Usage of rolling window calculations on time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 16765, 319, 640, 2168, 1366, 13]",1.0,7748,ml_signal,1509,Usage of rolling window calculations on time series data.,,7720,"    def WOBV(cls, ohlcv: DataFrame, column: str = ""close"") -> Series:","[220, 220, 220, 825, 370, 9864, 53, 7, 565, 82, 11, 11752, 75, 33967, 25, 6060, 19778, 11, 5721, 25, 965, 796, 366, 19836, 4943, 4613, 7171, 25]"
üß† ML Signal: Usage of rolling window calculations on time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 16765, 319, 640, 2168, 1366, 13]",1.0,7756,ml_signal,1517,Usage of rolling window calculations on time series data.,,7748,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Calculation of moving averages and shifts for time series forecasting.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3867, 25694, 290, 15381, 329, 640, 2168, 41164, 13]",1.0,7770,ml_signal,1528,Calculation of moving averages and shifts for time series forecasting.,,7756,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
üß† ML Signal: Usage of rolling window calculations on time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 16765, 319, 640, 2168, 1366, 13]",1.0,7784,ml_signal,1528,Usage of rolling window calculations on time series data.,,7770,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
üß† ML Signal: Shifting time series data for lagging indicators.,"[8582, 100, 254, 10373, 26484, 25, 911, 13309, 640, 2168, 1366, 329, 300, 16406, 21337, 13]",0.5,7813,ml_signal,1542,Shifting time series data for lagging indicators.,,7784,"        return pd.Series(100 * (dvma / vma), name=""VZO"")","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7, 3064, 1635, 357, 67, 85, 2611, 1220, 410, 2611, 828, 1438, 2625, 53, 57, 46, 4943]"
‚úÖ Best Practice: Using pd.concat for combining multiple series into a DataFrame.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 19771, 3294, 2168, 656, 257, 6060, 19778, 13]",1.0,7823,best_practice,1546,Using pd.concat for combining multiple series into a DataFrame.,,7813,"        cls,","[220, 220, 220, 220, 220, 220, 220, 537, 82, 11]"
üß† ML Signal: Function signature with default parameters and type hints,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007, 290, 2099, 20269]",1.0,7854,ml_signal,1554,Function signature with default parameters and type hints,,7823,        then the closing price will have a positive value (bullish); otherwise it will have a negative value (bearish).,"[220, 220, 220, 220, 220, 220, 220, 788, 262, 9605, 2756, 481, 423, 257, 3967, 1988, 357, 16308, 680, 1776, 4306, 340, 481, 423, 257, 4633, 1988, 357, 33227, 680, 737]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if MA is not a pd.Series and cls.DEMA is not defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 8779, 318, 407, 257, 279, 67, 13, 27996, 290, 537, 82, 13, 35, 27630, 318, 407, 5447]",1.0,7883,sast_risk,1562,Potential issue if MA is not a pd.Series and cls.DEMA is not defined,Low,7854,"        cp = pd.Series(r.ewm(span=period, adjust=adjust).mean())","[220, 220, 220, 220, 220, 220, 220, 31396, 796, 279, 67, 13, 27996, 7, 81, 13, 413, 76, 7, 12626, 28, 41007, 11, 4532, 28, 23032, 737, 32604, 28955]"
‚úÖ Best Practice: Use of pd.Series to ensure consistent data structure,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 27996, 284, 4155, 6414, 1366, 4645]",1.0,7897,best_practice,1568,Use of pd.Series to ensure consistent data structure,,7883,"    @inputvalidator(input_=""ohlcv"")","[220, 220, 220, 2488, 15414, 12102, 1352, 7, 15414, 62, 2625, 48988, 33967, 4943]"
‚úÖ Best Practice: Use of pd.concat for combining Series into a DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 7171, 656, 257, 6060, 19778]",1.0,7911,best_practice,1573,Use of pd.concat for combining Series into a DataFrame,,7897,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
‚úÖ Best Practice: Use of @classmethod decorator for class method definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 1398, 2446, 6770]",1.0,7925,best_practice,1573,Use of @classmethod decorator for class method definition,,7911,"        column: str = ""close"",","[220, 220, 220, 220, 220, 220, 220, 5721, 25, 965, 796, 366, 19836, 1600]"
‚ö†Ô∏è SAST Risk (Low): Type check for MA could be bypassed if a subclass of Series is passed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5994, 2198, 329, 8779, 714, 307, 17286, 276, 611, 257, 47611, 286, 7171, 318, 3804]",1.0,7925,sast_risk,1585,Type check for MA could be bypassed if a subclass of Series is passed,Low,7925,,[]
‚úÖ Best Practice: Use of pd.Series to ensure consistent data structure,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 27996, 284, 4155, 6414, 1366, 4645]",0.5,7931,best_practice,1586,Use of pd.Series to ensure consistent data structure,,7925,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Use of BBANDS function indicates a pattern for technical analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12597, 1565, 5258, 2163, 9217, 257, 3912, 329, 6276, 3781]",0.5,7939,ml_signal,1591,Use of BBANDS function indicates a pattern for technical analysis,,7931,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Use of KC function indicates a pattern for technical analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 25247, 2163, 9217, 257, 3912, 329, 6276, 3781]",0.5,7955,ml_signal,1593,Use of KC function indicates a pattern for technical analysis,,7939,        Adopted from  Elder's Force Index.,"[220, 220, 220, 220, 220, 220, 220, 1215, 45256, 422, 220, 15624, 338, 5221, 12901, 13]"
‚úÖ Best Practice: Use of pd.concat for combining DataFrames ensures scalability and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439, 19047, 16578, 1799, 290, 1100, 1799]",0.5,7963,best_practice,1594,Use of pd.concat for combining DataFrames ensures scalability and readability,,7955,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Function checks conditions on row data, useful for feature extraction","[8582, 100, 254, 10373, 26484, 25, 15553, 8794, 3403, 319, 5752, 1366, 11, 4465, 329, 3895, 22236]",1.0,7979,ml_signal,1593,"Function checks conditions on row data, useful for feature extraction",,7963,        Adopted from  Elder's Force Index.,"[220, 220, 220, 220, 220, 220, 220, 1215, 45256, 422, 220, 15624, 338, 5221, 12901, 13]"
"üß† ML Signal: Applying a function across DataFrame rows, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 1973, 6060, 19778, 15274, 11, 2219, 3912, 287, 1366, 7587]",1.0,8019,ml_signal,1598,"Applying a function across DataFrame rows, common pattern in data processing",,7979,"            fi1.ewm(ignore_na=False, min_periods=9, span=10, adjust=adjust).mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25912, 16, 13, 413, 76, 7, 46430, 62, 2616, 28, 25101, 11, 949, 62, 41007, 82, 28, 24, 11, 11506, 28, 940, 11, 4532, 28, 23032, 737, 32604, 22784]"
‚úÖ Best Practice: Using pd.Series to ensure consistent return type,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 27996, 284, 4155, 6414, 1441, 2099]",0.5,8019,best_practice,1601,Using pd.Series to ensure consistent return type,,8019,,[]
‚úÖ Best Practice: Using decorators to enforce input validation,"[26486, 227, 6705, 19939, 25, 8554, 11705, 2024, 284, 4605, 5128, 21201]",0.5,8034,best_practice,1602,Using decorators to enforce input validation,,8019,        return cfi.cumsum(),"[220, 220, 220, 220, 220, 220, 220, 1441, 269, 12463, 13, 66, 5700, 388, 3419]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,8049,best_practice,1602,Docstring provides a clear explanation of the function's purpose and usage.,,8034,        return cfi.cumsum(),"[220, 220, 220, 220, 220, 220, 220, 1441, 269, 12463, 13, 66, 5700, 388, 3419]"
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if ""high"" equals ""low"".","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 366, 8929, 1, 21767, 366, 9319, 1911]",1.0,8049,sast_risk,1612,"Potential division by zero if ""high"" equals ""low"".",Low,8049,,[]
‚úÖ Best Practice: Returning a named Series improves readability and usability.,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 19575, 1100, 1799, 290, 42863, 13]",1.0,8082,best_practice,1616,Returning a named Series improves readability and usability.,,8049,"        """"""Ease of Movement (EMV) is a volume-based oscillator that fluctuates above and below the zero line.","[220, 220, 220, 220, 220, 220, 220, 37227, 36, 589, 286, 15477, 357, 3620, 53, 8, 318, 257, 6115, 12, 3106, 24969, 1352, 326, 19180, 12632, 2029, 290, 2174, 262, 6632, 1627, 13]"
üß† ML Signal: Use of decorators indicates a pattern for class method definition.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 9217, 257, 3912, 329, 1398, 2446, 6770, 13]",1.0,8108,ml_signal,1617,Use of decorators indicates a pattern for class method definition.,,8082,"        As its name implies, it is designed to measure the 'ease' of price movement.","[220, 220, 220, 220, 220, 220, 220, 1081, 663, 1438, 15565, 11, 340, 318, 3562, 284, 3953, 262, 705, 68, 589, 6, 286, 2756, 3356, 13]"
üß† ML Signal: Method signature with default parameters and type hints,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 4277, 10007, 290, 2099, 20269]",0.5,8134,ml_signal,1617,Method signature with default parameters and type hints,,8108,"        As its name implies, it is designed to measure the 'ease' of price movement.","[220, 220, 220, 220, 220, 220, 220, 1081, 663, 1438, 15565, 11, 340, 318, 3562, 284, 3953, 262, 705, 68, 589, 6, 286, 2756, 3356, 13]"
‚úÖ Best Practice: Use of descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 1100, 1799]",1.0,8167,best_practice,1623,Use of descriptive variable names for readability,,8134,"            - (ohlcv[""high""].shift() + ohlcv[""low""].shift()) / 2","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 357, 48988, 33967, 14692, 8929, 1, 4083, 30846, 3419, 1343, 11752, 75, 33967, 14692, 9319, 1, 4083, 30846, 28955, 1220, 362]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if TA.TP is not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 21664, 13, 7250, 318, 407, 31031, 393, 5336, 36951]",1.0,8184,sast_risk,1625,Potential risk if TA.TP is not validated or sanitized,Low,8167,        box_ratio = pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 3091, 62, 10366, 952, 796, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Use of rolling mean for time series data,"[26486, 227, 6705, 19939, 25, 5765, 286, 10708, 1612, 329, 640, 2168, 1366]",0.5,8192,best_practice,1627,Use of rolling mean for time series data,,8184,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of pd.Series with a name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 27996, 351, 257, 1438, 329, 16287]",0.5,8215,best_practice,1629,Use of pd.Series with a name for clarity,,8192,        _emv = pd.Series(distance / box_ratio),"[220, 220, 220, 220, 220, 220, 220, 4808, 368, 85, 796, 279, 67, 13, 27996, 7, 30246, 1220, 3091, 62, 10366, 952, 8]"
‚úÖ Best Practice: Use of pd.concat for combining DataFrame columns,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 19778, 15180]",0.5,8215,best_practice,1630,Use of pd.concat for combining DataFrame columns,,8215,,[]
üß† ML Signal: Conditional logic based on data values,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1366, 3815]",0.5,8223,ml_signal,1627,Conditional logic based on data values,,8215,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Conditional logic based on data values,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1366, 3815]",0.5,8223,ml_signal,1630,Conditional logic based on data values,,8223,,[]
üß† ML Signal: Use of DataFrame apply method,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 4174, 2446]",0.5,8229,ml_signal,1635,Use of DataFrame apply method,,8223,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Use of rolling window operation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 4905]",0.5,8265,ml_signal,1637,Use of rolling window operation,,8229,"        """"""Commodity Channel Index (CCI) is a versatile indicator that can be used to identify a new trend or warn of extreme conditions.","[220, 220, 220, 220, 220, 220, 220, 37227, 6935, 375, 414, 11102, 12901, 357, 4093, 40, 8, 318, 257, 21362, 16916, 326, 460, 307, 973, 284, 5911, 257, 649, 5182, 393, 9828, 286, 3257, 3403, 13]"
üß† ML Signal: Use of pandas Series for return value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 7171, 329, 1441, 1988]",0.5,8301,ml_signal,1637,Use of pandas Series for return value,,8265,"        """"""Commodity Channel Index (CCI) is a versatile indicator that can be used to identify a new trend or warn of extreme conditions.","[220, 220, 220, 220, 220, 220, 220, 37227, 6935, 375, 414, 11102, 12901, 357, 4093, 40, 8, 318, 257, 21362, 16916, 326, 460, 307, 973, 284, 5911, 257, 649, 5182, 393, 9828, 286, 3257, 3403, 13]"
üß† ML Signal: Usage of a technical indicator function for financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6276, 16916, 2163, 329, 3176, 1366, 3781]",1.0,8329,ml_signal,1657,Usage of a technical indicator function for financial data analysis,,8301,"            (tp - tp_rolling.mean()) / (constant * mad),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 34788, 532, 256, 79, 62, 18886, 13, 32604, 28955, 1220, 357, 9979, 415, 1635, 8805, 828]"
üß† ML Signal: Use of logarithmic transformation and differencing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2604, 283, 342, 9383, 13389, 290, 980, 77, 2259]",1.0,8337,ml_signal,1659,Use of logarithmic transformation and differencing,,8329,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Rolling standard deviation calculation,"[8582, 100, 254, 10373, 26484, 25, 21567, 3210, 28833, 17952]",1.0,8343,ml_signal,1661,Rolling standard deviation calculation,,8337,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Use of a scaling factor in financial calculations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 20796, 5766, 287, 3176, 16765]",0.5,8368,ml_signal,1662,Use of a scaling factor in financial calculations,,8343,"    def COPP(cls, ohlc: DataFrame, adjust: bool = True) -> Series:","[220, 220, 220, 825, 27975, 47, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 4532, 25, 20512, 796, 6407, 8, 4613, 7171, 25]"
üß† ML Signal: Calculation of price change,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2756, 1487]",0.5,8390,ml_signal,1665,Calculation of price change,,8368,"        roc1 = cls.ROC(ohlc, 14)","[220, 220, 220, 220, 220, 220, 220, 686, 66, 16, 796, 537, 82, 13, 49, 4503, 7, 1219, 44601, 11, 1478, 8]"
üß† ML Signal: Rolling mean calculation for volume,"[8582, 100, 254, 10373, 26484, 25, 21567, 1612, 17952, 329, 6115]",1.0,8390,ml_signal,1667,Rolling mean calculation for volume,,8390,,[]
‚úÖ Best Practice: Use of pd.concat for combining DataFrames,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439]",1.0,8398,best_practice,1671,Use of pd.concat for combining DataFrames,,8390,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of pd.concat for combining DataFrames,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439]",1.0,8404,best_practice,1673,Use of pd.concat for combining DataFrames,,8398,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of fillna to handle missing data,"[26486, 227, 6705, 19939, 25, 5765, 286, 6070, 2616, 284, 5412, 4814, 1366]",1.0,8425,best_practice,1675,Use of fillna to handle missing data,,8404,"        """"""BASP indicator serves to identify buying and selling pressure.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 33, 1921, 47, 16916, 9179, 284, 5911, 7067, 290, 6301, 3833, 526, 15931]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",1.0,8464,best_practice,1669,Add a docstring to describe the function's purpose,,8425,"            (roc1 + roc2).ewm(span=10, min_periods=9, adjust=adjust).mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 12204, 16, 1343, 686, 66, 17, 737, 413, 76, 7, 12626, 28, 940, 11, 949, 62, 41007, 82, 28, 24, 11, 4532, 28, 23032, 737, 32604, 22784]"
üß† ML Signal: Conditional logic based on data values,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1366, 3815]",0.5,8472,ml_signal,1671,Conditional logic based on data values,,8464,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of DataFrame apply method with custom function,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 4174, 2446, 351, 2183, 2163]",0.5,8472,ml_signal,1676,Use of DataFrame apply method with custom function,,8472,,[]
‚úÖ Best Practice: Use of clear and descriptive variable names,"[26486, 227, 6705, 19939, 25, 5765, 286, 1598, 290, 35644, 7885, 3891]",0.5,8472,best_practice,1681,Use of clear and descriptive variable names,,8472,,[]
üß† ML Signal: Use of apply function on DataFrame,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4174, 2163, 319, 6060, 19778]",1.0,8498,ml_signal,1688,Use of apply function on DataFrame,,8472,"        nbfraw = pd.Series(nbp * nv, name=""Buy."")","[220, 220, 220, 220, 220, 220, 220, 299, 19881, 1831, 796, 279, 67, 13, 27996, 7, 77, 46583, 1635, 299, 85, 11, 1438, 2625, 14518, 19570]"
üß† ML Signal: Use of rolling window function,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 2163]",1.0,8498,ml_signal,1690,Use of rolling window function,,8498,,[]
üß† ML Signal: Use of shift function,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6482, 2163]",1.0,8498,ml_signal,1690,Use of shift function,,8498,,[]
üß† ML Signal: Use of exponential weighted mean,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39682, 26356, 1612]",1.0,8498,ml_signal,1690,Use of exponential weighted mean,,8498,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007]",1.0,8515,best_practice,1704,Docstring provides a clear explanation of the function's purpose and parameters,,8498,        nbp = bp / bpavg,"[220, 220, 220, 220, 220, 220, 220, 299, 46583, 796, 275, 79, 1220, 275, 79, 615, 70]"
üß† ML Signal: Usage of rolling window and standard deviation calculation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 4324, 290, 3210, 28833, 17952]",1.0,8515,ml_signal,1714,Usage of rolling window and standard deviation calculation,,8515,,[]
‚úÖ Best Practice: Docstring provides a detailed explanation of the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 6496, 7468, 286, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,8545,best_practice,1726,Docstring provides a detailed explanation of the function's purpose and usage.,,8515,        It is created by calculating the difference between the sum of all recent gains and the sum of all recent losses and then,"[220, 220, 220, 220, 220, 220, 220, 632, 318, 2727, 416, 26019, 262, 3580, 1022, 262, 2160, 286, 477, 2274, 8810, 290, 262, 2160, 286, 477, 2274, 9089, 290, 788]"
üß† ML Signal: Usage of Exponential Moving Average (EMA) for financial data analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5518, 35470, 26768, 13475, 357, 27630, 8, 329, 3176, 1366, 3781, 13]",1.0,8554,ml_signal,1746,Usage of Exponential Moving Average (EMA) for financial data analysis.,,8545,    def CHANDELIER(,"[220, 220, 220, 825, 5870, 6981, 3698, 38311, 7]"
üß† ML Signal: Usage of Exponential Moving Average (EMA) for financial data analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5518, 35470, 26768, 13475, 357, 27630, 8, 329, 3176, 1366, 3781, 13]",1.0,8569,ml_signal,1750,Usage of Exponential Moving Average (EMA) for financial data analysis.,,8554,"        long_period: int = 22,","[220, 220, 220, 220, 220, 220, 220, 890, 62, 41007, 25, 493, 796, 2534, 11]"
"üß† ML Signal: Calculation of MACD, a common financial indicator.","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 11, 257, 2219, 3176, 16916, 13]",1.0,8569,ml_signal,1755,"Calculation of MACD, a common financial indicator.",,8569,,[]
"üß† ML Signal: Calculation of Stochastic Oscillator, a common financial indicator.","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 520, 5374, 3477, 440, 22360, 1352, 11, 257, 2219, 3176, 16916, 13]",1.0,8577,ml_signal,1759,"Calculation of Stochastic Oscillator, a common financial indicator.",,8569,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Smoothing of Stochastic Oscillator values.,"[8582, 100, 254, 10373, 26484, 25, 2439, 1025, 722, 286, 520, 5374, 3477, 440, 22360, 1352, 3815, 13]",0.5,8585,ml_signal,1764,Smoothing of Stochastic Oscillator values.,,8577,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Double smoothing of Stochastic Oscillator values.,"[8582, 100, 254, 10373, 26484, 25, 11198, 32746, 722, 286, 520, 5374, 3477, 440, 22360, 1352, 3815, 13]",0.5,8593,ml_signal,1764,Double smoothing of Stochastic Oscillator values.,,8585,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Returning a named Series for clarity.,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 329, 16287, 13]",1.0,8601,best_practice,1764,Returning a named Series for clarity.,,8593,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of classmethod decorator for class-level method.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 1398, 12, 5715, 2446, 13]",1.0,8623,best_practice,1770,Use of classmethod decorator for class-level method.,,8601,"        return pd.concat([s, l], axis=1)","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 1102, 9246, 26933, 82, 11, 300, 4357, 16488, 28, 16, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse if input validation is not properly implemented in inputvalidator.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 611, 5128, 21201, 318, 407, 6105, 9177, 287, 5128, 12102, 1352, 13]",0.5,8649,sast_risk,1773,Potential misuse if input validation is not properly implemented in inputvalidator.,Low,8623,"    def QSTICK(cls, ohlc: DataFrame, period: int = 14) -> Series:","[220, 220, 220, 825, 1195, 2257, 11860, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1478, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Docstring provides a brief description of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2163, 338, 4007, 13]",1.0,8675,best_practice,1773,Docstring provides a brief description of the function's purpose.,,8649,"    def QSTICK(cls, ohlc: DataFrame, period: int = 14) -> Series:","[220, 220, 220, 825, 1195, 2257, 11860, 7, 565, 82, 11, 11752, 44601, 25, 6060, 19778, 11, 2278, 25, 493, 796, 1478, 8, 4613, 7171, 25]"
üß† ML Signal: Usage of custom EVWMA method for financial calculations.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 8696, 54, 5673, 2446, 329, 3176, 16765, 13]",1.0,8711,ml_signal,1775,Usage of custom EVWMA method for financial calculations.,,8675,"        QStick indicator shows the dominance of black (down) or white (up) candlesticks, which are red and green in Chart,","[220, 220, 220, 220, 220, 220, 220, 1195, 1273, 624, 16916, 2523, 262, 18648, 286, 2042, 357, 2902, 8, 393, 2330, 357, 929, 8, 2658, 32712, 3378, 11, 543, 389, 2266, 290, 4077, 287, 22086, 11]"
üß† ML Signal: Usage of custom EVWMA method for financial calculations.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 8696, 54, 5673, 2446, 329, 3176, 16765, 13]",1.0,8711,ml_signal,1777,Usage of custom EVWMA method for financial calculations.,,8711,,[]
üß† ML Signal: Calculation of MACD using fast and slow EMA values.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20582, 35, 1262, 3049, 290, 3105, 412, 5673, 3815, 13]",0.5,8711,ml_signal,1777,Calculation of MACD using fast and slow EMA values.,,8711,,[]
üß† ML Signal: Calculation of stochastic oscillator values.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3995, 354, 3477, 24969, 1352, 3815, 13]",0.5,8724,ml_signal,1781,Calculation of stochastic oscillator values.,,8711,        return pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7]"
üß† ML Signal: Calculation of smoothed stochastic oscillator values.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 32746, 704, 3995, 354, 3477, 24969, 1352, 3815, 13]",0.5,8750,ml_signal,1786,Calculation of smoothed stochastic oscillator values.,,8724,"    def TMF(cls, ohlcv: DataFrame, period: int = 21) -> Series:","[220, 220, 220, 825, 21232, 37, 7, 565, 82, 11, 11752, 75, 33967, 25, 6060, 19778, 11, 2278, 25, 493, 796, 2310, 8, 4613, 7171, 25]"
üß† ML Signal: Double smoothing of stochastic oscillator values.,"[8582, 100, 254, 10373, 26484, 25, 11198, 32746, 722, 286, 3995, 354, 3477, 24969, 1352, 3815, 13]",0.5,8776,ml_signal,1786,Double smoothing of stochastic oscillator values.,,8750,"    def TMF(cls, ohlcv: DataFrame, period: int = 21) -> Series:","[220, 220, 220, 825, 21232, 37, 7, 565, 82, 11, 11752, 75, 33967, 25, 6060, 19778, 11, 2278, 25, 493, 796, 2310, 8, 4613, 7171, 25]"
‚úÖ Best Practice: Returning a named Series for better readability and usage.,"[26486, 227, 6705, 19939, 25, 42882, 257, 3706, 7171, 329, 1365, 1100, 1799, 290, 8748, 13]",1.0,8784,best_practice,1793,Returning a named Series for better readability and usage.,,8776,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Use of @classmethod decorator for methods that operate on class-level data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 1398, 12, 5715, 1366, 13]",1.0,8792,best_practice,1793,Use of @classmethod decorator for methods that operate on class-level data.,,8784,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Function should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 15553, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",1.0,8800,best_practice,1793,Function should have a docstring explaining its purpose and parameters,,8792,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚ö†Ô∏è SAST Risk (Low): Accessing 'x[period]' without checking if 'period' is a valid index/key,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 705, 87, 58, 41007, 49946, 1231, 10627, 611, 705, 41007, 6, 318, 257, 4938, 6376, 14, 2539]",0.5,8815,sast_risk,1795,Accessing 'x[period]' without checking if 'period' is a valid index/key,Low,8800,"        ohlcv[""range""] = (","[220, 220, 220, 220, 220, 220, 220, 11752, 75, 33967, 14692, 9521, 8973, 796, 357]"
‚úÖ Best Practice: Use of descriptive function name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 329, 16287]",1.0,8831,best_practice,1798,Use of descriptive function name for clarity,,8815,"        ohlcv[""rangev""] = None","[220, 220, 220, 220, 220, 220, 220, 11752, 75, 33967, 14692, 9521, 85, 8973, 796, 6045]"
üß† ML Signal: Use of rolling window operations on time series data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 4560, 319, 640, 2168, 1366]",0.5,8844,ml_signal,1802,Use of rolling window operations on time series data,,8831,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
üß† ML Signal: Use of rolling window operations on time series data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 4560, 319, 640, 2168, 1366]",0.5,8859,ml_signal,1808,Use of rolling window operations on time series data,,8844,"        channel_length: int = 10,","[220, 220, 220, 220, 220, 220, 220, 6518, 62, 13664, 25, 493, 796, 838, 11]"
üß† ML Signal: Concatenation of multiple time series features,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 341, 286, 3294, 640, 2168, 3033]",0.5,8876,ml_signal,1817,Concatenation of multiple time series features,,8859,        ap = cls.TP(ohlc),"[220, 220, 220, 220, 220, 220, 220, 2471, 796, 537, 82, 13, 7250, 7, 1219, 44601, 8]"
‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007]",0.5,8893,best_practice,1817,Docstring provides a clear explanation of the function's purpose and parameters,,8876,        ap = cls.TP(ohlc),"[220, 220, 220, 220, 220, 220, 220, 2471, 796, 537, 82, 13, 7250, 7, 1219, 44601, 8]"
üß† ML Signal: Usage of rolling mean indicates a pattern for time series data processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10708, 1612, 9217, 257, 3912, 329, 640, 2168, 1366, 7587]",0.5,8917,ml_signal,1822,Usage of rolling mean indicates a pattern for time series data processing,,8893,        ci = (ap - esa) / (0.015 * d),"[220, 220, 220, 220, 220, 220, 220, 269, 72, 796, 357, 499, 532, 1658, 64, 8, 1220, 357, 15, 13, 25150, 1635, 288, 8]"
üß† ML Signal: Calculation of volatility unit is a common pattern in financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 30772, 4326, 318, 257, 2219, 3912, 287, 3176, 1366, 3781]",0.5,8955,ml_signal,1824,Calculation of volatility unit is a common pattern in financial data analysis,,8917,"        wt1 = pd.Series(ci.ewm(span=average_length, adjust=adjust).mean(), name=""WT1."")","[220, 220, 220, 220, 220, 220, 220, 266, 83, 16, 796, 279, 67, 13, 27996, 7, 979, 13, 413, 76, 7, 12626, 28, 23913, 62, 13664, 11, 4532, 28, 23032, 737, 32604, 22784, 1438, 2625, 39386, 16, 19570]"
üß† ML Signal: Creation of new series for transformed data is a common pattern in data preprocessing,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 649, 2168, 329, 14434, 1366, 318, 257, 2219, 3912, 287, 1366, 662, 36948]",0.5,8955,ml_signal,1826,Creation of new series for transformed data is a common pattern in data preprocessing,,8955,,[]
‚úÖ Best Practice: Using pd.concat to combine series into a DataFrame is efficient and readable,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 12082, 2168, 656, 257, 6060, 19778, 318, 6942, 290, 31744]",1.0,8961,best_practice,1829,Using pd.concat to combine series into a DataFrame is efficient and readable,,8955,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of @classmethod decorator indicates method is intended to be called on the class itself,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 2446, 318, 5292, 284, 307, 1444, 319, 262, 1398, 2346]",0.5,8969,best_practice,1833,Use of @classmethod decorator indicates method is intended to be called on the class itself,,8961,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of rolling window for moving average calculation,"[26486, 227, 6705, 19939, 25, 5765, 286, 10708, 4324, 329, 3867, 2811, 17952]",1.0,8987,best_practice,1844,Use of rolling window for moving average calculation,,8969,        _smooth = smooth.fillna(0),"[220, 220, 220, 220, 220, 220, 220, 4808, 5796, 5226, 796, 7209, 13, 20797, 2616, 7, 15, 8]"
‚úÖ Best Practice: Use of rolling window for standard deviation calculation,"[26486, 227, 6705, 19939, 25, 5765, 286, 10708, 4324, 329, 3210, 28833, 17952]",1.0,9000,best_practice,1846,Use of rolling window for standard deviation calculation,,8987,        return pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7]"
‚úÖ Best Practice: Function should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 15553, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",0.5,9013,best_practice,1846,Function should have a docstring explaining its purpose and parameters,,9000,        return pd.Series(,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 27996, 7]"
üß† ML Signal: Use of np.where for element-wise conditional logic,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 3003, 329, 5002, 12, 3083, 26340, 9156]",1.0,9038,ml_signal,1848,Use of np.where for element-wise conditional logic,,9013,"            name=""{0} period FISH."".format(period),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 90, 15, 92, 2278, 376, 18422, 526, 13, 18982, 7, 41007, 828]"
üß† ML Signal: Element-wise operations on numpy arrays,"[8582, 100, 254, 10373, 26484, 25, 11703, 12, 3083, 4560, 319, 299, 32152, 26515]",0.5,9038,ml_signal,1850,Element-wise operations on numpy arrays,,9038,,[]
üß† ML Signal: Use of np.exp for element-wise exponential calculation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 11201, 329, 5002, 12, 3083, 39682, 17952]",1.0,9048,ml_signal,1852,Use of np.exp for element-wise exponential calculation,,9038,    def ICHIMOKU(,"[220, 220, 220, 825, 314, 3398, 3955, 11380, 52, 7]"
üß† ML Signal: Element-wise subtraction,"[8582, 100, 254, 10373, 26484, 25, 11703, 12, 3083, 13284, 7861]",0.5,9061,ml_signal,1854,Element-wise subtraction,,9048,"        ohlc: DataFrame,","[220, 220, 220, 220, 220, 220, 220, 11752, 44601, 25, 6060, 19778, 11]"
üß† ML Signal: Element-wise subtraction,"[8582, 100, 254, 10373, 26484, 25, 11703, 12, 3083, 13284, 7861]",0.5,9078,ml_signal,1856,Element-wise subtraction,,9061,"        kijun_period: int = 26,","[220, 220, 220, 220, 220, 220, 220, 479, 2926, 403, 62, 41007, 25, 493, 796, 2608, 11]"
üß† ML Signal: Use of np.where for element-wise conditional logic,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 3003, 329, 5002, 12, 3083, 26340, 9156]",1.0,9095,ml_signal,1858,Use of np.where for element-wise conditional logic,,9078,"        chikou_period: int = 26,","[220, 220, 220, 220, 220, 220, 220, 442, 1134, 280, 62, 41007, 25, 493, 796, 2608, 11]"
üß† ML Signal: Element-wise division,"[8582, 100, 254, 10373, 26484, 25, 11703, 12, 3083, 7297]",0.5,9103,ml_signal,1860,Element-wise division,,9095,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Explicit return statement for clarity,"[26486, 227, 6705, 19939, 25, 11884, 1441, 2643, 329, 16287]",0.5,9122,best_practice,1862,Explicit return statement for clarity,,9103,"        identifies trend direction, gauges momentum and provides trading signals.","[220, 220, 220, 220, 220, 220, 220, 21079, 5182, 4571, 11, 14885, 3212, 12858, 290, 3769, 7313, 10425, 13]"
üß† ML Signal: Use of rolling window for time series analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 329, 640, 2168, 3781]",0.5,9139,ml_signal,1856,Use of rolling window for time series analysis,,9122,"        kijun_period: int = 26,","[220, 220, 220, 220, 220, 220, 220, 479, 2926, 403, 62, 41007, 25, 493, 796, 2608, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variable 'lookback_period',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 7885, 705, 5460, 1891, 62, 41007, 6]",0.5,9156,sast_risk,1858,Potential use of undefined variable 'lookback_period',Low,9139,"        chikou_period: int = 26,","[220, 220, 220, 220, 220, 220, 220, 442, 1134, 280, 62, 41007, 25, 493, 796, 2608, 11]"
üß† ML Signal: Use of hyperbolic tangent function for normalization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8718, 65, 4160, 13875, 298, 2163, 329, 3487, 1634]",0.5,9191,ml_signal,1861,Use of hyperbolic tangent function for normalization,,9156,"        The Ichimoku Cloud, also known as Ichimoku Kinko Hyo, is a versatile indicator that defines support and resistance,","[220, 220, 220, 220, 220, 220, 220, 383, 26364, 320, 11601, 10130, 11, 635, 1900, 355, 26364, 320, 11601, 509, 676, 78, 6707, 78, 11, 318, 257, 21362, 16916, 326, 15738, 1104, 290, 6625, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variable 'std',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 7885, 705, 19282, 6]",0.5,9217,sast_risk,1864,Potential use of undefined variable 'std',Low,9191,        Ichimoku Kinko Hyo translates into ‚Äúone look equilibrium chart‚Äù.,"[220, 220, 220, 220, 220, 220, 220, 26364, 320, 11601, 509, 676, 78, 6707, 78, 23677, 656, 564, 250, 505, 804, 29163, 8262, 447, 251, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variable 'ma',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 7885, 705, 2611, 6]",0.5,9217,sast_risk,1866,Potential use of undefined variable 'ma',Low,9217,,[]
üß† ML Signal: Function call with calculated parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 10488, 10007]",0.5,9217,ml_signal,1866,Function call with calculated parameters,,9217,,[]
‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variable 'period',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 7885, 705, 41007, 6]",0.5,9217,sast_risk,1866,Potential use of undefined variable 'period',Low,9217,,[]
‚úÖ Best Practice: Use of __name__ guard for script entry point,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 329, 4226, 5726, 966]",0.5,9217,best_practice,1866,Use of __name__ guard for script entry point,,9217,,[]
üß† ML Signal: Dynamic attribute access and filtering,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 290, 25431]",0.5,9217,ml_signal,1866,Dynamic attribute access and filtering,,9217,,[]

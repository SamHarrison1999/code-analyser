[
  {
    "line": 4,
    "text": "from pandas.core import series",
    "annotation": "\u2705 Best Practice: Importing specific modules or classes can improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      19798,
      292,
      13,
      7295,
      1330,
      2168
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      13103,
      393,
      6097,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific modules or classes can improve code readability and maintainability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes from a library can improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      5888,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes from a library can improve code readability and maintainability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): os.path.abspath(__file__) can expose sensitive file path information.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      28686,
      13,
      6978,
      13,
      397,
      2777,
      776,
      7,
      834,
      7753,
      834,
      8,
      460,
      15651,
      8564,
      2393,
      3108,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "os.path.abspath(__file__) can expose sensitive file path information."
  },
  {
    "line": 10,
    "text": "    return os.path.dirname(os.path.abspath(__file__))",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): os.path.join with user-controlled input can lead to directory traversal vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      28686,
      13,
      6978,
      13,
      15908,
      3672,
      7,
      418,
      13,
      6978,
      13,
      397,
      2777,
      776,
      7,
      834,
      7753,
      834,
      4008
    ],
    "start_token": 7,
    "end_token": 30,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      28686,
      13,
      6978,
      13,
      22179,
      351,
      2836,
      12,
      14401,
      5128,
      460,
      1085,
      284,
      8619,
      33038,
      282,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "os.path.join with user-controlled input can lead to directory traversal vulnerabilities."
  },
  {
    "line": 13,
    "text": "data_file = os.path.join(rootdir(), \"data/bittrex_btc-usdt.csv\")",
    "annotation": "\ud83e\udde0 ML Signal: Reading CSV files is a common operation in data processing tasks.",
    "confidence": 1.0,
    "tokens": [
      7890,
      62,
      7753,
      796,
      28686,
      13,
      6978,
      13,
      22179,
      7,
      15763,
      15908,
      22784,
      366,
      7890,
      14,
      65,
      715,
      21510,
      62,
      18347,
      66,
      12,
      385,
      28664,
      13,
      40664,
      4943
    ],
    "start_token": 30,
    "end_token": 58,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      44189,
      3696,
      318,
      257,
      2219,
      4905,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Reading CSV files is a common operation in data processing tasks."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): pd.read_csv can be exploited if the CSV file contains malicious content.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 58,
    "end_token": 58,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      279,
      67,
      13,
      961,
      62,
      40664,
      460,
      307,
      21514,
      611,
      262,
      44189,
      2393,
      4909,
      17412,
      2695,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "pd.read_csv can be exploited if the CSV file contains malicious content."
  },
  {
    "line": 15,
    "text": "ohlc = pd.read_csv(data_file, index_col=\"date\", parse_dates=True)",
    "annotation": "\u2705 Best Practice: Specify 'index_col' and 'parse_dates' for better data handling and performance.",
    "confidence": 1.0,
    "tokens": [
      1219,
      44601,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      7890,
      62,
      7753,
      11,
      6376,
      62,
      4033,
      2625,
      4475,
      1600,
      21136,
      62,
      19581,
      28,
      17821,
      8
    ],
    "start_token": 58,
    "end_token": 84,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      705,
      9630,
      62,
      4033,
      6,
      290,
      705,
      29572,
      62,
      19581,
      6,
      329,
      1365,
      1366,
      9041,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Specify 'index_col' and 'parse_dates' for better data handling and performance."
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.SMA function with specific parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      50,
      5673,
      2163,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.SMA function with specific parameters"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assert statements are used for testing, which may be disabled in production",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      6299,
      389,
      973,
      329,
      4856,
      11,
      543,
      743,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assert statements are used for testing, which may be disabled in production"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assert statements are used for testing, which may be disabled in production",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      6299,
      389,
      973,
      329,
      4856,
      11,
      543,
      743,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assert statements are used for testing, which may be disabled in production"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.SMM, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      50,
      12038,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.SMM, useful for learning test patterns"
  },
  {
    "line": 19,
    "text": "    \"\"\"test TA.ma\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2611,
      37811
    ],
    "start_token": 84,
    "end_token": 93,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of round() to ensure precision in floating-point operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 93,
    "end_token": 93,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      284,
      4155,
      15440,
      287,
      12462,
      12,
      4122,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of round() to ensure precision in floating-point operations"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): If 'ma' is not a series, this will raise an AssertionError",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 93,
    "end_token": 93,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1002,
      705,
      2611,
      6,
      318,
      407,
      257,
      2168,
      11,
      428,
      481,
      5298,
      281,
      2195,
      861,
      295,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "If 'ma' is not a series, this will raise an AssertionError"
  },
  {
    "line": 24,
    "text": "    assert ma.values[-1] == 6922.33922063",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can be unreliable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8644,
      1828,
      13,
      2091,
      5892,
      1238,
      5066
    ],
    "start_token": 93,
    "end_token": 112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      307,
      29954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can be unreliable"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected outcomes in tests",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      10906,
      287,
      5254
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected outcomes in tests"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.SSMA, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      5432,
      5673,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.SSMA, useful for learning test patterns"
  },
  {
    "line": 24,
    "text": "    assert ma.values[-1] == 6922.33922063",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8644,
      1828,
      13,
      2091,
      5892,
      1238,
      5066
    ],
    "start_token": 112,
    "end_token": 131,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 131,
    "end_token": 131,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 27,
    "text": "def test_smm():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion without error message can make debugging harder",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      82,
      3020,
      33529
    ],
    "start_token": 131,
    "end_token": 137,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      1231,
      4049,
      3275,
      460,
      787,
      28769,
      7069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion without error message can make debugging harder"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can be unreliable",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 137,
    "end_token": 137,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      307,
      29954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can be unreliable"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition for testing, useful for identifying test patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 137,
    "end_token": 137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      329,
      4856,
      11,
      4465,
      329,
      13720,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition for testing, useful for identifying test patterns"
  },
  {
    "line": 28,
    "text": "    \"\"\"test TA.SMM\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.EMA with specific parameters, indicating a pattern for EMA calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      50,
      12038,
      37811
    ],
    "start_token": 137,
    "end_token": 147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      27630,
      351,
      2176,
      10007,
      11,
      12739,
      257,
      3912,
      329,
      412,
      5673,
      17952
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.EMA with specific parameters, indicating a pattern for EMA calculation"
  },
  {
    "line": 30,
    "text": "    ma = TA.SMM(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for potential errors in TA.EMA or round",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      50,
      12038,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 147,
    "end_token": 168,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      2785,
      8563,
      287,
      21664,
      13,
      27630,
      393,
      2835
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for potential errors in TA.EMA or round"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type checking with isinstance, useful for understanding expected data types",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 168,
    "end_token": 168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      351,
      318,
      39098,
      11,
      4465,
      329,
      4547,
      2938,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Type checking with isinstance, useful for understanding expected data types"
  },
  {
    "line": 33,
    "text": "    assert ma.values[-1] == 6490.0",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      31503,
      13,
      15
    ],
    "start_token": 168,
    "end_token": 184,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assertion with specific value, indicating expected output for test case",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 184,
    "end_token": 184,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      351,
      2176,
      1988,
      11,
      12739,
      2938,
      5072,
      329,
      1332,
      1339
    ],
    "label": "ml_signal",
    "reason": "Assertion with specific value, indicating expected output for test case"
  },
  {
    "line": 32,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 184,
    "end_token": 197,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated and sanitized before use",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      290,
      5336,
      36951,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated and sanitized before use"
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'round' for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      744,
      6,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of 'round' for consistent decimal precision"
  },
  {
    "line": 37,
    "text": "    \"\"\"test TA.SSMA\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      5432,
      5673,
      37811
    ],
    "start_token": 197,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported"
  },
  {
    "line": 39,
    "text": "    ma = TA.SSMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can be unreliable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      5432,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 207,
    "end_token": 228,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      307,
      29954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can be unreliable"
  },
  {
    "line": 37,
    "text": "    \"\"\"test TA.SSMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.TEMA indicates a pattern of using technical analysis for financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      5432,
      5673,
      37811
    ],
    "start_token": 228,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      51,
      27630,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of TA.TEMA indicates a pattern of using technical analysis for financial data"
  },
  {
    "line": 39,
    "text": "    ma = TA.SSMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      5432,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 238,
    "end_token": 259,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Rounding to a specific number of decimals is a common data preprocessing step",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      371,
      9969,
      284,
      257,
      2176,
      1271,
      286,
      875,
      320,
      874,
      318,
      257,
      2219,
      1366,
      662,
      36948,
      2239
    ],
    "label": "ml_signal",
    "reason": "Rounding to a specific number of decimals is a common data preprocessing step"
  },
  {
    "line": 41,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\u2705 Best Practice: Ensure that the rounding is necessary for the precision required",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 259,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      38185,
      318,
      3306,
      329,
      262,
      15440,
      2672
    ],
    "label": "best_practice",
    "reason": "Ensure that the rounding is necessary for the precision required"
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported properly",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported properly"
  },
  {
    "line": 44,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type checking with 'isinstance' is a common pattern for ensuring data integrity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      351,
      705,
      271,
      39098,
      6,
      318,
      257,
      2219,
      3912,
      329,
      13359,
      1366,
      11540
    ],
    "label": "ml_signal",
    "reason": "Type checking with 'isinstance' is a common pattern for ensuring data integrity"
  },
  {
    "line": 46,
    "text": "    \"\"\"test TA.EMA\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      27630,
      37811
    ],
    "start_token": 272,
    "end_token": 281,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements indicates a pattern of test-driven development",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 281,
    "end_token": 281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      9217,
      257,
      3912,
      286,
      1332,
      12,
      15808,
      2478
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements indicates a pattern of test-driven development"
  },
  {
    "line": 42,
    "text": "    assert ma.values[-1] == 6907.53759817",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8644,
      2998,
      13,
      4310,
      2425,
      4089,
      1558
    ],
    "start_token": 281,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 44,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 45,
    "text": "def test_ema():",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round, common in data processing",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      19687,
      33529
    ],
    "start_token": 300,
    "end_token": 305,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round, common in data processing"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the expected type to prevent type errors",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 305,
    "end_token": 305,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      2938,
      2099,
      284,
      2948,
      2099,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the expected type to prevent type errors"
  },
  {
    "line": 48,
    "text": "    ma = TA.EMA(ohlc, 50).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      27630,
      7,
      1219,
      44601,
      11,
      2026,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 305,
    "end_token": 327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance for type checking"
  },
  {
    "line": 50,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 327,
    "end_token": 340,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 51,
    "text": "    assert ma.values[-1] == 7606.84391951",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert for validation in test functions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      767,
      33206,
      13,
      5705,
      2670,
      1129,
      4349
    ],
    "start_token": 340,
    "end_token": 359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      329,
      21201,
      287,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Use of assert for validation in test functions"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 359,
    "end_token": 359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 359,
    "end_token": 359,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 50,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round, common in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 359,
    "end_token": 372,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round, common in data processing"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to check type, ensures correct type handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 372,
    "end_token": 372,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      11,
      19047,
      3376,
      2099,
      9041
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check type, ensures correct type handling"
  },
  {
    "line": 54,
    "text": "def test_dema():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      9536,
      64,
      33529
    ],
    "start_token": 372,
    "end_token": 378,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 55,
    "text": "    \"\"\"test TA.DEMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert for validation, common in test functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      35,
      27630,
      37811
    ],
    "start_token": 378,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      329,
      21201,
      11,
      2219,
      287,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Use of assert for validation, common in test functions"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.VAMA, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 388,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      53,
      25087,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.VAMA, useful for learning test patterns"
  },
  {
    "line": 54,
    "text": "def test_dema():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'ohlc' is defined and valid, potential for NameError",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      9536,
      64,
      33529
    ],
    "start_token": 388,
    "end_token": 394,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      1219,
      44601,
      6,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'ohlc' is defined and valid, potential for NameError"
  },
  {
    "line": 55,
    "text": "    \"\"\"test TA.DEMA\"\"\"",
    "annotation": "\u2705 Best Practice: Use of method chaining for concise code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      35,
      27630,
      37811
    ],
    "start_token": 394,
    "end_token": 404,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of method chaining for concise code"
  },
  {
    "line": 57,
    "text": "    ma = TA.DEMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series' is defined and valid, potential for NameError",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      35,
      27630,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 404,
    "end_token": 425,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      6,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series' is defined and valid, potential for NameError"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of assert to validate the type of 'ma'",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 425,
    "end_token": 425,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2099,
      286,
      705,
      2611,
      6
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the type of 'ma'"
  },
  {
    "line": 60,
    "text": "    assert ma.values[-1] == 6323.41923994",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point values can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8093,
      1954,
      13,
      45068,
      1954,
      42691
    ],
    "start_token": 425,
    "end_token": 443,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3815,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point values can lead to precision issues"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of assert to validate the final value of 'ma'",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 443,
    "end_token": 443,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2457,
      1988,
      286,
      705,
      2611,
      6
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the final value of 'ma'"
  },
  {
    "line": 57,
    "text": "    ma = TA.DEMA(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Function call to TA.ER with ohlc as input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      35,
      27630,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 443,
    "end_token": 464,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      21664,
      13,
      1137,
      351,
      11752,
      44601,
      355,
      5128
    ],
    "label": "ml_signal",
    "reason": "Function call to TA.ER with ohlc as input"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a specific number of decimals for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 464,
    "end_token": 464,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      2176,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a specific number of decimals for consistency"
  },
  {
    "line": 60,
    "text": "    assert ma.values[-1] == 6323.41923994",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of the variable",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8093,
      1954,
      13,
      45068,
      1954,
      42691
    ],
    "start_token": 464,
    "end_token": 482,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      262,
      7885
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of the variable"
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assertion to check value range, indicating expected behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 482,
    "end_token": 482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      284,
      2198,
      1988,
      2837,
      11,
      12739,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Assertion to check value range, indicating expected behavior"
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.KAMA, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 482,
    "end_token": 482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      42,
      25087,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.KAMA, useful for learning test patterns"
  },
  {
    "line": 64,
    "text": "    \"\"\"test TA.TEMA\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      51,
      27630,
      37811
    ],
    "start_token": 482,
    "end_token": 492,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 65,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 492,
    "end_token": 492,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 492,
    "end_token": 492,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported"
  },
  {
    "line": 69,
    "text": "    assert ma.values[-1] == 6307.48151844",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected output, useful for learning expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      22996,
      13,
      2780,
      1314,
      1507,
      2598
    ],
    "start_token": 492,
    "end_token": 511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      5072,
      11,
      4465,
      329,
      4673,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected output, useful for learning expected behavior"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in test, ensure it matches expected output",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 511,
    "end_token": 511,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      1332,
      11,
      4155,
      340,
      7466,
      2938,
      5072
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in test, ensure it matches expected output"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.ZLEMA indicates a pattern of using technical analysis for financial data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 511,
    "end_token": 511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      57,
      2538,
      5673,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of TA.ZLEMA indicates a pattern of using technical analysis for financial data"
  },
  {
    "line": 69,
    "text": "    assert ma.values[-1] == 6307.48151844",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      22996,
      13,
      2780,
      1314,
      1507,
      2598
    ],
    "start_token": 511,
    "end_token": 530,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Rounding to a specific number of decimals is a common data preprocessing step",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 530,
    "end_token": 530,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      371,
      9969,
      284,
      257,
      2176,
      1271,
      286,
      875,
      320,
      874,
      318,
      257,
      2219,
      1366,
      662,
      36948,
      2239
    ],
    "label": "ml_signal",
    "reason": "Rounding to a specific number of decimals is a common data preprocessing step"
  },
  {
    "line": 72,
    "text": "def test_trima():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for validation; may be disabled in optimized mode",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      2213,
      8083,
      33529
    ],
    "start_token": 530,
    "end_token": 536,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      21201,
      26,
      743,
      307,
      10058,
      287,
      23392,
      4235
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for validation; may be disabled in optimized mode"
  },
  {
    "line": 73,
    "text": "    \"\"\"test TA.TRIMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of 'ma' suggests a pattern of ensuring data structure integrity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      5446,
      3955,
      32,
      37811
    ],
    "start_token": 536,
    "end_token": 547,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      705,
      2611,
      6,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540
    ],
    "label": "ml_signal",
    "reason": "Checking the type of 'ma' suggests a pattern of ensuring data structure integrity"
  },
  {
    "line": 75,
    "text": "    ma = TA.TRIMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      5446,
      3955,
      32,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 547,
    "end_token": 569,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 76,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values indicates a pattern of using known benchmarks for validation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 569,
    "end_token": 569,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      9217,
      257,
      3912,
      286,
      1262,
      1900,
      31747,
      329,
      21201
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values indicates a pattern of using known benchmarks for validation"
  },
  {
    "line": 72,
    "text": "def test_trima():",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.WMA indicates a pattern of using technical analysis for financial data",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      2213,
      8083,
      33529
    ],
    "start_token": 569,
    "end_token": 575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      54,
      5673,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of TA.WMA indicates a pattern of using technical analysis for financial data"
  },
  {
    "line": 74,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 575,
    "end_token": 575,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 75,
    "text": "    ma = TA.TRIMA(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type, common pattern in testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      5446,
      3955,
      32,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 575,
    "end_token": 597,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      11,
      2219,
      3912,
      287,
      4856
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type, common pattern in testing"
  },
  {
    "line": 77,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected output, common in test functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 597,
    "end_token": 610,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      5072,
      11,
      2219,
      287,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected output, common in test functions"
  },
  {
    "line": 77,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Function call to TA.HMA with ohlc as input, indicating usage of a specific technical analysis function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 610,
    "end_token": 623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      21664,
      13,
      39,
      5673,
      351,
      11752,
      44601,
      355,
      5128,
      11,
      12739,
      8748,
      286,
      257,
      2176,
      6276,
      3781,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function call to TA.HMA with ohlc as input, indicating usage of a specific technical analysis function"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for TA.HMA call could lead to unhandled exceptions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 623,
    "end_token": 623,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      21664,
      13,
      39,
      5673,
      869,
      714,
      1085,
      284,
      555,
      38788,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for TA.HMA call could lead to unhandled exceptions"
  },
  {
    "line": 80,
    "text": "",
    "annotation": "\u2705 Best Practice: Use isinstance to ensure ma is of the expected type, improving code robustness",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 623,
    "end_token": 623,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      284,
      4155,
      17266,
      318,
      286,
      262,
      2938,
      2099,
      11,
      10068,
      2438,
      12373,
      1108
    ],
    "label": "best_practice",
    "reason": "Use isinstance to ensure ma is of the expected type, improving code robustness"
  },
  {
    "line": 82,
    "text": "    \"\"\"test TA.TRIX\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Asserting the last value of ma, indicating expected output behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      5446,
      10426,
      37811
    ],
    "start_token": 623,
    "end_token": 633,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      262,
      938,
      1988,
      286,
      17266,
      11,
      12739,
      2938,
      5072,
      4069
    ],
    "label": "ml_signal",
    "reason": "Asserting the last value of ma, indicating expected output behavior"
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 633,
    "end_token": 633,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 82,
    "text": "    \"\"\"test TA.TRIX\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      5446,
      10426,
      37811
    ],
    "start_token": 633,
    "end_token": 643,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 84,
    "text": "    ma = TA.TRIX(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'TA.EVWMA' or 'ohlc' are not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      5446,
      10426,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 643,
    "end_token": 664,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      5603,
      13,
      20114,
      54,
      5673,
      6,
      393,
      705,
      1219,
      44601,
      6,
      389,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'TA.EVWMA' or 'ohlc' are not validated or sanitized"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'round' for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 664,
    "end_token": 664,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      744,
      6,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of 'round' for consistent decimal precision"
  },
  {
    "line": 87,
    "text": "    assert ma.values[-1] == -0.5498364",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion without error message can make debugging harder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      15,
      13,
      44966,
      5999,
      2414
    ],
    "start_token": 664,
    "end_token": 682,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      1231,
      4049,
      3275,
      460,
      787,
      28769,
      7069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion without error message can make debugging harder"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 682,
    "end_token": 682,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the test function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 682,
    "end_token": 682,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1332,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the test function"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.VWAP indicates a pattern of using technical analysis functions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 682,
    "end_token": 682,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      30133,
      2969,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      5499
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.VWAP indicates a pattern of using technical analysis functions"
  },
  {
    "line": 90,
    "text": "def test_vama():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that 'ohlc' is properly validated and sanitized before use",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      85,
      1689,
      33529
    ],
    "start_token": 682,
    "end_token": 688,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      705,
      1219,
      44601,
      6,
      318,
      6105,
      31031,
      290,
      5336,
      36951,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that 'ohlc' is properly validated and sanitized before use"
  },
  {
    "line": 91,
    "text": "    \"\"\"test TA.VAMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of 'ma' suggests a pattern of type validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      53,
      25087,
      37811
    ],
    "start_token": 688,
    "end_token": 698,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      705,
      2611,
      6,
      5644,
      257,
      3912,
      286,
      2099,
      21201
    ],
    "label": "ml_signal",
    "reason": "Checking the type of 'ma' suggests a pattern of type validation"
  },
  {
    "line": 93,
    "text": "    ma = TA.VAMA(ohlc, 20).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      53,
      25087,
      7,
      1219,
      44601,
      11,
      1160,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 698,
    "end_token": 721,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 92,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.SMMA, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 721,
    "end_token": 721,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      12310,
      5673,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.SMMA, useful for learning test patterns"
  },
  {
    "line": 94,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 721,
    "end_token": 721,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 95,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round, common in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 721,
    "end_token": 734,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round, common in data processing"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series.Series' is a valid type, could raise an exception if not",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 734,
    "end_token": 734,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      13,
      27996,
      6,
      318,
      257,
      4938,
      2099,
      11,
      714,
      5298,
      281,
      6631,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series.Series' is a valid type, could raise an exception if not"
  },
  {
    "line": 98,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assertion for type checking, useful for learning type validation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 734,
    "end_token": 734,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      329,
      2099,
      10627,
      11,
      4465,
      329,
      4673,
      2099,
      21201
    ],
    "label": "ml_signal",
    "reason": "Assertion for type checking, useful for learning type validation"
  },
  {
    "line": 100,
    "text": "    \"\"\"test TA.ER\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in assertion, may lead to false positives if data changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      1137,
      37811
    ],
    "start_token": 734,
    "end_token": 743,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      19190,
      11,
      743,
      1085,
      284,
      3991,
      38548,
      611,
      1366,
      2458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in assertion, may lead to false positives if data changes"
  },
  {
    "line": 101,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assertion for value checking, useful for learning value validation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 743,
    "end_token": 743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      329,
      1988,
      10627,
      11,
      4465,
      329,
      4673,
      1988,
      21201
    ],
    "label": "ml_signal",
    "reason": "Assertion for value checking, useful for learning value validation"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.FRAMA function indicates a pattern for financial analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 743,
    "end_token": 743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      10913,
      25087,
      2163,
      9217,
      257,
      3912,
      329,
      3176,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.FRAMA function indicates a pattern for financial analysis"
  },
  {
    "line": 99,
    "text": "def test_er():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      263,
      33529
    ],
    "start_token": 743,
    "end_token": 748,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 100,
    "text": "    \"\"\"test TA.ER\"\"\"",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      1137,
      37811
    ],
    "start_token": 748,
    "end_token": 757,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 102,
    "text": "    er = TA.ER(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion without error handling could lead to unhandled exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1931,
      796,
      21664,
      13,
      1137,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 757,
    "end_token": 777,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      1231,
      4049,
      9041,
      714,
      1085,
      284,
      555,
      38788,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion without error handling could lead to unhandled exceptions"
  },
  {
    "line": 104,
    "text": "    assert isinstance(er, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in assertion may lead to brittle tests",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      263,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 777,
    "end_token": 790,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      19190,
      743,
      1085,
      284,
      49307,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in assertion may lead to brittle tests"
  },
  {
    "line": 100,
    "text": "    \"\"\"test TA.ER\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function definition for testing a specific feature or component",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      1137,
      37811
    ],
    "start_token": 790,
    "end_token": 799,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      329,
      4856,
      257,
      2176,
      3895,
      393,
      7515
    ],
    "label": "ml_signal",
    "reason": "Function definition for testing a specific feature or component"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation and usage of a specific method from a library",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 799,
    "end_token": 799,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      290,
      8748,
      286,
      257,
      2176,
      2446,
      422,
      257,
      5888
    ],
    "label": "ml_signal",
    "reason": "Instantiation and usage of a specific method from a library"
  },
  {
    "line": 105,
    "text": "    assert -100 < er.values[-1] < 100",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for potential errors in method calls",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      532,
      3064,
      1279,
      1931,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 799,
    "end_token": 815,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      2785,
      8563,
      287,
      2446,
      3848
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for potential errors in method calls"
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to ensure the correct type of the object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 815,
    "end_token": 815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      4155,
      262,
      3376,
      2099,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to ensure the correct type of the object"
  },
  {
    "line": 108,
    "text": "def test_kama():",
    "annotation": "\u2705 Best Practice: Use of isinstance to ensure the correct type of the object",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      74,
      1689,
      33529
    ],
    "start_token": 815,
    "end_token": 821,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      4155,
      262,
      3376,
      2099,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to ensure the correct type of the object"
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 821,
    "end_token": 821,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 112,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 821,
    "end_token": 821,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 109,
    "text": "    \"\"\"test TA.KAMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.PPO function with specific rounding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      42,
      25087,
      37811
    ],
    "start_token": 821,
    "end_token": 831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      10246,
      46,
      2163,
      351,
      2176,
      38185
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.PPO function with specific rounding"
  },
  {
    "line": 111,
    "text": "    ma = TA.KAMA(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of \"PPO\" key in ppo dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      42,
      25087,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 831,
    "end_token": 852,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      366,
      10246,
      46,
      1,
      1994,
      287,
      279,
      7501,
      22155
    ],
    "label": "ml_signal",
    "reason": "Checking type of \"PPO\" key in ppo dictionary"
  },
  {
    "line": 113,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of \"SIGNAL\" key in ppo dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 852,
    "end_token": 865,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      366,
      46224,
      1847,
      1,
      1994,
      287,
      279,
      7501,
      22155
    ],
    "label": "ml_signal",
    "reason": "Checking type of \"SIGNAL\" key in ppo dictionary"
  },
  {
    "line": 115,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of \"HISTO\" key in ppo dictionary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 865,
    "end_token": 865,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      366,
      39,
      8808,
      46,
      1,
      1994,
      287,
      279,
      7501,
      22155
    ],
    "label": "ml_signal",
    "reason": "Checking type of \"HISTO\" key in ppo dictionary"
  },
  {
    "line": 117,
    "text": "def test_zlema():",
    "annotation": "\ud83e\udde0 ML Signal: Verifying specific value in \"PPO\" series",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      89,
      293,
      2611,
      33529
    ],
    "start_token": 865,
    "end_token": 872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4643,
      4035,
      2176,
      1988,
      287,
      366,
      10246,
      46,
      1,
      2168
    ],
    "label": "ml_signal",
    "reason": "Verifying specific value in \"PPO\" series"
  },
  {
    "line": 119,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Verifying specific value in \"SIGNAL\" series",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 872,
    "end_token": 872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4643,
      4035,
      2176,
      1988,
      287,
      366,
      46224,
      1847,
      1,
      2168
    ],
    "label": "ml_signal",
    "reason": "Verifying specific value in \"SIGNAL\" series"
  },
  {
    "line": 121,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Verifying specific value in \"HISTO\" series",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 872,
    "end_token": 872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4643,
      4035,
      2176,
      1988,
      287,
      366,
      39,
      8808,
      46,
      1,
      2168
    ],
    "label": "ml_signal",
    "reason": "Verifying specific value in \"HISTO\" series"
  },
  {
    "line": 118,
    "text": "    \"\"\"test TA.ZLEMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for VW_MACD, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      57,
      2538,
      5673,
      37811
    ],
    "start_token": 872,
    "end_token": 883,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      31388,
      62,
      44721,
      35,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for VW_MACD, useful for learning test patterns"
  },
  {
    "line": 120,
    "text": "    ma = TA.ZLEMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'ohlc' is defined and valid, potential for NameError",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      57,
      2538,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 883,
    "end_token": 905,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      1219,
      44601,
      6,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'ohlc' is defined and valid, potential for NameError"
  },
  {
    "line": 121,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 905,
    "end_token": 905,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 123,
    "text": "    assert ma.values[-1] == 6462.46183365",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series.Series' is the correct type, potential for TypeError",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      39997,
      13,
      3510,
      1507,
      2091,
      2996
    ],
    "start_token": 905,
    "end_token": 924,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      11,
      2785,
      329,
      5994,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series.Series' is the correct type, potential for TypeError"
  },
  {
    "line": 125,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series.Series' is the correct type, potential for TypeError",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 924,
    "end_token": 924,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      11,
      2785,
      329,
      5994,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series.Series' is the correct type, potential for TypeError"
  },
  {
    "line": 127,
    "text": "    \"\"\"test TA.WMA\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value for test, may cause false negatives if data changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      54,
      5673,
      37811
    ],
    "start_token": 924,
    "end_token": 934,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      329,
      1332,
      11,
      743,
      2728,
      3991,
      42510,
      611,
      1366,
      2458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value for test, may cause false negatives if data changes"
  },
  {
    "line": 129,
    "text": "    ma = TA.WMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value for test, may cause false negatives if data changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      54,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 934,
    "end_token": 955,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      329,
      1332,
      11,
      743,
      2728,
      3991,
      42510,
      611,
      1366,
      2458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value for test, may cause false negatives if data changes"
  },
  {
    "line": 123,
    "text": "    assert ma.values[-1] == 6462.46183365",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the test function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      39997,
      13,
      3510,
      1507,
      2091,
      2996
    ],
    "start_token": 955,
    "end_token": 974,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1332,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the test function"
  },
  {
    "line": 126,
    "text": "def test_wma():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific method from a library (TA.EV_MACD) indicates a pattern in how this library is used",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      86,
      2611,
      33529
    ],
    "start_token": 974,
    "end_token": 980,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2446,
      422,
      257,
      5888,
      357,
      5603,
      13,
      20114,
      62,
      44721,
      35,
      8,
      9217,
      257,
      3912,
      287,
      703,
      428,
      5888,
      318,
      973
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific method from a library (TA.EV_MACD) indicates a pattern in how this library is used"
  },
  {
    "line": 128,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that 'ohlc' is validated and sanitized before use to prevent potential data integrity issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 980,
    "end_token": 980,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      290,
      5336,
      36951,
      878,
      779,
      284,
      2948,
      2785,
      1366,
      11540,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that 'ohlc' is validated and sanitized before use to prevent potential data integrity issues"
  },
  {
    "line": 129,
    "text": "    ma = TA.WMA(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Use of assert to validate the type of the result",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      54,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 980,
    "end_token": 1001,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2099,
      286,
      262,
      1255
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the type of the result"
  },
  {
    "line": 131,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\u2705 Best Practice: Use of assert to validate the type of the result",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1001,
    "end_token": 1014,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2099,
      286,
      262,
      1255
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the type of the result"
  },
  {
    "line": 133,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of assert to validate the expected value of the result",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1014,
    "end_token": 1014,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2938,
      1988,
      286,
      262,
      1255
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the expected value of the result"
  },
  {
    "line": 135,
    "text": "def test_hma():",
    "annotation": "\u2705 Best Practice: Use of assert to validate the expected value of the result",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      21720,
      33529
    ],
    "start_token": 1014,
    "end_token": 1019,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2938,
      1988,
      286,
      262,
      1255
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the expected value of the result"
  },
  {
    "line": 132,
    "text": "    assert ma.values[-1] == 6474.47003078",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method from a library (TA) to perform a calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      38652,
      13,
      2857,
      405,
      1270,
      3695
    ],
    "start_token": 1019,
    "end_token": 1038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      422,
      257,
      5888,
      357,
      5603,
      8,
      284,
      1620,
      257,
      17952
    ],
    "label": "ml_signal",
    "reason": "Use of a method from a library (TA) to perform a calculation"
  },
  {
    "line": 134,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for TA.MOM method call",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1038,
    "end_token": 1038,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      21664,
      13,
      44,
      2662,
      2446,
      869
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for TA.MOM method call"
  },
  {
    "line": 135,
    "text": "def test_hma():",
    "annotation": "\ud83e\udde0 ML Signal: Type checking with isinstance, indicating expected data type",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      21720,
      33529
    ],
    "start_token": 1038,
    "end_token": 1043,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      351,
      318,
      39098,
      11,
      12739,
      2938,
      1366,
      2099
    ],
    "label": "ml_signal",
    "reason": "Type checking with isinstance, indicating expected data type"
  },
  {
    "line": 137,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1043,
    "end_token": 1043,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 138,
    "text": "    ma = TA.HMA(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate the output of a function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      39,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1043,
    "end_token": 1064,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      5072,
      286,
      257,
      2163
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate the output of a function"
  },
  {
    "line": 137,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1064,
    "end_token": 1064,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 139,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent potential misuse or errors",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1064,
    "end_token": 1064,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      2785,
      29169,
      393,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent potential misuse or errors"
  },
  {
    "line": 140,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\u2705 Best Practice: Use of 'round' for precision control in floating-point operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1064,
    "end_token": 1077,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      744,
      6,
      329,
      15440,
      1630,
      287,
      12462,
      12,
      4122,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of 'round' for precision control in floating-point operations"
  },
  {
    "line": 142,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported properly",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1077,
    "end_token": 1077,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported properly"
  },
  {
    "line": 144,
    "text": "def test_evwma():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      1990,
      86,
      2611,
      33529
    ],
    "start_token": 1077,
    "end_token": 1084,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 142,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.VBM, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1084,
    "end_token": 1084,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      53,
      12261,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.VBM, useful for learning test patterns"
  },
  {
    "line": 144,
    "text": "def test_evwma():",
    "annotation": "\u2705 Best Practice: Checking the type of the result to ensure correct function output",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      1990,
      86,
      2611,
      33529
    ],
    "start_token": 1084,
    "end_token": 1091,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      284,
      4155,
      3376,
      2163,
      5072
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result to ensure correct function output"
  },
  {
    "line": 146,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected output, common in test-driven development",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1091,
    "end_token": 1091,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      5072,
      11,
      2219,
      287,
      1332,
      12,
      15808,
      2478
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected output, common in test-driven development"
  },
  {
    "line": 147,
    "text": "    evwma = TA.EVWMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      819,
      86,
      2611,
      796,
      21664,
      13,
      20114,
      54,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1091,
    "end_token": 1115,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 147,
    "text": "    evwma = TA.EVWMA(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method from a specific library (TA) for RSI calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      819,
      86,
      2611,
      796,
      21664,
      13,
      20114,
      54,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1115,
    "end_token": 1139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      422,
      257,
      2176,
      5888,
      357,
      5603,
      8,
      329,
      371,
      11584,
      17952
    ],
    "label": "ml_signal",
    "reason": "Use of a method from a specific library (TA) for RSI calculation"
  },
  {
    "line": 149,
    "text": "    assert isinstance(evwma, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'ohlc' is defined and valid, potential for NameError if not",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      1990,
      86,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1139,
    "end_token": 1154,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      1219,
      44601,
      6,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'ohlc' is defined and valid, potential for NameError if not"
  },
  {
    "line": 150,
    "text": "    assert evwma.values[-1] == 7445.46084062",
    "annotation": "\u2705 Best Practice: Use of assert to validate the type of 'rsi'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      819,
      86,
      2611,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8915,
      2231,
      13,
      19,
      28688,
      1821,
      5237
    ],
    "start_token": 1154,
    "end_token": 1175,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2099,
      286,
      705,
      3808,
      72,
      6
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the type of 'rsi'"
  },
  {
    "line": 152,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of assert to validate the range of 'rsi' values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1175,
    "end_token": 1175,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2837,
      286,
      705,
      3808,
      72,
      6,
      3815
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the range of 'rsi' values"
  },
  {
    "line": 152,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1175,
    "end_token": 1175,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 154,
    "text": "    \"\"\"test TA.VWAP\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      30133,
      2969,
      37811
    ],
    "start_token": 1175,
    "end_token": 1185,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 155,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1185,
    "end_token": 1185,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round"
  },
  {
    "line": 157,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'rsi' is always a 'series.Series' without error handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1185,
    "end_token": 1185,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      3808,
      72,
      6,
      318,
      1464,
      257,
      705,
      25076,
      13,
      27996,
      6,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'rsi' is always a 'series.Series' without error handling"
  },
  {
    "line": 158,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance for type checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1185,
    "end_token": 1198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance for type checking"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1198,
    "end_token": 1198,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 161,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert for validation in tests",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1198,
    "end_token": 1198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      329,
      21201,
      287,
      5254
    ],
    "label": "ml_signal",
    "reason": "Use of assert for validation in tests"
  },
  {
    "line": 157,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method from a library (TA.DYMI) indicates a pattern of library usage",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1198,
    "end_token": 1198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      422,
      257,
      5888,
      357,
      5603,
      13,
      35,
      56,
      8895,
      8,
      9217,
      257,
      3912,
      286,
      5888,
      8748
    ],
    "label": "ml_signal",
    "reason": "Use of a method from a library (TA.DYMI) indicates a pattern of library usage"
  },
  {
    "line": 158,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\u2705 Best Practice: Rounding to a specific number of decimals for consistency in test results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1198,
    "end_token": 1211,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      2176,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794,
      287,
      1332,
      2482
    ],
    "label": "best_practice",
    "reason": "Rounding to a specific number of decimals for consistency in test results"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling may cause the test to fail ungracefully if TA.DYMI or rounding fails",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1211,
    "end_token": 1211,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      743,
      2728,
      262,
      1332,
      284,
      2038,
      555,
      2164,
      558,
      2759,
      611,
      21664,
      13,
      35,
      56,
      8895,
      393,
      38185,
      10143
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling may cause the test to fail ungracefully if TA.DYMI or rounding fails"
  },
  {
    "line": 161,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of a variable is a common pattern in testing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1211,
    "end_token": 1211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      257,
      7885,
      318,
      257,
      2219,
      3912,
      287,
      4856
    ],
    "label": "ml_signal",
    "reason": "Checking the type of a variable is a common pattern in testing"
  },
  {
    "line": 163,
    "text": "    \"\"\"test TA.SMMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values is a common pattern in testing to ensure correctness",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      12310,
      5673,
      37811
    ],
    "start_token": 1211,
    "end_token": 1221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      318,
      257,
      2219,
      3912,
      287,
      4856,
      284,
      4155,
      29409
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values is a common pattern in testing to ensure correctness"
  },
  {
    "line": 162,
    "text": "def test_smma():",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.TR, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      5796,
      2611,
      33529
    ],
    "start_token": 1221,
    "end_token": 1227,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      5446,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.TR, useful for learning test patterns"
  },
  {
    "line": 164,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1227,
    "end_token": 1227,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 165,
    "text": "    ma = TA.SMMA(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      12310,
      5673,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1227,
    "end_token": 1248,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 167,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct expected type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1248,
    "end_token": 1261,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2938,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct expected type"
  },
  {
    "line": 169,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in test, ensure it matches expected output",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1261,
    "end_token": 1261,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      1332,
      11,
      4155,
      340,
      7466,
      2938,
      5072
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in test, ensure it matches expected output"
  },
  {
    "line": 167,
    "text": "    assert isinstance(ma, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions, useful for identifying test cases.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2611,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1261,
    "end_token": 1274,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499,
      11,
      4465,
      329,
      13720,
      1332,
      2663,
      13
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions, useful for identifying test cases."
  },
  {
    "line": 169,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that 'ohlc' is validated and sanitized before use to prevent data integrity issues.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1274,
    "end_token": 1274,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      290,
      5336,
      36951,
      878,
      779,
      284,
      2948,
      1366,
      11540,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that 'ohlc' is validated and sanitized before use to prevent data integrity issues."
  },
  {
    "line": 170,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals improves consistency in test results.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1274,
    "end_token": 1274,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      19575,
      15794,
      287,
      1332,
      2482,
      13
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals improves consistency in test results."
  },
  {
    "line": 172,
    "text": "    \"\"\"test TA.FRAMA\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Type checking with 'isinstance' is generally safe but ensure 'series.Series' is the expected type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      10913,
      25087,
      37811
    ],
    "start_token": 1274,
    "end_token": 1284,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      10627,
      351,
      705,
      271,
      39098,
      6,
      318,
      4143,
      3338,
      475,
      4155,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      2938,
      2099,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Type checking with 'isinstance' is generally safe but ensure 'series.Series' is the expected type."
  },
  {
    "line": 174,
    "text": "    ma = TA.FRAMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues; consider using a tolerance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      10913,
      25087,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1284,
    "end_token": 1305,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428,
      26,
      2074,
      1262,
      257,
      15621,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues; consider using a tolerance."
  },
  {
    "line": 172,
    "text": "    \"\"\"test TA.FRAMA\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      10913,
      25087,
      37811
    ],
    "start_token": 1305,
    "end_token": 1315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 174,
    "text": "    ma = TA.FRAMA(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.SAR' and 'ohlc' are safe and correctly implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      10913,
      25087,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1315,
    "end_token": 1336,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      50,
      1503,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      3338,
      290,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.SAR' and 'ohlc' are safe and correctly implemented"
  },
  {
    "line": 175,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1336,
    "end_token": 1336,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 177,
    "text": "    assert ma.values[-1] == 6574.14605454",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'sar' is a valid series object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      46900,
      13,
      1415,
      32417,
      34229
    ],
    "start_token": 1336,
    "end_token": 1354,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      82,
      283,
      6,
      318,
      257,
      4938,
      2168,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'sar' is a valid series object"
  },
  {
    "line": 179,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in test may lead to false positives/negatives",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1354,
    "end_token": 1354,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      1332,
      743,
      1085,
      284,
      3991,
      38548,
      14,
      12480,
      2929
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in test may lead to false positives/negatives"
  },
  {
    "line": 180,
    "text": "def test_macd():",
    "annotation": "\u2705 Best Practice: Use of assert to validate expected outcome",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      20285,
      67,
      33529
    ],
    "start_token": 1354,
    "end_token": 1360,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      8055
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate expected outcome"
  },
  {
    "line": 177,
    "text": "    assert ma.values[-1] == 6574.14605454",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.PSAR indicates a pattern of using technical analysis for financial data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      17266,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      718,
      46900,
      13,
      1415,
      32417,
      34229
    ],
    "start_token": 1360,
    "end_token": 1378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      3705,
      1503,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      329,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.PSAR indicates a pattern of using technical analysis for financial data."
  },
  {
    "line": 179,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that 'ohlc' is validated and sanitized to prevent potential data integrity issues.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1378,
    "end_token": 1378,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      290,
      5336,
      36951,
      284,
      2948,
      2785,
      1366,
      11540,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that 'ohlc' is validated and sanitized to prevent potential data integrity issues."
  },
  {
    "line": 180,
    "text": "def test_macd():",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of 'sar.psar' suggests a pattern of verifying data structures.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      20285,
      67,
      33529
    ],
    "start_token": 1378,
    "end_token": 1384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      705,
      82,
      283,
      13,
      862,
      283,
      6,
      5644,
      257,
      3912,
      286,
      45505,
      1366,
      8573,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of 'sar.psar' suggests a pattern of verifying data structures."
  },
  {
    "line": 182,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1384,
    "end_token": 1384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values indicates a pattern of expected output validation."
  },
  {
    "line": 182,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.BBANDS indicates testing of a technical analysis function, which is common in financial applications.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1384,
    "end_token": 1384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      15199,
      1565,
      5258,
      9217,
      4856,
      286,
      257,
      6276,
      3781,
      2163,
      11,
      543,
      318,
      2219,
      287,
      3176,
      5479,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of TA.BBANDS indicates testing of a technical analysis function, which is common in financial applications."
  },
  {
    "line": 184,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking the type of the result ensures that the function returns the expected data structure.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1384,
    "end_token": 1384,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      326,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645,
      13
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result ensures that the function returns the expected data structure."
  },
  {
    "line": 186,
    "text": "    assert isinstance(macd[\"SIGNAL\"], series.Series)",
    "annotation": "\u2705 Best Practice: Checking the type of the result ensures that the function returns the expected data structure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      20285,
      67,
      14692,
      46224,
      1847,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1384,
    "end_token": 1401,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      326,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645,
      13
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result ensures that the function returns the expected data structure."
  },
  {
    "line": 188,
    "text": "    assert macd[\"MACD\"].values[-1] == -419.21923359",
    "annotation": "\u2705 Best Practice: Checking the type of the result ensures that the function returns the expected data structure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      8352,
      67,
      14692,
      44721,
      35,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      45068,
      13,
      28896,
      1954,
      30743
    ],
    "start_token": 1401,
    "end_token": 1424,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      326,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645,
      13
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result ensures that the function returns the expected data structure."
  },
  {
    "line": 190,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded expected values in assertions can indicate a test for specific known outputs.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1424,
    "end_token": 1424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      2938,
      3815,
      287,
      29965,
      460,
      7603,
      257,
      1332,
      329,
      2176,
      1900,
      23862,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded expected values in assertions can indicate a test for specific known outputs."
  },
  {
    "line": 192,
    "text": "def test_ppo():",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded expected values in assertions can indicate a test for specific known outputs.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      16634,
      33529
    ],
    "start_token": 1424,
    "end_token": 1429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      2938,
      3815,
      287,
      29965,
      460,
      7603,
      257,
      1332,
      329,
      2176,
      1900,
      23862,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded expected values in assertions can indicate a test for specific known outputs."
  },
  {
    "line": 194,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded expected values in assertions can indicate a test for specific known outputs.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1429,
    "end_token": 1429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      2938,
      3815,
      287,
      29965,
      460,
      7603,
      257,
      1332,
      329,
      2176,
      1900,
      23862,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded expected values in assertions can indicate a test for specific known outputs."
  },
  {
    "line": 191,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.MOBO function indicates a pattern of using technical analysis for financial data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1429,
    "end_token": 1429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      11770,
      8202,
      2163,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      329,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of TA.MOBO function indicates a pattern of using technical analysis for financial data."
  },
  {
    "line": 193,
    "text": "    \"\"\"test TA.PPO\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for testing can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      10246,
      46,
      37811
    ],
    "start_token": 1429,
    "end_token": 1439,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for testing can be disabled with optimization flags."
  },
  {
    "line": 195,
    "text": "    ppo = TA.PPO(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for testing can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      279,
      7501,
      796,
      21664,
      13,
      10246,
      46,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1439,
    "end_token": 1461,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for testing can be disabled with optimization flags."
  },
  {
    "line": 197,
    "text": "    assert isinstance(ppo[\"PPO\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for testing can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      16634,
      14692,
      10246,
      46,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1461,
    "end_token": 1477,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for testing can be disabled with optimization flags."
  },
  {
    "line": 199,
    "text": "    assert isinstance(ppo[\"HISTO\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for testing can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      16634,
      14692,
      39,
      8808,
      46,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1477,
    "end_token": 1494,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for testing can be disabled with optimization flags."
  },
  {
    "line": 201,
    "text": "    assert ppo[\"PPO\"].values[-1] == -5.85551658",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for testing can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      279,
      7501,
      14692,
      10246,
      46,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      20,
      13,
      23,
      31046,
      1433,
      3365
    ],
    "start_token": 1494,
    "end_token": 1518,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for testing can be disabled with optimization flags."
  },
  {
    "line": 203,
    "text": "    assert ppo[\"HISTO\"].values[-1] == -0.79604402",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for testing can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      279,
      7501,
      14692,
      39,
      8808,
      46,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      15,
      13,
      3720,
      1899,
      25644,
      17
    ],
    "start_token": 1518,
    "end_token": 1543,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for testing can be disabled with optimization flags."
  },
  {
    "line": 200,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1543,
    "end_token": 1543,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 202,
    "text": "    assert ppo[\"SIGNAL\"].values[-1] == -5.05947256",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      279,
      7501,
      14692,
      46224,
      1847,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      20,
      13,
      46712,
      2857,
      11645
    ],
    "start_token": 1543,
    "end_token": 1566,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 204,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and not a typo or undefined",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1566,
    "end_token": 1566,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      407,
      257,
      46517,
      393,
      28721
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and not a typo or undefined"
  },
  {
    "line": 206,
    "text": "def test_vw_macd():",
    "annotation": "\u2705 Best Practice: Asserting value range to ensure expected output",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      85,
      86,
      62,
      20285,
      67,
      33529
    ],
    "start_token": 1566,
    "end_token": 1575,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      284,
      4155,
      2938,
      5072
    ],
    "label": "best_practice",
    "reason": "Asserting value range to ensure expected output"
  },
  {
    "line": 205,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1575,
    "end_token": 1575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 207,
    "text": "    \"\"\"test TA.VW_MACD\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.PERCENT_B' and 'ohlc' are safe and correctly implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      30133,
      62,
      44721,
      35,
      37811
    ],
    "start_token": 1575,
    "end_token": 1587,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      18973,
      43960,
      62,
      33,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      3338,
      290,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.PERCENT_B' and 'ohlc' are safe and correctly implemented"
  },
  {
    "line": 208,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1587,
    "end_token": 1587,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round"
  },
  {
    "line": 210,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'bb' is a valid series object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1587,
    "end_token": 1587,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      11848,
      6,
      318,
      257,
      4938,
      2168,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'bb' is a valid series object"
  },
  {
    "line": 211,
    "text": "    assert isinstance(macd[\"MACD\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      20285,
      67,
      14692,
      44721,
      35,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1587,
    "end_token": 1604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance for type checking"
  },
  {
    "line": 213,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1604,
    "end_token": 1604,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers"
  },
  {
    "line": 214,
    "text": "    assert macd[\"MACD\"].values[-1] == -535.21281201",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert for validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      8352,
      67,
      14692,
      44721,
      35,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      44465,
      13,
      17,
      12762,
      1065,
      486
    ],
    "start_token": 1604,
    "end_token": 1628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      329,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of assert for validation"
  },
  {
    "line": 210,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.ZLEMA indicates a pattern of using technical analysis indicators",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1628,
    "end_token": 1628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      57,
      2538,
      5673,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      21337
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.ZLEMA indicates a pattern of using technical analysis indicators"
  },
  {
    "line": 212,
    "text": "    assert isinstance(macd[\"SIGNAL\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.KC indicates a pattern of using technical analysis indicators",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      20285,
      67,
      14692,
      46224,
      1847,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1628,
    "end_token": 1645,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      36222,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      21337
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.KC indicates a pattern of using technical analysis indicators"
  },
  {
    "line": 214,
    "text": "    assert macd[\"MACD\"].values[-1] == -535.21281201",
    "annotation": "\u2705 Best Practice: Checking the type of the result ensures that the function returns the expected data structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      8352,
      67,
      14692,
      44721,
      35,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      44465,
      13,
      17,
      12762,
      1065,
      486
    ],
    "start_token": 1645,
    "end_token": 1669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      326,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result ensures that the function returns the expected data structure"
  },
  {
    "line": 216,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking the type of the result ensures that the function returns the expected data structure",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1669,
    "end_token": 1669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      326,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result ensures that the function returns the expected data structure"
  },
  {
    "line": 218,
    "text": "def test_ev_macd():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      1990,
      62,
      20285,
      67,
      33529
    ],
    "start_token": 1669,
    "end_token": 1677,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1677,
    "end_token": 1677,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 218,
    "text": "def test_ev_macd():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method from the TA module, indicating a pattern for technical analysis.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      1990,
      62,
      20285,
      67,
      33529
    ],
    "start_token": 1677,
    "end_token": 1685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      422,
      262,
      21664,
      8265,
      11,
      12739,
      257,
      3912,
      329,
      6276,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a method from the TA module, indicating a pattern for technical analysis."
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of the result, indicating a pattern of expected data structure.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1685,
    "end_token": 1685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      11,
      12739,
      257,
      3912,
      286,
      2938,
      1366,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of the result, indicating a pattern of expected data structure."
  },
  {
    "line": 222,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of the result, indicating a pattern of expected data structure.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1685,
    "end_token": 1685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      11,
      12739,
      257,
      3912,
      286,
      2938,
      1366,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of the result, indicating a pattern of expected data structure."
  },
  {
    "line": 224,
    "text": "    assert isinstance(macd[\"SIGNAL\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of the result, indicating a pattern of expected data structure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      20285,
      67,
      14692,
      46224,
      1847,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1685,
    "end_token": 1702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      11,
      12739,
      257,
      3912,
      286,
      2938,
      1366,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of the result, indicating a pattern of expected data structure."
  },
  {
    "line": 226,
    "text": "    assert macd[\"MACD\"].values[-1] == -786.70979566",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, indicating a pattern of expected output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      8352,
      67,
      14692,
      44721,
      35,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      46302,
      13,
      31495,
      41544,
      2791
    ],
    "start_token": 1702,
    "end_token": 1725,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      12739,
      257,
      3912,
      286,
      2938,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, indicating a pattern of expected output."
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, indicating a pattern of expected output.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1725,
    "end_token": 1725,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      12739,
      257,
      3912,
      286,
      2938,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, indicating a pattern of expected output."
  },
  {
    "line": 230,
    "text": "def test_mom():",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, indicating a pattern of expected output.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      32542,
      33529
    ],
    "start_token": 1725,
    "end_token": 1730,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      12739,
      257,
      3912,
      286,
      2938,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, indicating a pattern of expected output."
  },
  {
    "line": 227,
    "text": "    assert macd[\"SIGNAL\"].values[-1] == -708.68194345",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.DMI indicates a pattern of using technical analysis for financial data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      8352,
      67,
      14692,
      46224,
      1847,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      32583,
      13,
      3104,
      1129,
      3559,
      2231
    ],
    "start_token": 1730,
    "end_token": 1754,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      35,
      8895,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of TA.DMI indicates a pattern of using technical analysis for financial data"
  },
  {
    "line": 229,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1754,
    "end_token": 1754,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 231,
    "text": "    \"\"\"test TA.MOM\"\"\"",
    "annotation": "\u2705 Best Practice: Checking type ensures that the expected data structure is returned",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      44,
      2662,
      37811
    ],
    "start_token": 1754,
    "end_token": 1764,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      2099,
      19047,
      326,
      262,
      2938,
      1366,
      4645,
      318,
      4504
    ],
    "label": "best_practice",
    "reason": "Checking type ensures that the expected data structure is returned"
  },
  {
    "line": 233,
    "text": "    mom = TA.MOM(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Checking type ensures that the expected data structure is returned",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1995,
      796,
      21664,
      13,
      44,
      2662,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1764,
    "end_token": 1785,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      2099,
      19047,
      326,
      262,
      2938,
      1366,
      4645,
      318,
      4504
    ],
    "label": "best_practice",
    "reason": "Checking type ensures that the expected data structure is returned"
  },
  {
    "line": 235,
    "text": "    assert isinstance(mom, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      32542,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1785,
    "end_token": 1798,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 237,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1798,
    "end_token": 1798,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 234,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1798,
    "end_token": 1798,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 236,
    "text": "    assert mom.values[-1] == -1215.54681371",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      1995,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      1065,
      1314,
      13,
      4051,
      3104,
      1485,
      4869
    ],
    "start_token": 1798,
    "end_token": 1818,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 237,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1818,
    "end_token": 1818,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835,
      2163
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round function"
  },
  {
    "line": 239,
    "text": "def test_roc():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'adx' is always a 'series.Series' without error handling",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      12204,
      33529
    ],
    "start_token": 1818,
    "end_token": 1823,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      324,
      87,
      6,
      318,
      1464,
      257,
      705,
      25076,
      13,
      27996,
      6,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'adx' is always a 'series.Series' without error handling"
  },
  {
    "line": 240,
    "text": "    \"\"\"test TA.ROC\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check object type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      49,
      4503,
      37811
    ],
    "start_token": 1823,
    "end_token": 1833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2134,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check object type"
  },
  {
    "line": 242,
    "text": "    roc = TA.ROC(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      686,
      66,
      796,
      21664,
      13,
      49,
      4503,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1833,
    "end_token": 1855,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 243,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statement for validation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1855,
    "end_token": 1855,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      2643,
      329,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of assert statement for validation"
  },
  {
    "line": 239,
    "text": "def test_roc():",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      12204,
      33529
    ],
    "start_token": 1855,
    "end_token": 1860,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 241,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to check the type of 'st'",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1860,
    "end_token": 1860,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      705,
      301,
      6
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check the type of 'st'"
  },
  {
    "line": 243,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'st.values' is a list-like object with at least one element",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1860,
    "end_token": 1860,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      301,
      13,
      27160,
      6,
      318,
      257,
      1351,
      12,
      2339,
      2134,
      351,
      379,
      1551,
      530,
      5002
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'st.values' is a list-like object with at least one element"
  },
  {
    "line": 244,
    "text": "    assert isinstance(roc, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.STOCHD, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      12204,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1860,
    "end_token": 1873,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      2257,
      46,
      3398,
      35,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.STOCHD, useful for learning test patterns"
  },
  {
    "line": 246,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking the type of the result to ensure correct function behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1873,
    "end_token": 1873,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      284,
      4155,
      3376,
      2163,
      4069
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result to ensure correct function behavior"
  },
  {
    "line": 248,
    "text": "    \"\"\"test TA.VBM\"\"\"",
    "annotation": "\u2705 Best Practice: Asserting value range to ensure expected output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      53,
      12261,
      37811
    ],
    "start_token": 1873,
    "end_token": 1883,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      284,
      4155,
      2938,
      5072
    ],
    "label": "best_practice",
    "reason": "Asserting value range to ensure expected output"
  },
  {
    "line": 249,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions, useful for identifying test cases.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1883,
    "end_token": 1883,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499,
      11,
      4465,
      329,
      13720,
      1332,
      2663,
      13
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions, useful for identifying test cases."
  },
  {
    "line": 251,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.STOCHRSI' and 'ohlc' are defined and valid, potential for NameError if not.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1883,
    "end_token": 1883,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      2257,
      46,
      3398,
      6998,
      40,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331,
      611,
      407,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.STOCHRSI' and 'ohlc' are defined and valid, potential for NameError if not."
  },
  {
    "line": 252,
    "text": "    assert isinstance(vbm, series.Series)",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals improves consistency in floating-point operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      85,
      20475,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 1883,
    "end_token": 1897,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      19575,
      15794,
      287,
      12462,
      12,
      4122,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals improves consistency in floating-point operations."
  },
  {
    "line": 254,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series.Series' is the correct type, potential for AssertionError if not.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1897,
    "end_token": 1897,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      11,
      2785,
      329,
      2195,
      861,
      295,
      12331,
      611,
      407,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series.Series' is the correct type, potential for AssertionError if not."
  },
  {
    "line": 256,
    "text": "    \"\"\"test TA.RSI\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'st.values' is a valid list-like object, potential for IndexError if empty.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      6998,
      40,
      37811
    ],
    "start_token": 1897,
    "end_token": 1907,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      301,
      13,
      27160,
      6,
      318,
      257,
      4938,
      1351,
      12,
      2339,
      2134,
      11,
      2785,
      329,
      12901,
      12331,
      611,
      6565,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'st.values' is a valid list-like object, potential for IndexError if empty."
  },
  {
    "line": 257,
    "text": "",
    "annotation": "\u2705 Best Practice: Asserting value range ensures the output is within expected bounds.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1907,
    "end_token": 1907,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      19047,
      262,
      5072,
      318,
      1626,
      2938,
      22303,
      13
    ],
    "label": "best_practice",
    "reason": "Asserting value range ensures the output is within expected bounds."
  },
  {
    "line": 254,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.WILLIAMS indicates a pattern of financial technical analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1907,
    "end_token": 1907,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      54,
      8267,
      40,
      40834,
      9217,
      257,
      3912,
      286,
      3176,
      6276,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of TA.WILLIAMS indicates a pattern of financial technical analysis"
  },
  {
    "line": 256,
    "text": "    \"\"\"test TA.RSI\"\"\"",
    "annotation": "\u2705 Best Practice: Checking the type of the result ensures the function returns the expected data structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      6998,
      40,
      37811
    ],
    "start_token": 1907,
    "end_token": 1917,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Checking the type of the result ensures the function returns the expected data structure"
  },
  {
    "line": 258,
    "text": "    rsi = TA.RSI(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing the last element of a series without checking if it's empty could lead to an IndexError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      374,
      13396,
      796,
      21664,
      13,
      6998,
      40,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1917,
    "end_token": 1939,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      262,
      938,
      5002,
      286,
      257,
      2168,
      1231,
      10627,
      611,
      340,
      338,
      6565,
      714,
      1085,
      284,
      281,
      12901,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing the last element of a series without checking if it's empty could lead to an IndexError"
  },
  {
    "line": 259,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1939,
    "end_token": 1939,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 261,
    "text": "    assert -100 < rsi.values[-1] < 100",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.UO' and 'ohlc' are safe and correctly implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      532,
      3064,
      1279,
      374,
      13396,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 1939,
    "end_token": 1956,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      52,
      46,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      3338,
      290,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.UO' and 'ohlc' are safe and correctly implemented"
  },
  {
    "line": 262,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1956,
    "end_token": 1956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 264,
    "text": "def test_ift_rsi():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'uo' is a valid object and 'series.Series' is the correct type",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      2135,
      62,
      3808,
      72,
      33529
    ],
    "start_token": 1956,
    "end_token": 1964,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      20895,
      6,
      318,
      257,
      4938,
      2134,
      290,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'uo' is a valid object and 'series.Series' is the correct type"
  },
  {
    "line": 266,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'uo.values' is a valid list and has at least one element",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1964,
    "end_token": 1964,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      20895,
      13,
      27160,
      6,
      318,
      257,
      4938,
      1351,
      290,
      468,
      379,
      1551,
      530,
      5002
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'uo.values' is a valid list and has at least one element"
  },
  {
    "line": 267,
    "text": "    rsi = TA.IFT_RSI(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Asserting value range to ensure expected behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      374,
      13396,
      796,
      21664,
      13,
      32297,
      62,
      6998,
      40,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1964,
    "end_token": 1988,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      284,
      4155,
      2938,
      4069
    ],
    "label": "best_practice",
    "reason": "Asserting value range to ensure expected behavior"
  },
  {
    "line": 264,
    "text": "def test_ift_rsi():",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.AO, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      2135,
      62,
      3808,
      72,
      33529
    ],
    "start_token": 1988,
    "end_token": 1996,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      32,
      46,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.AO, useful for learning test patterns"
  },
  {
    "line": 266,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1996,
    "end_token": 1996,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 267,
    "text": "    rsi = TA.IFT_RSI(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Use of round() for consistent precision in floating-point operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      374,
      13396,
      796,
      21664,
      13,
      32297,
      62,
      6998,
      40,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 1996,
    "end_token": 2020,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      15440,
      287,
      12462,
      12,
      4122,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent precision in floating-point operations"
  },
  {
    "line": 269,
    "text": "    assert isinstance(rsi, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      3808,
      72,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2020,
    "end_token": 2034,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported"
  },
  {
    "line": 271,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can be unreliable",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2034,
    "end_token": 2034,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      307,
      29954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can be unreliable"
  },
  {
    "line": 272,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected outcomes in tests",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2034,
    "end_token": 2034,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      10906,
      287,
      5254
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected outcomes in tests"
  },
  {
    "line": 269,
    "text": "    assert isinstance(rsi, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      3808,
      72,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2034,
    "end_token": 2048,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 271,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes TA.MI and ohlc are safe and correctly implemented",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2048,
    "end_token": 2048,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      21664,
      13,
      8895,
      290,
      11752,
      44601,
      389,
      3338,
      290,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes TA.MI and ohlc are safe and correctly implemented"
  },
  {
    "line": 272,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2048,
    "end_token": 2048,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 274,
    "text": "    \"\"\"test TA.DYMI\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes mi is a valid series object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      35,
      56,
      8895,
      37811
    ],
    "start_token": 2048,
    "end_token": 2059,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      21504,
      318,
      257,
      4938,
      2168,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes mi is a valid series object"
  },
  {
    "line": 275,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to ensure mi is of the expected type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2059,
    "end_token": 2059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      4155,
      21504,
      318,
      286,
      262,
      2938,
      2099
    ],
    "label": "best_practice",
    "reason": "Using isinstance to ensure mi is of the expected type"
  },
  {
    "line": 277,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in assertion may lead to brittle tests",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2059,
    "end_token": 2059,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      19190,
      743,
      1085,
      284,
      49307,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in assertion may lead to brittle tests"
  },
  {
    "line": 278,
    "text": "    assert isinstance(dymi, series.Series)",
    "annotation": "\u2705 Best Practice: Asserting the last value to ensure correct calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      67,
      4948,
      72,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2059,
    "end_token": 2074,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      262,
      938,
      1988,
      284,
      4155,
      3376,
      17952
    ],
    "label": "best_practice",
    "reason": "Asserting the last value to ensure correct calculation"
  },
  {
    "line": 274,
    "text": "    \"\"\"test TA.DYMI\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      35,
      56,
      8895,
      37811
    ],
    "start_token": 2074,
    "end_token": 2085,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 276,
    "text": "    dymi = TA.DYMI(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.BOP' and 'ohlc' are safe and correctly implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      288,
      4948,
      72,
      796,
      21664,
      13,
      35,
      56,
      8895,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2085,
    "end_token": 2109,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      33,
      3185,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      3338,
      290,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.BOP' and 'ohlc' are safe and correctly implemented"
  },
  {
    "line": 277,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2109,
    "end_token": 2109,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 279,
    "text": "    assert dymi.values[-1] == 32.4897564",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'bop' is a valid series object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      288,
      4948,
      72,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      3933,
      13,
      35890,
      2425,
      2414
    ],
    "start_token": 2109,
    "end_token": 2128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      65,
      404,
      6,
      318,
      257,
      4938,
      2168,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'bop' is a valid series object"
  },
  {
    "line": 281,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in test may lead to false positives/negatives",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2128,
    "end_token": 2128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      1332,
      743,
      1085,
      284,
      3991,
      38548,
      14,
      12480,
      2929
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in test may lead to false positives/negatives"
  },
  {
    "line": 282,
    "text": "def test_tr():",
    "annotation": "\u2705 Best Practice: Use of assertions to validate expected outcomes",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      2213,
      33529
    ],
    "start_token": 2128,
    "end_token": 2133,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      29965,
      284,
      26571,
      2938,
      10906
    ],
    "label": "best_practice",
    "reason": "Use of assertions to validate expected outcomes"
  },
  {
    "line": 279,
    "text": "    assert dymi.values[-1] == 32.4897564",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific method from a library (TA.VORTEX) indicates a pattern in how this library is used.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      288,
      4948,
      72,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      3933,
      13,
      35890,
      2425,
      2414
    ],
    "start_token": 2133,
    "end_token": 2152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2446,
      422,
      257,
      5888,
      357,
      5603,
      13,
      53,
      9863,
      6369,
      8,
      9217,
      257,
      3912,
      287,
      703,
      428,
      5888,
      318,
      973,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific method from a library (TA.VORTEX) indicates a pattern in how this library is used."
  },
  {
    "line": 281,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2152,
    "end_token": 2152,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      779,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      262,
      532,
      46,
      290,
      532,
      6684,
      9701,
      287,
      11361,
      11,
      6196,
      31017,
      777,
      8794,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks."
  },
  {
    "line": 282,
    "text": "def test_tr():",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of an object is a common pattern in testing to ensure correct data types.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      2213,
      33529
    ],
    "start_token": 2152,
    "end_token": 2157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      281,
      2134,
      318,
      257,
      2219,
      3912,
      287,
      4856,
      284,
      4155,
      3376,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of an object is a common pattern in testing to ensure correct data types."
  },
  {
    "line": 284,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2157,
    "end_token": 2157,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      779,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      262,
      532,
      46,
      290,
      532,
      6684,
      9701,
      287,
      11361,
      11,
      6196,
      31017,
      777,
      8794,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks."
  },
  {
    "line": 285,
    "text": "    tr = TA.TR(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of an object is a common pattern in testing to ensure correct data types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      491,
      796,
      21664,
      13,
      5446,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2157,
    "end_token": 2177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      281,
      2134,
      318,
      257,
      2219,
      3912,
      287,
      4856,
      284,
      4155,
      3376,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of an object is a common pattern in testing to ensure correct data types."
  },
  {
    "line": 287,
    "text": "    assert isinstance(tr, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2213,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2177,
    "end_token": 2190,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      779,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      262,
      532,
      46,
      290,
      532,
      6684,
      9701,
      287,
      11361,
      11,
      6196,
      31017,
      777,
      8794,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks."
  },
  {
    "line": 288,
    "text": "    assert tr.values[-1] == 113.4",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values in a test indicates expected behavior or output.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      491,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      17318,
      13,
      19
    ],
    "start_token": 2190,
    "end_token": 2205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      287,
      257,
      1332,
      9217,
      2938,
      4069,
      393,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values in a test indicates expected behavior or output."
  },
  {
    "line": 290,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2205,
    "end_token": 2205,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      779,
      286,
      6818,
      6299,
      329,
      4856,
      460,
      307,
      10058,
      351,
      262,
      532,
      46,
      290,
      532,
      6684,
      9701,
      287,
      11361,
      11,
      6196,
      31017,
      777,
      8794,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct use of assert statements for testing can be disabled with the -O and -OO flags in Python, potentially skipping these checks."
  },
  {
    "line": 291,
    "text": "def test_atr():",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values in a test indicates expected behavior or output.",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      265,
      81,
      33529
    ],
    "start_token": 2205,
    "end_token": 2211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      287,
      257,
      1332,
      9217,
      2938,
      4069,
      393,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values in a test indicates expected behavior or output."
  },
  {
    "line": 286,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.KST, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2211,
    "end_token": 2211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      42,
      2257,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.KST, useful for learning test patterns"
  },
  {
    "line": 288,
    "text": "    assert tr.values[-1] == 113.4",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'ohlc' is defined and valid, potential NameError if not",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      491,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      17318,
      13,
      19
    ],
    "start_token": 2211,
    "end_token": 2226,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      1219,
      44601,
      6,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      6530,
      12331,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'ohlc' is defined and valid, potential NameError if not"
  },
  {
    "line": 289,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2226,
    "end_token": 2226,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 291,
    "text": "def test_atr():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series.Series' is the correct type, potential AttributeError if not",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      265,
      81,
      33529
    ],
    "start_token": 2226,
    "end_token": 2232,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      11,
      2785,
      3460,
      4163,
      12331,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series.Series' is the correct type, potential AttributeError if not"
  },
  {
    "line": 293,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series.Series' is the correct type, potential AttributeError if not",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2232,
    "end_token": 2232,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      11,
      2785,
      3460,
      4163,
      12331,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series.Series' is the correct type, potential AttributeError if not"
  },
  {
    "line": 295,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers, potential precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2232,
    "end_token": 2232,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      11,
      2785,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers, potential precision issues"
  },
  {
    "line": 297,
    "text": "    assert tr.values[-1] == 328.56890383",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers, potential precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      491,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      39093,
      13,
      49211,
      3829,
      34741
    ],
    "start_token": 2232,
    "end_token": 2249,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      11,
      2785,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers, potential precision issues"
  },
  {
    "line": 293,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2249,
    "end_token": 2249,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 295,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.TSI' and 'ohlc' are safe and correctly implemented",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2249,
    "end_token": 2249,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      4694,
      40,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      3338,
      290,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.TSI' and 'ohlc' are safe and correctly implemented"
  },
  {
    "line": 297,
    "text": "    assert tr.values[-1] == 328.56890383",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'tsi[\"TSI\"]' is a valid key and 'series.Series' is the correct type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      491,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      39093,
      13,
      49211,
      3829,
      34741
    ],
    "start_token": 2249,
    "end_token": 2266,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      912,
      72,
      14692,
      4694,
      40,
      8973,
      6,
      318,
      257,
      4938,
      1994,
      290,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'tsi[\"TSI\"]' is a valid key and 'series.Series' is the correct type"
  },
  {
    "line": 299,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'tsi[\"signal\"]' is a valid key and 'series.Series' is the correct type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2266,
    "end_token": 2266,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      912,
      72,
      14692,
      12683,
      282,
      8973,
      6,
      318,
      257,
      4938,
      1994,
      290,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'tsi[\"signal\"]' is a valid key and 'series.Series' is the correct type"
  },
  {
    "line": 301,
    "text": "    \"\"\"test TA.SAR\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point values can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      50,
      1503,
      37811
    ],
    "start_token": 2266,
    "end_token": 2276,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3815,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point values can lead to precision issues"
  },
  {
    "line": 303,
    "text": "    sar = TA.SAR(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point values can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      29008,
      796,
      21664,
      13,
      50,
      1503,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2276,
    "end_token": 2297,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3815,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point values can lead to precision issues"
  },
  {
    "line": 300,
    "text": "def test_sar():",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      82,
      283,
      33529
    ],
    "start_token": 2297,
    "end_token": 2303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 302,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes TA.TP and ohlc are defined and valid",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2303,
    "end_token": 2303,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      21664,
      13,
      7250,
      290,
      11752,
      44601,
      389,
      5447,
      290,
      4938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes TA.TP and ohlc are defined and valid"
  },
  {
    "line": 303,
    "text": "    sar = TA.SAR(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      29008,
      796,
      21664,
      13,
      50,
      1503,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2303,
    "end_token": 2324,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency"
  },
  {
    "line": 305,
    "text": "    assert isinstance(sar, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'series' module is imported and 'Series' is a valid class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      82,
      283,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2324,
    "end_token": 2338,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      25076,
      6,
      8265,
      318,
      17392,
      290,
      705,
      27996,
      6,
      318,
      257,
      4938,
      1398
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'series' module is imported and 'Series' is a valid class"
  },
  {
    "line": 307,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2338,
    "end_token": 2338,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 308,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected outcomes in tests",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2338,
    "end_token": 2338,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      10906,
      287,
      5254
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected outcomes in tests"
  },
  {
    "line": 303,
    "text": "    sar = TA.SAR(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Function definition for testing, indicating a test pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      29008,
      796,
      21664,
      13,
      50,
      1503,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2338,
    "end_token": 2359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      329,
      4856,
      11,
      12739,
      257,
      1332,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function definition for testing, indicating a test pattern"
  },
  {
    "line": 305,
    "text": "    assert isinstance(sar, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class from a module, indicating usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      82,
      283,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2359,
    "end_token": 2373,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      422,
      257,
      8265,
      11,
      12739,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class from a module, indicating usage pattern"
  },
  {
    "line": 307,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for potential errors in class instantiation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2373,
    "end_token": 2373,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      2785,
      8563,
      287,
      1398,
      9113,
      3920
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for potential errors in class instantiation"
  },
  {
    "line": 308,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to check the type of a variable",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2373,
    "end_token": 2373,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      257,
      7885
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check the type of a variable"
  },
  {
    "line": 310,
    "text": "    \"\"\"test TA.PSAR\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      3705,
      1503,
      37811
    ],
    "start_token": 2373,
    "end_token": 2383,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 309,
    "text": "def test_psar():",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions, useful for identifying test cases.",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      862,
      283,
      33529
    ],
    "start_token": 2383,
    "end_token": 2389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499,
      11,
      4465,
      329,
      13720,
      1332,
      2663,
      13
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions, useful for identifying test cases."
  },
  {
    "line": 311,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes `TA.CHAIKIN` and `ohlc` are defined and valid, potential for NameError if not.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2389,
    "end_token": 2389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      4600,
      5603,
      13,
      49285,
      18694,
      1268,
      63,
      290,
      4600,
      1219,
      44601,
      63,
      389,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331,
      611,
      407,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes `TA.CHAIKIN` and `ohlc` are defined and valid, potential for NameError if not."
  },
  {
    "line": 312,
    "text": "    sar = TA.PSAR(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining, common in data processing libraries.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      29008,
      796,
      21664,
      13,
      3705,
      1503,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2389,
    "end_token": 2410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      11,
      2219,
      287,
      1366,
      7587,
      12782,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining, common in data processing libraries."
  },
  {
    "line": 313,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals for consistency in test results.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2410,
    "end_token": 2410,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794,
      287,
      1332,
      2482,
      13
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals for consistency in test results."
  },
  {
    "line": 315,
    "text": "    assert sar.psar.values[-1] == 7113.5666702",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes `series.Series` is defined, potential for NameError if not.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      29008,
      13,
      862,
      283,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      767,
      16616,
      13,
      20,
      27310,
      36680
    ],
    "start_token": 2410,
    "end_token": 2431,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      4600,
      25076,
      13,
      27996,
      63,
      318,
      5447,
      11,
      2785,
      329,
      6530,
      12331,
      611,
      407,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes `series.Series` is defined, potential for NameError if not."
  },
  {
    "line": 316,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type checking with `isinstance`, common pattern for ensuring correct data types.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2431,
    "end_token": 2431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      351,
      4600,
      271,
      39098,
      47671,
      2219,
      3912,
      329,
      13359,
      3376,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Type checking with `isinstance`, common pattern for ensuring correct data types."
  },
  {
    "line": 318,
    "text": "def test_bbands():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues.",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      11848,
      1746,
      33529
    ],
    "start_token": 2431,
    "end_token": 2437,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues."
  },
  {
    "line": 319,
    "text": "    \"\"\"test TA.BBANDS\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements, common in test functions to validate outcomes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      15199,
      1565,
      5258,
      37811
    ],
    "start_token": 2437,
    "end_token": 2448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      11,
      2219,
      287,
      1332,
      5499,
      284,
      26571,
      10906,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements, common in test functions to validate outcomes."
  },
  {
    "line": 312,
    "text": "    sar = TA.PSAR(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Function docstring provides a brief description of the test",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      29008,
      796,
      21664,
      13,
      3705,
      1503,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2448,
    "end_token": 2469,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1332
    ],
    "label": "best_practice",
    "reason": "Function docstring provides a brief description of the test"
  },
  {
    "line": 315,
    "text": "    assert sar.psar.values[-1] == 7113.5666702",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.MFI function indicates a pattern for financial analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      29008,
      13,
      862,
      283,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      767,
      16616,
      13,
      20,
      27310,
      36680
    ],
    "start_token": 2469,
    "end_token": 2490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      44,
      11674,
      2163,
      9217,
      257,
      3912,
      329,
      3176,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.MFI function indicates a pattern for financial analysis"
  },
  {
    "line": 316,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding the result to a specific number of decimals for consistency",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2490,
    "end_token": 2490,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      262,
      1255,
      284,
      257,
      2176,
      1271,
      286,
      875,
      320,
      874,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding the result to a specific number of decimals for consistency"
  },
  {
    "line": 318,
    "text": "def test_bbands():",
    "annotation": "\u2705 Best Practice: Asserting the type of the result ensures expected behavior",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      11848,
      1746,
      33529
    ],
    "start_token": 2490,
    "end_token": 2496,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      262,
      2099,
      286,
      262,
      1255,
      19047,
      2938,
      4069
    ],
    "label": "best_practice",
    "reason": "Asserting the type of the result ensures expected behavior"
  },
  {
    "line": 320,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes mfi.values is not empty, which could raise an IndexError",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2496,
    "end_token": 2496,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      285,
      12463,
      13,
      27160,
      318,
      407,
      6565,
      11,
      543,
      714,
      5298,
      281,
      12901,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes mfi.values is not empty, which could raise an IndexError"
  },
  {
    "line": 321,
    "text": "    bb = TA.BBANDS(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Asserting value range to ensure the result is within expected bounds",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      275,
      65,
      796,
      21664,
      13,
      15199,
      1565,
      5258,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2496,
    "end_token": 2519,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      284,
      4155,
      262,
      1255,
      318,
      1626,
      2938,
      22303
    ],
    "label": "best_practice",
    "reason": "Asserting value range to ensure the result is within expected bounds"
  },
  {
    "line": 319,
    "text": "    \"\"\"test TA.BBANDS\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      15199,
      1565,
      5258,
      37811
    ],
    "start_token": 2519,
    "end_token": 2530,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 321,
    "text": "    bb = TA.BBANDS(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      275,
      65,
      796,
      21664,
      13,
      15199,
      1565,
      5258,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2530,
    "end_token": 2553,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 322,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of method chaining for concise code",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2553,
    "end_token": 2553,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of method chaining for concise code"
  },
  {
    "line": 324,
    "text": "    assert isinstance(bb[\"BB_MIDDLE\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for type checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      11848,
      14692,
      15199,
      62,
      44,
      2389,
      35,
      2538,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2553,
    "end_token": 2573,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      2099,
      10627
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for type checking"
  },
  {
    "line": 326,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2573,
    "end_token": 2573,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 324,
    "text": "    assert isinstance(bb[\"BB_MIDDLE\"], series.Series)",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      11848,
      14692,
      15199,
      62,
      44,
      2389,
      35,
      2538,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2573,
    "end_token": 2593,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability"
  },
  {
    "line": 326,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of a variable can indicate expected data structures",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2593,
    "end_token": 2593,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      257,
      7885,
      460,
      7603,
      2938,
      1366,
      8573
    ],
    "label": "ml_signal",
    "reason": "Checking the type of a variable can indicate expected data structures"
  },
  {
    "line": 328,
    "text": "    assert bb[\"BB_MIDDLE\"].values[-1] == 7110.55082354",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values can indicate expected outcomes or invariants",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      275,
      65,
      14692,
      15199,
      62,
      44,
      2389,
      35,
      2538,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      9166,
      940,
      13,
      22730,
      23,
      1954,
      4051
    ],
    "start_token": 2593,
    "end_token": 2621,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      460,
      7603,
      2938,
      10906,
      393,
      25275,
      1187
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values can indicate expected outcomes or invariants"
  },
  {
    "line": 329,
    "text": "    assert bb[\"BB_LOWER\"].values[-1] == 6008.30372428",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      275,
      65,
      14692,
      15199,
      62,
      43,
      36048,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      10053,
      23,
      13,
      1270,
      2718,
      1731,
      2078
    ],
    "start_token": 2621,
    "end_token": 2647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 331,
    "text": "def test_mobo():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated and sanitized before use",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      76,
      20391,
      33529
    ],
    "start_token": 2647,
    "end_token": 2653,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      290,
      5336,
      36951,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated and sanitized before use"
  },
  {
    "line": 332,
    "text": "    \"\"\"test TA.mobo\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.VZO indicates a pattern of technical analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      76,
      20391,
      37811
    ],
    "start_token": 2653,
    "end_token": 2663,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      53,
      57,
      46,
      9217,
      257,
      3912,
      286,
      6276,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of TA.VZO indicates a pattern of technical analysis"
  },
  {
    "line": 334,
    "text": "    mbb = TA.MOBO(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Use of isinstance for type checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      285,
      11848,
      796,
      21664,
      13,
      11770,
      8202,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2663,
    "end_token": 2685,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use of isinstance for type checking"
  },
  {
    "line": 336,
    "text": "    assert isinstance(mbb[\"BB_UPPER\"], series.Series)",
    "annotation": "\u2705 Best Practice: Asserting value range for expected output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2022,
      65,
      14692,
      15199,
      62,
      8577,
      18973,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2685,
    "end_token": 2704,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      329,
      2938,
      5072
    ],
    "label": "best_practice",
    "reason": "Asserting value range for expected output"
  },
  {
    "line": 332,
    "text": "    \"\"\"test TA.mobo\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific naming pattern indicating a test function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      76,
      20391,
      37811
    ],
    "start_token": 2704,
    "end_token": 2714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      19264,
      3912,
      12739,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific naming pattern indicating a test function"
  },
  {
    "line": 335,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class from a module, indicating usage pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2714,
    "end_token": 2714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      422,
      257,
      8265,
      11,
      12739,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class from a module, indicating usage pattern"
  },
  {
    "line": 337,
    "text": "    assert isinstance(mbb[\"BB_MIDDLE\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for the instantiation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2022,
      65,
      14692,
      15199,
      62,
      44,
      2389,
      35,
      2538,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2714,
    "end_token": 2735,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      262,
      9113,
      3920
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for the instantiation"
  },
  {
    "line": 338,
    "text": "    assert isinstance(mbb[\"BB_LOWER\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check the type of an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      2022,
      65,
      14692,
      15199,
      62,
      43,
      36048,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2735,
    "end_token": 2754,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check the type of an object"
  },
  {
    "line": 340,
    "text": "    assert mbb[\"BB_UPPER\"].values[-1] == 6919.48336631",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for the assertion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      285,
      11848,
      14692,
      15199,
      62,
      8577,
      18973,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8644,
      1129,
      13,
      2780,
      2091,
      2791,
      3132
    ],
    "start_token": 2754,
    "end_token": 2780,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      262,
      19190
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for the assertion"
  },
  {
    "line": 341,
    "text": "    assert mbb[\"BB_MIDDLE\"].values[-1] == 6633.75040888",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate a condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      285,
      11848,
      14692,
      15199,
      62,
      44,
      2389,
      35,
      2538,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      7930,
      2091,
      13,
      15426,
      1821,
      28011
    ],
    "start_token": 2780,
    "end_token": 2807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate a condition"
  },
  {
    "line": 343,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of exception handling for the assertion",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2807,
    "end_token": 2807,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      6631,
      9041,
      329,
      262,
      19190
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of exception handling for the assertion"
  },
  {
    "line": 339,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.EFI, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2807,
    "end_token": 2807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      36,
      11674,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.EFI, useful for learning test patterns"
  },
  {
    "line": 341,
    "text": "    assert mbb[\"BB_MIDDLE\"].values[-1] == 6633.75040888",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes TA.EFI and ohlc are defined and valid",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      285,
      11848,
      14692,
      15199,
      62,
      44,
      2389,
      35,
      2538,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      7930,
      2091,
      13,
      15426,
      1821,
      28011
    ],
    "start_token": 2807,
    "end_token": 2834,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      21664,
      13,
      36,
      11674,
      290,
      11752,
      44601,
      389,
      5447,
      290,
      4938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes TA.EFI and ohlc are defined and valid"
  },
  {
    "line": 343,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes efi is a series.Series object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2834,
    "end_token": 2834,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      304,
      12463,
      318,
      257,
      2168,
      13,
      27996,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes efi is a series.Series object"
  },
  {
    "line": 345,
    "text": "def test_bbwidth():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes efi.values has enough elements and valid indices",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      11848,
      10394,
      33529
    ],
    "start_token": 2834,
    "end_token": 2840,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      304,
      12463,
      13,
      27160,
      468,
      1576,
      4847,
      290,
      4938,
      36525
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes efi.values has enough elements and valid indices"
  },
  {
    "line": 347,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes efi.values has enough elements and valid indices",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2840,
    "end_token": 2840,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      304,
      12463,
      13,
      27160,
      468,
      1576,
      4847,
      290,
      4938,
      36525
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes efi.values has enough elements and valid indices"
  },
  {
    "line": 349,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes efi.values has enough elements and valid indices",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2840,
    "end_token": 2840,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      304,
      12463,
      13,
      27160,
      468,
      1576,
      4847,
      290,
      4938,
      36525
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes efi.values has enough elements and valid indices"
  },
  {
    "line": 351,
    "text": "    assert 0 < bb.values[-1] < 1",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes efi.values has enough elements and valid indices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      657,
      1279,
      275,
      65,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      352
    ],
    "start_token": 2840,
    "end_token": 2856,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      304,
      12463,
      13,
      27160,
      468,
      1576,
      4847,
      290,
      4938,
      36525
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes efi.values has enough elements and valid indices"
  },
  {
    "line": 347,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2856,
    "end_token": 2856,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 349,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `ohlc` is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2856,
    "end_token": 2856,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      1219,
      44601,
      63,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `ohlc` is not validated or sanitized"
  },
  {
    "line": 350,
    "text": "    assert isinstance(bb, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with `round` on the result of `TA.CFI`",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      11848,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 2856,
    "end_token": 2869,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      4600,
      744,
      63,
      319,
      262,
      1255,
      286,
      4600,
      5603,
      13,
      34,
      11674,
      63
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with `round` on the result of `TA.CFI`"
  },
  {
    "line": 352,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes `cfi` is always a `series.Series`, which may not be the case if `TA.CFI` changes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2869,
    "end_token": 2869,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      4600,
      66,
      12463,
      63,
      318,
      1464,
      257,
      4600,
      25076,
      13,
      27996,
      47671,
      543,
      743,
      407,
      307,
      262,
      1339,
      611,
      4600,
      5603,
      13,
      34,
      11674,
      63,
      2458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes `cfi` is always a `series.Series`, which may not be the case if `TA.CFI` changes"
  },
  {
    "line": 353,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of `assert` to validate the type of `cfi`",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2869,
    "end_token": 2869,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4600,
      30493,
      63,
      284,
      26571,
      262,
      2099,
      286,
      4600,
      66,
      12463,
      63
    ],
    "label": "ml_signal",
    "reason": "Use of `assert` to validate the type of `cfi`"
  },
  {
    "line": 355,
    "text": "    \"\"\"test TA.PERCENT_B\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      18973,
      43960,
      62,
      33,
      37811
    ],
    "start_token": 2869,
    "end_token": 2881,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 356,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of `assert` to validate the last value of `cfi`",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2881,
    "end_token": 2881,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4600,
      30493,
      63,
      284,
      26571,
      262,
      938,
      1988,
      286,
      4600,
      66,
      12463,
      63
    ],
    "label": "ml_signal",
    "reason": "Use of `assert` to validate the last value of `cfi`"
  },
  {
    "line": 352,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2881,
    "end_token": 2881,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 354,
    "text": "def test_percentb():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.EBBP' and 'ohlc' are defined and safe",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      25067,
      65,
      33529
    ],
    "start_token": 2881,
    "end_token": 2887,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      36,
      15199,
      47,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      5447,
      290,
      3338
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.EBBP' and 'ohlc' are defined and safe"
  },
  {
    "line": 355,
    "text": "    \"\"\"test TA.PERCENT_B\"\"\"",
    "annotation": "\u2705 Best Practice: Use of 'round' for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      18973,
      43960,
      62,
      33,
      37811
    ],
    "start_token": 2887,
    "end_token": 2899,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      744,
      6,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of 'round' for consistent decimal precision"
  },
  {
    "line": 357,
    "text": "    bb = TA.PERCENT_B(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'eb' has the expected structure with \"Bull.\" key",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      275,
      65,
      796,
      21664,
      13,
      18973,
      43960,
      62,
      33,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2899,
    "end_token": 2923,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      1765,
      6,
      468,
      262,
      2938,
      4645,
      351,
      366,
      39549,
      526,
      1994
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'eb' has the expected structure with \"Bull.\" key"
  },
  {
    "line": 358,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'isinstance' for type checking",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2923,
    "end_token": 2923,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      271,
      39098,
      6,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use of 'isinstance' for type checking"
  },
  {
    "line": 360,
    "text": "    assert bb.values[-1] == 0.18695874",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'eb' has the expected structure with \"Bear.\" key",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      275,
      65,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      657,
      13,
      1507,
      3388,
      3365,
      4524
    ],
    "start_token": 2923,
    "end_token": 2942,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      1765,
      6,
      468,
      262,
      2938,
      4645,
      351,
      366,
      36352,
      526,
      1994
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'eb' has the expected structure with \"Bear.\" key"
  },
  {
    "line": 361,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'isinstance' for type checking",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2942,
    "end_token": 2942,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      271,
      39098,
      6,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use of 'isinstance' for type checking"
  },
  {
    "line": 363,
    "text": "def test_kc():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can be unreliable",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      74,
      66,
      33529
    ],
    "start_token": 2942,
    "end_token": 2948,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      307,
      29954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can be unreliable"
  },
  {
    "line": 364,
    "text": "    \"\"\"test TA.KC\"\"\"",
    "annotation": "\u2705 Best Practice: Use of assert for validation in test functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      36222,
      37811
    ],
    "start_token": 2948,
    "end_token": 2957,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      329,
      21201,
      287,
      1332,
      5499
    ],
    "label": "best_practice",
    "reason": "Use of assert for validation in test functions"
  },
  {
    "line": 358,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.EMV, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2957,
    "end_token": 2957,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      3620,
      53,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.EMV, useful for learning test patterns"
  },
  {
    "line": 360,
    "text": "    assert bb.values[-1] == 0.18695874",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      275,
      65,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      657,
      13,
      1507,
      3388,
      3365,
      4524
    ],
    "start_token": 2957,
    "end_token": 2976,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 361,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2976,
    "end_token": 2976,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 363,
    "text": "def test_kc():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      74,
      66,
      33529
    ],
    "start_token": 2976,
    "end_token": 2982,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported"
  },
  {
    "line": 365,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2982,
    "end_token": 2982,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 366,
    "text": "    ma = TA.ZLEMA(ohlc, 20).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Assertion for expected output, useful for learning expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      57,
      2538,
      5673,
      7,
      1219,
      44601,
      11,
      1160,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 2982,
    "end_token": 3006,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      329,
      2938,
      5072,
      11,
      4465,
      329,
      4673,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Assertion for expected output, useful for learning expected behavior"
  },
  {
    "line": 363,
    "text": "def test_kc():",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      74,
      66,
      33529
    ],
    "start_token": 3006,
    "end_token": 3012,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 365,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3012,
    "end_token": 3012,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 366,
    "text": "    ma = TA.ZLEMA(ohlc, 20).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Use of 'round' for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17266,
      796,
      21664,
      13,
      57,
      2538,
      5673,
      7,
      1219,
      44601,
      11,
      1160,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3012,
    "end_token": 3036,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      744,
      6,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of 'round' for consistent decimal precision"
  },
  {
    "line": 368,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the expected type to prevent runtime errors",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3036,
    "end_token": 3036,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      2938,
      2099,
      284,
      2948,
      19124,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the expected type to prevent runtime errors"
  },
  {
    "line": 370,
    "text": "    assert isinstance(kc[\"KC_LOWER\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      74,
      66,
      14692,
      36222,
      62,
      43,
      36048,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3036,
    "end_token": 3055,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 368,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method from a library (TA.BASP) which could indicate a pattern in financial data analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3055,
    "end_token": 3055,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      422,
      257,
      5888,
      357,
      5603,
      13,
      33,
      1921,
      47,
      8,
      543,
      714,
      7603,
      257,
      3912,
      287,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a method from a library (TA.BASP) which could indicate a pattern in financial data analysis."
  },
  {
    "line": 370,
    "text": "    assert isinstance(kc[\"KC_LOWER\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'TA.BASP' or 'ohlc' are not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      74,
      66,
      14692,
      36222,
      62,
      43,
      36048,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3055,
    "end_token": 3074,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      5603,
      13,
      33,
      1921,
      47,
      6,
      393,
      705,
      1219,
      44601,
      6,
      389,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'TA.BASP' or 'ohlc' are not properly validated or sanitized."
  },
  {
    "line": 372,
    "text": "    assert kc[\"KC_UPPER\"].values[-1] == 7014.74943624",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'basp[\"Buy.\"]' is not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      479,
      66,
      14692,
      36222,
      62,
      8577,
      18973,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      767,
      28645,
      13,
      22,
      39449,
      2623,
      1731
    ],
    "start_token": 3074,
    "end_token": 3100,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      65,
      5126,
      14692,
      14518,
      526,
      49946,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'basp[\"Buy.\"]' is not properly validated or sanitized."
  },
  {
    "line": 374,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'basp[\"Sell.\"]' is not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3100,
    "end_token": 3100,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      65,
      5126,
      14692,
      50,
      695,
      526,
      49946,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'basp[\"Sell.\"]' is not properly validated or sanitized."
  },
  {
    "line": 376,
    "text": "def test_do():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      4598,
      33529
    ],
    "start_token": 3100,
    "end_token": 3105,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues."
  },
  {
    "line": 378,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3105,
    "end_token": 3105,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues."
  },
  {
    "line": 375,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.BASPN with rounding indicates a pattern for data preprocessing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3105,
    "end_token": 3105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      33,
      1921,
      13137,
      351,
      38185,
      9217,
      257,
      3912,
      329,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.BASPN with rounding indicates a pattern for data preprocessing"
  },
  {
    "line": 377,
    "text": "    \"\"\"test TA.DO\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for TA.BASPN function call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      18227,
      37811
    ],
    "start_token": 3105,
    "end_token": 3114,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      21664,
      13,
      33,
      1921,
      13137,
      2163,
      869
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for TA.BASPN function call"
  },
  {
    "line": 378,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of 'Buy.' and 'Sell.' suggests expected data structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3114,
    "end_token": 3114,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      705,
      14518,
      2637,
      290,
      705,
      50,
      695,
      2637,
      5644,
      2938,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Checking type of 'Buy.' and 'Sell.' suggests expected data structure"
  },
  {
    "line": 381,
    "text": "    assert isinstance(do[\"UPPER\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Validation of specific values indicates expected output for test case",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      4598,
      14692,
      8577,
      18973,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3114,
    "end_token": 3130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3254,
      24765,
      286,
      2176,
      3815,
      9217,
      2938,
      5072,
      329,
      1332,
      1339
    ],
    "label": "ml_signal",
    "reason": "Validation of specific values indicates expected output for test case"
  },
  {
    "line": 382,
    "text": "    assert isinstance(do[\"MIDDLE\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.CMO, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      4598,
      14692,
      44,
      2389,
      35,
      2538,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3130,
    "end_token": 3148,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      34,
      11770,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.CMO, useful for learning test patterns"
  },
  {
    "line": 384,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes ohlc is defined and valid, potential NameError if not",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3148,
    "end_token": 3148,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      11752,
      44601,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      6530,
      12331,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes ohlc is defined and valid, potential NameError if not"
  },
  {
    "line": 385,
    "text": "    assert do[\"UPPER\"].values[-1] == 7770.0",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.CMO function, indicating usage of technical analysis library",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      466,
      14692,
      8577,
      18973,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8541,
      2154,
      13,
      15
    ],
    "start_token": 3148,
    "end_token": 3168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      34,
      11770,
      2163,
      11,
      12739,
      8748,
      286,
      6276,
      3781,
      5888
    ],
    "label": "ml_signal",
    "reason": "Use of TA.CMO function, indicating usage of technical analysis library"
  },
  {
    "line": 387,
    "text": "    assert do[\"LOWER\"].values[-1] == 6250.0010000000002",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes series is defined and valid, potential NameError if not",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      466,
      14692,
      43,
      36048,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8190,
      1120,
      13,
      8298,
      10535,
      34215
    ],
    "start_token": 3168,
    "end_token": 3190,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2168,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      6530,
      12331,
      611,
      407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes series is defined and valid, potential NameError if not"
  },
  {
    "line": 388,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of cmo, useful for learning type validation patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3190,
    "end_token": 3190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      269,
      5908,
      11,
      4465,
      329,
      4673,
      2099,
      21201,
      7572
    ],
    "label": "ml_signal",
    "reason": "Checking type of cmo, useful for learning type validation patterns"
  },
  {
    "line": 390,
    "text": "def test_dmi():",
    "annotation": "\ud83e\udde0 ML Signal: Validating range of cmo values, useful for learning validation patterns",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      67,
      11632,
      33529
    ],
    "start_token": 3190,
    "end_token": 3196,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      48951,
      803,
      2837,
      286,
      269,
      5908,
      3815,
      11,
      4465,
      329,
      4673,
      21201,
      7572
    ],
    "label": "ml_signal",
    "reason": "Validating range of cmo values, useful for learning validation patterns"
  },
  {
    "line": 391,
    "text": "    \"\"\"test TA.DMI\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes cmo.values is a valid list, potential IndexError if empty",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      35,
      8895,
      37811
    ],
    "start_token": 3196,
    "end_token": 3206,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      269,
      5908,
      13,
      27160,
      318,
      257,
      4938,
      1351,
      11,
      2785,
      12901,
      12331,
      611,
      6565
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes cmo.values is a valid list, potential IndexError if empty"
  },
  {
    "line": 387,
    "text": "    assert do[\"LOWER\"].values[-1] == 6250.0010000000002",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.CHANDELIER indicates a pattern of using technical analysis indicators.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      466,
      14692,
      43,
      36048,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      8190,
      1120,
      13,
      8298,
      10535,
      34215
    ],
    "start_token": 3206,
    "end_token": 3228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      3398,
      6981,
      3698,
      38311,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      21337,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of TA.CHANDELIER indicates a pattern of using technical analysis indicators."
  },
  {
    "line": 389,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized before use.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3228,
    "end_token": 3228,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951,
      878,
      779,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized before use."
  },
  {
    "line": 390,
    "text": "def test_dmi():",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check types is a common pattern for type validation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      67,
      11632,
      33529
    ],
    "start_token": 3228,
    "end_token": 3234,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      3858,
      318,
      257,
      2219,
      3912,
      329,
      2099,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check types is a common pattern for type validation."
  },
  {
    "line": 392,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check types is a common pattern for type validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3234,
    "end_token": 3234,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      3858,
      318,
      257,
      2219,
      3912,
      329,
      2099,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check types is a common pattern for type validation."
  },
  {
    "line": 394,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected values is a common testing pattern.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3234,
    "end_token": 3234,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      3815,
      318,
      257,
      2219,
      4856,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected values is a common testing pattern."
  },
  {
    "line": 396,
    "text": "    assert isinstance(dmi[\"DI-\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected values is a common testing pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      67,
      11632,
      14692,
      17931,
      21215,
      4357,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3234,
    "end_token": 3251,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      3815,
      318,
      257,
      2219,
      4856,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected values is a common testing pattern."
  },
  {
    "line": 394,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3251,
    "end_token": 3251,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 396,
    "text": "    assert isinstance(dmi[\"DI-\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      67,
      11632,
      14692,
      17931,
      21215,
      4357,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3251,
    "end_token": 3268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 397,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3268,
    "end_token": 3268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round"
  },
  {
    "line": 398,
    "text": "    assert dmi[\"DI+\"].values[-1] == 7.07135289",
    "annotation": "\u2705 Best Practice: Use of round for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      288,
      11632,
      14692,
      17931,
      10,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      767,
      13,
      2998,
      17059,
      27693
    ],
    "start_token": 3268,
    "end_token": 3290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round for consistent decimal precision"
  },
  {
    "line": 400,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check object type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3290,
    "end_token": 3290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2134,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check object type"
  },
  {
    "line": 402,
    "text": "def test_adx():",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected outcome",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      324,
      87,
      33529
    ],
    "start_token": 3290,
    "end_token": 3296,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      8055
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected outcome"
  },
  {
    "line": 403,
    "text": "    \"\"\"test TA.ADX\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in test may lead to brittle tests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2885,
      55,
      37811
    ],
    "start_token": 3296,
    "end_token": 3306,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      1332,
      743,
      1085,
      284,
      49307,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in test may lead to brittle tests"
  },
  {
    "line": 397,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of pytest for testing indicates a pattern of test-driven development",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3306,
    "end_token": 3306,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12972,
      9288,
      329,
      4856,
      9217,
      257,
      3912,
      286,
      1332,
      12,
      15808,
      2478
    ],
    "label": "ml_signal",
    "reason": "Use of pytest for testing indicates a pattern of test-driven development"
  },
  {
    "line": 399,
    "text": "    assert dmi[\"DI-\"].values[-1] == 28.62895818",
    "annotation": "\u2705 Best Practice: Using pytest.raises to assert exceptions is a good practice for testing error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      288,
      11632,
      14692,
      17931,
      21215,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      2579,
      13,
      21,
      27693,
      3365,
      1507
    ],
    "start_token": 3306,
    "end_token": 3328,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      12972,
      9288,
      13,
      430,
      2696,
      284,
      6818,
      13269,
      318,
      257,
      922,
      3357,
      329,
      4856,
      4049,
      9041
    ],
    "label": "best_practice",
    "reason": "Using pytest.raises to assert exceptions is a good practice for testing error handling"
  },
  {
    "line": 401,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Instantiating an object without checking input validation may lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3328,
    "end_token": 3328,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2262,
      17096,
      803,
      281,
      2134,
      1231,
      10627,
      5128,
      21201,
      743,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Instantiating an object without checking input validation may lead to unexpected behavior"
  },
  {
    "line": 400,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific naming pattern indicating a test function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3328,
    "end_token": 3328,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      19264,
      3912,
      12739,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific naming pattern indicating a test function"
  },
  {
    "line": 403,
    "text": "    \"\"\"test TA.ADX\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with method chaining",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2885,
      55,
      37811
    ],
    "start_token": 3328,
    "end_token": 3338,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2446,
      442,
      1397
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with method chaining"
  },
  {
    "line": 405,
    "text": "    adx = TA.ADX(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for potential exceptions during method calls",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      512,
      87,
      796,
      21664,
      13,
      2885,
      55,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3338,
    "end_token": 3360,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      2785,
      13269,
      1141,
      2446,
      3848
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for potential exceptions during method calls"
  },
  {
    "line": 406,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type checking using isinstance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3360,
    "end_token": 3360,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      1262,
      318,
      39098
    ],
    "label": "ml_signal",
    "reason": "Type checking using isinstance"
  },
  {
    "line": 408,
    "text": "    assert adx.values[-1] == 46.43950615",
    "annotation": "\ud83e\udde0 ML Signal: Type checking using isinstance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      512,
      87,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      6337,
      13,
      47106,
      35638,
      1314
    ],
    "start_token": 3360,
    "end_token": 3378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      1262,
      318,
      39098
    ],
    "label": "ml_signal",
    "reason": "Type checking using isinstance"
  },
  {
    "line": 410,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3378,
    "end_token": 3378,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers"
  },
  {
    "line": 412,
    "text": "    \"\"\"test TA.STOCH\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2257,
      46,
      3398,
      37811
    ],
    "start_token": 3378,
    "end_token": 3389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers"
  },
  {
    "line": 409,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common pattern for test functions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3389,
    "end_token": 3389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      3912,
      329,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common pattern for test functions"
  },
  {
    "line": 411,
    "text": "def test_stoch():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      301,
      5374,
      33529
    ],
    "start_token": 3389,
    "end_token": 3395,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized"
  },
  {
    "line": 412,
    "text": "    \"\"\"test TA.STOCH\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining with round, common in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2257,
      46,
      3398,
      37811
    ],
    "start_token": 3395,
    "end_token": 3406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2835,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining with round, common in data processing"
  },
  {
    "line": 414,
    "text": "    st = TA.STOCH(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of 'fish'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      336,
      796,
      21664,
      13,
      2257,
      46,
      3398,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3406,
    "end_token": 3428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      705,
      11084,
      6
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of 'fish'"
  },
  {
    "line": 416,
    "text": "    assert isinstance(st, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      301,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3428,
    "end_token": 3441,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 417,
    "text": "    assert 0 < st.values[-1] < 100",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate expected outcomes in tests",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      657,
      1279,
      336,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 3441,
    "end_token": 3456,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      2938,
      10906,
      287,
      5254
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate expected outcomes in tests"
  },
  {
    "line": 414,
    "text": "    st = TA.STOCH(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TA.ICHIMOKU with specific parameters could indicate a pattern in financial data analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      336,
      796,
      21664,
      13,
      2257,
      46,
      3398,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3456,
    "end_token": 3478,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      21664,
      13,
      20739,
      3955,
      11380,
      52,
      351,
      2176,
      10007,
      714,
      7603,
      257,
      3912,
      287,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of TA.ICHIMOKU with specific parameters could indicate a pattern in financial data analysis."
  },
  {
    "line": 416,
    "text": "    assert isinstance(st, series.Series)",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of an object ensures that the object behaves as expected.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      301,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3478,
    "end_token": 3491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      281,
      2134,
      19047,
      326,
      262,
      2134,
      39341,
      355,
      2938,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of an object ensures that the object behaves as expected."
  },
  {
    "line": 418,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of an object ensures that the object behaves as expected.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3491,
    "end_token": 3491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      281,
      2134,
      19047,
      326,
      262,
      2134,
      39341,
      355,
      2938,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of an object ensures that the object behaves as expected."
  },
  {
    "line": 420,
    "text": "def test_stochd():",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of an object ensures that the object behaves as expected.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      301,
      5374,
      67,
      33529
    ],
    "start_token": 3491,
    "end_token": 3498,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      281,
      2134,
      19047,
      326,
      262,
      2134,
      39341,
      355,
      2938,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of an object ensures that the object behaves as expected."
  },
  {
    "line": 422,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of an object ensures that the object behaves as expected.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3498,
    "end_token": 3498,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      281,
      2134,
      19047,
      326,
      262,
      2134,
      39341,
      355,
      2938,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of an object ensures that the object behaves as expected."
  },
  {
    "line": 424,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values in the output could indicate expected patterns or thresholds in the data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3498,
    "end_token": 3498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      287,
      262,
      5072,
      714,
      7603,
      2938,
      7572,
      393,
      40885,
      287,
      262,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values in the output could indicate expected patterns or thresholds in the data."
  },
  {
    "line": 426,
    "text": "    assert 0 < st.values[-1] < 100",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values in the output could indicate expected patterns or thresholds in the data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      657,
      1279,
      336,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 3498,
    "end_token": 3513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      287,
      262,
      5072,
      714,
      7603,
      2938,
      7572,
      393,
      40885,
      287,
      262,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values in the output could indicate expected patterns or thresholds in the data."
  },
  {
    "line": 428,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values in the output could indicate expected patterns or thresholds in the data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3513,
    "end_token": 3513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      287,
      262,
      5072,
      714,
      7603,
      2938,
      7572,
      393,
      40885,
      287,
      262,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values in the output could indicate expected patterns or thresholds in the data."
  },
  {
    "line": 430,
    "text": "    \"\"\"test TA.STOCRSI\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values in the output could indicate expected patterns or thresholds in the data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2257,
      4503,
      6998,
      40,
      37811
    ],
    "start_token": 3513,
    "end_token": 3525,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      287,
      262,
      5072,
      714,
      7603,
      2938,
      7572,
      393,
      40885,
      287,
      262,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values in the output could indicate expected patterns or thresholds in the data."
  },
  {
    "line": 423,
    "text": "    st = TA.STOCHD(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Function definition for testing, useful for identifying test patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      336,
      796,
      21664,
      13,
      2257,
      46,
      3398,
      35,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3525,
    "end_token": 3548,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      329,
      4856,
      11,
      4465,
      329,
      13720,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition for testing, useful for identifying test patterns"
  },
  {
    "line": 426,
    "text": "    assert 0 < st.values[-1] < 100",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of TA.APZ with rounding, useful for understanding usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      657,
      1279,
      336,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 3548,
    "end_token": 3563,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      21664,
      13,
      2969,
      57,
      351,
      38185,
      11,
      4465,
      329,
      4547,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Instantiation of TA.APZ with rounding, useful for understanding usage patterns"
  },
  {
    "line": 428,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for potential exceptions in isinstance checks",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3563,
    "end_token": 3563,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      2785,
      13269,
      287,
      318,
      39098,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for potential exceptions in isinstance checks"
  },
  {
    "line": 430,
    "text": "    \"\"\"test TA.STOCRSI\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for potential exceptions in isinstance checks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      2257,
      4503,
      6998,
      40,
      37811
    ],
    "start_token": 3563,
    "end_token": 3575,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      2785,
      13269,
      287,
      318,
      39098,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for potential exceptions in isinstance checks"
  },
  {
    "line": 432,
    "text": "    st = TA.STOCHRSI(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for potential exceptions in equality check",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      336,
      796,
      21664,
      13,
      2257,
      46,
      3398,
      6998,
      40,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3575,
    "end_token": 3599,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      2785,
      13269,
      287,
      10537,
      2198
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for potential exceptions in equality check"
  },
  {
    "line": 431,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3599,
    "end_token": 3599,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 433,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate the type of the result",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3599,
    "end_token": 3599,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2099,
      286,
      262,
      1255
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate the type of the result"
  },
  {
    "line": 434,
    "text": "    assert isinstance(st, series.Series)",
    "annotation": "\u2705 Best Practice: Check if the result is an instance of the expected type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      301,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3599,
    "end_token": 3612,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      1255,
      318,
      281,
      4554,
      286,
      262,
      2938,
      2099
    ],
    "label": "best_practice",
    "reason": "Check if the result is an instance of the expected type"
  },
  {
    "line": 436,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert to validate the behavior of the result",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3612,
    "end_token": 3612,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      4069,
      286,
      262,
      1255
    ],
    "label": "ml_signal",
    "reason": "Use of assert to validate the behavior of the result"
  },
  {
    "line": 437,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensure the last value in the series is as expected",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3612,
    "end_token": 3612,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      938,
      1988,
      287,
      262,
      2168,
      318,
      355,
      2938
    ],
    "label": "best_practice",
    "reason": "Ensure the last value in the series is as expected"
  },
  {
    "line": 436,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for VPT calculation, useful for learning test patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3612,
    "end_token": 3612,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      569,
      11571,
      17952,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for VPT calculation, useful for learning test patterns"
  },
  {
    "line": 438,
    "text": "def test_williams():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      10594,
      1789,
      82,
      33529
    ],
    "start_token": 3612,
    "end_token": 3619,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 439,
    "text": "    \"\"\"test TA.WILLIAMS\"\"\"",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      54,
      8267,
      40,
      40834,
      37811
    ],
    "start_token": 3619,
    "end_token": 3631,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 441,
    "text": "    w = TA.WILLIAMS(ohlc).round(decimals=8)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type and imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      266,
      796,
      21664,
      13,
      54,
      8267,
      40,
      40834,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3631,
    "end_token": 3654,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      290,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type and imported"
  },
  {
    "line": 443,
    "text": "    assert isinstance(w, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can be unreliable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      86,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3654,
    "end_token": 3667,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      307,
      29954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can be unreliable"
  },
  {
    "line": 441,
    "text": "    w = TA.WILLIAMS(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      266,
      796,
      21664,
      13,
      54,
      8267,
      40,
      40834,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3667,
    "end_token": 3690,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 443,
    "text": "    assert isinstance(w, series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated to prevent unexpected data issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      86,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3690,
    "end_token": 3703,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated to prevent unexpected data issues"
  },
  {
    "line": 444,
    "text": "    assert -100 < w.values[-1] < 0",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.FVE indicates a pattern of using technical analysis functions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      532,
      3064,
      1279,
      266,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      657
    ],
    "start_token": 3703,
    "end_token": 3719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      37,
      6089,
      9217,
      257,
      3912,
      286,
      1262,
      6276,
      3781,
      5499
    ],
    "label": "ml_signal",
    "reason": "Use of TA.FVE indicates a pattern of using technical analysis functions"
  },
  {
    "line": 446,
    "text": "",
    "annotation": "\u2705 Best Practice: Asserting the type ensures the function returns the expected data structure",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3719,
    "end_token": 3719,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      262,
      2099,
      19047,
      262,
      2163,
      5860,
      262,
      2938,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Asserting the type ensures the function returns the expected data structure"
  },
  {
    "line": 448,
    "text": "    \"\"\"test TA.UO\"\"\"",
    "annotation": "\u2705 Best Practice: Asserting value range helps ensure the function's output is within expected bounds",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      52,
      46,
      37811
    ],
    "start_token": 3719,
    "end_token": 3729,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      5419,
      4155,
      262,
      2163,
      338,
      5072,
      318,
      1626,
      2938,
      22303
    ],
    "label": "best_practice",
    "reason": "Asserting value range helps ensure the function's output is within expected bounds"
  },
  {
    "line": 446,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3729,
    "end_token": 3729,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern"
  },
  {
    "line": 448,
    "text": "    \"\"\"test TA.UO\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated before use to prevent potential data issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      52,
      46,
      37811
    ],
    "start_token": 3729,
    "end_token": 3739,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      878,
      779,
      284,
      2948,
      2785,
      1366,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated before use to prevent potential data issues"
  },
  {
    "line": 449,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of method chaining for concise code",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3739,
    "end_token": 3739,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of method chaining for concise code"
  },
  {
    "line": 451,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'series.Series' is the correct type to prevent assertion errors",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3739,
    "end_token": 3739,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      25076,
      13,
      27996,
      6,
      318,
      262,
      3376,
      2099,
      284,
      2948,
      19190,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'series.Series' is the correct type to prevent assertion errors"
  },
  {
    "line": 453,
    "text": "    assert 0 < uo.values[-1] < 100",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      657,
      1279,
      334,
      78,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 3739,
    "end_token": 3755,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  },
  {
    "line": 451,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of TA.PIVOT function indicates a pattern of financial data analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3755,
    "end_token": 3755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21664,
      13,
      47,
      3824,
      2394,
      2163,
      9217,
      257,
      3912,
      286,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of TA.PIVOT function indicates a pattern of financial data analysis."
  },
  {
    "line": 453,
    "text": "    assert 0 < uo.values[-1] < 100",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"pivot\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      657,
      1279,
      334,
      78,
      13,
      27160,
      58,
      12,
      16,
      60,
      1279,
      1802
    ],
    "start_token": 3755,
    "end_token": 3771,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      79,
      45785,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"pivot\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 455,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"s1\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3771,
    "end_token": 3771,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      82,
      16,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"s1\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 457,
    "text": "    \"\"\"test TA.AO\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"s2\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      32,
      46,
      37811
    ],
    "start_token": 3771,
    "end_token": 3781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      82,
      17,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"s2\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 459,
    "text": "    ao = TA.AO(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"s3\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      257,
      78,
      796,
      21664,
      13,
      32,
      46,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3781,
    "end_token": 3803,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      82,
      18,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"s3\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 461,
    "text": "    assert isinstance(ao, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"r1\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      5488,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3803,
    "end_token": 3816,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      81,
      16,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"r1\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 463,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"r2\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3816,
    "end_token": 3816,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      81,
      17,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"r2\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 465,
    "text": "def test_mi():",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of pivot[\"r3\"] suggests a pattern of ensuring data structure integrity.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      11632,
      33529
    ],
    "start_token": 3816,
    "end_token": 3821,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      30355,
      14692,
      81,
      18,
      8973,
      5644,
      257,
      3912,
      286,
      13359,
      1366,
      4645,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking type of pivot[\"r3\"] suggests a pattern of ensuring data structure integrity."
  },
  {
    "line": 467,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"pivot\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3821,
    "end_token": 3821,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      79,
      45785,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"pivot\"] indicates a pattern of expected output validation."
  },
  {
    "line": 469,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"s1\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3821,
    "end_token": 3821,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      82,
      16,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"s1\"] indicates a pattern of expected output validation."
  },
  {
    "line": 471,
    "text": "    assert mi.values[-1] == 23.92808696",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"s2\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      21504,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      2242,
      13,
      5892,
      28362,
      38205
    ],
    "start_token": 3821,
    "end_token": 3838,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      82,
      17,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"s2\"] indicates a pattern of expected output validation."
  },
  {
    "line": 473,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"s3\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3838,
    "end_token": 3838,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      82,
      18,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"s3\"] indicates a pattern of expected output validation."
  },
  {
    "line": 475,
    "text": "    \"\"\"test TA.BOP\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"s4\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      33,
      3185,
      37811
    ],
    "start_token": 3838,
    "end_token": 3848,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      82,
      19,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"s4\"] indicates a pattern of expected output validation."
  },
  {
    "line": 477,
    "text": "    bop = TA.BOP(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"r1\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      275,
      404,
      796,
      21664,
      13,
      33,
      3185,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3848,
    "end_token": 3870,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      81,
      16,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"r1\"] indicates a pattern of expected output validation."
  },
  {
    "line": 479,
    "text": "    assert isinstance(bop, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"r2\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      65,
      404,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3870,
    "end_token": 3884,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      81,
      17,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"r2\"] indicates a pattern of expected output validation."
  },
  {
    "line": 481,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"r3\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3884,
    "end_token": 3884,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      81,
      18,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"r3\"] indicates a pattern of expected output validation."
  },
  {
    "line": 483,
    "text": "def test_vortex():",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific value of pivot[\"r4\"] indicates a pattern of expected output validation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      85,
      26158,
      33529
    ],
    "start_token": 3884,
    "end_token": 3890,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      1988,
      286,
      30355,
      14692,
      81,
      19,
      8973,
      9217,
      257,
      3912,
      286,
      2938,
      5072,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Asserting specific value of pivot[\"r4\"] indicates a pattern of expected output validation."
  },
  {
    "line": 470,
    "text": "    assert isinstance(mi, series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.PIVOT_FIB, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      11632,
      11,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3890,
    "end_token": 3903,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      47,
      3824,
      2394,
      62,
      37,
      9865,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.PIVOT_FIB, useful for learning test patterns"
  },
  {
    "line": 472,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"pivot\"]",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3903,
    "end_token": 3903,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      79,
      45785,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"pivot\"]"
  },
  {
    "line": 474,
    "text": "def test_bop():",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"s1\"]",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      65,
      404,
      33529
    ],
    "start_token": 3903,
    "end_token": 3909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      82,
      16,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"s1\"]"
  },
  {
    "line": 476,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"s2\"]",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3909,
    "end_token": 3909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      82,
      17,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"s2\"]"
  },
  {
    "line": 478,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"s3\"]",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3909,
    "end_token": 3909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      82,
      18,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"s3\"]"
  },
  {
    "line": 480,
    "text": "    assert bop.values[-1] == 0.03045138",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"r1\"]",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      275,
      404,
      13,
      27160,
      58,
      12,
      16,
      60,
      6624,
      657,
      13,
      39101,
      2231,
      20107
    ],
    "start_token": 3909,
    "end_token": 3927,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      81,
      16,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"r1\"]"
  },
  {
    "line": 482,
    "text": "",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"r2\"]",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3927,
    "end_token": 3927,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      81,
      17,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"r2\"]"
  },
  {
    "line": 484,
    "text": "    \"\"\"test TA.VORTEX\"\"\"",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of pivot[\"r3\"]",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      53,
      9863,
      6369,
      37811
    ],
    "start_token": 3927,
    "end_token": 3938,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      30355,
      14692,
      81,
      18,
      8973
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of pivot[\"r3\"]"
  },
  {
    "line": 486,
    "text": "    v = TA.VORTEX(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      410,
      796,
      21664,
      13,
      53,
      9863,
      6369,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 3938,
    "end_token": 3960,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 488,
    "text": "    assert isinstance(v[\"VIp\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      85,
      14692,
      12861,
      79,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 3960,
    "end_token": 3976,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 490,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3976,
    "end_token": 3976,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 492,
    "text": "    assert v[\"VIm\"].values[-1] == 1.27305188",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      410,
      14692,
      53,
      3546,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      352,
      13,
      1983,
      22515,
      20356
    ],
    "start_token": 3976,
    "end_token": 3997,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 494,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3997,
    "end_token": 3997,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 496,
    "text": "    \"\"\"test TA.KST\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      42,
      2257,
      37811
    ],
    "start_token": 3997,
    "end_token": 4007,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 498,
    "text": "    kst = TA.KST(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      479,
      301,
      796,
      21664,
      13,
      42,
      2257,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 4007,
    "end_token": 4029,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 500,
    "text": "    assert isinstance(kst[\"KST\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      74,
      301,
      14692,
      42,
      2257,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 4029,
    "end_token": 4046,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 502,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Asserting specific values, useful for learning expected output patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4046,
    "end_token": 4046,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2176,
      3815,
      11,
      4465,
      329,
      4673,
      2938,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Asserting specific values, useful for learning expected output patterns"
  },
  {
    "line": 489,
    "text": "    assert isinstance(v[\"VIm\"], series.Series)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method from a specific library (TA) indicates a pattern of financial data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      85,
      14692,
      53,
      3546,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 4046,
    "end_token": 4062,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      422,
      257,
      2176,
      5888,
      357,
      5603,
      8,
      9217,
      257,
      3912,
      286,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a method from a specific library (TA) indicates a pattern of financial data analysis."
  },
  {
    "line": 491,
    "text": "    assert v[\"VIp\"].values[-1] == 0.76856105",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'ohlc' is not validated or sanitized before use.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      410,
      14692,
      12861,
      79,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      657,
      13,
      30610,
      3980,
      13348
    ],
    "start_token": 4062,
    "end_token": 4083,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1219,
      44601,
      6,
      318,
      407,
      31031,
      393,
      5336,
      36951,
      878,
      779,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'ohlc' is not validated or sanitized before use."
  },
  {
    "line": 492,
    "text": "    assert v[\"VIm\"].values[-1] == 1.27305188",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'round' method indicates a pattern of precision control in numerical computations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      410,
      14692,
      53,
      3546,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      352,
      13,
      1983,
      22515,
      20356
    ],
    "start_token": 4083,
    "end_token": 4104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      744,
      6,
      2446,
      9217,
      257,
      3912,
      286,
      15440,
      1630,
      287,
      29052,
      2653,
      602,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of 'round' method indicates a pattern of precision control in numerical computations."
  },
  {
    "line": 494,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'msd' is always a 'series.Series', which might not be the case if input changes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4104,
    "end_token": 4104,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      907,
      67,
      6,
      318,
      1464,
      257,
      705,
      25076,
      13,
      27996,
      3256,
      543,
      1244,
      407,
      307,
      262,
      1339,
      611,
      5128,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'msd' is always a 'series.Series', which might not be the case if input changes."
  },
  {
    "line": 495,
    "text": "def test_kst():",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'assert' indicates a pattern of test-driven development or validation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      74,
      301,
      33529
    ],
    "start_token": 4104,
    "end_token": 4110,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      30493,
      6,
      9217,
      257,
      3912,
      286,
      1332,
      12,
      15808,
      2478,
      393,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of 'assert' indicates a pattern of test-driven development or validation."
  },
  {
    "line": 497,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded value in test can lead to false positives/negatives if data changes.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4110,
    "end_token": 4110,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1988,
      287,
      1332,
      460,
      1085,
      284,
      3991,
      38548,
      14,
      12480,
      2929,
      611,
      1366,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded value in test can lead to false positives/negatives if data changes."
  },
  {
    "line": 498,
    "text": "    kst = TA.KST(ohlc).round(decimals=8)",
    "annotation": "\u2705 Best Practice: Consider using a tolerance range for floating-point comparison.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      479,
      301,
      796,
      21664,
      13,
      42,
      2257,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 4110,
    "end_token": 4132,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      15621,
      2837,
      329,
      12462,
      12,
      4122,
      7208,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a tolerance range for floating-point comparison."
  },
  {
    "line": 494,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific naming pattern indicating a test function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4132,
    "end_token": 4132,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      19264,
      3912,
      12739,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific naming pattern indicating a test function"
  },
  {
    "line": 496,
    "text": "    \"\"\"test TA.KST\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes TA.STC and ohlc are defined and valid, potential for NameError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      42,
      2257,
      37811
    ],
    "start_token": 4132,
    "end_token": 4142,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      21664,
      13,
      2257,
      34,
      290,
      11752,
      44601,
      389,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes TA.STC and ohlc are defined and valid, potential for NameError"
  },
  {
    "line": 497,
    "text": "",
    "annotation": "\u2705 Best Practice: Chaining method calls for concise code",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4142,
    "end_token": 4142,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1397,
      2446,
      3848,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Chaining method calls for concise code"
  },
  {
    "line": 499,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes series.Series is the correct type, potential for AssertionError",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4142,
    "end_token": 4142,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2168,
      13,
      27996,
      318,
      262,
      3376,
      2099,
      11,
      2785,
      329,
      2195,
      861,
      295,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes series.Series is the correct type, potential for AssertionError"
  },
  {
    "line": 500,
    "text": "    assert isinstance(kst[\"KST\"], series.Series)",
    "annotation": "\u2705 Best Practice: Use of isinstance for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      74,
      301,
      14692,
      42,
      2257,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 4142,
    "end_token": 4159,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use of isinstance for type checking"
  },
  {
    "line": 502,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes stc.values is a valid sequence, potential for IndexError",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4159,
    "end_token": 4159,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      336,
      66,
      13,
      27160,
      318,
      257,
      4938,
      8379,
      11,
      2785,
      329,
      12901,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes stc.values is a valid sequence, potential for IndexError"
  },
  {
    "line": 503,
    "text": "    assert kst[\"KST\"].values[-1] == -157.42229442",
    "annotation": "\u2705 Best Practice: Asserting value range for expected output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      479,
      301,
      14692,
      42,
      2257,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      18458,
      13,
      44361,
      1959,
      39506
    ],
    "start_token": 4159,
    "end_token": 4182,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      1988,
      2837,
      329,
      2938,
      5072
    ],
    "label": "best_practice",
    "reason": "Asserting value range for expected output"
  },
  {
    "line": 499,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function for TA.EVSTC, useful for learning test patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4182,
    "end_token": 4182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      329,
      21664,
      13,
      20114,
      2257,
      34,
      11,
      4465,
      329,
      4673,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Testing function for TA.EVSTC, useful for learning test patterns"
  },
  {
    "line": 501,
    "text": "    assert isinstance(kst[\"signal\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes ohlc is defined and valid, potential for NameError",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      74,
      301,
      14692,
      12683,
      282,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 4182,
    "end_token": 4199,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      11752,
      44601,
      318,
      5447,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes ohlc is defined and valid, potential for NameError"
  },
  {
    "line": 502,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of round() for consistent decimal precision",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4199,
    "end_token": 4199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      3419,
      329,
      6414,
      32465,
      15440
    ],
    "label": "best_practice",
    "reason": "Use of round() for consistent decimal precision"
  },
  {
    "line": 504,
    "text": "    assert kst[\"signal\"].values[-1] == -132.10367593",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes series is imported and valid, potential for NameError",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      479,
      301,
      14692,
      12683,
      282,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      19924,
      13,
      940,
      2623,
      2425,
      6052
    ],
    "start_token": 4199,
    "end_token": 4223,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2168,
      318,
      17392,
      290,
      4938,
      11,
      2785,
      329,
      6530,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes series is imported and valid, potential for NameError"
  },
  {
    "line": 505,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance() to ensure correct type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4223,
    "end_token": 4223,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      3419,
      284,
      4155,
      3376,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of isinstance() to ensure correct type"
  },
  {
    "line": 507,
    "text": "def test_tsi():",
    "annotation": "\u2705 Best Practice: Boundary check to ensure values are within expected range",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      912,
      72,
      33529
    ],
    "start_token": 4223,
    "end_token": 4229,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30149,
      560,
      2198,
      284,
      4155,
      3815,
      389,
      1626,
      2938,
      2837
    ],
    "label": "best_practice",
    "reason": "Boundary check to ensure values are within expected range"
  },
  {
    "line": 502,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific naming pattern indicating a test function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4229,
    "end_token": 4229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      19264,
      3912,
      12739,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific naming pattern indicating a test function"
  },
  {
    "line": 505,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method from a module with a specific pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4229,
    "end_token": 4229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      422,
      257,
      8265,
      351,
      257,
      2176,
      3912
    ],
    "label": "ml_signal",
    "reason": "Calling a method from a module with a specific pattern"
  },
  {
    "line": 507,
    "text": "def test_tsi():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of error handling for the function call",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      912,
      72,
      33529
    ],
    "start_token": 4229,
    "end_token": 4235,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      4049,
      9041,
      329,
      262,
      2163,
      869
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of error handling for the function call"
  },
  {
    "line": 508,
    "text": "    \"\"\"test TA.TSI\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Type checking using isinstance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9288,
      21664,
      13,
      4694,
      40,
      37811
    ],
    "start_token": 4235,
    "end_token": 4245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      1262,
      318,
      39098
    ],
    "label": "ml_signal",
    "reason": "Type checking using isinstance"
  },
  {
    "line": 510,
    "text": "    tsi = TA.TSI(ohlc).round(decimals=8)",
    "annotation": "\ud83e\udde0 ML Signal: Type checking using isinstance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      256,
      13396,
      796,
      21664,
      13,
      4694,
      40,
      7,
      1219,
      44601,
      737,
      744,
      7,
      12501,
      320,
      874,
      28,
      23,
      8
    ],
    "start_token": 4245,
    "end_token": 4267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      1262,
      318,
      39098
    ],
    "label": "ml_signal",
    "reason": "Type checking using isinstance"
  },
  {
    "line": 512,
    "text": "    assert isinstance(tsi[\"TSI\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to list elements without bounds checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      912,
      72,
      14692,
      4694,
      40,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 4267,
    "end_token": 4284,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      1351,
      4847,
      1231,
      22303,
      10627
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to list elements without bounds checking"
  },
  {
    "line": 514,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to list elements without bounds checking",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4284,
    "end_token": 4284,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      1351,
      4847,
      1231,
      22303,
      10627
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to list elements without bounds checking"
  },
  {
    "line": 511,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function name follows a common test naming pattern, useful for identifying test functions.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4284,
    "end_token": 4284,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912,
      11,
      4465,
      329,
      13720,
      1332,
      5499,
      13
    ],
    "label": "ml_signal",
    "reason": "Function name follows a common test naming pattern, useful for identifying test functions."
  },
  {
    "line": 513,
    "text": "    assert isinstance(tsi[\"signal\"], series.Series)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'TA.VC' and 'ohlc' are safe and correctly implemented.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      912,
      72,
      14692,
      12683,
      282,
      33116,
      2168,
      13,
      27996,
      8
    ],
    "start_token": 4284,
    "end_token": 4301,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      5603,
      13,
      15922,
      6,
      290,
      705,
      1219,
      44601,
      6,
      389,
      3338,
      290,
      9380,
      9177,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'TA.VC' and 'ohlc' are safe and correctly implemented."
  },
  {
    "line": 514,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding to a fixed number of decimals improves consistency in floating-point operations.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4301,
    "end_token": 4301,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      257,
      5969,
      1271,
      286,
      875,
      320,
      874,
      19575,
      15794,
      287,
      12462,
      12,
      4122,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Rounding to a fixed number of decimals improves consistency in floating-point operations."
  },
  {
    "line": 516,
    "text": "    assert tsi[\"signal\"].values[-1] == -26.94173827",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'vc' contains the expected keys and types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      256,
      13396,
      14692,
      12683,
      282,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      2075,
      13,
      5824,
      1558,
      2548,
      1983
    ],
    "start_token": 4301,
    "end_token": 4325,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      28435,
      6,
      4909,
      262,
      2938,
      8251,
      290,
      3858,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'vc' contains the expected keys and types."
  },
  {
    "line": 518,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4325,
    "end_token": 4325,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues."
  },
  {
    "line": 519,
    "text": "def test_tp():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      34788,
      33529
    ],
    "start_token": 4325,
    "end_token": 4330,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues."
  },
  {
    "line": 515,
    "text": "    assert tsi[\"TSI\"].values[-1] == -32.12837201",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the test function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      256,
      13396,
      14692,
      4694,
      40,
      1,
      4083,
      27160,
      58,
      12,
      16,
      60,
      6624,
      532,
      2624,
      13,
      12762,
      2718,
      1264
    ],
    "start_token": 4330,
    "end_token": 4353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1332,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the test function"
  },
  {
    "line": 518,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific TA function with parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4353,
    "end_token": 4353,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      21664,
      2163,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific TA function with parameters"
  },
  {
    "line": 519,
    "text": "def test_tp():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ohlc' is validated and sanitized before use",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      34788,
      33529
    ],
    "start_token": 4353,
    "end_token": 4358,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      1219,
      44601,
      6,
      318,
      31031,
      290,
      5336,
      36951,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ohlc' is validated and sanitized before use"
  },
  {
    "line": 519,
    "text": "def test_tp():",
    "annotation": "\u2705 Best Practice: Use of assert to validate the type of the result",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      34788,
      33529
    ],
    "start_token": 4358,
    "end_token": 4363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      262,
      2099,
      286,
      262,
      1255
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate the type of the result"
  },
  {
    "line": 519,
    "text": "def test_tp():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      34788,
      33529
    ],
    "start_token": 4363,
    "end_token": 4368,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      7208,
      286,
      12462,
      12,
      4122,
      3146,
      460,
      1085,
      284,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct comparison of floating-point numbers can lead to precision issues"
  }
]
[
  {
    "line": 2,
    "text": "from zvt.api.kdata import get_kdata",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      74,
      7890,
      1330,
      651,
      62,
      74,
      7890
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 4,
    "text": "from zvt.samples import MyBullTrader, StockTrader",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      82,
      12629,
      1330,
      2011,
      39549,
      2898,
      5067,
      11,
      10500,
      2898,
      5067
    ],
    "start_token": 13,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 28,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded timestamps can indicate specific event-driven behavior.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 28,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4628,
      395,
      9430,
      460,
      7603,
      2176,
      1785,
      12,
      15808,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded timestamps can indicate specific event-driven behavior."
  },
  {
    "line": 11,
    "text": "class SingleTrader(StockTrader):",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded timestamps can indicate specific event-driven behavior.",
    "confidence": 0.5,
    "tokens": [
      4871,
      14206,
      2898,
      5067,
      7,
      26207,
      2898,
      5067,
      2599
    ],
    "start_token": 28,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4628,
      395,
      9430,
      460,
      7603,
      2176,
      1785,
      12,
      15808,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded timestamps can indicate specific event-driven behavior."
  },
  {
    "line": 8,
    "text": "sell_timestamp = \"2020-01-06\"",
    "annotation": "\u2705 Best Practice: Class docstring is missing; consider adding one to describe the class purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      7255,
      62,
      16514,
      27823,
      796,
      366,
      42334,
      12,
      486,
      12,
      3312,
      1
    ],
    "start_token": 37,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      318,
      4814,
      26,
      2074,
      4375,
      530,
      284,
      6901,
      262,
      1398,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring is missing; consider adding one to describe the class purpose and usage."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests a time-based event handler pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 49,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      257,
      640,
      12,
      3106,
      1785,
      21360,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name suggests a time-based event handler pattern"
  },
  {
    "line": 11,
    "text": "class SingleTrader(StockTrader):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variables (buy_timestamp)",
    "confidence": 1.0,
    "tokens": [
      4871,
      14206,
      2898,
      5067,
      7,
      26207,
      2898,
      5067,
      2599
    ],
    "start_token": 49,
    "end_token": 58,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      357,
      17846,
      62,
      16514,
      27823,
      8
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variables (buy_timestamp)"
  },
  {
    "line": 12,
    "text": "    def on_time(self, timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on date comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2435,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 58,
    "end_token": 70,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      3128,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on date comparison"
  },
  {
    "line": 14,
    "text": "            self.buy(timestamp=buy_timestamp, entity_ids=[\"stock_sz_000338\"])",
    "annotation": "\ud83e\udde0 ML Signal: Method call with specific entity_ids suggests a pattern of trading actions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17846,
      7,
      16514,
      27823,
      28,
      17846,
      62,
      16514,
      27823,
      11,
      9312,
      62,
      2340,
      28,
      14692,
      13578,
      62,
      82,
      89,
      62,
      830,
      28460,
      8973,
      8
    ],
    "start_token": 70,
    "end_token": 107,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      2176,
      9312,
      62,
      2340,
      5644,
      257,
      3912,
      286,
      7313,
      4028
    ],
    "label": "ml_signal",
    "reason": "Method call with specific entity_ids suggests a pattern of trading actions"
  },
  {
    "line": 16,
    "text": "            self.sell(timestamp=sell_timestamp, entity_ids=[\"stock_sz_000338\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variables (sell_timestamp)",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7255,
      7,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11,
      9312,
      62,
      2340,
      28,
      14692,
      13578,
      62,
      82,
      89,
      62,
      830,
      28460,
      8973,
      8
    ],
    "start_token": 107,
    "end_token": 144,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      357,
      7255,
      62,
      16514,
      27823,
      8
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variables (sell_timestamp)"
  },
  {
    "line": 16,
    "text": "            self.sell(timestamp=sell_timestamp, entity_ids=[\"stock_sz_000338\"])",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on date comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7255,
      7,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11,
      9312,
      62,
      2340,
      28,
      14692,
      13578,
      62,
      82,
      89,
      62,
      830,
      28460,
      8973,
      8
    ],
    "start_token": 144,
    "end_token": 181,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      3128,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on date comparison"
  },
  {
    "line": 16,
    "text": "            self.sell(timestamp=sell_timestamp, entity_ids=[\"stock_sz_000338\"])",
    "annotation": "\ud83e\udde0 ML Signal: Method call with specific entity_ids suggests a pattern of trading actions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7255,
      7,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11,
      9312,
      62,
      2340,
      28,
      14692,
      13578,
      62,
      82,
      89,
      62,
      830,
      28460,
      8973,
      8
    ],
    "start_token": 181,
    "end_token": 218,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      2176,
      9312,
      62,
      2340,
      5644,
      257,
      3912,
      286,
      7313,
      4028
    ],
    "label": "ml_signal",
    "reason": "Method call with specific entity_ids suggests a pattern of trading actions"
  },
  {
    "line": 13,
    "text": "        if is_same_date(buy_timestamp, timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Method definition with a fixed return value, indicating a potential placeholder or stub",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      62,
      31642,
      62,
      4475,
      7,
      17846,
      62,
      16514,
      27823,
      11,
      41033,
      2599
    ],
    "start_token": 218,
    "end_token": 239,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      6770,
      351,
      257,
      5969,
      1441,
      1988,
      11,
      12739,
      257,
      2785,
      46076,
      393,
      17071
    ],
    "label": "ml_signal",
    "reason": "Method definition with a fixed return value, indicating a potential placeholder or stub"
  },
  {
    "line": 15,
    "text": "        if is_same_date(sell_timestamp, timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Consistent return value could indicate a default or fallback behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      62,
      31642,
      62,
      4475,
      7,
      7255,
      62,
      16514,
      27823,
      11,
      41033,
      2599
    ],
    "start_token": 239,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      1441,
      1988,
      714,
      7603,
      257,
      4277,
      393,
      2121,
      1891,
      4069
    ],
    "label": "ml_signal",
    "reason": "Consistent return value could indicate a default or fallback behavior"
  },
  {
    "line": 25,
    "text": "        codes=[\"000338\"],",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a trading object with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      28,
      14692,
      830,
      28460,
      33116
    ],
    "start_token": 260,
    "end_token": 273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      7313,
      2134,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a trading object with specific parameters"
  },
  {
    "line": 27,
    "text": "        start_timestamp=\"2019-01-01\",",
    "annotation": "\ud83e\udde0 ML Signal: Accessing current account positions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      2625,
      23344,
      12,
      486,
      12,
      486,
      1600
    ],
    "start_token": 273,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1459,
      1848,
      6116
    ],
    "label": "ml_signal",
    "reason": "Accessing current account positions"
  },
  {
    "line": 29,
    "text": "        trader_name=\"000338_single_trader\",",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31791,
      62,
      3672,
      2625,
      830,
      28460,
      62,
      29762,
      62,
      2213,
      5067,
      1600
    ],
    "start_token": 291,
    "end_token": 310,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 30,
    "text": "        draw_result=True,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing current account details",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3197,
      62,
      20274,
      28,
      17821,
      11
    ],
    "start_token": 310,
    "end_token": 323,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1459,
      1848,
      3307
    ],
    "label": "ml_signal",
    "reason": "Accessing current account details"
  },
  {
    "line": 30,
    "text": "        draw_result=True,",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3197,
      62,
      20274,
      28,
      17821,
      11
    ],
    "start_token": 323,
    "end_token": 336,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 37,
    "text": "    account = trader.get_current_account()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential use of undefined variables buy_timestamp and sell_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1848,
      796,
      31791,
      13,
      1136,
      62,
      14421,
      62,
      23317,
      3419
    ],
    "start_token": 336,
    "end_token": 349,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      2822,
      62,
      16514,
      27823,
      290,
      3677,
      62,
      16514,
      27823
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential use of undefined variables buy_timestamp and sell_timestamp"
  },
  {
    "line": 44,
    "text": "        start_timestamp=buy_timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential use of undefined variables buy_timestamp and sell_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      17846,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 349,
    "end_token": 366,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      2822,
      62,
      16514,
      27823,
      290,
      3677,
      62,
      16514,
      27823
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential use of undefined variables buy_timestamp and sell_timestamp"
  },
  {
    "line": 51,
    "text": "        start_timestamp=sell_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of transaction costs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 366,
    "end_token": 383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      8611,
      3484
    ],
    "label": "ml_signal",
    "reason": "Calculation of transaction costs"
  },
  {
    "line": 54,
    "text": "    )[0]",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of percentage change in price",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      58,
      15,
      60
    ],
    "start_token": 383,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      5873,
      1487,
      287,
      2756
    ],
    "label": "ml_signal",
    "reason": "Calculation of percentage change in price"
  },
  {
    "line": 56,
    "text": "    sell_lost = trader.account_service.slippage + trader.account_service.sell_cost",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of profit rate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3677,
      62,
      33224,
      796,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      6649,
      3974,
      496,
      1343,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      7255,
      62,
      15805
    ],
    "start_token": 390,
    "end_token": 416,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      7630,
      2494
    ],
    "label": "ml_signal",
    "reason": "Calculation of profit rate"
  },
  {
    "line": 57,
    "text": "    buy_lost = trader.account_service.slippage + trader.account_service.buy_cost",
    "annotation": "\u2705 Best Practice: Use of assert for validation of expected outcomes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      33224,
      796,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      6649,
      3974,
      496,
      1343,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      17846,
      62,
      15805
    ],
    "start_token": 416,
    "end_token": 442,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      329,
      21201,
      286,
      2938,
      10906
    ],
    "label": "best_practice",
    "reason": "Use of assert for validation of expected outcomes"
  },
  {
    "line": 49,
    "text": "        provider=\"joinquant\",",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose and usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      7639,
      18934,
      415,
      1600
    ],
    "start_token": 442,
    "end_token": 455,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose and usage"
  },
  {
    "line": 51,
    "text": "        start_timestamp=sell_timestamp,",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose and usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 455,
    "end_token": 472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose and usage"
  },
  {
    "line": 52,
    "text": "        end_timestamp=sell_timestamp,",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the 'timestamp' parameter for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 472,
    "end_token": 489,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      705,
      16514,
      27823,
      6,
      11507,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the 'timestamp' parameter for better readability and maintainability."
  },
  {
    "line": 54,
    "text": "    )[0]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for repeated buy actions due to lack of condition to prevent multiple buys on the same timestamp.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      58,
      15,
      60
    ],
    "start_token": 489,
    "end_token": 496,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5100,
      2822,
      4028,
      2233,
      284,
      3092,
      286,
      4006,
      284,
      2948,
      3294,
      24779,
      319,
      262,
      976,
      41033,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for repeated buy actions due to lack of condition to prevent multiple buys on the same timestamp."
  },
  {
    "line": 56,
    "text": "    sell_lost = trader.account_service.slippage + trader.account_service.sell_cost",
    "annotation": "\ud83e\udde0 ML Signal: Setting a flag after a buy action can indicate a state change pattern useful for ML models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3677,
      62,
      33224,
      796,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      6649,
      3974,
      496,
      1343,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      7255,
      62,
      15805
    ],
    "start_token": 496,
    "end_token": 522,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      6056,
      706,
      257,
      2822,
      2223,
      460,
      7603,
      257,
      1181,
      1487,
      3912,
      4465,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting a flag after a buy action can indicate a state change pattern useful for ML models."
  },
  {
    "line": 57,
    "text": "    buy_lost = trader.account_service.slippage + trader.account_service.buy_cost",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Repeated buy action without condition check can lead to unintended behavior or errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      33224,
      796,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      6649,
      3974,
      496,
      1343,
      31791,
      13,
      23317,
      62,
      15271,
      13,
      17846,
      62,
      15805
    ],
    "start_token": 522,
    "end_token": 548,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      30558,
      515,
      2822,
      2223,
      1231,
      4006,
      2198,
      460,
      1085,
      284,
      30261,
      4069,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Repeated buy action without condition check can lead to unintended behavior or errors."
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for repeated sell actions due to lack of condition to prevent multiple sells on the same timestamp.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 548,
    "end_token": 548,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5100,
      3677,
      4028,
      2233,
      284,
      3092,
      286,
      4006,
      284,
      2948,
      3294,
      16015,
      319,
      262,
      976,
      41033,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for repeated sell actions due to lack of condition to prevent multiple sells on the same timestamp."
  },
  {
    "line": 62,
    "text": "    assert round(profit_rate, 2) == round(pct, 2)",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests a financial trading strategy pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      2835,
      7,
      9183,
      62,
      4873,
      11,
      362,
      8,
      6624,
      2835,
      7,
      79,
      310,
      11,
      362,
      8
    ],
    "start_token": 548,
    "end_token": 568,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      257,
      3176,
      7313,
      4811,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name suggests a financial trading strategy pattern"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on an attribute, indicating a decision-making pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 568,
    "end_token": 568,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      281,
      11688,
      11,
      12739,
      257,
      2551,
      12,
      8601,
      3912
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on an attribute, indicating a decision-making pattern"
  },
  {
    "line": 68,
    "text": "    def on_time(self, timestamp):",
    "annotation": "\u2705 Best Practice: Explicit return of a value, enhancing readability and understanding of the function's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2435,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 568,
    "end_token": 580,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      257,
      1988,
      11,
      27496,
      1100,
      1799,
      290,
      4547,
      286,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Explicit return of a value, enhancing readability and understanding of the function's purpose"
  },
  {
    "line": 68,
    "text": "    def on_time(self, timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2435,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 580,
    "end_token": 592,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters"
  },
  {
    "line": 79,
    "text": "    def long_position_control(self):",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      890,
      62,
      9150,
      62,
      13716,
      7,
      944,
      2599
    ],
    "start_token": 592,
    "end_token": 604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method call on an object"
  },
  {
    "line": 81,
    "text": "            position_pct = 1.0",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      352,
      13,
      15
    ],
    "start_token": 604,
    "end_token": 623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method call on an object"
  },
  {
    "line": 83,
    "text": "            position_pct = 0.5",
    "annotation": "\u2705 Best Practice: Use of print statements for debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      657,
      13,
      20
    ],
    "start_token": 623,
    "end_token": 642,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3601,
      6299,
      329,
      28769
    ],
    "label": "best_practice",
    "reason": "Use of print statements for debugging"
  },
  {
    "line": 83,
    "text": "            position_pct = 0.5",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      657,
      13,
      20
    ],
    "start_token": 642,
    "end_token": 661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method call on an object"
  },
  {
    "line": 90,
    "text": "        provider=\"joinquant\",",
    "annotation": "\u2705 Best Practice: Use of print statements for debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      7639,
      18934,
      415,
      1600
    ],
    "start_token": 661,
    "end_token": 674,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3601,
      6299,
      329,
      28769
    ],
    "label": "best_practice",
    "reason": "Use of print statements for debugging"
  },
  {
    "line": 90,
    "text": "        provider=\"joinquant\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variables buy_timestamp and sell_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      7639,
      18934,
      415,
      1600
    ],
    "start_token": 674,
    "end_token": 687,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      2822,
      62,
      16514,
      27823,
      290,
      3677,
      62,
      16514,
      27823
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variables buy_timestamp and sell_timestamp"
  },
  {
    "line": 97,
    "text": "        adjust_type=AdjustType.qfq,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variables buy_timestamp and sell_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      62,
      4906,
      28,
      39668,
      6030,
      13,
      80,
      69,
      80,
      11
    ],
    "start_token": 687,
    "end_token": 705,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      2822,
      62,
      16514,
      27823,
      290,
      3677,
      62,
      16514,
      27823
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variables buy_timestamp and sell_timestamp"
  },
  {
    "line": 107,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation involving object attributes",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 705,
    "end_token": 705,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      7411,
      2134,
      12608
    ],
    "label": "ml_signal",
    "reason": "Calculation involving object attributes"
  },
  {
    "line": 107,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation involving object attributes",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 705,
    "end_token": 705,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      7411,
      2134,
      12608
    ],
    "label": "ml_signal",
    "reason": "Calculation involving object attributes"
  },
  {
    "line": 107,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Financial calculation pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 705,
    "end_token": 705,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11302,
      17952,
      3912
    ],
    "label": "ml_signal",
    "reason": "Financial calculation pattern"
  },
  {
    "line": 114,
    "text": "        return_type=\"domain\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variables buy_timestamp and sell_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 705,
    "end_token": 718,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      2822,
      62,
      16514,
      27823,
      290,
      3677,
      62,
      16514,
      27823
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variables buy_timestamp and sell_timestamp"
  },
  {
    "line": 119,
    "text": "        start_timestamp=sell_timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variables buy_timestamp and sell_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 718,
    "end_token": 735,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      9633,
      2822,
      62,
      16514,
      27823,
      290,
      3677,
      62,
      16514,
      27823
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variables buy_timestamp and sell_timestamp"
  },
  {
    "line": 129,
    "text": "    buy_price = get_kdata(",
    "annotation": "\ud83e\udde0 ML Signal: Financial calculation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      20888,
      796,
      651,
      62,
      74,
      7890,
      7
    ],
    "start_token": 735,
    "end_token": 747,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11302,
      17952,
      3912
    ],
    "label": "ml_signal",
    "reason": "Financial calculation pattern"
  },
  {
    "line": 129,
    "text": "    buy_price = get_kdata(",
    "annotation": "\ud83e\udde0 ML Signal: Financial calculation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      20888,
      796,
      651,
      62,
      74,
      7890,
      7
    ],
    "start_token": 747,
    "end_token": 759,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11302,
      17952,
      3912
    ],
    "label": "ml_signal",
    "reason": "Financial calculation pattern"
  },
  {
    "line": 129,
    "text": "    buy_price = get_kdata(",
    "annotation": "\ud83e\udde0 ML Signal: Assertion for testing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      20888,
      796,
      651,
      62,
      74,
      7890,
      7
    ],
    "start_token": 759,
    "end_token": 771,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Assertion for testing"
  },
  {
    "line": 117,
    "text": "        provider=\"joinquant\",",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific name pattern indicating a test function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      7639,
      18934,
      415,
      1600
    ],
    "start_token": 771,
    "end_token": 784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      1438,
      3912,
      12739,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific name pattern indicating a test function"
  },
  {
    "line": 119,
    "text": "        start_timestamp=sell_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 784,
    "end_token": 801,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters"
  },
  {
    "line": 119,
    "text": "        start_timestamp=sell_timestamp,",
    "annotation": "\u2705 Best Practice: Use of named parameters for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      7255,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 801,
    "end_token": 818,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of named parameters for clarity"
  },
  {
    "line": 129,
    "text": "    buy_price = get_kdata(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Bare except clause; catches all exceptions, which can hide errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      20888,
      796,
      651,
      62,
      74,
      7890,
      7
    ],
    "start_token": 818,
    "end_token": 830,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38234,
      2845,
      13444,
      26,
      17591,
      477,
      13269,
      11,
      543,
      460,
      7808,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Bare except clause; catches all exceptions, which can hide errors"
  },
  {
    "line": 129,
    "text": "    buy_price = get_kdata(",
    "annotation": "\ud83e\udde0 ML Signal: Assertion used in a test function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2822,
      62,
      20888,
      796,
      651,
      62,
      74,
      7890,
      7
    ],
    "start_token": 830,
    "end_token": 842,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      973,
      287,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Assertion used in a test function"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific functions and classes from modules indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 290, 6097, 422, 13103, 9217, 8748, 7572, 290, 20086]",1.0,13,ml_signal,1,Importing specific functions and classes from modules indicates usage patterns and dependencies,,0,# -*- coding: utf-8 -*-,"[2, 532, 9, 12, 19617, 25, 3384, 69, 12, 23, 532, 9, 12]"
üß† ML Signal: Importing specific functions and classes from modules indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 290, 6097, 422, 13103, 9217, 8748, 7572, 290, 20086]",1.0,48,ml_signal,3,Importing specific functions and classes from modules indicates usage patterns and dependencies,,13,"from zvt.contract.utils import evaluate_size_from_timestamp, next_timestamp_on_level, is_finished_kdata_timestamp","[6738, 1976, 36540, 13, 28484, 13, 26791, 1330, 13446, 62, 7857, 62, 6738, 62, 16514, 27823, 11, 1306, 62, 16514, 27823, 62, 261, 62, 5715, 11, 318, 62, 43952, 62, 74, 7890, 62, 16514, 27823]"
üß† ML Signal: Importing specific functions and classes from modules indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 290, 6097, 422, 13103, 9217, 8748, 7572, 290, 20086]",1.0,83,ml_signal,3,Importing specific functions and classes from modules indicates usage patterns and dependencies,,48,"from zvt.contract.utils import evaluate_size_from_timestamp, next_timestamp_on_level, is_finished_kdata_timestamp","[6738, 1976, 36540, 13, 28484, 13, 26791, 1330, 13446, 62, 7857, 62, 6738, 62, 16514, 27823, 11, 1306, 62, 16514, 27823, 62, 261, 62, 5715, 11, 318, 62, 43952, 62, 74, 7890, 62, 16514, 27823]"
"üß† ML Signal: Function name suggests a test case, useful for identifying test patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 5644, 257, 1332, 1339, 11, 4465, 329, 13720, 1332, 7572]",0.5,84,ml_signal,10,"Function name suggests a test case, useful for identifying test patterns",,83,),[8]
üß† ML Signal: Usage of evaluate_size_from_timestamp with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 13446, 62, 7857, 62, 6738, 62, 16514, 27823, 351, 2176, 10007]",0.5,84,ml_signal,11,Usage of evaluate_size_from_timestamp with specific parameters,,84,,[]
üß† ML Signal: Assert statement used to verify function output,"[8582, 100, 254, 10373, 26484, 25, 2195, 861, 2643, 973, 284, 11767, 2163, 5072]",0.5,105,ml_signal,18,Assert statement used to verify function output,,84,"        one_day_trading_minutes=4 * 60,","[220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 28, 19, 1635, 3126, 11]"
üß† ML Signal: Repeated pattern of function call with different parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 3912, 286, 2163, 869, 351, 1180, 10007]",0.5,126,ml_signal,18,Repeated pattern of function call with different parameters,,105,"        one_day_trading_minutes=4 * 60,","[220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 28, 19, 1635, 3126, 11]"
üß† ML Signal: Use of assert statements for testing expected outcomes,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2938, 10906]",1.0,130,ml_signal,46,Use of assert statements for testing expected outcomes,,126,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Testing function with different parameter values,"[8582, 100, 254, 10373, 26484, 25, 23983, 2163, 351, 1180, 11507, 3815]",1.0,130,ml_signal,49,Testing function with different parameter values,,130,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert without a message can make debugging harder,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 1231, 257, 3275, 460, 787, 28769, 7069]",1.0,144,sast_risk,50,Use of assert without a message can make debugging harder,Low,130,    size = evaluate_size_from_timestamp(,"[220, 220, 220, 2546, 796, 13446, 62, 7857, 62, 6738, 62, 16514, 27823, 7]"
üß† ML Signal: Testing function with different parameter values,"[8582, 100, 254, 10373, 26484, 25, 23983, 2163, 351, 1180, 11507, 3815]",1.0,162,ml_signal,52,Testing function with different parameter values,,144,"        end_timestamp=""2019-01-02"",","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 2625, 23344, 12, 486, 12, 2999, 1600]"
‚ö†Ô∏è SAST Risk (Low): Use of assert without a message can make debugging harder,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 1231, 257, 3275, 460, 787, 28769, 7069]",1.0,181,sast_risk,53,Use of assert without a message can make debugging harder,Low,162,"        level=IntervalLevel.LEVEL_1MIN,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 23678, 11]"
üß† ML Signal: Testing function with different parameter values,"[8582, 100, 254, 10373, 26484, 25, 23983, 2163, 351, 1180, 11507, 3815]",1.0,185,ml_signal,55,Testing function with different parameter values,,181,    ),"[220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Use of assert without a message can make debugging harder,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 1231, 257, 3275, 460, 787, 28769, 7069]",1.0,185,sast_risk,56,Use of assert without a message can make debugging harder,Low,185,,[]
üß† ML Signal: Use of hardcoded timestamp values for testing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1327, 40976, 41033, 3815, 329, 4856]",1.0,203,ml_signal,51,Use of hardcoded timestamp values for testing,,185,"        start_timestamp=""2019-01-01"",","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 2625, 23344, 12, 486, 12, 486, 1600]"
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,224,ml_signal,54,Use of assert statements for testing function behavior,,203,"        one_day_trading_minutes=4 * 60,","[220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 28, 19, 1635, 3126, 11]"
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,224,ml_signal,56,Use of assert statements for testing function behavior,,224,,[]
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,224,ml_signal,58,Use of assert statements for testing function behavior,,224,,[]
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,232,ml_signal,60,Use of assert statements for testing function behavior,,224,def test_next_timestamp():,"[4299, 1332, 62, 19545, 62, 16514, 27823, 33529]"
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,276,ml_signal,62,Use of assert statements for testing function behavior,,232,"    assert next_timestamp_on_level(current, level=IntervalLevel.LEVEL_1MIN) == to_pd_timestamp(""2019-01-10 13:16"")","[220, 220, 220, 6818, 1306, 62, 16514, 27823, 62, 261, 62, 5715, 7, 14421, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 23678, 8, 6624, 284, 62, 30094, 62, 16514, 27823, 7203, 23344, 12, 486, 12, 940, 1511, 25, 1433, 4943]"
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,320,ml_signal,64,Use of assert statements for testing function behavior,,276,"    assert next_timestamp_on_level(current, level=IntervalLevel.LEVEL_15MIN) == to_pd_timestamp(""2019-01-10 13:30"")","[220, 220, 220, 6818, 1306, 62, 16514, 27823, 62, 261, 62, 5715, 7, 14421, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 1314, 23678, 8, 6624, 284, 62, 30094, 62, 16514, 27823, 7203, 23344, 12, 486, 12, 940, 1511, 25, 1270, 4943]"
üß† ML Signal: Use of assert statements for testing function behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 6299, 329, 4856, 2163, 4069]",1.0,333,ml_signal,67,Use of assert statements for testing function behavior,,320,def test_is_finished_kdata_timestamp():,"[4299, 1332, 62, 271, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 33529]"
üß† ML Signal: Iterating over a function that splits time intervals,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2163, 326, 30778, 640, 20016]",1.0,333,ml_signal,66,Iterating over a function that splits time intervals,,333,,[]
‚úÖ Best Practice: Use logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,363,best_practice,71,Use logging instead of print for better control over output,,333,"    assert not is_finished_kdata_timestamp(timestamp, level=IntervalLevel.LEVEL_30MIN)","[220, 220, 220, 6818, 407, 318, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 1270, 23678, 8]"
‚úÖ Best Practice: Use logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,392,best_practice,73,Use logging instead of print for better control over output,,363,"    assert is_finished_kdata_timestamp(timestamp, level=IntervalLevel.LEVEL_5MIN)","[220, 220, 220, 6818, 318, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 20, 23678, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if is_same_date is not properly handling date formats,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 318, 62, 31642, 62, 4475, 318, 407, 6105, 9041, 3128, 17519]",0.5,392,sast_risk,75,Potential risk if is_same_date is not properly handling date formats,Low,392,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if is_same_date is not properly handling date formats,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 318, 62, 31642, 62, 4475, 318, 407, 6105, 9041, 3128, 17519]",0.5,421,sast_risk,77,Potential risk if is_same_date is not properly handling date formats,Low,392,"    assert is_finished_kdata_timestamp(timestamp, level=IntervalLevel.LEVEL_1DAY)","[220, 220, 220, 6818, 318, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if is_same_date is not properly handling date formats,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 318, 62, 31642, 62, 4475, 318, 407, 6105, 9041, 3128, 17519]",0.5,421,sast_risk,79,Potential risk if is_same_date is not properly handling date formats,Low,421,,[]
üß† ML Signal: Iterating over a function that splits time intervals,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2163, 326, 30778, 640, 20016]",1.0,431,ml_signal,80,Iterating over a function that splits time intervals,,421,def test_split_time_interval():,"[4299, 1332, 62, 35312, 62, 2435, 62, 3849, 2100, 33529]"
‚úÖ Best Practice: Use logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,452,best_practice,85,Use logging instead of print for better control over output,,431,"    for interval in split_time_interval(start, end, interval=30):","[220, 220, 220, 329, 16654, 287, 6626, 62, 2435, 62, 3849, 2100, 7, 9688, 11, 886, 11, 16654, 28, 1270, 2599]"
‚úÖ Best Practice: Use logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,466,best_practice,87,Use logging instead of print for better control over output,,452,            first = interval,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 717, 796, 16654]"
üß† ML Signal: Checking if the first interval starts with the expected date,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 717, 16654, 4940, 351, 262, 2938, 3128]",1.0,466,ml_signal,89,Checking if the first interval starts with the expected date,,466,,[]
üß† ML Signal: Checking if the first interval ends with the expected date,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 717, 16654, 5645, 351, 262, 2938, 3128]",1.0,473,ml_signal,91,Checking if the first interval ends with the expected date,,466,    print(last),"[220, 220, 220, 3601, 7, 12957, 8]"
üß† ML Signal: Checking if the last interval starts with the expected date,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 938, 16654, 4940, 351, 262, 2938, 3128]",1.0,489,ml_signal,93,Checking if the last interval starts with the expected date,,473,"    assert is_same_date(first[0], start)","[220, 220, 220, 6818, 318, 62, 31642, 62, 4475, 7, 11085, 58, 15, 4357, 923, 8]"
üß† ML Signal: Checking if the last interval ends with the expected date,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 938, 16654, 5645, 351, 262, 2938, 3128]",1.0,489,ml_signal,95,Checking if the last interval ends with the expected date,,489,,[]
üß† ML Signal: Testing function with specific date range inputs,"[8582, 100, 254, 10373, 26484, 25, 23983, 2163, 351, 2176, 3128, 2837, 17311]",1.0,505,ml_signal,93,Testing function with specific date range inputs,,489,"    assert is_same_date(first[0], start)","[220, 220, 220, 6818, 318, 62, 31642, 62, 4475, 7, 11085, 58, 15, 4357, 923, 8]"
üß† ML Signal: Printing output for manual verification,"[8582, 100, 254, 10373, 26484, 25, 44118, 5072, 329, 10107, 19637]",0.5,505,ml_signal,95,Printing output for manual verification,,505,,[]
üß† ML Signal: Using assertions to verify function output,"[8582, 100, 254, 10373, 26484, 25, 8554, 29965, 284, 11767, 2163, 5072]",0.5,505,ml_signal,97,Using assertions to verify function output,,505,,[]
üß† ML Signal: Testing function with different date range inputs,"[8582, 100, 254, 10373, 26484, 25, 23983, 2163, 351, 1180, 3128, 2837, 17311]",1.0,527,ml_signal,104,Testing function with different date range inputs,,505,"    for interval in split_time_interval(start, end, method=""month""):","[220, 220, 220, 329, 16654, 287, 6626, 62, 2435, 62, 3849, 2100, 7, 9688, 11, 886, 11, 2446, 2625, 8424, 1, 2599]"
üß† ML Signal: Printing output for manual verification,"[8582, 100, 254, 10373, 26484, 25, 44118, 5072, 329, 10107, 19637]",0.5,541,ml_signal,106,Printing output for manual verification,,527,            first = interval,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 717, 796, 16654]"
üß† ML Signal: Using assertions to verify function output,"[8582, 100, 254, 10373, 26484, 25, 8554, 29965, 284, 11767, 2163, 5072]",0.5,541,ml_signal,108,Using assertions to verify function output,,541,,[]
üß† ML Signal: Function definition for testing purposes,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 329, 4856, 4959]",1.0,551,ml_signal,107,Function definition for testing purposes,,541,        last = interval,"[220, 220, 220, 220, 220, 220, 220, 938, 796, 16654]"
üß† ML Signal: Hardcoded date strings for testing,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 13042, 329, 4856]",1.0,558,ml_signal,109,Hardcoded date strings for testing,,551,    print(first),"[220, 220, 220, 3601, 7, 11085, 8]"
üß† ML Signal: Hardcoded date strings for testing,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 13042, 329, 4856]",1.0,565,ml_signal,110,Hardcoded date strings for testing,,558,    print(last),"[220, 220, 220, 3601, 7, 12957, 8]"
‚úÖ Best Practice: Use of keyword arguments for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 21179, 7159, 329, 16287]",0.5,572,best_practice,110,Use of keyword arguments for clarity,,565,    print(last),"[220, 220, 220, 3601, 7, 12957, 8]"

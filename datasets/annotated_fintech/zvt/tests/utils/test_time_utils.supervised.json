[
  {
    "line": 1,
    "text": "# -*- coding: utf-8 -*-",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions and classes from modules indicates usage patterns and dependencies",
    "confidence": 1.0,
    "tokens": [
      2,
      532,
      9,
      12,
      19617,
      25,
      3384,
      69,
      12,
      23,
      532,
      9,
      12
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      290,
      6097,
      422,
      13103,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions and classes from modules indicates usage patterns and dependencies"
  },
  {
    "line": 3,
    "text": "from zvt.contract.utils import evaluate_size_from_timestamp, next_timestamp_on_level, is_finished_kdata_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions and classes from modules indicates usage patterns and dependencies",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      26791,
      1330,
      13446,
      62,
      7857,
      62,
      6738,
      62,
      16514,
      27823,
      11,
      1306,
      62,
      16514,
      27823,
      62,
      261,
      62,
      5715,
      11,
      318,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823
    ],
    "start_token": 13,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      290,
      6097,
      422,
      13103,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions and classes from modules indicates usage patterns and dependencies"
  },
  {
    "line": 3,
    "text": "from zvt.contract.utils import evaluate_size_from_timestamp, next_timestamp_on_level, is_finished_kdata_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions and classes from modules indicates usage patterns and dependencies",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      26791,
      1330,
      13446,
      62,
      7857,
      62,
      6738,
      62,
      16514,
      27823,
      11,
      1306,
      62,
      16514,
      27823,
      62,
      261,
      62,
      5715,
      11,
      318,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823
    ],
    "start_token": 48,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      290,
      6097,
      422,
      13103,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions and classes from modules indicates usage patterns and dependencies"
  },
  {
    "line": 10,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: Function name suggests a test case, useful for identifying test patterns",
    "confidence": 0.5,
    "tokens": [
      8
    ],
    "start_token": 83,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5644,
      257,
      1332,
      1339,
      11,
      4465,
      329,
      13720,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function name suggests a test case, useful for identifying test patterns"
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of evaluate_size_from_timestamp with specific parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      13446,
      62,
      7857,
      62,
      6738,
      62,
      16514,
      27823,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of evaluate_size_from_timestamp with specific parameters"
  },
  {
    "line": 18,
    "text": "        one_day_trading_minutes=4 * 60,",
    "annotation": "\ud83e\udde0 ML Signal: Assert statement used to verify function output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      28,
      19,
      1635,
      3126,
      11
    ],
    "start_token": 84,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      2643,
      973,
      284,
      11767,
      2163,
      5072
    ],
    "label": "ml_signal",
    "reason": "Assert statement used to verify function output"
  },
  {
    "line": 18,
    "text": "        one_day_trading_minutes=4 * 60,",
    "annotation": "\ud83e\udde0 ML Signal: Repeated pattern of function call with different parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      28,
      19,
      1635,
      3126,
      11
    ],
    "start_token": 105,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      3912,
      286,
      2163,
      869,
      351,
      1180,
      10007
    ],
    "label": "ml_signal",
    "reason": "Repeated pattern of function call with different parameters"
  },
  {
    "line": 46,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing expected outcomes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 126,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2938,
      10906
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing expected outcomes"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Testing function with different parameter values",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 130,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      351,
      1180,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Testing function with different parameter values"
  },
  {
    "line": 50,
    "text": "    size = evaluate_size_from_timestamp(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert without a message can make debugging harder",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2546,
      796,
      13446,
      62,
      7857,
      62,
      6738,
      62,
      16514,
      27823,
      7
    ],
    "start_token": 130,
    "end_token": 144,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      1231,
      257,
      3275,
      460,
      787,
      28769,
      7069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert without a message can make debugging harder"
  },
  {
    "line": 52,
    "text": "        end_timestamp=\"2019-01-02\",",
    "annotation": "\ud83e\udde0 ML Signal: Testing function with different parameter values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      2625,
      23344,
      12,
      486,
      12,
      2999,
      1600
    ],
    "start_token": 144,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      351,
      1180,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Testing function with different parameter values"
  },
  {
    "line": 53,
    "text": "        level=IntervalLevel.LEVEL_1MIN,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert without a message can make debugging harder",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      23678,
      11
    ],
    "start_token": 162,
    "end_token": 181,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      1231,
      257,
      3275,
      460,
      787,
      28769,
      7069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert without a message can make debugging harder"
  },
  {
    "line": 55,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Testing function with different parameter values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 181,
    "end_token": 185,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      351,
      1180,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Testing function with different parameter values"
  },
  {
    "line": 56,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert without a message can make debugging harder",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 185,
    "end_token": 185,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      1231,
      257,
      3275,
      460,
      787,
      28769,
      7069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert without a message can make debugging harder"
  },
  {
    "line": 51,
    "text": "        start_timestamp=\"2019-01-01\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded timestamp values for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      2625,
      23344,
      12,
      486,
      12,
      486,
      1600
    ],
    "start_token": 185,
    "end_token": 203,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      41033,
      3815,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded timestamp values for testing"
  },
  {
    "line": 54,
    "text": "        one_day_trading_minutes=4 * 60,",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      28,
      19,
      1635,
      3126,
      11
    ],
    "start_token": 203,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 56,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 224,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 224,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 60,
    "text": "def test_next_timestamp():",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      19545,
      62,
      16514,
      27823,
      33529
    ],
    "start_token": 224,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 62,
    "text": "    assert next_timestamp_on_level(current, level=IntervalLevel.LEVEL_1MIN) == to_pd_timestamp(\"2019-01-10 13:16\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      1306,
      62,
      16514,
      27823,
      62,
      261,
      62,
      5715,
      7,
      14421,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      23678,
      8,
      6624,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7203,
      23344,
      12,
      486,
      12,
      940,
      1511,
      25,
      1433,
      4943
    ],
    "start_token": 232,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 64,
    "text": "    assert next_timestamp_on_level(current, level=IntervalLevel.LEVEL_15MIN) == to_pd_timestamp(\"2019-01-10 13:30\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      1306,
      62,
      16514,
      27823,
      62,
      261,
      62,
      5715,
      7,
      14421,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      1314,
      23678,
      8,
      6624,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7203,
      23344,
      12,
      486,
      12,
      940,
      1511,
      25,
      1270,
      4943
    ],
    "start_token": 276,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 67,
    "text": "def test_is_finished_kdata_timestamp():",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert statements for testing function behavior",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      271,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      33529
    ],
    "start_token": 320,
    "end_token": 333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      6299,
      329,
      4856,
      2163,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of assert statements for testing function behavior"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a function that splits time intervals",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 333,
    "end_token": 333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2163,
      326,
      30778,
      640,
      20016
    ],
    "label": "ml_signal",
    "reason": "Iterating over a function that splits time intervals"
  },
  {
    "line": 71,
    "text": "    assert not is_finished_kdata_timestamp(timestamp, level=IntervalLevel.LEVEL_30MIN)",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      407,
      318,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      1270,
      23678,
      8
    ],
    "start_token": 333,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output"
  },
  {
    "line": 73,
    "text": "    assert is_finished_kdata_timestamp(timestamp, level=IntervalLevel.LEVEL_5MIN)",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      20,
      23678,
      8
    ],
    "start_token": 363,
    "end_token": 392,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output"
  },
  {
    "line": 75,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if is_same_date is not properly handling date formats",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 392,
    "end_token": 392,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      318,
      62,
      31642,
      62,
      4475,
      318,
      407,
      6105,
      9041,
      3128,
      17519
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if is_same_date is not properly handling date formats"
  },
  {
    "line": 77,
    "text": "    assert is_finished_kdata_timestamp(timestamp, level=IntervalLevel.LEVEL_1DAY)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if is_same_date is not properly handling date formats",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      8
    ],
    "start_token": 392,
    "end_token": 421,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      318,
      62,
      31642,
      62,
      4475,
      318,
      407,
      6105,
      9041,
      3128,
      17519
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if is_same_date is not properly handling date formats"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if is_same_date is not properly handling date formats",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 421,
    "end_token": 421,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      318,
      62,
      31642,
      62,
      4475,
      318,
      407,
      6105,
      9041,
      3128,
      17519
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if is_same_date is not properly handling date formats"
  },
  {
    "line": 80,
    "text": "def test_split_time_interval():",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a function that splits time intervals",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      35312,
      62,
      2435,
      62,
      3849,
      2100,
      33529
    ],
    "start_token": 421,
    "end_token": 431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2163,
      326,
      30778,
      640,
      20016
    ],
    "label": "ml_signal",
    "reason": "Iterating over a function that splits time intervals"
  },
  {
    "line": 85,
    "text": "    for interval in split_time_interval(start, end, interval=30):",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      16654,
      287,
      6626,
      62,
      2435,
      62,
      3849,
      2100,
      7,
      9688,
      11,
      886,
      11,
      16654,
      28,
      1270,
      2599
    ],
    "start_token": 431,
    "end_token": 452,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output"
  },
  {
    "line": 87,
    "text": "            first = interval",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      717,
      796,
      16654
    ],
    "start_token": 452,
    "end_token": 466,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the first interval starts with the expected date",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 466,
    "end_token": 466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      717,
      16654,
      4940,
      351,
      262,
      2938,
      3128
    ],
    "label": "ml_signal",
    "reason": "Checking if the first interval starts with the expected date"
  },
  {
    "line": 91,
    "text": "    print(last)",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the first interval ends with the expected date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      12957,
      8
    ],
    "start_token": 466,
    "end_token": 473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      717,
      16654,
      5645,
      351,
      262,
      2938,
      3128
    ],
    "label": "ml_signal",
    "reason": "Checking if the first interval ends with the expected date"
  },
  {
    "line": 93,
    "text": "    assert is_same_date(first[0], start)",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the last interval starts with the expected date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      31642,
      62,
      4475,
      7,
      11085,
      58,
      15,
      4357,
      923,
      8
    ],
    "start_token": 473,
    "end_token": 489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      938,
      16654,
      4940,
      351,
      262,
      2938,
      3128
    ],
    "label": "ml_signal",
    "reason": "Checking if the last interval starts with the expected date"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the last interval ends with the expected date",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 489,
    "end_token": 489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      938,
      16654,
      5645,
      351,
      262,
      2938,
      3128
    ],
    "label": "ml_signal",
    "reason": "Checking if the last interval ends with the expected date"
  },
  {
    "line": 93,
    "text": "    assert is_same_date(first[0], start)",
    "annotation": "\ud83e\udde0 ML Signal: Testing function with specific date range inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      31642,
      62,
      4475,
      7,
      11085,
      58,
      15,
      4357,
      923,
      8
    ],
    "start_token": 489,
    "end_token": 505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      351,
      2176,
      3128,
      2837,
      17311
    ],
    "label": "ml_signal",
    "reason": "Testing function with specific date range inputs"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Printing output for manual verification",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 505,
    "end_token": 505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44118,
      5072,
      329,
      10107,
      19637
    ],
    "label": "ml_signal",
    "reason": "Printing output for manual verification"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Using assertions to verify function output",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 505,
    "end_token": 505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      29965,
      284,
      11767,
      2163,
      5072
    ],
    "label": "ml_signal",
    "reason": "Using assertions to verify function output"
  },
  {
    "line": 104,
    "text": "    for interval in split_time_interval(start, end, method=\"month\"):",
    "annotation": "\ud83e\udde0 ML Signal: Testing function with different date range inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      16654,
      287,
      6626,
      62,
      2435,
      62,
      3849,
      2100,
      7,
      9688,
      11,
      886,
      11,
      2446,
      2625,
      8424,
      1,
      2599
    ],
    "start_token": 505,
    "end_token": 527,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23983,
      2163,
      351,
      1180,
      3128,
      2837,
      17311
    ],
    "label": "ml_signal",
    "reason": "Testing function with different date range inputs"
  },
  {
    "line": 106,
    "text": "            first = interval",
    "annotation": "\ud83e\udde0 ML Signal: Printing output for manual verification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      717,
      796,
      16654
    ],
    "start_token": 527,
    "end_token": 541,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44118,
      5072,
      329,
      10107,
      19637
    ],
    "label": "ml_signal",
    "reason": "Printing output for manual verification"
  },
  {
    "line": 108,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Using assertions to verify function output",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 541,
    "end_token": 541,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      29965,
      284,
      11767,
      2163,
      5072
    ],
    "label": "ml_signal",
    "reason": "Using assertions to verify function output"
  },
  {
    "line": 107,
    "text": "        last = interval",
    "annotation": "\ud83e\udde0 ML Signal: Function definition for testing purposes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      938,
      796,
      16654
    ],
    "start_token": 541,
    "end_token": 551,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      329,
      4856,
      4959
    ],
    "label": "ml_signal",
    "reason": "Function definition for testing purposes"
  },
  {
    "line": 109,
    "text": "    print(first)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded date strings for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      11085,
      8
    ],
    "start_token": 551,
    "end_token": 558,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3128,
      13042,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Hardcoded date strings for testing"
  },
  {
    "line": 110,
    "text": "    print(last)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded date strings for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      12957,
      8
    ],
    "start_token": 558,
    "end_token": 565,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3128,
      13042,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Hardcoded date strings for testing"
  },
  {
    "line": 110,
    "text": "    print(last)",
    "annotation": "\u2705 Best Practice: Use of keyword arguments for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      12957,
      8
    ],
    "start_token": 565,
    "end_token": 572,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      21179,
      7159,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of keyword arguments for clarity"
  }
]
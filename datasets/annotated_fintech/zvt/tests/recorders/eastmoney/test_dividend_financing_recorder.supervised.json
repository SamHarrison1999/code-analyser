[
  {
    "line": 2,
    "text": "from zvt.domain import DividendDetail, RightsIssueDetail, SpoDetail, DividendFinancing",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      360,
      1699,
      437,
      11242,
      603,
      11,
      6923,
      45147,
      11242,
      603,
      11,
      49331,
      11242,
      603,
      11,
      360,
      1699,
      437,
      18467,
      5077
    ],
    "start_token": 0,
    "end_token": 26,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Calling initialization functions at the start of the script ensures the context is set up before use.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 26,
    "end_token": 26,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      37588,
      5499,
      379,
      262,
      923,
      286,
      262,
      4226,
      19047,
      262,
      4732,
      318,
      900,
      510,
      878,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Calling initialization functions at the start of the script ensures the context is set up before use."
  },
  {
    "line": 7,
    "text": "from zvt.consts import SAMPLE_STOCK_CODES",
    "annotation": "\u2705 Best Practice: Importing constants from a dedicated module improves maintainability and readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      1102,
      6448,
      1330,
      28844,
      16437,
      62,
      2257,
      11290,
      62,
      34,
      3727,
      1546
    ],
    "start_token": 26,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      38491,
      422,
      257,
      7256,
      8265,
      19575,
      5529,
      1799,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing constants from a dedicated module improves maintainability and readability."
  },
  {
    "line": 5,
    "text": "init_test_context()",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific name pattern indicating a test function",
    "confidence": 0.5,
    "tokens": [
      15003,
      62,
      9288,
      62,
      22866,
      3419
    ],
    "start_token": 42,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      1438,
      3912,
      12739,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific name pattern indicating a test function"
  },
  {
    "line": 7,
    "text": "from zvt.consts import SAMPLE_STOCK_CODES",
    "annotation": "\u2705 Best Practice: Use of try-except block to handle potential exceptions",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      1102,
      6448,
      1330,
      28844,
      16437,
      62,
      2257,
      11290,
      62,
      34,
      3727,
      1546
    ],
    "start_token": 48,
    "end_token": 64,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1949,
      12,
      16341,
      2512,
      284,
      5412,
      2785,
      13269
    ],
    "label": "best_practice",
    "reason": "Use of try-except block to handle potential exceptions"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with specific parameters indicating a data recording operation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 64,
    "end_token": 64,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      2176,
      10007,
      12739,
      257,
      1366,
      8296,
      4905
    ],
    "label": "ml_signal",
    "reason": "Method call with specific parameters indicating a data recording operation"
  },
  {
    "line": 11,
    "text": "    try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching all exceptions without specific handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 64,
    "end_token": 69,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      477,
      13269,
      1231,
      2176,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching all exceptions without specific handling"
  },
  {
    "line": 12,
    "text": "        DividendDetail.record_data(provider=\"eastmoney\", codes=SAMPLE_STOCK_CODES)",
    "annotation": "\u2705 Best Practice: Assertion to ensure the test fails if an exception is caught",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      360,
      1699,
      437,
      11242,
      603,
      13,
      22105,
      62,
      7890,
      7,
      15234,
      1304,
      2625,
      23316,
      26316,
      1600,
      12416,
      28,
      49302,
      16437,
      62,
      2257,
      11290,
      62,
      34,
      3727,
      1546,
      8
    ],
    "start_token": 69,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      295,
      284,
      4155,
      262,
      1332,
      10143,
      611,
      281,
      6631,
      318,
      4978
    ],
    "label": "best_practice",
    "reason": "Assertion to ensure the test fails if an exception is caught"
  },
  {
    "line": 12,
    "text": "        DividendDetail.record_data(provider=\"eastmoney\", codes=SAMPLE_STOCK_CODES)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific method with parameters can indicate common testing patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      360,
      1699,
      437,
      11242,
      603,
      13,
      22105,
      62,
      7890,
      7,
      15234,
      1304,
      2625,
      23316,
      26316,
      1600,
      12416,
      28,
      49302,
      16437,
      62,
      2257,
      11290,
      62,
      34,
      3727,
      1546,
      8
    ],
    "start_token": 104,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2446,
      351,
      10007,
      460,
      7603,
      2219,
      4856,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific method with parameters can indicate common testing patterns."
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching all exceptions without handling them can hide errors and make debugging difficult.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      477,
      13269,
      1231,
      9041,
      606,
      460,
      7808,
      8563,
      290,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching all exceptions without handling them can hide errors and make debugging difficult."
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u2705 Best Practice: Use specific exception types instead of a bare except clause",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2176,
      6631,
      3858,
      2427,
      286,
      257,
      6247,
      2845,
      13444
    ],
    "label": "best_practice",
    "reason": "Use specific exception types instead of a bare except clause"
  },
  {
    "line": 17,
    "text": "def test_rights_issue_detail():",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameters, indicating usage pattern",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      28046,
      62,
      21949,
      62,
      49170,
      33529
    ],
    "start_token": 139,
    "end_token": 148,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      10007,
      11,
      12739,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameters, indicating usage pattern"
  },
  {
    "line": 20,
    "text": "    except:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Bare except can catch unexpected exceptions, leading to debugging difficulties",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2845,
      25
    ],
    "start_token": 148,
    "end_token": 153,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38234,
      2845,
      460,
      4929,
      10059,
      13269,
      11,
      3756,
      284,
      28769,
      13156
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Bare except can catch unexpected exceptions, leading to debugging difficulties"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assertion pattern indicating test failure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 153,
    "end_token": 153,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      3912,
      12739,
      1332,
      5287
    ],
    "label": "ml_signal",
    "reason": "Assertion pattern indicating test failure"
  },
  {
    "line": 20,
    "text": "    except:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition for testing purposes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2845,
      25
    ],
    "start_token": 153,
    "end_token": 158,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      329,
      4856,
      4959
    ],
    "label": "ml_signal",
    "reason": "Function definition for testing purposes"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with specific provider and codes, indicating usage pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 158,
    "end_token": 158,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      2176,
      10131,
      290,
      12416,
      11,
      12739,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method call with specific provider and codes, indicating usage pattern"
  },
  {
    "line": 24,
    "text": "def test_spo_detail():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching all exceptions without handling specific errors",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      2777,
      78,
      62,
      49170,
      33529
    ],
    "start_token": 158,
    "end_token": 166,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      477,
      13269,
      1231,
      9041,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching all exceptions without handling specific errors"
  }
]
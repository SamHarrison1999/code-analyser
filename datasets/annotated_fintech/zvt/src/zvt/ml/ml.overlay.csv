annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,13,best_practice,7,Grouping imports from the same package together improves readability.,,0,from sklearn.pipeline import make_pipeline,"[6738, 1341, 35720, 13, 79, 541, 4470, 1330, 787, 62, 79, 541, 4470]"
‚úÖ Best Practice: Using a logger instead of print statements for logging is a best practice.,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 2427, 286, 3601, 6299, 329, 18931, 318, 257, 1266, 3357, 13]",0.5,49,best_practice,17,Using a logger instead of print statements for logging is a best practice.,,13,"from zvt.utils.pd_utils import group_by_entity_id, normalize_group_compute_result, pd_is_not_null","[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 1448, 62, 1525, 62, 26858, 62, 312, 11, 3487, 1096, 62, 8094, 62, 5589, 1133, 62, 20274, 11, 279, 67, 62, 271, 62, 1662, 62, 8423]"
"üß† ML Signal: Function calculates percentage change, useful for time series analysis","[8582, 100, 254, 10373, 26484, 25, 15553, 43707, 5873, 1487, 11, 4465, 329, 640, 2168, 3781]",1.0,85,ml_signal,17,"Function calculates percentage change, useful for time series analysis",,49,"from zvt.utils.pd_utils import group_by_entity_id, normalize_group_compute_result, pd_is_not_null","[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 1448, 62, 1525, 62, 26858, 62, 312, 11, 3487, 1096, 62, 8094, 62, 5589, 1133, 62, 20274, 11, 279, 67, 62, 271, 62, 1662, 62, 8423]"
"‚úÖ Best Practice: Function name should be more descriptive, e.g., calculate_percentage_change","[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 517, 35644, 11, 304, 13, 70, 1539, 15284, 62, 25067, 496, 62, 3803]",1.0,101,best_practice,18,"Function name should be more descriptive, e.g., calculate_percentage_change",,85,from zvt.utils.time_utils import to_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823]"
‚úÖ Best Practice: Type hint for predict_range would improve readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 4331, 62, 9521, 561, 2987, 1100, 1799, 290, 5529, 1799]",1.0,101,best_practice,19,Type hint for predict_range would improve readability and maintainability,,101,,[]
"‚ö†Ô∏è SAST Risk (Low): No input validation for predict_range, could lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 5128, 21201, 329, 4331, 62, 9521, 11, 714, 1085, 284, 10059, 4069]",1.0,114,sast_risk,20,"No input validation for predict_range, could lead to unexpected behavior",Low,101,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
"‚ö†Ô∏è SAST Risk (Low): No input validation for s, could lead to unexpected behavior if not a pd.Series","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 5128, 21201, 329, 264, 11, 714, 1085, 284, 10059, 4069, 611, 407, 257, 279, 67, 13, 27996]",1.0,114,sast_risk,22,"No input validation for s, could lead to unexpected behavior if not a pd.Series",Low,114,,[]
"üß† ML Signal: Function uses percentage change to classify behavior, useful for trend prediction models","[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 5873, 1487, 284, 36509, 4069, 11, 4465, 329, 5182, 17724, 4981]",0.5,114,ml_signal,19,"Function uses percentage change to classify behavior, useful for trend prediction models",,114,,[]
‚úÖ Best Practice: Function name should be more descriptive to indicate its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 517, 35644, 284, 7603, 663, 4007]",0.5,127,best_practice,20,Function name should be more descriptive to indicate its purpose,,114,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
"üß† ML Signal: Uses percentage change over a specified range, indicating a pattern for time series analysis","[8582, 100, 254, 10373, 26484, 25, 36965, 5873, 1487, 625, 257, 7368, 2837, 11, 12739, 257, 3912, 329, 640, 2168, 3781]",0.5,127,ml_signal,22,"Uses percentage change over a specified range, indicating a pattern for time series analysis",,127,,[]
"üß† ML Signal: Lambda function categorizes data, useful for classification tasks","[8582, 100, 254, 10373, 26484, 25, 21114, 6814, 2163, 17851, 4340, 1366, 11, 4465, 329, 17923, 8861]",0.5,146,ml_signal,24,"Lambda function categorizes data, useful for classification tasks",,127,    return s.pct_change(periods=-predict_range),"[220, 220, 220, 1441, 264, 13, 79, 310, 62, 3803, 7, 41007, 82, 10779, 79, 17407, 62, 9521, 8]"
üß† ML Signal: Function for time series prediction by shifting data,"[8582, 100, 254, 10373, 26484, 25, 15553, 329, 640, 2168, 17724, 416, 15852, 1366]",1.0,162,ml_signal,23,Function for time series prediction by shifting data,,146,"def cal_change(s: pd.Series, predict_range):","[4299, 2386, 62, 3803, 7, 82, 25, 279, 67, 13, 27996, 11, 4331, 62, 9521, 2599]"
"‚úÖ Best Practice: Function name should be more descriptive, e.g., `calculate_prediction`","[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 517, 35644, 11, 304, 13, 70, 1539, 4600, 9948, 3129, 378, 62, 28764, 2867, 63]",1.0,181,best_practice,24,"Function name should be more descriptive, e.g., `calculate_prediction`",,162,    return s.pct_change(periods=-predict_range),"[220, 220, 220, 1441, 264, 13, 79, 310, 62, 3803, 7, 41007, 82, 10779, 79, 17407, 62, 9521, 8]"
‚ö†Ô∏è SAST Risk (Low): No input validation for `s` and `predict_range`,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 5128, 21201, 329, 4600, 82, 63, 290, 4600, 79, 17407, 62, 9521, 63]",1.0,181,sast_risk,26,No input validation for `s` and `predict_range`,Low,181,,[]
‚úÖ Best Practice: Add type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",1.0,200,best_practice,27,Add type hints for function parameters and return type,,181,"def cal_behavior_cls(s: pd.Series, predict_range):","[4299, 2386, 62, 46571, 62, 565, 82, 7, 82, 25, 279, 67, 13, 27996, 11, 4331, 62, 9521, 2599]"
‚ö†Ô∏è SAST Risk (Low): Function lacks error handling for cases where 's' is not comparable to 'RelativePerformance' values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 16523, 4049, 9041, 329, 2663, 810, 705, 82, 6, 318, 407, 13975, 284, 705, 6892, 876, 32273, 6, 3815]",0.5,200,sast_risk,25,Function lacks error handling for cases where 's' is not comparable to 'RelativePerformance' values,Low,200,,[]
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,200,best_practice,26,Consider adding type hints for the function parameters and return type for better readability and maintainability,,200,,[]
‚ö†Ô∏è SAST Risk (Low): Potential AttributeError if 'RelativePerformance' or its attributes are not defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 705, 6892, 876, 32273, 6, 393, 663, 12608, 389, 407, 5447]",0.5,221,sast_risk,28,Potential AttributeError if 'RelativePerformance' or its attributes are not defined,Low,200,    return s.pct_change(periods=-predict_range).apply(,"[220, 220, 220, 1441, 264, 13, 79, 310, 62, 3803, 7, 41007, 82, 10779, 79, 17407, 62, 9521, 737, 39014, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential AttributeError if 'RelativePerformance' or its attributes are not defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 705, 6892, 876, 32273, 6, 393, 663, 12608, 389, 407, 5447]",0.5,221,sast_risk,31,Potential AttributeError if 'RelativePerformance' or its attributes are not defined,Low,221,,[]
‚ö†Ô∏è SAST Risk (Low): Potential AttributeError if 'RelativePerformance' or its attributes are not defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 705, 6892, 876, 32273, 6, 393, 663, 12608, 389, 407, 5447]",0.5,237,sast_risk,34,Potential AttributeError if 'RelativePerformance' or its attributes are not defined,Low,221,    return s.shift(periods=-predict_range),"[220, 220, 220, 1441, 264, 13, 30846, 7, 41007, 82, 10779, 79, 17407, 62, 9521, 8]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,237,best_practice,32,Use of type annotations for class attributes improves code readability and maintainability.,,237,,[]
‚úÖ Best Practice: Class attribute with type annotation for better clarity and type checking.,"[26486, 227, 6705, 19939, 25, 5016, 11688, 351, 2099, 23025, 329, 1365, 16287, 290, 2099, 10627, 13]",0.5,253,best_practice,34,Class attribute with type annotation for better clarity and type checking.,,237,    return s.shift(periods=-predict_range),"[220, 220, 220, 1441, 264, 13, 30846, 7, 41007, 82, 10779, 79, 17407, 62, 9521, 8]"
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799, 13]",0.5,269,best_practice,58,Initialize instance variables in the constructor for clarity and maintainability.,,253,"        data_provider: str = None,","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 15234, 1304, 25, 965, 796, 6045, 11]"
‚úÖ Best Practice: Convert timestamps to a consistent format for internal processing.,"[26486, 227, 6705, 19939, 25, 38240, 4628, 395, 9430, 284, 257, 6414, 5794, 329, 5387, 7587, 13]",1.0,276,best_practice,60,Convert timestamps to a consistent format for internal processing.,,269,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
"‚ö†Ô∏è SAST Risk (Low): Assertion can be disabled in production, consider using exception handling.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 460, 307, 10058, 287, 3227, 11, 2074, 1262, 6631, 9041, 13]",0.5,290,sast_risk,64,"Assertion can be disabled in production, consider using exception handling.",Low,276,        :param start_timestamp:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 923, 62, 16514, 27823, 25]"
‚úÖ Best Practice: Use default values for parameters when not provided.,"[26486, 227, 6705, 19939, 25, 5765, 4277, 3815, 329, 10007, 618, 407, 2810, 13]",0.5,303,best_practice,69,Use default values for parameters when not provided.,,290,        :param adjust_type:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 4532, 62, 4906, 25]"
üß† ML Signal: Building a dataset (kdata) is a common pattern in ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 11819, 257, 27039, 357, 74, 7890, 8, 318, 257, 2219, 3912, 287, 10373, 670, 44041, 13]",0.5,319,ml_signal,74,Building a dataset (kdata) is a common pattern in ML workflows.,,303,        self.entity_ids = entity_ids,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 2340, 796, 9312, 62, 2340]"
‚ö†Ô∏è SAST Risk (Low): Logging error messages can expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 4049, 6218, 460, 15651, 8564, 1321, 13]",0.5,351,sast_risk,77,Logging error messages can expose sensitive information.,Low,319,        self.predict_start_timestamp = to_pd_timestamp(predict_start_timestamp),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 79, 17407, 62, 9688, 62, 16514, 27823, 796, 284, 62, 30094, 62, 16514, 27823, 7, 79, 17407, 62, 9688, 62, 16514, 27823, 8]"
"‚ö†Ô∏è SAST Risk (Low): Assertion can be disabled in production, consider using exception handling.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 460, 307, 10058, 287, 3227, 11, 2074, 1262, 6631, 9041, 13]",0.5,368,sast_risk,79,"Assertion can be disabled in production, consider using exception handling.",Low,351,        self.predict_steps = predict_steps,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 79, 17407, 62, 20214, 796, 4331, 62, 20214]"
"üß† ML Signal: Feature engineering step, common in ML pipelines.","[8582, 100, 254, 10373, 26484, 25, 27018, 8705, 2239, 11, 2219, 287, 10373, 31108, 13]",0.5,380,ml_signal,81,"Feature engineering step, common in ML pipelines.",,368,        self.level = level,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5715, 796, 1241]"
‚úÖ Best Practice: Handle missing data by dropping or imputing.,"[26486, 227, 6705, 19939, 25, 33141, 4814, 1366, 416, 12047, 393, 848, 15129, 13]",0.5,416,best_practice,83,Handle missing data by dropping or imputing.,,380,            adjust_type = default_adjust_type(entity_type=self.entity_schema.__name__),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 796, 4277, 62, 23032, 62, 4906, 7, 26858, 62, 4906, 28, 944, 13, 26858, 62, 15952, 2611, 13, 834, 3672, 834, 8]"
‚úÖ Best Practice: Use set operations to efficiently determine feature names.,"[26486, 227, 6705, 19939, 25, 5765, 900, 4560, 284, 18306, 5004, 3895, 3891, 13]",0.5,416,best_practice,85,Use set operations to efficiently determine feature names.,,416,,[]
üß† ML Signal: Label construction is a key step in supervised learning.,"[8582, 100, 254, 10373, 26484, 25, 36052, 5103, 318, 257, 1994, 2239, 287, 28679, 4673, 13]",0.5,416,ml_signal,88,Label construction is a key step in supervised learning.,,416,,[]
üß† ML Signal: Data splitting is a common step in preparing data for ML models.,"[8582, 100, 254, 10373, 26484, 25, 6060, 26021, 318, 257, 2219, 2239, 287, 10629, 1366, 329, 10373, 4981, 13]",0.5,429,ml_signal,92,Data splitting is a common step in preparing data for ML models.,,416,            assert False,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6818, 10352]"
‚ö†Ô∏è SAST Risk (Low): Logging data can expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 1366, 460, 15651, 8564, 1321, 13]",0.5,468,sast_risk,94,Logging data can expose sensitive information.,Low,429,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
‚ö†Ô∏è SAST Risk (Low): Logging data can expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 1366, 460, 15651, 8564, 1321, 13]",0.5,507,sast_risk,94,Logging data can expose sensitive information.,Low,468,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
‚úÖ Best Practice: Initialize model-related variables to None before use.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 2746, 12, 5363, 9633, 284, 6045, 878, 779, 13]",0.5,546,best_practice,94,Initialize model-related variables to None before use.,,507,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
üß† ML Signal: Splitting data into training and testing sets is a common pattern in ML workflows,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 1366, 656, 3047, 290, 4856, 5621, 318, 257, 2219, 3912, 287, 10373, 670, 44041]",1.0,564,ml_signal,86,Splitting data into training and testing sets is a common pattern in ML workflows,,546,        self.data_provider = data_provider,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 62, 15234, 1304, 796, 1366, 62, 15234, 1304]"
üß† ML Signal: Using timestamps to split data is a common practice in time series analysis,"[8582, 100, 254, 10373, 26484, 25, 8554, 4628, 395, 9430, 284, 6626, 1366, 318, 257, 2219, 3357, 287, 640, 2168, 3781]",1.0,564,ml_signal,88,Using timestamps to split data is a common practice in time series analysis,,564,,[]
üß† ML Signal: Aligning features and labels for training data,"[8582, 100, 254, 10373, 26484, 25, 978, 38944, 3033, 290, 14722, 329, 3047, 1366]",1.0,589,ml_signal,90,Aligning features and labels for training data,,564,        if not pd_is_not_null(self.kdata_df):,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 74, 7890, 62, 7568, 2599]"
üß† ML Signal: Using timestamps to split data is a common practice in time series analysis,"[8582, 100, 254, 10373, 26484, 25, 8554, 4628, 395, 9430, 284, 6626, 1366, 318, 257, 2219, 3357, 287, 640, 2168, 3781]",1.0,602,ml_signal,92,Using timestamps to split data is a common practice in time series analysis,,589,            assert False,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6818, 10352]"
üß† ML Signal: Aligning features and labels for testing data,"[8582, 100, 254, 10373, 26484, 25, 978, 38944, 3033, 290, 14722, 329, 4856, 1366]",1.0,641,ml_signal,94,Aligning features and labels for testing data,,602,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
‚úÖ Best Practice: Returning multiple values in a consistent order improves code readability,"[26486, 227, 6705, 19939, 25, 42882, 3294, 3815, 287, 257, 6414, 1502, 19575, 2438, 1100, 1799]",0.5,680,best_practice,94,Returning multiple values in a consistent order improves code readability,,641,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
"‚úÖ Best Practice: Define a function to encapsulate logic for building kdata, improving code organization and reusability.","[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2163, 284, 32652, 5039, 9156, 329, 2615, 479, 7890, 11, 10068, 2438, 4009, 290, 302, 385, 1799, 13]",0.5,693,best_practice,92,"Define a function to encapsulate logic for building kdata, improving code organization and reusability.",,680,            assert False,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6818, 10352]"
"‚úÖ Best Practice: Use a list to define column names, making it easy to modify or extend.","[26486, 227, 6705, 19939, 25, 5765, 257, 1351, 284, 8160, 5721, 3891, 11, 1642, 340, 2562, 284, 13096, 393, 9117, 13]",0.5,732,best_practice,94,"Use a list to define column names, making it easy to modify or extend.",,693,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
"üß† ML Signal: Usage of a function to retrieve data based on parameters, indicating a pattern for data retrieval.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 1366, 1912, 319, 10007, 11, 12739, 257, 3912, 329, 1366, 45069, 13]",0.5,771,ml_signal,94,"Usage of a function to retrieve data based on parameters, indicating a pattern for data retrieval.",,732,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
"üß† ML Signal: Use of self.entity_ids suggests an object-oriented approach, indicating a pattern for instance variable usage.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 26858, 62, 2340, 5644, 281, 2134, 12, 17107, 3164, 11, 12739, 257, 3912, 329, 4554, 7885, 8748, 13]",0.5,810,ml_signal,94,"Use of self.entity_ids suggests an object-oriented approach, indicating a pattern for instance variable usage.",,771,"        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30053, 62, 7568, 796, 2116, 13, 11249, 62, 30053, 7, 944, 13, 26858, 62, 2340, 11, 2116, 13, 9688, 62, 16514, 27823, 11, 2116, 13, 437, 62, 16514, 27823, 8]"
üß† ML Signal: Use of self.start_timestamp and self.end_timestamp indicates a pattern for time-based data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 9688, 62, 16514, 27823, 290, 2116, 13, 437, 62, 16514, 27823, 9217, 257, 3912, 329, 640, 12, 3106, 1366, 45069, 13]",0.5,829,ml_signal,100,Use of self.start_timestamp and self.end_timestamp indicates a pattern for time-based data retrieval.,,810,        self.label_ser = self.build_label(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 18242, 62, 2655, 796, 2116, 13, 11249, 62, 18242, 3419]"
"üß† ML Signal: Passing a list of columns to a function, indicating a pattern for data selection.","[8582, 100, 254, 10373, 26484, 25, 46389, 257, 1351, 286, 15180, 284, 257, 2163, 11, 12739, 257, 3912, 329, 1366, 6356, 13]",0.5,849,ml_signal,103,"Passing a list of columns to a function, indicating a pattern for data selection.",,829,        self.label_name = self.label_ser.name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 18242, 62, 3672, 796, 2116, 13, 18242, 62, 2655, 13, 3672]"
üß† ML Signal: Use of self.level suggests a pattern for hierarchical or leveled data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 5715, 5644, 257, 3912, 329, 38958, 393, 33297, 1366, 45069, 13]",0.5,886,ml_signal,105,Use of self.level suggests a pattern for hierarchical or leveled data retrieval.,,849,"        self.training_X, self.training_y, self.testing_X, self.testing_y = self.split_data()","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 34409, 62, 55, 11, 2116, 13, 34409, 62, 88, 11, 2116, 13, 33407, 62, 55, 11, 2116, 13, 33407, 62, 88, 796, 2116, 13, 35312, 62, 7890, 3419]"
üß† ML Signal: Use of self.adjust_type indicates a pattern for data adjustment or transformation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 23032, 62, 4906, 9217, 257, 3912, 329, 1366, 15068, 393, 13389, 13]",0.5,903,ml_signal,107,Use of self.adjust_type indicates a pattern for data adjustment or transformation.,,886,        logger.info(self.training_X),"[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 944, 13, 34409, 62, 55, 8]"
üß† ML Signal: Use of self.data_provider suggests a pattern for specifying data sources.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 7890, 62, 15234, 1304, 5644, 257, 3912, 329, 31577, 1366, 4237, 13]",0.5,920,ml_signal,108,Use of self.data_provider suggests a pattern for specifying data sources.,,903,        logger.info(self.training_y),"[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 944, 13, 34409, 62, 88, 8]"
üß† ML Signal: Specifying index columns indicates a pattern for data indexing.,"[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 6376, 15180, 9217, 257, 3912, 329, 1366, 6376, 278, 13]",0.5,930,ml_signal,113,Specifying index columns indicates a pattern for data indexing.,,920,    def split_data(self):,"[220, 220, 220, 825, 6626, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Use of drop_index_col=True suggests a pattern for data preprocessing or cleaning.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4268, 62, 9630, 62, 4033, 28, 17821, 5644, 257, 3912, 329, 1366, 662, 36948, 393, 12724, 13]",0.5,940,ml_signal,113,Use of drop_index_col=True suggests a pattern for data preprocessing or cleaning.,,930,    def split_data(self):,"[220, 220, 220, 825, 6626, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Dynamic label creation based on prediction steps and method,"[8582, 100, 254, 10373, 26484, 25, 26977, 6167, 6282, 1912, 319, 17724, 4831, 290, 2446]",1.0,940,ml_signal,106,Dynamic label creation based on prediction steps and method,,940,,[]
üß† ML Signal: Use of raw data for label creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8246, 1366, 329, 6167, 6282]",0.5,957,ml_signal,108,Use of raw data for label creation,,940,        logger.info(self.training_y),"[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 944, 13, 34409, 62, 88, 8]"
üß† ML Signal: Grouping data by entity for feature calculation,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 1366, 416, 9312, 329, 3895, 17952]",0.5,967,ml_signal,113,Grouping data by entity for feature calculation,,957,    def split_data(self):,"[220, 220, 220, 825, 6626, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Applying a prediction calculation function,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 17724, 17952, 2163]",0.5,977,ml_signal,113,Applying a prediction calculation function,,967,    def split_data(self):,"[220, 220, 220, 825, 6626, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Renaming series for label identification,"[8582, 100, 254, 10373, 26484, 25, 7152, 3723, 2168, 329, 6167, 11795]",0.5,1022,ml_signal,114,Renaming series for label identification,,977,"        training_x = self.feature_df[self.feature_df.index.get_level_values(""timestamp"") < self.predict_start_timestamp]","[220, 220, 220, 220, 220, 220, 220, 3047, 62, 87, 796, 2116, 13, 30053, 62, 7568, 58, 944, 13, 30053, 62, 7568, 13, 9630, 13, 1136, 62, 5715, 62, 27160, 7203, 16514, 27823, 4943, 1279, 2116, 13, 79, 17407, 62, 9688, 62, 16514, 27823, 60]"
üß† ML Signal: Use of change data for label creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1487, 1366, 329, 6167, 6282]",0.5,1045,ml_signal,119,Use of change data for label creation,,1022,"        return training_x, training_y, testing_x, testing_y","[220, 220, 220, 220, 220, 220, 220, 1441, 3047, 62, 87, 11, 3047, 62, 88, 11, 4856, 62, 87, 11, 4856, 62, 88]"
üß† ML Signal: Grouping data by entity for feature calculation,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 1366, 416, 9312, 329, 3895, 17952]",0.5,1045,ml_signal,120,Grouping data by entity for feature calculation,,1045,,[]
üß† ML Signal: Applying a change calculation function,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 1487, 17952, 2163]",0.5,1045,ml_signal,120,Applying a change calculation function,,1045,,[]
üß† ML Signal: Renaming series for label identification,"[8582, 100, 254, 10373, 26484, 25, 7152, 3723, 2168, 329, 6167, 11795]",0.5,1068,ml_signal,126,Renaming series for label identification,,1045,"            end_timestamp=self.end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 944, 13, 437, 62, 16514, 27823, 11]"
üß† ML Signal: Use of behavior classification for label creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4069, 17923, 329, 6167, 6282]",0.5,1089,ml_signal,129,Use of behavior classification for label creation,,1068,"            adjust_type=self.adjust_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 28, 944, 13, 23032, 62, 4906, 11]"
üß† ML Signal: Grouping data by entity for feature calculation,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 1366, 416, 9312, 329, 3895, 17952]",0.5,1111,ml_signal,131,Grouping data by entity for feature calculation,,1089,"            index=[""entity_id"", ""timestamp""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 28, 14692, 26858, 62, 312, 1600, 366, 16514, 27823, 33116]"
üß† ML Signal: Applying a behavior classification function,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 4069, 17923, 2163]",0.5,1119,ml_signal,133,Applying a behavior classification function,,1111,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Renaming series for label identification,"[8582, 100, 254, 10373, 26484, 25, 7152, 3723, 2168, 329, 6167, 11795]",0.5,1129,ml_signal,135,Renaming series for label identification,,1119,    def build_label(self):,"[220, 220, 220, 825, 1382, 62, 18242, 7, 944, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for control flow, which can be disabled","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202, 11, 543, 460, 307, 10058]",1.0,1146,sast_risk,137,"Use of assert for control flow, which can be disabled",Low,1129,"        if self.label_method == ""raw"":","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 18242, 62, 24396, 6624, 366, 1831, 1298]"
üß† ML Signal: Normalizing computed results for consistency,"[8582, 100, 254, 10373, 26484, 25, 14435, 2890, 29231, 2482, 329, 15794]",1.0,1169,ml_signal,141,Normalizing computed results for consistency,,1146,                .rename(label_name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 918, 480, 7, 18242, 62, 3672, 8]"
üß† ML Signal: Method for training a machine learning model,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 3047, 257, 4572, 4673, 2746]",1.0,1190,ml_signal,129,Method for training a machine learning model,,1169,"            adjust_type=self.adjust_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 28, 944, 13, 23032, 62, 4906, 11]"
‚úÖ Best Practice: Allowing model and parameters to be passed in increases flexibility,"[26486, 227, 6705, 19939, 25, 1439, 7855, 2746, 290, 10007, 284, 307, 3804, 287, 5732, 13688]",1.0,1210,best_practice,130,Allowing model and parameters to be passed in increases flexibility,,1190,"            provider=self.data_provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 944, 13, 7890, 62, 15234, 1304, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for misuse if `params` contains unsafe data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 29169, 611, 4600, 37266, 63, 4909, 21596, 1366]",1.0,1229,sast_risk,132,Potential for misuse if `params` contains unsafe data,Low,1210,"            drop_index_col=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 62, 9630, 62, 4033, 28, 17821, 11]"
üß† ML Signal: Returns the trained model,"[8582, 100, 254, 10373, 26484, 25, 16409, 262, 8776, 2746]",1.0,1229,ml_signal,134,Returns the trained model,,1229,,[]
üß† ML Signal: Use of conditional logic to determine different processing paths,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5004, 1180, 7587, 13532]",1.0,1237,ml_signal,133,Use of conditional logic to determine different processing paths,,1229,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: DataFrame operations to manipulate and prepare data,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 4560, 284, 18510, 290, 8335, 1366]",0.5,1247,ml_signal,135,DataFrame operations to manipulate and prepare data,,1237,    def build_label(self):,"[220, 220, 220, 825, 1382, 62, 18242, 7, 944, 2599]"
üß† ML Signal: Conversion of prediction results to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 17724, 2482, 284, 6060, 19778]",0.5,1264,ml_signal,137,Conversion of prediction results to DataFrame,,1247,"        if self.label_method == ""raw"":","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 18242, 62, 24396, 6624, 366, 1831, 1298]"
üß† ML Signal: Shifting prediction results for alignment,"[8582, 100, 254, 10373, 26484, 25, 911, 13309, 17724, 2482, 329, 19114]",0.5,1281,ml_signal,137,Shifting prediction results for alignment,,1264,"        if self.label_method == ""raw"":","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 18242, 62, 24396, 6624, 366, 1831, 1298]"
üß† ML Signal: Use of a custom Drawer class for visualization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2183, 15315, 263, 1398, 329, 32704]",1.0,1304,ml_signal,141,Use of a custom Drawer class for visualization,,1281,                .rename(label_name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 918, 480, 7, 18242, 62, 3672, 8]"
üß† ML Signal: Visualization method call,"[8582, 100, 254, 10373, 26484, 25, 15612, 1634, 2446, 869]",0.5,1338,ml_signal,146,Visualization method call,,1304,"                .apply(lambda x: cal_change(x, self.predict_steps))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 39014, 7, 50033, 2124, 25, 2386, 62, 3803, 7, 87, 11, 2116, 13, 79, 17407, 62, 20214, 4008]"
üß† ML Signal: Conversion of prediction results to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 17724, 2482, 284, 6060, 19778]",0.5,1359,ml_signal,149,Conversion of prediction results to DataFrame,,1338,"        elif self.label_method == ""behavior_cls"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13, 18242, 62, 24396, 6624, 366, 46571, 62, 565, 82, 1298]"
üß† ML Signal: Joining real and predicted results for comparison,"[8582, 100, 254, 10373, 26484, 25, 5302, 3191, 1103, 290, 11001, 2482, 329, 7208]",1.0,1373,ml_signal,150,Joining real and predicted results for comparison,,1359,            y = (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 796, 357]"
üß† ML Signal: Use of a custom Drawer class for visualization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2183, 15315, 263, 1398, 329, 32704]",1.0,1396,ml_signal,153,Use of a custom Drawer class for visualization,,1373,                .rename(label_name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 918, 480, 7, 18242, 62, 3672, 8]"
üß† ML Signal: Visualization method call,"[8582, 100, 254, 10373, 26484, 25, 15612, 1634, 2446, 869]",0.5,1419,ml_signal,153,Visualization method call,,1396,                .rename(label_name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 918, 480, 7, 18242, 62, 3672, 8]"
üß† ML Signal: Method for making predictions using a model,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 1642, 16277, 1262, 257, 2746]",0.5,1431,ml_signal,148,Method for making predictions using a model,,1419,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Storing predictions in a pandas Series,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 16277, 287, 257, 19798, 292, 7171]",0.5,1445,ml_signal,150,Storing predictions in a pandas Series,,1431,            y = (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 796, 357]"
‚úÖ Best Practice: Use of pandas Series for aligning predictions with indices,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 7171, 329, 10548, 278, 16277, 351, 36525]",0.5,1459,best_practice,150,Use of pandas Series for aligning predictions with indices,,1445,            y = (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 796, 357]"
‚úÖ Best Practice: Docstring provides a clear description of the method's purpose and expected input/output.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 2938, 5128, 14, 22915, 13]",1.0,1482,best_practice,153,Docstring provides a clear description of the method's purpose and expected input/output.,,1459,                .rename(label_name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 918, 480, 7, 18242, 62, 3672, 8]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444, 13]",1.0,1496,sast_risk,165,"Method is not implemented, which could lead to runtime errors if called.",Low,1482,"    def draw_result(self, entity_id):","[220, 220, 220, 825, 3197, 62, 20274, 7, 944, 11, 9312, 62, 312, 2599]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748, 13]",0.5,1510,best_practice,165,Class definition should include a docstring to describe its purpose and usage.,,1496,"    def draw_result(self, entity_id):","[220, 220, 220, 825, 3197, 62, 20274, 7, 944, 11, 9312, 62, 312, 2599]"
üß† ML Signal: Usage of entity_schema suggests a pattern for defining schemas in ML models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 9312, 62, 15952, 2611, 5644, 257, 3912, 329, 16215, 3897, 5356, 287, 10373, 4981, 13]",0.5,1542,ml_signal,167,Usage of entity_schema suggests a pattern for defining schemas in ML models.,,1510,"            df = self.kdata_df.loc[[entity_id], [""close""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13, 74, 7890, 62, 7568, 13, 17946, 30109, 26858, 62, 312, 4357, 14631, 19836, 8973, 4083, 30073, 3419]"
‚úÖ Best Practice: Class definition should follow the naming convention of using CamelCase.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 262, 19264, 9831, 286, 1262, 43281, 20448, 13]",1.0,1574,best_practice,167,Class definition should follow the naming convention of using CamelCase.,,1542,"            df = self.kdata_df.loc[[entity_id], [""close""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13, 74, 7890, 62, 7568, 13, 17946, 30109, 26858, 62, 312, 4357, 14631, 19836, 8973, 4083, 30073, 3419]"
‚úÖ Best Practice: Add detailed docstring for parameters and return value,"[26486, 227, 6705, 19939, 25, 3060, 6496, 2205, 8841, 329, 10007, 290, 1441, 1988]",1.0,1574,best_practice,171,Add detailed docstring for parameters and return value,,1574,,[]
üß† ML Signal: Use of moving average windows for feature transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3867, 2811, 9168, 329, 3895, 13389]",0.5,1621,ml_signal,179,Use of moving average windows for feature transformation,,1574,"            df = self.testing_y.to_frame(name=""real_result"").loc[[entity_id], :].join(pred_df, how=""outer"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13, 33407, 62, 88, 13, 1462, 62, 14535, 7, 3672, 2625, 5305, 62, 20274, 11074, 17946, 30109, 26858, 62, 312, 4357, 1058, 4083, 22179, 7, 28764, 62, 7568, 11, 703, 2625, 39605, 4943]"
üß† ML Signal: Instantiation and usage of a machine learning pipeline,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 290, 8748, 286, 257, 4572, 4673, 11523]",1.0,1621,ml_signal,183,Instantiation and usage of a machine learning pipeline,,1621,,[]
üß† ML Signal: Use of a machine learning pipeline with data preprocessing and model training,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 4572, 4673, 11523, 351, 1366, 662, 36948, 290, 2746, 3047]",1.0,1643,ml_signal,185,Use of a machine learning pipeline with data preprocessing and model training,,1621,        predictions = self.model.predict(self.testing_X),"[220, 220, 220, 220, 220, 220, 220, 16277, 796, 2116, 13, 19849, 13, 79, 17407, 7, 944, 13, 33407, 62, 55, 8]"
üß† ML Signal: Training a machine learning model,"[8582, 100, 254, 10373, 26484, 25, 13614, 257, 4572, 4673, 2746]",1.0,1676,ml_signal,186,Training a machine learning model,,1643,"        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28764, 62, 88, 796, 279, 67, 13, 27996, 7, 7890, 28, 28764, 9278, 11, 6376, 28, 944, 13, 33407, 62, 88, 13, 9630, 8]"
üß† ML Signal: Making predictions with a trained machine learning model,"[8582, 100, 254, 10373, 26484, 25, 16427, 16277, 351, 257, 8776, 4572, 4673, 2746]",1.0,1709,ml_signal,186,Making predictions with a trained machine learning model,,1676,"        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28764, 62, 88, 796, 279, 67, 13, 27996, 7, 7890, 28, 28764, 9278, 11, 6376, 28, 944, 13, 33407, 62, 88, 13, 9630, 8]"
üß† ML Signal: Visualization of machine learning results,"[8582, 100, 254, 10373, 26484, 25, 15612, 1634, 286, 4572, 4673, 2482]",1.0,1742,ml_signal,186,Visualization of machine learning results,,1709,"        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28764, 62, 88, 796, 279, 67, 13, 27996, 7, 7890, 28, 28764, 9278, 11, 6376, 28, 944, 13, 33407, 62, 88, 13, 9630, 8]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,1775,best_practice,186,Use of __all__ to define public API of the module,,1742,"        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28764, 62, 88, 796, 279, 67, 13, 27996, 7, 7890, 28, 28764, 9278, 11, 6376, 28, 944, 13, 33407, 62, 88, 13, 9630, 8]"

[
  {
    "line": 7,
    "text": "from sklearn.pipeline import make_pipeline",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1341,
      35720,
      13,
      79,
      541,
      4470,
      1330,
      787,
      62,
      79,
      541,
      4470
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 17,
    "text": "from zvt.utils.pd_utils import group_by_entity_id, normalize_group_compute_result, pd_is_not_null",
    "annotation": "\u2705 Best Practice: Using a logger instead of print statements for logging is a best practice.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      1448,
      62,
      1525,
      62,
      26858,
      62,
      312,
      11,
      3487,
      1096,
      62,
      8094,
      62,
      5589,
      1133,
      62,
      20274,
      11,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 13,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      2427,
      286,
      3601,
      6299,
      329,
      18931,
      318,
      257,
      1266,
      3357,
      13
    ],
    "label": "best_practice",
    "reason": "Using a logger instead of print statements for logging is a best practice."
  },
  {
    "line": 17,
    "text": "from zvt.utils.pd_utils import group_by_entity_id, normalize_group_compute_result, pd_is_not_null",
    "annotation": "\ud83e\udde0 ML Signal: Function calculates percentage change, useful for time series analysis",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      1448,
      62,
      1525,
      62,
      26858,
      62,
      312,
      11,
      3487,
      1096,
      62,
      8094,
      62,
      5589,
      1133,
      62,
      20274,
      11,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 49,
    "end_token": 85,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      43707,
      5873,
      1487,
      11,
      4465,
      329,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Function calculates percentage change, useful for time series analysis"
  },
  {
    "line": 18,
    "text": "from zvt.utils.time_utils import to_pd_timestamp",
    "annotation": "\u2705 Best Practice: Function name should be more descriptive, e.g., calculate_percentage_change",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 85,
    "end_token": 101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      815,
      307,
      517,
      35644,
      11,
      304,
      13,
      70,
      1539,
      15284,
      62,
      25067,
      496,
      62,
      3803
    ],
    "label": "best_practice",
    "reason": "Function name should be more descriptive, e.g., calculate_percentage_change"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hint for predict_range would improve readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 101,
    "end_token": 101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      4331,
      62,
      9521,
      561,
      2987,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hint for predict_range would improve readability and maintainability"
  },
  {
    "line": 20,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No input validation for predict_range, could lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 101,
    "end_token": 114,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      5128,
      21201,
      329,
      4331,
      62,
      9521,
      11,
      714,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No input validation for predict_range, could lead to unexpected behavior"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No input validation for s, could lead to unexpected behavior if not a pd.Series",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 114,
    "end_token": 114,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      5128,
      21201,
      329,
      264,
      11,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      407,
      257,
      279,
      67,
      13,
      27996
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No input validation for s, could lead to unexpected behavior if not a pd.Series"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function uses percentage change to classify behavior, useful for trend prediction models",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 114,
    "end_token": 114,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      5873,
      1487,
      284,
      36509,
      4069,
      11,
      4465,
      329,
      5182,
      17724,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function uses percentage change to classify behavior, useful for trend prediction models"
  },
  {
    "line": 20,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\u2705 Best Practice: Function name should be more descriptive to indicate its purpose",
    "confidence": 0.5,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 114,
    "end_token": 127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      815,
      307,
      517,
      35644,
      284,
      7603,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Function name should be more descriptive to indicate its purpose"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Uses percentage change over a specified range, indicating a pattern for time series analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 127,
    "end_token": 127,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36965,
      5873,
      1487,
      625,
      257,
      7368,
      2837,
      11,
      12739,
      257,
      3912,
      329,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Uses percentage change over a specified range, indicating a pattern for time series analysis"
  },
  {
    "line": 24,
    "text": "    return s.pct_change(periods=-predict_range)",
    "annotation": "\ud83e\udde0 ML Signal: Lambda function categorizes data, useful for classification tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      264,
      13,
      79,
      310,
      62,
      3803,
      7,
      41007,
      82,
      10779,
      79,
      17407,
      62,
      9521,
      8
    ],
    "start_token": 127,
    "end_token": 146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21114,
      6814,
      2163,
      17851,
      4340,
      1366,
      11,
      4465,
      329,
      17923,
      8861
    ],
    "label": "ml_signal",
    "reason": "Lambda function categorizes data, useful for classification tasks"
  },
  {
    "line": 23,
    "text": "def cal_change(s: pd.Series, predict_range):",
    "annotation": "\ud83e\udde0 ML Signal: Function for time series prediction by shifting data",
    "confidence": 1.0,
    "tokens": [
      4299,
      2386,
      62,
      3803,
      7,
      82,
      25,
      279,
      67,
      13,
      27996,
      11,
      4331,
      62,
      9521,
      2599
    ],
    "start_token": 146,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      640,
      2168,
      17724,
      416,
      15852,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function for time series prediction by shifting data"
  },
  {
    "line": 24,
    "text": "    return s.pct_change(periods=-predict_range)",
    "annotation": "\u2705 Best Practice: Function name should be more descriptive, e.g., `calculate_prediction`",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      264,
      13,
      79,
      310,
      62,
      3803,
      7,
      41007,
      82,
      10779,
      79,
      17407,
      62,
      9521,
      8
    ],
    "start_token": 162,
    "end_token": 181,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      815,
      307,
      517,
      35644,
      11,
      304,
      13,
      70,
      1539,
      4600,
      9948,
      3129,
      378,
      62,
      28764,
      2867,
      63
    ],
    "label": "best_practice",
    "reason": "Function name should be more descriptive, e.g., `calculate_prediction`"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No input validation for `s` and `predict_range`",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 181,
    "end_token": 181,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      5128,
      21201,
      329,
      4600,
      82,
      63,
      290,
      4600,
      79,
      17407,
      62,
      9521,
      63
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No input validation for `s` and `predict_range`"
  },
  {
    "line": 27,
    "text": "def cal_behavior_cls(s: pd.Series, predict_range):",
    "annotation": "\u2705 Best Practice: Add type hints for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      4299,
      2386,
      62,
      46571,
      62,
      565,
      82,
      7,
      82,
      25,
      279,
      67,
      13,
      27996,
      11,
      4331,
      62,
      9521,
      2599
    ],
    "start_token": 181,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Add type hints for function parameters and return type"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function lacks error handling for cases where 's' is not comparable to 'RelativePerformance' values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 200,
    "end_token": 200,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      16523,
      4049,
      9041,
      329,
      2663,
      810,
      705,
      82,
      6,
      318,
      407,
      13975,
      284,
      705,
      6892,
      876,
      32273,
      6,
      3815
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function lacks error handling for cases where 's' is not comparable to 'RelativePerformance' values"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 200,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability"
  },
  {
    "line": 28,
    "text": "    return s.pct_change(periods=-predict_range).apply(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential AttributeError if 'RelativePerformance' or its attributes are not defined",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      264,
      13,
      79,
      310,
      62,
      3803,
      7,
      41007,
      82,
      10779,
      79,
      17407,
      62,
      9521,
      737,
      39014,
      7
    ],
    "start_token": 200,
    "end_token": 221,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3460,
      4163,
      12331,
      611,
      705,
      6892,
      876,
      32273,
      6,
      393,
      663,
      12608,
      389,
      407,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential AttributeError if 'RelativePerformance' or its attributes are not defined"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential AttributeError if 'RelativePerformance' or its attributes are not defined",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 221,
    "end_token": 221,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3460,
      4163,
      12331,
      611,
      705,
      6892,
      876,
      32273,
      6,
      393,
      663,
      12608,
      389,
      407,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential AttributeError if 'RelativePerformance' or its attributes are not defined"
  },
  {
    "line": 34,
    "text": "    return s.shift(periods=-predict_range)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential AttributeError if 'RelativePerformance' or its attributes are not defined",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      264,
      13,
      30846,
      7,
      41007,
      82,
      10779,
      79,
      17407,
      62,
      9521,
      8
    ],
    "start_token": 221,
    "end_token": 237,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3460,
      4163,
      12331,
      611,
      705,
      6892,
      876,
      32273,
      6,
      393,
      663,
      12608,
      389,
      407,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential AttributeError if 'RelativePerformance' or its attributes are not defined"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 237,
    "end_token": 237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 34,
    "text": "    return s.shift(periods=-predict_range)",
    "annotation": "\u2705 Best Practice: Class attribute with type annotation for better clarity and type checking.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      264,
      13,
      30846,
      7,
      41007,
      82,
      10779,
      79,
      17407,
      62,
      9521,
      8
    ],
    "start_token": 237,
    "end_token": 253,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      11688,
      351,
      2099,
      23025,
      329,
      1365,
      16287,
      290,
      2099,
      10627,
      13
    ],
    "label": "best_practice",
    "reason": "Class attribute with type annotation for better clarity and type checking."
  },
  {
    "line": 58,
    "text": "        data_provider: str = None,",
    "annotation": "\u2705 Best Practice: Initialize instance variables in the constructor for clarity and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15234,
      1304,
      25,
      965,
      796,
      6045,
      11
    ],
    "start_token": 253,
    "end_token": 269,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in the constructor for clarity and maintainability."
  },
  {
    "line": 60,
    "text": "    ) -> None:",
    "annotation": "\u2705 Best Practice: Convert timestamps to a consistent format for internal processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 269,
    "end_token": 276,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4628,
      395,
      9430,
      284,
      257,
      6414,
      5794,
      329,
      5387,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Convert timestamps to a consistent format for internal processing."
  },
  {
    "line": 64,
    "text": "        :param start_timestamp:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion can be disabled in production, consider using exception handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      923,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 276,
    "end_token": 290,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      460,
      307,
      10058,
      287,
      3227,
      11,
      2074,
      1262,
      6631,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion can be disabled in production, consider using exception handling."
  },
  {
    "line": 69,
    "text": "        :param adjust_type:",
    "annotation": "\u2705 Best Practice: Use default values for parameters when not provided.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      4532,
      62,
      4906,
      25
    ],
    "start_token": 290,
    "end_token": 303,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4277,
      3815,
      329,
      10007,
      618,
      407,
      2810,
      13
    ],
    "label": "best_practice",
    "reason": "Use default values for parameters when not provided."
  },
  {
    "line": 74,
    "text": "        self.entity_ids = entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Building a dataset (kdata) is a common pattern in ML workflows.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26858,
      62,
      2340,
      796,
      9312,
      62,
      2340
    ],
    "start_token": 303,
    "end_token": 319,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11819,
      257,
      27039,
      357,
      74,
      7890,
      8,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "Building a dataset (kdata) is a common pattern in ML workflows."
  },
  {
    "line": 77,
    "text": "        self.predict_start_timestamp = to_pd_timestamp(predict_start_timestamp)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging error messages can expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      79,
      17407,
      62,
      9688,
      62,
      16514,
      27823,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      79,
      17407,
      62,
      9688,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 319,
    "end_token": 351,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      4049,
      6218,
      460,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging error messages can expose sensitive information."
  },
  {
    "line": 79,
    "text": "        self.predict_steps = predict_steps",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion can be disabled in production, consider using exception handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      79,
      17407,
      62,
      20214,
      796,
      4331,
      62,
      20214
    ],
    "start_token": 351,
    "end_token": 368,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      460,
      307,
      10058,
      287,
      3227,
      11,
      2074,
      1262,
      6631,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion can be disabled in production, consider using exception handling."
  },
  {
    "line": 81,
    "text": "        self.level = level",
    "annotation": "\ud83e\udde0 ML Signal: Feature engineering step, common in ML pipelines.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5715,
      796,
      1241
    ],
    "start_token": 368,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27018,
      8705,
      2239,
      11,
      2219,
      287,
      10373,
      31108,
      13
    ],
    "label": "ml_signal",
    "reason": "Feature engineering step, common in ML pipelines."
  },
  {
    "line": 83,
    "text": "            adjust_type = default_adjust_type(entity_type=self.entity_schema.__name__)",
    "annotation": "\u2705 Best Practice: Handle missing data by dropping or imputing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      62,
      4906,
      796,
      4277,
      62,
      23032,
      62,
      4906,
      7,
      26858,
      62,
      4906,
      28,
      944,
      13,
      26858,
      62,
      15952,
      2611,
      13,
      834,
      3672,
      834,
      8
    ],
    "start_token": 380,
    "end_token": 416,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33141,
      4814,
      1366,
      416,
      12047,
      393,
      848,
      15129,
      13
    ],
    "label": "best_practice",
    "reason": "Handle missing data by dropping or imputing."
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\u2705 Best Practice: Use set operations to efficiently determine feature names.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 416,
    "end_token": 416,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      4560,
      284,
      18306,
      5004,
      3895,
      3891,
      13
    ],
    "label": "best_practice",
    "reason": "Use set operations to efficiently determine feature names."
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Label construction is a key step in supervised learning.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 416,
    "end_token": 416,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36052,
      5103,
      318,
      257,
      1994,
      2239,
      287,
      28679,
      4673,
      13
    ],
    "label": "ml_signal",
    "reason": "Label construction is a key step in supervised learning."
  },
  {
    "line": 92,
    "text": "            assert False",
    "annotation": "\ud83e\udde0 ML Signal: Data splitting is a common step in preparing data for ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      10352
    ],
    "start_token": 416,
    "end_token": 429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      26021,
      318,
      257,
      2219,
      2239,
      287,
      10629,
      1366,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Data splitting is a common step in preparing data for ML models."
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging data can expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 429,
    "end_token": 468,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      1366,
      460,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging data can expose sensitive information."
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging data can expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 468,
    "end_token": 507,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      1366,
      460,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging data can expose sensitive information."
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\u2705 Best Practice: Initialize model-related variables to None before use.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 507,
    "end_token": 546,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      2746,
      12,
      5363,
      9633,
      284,
      6045,
      878,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize model-related variables to None before use."
  },
  {
    "line": 86,
    "text": "        self.data_provider = data_provider",
    "annotation": "\ud83e\udde0 ML Signal: Splitting data into training and testing sets is a common pattern in ML workflows",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      15234,
      1304,
      796,
      1366,
      62,
      15234,
      1304
    ],
    "start_token": 546,
    "end_token": 564,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      1366,
      656,
      3047,
      290,
      4856,
      5621,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      670,
      44041
    ],
    "label": "ml_signal",
    "reason": "Splitting data into training and testing sets is a common pattern in ML workflows"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Using timestamps to split data is a common practice in time series analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 564,
    "end_token": 564,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      4628,
      395,
      9430,
      284,
      6626,
      1366,
      318,
      257,
      2219,
      3357,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Using timestamps to split data is a common practice in time series analysis"
  },
  {
    "line": 90,
    "text": "        if not pd_is_not_null(self.kdata_df):",
    "annotation": "\ud83e\udde0 ML Signal: Aligning features and labels for training data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      944,
      13,
      74,
      7890,
      62,
      7568,
      2599
    ],
    "start_token": 564,
    "end_token": 589,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      978,
      38944,
      3033,
      290,
      14722,
      329,
      3047,
      1366
    ],
    "label": "ml_signal",
    "reason": "Aligning features and labels for training data"
  },
  {
    "line": 92,
    "text": "            assert False",
    "annotation": "\ud83e\udde0 ML Signal: Using timestamps to split data is a common practice in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      10352
    ],
    "start_token": 589,
    "end_token": 602,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      4628,
      395,
      9430,
      284,
      6626,
      1366,
      318,
      257,
      2219,
      3357,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Using timestamps to split data is a common practice in time series analysis"
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Aligning features and labels for testing data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 602,
    "end_token": 641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      978,
      38944,
      3033,
      290,
      14722,
      329,
      4856,
      1366
    ],
    "label": "ml_signal",
    "reason": "Aligning features and labels for testing data"
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\u2705 Best Practice: Returning multiple values in a consistent order improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 641,
    "end_token": 680,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      3294,
      3815,
      287,
      257,
      6414,
      1502,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Returning multiple values in a consistent order improves code readability"
  },
  {
    "line": 92,
    "text": "            assert False",
    "annotation": "\u2705 Best Practice: Define a function to encapsulate logic for building kdata, improving code organization and reusability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      10352
    ],
    "start_token": 680,
    "end_token": 693,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      2163,
      284,
      32652,
      5039,
      9156,
      329,
      2615,
      479,
      7890,
      11,
      10068,
      2438,
      4009,
      290,
      302,
      385,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Define a function to encapsulate logic for building kdata, improving code organization and reusability."
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\u2705 Best Practice: Use a list to define column names, making it easy to modify or extend.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 693,
    "end_token": 732,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      1351,
      284,
      8160,
      5721,
      3891,
      11,
      1642,
      340,
      2562,
      284,
      13096,
      393,
      9117,
      13
    ],
    "label": "best_practice",
    "reason": "Use a list to define column names, making it easy to modify or extend."
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to retrieve data based on parameters, indicating a pattern for data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 732,
    "end_token": 771,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      19818,
      1366,
      1912,
      319,
      10007,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to retrieve data based on parameters, indicating a pattern for data retrieval."
  },
  {
    "line": 94,
    "text": "        self.feature_df = self.build_feature(self.entity_ids, self.start_timestamp, self.end_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.entity_ids suggests an object-oriented approach, indicating a pattern for instance variable usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30053,
      62,
      7568,
      796,
      2116,
      13,
      11249,
      62,
      30053,
      7,
      944,
      13,
      26858,
      62,
      2340,
      11,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      11,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 771,
    "end_token": 810,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      26858,
      62,
      2340,
      5644,
      281,
      2134,
      12,
      17107,
      3164,
      11,
      12739,
      257,
      3912,
      329,
      4554,
      7885,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of self.entity_ids suggests an object-oriented approach, indicating a pattern for instance variable usage."
  },
  {
    "line": 100,
    "text": "        self.label_ser = self.build_label()",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.start_timestamp and self.end_timestamp indicates a pattern for time-based data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      18242,
      62,
      2655,
      796,
      2116,
      13,
      11249,
      62,
      18242,
      3419
    ],
    "start_token": 810,
    "end_token": 829,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      290,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      9217,
      257,
      3912,
      329,
      640,
      12,
      3106,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of self.start_timestamp and self.end_timestamp indicates a pattern for time-based data retrieval."
  },
  {
    "line": 103,
    "text": "        self.label_name = self.label_ser.name",
    "annotation": "\ud83e\udde0 ML Signal: Passing a list of columns to a function, indicating a pattern for data selection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      18242,
      62,
      3672,
      796,
      2116,
      13,
      18242,
      62,
      2655,
      13,
      3672
    ],
    "start_token": 829,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      46389,
      257,
      1351,
      286,
      15180,
      284,
      257,
      2163,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      6356,
      13
    ],
    "label": "ml_signal",
    "reason": "Passing a list of columns to a function, indicating a pattern for data selection."
  },
  {
    "line": 105,
    "text": "        self.training_X, self.training_y, self.testing_X, self.testing_y = self.split_data()",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.level suggests a pattern for hierarchical or leveled data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      34409,
      62,
      55,
      11,
      2116,
      13,
      34409,
      62,
      88,
      11,
      2116,
      13,
      33407,
      62,
      55,
      11,
      2116,
      13,
      33407,
      62,
      88,
      796,
      2116,
      13,
      35312,
      62,
      7890,
      3419
    ],
    "start_token": 849,
    "end_token": 886,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      5715,
      5644,
      257,
      3912,
      329,
      38958,
      393,
      33297,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of self.level suggests a pattern for hierarchical or leveled data retrieval."
  },
  {
    "line": 107,
    "text": "        logger.info(self.training_X)",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.adjust_type indicates a pattern for data adjustment or transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      944,
      13,
      34409,
      62,
      55,
      8
    ],
    "start_token": 886,
    "end_token": 903,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      23032,
      62,
      4906,
      9217,
      257,
      3912,
      329,
      1366,
      15068,
      393,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of self.adjust_type indicates a pattern for data adjustment or transformation."
  },
  {
    "line": 108,
    "text": "        logger.info(self.training_y)",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.data_provider suggests a pattern for specifying data sources.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      944,
      13,
      34409,
      62,
      88,
      8
    ],
    "start_token": 903,
    "end_token": 920,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      7890,
      62,
      15234,
      1304,
      5644,
      257,
      3912,
      329,
      31577,
      1366,
      4237,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of self.data_provider suggests a pattern for specifying data sources."
  },
  {
    "line": 113,
    "text": "    def split_data(self):",
    "annotation": "\ud83e\udde0 ML Signal: Specifying index columns indicates a pattern for data indexing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6626,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 920,
    "end_token": 930,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      6376,
      15180,
      9217,
      257,
      3912,
      329,
      1366,
      6376,
      278,
      13
    ],
    "label": "ml_signal",
    "reason": "Specifying index columns indicates a pattern for data indexing."
  },
  {
    "line": 113,
    "text": "    def split_data(self):",
    "annotation": "\ud83e\udde0 ML Signal: Use of drop_index_col=True suggests a pattern for data preprocessing or cleaning.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6626,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 930,
    "end_token": 940,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4268,
      62,
      9630,
      62,
      4033,
      28,
      17821,
      5644,
      257,
      3912,
      329,
      1366,
      662,
      36948,
      393,
      12724,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of drop_index_col=True suggests a pattern for data preprocessing or cleaning."
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic label creation based on prediction steps and method",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 940,
    "end_token": 940,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      6167,
      6282,
      1912,
      319,
      17724,
      4831,
      290,
      2446
    ],
    "label": "ml_signal",
    "reason": "Dynamic label creation based on prediction steps and method"
  },
  {
    "line": 108,
    "text": "        logger.info(self.training_y)",
    "annotation": "\ud83e\udde0 ML Signal: Use of raw data for label creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      944,
      13,
      34409,
      62,
      88,
      8
    ],
    "start_token": 940,
    "end_token": 957,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8246,
      1366,
      329,
      6167,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of raw data for label creation"
  },
  {
    "line": 113,
    "text": "    def split_data(self):",
    "annotation": "\ud83e\udde0 ML Signal: Grouping data by entity for feature calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6626,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 957,
    "end_token": 967,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      1366,
      416,
      9312,
      329,
      3895,
      17952
    ],
    "label": "ml_signal",
    "reason": "Grouping data by entity for feature calculation"
  },
  {
    "line": 113,
    "text": "    def split_data(self):",
    "annotation": "\ud83e\udde0 ML Signal: Applying a prediction calculation function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6626,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 967,
    "end_token": 977,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      17724,
      17952,
      2163
    ],
    "label": "ml_signal",
    "reason": "Applying a prediction calculation function"
  },
  {
    "line": 114,
    "text": "        training_x = self.feature_df[self.feature_df.index.get_level_values(\"timestamp\") < self.predict_start_timestamp]",
    "annotation": "\ud83e\udde0 ML Signal: Renaming series for label identification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3047,
      62,
      87,
      796,
      2116,
      13,
      30053,
      62,
      7568,
      58,
      944,
      13,
      30053,
      62,
      7568,
      13,
      9630,
      13,
      1136,
      62,
      5715,
      62,
      27160,
      7203,
      16514,
      27823,
      4943,
      1279,
      2116,
      13,
      79,
      17407,
      62,
      9688,
      62,
      16514,
      27823,
      60
    ],
    "start_token": 977,
    "end_token": 1022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7152,
      3723,
      2168,
      329,
      6167,
      11795
    ],
    "label": "ml_signal",
    "reason": "Renaming series for label identification"
  },
  {
    "line": 119,
    "text": "        return training_x, training_y, testing_x, testing_y",
    "annotation": "\ud83e\udde0 ML Signal: Use of change data for label creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      3047,
      62,
      87,
      11,
      3047,
      62,
      88,
      11,
      4856,
      62,
      87,
      11,
      4856,
      62,
      88
    ],
    "start_token": 1022,
    "end_token": 1045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1487,
      1366,
      329,
      6167,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of change data for label creation"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Grouping data by entity for feature calculation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1045,
    "end_token": 1045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      1366,
      416,
      9312,
      329,
      3895,
      17952
    ],
    "label": "ml_signal",
    "reason": "Grouping data by entity for feature calculation"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Applying a change calculation function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1045,
    "end_token": 1045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      1487,
      17952,
      2163
    ],
    "label": "ml_signal",
    "reason": "Applying a change calculation function"
  },
  {
    "line": 126,
    "text": "            end_timestamp=self.end_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Renaming series for label identification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      944,
      13,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1045,
    "end_token": 1068,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7152,
      3723,
      2168,
      329,
      6167,
      11795
    ],
    "label": "ml_signal",
    "reason": "Renaming series for label identification"
  },
  {
    "line": 129,
    "text": "            adjust_type=self.adjust_type,",
    "annotation": "\ud83e\udde0 ML Signal: Use of behavior classification for label creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      62,
      4906,
      28,
      944,
      13,
      23032,
      62,
      4906,
      11
    ],
    "start_token": 1068,
    "end_token": 1089,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4069,
      17923,
      329,
      6167,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of behavior classification for label creation"
  },
  {
    "line": 131,
    "text": "            index=[\"entity_id\", \"timestamp\"],",
    "annotation": "\ud83e\udde0 ML Signal: Grouping data by entity for feature calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      28,
      14692,
      26858,
      62,
      312,
      1600,
      366,
      16514,
      27823,
      33116
    ],
    "start_token": 1089,
    "end_token": 1111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      1366,
      416,
      9312,
      329,
      3895,
      17952
    ],
    "label": "ml_signal",
    "reason": "Grouping data by entity for feature calculation"
  },
  {
    "line": 133,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Applying a behavior classification function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1111,
    "end_token": 1119,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      4069,
      17923,
      2163
    ],
    "label": "ml_signal",
    "reason": "Applying a behavior classification function"
  },
  {
    "line": 135,
    "text": "    def build_label(self):",
    "annotation": "\ud83e\udde0 ML Signal: Renaming series for label identification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1382,
      62,
      18242,
      7,
      944,
      2599
    ],
    "start_token": 1119,
    "end_token": 1129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7152,
      3723,
      2168,
      329,
      6167,
      11795
    ],
    "label": "ml_signal",
    "reason": "Renaming series for label identification"
  },
  {
    "line": 137,
    "text": "        if self.label_method == \"raw\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for control flow, which can be disabled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      18242,
      62,
      24396,
      6624,
      366,
      1831,
      1298
    ],
    "start_token": 1129,
    "end_token": 1146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      1630,
      5202,
      11,
      543,
      460,
      307,
      10058
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for control flow, which can be disabled"
  },
  {
    "line": 141,
    "text": "                .rename(label_name)",
    "annotation": "\ud83e\udde0 ML Signal: Normalizing computed results for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      918,
      480,
      7,
      18242,
      62,
      3672,
      8
    ],
    "start_token": 1146,
    "end_token": 1169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14435,
      2890,
      29231,
      2482,
      329,
      15794
    ],
    "label": "ml_signal",
    "reason": "Normalizing computed results for consistency"
  },
  {
    "line": 129,
    "text": "            adjust_type=self.adjust_type,",
    "annotation": "\ud83e\udde0 ML Signal: Method for training a machine learning model",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      62,
      4906,
      28,
      944,
      13,
      23032,
      62,
      4906,
      11
    ],
    "start_token": 1169,
    "end_token": 1190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      3047,
      257,
      4572,
      4673,
      2746
    ],
    "label": "ml_signal",
    "reason": "Method for training a machine learning model"
  },
  {
    "line": 130,
    "text": "            provider=self.data_provider,",
    "annotation": "\u2705 Best Practice: Allowing model and parameters to be passed in increases flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      7890,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 1190,
    "end_token": 1210,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1439,
      7855,
      2746,
      290,
      10007,
      284,
      307,
      3804,
      287,
      5732,
      13688
    ],
    "label": "best_practice",
    "reason": "Allowing model and parameters to be passed in increases flexibility"
  },
  {
    "line": 132,
    "text": "            drop_index_col=True,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for misuse if `params` contains unsafe data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      9630,
      62,
      4033,
      28,
      17821,
      11
    ],
    "start_token": 1210,
    "end_token": 1229,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      29169,
      611,
      4600,
      37266,
      63,
      4909,
      21596,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for misuse if `params` contains unsafe data"
  },
  {
    "line": 134,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returns the trained model",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1229,
    "end_token": 1229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      262,
      8776,
      2746
    ],
    "label": "ml_signal",
    "reason": "Returns the trained model"
  },
  {
    "line": 133,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of conditional logic to determine different processing paths",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1229,
    "end_token": 1237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      26340,
      9156,
      284,
      5004,
      1180,
      7587,
      13532
    ],
    "label": "ml_signal",
    "reason": "Use of conditional logic to determine different processing paths"
  },
  {
    "line": 135,
    "text": "    def build_label(self):",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame operations to manipulate and prepare data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1382,
      62,
      18242,
      7,
      944,
      2599
    ],
    "start_token": 1237,
    "end_token": 1247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      4560,
      284,
      18510,
      290,
      8335,
      1366
    ],
    "label": "ml_signal",
    "reason": "DataFrame operations to manipulate and prepare data"
  },
  {
    "line": 137,
    "text": "        if self.label_method == \"raw\":",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of prediction results to DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      18242,
      62,
      24396,
      6624,
      366,
      1831,
      1298
    ],
    "start_token": 1247,
    "end_token": 1264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      17724,
      2482,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Conversion of prediction results to DataFrame"
  },
  {
    "line": 137,
    "text": "        if self.label_method == \"raw\":",
    "annotation": "\ud83e\udde0 ML Signal: Shifting prediction results for alignment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      18242,
      62,
      24396,
      6624,
      366,
      1831,
      1298
    ],
    "start_token": 1264,
    "end_token": 1281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      911,
      13309,
      17724,
      2482,
      329,
      19114
    ],
    "label": "ml_signal",
    "reason": "Shifting prediction results for alignment"
  },
  {
    "line": 141,
    "text": "                .rename(label_name)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom Drawer class for visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      918,
      480,
      7,
      18242,
      62,
      3672,
      8
    ],
    "start_token": 1281,
    "end_token": 1304,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      15315,
      263,
      1398,
      329,
      32704
    ],
    "label": "ml_signal",
    "reason": "Use of a custom Drawer class for visualization"
  },
  {
    "line": 146,
    "text": "                .apply(lambda x: cal_change(x, self.predict_steps))",
    "annotation": "\ud83e\udde0 ML Signal: Visualization method call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      39014,
      7,
      50033,
      2124,
      25,
      2386,
      62,
      3803,
      7,
      87,
      11,
      2116,
      13,
      79,
      17407,
      62,
      20214,
      4008
    ],
    "start_token": 1304,
    "end_token": 1338,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15612,
      1634,
      2446,
      869
    ],
    "label": "ml_signal",
    "reason": "Visualization method call"
  },
  {
    "line": 149,
    "text": "        elif self.label_method == \"behavior_cls\":",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of prediction results to DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2116,
      13,
      18242,
      62,
      24396,
      6624,
      366,
      46571,
      62,
      565,
      82,
      1298
    ],
    "start_token": 1338,
    "end_token": 1359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      17724,
      2482,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Conversion of prediction results to DataFrame"
  },
  {
    "line": 150,
    "text": "            y = (",
    "annotation": "\ud83e\udde0 ML Signal: Joining real and predicted results for comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      796,
      357
    ],
    "start_token": 1359,
    "end_token": 1373,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5302,
      3191,
      1103,
      290,
      11001,
      2482,
      329,
      7208
    ],
    "label": "ml_signal",
    "reason": "Joining real and predicted results for comparison"
  },
  {
    "line": 153,
    "text": "                .rename(label_name)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom Drawer class for visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      918,
      480,
      7,
      18242,
      62,
      3672,
      8
    ],
    "start_token": 1373,
    "end_token": 1396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      15315,
      263,
      1398,
      329,
      32704
    ],
    "label": "ml_signal",
    "reason": "Use of a custom Drawer class for visualization"
  },
  {
    "line": 153,
    "text": "                .rename(label_name)",
    "annotation": "\ud83e\udde0 ML Signal: Visualization method call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      918,
      480,
      7,
      18242,
      62,
      3672,
      8
    ],
    "start_token": 1396,
    "end_token": 1419,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15612,
      1634,
      2446,
      869
    ],
    "label": "ml_signal",
    "reason": "Visualization method call"
  },
  {
    "line": 148,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Method for making predictions using a model",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1419,
    "end_token": 1431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      1642,
      16277,
      1262,
      257,
      2746
    ],
    "label": "ml_signal",
    "reason": "Method for making predictions using a model"
  },
  {
    "line": 150,
    "text": "            y = (",
    "annotation": "\ud83e\udde0 ML Signal: Storing predictions in a pandas Series",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      796,
      357
    ],
    "start_token": 1431,
    "end_token": 1445,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      16277,
      287,
      257,
      19798,
      292,
      7171
    ],
    "label": "ml_signal",
    "reason": "Storing predictions in a pandas Series"
  },
  {
    "line": 150,
    "text": "            y = (",
    "annotation": "\u2705 Best Practice: Use of pandas Series for aligning predictions with indices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      796,
      357
    ],
    "start_token": 1445,
    "end_token": 1459,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      329,
      10548,
      278,
      16277,
      351,
      36525
    ],
    "label": "best_practice",
    "reason": "Use of pandas Series for aligning predictions with indices"
  },
  {
    "line": 153,
    "text": "                .rename(label_name)",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method's purpose and expected input/output.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      918,
      480,
      7,
      18242,
      62,
      3672,
      8
    ],
    "start_token": 1459,
    "end_token": 1482,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      290,
      2938,
      5128,
      14,
      22915,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method's purpose and expected input/output."
  },
  {
    "line": 165,
    "text": "    def draw_result(self, entity_id):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3197,
      62,
      20274,
      7,
      944,
      11,
      9312,
      62,
      312,
      2599
    ],
    "start_token": 1482,
    "end_token": 1496,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called."
  },
  {
    "line": 165,
    "text": "    def draw_result(self, entity_id):",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring to describe its purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3197,
      62,
      20274,
      7,
      944,
      11,
      9312,
      62,
      312,
      2599
    ],
    "start_token": 1496,
    "end_token": 1510,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring to describe its purpose and usage."
  },
  {
    "line": 167,
    "text": "            df = self.kdata_df.loc[[entity_id], [\"close\"]].copy()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of entity_schema suggests a pattern for defining schemas in ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      74,
      7890,
      62,
      7568,
      13,
      17946,
      30109,
      26858,
      62,
      312,
      4357,
      14631,
      19836,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 1510,
    "end_token": 1542,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      9312,
      62,
      15952,
      2611,
      5644,
      257,
      3912,
      329,
      16215,
      3897,
      5356,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of entity_schema suggests a pattern for defining schemas in ML models."
  },
  {
    "line": 167,
    "text": "            df = self.kdata_df.loc[[entity_id], [\"close\"]].copy()",
    "annotation": "\u2705 Best Practice: Class definition should follow the naming convention of using CamelCase.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      74,
      7890,
      62,
      7568,
      13,
      17946,
      30109,
      26858,
      62,
      312,
      4357,
      14631,
      19836,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 1542,
    "end_token": 1574,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      262,
      19264,
      9831,
      286,
      1262,
      43281,
      20448,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow the naming convention of using CamelCase."
  },
  {
    "line": 171,
    "text": "",
    "annotation": "\u2705 Best Practice: Add detailed docstring for parameters and return value",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1574,
    "end_token": 1574,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      6496,
      2205,
      8841,
      329,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Add detailed docstring for parameters and return value"
  },
  {
    "line": 179,
    "text": "            df = self.testing_y.to_frame(name=\"real_result\").loc[[entity_id], :].join(pred_df, how=\"outer\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of moving average windows for feature transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      33407,
      62,
      88,
      13,
      1462,
      62,
      14535,
      7,
      3672,
      2625,
      5305,
      62,
      20274,
      11074,
      17946,
      30109,
      26858,
      62,
      312,
      4357,
      1058,
      4083,
      22179,
      7,
      28764,
      62,
      7568,
      11,
      703,
      2625,
      39605,
      4943
    ],
    "start_token": 1574,
    "end_token": 1621,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3867,
      2811,
      9168,
      329,
      3895,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of moving average windows for feature transformation"
  },
  {
    "line": 183,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation and usage of a machine learning pipeline",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1621,
    "end_token": 1621,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      290,
      8748,
      286,
      257,
      4572,
      4673,
      11523
    ],
    "label": "ml_signal",
    "reason": "Instantiation and usage of a machine learning pipeline"
  },
  {
    "line": 185,
    "text": "        predictions = self.model.predict(self.testing_X)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a machine learning pipeline with data preprocessing and model training",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16277,
      796,
      2116,
      13,
      19849,
      13,
      79,
      17407,
      7,
      944,
      13,
      33407,
      62,
      55,
      8
    ],
    "start_token": 1621,
    "end_token": 1643,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      4572,
      4673,
      11523,
      351,
      1366,
      662,
      36948,
      290,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Use of a machine learning pipeline with data preprocessing and model training"
  },
  {
    "line": 186,
    "text": "        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)",
    "annotation": "\ud83e\udde0 ML Signal: Training a machine learning model",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      28764,
      62,
      88,
      796,
      279,
      67,
      13,
      27996,
      7,
      7890,
      28,
      28764,
      9278,
      11,
      6376,
      28,
      944,
      13,
      33407,
      62,
      88,
      13,
      9630,
      8
    ],
    "start_token": 1643,
    "end_token": 1676,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13614,
      257,
      4572,
      4673,
      2746
    ],
    "label": "ml_signal",
    "reason": "Training a machine learning model"
  },
  {
    "line": 186,
    "text": "        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)",
    "annotation": "\ud83e\udde0 ML Signal: Making predictions with a trained machine learning model",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      28764,
      62,
      88,
      796,
      279,
      67,
      13,
      27996,
      7,
      7890,
      28,
      28764,
      9278,
      11,
      6376,
      28,
      944,
      13,
      33407,
      62,
      88,
      13,
      9630,
      8
    ],
    "start_token": 1676,
    "end_token": 1709,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16427,
      16277,
      351,
      257,
      8776,
      4572,
      4673,
      2746
    ],
    "label": "ml_signal",
    "reason": "Making predictions with a trained machine learning model"
  },
  {
    "line": 186,
    "text": "        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)",
    "annotation": "\ud83e\udde0 ML Signal: Visualization of machine learning results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      28764,
      62,
      88,
      796,
      279,
      67,
      13,
      27996,
      7,
      7890,
      28,
      28764,
      9278,
      11,
      6376,
      28,
      944,
      13,
      33407,
      62,
      88,
      13,
      9630,
      8
    ],
    "start_token": 1709,
    "end_token": 1742,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15612,
      1634,
      286,
      4572,
      4673,
      2482
    ],
    "label": "ml_signal",
    "reason": "Visualization of machine learning results"
  },
  {
    "line": 186,
    "text": "        self.pred_y = pd.Series(data=predictions, index=self.testing_y.index)",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      28764,
      62,
      88,
      796,
      279,
      67,
      13,
      27996,
      7,
      7890,
      28,
      28764,
      9278,
      11,
      6376,
      28,
      944,
      13,
      33407,
      62,
      88,
      13,
      9630,
      8
    ],
    "start_token": 1742,
    "end_token": 1775,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
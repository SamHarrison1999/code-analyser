annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Initialize lists to store account and order readers for later use,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 284, 3650, 1848, 290, 1502, 7183, 329, 1568, 779]",0.5,10,best_practice,17,Initialize lists to store account and order readers for later use,,0,from zvt.ui import zvt_app,"[6738, 1976, 36540, 13, 9019, 1330, 1976, 36540, 62, 1324]"
‚úÖ Best Practice: Initialize lists to store account and order readers for later use,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 284, 3650, 1848, 290, 1502, 7183, 329, 1568, 779]",0.5,28,best_practice,19,Initialize lists to store account and order readers for later use,,10,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
üß† ML Signal: Usage of type hinting for lists of custom objects,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 8341, 286, 2183, 5563]",0.5,34,ml_signal,21,Usage of type hinting for lists of custom objects,,28,account_readers = [],"[23317, 62, 961, 364, 796, 17635]"
üß† ML Signal: Usage of type hinting for lists of strings,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 8341, 286, 13042]",0.5,34,ml_signal,23,Usage of type hinting for lists of strings,,34,,[]
üß† ML Signal: Function with conditional logic based on input values,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 26340, 9156, 1912, 319, 5128, 3815]",0.5,40,ml_signal,21,Function with conditional logic based on input values,,34,account_readers = [],"[23317, 62, 961, 364, 796, 17635]"
‚úÖ Best Practice: Use of clear and descriptive variable names,"[26486, 227, 6705, 19939, 25, 5765, 286, 1598, 290, 35644, 7885, 3891]",0.5,40,best_practice,23,Use of clear and descriptive variable names,,40,,[]
üß† ML Signal: Function uses conditional logic to determine return value based on input,"[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 26340, 9156, 284, 5004, 1441, 1988, 1912, 319, 5128]",1.0,40,ml_signal,26,Function uses conditional logic to determine return value based on input,,40,,[]
üß† ML Signal: Checks specific string values to determine behavior,"[8582, 100, 254, 10373, 26484, 25, 47719, 2176, 4731, 3815, 284, 5004, 4069]",1.0,40,ml_signal,28,Checks specific string values to determine behavior,,40,,[]
üß† ML Signal: Returns a specific color code based on condition,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 2176, 3124, 2438, 1912, 319, 4006]",1.0,51,ml_signal,30,Returns a specific color code based on condition,,40,def order_type_flag(order_type):,"[4299, 1502, 62, 4906, 62, 32109, 7, 2875, 62, 4906, 2599]"
üß† ML Signal: Returns a different color code for other conditions,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 1180, 3124, 2438, 329, 584, 3403]",1.0,56,ml_signal,33,Returns a different color code for other conditions,,51,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): Use of global variables can lead to unexpected behavior and make the code harder to maintain.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 3298, 9633, 460, 1085, 284, 10059, 4069, 290, 787, 262, 2438, 7069, 284, 5529, 13]",0.5,81,sast_risk,31,Use of global variables can lead to unexpected behavior and make the code harder to maintain.,Medium,56,"    if order_type == ""order_long"" or order_type == ""order_close_short"":","[220, 220, 220, 611, 1502, 62, 4906, 6624, 366, 2875, 62, 6511, 1, 393, 1502, 62, 4906, 6624, 366, 2875, 62, 19836, 62, 19509, 1298]"
"üß† ML Signal: Function call with specific parameter value, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 11507, 1988, 11, 12739, 257, 3912, 286, 8748, 13]",1.0,81,ml_signal,35,"Function call with specific parameter value, indicating a pattern of usage.",,81,,[]
‚úÖ Best Practice: Clearing lists before populating them to avoid stale data.,"[26486, 227, 6705, 19939, 25, 3779, 1723, 8341, 878, 1461, 8306, 606, 284, 3368, 39985, 1366, 13]",0.5,92,best_practice,37,Clearing lists before populating them to avoid stale data.,,81,def order_type_color(order_type):,"[4299, 1502, 62, 4906, 62, 8043, 7, 2875, 62, 4906, 2599]"
‚úÖ Best Practice: Using list comprehension for readability and efficiency.,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 329, 1100, 1799, 290, 9332, 13]",1.0,92,best_practice,42,Using list comprehension for readability and efficiency.,,92,,[]
‚úÖ Best Practice: Using list comprehension for readability and efficiency.,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 329, 1100, 1799, 290, 9332, 13]",1.0,97,best_practice,45,Using list comprehension for readability and efficiency.,,92,    global traders,"[220, 220, 220, 3298, 21703]"
"üß† ML Signal: Function call without parameters, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 1231, 10007, 11, 12739, 257, 3912, 286, 8748, 13]",0.5,102,ml_signal,45,"Function call without parameters, indicating a pattern of usage.",,97,    global traders,"[220, 220, 220, 3298, 21703]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the callback function properly handles all input values to prevent potential security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 23838, 2163, 6105, 17105, 477, 5128, 3815, 284, 2948, 2785, 2324, 2428, 13]",1.0,142,sast_risk,168,Ensure that the callback function properly handles all input values to prevent potential security issues.,Low,102,"                                        ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
‚úÖ Best Practice: Check if trader_index is not None to avoid potential errors when accessing traders list,"[26486, 227, 6705, 19939, 25, 6822, 611, 31791, 62, 9630, 318, 407, 6045, 284, 3368, 2785, 8563, 618, 22534, 21703, 1351]",1.0,155,best_practice,183,Check if trader_index is not None to avoid potential errors when accessing traders list,,142,            # Graph,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 29681]"
üß† ML Signal: Accessing a list element by index,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 1351, 5002, 416, 6376]",0.5,179,ml_signal,185,Accessing a list element by index,,155,"                className=""nine columns card-left"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1398, 5376, 2625, 30888, 15180, 2657, 12, 9464, 1600]"
‚úÖ Best Practice: Check if entity_type is falsy and assign a default value,"[26486, 227, 6705, 19939, 25, 6822, 611, 9312, 62, 4906, 318, 27807, 88, 290, 8333, 257, 4277, 1988]",0.5,202,best_practice,187,Check if entity_type is falsy and assign a default value,,179,                    html.Div(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 13, 24095, 7]"
üß† ML Signal: Creating a list of dictionaries for options,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 1351, 286, 48589, 3166, 329, 3689]",0.5,222,ml_signal,190,Creating a list of dictionaries for options,,202,"                    ),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10612]"
üß† ML Signal: Function call with keyword argument,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 21179, 4578]",0.5,238,ml_signal,192,Function call with keyword argument,,222,"                ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
üß† ML Signal: Accessing a dictionary with a method call,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 351, 257, 2446, 869]",0.5,254,ml_signal,192,Accessing a dictionary with a method call,,238,"                ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
üß† ML Signal: List comprehension to create options,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 284, 2251, 3689]",0.5,254,ml_signal,199,List comprehension to create options,,254,,[]
üß† ML Signal: Function call with keyword argument,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 21179, 4578]",0.5,254,ml_signal,199,Function call with keyword argument,,254,,[]
üß† ML Signal: Function call with multiple keyword arguments,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 21179, 7159]",0.5,254,ml_signal,199,Function call with multiple keyword arguments,,254,,[]
üß† ML Signal: List comprehension with string formatting,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 351, 4731, 33313]",0.5,272,ml_signal,208,List comprehension with string formatting,,254,"        Input(""trader-selector"", ""value""),","[220, 220, 220, 220, 220, 220, 220, 23412, 7203, 2213, 5067, 12, 19738, 273, 1600, 366, 8367, 12340]"
üß† ML Signal: List comprehension to create options,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 284, 2251, 3689]",0.5,283,ml_signal,214,List comprehension to create options,,272,    if trader_index is not None:,"[220, 220, 220, 611, 31791, 62, 9630, 318, 407, 6045, 25]"
‚úÖ Best Practice: Initialize account_stats to None when trader_index is None,"[26486, 227, 6705, 19939, 25, 20768, 1096, 1848, 62, 34242, 284, 6045, 618, 31791, 62, 9630, 318, 6045]",1.0,294,best_practice,214,Initialize account_stats to None when trader_index is None,,283,    if trader_index is not None:,"[220, 220, 220, 611, 31791, 62, 9630, 318, 407, 6045, 25]"
üß† ML Signal: Accessing a dictionary with a method call,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 351, 257, 2446, 869]",0.5,312,ml_signal,218,Accessing a dictionary with a method call,,294,"            entity_type = ""stock""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 4906, 796, 366, 13578, 1]"
üß† ML Signal: List comprehension to create options,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 284, 2251, 3689]",0.5,312,ml_signal,220,List comprehension to create options,,312,,[]
üß† ML Signal: Function call with multiple keyword arguments,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 21179, 7159]",0.5,322,ml_signal,221,Function call with multiple keyword arguments,,312,        # account stats,"[220, 220, 220, 220, 220, 220, 220, 1303, 1848, 9756]"
üß† ML Signal: List comprehension with string formatting,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 351, 4731, 33313]",0.5,352,ml_signal,225,List comprehension with string formatting,,322,"        entity_provider_options = [{""label"": name, ""value"": name} for name in providers]","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 62, 25811, 796, 685, 4895, 18242, 1298, 1438, 11, 366, 8367, 1298, 1438, 92, 329, 1438, 287, 9549, 60]"
üß† ML Signal: Decorator usage for callback registration,"[8582, 100, 254, 10373, 26484, 25, 4280, 273, 1352, 8748, 329, 23838, 9352]",0.5,371,ml_signal,231,Decorator usage for callback registration,,352,"            entity_type=entity_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 4906, 28, 26858, 62, 4906, 11]"
üß† ML Signal: Specifying output and input for a callback,"[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 5072, 290, 5128, 329, 257, 23838]",0.5,390,ml_signal,232,Specifying output and input for a callback,,371,"            entity_ids=entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 26858, 62, 2340, 11]"
‚úÖ Best Practice: Check for None to avoid potential errors when accessing properties or methods.,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 3368, 2785, 8563, 618, 22534, 6608, 393, 5050, 13]",1.0,419,best_practice,219,Check for None to avoid potential errors when accessing properties or methods.,,390,"        entity_type_options = [{""label"": entity_type, ""value"": entity_type}]","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 4906, 62, 25811, 796, 685, 4895, 18242, 1298, 9312, 62, 4906, 11, 366, 8367, 1298, 9312, 62, 4906, 92, 60]"
‚úÖ Best Practice: Use of conditional logic to determine which schemas to use based on 'related'.,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 9156, 284, 5004, 543, 3897, 5356, 284, 779, 1912, 319, 705, 5363, 4458]",1.0,429,best_practice,221,Use of conditional logic to determine which schemas to use based on 'related'.,,419,        # account stats,"[220, 220, 220, 220, 220, 220, 220, 1303, 1848, 9756]"
üß† ML Signal: Accessing a dictionary to retrieve schemas based on entity type.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 284, 19818, 3897, 5356, 1912, 319, 9312, 2099, 13]",0.5,429,ml_signal,223,Accessing a dictionary to retrieve schemas based on entity type.,,429,,[]
üß† ML Signal: Accessing a default set of schemas when 'related' is False.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 4277, 900, 286, 3897, 5356, 618, 705, 5363, 6, 318, 10352, 13]",0.5,459,ml_signal,225,Accessing a default set of schemas when 'related' is False.,,429,"        entity_provider_options = [{""label"": name, ""value"": name} for name in providers]","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 62, 25811, 796, 685, 4895, 18242, 1298, 1438, 11, 366, 8367, 1298, 1438, 92, 329, 1438, 287, 9549, 60]"
üß† ML Signal: List comprehension to transform schema objects into a list of dictionaries.,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 284, 6121, 32815, 5563, 656, 257, 1351, 286, 48589, 3166, 13]",0.5,492,ml_signal,228,List comprehension to transform schema objects into a list of dictionaries.,,459,        entity_ids = get_order_securities(trader_name=trader_names[trader_index]),"[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 651, 62, 2875, 62, 2363, 10886, 7, 2213, 5067, 62, 3672, 28, 2213, 5067, 62, 14933, 58, 2213, 5067, 62, 9630, 12962]"
"‚ö†Ô∏è SAST Risk (Low): Raising an exception to prevent update, ensure this is handled properly in the application.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 281, 6631, 284, 2948, 4296, 11, 4155, 428, 318, 12118, 6105, 287, 262, 3586, 13]",0.5,510,sast_risk,230,"Raising an exception to prevent update, ensure this is handled properly in the application.",Low,492,"            provider=entity_provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 26858, 62, 15234, 1304, 11]"
üß† ML Signal: Use of decorators to define a callback function in a Dash application.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 284, 8160, 257, 23838, 2163, 287, 257, 16189, 3586, 13]",0.5,529,ml_signal,232,Use of decorators to define a callback function in a Dash application.,,510,"            entity_ids=entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 26858, 62, 2340, 11]"
"üß† ML Signal: Function checks for a non-empty schema_name, indicating conditional logic based on input","[8582, 100, 254, 10373, 26484, 25, 15553, 8794, 329, 257, 1729, 12, 28920, 32815, 62, 3672, 11, 12739, 26340, 9156, 1912, 319, 5128]",0.5,562,ml_signal,228,"Function checks for a non-empty schema_name, indicating conditional logic based on input",,529,        entity_ids = get_order_securities(trader_name=trader_names[trader_index]),"[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 651, 62, 2875, 62, 2363, 10886, 7, 2213, 5067, 62, 3672, 28, 2213, 5067, 62, 14933, 58, 2213, 5067, 62, 9630, 12962]"
"üß† ML Signal: Usage of a function to retrieve schema by name, indicating a pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 32815, 416, 1438, 11, 12739, 257, 3912, 286, 1366, 45069]",0.5,580,ml_signal,230,"Usage of a function to retrieve schema by name, indicating a pattern of data retrieval",,562,"            provider=entity_provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 26858, 62, 15234, 1304, 11]"
"üß† ML Signal: Usage of a function to retrieve columns from a schema, indicating a pattern of data processing","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 15180, 422, 257, 32815, 11, 12739, 257, 3912, 286, 1366, 7587]",0.5,599,ml_signal,232,"Usage of a function to retrieve columns from a schema, indicating a pattern of data processing",,580,"            entity_ids=entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 26858, 62, 2340, 11]"
"üß† ML Signal: List comprehension used to transform data, indicating a pattern of data transformation","[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 284, 6121, 1366, 11, 12739, 257, 3912, 286, 1366, 13389]",0.5,618,ml_signal,232,"List comprehension used to transform data, indicating a pattern of data transformation",,599,"            entity_ids=entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 26858, 62, 2340, 11]"
"‚ö†Ô∏è SAST Risk (Low): Raises an exception to prevent update, could be misused if not handled properly","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 281, 6631, 284, 2948, 4296, 11, 714, 307, 2984, 1484, 611, 407, 12118, 6105]",0.5,637,sast_risk,232,"Raises an exception to prevent update, could be misused if not handled properly",Low,618,"            entity_ids=entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 26858, 62, 2340, 11]"
"‚úÖ Best Practice: Decorator used to define a callback, improving code organization and readability","[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 973, 284, 8160, 257, 23838, 11, 10068, 2438, 4009, 290, 1100, 1799]",0.5,668,best_practice,244,"Decorator used to define a callback, improving code organization and readability",,637,        providers = zvt_context.tradable_schema_map.get(entity_type).providers,"[220, 220, 220, 220, 220, 220, 220, 9549, 796, 1976, 36540, 62, 22866, 13, 2213, 324, 540, 62, 15952, 2611, 62, 8899, 13, 1136, 7, 26858, 62, 4906, 737, 15234, 4157]"
"üß† ML Signal: Output definition for a callback, indicating a pattern of UI updates","[8582, 100, 254, 10373, 26484, 25, 25235, 6770, 329, 257, 23838, 11, 12739, 257, 3912, 286, 12454, 5992]",0.5,699,ml_signal,244,"Output definition for a callback, indicating a pattern of UI updates",,668,        providers = zvt_context.tradable_schema_map.get(entity_type).providers,"[220, 220, 220, 220, 220, 220, 220, 9549, 796, 1976, 36540, 62, 22866, 13, 2213, 324, 540, 62, 15952, 2611, 62, 8899, 13, 1136, 7, 26858, 62, 4906, 737, 15234, 4157]"
"üß† ML Signal: Multiple inputs for a callback, indicating a pattern of event-driven programming","[8582, 100, 254, 10373, 26484, 25, 20401, 17311, 329, 257, 23838, 11, 12739, 257, 3912, 286, 1785, 12, 15808, 8300]",0.5,730,ml_signal,244,"Multiple inputs for a callback, indicating a pattern of event-driven programming",,699,        providers = zvt_context.tradable_schema_map.get(entity_type).providers,"[220, 220, 220, 220, 220, 220, 220, 9549, 796, 1976, 36540, 62, 22866, 13, 2213, 324, 540, 62, 15952, 2611, 62, 8899, 13, 1136, 7, 26858, 62, 4906, 737, 15234, 4157]"
"üß† ML Signal: State used in a callback, indicating a pattern of maintaining state across events","[8582, 100, 254, 10373, 26484, 25, 1812, 973, 287, 257, 23838, 11, 12739, 257, 3912, 286, 10941, 1181, 1973, 2995]",0.5,738,ml_signal,251,"State used in a callback, indicating a pattern of maintaining state across events",,730,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Convert single string to list for consistent processing,"[26486, 227, 6705, 19939, 25, 38240, 2060, 4731, 284, 1351, 329, 6414, 7587]",0.5,750,best_practice,249,Convert single string to list for consistent processing,,738,        entity_options = [,"[220, 220, 220, 220, 220, 220, 220, 9312, 62, 25811, 796, 685]"
üß† ML Signal: Querying data based on dynamic schema and columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 1912, 319, 8925, 32815, 290, 15180]",0.5,750,ml_signal,253,Querying data based on dynamic schema and columns,,750,,[]
üß† ML Signal: Copying data for further processing,"[8582, 100, 254, 10373, 26484, 25, 6955, 1112, 1366, 329, 2252, 7587]",0.5,764,ml_signal,258,Copying data for further processing,,750,"def update_entity_selector(entity_type, related):","[4299, 4296, 62, 26858, 62, 19738, 273, 7, 26858, 62, 4906, 11, 3519, 2599]"
üß† ML Signal: Filtering data based on entity_id,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 9312, 62, 312]",0.5,774,ml_signal,260,Filtering data based on entity_id,,764,        if related:,"[220, 220, 220, 220, 220, 220, 220, 611, 3519, 25]"
üß† ML Signal: Creating new columns based on existing data,"[8582, 100, 254, 10373, 26484, 25, 30481, 649, 15180, 1912, 319, 4683, 1366]",1.0,796,ml_signal,263,Creating new columns based on existing data,,774,            schemas = zvt_context.schemas,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3897, 5356, 796, 1976, 36540, 62, 22866, 13, 1416, 4411, 292]"
‚úÖ Best Practice: Debugging or logging output,"[26486, 227, 6705, 19939, 25, 31687, 2667, 393, 18931, 5072]",0.5,796,best_practice,267,Debugging or logging output,,796,,[]
‚úÖ Best Practice: Sorting levels for consistent processing,"[26486, 227, 6705, 19939, 25, 311, 24707, 2974, 329, 6414, 7587]",0.5,820,best_practice,272,Sorting levels for consistent processing,,796,        cols = get_schema_columns(schema=schema),"[220, 220, 220, 220, 220, 220, 220, 951, 82, 796, 651, 62, 15952, 2611, 62, 28665, 82, 7, 15952, 2611, 28, 15952, 2611, 8]"
üß† ML Signal: Dynamic instantiation of classes based on registry,"[8582, 100, 254, 10373, 26484, 25, 26977, 9113, 3920, 286, 6097, 1912, 319, 20478]",1.0,820,ml_signal,273,Dynamic instantiation of classes based on registry,,820,,[]
üß† ML Signal: Using a composite pattern for drawing,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 24185, 3912, 329, 8263]",0.5,832,ml_signal,279,Using a composite pattern for drawing,,820,"    Output(""factor-details"", ""children""),","[220, 220, 220, 25235, 7203, 31412, 12, 36604, 1600, 366, 17197, 12340]"
üß† ML Signal: Dynamic instantiation of classes based on registry,"[8582, 100, 254, 10373, 26484, 25, 26977, 9113, 3920, 286, 6097, 1912, 319, 20478]",1.0,833,ml_signal,288,Dynamic instantiation of classes based on registry,,832,),[8]
üß† ML Signal: Adding supplementary data to drawer,"[8582, 100, 254, 10373, 26484, 25, 18247, 43871, 1366, 284, 33451]",0.5,847,ml_signal,290,Adding supplementary data to drawer,,833,    if factor and entity_type and entity and levels:,"[220, 220, 220, 611, 5766, 290, 9312, 62, 4906, 290, 9312, 290, 2974, 25]"
üß† ML Signal: Assigning processed data for annotation,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 13686, 1366, 329, 23025]",0.5,861,ml_signal,290,Assigning processed data for annotation,,847,    if factor and entity_type and entity and levels:,"[220, 220, 220, 611, 5766, 290, 9312, 62, 4906, 290, 9312, 290, 2974, 25]"
‚ö†Ô∏è SAST Risk (Low): Raising an exception without additional context,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 281, 6631, 1231, 3224, 4732]",0.5,875,sast_risk,290,Raising an exception without additional context,Low,861,    if factor and entity_type and entity and levels:,"[220, 220, 220, 611, 5766, 290, 9312, 62, 4906, 290, 9312, 290, 2974, 25]"

[
  {
    "line": 17,
    "text": "from zvt.ui import zvt_app",
    "annotation": "\u2705 Best Practice: Initialize lists to store account and order readers for later use",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      9019,
      1330,
      1976,
      36540,
      62,
      1324
    ],
    "start_token": 0,
    "end_token": 10,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      284,
      3650,
      1848,
      290,
      1502,
      7183,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Initialize lists to store account and order readers for later use"
  },
  {
    "line": 19,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u2705 Best Practice: Initialize lists to store account and order readers for later use",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 10,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      284,
      3650,
      1848,
      290,
      1502,
      7183,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Initialize lists to store account and order readers for later use"
  },
  {
    "line": 21,
    "text": "account_readers = []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for lists of custom objects",
    "confidence": 0.5,
    "tokens": [
      23317,
      62,
      961,
      364,
      796,
      17635
    ],
    "start_token": 28,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      8341,
      286,
      2183,
      5563
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for lists of custom objects"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for lists of strings",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      8341,
      286,
      13042
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for lists of strings"
  },
  {
    "line": 21,
    "text": "account_readers = []",
    "annotation": "\ud83e\udde0 ML Signal: Function with conditional logic based on input values",
    "confidence": 0.5,
    "tokens": [
      23317,
      62,
      961,
      364,
      796,
      17635
    ],
    "start_token": 34,
    "end_token": 40,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      26340,
      9156,
      1912,
      319,
      5128,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function with conditional logic based on input values"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of clear and descriptive variable names",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 40,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1598,
      290,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of clear and descriptive variable names"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function uses conditional logic to determine return value based on input",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 40,
    "end_token": 40,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      26340,
      9156,
      284,
      5004,
      1441,
      1988,
      1912,
      319,
      5128
    ],
    "label": "ml_signal",
    "reason": "Function uses conditional logic to determine return value based on input"
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checks specific string values to determine behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 40,
    "end_token": 40,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      2176,
      4731,
      3815,
      284,
      5004,
      4069
    ],
    "label": "ml_signal",
    "reason": "Checks specific string values to determine behavior"
  },
  {
    "line": 30,
    "text": "def order_type_flag(order_type):",
    "annotation": "\ud83e\udde0 ML Signal: Returns a specific color code based on condition",
    "confidence": 1.0,
    "tokens": [
      4299,
      1502,
      62,
      4906,
      62,
      32109,
      7,
      2875,
      62,
      4906,
      2599
    ],
    "start_token": 40,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      2176,
      3124,
      2438,
      1912,
      319,
      4006
    ],
    "label": "ml_signal",
    "reason": "Returns a specific color code based on condition"
  },
  {
    "line": 33,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Returns a different color code for other conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 51,
    "end_token": 56,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      1180,
      3124,
      2438,
      329,
      584,
      3403
    ],
    "label": "ml_signal",
    "reason": "Returns a different color code for other conditions"
  },
  {
    "line": 31,
    "text": "    if order_type == \"order_long\" or order_type == \"order_close_short\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of global variables can lead to unexpected behavior and make the code harder to maintain.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      1502,
      62,
      4906,
      6624,
      366,
      2875,
      62,
      6511,
      1,
      393,
      1502,
      62,
      4906,
      6624,
      366,
      2875,
      62,
      19836,
      62,
      19509,
      1298
    ],
    "start_token": 56,
    "end_token": 81,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      3298,
      9633,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      787,
      262,
      2438,
      7069,
      284,
      5529,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of global variables can lead to unexpected behavior and make the code harder to maintain."
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameter value, indicating a pattern of usage.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 81,
    "end_token": 81,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      11507,
      1988,
      11,
      12739,
      257,
      3912,
      286,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameter value, indicating a pattern of usage."
  },
  {
    "line": 37,
    "text": "def order_type_color(order_type):",
    "annotation": "\u2705 Best Practice: Clearing lists before populating them to avoid stale data.",
    "confidence": 0.5,
    "tokens": [
      4299,
      1502,
      62,
      4906,
      62,
      8043,
      7,
      2875,
      62,
      4906,
      2599
    ],
    "start_token": 81,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3779,
      1723,
      8341,
      878,
      1461,
      8306,
      606,
      284,
      3368,
      39985,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Clearing lists before populating them to avoid stale data."
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\u2705 Best Practice: Using list comprehension for readability and efficiency.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 92,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      35915,
      329,
      1100,
      1799,
      290,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Using list comprehension for readability and efficiency."
  },
  {
    "line": 45,
    "text": "    global traders",
    "annotation": "\u2705 Best Practice: Using list comprehension for readability and efficiency.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3298,
      21703
    ],
    "start_token": 92,
    "end_token": 97,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      35915,
      329,
      1100,
      1799,
      290,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Using list comprehension for readability and efficiency."
  },
  {
    "line": 45,
    "text": "    global traders",
    "annotation": "\ud83e\udde0 ML Signal: Function call without parameters, indicating a pattern of usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3298,
      21703
    ],
    "start_token": 97,
    "end_token": 102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      1231,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call without parameters, indicating a pattern of usage."
  },
  {
    "line": 168,
    "text": "                                        ],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the callback function properly handles all input values to prevent potential security issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 102,
    "end_token": 142,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      23838,
      2163,
      6105,
      17105,
      477,
      5128,
      3815,
      284,
      2948,
      2785,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the callback function properly handles all input values to prevent potential security issues."
  },
  {
    "line": 183,
    "text": "            # Graph",
    "annotation": "\u2705 Best Practice: Check if trader_index is not None to avoid potential errors when accessing traders list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      29681
    ],
    "start_token": 142,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      31791,
      62,
      9630,
      318,
      407,
      6045,
      284,
      3368,
      2785,
      8563,
      618,
      22534,
      21703,
      1351
    ],
    "label": "best_practice",
    "reason": "Check if trader_index is not None to avoid potential errors when accessing traders list"
  },
  {
    "line": 185,
    "text": "                className=\"nine columns card-left\",",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a list element by index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1398,
      5376,
      2625,
      30888,
      15180,
      2657,
      12,
      9464,
      1600
    ],
    "start_token": 155,
    "end_token": 179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      1351,
      5002,
      416,
      6376
    ],
    "label": "ml_signal",
    "reason": "Accessing a list element by index"
  },
  {
    "line": 187,
    "text": "                    html.Div(",
    "annotation": "\u2705 Best Practice: Check if entity_type is falsy and assign a default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27711,
      13,
      24095,
      7
    ],
    "start_token": 179,
    "end_token": 202,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      9312,
      62,
      4906,
      318,
      27807,
      88,
      290,
      8333,
      257,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Check if entity_type is falsy and assign a default value"
  },
  {
    "line": 190,
    "text": "                    ),",
    "annotation": "\ud83e\udde0 ML Signal: Creating a list of dictionaries for options",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 202,
    "end_token": 222,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      1351,
      286,
      48589,
      3166,
      329,
      3689
    ],
    "label": "ml_signal",
    "reason": "Creating a list of dictionaries for options"
  },
  {
    "line": 192,
    "text": "                ],",
    "annotation": "\ud83e\udde0 ML Signal: Function call with keyword argument",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 222,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      21179,
      4578
    ],
    "label": "ml_signal",
    "reason": "Function call with keyword argument"
  },
  {
    "line": 192,
    "text": "                ],",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary with a method call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 238,
    "end_token": 254,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      351,
      257,
      2446,
      869
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary with a method call"
  },
  {
    "line": 199,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension to create options",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 254,
    "end_token": 254,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      284,
      2251,
      3689
    ],
    "label": "ml_signal",
    "reason": "List comprehension to create options"
  },
  {
    "line": 199,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with keyword argument",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 254,
    "end_token": 254,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      21179,
      4578
    ],
    "label": "ml_signal",
    "reason": "Function call with keyword argument"
  },
  {
    "line": 199,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple keyword arguments",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 254,
    "end_token": 254,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      21179,
      7159
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple keyword arguments"
  },
  {
    "line": 208,
    "text": "        Input(\"trader-selector\", \"value\"),",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension with string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23412,
      7203,
      2213,
      5067,
      12,
      19738,
      273,
      1600,
      366,
      8367,
      12340
    ],
    "start_token": 254,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      351,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "List comprehension with string formatting"
  },
  {
    "line": 214,
    "text": "    if trader_index is not None:",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension to create options",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      31791,
      62,
      9630,
      318,
      407,
      6045,
      25
    ],
    "start_token": 272,
    "end_token": 283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      284,
      2251,
      3689
    ],
    "label": "ml_signal",
    "reason": "List comprehension to create options"
  },
  {
    "line": 214,
    "text": "    if trader_index is not None:",
    "annotation": "\u2705 Best Practice: Initialize account_stats to None when trader_index is None",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      31791,
      62,
      9630,
      318,
      407,
      6045,
      25
    ],
    "start_token": 283,
    "end_token": 294,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      1848,
      62,
      34242,
      284,
      6045,
      618,
      31791,
      62,
      9630,
      318,
      6045
    ],
    "label": "best_practice",
    "reason": "Initialize account_stats to None when trader_index is None"
  },
  {
    "line": 218,
    "text": "            entity_type = \"stock\"",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary with a method call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      4906,
      796,
      366,
      13578,
      1
    ],
    "start_token": 294,
    "end_token": 312,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      351,
      257,
      2446,
      869
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary with a method call"
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension to create options",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 312,
    "end_token": 312,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      284,
      2251,
      3689
    ],
    "label": "ml_signal",
    "reason": "List comprehension to create options"
  },
  {
    "line": 221,
    "text": "        # account stats",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple keyword arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1848,
      9756
    ],
    "start_token": 312,
    "end_token": 322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      21179,
      7159
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple keyword arguments"
  },
  {
    "line": 225,
    "text": "        entity_provider_options = [{\"label\": name, \"value\": name} for name in providers]",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension with string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      62,
      25811,
      796,
      685,
      4895,
      18242,
      1298,
      1438,
      11,
      366,
      8367,
      1298,
      1438,
      92,
      329,
      1438,
      287,
      9549,
      60
    ],
    "start_token": 322,
    "end_token": 352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      351,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "List comprehension with string formatting"
  },
  {
    "line": 231,
    "text": "            entity_type=entity_type,",
    "annotation": "\ud83e\udde0 ML Signal: Decorator usage for callback registration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      4906,
      28,
      26858,
      62,
      4906,
      11
    ],
    "start_token": 352,
    "end_token": 371,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4280,
      273,
      1352,
      8748,
      329,
      23838,
      9352
    ],
    "label": "ml_signal",
    "reason": "Decorator usage for callback registration"
  },
  {
    "line": 232,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: Specifying output and input for a callback",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 371,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      5072,
      290,
      5128,
      329,
      257,
      23838
    ],
    "label": "ml_signal",
    "reason": "Specifying output and input for a callback"
  },
  {
    "line": 219,
    "text": "        entity_type_options = [{\"label\": entity_type, \"value\": entity_type}]",
    "annotation": "\u2705 Best Practice: Check for None to avoid potential errors when accessing properties or methods.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      4906,
      62,
      25811,
      796,
      685,
      4895,
      18242,
      1298,
      9312,
      62,
      4906,
      11,
      366,
      8367,
      1298,
      9312,
      62,
      4906,
      92,
      60
    ],
    "start_token": 390,
    "end_token": 419,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      3368,
      2785,
      8563,
      618,
      22534,
      6608,
      393,
      5050,
      13
    ],
    "label": "best_practice",
    "reason": "Check for None to avoid potential errors when accessing properties or methods."
  },
  {
    "line": 221,
    "text": "        # account stats",
    "annotation": "\u2705 Best Practice: Use of conditional logic to determine which schemas to use based on 'related'.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1848,
      9756
    ],
    "start_token": 419,
    "end_token": 429,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26340,
      9156,
      284,
      5004,
      543,
      3897,
      5356,
      284,
      779,
      1912,
      319,
      705,
      5363,
      4458
    ],
    "label": "best_practice",
    "reason": "Use of conditional logic to determine which schemas to use based on 'related'."
  },
  {
    "line": 223,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary to retrieve schemas based on entity type.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 429,
    "end_token": 429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      284,
      19818,
      3897,
      5356,
      1912,
      319,
      9312,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary to retrieve schemas based on entity type."
  },
  {
    "line": 225,
    "text": "        entity_provider_options = [{\"label\": name, \"value\": name} for name in providers]",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a default set of schemas when 'related' is False.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      62,
      25811,
      796,
      685,
      4895,
      18242,
      1298,
      1438,
      11,
      366,
      8367,
      1298,
      1438,
      92,
      329,
      1438,
      287,
      9549,
      60
    ],
    "start_token": 429,
    "end_token": 459,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      4277,
      900,
      286,
      3897,
      5356,
      618,
      705,
      5363,
      6,
      318,
      10352,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing a default set of schemas when 'related' is False."
  },
  {
    "line": 228,
    "text": "        entity_ids = get_order_securities(trader_name=trader_names[trader_index])",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension to transform schema objects into a list of dictionaries.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      651,
      62,
      2875,
      62,
      2363,
      10886,
      7,
      2213,
      5067,
      62,
      3672,
      28,
      2213,
      5067,
      62,
      14933,
      58,
      2213,
      5067,
      62,
      9630,
      12962
    ],
    "start_token": 459,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      284,
      6121,
      32815,
      5563,
      656,
      257,
      1351,
      286,
      48589,
      3166,
      13
    ],
    "label": "ml_signal",
    "reason": "List comprehension to transform schema objects into a list of dictionaries."
  },
  {
    "line": 230,
    "text": "            provider=entity_provider,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising an exception to prevent update, ensure this is handled properly in the application.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      26858,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 492,
    "end_token": 510,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      281,
      6631,
      284,
      2948,
      4296,
      11,
      4155,
      428,
      318,
      12118,
      6105,
      287,
      262,
      3586,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising an exception to prevent update, ensure this is handled properly in the application."
  },
  {
    "line": 232,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators to define a callback function in a Dash application.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 510,
    "end_token": 529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      284,
      8160,
      257,
      23838,
      2163,
      287,
      257,
      16189,
      3586,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators to define a callback function in a Dash application."
  },
  {
    "line": 228,
    "text": "        entity_ids = get_order_securities(trader_name=trader_names[trader_index])",
    "annotation": "\ud83e\udde0 ML Signal: Function checks for a non-empty schema_name, indicating conditional logic based on input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      651,
      62,
      2875,
      62,
      2363,
      10886,
      7,
      2213,
      5067,
      62,
      3672,
      28,
      2213,
      5067,
      62,
      14933,
      58,
      2213,
      5067,
      62,
      9630,
      12962
    ],
    "start_token": 529,
    "end_token": 562,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8794,
      329,
      257,
      1729,
      12,
      28920,
      32815,
      62,
      3672,
      11,
      12739,
      26340,
      9156,
      1912,
      319,
      5128
    ],
    "label": "ml_signal",
    "reason": "Function checks for a non-empty schema_name, indicating conditional logic based on input"
  },
  {
    "line": 230,
    "text": "            provider=entity_provider,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to retrieve schema by name, indicating a pattern of data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      26858,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 562,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      19818,
      32815,
      416,
      1438,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to retrieve schema by name, indicating a pattern of data retrieval"
  },
  {
    "line": 232,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to retrieve columns from a schema, indicating a pattern of data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 580,
    "end_token": 599,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      19818,
      15180,
      422,
      257,
      32815,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to retrieve columns from a schema, indicating a pattern of data processing"
  },
  {
    "line": 232,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used to transform data, indicating a pattern of data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 599,
    "end_token": 618,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      284,
      6121,
      1366,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "List comprehension used to transform data, indicating a pattern of data transformation"
  },
  {
    "line": 232,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises an exception to prevent update, could be misused if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 618,
    "end_token": 637,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      281,
      6631,
      284,
      2948,
      4296,
      11,
      714,
      307,
      2984,
      1484,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises an exception to prevent update, could be misused if not handled properly"
  },
  {
    "line": 244,
    "text": "        providers = zvt_context.tradable_schema_map.get(entity_type).providers",
    "annotation": "\u2705 Best Practice: Decorator used to define a callback, improving code organization and readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9549,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      2213,
      324,
      540,
      62,
      15952,
      2611,
      62,
      8899,
      13,
      1136,
      7,
      26858,
      62,
      4906,
      737,
      15234,
      4157
    ],
    "start_token": 637,
    "end_token": 668,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      973,
      284,
      8160,
      257,
      23838,
      11,
      10068,
      2438,
      4009,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Decorator used to define a callback, improving code organization and readability"
  },
  {
    "line": 244,
    "text": "        providers = zvt_context.tradable_schema_map.get(entity_type).providers",
    "annotation": "\ud83e\udde0 ML Signal: Output definition for a callback, indicating a pattern of UI updates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9549,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      2213,
      324,
      540,
      62,
      15952,
      2611,
      62,
      8899,
      13,
      1136,
      7,
      26858,
      62,
      4906,
      737,
      15234,
      4157
    ],
    "start_token": 668,
    "end_token": 699,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25235,
      6770,
      329,
      257,
      23838,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      5992
    ],
    "label": "ml_signal",
    "reason": "Output definition for a callback, indicating a pattern of UI updates"
  },
  {
    "line": 244,
    "text": "        providers = zvt_context.tradable_schema_map.get(entity_type).providers",
    "annotation": "\ud83e\udde0 ML Signal: Multiple inputs for a callback, indicating a pattern of event-driven programming",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9549,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      2213,
      324,
      540,
      62,
      15952,
      2611,
      62,
      8899,
      13,
      1136,
      7,
      26858,
      62,
      4906,
      737,
      15234,
      4157
    ],
    "start_token": 699,
    "end_token": 730,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20401,
      17311,
      329,
      257,
      23838,
      11,
      12739,
      257,
      3912,
      286,
      1785,
      12,
      15808,
      8300
    ],
    "label": "ml_signal",
    "reason": "Multiple inputs for a callback, indicating a pattern of event-driven programming"
  },
  {
    "line": 251,
    "text": "        ]",
    "annotation": "\ud83e\udde0 ML Signal: State used in a callback, indicating a pattern of maintaining state across events",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 730,
    "end_token": 738,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1812,
      973,
      287,
      257,
      23838,
      11,
      12739,
      257,
      3912,
      286,
      10941,
      1181,
      1973,
      2995
    ],
    "label": "ml_signal",
    "reason": "State used in a callback, indicating a pattern of maintaining state across events"
  },
  {
    "line": 249,
    "text": "        entity_options = [",
    "annotation": "\u2705 Best Practice: Convert single string to list for consistent processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      25811,
      796,
      685
    ],
    "start_token": 738,
    "end_token": 750,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      2060,
      4731,
      284,
      1351,
      329,
      6414,
      7587
    ],
    "label": "best_practice",
    "reason": "Convert single string to list for consistent processing"
  },
  {
    "line": 253,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data based on dynamic schema and columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 750,
    "end_token": 750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      1912,
      319,
      8925,
      32815,
      290,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying data based on dynamic schema and columns"
  },
  {
    "line": 258,
    "text": "def update_entity_selector(entity_type, related):",
    "annotation": "\ud83e\udde0 ML Signal: Copying data for further processing",
    "confidence": 0.5,
    "tokens": [
      4299,
      4296,
      62,
      26858,
      62,
      19738,
      273,
      7,
      26858,
      62,
      4906,
      11,
      3519,
      2599
    ],
    "start_token": 750,
    "end_token": 764,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6955,
      1112,
      1366,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Copying data for further processing"
  },
  {
    "line": 260,
    "text": "        if related:",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on entity_id",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3519,
      25
    ],
    "start_token": 764,
    "end_token": 774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      9312,
      62,
      312
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on entity_id"
  },
  {
    "line": 263,
    "text": "            schemas = zvt_context.schemas",
    "annotation": "\ud83e\udde0 ML Signal: Creating new columns based on existing data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3897,
      5356,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      1416,
      4411,
      292
    ],
    "start_token": 774,
    "end_token": 796,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      649,
      15180,
      1912,
      319,
      4683,
      1366
    ],
    "label": "ml_signal",
    "reason": "Creating new columns based on existing data"
  },
  {
    "line": 267,
    "text": "",
    "annotation": "\u2705 Best Practice: Debugging or logging output",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 796,
    "end_token": 796,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      31687,
      2667,
      393,
      18931,
      5072
    ],
    "label": "best_practice",
    "reason": "Debugging or logging output"
  },
  {
    "line": 272,
    "text": "        cols = get_schema_columns(schema=schema)",
    "annotation": "\u2705 Best Practice: Sorting levels for consistent processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      951,
      82,
      796,
      651,
      62,
      15952,
      2611,
      62,
      28665,
      82,
      7,
      15952,
      2611,
      28,
      15952,
      2611,
      8
    ],
    "start_token": 796,
    "end_token": 820,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      2974,
      329,
      6414,
      7587
    ],
    "label": "best_practice",
    "reason": "Sorting levels for consistent processing"
  },
  {
    "line": 273,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic instantiation of classes based on registry",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 820,
    "end_token": 820,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      9113,
      3920,
      286,
      6097,
      1912,
      319,
      20478
    ],
    "label": "ml_signal",
    "reason": "Dynamic instantiation of classes based on registry"
  },
  {
    "line": 279,
    "text": "    Output(\"factor-details\", \"children\"),",
    "annotation": "\ud83e\udde0 ML Signal: Using a composite pattern for drawing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25235,
      7203,
      31412,
      12,
      36604,
      1600,
      366,
      17197,
      12340
    ],
    "start_token": 820,
    "end_token": 832,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      24185,
      3912,
      329,
      8263
    ],
    "label": "ml_signal",
    "reason": "Using a composite pattern for drawing"
  },
  {
    "line": 288,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic instantiation of classes based on registry",
    "confidence": 1.0,
    "tokens": [
      8
    ],
    "start_token": 832,
    "end_token": 833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      9113,
      3920,
      286,
      6097,
      1912,
      319,
      20478
    ],
    "label": "ml_signal",
    "reason": "Dynamic instantiation of classes based on registry"
  },
  {
    "line": 290,
    "text": "    if factor and entity_type and entity and levels:",
    "annotation": "\ud83e\udde0 ML Signal: Adding supplementary data to drawer",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      5766,
      290,
      9312,
      62,
      4906,
      290,
      9312,
      290,
      2974,
      25
    ],
    "start_token": 833,
    "end_token": 847,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      43871,
      1366,
      284,
      33451
    ],
    "label": "ml_signal",
    "reason": "Adding supplementary data to drawer"
  },
  {
    "line": 290,
    "text": "    if factor and entity_type and entity and levels:",
    "annotation": "\ud83e\udde0 ML Signal: Assigning processed data for annotation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      5766,
      290,
      9312,
      62,
      4906,
      290,
      9312,
      290,
      2974,
      25
    ],
    "start_token": 847,
    "end_token": 861,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      13686,
      1366,
      329,
      23025
    ],
    "label": "ml_signal",
    "reason": "Assigning processed data for annotation"
  },
  {
    "line": 290,
    "text": "    if factor and entity_type and entity and levels:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising an exception without additional context",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      5766,
      290,
      9312,
      62,
      4906,
      290,
      9312,
      290,
      2974,
      25
    ],
    "start_token": 861,
    "end_token": 875,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      281,
      6631,
      1231,
      3224,
      4732
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising an exception without additional context"
  }
]
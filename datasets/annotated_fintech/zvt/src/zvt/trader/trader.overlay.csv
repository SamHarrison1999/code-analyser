annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports into standard library, third-party, and local application sections improves readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 3586, 9004, 19575, 1100, 1799, 13]",0.5,17,best_practice,15,"Grouping imports into standard library, third-party, and local application sections improves readability.",,0,from zvt.trader.trader_info_api import AccountStatsReader,"[6738, 1976, 36540, 13, 2213, 5067, 13, 2213, 5067, 62, 10951, 62, 15042, 1330, 10781, 29668, 33634]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,34,best_practice,15,Use of type annotations for class attributes improves code readability and maintainability.,,17,from zvt.trader.trader_info_api import AccountStatsReader,"[6738, 1976, 36540, 13, 2213, 5067, 13, 2213, 5067, 62, 10951, 62, 15042, 1330, 10781, 29668, 33634]"
‚úÖ Best Practice: Type hinting for class attributes helps with static analysis and IDE support.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 12608, 5419, 351, 9037, 3781, 290, 33497, 1104, 13]",1.0,78,best_practice,17,Type hinting for class attributes helps with static analysis and IDE support.,,34,"from zvt.utils.time_utils import to_pd_timestamp, now_pd_timestamp, to_time_str, is_same_date, date_time_by_interval","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823, 11, 783, 62, 30094, 62, 16514, 27823, 11, 284, 62, 2435, 62, 2536, 11, 318, 62, 31642, 62, 4475, 11, 3128, 62, 2435, 62, 1525, 62, 3849, 2100]"
‚ö†Ô∏è SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 6818, 6299, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,93,sast_risk,36,Use of assert statements for input validation can be bypassed if Python is run with optimizations.,Medium,78,"        rich_mode: bool = False,","[220, 220, 220, 220, 220, 220, 220, 5527, 62, 14171, 25, 20512, 796, 10352, 11]"
‚ö†Ô∏è SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 6818, 6299, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,112,sast_risk,38,Use of assert statements for input validation can be bypassed if Python is run with optimizations.,Medium,93,"        profit_threshold=(3, -0.3),","[220, 220, 220, 220, 220, 220, 220, 7630, 62, 400, 10126, 16193, 18, 11, 532, 15, 13, 18, 828]"
‚ö†Ô∏è SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 6818, 6299, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,127,sast_risk,40,Use of assert statements for input validation can be bypassed if Python is run with optimizations.,Medium,112,"        pre_load_days=365,","[220, 220, 220, 220, 220, 220, 220, 662, 62, 2220, 62, 12545, 28, 24760, 11]"
‚úÖ Best Practice: Use a logger for tracking and debugging instead of print statements.,"[26486, 227, 6705, 19939, 25, 5765, 257, 49706, 329, 9646, 290, 28769, 2427, 286, 3601, 6299, 13]",0.5,134,best_practice,41,Use a logger for tracking and debugging instead of print statements.,,127,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
üß† ML Signal: Default naming pattern for trader_name based on class name.,"[8582, 100, 254, 10373, 26484, 25, 15161, 19264, 3912, 329, 31791, 62, 3672, 1912, 319, 1398, 1438, 13]",1.0,134,ml_signal,47,Default naming pattern for trader_name based on class name.,,134,,[]
‚úÖ Best Practice: Informative logging for real-time mode configuration.,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 1103, 12, 2435, 4235, 8398, 13]",1.0,154,best_practice,62,Informative logging for real-time mode configuration.,,134,        self.pre_load_days = pre_load_days,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 3866, 62, 2220, 62, 12545, 796, 662, 62, 2220, 62, 12545]"
‚ö†Ô∏è SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 6818, 6299, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,162,sast_risk,66,Use of assert statements for input validation can be bypassed if Python is run with optimizations.,Medium,154,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Initialization of trading signals list.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 7313, 10425, 1351, 13]",1.0,174,ml_signal,71,Initialization of trading signals list.,,162,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Initialization of trading signal listeners list.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 7313, 6737, 22054, 1351, 13]",1.0,192,ml_signal,81,Initialization of trading signal listeners list.,,174,        self.profit_threshold = profit_threshold,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9183, 62, 400, 10126, 796, 7630, 62, 400, 10126]"
üß† ML Signal: Registering account service as a trading signal listener.,"[8582, 100, 254, 10373, 26484, 25, 17296, 278, 1848, 2139, 355, 257, 7313, 6737, 24783, 13]",0.5,214,ml_signal,91,Registering account service as a trading signal listener.,,192,"            trader_name=self.trader_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 31791, 62, 3672, 28, 944, 13, 2213, 5067, 62, 3672, 11]"
üß† ML Signal: Deriving trading levels from factors.,"[8582, 100, 254, 10373, 26484, 25, 9626, 1412, 7313, 2974, 422, 5087, 13]",0.5,233,ml_signal,102,Deriving trading levels from factors.,,214,        self.factors = self.init_factors(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22584, 669, 796, 2116, 13, 15003, 62, 22584, 669, 7]"
‚úÖ Best Practice: Logging the trader and factors levels for debugging.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 31791, 290, 5087, 2974, 329, 28769, 13]",1.0,251,best_practice,105,Logging the trader and factors levels for debugging.,,233,"            exchanges=self.exchanges,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14525, 28, 944, 13, 1069, 36653, 11]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic exception without specific error type or message.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 6631, 1231, 2176, 4049, 2099, 393, 3275, 13]",1.0,268,sast_risk,106,Raising a generic exception without specific error type or message.,Low,251,"            codes=self.codes,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12416, 28, 944, 13, 40148, 11]"
üß† ML Signal: Hook for initialization completion.,"[8582, 100, 254, 10373, 26484, 25, 18531, 329, 37588, 11939, 13]",0.5,310,ml_signal,116,Hook for initialization completion.,,268,"            self.logger.info(f""trader level:{self.level},factors level:{self.trading_level_asc}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 2213, 5067, 1241, 29164, 944, 13, 5715, 5512, 22584, 669, 1241, 29164, 944, 13, 2213, 4980, 62, 5715, 62, 3372, 92, 4943]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,331,ml_signal,103,Logging usage pattern,,310,"            entity_ids=self.entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 944, 13, 26858, 62, 2340, 11]"
üß† ML Signal: Logging with dynamic content,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 351, 8925, 2695]",0.5,349,ml_signal,105,Logging with dynamic content,,331,"            exchanges=self.exchanges,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14525, 28, 944, 13, 1069, 36653, 11]"
üß† ML Signal: Logging usage pattern with timestamp,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 41033]",1.0,349,ml_signal,111,Logging usage pattern with timestamp,,349,,[]
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive information in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1321, 287, 17259]",1.0,390,sast_risk,113,Potential exposure of sensitive information in logs,Low,349,            self.trading_level_asc = list(set([IntervalLevel(factor.level) for factor in self.factors])),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2213, 4980, 62, 5715, 62, 3372, 796, 1351, 7, 2617, 26933, 9492, 2100, 4971, 7, 31412, 13, 5715, 8, 329, 5766, 287, 2116, 13, 22584, 669, 60, 4008]"
‚ö†Ô∏è SAST Risk (Low): Returning potentially uninitialized or sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 6196, 555, 17532, 393, 8564, 1366]",0.5,432,sast_risk,116,Returning potentially uninitialized or sensitive data,Low,390,"            self.logger.info(f""trader level:{self.level},factors level:{self.trading_level_asc}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 2213, 5067, 1241, 29164, 944, 13, 5715, 5512, 22584, 669, 1241, 29164, 944, 13, 2213, 4980, 62, 5715, 62, 3372, 92, 4943]"
‚úÖ Best Practice: Docstring provides a brief description of the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007, 290, 10007, 13]",1.0,474,best_practice,116,Docstring provides a brief description of the method's purpose and parameters.,,432,"            self.logger.info(f""trader level:{self.level},factors level:{self.trading_level_asc}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 2213, 5067, 1241, 29164, 944, 13, 5715, 5512, 22584, 669, 1241, 29164, 944, 13, 2213, 4980, 62, 5715, 62, 3372, 92, 4943]"
üß† ML Signal: Method signature and parameters can be used to understand usage patterns and API design.,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 10007, 460, 307, 973, 284, 1833, 8748, 7572, 290, 7824, 1486, 13]",1.0,505,ml_signal,121,Method signature and parameters can be used to understand usage patterns and API design.,,474,            self.trading_level_desc = list(self.trading_level_asc),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2213, 4980, 62, 5715, 62, 20147, 796, 1351, 7, 944, 13, 2213, 4980, 62, 5715, 62, 3372, 8]"
‚úÖ Best Practice: Returning an empty list is explicit and clear for the default behavior.,"[26486, 227, 6705, 19939, 25, 42882, 281, 6565, 1351, 318, 7952, 290, 1598, 329, 262, 4277, 4069, 13]",1.0,536,best_practice,121,Returning an empty list is explicit and clear for the default behavior.,,505,            self.trading_level_desc = list(self.trading_level_asc),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2213, 4980, 62, 5715, 62, 20147, 796, 1351, 7, 944, 13, 2213, 4980, 62, 5715, 62, 3372, 8]"
‚úÖ Best Practice: Use of logging for debugging and tracking state changes,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 28769, 290, 9646, 1181, 2458]",0.5,548,best_practice,133,Use of logging for debugging and tracking state changes,,536,        init the entities for timestamp,"[220, 220, 220, 220, 220, 220, 220, 2315, 262, 12066, 329, 41033]"
üß† ML Signal: Pattern of updating a dictionary with new values,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 257, 22155, 351, 649, 3815]",0.5,556,ml_signal,137,Pattern of updating a dictionary with new values,,548,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of logging for debugging and tracking state changes,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 28769, 290, 9646, 1181, 2458]",0.5,556,best_practice,140,Use of logging for debugging and tracking state changes,,556,,[]
üß† ML Signal: Pattern of updating a dictionary with new values,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 257, 22155, 351, 649, 3815]",0.5,560,ml_signal,143,Pattern of updating a dictionary with new values,,556,    ):,"[220, 220, 220, 15179]"
üß† ML Signal: Method definition with specific parameter and return type hints,"[8582, 100, 254, 10373, 26484, 25, 11789, 6770, 351, 2176, 11507, 290, 1441, 2099, 20269]",0.5,569,ml_signal,141,Method definition with specific parameter and return type hints,,560,    def init_factors(,"[220, 220, 220, 825, 2315, 62, 22584, 669, 7]"
‚úÖ Best Practice: Use of dictionary get method for safe access,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 651, 2446, 329, 3338, 1895]",0.5,573,best_practice,143,Use of dictionary get method for safe access,,569,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,577,best_practice,143,Include a docstring to describe the function's purpose and parameters,,573,    ):,"[220, 220, 220, 15179]"
üß† ML Signal: Usage of dictionary get method to safely access values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 284, 11512, 1895, 3815]",0.5,597,ml_signal,145,Usage of dictionary get method to safely access values,,577,        overwrite it to init factors if you want to use factor computing model,"[220, 220, 220, 220, 220, 220, 220, 49312, 340, 284, 2315, 5087, 611, 345, 765, 284, 779, 5766, 14492, 2746]"
‚úÖ Best Practice: Initialize variables at the start of the function for clarity,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287]",1.0,610,best_practice,153,Initialize variables at the start of the function for clarity,,597,"        level: IntervalLevel,","[220, 220, 220, 220, 220, 220, 220, 1241, 25, 4225, 2100, 4971, 11]"
üß† ML Signal: Accessing a dictionary to retrieve targets based on levels,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 284, 19818, 6670, 1912, 319, 2974]",1.0,618,ml_signal,157,Accessing a dictionary to retrieve targets based on levels,,610,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Converting list to set for intersection operation,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1351, 284, 900, 329, 16246, 4905]",1.0,629,ml_signal,160,Converting list to set for intersection operation,,618,        :param level:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 1241, 25]"
üß† ML Signal: Using set intersection to find common targets,"[8582, 100, 254, 10373, 26484, 25, 8554, 900, 16246, 284, 1064, 2219, 6670]",1.0,677,ml_signal,165,Using set intersection to find common targets,,629,"            f""level:{level},old long targets:{self.level_map_long_targets.get(level)},new long targets:{long_targets}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 5715, 29164, 5715, 5512, 727, 890, 6670, 29164, 944, 13, 5715, 62, 8899, 62, 6511, 62, 83, 853, 1039, 13, 1136, 7, 5715, 8, 5512, 3605, 890, 6670, 29164, 6511, 62, 83, 853, 1039, 36786]"
‚úÖ Best Practice: Explicitly handle the case where no long targets are found,"[26486, 227, 6705, 19939, 25, 11884, 306, 5412, 262, 1339, 810, 645, 890, 6670, 389, 1043]",0.5,677,best_practice,168,Explicitly handle the case where no long targets are found,,677,,[]
üß† ML Signal: Accessing a dictionary to retrieve targets based on levels,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 284, 19818, 6670, 1912, 319, 2974]",1.0,691,ml_signal,169,Accessing a dictionary to retrieve targets based on levels,,677,        self.logger.debug(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 24442, 7]"
üß† ML Signal: Converting list to set for union operation,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1351, 284, 900, 329, 6441, 4905]",1.0,691,ml_signal,173,Converting list to set for union operation,,691,,[]
üß† ML Signal: Using set union to combine targets,"[8582, 100, 254, 10373, 26484, 25, 8554, 900, 6441, 284, 12082, 6670]",1.0,715,ml_signal,178,Using set union to combine targets,,691,        return self.level_map_short_targets.get(level),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 5715, 62, 8899, 62, 19509, 62, 83, 853, 1039, 13, 1136, 7, 5715, 8]"
‚úÖ Best Practice: Return consistent data types (sets) for both long and short selected targets,"[26486, 227, 6705, 19939, 25, 8229, 6414, 1366, 3858, 357, 28709, 8, 329, 1111, 890, 290, 1790, 6163, 6670]",0.5,748,best_practice,180,Return consistent data types (sets) for both long and short selected targets,,715,"    def on_targets_selected_from_levels(self, timestamp) -> Tuple[List[str], List[str]]:","[220, 220, 220, 825, 319, 62, 83, 853, 1039, 62, 34213, 62, 6738, 62, 46170, 7, 944, 11, 41033, 8, 4613, 309, 29291, 58, 8053, 58, 2536, 4357, 7343, 58, 2536, 60, 5974]"
üß† ML Signal: Method signature and return type hint can be used to infer method behavior and expected output,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 1441, 2099, 9254, 460, 307, 973, 284, 13249, 2446, 4069, 290, 2938, 5072]",1.0,748,ml_signal,173,Method signature and return type hint can be used to infer method behavior and expected output,,748,,[]
"üß† ML Signal: Usage of self indicates this is an instance method, suggesting object-oriented design","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 9217, 428, 318, 281, 4554, 2446, 11, 9524, 2134, 12, 17107, 1486]",0.5,772,ml_signal,175,"Usage of self indicates this is an instance method, suggesting object-oriented design",,748,        return self.level_map_long_targets.get(level),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 5715, 62, 8899, 62, 6511, 62, 83, 853, 1039, 13, 1136, 7, 5715, 8]"
üß† ML Signal: Calling a method on self.account_service can indicate a service-oriented architecture,"[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2446, 319, 2116, 13, 23317, 62, 15271, 460, 7603, 257, 2139, 12, 17107, 10959]",1.0,772,ml_signal,176,Calling a method on self.account_service can indicate a service-oriented architecture,,772,,[]
‚úÖ Best Practice: Include type hints for method return values for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 1441, 3815, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,796,best_practice,175,Include type hints for method return values for better readability and maintainability,,772,        return self.level_map_long_targets.get(level),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 5715, 62, 8899, 62, 6511, 62, 83, 853, 1039, 13, 1136, 7, 5715, 8]"
"üß† ML Signal: Method chaining pattern, common in fluent interfaces","[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 11, 2219, 287, 43472, 20314]",0.5,825,ml_signal,177,"Method chaining pattern, common in fluent interfaces",,796,"    def get_short_targets_by_level(self, level: IntervalLevel) -> List[str]:","[220, 220, 220, 825, 651, 62, 19509, 62, 83, 853, 1039, 62, 1525, 62, 5715, 7, 944, 11, 1241, 25, 4225, 2100, 4971, 8, 4613, 7343, 58, 2536, 5974]"
üß† ML Signal: Function to control position size based on current positions,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 1630, 2292, 2546, 1912, 319, 1459, 6116]",0.5,849,ml_signal,178,Function to control position size based on current positions,,825,        return self.level_map_short_targets.get(level),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 5715, 62, 8899, 62, 19509, 62, 83, 853, 1039, 13, 1136, 7, 5715, 8]"
üß† ML Signal: Adjusts position percentage when no positions are held,"[8582, 100, 254, 10373, 26484, 25, 20292, 82, 2292, 5873, 618, 645, 6116, 389, 2714]",0.5,876,ml_signal,182,Adjusts position percentage when no positions are held,,849,        this method's called in every min level cycle to select targets in all levels generated by the previous cycle,"[220, 220, 220, 220, 220, 220, 220, 428, 2446, 338, 1444, 287, 790, 949, 1241, 6772, 284, 2922, 6670, 287, 477, 2974, 7560, 416, 262, 2180, 6772]"
üß† ML Signal: Adjusts position percentage based on the number of positions,"[8582, 100, 254, 10373, 26484, 25, 20292, 82, 2292, 5873, 1912, 319, 262, 1271, 286, 6116]",0.5,876,ml_signal,185,Adjusts position percentage based on the number of positions,,876,,[]
"üß† ML Signal: Method returning a constant value, indicating a potential placeholder or default behavior","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 6937, 1988, 11, 12739, 257, 2785, 46076, 393, 4277, 4069]",0.5,876,ml_signal,185,"Method returning a constant value, indicating a potential placeholder or default behavior",,876,,[]
‚úÖ Best Practice: Explicitly returning a float value for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 257, 12178, 1988, 329, 16287]",0.5,891,best_practice,187,Explicitly returning a float value for clarity,,876,"        :return: long targets, short targets","[220, 220, 220, 220, 220, 220, 220, 1058, 7783, 25, 890, 6670, 11, 1790, 6670]"
‚úÖ Best Practice: Check if self.profit_threshold and self.get_current_positions() are not None or empty before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 2116, 13, 9183, 62, 400, 10126, 290, 2116, 13, 1136, 62, 14421, 62, 1930, 1756, 3419, 389, 407, 6045, 393, 6565, 878, 18788]",1.0,899,best_practice,188,Check if self.profit_threshold and self.get_current_positions() are not None or empty before proceeding,,891,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Iterating over current positions to evaluate profit rates,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 1459, 6116, 284, 13446, 7630, 3965]",1.0,899,ml_signal,193,Iterating over current positions to evaluate profit rates,,899,,[]
‚úÖ Best Practice: Check if available_long is greater than 1 before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 1695, 62, 6511, 318, 3744, 621, 352, 878, 18788]",1.0,932,best_practice,195,Check if available_long is greater than 1 before proceeding,,899,            long_targets = self.level_map_long_targets.get(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 890, 62, 83, 853, 1039, 796, 2116, 13, 5715, 62, 8899, 62, 6511, 62, 83, 853, 1039, 13, 1136, 7, 5715, 8]"
üß† ML Signal: Evaluating if profit_rate meets or exceeds the positive threshold,"[8582, 100, 254, 10373, 26484, 25, 26439, 11927, 611, 7630, 62, 4873, 11185, 393, 21695, 262, 3967, 11387]",0.5,950,ml_signal,197,Evaluating if profit_rate meets or exceeds the positive threshold,,932,            if long_targets:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 890, 62, 83, 853, 1039, 25]"
üß† ML Signal: Logging information about closing a profitable position,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 9605, 257, 17967, 2292]",0.5,978,ml_signal,200,Logging information about closing a profitable position,,950,                    long_selected = long_targets,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 890, 62, 34213, 796, 890, 62, 83, 853, 1039]"
üß† ML Signal: Evaluating if profit_rate is less than or equal to the negative threshold,"[8582, 100, 254, 10373, 26484, 25, 26439, 11927, 611, 7630, 62, 4873, 318, 1342, 621, 393, 4961, 284, 262, 4633, 11387]",0.5,1010,ml_signal,202,Evaluating if profit_rate is less than or equal to the negative threshold,,978,                    long_selected = long_selected & long_targets,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 890, 62, 34213, 796, 890, 62, 34213, 1222, 890, 62, 83, 853, 1039]"
üß† ML Signal: Logging information about cutting a losing position,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 7720, 257, 6078, 2292]",0.5,1010,ml_signal,205,Logging information about cutting a losing position,,1010,,[]
üß† ML Signal: Method parameter usage pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 11507, 8748, 3912]",1.0,1023,ml_signal,203,Method parameter usage pattern,,1010,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Check for None before accessing attributes,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 878, 22534, 12608]",0.5,1037,best_practice,207,Check for None before accessing attributes,,1023,            # short any,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1790, 597]"
‚úÖ Best Practice: Explicit None check,"[26486, 227, 6705, 19939, 25, 11884, 6045, 2198]",1.0,1054,best_practice,212,Explicit None check,,1037,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Set operations usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5345, 4560, 8748, 3912]",1.0,1069,ml_signal,215,Set operations usage pattern,,1054,"        return long_selected, short_selected","[220, 220, 220, 220, 220, 220, 220, 1441, 890, 62, 34213, 11, 1790, 62, 34213]"
üß† ML Signal: Dynamic calculation of position percentage,"[8582, 100, 254, 10373, 26484, 25, 26977, 17952, 286, 2292, 5873]",1.0,1089,ml_signal,218,Dynamic calculation of position percentage,,1069,        return self.account_service.get_current_account(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 23317, 62, 15271, 13, 1136, 62, 14421, 62, 23317, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues with timestamp conversion,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 41033, 11315]",1.0,1109,sast_risk,218,Potential timezone issues with timestamp conversion,Low,1089,        return self.account_service.get_current_account(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 23317, 62, 15271, 13, 1136, 62, 14421, 62, 23317, 3419]"
üß† ML Signal: Trading signal creation pattern,"[8582, 100, 254, 10373, 26484, 25, 25469, 6737, 6282, 3912]",0.5,1124,ml_signal,226,Trading signal creation pattern,,1109,        position_pct = 1.0,"[220, 220, 220, 220, 220, 220, 220, 2292, 62, 79, 310, 796, 352, 13, 15]"
üß† ML Signal: Appending to a list pattern,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 257, 1351, 3912]",1.0,1137,ml_signal,234,Appending to a list pattern,,1124,        # ‰π∞ÂÆå,"[220, 220, 220, 220, 220, 220, 220, 1303, 220, 20046, 108, 22522, 234]"
‚úÖ Best Practice: Using set intersection to find common elements is efficient and clear.,"[26486, 227, 6705, 19939, 25, 8554, 900, 16246, 284, 1064, 2219, 4847, 318, 6942, 290, 1598, 13]",0.5,1150,best_practice,234,Using set intersection to find common elements is efficient and clear.,,1137,        # ‰π∞ÂÆå,"[220, 220, 220, 220, 220, 220, 220, 1303, 220, 20046, 108, 22522, 234]"
üß† ML Signal: The method short_position_control() could indicate a strategy or decision-making process.,"[8582, 100, 254, 10373, 26484, 25, 383, 2446, 1790, 62, 9150, 62, 13716, 3419, 714, 7603, 257, 4811, 393, 2551, 12, 8601, 1429, 13]",0.5,1162,ml_signal,237,The method short_position_control() could indicate a strategy or decision-making process.,,1150,    def short_position_control(self):,"[220, 220, 220, 825, 1790, 62, 9150, 62, 13716, 7, 944, 2599]"
‚úÖ Best Practice: Converting timestamp to pandas timestamp for consistency in time operations.,"[26486, 227, 6705, 19939, 25, 35602, 889, 41033, 284, 19798, 292, 41033, 329, 15794, 287, 640, 4560, 13]",0.5,1173,best_practice,239,Converting timestamp to pandas timestamp for consistency in time operations.,,1162,        return 1.0,"[220, 220, 220, 220, 220, 220, 220, 1441, 352, 13, 15]"
üß† ML Signal: Creating a TradingSignal object could indicate a trading decision or action.,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 25469, 11712, 282, 2134, 714, 7603, 257, 7313, 2551, 393, 2223, 13]",0.5,1184,ml_signal,239,Creating a TradingSignal object could indicate a trading decision or action.,,1173,        return 1.0,"[220, 220, 220, 220, 220, 220, 220, 1441, 352, 13, 15]"
üß† ML Signal: Appending to trading_signals list could indicate a record of actions or decisions.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 7313, 62, 12683, 874, 1351, 714, 7603, 257, 1700, 286, 4028, 393, 5370, 13]",1.0,1234,ml_signal,251,Appending to trading_signals list could indicate a record of actions or decisions.,,1184,"                        self.logger.info(f""close profit {position.profit_rate} for {position.entity_id}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 19836, 7630, 1391, 9150, 13, 9183, 62, 4873, 92, 329, 1391, 9150, 13, 26858, 62, 312, 92, 4943]"
üß† ML Signal: Conditional logic based on a class attribute (self.draw_result) can indicate feature usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 1398, 11688, 357, 944, 13, 19334, 62, 20274, 8, 460, 7603, 3895, 8748, 7572, 13]",0.5,1273,ml_signal,250,Conditional logic based on a class attribute (self.draw_result) can indicate feature usage patterns.,,1234,                        close_long_entity_ids.append(position.entity_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1969, 62, 6511, 62, 26858, 62, 2340, 13, 33295, 7, 9150, 13, 26858, 62, 312, 8]"
üß† ML Signal: Instantiating objects with specific parameters can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 5563, 351, 2176, 10007, 460, 7603, 2219, 8748, 7572, 13]",0.5,1299,ml_signal,252,Instantiating objects with specific parameters can indicate common usage patterns.,,1273,                    # Ê≠¢Êçü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 10545, 255, 95, 162, 235, 253]"
üß† ML Signal: Accessing a specific attribute (data_df) of an object can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 11688, 357, 7890, 62, 7568, 8, 286, 281, 2134, 460, 7603, 2219, 8748, 7572, 13]",0.5,1327,ml_signal,253,Accessing a specific attribute (data_df) of an object can indicate common usage patterns.,,1299,                    if position.profit_rate <= negative:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2292, 13, 9183, 62, 4873, 19841, 4633, 25]"
üß† ML Signal: Instantiating objects with specific parameters can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 5563, 351, 2176, 10007, 460, 7603, 2219, 8748, 7572, 13]",0.5,1327,ml_signal,256,Instantiating objects with specific parameters can indicate common usage patterns.,,1327,,[]
"üß† ML Signal: Using specific DataFrame operations (e.g., copy, selection) can indicate common data manipulation patterns.","[8582, 100, 254, 10373, 26484, 25, 8554, 2176, 6060, 19778, 4560, 357, 68, 13, 70, 1539, 4866, 11, 6356, 8, 460, 7603, 2219, 1366, 17512, 7572, 13]",0.5,1348,ml_signal,257,"Using specific DataFrame operations (e.g., copy, selection) can indicate common data manipulation patterns.",,1327,"            return close_long_entity_ids, None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1969, 62, 6511, 62, 26858, 62, 2340, 11, 6045]"
üß† ML Signal: Calling a method with specific parameters (show=True) can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2446, 351, 2176, 10007, 357, 12860, 28, 17821, 8, 460, 7603, 2219, 8748, 7572, 13]",0.5,1370,ml_signal,260,Calling a method with specific parameters (show=True) can indicate common usage patterns.,,1348,"    def buy(self, timestamp, entity_ids, ignore_in_position=True):","[220, 220, 220, 825, 2822, 7, 944, 11, 41033, 11, 9312, 62, 2340, 11, 8856, 62, 259, 62, 9150, 28, 17821, 2599]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1386,ml_signal,269,Logging usage pattern for monitoring or debugging,,1370,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Limit the number of long targets to a maximum of 10 for manageability,"[26486, 227, 6705, 19939, 25, 27272, 262, 1271, 286, 890, 6670, 284, 257, 5415, 286, 838, 329, 6687, 1799]",1.0,1415,best_practice,271,Limit the number of long targets to a maximum of 10 for manageability,,1386,            entity_ids = set(entity_ids) - set(current_holdings),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 900, 7, 26858, 62, 2340, 8, 532, 900, 7, 14421, 62, 2946, 654, 8]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1439,ml_signal,274,Logging usage pattern for monitoring or debugging,,1415,            position_pct = self.long_position_control(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 62, 79, 310, 796, 2116, 13, 6511, 62, 9150, 62, 13716, 3419]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",0.5,1463,best_practice,274,Method should have a docstring explaining its purpose and parameters,,1439,            position_pct = self.long_position_control(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 62, 79, 310, 796, 2116, 13, 6511, 62, 9150, 62, 13716, 3419]"
üß† ML Signal: Usage of a helper function to_time_str suggests a pattern of converting timestamps to strings,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 62, 2435, 62, 2536, 5644, 257, 3912, 286, 23202, 4628, 395, 9430, 284, 13042]",0.5,1463,ml_signal,276,Usage of a helper function to_time_str suggests a pattern of converting timestamps to strings,,1463,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if to_time_str does not handle invalid timestamps properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 284, 62, 2435, 62, 2536, 857, 407, 5412, 12515, 4628, 395, 9430, 6105]",0.5,1507,sast_risk,277,Potential risk if to_time_str does not handle invalid timestamps properly,Low,1463,            due_timestamp = to_pd_timestamp(timestamp) + pd.Timedelta(seconds=self.level.to_second()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2233, 62, 16514, 27823, 796, 284, 62, 30094, 62, 16514, 27823, 7, 16514, 27823, 8, 1343, 279, 67, 13, 14967, 276, 12514, 7, 43012, 28, 944, 13, 5715, 13, 1462, 62, 12227, 28955]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,1536,ml_signal,281,Logging usage pattern,,1507,"                    due_timestamp=due_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2233, 62, 16514, 27823, 28, 23301, 62, 16514, 27823, 11]"
"üß† ML Signal: Method processes a list of trading signals, indicating a pattern of handling financial data.","[8582, 100, 254, 10373, 26484, 25, 11789, 7767, 257, 1351, 286, 7313, 10425, 11, 12739, 257, 3912, 286, 9041, 3176, 1366, 13]",0.5,1563,ml_signal,282,"Method processes a list of trading signals, indicating a pattern of handling financial data.",,1536,"                    happen_timestamp=timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1645, 62, 16514, 27823, 28, 16514, 27823, 11]"
"üß† ML Signal: Iterating over listeners to propagate trading signals, indicating an event-driven architecture.","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22054, 284, 47933, 7313, 10425, 11, 12739, 281, 1785, 12, 15808, 10959, 13]",1.0,1590,ml_signal,284,"Iterating over listeners to propagate trading signals, indicating an event-driven architecture.",,1563,"                    trading_level=self.level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7313, 62, 5715, 28, 944, 13, 5715, 11]"
"üß† ML Signal: Calling a method on listeners with trading signals, showing a pattern of event notification.","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2446, 319, 22054, 351, 7313, 10425, 11, 4478, 257, 3912, 286, 1785, 14483, 13]",0.5,1606,ml_signal,286,"Calling a method on listeners with trading signals, showing a pattern of event notification.",,1590,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Resetting the trading signals list after processing to avoid stale data.,"[26486, 227, 6705, 19939, 25, 30027, 889, 262, 7313, 10425, 1351, 706, 7587, 284, 3368, 39985, 1366, 13]",1.0,1606,best_practice,288,Resetting the trading signals list after processing to avoid stale data.,,1606,,[]
üß† ML Signal: Iterating over a list of listeners to trigger an event,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 22054, 284, 7616, 281, 1785]",1.0,1622,ml_signal,286,Iterating over a list of listeners to trigger an event,,1606,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Notifying multiple listeners about an event,"[8582, 100, 254, 10373, 26484, 25, 1892, 4035, 3294, 22054, 546, 281, 1785]",0.5,1622,ml_signal,288,Notifying multiple listeners about an event,,1622,,[]
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1632,best_practice,290,Use descriptive variable names for better readability,,1622,        # current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 1459, 2292]"
"üß† ML Signal: Method name suggests event-driven architecture, useful for ML models predicting event handling patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 1785, 12, 15808, 10959, 11, 4465, 329, 10373, 4981, 25539, 1785, 9041, 7572]",0.5,1646,ml_signal,289,"Method name suggests event-driven architecture, useful for ML models predicting event handling patterns",,1632,"    def sell(self, timestamp, entity_ids):","[220, 220, 220, 825, 3677, 7, 944, 11, 41033, 11, 9312, 62, 2340, 2599]"
"üß† ML Signal: Iterating over listeners indicates observer pattern, useful for ML models learning about design patterns","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22054, 9217, 22890, 3912, 11, 4465, 329, 10373, 4981, 4673, 546, 1486, 7572]",0.5,1663,ml_signal,291,"Iterating over listeners indicates observer pattern, useful for ML models learning about design patterns",,1646,        account = self.get_current_account(),"[220, 220, 220, 220, 220, 220, 220, 1848, 796, 2116, 13, 1136, 62, 14421, 62, 23317, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential for exceptions if 'l' does not have 'on_trading_close' method,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 13269, 611, 705, 75, 6, 857, 407, 423, 705, 261, 62, 2213, 4980, 62, 19836, 6, 2446]",0.5,1676,sast_risk,293,Potential for exceptions if 'l' does not have 'on_trading_close' method,Low,1663,        if account.positions:,"[220, 220, 220, 220, 220, 220, 220, 611, 1848, 13, 1930, 1756, 25]"
"üß† ML Signal: Method call on listener object, useful for ML models predicting method invocation patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 24783, 2134, 11, 4465, 329, 10373, 4981, 25539, 2446, 43219, 7572]",0.5,1693,ml_signal,294,"Method call on listener object, useful for ML models predicting method invocation patterns",,1676,            current_holdings = [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 2946, 654, 796, 685]"
"‚úÖ Best Practice: Method name suggests it is an event handler, which improves readability and maintainability","[26486, 227, 6705, 19939, 25, 11789, 1438, 5644, 340, 318, 281, 1785, 21360, 11, 543, 19575, 1100, 1799, 290, 5529, 1799]",0.5,1706,best_practice,292,"Method name suggests it is an event handler, which improves readability and maintainability",,1693,        current_holdings = [],"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 2946, 654, 796, 17635]"
üß† ML Signal: Iterating over a list of listeners is a common pattern in event-driven architectures,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 22054, 318, 257, 2219, 3912, 287, 1785, 12, 15808, 45619]",1.0,1723,ml_signal,294,Iterating over a list of listeners is a common pattern in event-driven architectures,,1706,            current_holdings = [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 2946, 654, 796, 685]"
"üß† ML Signal: Calling a method on each listener object, indicating a publish-subscribe pattern","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2446, 319, 1123, 24783, 2134, 11, 12739, 257, 7715, 12, 7266, 12522, 3912]",1.0,1735,ml_signal,296,"Calling a method on each listener object, indicating a publish-subscribe pattern",,1723,            ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Iterating over a list of listeners to propagate an event,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 22054, 284, 47933, 281, 1785]",0.5,1774,ml_signal,295,Iterating over a list of listeners to propagate an event,,1735,                position.entity_id for position in account.positions if position != None and position.available_long > 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 26858, 62, 312, 329, 2292, 287, 1848, 13, 1930, 1756, 611, 2292, 14512, 6045, 290, 2292, 13, 15182, 62, 6511, 1875, 657]"
üß† ML Signal: Propagating an error event to multiple listeners,"[8582, 100, 254, 10373, 26484, 25, 8772, 363, 803, 281, 4049, 1785, 284, 3294, 22054]",0.5,1774,ml_signal,297,Propagating an error event to multiple listeners,,1774,,[]
‚úÖ Best Practice: Using descriptive variable names improves readability,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 19575, 1100, 1799]",0.5,1774,best_practice,299,Using descriptive variable names improves readability,,1774,,[]
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,1798,ml_signal,298,Logging usage pattern,,1774,        shorted = set(current_holdings) & set(entity_ids),"[220, 220, 220, 220, 220, 220, 220, 1790, 276, 796, 900, 7, 14421, 62, 2946, 654, 8, 1222, 900, 7, 26858, 62, 2340, 8]"
üß† ML Signal: Logging with timestamp,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 351, 41033]",0.5,1809,ml_signal,300,Logging with timestamp,,1798,        if shorted:,"[220, 220, 220, 220, 220, 220, 220, 611, 1790, 276, 25]"
‚úÖ Best Practice: Use of f-string for logging,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 18931]",0.5,1833,best_practice,301,Use of f-string for logging,,1809,            position_pct = self.short_position_control(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 62, 79, 310, 796, 2116, 13, 19509, 62, 9150, 62, 13716, 3419]"
üß† ML Signal: Method for filtering data based on a specific attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 25431, 1366, 1912, 319, 257, 2176, 11688]",1.0,1844,ml_signal,300,Method for filtering data based on a specific attribute,,1833,        if shorted:,"[220, 220, 220, 220, 220, 220, 220, 611, 1790, 276, 25]"
‚úÖ Best Practice: List comprehension for concise and readable filtering,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 35327, 290, 31744, 25431]",1.0,1844,best_practice,302,List comprehension for concise and readable filtering,,1844,,[]
üß† ML Signal: Iterating over trading levels to handle factor targets,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 7313, 2974, 284, 5412, 5766, 6670]",1.0,1873,ml_signal,307,Iterating over trading levels to handle factor targets,,1844,"                    due_timestamp=due_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2233, 62, 16514, 27823, 28, 23301, 62, 16514, 27823, 11]"
üß† ML Signal: Logging the current level being processed,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 1459, 1241, 852, 13686]",0.5,1909,ml_signal,309,Logging the current level being processed,,1873,"                    trading_signal_type=TradingSignalType.close_long,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7313, 62, 12683, 282, 62, 4906, 28, 2898, 4980, 11712, 282, 6030, 13, 19836, 62, 6511, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential information exposure through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 7111, 832, 18931]",1.0,1938,sast_risk,311,Potential information exposure through logging,Low,1909,"                    position_pct=position_pct,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 62, 79, 310, 28, 9150, 62, 79, 310, 11]"
üß† ML Signal: Retrieving factors by level,"[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 5087, 416, 1241]",1.0,1951,ml_signal,315,Retrieving factors by level,,1938,"    def on_finish(self, timestamp):","[220, 220, 220, 825, 319, 62, 15643, 680, 7, 944, 11, 41033, 2599]"
üß† ML Signal: Getting long and short targets for a factor,"[8582, 100, 254, 10373, 26484, 25, 18067, 890, 290, 1790, 6670, 329, 257, 5766]",0.5,1962,ml_signal,317,Getting long and short targets for a factor,,1951,        # show the result,"[220, 220, 220, 220, 220, 220, 220, 1303, 905, 262, 1255]"
üß† ML Signal: Filtering factor targets,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 5766, 6670]",1.0,1983,ml_signal,324,Filtering factor targets,,1962,            drawer.draw_line(show=True),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 33451, 13, 19334, 62, 1370, 7, 12860, 28, 17821, 8]"
üß† ML Signal: Accumulating long targets,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 890, 6670]",0.5,1998,ml_signal,330,Accumulating long targets,,1983,        overwrite it to filter the targets from factor,"[220, 220, 220, 220, 220, 220, 220, 49312, 340, 284, 8106, 262, 6670, 422, 5766]"
üß† ML Signal: Accumulating short targets,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 1790, 6670]",0.5,2011,ml_signal,334,Accumulating short targets,,1998,        :param factor: the factor,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5766, 25, 262, 5766]"
üß† ML Signal: Updating targets by level,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 6670, 416, 1241]",1.0,2032,ml_signal,336,Updating targets by level,,2011,        :param short_targets: the short targets from the factor,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 1790, 62, 83, 853, 1039, 25, 262, 1790, 6670, 422, 262, 5766]"
üß† ML Signal: Iterating over timestamps to perform actions based on conditions,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4628, 395, 9430, 284, 1620, 4028, 1912, 319, 3403]",1.0,2047,ml_signal,330,Iterating over timestamps to perform actions based on conditions,,2032,        overwrite it to filter the targets from factor,"[220, 220, 220, 220, 220, 220, 220, 49312, 340, 284, 8106, 262, 6670, 422, 5766]"
‚úÖ Best Practice: Consistent logging format for better readability,"[26486, 227, 6705, 19939, 25, 3515, 7609, 18931, 5794, 329, 1365, 1100, 1799]",0.5,2060,best_practice,334,Consistent logging format for better readability,,2047,        :param factor: the factor,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5766, 25, 262, 5766]"
üß† ML Signal: Initializing entities based on timestamp,"[8582, 100, 254, 10373, 26484, 25, 20768, 2890, 12066, 1912, 319, 41033]",1.0,2081,ml_signal,336,Initializing entities based on timestamp,,2060,        :param short_targets: the short targets from the factor,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 1790, 62, 83, 853, 1039, 25, 262, 1790, 6670, 422, 262, 5766]"
‚úÖ Best Practice: Logging current state of entities,"[26486, 227, 6705, 19939, 25, 5972, 2667, 1459, 1181, 286, 12066]",0.5,2089,best_practice,338,Logging current state of entities,,2081,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Conditional check for trading date,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 7313, 3128]",1.0,2125,ml_signal,339,Conditional check for trading date,,2089,"        self.logger.info(f""on_targets_filtered {level} long:{long_targets}"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 261, 62, 83, 853, 1039, 62, 10379, 4400, 1391, 5715, 92, 890, 29164, 6511, 62, 83, 853, 1039, 92, 4943]"
üß† ML Signal: Handling different levels of intervals,"[8582, 100, 254, 10373, 26484, 25, 49500, 1180, 2974, 286, 20016]",0.5,2125,ml_signal,344,Handling different levels of intervals,,2125,,[]
üß† ML Signal: Processing trading signals,"[8582, 100, 254, 10373, 26484, 25, 28403, 7313, 10425]",1.0,2125,ml_signal,349,Processing trading signals,,2125,,[]
‚úÖ Best Practice: Logging trading signals for traceability,"[26486, 227, 6705, 19939, 25, 5972, 2667, 7313, 10425, 329, 12854, 1799]",0.5,2133,best_practice,351,Logging trading signals for traceability,,2125,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Iterating over factors to add entities,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5087, 284, 751, 12066]",1.0,2156,ml_signal,356,Iterating over factors to add entities,,2133,"        self.logger.debug(f""current timestamp:{timestamp}"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 24442, 7, 69, 1, 14421, 41033, 29164, 16514, 27823, 92, 4943]"
üß† ML Signal: Handling specific level conditions,"[8582, 100, 254, 10373, 26484, 25, 49500, 2176, 1241, 3403]",0.5,2183,ml_signal,360,Handling specific level conditions,,2156,            l.on_trading_signals(trading_signals),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 300, 13, 261, 62, 2213, 4980, 62, 12683, 874, 7, 2213, 4980, 62, 12683, 874, 8]"
‚úÖ Best Practice: Logging current time in a loop,"[26486, 227, 6705, 19939, 25, 5972, 2667, 1459, 640, 287, 257, 9052]",0.5,2198,best_practice,364,Logging current time in a loop,,2183,"    def on_trading_open(self, timestamp):","[220, 220, 220, 825, 319, 62, 2213, 4980, 62, 9654, 7, 944, 11, 41033, 2599]"
üß† ML Signal: Conditional waiting based on calculated seconds,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 4953, 1912, 319, 10488, 4201]",0.5,2223,ml_signal,378,Conditional waiting based on calculated seconds,,2198,"            l.on_trading_error(timestamp, error)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 300, 13, 261, 62, 2213, 4980, 62, 18224, 7, 16514, 27823, 11, 4049, 8]"
üß† ML Signal: Handling factors if present,"[8582, 100, 254, 10373, 26484, 25, 49500, 5087, 611, 1944]",1.0,2223,ml_signal,385,Handling factors if present,,2223,,[]
üß† ML Signal: Selecting targets based on levels,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 6670, 1912, 319, 2974]",0.5,2231,ml_signal,390,Selecting targets based on levels,,2223,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Adjusting short selections based on passive short,"[8582, 100, 254, 10373, 26484, 25, 20292, 278, 1790, 28224, 1912, 319, 14513, 1790]",0.5,2279,ml_signal,392,Adjusting short selections based on passive short,,2231,        # Êõ¥ÁªÜËäÇÁöÑÊéßÂà∂ÂèØ‰ª•Âú®on_targets_filteredÈáåËøõ‰∏ÄÊ≠•Â§ÑÁêÜ,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 249, 112, 163, 119, 228, 164, 232, 224, 21410, 162, 236, 100, 26344, 114, 20998, 107, 20015, 98, 28839, 101, 261, 62, 83, 853, 1039, 62, 10379, 4400, 34932, 234, 32573, 249, 31660, 29826, 98, 13783, 226, 49426, 228]"
üß† ML Signal: Executing sell actions,"[8582, 100, 254, 10373, 26484, 25, 8393, 15129, 3677, 4028]",0.5,2298,ml_signal,398,Executing sell actions,,2279,        for level in self.trading_level_asc:,"[220, 220, 220, 220, 220, 220, 220, 329, 1241, 287, 2116, 13, 2213, 4980, 62, 5715, 62, 3372, 25]"
üß† ML Signal: Executing buy actions,"[8582, 100, 254, 10373, 26484, 25, 8393, 15129, 2822, 4028]",0.5,2337,ml_signal,401,Executing buy actions,,2298,"            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 26858, 62, 15952, 2611, 13, 271, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 28, 16514, 27823, 11, 1241, 28, 5715, 2599]"
üß† ML Signal: Handling trading close conditions,"[8582, 100, 254, 10373, 26484, 25, 49500, 7313, 1969, 3403]",0.5,2376,ml_signal,401,Handling trading close conditions,,2337,"            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 26858, 62, 15952, 2611, 13, 271, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 28, 16514, 27823, 11, 1241, 28, 5715, 2599]"
‚úÖ Best Practice: Consistent logging format for better readability,"[26486, 227, 6705, 19939, 25, 3515, 7609, 18931, 5794, 329, 1365, 1100, 1799]",0.5,2415,best_practice,401,Consistent logging format for better readability,,2376,"            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 26858, 62, 15952, 2611, 13, 271, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 28, 16514, 27823, 11, 1241, 28, 5715, 2599]"
üß† ML Signal: Finalizing process with on_finish,"[8582, 100, 254, 10373, 26484, 25, 8125, 2890, 1429, 351, 319, 62, 15643, 680]",0.5,2447,ml_signal,411,Finalizing process with on_finish,,2415,                    if long_targets or short_targets:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 890, 62, 83, 853, 1039, 393, 1790, 62, 83, 853, 1039, 25]"
"üß† ML Signal: Method for registering event listeners, indicating an observer pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 28336, 1785, 22054, 11, 12739, 281, 22890, 3912]",1.0,2502,ml_signal,393,"Method for registering event listeners, indicating an observer pattern",,2447,        # ‰πüÂèØ‰ª•Âú®on_timeÈáåÈù¢ËÆæËÆ°‰∏Ä‰∫õËá™Â∑±ÁöÑÈÄªËæëÈÖçÂêàËøáÊª§,"[220, 220, 220, 220, 220, 220, 220, 1303, 220, 20046, 253, 20998, 107, 20015, 98, 28839, 101, 261, 62, 2435, 34932, 234, 165, 251, 95, 164, 106, 122, 164, 106, 94, 31660, 12859, 249, 164, 229, 103, 32432, 109, 21410, 34460, 119, 164, 122, 239, 165, 227, 235, 28938, 230, 32573, 229, 162, 119, 97]"
‚úÖ Best Practice: Check if listener is already registered to avoid duplicates,"[26486, 227, 6705, 19939, 25, 6822, 611, 24783, 318, 1541, 6823, 284, 3368, 14184, 16856]",0.5,2584,best_practice,395,Check if listener is already registered to avoid duplicates,,2502,        # 1)ËÆ°ÁÆóÂêÑÁ∫ßÂà´ÁöÑ Ê†áÁöÑÔºåÈÄöËøá on_factor_targets_filtered ËøáÊª§ÔºåÁºìÂ≠òÂú®level_map_long_targetsÔºålevel_map_short_targets,"[220, 220, 220, 220, 220, 220, 220, 1303, 352, 8, 164, 106, 94, 163, 106, 245, 28938, 226, 163, 118, 100, 26344, 104, 21410, 10545, 254, 229, 21410, 171, 120, 234, 34460, 248, 32573, 229, 319, 62, 31412, 62, 83, 853, 1039, 62, 10379, 4400, 5525, 123, 229, 162, 119, 97, 171, 120, 234, 163, 120, 241, 27764, 246, 28839, 101, 5715, 62, 8899, 62, 6511, 62, 83, 853, 1039, 171, 120, 234, 5715, 62, 8899, 62, 19509, 62, 83, 853, 1039]"
"üß† ML Signal: Appending to a list, common operation for managing collections","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 257, 1351, 11, 2219, 4905, 329, 11149, 17268]",1.0,2653,ml_signal,397,"Appending to a list, common operation for managing collections",,2584,        # ËøôÈáåÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÂ∞èÁ∫ßÂà´ÊãøÂà∞‰∏ä‰∏Ä‰∏™Âë®ÊúüÁöÑÂ§ßÁ∫ßÂà´ÁöÑÊ†áÁöÑÔºåËøôÊòØÂêàÁêÜÁöÑ,"[220, 220, 220, 220, 220, 220, 220, 1303, 5525, 123, 247, 34932, 234, 165, 250, 222, 17358, 223, 37345, 101, 35707, 237, 21410, 42468, 171, 120, 234, 22887, 237, 163, 118, 100, 26344, 104, 162, 233, 123, 26344, 108, 41468, 31660, 10310, 103, 37772, 101, 17312, 253, 21410, 32014, 163, 118, 100, 26344, 104, 21410, 43718, 229, 21410, 171, 120, 234, 32573, 247, 42468, 28938, 230, 49426, 228, 21410]"
"üß† ML Signal: Checks for membership before removal, indicating a pattern of safe list operations","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 9931, 878, 9934, 11, 12739, 257, 3912, 286, 3338, 1351, 4560]",1.0,2722,ml_signal,397,"Checks for membership before removal, indicating a pattern of safe list operations",,2653,        # ËøôÈáåÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÂ∞èÁ∫ßÂà´ÊãøÂà∞‰∏ä‰∏Ä‰∏™Âë®ÊúüÁöÑÂ§ßÁ∫ßÂà´ÁöÑÊ†áÁöÑÔºåËøôÊòØÂêàÁêÜÁöÑ,"[220, 220, 220, 220, 220, 220, 220, 1303, 5525, 123, 247, 34932, 234, 165, 250, 222, 17358, 223, 37345, 101, 35707, 237, 21410, 42468, 171, 120, 234, 22887, 237, 163, 118, 100, 26344, 104, 162, 233, 123, 26344, 108, 41468, 31660, 10310, 103, 37772, 101, 17312, 253, 21410, 32014, 163, 118, 100, 26344, 104, 21410, 43718, 229, 21410, 171, 120, 234, 32573, 247, 42468, 28938, 230, 49426, 228, 21410]"
‚úÖ Best Practice: Using list's remove method ensures only existing elements are removed,"[26486, 227, 6705, 19939, 25, 8554, 1351, 338, 4781, 2446, 19047, 691, 4683, 4847, 389, 4615]",0.5,2748,best_practice,399,Using list's remove method ensures only existing elements are removed,,2722,"            self.logger.info(f""level: {level}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 5715, 25, 1391, 5715, 92, 4943]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748, 13]",1.0,2774,best_practice,399,Class definition should include a docstring to describe its purpose and usage.,,2748,"            self.logger.info(f""level: {level}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 5715, 25, 1391, 5715, 92, 4943]"
‚úÖ Best Practice: Class attributes should be documented to explain their purpose.,"[26486, 227, 6705, 19939, 25, 5016, 12608, 815, 307, 12395, 284, 4727, 511, 4007, 13]",1.0,2813,best_practice,401,Class attributes should be documented to explain their purpose.,,2774,"            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 26858, 62, 15952, 2611, 13, 271, 62, 43952, 62, 74, 7890, 62, 16514, 27823, 7, 16514, 27823, 28, 16514, 27823, 11, 1241, 28, 5715, 2599]"
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,2813,best_practice,419,Explicitly calling the superclass's __init__ method ensures proper initialization.,,2813,,[]
üß† ML Signal: Use of __all__ to define public API of the module,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,2843,ml_signal,436,Use of __all__ to define public API of the module,,2813,            self.entity_ids = self.init_entities(timestamp=timestamp),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 2340, 796, 2116, 13, 15003, 62, 298, 871, 7, 16514, 27823, 28, 16514, 27823, 8]"

[
  {
    "line": 15,
    "text": "from zvt.trader.trader_info_api import AccountStatsReader",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local application sections improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      2213,
      5067,
      13,
      2213,
      5067,
      62,
      10951,
      62,
      15042,
      1330,
      10781,
      29668,
      33634
    ],
    "start_token": 0,
    "end_token": 17,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      3586,
      9004,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local application sections improves readability."
  },
  {
    "line": 15,
    "text": "from zvt.trader.trader_info_api import AccountStatsReader",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      2213,
      5067,
      13,
      2213,
      5067,
      62,
      10951,
      62,
      15042,
      1330,
      10781,
      29668,
      33634
    ],
    "start_token": 17,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 17,
    "text": "from zvt.utils.time_utils import to_pd_timestamp, now_pd_timestamp, to_time_str, is_same_date, date_time_by_interval",
    "annotation": "\u2705 Best Practice: Type hinting for class attributes helps with static analysis and IDE support.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      11,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      11,
      284,
      62,
      2435,
      62,
      2536,
      11,
      318,
      62,
      31642,
      62,
      4475,
      11,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100
    ],
    "start_token": 34,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1398,
      12608,
      5419,
      351,
      9037,
      3781,
      290,
      33497,
      1104,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for class attributes helps with static analysis and IDE support."
  },
  {
    "line": 36,
    "text": "        rich_mode: bool = False,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5527,
      62,
      14171,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 78,
    "end_token": 93,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of assert statements for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 38,
    "text": "        profit_threshold=(3, -0.3),",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7630,
      62,
      400,
      10126,
      16193,
      18,
      11,
      532,
      15,
      13,
      18,
      828
    ],
    "start_token": 93,
    "end_token": 112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of assert statements for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 40,
    "text": "        pre_load_days=365,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      662,
      62,
      2220,
      62,
      12545,
      28,
      24760,
      11
    ],
    "start_token": 112,
    "end_token": 127,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of assert statements for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 41,
    "text": "    ) -> None:",
    "annotation": "\u2705 Best Practice: Use a logger for tracking and debugging instead of print statements.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 127,
    "end_token": 134,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      49706,
      329,
      9646,
      290,
      28769,
      2427,
      286,
      3601,
      6299,
      13
    ],
    "label": "best_practice",
    "reason": "Use a logger for tracking and debugging instead of print statements."
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Default naming pattern for trader_name based on class name.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 134,
    "end_token": 134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      19264,
      3912,
      329,
      31791,
      62,
      3672,
      1912,
      319,
      1398,
      1438,
      13
    ],
    "label": "ml_signal",
    "reason": "Default naming pattern for trader_name based on class name."
  },
  {
    "line": 62,
    "text": "        self.pre_load_days = pre_load_days",
    "annotation": "\u2705 Best Practice: Informative logging for real-time mode configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3866,
      62,
      2220,
      62,
      12545,
      796,
      662,
      62,
      2220,
      62,
      12545
    ],
    "start_token": 134,
    "end_token": 154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      1103,
      12,
      2435,
      4235,
      8398,
      13
    ],
    "label": "best_practice",
    "reason": "Informative logging for real-time mode configuration."
  },
  {
    "line": 66,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of assert statements for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 154,
    "end_token": 162,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of assert statements for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 71,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of trading signals list.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 162,
    "end_token": 174,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      7313,
      10425,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Initialization of trading signals list."
  },
  {
    "line": 81,
    "text": "        self.profit_threshold = profit_threshold",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of trading signal listeners list.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9183,
      62,
      400,
      10126,
      796,
      7630,
      62,
      400,
      10126
    ],
    "start_token": 174,
    "end_token": 192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      7313,
      6737,
      22054,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Initialization of trading signal listeners list."
  },
  {
    "line": 91,
    "text": "            trader_name=self.trader_name,",
    "annotation": "\ud83e\udde0 ML Signal: Registering account service as a trading signal listener.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31791,
      62,
      3672,
      28,
      944,
      13,
      2213,
      5067,
      62,
      3672,
      11
    ],
    "start_token": 192,
    "end_token": 214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      1848,
      2139,
      355,
      257,
      7313,
      6737,
      24783,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering account service as a trading signal listener."
  },
  {
    "line": 102,
    "text": "        self.factors = self.init_factors(",
    "annotation": "\ud83e\udde0 ML Signal: Deriving trading levels from factors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      22584,
      669,
      796,
      2116,
      13,
      15003,
      62,
      22584,
      669,
      7
    ],
    "start_token": 214,
    "end_token": 233,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9626,
      1412,
      7313,
      2974,
      422,
      5087,
      13
    ],
    "label": "ml_signal",
    "reason": "Deriving trading levels from factors."
  },
  {
    "line": 105,
    "text": "            exchanges=self.exchanges,",
    "annotation": "\u2705 Best Practice: Logging the trader and factors levels for debugging.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      944,
      13,
      1069,
      36653,
      11
    ],
    "start_token": 233,
    "end_token": 251,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      262,
      31791,
      290,
      5087,
      2974,
      329,
      28769,
      13
    ],
    "label": "best_practice",
    "reason": "Logging the trader and factors levels for debugging."
  },
  {
    "line": 106,
    "text": "            codes=self.codes,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without specific error type or message.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      28,
      944,
      13,
      40148,
      11
    ],
    "start_token": 251,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      2176,
      4049,
      2099,
      393,
      3275,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without specific error type or message."
  },
  {
    "line": 116,
    "text": "            self.logger.info(f\"trader level:{self.level},factors level:{self.trading_level_asc}\")",
    "annotation": "\ud83e\udde0 ML Signal: Hook for initialization completion.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      2213,
      5067,
      1241,
      29164,
      944,
      13,
      5715,
      5512,
      22584,
      669,
      1241,
      29164,
      944,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      92,
      4943
    ],
    "start_token": 268,
    "end_token": 310,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18531,
      329,
      37588,
      11939,
      13
    ],
    "label": "ml_signal",
    "reason": "Hook for initialization completion."
  },
  {
    "line": 103,
    "text": "            entity_ids=self.entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      944,
      13,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 310,
    "end_token": 331,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 105,
    "text": "            exchanges=self.exchanges,",
    "annotation": "\ud83e\udde0 ML Signal: Logging with dynamic content",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      944,
      13,
      1069,
      36653,
      11
    ],
    "start_token": 331,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging with dynamic content"
  },
  {
    "line": 111,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern with timestamp",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 349,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      351,
      41033
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern with timestamp"
  },
  {
    "line": 113,
    "text": "            self.trading_level_asc = list(set([IntervalLevel(factor.level) for factor in self.factors]))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive information in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      796,
      1351,
      7,
      2617,
      26933,
      9492,
      2100,
      4971,
      7,
      31412,
      13,
      5715,
      8,
      329,
      5766,
      287,
      2116,
      13,
      22584,
      669,
      60,
      4008
    ],
    "start_token": 349,
    "end_token": 390,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive information in logs"
  },
  {
    "line": 116,
    "text": "            self.logger.info(f\"trader level:{self.level},factors level:{self.trading_level_asc}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning potentially uninitialized or sensitive data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      2213,
      5067,
      1241,
      29164,
      944,
      13,
      5715,
      5512,
      22584,
      669,
      1241,
      29164,
      944,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      92,
      4943
    ],
    "start_token": 390,
    "end_token": 432,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      6196,
      555,
      17532,
      393,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning potentially uninitialized or sensitive data"
  },
  {
    "line": 116,
    "text": "            self.logger.info(f\"trader level:{self.level},factors level:{self.trading_level_asc}\")",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      2213,
      5067,
      1241,
      29164,
      944,
      13,
      5715,
      5512,
      22584,
      669,
      1241,
      29164,
      944,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      92,
      4943
    ],
    "start_token": 432,
    "end_token": 474,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose and parameters."
  },
  {
    "line": 121,
    "text": "            self.trading_level_desc = list(self.trading_level_asc)",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and parameters can be used to understand usage patterns and API design.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      20147,
      796,
      1351,
      7,
      944,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      8
    ],
    "start_token": 474,
    "end_token": 505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      10007,
      460,
      307,
      973,
      284,
      1833,
      8748,
      7572,
      290,
      7824,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Method signature and parameters can be used to understand usage patterns and API design."
  },
  {
    "line": 121,
    "text": "            self.trading_level_desc = list(self.trading_level_asc)",
    "annotation": "\u2705 Best Practice: Returning an empty list is explicit and clear for the default behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      20147,
      796,
      1351,
      7,
      944,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      8
    ],
    "start_token": 505,
    "end_token": 536,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      281,
      6565,
      1351,
      318,
      7952,
      290,
      1598,
      329,
      262,
      4277,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Returning an empty list is explicit and clear for the default behavior."
  },
  {
    "line": 133,
    "text": "        init the entities for timestamp",
    "annotation": "\u2705 Best Practice: Use of logging for debugging and tracking state changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2315,
      262,
      12066,
      329,
      41033
    ],
    "start_token": 536,
    "end_token": 548,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      28769,
      290,
      9646,
      1181,
      2458
    ],
    "label": "best_practice",
    "reason": "Use of logging for debugging and tracking state changes"
  },
  {
    "line": 137,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of updating a dictionary with new values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 548,
    "end_token": 556,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      19698,
      257,
      22155,
      351,
      649,
      3815
    ],
    "label": "ml_signal",
    "reason": "Pattern of updating a dictionary with new values"
  },
  {
    "line": 140,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of logging for debugging and tracking state changes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 556,
    "end_token": 556,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      28769,
      290,
      9646,
      1181,
      2458
    ],
    "label": "best_practice",
    "reason": "Use of logging for debugging and tracking state changes"
  },
  {
    "line": 143,
    "text": "    ):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of updating a dictionary with new values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 556,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      19698,
      257,
      22155,
      351,
      649,
      3815
    ],
    "label": "ml_signal",
    "reason": "Pattern of updating a dictionary with new values"
  },
  {
    "line": 141,
    "text": "    def init_factors(",
    "annotation": "\ud83e\udde0 ML Signal: Method definition with specific parameter and return type hints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      22584,
      669,
      7
    ],
    "start_token": 560,
    "end_token": 569,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      6770,
      351,
      2176,
      11507,
      290,
      1441,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Method definition with specific parameter and return type hints"
  },
  {
    "line": 143,
    "text": "    ):",
    "annotation": "\u2705 Best Practice: Use of dictionary get method for safe access",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 569,
    "end_token": 573,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      651,
      2446,
      329,
      3338,
      1895
    ],
    "label": "best_practice",
    "reason": "Use of dictionary get method for safe access"
  },
  {
    "line": 143,
    "text": "    ):",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 573,
    "end_token": 577,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 145,
    "text": "        overwrite it to init factors if you want to use factor computing model",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method to safely access values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49312,
      340,
      284,
      2315,
      5087,
      611,
      345,
      765,
      284,
      779,
      5766,
      14492,
      2746
    ],
    "start_token": 577,
    "end_token": 597,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      284,
      11512,
      1895,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method to safely access values"
  },
  {
    "line": 153,
    "text": "        level: IntervalLevel,",
    "annotation": "\u2705 Best Practice: Initialize variables at the start of the function for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      25,
      4225,
      2100,
      4971,
      11
    ],
    "start_token": 597,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      379,
      262,
      923,
      286,
      262,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Initialize variables at the start of the function for clarity"
  },
  {
    "line": 157,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary to retrieve targets based on levels",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 610,
    "end_token": 618,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      284,
      19818,
      6670,
      1912,
      319,
      2974
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary to retrieve targets based on levels"
  },
  {
    "line": 160,
    "text": "        :param level:",
    "annotation": "\ud83e\udde0 ML Signal: Converting list to set for intersection operation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1241,
      25
    ],
    "start_token": 618,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1351,
      284,
      900,
      329,
      16246,
      4905
    ],
    "label": "ml_signal",
    "reason": "Converting list to set for intersection operation"
  },
  {
    "line": 165,
    "text": "            f\"level:{level},old long targets:{self.level_map_long_targets.get(level)},new long targets:{long_targets}\"",
    "annotation": "\ud83e\udde0 ML Signal: Using set intersection to find common targets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      5715,
      29164,
      5715,
      5512,
      727,
      890,
      6670,
      29164,
      944,
      13,
      5715,
      62,
      8899,
      62,
      6511,
      62,
      83,
      853,
      1039,
      13,
      1136,
      7,
      5715,
      8,
      5512,
      3605,
      890,
      6670,
      29164,
      6511,
      62,
      83,
      853,
      1039,
      36786
    ],
    "start_token": 629,
    "end_token": 677,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      900,
      16246,
      284,
      1064,
      2219,
      6670
    ],
    "label": "ml_signal",
    "reason": "Using set intersection to find common targets"
  },
  {
    "line": 168,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly handle the case where no long targets are found",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 677,
    "end_token": 677,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      5412,
      262,
      1339,
      810,
      645,
      890,
      6670,
      389,
      1043
    ],
    "label": "best_practice",
    "reason": "Explicitly handle the case where no long targets are found"
  },
  {
    "line": 169,
    "text": "        self.logger.debug(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary to retrieve targets based on levels",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      24442,
      7
    ],
    "start_token": 677,
    "end_token": 691,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      284,
      19818,
      6670,
      1912,
      319,
      2974
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary to retrieve targets based on levels"
  },
  {
    "line": 173,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting list to set for union operation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 691,
    "end_token": 691,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1351,
      284,
      900,
      329,
      6441,
      4905
    ],
    "label": "ml_signal",
    "reason": "Converting list to set for union operation"
  },
  {
    "line": 178,
    "text": "        return self.level_map_short_targets.get(level)",
    "annotation": "\ud83e\udde0 ML Signal: Using set union to combine targets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5715,
      62,
      8899,
      62,
      19509,
      62,
      83,
      853,
      1039,
      13,
      1136,
      7,
      5715,
      8
    ],
    "start_token": 691,
    "end_token": 715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      900,
      6441,
      284,
      12082,
      6670
    ],
    "label": "ml_signal",
    "reason": "Using set union to combine targets"
  },
  {
    "line": 180,
    "text": "    def on_targets_selected_from_levels(self, timestamp) -> Tuple[List[str], List[str]]:",
    "annotation": "\u2705 Best Practice: Return consistent data types (sets) for both long and short selected targets",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      83,
      853,
      1039,
      62,
      34213,
      62,
      6738,
      62,
      46170,
      7,
      944,
      11,
      41033,
      8,
      4613,
      309,
      29291,
      58,
      8053,
      58,
      2536,
      4357,
      7343,
      58,
      2536,
      60,
      5974
    ],
    "start_token": 715,
    "end_token": 748,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      6414,
      1366,
      3858,
      357,
      28709,
      8,
      329,
      1111,
      890,
      290,
      1790,
      6163,
      6670
    ],
    "label": "best_practice",
    "reason": "Return consistent data types (sets) for both long and short selected targets"
  },
  {
    "line": 173,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and return type hint can be used to infer method behavior and expected output",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 748,
    "end_token": 748,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      1441,
      2099,
      9254,
      460,
      307,
      973,
      284,
      13249,
      2446,
      4069,
      290,
      2938,
      5072
    ],
    "label": "ml_signal",
    "reason": "Method signature and return type hint can be used to infer method behavior and expected output"
  },
  {
    "line": 175,
    "text": "        return self.level_map_long_targets.get(level)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self indicates this is an instance method, suggesting object-oriented design",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5715,
      62,
      8899,
      62,
      6511,
      62,
      83,
      853,
      1039,
      13,
      1136,
      7,
      5715,
      8
    ],
    "start_token": 748,
    "end_token": 772,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      9217,
      428,
      318,
      281,
      4554,
      2446,
      11,
      9524,
      2134,
      12,
      17107,
      1486
    ],
    "label": "ml_signal",
    "reason": "Usage of self indicates this is an instance method, suggesting object-oriented design"
  },
  {
    "line": 176,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on self.account_service can indicate a service-oriented architecture",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 772,
    "end_token": 772,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      2116,
      13,
      23317,
      62,
      15271,
      460,
      7603,
      257,
      2139,
      12,
      17107,
      10959
    ],
    "label": "ml_signal",
    "reason": "Calling a method on self.account_service can indicate a service-oriented architecture"
  },
  {
    "line": 175,
    "text": "        return self.level_map_long_targets.get(level)",
    "annotation": "\u2705 Best Practice: Include type hints for method return values for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5715,
      62,
      8899,
      62,
      6511,
      62,
      83,
      853,
      1039,
      13,
      1136,
      7,
      5715,
      8
    ],
    "start_token": 772,
    "end_token": 796,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      1441,
      3815,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method return values for better readability and maintainability"
  },
  {
    "line": 177,
    "text": "    def get_short_targets_by_level(self, level: IntervalLevel) -> List[str]:",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern, common in fluent interfaces",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      19509,
      62,
      83,
      853,
      1039,
      62,
      1525,
      62,
      5715,
      7,
      944,
      11,
      1241,
      25,
      4225,
      2100,
      4971,
      8,
      4613,
      7343,
      58,
      2536,
      5974
    ],
    "start_token": 796,
    "end_token": 825,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      11,
      2219,
      287,
      43472,
      20314
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern, common in fluent interfaces"
  },
  {
    "line": 178,
    "text": "        return self.level_map_short_targets.get(level)",
    "annotation": "\ud83e\udde0 ML Signal: Function to control position size based on current positions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5715,
      62,
      8899,
      62,
      19509,
      62,
      83,
      853,
      1039,
      13,
      1136,
      7,
      5715,
      8
    ],
    "start_token": 825,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      1630,
      2292,
      2546,
      1912,
      319,
      1459,
      6116
    ],
    "label": "ml_signal",
    "reason": "Function to control position size based on current positions"
  },
  {
    "line": 182,
    "text": "        this method's called in every min level cycle to select targets in all levels generated by the previous cycle",
    "annotation": "\ud83e\udde0 ML Signal: Adjusts position percentage when no positions are held",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2446,
      338,
      1444,
      287,
      790,
      949,
      1241,
      6772,
      284,
      2922,
      6670,
      287,
      477,
      2974,
      7560,
      416,
      262,
      2180,
      6772
    ],
    "start_token": 849,
    "end_token": 876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      82,
      2292,
      5873,
      618,
      645,
      6116,
      389,
      2714
    ],
    "label": "ml_signal",
    "reason": "Adjusts position percentage when no positions are held"
  },
  {
    "line": 185,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Adjusts position percentage based on the number of positions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 876,
    "end_token": 876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      82,
      2292,
      5873,
      1912,
      319,
      262,
      1271,
      286,
      6116
    ],
    "label": "ml_signal",
    "reason": "Adjusts position percentage based on the number of positions"
  },
  {
    "line": 185,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a constant value, indicating a potential placeholder or default behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 876,
    "end_token": 876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      6937,
      1988,
      11,
      12739,
      257,
      2785,
      46076,
      393,
      4277,
      4069
    ],
    "label": "ml_signal",
    "reason": "Method returning a constant value, indicating a potential placeholder or default behavior"
  },
  {
    "line": 187,
    "text": "        :return: long targets, short targets",
    "annotation": "\u2705 Best Practice: Explicitly returning a float value for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      7783,
      25,
      890,
      6670,
      11,
      1790,
      6670
    ],
    "start_token": 876,
    "end_token": 891,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      257,
      12178,
      1988,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning a float value for clarity"
  },
  {
    "line": 188,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check if self.profit_threshold and self.get_current_positions() are not None or empty before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 891,
    "end_token": 899,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2116,
      13,
      9183,
      62,
      400,
      10126,
      290,
      2116,
      13,
      1136,
      62,
      14421,
      62,
      1930,
      1756,
      3419,
      389,
      407,
      6045,
      393,
      6565,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if self.profit_threshold and self.get_current_positions() are not None or empty before proceeding"
  },
  {
    "line": 193,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over current positions to evaluate profit rates",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 899,
    "end_token": 899,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1459,
      6116,
      284,
      13446,
      7630,
      3965
    ],
    "label": "ml_signal",
    "reason": "Iterating over current positions to evaluate profit rates"
  },
  {
    "line": 195,
    "text": "            long_targets = self.level_map_long_targets.get(level)",
    "annotation": "\u2705 Best Practice: Check if available_long is greater than 1 before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      83,
      853,
      1039,
      796,
      2116,
      13,
      5715,
      62,
      8899,
      62,
      6511,
      62,
      83,
      853,
      1039,
      13,
      1136,
      7,
      5715,
      8
    ],
    "start_token": 899,
    "end_token": 932,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1695,
      62,
      6511,
      318,
      3744,
      621,
      352,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if available_long is greater than 1 before proceeding"
  },
  {
    "line": 197,
    "text": "            if long_targets:",
    "annotation": "\ud83e\udde0 ML Signal: Evaluating if profit_rate meets or exceeds the positive threshold",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      890,
      62,
      83,
      853,
      1039,
      25
    ],
    "start_token": 932,
    "end_token": 950,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26439,
      11927,
      611,
      7630,
      62,
      4873,
      11185,
      393,
      21695,
      262,
      3967,
      11387
    ],
    "label": "ml_signal",
    "reason": "Evaluating if profit_rate meets or exceeds the positive threshold"
  },
  {
    "line": 200,
    "text": "                    long_selected = long_targets",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about closing a profitable position",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      34213,
      796,
      890,
      62,
      83,
      853,
      1039
    ],
    "start_token": 950,
    "end_token": 978,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      9605,
      257,
      17967,
      2292
    ],
    "label": "ml_signal",
    "reason": "Logging information about closing a profitable position"
  },
  {
    "line": 202,
    "text": "                    long_selected = long_selected & long_targets",
    "annotation": "\ud83e\udde0 ML Signal: Evaluating if profit_rate is less than or equal to the negative threshold",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      34213,
      796,
      890,
      62,
      34213,
      1222,
      890,
      62,
      83,
      853,
      1039
    ],
    "start_token": 978,
    "end_token": 1010,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26439,
      11927,
      611,
      7630,
      62,
      4873,
      318,
      1342,
      621,
      393,
      4961,
      284,
      262,
      4633,
      11387
    ],
    "label": "ml_signal",
    "reason": "Evaluating if profit_rate is less than or equal to the negative threshold"
  },
  {
    "line": 205,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about cutting a losing position",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1010,
    "end_token": 1010,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      7720,
      257,
      6078,
      2292
    ],
    "label": "ml_signal",
    "reason": "Logging information about cutting a losing position"
  },
  {
    "line": 203,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Method parameter usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1010,
    "end_token": 1023,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      11507,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method parameter usage pattern"
  },
  {
    "line": 207,
    "text": "            # short any",
    "annotation": "\u2705 Best Practice: Check for None before accessing attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1790,
      597
    ],
    "start_token": 1023,
    "end_token": 1037,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      878,
      22534,
      12608
    ],
    "label": "best_practice",
    "reason": "Check for None before accessing attributes"
  },
  {
    "line": 212,
    "text": "                else:",
    "annotation": "\u2705 Best Practice: Explicit None check",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1037,
    "end_token": 1054,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      6045,
      2198
    ],
    "label": "best_practice",
    "reason": "Explicit None check"
  },
  {
    "line": 215,
    "text": "        return long_selected, short_selected",
    "annotation": "\ud83e\udde0 ML Signal: Set operations usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      890,
      62,
      34213,
      11,
      1790,
      62,
      34213
    ],
    "start_token": 1054,
    "end_token": 1069,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5345,
      4560,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Set operations usage pattern"
  },
  {
    "line": 218,
    "text": "        return self.account_service.get_current_account()",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic calculation of position percentage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      23317,
      62,
      15271,
      13,
      1136,
      62,
      14421,
      62,
      23317,
      3419
    ],
    "start_token": 1069,
    "end_token": 1089,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      17952,
      286,
      2292,
      5873
    ],
    "label": "ml_signal",
    "reason": "Dynamic calculation of position percentage"
  },
  {
    "line": 218,
    "text": "        return self.account_service.get_current_account()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential timezone issues with timestamp conversion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      23317,
      62,
      15271,
      13,
      1136,
      62,
      14421,
      62,
      23317,
      3419
    ],
    "start_token": 1089,
    "end_token": 1109,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      11340,
      2428,
      351,
      41033,
      11315
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential timezone issues with timestamp conversion"
  },
  {
    "line": 226,
    "text": "        position_pct = 1.0",
    "annotation": "\ud83e\udde0 ML Signal: Trading signal creation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      352,
      13,
      15
    ],
    "start_token": 1109,
    "end_token": 1124,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25469,
      6737,
      6282,
      3912
    ],
    "label": "ml_signal",
    "reason": "Trading signal creation pattern"
  },
  {
    "line": 234,
    "text": "        # \u4e70\u5b8c",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      20046,
      108,
      22522,
      234
    ],
    "start_token": 1124,
    "end_token": 1137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      3912
    ],
    "label": "ml_signal",
    "reason": "Appending to a list pattern"
  },
  {
    "line": 234,
    "text": "        # \u4e70\u5b8c",
    "annotation": "\u2705 Best Practice: Using set intersection to find common elements is efficient and clear.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      20046,
      108,
      22522,
      234
    ],
    "start_token": 1137,
    "end_token": 1150,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      16246,
      284,
      1064,
      2219,
      4847,
      318,
      6942,
      290,
      1598,
      13
    ],
    "label": "best_practice",
    "reason": "Using set intersection to find common elements is efficient and clear."
  },
  {
    "line": 237,
    "text": "    def short_position_control(self):",
    "annotation": "\ud83e\udde0 ML Signal: The method short_position_control() could indicate a strategy or decision-making process.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1790,
      62,
      9150,
      62,
      13716,
      7,
      944,
      2599
    ],
    "start_token": 1150,
    "end_token": 1162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2446,
      1790,
      62,
      9150,
      62,
      13716,
      3419,
      714,
      7603,
      257,
      4811,
      393,
      2551,
      12,
      8601,
      1429,
      13
    ],
    "label": "ml_signal",
    "reason": "The method short_position_control() could indicate a strategy or decision-making process."
  },
  {
    "line": 239,
    "text": "        return 1.0",
    "annotation": "\u2705 Best Practice: Converting timestamp to pandas timestamp for consistency in time operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      352,
      13,
      15
    ],
    "start_token": 1162,
    "end_token": 1173,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      41033,
      284,
      19798,
      292,
      41033,
      329,
      15794,
      287,
      640,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Converting timestamp to pandas timestamp for consistency in time operations."
  },
  {
    "line": 239,
    "text": "        return 1.0",
    "annotation": "\ud83e\udde0 ML Signal: Creating a TradingSignal object could indicate a trading decision or action.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      352,
      13,
      15
    ],
    "start_token": 1173,
    "end_token": 1184,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      25469,
      11712,
      282,
      2134,
      714,
      7603,
      257,
      7313,
      2551,
      393,
      2223,
      13
    ],
    "label": "ml_signal",
    "reason": "Creating a TradingSignal object could indicate a trading decision or action."
  },
  {
    "line": 251,
    "text": "                        self.logger.info(f\"close profit {position.profit_rate} for {position.entity_id}\")",
    "annotation": "\ud83e\udde0 ML Signal: Appending to trading_signals list could indicate a record of actions or decisions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      19836,
      7630,
      1391,
      9150,
      13,
      9183,
      62,
      4873,
      92,
      329,
      1391,
      9150,
      13,
      26858,
      62,
      312,
      92,
      4943
    ],
    "start_token": 1184,
    "end_token": 1234,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      7313,
      62,
      12683,
      874,
      1351,
      714,
      7603,
      257,
      1700,
      286,
      4028,
      393,
      5370,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to trading_signals list could indicate a record of actions or decisions."
  },
  {
    "line": 250,
    "text": "                        close_long_entity_ids.append(position.entity_id)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a class attribute (self.draw_result) can indicate feature usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1969,
      62,
      6511,
      62,
      26858,
      62,
      2340,
      13,
      33295,
      7,
      9150,
      13,
      26858,
      62,
      312,
      8
    ],
    "start_token": 1234,
    "end_token": 1273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      1398,
      11688,
      357,
      944,
      13,
      19334,
      62,
      20274,
      8,
      460,
      7603,
      3895,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a class attribute (self.draw_result) can indicate feature usage patterns."
  },
  {
    "line": 252,
    "text": "                    # \u6b62\u635f",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating objects with specific parameters can indicate common usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      255,
      95,
      162,
      235,
      253
    ],
    "start_token": 1273,
    "end_token": 1299,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      5563,
      351,
      2176,
      10007,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiating objects with specific parameters can indicate common usage patterns."
  },
  {
    "line": 253,
    "text": "                    if position.profit_rate <= negative:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific attribute (data_df) of an object can indicate common usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2292,
      13,
      9183,
      62,
      4873,
      19841,
      4633,
      25
    ],
    "start_token": 1299,
    "end_token": 1327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      11688,
      357,
      7890,
      62,
      7568,
      8,
      286,
      281,
      2134,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific attribute (data_df) of an object can indicate common usage patterns."
  },
  {
    "line": 256,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating objects with specific parameters can indicate common usage patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1327,
    "end_token": 1327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      5563,
      351,
      2176,
      10007,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiating objects with specific parameters can indicate common usage patterns."
  },
  {
    "line": 257,
    "text": "            return close_long_entity_ids, None",
    "annotation": "\ud83e\udde0 ML Signal: Using specific DataFrame operations (e.g., copy, selection) can indicate common data manipulation patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1969,
      62,
      6511,
      62,
      26858,
      62,
      2340,
      11,
      6045
    ],
    "start_token": 1327,
    "end_token": 1348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      2176,
      6060,
      19778,
      4560,
      357,
      68,
      13,
      70,
      1539,
      4866,
      11,
      6356,
      8,
      460,
      7603,
      2219,
      1366,
      17512,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Using specific DataFrame operations (e.g., copy, selection) can indicate common data manipulation patterns."
  },
  {
    "line": 260,
    "text": "    def buy(self, timestamp, entity_ids, ignore_in_position=True):",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method with specific parameters (show=True) can indicate common usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2822,
      7,
      944,
      11,
      41033,
      11,
      9312,
      62,
      2340,
      11,
      8856,
      62,
      259,
      62,
      9150,
      28,
      17821,
      2599
    ],
    "start_token": 1348,
    "end_token": 1370,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      351,
      2176,
      10007,
      357,
      12860,
      28,
      17821,
      8,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling a method with specific parameters (show=True) can indicate common usage patterns."
  },
  {
    "line": 269,
    "text": "                ]",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for monitoring or debugging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 1370,
    "end_token": 1386,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9904,
      393,
      28769
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for monitoring or debugging"
  },
  {
    "line": 271,
    "text": "            entity_ids = set(entity_ids) - set(current_holdings)",
    "annotation": "\u2705 Best Practice: Limit the number of long targets to a maximum of 10 for manageability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      900,
      7,
      26858,
      62,
      2340,
      8,
      532,
      900,
      7,
      14421,
      62,
      2946,
      654,
      8
    ],
    "start_token": 1386,
    "end_token": 1415,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27272,
      262,
      1271,
      286,
      890,
      6670,
      284,
      257,
      5415,
      286,
      838,
      329,
      6687,
      1799
    ],
    "label": "best_practice",
    "reason": "Limit the number of long targets to a maximum of 10 for manageability"
  },
  {
    "line": 274,
    "text": "            position_pct = self.long_position_control()",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for monitoring or debugging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      2116,
      13,
      6511,
      62,
      9150,
      62,
      13716,
      3419
    ],
    "start_token": 1415,
    "end_token": 1439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9904,
      393,
      28769
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for monitoring or debugging"
  },
  {
    "line": 274,
    "text": "            position_pct = self.long_position_control()",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      2116,
      13,
      6511,
      62,
      9150,
      62,
      13716,
      3419
    ],
    "start_token": 1439,
    "end_token": 1463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 276,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper function to_time_str suggests a pattern of converting timestamps to strings",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1463,
    "end_token": 1463,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      2163,
      284,
      62,
      2435,
      62,
      2536,
      5644,
      257,
      3912,
      286,
      23202,
      4628,
      395,
      9430,
      284,
      13042
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper function to_time_str suggests a pattern of converting timestamps to strings"
  },
  {
    "line": 277,
    "text": "            due_timestamp = to_pd_timestamp(timestamp) + pd.Timedelta(seconds=self.level.to_second())",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if to_time_str does not handle invalid timestamps properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2233,
      62,
      16514,
      27823,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      8,
      1343,
      279,
      67,
      13,
      14967,
      276,
      12514,
      7,
      43012,
      28,
      944,
      13,
      5715,
      13,
      1462,
      62,
      12227,
      28955
    ],
    "start_token": 1463,
    "end_token": 1507,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      284,
      62,
      2435,
      62,
      2536,
      857,
      407,
      5412,
      12515,
      4628,
      395,
      9430,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if to_time_str does not handle invalid timestamps properly"
  },
  {
    "line": 281,
    "text": "                    due_timestamp=due_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2233,
      62,
      16514,
      27823,
      28,
      23301,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1507,
    "end_token": 1536,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 282,
    "text": "                    happen_timestamp=timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Method processes a list of trading signals, indicating a pattern of handling financial data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1645,
      62,
      16514,
      27823,
      28,
      16514,
      27823,
      11
    ],
    "start_token": 1536,
    "end_token": 1563,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      7767,
      257,
      1351,
      286,
      7313,
      10425,
      11,
      12739,
      257,
      3912,
      286,
      9041,
      3176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Method processes a list of trading signals, indicating a pattern of handling financial data."
  },
  {
    "line": 284,
    "text": "                    trading_level=self.level,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over listeners to propagate trading signals, indicating an event-driven architecture.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7313,
      62,
      5715,
      28,
      944,
      13,
      5715,
      11
    ],
    "start_token": 1563,
    "end_token": 1590,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22054,
      284,
      47933,
      7313,
      10425,
      11,
      12739,
      281,
      1785,
      12,
      15808,
      10959,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over listeners to propagate trading signals, indicating an event-driven architecture."
  },
  {
    "line": 286,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on listeners with trading signals, showing a pattern of event notification.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1590,
    "end_token": 1606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      22054,
      351,
      7313,
      10425,
      11,
      4478,
      257,
      3912,
      286,
      1785,
      14483,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling a method on listeners with trading signals, showing a pattern of event notification."
  },
  {
    "line": 288,
    "text": "",
    "annotation": "\u2705 Best Practice: Resetting the trading signals list after processing to avoid stale data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1606,
    "end_token": 1606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      262,
      7313,
      10425,
      1351,
      706,
      7587,
      284,
      3368,
      39985,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting the trading signals list after processing to avoid stale data."
  },
  {
    "line": 286,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of listeners to trigger an event",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1606,
    "end_token": 1622,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      22054,
      284,
      7616,
      281,
      1785
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of listeners to trigger an event"
  },
  {
    "line": 288,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Notifying multiple listeners about an event",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1622,
    "end_token": 1622,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1892,
      4035,
      3294,
      22054,
      546,
      281,
      1785
    ],
    "label": "ml_signal",
    "reason": "Notifying multiple listeners about an event"
  },
  {
    "line": 290,
    "text": "        # current position",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1459,
      2292
    ],
    "start_token": 1622,
    "end_token": 1632,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 289,
    "text": "    def sell(self, timestamp, entity_ids):",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests event-driven architecture, useful for ML models predicting event handling patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3677,
      7,
      944,
      11,
      41033,
      11,
      9312,
      62,
      2340,
      2599
    ],
    "start_token": 1632,
    "end_token": 1646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      1785,
      12,
      15808,
      10959,
      11,
      4465,
      329,
      10373,
      4981,
      25539,
      1785,
      9041,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method name suggests event-driven architecture, useful for ML models predicting event handling patterns"
  },
  {
    "line": 291,
    "text": "        account = self.get_current_account()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over listeners indicates observer pattern, useful for ML models learning about design patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1848,
      796,
      2116,
      13,
      1136,
      62,
      14421,
      62,
      23317,
      3419
    ],
    "start_token": 1646,
    "end_token": 1663,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22054,
      9217,
      22890,
      3912,
      11,
      4465,
      329,
      10373,
      4981,
      4673,
      546,
      1486,
      7572
    ],
    "label": "ml_signal",
    "reason": "Iterating over listeners indicates observer pattern, useful for ML models learning about design patterns"
  },
  {
    "line": 293,
    "text": "        if account.positions:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for exceptions if 'l' does not have 'on_trading_close' method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1848,
      13,
      1930,
      1756,
      25
    ],
    "start_token": 1663,
    "end_token": 1676,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      13269,
      611,
      705,
      75,
      6,
      857,
      407,
      423,
      705,
      261,
      62,
      2213,
      4980,
      62,
      19836,
      6,
      2446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for exceptions if 'l' does not have 'on_trading_close' method"
  },
  {
    "line": 294,
    "text": "            current_holdings = [",
    "annotation": "\ud83e\udde0 ML Signal: Method call on listener object, useful for ML models predicting method invocation patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      2946,
      654,
      796,
      685
    ],
    "start_token": 1676,
    "end_token": 1693,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      24783,
      2134,
      11,
      4465,
      329,
      10373,
      4981,
      25539,
      2446,
      43219,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method call on listener object, useful for ML models predicting method invocation patterns"
  },
  {
    "line": 292,
    "text": "        current_holdings = []",
    "annotation": "\u2705 Best Practice: Method name suggests it is an event handler, which improves readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      2946,
      654,
      796,
      17635
    ],
    "start_token": 1693,
    "end_token": 1706,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      5644,
      340,
      318,
      281,
      1785,
      21360,
      11,
      543,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Method name suggests it is an event handler, which improves readability and maintainability"
  },
  {
    "line": 294,
    "text": "            current_holdings = [",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of listeners is a common pattern in event-driven architectures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      2946,
      654,
      796,
      685
    ],
    "start_token": 1706,
    "end_token": 1723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      22054,
      318,
      257,
      2219,
      3912,
      287,
      1785,
      12,
      15808,
      45619
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of listeners is a common pattern in event-driven architectures"
  },
  {
    "line": 296,
    "text": "            ]",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on each listener object, indicating a publish-subscribe pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 1723,
    "end_token": 1735,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      1123,
      24783,
      2134,
      11,
      12739,
      257,
      7715,
      12,
      7266,
      12522,
      3912
    ],
    "label": "ml_signal",
    "reason": "Calling a method on each listener object, indicating a publish-subscribe pattern"
  },
  {
    "line": 295,
    "text": "                position.entity_id for position in account.positions if position != None and position.available_long > 0",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of listeners to propagate an event",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      13,
      26858,
      62,
      312,
      329,
      2292,
      287,
      1848,
      13,
      1930,
      1756,
      611,
      2292,
      14512,
      6045,
      290,
      2292,
      13,
      15182,
      62,
      6511,
      1875,
      657
    ],
    "start_token": 1735,
    "end_token": 1774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      22054,
      284,
      47933,
      281,
      1785
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of listeners to propagate an event"
  },
  {
    "line": 297,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Propagating an error event to multiple listeners",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1774,
    "end_token": 1774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8772,
      363,
      803,
      281,
      4049,
      1785,
      284,
      3294,
      22054
    ],
    "label": "ml_signal",
    "reason": "Propagating an error event to multiple listeners"
  },
  {
    "line": 299,
    "text": "",
    "annotation": "\u2705 Best Practice: Using descriptive variable names improves readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1774,
    "end_token": 1774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names improves readability"
  },
  {
    "line": 298,
    "text": "        shorted = set(current_holdings) & set(entity_ids)",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1790,
      276,
      796,
      900,
      7,
      14421,
      62,
      2946,
      654,
      8,
      1222,
      900,
      7,
      26858,
      62,
      2340,
      8
    ],
    "start_token": 1774,
    "end_token": 1798,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 300,
    "text": "        if shorted:",
    "annotation": "\ud83e\udde0 ML Signal: Logging with timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1790,
      276,
      25
    ],
    "start_token": 1798,
    "end_token": 1809,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      351,
      41033
    ],
    "label": "ml_signal",
    "reason": "Logging with timestamp"
  },
  {
    "line": 301,
    "text": "            position_pct = self.short_position_control()",
    "annotation": "\u2705 Best Practice: Use of f-string for logging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      796,
      2116,
      13,
      19509,
      62,
      9150,
      62,
      13716,
      3419
    ],
    "start_token": 1809,
    "end_token": 1833,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      18931
    ],
    "label": "best_practice",
    "reason": "Use of f-string for logging"
  },
  {
    "line": 300,
    "text": "        if shorted:",
    "annotation": "\ud83e\udde0 ML Signal: Method for filtering data based on a specific attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1790,
      276,
      25
    ],
    "start_token": 1833,
    "end_token": 1844,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      25431,
      1366,
      1912,
      319,
      257,
      2176,
      11688
    ],
    "label": "ml_signal",
    "reason": "Method for filtering data based on a specific attribute"
  },
  {
    "line": 302,
    "text": "",
    "annotation": "\u2705 Best Practice: List comprehension for concise and readable filtering",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1844,
    "end_token": 1844,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      329,
      35327,
      290,
      31744,
      25431
    ],
    "label": "best_practice",
    "reason": "List comprehension for concise and readable filtering"
  },
  {
    "line": 307,
    "text": "                    due_timestamp=due_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over trading levels to handle factor targets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2233,
      62,
      16514,
      27823,
      28,
      23301,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1844,
    "end_token": 1873,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      7313,
      2974,
      284,
      5412,
      5766,
      6670
    ],
    "label": "ml_signal",
    "reason": "Iterating over trading levels to handle factor targets"
  },
  {
    "line": 309,
    "text": "                    trading_signal_type=TradingSignalType.close_long,",
    "annotation": "\ud83e\udde0 ML Signal: Logging the current level being processed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7313,
      62,
      12683,
      282,
      62,
      4906,
      28,
      2898,
      4980,
      11712,
      282,
      6030,
      13,
      19836,
      62,
      6511,
      11
    ],
    "start_token": 1873,
    "end_token": 1909,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      1459,
      1241,
      852,
      13686
    ],
    "label": "ml_signal",
    "reason": "Logging the current level being processed"
  },
  {
    "line": 311,
    "text": "                    position_pct=position_pct,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information exposure through logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      62,
      79,
      310,
      28,
      9150,
      62,
      79,
      310,
      11
    ],
    "start_token": 1909,
    "end_token": 1938,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      7111,
      832,
      18931
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information exposure through logging"
  },
  {
    "line": 315,
    "text": "    def on_finish(self, timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving factors by level",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      15643,
      680,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 1938,
    "end_token": 1951,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      5087,
      416,
      1241
    ],
    "label": "ml_signal",
    "reason": "Retrieving factors by level"
  },
  {
    "line": 317,
    "text": "        # show the result",
    "annotation": "\ud83e\udde0 ML Signal: Getting long and short targets for a factor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      905,
      262,
      1255
    ],
    "start_token": 1951,
    "end_token": 1962,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18067,
      890,
      290,
      1790,
      6670,
      329,
      257,
      5766
    ],
    "label": "ml_signal",
    "reason": "Getting long and short targets for a factor"
  },
  {
    "line": 324,
    "text": "            drawer.draw_line(show=True)",
    "annotation": "\ud83e\udde0 ML Signal: Filtering factor targets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33451,
      13,
      19334,
      62,
      1370,
      7,
      12860,
      28,
      17821,
      8
    ],
    "start_token": 1962,
    "end_token": 1983,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      5766,
      6670
    ],
    "label": "ml_signal",
    "reason": "Filtering factor targets"
  },
  {
    "line": 330,
    "text": "        overwrite it to filter the targets from factor",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating long targets",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49312,
      340,
      284,
      8106,
      262,
      6670,
      422,
      5766
    ],
    "start_token": 1983,
    "end_token": 1998,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      890,
      6670
    ],
    "label": "ml_signal",
    "reason": "Accumulating long targets"
  },
  {
    "line": 334,
    "text": "        :param factor: the factor",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating short targets",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      5766,
      25,
      262,
      5766
    ],
    "start_token": 1998,
    "end_token": 2011,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      1790,
      6670
    ],
    "label": "ml_signal",
    "reason": "Accumulating short targets"
  },
  {
    "line": 336,
    "text": "        :param short_targets: the short targets from the factor",
    "annotation": "\ud83e\udde0 ML Signal: Updating targets by level",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1790,
      62,
      83,
      853,
      1039,
      25,
      262,
      1790,
      6670,
      422,
      262,
      5766
    ],
    "start_token": 2011,
    "end_token": 2032,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      6670,
      416,
      1241
    ],
    "label": "ml_signal",
    "reason": "Updating targets by level"
  },
  {
    "line": 330,
    "text": "        overwrite it to filter the targets from factor",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over timestamps to perform actions based on conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49312,
      340,
      284,
      8106,
      262,
      6670,
      422,
      5766
    ],
    "start_token": 2032,
    "end_token": 2047,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4628,
      395,
      9430,
      284,
      1620,
      4028,
      1912,
      319,
      3403
    ],
    "label": "ml_signal",
    "reason": "Iterating over timestamps to perform actions based on conditions"
  },
  {
    "line": 334,
    "text": "        :param factor: the factor",
    "annotation": "\u2705 Best Practice: Consistent logging format for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      5766,
      25,
      262,
      5766
    ],
    "start_token": 2047,
    "end_token": 2060,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3515,
      7609,
      18931,
      5794,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Consistent logging format for better readability"
  },
  {
    "line": 336,
    "text": "        :param short_targets: the short targets from the factor",
    "annotation": "\ud83e\udde0 ML Signal: Initializing entities based on timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1790,
      62,
      83,
      853,
      1039,
      25,
      262,
      1790,
      6670,
      422,
      262,
      5766
    ],
    "start_token": 2060,
    "end_token": 2081,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      12066,
      1912,
      319,
      41033
    ],
    "label": "ml_signal",
    "reason": "Initializing entities based on timestamp"
  },
  {
    "line": 338,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Logging current state of entities",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2081,
    "end_token": 2089,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      1459,
      1181,
      286,
      12066
    ],
    "label": "best_practice",
    "reason": "Logging current state of entities"
  },
  {
    "line": 339,
    "text": "        self.logger.info(f\"on_targets_filtered {level} long:{long_targets}\")",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for trading date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      261,
      62,
      83,
      853,
      1039,
      62,
      10379,
      4400,
      1391,
      5715,
      92,
      890,
      29164,
      6511,
      62,
      83,
      853,
      1039,
      92,
      4943
    ],
    "start_token": 2089,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      7313,
      3128
    ],
    "label": "ml_signal",
    "reason": "Conditional check for trading date"
  },
  {
    "line": 344,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling different levels of intervals",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2125,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1180,
      2974,
      286,
      20016
    ],
    "label": "ml_signal",
    "reason": "Handling different levels of intervals"
  },
  {
    "line": 349,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Processing trading signals",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2125,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28403,
      7313,
      10425
    ],
    "label": "ml_signal",
    "reason": "Processing trading signals"
  },
  {
    "line": 351,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Logging trading signals for traceability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2125,
    "end_token": 2133,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      7313,
      10425,
      329,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Logging trading signals for traceability"
  },
  {
    "line": 356,
    "text": "        self.logger.debug(f\"current timestamp:{timestamp}\")",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over factors to add entities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      24442,
      7,
      69,
      1,
      14421,
      41033,
      29164,
      16514,
      27823,
      92,
      4943
    ],
    "start_token": 2133,
    "end_token": 2156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5087,
      284,
      751,
      12066
    ],
    "label": "ml_signal",
    "reason": "Iterating over factors to add entities"
  },
  {
    "line": 360,
    "text": "            l.on_trading_signals(trading_signals)",
    "annotation": "\ud83e\udde0 ML Signal: Handling specific level conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      300,
      13,
      261,
      62,
      2213,
      4980,
      62,
      12683,
      874,
      7,
      2213,
      4980,
      62,
      12683,
      874,
      8
    ],
    "start_token": 2156,
    "end_token": 2183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      2176,
      1241,
      3403
    ],
    "label": "ml_signal",
    "reason": "Handling specific level conditions"
  },
  {
    "line": 364,
    "text": "    def on_trading_open(self, timestamp):",
    "annotation": "\u2705 Best Practice: Logging current time in a loop",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2213,
      4980,
      62,
      9654,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 2183,
    "end_token": 2198,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      1459,
      640,
      287,
      257,
      9052
    ],
    "label": "best_practice",
    "reason": "Logging current time in a loop"
  },
  {
    "line": 378,
    "text": "            l.on_trading_error(timestamp, error)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional waiting based on calculated seconds",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      300,
      13,
      261,
      62,
      2213,
      4980,
      62,
      18224,
      7,
      16514,
      27823,
      11,
      4049,
      8
    ],
    "start_token": 2198,
    "end_token": 2223,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      4953,
      1912,
      319,
      10488,
      4201
    ],
    "label": "ml_signal",
    "reason": "Conditional waiting based on calculated seconds"
  },
  {
    "line": 385,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling factors if present",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2223,
    "end_token": 2223,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      5087,
      611,
      1944
    ],
    "label": "ml_signal",
    "reason": "Handling factors if present"
  },
  {
    "line": 390,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Selecting targets based on levels",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2223,
    "end_token": 2231,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      278,
      6670,
      1912,
      319,
      2974
    ],
    "label": "ml_signal",
    "reason": "Selecting targets based on levels"
  },
  {
    "line": 392,
    "text": "        # \u66f4\u7ec6\u8282\u7684\u63a7\u5236\u53ef\u4ee5\u5728on_targets_filtered\u91cc\u8fdb\u4e00\u6b65\u5904\u7406",
    "annotation": "\ud83e\udde0 ML Signal: Adjusting short selections based on passive short",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      249,
      112,
      163,
      119,
      228,
      164,
      232,
      224,
      21410,
      162,
      236,
      100,
      26344,
      114,
      20998,
      107,
      20015,
      98,
      28839,
      101,
      261,
      62,
      83,
      853,
      1039,
      62,
      10379,
      4400,
      34932,
      234,
      32573,
      249,
      31660,
      29826,
      98,
      13783,
      226,
      49426,
      228
    ],
    "start_token": 2231,
    "end_token": 2279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      278,
      1790,
      28224,
      1912,
      319,
      14513,
      1790
    ],
    "label": "ml_signal",
    "reason": "Adjusting short selections based on passive short"
  },
  {
    "line": 398,
    "text": "        for level in self.trading_level_asc:",
    "annotation": "\ud83e\udde0 ML Signal: Executing sell actions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1241,
      287,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      62,
      3372,
      25
    ],
    "start_token": 2279,
    "end_token": 2298,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8393,
      15129,
      3677,
      4028
    ],
    "label": "ml_signal",
    "reason": "Executing sell actions"
  },
  {
    "line": 401,
    "text": "            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):",
    "annotation": "\ud83e\udde0 ML Signal: Executing buy actions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      26858,
      62,
      15952,
      2611,
      13,
      271,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      28,
      16514,
      27823,
      11,
      1241,
      28,
      5715,
      2599
    ],
    "start_token": 2298,
    "end_token": 2337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8393,
      15129,
      2822,
      4028
    ],
    "label": "ml_signal",
    "reason": "Executing buy actions"
  },
  {
    "line": 401,
    "text": "            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):",
    "annotation": "\ud83e\udde0 ML Signal: Handling trading close conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      26858,
      62,
      15952,
      2611,
      13,
      271,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      28,
      16514,
      27823,
      11,
      1241,
      28,
      5715,
      2599
    ],
    "start_token": 2337,
    "end_token": 2376,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      7313,
      1969,
      3403
    ],
    "label": "ml_signal",
    "reason": "Handling trading close conditions"
  },
  {
    "line": 401,
    "text": "            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):",
    "annotation": "\u2705 Best Practice: Consistent logging format for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      26858,
      62,
      15952,
      2611,
      13,
      271,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      28,
      16514,
      27823,
      11,
      1241,
      28,
      5715,
      2599
    ],
    "start_token": 2376,
    "end_token": 2415,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3515,
      7609,
      18931,
      5794,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Consistent logging format for better readability"
  },
  {
    "line": 411,
    "text": "                    if long_targets or short_targets:",
    "annotation": "\ud83e\udde0 ML Signal: Finalizing process with on_finish",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      890,
      62,
      83,
      853,
      1039,
      393,
      1790,
      62,
      83,
      853,
      1039,
      25
    ],
    "start_token": 2415,
    "end_token": 2447,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8125,
      2890,
      1429,
      351,
      319,
      62,
      15643,
      680
    ],
    "label": "ml_signal",
    "reason": "Finalizing process with on_finish"
  },
  {
    "line": 393,
    "text": "        # \u4e5f\u53ef\u4ee5\u5728on_time\u91cc\u9762\u8bbe\u8ba1\u4e00\u4e9b\u81ea\u5df1\u7684\u903b\u8f91\u914d\u5408\u8fc7\u6ee4",
    "annotation": "\ud83e\udde0 ML Signal: Method for registering event listeners, indicating an observer pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      20046,
      253,
      20998,
      107,
      20015,
      98,
      28839,
      101,
      261,
      62,
      2435,
      34932,
      234,
      165,
      251,
      95,
      164,
      106,
      122,
      164,
      106,
      94,
      31660,
      12859,
      249,
      164,
      229,
      103,
      32432,
      109,
      21410,
      34460,
      119,
      164,
      122,
      239,
      165,
      227,
      235,
      28938,
      230,
      32573,
      229,
      162,
      119,
      97
    ],
    "start_token": 2447,
    "end_token": 2502,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      28336,
      1785,
      22054,
      11,
      12739,
      281,
      22890,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method for registering event listeners, indicating an observer pattern"
  },
  {
    "line": 395,
    "text": "        # 1)\u8ba1\u7b97\u5404\u7ea7\u522b\u7684 \u6807\u7684\uff0c\u901a\u8fc7 on_factor_targets_filtered \u8fc7\u6ee4\uff0c\u7f13\u5b58\u5728level_map_long_targets\uff0clevel_map_short_targets",
    "annotation": "\u2705 Best Practice: Check if listener is already registered to avoid duplicates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      352,
      8,
      164,
      106,
      94,
      163,
      106,
      245,
      28938,
      226,
      163,
      118,
      100,
      26344,
      104,
      21410,
      10545,
      254,
      229,
      21410,
      171,
      120,
      234,
      34460,
      248,
      32573,
      229,
      319,
      62,
      31412,
      62,
      83,
      853,
      1039,
      62,
      10379,
      4400,
      5525,
      123,
      229,
      162,
      119,
      97,
      171,
      120,
      234,
      163,
      120,
      241,
      27764,
      246,
      28839,
      101,
      5715,
      62,
      8899,
      62,
      6511,
      62,
      83,
      853,
      1039,
      171,
      120,
      234,
      5715,
      62,
      8899,
      62,
      19509,
      62,
      83,
      853,
      1039
    ],
    "start_token": 2502,
    "end_token": 2584,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      24783,
      318,
      1541,
      6823,
      284,
      3368,
      14184,
      16856
    ],
    "label": "best_practice",
    "reason": "Check if listener is already registered to avoid duplicates"
  },
  {
    "line": 397,
    "text": "        # \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5c0f\u7ea7\u522b\u62ff\u5230\u4e0a\u4e00\u4e2a\u5468\u671f\u7684\u5927\u7ea7\u522b\u7684\u6807\u7684\uff0c\u8fd9\u662f\u5408\u7406\u7684",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list, common operation for managing collections",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      123,
      247,
      34932,
      234,
      165,
      250,
      222,
      17358,
      223,
      37345,
      101,
      35707,
      237,
      21410,
      42468,
      171,
      120,
      234,
      22887,
      237,
      163,
      118,
      100,
      26344,
      104,
      162,
      233,
      123,
      26344,
      108,
      41468,
      31660,
      10310,
      103,
      37772,
      101,
      17312,
      253,
      21410,
      32014,
      163,
      118,
      100,
      26344,
      104,
      21410,
      43718,
      229,
      21410,
      171,
      120,
      234,
      32573,
      247,
      42468,
      28938,
      230,
      49426,
      228,
      21410
    ],
    "start_token": 2584,
    "end_token": 2653,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      11,
      2219,
      4905,
      329,
      11149,
      17268
    ],
    "label": "ml_signal",
    "reason": "Appending to a list, common operation for managing collections"
  },
  {
    "line": 397,
    "text": "        # \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5c0f\u7ea7\u522b\u62ff\u5230\u4e0a\u4e00\u4e2a\u5468\u671f\u7684\u5927\u7ea7\u522b\u7684\u6807\u7684\uff0c\u8fd9\u662f\u5408\u7406\u7684",
    "annotation": "\ud83e\udde0 ML Signal: Checks for membership before removal, indicating a pattern of safe list operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      123,
      247,
      34932,
      234,
      165,
      250,
      222,
      17358,
      223,
      37345,
      101,
      35707,
      237,
      21410,
      42468,
      171,
      120,
      234,
      22887,
      237,
      163,
      118,
      100,
      26344,
      104,
      162,
      233,
      123,
      26344,
      108,
      41468,
      31660,
      10310,
      103,
      37772,
      101,
      17312,
      253,
      21410,
      32014,
      163,
      118,
      100,
      26344,
      104,
      21410,
      43718,
      229,
      21410,
      171,
      120,
      234,
      32573,
      247,
      42468,
      28938,
      230,
      49426,
      228,
      21410
    ],
    "start_token": 2653,
    "end_token": 2722,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      9931,
      878,
      9934,
      11,
      12739,
      257,
      3912,
      286,
      3338,
      1351,
      4560
    ],
    "label": "ml_signal",
    "reason": "Checks for membership before removal, indicating a pattern of safe list operations"
  },
  {
    "line": 399,
    "text": "            self.logger.info(f\"level: {level}\")",
    "annotation": "\u2705 Best Practice: Using list's remove method ensures only existing elements are removed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      5715,
      25,
      1391,
      5715,
      92,
      4943
    ],
    "start_token": 2722,
    "end_token": 2748,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      338,
      4781,
      2446,
      19047,
      691,
      4683,
      4847,
      389,
      4615
    ],
    "label": "best_practice",
    "reason": "Using list's remove method ensures only existing elements are removed"
  },
  {
    "line": 399,
    "text": "            self.logger.info(f\"level: {level}\")",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring to describe its purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      5715,
      25,
      1391,
      5715,
      92,
      4943
    ],
    "start_token": 2748,
    "end_token": 2774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring to describe its purpose and usage."
  },
  {
    "line": 401,
    "text": "            if self.entity_schema.is_finished_kdata_timestamp(timestamp=timestamp, level=level):",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      26858,
      62,
      15952,
      2611,
      13,
      271,
      62,
      43952,
      62,
      74,
      7890,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      28,
      16514,
      27823,
      11,
      1241,
      28,
      5715,
      2599
    ],
    "start_token": 2774,
    "end_token": 2813,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose."
  },
  {
    "line": 419,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2813,
    "end_token": 2813,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass's __init__ method ensures proper initialization."
  },
  {
    "line": 436,
    "text": "            self.entity_ids = self.init_entities(timestamp=timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26858,
      62,
      2340,
      796,
      2116,
      13,
      15003,
      62,
      298,
      871,
      7,
      16514,
      27823,
      28,
      16514,
      27823,
      8
    ],
    "start_token": 2813,
    "end_token": 2843,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to define public API of the module"
  }
]
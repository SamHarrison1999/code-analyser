annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping related imports together improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,0,best_practice,3,Grouping related imports together improves readability and maintainability.,,0,,[]
üß† ML Signal: Function definition with parameters indicating a database operation,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 6831, 4905]",0.5,12,ml_signal,9,Function definition with parameters indicating a database operation,,0,from zvt.contract.normal_data import NormalData,"[6738, 1976, 36540, 13, 28484, 13, 11265, 62, 7890, 1330, 14435, 6601]"
üß† ML Signal: Conditional logic to handle optional parameters,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 11902, 10007]",0.5,35,ml_signal,11,Conditional logic to handle optional parameters,,12,"from zvt.trader.trader_schemas import AccountStats, Order, TraderInfo, Position","[6738, 1976, 36540, 13, 2213, 5067, 13, 2213, 5067, 62, 1416, 4411, 292, 1330, 10781, 29668, 11, 8284, 11, 41956, 12360, 11, 23158]"
‚ö†Ô∏è SAST Risk (Medium): Potential for using a default database session without explicit user control,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 1262, 257, 4277, 6831, 6246, 1231, 7952, 2836, 1630]",0.5,35,sast_risk,13,Potential for using a default database session without explicit user control,Medium,35,,[]
‚ö†Ô∏è SAST Risk (Low): Direct deletion from the database without logging or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 39948, 422, 262, 6831, 1231, 18931, 393, 12641]",0.5,42,sast_risk,15,Direct deletion from the database without logging or confirmation,Low,35,    if not session:,"[220, 220, 220, 611, 407, 6246, 25]"
‚ö†Ô∏è SAST Risk (Low): Direct deletion from the database without logging or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 39948, 422, 262, 6831, 1231, 18931, 393, 12641]",0.5,70,sast_risk,17,Direct deletion from the database without logging or confirmation,Low,42,    session.query(TraderInfo).filter(TraderInfo.trader_name == trader_name).delete(),"[220, 220, 220, 6246, 13, 22766, 7, 2898, 5067, 12360, 737, 24455, 7, 2898, 5067, 12360, 13, 2213, 5067, 62, 3672, 6624, 31791, 62, 3672, 737, 33678, 3419]"
‚ö†Ô∏è SAST Risk (Low): Direct deletion from the database without logging or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 39948, 422, 262, 6831, 1231, 18931, 393, 12641]",0.5,98,sast_risk,17,Direct deletion from the database without logging or confirmation,Low,70,    session.query(TraderInfo).filter(TraderInfo.trader_name == trader_name).delete(),"[220, 220, 220, 6246, 13, 22766, 7, 2898, 5067, 12360, 737, 24455, 7, 2898, 5067, 12360, 13, 2213, 5067, 62, 3672, 6624, 31791, 62, 3672, 737, 33678, 3419]"
‚ö†Ô∏è SAST Risk (Low): Direct deletion from the database without logging or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 39948, 422, 262, 6831, 1231, 18931, 393, 12641]",0.5,126,sast_risk,17,Direct deletion from the database without logging or confirmation,Low,98,    session.query(TraderInfo).filter(TraderInfo.trader_name == trader_name).delete(),"[220, 220, 220, 6246, 13, 22766, 7, 2898, 5067, 12360, 737, 24455, 7, 2898, 5067, 12360, 13, 2213, 5067, 62, 3672, 6624, 31791, 62, 3672, 737, 33678, 3419]"
‚úÖ Best Practice: Ensure changes are committed to the database,"[26486, 227, 6705, 19939, 25, 48987, 2458, 389, 5364, 284, 262, 6831]",0.5,126,best_practice,23,Ensure changes are committed to the database,,126,,[]
üß† ML Signal: Function signature with multiple optional parameters indicates flexibility in usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 3294, 11902, 10007, 9217, 13688, 287, 8748, 7572, 13]",0.5,154,ml_signal,17,Function signature with multiple optional parameters indicates flexibility in usage patterns.,,126,    session.query(TraderInfo).filter(TraderInfo.trader_name == trader_name).delete(),"[220, 220, 220, 6246, 13, 22766, 7, 2898, 5067, 12360, 737, 24455, 7, 2898, 5067, 12360, 13, 2213, 5067, 62, 3672, 6624, 31791, 62, 3672, 737, 33678, 3419]"
‚úÖ Best Practice: Check if trader_name is provided to conditionally modify filters.,"[26486, 227, 6705, 19939, 25, 6822, 611, 31791, 62, 3672, 318, 2810, 284, 4006, 453, 13096, 16628, 13]",0.5,164,best_practice,28,Check if trader_name is provided to conditionally modify filters.,,154,"    end_timestamp=None,","[220, 220, 220, 886, 62, 16514, 27823, 28, 14202, 11]"
‚úÖ Best Practice: Concatenating filters with additional condition if filters exist.,"[26486, 227, 6705, 19939, 25, 1482, 9246, 268, 803, 16628, 351, 3224, 4006, 611, 16628, 2152, 13]",0.5,171,best_practice,29,Concatenating filters with additional condition if filters exist.,,164,"    filters=None,","[220, 220, 220, 16628, 28, 14202, 11]"
‚úÖ Best Practice: Initialize filters with a condition if filters are not provided.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 16628, 351, 257, 4006, 611, 16628, 389, 407, 2810, 13]",0.5,178,best_practice,32,Initialize filters with a condition if filters are not provided.,,171,"    limit=None,","[220, 220, 220, 4179, 28, 14202, 11]"
üß† ML Signal: Function call with multiple parameters shows complex data retrieval pattern.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 2523, 3716, 1366, 45069, 3912, 13]",0.5,185,ml_signal,32,Function call with multiple parameters shows complex data retrieval pattern.,,178,"    limit=None,","[220, 220, 220, 4179, 28, 14202, 11]"
üß† ML Signal: Function definition with a specific parameter can indicate usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 11507, 460, 7603, 8748, 7572]",1.0,200,ml_signal,47,Function definition with a specific parameter can indicate usage patterns,,185,"        return_type=return_type,","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 28, 7783, 62, 4906, 11]"
üß† ML Signal: Database session retrieval with specific provider and schema,"[8582, 100, 254, 10373, 26484, 25, 24047, 6246, 45069, 351, 2176, 10131, 290, 32815]",1.0,217,ml_signal,48,Database session retrieval with specific provider and schema,,200,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of database schema details,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 6831, 32815, 3307]",0.5,234,sast_risk,48,Potential exposure of database schema details,Low,217,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
üß† ML Signal: Querying a database with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 257, 6831, 351, 2176, 16628]",1.0,234,ml_signal,55,Querying a database with specific filters,,234,,[]
‚ö†Ô∏è SAST Risk (Low): SQL Injection risk if trader_name is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 16363, 554, 29192, 2526, 611, 31791, 62, 3672, 318, 407, 6105, 5336, 36951]",0.5,234,sast_risk,55,SQL Injection risk if trader_name is not properly sanitized,Low,234,,[]
üß† ML Signal: Grouping query results by a specific field,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 12405, 2482, 416, 257, 2176, 2214]",0.5,247,ml_signal,57,Grouping query results by a specific field,,234,def get_order_securities(trader_name):,"[4299, 651, 62, 2875, 62, 2363, 10886, 7, 2213, 5067, 62, 3672, 2599]"
üß† ML Signal: Retrieving all results from a query,"[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 477, 2482, 422, 257, 12405]",1.0,260,ml_signal,57,Retrieving all results from a query,,247,def get_order_securities(trader_name):,"[4299, 651, 62, 2875, 62, 2363, 10886, 7, 2213, 5067, 62, 3672, 2599]"
‚úÖ Best Practice: List comprehension for transforming query results,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 25449, 12405, 2482]",1.0,273,best_practice,57,List comprehension for transforming query results,,260,def get_order_securities(trader_name):,"[4299, 651, 62, 2875, 62, 2363, 10886, 7, 2213, 5067, 62, 3672, 2599]"
‚úÖ Best Practice: Initialize instance variables in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772]",1.0,273,best_practice,67,Initialize instance variables in the constructor,,273,,[]
‚úÖ Best Practice: Initialize instance variables in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772]",1.0,281,best_practice,69,Initialize instance variables in the constructor,,273,class AccountStatsReader(DataReader):,"[4871, 10781, 29668, 33634, 7, 6601, 33634, 2599]"
üß† ML Signal: Conditional logic based on the presence of trader_names,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 31791, 62, 14933]",1.0,290,ml_signal,71,Conditional logic based on the presence of trader_names,,281,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: List comprehension usage,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 8748]",0.5,315,ml_signal,72,List comprehension usage,,290,"        start_timestamp: Union[str, pd.Timestamp] = None,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 25, 4479, 58, 2536, 11, 279, 67, 13, 14967, 27823, 60, 796, 6045, 11]"
üß† ML Signal: Conditional logic to modify filters,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 13096, 16628]",0.5,328,ml_signal,75,Conditional logic to modify filters,,315,"        filters: List = None,","[220, 220, 220, 220, 220, 220, 220, 16628, 25, 7343, 796, 6045, 11]"
‚úÖ Best Practice: Use in-place list addition for clarity,"[26486, 227, 6705, 19939, 25, 5765, 287, 12, 5372, 1351, 3090, 329, 16287]",0.5,341,best_practice,75,Use in-place list addition for clarity,,328,"        filters: List = None,","[220, 220, 220, 220, 220, 220, 220, 16628, 25, 7343, 796, 6045, 11]"
‚úÖ Best Practice: Initialize filters if not present,"[26486, 227, 6705, 19939, 25, 20768, 1096, 16628, 611, 407, 1944]",0.5,354,best_practice,75,Initialize filters if not present,,341,"        filters: List = None,","[220, 220, 220, 220, 220, 220, 220, 16628, 25, 7343, 796, 6045, 11]"
‚úÖ Best Practice: Call to superclass constructor,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 23772]",0.5,367,best_practice,75,Call to superclass constructor,,354,"        filters: List = None,","[220, 220, 220, 220, 220, 220, 220, 16628, 25, 7343, 796, 6045, 11]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",1.0,380,best_practice,94,Consider adding a docstring to describe the purpose and usage of the function,,367,"            None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 11]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799]",0.5,393,best_practice,95,Use of descriptive variable names improves code readability,,380,"            None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 11]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799]",0.5,406,best_practice,100,Use of descriptive variable names improves code readability,,393,"            columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 11]"
‚úÖ Best Practice: Use of copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 4866, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",0.5,419,best_practice,100,Use of copy() to avoid modifying the original DataFrame,,406,"            columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 11]"
"üß† ML Signal: The use of a method parameter to control behavior (e.g., show) is a common pattern","[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 257, 2446, 11507, 284, 1630, 4069, 357, 68, 13, 70, 1539, 905, 8, 318, 257, 2219, 3912]",0.5,432,ml_signal,102,"The use of a method parameter to control behavior (e.g., show) is a common pattern",,419,"            order,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 11]"
‚úÖ Best Practice: Class definition should inherit from a base class to promote code reuse and maintainability.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 16955, 422, 257, 2779, 1398, 284, 7719, 2438, 32349, 290, 5529, 1799, 13]",0.5,445,best_practice,102,Class definition should inherit from a base class to promote code reuse and maintainability.,,432,"            order,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 11]"
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799, 13]",1.0,463,best_practice,112,Initialize instance variables in the constructor for clarity and maintainability.,,445,            main_data=NormalData(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 7890, 28, 26447, 6601, 7]"
‚úÖ Best Practice: Use list comprehensions for concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 35327, 290, 31744, 2438, 13]",0.5,481,best_practice,116,Use list comprehensions for concise and readable code.,,463,        return drawer.draw_line(show=show),"[220, 220, 220, 220, 220, 220, 220, 1441, 33451, 13, 19334, 62, 1370, 7, 12860, 28, 12860, 8]"
‚úÖ Best Practice: Use in-place list extension for better performance.,"[26486, 227, 6705, 19939, 25, 5765, 287, 12, 5372, 1351, 7552, 329, 1365, 2854, 13]",0.5,488,best_practice,119,Use in-place list extension for better performance.,,481,class OrderReader(DataReader):,"[4871, 8284, 33634, 7, 6601, 33634, 2599]"
‚úÖ Best Practice: Use super() to call the parent class's constructor.,"[26486, 227, 6705, 19939, 25, 5765, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 23772, 13]",1.0,496,best_practice,120,Use super() to call the parent class's constructor.,,488,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
üß† ML Signal: Usage of main entry point pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1388, 5726, 966, 3912, 13]",0.5,509,ml_signal,146,Usage of main entry point pattern.,,496,"            None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 11]"
üß† ML Signal: Instantiation of Drawer with specific data structure.,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 15315, 263, 351, 2176, 1366, 4645, 13]",0.5,522,ml_signal,146,Instantiation of Drawer with specific data structure.,,509,"            None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 11]"
üß† ML Signal: Method call pattern for drawing operations.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 8263, 4560, 13]",0.5,535,ml_signal,147,Method call pattern for drawing operations.,,522,"            None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 11]"
‚úÖ Best Practice: Use __all__ to define public API of the module.,"[26486, 227, 6705, 19939, 25, 5765, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 13]",1.0,548,best_practice,147,Use __all__ to define public API of the module.,,535,"            None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 11]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,start_token,text,tokens
✅ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,8,best_practice,4,Grouping imports from the same module together improves readability.,0,from sqlalchemy.orm import relationship,"[6738, 44161, 282, 26599, 13, 579, 1330, 2776]"
✅ Best Practice: Naming convention for base classes should be consistent and descriptive.,"[26486, 227, 6705, 19939, 25, 399, 3723, 9831, 329, 2779, 6097, 815, 307, 6414, 290, 35644, 13]",0.5,21,best_practice,8,Naming convention for base classes should be consistent and descriptive.,8,from zvt.utils.decorator import to_string,"[6738, 1976, 36540, 13, 26791, 13, 12501, 273, 1352, 1330, 284, 62, 8841]"
✅ Best Practice: Use of a class variable to define the table name for ORM mapping,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 1398, 7885, 284, 8160, 262, 3084, 1438, 329, 6375, 44, 16855]",0.5,21,best_practice,12,Use of a class variable to define the table name for ORM mapping,21,,[]
✅ Best Practice: Use of Column with String type and length for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 290, 4129, 329, 6831, 32815, 6770]",0.5,25,best_practice,14,Use of Column with String type and length for database schema definition,21,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of Column with String type and length for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 290, 4129, 329, 6831, 32815, 6770]",0.5,29,best_practice,16,Use of Column with String type and length for database schema definition,25,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of Column with DateTime type for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 7536, 7575, 2099, 329, 6831, 32815, 6770]",0.5,44,best_practice,18,Use of Column with DateTime type for database schema definition,29,"    __tablename__ = ""trader_info""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 2213, 5067, 62, 10951, 1]"
✅ Best Practice: Use of Column with DateTime type for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 7536, 7575, 2099, 329, 6831, 32815, 6770]",0.5,59,best_practice,20,Use of Column with DateTime type for database schema definition,44,    trader_name = Column(String(length=128)),"[220, 220, 220, 31791, 62, 3672, 796, 29201, 7, 10100, 7, 13664, 28, 12762, 4008]"
✅ Best Practice: Use of Column with String type and length for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 290, 4129, 329, 6831, 32815, 6770]",0.5,59,best_practice,21,Use of Column with String type and length for database schema definition,59,,[]
✅ Best Practice: Use of Column with String type and length for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 290, 4129, 329, 6831, 32815, 6770]",0.5,72,best_practice,24,Use of Column with String type and length for database schema definition,59,    end_timestamp = Column(DateTime),"[220, 220, 220, 886, 62, 16514, 27823, 796, 29201, 7, 10430, 7575, 8]"
✅ Best Practice: Use of Column with Boolean type for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 41146, 2099, 329, 6831, 32815, 6770]",0.5,84,best_practice,27,Use of Column with Boolean type for database schema definition,72,    real_time = Column(Boolean),"[220, 220, 220, 1103, 62, 2435, 796, 29201, 7, 46120, 13087, 8]"
✅ Best Practice: Use of Column with Boolean type for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 41146, 2099, 329, 6831, 32815, 6770]",0.5,101,best_practice,28,Use of Column with Boolean type for database schema definition,84,    kdata_use_begin_time = Column(Boolean),"[220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 796, 29201, 7, 46120, 13087, 8]"
✅ Best Practice: Use of Column with String type and length for database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 290, 4129, 329, 6831, 32815, 6770]",0.5,101,best_practice,30,Use of Column with String type and length for database schema definition,101,,[]
🧠 ML Signal: Use of decorator pattern to enhance or modify class behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 1352, 3912, 284, 9494, 393, 13096, 1398, 4069]",1.0,105,ml_signal,32,Use of decorator pattern to enhance or modify class behavior,101,@to_string,"[31, 1462, 62, 8841]"
✅ Best Practice: Define a clear and descriptive table name for ORM mapping,"[26486, 227, 6705, 19939, 25, 2896, 500, 257, 1598, 290, 35644, 3084, 1438, 329, 6375, 44, 16855]",1.0,117,best_practice,27,Define a clear and descriptive table name for ORM mapping,105,    real_time = Column(Boolean),"[220, 220, 220, 1103, 62, 2435, 796, 29201, 7, 46120, 13087, 8]"
🧠 ML Signal: Usage of financial attributes for account statistics,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 12608, 329, 1848, 7869]",0.5,135,ml_signal,29,Usage of financial attributes for account statistics,117,    kdata_adjust_type = Column(String(length=32)),"[220, 220, 220, 479, 7890, 62, 23032, 62, 4906, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
🧠 ML Signal: Usage of trader name as a string attribute,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 31791, 1438, 355, 257, 4731, 11688]",0.5,135,ml_signal,31,Usage of trader name as a string attribute,135,,[]
🧠 ML Signal: Usage of cash as a financial attribute,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5003, 355, 257, 3176, 11688]",0.5,146,ml_signal,33,Usage of cash as a financial attribute,135,"class AccountStats(TraderBase, Mixin):","[4871, 10781, 29668, 7, 2898, 5067, 14881, 11, 15561, 259, 2599]"
"🧠 ML Signal: Relationship mapping to another table, indicating a one-to-many or many-to-many relationship","[8582, 100, 254, 10373, 26484, 25, 39771, 16855, 284, 1194, 3084, 11, 12739, 257, 530, 12, 1462, 12, 21834, 393, 867, 12, 1462, 12, 21834, 2776]",0.5,154,ml_signal,35,"Relationship mapping to another table, indicating a one-to-many or many-to-many relationship",146,    account stats of every day,"[220, 220, 220, 1848, 9756, 286, 790, 1110]"
🧠 ML Signal: Usage of value as a financial attribute,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1988, 355, 257, 3176, 11688]",0.5,154,ml_signal,37,Usage of value as a financial attribute,154,,[]
🧠 ML Signal: Usage of all_value as a financial attribute,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 477, 62, 8367, 355, 257, 3176, 11688]",0.5,154,ml_signal,39,Usage of all_value as a financial attribute,154,,[]
🧠 ML Signal: Usage of profit as a financial attribute,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7630, 355, 257, 3176, 11688]",0.5,154,ml_signal,41,Usage of profit as a financial attribute,154,,[]
🧠 ML Signal: Usage of profit_rate as a financial attribute,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7630, 62, 4873, 355, 257, 3176, 11688]",0.5,169,ml_signal,43,Usage of profit_rate as a financial attribute,154,    trader_name = Column(String(length=128)),"[220, 220, 220, 31791, 62, 3672, 796, 29201, 7, 10100, 7, 13664, 28, 12762, 4008]"
🧠 ML Signal: Usage of closing as a boolean attribute to indicate state,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 9605, 355, 257, 25131, 11688, 284, 7603, 1181]",0.5,178,ml_signal,45,Usage of closing as a boolean attribute to indicate state,169,    cash = Column(Float),"[220, 220, 220, 5003, 796, 29201, 7, 43879, 8]"
🧠 ML Signal: Inheritance from TraderBase and Mixin indicates a pattern of using mixins for shared functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 41956, 14881, 290, 15561, 259, 9217, 257, 3912, 286, 1262, 5022, 1040, 329, 4888, 11244]",0.5,178,ml_signal,37,Inheritance from TraderBase and Mixin indicates a pattern of using mixins for shared functionality,178,,[]
🧠 ML Signal: Use of __tablename__ suggests ORM pattern for database table mapping,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 5644, 6375, 44, 3912, 329, 6831, 3084, 16855]",0.5,178,ml_signal,39,Use of __tablename__ suggests ORM pattern for database table mapping,178,,[]
🧠 ML Signal: Use of Column and String indicates ORM pattern for defining database schema,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 290, 10903, 9217, 6375, 44, 3912, 329, 16215, 6831, 32815]",0.5,178,ml_signal,41,Use of Column and String indicates ORM pattern for defining database schema,178,,[]
🧠 ML Signal: Use of ForeignKey indicates a relational database pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8708, 9218, 9217, 257, 50126, 6831, 3912]",0.5,193,ml_signal,43,Use of ForeignKey indicates a relational database pattern,178,    trader_name = Column(String(length=128)),"[220, 220, 220, 31791, 62, 3672, 796, 29201, 7, 10100, 7, 13664, 28, 12762, 4008]"
🧠 ML Signal: Use of relationship indicates ORM pattern for defining relationships between tables,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2776, 9217, 6375, 44, 3912, 329, 16215, 6958, 1022, 8893]",0.5,202,ml_signal,45,Use of relationship indicates ORM pattern for defining relationships between tables,193,    cash = Column(Float),"[220, 220, 220, 5003, 796, 29201, 7, 43879, 8]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,220,ml_signal,47,Use of Float for financial data suggests a pattern of handling monetary values,202,"    positions = relationship(""Position"", back_populates=""account_stats"")","[220, 220, 220, 6116, 796, 2776, 7203, 26545, 1600, 736, 62, 12924, 15968, 2625, 23317, 62, 34242, 4943]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,229,ml_signal,49,Use of Float for financial data suggests a pattern of handling monetary values,220,    value = Column(Float),"[220, 220, 220, 1988, 796, 29201, 7, 43879, 8]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,240,ml_signal,51,Use of Float for financial data suggests a pattern of handling monetary values,229,    all_value = Column(Float),"[220, 220, 220, 477, 62, 8367, 796, 29201, 7, 43879, 8]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,250,ml_signal,53,Use of Float for financial data suggests a pattern of handling monetary values,240,    #: 盈亏,"[220, 220, 220, 1303, 25, 13328, 249, 230, 12859, 237]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,266,ml_signal,55,Use of Float for financial data suggests a pattern of handling monetary values,250,    #: 盈亏比例,"[220, 220, 220, 1303, 25, 13328, 249, 230, 12859, 237, 162, 107, 242, 160, 122, 233]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,266,ml_signal,57,Use of Float for financial data suggests a pattern of handling monetary values,266,,[]
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,276,ml_signal,59,Use of Float for financial data suggests a pattern of handling monetary values,266,    closing = Column(Boolean),"[220, 220, 220, 9605, 796, 29201, 7, 46120, 13087, 8]"
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,276,ml_signal,61,Use of Float for financial data suggests a pattern of handling monetary values,276,,[]
🧠 ML Signal: Use of Float for financial data suggests a pattern of handling monetary values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 48436, 329, 3176, 1366, 5644, 257, 3912, 286, 9041, 15331, 3815]",0.5,276,ml_signal,61,Use of Float for financial data suggests a pattern of handling monetary values,276,,[]
🧠 ML Signal: Use of Integer for timestamps suggests a pattern of handling time-related data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 34142, 329, 4628, 395, 9430, 5644, 257, 3912, 286, 9041, 640, 12, 5363, 1366]",0.5,276,ml_signal,61,Use of Integer for timestamps suggests a pattern of handling time-related data,276,,[]
✅ Best Practice: Use of __tablename__ for ORM class to specify the database table name,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 329, 6375, 44, 1398, 284, 11986, 262, 6831, 3084, 1438]",1.0,286,best_practice,53,Use of __tablename__ for ORM class to specify the database table name,276,    #: 盈亏,"[220, 220, 220, 1303, 25, 13328, 249, 230, 12859, 237]"
✅ Best Practice: Use of Column with String type for trader_name ensures proper database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 329, 31791, 62, 3672, 19047, 1774, 6831, 32815, 6770]",0.5,302,best_practice,55,Use of Column with String type for trader_name ensures proper database schema definition,286,    #: 盈亏比例,"[220, 220, 220, 1303, 25, 13328, 249, 230, 12859, 237, 162, 107, 242, 160, 122, 233]"
✅ Best Practice: Use of Column with Float type for order_price ensures proper database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 48436, 2099, 329, 1502, 62, 20888, 19047, 1774, 6831, 32815, 6770]",0.5,302,best_practice,57,Use of Column with Float type for order_price ensures proper database schema definition,302,,[]
✅ Best Practice: Use of Column with Float type for order_amount ensures proper database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 48436, 2099, 329, 1502, 62, 17287, 19047, 1774, 6831, 32815, 6770]",0.5,312,best_practice,59,Use of Column with Float type for order_amount ensures proper database schema definition,302,    closing = Column(Boolean),"[220, 220, 220, 9605, 796, 29201, 7, 46120, 13087, 8]"
✅ Best Practice: Use of Column with String type for order_type ensures proper database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 329, 1502, 62, 4906, 19047, 1774, 6831, 32815, 6770]",0.5,312,best_practice,61,Use of Column with String type for order_type ensures proper database schema definition,312,,[]
✅ Best Practice: Use of Column with String type for status ensures proper database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 329, 3722, 19047, 1774, 6831, 32815, 6770]",0.5,312,best_practice,61,Use of Column with String type for status ensures proper database schema definition,312,,[]
✅ Best Practice: Use of Column with String type for level ensures proper database schema definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 329, 1241, 19047, 1774, 6831, 32815, 6770]",0.5,312,best_practice,61,Use of Column with String type for level ensures proper database schema definition,312,,[]
🧠 ML Signal: register_schema function call indicates a pattern for setting up database schemas,"[8582, 100, 254, 10373, 26484, 25, 7881, 62, 15952, 2611, 2163, 869, 9217, 257, 3912, 329, 4634, 510, 6831, 3897, 5356]",0.5,312,ml_signal,61,register_schema function call indicates a pattern for setting up database schemas,312,,[]
✅ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,312,best_practice,61,Use of __all__ to define public API of the module,312,,[]

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,6,best_practice,4,Grouping imports from the same module together improves readability.,,0,"from typing import List, Optional","[6738, 19720, 1330, 7343, 11, 32233]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,27,best_practice,6,Grouping imports from the same module together improves readability.,,6,"from zvt.api.kdata import get_kdata, get_kdata_schema","[6738, 1976, 36540, 13, 15042, 13, 74, 7890, 1330, 651, 62, 74, 7890, 11, 651, 62, 74, 7890, 62, 15952, 2611]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,46,best_practice,8,Grouping imports from the same module together improves readability.,,27,"from zvt.contract.api import get_db_session, decode_entity_id","[6738, 1976, 36540, 13, 28484, 13, 15042, 1330, 651, 62, 9945, 62, 29891, 11, 36899, 62, 26858, 62, 312]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,65,best_practice,8,Grouping imports from the same module together improves readability.,,46,"from zvt.contract.api import get_db_session, decode_entity_id","[6738, 1976, 36540, 13, 28484, 13, 15042, 1330, 651, 62, 9945, 62, 29891, 11, 36899, 62, 26858, 62, 312]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,73,best_practice,15,Grouping imports from the same module together improves readability.,,65,"    WrongKdataError,","[220, 220, 220, 28843, 42, 7890, 12331, 11]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,91,best_practice,20,Grouping imports from the same module together improves readability.,,73,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,106,best_practice,22,Grouping imports from the same module together improves readability.,,91,from zvt.utils.utils import fill_domain_from_dict,"[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 27830, 62, 6738, 62, 11600]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,121,best_practice,22,Grouping imports from the same module together improves readability.,,106,from zvt.utils.utils import fill_domain_from_dict,"[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 27830, 62, 6738, 62, 11600]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,136,best_practice,22,Grouping imports from the same module together improves readability.,,121,from zvt.utils.utils import fill_domain_from_dict,"[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 27830, 62, 6738, 62, 11600]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,151,best_practice,22,Grouping imports from the same module together improves readability.,,136,from zvt.utils.utils import fill_domain_from_dict,"[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 27830, 62, 6738, 62, 11600]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,166,best_practice,22,Grouping imports from the same module together improves readability.,,151,from zvt.utils.utils import fill_domain_from_dict,"[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 27830, 62, 6738, 62, 11600]"
‚úÖ Best Practice: Use of logging for tracking and debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 290, 28769]",1.0,179,best_practice,39,Use of logging for tracking and debugging,,166,"        keep_history=False,","[220, 220, 220, 220, 220, 220, 220, 1394, 62, 23569, 28, 25101, 11]"
"üß† ML Signal: Initialization of entity schema, indicating a pattern of object-oriented design","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 9312, 32815, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 1486]",0.5,197,ml_signal,41,"Initialization of entity schema, indicating a pattern of object-oriented design",,179,"        kdata_use_begin_time=False,","[220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 28, 25101, 11]"
"üß† ML Signal: Initialization of financial parameters, useful for financial model training","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 3176, 10007, 11, 4465, 329, 3176, 2746, 3047]",0.5,225,ml_signal,43,"Initialization of financial parameters, useful for financial model training",,197,        self.logger = logging.getLogger(self.__class__.__name__),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 944, 13, 834, 4871, 834, 13, 834, 3672, 834, 8]"
"üß† ML Signal: Initialization of financial parameters, useful for financial model training","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 3176, 10007, 11, 4465, 329, 3176, 2746, 3047]",0.5,243,ml_signal,45,"Initialization of financial parameters, useful for financial model training",,225,        self.entity_schema = entity_schema,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 15952, 2611, 796, 9312, 62, 15952, 2611]"
"üß† ML Signal: Initialization of financial parameters, useful for financial model training","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 3176, 10007, 11, 4465, 329, 3176, 2746, 3047]",0.5,259,ml_signal,47,"Initialization of financial parameters, useful for financial model training",,243,        self.buy_cost = buy_cost,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 17846, 62, 15805, 796, 2822, 62, 15805]"
"üß† ML Signal: Initialization of financial parameters, useful for financial model training","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 3176, 10007, 11, 4465, 329, 3176, 2746, 3047]",0.5,275,ml_signal,49,"Initialization of financial parameters, useful for financial model training",,259,        self.slippage = slippage,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6649, 3974, 496, 796, 1017, 3974, 496]"
"üß† ML Signal: Initialization of mode settings, indicating a pattern of configurable behavior","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4235, 6460, 11, 12739, 257, 3912, 286, 4566, 11970, 4069]",0.5,291,ml_signal,51,"Initialization of mode settings, indicating a pattern of configurable behavior",,275,        self.adjust_type = adjust_type,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23032, 62, 4906, 796, 4532, 62, 4906]"
"üß† ML Signal: Initialization of adjustment type, indicating a pattern of configurable behavior","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 15068, 2099, 11, 12739, 257, 3912, 286, 4566, 11970, 4069]",0.5,291,ml_signal,53,"Initialization of adjustment type, indicating a pattern of configurable behavior",,291,,[]
"üß† ML Signal: Initialization of trader name, indicating a pattern of user-specific configuration","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 31791, 1438, 11, 12739, 257, 3912, 286, 2836, 12, 11423, 8398]",0.5,304,ml_signal,55,"Initialization of trader name, indicating a pattern of user-specific configuration",,291,        self.provider = provider,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15234, 1304, 796, 10131]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `get_db_session` is not properly secured,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 1136, 62, 9945, 62, 29891, 63, 318, 407, 6105, 13659]",1.0,316,sast_risk,56,Potential risk if `get_db_session` is not properly secured,Low,304,        self.level = level,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5715, 796, 1241]"
"üß† ML Signal: Initialization of provider, indicating a pattern of external data source usage","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 10131, 11, 12739, 257, 3912, 286, 7097, 1366, 2723, 8748]",0.5,342,ml_signal,60,"Initialization of provider, indicating a pattern of external data source usage",,316,        self.kdata_use_begin_time = kdata_use_begin_time,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 74, 7890, 62, 1904, 62, 27471, 62, 2435, 796, 479, 7890, 62, 1904, 62, 27471, 62, 2435]"
"üß† ML Signal: Initialization of level, indicating a pattern of configurable behavior","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 1241, 11, 12739, 257, 3912, 286, 4566, 11970, 4069]",0.5,342,ml_signal,61,"Initialization of level, indicating a pattern of configurable behavior",,342,,[]
"üß† ML Signal: Initialization of timestamp, indicating a pattern of time-based operations","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 41033, 11, 12739, 257, 3912, 286, 640, 12, 3106, 4560]",0.5,342,ml_signal,63,"Initialization of timestamp, indicating a pattern of time-based operations",,342,,[]
"üß† ML Signal: Initialization of history settings, indicating a pattern of data retention configuration","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2106, 6460, 11, 12739, 257, 3912, 286, 1366, 21545, 8398]",0.5,392,ml_signal,65,"Initialization of history settings, indicating a pattern of data retention configuration",,342,"            f""init_account,holding size:{len(self.account.positions)} profit:{self.account.profit} input_money:{self.account.input_money} ""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 15003, 62, 23317, 11, 19216, 2546, 29164, 11925, 7, 944, 13, 23317, 13, 1930, 1756, 38165, 7630, 29164, 944, 13, 23317, 13, 9183, 92, 5128, 62, 26316, 29164, 944, 13, 23317, 13, 15414, 62, 26316, 92, 366]"
"üß† ML Signal: Initialization of real-time settings, indicating a pattern of real-time processing","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 1103, 12, 2435, 6460, 11, 12739, 257, 3912, 286, 1103, 12, 2435, 7587]",0.5,400,ml_signal,67,"Initialization of real-time settings, indicating a pattern of real-time processing",,392,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Initialization of data usage settings, indicating a pattern of data processing configuration","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 1366, 8748, 6460, 11, 12739, 257, 3912, 286, 1366, 7587, 8398]",0.5,400,ml_signal,69,"Initialization of data usage settings, indicating a pattern of data processing configuration",,400,,[]
"üß† ML Signal: Initialization of account, indicating a pattern of financial account management","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 1848, 11, 12739, 257, 3912, 286, 3176, 1848, 4542]",0.5,416,ml_signal,71,"Initialization of account, indicating a pattern of financial account management",,400,        self.account.input_money += money,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 15414, 62, 26316, 15853, 1637]"
‚úÖ Best Practice: Use of formatted strings for clear and informative logging,"[26486, 227, 6705, 19939, 25, 5765, 286, 39559, 13042, 329, 1598, 290, 30304, 18931]",1.0,416,best_practice,73,Use of formatted strings for clear and informative logging,,416,,[]
‚úÖ Best Practice: Use of logging for tracking and debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 290, 28769]",1.0,428,best_practice,77,Use of logging for tracking and debugging,,416,        if trader_info:,"[220, 220, 220, 220, 220, 220, 220, 611, 31791, 62, 10951, 25]"
üß† ML Signal: Default parameter value usage,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 1988, 8748]",0.5,445,ml_signal,62,Default parameter value usage,,428,        self.account = self.init_account(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 796, 2116, 13, 15003, 62, 23317, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential for integer overflow if 'money' is very large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18253, 30343, 611, 705, 26316, 6, 318, 845, 1588]",1.0,457,sast_risk,64,Potential for integer overflow if 'money' is very large,Low,445,        account_info = (,"[220, 220, 220, 220, 220, 220, 220, 1848, 62, 10951, 796, 357]"
‚ö†Ô∏è SAST Risk (Low): Potential for integer overflow if 'money' is very large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18253, 30343, 611, 705, 26316, 6, 318, 845, 1588]",1.0,498,sast_risk,66,Potential for integer overflow if 'money' is very large,Low,457,"            f""cash:{self.account.cash} value:{self.account.value} all_value:{self.account.all_value}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 30350, 29164, 944, 13, 23317, 13, 30350, 92, 1988, 29164, 944, 13, 23317, 13, 8367, 92, 477, 62, 8367, 29164, 944, 13, 23317, 13, 439, 62, 8367, 36786]"
"üß† ML Signal: Usage of a function to clear account data, indicating a reset or cleanup operation","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 1598, 1848, 1366, 11, 12739, 257, 13259, 393, 27425, 4905]",0.5,548,ml_signal,65,"Usage of a function to clear account data, indicating a reset or cleanup operation",,498,"            f""init_account,holding size:{len(self.account.positions)} profit:{self.account.profit} input_money:{self.account.input_money} ""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 15003, 62, 23317, 11, 19216, 2546, 29164, 11925, 7, 944, 13, 23317, 13, 1930, 1756, 38165, 7630, 29164, 944, 13, 23317, 13, 9183, 92, 5128, 62, 26316, 29164, 944, 13, 23317, 13, 15414, 62, 26316, 92, 366]"
"üß† ML Signal: Logging a warning message, indicating an important event or state","[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 257, 6509, 3275, 11, 12739, 281, 1593, 1785, 393, 1181]",0.5,566,ml_signal,68,"Logging a warning message, indicating an important event or state",,548,        self.logger.info(account_info),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 23317, 62, 10951, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through logging sensitive trader information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 18931, 8564, 31791, 1321]",0.5,566,sast_risk,69,Potential information disclosure through logging sensitive trader information,Low,566,,[]
"üß† ML Signal: Function call to clear trader data, indicating data modification or deletion","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 1598, 31791, 1366, 11, 12739, 1366, 17613, 393, 39948]",0.5,582,ml_signal,71,"Function call to clear trader data, indicating data modification or deletion",,566,        self.account.input_money += money,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 15414, 62, 26316, 15853, 1637]"
‚ö†Ô∏è SAST Risk (Medium): Risk of unintended data loss or corruption when clearing trader data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 19602, 286, 30261, 1366, 2994, 393, 9253, 618, 17304, 31791, 1366]",0.5,596,sast_risk,72,Risk of unintended data loss or corruption when clearing trader data,Medium,582,        self.account.cash += money,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 30350, 15853, 1637]"
üß† ML Signal: Conditional logic based on a boolean flag (self.keep_history) can indicate different user preferences or modes of operation.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 6056, 357, 944, 13, 14894, 62, 23569, 8, 460, 7603, 1180, 2836, 15387, 393, 12881, 286, 4905, 13]",0.5,611,ml_signal,70,Conditional logic based on a boolean flag (self.keep_history) can indicate different user preferences or modes of operation.,,596,"    def input_money(self, money=1000000):","[220, 220, 220, 825, 5128, 62, 26316, 7, 944, 11, 1637, 28, 16, 10535, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential data loss if clear_account() removes important data without confirmation.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 2994, 611, 1598, 62, 23317, 3419, 20694, 1593, 1366, 1231, 12641, 13]",0.5,625,sast_risk,72,Potential data loss if clear_account() removes important data without confirmation.,Low,611,        self.account.cash += money,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 30350, 15853, 1637]"
üß† ML Signal: Loading existing account data suggests a pattern of resuming or continuing previous sessions.,"[8582, 100, 254, 10373, 26484, 25, 12320, 4683, 1848, 1366, 5644, 257, 3912, 286, 581, 12595, 393, 8282, 2180, 10991, 13]",0.5,670,ml_signal,75,Loading existing account data suggests a pattern of resuming or continuing previous sessions.,,625,"        trader_info = get_trader_info(session=self.session, trader_name=self.trader_name, return_type=""domain"", limit=1)","[220, 220, 220, 220, 220, 220, 220, 31791, 62, 10951, 796, 651, 62, 2213, 5067, 62, 10951, 7, 29891, 28, 944, 13, 29891, 11, 31791, 62, 3672, 28, 944, 13, 2213, 5067, 62, 3672, 11, 1441, 62, 4906, 2625, 27830, 1600, 4179, 28, 16, 8]"
üß† ML Signal: Use of dynamic entity type naming can indicate flexible or dynamic schema usage.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8925, 9312, 2099, 19264, 460, 7603, 12846, 393, 8925, 32815, 8748, 13]",0.5,682,ml_signal,77,Use of dynamic entity type naming can indicate flexible or dynamic schema usage.,,670,        if trader_info:,"[220, 220, 220, 220, 220, 220, 220, 611, 31791, 62, 10951, 25]"
‚ö†Ô∏è SAST Risk (Low): Direct database session manipulation without error handling can lead to unhandled exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 6831, 6246, 17512, 1231, 4049, 9041, 460, 1085, 284, 555, 38788, 13269, 13]",0.5,693,sast_risk,92,Direct database session manipulation without error handling can lead to unhandled exceptions.,Low,682,        # init trader info,"[220, 220, 220, 220, 220, 220, 220, 1303, 2315, 31791, 7508]"
üß† ML Signal: Returning a new account with initial values can indicate a pattern of initializing or resetting state.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 649, 1848, 351, 4238, 3815, 460, 7603, 257, 3912, 286, 4238, 2890, 393, 13259, 889, 1181, 13]",0.5,704,ml_signal,92,Returning a new account with initial values can indicate a pattern of initializing or resetting state.,,693,        # init trader info,"[220, 220, 220, 220, 220, 220, 220, 1303, 2315, 31791, 7508]"
üß† ML Signal: Use of query with filters and ordering,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12405, 351, 16628, 290, 16216]",0.5,725,ml_signal,103,Use of query with filters and ordering,,704,"            real_time=self.real_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1103, 62, 2435, 28, 944, 13, 5305, 62, 2435, 11]"
‚úÖ Best Practice: Type hinting for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,745,best_practice,112,Type hinting for better readability and maintainability,,725,"            timestamp=self.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41033, 28, 944, 13, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Use of from_orm for converting ORM objects to models,"[26486, 227, 6705, 19939, 25, 5765, 286, 422, 62, 579, 329, 23202, 6375, 44, 5563, 284, 4981]",0.5,764,best_practice,114,Use of from_orm for converting ORM objects to models,,745,"            cash=self.base_capital,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5003, 28, 944, 13, 8692, 62, 27544, 11]"
‚úÖ Best Practice: Use of helper function to fill domain object from a dictionary,"[26486, 227, 6705, 19939, 25, 5765, 286, 31904, 2163, 284, 6070, 7386, 2134, 422, 257, 22155]",0.5,779,best_practice,117,Use of helper function to fill domain object from a dictionary,,764,"            value=0,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1988, 28, 15, 11]"
‚úÖ Best Practice: Type hinting for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,787,best_practice,119,Type hinting for better readability and maintainability,,779,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of from_orm for converting ORM objects to models,"[26486, 227, 6705, 19939, 25, 5765, 286, 422, 62, 579, 329, 23202, 6375, 44, 5563, 284, 4981]",0.5,803,best_practice,122,Use of from_orm for converting ORM objects to models,,787,        records = AccountStats.query_data(,"[220, 220, 220, 220, 220, 220, 220, 4406, 796, 10781, 29668, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Logging of current position for debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 1459, 2292, 329, 28769]",0.5,824,ml_signal,124,Logging of current position for debugging,,803,"            order=AccountStats.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 28, 30116, 29668, 13, 16514, 27823, 13, 20147, 22784]"
‚úÖ Best Practice: Use of helper function to fill domain object from a dictionary,"[26486, 227, 6705, 19939, 25, 5765, 286, 31904, 2163, 284, 6070, 7386, 2134, 422, 257, 22155]",0.5,832,best_practice,127,Use of helper function to fill domain object from a dictionary,,824,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Logging usage pattern for tracking events,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 2995]",1.0,847,ml_signal,125,Logging usage pattern for tracking events,,832,"            limit=1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
‚úÖ Best Practice: Check if the timestamp is the same as the start timestamp,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 41033, 318, 262, 976, 355, 262, 923, 41033]",0.5,855,best_practice,127,Check if the timestamp is the same as the start timestamp,,847,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Account loading pattern when trading opens,"[8582, 100, 254, 10373, 26484, 25, 10781, 11046, 3912, 618, 7313, 9808]",0.5,873,ml_signal,130,Account loading pattern when trading opens,,855,        latest_record: AccountStats = records[0],"[220, 220, 220, 220, 220, 220, 220, 3452, 62, 22105, 25, 10781, 29668, 796, 4406, 58, 15, 60]"
‚úÖ Best Practice: Define a docstring to describe the purpose and parameters of the function,"[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 10007, 286, 262, 2163]",0.5,888,best_practice,129,Define a docstring to describe the purpose and parameters of the function,,873,            return self.account,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 23317]"
‚úÖ Best Practice: Consider logging the error for better traceability and debugging,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 329, 1365, 12854, 1799, 290, 28769]",0.5,888,best_practice,131,Consider logging the error for better traceability and debugging,,888,,[]
"üß† ML Signal: Method definition with a timestamp parameter, indicating time-based event handling","[8582, 100, 254, 10373, 26484, 25, 11789, 6770, 351, 257, 41033, 11507, 11, 12739, 640, 12, 3106, 1785, 9041]",1.0,888,ml_signal,131,"Method definition with a timestamp parameter, indicating time-based event handling",,888,,[]
üß† ML Signal: Iterating over a list of objects to process each one,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 5563, 284, 1429, 1123, 530]",0.5,900,ml_signal,134,Iterating over a list of objects to process each one,,888,        account = AccountStats(),"[220, 220, 220, 220, 220, 220, 220, 1848, 796, 10781, 29668, 3419]"
üß† ML Signal: Method call pattern for handling individual items,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 9041, 1981, 3709]",0.5,900,ml_signal,136,Method call pattern for handling individual items,,900,,[]
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific error types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 4049, 3858]",1.0,929,sast_risk,140,Catching broad exceptions can hide specific error types,Low,900,"            self.logger.debug(""current position:{}"".format(position_model))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 24442, 7203, 14421, 2292, 29164, 92, 1911, 18982, 7, 9150, 62, 19849, 4008]"
üß† ML Signal: Logging exceptions for error tracking,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 13269, 329, 4049, 9646]",0.5,944,ml_signal,141,Logging exceptions for error tracking,,929,            position = Position(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 796, 23158, 3419]"
üß† ML Signal: Error handling pattern with additional context,"[8582, 100, 254, 10373, 26484, 25, 13047, 9041, 3912, 351, 3224, 4732]",0.5,961,ml_signal,143,Error handling pattern with additional context,,944,            positions.append(position),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6116, 13, 33295, 7, 9150, 8]"
üß† ML Signal: Mapping trading signal type to order type,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 7313, 6737, 2099, 284, 1502, 2099]",1.0,978,ml_signal,143,Mapping trading signal type to order type,,961,            positions.append(position),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6116, 13, 33295, 7, 9150, 8]"
üß† ML Signal: Fetching kdata based on trading signal parameters,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 479, 7890, 1912, 319, 7313, 6737, 10007]",1.0,987,ml_signal,147,Fetching kdata based on trading signal parameters,,978,        return account,"[220, 220, 220, 220, 220, 220, 220, 1441, 1848]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041]",1.0,995,sast_risk,159,Generic exception handling,Low,987,        pass,"[220, 220, 220, 220, 220, 220, 220, 1208]"
üß† ML Signal: Decoding entity ID from kdata,"[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 9312, 4522, 422, 479, 7890]",1.0,1008,ml_signal,163,Decoding entity ID from kdata,,995,            try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Ordering by position percentage,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 416, 2292, 5873]",1.0,1031,ml_signal,171,Ordering by position percentage,,1008,        happen_timestamp = trading_signal.happen_timestamp,"[220, 220, 220, 220, 220, 220, 220, 1645, 62, 16514, 27823, 796, 7313, 62, 12683, 282, 13, 71, 1324, 268, 62, 16514, 27823]"
üß† ML Signal: Ordering by money amount,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 416, 1637, 2033]",1.0,1057,ml_signal,179,Ordering by money amount,,1031,"                    level=trading_level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 28, 2213, 4980, 62, 5715, 11]"
üß† ML Signal: Ordering by amount,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 416, 2033]",1.0,1057,ml_signal,188,Ordering by amount,,1057,,[]
‚ö†Ô∏è SAST Risk (Low): Assertion used for control flow,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 973, 329, 1630, 5202]",1.0,1091,sast_risk,196,Assertion used for control flow,Low,1057,                        self.order_by_position_pct(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 1525, 62, 9150, 62, 79, 310, 7]"
‚úÖ Best Practice: Logging warnings for ignored signals,"[26486, 227, 6705, 19939, 25, 5972, 2667, 14601, 329, 9514, 10425]",1.0,1125,best_practice,196,Logging warnings for ignored signals,,1091,                        self.order_by_position_pct(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 1525, 62, 9150, 62, 79, 310, 7]"
‚úÖ Best Practice: Logging warnings for ignored signals,"[26486, 227, 6705, 19939, 25, 5972, 2667, 14601, 329, 9514, 10425]",1.0,1160,best_practice,206,Logging warnings for ignored signals,,1125,"                            order_price=the_price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 62, 20888, 28, 1169, 62, 20888, 11]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1184,ml_signal,202,Logging usage pattern,,1160,                        ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: List comprehension for filtering positions,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 25431, 6116]",1.0,1214,best_practice,203,List comprehension for filtering positions,,1184,                    elif trading_signal.order_money:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 7313, 62, 12683, 282, 13, 2875, 62, 26316, 25]"
üß† ML Signal: ID generation pattern,"[8582, 100, 254, 10373, 26484, 25, 4522, 5270, 3912]",1.0,1255,ml_signal,208,ID generation pattern,,1214,"                            order_money=trading_signal.order_money,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 62, 26316, 28, 2213, 4980, 62, 12683, 282, 13, 2875, 62, 26316, 11]"
üß† ML Signal: Entity decoding pattern,"[8582, 100, 254, 10373, 26484, 25, 20885, 39938, 3912]",1.0,1286,ml_signal,212,Entity decoding pattern,,1255,                        self.order_by_amount(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 1525, 62, 17287, 7]"
üß† ML Signal: Schema retrieval pattern,"[8582, 100, 254, 10373, 26484, 25, 10011, 2611, 45069, 3912]",1.0,1317,ml_signal,212,Schema retrieval pattern,,1286,                        self.order_by_amount(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 1525, 62, 17287, 7]"
üß† ML Signal: Data fetching pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 21207, 278, 3912]",1.0,1334,ml_signal,221,Data fetching pattern,,1317,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if position.long_amount is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2292, 13, 6511, 62, 17287, 318, 6632]",0.5,1349,sast_risk,238,Potential division by zero if position.long_amount is zero,Low,1334,        self.account.positions = [,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 1930, 1756, 796, 685]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if position.long_amount is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2292, 13, 6511, 62, 17287, 318, 6632]",0.5,1349,sast_risk,241,Potential division by zero if position.long_amount is zero,Low,1349,,[]
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1392,ml_signal,243,Logging usage pattern,,1349,"        the_id = ""{}_{}"".format(self.trader_name, to_time_str(timestamp, TIME_FORMAT_ISO8601))","[220, 220, 220, 220, 220, 220, 220, 262, 62, 312, 796, 45144, 92, 23330, 92, 1911, 18982, 7, 944, 13, 2213, 5067, 62, 3672, 11, 284, 62, 2435, 62, 2536, 7, 16514, 27823, 11, 20460, 62, 21389, 1404, 62, 40734, 4521, 486, 4008]"
üß† ML Signal: ID generation pattern,"[8582, 100, 254, 10373, 26484, 25, 4522, 5270, 3912]",1.0,1409,ml_signal,247,ID generation pattern,,1392,        for position in self.account.positions:,"[220, 220, 220, 220, 220, 220, 220, 329, 2292, 287, 2116, 13, 23317, 13, 1930, 1756, 25]"
üß† ML Signal: Timestamp conversion pattern,"[8582, 100, 254, 10373, 26484, 25, 5045, 27823, 11315, 3912]",0.5,1428,ml_signal,251,Timestamp conversion pattern,,1409,            kdata = get_kdata(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 7890, 796, 651, 62, 74, 7890, 7]"
üß† ML Signal: Timestamp conversion pattern,"[8582, 100, 254, 10373, 26484, 25, 5045, 27823, 11315, 3912]",0.5,1447,ml_signal,257,Timestamp conversion pattern,,1428,"                limit=1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if self.account.input_money is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2116, 13, 23317, 13, 15414, 62, 26316, 318, 6632]",0.5,1466,sast_risk,257,Potential division by zero if self.account.input_money is zero,Low,1447,"                limit=1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection if self.account contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 611, 2116, 13, 23317, 4909, 1418, 81, 8459, 1366]",0.5,1488,sast_risk,263,Potential SQL injection if self.account contains untrusted data,Medium,1466,            position.available_long = position.long_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 15182, 62, 6511, 796, 2292, 13, 6511, 62, 17287]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection if self.account contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 611, 2116, 13, 23317, 4909, 1418, 81, 8459, 1366]",0.5,1510,sast_risk,264,Potential SQL injection if self.account contains untrusted data,Medium,1488,            position.available_short = position.short_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 15182, 62, 19509, 796, 2292, 13, 19509, 62, 17287]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1526,ml_signal,266,Logging usage pattern,,1510,            if closing_price:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 9605, 62, 20888, 25]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1558,ml_signal,268,Logging usage pattern,,1526,                    position.value = position.long_amount * closing_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 8367, 796, 2292, 13, 6511, 62, 17287, 1635, 9605, 62, 20888]"
üß† ML Signal: Iterating over a list to find an item by attribute,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 1064, 281, 2378, 416, 11688]",1.0,1580,ml_signal,263,Iterating over a list to find an item by attribute,,1558,            position.available_long = position.long_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 15182, 62, 6511, 796, 2292, 13, 6511, 62, 17287]"
üß† ML Signal: Checking for equality with an entity ID,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 10537, 351, 281, 9312, 4522]",1.0,1580,ml_signal,265,Checking for equality with an entity ID,,1580,,[]
üß† ML Signal: Conditional logic based on a boolean flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 6056]",1.0,1612,ml_signal,268,Conditional logic based on a boolean flag,,1580,                    position.value = position.long_amount * closing_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 8367, 796, 2292, 13, 6511, 62, 17287, 1635, 9605, 62, 20888]"
üß† ML Signal: Method call to retrieve trading information,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 19818, 7313, 1321]",1.0,1644,ml_signal,268,Method call to retrieve trading information,,1612,                    position.value = position.long_amount * closing_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 8367, 796, 2292, 13, 6511, 62, 17287, 1635, 9605, 62, 20888]"
üß† ML Signal: Creating a new Position object with default values,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 23158, 2134, 351, 4277, 3815]",0.5,1676,ml_signal,268,Creating a new Position object with default values,,1644,                    position.value = position.long_amount * closing_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 8367, 796, 2292, 13, 6511, 62, 17287, 1635, 9605, 62, 20888]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying a list attribute of an object,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 257, 1351, 11688, 286, 281, 2134]",0.5,1688,sast_risk,286,Directly modifying a list attribute of an object,Low,1676,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Method accessing an instance attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 22534, 281, 4554, 11688]",0.5,1712,ml_signal,284,Method accessing an instance attribute,,1688,"            position.id = ""{}_{}_{}"".format(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2292, 13, 312, 796, 45144, 92, 23330, 92, 23330, 92, 1911, 18982, 7]"
üß† ML Signal: Returning an instance attribute,"[8582, 100, 254, 10373, 26484, 25, 42882, 281, 4554, 11688]",0.5,1724,ml_signal,286,Returning an instance attribute,,1712,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of enum for order_type improves code readability and reduces errors.,"[26486, 227, 6705, 19939, 25, 5765, 286, 33829, 329, 1502, 62, 4906, 19575, 2438, 1100, 1799, 290, 12850, 8563, 13]",1.0,1736,best_practice,299,Use of enum for order_type improves code readability and reduces errors.,,1724,        account_info = (,"[220, 220, 220, 220, 220, 220, 220, 1848, 62, 10951, 796, 357]"
‚úÖ Best Practice: Calculating need_money in a separate variable improves readability.,"[26486, 227, 6705, 19939, 25, 27131, 803, 761, 62, 26316, 287, 257, 4553, 7885, 19575, 1100, 1799, 13]",1.0,1777,best_practice,301,Calculating need_money in a separate variable improves readability.,,1736,"            f""cash:{self.account.cash} value:{self.account.value} all_value:{self.account.all_value}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 30350, 29164, 944, 13, 23317, 13, 30350, 92, 1988, 29164, 944, 13, 23317, 13, 8367, 92, 477, 62, 8367, 29164, 944, 13, 23317, 13, 439, 62, 8367, 36786]"
‚ö†Ô∏è SAST Risk (Medium): Potential for negative cash balance if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 4633, 5003, 5236, 611, 407, 12118, 6105, 13]",1.0,1795,sast_risk,303,Potential for negative cash balance if not handled properly.,Medium,1777,        self.logger.info(account_info),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 23317, 62, 10951, 8]"
üß† ML Signal: Conditional logic based on rich_mode could indicate user behavior patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 5527, 62, 14171, 714, 7603, 2836, 4069, 7572, 13]",1.0,1803,ml_signal,306,Conditional logic based on rich_mode could indicate user behavior patterns.,,1795,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for control flow can be risky in production code.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202, 460, 307, 17564, 287, 3227, 2438, 13]",1.0,1817,sast_risk,345,Use of assert for control flow can be risky in production code.,Low,1803,        :type current_position: Position,"[220, 220, 220, 220, 220, 220, 220, 1058, 4906, 1459, 62, 9150, 25, 23158]"
‚úÖ Best Practice: Use of format for string construction is clear and readable.,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 329, 4731, 5103, 318, 1598, 290, 31744, 13]",0.5,1831,best_practice,345,Use of format for string construction is clear and readable.,,1817,        :type current_position: Position,"[220, 220, 220, 220, 220, 220, 220, 1058, 4906, 1459, 62, 9150, 25, 23158]"
‚ö†Ô∏è SAST Risk (Medium): Direct database operations without error handling can lead to data integrity issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 6831, 4560, 1231, 4049, 9041, 460, 1085, 284, 1366, 11540, 2428, 13]",1.0,1856,sast_risk,363,Direct database operations without error handling can lead to data integrity issues.,Medium,1831,            # ËÆ°ÁÆóÂπ≥Âùá‰ª∑,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 5525, 106, 94, 163, 106, 245, 33176, 111, 161, 251, 229, 20015, 115]"
‚ö†Ô∏è SAST Risk (Medium): Potential floating-point precision issues with comparison,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 12462, 12, 4122, 15440, 2428, 351, 7208]",0.5,1881,sast_risk,363,Potential floating-point precision issues with comparison,Medium,1856,            # ËÆ°ÁÆóÂπ≥Âùá‰ª∑,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 5525, 106, 94, 163, 106, 245, 33176, 111, 161, 251, 229, 20015, 115]"
üß† ML Signal: Conditional logic based on object attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 12608]",0.5,1899,ml_signal,365,Conditional logic based on object attributes,,1881,            if long_amount == 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 890, 62, 17287, 6624, 657, 25]"
üß† ML Signal: Method call based on condition,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 1912, 319, 4006]",1.0,1921,ml_signal,367,Method call based on condition,,1899,            current_position.average_long_price = (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 13, 23913, 62, 6511, 62, 20888, 796, 357]"
‚ö†Ô∏è SAST Risk (Low): Custom exception handling without logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8562, 6631, 9041, 1231, 18931]",0.5,1921,sast_risk,370,Custom exception handling without logging,Low,1921,,[]
‚úÖ Best Practice: Use of descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 1100, 1799]",0.5,1921,best_practice,372,Use of descriptive variable names for readability,,1921,,[]
‚ö†Ô∏è SAST Risk (Medium): Integer division may lead to loss of precision,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 34142, 7297, 743, 1085, 284, 2994, 286, 15440]",0.5,1947,sast_risk,374,Integer division may lead to loss of precision,Medium,1921,                current_position.available_long += order_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 13, 15182, 62, 6511, 15853, 1502, 62, 17287]"
‚úÖ Best Practice: Return statement for function output,"[26486, 227, 6705, 19939, 25, 8229, 2643, 329, 2163, 5072]",0.5,1967,best_practice,376,Return statement for function output,,1947,        elif order_type == OrderType.order_short:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 1502, 62, 4906, 6624, 8284, 6030, 13, 2875, 62, 19509, 25]"
‚úÖ Best Practice: Consider adding type hints for the return value for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 1988, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1967,best_practice,372,Consider adding type hints for the return value for better readability and maintainability.,,1967,,[]
‚úÖ Best Practice: Use parentheses for clarity in complex expressions.,"[26486, 227, 6705, 19939, 25, 5765, 46672, 329, 16287, 287, 3716, 14700, 13]",0.5,1993,best_practice,374,Use parentheses for clarity in complex expressions.,,1967,                current_position.available_long += order_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 13, 15182, 62, 6511, 15853, 1502, 62, 17287]"
üß† ML Signal: Conditional logic based on a mode or flag can indicate different user behaviors or system states.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 4235, 393, 6056, 460, 7603, 1180, 2836, 14301, 393, 1080, 2585, 13]",0.5,2015,ml_signal,379,Conditional logic based on a mode or flag can indicate different user behaviors or system states.,,1993,                if self.rich_mode:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 7527, 62, 14171, 25]"
‚ö†Ô∏è SAST Risk (Medium): Raising exceptions without handling them can lead to unhandled exceptions and potential crashes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 1710, 13269, 1231, 9041, 606, 460, 1085, 284, 555, 38788, 13269, 290, 2785, 17616, 13]",0.5,2035,sast_risk,384,Raising exceptions without handling them can lead to unhandled exceptions and potential crashes.,Medium,2015,            self.account.cash -= need_money,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 30350, 48185, 761, 62, 26316]"
üß† ML Signal: Different handling based on order type can indicate distinct user actions or system processes.,"[8582, 100, 254, 10373, 26484, 25, 20615, 9041, 1912, 319, 1502, 2099, 460, 7603, 7310, 2836, 4028, 393, 1080, 7767, 13]",0.5,2075,ml_signal,388,Different handling based on order type can indicate distinct user actions or system processes.,,2035,                current_position.average_short_price * current_position.short_amount + current_price * order_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 13, 23913, 62, 19509, 62, 20888, 1635, 1459, 62, 9150, 13, 19509, 62, 17287, 1343, 1459, 62, 20888, 1635, 1502, 62, 17287]"
‚úÖ Best Practice: Use math.floor for clarity and to avoid potential issues with integer division.,"[26486, 227, 6705, 19939, 25, 5765, 10688, 13, 28300, 329, 16287, 290, 284, 3368, 2785, 2428, 351, 18253, 7297, 13]",0.5,2115,best_practice,397,Use math.floor for clarity and to avoid potential issues with integer division.,,2075,            self.account.cash += order_amount * current_price * (1 - self.slippage - self.sell_cost),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 30350, 15853, 1502, 62, 17287, 1635, 1459, 62, 20888, 1635, 357, 16, 532, 2116, 13, 6649, 3974, 496, 532, 2116, 13, 7255, 62, 15805, 8]"
‚ö†Ô∏è SAST Risk (Medium): Raising exceptions without handling them can lead to unhandled exceptions and potential crashes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 1710, 13269, 1231, 9041, 606, 460, 1085, 284, 555, 38788, 13269, 290, 2785, 17616, 13]",0.5,2115,sast_risk,402,Raising exceptions without handling them can lead to unhandled exceptions and potential crashes.,Medium,2115,,[]
üß† ML Signal: Method for calculating order amount based on position percentage,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 26019, 1502, 2033, 1912, 319, 2292, 5873]",1.0,2155,ml_signal,405,Method for calculating order amount based on position percentage,,2115,            self.account.cash -= order_amount * current_price * (1 + self.slippage + self.sell_cost),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 13, 30350, 48185, 1502, 62, 17287, 1635, 1459, 62, 20888, 1635, 357, 16, 1343, 2116, 13, 6649, 3974, 496, 1343, 2116, 13, 7255, 62, 15805, 8]"
üß† ML Signal: Method for placing an order with a calculated amount,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 12560, 281, 1502, 351, 257, 10488, 2033]",0.5,2177,ml_signal,408,Method for placing an order with a calculated amount,,2155,            current_position.short_amount -= order_amount,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 13, 19509, 62, 17287, 48185, 1502, 62, 17287]"
‚úÖ Best Practice: Validate input parameters to ensure they meet expected criteria,"[26486, 227, 6705, 19939, 25, 3254, 20540, 5128, 10007, 284, 4155, 484, 1826, 2938, 9987]",1.0,2198,best_practice,423,Validate input parameters to ensure they meet expected criteria,,2177,"            order_type=order_type.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 62, 4906, 28, 2875, 62, 4906, 13, 8367, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for exception message to leak sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6631, 3275, 284, 13044, 8564, 1321]",0.5,2213,sast_risk,425,Potential for exception message to leak sensitive information,Low,2198,"            status=""success"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3722, 2625, 13138, 1600]"
üß† ML Signal: Calculation of order amount based on money and price,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1502, 2033, 1912, 319, 1637, 290, 2756]",1.0,2221,ml_signal,426,Calculation of order amount based on money and price,,2213,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Delegating order processing to another method,"[8582, 100, 254, 10373, 26484, 25, 1024, 1455, 803, 1502, 7587, 284, 1194, 2446]",0.5,2229,ml_signal,426,Delegating order processing to another method,,2221,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of get_current_position with create_if_not_exist=True indicates a pattern of ensuring entity existence.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 651, 62, 14421, 62, 9150, 351, 2251, 62, 361, 62, 1662, 62, 38476, 28, 17821, 9217, 257, 3912, 286, 13359, 9312, 6224, 13]",1.0,2257,ml_signal,441,Usage of get_current_position with create_if_not_exist=True indicates a pattern of ensuring entity existence.,,2229,        cost = order_price * (1 + self.slippage + self.buy_cost),"[220, 220, 220, 220, 220, 220, 220, 1575, 796, 1502, 62, 20888, 1635, 357, 16, 1343, 2116, 13, 6649, 3974, 496, 1343, 2116, 13, 17846, 62, 15805, 8]"
"‚ö†Ô∏è SAST Risk (Low): Potential for InvalidOrderError to be raised, which should be handled by the caller.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 17665, 18743, 12331, 284, 307, 4376, 11, 543, 815, 307, 12118, 416, 262, 24955, 13]",1.0,2268,sast_risk,444,"Potential for InvalidOrderError to be raised, which should be handled by the caller.",Low,2257,        return order_amount,"[220, 220, 220, 220, 220, 220, 220, 1441, 1502, 62, 17287]"
üß† ML Signal: Pattern of updating position based on order type and conditions.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 2292, 1912, 319, 1502, 2099, 290, 3403, 13]",1.0,2298,ml_signal,447,Pattern of updating position based on order type and conditions.,,2268,        if order_type == OrderType.order_long or order_type == OrderType.order_short:,"[220, 220, 220, 220, 220, 220, 220, 611, 1502, 62, 4906, 6624, 8284, 6030, 13, 2875, 62, 6511, 393, 1502, 62, 4906, 6624, 8284, 6030, 13, 2875, 62, 19509, 25]"
"‚ö†Ô∏è SAST Risk (Low): Potential for InvalidOrderError to be raised, which should be handled by the caller.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 17665, 18743, 12331, 284, 307, 4376, 11, 543, 815, 307, 12118, 416, 262, 24955, 13]",1.0,2318,sast_risk,450,"Potential for InvalidOrderError to be raised, which should be handled by the caller.",Low,2298,            order_amount = want_pay // cost,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 62, 17287, 796, 765, 62, 15577, 3373, 1575]"
üß† ML Signal: Pattern of updating position based on order type and conditions.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 2292, 1912, 319, 1502, 2099, 290, 3403, 13]",1.0,2336,ml_signal,452,Pattern of updating position based on order type and conditions.,,2318,            if order_amount < 1:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 62, 17287, 1279, 352, 25]"
üß† ML Signal: Pattern of updating position based on order type and conditions.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 2292, 1912, 319, 1502, 2099, 290, 3403, 13]",1.0,2361,ml_signal,457,Pattern of updating position based on order type and conditions.,,2336,                    raise NotEnoughMoneyError(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 1892, 47323, 26788, 12331, 3419]"
"‚ö†Ô∏è SAST Risk (Low): Potential for NotEnoughPositionError to be raised, which should be handled by the caller.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1892, 47323, 26545, 12331, 284, 307, 4376, 11, 543, 815, 307, 12118, 416, 262, 24955, 13]",1.0,2402,sast_risk,460,"Potential for NotEnoughPositionError to be raised, which should be handled by the caller.",Low,2361,"            current_position = self.get_current_position(entity_id=entity_id, create_if_not_exist=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 796, 2116, 13, 1136, 62, 14421, 62, 9150, 7, 26858, 62, 312, 28, 26858, 62, 312, 11, 2251, 62, 361, 62, 1662, 62, 38476, 28, 17821, 8]"
üß† ML Signal: Pattern of updating position based on order type and conditions.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 2292, 1912, 319, 1502, 2099, 290, 3403, 13]",1.0,2443,ml_signal,460,Pattern of updating position based on order type and conditions.,,2402,"            current_position = self.get_current_position(entity_id=entity_id, create_if_not_exist=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 796, 2116, 13, 1136, 62, 14421, 62, 9150, 7, 26858, 62, 312, 28, 26858, 62, 312, 11, 2251, 62, 361, 62, 1662, 62, 38476, 28, 17821, 8]"
"‚ö†Ô∏è SAST Risk (Low): Generic Exception raised, should be more specific for better error handling.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 35528, 4376, 11, 815, 307, 517, 2176, 329, 1365, 4049, 9041, 13]",1.0,2484,sast_risk,460,"Generic Exception raised, should be more specific for better error handling.",Low,2443,"            current_position = self.get_current_position(entity_id=entity_id, create_if_not_exist=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 796, 2116, 13, 1136, 62, 14421, 62, 9150, 7, 26858, 62, 312, 28, 26858, 62, 312, 11, 2251, 62, 361, 62, 1662, 62, 38476, 28, 17821, 8]"
‚úÖ Best Practice: Use of __all__ to define public API of the module.,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 13]",1.0,2525,best_practice,460,Use of __all__ to define public API of the module.,,2484,"            current_position = self.get_current_position(entity_id=entity_id, create_if_not_exist=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 9150, 796, 2116, 13, 1136, 62, 14421, 62, 9150, 7, 26858, 62, 312, 28, 26858, 62, 312, 11, 2251, 62, 361, 62, 1662, 62, 38476, 28, 17821, 8]"

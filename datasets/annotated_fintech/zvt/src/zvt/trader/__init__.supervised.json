[
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of related constants",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3519,
      38491
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of related constants"
  },
  {
    "line": 13,
    "text": "    open_short = \"open_short\"",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of related constants improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1280,
      62,
      19509,
      796,
      366,
      9654,
      62,
      19509,
      1
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3519,
      38491,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of related constants improves code readability and maintainability."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function maps trading signal types to order types, useful for learning trading behavior patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8739,
      7313,
      6737,
      3858,
      284,
      1502,
      3858,
      11,
      4465,
      329,
      4673,
      7313,
      4069,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function maps trading signal types to order types, useful for learning trading behavior patterns"
  },
  {
    "line": 28,
    "text": "    if trading_signal_type == TradingSignalType.open_long:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Missing else clause could lead to unexpected behavior if an unknown trading_signal_type is passed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      7313,
      62,
      12683,
      282,
      62,
      4906,
      6624,
      25469,
      11712,
      282,
      6030,
      13,
      9654,
      62,
      6511,
      25
    ],
    "start_token": 12,
    "end_token": 32,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25639,
      2073,
      13444,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      281,
      6439,
      7313,
      62,
      12683,
      282,
      62,
      4906,
      318,
      3804
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Missing else clause could lead to unexpected behavior if an unknown trading_signal_type is passed"
  },
  {
    "line": 29,
    "text": "        return OrderType.order_long",
    "annotation": "\u2705 Best Practice: Consider adding an else clause to handle unexpected trading_signal_type values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      8284,
      6030,
      13,
      2875,
      62,
      6511
    ],
    "start_token": 32,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      281,
      2073,
      13444,
      284,
      5412,
      10059,
      7313,
      62,
      12683,
      282,
      62,
      4906,
      3815
    ],
    "label": "best_practice",
    "reason": "Consider adding an else clause to handle unexpected trading_signal_type values"
  },
  {
    "line": 29,
    "text": "        return OrderType.order_long",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The decorator @to_string is used without context, which could lead to unexpected behavior if not properly defined",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      8284,
      6030,
      13,
      2875,
      62,
      6511
    ],
    "start_token": 46,
    "end_token": 60,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      11705,
      1352,
      2488,
      1462,
      62,
      8841,
      318,
      973,
      1231,
      4732,
      11,
      543,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      407,
      6105,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The decorator @to_string is used without context, which could lead to unexpected behavior if not properly defined"
  },
  {
    "line": 29,
    "text": "        return OrderType.order_long",
    "annotation": "\u2705 Best Practice: Ensure that the @to_string decorator is defined and used appropriately",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      8284,
      6030,
      13,
      2875,
      62,
      6511
    ],
    "start_token": 60,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      2488,
      1462,
      62,
      8841,
      11705,
      1352,
      318,
      5447,
      290,
      973,
      20431
    ],
    "label": "best_practice",
    "reason": "Ensure that the @to_string decorator is defined and used appropriately"
  },
  {
    "line": 50,
    "text": "    ):",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of object with multiple parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 74,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      2134,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Initialization of object with multiple parameters"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of timestamp values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 78,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      41033,
      3815
    ],
    "label": "ml_signal",
    "reason": "Assignment of timestamp values"
  },
  {
    "line": 54,
    "text": "        :param due_timestamp: the signal due time",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of timestamp values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      2233,
      62,
      16514,
      27823,
      25,
      262,
      6737,
      2233,
      640
    ],
    "start_token": 78,
    "end_token": 96,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      41033,
      3815
    ],
    "label": "ml_signal",
    "reason": "Assignment of timestamp values"
  },
  {
    "line": 56,
    "text": "        :param trading_level: the level",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of categorical values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      7313,
      62,
      5715,
      25,
      262,
      1241
    ],
    "start_token": 96,
    "end_token": 111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      4253,
      12409,
      3815
    ],
    "label": "ml_signal",
    "reason": "Assignment of categorical values"
  },
  {
    "line": 58,
    "text": "        :param position_pct: percentage of account to order",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of categorical values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      2292,
      62,
      79,
      310,
      25,
      5873,
      286,
      1848,
      284,
      1502
    ],
    "start_token": 111,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      4253,
      12409,
      3815
    ],
    "label": "ml_signal",
    "reason": "Assignment of categorical values"
  },
  {
    "line": 60,
    "text": "        :param order_amount: amount to order",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statement for input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1502,
      62,
      17287,
      25,
      2033,
      284,
      1502
    ],
    "start_token": 130,
    "end_token": 146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      2643,
      329,
      5128,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statement for input validation"
  },
  {
    "line": 63,
    "text": "        self.due_timestamp = due_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of financial parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23301,
      62,
      16514,
      27823,
      796,
      2233,
      62,
      16514,
      27823
    ],
    "start_token": 146,
    "end_token": 164,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      3176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Assignment of financial parameters"
  },
  {
    "line": 65,
    "text": "        self.trading_level = trading_level",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of financial parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      796,
      7313,
      62,
      5715
    ],
    "start_token": 164,
    "end_token": 181,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      3176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Assignment of financial parameters"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of financial parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 181,
    "end_token": 181,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      3176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Assignment of financial parameters"
  },
  {
    "line": 61,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Define a method that raises NotImplementedError to indicate it should be overridden in subclasses",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 181,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      2446,
      326,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      340,
      815,
      307,
      23170,
      4651,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Define a method that raises NotImplementedError to indicate it should be overridden in subclasses"
  },
  {
    "line": 63,
    "text": "        self.due_timestamp = due_timestamp",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising NotImplementedError without a message may not provide enough context for debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23301,
      62,
      16514,
      27823,
      796,
      2233,
      62,
      16514,
      27823
    ],
    "start_token": 189,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      1231,
      257,
      3275,
      743,
      407,
      2148,
      1576,
      4732,
      329,
      28769
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising NotImplementedError without a message may not provide enough context for debugging"
  },
  {
    "line": 63,
    "text": "        self.due_timestamp = due_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Method signature indicates a pattern for handling trading signals",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23301,
      62,
      16514,
      27823,
      796,
      2233,
      62,
      16514,
      27823
    ],
    "start_token": 207,
    "end_token": 225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      9217,
      257,
      3912,
      329,
      9041,
      7313,
      10425
    ],
    "label": "ml_signal",
    "reason": "Method signature indicates a pattern for handling trading signals"
  },
  {
    "line": 65,
    "text": "        self.trading_level = trading_level",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method not implemented, could lead to runtime errors if called",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      796,
      7313,
      62,
      5715
    ],
    "start_token": 225,
    "end_token": 242,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      407,
      9177,
      11,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method not implemented, could lead to runtime errors if called"
  },
  {
    "line": 65,
    "text": "        self.trading_level = trading_level",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      4980,
      62,
      5715,
      796,
      7313,
      62,
      5715
    ],
    "start_token": 242,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError is a common pattern for abstract methods",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      318,
      257,
      2219,
      3912,
      329,
      12531,
      5050
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError is a common pattern for abstract methods"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\u2705 Best Practice: Method signature is clear and self-explanatory",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      9877,
      318,
      1598,
      290,
      2116,
      12,
      1069,
      11578,
      2870
    ],
    "label": "best_practice",
    "reason": "Method signature is clear and self-explanatory"
  },
  {
    "line": 69,
    "text": "            assert False",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, which is expected for abstract methods but should be implemented in subclasses",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      10352
    ],
    "start_token": 259,
    "end_token": 272,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      543,
      318,
      2938,
      329,
      12531,
      5050,
      475,
      815,
      307,
      9177,
      287,
      850,
      37724
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, which is expected for abstract methods but should be implemented in subclasses"
  },
  {
    "line": 69,
    "text": "            assert False",
    "annotation": "\u2705 Best Practice: Method signature is clear and self-explanatory",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      10352
    ],
    "start_token": 272,
    "end_token": 285,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      9877,
      318,
      1598,
      290,
      2116,
      12,
      1069,
      11578,
      2870
    ],
    "label": "best_practice",
    "reason": "Method signature is clear and self-explanatory"
  },
  {
    "line": 71,
    "text": "        self.position_pct = position_pct",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising NotImplementedError can be a security risk if not handled properly in production",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9150,
      62,
      79,
      310,
      796,
      2292,
      62,
      79,
      310
    ],
    "start_token": 285,
    "end_token": 303,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      460,
      307,
      257,
      2324,
      2526,
      611,
      407,
      12118,
      6105,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising NotImplementedError can be a security risk if not handled properly in production"
  },
  {
    "line": 72,
    "text": "        # when close the position,just use position_pct",
    "annotation": "\u2705 Best Practice: Define a method body or raise NotImplementedError for unimplemented methods",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      618,
      1969,
      262,
      2292,
      11,
      3137,
      779,
      2292,
      62,
      79,
      310
    ],
    "start_token": 303,
    "end_token": 322,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      2446,
      1767,
      393,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      329,
      28418,
      1154,
      12061,
      5050
    ],
    "label": "best_practice",
    "reason": "Define a method body or raise NotImplementedError for unimplemented methods"
  },
  {
    "line": 74,
    "text": "        self.order_amount = order_amount",
    "annotation": "\u2705 Best Practice: Method docstring should describe all parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      62,
      17287,
      796,
      1502,
      62,
      17287
    ],
    "start_token": 322,
    "end_token": 338,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      2205,
      8841,
      815,
      6901,
      477,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Method docstring should describe all parameters and return values"
  },
  {
    "line": 75,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 338,
    "end_token": 338,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose"
  },
  {
    "line": 81,
    "text": "    def on_trading_signals(self, trading_signals: List[TradingSignal]):",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'pass' indicates an unimplemented or abstract method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2213,
      4980,
      62,
      12683,
      874,
      7,
      944,
      11,
      7313,
      62,
      12683,
      874,
      25,
      7343,
      58,
      2898,
      4980,
      11712,
      282,
      60,
      2599
    ],
    "start_token": 338,
    "end_token": 365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      6603,
      6,
      9217,
      281,
      28418,
      1154,
      12061,
      393,
      12531,
      2446
    ],
    "label": "ml_signal",
    "reason": "Use of 'pass' indicates an unimplemented or abstract method"
  },
  {
    "line": 80,
    "text": "",
    "annotation": "\u2705 Best Practice: Define the method to perform its intended functionality or remove it if not needed.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 365,
    "end_token": 365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      262,
      2446,
      284,
      1620,
      663,
      5292,
      11244,
      393,
      4781,
      340,
      611,
      407,
      2622,
      13
    ],
    "label": "best_practice",
    "reason": "Define the method to perform its intended functionality or remove it if not needed."
  },
  {
    "line": 82,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with parameters indicating a financial transaction or order",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 365,
    "end_token": 378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      10007,
      12739,
      257,
      3176,
      8611,
      393,
      1502
    ],
    "label": "ml_signal",
    "reason": "Method signature with parameters indicating a financial transaction or order"
  },
  {
    "line": 82,
    "text": "        raise NotImplementedError",
    "annotation": "\u2705 Best Practice: Method name is descriptive and indicates its purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 378,
    "end_token": 391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      318,
      35644,
      290,
      9217,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method name is descriptive and indicates its purpose"
  },
  {
    "line": 82,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'entity_id' suggests identification of a specific entity or user",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 391,
    "end_token": 404,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      26858,
      62,
      312,
      6,
      5644,
      11795,
      286,
      257,
      2176,
      9312,
      393,
      2836
    ],
    "label": "ml_signal",
    "reason": "Use of 'entity_id' suggests identification of a specific entity or user"
  },
  {
    "line": 88,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: 'order_price' indicates a financial transaction involving pricing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 404,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      705,
      2875,
      62,
      20888,
      6,
      9217,
      257,
      3176,
      8611,
      7411,
      13045
    ],
    "label": "ml_signal",
    "reason": "'order_price' indicates a financial transaction involving pricing"
  },
  {
    "line": 90,
    "text": "    def on_trading_error(self, timestamp, error):",
    "annotation": "\ud83e\udde0 ML Signal: 'order_timestamp' suggests tracking of time for the order",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2213,
      4980,
      62,
      18224,
      7,
      944,
      11,
      41033,
      11,
      4049,
      2599
    ],
    "start_token": 417,
    "end_token": 434,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      705,
      2875,
      62,
      16514,
      27823,
      6,
      5644,
      9646,
      286,
      640,
      329,
      262,
      1502
    ],
    "label": "ml_signal",
    "reason": "'order_timestamp' suggests tracking of time for the order"
  },
  {
    "line": 91,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: 'order_type' indicates different types of orders or transactions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 434,
    "end_token": 447,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      705,
      2875,
      62,
      4906,
      6,
      9217,
      1180,
      3858,
      286,
      6266,
      393,
      8945
    ],
    "label": "ml_signal",
    "reason": "'order_type' indicates different types of orders or transactions"
  },
  {
    "line": 91,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: 'order_position_pct' suggests a percentage-based order position",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 447,
    "end_token": 460,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      705,
      2875,
      62,
      9150,
      62,
      79,
      310,
      6,
      5644,
      257,
      5873,
      12,
      3106,
      1502,
      2292
    ],
    "label": "ml_signal",
    "reason": "'order_position_pct' suggests a percentage-based order position"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'pass' indicates a placeholder for future implementation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 460,
    "end_token": 460,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      6603,
      6,
      9217,
      257,
      46076,
      329,
      2003,
      7822
    ],
    "label": "best_practice",
    "reason": "Use of 'pass' indicates a placeholder for future implementation"
  },
  {
    "line": 91,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with parameters indicating a financial transaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 460,
    "end_token": 473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      10007,
      12739,
      257,
      3176,
      8611
    ],
    "label": "ml_signal",
    "reason": "Function signature with parameters indicating a financial transaction"
  },
  {
    "line": 109,
    "text": "    def order_by_position_pct(",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1502,
      62,
      1525,
      62,
      9150,
      62,
      79,
      310,
      7
    ],
    "start_token": 473,
    "end_token": 486,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  },
  {
    "line": 111,
    "text": "        entity_id,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Importing all symbols with '*' can lead to namespace pollution and potential conflicts",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      312,
      11
    ],
    "start_token": 486,
    "end_token": 497,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      17267,
      278,
      477,
      14354,
      351,
      705,
      9,
      6,
      460,
      1085,
      284,
      25745,
      12231,
      290,
      2785,
      12333
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Importing all symbols with '*' can lead to namespace pollution and potential conflicts"
  },
  {
    "line": 113,
    "text": "        order_timestamp,",
    "annotation": "\u2705 Best Practice: Aliasing __all__ to avoid overwriting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 497,
    "end_token": 509,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12104,
      2313,
      11593,
      439,
      834,
      284,
      3368,
      6993,
      799,
      278
    ],
    "label": "best_practice",
    "reason": "Aliasing __all__ to avoid overwriting"
  },
  {
    "line": 115,
    "text": "        order_position_pct: float,",
    "annotation": "\u2705 Best Practice: Extending __all__ to include symbols from imported modules",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      62,
      9150,
      62,
      79,
      310,
      25,
      12178,
      11
    ],
    "start_token": 509,
    "end_token": 525,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      284,
      2291,
      14354,
      422,
      17392,
      13103
    ],
    "label": "best_practice",
    "reason": "Extending __all__ to include symbols from imported modules"
  },
  {
    "line": 117,
    "text": "        pass",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Importing all symbols with '*' can lead to namespace pollution and potential conflicts",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1208
    ],
    "start_token": 525,
    "end_token": 533,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      17267,
      278,
      477,
      14354,
      351,
      705,
      9,
      6,
      460,
      1085,
      284,
      25745,
      12231,
      290,
      2785,
      12333
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Importing all symbols with '*' can lead to namespace pollution and potential conflicts"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Aliasing __all__ to avoid overwriting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 533,
    "end_token": 533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12104,
      2313,
      11593,
      439,
      834,
      284,
      3368,
      6993,
      799,
      278
    ],
    "label": "best_practice",
    "reason": "Aliasing __all__ to avoid overwriting"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Extending __all__ to include symbols from imported modules",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 533,
    "end_token": 533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      284,
      2291,
      14354,
      422,
      17392,
      13103
    ],
    "label": "best_practice",
    "reason": "Extending __all__ to include symbols from imported modules"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Importing all symbols with '*' can lead to namespace pollution and potential conflicts",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 533,
    "end_token": 533,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      17267,
      278,
      477,
      14354,
      351,
      705,
      9,
      6,
      460,
      1085,
      284,
      25745,
      12231,
      290,
      2785,
      12333
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Importing all symbols with '*' can lead to namespace pollution and potential conflicts"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Aliasing __all__ to avoid overwriting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 533,
    "end_token": 533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12104,
      2313,
      11593,
      439,
      834,
      284,
      3368,
      6993,
      799,
      278
    ],
    "label": "best_practice",
    "reason": "Aliasing __all__ to avoid overwriting"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Extending __all__ to include symbols from imported modules",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 533,
    "end_token": 533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      284,
      2291,
      14354,
      422,
      17392,
      13103
    ],
    "label": "best_practice",
    "reason": "Extending __all__ to include symbols from imported modules"
  }
]
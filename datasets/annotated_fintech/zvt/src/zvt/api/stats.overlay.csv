annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,0,ml_signal,6,Importing specific functions from a module indicates selective usage patterns,,0,,[]
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,0,ml_signal,8,Importing specific functions from a module indicates selective usage patterns,,0,,[]
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,18,ml_signal,10,Importing specific functions from a module indicates selective usage patterns,,0,from zvt.api.selector import get_entity_ids_by_filter,"[6738, 1976, 36540, 13, 15042, 13, 19738, 273, 1330, 651, 62, 26858, 62, 2340, 62, 1525, 62, 24455]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,44,ml_signal,13,Importing specific functions from a module indicates selective usage patterns,,18,"from zvt.contract.api import decode_entity_id, get_entity_schema, get_entity_ids","[6738, 1976, 36540, 13, 28484, 13, 15042, 1330, 36899, 62, 26858, 62, 312, 11, 651, 62, 26858, 62, 15952, 2611, 11, 651, 62, 26858, 62, 2340]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,55,ml_signal,14,Importing specific functions from a module indicates selective usage patterns,,44,from zvt.contract.drawer import Drawer,"[6738, 1976, 36540, 13, 28484, 13, 19334, 263, 1330, 15315, 263]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,65,ml_signal,21,Importing specific functions from a module indicates selective usage patterns,,55,"    now_pd_timestamp,","[220, 220, 220, 783, 62, 30094, 62, 16514, 27823, 11]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,75,ml_signal,21,Importing specific functions from a module indicates selective usage patterns,,65,"    now_pd_timestamp,","[220, 220, 220, 783, 62, 30094, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Use of a logger for the module allows for better debugging and monitoring,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 49706, 329, 262, 8265, 3578, 329, 1365, 28769, 290, 9904]",0.5,84,best_practice,28,Use of a logger for the module allows for better debugging and monitoring,,75,class WindowMethod(enum.Enum):,"[4871, 26580, 17410, 7, 44709, 13, 4834, 388, 2599]"
‚úÖ Best Practice: Use of enum for defining a set of related constants,"[26486, 227, 6705, 19939, 25, 5765, 286, 33829, 329, 16215, 257, 900, 286, 3519, 38491]",0.5,96,best_practice,22,Use of enum for defining a set of related constants,,84,"    date_time_by_interval,","[220, 220, 220, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11]"
‚úÖ Best Practice: Enums should inherit from enum.Enum for clarity and consistency,"[26486, 227, 6705, 19939, 25, 2039, 5700, 815, 16955, 422, 33829, 13, 4834, 388, 329, 16287, 290, 15794]",0.5,96,best_practice,26,Enums should inherit from enum.Enum for clarity and consistency,,96,,[]
üß† ML Signal: Enum members can indicate categorical data usage,"[8582, 100, 254, 10373, 26484, 25, 2039, 388, 1866, 460, 7603, 4253, 12409, 1366, 8748]",0.5,105,ml_signal,28,Enum members can indicate categorical data usage,,96,class WindowMethod(enum.Enum):,"[4871, 26580, 17410, 7, 44709, 13, 4834, 388, 2599]"
üß† ML Signal: Enum members can indicate categorical data usage,"[8582, 100, 254, 10373, 26484, 25, 2039, 388, 1866, 460, 7603, 4253, 12409, 1366, 8748]",0.5,113,ml_signal,29,Enum members can indicate categorical data usage,,105,"    change = ""change""","[220, 220, 220, 1487, 796, 366, 3803, 1]"
‚úÖ Best Practice: Use of default parameter values for function arguments,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 2163, 7159]",0.5,121,best_practice,29,Use of default parameter values for function arguments,,113,"    change = ""change""","[220, 220, 220, 1487, 796, 366, 3803, 1]"
üß† ML Signal: Iterating over a range of dates to process data in chunks,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2837, 286, 9667, 284, 1429, 1366, 287, 22716]",0.5,121,ml_signal,37,Iterating over a range of dates to process data in chunks,,121,,[]
üß† ML Signal: Function call pattern with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 351, 3294, 10007]",0.5,130,ml_signal,40,Function call pattern with multiple parameters,,121,"    entity_type=""stock"",","[220, 220, 220, 9312, 62, 4906, 2625, 13578, 1600]"
üß† ML Signal: Use of generator to yield results,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 17301, 284, 7800, 2482]",0.5,140,ml_signal,48,Use of generator to yield results,,130,    for month_range in ranges:,"[220, 220, 220, 329, 1227, 62, 9521, 287, 16069, 25]"
‚úÖ Best Practice: Use of default values for function parameters improves function usability and flexibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 3815, 329, 2163, 10007, 19575, 2163, 42863, 290, 13688, 13]",0.5,148,best_practice,63,Use of default values for function parameters improves function usability and flexibility.,,140,"    entity_provider,","[220, 220, 220, 9312, 62, 15234, 1304, 11]"
‚úÖ Best Practice: Using dict.fromkeys to remove duplicates while preserving order.,"[26486, 227, 6705, 19939, 25, 8554, 8633, 13, 6738, 13083, 284, 4781, 14184, 16856, 981, 23934, 1502, 13]",0.5,166,best_practice,138,Using dict.fromkeys to remove duplicates while preserving order.,,148,        current_end = trade_days[-1],"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 437, 796, 3292, 62, 12545, 58, 12, 16, 60]"
‚úÖ Best Practice: Check for None to provide default behavior for adjust_type,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 2148, 4277, 4069, 329, 4532, 62, 4906]",0.5,183,best_practice,153,Check for None to provide default behavior for adjust_type,,166,        if return_type == TopType.positive:,"[220, 220, 220, 220, 220, 220, 220, 611, 1441, 62, 4906, 6624, 5849, 6030, 13, 24561, 25]"
üß† ML Signal: Usage of dynamic schema based on entity type and adjust type,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 32815, 1912, 319, 9312, 2099, 290, 4532, 2099]",1.0,199,ml_signal,156,Usage of dynamic schema based on entity type and adjust type,,183,            df = negative_df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 4633, 62, 7568]"
‚úÖ Best Practice: Initialize mutable default arguments inside the function,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4517, 540, 4277, 7159, 2641, 262, 2163]",0.5,227,best_practice,158,Initialize mutable default arguments inside the function,,199,            selected = selected + df.index[:top_count].tolist(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6163, 796, 6163, 1343, 47764, 13, 9630, 58, 25, 4852, 62, 9127, 4083, 83, 349, 396, 3419]"
üß† ML Signal: Usage of historical data based on list_days,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6754, 1366, 1912, 319, 1351, 62, 12545]",0.5,227,ml_signal,162,Usage of historical data based on list_days,,227,,[]
üß† ML Signal: Filtering entities based on dynamic conditions,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 12066, 1912, 319, 8925, 3403]",0.5,237,ml_signal,167,Filtering entities based on dynamic conditions,,227,"    pct=0.1,","[220, 220, 220, 279, 310, 28, 15, 13, 16, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential information exposure through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 7111, 832, 18931]",0.5,246,sast_risk,173,Potential information exposure through logging,Low,237,"    list_days=None,","[220, 220, 220, 1351, 62, 12545, 28, 14202, 11]"
‚úÖ Best Practice: Initialize mutable default arguments inside the function,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4517, 540, 4277, 7159, 2641, 262, 2163]",0.5,255,best_practice,173,Initialize mutable default arguments inside the function,,246,"    list_days=None,","[220, 220, 220, 1351, 62, 12545, 28, 14202, 11]"
üß† ML Signal: Combining filters for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 14336, 3191, 16628, 329, 1366, 45069]",0.5,264,ml_signal,173,Combining filters for data retrieval,,255,"    list_days=None,","[220, 220, 220, 1351, 62, 12545, 28, 14202, 11]"
üß† ML Signal: Usage of top entities retrieval with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1353, 12066, 45069, 351, 2176, 10007]",0.5,294,ml_signal,185,Usage of top entities retrieval with specific parameters,,264,"        list_date = date_time_by_interval(start_timestamp, -list_days)","[220, 220, 220, 220, 220, 220, 220, 1351, 62, 4475, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7, 9688, 62, 16514, 27823, 11, 532, 4868, 62, 12545, 8]"
‚úÖ Best Practice: Defaulting to current timestamp if none is provided,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 1459, 41033, 611, 4844, 318, 2810]",1.0,294,best_practice,187,Defaulting to current timestamp if none is provided,,294,,[]
üß† ML Signal: Usage of recent report date for filtering data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2274, 989, 3128, 329, 25431, 1366]",0.5,308,ml_signal,189,Usage of recent report date for filtering data,,294,"        provider=entity_provider,","[220, 220, 220, 220, 220, 220, 220, 10131, 28, 26858, 62, 15234, 1304, 11]"
üß† ML Signal: Querying data with specific filters and columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 290, 15180]",1.0,322,ml_signal,189,Querying data with specific filters and columns,,308,"        provider=entity_provider,","[220, 220, 220, 220, 220, 220, 220, 10131, 28, 26858, 62, 15234, 1304, 11]"
üß† ML Signal: Filtering data based on report date and timestamp,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 989, 3128, 290, 41033]",1.0,322,ml_signal,196,Filtering data based on report date and timestamp,,322,,[]
üß† ML Signal: Grouping and sorting data by market cap,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 29407, 1366, 416, 1910, 1451]",1.0,322,ml_signal,200,Grouping and sorting data by market cap,,322,,[]
üß† ML Signal: Selecting top percentage of stocks based on market cap,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 1353, 5873, 286, 14420, 1912, 319, 1910, 1451]",0.5,339,ml_signal,203,Selecting top percentage of stocks based on market cap,,322,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",0.5,352,best_practice,206,Using descriptive variable names for clarity,,339,"        pct=pct,","[220, 220, 220, 220, 220, 220, 220, 279, 310, 28, 79, 310, 11]"
üß† ML Signal: Converting index to list for further processing,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6376, 284, 1351, 329, 2252, 7587]",1.0,352,ml_signal,214,Converting index to list for further processing,,352,,[]
üß† ML Signal: Calculating start timestamp for data filtering,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 923, 41033, 329, 1366, 25431]",1.0,352,ml_signal,214,Calculating start timestamp for data filtering,,352,,[]
üß† ML Signal: Querying stock valuation data with specific filters and columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 4283, 29115, 1366, 351, 2176, 16628, 290, 15180]",1.0,379,ml_signal,215,Querying stock valuation data with specific filters and columns,,352,"def get_top_fund_holding_stocks(timestamp=None, pct=0.3, by=None):","[4299, 651, 62, 4852, 62, 10990, 62, 19216, 62, 29522, 7, 16514, 27823, 28, 14202, 11, 279, 310, 28, 15, 13, 18, 11, 416, 28, 14202, 2599]"
üß† ML Signal: Filtering data based on timestamp range,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 41033, 2837]",1.0,430,ml_signal,219,Filtering data based on timestamp range,,379,    # ÊâÄ‰ª•ÂèñÊó∂Èó¥ÁÇπÁöÑÊúÄËøëÁöÑ‰∏§‰∏™ÂÖ¨Â∏ÉÁÇπÔºå‰øùËØÅÂèñÂà∞Êï∞ÊçÆ,"[220, 220, 220, 1303, 10545, 231, 222, 20015, 98, 20998, 244, 33768, 114, 29785, 112, 163, 224, 117, 21410, 17312, 222, 32573, 239, 21410, 10310, 97, 10310, 103, 17739, 105, 30585, 225, 163, 224, 117, 171, 120, 234, 46479, 251, 46237, 223, 20998, 244, 26344, 108, 46763, 108, 162, 235, 106]"
‚úÖ Best Practice: Renaming columns for consistency,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 15794]",1.0,452,best_practice,224,Renaming columns for consistency,,430,"            FundStock.report_date >= report_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7557, 26207, 13, 13116, 62, 4475, 18189, 989, 62, 4475, 11]"
üß† ML Signal: Grouping data by entity_id and calculating mean,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 1366, 416, 9312, 62, 312, 290, 26019, 1612]",1.0,481,ml_signal,231,Grouping data by entity_id and calculating mean,,452,    # Áõ¥Êé•Ê†πÊçÆÊåÅÊúâÂ∏ÇÂÄºËøîÂõû,"[220, 220, 220, 1303, 13328, 249, 112, 162, 236, 98, 43718, 117, 162, 235, 106, 162, 234, 223, 17312, 231, 30585, 224, 161, 222, 120, 32573, 242, 32368, 252]"
üß† ML Signal: Merging dataframes to calculate percentage,"[8582, 100, 254, 10373, 26484, 25, 4638, 2667, 1366, 37805, 284, 15284, 5873]",1.0,488,ml_signal,232,Merging dataframes to calculate percentage,,481,    if not by:,"[220, 220, 220, 611, 407, 416, 25]"
üß† ML Signal: Calculating percentage of market cap,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 5873, 286, 1910, 1451]",0.5,488,ml_signal,234,Calculating percentage of market cap,,488,,[]
üß† ML Signal: Sorting percentage values in descending order,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 5873, 3815, 287, 31491, 1502]",0.5,502,ml_signal,235,Sorting percentage values in descending order,,488,        return s.to_frame(),"[220, 220, 220, 220, 220, 220, 220, 1441, 264, 13, 1462, 62, 14535, 3419]"
üß† ML Signal: Selecting top percentage of stocks based on calculated percentage,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 1353, 5873, 286, 14420, 1912, 319, 10488, 5873]",0.5,516,ml_signal,235,Selecting top percentage of stocks based on calculated percentage,,502,        return s.to_frame(),"[220, 220, 220, 220, 220, 220, 220, 1441, 264, 13, 1462, 62, 14535, 3419]"
üß† ML Signal: Function with multiple optional parameters indicating flexible usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3294, 11902, 10007, 12739, 12846, 8748, 7572]",1.0,538,ml_signal,224,Function with multiple optional parameters indicating flexible usage patterns,,516,"            FundStock.report_date >= report_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7557, 26207, 13, 13116, 62, 4475, 18189, 989, 62, 4475, 11]"
üß† ML Signal: Decoding entity ID to determine entity type,"[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 9312, 4522, 284, 5004, 9312, 2099]",0.5,545,ml_signal,232,Decoding entity ID to determine entity type,,538,    if not by:,"[220, 220, 220, 611, 407, 416, 25]"
‚úÖ Best Practice: Default value assignment for optional parameter,"[26486, 227, 6705, 19939, 25, 15161, 1988, 16237, 329, 11902, 11507]",0.5,559,best_practice,235,Default value assignment for optional parameter,,545,        return s.to_frame(),"[220, 220, 220, 220, 220, 220, 220, 1441, 264, 13, 1462, 62, 14535, 3419]"
üß† ML Signal: Dynamic schema retrieval based on entity type and adjustment type,"[8582, 100, 254, 10373, 26484, 25, 26977, 32815, 45069, 1912, 319, 9312, 2099, 290, 15068, 2099]",0.5,573,ml_signal,235,Dynamic schema retrieval based on entity type and adjustment type,,559,        return s.to_frame(),"[220, 220, 220, 220, 220, 220, 220, 1441, 264, 13, 1462, 62, 14535, 3419]"
üß† ML Signal: Usage of a function to get top entities based on performance,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 651, 1353, 12066, 1912, 319, 2854]",0.5,587,ml_signal,235,Usage of a function to get top entities based on performance,,573,        return s.to_frame(),"[220, 220, 220, 220, 220, 220, 220, 1441, 264, 13, 1462, 62, 14535, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if entity_ids are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 9312, 62, 2340, 389, 407, 5336, 36951]",0.5,602,sast_risk,247,Potential SQL injection risk if entity_ids are not sanitized,Low,587,"        entity_ids=entity_ids,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 26858, 62, 2340, 11]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,612,best_practice,254,Use of descriptive variable names improves code readability.,,602,"    if by == ""trading"":","[220, 220, 220, 611, 416, 6624, 366, 2213, 4980, 1298]"
üß† ML Signal: Logging information about the process can be used to understand usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 262, 1429, 460, 307, 973, 284, 1833, 8748, 7572, 13]",0.5,643,ml_signal,260,Logging information about the process can be used to understand usage patterns.,,612,"    result_df = pd.concat([cap_df, fund_cap_df], axis=1, join=""inner"")","[220, 220, 220, 1255, 62, 7568, 796, 279, 67, 13, 1102, 9246, 26933, 11128, 62, 7568, 11, 1814, 62, 11128, 62, 7568, 4357, 16488, 28, 16, 11, 4654, 2625, 5083, 4943]"
‚úÖ Best Practice: Using f-strings for string formatting is more readable and efficient.,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 37336, 329, 4731, 33313, 318, 517, 31744, 290, 6942, 13]",0.5,648,best_practice,270,Using f-strings for string formatting is more readable and efficient.,,643,def get_performance(,"[4299, 651, 62, 26585, 7]"
‚úÖ Best Practice: Returning a DataFrame directly from a dictionary is efficient and concise.,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 3264, 422, 257, 22155, 318, 6942, 290, 35327, 13]",0.5,653,best_practice,270,Returning a DataFrame directly from a dictionary is efficient and concise.,,648,def get_performance(,"[4299, 651, 62, 26585, 7]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,662,best_practice,278,Use of default parameter values for flexibility and ease of use,,653,    if not adjust_type:,"[220, 220, 220, 611, 407, 4532, 62, 4906, 25]"
üß† ML Signal: Dynamic schema selection based on entity type and adjust type,"[8582, 100, 254, 10373, 26484, 25, 26977, 32815, 6356, 1912, 319, 9312, 2099, 290, 4532, 2099]",0.5,662,ml_signal,281,Dynamic schema selection based on entity type and adjust type,,662,,[]
üß† ML Signal: Use of top entities function to filter data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1353, 12066, 2163, 284, 8106, 1366]",0.5,662,ml_signal,281,Use of top entities function to filter data,,662,,[]
‚úÖ Best Practice: Check for null data before processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 9242, 1366, 878, 7587]",0.5,662,best_practice,294,Check for null data before processing,,662,,[]
üß† ML Signal: Categorization of data based on score ranges,"[8582, 100, 254, 10373, 26484, 25, 327, 47467, 1634, 286, 1366, 1912, 319, 4776, 16069]",0.5,679,ml_signal,300,Categorization of data based on score ranges,,662,"    adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for large data processing in memory,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 1366, 7587, 287, 4088]",0.5,696,sast_risk,300,Potential for large data processing in memory,Low,679,"    adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,713,best_practice,300,Use of default parameter values for flexibility and ease of use,,696,"    adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Checking for None to set default values,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 284, 900, 4277, 3815]",0.5,734,best_practice,313,Checking for None to set default values,,713,"            end_timestamp=end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11]"
üß† ML Signal: Usage of dynamic schema based on entity type and adjust type,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 32815, 1912, 319, 9312, 2099, 290, 4532, 2099]",1.0,742,ml_signal,316,Usage of dynamic schema based on entity type and adjust type,,734,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Conditional logic to append filters only when necessary,"[26486, 227, 6705, 19939, 25, 9724, 1859, 9156, 284, 24443, 16628, 691, 618, 3306]",0.5,742,best_practice,319,Conditional logic to append filters only when necessary,,742,,[]
üß† ML Signal: Pattern of retrieving top entities based on various parameters,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 50122, 1353, 12066, 1912, 319, 2972, 10007]",1.0,766,ml_signal,320,Pattern of retrieving top entities based on various parameters,,742,"    return pd.DataFrame.from_dict(data=month_stats, orient=""index"")","[220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 13, 6738, 62, 11600, 7, 7890, 28, 8424, 62, 34242, 11, 11367, 2625, 9630, 4943]"
‚úÖ Best Practice: Use of default values for function parameters improves usability and reduces errors.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 3815, 329, 2163, 10007, 19575, 42863, 290, 12850, 8563, 13]",0.5,770,best_practice,344,Use of default values for function parameters improves usability and reduces errors.,,766,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Dynamic schema selection based on entity type and adjust type.,"[8582, 100, 254, 10373, 26484, 25, 26977, 32815, 6356, 1912, 319, 9312, 2099, 290, 4532, 2099, 13]",1.0,780,ml_signal,347,Dynamic schema selection based on entity type and adjust type.,,770,        result = {},"[220, 220, 220, 220, 220, 220, 220, 1255, 796, 23884]"
üß† ML Signal: Filtering based on entity IDs indicates user-specific data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1912, 319, 9312, 32373, 9217, 2836, 12, 11423, 1366, 45069, 13]",0.5,807,ml_signal,351,Filtering based on entity IDs indicates user-specific data retrieval.,,780,"            key = f""pct_{range_start}_{range_end}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1994, 796, 277, 1, 79, 310, 23330, 9521, 62, 9688, 92, 23330, 9521, 62, 437, 36786]"
üß† ML Signal: Use of threshold for filtering indicates interest in specific data ranges.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11387, 329, 25431, 9217, 1393, 287, 2176, 1366, 16069, 13]",0.5,849,ml_signal,352,Use of threshold for filtering indicates interest in specific data ranges.,,807,"            df = score_df[(score_df[""score""] >= range_start) & (score_df[""score""] < range_end)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 4776, 62, 7568, 58, 7, 26675, 62, 7568, 14692, 26675, 8973, 18189, 2837, 62, 9688, 8, 1222, 357, 26675, 62, 7568, 14692, 26675, 8973, 1279, 2837, 62, 437, 15437]"
‚úÖ Best Practice: Returning results directly from a function is clear and concise.,"[26486, 227, 6705, 19939, 25, 42882, 2482, 3264, 422, 257, 2163, 318, 1598, 290, 35327, 13]",0.5,866,best_practice,364,Returning results directly from a function is clear and concise.,,849,"    adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Use of isinstance() is preferred over type() for type checking,"[26486, 227, 6705, 19939, 25, 5765, 286, 318, 39098, 3419, 318, 9871, 625, 2099, 3419, 329, 2099, 10627]",1.0,870,best_practice,390,Use of isinstance() is preferred over type() for type checking,,866,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Use of isinstance() is preferred over type() for type checking,"[26486, 227, 6705, 19939, 25, 5765, 286, 318, 39098, 3419, 318, 9871, 625, 2099, 3419, 329, 2099, 10627]",1.0,870,best_practice,393,Use of isinstance() is preferred over type() for type checking,,870,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 6105, 5447, 393, 17392]",0.5,895,sast_risk,407,Potential risk if pd_is_not_null is not properly defined or imported,Low,870,        adjust_type = default_adjust_type(entity_type=entity_type),"[220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 796, 4277, 62, 23032, 62, 4906, 7, 26858, 62, 4906, 28, 26858, 62, 4906, 8]"
üß† ML Signal: Sorting and slicing operations on dictionaries,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 290, 49289, 4560, 319, 48589, 3166]",1.0,906,ml_signal,432,Sorting and slicing operations on dictionaries,,895,"    data_schema: Mixin,","[220, 220, 220, 1366, 62, 15952, 2611, 25, 15561, 259, 11]"
‚úÖ Best Practice: Chained operations should be split into separate lines for clarity,"[26486, 227, 6705, 19939, 25, 609, 1328, 4560, 815, 307, 6626, 656, 4553, 3951, 329, 16287]",0.5,918,best_practice,438,Chained operations should be split into separate lines for clarity,,906,"    return_type: TopType = None,","[220, 220, 220, 1441, 62, 4906, 25, 5849, 6030, 796, 6045, 11]"
üß† ML Signal: Sorting and slicing operations on dictionaries,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 290, 49289, 4560, 319, 48589, 3166]",1.0,928,ml_signal,441,Sorting and slicing operations on dictionaries,,918,"    data_provider=None,","[220, 220, 220, 1366, 62, 15234, 1304, 28, 14202, 11]"
‚úÖ Best Practice: Chained operations should be split into separate lines for clarity,"[26486, 227, 6705, 19939, 25, 609, 1328, 4560, 815, 307, 6626, 656, 4553, 3951, 329, 16287]",0.5,937,best_practice,447,Chained operations should be split into separate lines for clarity,,928,    :param column: schema column,"[220, 220, 220, 1058, 17143, 5721, 25, 32815, 5721]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 6105, 5447, 393, 17392]",0.5,951,sast_risk,450,Potential risk if pd_is_not_null is not properly defined or imported,Low,937,"    :param pct: range (0,1]","[220, 220, 220, 1058, 17143, 279, 310, 25, 2837, 357, 15, 11, 16, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 6105, 5447, 393, 17392]",0.5,961,sast_risk,453,Potential risk if pd_is_not_null is not properly defined or imported,Low,951,    :param entity_filters:,"[220, 220, 220, 1058, 17143, 9312, 62, 10379, 1010, 25]"
"üß† ML Signal: Function definition with no parameters, indicating a potential utility or helper function","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 2785, 10361, 393, 31904, 2163]",1.0,971,ml_signal,448,"Function definition with no parameters, indicating a potential utility or helper function",,961,    :param start_timestamp:,"[220, 220, 220, 1058, 17143, 923, 62, 16514, 27823, 25]"
"üß† ML Signal: Iterating over a function call, indicating a pattern of processing data in chunks","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2163, 869, 11, 12739, 257, 3912, 286, 7587, 1366, 287, 22716]",0.5,978,ml_signal,451,"Iterating over a function call, indicating a pattern of processing data in chunks",,971,    :param method:,"[220, 220, 220, 1058, 17143, 2446, 25]"
‚ö†Ô∏è SAST Risk (Low): Assuming df is a DataFrame without checking its type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33238, 47764, 318, 257, 6060, 19778, 1231, 10627, 663, 2099]",0.5,988,sast_risk,453,Assuming df is a DataFrame without checking its type,Low,978,    :param entity_filters:,"[220, 220, 220, 1058, 17143, 9312, 62, 10379, 1010, 25]"
‚úÖ Best Practice: Resetting index for DataFrame to ensure clean data,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 6060, 19778, 284, 4155, 3424, 1366]",1.0,1000,best_practice,455,Resetting index for DataFrame to ensure clean data,,988,    :param show_name: show entity name,"[220, 220, 220, 1058, 17143, 905, 62, 3672, 25, 905, 9312, 1438]"
"üß† ML Signal: Adding a constant column, indicating a labeling or categorization pattern","[8582, 100, 254, 10373, 26484, 25, 18247, 257, 6937, 5721, 11, 12739, 257, 27393, 393, 17851, 1634, 3912]",0.5,1004,ml_signal,457,"Adding a constant column, indicating a labeling or categorization pattern",,1000,"    """"""","[220, 220, 220, 37227]"
"üß† ML Signal: Adding a timestamp column, indicating a time-series data pattern","[8582, 100, 254, 10373, 26484, 25, 18247, 257, 41033, 5721, 11, 12739, 257, 640, 12, 25076, 1366, 3912]",0.5,1018,ml_signal,459,"Adding a timestamp column, indicating a time-series data pattern",,1004,        method = WindowMethod(method),"[220, 220, 220, 220, 220, 220, 220, 2446, 796, 26580, 17410, 7, 24396, 8]"
‚ö†Ô∏è SAST Risk (Low): Assuming dfs is not empty before concatenation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33238, 288, 9501, 318, 407, 6565, 878, 1673, 36686, 341]",0.5,1036,sast_risk,462,Assuming dfs is not empty before concatenation,Low,1018,        return_type = TopType(return_type),"[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 796, 5849, 6030, 7, 7783, 62, 4906, 8]"
"‚ö†Ô∏è SAST Risk (Low): Using print for potentially large DataFrame, which can lead to performance issues","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3601, 329, 6196, 1588, 6060, 19778, 11, 543, 460, 1085, 284, 2854, 2428]",0.5,1044,sast_risk,464,"Using print for potentially large DataFrame, which can lead to performance issues",Low,1036,    if show_name:,"[220, 220, 220, 611, 905, 62, 3672, 25]"
"üß† ML Signal: Instantiating a Drawer object, indicating a pattern of data visualization","[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 257, 15315, 263, 2134, 11, 12739, 257, 3912, 286, 1366, 32704]",0.5,1049,ml_signal,466,"Instantiating a Drawer object, indicating a pattern of data visualization",,1044,    else:,"[220, 220, 220, 2073, 25]"
"üß† ML Signal: Calling a draw method with a show parameter, indicating an interactive visualization pattern","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 3197, 2446, 351, 257, 905, 11507, 11, 12739, 281, 14333, 32704, 3912]",0.5,1049,ml_signal,468,"Calling a draw method with a show parameter, indicating an interactive visualization pattern",,1049,,[]
üß† ML Signal: Function definition with parameters indicating a pattern of data processing,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 286, 1366, 7587]",1.0,1049,ml_signal,460,Function definition with parameters indicating a pattern of data processing,,1049,,[]
üß† ML Signal: Querying data from a specific provider and filtering by category,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 2176, 10131, 290, 25431, 416, 6536]",1.0,1067,ml_signal,462,Querying data from a specific provider and filtering by category,,1049,        return_type = TopType(return_type),"[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 796, 5849, 6030, 7, 7783, 62, 4906, 8]"
üß† ML Signal: Converting DataFrame index to a list,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 6376, 284, 257, 1351]",1.0,1075,ml_signal,464,Converting DataFrame index to a list,,1067,    if show_name:,"[220, 220, 220, 611, 905, 62, 3672, 25]"
üß† ML Signal: Querying data with specific entity_ids and filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 9312, 62, 2340, 290, 16628]",1.0,1080,ml_signal,466,Querying data with specific entity_ids and filters,,1075,    else:,"[220, 220, 220, 2073, 25]"
üß† ML Signal: Counting occurrences of values in a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 286, 3815, 287, 257, 6060, 19778, 5721]",1.0,1080,ml_signal,468,Counting occurrences of values in a DataFrame column,,1080,,[]
üß† ML Signal: Creating a DataFrame with specific columns and data,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 351, 2176, 15180, 290, 1366]",1.0,1097,ml_signal,470,Creating a DataFrame with specific columns and data,,1080,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Assigning constant values to DataFrame columns for consistency,"[26486, 227, 6705, 19939, 25, 2195, 38944, 6937, 3815, 284, 6060, 19778, 15180, 329, 15794]",1.0,1114,best_practice,470,Assigning constant values to DataFrame columns for consistency,,1097,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Assigning timestamp to DataFrame for temporal data tracking,"[26486, 227, 6705, 19939, 25, 2195, 38944, 41033, 284, 6060, 19778, 329, 21964, 1366, 9646]",1.0,1128,best_practice,474,Assigning timestamp to DataFrame for temporal data tracking,,1114,"        provider=data_provider,","[220, 220, 220, 220, 220, 220, 220, 10131, 28, 7890, 62, 15234, 1304, 11]"
üß† ML Signal: Instantiating a Drawer object with a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 257, 15315, 263, 2134, 351, 257, 6060, 19778]",1.0,1139,ml_signal,477,Instantiating a Drawer object with a DataFrame,,1128,"        return None, None","[220, 220, 220, 220, 220, 220, 220, 1441, 6045, 11, 6045]"
üß† ML Signal: Drawing a pie chart with a specific parameter,"[8582, 100, 254, 10373, 26484, 25, 40027, 257, 2508, 8262, 351, 257, 2176, 11507]",1.0,1155,ml_signal,478,Drawing a pie chart with a specific parameter,,1139,"    g = all_df.groupby(""entity_id"")","[220, 220, 220, 308, 796, 477, 62, 7568, 13, 8094, 1525, 7203, 26858, 62, 312, 4943]"
‚úÖ Best Practice: Use of default parameter values for function arguments,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 2163, 7159]",1.0,1172,best_practice,470,Use of default parameter values for function arguments,,1155,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Type hinting for the 'adjust_type' parameter improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 705, 23032, 62, 4906, 6, 11507, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1189,best_practice,470,Type hinting for the 'adjust_type' parameter improves code readability and maintainability,,1172,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
üß† ML Signal: Usage of boolean indexing to filter DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 25131, 6376, 278, 284, 8106, 6060, 19778, 15274]",0.5,1205,ml_signal,478,Usage of boolean indexing to filter DataFrame rows,,1189,"    g = all_df.groupby(""entity_id"")","[220, 220, 220, 308, 796, 477, 62, 7568, 13, 8094, 1525, 7203, 26858, 62, 312, 4943]"
üß† ML Signal: Usage of boolean negation to filter DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 25131, 2469, 341, 284, 8106, 6060, 19778, 15274]",0.5,1211,ml_signal,480,Usage of boolean negation to filter DataFrame rows,,1205,    names = {},"[220, 220, 220, 3891, 796, 23884]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'other' is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 847, 6, 318, 6565]",0.5,1226,sast_risk,482,Potential division by zero if 'other' is empty,Low,1211,        if method == WindowMethod.change:,"[220, 220, 220, 220, 220, 220, 220, 611, 2446, 6624, 26580, 17410, 13, 3803, 25]"
‚úÖ Best Practice: Use of default value assignment if variable is None or False,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 1988, 16237, 611, 7885, 318, 6045, 393, 10352]",0.5,1242,best_practice,485,Use of default value assignment if variable is None or False,,1226,            if start != 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 923, 14512, 657, 25]"
üß† ML Signal: Dynamic schema retrieval based on parameters,"[8582, 100, 254, 10373, 26484, 25, 26977, 32815, 45069, 1912, 319, 10007]",0.5,1255,ml_signal,487,Dynamic schema retrieval based on parameters,,1242,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",0.5,1274,ml_signal,489,Querying data with specific filters,,1255,            tops[entity_id] = change,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 21246, 58, 26858, 62, 312, 60, 796, 1487]"
üß† ML Signal: Creating a new boolean column based on a condition,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 25131, 5721, 1912, 319, 257, 4006]",0.5,1291,ml_signal,490,Creating a new boolean column based on a condition,,1274,        elif method == WindowMethod.avg:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2446, 6624, 26580, 17410, 13, 615, 70, 25]"
üß† ML Signal: Grouping and applying a function to each group,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 11524, 257, 2163, 284, 1123, 1448]",0.5,1308,ml_signal,490,Grouping and applying a function to each group,,1291,        elif method == WindowMethod.avg:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2446, 6624, 26580, 17410, 13, 615, 70, 25]"
‚úÖ Best Practice: Use of __name__ guard for script entry point,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 329, 4226, 5726, 966]",0.5,1325,best_practice,490,Use of __name__ guard for script entry point,,1308,        elif method == WindowMethod.avg:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2446, 6624, 26580, 17410, 13, 615, 70, 25]"
‚úÖ Best Practice: Explicitly defining __all__ for module exports,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 11593, 439, 834, 329, 8265, 15319]",0.5,1342,best_practice,490,Explicitly defining __all__ for module exports,,1325,        elif method == WindowMethod.avg:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2446, 6624, 26580, 17410, 13, 615, 70, 25]"

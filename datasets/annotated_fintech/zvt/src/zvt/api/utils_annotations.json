[
  {
    "line": 2,
    "text": "from typing import Type",
    "annotation": "\u2705 Best Practice: Group imports from the same module together for better readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      5994
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports from the same module together for better readability."
  },
  {
    "line": 4,
    "text": "from zvt.contract import Mixin",
    "annotation": "\u2705 Best Practice: Group imports from the same module together for better readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      1330,
      15561,
      259
    ],
    "start_token": 4,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports from the same module together for better readability."
  },
  {
    "line": 6,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u2705 Best Practice: Group imports from the same module together for better readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 12,
    "end_token": 30,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports from the same module together for better readability."
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\u2705 Best Practice: Group imports from the same module together for better readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 30,
    "end_token": 30,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports from the same module together for better readability."
  },
  {
    "line": 6,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\ud83e\udde0 ML Signal: Function to_report_period_type converts a date to a specific report period type, indicating a pattern of date-based classification.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 30,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      62,
      13116,
      62,
      41007,
      62,
      4906,
      26161,
      257,
      3128,
      284,
      257,
      2176,
      989,
      2278,
      2099,
      11,
      12739,
      257,
      3912,
      286,
      3128,
      12,
      3106,
      17923,
      13
    ],
    "label": "ml_signal",
    "reason": "Function to_report_period_type converts a date to a specific report period type, indicating a pattern of date-based classification."
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a helper function to convert report_date to a consistent format improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 48,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      31904,
      2163,
      284,
      10385,
      989,
      62,
      4475,
      284,
      257,
      6414,
      5794,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using a helper function to convert report_date to a consistent format improves code readability and maintainability."
  },
  {
    "line": 10,
    "text": "def to_report_period_type(report_date):",
    "annotation": "\u2705 Best Practice: Using specific date checks for classification ensures clarity and correctness in determining report periods.",
    "confidence": 0.5,
    "tokens": [
      4299,
      284,
      62,
      13116,
      62,
      41007,
      62,
      4906,
      7,
      13116,
      62,
      4475,
      2599
    ],
    "start_token": 48,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2176,
      3128,
      8794,
      329,
      17923,
      19047,
      16287,
      290,
      29409,
      287,
      13213,
      989,
      9574,
      13
    ],
    "label": "best_practice",
    "reason": "Using specific date checks for classification ensures clarity and correctness in determining report periods."
  },
  {
    "line": 19,
    "text": "        return ReportPeriod.year.value",
    "annotation": "\u2705 Best Practice: Returning None for unmatched cases provides a clear indication of an unhandled date.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6358,
      5990,
      2101,
      13,
      1941,
      13,
      8367
    ],
    "start_token": 61,
    "end_token": 76,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      6045,
      329,
      48621,
      2663,
      3769,
      257,
      1598,
      12955,
      286,
      281,
      555,
      38788,
      3128,
      13
    ],
    "label": "best_practice",
    "reason": "Returning None for unmatched cases provides a clear indication of an unhandled date."
  },
  {
    "line": 17,
    "text": "        return ReportPeriod.season3.value",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter usage with a function call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6358,
      5990,
      2101,
      13,
      6230,
      18,
      13,
      8367
    ],
    "start_token": 76,
    "end_token": 92,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      8748,
      351,
      257,
      2163,
      869
    ],
    "label": "ml_signal",
    "reason": "Default parameter usage with a function call"
  },
  {
    "line": 19,
    "text": "        return ReportPeriod.year.value",
    "annotation": "\ud83e\udde0 ML Signal: Conversion to a specific type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6358,
      5990,
      2101,
      13,
      1941,
      13,
      8367
    ],
    "start_token": 92,
    "end_token": 107,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      284,
      257,
      2176,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conversion to a specific type"
  },
  {
    "line": 21,
    "text": "    return None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 107,
    "end_token": 112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation"
  },
  {
    "line": 24,
    "text": "def get_recent_report_date(the_date=now_pd_timestamp(), step=0):",
    "annotation": "\ud83e\udde0 ML Signal: Date formatting pattern",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      49921,
      62,
      13116,
      62,
      4475,
      7,
      1169,
      62,
      4475,
      28,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      22784,
      2239,
      28,
      15,
      2599
    ],
    "start_token": 112,
    "end_token": 136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7536,
      33313,
      3912
    ],
    "label": "ml_signal",
    "reason": "Date formatting pattern"
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 136,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names"
  },
  {
    "line": 37,
    "text": "        return recent",
    "annotation": "\ud83e\udde0 ML Signal: Recursive function call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2274
    ],
    "start_token": 136,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      2163,
      869
    ],
    "label": "ml_signal",
    "reason": "Recursive function call"
  },
  {
    "line": 33,
    "text": "    else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The default value for 'the_date' is set to the result of a function call 'now_pd_timestamp()', which can lead to unexpected behavior if the function is called multiple times in quick succession.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 145,
    "end_token": 150,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      4277,
      1988,
      329,
      705,
      1169,
      62,
      4475,
      6,
      318,
      900,
      284,
      262,
      1255,
      286,
      257,
      2163,
      869,
      705,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      3419,
      3256,
      543,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      262,
      2163,
      318,
      1444,
      3294,
      1661,
      287,
      2068,
      22435,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The default value for 'the_date' is set to the result of a function call 'now_pd_timestamp()', which can lead to unexpected behavior if the function is called multiple times in quick succession."
  },
  {
    "line": 34,
    "text": "        recent = \"{}{}\".format(the_date.year - 1, \"-12-31\")",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive function name for 'get_recent_report_period' to clarify its purpose and behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2274,
      796,
      45144,
      18477,
      92,
      1911,
      18982,
      7,
      1169,
      62,
      4475,
      13,
      1941,
      532,
      352,
      11,
      27444,
      1065,
      12,
      3132,
      4943
    ],
    "start_token": 150,
    "end_token": 178,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      2163,
      1438,
      329,
      705,
      1136,
      62,
      49921,
      62,
      13116,
      62,
      41007,
      6,
      284,
      18282,
      663,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive function name for 'get_recent_report_period' to clarify its purpose and behavior."
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: The use of default parameters and function calls as default values can be a signal for learning patterns in function usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 178,
    "end_token": 178,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      4277,
      10007,
      290,
      2163,
      3848,
      355,
      4277,
      3815,
      460,
      307,
      257,
      6737,
      329,
      4673,
      7572,
      287,
      2163,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of default parameters and function calls as default values can be a signal for learning patterns in function usage."
  },
  {
    "line": 36,
    "text": "    if step == 0:",
    "annotation": "\ud83e\udde0 ML Signal: The function 'get_recent_report_period' is likely part of a larger system dealing with dates and reports, which can be useful for understanding domain-specific behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2239,
      6624,
      657,
      25
    ],
    "start_token": 178,
    "end_token": 186,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      705,
      1136,
      62,
      49921,
      62,
      13116,
      62,
      41007,
      6,
      318,
      1884,
      636,
      286,
      257,
      4025,
      1080,
      7219,
      351,
      9667,
      290,
      3136,
      11,
      543,
      460,
      307,
      4465,
      329,
      4547,
      7386,
      12,
      11423,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "The function 'get_recent_report_period' is likely part of a larger system dealing with dates and reports, which can be useful for understanding domain-specific behavior."
  },
  {
    "line": 37,
    "text": "        return recent",
    "annotation": "\u2705 Best Practice: Ensure that the function 'to_report_period_type' and 'get_recent_report_date' are well-documented to maintain code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2274
    ],
    "start_token": 186,
    "end_token": 195,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      2163,
      705,
      1462,
      62,
      13116,
      62,
      41007,
      62,
      4906,
      6,
      290,
      705,
      1136,
      62,
      49921,
      62,
      13116,
      62,
      4475,
      6,
      389,
      880,
      12,
      47045,
      284,
      5529,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the function 'to_report_period_type' and 'get_recent_report_date' are well-documented to maintain code readability and maintainability."
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to determine stock exchange based on code",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 195,
    "end_token": 195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      5004,
      4283,
      5163,
      1912,
      319,
      2438
    ],
    "label": "ml_signal",
    "reason": "Function to determine stock exchange based on code"
  },
  {
    "line": 37,
    "text": "        return recent",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential ValueError if code is not convertible to int",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2274
    ],
    "start_token": 195,
    "end_token": 204,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      11052,
      12331,
      611,
      2438,
      318,
      407,
      41637,
      284,
      493
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential ValueError if code is not convertible to int"
  },
  {
    "line": 39,
    "text": "        step = step - 1",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to categorize stock codes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2239,
      796,
      2239,
      532,
      352
    ],
    "start_token": 204,
    "end_token": 216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      17851,
      1096,
      4283,
      12416
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to categorize stock codes"
  },
  {
    "line": 43,
    "text": "def get_recent_report_period(the_date=now_pd_timestamp(), step=0):",
    "annotation": "\ud83e\udde0 ML Signal: Function for converting stock code to a specific ID format",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      49921,
      62,
      13116,
      62,
      41007,
      7,
      1169,
      62,
      4475,
      28,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      22784,
      2239,
      28,
      15,
      2599
    ],
    "start_token": 216,
    "end_token": 240,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      23202,
      4283,
      2438,
      284,
      257,
      2176,
      4522,
      5794
    ],
    "label": "ml_signal",
    "reason": "Function for converting stock code to a specific ID format"
  },
  {
    "line": 44,
    "text": "    return to_report_period_type(get_recent_report_date(the_date, step=step))",
    "annotation": "\u2705 Best Practice: Use of format method for string formatting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      284,
      62,
      13116,
      62,
      41007,
      62,
      4906,
      7,
      1136,
      62,
      49921,
      62,
      13116,
      62,
      4475,
      7,
      1169,
      62,
      4475,
      11,
      2239,
      28,
      9662,
      4008
    ],
    "start_token": 240,
    "end_token": 268,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      2446,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use of format method for string formatting"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern for generating unique identifiers for stocks",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      329,
      15453,
      3748,
      42814,
      329,
      14420
    ],
    "label": "ml_signal",
    "reason": "Pattern for generating unique identifiers for stocks"
  },
  {
    "line": 47,
    "text": "def get_china_exchange(code):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if get_china_exchange is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      354,
      1437,
      62,
      1069,
      3803,
      7,
      8189,
      2599
    ],
    "start_token": 268,
    "end_token": 279,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      651,
      62,
      354,
      1437,
      62,
      1069,
      3803,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if get_china_exchange is not validated or sanitized"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for clarity.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 279,
    "end_token": 279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for clarity."
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value, indicating optional input handling.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 279,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      11,
      12739,
      11902,
      5128,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value, indicating optional input handling."
  },
  {
    "line": 47,
    "text": "def get_china_exchange(code):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by zero risk if value is not a number; consider input validation.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      354,
      1437,
      62,
      1069,
      3803,
      7,
      8189,
      2599
    ],
    "start_token": 279,
    "end_token": 290,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      6632,
      2526,
      611,
      1988,
      318,
      407,
      257,
      1271,
      26,
      2074,
      5128,
      21201,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by zero risk if value is not a number; consider input validation."
  },
  {
    "line": 48,
    "text": "    code_ = int(code)",
    "annotation": "\u2705 Best Practice: Use of inline conditional expression for concise code.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      62,
      796,
      493,
      7,
      8189,
      8
    ],
    "start_token": 290,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26098,
      26340,
      5408,
      329,
      35327,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Use of inline conditional expression for concise code."
  },
  {
    "line": 47,
    "text": "def get_china_exchange(code):",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter usage",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      354,
      1437,
      62,
      1069,
      3803,
      7,
      8189,
      2599
    ],
    "start_token": 300,
    "end_token": 311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      8748
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter usage"
  },
  {
    "line": 48,
    "text": "    code_ = int(code)",
    "annotation": "\u2705 Best Practice: Use of default parameter for fallback value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      62,
      796,
      493,
      7,
      8189,
      8
    ],
    "start_token": 311,
    "end_token": 321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      329,
      2121,
      1891,
      1988
    ],
    "label": "best_practice",
    "reason": "Use of default parameter for fallback value"
  },
  {
    "line": 50,
    "text": "        return \"sh\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional expression for value checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      1477,
      1
    ],
    "start_token": 321,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      5408,
      329,
      1988,
      10627
    ],
    "label": "ml_signal",
    "reason": "Conditional expression for value checking"
  },
  {
    "line": 51,
    "text": "    elif code_ >= 400000:",
    "annotation": "\u2705 Best Practice: Use of conditional expression for concise logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1288,
      361,
      2438,
      62,
      18189,
      7337,
      830,
      25
    ],
    "start_token": 332,
    "end_token": 343,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26340,
      5408,
      329,
      35327,
      9156
    ],
    "label": "best_practice",
    "reason": "Use of conditional expression for concise logic"
  },
  {
    "line": 49,
    "text": "    if 800000 >= code_ >= 600000:",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting improves readability and performance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      10460,
      830,
      18189,
      2438,
      62,
      18189,
      10053,
      830,
      25
    ],
    "start_token": 343,
    "end_token": 356,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313,
      19575,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting improves readability and performance"
  },
  {
    "line": 50,
    "text": "        return \"sh\"",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of float to percentage string is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      1477,
      1
    ],
    "start_token": 356,
    "end_token": 367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      12178,
      284,
      5873,
      4731,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Conversion of float to percentage string is a common pattern"
  },
  {
    "line": 52,
    "text": "        return \"bj\"",
    "annotation": "\u2705 Best Practice: Rounding to two decimal places is a common requirement for percentage representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      50007,
      1
    ],
    "start_token": 367,
    "end_token": 378,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      284,
      734,
      32465,
      4113,
      318,
      257,
      2219,
      9079,
      329,
      5873,
      10552
    ],
    "label": "best_practice",
    "reason": "Rounding to two decimal places is a common requirement for percentage representation"
  },
  {
    "line": 52,
    "text": "        return \"bj\"",
    "annotation": "\u2705 Best Practice: Initialize loop counter outside the loop for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      50007,
      1
    ],
    "start_token": 378,
    "end_token": 389,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9052,
      3753,
      2354,
      262,
      9052,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Initialize loop counter outside the loop for clarity"
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterative pattern to find a recent report date",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 389,
    "end_token": 389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      876,
      3912,
      284,
      1064,
      257,
      2274,
      989,
      3128
    ],
    "label": "ml_signal",
    "reason": "Iterative pattern to find a recent report date"
  },
  {
    "line": 58,
    "text": "    return \"{}_{}_{}\".format(\"stock\", get_china_exchange(code), code)",
    "annotation": "\u2705 Best Practice: Use list concatenation for adding filters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      45144,
      92,
      23330,
      92,
      23330,
      92,
      1911,
      18982,
      7203,
      13578,
      1600,
      651,
      62,
      354,
      1437,
      62,
      1069,
      3803,
      7,
      8189,
      828,
      2438,
      8
    ],
    "start_token": 389,
    "end_token": 416,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      1673,
      36686,
      341,
      329,
      4375,
      16628
    ],
    "label": "best_practice",
    "reason": "Use list concatenation for adding filters"
  },
  {
    "line": 61,
    "text": "def value_to_pct(value, default=0):",
    "annotation": "\u2705 Best Practice: Initialize filters as a list if not provided",
    "confidence": 1.0,
    "tokens": [
      4299,
      1988,
      62,
      1462,
      62,
      79,
      310,
      7,
      8367,
      11,
      4277,
      28,
      15,
      2599
    ],
    "start_token": 416,
    "end_token": 430,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      16628,
      355,
      257,
      1351,
      611,
      407,
      2810
    ],
    "label": "best_practice",
    "reason": "Initialize filters as a list if not provided"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with dynamic filters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 430,
    "end_token": 430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      8925,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with dynamic filters"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false positives",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 430,
    "end_token": 430,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      9380,
      9177,
      284,
      3368,
      3991,
      38548
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure pd_is_not_null is correctly implemented to avoid false positives"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\u2705 Best Practice: Increment loop counter in a separate line for readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 430,
    "end_token": 430,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      10791,
      434,
      9052,
      3753,
      287,
      257,
      4553,
      1627,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Increment loop counter in a separate line for readability"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\u2705 Best Practice: Use __all__ to explicitly declare public API of the module",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 430,
    "end_token": 430,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      439,
      834,
      284,
      11777,
      13627,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use __all__ to explicitly declare public API of the module"
  }
]
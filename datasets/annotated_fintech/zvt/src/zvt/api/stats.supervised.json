[
  {
    "line": 6,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 10,
    "text": "from zvt.api.selector import get_entity_ids_by_filter",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      19738,
      273,
      1330,
      651,
      62,
      26858,
      62,
      2340,
      62,
      1525,
      62,
      24455
    ],
    "start_token": 0,
    "end_token": 18,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 13,
    "text": "from zvt.contract.api import decode_entity_id, get_entity_schema, get_entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      15042,
      1330,
      36899,
      62,
      26858,
      62,
      312,
      11,
      651,
      62,
      26858,
      62,
      15952,
      2611,
      11,
      651,
      62,
      26858,
      62,
      2340
    ],
    "start_token": 18,
    "end_token": 44,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 14,
    "text": "from zvt.contract.drawer import Drawer",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      19334,
      263,
      1330,
      15315,
      263
    ],
    "start_token": 44,
    "end_token": 55,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 21,
    "text": "    now_pd_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 55,
    "end_token": 65,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 21,
    "text": "    now_pd_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 65,
    "end_token": 75,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 28,
    "text": "class WindowMethod(enum.Enum):",
    "annotation": "\u2705 Best Practice: Use of a logger for the module allows for better debugging and monitoring",
    "confidence": 0.5,
    "tokens": [
      4871,
      26580,
      17410,
      7,
      44709,
      13,
      4834,
      388,
      2599
    ],
    "start_token": 75,
    "end_token": 84,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      49706,
      329,
      262,
      8265,
      3578,
      329,
      1365,
      28769,
      290,
      9904
    ],
    "label": "best_practice",
    "reason": "Use of a logger for the module allows for better debugging and monitoring"
  },
  {
    "line": 22,
    "text": "    date_time_by_interval,",
    "annotation": "\u2705 Best Practice: Use of enum for defining a set of related constants",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      11
    ],
    "start_token": 84,
    "end_token": 96,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33829,
      329,
      16215,
      257,
      900,
      286,
      3519,
      38491
    ],
    "label": "best_practice",
    "reason": "Use of enum for defining a set of related constants"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u2705 Best Practice: Enums should inherit from enum.Enum for clarity and consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 96,
    "end_token": 96,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      5700,
      815,
      16955,
      422,
      33829,
      13,
      4834,
      388,
      329,
      16287,
      290,
      15794
    ],
    "label": "best_practice",
    "reason": "Enums should inherit from enum.Enum for clarity and consistency"
  },
  {
    "line": 28,
    "text": "class WindowMethod(enum.Enum):",
    "annotation": "\ud83e\udde0 ML Signal: Enum members can indicate categorical data usage",
    "confidence": 0.5,
    "tokens": [
      4871,
      26580,
      17410,
      7,
      44709,
      13,
      4834,
      388,
      2599
    ],
    "start_token": 96,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2039,
      388,
      1866,
      460,
      7603,
      4253,
      12409,
      1366,
      8748
    ],
    "label": "ml_signal",
    "reason": "Enum members can indicate categorical data usage"
  },
  {
    "line": 29,
    "text": "    change = \"change\"",
    "annotation": "\ud83e\udde0 ML Signal: Enum members can indicate categorical data usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1487,
      796,
      366,
      3803,
      1
    ],
    "start_token": 105,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2039,
      388,
      1866,
      460,
      7603,
      4253,
      12409,
      1366,
      8748
    ],
    "label": "ml_signal",
    "reason": "Enum members can indicate categorical data usage"
  },
  {
    "line": 29,
    "text": "    change = \"change\"",
    "annotation": "\u2705 Best Practice: Use of default parameter values for function arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1487,
      796,
      366,
      3803,
      1
    ],
    "start_token": 113,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      2163,
      7159
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for function arguments"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a range of dates to process data in chunks",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 121,
    "end_token": 121,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2837,
      286,
      9667,
      284,
      1429,
      1366,
      287,
      22716
    ],
    "label": "ml_signal",
    "reason": "Iterating over a range of dates to process data in chunks"
  },
  {
    "line": 40,
    "text": "    entity_type=\"stock\",",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern with multiple parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      4906,
      2625,
      13578,
      1600
    ],
    "start_token": 121,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function call pattern with multiple parameters"
  },
  {
    "line": 48,
    "text": "    for month_range in ranges:",
    "annotation": "\ud83e\udde0 ML Signal: Use of generator to yield results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      1227,
      62,
      9521,
      287,
      16069,
      25
    ],
    "start_token": 130,
    "end_token": 140,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      17301,
      284,
      7800,
      2482
    ],
    "label": "ml_signal",
    "reason": "Use of generator to yield results"
  },
  {
    "line": 63,
    "text": "    entity_provider,",
    "annotation": "\u2705 Best Practice: Use of default values for function parameters improves function usability and flexibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 140,
    "end_token": 148,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      2163,
      10007,
      19575,
      2163,
      42863,
      290,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default values for function parameters improves function usability and flexibility."
  },
  {
    "line": 138,
    "text": "        current_end = trade_days[-1]",
    "annotation": "\u2705 Best Practice: Using dict.fromkeys to remove duplicates while preserving order.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      437,
      796,
      3292,
      62,
      12545,
      58,
      12,
      16,
      60
    ],
    "start_token": 148,
    "end_token": 166,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      8633,
      13,
      6738,
      13083,
      284,
      4781,
      14184,
      16856,
      981,
      23934,
      1502,
      13
    ],
    "label": "best_practice",
    "reason": "Using dict.fromkeys to remove duplicates while preserving order."
  },
  {
    "line": 153,
    "text": "        if return_type == TopType.positive:",
    "annotation": "\u2705 Best Practice: Check for None to provide default behavior for adjust_type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1441,
      62,
      4906,
      6624,
      5849,
      6030,
      13,
      24561,
      25
    ],
    "start_token": 166,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      2148,
      4277,
      4069,
      329,
      4532,
      62,
      4906
    ],
    "label": "best_practice",
    "reason": "Check for None to provide default behavior for adjust_type"
  },
  {
    "line": 156,
    "text": "            df = negative_df",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic schema based on entity type and adjust type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      4633,
      62,
      7568
    ],
    "start_token": 183,
    "end_token": 199,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      32815,
      1912,
      319,
      9312,
      2099,
      290,
      4532,
      2099
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic schema based on entity type and adjust type"
  },
  {
    "line": 158,
    "text": "            selected = selected + df.index[:top_count].tolist()",
    "annotation": "\u2705 Best Practice: Initialize mutable default arguments inside the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6163,
      796,
      6163,
      1343,
      47764,
      13,
      9630,
      58,
      25,
      4852,
      62,
      9127,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 199,
    "end_token": 227,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4517,
      540,
      4277,
      7159,
      2641,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Initialize mutable default arguments inside the function"
  },
  {
    "line": 162,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of historical data based on list_days",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 227,
    "end_token": 227,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6754,
      1366,
      1912,
      319,
      1351,
      62,
      12545
    ],
    "label": "ml_signal",
    "reason": "Usage of historical data based on list_days"
  },
  {
    "line": 167,
    "text": "    pct=0.1,",
    "annotation": "\ud83e\udde0 ML Signal: Filtering entities based on dynamic conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      279,
      310,
      28,
      15,
      13,
      16,
      11
    ],
    "start_token": 227,
    "end_token": 237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      12066,
      1912,
      319,
      8925,
      3403
    ],
    "label": "ml_signal",
    "reason": "Filtering entities based on dynamic conditions"
  },
  {
    "line": 173,
    "text": "    list_days=None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information exposure through logging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1351,
      62,
      12545,
      28,
      14202,
      11
    ],
    "start_token": 237,
    "end_token": 246,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      7111,
      832,
      18931
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information exposure through logging"
  },
  {
    "line": 173,
    "text": "    list_days=None,",
    "annotation": "\u2705 Best Practice: Initialize mutable default arguments inside the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1351,
      62,
      12545,
      28,
      14202,
      11
    ],
    "start_token": 246,
    "end_token": 255,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4517,
      540,
      4277,
      7159,
      2641,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Initialize mutable default arguments inside the function"
  },
  {
    "line": 173,
    "text": "    list_days=None,",
    "annotation": "\ud83e\udde0 ML Signal: Combining filters for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1351,
      62,
      12545,
      28,
      14202,
      11
    ],
    "start_token": 255,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14336,
      3191,
      16628,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Combining filters for data retrieval"
  },
  {
    "line": 185,
    "text": "        list_date = date_time_by_interval(start_timestamp, -list_days)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of top entities retrieval with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1351,
      62,
      4475,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7,
      9688,
      62,
      16514,
      27823,
      11,
      532,
      4868,
      62,
      12545,
      8
    ],
    "start_token": 264,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1353,
      12066,
      45069,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of top entities retrieval with specific parameters"
  },
  {
    "line": 187,
    "text": "",
    "annotation": "\u2705 Best Practice: Defaulting to current timestamp if none is provided",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 294,
    "end_token": 294,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      278,
      284,
      1459,
      41033,
      611,
      4844,
      318,
      2810
    ],
    "label": "best_practice",
    "reason": "Defaulting to current timestamp if none is provided"
  },
  {
    "line": 189,
    "text": "        provider=entity_provider,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of recent report date for filtering data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      26858,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 294,
    "end_token": 308,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2274,
      989,
      3128,
      329,
      25431,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of recent report date for filtering data"
  },
  {
    "line": 189,
    "text": "        provider=entity_provider,",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters and columns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      26858,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 308,
    "end_token": 322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      290,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters and columns"
  },
  {
    "line": 196,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on report date and timestamp",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 322,
    "end_token": 322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      989,
      3128,
      290,
      41033
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on report date and timestamp"
  },
  {
    "line": 200,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and sorting data by market cap",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 322,
    "end_token": 322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      29407,
      1366,
      416,
      1910,
      1451
    ],
    "label": "ml_signal",
    "reason": "Grouping and sorting data by market cap"
  },
  {
    "line": 203,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Selecting top percentage of stocks based on market cap",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 322,
    "end_token": 339,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      278,
      1353,
      5873,
      286,
      14420,
      1912,
      319,
      1910,
      1451
    ],
    "label": "ml_signal",
    "reason": "Selecting top percentage of stocks based on market cap"
  },
  {
    "line": 206,
    "text": "        pct=pct,",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      310,
      28,
      79,
      310,
      11
    ],
    "start_token": 339,
    "end_token": 352,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for clarity"
  },
  {
    "line": 214,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting index to list for further processing",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 352,
    "end_token": 352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6376,
      284,
      1351,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Converting index to list for further processing"
  },
  {
    "line": 214,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating start timestamp for data filtering",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 352,
    "end_token": 352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      923,
      41033,
      329,
      1366,
      25431
    ],
    "label": "ml_signal",
    "reason": "Calculating start timestamp for data filtering"
  },
  {
    "line": 215,
    "text": "def get_top_fund_holding_stocks(timestamp=None, pct=0.3, by=None):",
    "annotation": "\ud83e\udde0 ML Signal: Querying stock valuation data with specific filters and columns",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      4852,
      62,
      10990,
      62,
      19216,
      62,
      29522,
      7,
      16514,
      27823,
      28,
      14202,
      11,
      279,
      310,
      28,
      15,
      13,
      18,
      11,
      416,
      28,
      14202,
      2599
    ],
    "start_token": 352,
    "end_token": 379,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      4283,
      29115,
      1366,
      351,
      2176,
      16628,
      290,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying stock valuation data with specific filters and columns"
  },
  {
    "line": 219,
    "text": "    # \u6240\u4ee5\u53d6\u65f6\u95f4\u70b9\u7684\u6700\u8fd1\u7684\u4e24\u4e2a\u516c\u5e03\u70b9\uff0c\u4fdd\u8bc1\u53d6\u5230\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on timestamp range",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      231,
      222,
      20015,
      98,
      20998,
      244,
      33768,
      114,
      29785,
      112,
      163,
      224,
      117,
      21410,
      17312,
      222,
      32573,
      239,
      21410,
      10310,
      97,
      10310,
      103,
      17739,
      105,
      30585,
      225,
      163,
      224,
      117,
      171,
      120,
      234,
      46479,
      251,
      46237,
      223,
      20998,
      244,
      26344,
      108,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 379,
    "end_token": 430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      41033,
      2837
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on timestamp range"
  },
  {
    "line": 224,
    "text": "            FundStock.report_date >= report_date,",
    "annotation": "\u2705 Best Practice: Renaming columns for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7557,
      26207,
      13,
      13116,
      62,
      4475,
      18189,
      989,
      62,
      4475,
      11
    ],
    "start_token": 430,
    "end_token": 452,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Renaming columns for consistency"
  },
  {
    "line": 231,
    "text": "    # \u76f4\u63a5\u6839\u636e\u6301\u6709\u5e02\u503c\u8fd4\u56de",
    "annotation": "\ud83e\udde0 ML Signal: Grouping data by entity_id and calculating mean",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      13328,
      249,
      112,
      162,
      236,
      98,
      43718,
      117,
      162,
      235,
      106,
      162,
      234,
      223,
      17312,
      231,
      30585,
      224,
      161,
      222,
      120,
      32573,
      242,
      32368,
      252
    ],
    "start_token": 452,
    "end_token": 481,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      1366,
      416,
      9312,
      62,
      312,
      290,
      26019,
      1612
    ],
    "label": "ml_signal",
    "reason": "Grouping data by entity_id and calculating mean"
  },
  {
    "line": 232,
    "text": "    if not by:",
    "annotation": "\ud83e\udde0 ML Signal: Merging dataframes to calculate percentage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      416,
      25
    ],
    "start_token": 481,
    "end_token": 488,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4638,
      2667,
      1366,
      37805,
      284,
      15284,
      5873
    ],
    "label": "ml_signal",
    "reason": "Merging dataframes to calculate percentage"
  },
  {
    "line": 234,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating percentage of market cap",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 488,
    "end_token": 488,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      5873,
      286,
      1910,
      1451
    ],
    "label": "ml_signal",
    "reason": "Calculating percentage of market cap"
  },
  {
    "line": 235,
    "text": "        return s.to_frame()",
    "annotation": "\ud83e\udde0 ML Signal: Sorting percentage values in descending order",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      13,
      1462,
      62,
      14535,
      3419
    ],
    "start_token": 488,
    "end_token": 502,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      5873,
      3815,
      287,
      31491,
      1502
    ],
    "label": "ml_signal",
    "reason": "Sorting percentage values in descending order"
  },
  {
    "line": 235,
    "text": "        return s.to_frame()",
    "annotation": "\ud83e\udde0 ML Signal: Selecting top percentage of stocks based on calculated percentage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      13,
      1462,
      62,
      14535,
      3419
    ],
    "start_token": 502,
    "end_token": 516,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      278,
      1353,
      5873,
      286,
      14420,
      1912,
      319,
      10488,
      5873
    ],
    "label": "ml_signal",
    "reason": "Selecting top percentage of stocks based on calculated percentage"
  },
  {
    "line": 224,
    "text": "            FundStock.report_date >= report_date,",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple optional parameters indicating flexible usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7557,
      26207,
      13,
      13116,
      62,
      4475,
      18189,
      989,
      62,
      4475,
      11
    ],
    "start_token": 516,
    "end_token": 538,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      11902,
      10007,
      12739,
      12846,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with multiple optional parameters indicating flexible usage patterns"
  },
  {
    "line": 232,
    "text": "    if not by:",
    "annotation": "\ud83e\udde0 ML Signal: Decoding entity ID to determine entity type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      416,
      25
    ],
    "start_token": 538,
    "end_token": 545,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4280,
      7656,
      9312,
      4522,
      284,
      5004,
      9312,
      2099
    ],
    "label": "ml_signal",
    "reason": "Decoding entity ID to determine entity type"
  },
  {
    "line": 235,
    "text": "        return s.to_frame()",
    "annotation": "\u2705 Best Practice: Default value assignment for optional parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      13,
      1462,
      62,
      14535,
      3419
    ],
    "start_token": 545,
    "end_token": 559,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      1988,
      16237,
      329,
      11902,
      11507
    ],
    "label": "best_practice",
    "reason": "Default value assignment for optional parameter"
  },
  {
    "line": 235,
    "text": "        return s.to_frame()",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic schema retrieval based on entity type and adjustment type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      13,
      1462,
      62,
      14535,
      3419
    ],
    "start_token": 559,
    "end_token": 573,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      32815,
      45069,
      1912,
      319,
      9312,
      2099,
      290,
      15068,
      2099
    ],
    "label": "ml_signal",
    "reason": "Dynamic schema retrieval based on entity type and adjustment type"
  },
  {
    "line": 235,
    "text": "        return s.to_frame()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to get top entities based on performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      13,
      1462,
      62,
      14535,
      3419
    ],
    "start_token": 573,
    "end_token": 587,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      651,
      1353,
      12066,
      1912,
      319,
      2854
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to get top entities based on performance"
  },
  {
    "line": 247,
    "text": "        entity_ids=entity_ids,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if entity_ids are not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 587,
    "end_token": 602,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      9312,
      62,
      2340,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if entity_ids are not sanitized"
  },
  {
    "line": 254,
    "text": "    if by == \"trading\":",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      416,
      6624,
      366,
      2213,
      4980,
      1298
    ],
    "start_token": 602,
    "end_token": 612,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 260,
    "text": "    result_df = pd.concat([cap_df, fund_cap_df], axis=1, join=\"inner\")",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about the process can be used to understand usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1255,
      62,
      7568,
      796,
      279,
      67,
      13,
      1102,
      9246,
      26933,
      11128,
      62,
      7568,
      11,
      1814,
      62,
      11128,
      62,
      7568,
      4357,
      16488,
      28,
      16,
      11,
      4654,
      2625,
      5083,
      4943
    ],
    "start_token": 612,
    "end_token": 643,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      262,
      1429,
      460,
      307,
      973,
      284,
      1833,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging information about the process can be used to understand usage patterns."
  },
  {
    "line": 270,
    "text": "def get_performance(",
    "annotation": "\u2705 Best Practice: Using f-strings for string formatting is more readable and efficient.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      26585,
      7
    ],
    "start_token": 643,
    "end_token": 648,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      277,
      12,
      37336,
      329,
      4731,
      33313,
      318,
      517,
      31744,
      290,
      6942,
      13
    ],
    "label": "best_practice",
    "reason": "Using f-strings for string formatting is more readable and efficient."
  },
  {
    "line": 270,
    "text": "def get_performance(",
    "annotation": "\u2705 Best Practice: Returning a DataFrame directly from a dictionary is efficient and concise.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      26585,
      7
    ],
    "start_token": 648,
    "end_token": 653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      3264,
      422,
      257,
      22155,
      318,
      6942,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame directly from a dictionary is efficient and concise."
  },
  {
    "line": 278,
    "text": "    if not adjust_type:",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      4532,
      62,
      4906,
      25
    ],
    "start_token": 653,
    "end_token": 662,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 281,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic schema selection based on entity type and adjust type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 662,
    "end_token": 662,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      32815,
      6356,
      1912,
      319,
      9312,
      2099,
      290,
      4532,
      2099
    ],
    "label": "ml_signal",
    "reason": "Dynamic schema selection based on entity type and adjust type"
  },
  {
    "line": 281,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of top entities function to filter data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 662,
    "end_token": 662,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1353,
      12066,
      2163,
      284,
      8106,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of top entities function to filter data"
  },
  {
    "line": 294,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for null data before processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 662,
    "end_token": 662,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      9242,
      1366,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check for null data before processing"
  },
  {
    "line": 300,
    "text": "    adjust_type: Union[AdjustType, str] = None,",
    "annotation": "\ud83e\udde0 ML Signal: Categorization of data based on score ranges",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4532,
      62,
      4906,
      25,
      4479,
      58,
      39668,
      6030,
      11,
      965,
      60,
      796,
      6045,
      11
    ],
    "start_token": 662,
    "end_token": 679,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      47467,
      1634,
      286,
      1366,
      1912,
      319,
      4776,
      16069
    ],
    "label": "ml_signal",
    "reason": "Categorization of data based on score ranges"
  },
  {
    "line": 300,
    "text": "    adjust_type: Union[AdjustType, str] = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for large data processing in memory",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4532,
      62,
      4906,
      25,
      4479,
      58,
      39668,
      6030,
      11,
      965,
      60,
      796,
      6045,
      11
    ],
    "start_token": 679,
    "end_token": 696,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      1588,
      1366,
      7587,
      287,
      4088
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for large data processing in memory"
  },
  {
    "line": 300,
    "text": "    adjust_type: Union[AdjustType, str] = None,",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4532,
      62,
      4906,
      25,
      4479,
      58,
      39668,
      6030,
      11,
      965,
      60,
      796,
      6045,
      11
    ],
    "start_token": 696,
    "end_token": 713,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 313,
    "text": "            end_timestamp=end_timestamp,",
    "annotation": "\u2705 Best Practice: Checking for None to set default values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 713,
    "end_token": 734,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      284,
      900,
      4277,
      3815
    ],
    "label": "best_practice",
    "reason": "Checking for None to set default values"
  },
  {
    "line": 316,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic schema based on entity type and adjust type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 734,
    "end_token": 742,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      32815,
      1912,
      319,
      9312,
      2099,
      290,
      4532,
      2099
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic schema based on entity type and adjust type"
  },
  {
    "line": 319,
    "text": "",
    "annotation": "\u2705 Best Practice: Conditional logic to append filters only when necessary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 742,
    "end_token": 742,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      9156,
      284,
      24443,
      16628,
      691,
      618,
      3306
    ],
    "label": "best_practice",
    "reason": "Conditional logic to append filters only when necessary"
  },
  {
    "line": 320,
    "text": "    return pd.DataFrame.from_dict(data=month_stats, orient=\"index\")",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of retrieving top entities based on various parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      11600,
      7,
      7890,
      28,
      8424,
      62,
      34242,
      11,
      11367,
      2625,
      9630,
      4943
    ],
    "start_token": 742,
    "end_token": 766,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      50122,
      1353,
      12066,
      1912,
      319,
      2972,
      10007
    ],
    "label": "ml_signal",
    "reason": "Pattern of retrieving top entities based on various parameters"
  },
  {
    "line": 344,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of default values for function parameters improves usability and reduces errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 766,
    "end_token": 770,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      2163,
      10007,
      19575,
      42863,
      290,
      12850,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default values for function parameters improves usability and reduces errors."
  },
  {
    "line": 347,
    "text": "        result = {}",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic schema selection based on entity type and adjust type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      796,
      23884
    ],
    "start_token": 770,
    "end_token": 780,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      32815,
      6356,
      1912,
      319,
      9312,
      2099,
      290,
      4532,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic schema selection based on entity type and adjust type."
  },
  {
    "line": 351,
    "text": "            key = f\"pct_{range_start}_{range_end}\"",
    "annotation": "\ud83e\udde0 ML Signal: Filtering based on entity IDs indicates user-specific data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1994,
      796,
      277,
      1,
      79,
      310,
      23330,
      9521,
      62,
      9688,
      92,
      23330,
      9521,
      62,
      437,
      36786
    ],
    "start_token": 780,
    "end_token": 807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1912,
      319,
      9312,
      32373,
      9217,
      2836,
      12,
      11423,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering based on entity IDs indicates user-specific data retrieval."
  },
  {
    "line": 352,
    "text": "            df = score_df[(score_df[\"score\"] >= range_start) & (score_df[\"score\"] < range_end)]",
    "annotation": "\ud83e\udde0 ML Signal: Use of threshold for filtering indicates interest in specific data ranges.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      4776,
      62,
      7568,
      58,
      7,
      26675,
      62,
      7568,
      14692,
      26675,
      8973,
      18189,
      2837,
      62,
      9688,
      8,
      1222,
      357,
      26675,
      62,
      7568,
      14692,
      26675,
      8973,
      1279,
      2837,
      62,
      437,
      15437
    ],
    "start_token": 807,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11387,
      329,
      25431,
      9217,
      1393,
      287,
      2176,
      1366,
      16069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of threshold for filtering indicates interest in specific data ranges."
  },
  {
    "line": 364,
    "text": "    adjust_type: Union[AdjustType, str] = None,",
    "annotation": "\u2705 Best Practice: Returning results directly from a function is clear and concise.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4532,
      62,
      4906,
      25,
      4479,
      58,
      39668,
      6030,
      11,
      965,
      60,
      796,
      6045,
      11
    ],
    "start_token": 849,
    "end_token": 866,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      2482,
      3264,
      422,
      257,
      2163,
      318,
      1598,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Returning results directly from a function is clear and concise."
  },
  {
    "line": 390,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of isinstance() is preferred over type() for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 866,
    "end_token": 870,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      3419,
      318,
      9871,
      625,
      2099,
      3419,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use of isinstance() is preferred over type() for type checking"
  },
  {
    "line": 393,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance() is preferred over type() for type checking",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 870,
    "end_token": 870,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      3419,
      318,
      9871,
      625,
      2099,
      3419,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use of isinstance() is preferred over type() for type checking"
  },
  {
    "line": 407,
    "text": "        adjust_type = default_adjust_type(entity_type=entity_type)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      62,
      4906,
      796,
      4277,
      62,
      23032,
      62,
      4906,
      7,
      26858,
      62,
      4906,
      28,
      26858,
      62,
      4906,
      8
    ],
    "start_token": 870,
    "end_token": 895,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      6105,
      5447,
      393,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if pd_is_not_null is not properly defined or imported"
  },
  {
    "line": 432,
    "text": "    data_schema: Mixin,",
    "annotation": "\ud83e\udde0 ML Signal: Sorting and slicing operations on dictionaries",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      25,
      15561,
      259,
      11
    ],
    "start_token": 895,
    "end_token": 906,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      290,
      49289,
      4560,
      319,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Sorting and slicing operations on dictionaries"
  },
  {
    "line": 438,
    "text": "    return_type: TopType = None,",
    "annotation": "\u2705 Best Practice: Chained operations should be split into separate lines for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      62,
      4906,
      25,
      5849,
      6030,
      796,
      6045,
      11
    ],
    "start_token": 906,
    "end_token": 918,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1328,
      4560,
      815,
      307,
      6626,
      656,
      4553,
      3951,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Chained operations should be split into separate lines for clarity"
  },
  {
    "line": 441,
    "text": "    data_provider=None,",
    "annotation": "\ud83e\udde0 ML Signal: Sorting and slicing operations on dictionaries",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15234,
      1304,
      28,
      14202,
      11
    ],
    "start_token": 918,
    "end_token": 928,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      290,
      49289,
      4560,
      319,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Sorting and slicing operations on dictionaries"
  },
  {
    "line": 447,
    "text": "    :param column: schema column",
    "annotation": "\u2705 Best Practice: Chained operations should be split into separate lines for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      5721,
      25,
      32815,
      5721
    ],
    "start_token": 928,
    "end_token": 937,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1328,
      4560,
      815,
      307,
      6626,
      656,
      4553,
      3951,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Chained operations should be split into separate lines for clarity"
  },
  {
    "line": 450,
    "text": "    :param pct: range (0,1]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      279,
      310,
      25,
      2837,
      357,
      15,
      11,
      16,
      60
    ],
    "start_token": 937,
    "end_token": 951,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      6105,
      5447,
      393,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if pd_is_not_null is not properly defined or imported"
  },
  {
    "line": 453,
    "text": "    :param entity_filters:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      9312,
      62,
      10379,
      1010,
      25
    ],
    "start_token": 951,
    "end_token": 961,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      6105,
      5447,
      393,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if pd_is_not_null is not properly defined or imported"
  },
  {
    "line": 448,
    "text": "    :param start_timestamp:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a potential utility or helper function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      923,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 961,
    "end_token": 971,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      2785,
      10361,
      393,
      31904,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a potential utility or helper function"
  },
  {
    "line": 451,
    "text": "    :param method:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a function call, indicating a pattern of processing data in chunks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      2446,
      25
    ],
    "start_token": 971,
    "end_token": 978,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2163,
      869,
      11,
      12739,
      257,
      3912,
      286,
      7587,
      1366,
      287,
      22716
    ],
    "label": "ml_signal",
    "reason": "Iterating over a function call, indicating a pattern of processing data in chunks"
  },
  {
    "line": 453,
    "text": "    :param entity_filters:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assuming df is a DataFrame without checking its type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      9312,
      62,
      10379,
      1010,
      25
    ],
    "start_token": 978,
    "end_token": 988,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33238,
      47764,
      318,
      257,
      6060,
      19778,
      1231,
      10627,
      663,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assuming df is a DataFrame without checking its type"
  },
  {
    "line": 455,
    "text": "    :param show_name: show entity name",
    "annotation": "\u2705 Best Practice: Resetting index for DataFrame to ensure clean data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      905,
      62,
      3672,
      25,
      905,
      9312,
      1438
    ],
    "start_token": 988,
    "end_token": 1000,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      329,
      6060,
      19778,
      284,
      4155,
      3424,
      1366
    ],
    "label": "best_practice",
    "reason": "Resetting index for DataFrame to ensure clean data"
  },
  {
    "line": 457,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Adding a constant column, indicating a labeling or categorization pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1000,
    "end_token": 1004,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      257,
      6937,
      5721,
      11,
      12739,
      257,
      27393,
      393,
      17851,
      1634,
      3912
    ],
    "label": "ml_signal",
    "reason": "Adding a constant column, indicating a labeling or categorization pattern"
  },
  {
    "line": 459,
    "text": "        method = WindowMethod(method)",
    "annotation": "\ud83e\udde0 ML Signal: Adding a timestamp column, indicating a time-series data pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2446,
      796,
      26580,
      17410,
      7,
      24396,
      8
    ],
    "start_token": 1004,
    "end_token": 1018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      257,
      41033,
      5721,
      11,
      12739,
      257,
      640,
      12,
      25076,
      1366,
      3912
    ],
    "label": "ml_signal",
    "reason": "Adding a timestamp column, indicating a time-series data pattern"
  },
  {
    "line": 462,
    "text": "        return_type = TopType(return_type)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assuming dfs is not empty before concatenation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      796,
      5849,
      6030,
      7,
      7783,
      62,
      4906,
      8
    ],
    "start_token": 1018,
    "end_token": 1036,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33238,
      288,
      9501,
      318,
      407,
      6565,
      878,
      1673,
      36686,
      341
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assuming dfs is not empty before concatenation"
  },
  {
    "line": 464,
    "text": "    if show_name:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using print for potentially large DataFrame, which can lead to performance issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      905,
      62,
      3672,
      25
    ],
    "start_token": 1036,
    "end_token": 1044,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3601,
      329,
      6196,
      1588,
      6060,
      19778,
      11,
      543,
      460,
      1085,
      284,
      2854,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using print for potentially large DataFrame, which can lead to performance issues"
  },
  {
    "line": 466,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating a Drawer object, indicating a pattern of data visualization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1044,
    "end_token": 1049,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      257,
      15315,
      263,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      32704
    ],
    "label": "ml_signal",
    "reason": "Instantiating a Drawer object, indicating a pattern of data visualization"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calling a draw method with a show parameter, indicating an interactive visualization pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1049,
    "end_token": 1049,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      3197,
      2446,
      351,
      257,
      905,
      11507,
      11,
      12739,
      281,
      14333,
      32704,
      3912
    ],
    "label": "ml_signal",
    "reason": "Calling a draw method with a show parameter, indicating an interactive visualization pattern"
  },
  {
    "line": 460,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern of data processing",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1049,
    "end_token": 1049,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      286,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern of data processing"
  },
  {
    "line": 462,
    "text": "        return_type = TopType(return_type)",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a specific provider and filtering by category",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      796,
      5849,
      6030,
      7,
      7783,
      62,
      4906,
      8
    ],
    "start_token": 1049,
    "end_token": 1067,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      2176,
      10131,
      290,
      25431,
      416,
      6536
    ],
    "label": "ml_signal",
    "reason": "Querying data from a specific provider and filtering by category"
  },
  {
    "line": 464,
    "text": "    if show_name:",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame index to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      905,
      62,
      3672,
      25
    ],
    "start_token": 1067,
    "end_token": 1075,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      6376,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame index to a list"
  },
  {
    "line": 466,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific entity_ids and filters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1075,
    "end_token": 1080,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      9312,
      62,
      2340,
      290,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific entity_ids and filters"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences of values in a DataFrame column",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1080,
    "end_token": 1080,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      286,
      3815,
      287,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences of values in a DataFrame column"
  },
  {
    "line": 470,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame with specific columns and data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1080,
    "end_token": 1097,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      351,
      2176,
      15180,
      290,
      1366
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame with specific columns and data"
  },
  {
    "line": 470,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\u2705 Best Practice: Assigning constant values to DataFrame columns for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1097,
    "end_token": 1114,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      6937,
      3815,
      284,
      6060,
      19778,
      15180,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Assigning constant values to DataFrame columns for consistency"
  },
  {
    "line": 474,
    "text": "        provider=data_provider,",
    "annotation": "\u2705 Best Practice: Assigning timestamp to DataFrame for temporal data tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      7890,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 1114,
    "end_token": 1128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      41033,
      284,
      6060,
      19778,
      329,
      21964,
      1366,
      9646
    ],
    "label": "best_practice",
    "reason": "Assigning timestamp to DataFrame for temporal data tracking"
  },
  {
    "line": 477,
    "text": "        return None, None",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating a Drawer object with a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045,
      11,
      6045
    ],
    "start_token": 1128,
    "end_token": 1139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      257,
      15315,
      263,
      2134,
      351,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Instantiating a Drawer object with a DataFrame"
  },
  {
    "line": 478,
    "text": "    g = all_df.groupby(\"entity_id\")",
    "annotation": "\ud83e\udde0 ML Signal: Drawing a pie chart with a specific parameter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      308,
      796,
      477,
      62,
      7568,
      13,
      8094,
      1525,
      7203,
      26858,
      62,
      312,
      4943
    ],
    "start_token": 1139,
    "end_token": 1155,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40027,
      257,
      2508,
      8262,
      351,
      257,
      2176,
      11507
    ],
    "label": "ml_signal",
    "reason": "Drawing a pie chart with a specific parameter"
  },
  {
    "line": 470,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\u2705 Best Practice: Use of default parameter values for function arguments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1155,
    "end_token": 1172,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      2163,
      7159
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for function arguments"
  },
  {
    "line": 470,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\u2705 Best Practice: Type hinting for the 'adjust_type' parameter improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1172,
    "end_token": 1189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      705,
      23032,
      62,
      4906,
      6,
      11507,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the 'adjust_type' parameter improves code readability and maintainability"
  },
  {
    "line": 478,
    "text": "    g = all_df.groupby(\"entity_id\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of boolean indexing to filter DataFrame rows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      308,
      796,
      477,
      62,
      7568,
      13,
      8094,
      1525,
      7203,
      26858,
      62,
      312,
      4943
    ],
    "start_token": 1189,
    "end_token": 1205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      25131,
      6376,
      278,
      284,
      8106,
      6060,
      19778,
      15274
    ],
    "label": "ml_signal",
    "reason": "Usage of boolean indexing to filter DataFrame rows"
  },
  {
    "line": 480,
    "text": "    names = {}",
    "annotation": "\ud83e\udde0 ML Signal: Usage of boolean negation to filter DataFrame rows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3891,
      796,
      23884
    ],
    "start_token": 1205,
    "end_token": 1211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      25131,
      2469,
      341,
      284,
      8106,
      6060,
      19778,
      15274
    ],
    "label": "ml_signal",
    "reason": "Usage of boolean negation to filter DataFrame rows"
  },
  {
    "line": 482,
    "text": "        if method == WindowMethod.change:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if 'other' is empty",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2446,
      6624,
      26580,
      17410,
      13,
      3803,
      25
    ],
    "start_token": 1211,
    "end_token": 1226,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      705,
      847,
      6,
      318,
      6565
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if 'other' is empty"
  },
  {
    "line": 485,
    "text": "            if start != 0:",
    "annotation": "\u2705 Best Practice: Use of default value assignment if variable is None or False",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      923,
      14512,
      657,
      25
    ],
    "start_token": 1226,
    "end_token": 1242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      1988,
      16237,
      611,
      7885,
      318,
      6045,
      393,
      10352
    ],
    "label": "best_practice",
    "reason": "Use of default value assignment if variable is None or False"
  },
  {
    "line": 487,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic schema retrieval based on parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1242,
    "end_token": 1255,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      32815,
      45069,
      1912,
      319,
      10007
    ],
    "label": "ml_signal",
    "reason": "Dynamic schema retrieval based on parameters"
  },
  {
    "line": 489,
    "text": "            tops[entity_id] = change",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      21246,
      58,
      26858,
      62,
      312,
      60,
      796,
      1487
    ],
    "start_token": 1255,
    "end_token": 1274,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters"
  },
  {
    "line": 490,
    "text": "        elif method == WindowMethod.avg:",
    "annotation": "\ud83e\udde0 ML Signal: Creating a new boolean column based on a condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2446,
      6624,
      26580,
      17410,
      13,
      615,
      70,
      25
    ],
    "start_token": 1274,
    "end_token": 1291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      649,
      25131,
      5721,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Creating a new boolean column based on a condition"
  },
  {
    "line": 490,
    "text": "        elif method == WindowMethod.avg:",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and applying a function to each group",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2446,
      6624,
      26580,
      17410,
      13,
      615,
      70,
      25
    ],
    "start_token": 1291,
    "end_token": 1308,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      11524,
      257,
      2163,
      284,
      1123,
      1448
    ],
    "label": "ml_signal",
    "reason": "Grouping and applying a function to each group"
  },
  {
    "line": 490,
    "text": "        elif method == WindowMethod.avg:",
    "annotation": "\u2705 Best Practice: Use of __name__ guard for script entry point",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2446,
      6624,
      26580,
      17410,
      13,
      615,
      70,
      25
    ],
    "start_token": 1308,
    "end_token": 1325,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      4860,
      329,
      4226,
      5726,
      966
    ],
    "label": "best_practice",
    "reason": "Use of __name__ guard for script entry point"
  },
  {
    "line": 490,
    "text": "        elif method == WindowMethod.avg:",
    "annotation": "\u2705 Best Practice: Explicitly defining __all__ for module exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2446,
      6624,
      26580,
      17410,
      13,
      615,
      70,
      25
    ],
    "start_token": 1325,
    "end_token": 1342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining __all__ for module exports"
  }
]
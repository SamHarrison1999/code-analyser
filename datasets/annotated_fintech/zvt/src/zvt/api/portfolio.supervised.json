[
  {
    "line": 3,
    "text": "from typing import List",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      7343
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 8,
    "text": "from zvt.contract import PortfolioStockHistory",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      1330,
      4347,
      13652,
      26207,
      18122
    ],
    "start_token": 4,
    "end_token": 14,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 10,
    "text": "from zvt.domain import ReportPeriod, Fund, Etf",
    "annotation": "\ud83e\udde0 ML Signal: Assigning attributes from one object to another is a common pattern",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      6358,
      5990,
      2101,
      11,
      7557,
      11,
      17906,
      69
    ],
    "start_token": 14,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      12608,
      422,
      530,
      2134,
      284,
      1194,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Assigning attributes from one object to another is a common pattern"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assigning attributes from one object to another is a common pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 28,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      12608,
      422,
      530,
      2134,
      284,
      1194,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Assigning attributes from one object to another is a common pattern"
  },
  {
    "line": 14,
    "text": "def portfolio_relate_stock(df, portfolio):",
    "annotation": "\ud83e\udde0 ML Signal: Assigning attributes from one object to another is a common pattern",
    "confidence": 0.5,
    "tokens": [
      4299,
      15320,
      62,
      2411,
      378,
      62,
      13578,
      7,
      7568,
      11,
      15320,
      2599
    ],
    "start_token": 28,
    "end_token": 40,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      12608,
      422,
      530,
      2134,
      284,
      1194,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Assigning attributes from one object to another is a common pattern"
  },
  {
    "line": 15,
    "text": "    df[\"entity_id\"] = portfolio.entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Assigning attributes from one object to another is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      15320,
      13,
      26858,
      62,
      312
    ],
    "start_token": 40,
    "end_token": 55,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      12608,
      422,
      530,
      2134,
      284,
      1194,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Assigning attributes from one object to another is a common pattern"
  },
  {
    "line": 15,
    "text": "    df[\"entity_id\"] = portfolio.entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Assigning attributes from one object to another is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      15320,
      13,
      26858,
      62,
      312
    ],
    "start_token": 55,
    "end_token": 70,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      12608,
      422,
      530,
      2134,
      284,
      1194,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Assigning attributes from one object to another is a common pattern"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensure the function returns a value, which it does here",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 70,
    "end_token": 70,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      2163,
      5860,
      257,
      1988,
      11,
      543,
      340,
      857,
      994
    ],
    "label": "best_practice",
    "reason": "Ensure the function returns a value, which it does here"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\u2705 Best Practice: Use f-string for dynamic string formatting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 70,
    "end_token": 70,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      8925,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use f-string for dynamic string formatting"
  },
  {
    "line": 25,
    "text": "def get_portfolio_stocks(",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      634,
      13652,
      62,
      29522,
      7
    ],
    "start_token": 70,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 25,
    "text": "def get_portfolio_stocks(",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      634,
      13652,
      62,
      29522,
      7
    ],
    "start_token": 78,
    "end_token": 86,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 46,
    "text": "        df = data_schema.query_data(",
    "annotation": "\u2705 Best Practice: Use of constants for comparison improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      1366,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 86,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      38491,
      329,
      7208,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of constants for comparison improves readability"
  },
  {
    "line": 49,
    "text": "            codes=codes,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite loop if step condition is not met",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      28,
      40148,
      11
    ],
    "start_token": 104,
    "end_token": 119,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      9052,
      611,
      2239,
      4006,
      318,
      407,
      1138
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite loop if step condition is not met"
  },
  {
    "line": 49,
    "text": "            codes=codes,",
    "annotation": "\u2705 Best Practice: Descriptive variable names improve readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      28,
      40148,
      11
    ],
    "start_token": 119,
    "end_token": 134,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2935,
      6519,
      425,
      7885,
      3891,
      2987,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Descriptive variable names improve readability"
  },
  {
    "line": 63,
    "text": "                pre_df = data_schema.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Use of pd.concat indicates data aggregation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      662,
      62,
      7568,
      796,
      1366,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 134,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      9217,
      1366,
      46500,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of pd.concat indicates data aggregation pattern"
  },
  {
    "line": 65,
    "text": "                    code=code,",
    "annotation": "\u2705 Best Practice: Use of list comprehension for concise code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      8189,
      11
    ],
    "start_token": 162,
    "end_token": 185,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1351,
      35915,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of list comprehension for concise code"
  },
  {
    "line": 65,
    "text": "                    code=code,",
    "annotation": "\u2705 Best Practice: Use of drop_duplicates to ensure data integrity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      8189,
      11
    ],
    "start_token": 185,
    "end_token": 208,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4268,
      62,
      646,
      489,
      16856,
      284,
      4155,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Use of drop_duplicates to ensure data integrity"
  },
  {
    "line": 64,
    "text": "                    provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple optional parameters indicating flexible usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 208,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      11902,
      10007,
      12739,
      12846,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with multiple optional parameters indicating flexible usage patterns"
  },
  {
    "line": 65,
    "text": "                    code=code,",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and to avoid errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      8189,
      11
    ],
    "start_token": 232,
    "end_token": 255,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      284,
      3368,
      8563
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and to avoid errors"
  },
  {
    "line": 65,
    "text": "                    code=code,",
    "annotation": "\ud83e\udde0 ML Signal: Delegation pattern by calling another function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      8189,
      11
    ],
    "start_token": 255,
    "end_token": 278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1024,
      1455,
      341,
      3912,
      416,
      4585,
      1194,
      2163
    ],
    "label": "ml_signal",
    "reason": "Delegation pattern by calling another function"
  },
  {
    "line": 65,
    "text": "                    code=code,",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific class or type as a parameter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      8189,
      11
    ],
    "start_token": 278,
    "end_token": 301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      1398,
      393,
      2099,
      355,
      257,
      11507
    ],
    "label": "ml_signal",
    "reason": "Use of specific class or type as a parameter"
  },
  {
    "line": 74,
    "text": "                # \u534a\u5e74\u62a5\u548c\u5e74\u62a5",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple optional parameters indicating flexible usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      235,
      232,
      33176,
      112,
      162,
      232,
      98,
      161,
      240,
      234,
      33176,
      112,
      162,
      232,
      98
    ],
    "start_token": 301,
    "end_token": 333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      11902,
      10007,
      12739,
      12846,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with multiple optional parameters indicating flexible usage patterns"
  },
  {
    "line": 74,
    "text": "                # \u534a\u5e74\u62a5\u548c\u5e74\u62a5",
    "annotation": "\u2705 Best Practice: Use of default parameters to enhance function flexibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      235,
      232,
      33176,
      112,
      162,
      232,
      98,
      161,
      240,
      234,
      33176,
      112,
      162,
      232,
      98
    ],
    "start_token": 333,
    "end_token": 365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      10007,
      284,
      9494,
      2163,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameters to enhance function flexibility"
  },
  {
    "line": 74,
    "text": "                # \u534a\u5e74\u62a5\u548c\u5e74\u62a5",
    "annotation": "\ud83e\udde0 ML Signal: Delegating functionality to another function, indicating a common design pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      235,
      232,
      33176,
      112,
      162,
      232,
      98,
      161,
      240,
      234,
      33176,
      112,
      162,
      232,
      98
    ],
    "start_token": 365,
    "end_token": 397,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1024,
      1455,
      803,
      11244,
      284,
      1194,
      2163,
      11,
      12739,
      257,
      2219,
      1486,
      3912
    ],
    "label": "ml_signal",
    "reason": "Delegating functionality to another function, indicating a common design pattern"
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 397,
    "end_token": 397,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
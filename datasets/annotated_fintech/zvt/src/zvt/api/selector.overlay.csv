annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,6,ml_signal,4,Importing specific functions from a module indicates selective usage patterns,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,45,ml_signal,7,Importing specific functions from a module indicates selective usage patterns,,6,"from zvt.api.kdata import default_adjust_type, get_kdata_schema, get_latest_kdata_date, get_recent_trade_dates","[6738, 1976, 36540, 13, 15042, 13, 74, 7890, 1330, 4277, 62, 23032, 62, 4906, 11, 651, 62, 74, 7890, 62, 15952, 2611, 11, 651, 62, 42861, 62, 74, 7890, 62, 4475, 11, 651, 62, 49921, 62, 25351, 62, 19581]"
🧠 ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,58,ml_signal,9,Importing specific classes from a module indicates selective usage patterns,,45,from zvt.contract.api import get_entity_ids,"[6738, 1976, 36540, 13, 28484, 13, 15042, 1330, 651, 62, 26858, 62, 2340]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,76,ml_signal,11,Importing specific functions from a module indicates selective usage patterns,,58,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",0.5,76,ml_signal,13,Importing specific functions from a module indicates selective usage patterns,,76,,[]
✅ Best Practice: Use a consistent logger naming convention,"[26486, 227, 6705, 19939, 25, 5765, 257, 6414, 49706, 19264, 9831]",0.5,76,best_practice,15,Use a consistent logger naming convention,,76,,[]
🧠 ML Signal: Constants for market capitalization thresholds indicate domain-specific usage,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 1910, 3139, 1634, 40885, 7603, 7386, 12, 11423, 8748]",0.5,80,ml_signal,16,Constants for market capitalization thresholds indicate domain-specific usage,,76,# 500亿,"[2, 5323, 12859, 123]"
🧠 ML Signal: Constants for department names indicate domain-specific usage,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 5011, 3891, 7603, 7386, 12, 11423, 8748]",0.5,84,ml_signal,16,Constants for department names indicate domain-specific usage,,80,# 500亿,"[2, 5323, 12859, 123]"
✅ Best Practice: Initialize filters as a list to collect filter conditions,"[26486, 227, 6705, 19939, 25, 20768, 1096, 16628, 355, 257, 1351, 284, 2824, 8106, 3403]",1.0,114,best_practice,26,Initialize filters as a list to collect filter conditions,,84,"OUT_DEPS = [""dep_1"", ""dep_2"", ""dep_3"", ""dep_4"", ""dep_5""]","[12425, 62, 7206, 3705, 796, 14631, 10378, 62, 16, 1600, 366, 10378, 62, 17, 1600, 366, 10378, 62, 18, 1600, 366, 10378, 62, 19, 1600, 366, 10378, 62, 20, 8973]"
✅ Best Practice: Use a default function to get the current date if target_date is not provided,"[26486, 227, 6705, 19939, 25, 5765, 257, 4277, 2163, 284, 651, 262, 1459, 3128, 611, 2496, 62, 4475, 318, 407, 2810]",1.0,121,best_practice,30,Use a default function to get the current date if target_date is not provided,,114,"    provider=""em"",","[220, 220, 220, 10131, 2625, 368, 1600]"
✅ Best Practice: Calculate a date one year before the target_date,"[26486, 227, 6705, 19939, 25, 27131, 378, 257, 3128, 530, 614, 878, 262, 2496, 62, 4475]",0.5,131,best_practice,31,Calculate a date one year before the target_date,,121,"    ignore_delist=True,","[220, 220, 220, 8856, 62, 12381, 396, 28, 17821, 11]"
✅ Best Practice: Append filter condition to the filters list,"[26486, 227, 6705, 19939, 25, 2034, 437, 8106, 4006, 284, 262, 16628, 1351]",0.5,140,best_practice,34,Append filter condition to the filters list,,131,"    target_date=None,","[220, 220, 220, 2496, 62, 4475, 28, 14202, 11]"
✅ Best Practice: Append filter condition to the filters list,"[26486, 227, 6705, 19939, 25, 2034, 437, 8106, 4006, 284, 262, 16628, 1351]",0.5,149,best_practice,36,Append filter condition to the filters list,,140,"    entity_ids=None,","[220, 220, 220, 9312, 62, 2340, 28, 14202, 11]"
✅ Best Practice: Append multiple filter conditions to the filters list,"[26486, 227, 6705, 19939, 25, 2034, 437, 3294, 8106, 3403, 284, 262, 16628, 1351]",0.5,162,best_practice,41,Append multiple filter conditions to the filters list,,149,        if not target_date:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2496, 62, 4475, 25]"
✅ Best Practice: Append multiple filter conditions to the filters list,"[26486, 227, 6705, 19939, 25, 2034, 437, 3294, 8106, 3403, 284, 262, 16628, 1351]",0.5,188,best_practice,47,Append multiple filter conditions to the filters list,,162,            filters += [entity_schema.timestamp <= target_date],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 15853, 685, 26858, 62, 15952, 2611, 13, 16514, 27823, 19841, 2496, 62, 4475, 60]"
✅ Best Practice: Append filter condition to the filters list,"[26486, 227, 6705, 19939, 25, 2034, 437, 8106, 4006, 284, 262, 16628, 1351]",0.5,188,best_practice,53,Append filter condition to the filters list,,188,,[]
🧠 ML Signal: Function call with dynamic filters and parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8925, 16628, 290, 10007]",0.5,198,ml_signal,55,Function call with dynamic filters and parameters,,188,        filters += [,"[220, 220, 220, 220, 220, 220, 220, 16628, 15853, 685]"
"🧠 ML Signal: Function definition with a specific purpose, useful for understanding code behavior","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4007, 11, 4465, 329, 4547, 2438, 4069]",1.0,207,ml_signal,48,"Function definition with a specific purpose, useful for understanding code behavior",,198,    if ignore_delist:,"[220, 220, 220, 611, 8856, 62, 12381, 396, 25]"
"🧠 ML Signal: Querying data with specific parameters, indicating a pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 10007, 11, 12739, 257, 3912, 286, 1366, 45069]",1.0,234,ml_signal,50,"Querying data with specific parameters, indicating a pattern of data retrieval",,207,"            entity_schema.name.not_like(""%退%""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15952, 2611, 13, 3672, 13, 1662, 62, 2339, 7203, 4, 34460, 222, 4, 12340]"
"⚠️ SAST Risk (Low): No validation on the 'timestamp' input, potential for incorrect data retrieval","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 262, 705, 16514, 27823, 6, 5128, 11, 2785, 329, 11491, 1366, 45069]",0.5,242,sast_risk,52,"No validation on the 'timestamp' input, potential for incorrect data retrieval",Low,234,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
"🧠 ML Signal: Conditional check for data presence, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 1366, 4931, 11, 2219, 3912, 287, 1366, 7587]",0.5,242,ml_signal,53,"Conditional check for data presence, common pattern in data processing",,242,,[]
"🧠 ML Signal: Converting DataFrame column to list, a common data transformation pattern","[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 5721, 284, 1351, 11, 257, 2219, 1366, 13389, 3912]",1.0,252,ml_signal,55,"Converting DataFrame column to list, a common data transformation pattern",,242,        filters += [,"[220, 220, 220, 220, 220, 220, 220, 16628, 15853, 685]"
🧠 ML Signal: Function with multiple parameters and default values,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3294, 10007, 290, 4277, 3815]",0.5,260,ml_signal,52,Function with multiple parameters and default values,,252,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
⚠️ SAST Risk (Low): Use of assert for input validation can be bypassed in optimized mode,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 287, 23392, 4235]",1.0,268,sast_risk,54,Use of assert for input validation can be bypassed in optimized mode,Low,260,    if ignore_st:,"[220, 220, 220, 611, 8856, 62, 301, 25]"
🧠 ML Signal: Querying data with dynamic filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 8925, 16628]",0.5,268,ml_signal,63,Querying data with dynamic filters,,268,,[]
🧠 ML Signal: Grouping and sorting data,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 29407, 1366]",0.5,283,ml_signal,67,Grouping and sorting data,,268,    if pd_is_not_null(df):,"[220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
"🧠 ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,322,ml_signal,66,"Function definition with parameters, useful for learning function usage patterns",,283,"    df = LimitUpInfo.query_data(start_timestamp=timestamp, end_timestamp=timestamp, columns=[LimitUpInfo.entity_id])","[220, 220, 220, 47764, 796, 27272, 4933, 12360, 13, 22766, 62, 7890, 7, 9688, 62, 16514, 27823, 28, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 16514, 27823, 11, 15180, 41888, 39184, 4933, 12360, 13, 26858, 62, 312, 12962]"
"🧠 ML Signal: Function call with named arguments, useful for learning API usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3706, 7159, 11, 4465, 329, 4673, 7824, 8748, 7572]",1.0,341,ml_signal,68,"Function call with named arguments, useful for learning API usage patterns",,322,"        return df[""entity_id""].tolist()","[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 14692, 26858, 62, 312, 1, 4083, 83, 349, 396, 3419]"
✅ Best Practice: Convert index to list before slicing for clarity,"[26486, 227, 6705, 19939, 25, 38240, 6376, 284, 1351, 878, 49289, 329, 16287]",1.0,341,best_practice,70,Convert index to list before slicing for clarity,,341,,[]
✅ Best Practice: Convert index to list before slicing for clarity,"[26486, 227, 6705, 19939, 25, 38240, 6376, 284, 1351, 878, 49289, 329, 16287]",1.0,353,best_practice,72,Convert index to list before slicing for clarity,,341,"    assert direction in (""in"", ""out"")","[220, 220, 220, 6818, 4571, 287, 5855, 259, 1600, 366, 448, 4943]"
✅ Best Practice: Convert index to list before slicing for clarity,"[26486, 227, 6705, 19939, 25, 38240, 6376, 284, 1351, 878, 49289, 329, 16287]",1.0,359,best_practice,74,Convert index to list before slicing for clarity,,353,    filters = None,"[220, 220, 220, 16628, 796, 6045]"
✅ Best Practice: Use set to remove duplicates before returning,"[26486, 227, 6705, 19939, 25, 5765, 900, 284, 4781, 14184, 16856, 878, 8024]",1.0,381,best_practice,76,Use set to remove duplicates before returning,,359,        filters = [DragonAndTiger.change_pct > 0],"[220, 220, 220, 220, 220, 220, 220, 16628, 796, 685, 17808, 1870, 51, 8254, 13, 3803, 62, 79, 310, 1875, 657, 60]"
⚠️ SAST Risk (Low): Potential risk of duplicated index entries if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 14184, 3474, 6376, 12784, 611, 407, 12118, 6105]",1.0,381,sast_risk,96,Potential risk of duplicated index entries if not handled properly,Low,381,,[]
🧠 ML Signal: Usage of date_time_by_interval function to calculate end_date,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 2163, 284, 15284, 886, 62, 4475]",1.0,398,ml_signal,100,Usage of date_time_by_interval function to calculate end_date,,381,    return list(set(bang1 + bang2 + bang3)),"[220, 220, 220, 1441, 1351, 7, 2617, 7, 36668, 16, 1343, 20188, 17, 1343, 20188, 18, 4008]"
⚠️ SAST Risk (Low): Logging potentially sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321]",1.0,413,sast_risk,110,Logging potentially sensitive information,Low,398,            filters.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 13, 33295, 7]"
🧠 ML Signal: Calculation of change_pct as a performance metric,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1487, 62, 79, 310, 355, 257, 2854, 18663]",1.0,458,ml_signal,114,Calculation of change_pct as a performance metric,,413,"                    and_(DragonAndTiger.dep3 == player, DragonAndTiger.dep3_rate >= buy_rate),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 290, 41052, 17808, 1870, 51, 8254, 13, 10378, 18, 6624, 2137, 11, 2851, 1870, 51, 8254, 13, 10378, 18, 62, 4873, 18189, 2822, 62, 4873, 828]"
✅ Best Practice: Using pandas DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 8554, 19798, 292, 6060, 19778, 329, 20793, 1366, 9041]",1.0,503,best_practice,114,Using pandas DataFrame for structured data handling,,458,"                    and_(DragonAndTiger.dep3 == player, DragonAndTiger.dep3_rate >= buy_rate),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 290, 41052, 17808, 1870, 51, 8254, 13, 10378, 18, 6624, 2137, 11, 2851, 1870, 51, 8254, 13, 10378, 18, 62, 4873, 18189, 2822, 62, 4873, 828]"
✅ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,548,best_practice,114,Consider adding type hints for function parameters and return type for better readability and maintainability.,,503,"                    and_(DragonAndTiger.dep3 == player, DragonAndTiger.dep3_rate >= buy_rate),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 290, 41052, 17808, 1870, 51, 8254, 13, 10378, 18, 6624, 2137, 11, 2851, 1870, 51, 8254, 13, 10378, 18, 62, 4873, 18189, 2822, 62, 4873, 828]"
"🧠 ML Signal: Usage of a function to fetch player performance data, which could be a pattern for data retrieval.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 21207, 2137, 2854, 1366, 11, 543, 714, 307, 257, 3912, 329, 1366, 45069, 13]",0.5,560,ml_signal,125,"Usage of a function to fetch player performance data, which could be a pattern for data retrieval.",,548,"        filters=filters,","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11]"
"⚠️ SAST Risk (Low): Potential division by zero if df is empty, consider adding a check.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 47764, 318, 6565, 11, 2074, 4375, 257, 2198, 13]",1.0,579,sast_risk,134,"Potential division by zero if df is empty, consider adding a check.",Low,560,"            entity_id=entity_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 28, 26858, 62, 312, 11]"
"🧠 ML Signal: Conversion of records to a DataFrame, indicating a pattern of data processing and transformation.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4406, 284, 257, 6060, 19778, 11, 12739, 257, 3912, 286, 1366, 7587, 290, 13389, 13]",0.5,595,ml_signal,138,"Conversion of records to a DataFrame, indicating a pattern of data processing and transformation.",,579,"            index=""timestamp"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 2625, 16514, 27823, 1600]"
🧠 ML Signal: Use of default parameters can indicate common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 460, 7603, 2219, 8748, 7572]",0.5,611,ml_signal,137,Use of default parameters can indicate common usage patterns,,595,"            provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 15234, 1304, 11]"
🧠 ML Signal: Iteration over a fixed range can indicate a pattern in data processing,"[8582, 100, 254, 10373, 26484, 25, 40806, 341, 625, 257, 5969, 2837, 460, 7603, 257, 3912, 287, 1366, 7587]",0.5,645,ml_signal,141,Iteration over a fixed range can indicate a pattern in data processing,,611,"            logger.warning(f""ignore {timestamp} -> end_timestamp: {end_date}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 46430, 1391, 16514, 27823, 92, 4613, 886, 62, 16514, 27823, 25, 1391, 437, 62, 4475, 92, 4943]"
🧠 ML Signal: Iteration over a fixed range can indicate a pattern in data processing,"[8582, 100, 254, 10373, 26484, 25, 40806, 341, 625, 257, 5969, 2837, 460, 7603, 257, 3912, 287, 1366, 7587]",0.5,663,ml_signal,146,Iteration over a fixed range can indicate a pattern in data processing,,645,    return pd.DataFrame.from_records(records),"[220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 8344, 3669, 8]"
✅ Best Practice: Initialize lists outside of loops for clarity,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 2354, 286, 23607, 329, 16287]",0.5,671,best_practice,157,Initialize lists outside of loops for clarity,,663,    for player in players:,"[220, 220, 220, 329, 2137, 287, 1938, 25]"
🧠 ML Signal: Consistent data transformation pattern,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 1366, 13389, 3912]",0.5,696,ml_signal,161,Consistent data transformation pattern,,671,"                start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
🧠 ML Signal: Consistent data transformation pattern,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 1366, 13389, 3912]",0.5,728,ml_signal,167,Consistent data transformation pattern,,696,"            rate = len(df[df[""change_pct""] > 0]) / len(df)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2494, 796, 18896, 7, 7568, 58, 7568, 14692, 3803, 62, 79, 310, 8973, 1875, 657, 12962, 1220, 18896, 7, 7568, 8]"
✅ Best Practice: Use of pd.concat for combining DataFrames is efficient and clear,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439, 318, 6942, 290, 1598]",1.0,728,best_practice,171,Use of pd.concat for combining DataFrames is efficient and clear,,728,,[]
✅ Best Practice: Sorting DataFrame by index for organized data output,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 416, 6376, 329, 8389, 1366, 5072]",0.5,761,best_practice,173,Sorting DataFrame by index for organized data output,,728,"def get_players(entity_id, start_timestamp, end_timestamp, provider=""em"", direction=""in"", buy_rate=5):","[4299, 651, 62, 32399, 7, 26858, 62, 312, 11, 923, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 11, 10131, 2625, 368, 1600, 4571, 2625, 259, 1600, 2822, 62, 4873, 28, 20, 2599]"
⚠️ SAST Risk (Low): Using a mutable default value for `timestamp` can lead to unexpected behavior if `current_date()` returns a mutable object.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 1988, 329, 4600, 16514, 27823, 63, 460, 1085, 284, 10059, 4069, 611, 4600, 14421, 62, 4475, 3419, 63, 5860, 257, 4517, 540, 2134, 13]",0.5,793,sast_risk,167,Using a mutable default value for `timestamp` can lead to unexpected behavior if `current_date()` returns a mutable object.,Low,761,"            rate = len(df[df[""change_pct""] > 0]) / len(df)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2494, 796, 18896, 7, 7568, 58, 7568, 14692, 3803, 62, 79, 310, 8973, 1875, 657, 12962, 1220, 18896, 7, 7568, 8]"
✅ Best Practice: Use descriptive variable names for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287, 290, 5529, 1799, 13]",1.0,806,best_practice,169,Use descriptive variable names for clarity and maintainability.,,793,        records.append(record),"[220, 220, 220, 220, 220, 220, 220, 4406, 13, 33295, 7, 22105, 8]"
✅ Best Practice: Use logging instead of print for better control over output and log levels.,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072, 290, 2604, 2974, 13]",1.0,806,best_practice,172,Use logging instead of print for better control over output and log levels.,,806,,[]
"🧠 ML Signal: The function `get_big_players` is used to filter or retrieve a subset of data, indicating a pattern of data selection.","[8582, 100, 254, 10373, 26484, 25, 383, 2163, 4600, 1136, 62, 14261, 62, 32399, 63, 318, 973, 284, 8106, 393, 19818, 257, 24637, 286, 1366, 11, 12739, 257, 3912, 286, 1366, 6356, 13]",0.5,839,ml_signal,173,"The function `get_big_players` is used to filter or retrieve a subset of data, indicating a pattern of data selection.",,806,"def get_players(entity_id, start_timestamp, end_timestamp, provider=""em"", direction=""in"", buy_rate=5):","[4299, 651, 62, 32399, 7, 26858, 62, 312, 11, 923, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 11, 10131, 2625, 368, 1600, 4571, 2625, 259, 1600, 2822, 62, 4873, 28, 20, 2599]"
"✅ Best Practice: Use logging to record information, which is more flexible and appropriate for production environments.","[26486, 227, 6705, 19939, 25, 5765, 18931, 284, 1700, 1321, 11, 543, 318, 517, 12846, 290, 5035, 329, 3227, 12493, 13]",1.0,853,best_practice,176,"Use logging to record information, which is more flexible and appropriate for production environments.",,839,        for i in range(5):,"[220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 20, 2599]"
"🧠 ML Signal: The function `get_player_success_rate` is used to calculate or retrieve performance metrics, indicating a pattern of data analysis.","[8582, 100, 254, 10373, 26484, 25, 383, 2163, 4600, 1136, 62, 7829, 62, 13138, 62, 4873, 63, 318, 973, 284, 15284, 393, 19818, 2854, 20731, 11, 12739, 257, 3912, 286, 1366, 3781, 13]",0.5,879,ml_signal,178,"The function `get_player_success_rate` is used to calculate or retrieve performance metrics, indicating a pattern of data analysis.",,853,"            columns.append(f""dep{i + 1}_rate"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 13, 33295, 7, 69, 1, 10378, 90, 72, 1343, 352, 92, 62, 4873, 4943]"
🧠 ML Signal: Filtering data based on conditions is a common pattern in data processing and analysis.,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 3403, 318, 257, 2219, 3912, 287, 1366, 7587, 290, 3781, 13]",0.5,905,ml_signal,182,Filtering data based on conditions is a common pattern in data processing and analysis.,,879,"            columns.append(f""dep_{i + 1}_rate"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 13, 33295, 7, 69, 1, 10378, 23330, 72, 1343, 352, 92, 62, 4873, 4943]"
✅ Best Practice: Use of default parameter values for better function flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 1365, 2163, 13688]",1.0,929,best_practice,181,Use of default parameter values for better function flexibility,,905,"            columns.append(f""dep_{i + 1}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 13, 33295, 7, 69, 1, 10378, 23330, 72, 1343, 352, 92, 4943]"
🧠 ML Signal: Checking for non-null DataFrame to handle data availability,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 1729, 12, 8423, 6060, 19778, 284, 5412, 1366, 11500]",1.0,947,ml_signal,190,Checking for non-null DataFrame to handle data availability,,929,"        index=[""entity_id"", ""timestamp""],","[220, 220, 220, 220, 220, 220, 220, 6376, 28, 14692, 26858, 62, 312, 1600, 366, 16514, 27823, 33116]"
✅ Best Practice: Calculating new column 'cap' for further filtering,"[26486, 227, 6705, 19939, 25, 27131, 803, 649, 5721, 705, 11128, 6, 329, 2252, 25431]",1.0,954,best_practice,192,Calculating new column 'cap' for further filtering,,947,    dfs = [],"[220, 220, 220, 288, 9501, 796, 17635]"
✅ Best Practice: Filtering DataFrame based on 'cap_start' for targeted results,"[26486, 227, 6705, 19939, 25, 7066, 20212, 6060, 19778, 1912, 319, 705, 11128, 62, 9688, 6, 329, 7977, 2482]",1.0,980,best_practice,196,Filtering DataFrame based on 'cap_start' for targeted results,,954,"            p_df.columns = [""player"", ""buy_rate""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 62, 7568, 13, 28665, 82, 796, 14631, 7829, 1600, 366, 17846, 62, 4873, 8973]"
✅ Best Practice: Filtering DataFrame based on 'cap_end' for targeted results,"[26486, 227, 6705, 19939, 25, 7066, 20212, 6060, 19778, 1912, 319, 705, 11128, 62, 437, 6, 329, 7977, 2482]",1.0,994,best_practice,199,Filtering DataFrame based on 'cap_end' for targeted results,,980,        for i in range(5):,"[220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 20, 2599]"
🧠 ML Signal: Returning list of entity IDs as a result,"[8582, 100, 254, 10373, 26484, 25, 42882, 1351, 286, 9312, 32373, 355, 257, 1255]",1.0,1034,ml_signal,200,Returning list of entity IDs as a result,,994,"            p_df = df[[f""dep_{i + 1}"", f""dep_{i + 1}_rate""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 62, 7568, 796, 47764, 30109, 69, 1, 10378, 23330, 72, 1343, 352, 92, 1600, 277, 1, 10378, 23330, 72, 1343, 352, 92, 62, 4873, 8973, 4083, 30073, 3419]"
⚠️ SAST Risk (Low): Potential infinite recursion if data is never available,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 664, 24197, 611, 1366, 318, 1239, 1695]",1.0,1074,sast_risk,200,Potential infinite recursion if data is never available,Low,1034,"            p_df = df[[f""dep_{i + 1}"", f""dep_{i + 1}_rate""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 62, 7568, 796, 47764, 30109, 69, 1, 10378, 23330, 72, 1343, 352, 92, 1600, 277, 1, 10378, 23330, 72, 1343, 352, 92, 62, 4873, 8973, 4083, 30073, 3419]"
🧠 ML Signal: Recursive call pattern with retry mechanism,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 869, 3912, 351, 1005, 563, 9030]",0.5,1104,ml_signal,209,Recursive call pattern with retry mechanism,,1074,"    end_timestamp = date_time_by_interval(timestamp, -intervals[-1] - 30)","[220, 220, 220, 886, 62, 16514, 27823, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7, 16514, 27823, 11, 532, 3849, 12786, 58, 12, 16, 60, 532, 1542, 8]"
"🧠 ML Signal: Function with default parameter value, indicating common usage pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 11, 12739, 2219, 8748, 3912]",0.5,1134,ml_signal,209,"Function with default parameter value, indicating common usage pattern",,1104,"    end_timestamp = date_time_by_interval(timestamp, -intervals[-1] - 30)","[220, 220, 220, 886, 62, 16514, 27823, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7, 16514, 27823, 11, 532, 3849, 12786, 58, 12, 16, 60, 532, 1542, 8]"
✅ Best Practice: Use of named parameters for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 10007, 329, 16287, 290, 5529, 1799]",0.5,1140,best_practice,210,Use of named parameters for clarity and maintainability,,1134,    # recent year,"[220, 220, 220, 1303, 2274, 614]"
✅ Best Practice: Explicit parameter passing improves readability,"[26486, 227, 6705, 19939, 25, 11884, 11507, 6427, 19575, 1100, 1799]",1.0,1162,best_practice,213,Explicit parameter passing improves readability,,1140,    # 最近一年牛x的营业部,"[220, 220, 220, 1303, 42164, 222, 32573, 239, 31660, 33176, 112, 31965, 249, 87, 21410, 164, 238, 98, 10310, 21253, 225, 101]"
🧠 ML Signal: Use of a constant (BIG_CAP) suggests a threshold or boundary condition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6937, 357, 3483, 38, 62, 33177, 8, 5644, 257, 11387, 393, 18645, 4006]",1.0,1193,ml_signal,214,Use of a constant (BIG_CAP) suggests a threshold or boundary condition,,1162,"    players = get_big_players(start_timestamp=start_timestamp, end_timestamp=end_timestamp)","[220, 220, 220, 1938, 796, 651, 62, 14261, 62, 32399, 7, 9688, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 8]"
✅ Best Practice: Use of None to indicate no upper limit for cap_end,"[26486, 227, 6705, 19939, 25, 5765, 286, 6045, 284, 7603, 645, 6727, 4179, 329, 1451, 62, 437]",0.5,1228,best_practice,217,Use of None to indicate no upper limit for cap_end,,1193,"        start_timestamp=start_timestamp, end_timestamp=end_timestamp, intervals=intervals, players=players","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11, 20016, 28, 3849, 12786, 11, 1938, 28, 32399]"
"🧠 ML Signal: Hardcoded string ""stock"" indicates specific entity type filtering","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 4731, 366, 13578, 1, 9217, 2176, 9312, 2099, 25431]",0.5,1232,ml_signal,218,"Hardcoded string ""stock"" indicates specific entity type filtering",,1228,    ),"[220, 220, 220, 1267]"
✅ Best Practice: Passing provider as a parameter allows for flexibility and reuse,"[26486, 227, 6705, 19939, 25, 46389, 10131, 355, 257, 11507, 3578, 329, 13688, 290, 32349]",1.0,1232,best_practice,221,Passing provider as a parameter allows for flexibility and reuse,,1232,,[]
✅ Best Practice: Provide a default value for the 'provider' parameter to enhance function usability.,"[26486, 227, 6705, 19939, 25, 44290, 257, 4277, 1988, 329, 262, 705, 15234, 1304, 6, 11507, 284, 9494, 2163, 42863, 13]",0.5,1254,best_practice,213,Provide a default value for the 'provider' parameter to enhance function usability.,,1232,    # 最近一年牛x的营业部,"[220, 220, 220, 1303, 42164, 222, 32573, 239, 31660, 33176, 112, 31965, 249, 87, 21410, 164, 238, 98, 10310, 21253, 225, 101]"
"🧠 ML Signal: Function calls another function with specific parameters, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 1194, 2163, 351, 2176, 10007, 11, 12739, 257, 3912, 286, 8748, 13]",1.0,1285,ml_signal,214,"Function calls another function with specific parameters, indicating a pattern of usage.",,1254,"    players = get_big_players(start_timestamp=start_timestamp, end_timestamp=end_timestamp)","[220, 220, 220, 1938, 796, 651, 62, 14261, 62, 32399, 7, 9688, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 8]"
"🧠 ML Signal: Use of specific constants (MIDDLE_CAP, BIG_CAP) can indicate domain-specific knowledge.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 38491, 357, 44, 2389, 35, 2538, 62, 33177, 11, 26746, 62, 33177, 8, 460, 7603, 7386, 12, 11423, 3725, 13]",0.5,1320,ml_signal,217,"Use of specific constants (MIDDLE_CAP, BIG_CAP) can indicate domain-specific knowledge.",,1285,"        start_timestamp=start_timestamp, end_timestamp=end_timestamp, intervals=intervals, players=players","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11, 20016, 28, 3849, 12786, 11, 1938, 28, 32399]"
✅ Best Practice: Use of named parameters improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 10007, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,1324,best_practice,218,Use of named parameters improves readability and maintainability.,,1320,    ),"[220, 220, 220, 1267]"
🧠 ML Signal: Function with default parameter value indicating common usage pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 12739, 2219, 8748, 3912]",1.0,1359,ml_signal,217,Function with default parameter value indicating common usage pattern,,1324,"        start_timestamp=start_timestamp, end_timestamp=end_timestamp, intervals=intervals, players=players","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11, 20016, 28, 3849, 12786, 11, 1938, 28, 32399]"
🧠 ML Signal: Function call with specific parameters indicating a pattern of usage,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 12739, 257, 3912, 286, 8748]",0.5,1363,ml_signal,218,Function call with specific parameters indicating a pattern of usage,,1359,    ),"[220, 220, 220, 1267]"
🧠 ML Signal: Named parameter usage indicating common practice,"[8582, 100, 254, 10373, 26484, 25, 34441, 11507, 8748, 12739, 2219, 3357]",0.5,1363,ml_signal,221,Named parameter usage indicating common practice,,1363,,[]
🧠 ML Signal: Use of constants indicating a pattern of usage,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 12739, 257, 3912, 286, 8748]",0.5,1363,ml_signal,222,Use of constants indicating a pattern of usage,,1363,,[]
🧠 ML Signal: Use of constants indicating a pattern of usage,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 12739, 257, 3912, 286, 8748]",0.5,1364,ml_signal,225,Use of constants indicating a pattern of usage,,1363,):,[2599]
🧠 ML Signal: Hardcoded string indicating a specific usage pattern,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 4731, 12739, 257, 2176, 8748, 3912]",0.5,1373,ml_signal,226,Hardcoded string indicating a specific usage pattern,,1364,    if not adjust_type:,"[220, 220, 220, 611, 407, 4532, 62, 4906, 25]"
🧠 ML Signal: Passing a variable as a parameter indicating flexibility in usage,"[8582, 100, 254, 10373, 26484, 25, 46389, 257, 7885, 355, 257, 11507, 12739, 13688, 287, 8748]",0.5,1414,ml_signal,229,Passing a variable as a parameter indicating flexibility in usage,,1373,"    kdata_schema = get_kdata_schema(entity_type, level=IntervalLevel.LEVEL_1DAY, adjust_type=adjust_type)","[220, 220, 220, 479, 7890, 62, 15952, 2611, 796, 651, 62, 74, 7890, 62, 15952, 2611, 7, 26858, 62, 4906, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11, 4532, 62, 4906, 28, 23032, 62, 4906, 8]"
🧠 ML Signal: Function with default parameter value indicating common usage pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 12739, 2219, 8748, 3912]",1.0,1414,ml_signal,221,Function with default parameter value indicating common usage pattern,,1414,,[]
✅ Best Practice: Using named arguments for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 8554, 3706, 7159, 329, 16287, 290, 5529, 1799]",0.5,1414,best_practice,222,Using named arguments for clarity and maintainability,,1414,,[]
🧠 ML Signal: Function with default parameter values indicating common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 3815, 12739, 2219, 8748, 7572]",0.5,1415,ml_signal,225,Function with default parameter values indicating common usage patterns,,1414,):,[2599]
✅ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,1424,best_practice,226,Use of default parameter values for flexibility and ease of use,,1415,    if not adjust_type:,"[220, 220, 220, 611, 407, 4532, 62, 4906, 25]"
🧠 ML Signal: Function call with keyword arguments indicating common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 21179, 7159, 12739, 2219, 8748, 7572]",0.5,1424,ml_signal,228,Function call with keyword arguments indicating common usage patterns,,1424,,[]
✅ Best Practice: Use of keyword arguments for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 21179, 7159, 329, 16287, 290, 5529, 1799]",1.0,1465,best_practice,229,Use of keyword arguments for clarity and maintainability,,1424,"    kdata_schema = get_kdata_schema(entity_type, level=IntervalLevel.LEVEL_1DAY, adjust_type=adjust_type)","[220, 220, 220, 479, 7890, 62, 15952, 2611, 796, 651, 62, 74, 7890, 62, 15952, 2611, 7, 26858, 62, 4906, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11, 4532, 62, 4906, 28, 23032, 62, 4906, 8]"
"🧠 ML Signal: Function with default parameter value, indicating common usage pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 11, 12739, 2219, 8748, 3912]",1.0,1506,ml_signal,229,"Function with default parameter value, indicating common usage pattern",,1465,"    kdata_schema = get_kdata_schema(entity_type, level=IntervalLevel.LEVEL_1DAY, adjust_type=adjust_type)","[220, 220, 220, 479, 7890, 62, 15952, 2611, 796, 651, 62, 74, 7890, 62, 15952, 2611, 7, 26858, 62, 4906, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11, 4532, 62, 4906, 28, 23032, 62, 4906, 8]"
✅ Best Practice: Use of descriptive function name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 329, 16287]",0.5,1521,best_practice,230,Use of descriptive function name for clarity,,1506,    df = kdata_schema.query_data(,"[220, 220, 220, 47764, 796, 479, 7890, 62, 15952, 2611, 13, 22766, 62, 7890, 7]"
✅ Best Practice: Use of default parameter value for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 13688]",0.5,1536,best_practice,230,Use of default parameter value for flexibility,,1521,    df = kdata_schema.query_data(,"[220, 220, 220, 47764, 796, 479, 7890, 62, 15952, 2611, 13, 22766, 62, 7890, 7]"
"🧠 ML Signal: Function call with specific parameters, indicating common usage pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 12739, 2219, 8748, 3912]",1.0,1549,ml_signal,233,"Function call with specific parameters, indicating common usage pattern",,1536,"        index=""entity_id"",","[220, 220, 220, 220, 220, 220, 220, 6376, 2625, 26858, 62, 312, 1600]"
✅ Best Practice: Use of named arguments for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 329, 16287]",1.0,1553,best_practice,234,Use of named arguments for clarity,,1549,    ),"[220, 220, 220, 1267]"
🧠 ML Signal: Function to query and filter stock data for limit up stocks,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 12405, 290, 8106, 4283, 1366, 329, 4179, 510, 14420]",0.5,1566,ml_signal,233,Function to query and filter stock data for limit up stocks,,1553,"        index=""entity_id"",","[220, 220, 220, 220, 220, 220, 220, 6376, 2625, 26858, 62, 312, 1600]"
🧠 ML Signal: Querying stock data with specific filters and columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 4283, 1366, 351, 2176, 16628, 290, 15180]",0.5,1581,ml_signal,235,Querying stock data with specific filters and columns,,1566,    if pd_is_not_null(df):,"[220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
⚠️ SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 6105, 5447, 393, 31031]",0.5,1596,sast_risk,237,Potential risk if pd_is_not_null is not properly defined or validated,Low,1581,        df_result = df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 62, 20274, 796, 47764, 13, 30073, 3419]"
🧠 ML Signal: Converting DataFrame column to list for further processing,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 5721, 284, 1351, 329, 2252, 7587]",0.5,1627,ml_signal,239,Converting DataFrame column to list for further processing,,1596,"            df_result = df_result.loc[(df[""cap""] >= cap_start)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 20274, 796, 47764, 62, 20274, 13, 17946, 58, 7, 7568, 14692, 11128, 8973, 18189, 1451, 62, 9688, 15437]"
"🧠 ML Signal: Function parameter 'n' controls the number of top stocks, indicating user preference for data size","[8582, 100, 254, 10373, 26484, 25, 15553, 11507, 705, 77, 6, 6973, 262, 1271, 286, 1353, 14420, 11, 12739, 2836, 12741, 329, 1366, 2546]",0.5,1642,ml_signal,237,"Function parameter 'n' controls the number of top stocks, indicating user preference for data size",,1627,        df_result = df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 62, 20274, 796, 47764, 13, 30073, 3419]"
🧠 ML Signal: Querying stock data with specific columns and order indicates user interest in top-performing stocks,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 4283, 1366, 351, 2176, 15180, 290, 1502, 9217, 2836, 1393, 287, 1353, 12, 37440, 14420]",0.5,1673,ml_signal,239,Querying stock data with specific columns and order indicates user interest in top-performing stocks,,1642,"            df_result = df_result.loc[(df[""cap""] >= cap_start)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 20274, 796, 47764, 62, 20274, 13, 17946, 58, 7, 7568, 14692, 11128, 8973, 18189, 1451, 62, 9688, 15437]"
⚠️ SAST Risk (Low): Potential SQL injection risk if 'query_data' method does not properly sanitize inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 705, 22766, 62, 7890, 6, 2446, 857, 407, 6105, 5336, 270, 1096, 17311]",1.0,1685,sast_risk,240,Potential SQL injection risk if 'query_data' method does not properly sanitize inputs,Low,1673,        if cap_end:,"[220, 220, 220, 220, 220, 220, 220, 611, 1451, 62, 437, 25]"
🧠 ML Signal: Checking if DataFrame is not null indicates handling of empty or invalid data scenarios,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 6060, 19778, 318, 407, 9242, 9217, 9041, 286, 6565, 393, 12515, 1366, 13858]",0.5,1703,ml_signal,242,Checking if DataFrame is not null indicates handling of empty or invalid data scenarios,,1685,        return df_result.index.tolist(),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 62, 20274, 13, 9630, 13, 83, 349, 396, 3419]"
🧠 ML Signal: Converting DataFrame column to list shows interest in specific data format for further processing,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 5721, 284, 1351, 2523, 1393, 287, 2176, 1366, 5794, 329, 2252, 7587]",0.5,1708,ml_signal,243,Converting DataFrame column to list shows interest in specific data format for further processing,,1703,    else:,"[220, 220, 220, 2073, 25]"
🧠 ML Signal: Usage of current timestamp for time-based operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1459, 41033, 329, 640, 12, 3106, 4560]",1.0,1726,ml_signal,242,Usage of current timestamp for time-based operations,,1708,        return df_result.index.tolist(),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 62, 20274, 13, 9630, 13, 83, 349, 396, 3419]"
🧠 ML Signal: Querying data with specific columns and order,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 15180, 290, 1502]",1.0,1731,ml_signal,243,Querying data with specific columns and order,,1726,    else:,"[220, 220, 220, 2073, 25]"
🧠 ML Signal: Accessing specific data from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 1366, 422, 257, 6060, 19778]",1.0,1750,ml_signal,248,Accessing specific data from a DataFrame,,1731,"            cap_start=cap_start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1451, 62, 9688, 28, 11128, 62, 9688, 11]"
⚠️ SAST Risk (Low): Potential information exposure through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 7111, 832, 18931]",1.0,1766,sast_risk,251,Potential information exposure through logging,Low,1750,"            provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 15234, 1304, 11]"
⚠️ SAST Risk (Low): Logging potentially sensitive timing information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 10576, 1321]",1.0,1789,sast_risk,253,Logging potentially sensitive timing information,Low,1766,"            retry_times=retry_times - 1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 22355, 28, 1186, 563, 62, 22355, 532, 352, 11]"
🧠 ML Signal: Filtering data based on time range,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 640, 2837]",1.0,1806,ml_signal,257,Filtering data based on time range,,1789,"def get_big_cap_stock(timestamp, provider=""em""):","[4299, 651, 62, 14261, 62, 11128, 62, 13578, 7, 16514, 27823, 11, 10131, 2625, 368, 1, 2599]"
🧠 ML Signal: Querying data with filters and specific columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 16628, 290, 2176, 15180]",1.0,1820,ml_signal,258,Querying data with filters and specific columns,,1806,    return get_entity_list_by_cap(,"[220, 220, 220, 1441, 651, 62, 26858, 62, 4868, 62, 1525, 62, 11128, 7]"
✅ Best Practice: Checking if DataFrame is not null before processing,"[26486, 227, 6705, 19939, 25, 39432, 611, 6060, 19778, 318, 407, 9242, 878, 7587]",0.5,1834,best_practice,264,Checking if DataFrame is not null before processing,,1820,    return get_entity_list_by_cap(,"[220, 220, 220, 1441, 651, 62, 26858, 62, 4868, 62, 1525, 62, 11128, 7]"
✅ Best Practice: Sorting DataFrame for consistent processing,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 329, 6414, 7587]",1.0,1876,best_practice,265,Sorting DataFrame for consistent processing,,1834,"        timestamp=timestamp, cap_start=MIDDLE_CAP, cap_end=BIG_CAP, entity_type=""stock"", provider=provider","[220, 220, 220, 220, 220, 220, 220, 41033, 28, 16514, 27823, 11, 1451, 62, 9688, 28, 44, 2389, 35, 2538, 62, 33177, 11, 1451, 62, 437, 28, 3483, 38, 62, 33177, 11, 9312, 62, 4906, 2625, 13578, 1600, 10131, 28, 15234, 1304]"
🧠 ML Signal: Grouping and aggregating data for analysis,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 13262, 803, 1366, 329, 3781]",1.0,1876,ml_signal,267,Grouping and aggregating data for analysis,,1876,,[]
⚠️ SAST Risk (Low): Potential information exposure through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 7111, 832, 18931]",1.0,1876,sast_risk,274,Potential information exposure through logging,Low,1876,,[]
🧠 ML Signal: Identifying significant changes in data,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 2383, 2458, 287, 1366]",0.5,1893,ml_signal,275,Identifying significant changes in data,,1876,"def get_mini_cap_stock(timestamp, provider=""em""):","[4299, 651, 62, 45313, 62, 11128, 62, 13578, 7, 16514, 27823, 11, 10131, 2625, 368, 1, 2599]"
✅ Best Practice: Returning results in a clear and structured format,"[26486, 227, 6705, 19939, 25, 42882, 2482, 287, 257, 1598, 290, 20793, 5794]",0.5,1912,best_practice,281,Returning results in a clear and structured format,,1893,"def get_mini_and_small_stock(timestamp, provider=""em""):","[4299, 651, 62, 45313, 62, 392, 62, 17470, 62, 13578, 7, 16514, 27823, 11, 10131, 2625, 368, 1, 2599]"
✅ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,1912,best_practice,274,Use of default parameter values for flexibility and ease of use,,1912,,[]
🧠 ML Signal: Conditional logic based on provider type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 10131, 2099]",0.5,1929,ml_signal,275,Conditional logic based on provider type,,1912,"def get_mini_cap_stock(timestamp, provider=""em""):","[4299, 651, 62, 45313, 62, 11128, 62, 13578, 7, 16514, 27823, 11, 10131, 2625, 368, 1, 2599]"
🧠 ML Signal: Conversion of DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351]",0.5,1968,ml_signal,283,Conversion of DataFrame column to list,,1929,"        timestamp=timestamp, cap_start=None, cap_end=MIDDLE_CAP, entity_type=""stock"", provider=provider","[220, 220, 220, 220, 220, 220, 220, 41033, 28, 16514, 27823, 11, 1451, 62, 9688, 28, 14202, 11, 1451, 62, 437, 28, 44, 2389, 35, 2538, 62, 33177, 11, 9312, 62, 4906, 2625, 13578, 1600, 10131, 28, 15234, 1304]"
🧠 ML Signal: Handling of optional parameters,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 11902, 10007]",0.5,1968,ml_signal,285,Handling of optional parameters,,1968,,[]
⚠️ SAST Risk (Low): Potential timezone issues with date handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 3128, 9041]",0.5,1968,sast_risk,285,Potential timezone issues with date handling,Low,1968,,[]
🧠 ML Signal: Conversion of DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351]",0.5,1968,ml_signal,298,Conversion of DataFrame column to list,,1968,,[]
🧠 ML Signal: Default parameter value for 'n' indicates typical usage pattern,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 1988, 329, 705, 77, 6, 9217, 7226, 8748, 3912]",0.5,2001,ml_signal,294,Default parameter value for 'n' indicates typical usage pattern,,1968,"    df = StockQuote.query_data(filters=[StockQuote.is_limit_up], columns=[StockQuote.entity_id])","[220, 220, 220, 47764, 796, 10500, 25178, 13, 22766, 62, 7890, 7, 10379, 1010, 41888, 26207, 25178, 13, 271, 62, 32374, 62, 929, 4357, 15180, 41888, 26207, 25178, 13, 26858, 62, 312, 12962]"
🧠 ML Signal: Querying data with specific columns and order indicates a pattern of data retrieval,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 15180, 290, 1502, 9217, 257, 3912, 286, 1366, 45069]",0.5,2020,ml_signal,296,Querying data with specific columns and order indicates a pattern of data retrieval,,2001,"        return df[""entity_id""].to_list()","[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 14692, 26858, 62, 312, 1, 4083, 1462, 62, 4868, 3419]"
⚠️ SAST Risk (Low): Potential risk if pd_is_not_null is not properly handling null checks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 6105, 9041, 9242, 8794]",1.0,2020,sast_risk,298,Potential risk if pd_is_not_null is not properly handling null checks,Low,2020,,[]
🧠 ML Signal: Converting DataFrame column to list indicates a pattern of data transformation,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 5721, 284, 1351, 9217, 257, 3912, 286, 1366, 13389]",0.5,2058,ml_signal,300,Converting DataFrame column to list indicates a pattern of data transformation,,2020,"    df = StockQuote.query_data(columns=[StockQuote.entity_id], order=StockQuote.change_pct.desc(), limit=n)","[220, 220, 220, 47764, 796, 10500, 25178, 13, 22766, 62, 7890, 7, 28665, 82, 41888, 26207, 25178, 13, 26858, 62, 312, 4357, 1502, 28, 26207, 25178, 13, 3803, 62, 79, 310, 13, 20147, 22784, 4179, 28, 77, 8]"
🧠 ML Signal: Function to query and filter stock data for limit down events,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 12405, 290, 8106, 4283, 1366, 329, 4179, 866, 2995]",0.5,2058,ml_signal,298,Function to query and filter stock data for limit down events,,2058,,[]
⚠️ SAST Risk (Low): Ensure that the query_data method handles input sanitization to prevent injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 12405, 62, 7890, 2446, 17105, 5128, 5336, 270, 1634, 284, 2948, 16954, 3434]",0.5,2096,sast_risk,300,Ensure that the query_data method handles input sanitization to prevent injection attacks,Low,2058,"    df = StockQuote.query_data(columns=[StockQuote.entity_id], order=StockQuote.change_pct.desc(), limit=n)","[220, 220, 220, 47764, 796, 10500, 25178, 13, 22766, 62, 7890, 7, 28665, 82, 41888, 26207, 25178, 13, 26858, 62, 312, 4357, 1502, 28, 26207, 25178, 13, 3803, 62, 79, 310, 13, 20147, 22784, 4179, 28, 77, 8]"
✅ Best Practice: Check for null data before processing to avoid runtime errors,"[26486, 227, 6705, 19939, 25, 6822, 329, 9242, 1366, 878, 7587, 284, 3368, 19124, 8563]",0.5,2115,best_practice,302,Check for null data before processing to avoid runtime errors,,2096,"        return df[""entity_id""].to_list()","[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 14692, 26858, 62, 312, 1, 4083, 1462, 62, 4868, 3419]"
🧠 ML Signal: Conversion of DataFrame column to list for further processing,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351, 329, 2252, 7587]",0.5,2115,ml_signal,304,Conversion of DataFrame column to list for further processing,,2115,,[]
🧠 ML Signal: Usage of default parameters and function calls as default values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4277, 10007, 290, 2163, 3848, 355, 4277, 3815]",1.0,2115,ml_signal,303,Usage of default parameters and function calls as default values,,2115,,[]
🧠 ML Signal: Querying data with dynamic filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 8925, 16628]",1.0,2131,ml_signal,310,Querying data with dynamic filters,,2115,"    latest_time = int(latest[""time""][0])","[220, 220, 220, 3452, 62, 2435, 796, 493, 7, 42861, 14692, 2435, 1, 7131, 15, 12962]"
✅ Best Practice: Sorting data for consistent processing,"[26486, 227, 6705, 19939, 25, 311, 24707, 1366, 329, 6414, 7587]",1.0,2137,best_practice,317,Sorting data for consistent processing,,2131,    # interval minutes,"[220, 220, 220, 1303, 16654, 2431]"
✅ Best Practice: Dropping duplicates to ensure unique entity processing,"[26486, 227, 6705, 19939, 25, 21045, 2105, 14184, 16856, 284, 4155, 3748, 9312, 7587]",1.0,2153,best_practice,319,Dropping duplicates to ensure unique entity processing,,2137,    filters = [StockQuoteLog.time > start_time],"[220, 220, 220, 16628, 796, 685, 26207, 25178, 11187, 13, 2435, 1875, 923, 62, 2435, 60]"
🧠 ML Signal: Mapping entities to specific attributes,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 12066, 284, 2176, 12608]",1.0,2193,ml_signal,321,Mapping entities to specific attributes,,2153,"        filters=filters, columns=[StockQuoteLog.entity_id, StockQuoteLog.time, StockQuoteLog.price], return_type=""df""","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11, 15180, 41888, 26207, 25178, 11187, 13, 26858, 62, 312, 11, 10500, 25178, 11187, 13, 2435, 11, 10500, 25178, 11187, 13, 20888, 4357, 1441, 62, 4906, 2625, 7568, 1]"
⚠️ SAST Risk (Low): Direct print statements can expose data in production environments,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 3601, 6299, 460, 15651, 1366, 287, 3227, 12493]",1.0,2233,sast_risk,321,Direct print statements can expose data in production environments,Low,2193,"        filters=filters, columns=[StockQuoteLog.entity_id, StockQuoteLog.time, StockQuoteLog.price], return_type=""df""","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11, 15180, 41888, 26207, 25178, 11187, 13, 26858, 62, 312, 11, 10500, 25178, 11187, 13, 2435, 11, 10500, 25178, 11187, 13, 20888, 4357, 1441, 62, 4906, 2625, 7568, 1]"
✅ Best Practice: Using __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,2273,best_practice,321,Using __all__ to define public API of the module,,2233,"        filters=filters, columns=[StockQuoteLog.entity_id, StockQuoteLog.time, StockQuoteLog.price], return_type=""df""","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11, 15180, 41888, 26207, 25178, 11187, 13, 26858, 62, 312, 11, 10500, 25178, 11187, 13, 2435, 11, 10500, 25178, 11187, 13, 20888, 4357, 1441, 62, 4906, 2625, 7568, 1]"

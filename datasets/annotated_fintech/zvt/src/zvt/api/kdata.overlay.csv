annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Function definition with parameters indicating a date range,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3128, 2837]",0.5,10,ml_signal,16,Function definition with parameters indicating a date range,,0,"    to_pd_timestamp,","[220, 220, 220, 284, 62, 30094, 62, 16514, 27823, 11]"
üß† ML Signal: Querying data from a specific entity and provider,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 2176, 9312, 290, 10131]",0.5,22,ml_signal,17,Querying data from a specific entity and provider,,10,"    date_time_by_interval,","[220, 220, 220, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'query_data' method is vulnerable to injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 22766, 62, 7890, 6, 2446, 318, 8826, 284, 16954, 3434]",1.0,34,sast_risk,17,Potential risk if 'query_data' method is vulnerable to injection attacks,Low,22,"    date_time_by_interval,","[220, 220, 220, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11]"
"üß† ML Signal: Hardcoded entity_id and provider, indicating specific data source usage","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 9312, 62, 312, 290, 10131, 11, 12739, 2176, 1366, 2723, 8748]",0.5,46,ml_signal,17,"Hardcoded entity_id and provider, indicating specific data source usage",,34,"    date_time_by_interval,","[220, 220, 220, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11]"
"üß† ML Signal: Specific columns being queried, indicating data selection pattern","[8582, 100, 254, 10373, 26484, 25, 17377, 15180, 852, 42517, 798, 11, 12739, 1366, 6356, 3912]",0.5,59,ml_signal,26,"Specific columns being queried, indicating data selection pattern",,46,"        columns=[""timestamp""],","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 14692, 16514, 27823, 33116]"
üß† ML Signal: Use of start and end timestamps for data filtering,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 923, 290, 886, 4628, 395, 9430, 329, 1366, 25431]",0.5,72,ml_signal,26,Use of start and end timestamps for data filtering,,59,"        columns=[""timestamp""],","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 14692, 16514, 27823, 33116]"
üß† ML Signal: Ordering data by timestamp in ascending order,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 1366, 416, 41033, 287, 41988, 1502]",0.5,92,ml_signal,29,Ordering data by timestamp in ascending order,,72,"        order=Index1dKdata.timestamp.asc(),","[220, 220, 220, 220, 220, 220, 220, 1502, 28, 15732, 16, 67, 42, 7890, 13, 16514, 27823, 13, 3372, 22784]"
üß† ML Signal: Specifying return type as DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 1441, 2099, 355, 6060, 19778]",0.5,96,ml_signal,31,Specifying return type as DataFrame,,92,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Accessing DataFrame column directly for conversion to list,"[26486, 227, 6705, 19939, 25, 8798, 278, 6060, 19778, 5721, 3264, 329, 11315, 284, 1351]",0.5,96,best_practice,33,Accessing DataFrame column directly for conversion to list,,96,,[]
‚ö†Ô∏è SAST Risk (Low): Using a mutable default argument like current_date() can lead to unexpected behavior if the function is called multiple times.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 4578, 588, 1459, 62, 4475, 3419, 460, 1085, 284, 10059, 4069, 611, 262, 2163, 318, 1444, 3294, 1661, 13]",0.5,110,sast_risk,27,Using a mutable default argument like current_date() can lead to unexpected behavior if the function is called multiple times.,Low,96,"        start_timestamp=start,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 11]"
‚úÖ Best Practice: Calculate a buffer period to ensure enough dates are fetched.,"[26486, 227, 6705, 19939, 25, 27131, 378, 257, 11876, 2278, 284, 4155, 1576, 9667, 389, 11351, 1740, 13]",0.5,130,best_practice,29,Calculate a buffer period to ensure enough dates are fetched.,,110,"        order=Index1dKdata.timestamp.asc(),","[220, 220, 220, 220, 220, 220, 220, 1502, 28, 15732, 16, 67, 42, 7890, 13, 16514, 27823, 13, 3372, 22784]"
üß† ML Signal: Fetching trade dates based on a calculated start date and a target date.,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 3292, 9667, 1912, 319, 257, 10488, 923, 3128, 290, 257, 2496, 3128, 13]",1.0,134,ml_signal,31,Fetching trade dates based on a calculated start date and a target date.,,130,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Handle edge case where days_count is zero.,"[26486, 227, 6705, 19939, 25, 33141, 5743, 1339, 810, 1528, 62, 9127, 318, 6632, 13]",1.0,134,best_practice,33,Handle edge case where days_count is zero.,,134,,[]
üß† ML Signal: Slicing a list to get the most recent trade dates.,"[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 257, 1351, 284, 651, 262, 749, 2274, 3292, 9667, 13]",1.0,134,ml_signal,33,Slicing a list to get the most recent trade dates.,,134,,[]
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,134,best_practice,33,Use of type hints for function parameters and return type improves code readability and maintainability.,,134,,[]
‚úÖ Best Practice: Type hint for variable 'data_schema' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 7885, 705, 7890, 62, 15952, 2611, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,145,best_practice,40,Type hint for variable 'data_schema' improves code readability and maintainability.,,134,    return dates[-days_count:],"[220, 220, 220, 1441, 9667, 58, 12, 12545, 62, 9127, 47715]"
üß† ML Signal: Pattern of querying data with specific order and limit can be used to train models on data retrieval patterns.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 42517, 1112, 1366, 351, 2176, 1502, 290, 4179, 460, 307, 973, 284, 4512, 4981, 319, 1366, 45069, 7572, 13]",0.5,155,ml_signal,43,Pattern of querying data with specific order and limit can be used to train models on data retrieval patterns.,,145,def get_latest_kdata_date(,"[4299, 651, 62, 42861, 62, 74, 7890, 62, 4475, 7]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'latest_data' is not empty; potential IndexError if assumption is incorrect.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 42861, 62, 7890, 6, 318, 407, 6565, 26, 2785, 12901, 12331, 611, 13196, 318, 11491, 13]",0.5,164,sast_risk,44,Assumes 'latest_data' is not empty; potential IndexError if assumption is incorrect.,Low,155,"    entity_type: str,","[220, 220, 220, 9312, 62, 4906, 25, 965, 11]"
‚úÖ Best Practice: Type hinting improves code readability and helps with static analysis,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5419, 351, 9037, 3781]",1.0,173,best_practice,44,Type hinting improves code readability and helps with static analysis,,164,"    entity_type: str,","[220, 220, 220, 9312, 62, 4906, 25, 965, 11]"
‚úÖ Best Practice: Using type checking to ensure correct type conversion,"[26486, 227, 6705, 19939, 25, 8554, 2099, 10627, 284, 4155, 3376, 2099, 11315]",0.5,173,best_practice,50,Using type checking to ensure correct type conversion,,173,,[]
‚úÖ Best Practice: Using type checking to ensure correct type conversion,"[26486, 227, 6705, 19939, 25, 8554, 2099, 10627, 284, 4155, 3376, 2099, 11315]",0.5,177,best_practice,53,Using type checking to ensure correct type conversion,,173,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Using clear and descriptive variable names,"[26486, 227, 6705, 19939, 25, 8554, 1598, 290, 35644, 7885, 3891]",0.5,197,best_practice,54,Using clear and descriptive variable names,,177,    return to_pd_timestamp(latest_data[0].timestamp),"[220, 220, 220, 1441, 284, 62, 30094, 62, 16514, 27823, 7, 42861, 62, 7890, 58, 15, 4083, 16514, 27823, 8]"
‚úÖ Best Practice: Using format for string formatting improves readability,"[26486, 227, 6705, 19939, 25, 8554, 5794, 329, 4731, 33313, 19575, 1100, 1799]",0.5,214,best_practice,60,Using format for string formatting improves readability,,197,"    adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Using format for string formatting improves readability,"[26486, 227, 6705, 19939, 25, 8554, 5794, 329, 4731, 33313, 19575, 1100, 1799]",0.5,225,best_practice,62,Using format for string formatting improves readability,,214,    if type(level) == str:,"[220, 220, 220, 611, 2099, 7, 5715, 8, 6624, 965, 25]"
üß† ML Signal: Function return values can be used to learn about schema generation patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 1441, 3815, 460, 307, 973, 284, 2193, 546, 32815, 5270, 7572]",0.5,236,ml_signal,62,Function return values can be used to learn about schema generation patterns,,225,    if type(level) == str:,"[220, 220, 220, 611, 2099, 7, 5715, 8, 6624, 965, 25]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be disabled in production with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 3227, 351, 23989, 9701, 13]",0.5,236,sast_risk,79,Using assert for control flow can be disabled in production with optimization flags.,Low,236,,[]
üß† ML Signal: Pattern of selecting the first element from a list.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 17246, 262, 717, 5002, 422, 257, 1351, 13]",0.5,245,ml_signal,81,Pattern of selecting the first element from a list.,,236,"    entity_id=None,","[220, 220, 220, 9312, 62, 312, 28, 14202, 11]"
üß† ML Signal: Pattern of wrapping a single item into a list.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 27074, 257, 2060, 2378, 656, 257, 1351, 13]",0.5,252,ml_signal,85,Pattern of wrapping a single item into a list.,,245,"    columns=None,","[220, 220, 220, 15180, 28, 14202, 11]"
‚úÖ Best Practice: Unpacking values from a function return for clarity.,"[26486, 227, 6705, 19939, 25, 791, 41291, 3815, 422, 257, 2163, 1441, 329, 16287, 13]",0.5,261,best_practice,86,Unpacking values from a function return for clarity.,,252,"    return_type=""df"",","[220, 220, 220, 1441, 62, 4906, 2625, 7568, 1600]"
‚úÖ Best Practice: Type hinting for better code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,270,best_practice,86,Type hinting for better code readability and maintainability.,,261,"    return_type=""df"",","[220, 220, 220, 1441, 62, 4906, 2625, 7568, 1600]"
‚úÖ Best Practice: Add type hint for the return value for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 9254, 329, 262, 1441, 1988, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,286,best_practice,101,Add type hint for the return value for better readability and maintainability,,270,        entity_ids = [entity_id],"[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 685, 26858, 62, 312, 60]"
‚úÖ Best Practice: Use .lower() to handle case-insensitive comparisons,"[26486, 227, 6705, 19939, 25, 5765, 764, 21037, 3419, 284, 5412, 1339, 12, 1040, 18464, 17909]",1.0,299,best_practice,106,Use .lower() to handle case-insensitive comparisons,,286,    return data_schema.query_data(,"[220, 220, 220, 1441, 1366, 62, 15952, 2611, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Pattern of returning specific enum based on string prefix,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8024, 2176, 33829, 1912, 319, 4731, 21231]",1.0,310,ml_signal,108,Pattern of returning specific enum based on string prefix,,299,"        level=level,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 5715, 11]"
üß† ML Signal: Pattern of returning default enum when condition is not met,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8024, 4277, 33829, 618, 4006, 318, 407, 1138]",1.0,322,ml_signal,110,Pattern of returning default enum when condition is not met,,310,"        columns=columns,","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 28665, 82, 11]"
üß† ML Signal: Function definition with parameters indicating a pattern for generating unique identifiers,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 15453, 3748, 42814]",1.0,333,ml_signal,108,Function definition with parameters indicating a pattern for generating unique identifiers,,322,"        level=level,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 5715, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `level` is not validated and can be influenced by user input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 5715, 63, 318, 407, 31031, 290, 460, 307, 12824, 416, 2836, 5128]",1.0,345,sast_risk,110,Potential risk if `level` is not validated and can be influenced by user input,Low,333,"        columns=columns,","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 28665, 82, 11]"
‚úÖ Best Practice: Use of format method for string formatting improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 2446, 329, 4731, 33313, 19575, 1100, 1799]",1.0,362,best_practice,112,Use of format method for string formatting improves readability,,345,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Use of format method for string formatting improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 2446, 329, 4731, 33313, 19575, 1100, 1799]",1.0,373,best_practice,115,Use of format method for string formatting improves readability,,362,"        session=session,","[220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11]"
‚úÖ Best Practice: Add type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,390,best_practice,113,Add type hints for function parameters and return type for better readability and maintainability,,373,"        end_timestamp=end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Check if 's' is a list or has a length before accessing the last element,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 82, 6, 318, 257, 1351, 393, 468, 257, 4129, 878, 22534, 262, 938, 5002]",0.5,401,best_practice,115,Check if 's' is a list or has a length before accessing the last element,,390,"        session=session,","[220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if 's' is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 705, 82, 6, 318, 6565]",0.5,412,sast_risk,117,Potential IndexError if 's' is empty,Low,401,"        limit=limit,","[220, 220, 220, 220, 220, 220, 220, 4179, 28, 32374, 11]"
‚úÖ Best Practice: Check for null values before accessing elements to avoid runtime errors.,"[26486, 227, 6705, 19939, 25, 6822, 329, 9242, 3815, 878, 22534, 4847, 284, 3368, 19124, 8563, 13]",0.5,423,best_practice,118,Check for null values before accessing elements to avoid runtime errors.,,412,"        index=index,","[220, 220, 220, 220, 220, 220, 220, 6376, 28, 9630, 11]"
‚úÖ Best Practice: Return the first element of the sequence if it is not null.,"[26486, 227, 6705, 19939, 25, 8229, 262, 717, 5002, 286, 262, 8379, 611, 340, 318, 407, 9242, 13]",0.5,427,best_practice,120,Return the first element of the sequence if it is not null.,,423,    ),"[220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Use of np.max without input validation can lead to unexpected errors if 's' is not a valid array.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 45941, 13, 9806, 1231, 5128, 21201, 460, 1085, 284, 10059, 8563, 611, 705, 82, 6, 318, 407, 257, 4938, 7177, 13]",0.5,431,sast_risk,120,Use of np.max without input validation can lead to unexpected errors if 's' is not a valid array.,Low,427,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Consider adding input validation to ensure 's' is a valid numpy array.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5128, 21201, 284, 4155, 705, 82, 6, 318, 257, 4938, 299, 32152, 7177, 13]",1.0,431,best_practice,121,Consider adding input validation to ensure 's' is a valid numpy array.,,431,,[]
üß† ML Signal: Use of numpy's max function to find the maximum value in an array.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 338, 3509, 2163, 284, 1064, 262, 5415, 1988, 287, 281, 7177, 13]",0.5,448,ml_signal,123,Use of numpy's max function to find the maximum value in an array.,,431,def default_adjust_type(entity_type: str) -> AdjustType:,"[4299, 4277, 62, 23032, 62, 4906, 7, 26858, 62, 4906, 25, 965, 8, 4613, 20292, 6030, 25]"
‚úÖ Best Practice: Function name could be more descriptive to indicate its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 714, 307, 517, 35644, 284, 7603, 663, 4007]",1.0,448,best_practice,122,Function name could be more descriptive to indicate its purpose,,448,,[]
"‚ö†Ô∏è SAST Risk (Low): Assumes input 's' is a valid sequence for np.min, lacks input validation","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 5128, 705, 82, 6, 318, 257, 4938, 8379, 329, 45941, 13, 1084, 11, 16523, 5128, 21201]",1.0,452,sast_risk,124,"Assumes input 's' is a valid sequence for np.min, lacks input validation",Low,448,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of numpy's sum function indicates numerical data processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 338, 2160, 2163, 9217, 29052, 1366, 7587]",0.5,475,ml_signal,125,Use of numpy's sum function indicates numerical data processing,,452,"    :type entity_type: entity type, e.g stock, stockhk, stockus","[220, 220, 220, 1058, 4906, 9312, 62, 4906, 25, 9312, 2099, 11, 304, 13, 70, 4283, 11, 4283, 71, 74, 11, 4283, 385]"
üß† ML Signal: Accessing specific columns from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 15180, 422, 257, 6060, 19778]",0.5,492,ml_signal,127,Accessing specific columns from a DataFrame,,475,"    if entity_type.lower().startswith(""stock""):","[220, 220, 220, 611, 9312, 62, 4906, 13, 21037, 22446, 9688, 2032, 342, 7203, 13578, 1, 2599]"
üß† ML Signal: Accessing specific columns from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 15180, 422, 257, 6060, 19778]",0.5,502,ml_signal,129,Accessing specific columns from a DataFrame,,492,    return AdjustType.qfq,"[220, 220, 220, 1441, 20292, 6030, 13, 80, 69, 80]"
üß† ML Signal: Accessing specific columns from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 15180, 422, 257, 6060, 19778]",0.5,502,ml_signal,131,Accessing specific columns from a DataFrame,,502,,[]
üß† ML Signal: Accessing specific columns from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 15180, 422, 257, 6060, 19778]",0.5,518,ml_signal,133,Accessing specific columns from a DataFrame,,502,    if level >= IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 611, 1241, 18189, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
üß† ML Signal: Accessing specific columns from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 15180, 422, 257, 6060, 19778]",0.5,523,ml_signal,135,Accessing specific columns from a DataFrame,,518,    else:,"[220, 220, 220, 2073, 25]"
üß† ML Signal: Decoding entity ID to extract information,"[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 9312, 4522, 284, 7925, 1321]",0.5,523,ml_signal,137,Decoding entity ID to extract information,,523,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989]",1.0,523,sast_risk,137,Use of assert for runtime checks can be disabled with optimization,Low,523,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989]",1.0,523,sast_risk,137,Use of assert for runtime checks can be disabled with optimization,Low,523,,[]
‚úÖ Best Practice: Explicit type hinting for DataFrame initialization,"[26486, 227, 6705, 19939, 25, 11884, 2099, 9254, 278, 329, 6060, 19778, 37588]",0.5,533,best_practice,148,Explicit type hinting for DataFrame initialization,,523,    def to_high(s):,"[220, 220, 220, 825, 284, 62, 8929, 7, 82, 2599]"
üß† ML Signal: Resampling data based on time intervals,"[8582, 100, 254, 10373, 26484, 25, 1874, 321, 11347, 1366, 1912, 319, 640, 20016]",0.5,543,ml_signal,148,Resampling data based on time intervals,,533,    def to_high(s):,"[220, 220, 220, 825, 284, 62, 8929, 7, 82, 2599]"
üß† ML Signal: Resampling data based on time intervals,"[8582, 100, 254, 10373, 26484, 25, 1874, 321, 11347, 1366, 1912, 319, 640, 20016]",0.5,559,ml_signal,159,Resampling data based on time intervals,,543,"    provider = kdata_df[""provider""][0]","[220, 220, 220, 10131, 796, 479, 7890, 62, 7568, 14692, 15234, 1304, 1, 7131, 15, 60]"
üß† ML Signal: Dropping NaN values from DataFrame,"[8582, 100, 254, 10373, 26484, 25, 21045, 2105, 11013, 45, 3815, 422, 6060, 19778]",0.5,580,ml_signal,166,Dropping NaN values from DataFrame,,559,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"
üß† ML Signal: Adding metadata columns to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 20150, 15180, 284, 6060, 19778]",0.5,601,ml_signal,166,Adding metadata columns to DataFrame,,580,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"
üß† ML Signal: Adding metadata columns to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 20150, 15180, 284, 6060, 19778]",0.5,622,ml_signal,166,Adding metadata columns to DataFrame,,601,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"
üß† ML Signal: Adding metadata columns to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 20150, 15180, 284, 6060, 19778]",0.5,643,ml_signal,166,Adding metadata columns to DataFrame,,622,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"
üß† ML Signal: Adding metadata columns to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 20150, 15180, 284, 6060, 19778]",0.5,664,ml_signal,166,Adding metadata columns to DataFrame,,643,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"
üß† ML Signal: Entry point for script execution,"[8582, 100, 254, 10373, 26484, 25, 21617, 966, 329, 4226, 9706]",1.0,685,ml_signal,166,Entry point for script execution,,664,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,706,best_practice,166,Use of __all__ to define public API of the module,,685,    assert IntervalLevel(original_level) < IntervalLevel(to_level),"[220, 220, 220, 6818, 4225, 2100, 4971, 7, 14986, 62, 5715, 8, 1279, 4225, 2100, 4971, 7, 1462, 62, 5715, 8]"

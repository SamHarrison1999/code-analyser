[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local can improve readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      460,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local can improve readability."
  },
  {
    "line": 30,
    "text": "    :param chart_type: \"line\", \"area\", \"scatter\", default \"line\"",
    "annotation": "\u2705 Best Practice: Consider adding a check for empty or None entity_ids to avoid potential errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      8262,
      62,
      4906,
      25,
      366,
      1370,
      1600,
      366,
      20337,
      1600,
      366,
      1416,
      1436,
      1600,
      4277,
      366,
      1370,
      1
    ],
    "start_token": 0,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2198,
      329,
      6565,
      393,
      6045,
      9312,
      62,
      2340,
      284,
      3368,
      2785,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a check for empty or None entity_ids to avoid potential errors."
  },
  {
    "line": 33,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of get_kdata_schema function indicates a pattern of schema retrieval based on entity type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 23,
    "end_token": 27,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      2163,
      9217,
      257,
      3912,
      286,
      32815,
      45069,
      1912,
      319,
      9312,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of get_kdata_schema function indicates a pattern of schema retrieval based on entity type."
  },
  {
    "line": 35,
    "text": "    dfs = []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method indicates a pattern of data retrieval based on entity type and timestamp.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      288,
      9501,
      796,
      17635
    ],
    "start_token": 27,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      9217,
      257,
      3912,
      286,
      1366,
      45069,
      1912,
      319,
      9312,
      2099,
      290,
      41033,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method indicates a pattern of data retrieval based on entity type and timestamp."
  },
  {
    "line": 37,
    "text": "    if schema_map_columns is None and schema is None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure dfs is not empty before calling pd.concat to avoid potential errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      32815,
      62,
      8899,
      62,
      28665,
      82,
      318,
      6045,
      290,
      32815,
      318,
      6045,
      25
    ],
    "start_token": 34,
    "end_token": 51,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      288,
      9501,
      318,
      407,
      6565,
      878,
      4585,
      279,
      67,
      13,
      1102,
      9246,
      284,
      3368,
      2785,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure dfs is not empty before calling pd.concat to avoid potential errors."
  },
  {
    "line": 40,
    "text": "            schema = get_kdata_schema(entity_type=entity_type)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Drawer class and draw_kline method indicates a pattern of data visualization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      32815,
      796,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      28,
      26858,
      62,
      4906,
      8
    ],
    "start_token": 51,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      15315,
      263,
      1398,
      290,
      3197,
      62,
      74,
      1370,
      2446,
      9217,
      257,
      3912,
      286,
      1366,
      32704,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Drawer class and draw_kline method indicates a pattern of data visualization."
  },
  {
    "line": 42,
    "text": "            dfs.append(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the drawer object is properly initialized before calling draw_kline.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      288,
      9501,
      13,
      33295,
      7,
      7568,
      8
    ],
    "start_token": 80,
    "end_token": 98,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      33451,
      2134,
      318,
      6105,
      23224,
      878,
      4585,
      3197,
      62,
      74,
      1370,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the drawer object is properly initialized before calling draw_kline."
  },
  {
    "line": 47,
    "text": "        if schema_map_columns:",
    "annotation": "\u2705 Best Practice: Consider validating schema_map_columns to ensure it contains valid schemas and columns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      32815,
      62,
      8899,
      62,
      28665,
      82,
      25
    ],
    "start_token": 98,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4938,
      803,
      32815,
      62,
      8899,
      62,
      28665,
      82,
      284,
      4155,
      340,
      4909,
      4938,
      3897,
      5356,
      290,
      15180,
      13
    ],
    "label": "best_practice",
    "reason": "Consider validating schema_map_columns to ensure it contains valid schemas and columns."
  },
  {
    "line": 49,
    "text": "                columns = [\"entity_id\", \"timestamp\"] + schema_map_columns.get(schema)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method indicates a pattern of data retrieval based on schema and columns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      796,
      14631,
      26858,
      62,
      312,
      1600,
      366,
      16514,
      27823,
      8973,
      1343,
      32815,
      62,
      8899,
      62,
      28665,
      82,
      13,
      1136,
      7,
      15952,
      2611,
      8
    ],
    "start_token": 113,
    "end_token": 152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      9217,
      257,
      3912,
      286,
      1366,
      45069,
      1912,
      319,
      32815,
      290,
      15180,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method indicates a pattern of data retrieval based on schema and columns."
  },
  {
    "line": 54,
    "text": "        elif schema:",
    "annotation": "\u2705 Best Practice: Consider validating columns to ensure it contains valid column names.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      32815,
      25
    ],
    "start_token": 152,
    "end_token": 163,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4938,
      803,
      15180,
      284,
      4155,
      340,
      4909,
      4938,
      5721,
      3891,
      13
    ],
    "label": "best_practice",
    "reason": "Consider validating columns to ensure it contains valid column names."
  },
  {
    "line": 59,
    "text": "        all_df = pd.concat(dfs)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method indicates a pattern of data retrieval based on schema and columns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      477,
      62,
      7568,
      796,
      279,
      67,
      13,
      1102,
      9246,
      7,
      7568,
      82,
      8
    ],
    "start_token": 163,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      9217,
      257,
      3912,
      286,
      1366,
      45069,
      1912,
      319,
      32815,
      290,
      15180,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method indicates a pattern of data retrieval based on schema and columns."
  },
  {
    "line": 60,
    "text": "        drawer = Drawer(main_df=all_df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure dfs is not empty before calling pd.concat to avoid potential errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33451,
      796,
      15315,
      263,
      7,
      12417,
      62,
      7568,
      28,
      439,
      62,
      7568,
      8
    ],
    "start_token": 183,
    "end_token": 203,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      288,
      9501,
      318,
      407,
      6565,
      878,
      4585,
      279,
      67,
      13,
      1102,
      9246,
      284,
      3368,
      2785,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure dfs is not empty before calling pd.concat to avoid potential errors."
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Drawer class and draw method indicates a pattern of data visualization.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 203,
    "end_token": 203,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      15315,
      263,
      1398,
      290,
      3197,
      2446,
      9217,
      257,
      3912,
      286,
      1366,
      32704,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Drawer class and draw method indicates a pattern of data visualization."
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the drawer object is properly initialized before calling draw.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 203,
    "end_token": 203,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      33451,
      2134,
      318,
      6105,
      23224,
      878,
      4585,
      3197,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the drawer object is properly initialized before calling draw."
  },
  {
    "line": 53,
    "text": "                dfs.append(df)",
    "annotation": "\u2705 Best Practice: Consider importing necessary modules at the beginning of the file",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      288,
      9501,
      13,
      33295,
      7,
      7568,
      8
    ],
    "start_token": 203,
    "end_token": 225,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33332,
      3306,
      13103,
      379,
      262,
      3726,
      286,
      262,
      2393
    ],
    "label": "best_practice",
    "reason": "Consider importing necessary modules at the beginning of the file"
  },
  {
    "line": 60,
    "text": "        drawer = Drawer(main_df=all_df)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a class to encapsulate drawing functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33451,
      796,
      15315,
      263,
      7,
      12417,
      62,
      7568,
      28,
      439,
      62,
      7568,
      8
    ],
    "start_token": 225,
    "end_token": 245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1398,
      284,
      32652,
      5039,
      8263,
      11244
    ],
    "label": "ml_signal",
    "reason": "Usage of a class to encapsulate drawing functionality"
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with parameters indicating a drawing operation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 245,
    "end_token": 245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      10007,
      12739,
      257,
      8263,
      4905
    ],
    "label": "ml_signal",
    "reason": "Method call with parameters indicating a drawing operation"
  },
  {
    "line": 72,
    "text": "    drawer.draw(main_chart=chart_type, show=True)",
    "annotation": "\u2705 Best Practice: Consider validating input parameters for expected types and values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      33451,
      13,
      19334,
      7,
      12417,
      62,
      40926,
      28,
      40926,
      62,
      4906,
      11,
      905,
      28,
      17821,
      8
    ],
    "start_token": 245,
    "end_token": 264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4938,
      803,
      5128,
      10007,
      329,
      2938,
      3858,
      290,
      3815
    ],
    "label": "best_practice",
    "reason": "Consider validating input parameters for expected types and values"
  },
  {
    "line": 74,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of data_schema.query_data could indicate a pattern for data retrieval",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 264,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1366,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      714,
      7603,
      257,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of data_schema.query_data could indicate a pattern for data retrieval"
  },
  {
    "line": 76,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if entity_ids or codes are not properly validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 264,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      9312,
      62,
      2340,
      393,
      12416,
      389,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if entity_ids or codes are not properly validated"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Overwriting \"entity_id\" without checking existing values could lead to data inconsistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3827,
      16502,
      366,
      26858,
      62,
      312,
      1,
      1231,
      10627,
      4683,
      3815,
      714,
      1085,
      284,
      1366,
      43831
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Overwriting \"entity_id\" without checking existing values could lead to data inconsistency"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of distribute_df function could indicate a pattern for data distribution",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      14983,
      62,
      7568,
      2163,
      714,
      7603,
      257,
      3912,
      329,
      1366,
      6082
    ],
    "label": "ml_signal",
    "reason": "Usage of distribute_df function could indicate a pattern for data distribution"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring explaining the function's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      11170,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring explaining the function's purpose and parameters."
  },
  {
    "line": 85,
    "text": "    :param filters:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom class 'Drawer' to perform operations on a DataFrame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      16628,
      25
    ],
    "start_token": 268,
    "end_token": 275,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      1398,
      705,
      25302,
      263,
      6,
      284,
      1620,
      4560,
      319,
      257,
      6060,
      19778,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom class 'Drawer' to perform operations on a DataFrame."
  },
  {
    "line": 87,
    "text": "    columns = [\"entity_id\", \"timestamp\"] + columns",
    "annotation": "\ud83e\udde0 ML Signal: Method call with parameters that could influence the behavior of the histogram drawing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15180,
      796,
      14631,
      26858,
      62,
      312,
      1600,
      366,
      16514,
      27823,
      8973,
      1343,
      15180
    ],
    "start_token": 275,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      10007,
      326,
      714,
      4588,
      262,
      4069,
      286,
      262,
      1554,
      21857,
      8263,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with parameters that could influence the behavior of the histogram drawing."
  },
  {
    "line": 87,
    "text": "    columns = [\"entity_id\", \"timestamp\"] + columns",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'show' parameter allows execution of untrusted code or data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15180,
      796,
      14631,
      26858,
      62,
      312,
      1600,
      366,
      16514,
      27823,
      8973,
      1343,
      15180
    ],
    "start_token": 291,
    "end_token": 307,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      12860,
      6,
      11507,
      3578,
      9706,
      286,
      1418,
      81,
      8459,
      2438,
      393,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'show' parameter allows execution of untrusted code or data."
  },
  {
    "line": 94,
    "text": "def distribute_df(df, histnorm=\"percent\", nbinsx=20):",
    "annotation": "\u2705 Best Practice: Use a more descriptive variable name than 'columns' to avoid confusion with the parameter",
    "confidence": 0.5,
    "tokens": [
      4299,
      14983,
      62,
      7568,
      7,
      7568,
      11,
      1554,
      27237,
      2625,
      25067,
      1600,
      299,
      65,
      1040,
      87,
      28,
      1238,
      2599
    ],
    "start_token": 307,
    "end_token": 326,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      7885,
      1438,
      621,
      705,
      28665,
      82,
      6,
      284,
      3368,
      10802,
      351,
      262,
      11507
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive variable name than 'columns' to avoid confusion with the parameter"
  },
  {
    "line": 96,
    "text": "    distribute indicators(columns) of entities in df",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method indicates interaction with a data source",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      14983,
      21337,
      7,
      28665,
      82,
      8,
      286,
      12066,
      287,
      47764
    ],
    "start_token": 326,
    "end_token": 339,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      9217,
      10375,
      351,
      257,
      1366,
      2723
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method indicates interaction with a data source"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for SQL injection if query_data does not properly sanitize inputs",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 339,
    "end_token": 339,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      12405,
      62,
      7890,
      857,
      407,
      6105,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for SQL injection if query_data does not properly sanitize inputs"
  },
  {
    "line": 98,
    "text": "    :param df: normal df",
    "annotation": "\ud83e\udde0 ML Signal: Usage of composite_df function indicates data processing or transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      47764,
      25,
      3487,
      47764
    ],
    "start_token": 339,
    "end_token": 348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      24185,
      62,
      7568,
      2163,
      9217,
      1366,
      7587,
      393,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of composite_df function indicates data processing or transformation"
  },
  {
    "line": 98,
    "text": "    :param df: normal df",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a single DataFrame parameter, common in data processing tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      47764,
      25,
      3487,
      47764
    ],
    "start_token": 348,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2060,
      6060,
      19778,
      11507,
      11,
      2219,
      287,
      1366,
      7587,
      8861
    ],
    "label": "ml_signal",
    "reason": "Function definition with a single DataFrame parameter, common in data processing tasks"
  },
  {
    "line": 103,
    "text": "    drawer.draw_histogram(show=True, histnorm=histnorm, nbinsx=nbinsx)",
    "annotation": "\u2705 Best Practice: Use of a docstring to describe the function and its parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      33451,
      13,
      19334,
      62,
      10034,
      21857,
      7,
      12860,
      28,
      17821,
      11,
      1554,
      27237,
      28,
      10034,
      27237,
      11,
      299,
      65,
      1040,
      87,
      28,
      46803,
      1040,
      87,
      8
    ],
    "start_token": 357,
    "end_token": 386,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of a docstring to describe the function and its parameters"
  },
  {
    "line": 105,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with a DataFrame, indicating object-oriented data manipulation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 386,
    "end_token": 386,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      257,
      6060,
      19778,
      11,
      12739,
      2134,
      12,
      17107,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with a DataFrame, indicating object-oriented data manipulation"
  },
  {
    "line": 107,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call with a boolean parameter, indicating a toggleable feature or option",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 386,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      257,
      25131,
      11507,
      11,
      12739,
      257,
      19846,
      540,
      3895,
      393,
      3038
    ],
    "label": "ml_signal",
    "reason": "Method call with a boolean parameter, indicating a toggleable feature or option"
  },
  {
    "line": 104,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using isinstance() for type checking to support inheritance.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 390,
    "end_token": 390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      318,
      39098,
      3419,
      329,
      2099,
      10627,
      284,
      1104,
      24155,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using isinstance() for type checking to support inheritance."
  },
  {
    "line": 107,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use a more descriptive variable name for 'df' to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 390,
    "end_token": 394,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      7885,
      1438,
      329,
      705,
      7568,
      6,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive variable name for 'df' to improve readability."
  },
  {
    "line": 111,
    "text": "    :param data_schema:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method indicates interaction with a data source.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      1366,
      62,
      15952,
      2611,
      25
    ],
    "start_token": 394,
    "end_token": 404,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      9217,
      10375,
      351,
      257,
      1366,
      2723,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method indicates interaction with a data source."
  },
  {
    "line": 120,
    "text": "def composite_df(df):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if df is empty and iloc[0] is accessed.",
    "confidence": 1.0,
    "tokens": [
      4299,
      24185,
      62,
      7568,
      7,
      7568,
      2599
    ],
    "start_token": 404,
    "end_token": 411,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      47764,
      318,
      6565,
      290,
      4229,
      420,
      58,
      15,
      60,
      318,
      17535,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if df is empty and iloc[0] is accessed."
  },
  {
    "line": 122,
    "text": "    composite indicators(columns) of entity in df",
    "annotation": "\u2705 Best Practice: Use a more descriptive variable name for 'pie_df' to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24185,
      21337,
      7,
      28665,
      82,
      8,
      286,
      9312,
      287,
      47764
    ],
    "start_token": 411,
    "end_token": 424,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      7885,
      1438,
      329,
      705,
      21749,
      62,
      7568,
      6,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive variable name for 'pie_df' to improve readability."
  },
  {
    "line": 124,
    "text": "    :param df:",
    "annotation": "\u2705 Best Practice: Consider using f-strings for better readability and performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      47764,
      25
    ],
    "start_token": 424,
    "end_token": 431,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      277,
      12,
      37336,
      329,
      1365,
      1100,
      1799,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using f-strings for better readability and performance."
  },
  {
    "line": 127,
    "text": "    drawer.draw_pie(show=True)",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of Drawer class indicates a visualization operation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      33451,
      13,
      19334,
      62,
      21749,
      7,
      12860,
      28,
      17821,
      8
    ],
    "start_token": 431,
    "end_token": 444,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      15315,
      263,
      1398,
      9217,
      257,
      32704,
      4905,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of Drawer class indicates a visualization operation."
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call to draw_pie suggests a visualization task.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 444,
    "end_token": 444,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      3197,
      62,
      21749,
      5644,
      257,
      32704,
      4876,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to draw_pie suggests a visualization task."
  },
  {
    "line": 125,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of entity IDs to group them by type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 444,
    "end_token": 448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      9312,
      32373,
      284,
      1448,
      606,
      416,
      2099
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of entity IDs to group them by type"
  },
  {
    "line": 128,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Decoding entity ID to extract entity type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 448,
    "end_token": 448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4280,
      7656,
      9312,
      4522,
      284,
      7925,
      9312,
      2099
    ],
    "label": "ml_signal",
    "reason": "Decoding entity ID to extract entity type"
  },
  {
    "line": 130,
    "text": "def composite_all(data_schema, column, timestamp, provider=None, entity_ids=None, filters=None):",
    "annotation": "\u2705 Best Practice: Using setdefault to initialize and append to a list in a dictionary",
    "confidence": 0.5,
    "tokens": [
      4299,
      24185,
      62,
      439,
      7,
      7890,
      62,
      15952,
      2611,
      11,
      5721,
      11,
      41033,
      11,
      10131,
      28,
      14202,
      11,
      9312,
      62,
      2340,
      28,
      14202,
      11,
      16628,
      28,
      14202,
      2599
    ],
    "start_token": 448,
    "end_token": 476,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      12286,
      284,
      41216,
      290,
      24443,
      284,
      257,
      1351,
      287,
      257,
      22155
    ],
    "label": "best_practice",
    "reason": "Using setdefault to initialize and append to a list in a dictionary"
  },
  {
    "line": 133,
    "text": "    if filters:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing within a function scope can lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      16628,
      25
    ],
    "start_token": 476,
    "end_token": 482,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      1626,
      257,
      2163,
      8354,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing within a function scope can lead to unexpected behavior"
  },
  {
    "line": 133,
    "text": "    if filters:",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters and columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      16628,
      25
    ],
    "start_token": 482,
    "end_token": 488,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      290,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters and columns"
  },
  {
    "line": 147,
    "text": "    pie_df[\"timestamp\"] = timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Passing a DataFrame to a function for further processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2508,
      62,
      7568,
      14692,
      16514,
      27823,
      8973,
      796,
      41033
    ],
    "start_token": 488,
    "end_token": 500,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      46389,
      257,
      6060,
      19778,
      284,
      257,
      2163,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Passing a DataFrame to a function for further processing"
  },
  {
    "line": 147,
    "text": "    pie_df[\"timestamp\"] = timestamp",
    "annotation": "\u2705 Best Practice: Explicitly defining __all__ for module exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2508,
      62,
      7568,
      14692,
      16514,
      27823,
      8973,
      796,
      41033
    ],
    "start_token": 500,
    "end_token": 512,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining __all__ for module exports"
  }
]
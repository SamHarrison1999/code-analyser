[
  {
    "line": 4,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 7,
    "text": "from zvt.api.kdata import default_adjust_type, get_kdata_schema, get_latest_kdata_date, get_recent_trade_dates",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      74,
      7890,
      1330,
      4277,
      62,
      23032,
      62,
      4906,
      11,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      11,
      651,
      62,
      42861,
      62,
      74,
      7890,
      62,
      4475,
      11,
      651,
      62,
      49921,
      62,
      25351,
      62,
      19581
    ],
    "start_token": 6,
    "end_token": 45,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 9,
    "text": "from zvt.contract.api import get_entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      15042,
      1330,
      651,
      62,
      26858,
      62,
      2340
    ],
    "start_token": 45,
    "end_token": 58,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 11,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 58,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 76,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a consistent logger naming convention",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 76,
    "end_token": 76,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      6414,
      49706,
      19264,
      9831
    ],
    "label": "best_practice",
    "reason": "Use a consistent logger naming convention"
  },
  {
    "line": 16,
    "text": "# 500\u4ebf",
    "annotation": "\ud83e\udde0 ML Signal: Constants for market capitalization thresholds indicate domain-specific usage",
    "confidence": 0.5,
    "tokens": [
      2,
      5323,
      12859,
      123
    ],
    "start_token": 76,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4757,
      1187,
      329,
      1910,
      3139,
      1634,
      40885,
      7603,
      7386,
      12,
      11423,
      8748
    ],
    "label": "ml_signal",
    "reason": "Constants for market capitalization thresholds indicate domain-specific usage"
  },
  {
    "line": 16,
    "text": "# 500\u4ebf",
    "annotation": "\ud83e\udde0 ML Signal: Constants for department names indicate domain-specific usage",
    "confidence": 0.5,
    "tokens": [
      2,
      5323,
      12859,
      123
    ],
    "start_token": 80,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4757,
      1187,
      329,
      5011,
      3891,
      7603,
      7386,
      12,
      11423,
      8748
    ],
    "label": "ml_signal",
    "reason": "Constants for department names indicate domain-specific usage"
  },
  {
    "line": 26,
    "text": "OUT_DEPS = [\"dep_1\", \"dep_2\", \"dep_3\", \"dep_4\", \"dep_5\"]",
    "annotation": "\u2705 Best Practice: Initialize filters as a list to collect filter conditions",
    "confidence": 1.0,
    "tokens": [
      12425,
      62,
      7206,
      3705,
      796,
      14631,
      10378,
      62,
      16,
      1600,
      366,
      10378,
      62,
      17,
      1600,
      366,
      10378,
      62,
      18,
      1600,
      366,
      10378,
      62,
      19,
      1600,
      366,
      10378,
      62,
      20,
      8973
    ],
    "start_token": 84,
    "end_token": 114,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      16628,
      355,
      257,
      1351,
      284,
      2824,
      8106,
      3403
    ],
    "label": "best_practice",
    "reason": "Initialize filters as a list to collect filter conditions"
  },
  {
    "line": 30,
    "text": "    provider=\"em\",",
    "annotation": "\u2705 Best Practice: Use a default function to get the current date if target_date is not provided",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      2625,
      368,
      1600
    ],
    "start_token": 114,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4277,
      2163,
      284,
      651,
      262,
      1459,
      3128,
      611,
      2496,
      62,
      4475,
      318,
      407,
      2810
    ],
    "label": "best_practice",
    "reason": "Use a default function to get the current date if target_date is not provided"
  },
  {
    "line": 31,
    "text": "    ignore_delist=True,",
    "annotation": "\u2705 Best Practice: Calculate a date one year before the target_date",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      8856,
      62,
      12381,
      396,
      28,
      17821,
      11
    ],
    "start_token": 121,
    "end_token": 131,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      378,
      257,
      3128,
      530,
      614,
      878,
      262,
      2496,
      62,
      4475
    ],
    "label": "best_practice",
    "reason": "Calculate a date one year before the target_date"
  },
  {
    "line": 34,
    "text": "    target_date=None,",
    "annotation": "\u2705 Best Practice: Append filter condition to the filters list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2496,
      62,
      4475,
      28,
      14202,
      11
    ],
    "start_token": 131,
    "end_token": 140,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      8106,
      4006,
      284,
      262,
      16628,
      1351
    ],
    "label": "best_practice",
    "reason": "Append filter condition to the filters list"
  },
  {
    "line": 36,
    "text": "    entity_ids=None,",
    "annotation": "\u2705 Best Practice: Append filter condition to the filters list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      14202,
      11
    ],
    "start_token": 140,
    "end_token": 149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      8106,
      4006,
      284,
      262,
      16628,
      1351
    ],
    "label": "best_practice",
    "reason": "Append filter condition to the filters list"
  },
  {
    "line": 41,
    "text": "        if not target_date:",
    "annotation": "\u2705 Best Practice: Append multiple filter conditions to the filters list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2496,
      62,
      4475,
      25
    ],
    "start_token": 149,
    "end_token": 162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      3294,
      8106,
      3403,
      284,
      262,
      16628,
      1351
    ],
    "label": "best_practice",
    "reason": "Append multiple filter conditions to the filters list"
  },
  {
    "line": 47,
    "text": "            filters += [entity_schema.timestamp <= target_date]",
    "annotation": "\u2705 Best Practice: Append multiple filter conditions to the filters list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      15853,
      685,
      26858,
      62,
      15952,
      2611,
      13,
      16514,
      27823,
      19841,
      2496,
      62,
      4475,
      60
    ],
    "start_token": 162,
    "end_token": 188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      3294,
      8106,
      3403,
      284,
      262,
      16628,
      1351
    ],
    "label": "best_practice",
    "reason": "Append multiple filter conditions to the filters list"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\u2705 Best Practice: Append filter condition to the filters list",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 188,
    "end_token": 188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      8106,
      4006,
      284,
      262,
      16628,
      1351
    ],
    "label": "best_practice",
    "reason": "Append filter condition to the filters list"
  },
  {
    "line": 55,
    "text": "        filters += [",
    "annotation": "\ud83e\udde0 ML Signal: Function call with dynamic filters and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      15853,
      685
    ],
    "start_token": 188,
    "end_token": 198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      8925,
      16628,
      290,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function call with dynamic filters and parameters"
  },
  {
    "line": 48,
    "text": "    if ignore_delist:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific purpose, useful for understanding code behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      8856,
      62,
      12381,
      396,
      25
    ],
    "start_token": 198,
    "end_token": 207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      4007,
      11,
      4465,
      329,
      4547,
      2438,
      4069
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific purpose, useful for understanding code behavior"
  },
  {
    "line": 50,
    "text": "            entity_schema.name.not_like(\"%\u9000%\"),",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific parameters, indicating a pattern of data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      13,
      3672,
      13,
      1662,
      62,
      2339,
      7203,
      4,
      34460,
      222,
      4,
      12340
    ],
    "start_token": 207,
    "end_token": 234,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific parameters, indicating a pattern of data retrieval"
  },
  {
    "line": 52,
    "text": "        ]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on the 'timestamp' input, potential for incorrect data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 234,
    "end_token": 242,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      262,
      705,
      16514,
      27823,
      6,
      5128,
      11,
      2785,
      329,
      11491,
      1366,
      45069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on the 'timestamp' input, potential for incorrect data retrieval"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for data presence, common pattern in data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 242,
    "end_token": 242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      1366,
      4931,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Conditional check for data presence, common pattern in data processing"
  },
  {
    "line": 55,
    "text": "        filters += [",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame column to list, a common data transformation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      15853,
      685
    ],
    "start_token": 242,
    "end_token": 252,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351,
      11,
      257,
      2219,
      1366,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame column to list, a common data transformation pattern"
  },
  {
    "line": 52,
    "text": "        ]",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple parameters and default values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 252,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      10007,
      290,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function with multiple parameters and default values"
  },
  {
    "line": 54,
    "text": "    if ignore_st:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed in optimized mode",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      8856,
      62,
      301,
      25
    ],
    "start_token": 260,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      287,
      23392,
      4235
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed in optimized mode"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with dynamic filters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      8925,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with dynamic filters"
  },
  {
    "line": 67,
    "text": "    if pd_is_not_null(df):",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and sorting data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 268,
    "end_token": 283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      29407,
      1366
    ],
    "label": "ml_signal",
    "reason": "Grouping and sorting data"
  },
  {
    "line": 66,
    "text": "    df = LimitUpInfo.query_data(start_timestamp=timestamp, end_timestamp=timestamp, columns=[LimitUpInfo.entity_id])",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters, useful for learning function usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      27272,
      4933,
      12360,
      13,
      22766,
      62,
      7890,
      7,
      9688,
      62,
      16514,
      27823,
      28,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      16514,
      27823,
      11,
      15180,
      41888,
      39184,
      4933,
      12360,
      13,
      26858,
      62,
      312,
      12962
    ],
    "start_token": 283,
    "end_token": 322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      11,
      4465,
      329,
      4673,
      2163,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters, useful for learning function usage patterns"
  },
  {
    "line": 68,
    "text": "        return df[\"entity_id\"].tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Function call with named arguments, useful for learning API usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 322,
    "end_token": 341,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3706,
      7159,
      11,
      4465,
      329,
      4673,
      7824,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function call with named arguments, useful for learning API usage patterns"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u2705 Best Practice: Convert index to list before slicing for clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 341,
    "end_token": 341,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      6376,
      284,
      1351,
      878,
      49289,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Convert index to list before slicing for clarity"
  },
  {
    "line": 72,
    "text": "    assert direction in (\"in\", \"out\")",
    "annotation": "\u2705 Best Practice: Convert index to list before slicing for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      4571,
      287,
      5855,
      259,
      1600,
      366,
      448,
      4943
    ],
    "start_token": 341,
    "end_token": 353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      6376,
      284,
      1351,
      878,
      49289,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Convert index to list before slicing for clarity"
  },
  {
    "line": 74,
    "text": "    filters = None",
    "annotation": "\u2705 Best Practice: Convert index to list before slicing for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16628,
      796,
      6045
    ],
    "start_token": 353,
    "end_token": 359,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      6376,
      284,
      1351,
      878,
      49289,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Convert index to list before slicing for clarity"
  },
  {
    "line": 76,
    "text": "        filters = [DragonAndTiger.change_pct > 0]",
    "annotation": "\u2705 Best Practice: Use set to remove duplicates before returning",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      796,
      685,
      17808,
      1870,
      51,
      8254,
      13,
      3803,
      62,
      79,
      310,
      1875,
      657,
      60
    ],
    "start_token": 359,
    "end_token": 381,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      284,
      4781,
      14184,
      16856,
      878,
      8024
    ],
    "label": "best_practice",
    "reason": "Use set to remove duplicates before returning"
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of duplicated index entries if not handled properly",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      14184,
      3474,
      6376,
      12784,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of duplicated index entries if not handled properly"
  },
  {
    "line": 100,
    "text": "    return list(set(bang1 + bang2 + bang3))",
    "annotation": "\ud83e\udde0 ML Signal: Usage of date_time_by_interval function to calculate end_date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1351,
      7,
      2617,
      7,
      36668,
      16,
      1343,
      20188,
      17,
      1343,
      20188,
      18,
      4008
    ],
    "start_token": 381,
    "end_token": 398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      2163,
      284,
      15284,
      886,
      62,
      4475
    ],
    "label": "ml_signal",
    "reason": "Usage of date_time_by_interval function to calculate end_date"
  },
  {
    "line": 110,
    "text": "            filters.append(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      13,
      33295,
      7
    ],
    "start_token": 398,
    "end_token": 413,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information"
  },
  {
    "line": 114,
    "text": "                    and_(DragonAndTiger.dep3 == player, DragonAndTiger.dep3_rate >= buy_rate),",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of change_pct as a performance metric",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      290,
      41052,
      17808,
      1870,
      51,
      8254,
      13,
      10378,
      18,
      6624,
      2137,
      11,
      2851,
      1870,
      51,
      8254,
      13,
      10378,
      18,
      62,
      4873,
      18189,
      2822,
      62,
      4873,
      828
    ],
    "start_token": 413,
    "end_token": 458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1487,
      62,
      79,
      310,
      355,
      257,
      2854,
      18663
    ],
    "label": "ml_signal",
    "reason": "Calculation of change_pct as a performance metric"
  },
  {
    "line": 114,
    "text": "                    and_(DragonAndTiger.dep3 == player, DragonAndTiger.dep3_rate >= buy_rate),",
    "annotation": "\u2705 Best Practice: Using pandas DataFrame for structured data handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      290,
      41052,
      17808,
      1870,
      51,
      8254,
      13,
      10378,
      18,
      6624,
      2137,
      11,
      2851,
      1870,
      51,
      8254,
      13,
      10378,
      18,
      62,
      4873,
      18189,
      2822,
      62,
      4873,
      828
    ],
    "start_token": 458,
    "end_token": 503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      9041
    ],
    "label": "best_practice",
    "reason": "Using pandas DataFrame for structured data handling"
  },
  {
    "line": 114,
    "text": "                    and_(DragonAndTiger.dep3 == player, DragonAndTiger.dep3_rate >= buy_rate),",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      290,
      41052,
      17808,
      1870,
      51,
      8254,
      13,
      10378,
      18,
      6624,
      2137,
      11,
      2851,
      1870,
      51,
      8254,
      13,
      10378,
      18,
      62,
      4873,
      18189,
      2822,
      62,
      4873,
      828
    ],
    "start_token": 503,
    "end_token": 548,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 125,
    "text": "        filters=filters,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to fetch player performance data, which could be a pattern for data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      10379,
      1010,
      11
    ],
    "start_token": 548,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      21207,
      2137,
      2854,
      1366,
      11,
      543,
      714,
      307,
      257,
      3912,
      329,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to fetch player performance data, which could be a pattern for data retrieval."
  },
  {
    "line": 134,
    "text": "            entity_id=entity_id,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if df is empty, consider adding a check.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      312,
      28,
      26858,
      62,
      312,
      11
    ],
    "start_token": 560,
    "end_token": 579,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      47764,
      318,
      6565,
      11,
      2074,
      4375,
      257,
      2198,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if df is empty, consider adding a check."
  },
  {
    "line": 138,
    "text": "            index=\"timestamp\",",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of records to a DataFrame, indicating a pattern of data processing and transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      2625,
      16514,
      27823,
      1600
    ],
    "start_token": 579,
    "end_token": 595,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4406,
      284,
      257,
      6060,
      19778,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587,
      290,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of records to a DataFrame, indicating a pattern of data processing and transformation."
  },
  {
    "line": 137,
    "text": "            provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameters can indicate common usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 595,
    "end_token": 611,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      10007,
      460,
      7603,
      2219,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of default parameters can indicate common usage patterns"
  },
  {
    "line": 141,
    "text": "            logger.warning(f\"ignore {timestamp} -> end_timestamp: {end_date}\")",
    "annotation": "\ud83e\udde0 ML Signal: Iteration over a fixed range can indicate a pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      46430,
      1391,
      16514,
      27823,
      92,
      4613,
      886,
      62,
      16514,
      27823,
      25,
      1391,
      437,
      62,
      4475,
      92,
      4943
    ],
    "start_token": 611,
    "end_token": 645,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      341,
      625,
      257,
      5969,
      2837,
      460,
      7603,
      257,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iteration over a fixed range can indicate a pattern in data processing"
  },
  {
    "line": 146,
    "text": "    return pd.DataFrame.from_records(records)",
    "annotation": "\ud83e\udde0 ML Signal: Iteration over a fixed range can indicate a pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      8344,
      3669,
      8
    ],
    "start_token": 645,
    "end_token": 663,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      341,
      625,
      257,
      5969,
      2837,
      460,
      7603,
      257,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iteration over a fixed range can indicate a pattern in data processing"
  },
  {
    "line": 157,
    "text": "    for player in players:",
    "annotation": "\u2705 Best Practice: Initialize lists outside of loops for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      2137,
      287,
      1938,
      25
    ],
    "start_token": 663,
    "end_token": 671,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      2354,
      286,
      23607,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Initialize lists outside of loops for clarity"
  },
  {
    "line": 161,
    "text": "                start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Consistent data transformation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 671,
    "end_token": 696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      1366,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Consistent data transformation pattern"
  },
  {
    "line": 167,
    "text": "            rate = len(df[df[\"change_pct\"] > 0]) / len(df)",
    "annotation": "\ud83e\udde0 ML Signal: Consistent data transformation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2494,
      796,
      18896,
      7,
      7568,
      58,
      7568,
      14692,
      3803,
      62,
      79,
      310,
      8973,
      1875,
      657,
      12962,
      1220,
      18896,
      7,
      7568,
      8
    ],
    "start_token": 696,
    "end_token": 728,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      1366,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Consistent data transformation pattern"
  },
  {
    "line": 171,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining DataFrames is efficient and clear",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 728,
    "end_token": 728,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      35439,
      318,
      6942,
      290,
      1598
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining DataFrames is efficient and clear"
  },
  {
    "line": 173,
    "text": "def get_players(entity_id, start_timestamp, end_timestamp, provider=\"em\", direction=\"in\", buy_rate=5):",
    "annotation": "\u2705 Best Practice: Sorting DataFrame by index for organized data output",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      32399,
      7,
      26858,
      62,
      312,
      11,
      923,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      11,
      10131,
      2625,
      368,
      1600,
      4571,
      2625,
      259,
      1600,
      2822,
      62,
      4873,
      28,
      20,
      2599
    ],
    "start_token": 728,
    "end_token": 761,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      6060,
      19778,
      416,
      6376,
      329,
      8389,
      1366,
      5072
    ],
    "label": "best_practice",
    "reason": "Sorting DataFrame by index for organized data output"
  },
  {
    "line": 167,
    "text": "            rate = len(df[df[\"change_pct\"] > 0]) / len(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using a mutable default value for `timestamp` can lead to unexpected behavior if `current_date()` returns a mutable object.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2494,
      796,
      18896,
      7,
      7568,
      58,
      7568,
      14692,
      3803,
      62,
      79,
      310,
      8973,
      1875,
      657,
      12962,
      1220,
      18896,
      7,
      7568,
      8
    ],
    "start_token": 761,
    "end_token": 793,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      257,
      4517,
      540,
      4277,
      1988,
      329,
      4600,
      16514,
      27823,
      63,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      4600,
      14421,
      62,
      4475,
      3419,
      63,
      5860,
      257,
      4517,
      540,
      2134,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using a mutable default value for `timestamp` can lead to unexpected behavior if `current_date()` returns a mutable object."
  },
  {
    "line": 169,
    "text": "        records.append(record)",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4406,
      13,
      33295,
      7,
      22105,
      8
    ],
    "start_token": 793,
    "end_token": 806,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity and maintainability."
  },
  {
    "line": 172,
    "text": "",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output and log levels.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 806,
    "end_token": 806,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072,
      290,
      2604,
      2974,
      13
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output and log levels."
  },
  {
    "line": 173,
    "text": "def get_players(entity_id, start_timestamp, end_timestamp, provider=\"em\", direction=\"in\", buy_rate=5):",
    "annotation": "\ud83e\udde0 ML Signal: The function `get_big_players` is used to filter or retrieve a subset of data, indicating a pattern of data selection.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      32399,
      7,
      26858,
      62,
      312,
      11,
      923,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      11,
      10131,
      2625,
      368,
      1600,
      4571,
      2625,
      259,
      1600,
      2822,
      62,
      4873,
      28,
      20,
      2599
    ],
    "start_token": 806,
    "end_token": 839,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      4600,
      1136,
      62,
      14261,
      62,
      32399,
      63,
      318,
      973,
      284,
      8106,
      393,
      19818,
      257,
      24637,
      286,
      1366,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      6356,
      13
    ],
    "label": "ml_signal",
    "reason": "The function `get_big_players` is used to filter or retrieve a subset of data, indicating a pattern of data selection."
  },
  {
    "line": 176,
    "text": "        for i in range(5):",
    "annotation": "\u2705 Best Practice: Use logging to record information, which is more flexible and appropriate for production environments.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      20,
      2599
    ],
    "start_token": 839,
    "end_token": 853,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      284,
      1700,
      1321,
      11,
      543,
      318,
      517,
      12846,
      290,
      5035,
      329,
      3227,
      12493,
      13
    ],
    "label": "best_practice",
    "reason": "Use logging to record information, which is more flexible and appropriate for production environments."
  },
  {
    "line": 178,
    "text": "            columns.append(f\"dep{i + 1}_rate\")",
    "annotation": "\ud83e\udde0 ML Signal: The function `get_player_success_rate` is used to calculate or retrieve performance metrics, indicating a pattern of data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      13,
      33295,
      7,
      69,
      1,
      10378,
      90,
      72,
      1343,
      352,
      92,
      62,
      4873,
      4943
    ],
    "start_token": 853,
    "end_token": 879,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      4600,
      1136,
      62,
      7829,
      62,
      13138,
      62,
      4873,
      63,
      318,
      973,
      284,
      15284,
      393,
      19818,
      2854,
      20731,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "The function `get_player_success_rate` is used to calculate or retrieve performance metrics, indicating a pattern of data analysis."
  },
  {
    "line": 182,
    "text": "            columns.append(f\"dep_{i + 1}_rate\")",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on conditions is a common pattern in data processing and analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      13,
      33295,
      7,
      69,
      1,
      10378,
      23330,
      72,
      1343,
      352,
      92,
      62,
      4873,
      4943
    ],
    "start_token": 879,
    "end_token": 905,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      3403,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      290,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on conditions is a common pattern in data processing and analysis."
  },
  {
    "line": 181,
    "text": "            columns.append(f\"dep_{i + 1}\")",
    "annotation": "\u2705 Best Practice: Use of default parameter values for better function flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      13,
      33295,
      7,
      69,
      1,
      10378,
      23330,
      72,
      1343,
      352,
      92,
      4943
    ],
    "start_token": 905,
    "end_token": 929,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      1365,
      2163,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for better function flexibility"
  },
  {
    "line": 190,
    "text": "        index=[\"entity_id\", \"timestamp\"],",
    "annotation": "\ud83e\udde0 ML Signal: Checking for non-null DataFrame to handle data availability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      28,
      14692,
      26858,
      62,
      312,
      1600,
      366,
      16514,
      27823,
      33116
    ],
    "start_token": 929,
    "end_token": 947,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      1729,
      12,
      8423,
      6060,
      19778,
      284,
      5412,
      1366,
      11500
    ],
    "label": "ml_signal",
    "reason": "Checking for non-null DataFrame to handle data availability"
  },
  {
    "line": 192,
    "text": "    dfs = []",
    "annotation": "\u2705 Best Practice: Calculating new column 'cap' for further filtering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      288,
      9501,
      796,
      17635
    ],
    "start_token": 947,
    "end_token": 954,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      803,
      649,
      5721,
      705,
      11128,
      6,
      329,
      2252,
      25431
    ],
    "label": "best_practice",
    "reason": "Calculating new column 'cap' for further filtering"
  },
  {
    "line": 196,
    "text": "            p_df.columns = [\"player\", \"buy_rate\"]",
    "annotation": "\u2705 Best Practice: Filtering DataFrame based on 'cap_start' for targeted results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      62,
      7568,
      13,
      28665,
      82,
      796,
      14631,
      7829,
      1600,
      366,
      17846,
      62,
      4873,
      8973
    ],
    "start_token": 954,
    "end_token": 980,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      6060,
      19778,
      1912,
      319,
      705,
      11128,
      62,
      9688,
      6,
      329,
      7977,
      2482
    ],
    "label": "best_practice",
    "reason": "Filtering DataFrame based on 'cap_start' for targeted results"
  },
  {
    "line": 199,
    "text": "        for i in range(5):",
    "annotation": "\u2705 Best Practice: Filtering DataFrame based on 'cap_end' for targeted results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      20,
      2599
    ],
    "start_token": 980,
    "end_token": 994,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      6060,
      19778,
      1912,
      319,
      705,
      11128,
      62,
      437,
      6,
      329,
      7977,
      2482
    ],
    "label": "best_practice",
    "reason": "Filtering DataFrame based on 'cap_end' for targeted results"
  },
  {
    "line": 200,
    "text": "            p_df = df[[f\"dep_{i + 1}\", f\"dep_{i + 1}_rate\"]].copy()",
    "annotation": "\ud83e\udde0 ML Signal: Returning list of entity IDs as a result",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      62,
      7568,
      796,
      47764,
      30109,
      69,
      1,
      10378,
      23330,
      72,
      1343,
      352,
      92,
      1600,
      277,
      1,
      10378,
      23330,
      72,
      1343,
      352,
      92,
      62,
      4873,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 994,
    "end_token": 1034,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1351,
      286,
      9312,
      32373,
      355,
      257,
      1255
    ],
    "label": "ml_signal",
    "reason": "Returning list of entity IDs as a result"
  },
  {
    "line": 200,
    "text": "            p_df = df[[f\"dep_{i + 1}\", f\"dep_{i + 1}_rate\"]].copy()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite recursion if data is never available",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      62,
      7568,
      796,
      47764,
      30109,
      69,
      1,
      10378,
      23330,
      72,
      1343,
      352,
      92,
      1600,
      277,
      1,
      10378,
      23330,
      72,
      1343,
      352,
      92,
      62,
      4873,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 1034,
    "end_token": 1074,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      664,
      24197,
      611,
      1366,
      318,
      1239,
      1695
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite recursion if data is never available"
  },
  {
    "line": 209,
    "text": "    end_timestamp = date_time_by_interval(timestamp, -intervals[-1] - 30)",
    "annotation": "\ud83e\udde0 ML Signal: Recursive call pattern with retry mechanism",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7,
      16514,
      27823,
      11,
      532,
      3849,
      12786,
      58,
      12,
      16,
      60,
      532,
      1542,
      8
    ],
    "start_token": 1074,
    "end_token": 1104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      869,
      3912,
      351,
      1005,
      563,
      9030
    ],
    "label": "ml_signal",
    "reason": "Recursive call pattern with retry mechanism"
  },
  {
    "line": 209,
    "text": "    end_timestamp = date_time_by_interval(timestamp, -intervals[-1] - 30)",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value, indicating common usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7,
      16514,
      27823,
      11,
      532,
      3849,
      12786,
      58,
      12,
      16,
      60,
      532,
      1542,
      8
    ],
    "start_token": 1104,
    "end_token": 1134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      11,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value, indicating common usage pattern"
  },
  {
    "line": 210,
    "text": "    # recent year",
    "annotation": "\u2705 Best Practice: Use of named parameters for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      2274,
      614
    ],
    "start_token": 1134,
    "end_token": 1140,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of named parameters for clarity and maintainability"
  },
  {
    "line": 213,
    "text": "    # \u6700\u8fd1\u4e00\u5e74\u725bx\u7684\u8425\u4e1a\u90e8",
    "annotation": "\u2705 Best Practice: Explicit parameter passing improves readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      31965,
      249,
      87,
      21410,
      164,
      238,
      98,
      10310,
      21253,
      225,
      101
    ],
    "start_token": 1140,
    "end_token": 1162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      11507,
      6427,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicit parameter passing improves readability"
  },
  {
    "line": 214,
    "text": "    players = get_big_players(start_timestamp=start_timestamp, end_timestamp=end_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a constant (BIG_CAP) suggests a threshold or boundary condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1938,
      796,
      651,
      62,
      14261,
      62,
      32399,
      7,
      9688,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 1162,
    "end_token": 1193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      6937,
      357,
      3483,
      38,
      62,
      33177,
      8,
      5644,
      257,
      11387,
      393,
      18645,
      4006
    ],
    "label": "ml_signal",
    "reason": "Use of a constant (BIG_CAP) suggests a threshold or boundary condition"
  },
  {
    "line": 217,
    "text": "        start_timestamp=start_timestamp, end_timestamp=end_timestamp, intervals=intervals, players=players",
    "annotation": "\u2705 Best Practice: Use of None to indicate no upper limit for cap_end",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11,
      20016,
      28,
      3849,
      12786,
      11,
      1938,
      28,
      32399
    ],
    "start_token": 1193,
    "end_token": 1228,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6045,
      284,
      7603,
      645,
      6727,
      4179,
      329,
      1451,
      62,
      437
    ],
    "label": "best_practice",
    "reason": "Use of None to indicate no upper limit for cap_end"
  },
  {
    "line": 218,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded string \"stock\" indicates specific entity type filtering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1228,
    "end_token": 1232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4731,
      366,
      13578,
      1,
      9217,
      2176,
      9312,
      2099,
      25431
    ],
    "label": "ml_signal",
    "reason": "Hardcoded string \"stock\" indicates specific entity type filtering"
  },
  {
    "line": 221,
    "text": "",
    "annotation": "\u2705 Best Practice: Passing provider as a parameter allows for flexibility and reuse",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1232,
    "end_token": 1232,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      46389,
      10131,
      355,
      257,
      11507,
      3578,
      329,
      13688,
      290,
      32349
    ],
    "label": "best_practice",
    "reason": "Passing provider as a parameter allows for flexibility and reuse"
  },
  {
    "line": 213,
    "text": "    # \u6700\u8fd1\u4e00\u5e74\u725bx\u7684\u8425\u4e1a\u90e8",
    "annotation": "\u2705 Best Practice: Provide a default value for the 'provider' parameter to enhance function usability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      31965,
      249,
      87,
      21410,
      164,
      238,
      98,
      10310,
      21253,
      225,
      101
    ],
    "start_token": 1232,
    "end_token": 1254,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      4277,
      1988,
      329,
      262,
      705,
      15234,
      1304,
      6,
      11507,
      284,
      9494,
      2163,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a default value for the 'provider' parameter to enhance function usability."
  },
  {
    "line": 214,
    "text": "    players = get_big_players(start_timestamp=start_timestamp, end_timestamp=end_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Function calls another function with specific parameters, indicating a pattern of usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1938,
      796,
      651,
      62,
      14261,
      62,
      32399,
      7,
      9688,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 1254,
    "end_token": 1285,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3848,
      1194,
      2163,
      351,
      2176,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function calls another function with specific parameters, indicating a pattern of usage."
  },
  {
    "line": 217,
    "text": "        start_timestamp=start_timestamp, end_timestamp=end_timestamp, intervals=intervals, players=players",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific constants (MIDDLE_CAP, BIG_CAP) can indicate domain-specific knowledge.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11,
      20016,
      28,
      3849,
      12786,
      11,
      1938,
      28,
      32399
    ],
    "start_token": 1285,
    "end_token": 1320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      38491,
      357,
      44,
      2389,
      35,
      2538,
      62,
      33177,
      11,
      26746,
      62,
      33177,
      8,
      460,
      7603,
      7386,
      12,
      11423,
      3725,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of specific constants (MIDDLE_CAP, BIG_CAP) can indicate domain-specific knowledge."
  },
  {
    "line": 218,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of named parameters improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1320,
    "end_token": 1324,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of named parameters improves readability and maintainability."
  },
  {
    "line": 217,
    "text": "        start_timestamp=start_timestamp, end_timestamp=end_timestamp, intervals=intervals, players=players",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value indicating common usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11,
      20016,
      28,
      3849,
      12786,
      11,
      1938,
      28,
      32399
    ],
    "start_token": 1324,
    "end_token": 1359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value indicating common usage pattern"
  },
  {
    "line": 218,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameters indicating a pattern of usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1359,
    "end_token": 1363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      10007,
      12739,
      257,
      3912,
      286,
      8748
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameters indicating a pattern of usage"
  },
  {
    "line": 221,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Named parameter usage indicating common practice",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1363,
    "end_token": 1363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      34441,
      11507,
      8748,
      12739,
      2219,
      3357
    ],
    "label": "ml_signal",
    "reason": "Named parameter usage indicating common practice"
  },
  {
    "line": 222,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants indicating a pattern of usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1363,
    "end_token": 1363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      12739,
      257,
      3912,
      286,
      8748
    ],
    "label": "ml_signal",
    "reason": "Use of constants indicating a pattern of usage"
  },
  {
    "line": 225,
    "text": "):",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants indicating a pattern of usage",
    "confidence": 0.5,
    "tokens": [
      2599
    ],
    "start_token": 1363,
    "end_token": 1364,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      12739,
      257,
      3912,
      286,
      8748
    ],
    "label": "ml_signal",
    "reason": "Use of constants indicating a pattern of usage"
  },
  {
    "line": 226,
    "text": "    if not adjust_type:",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded string indicating a specific usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      4532,
      62,
      4906,
      25
    ],
    "start_token": 1364,
    "end_token": 1373,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4731,
      12739,
      257,
      2176,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Hardcoded string indicating a specific usage pattern"
  },
  {
    "line": 229,
    "text": "    kdata_schema = get_kdata_schema(entity_type, level=IntervalLevel.LEVEL_1DAY, adjust_type=adjust_type)",
    "annotation": "\ud83e\udde0 ML Signal: Passing a variable as a parameter indicating flexibility in usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      479,
      7890,
      62,
      15952,
      2611,
      796,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11,
      4532,
      62,
      4906,
      28,
      23032,
      62,
      4906,
      8
    ],
    "start_token": 1373,
    "end_token": 1414,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      46389,
      257,
      7885,
      355,
      257,
      11507,
      12739,
      13688,
      287,
      8748
    ],
    "label": "ml_signal",
    "reason": "Passing a variable as a parameter indicating flexibility in usage"
  },
  {
    "line": 221,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value indicating common usage pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1414,
    "end_token": 1414,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value indicating common usage pattern"
  },
  {
    "line": 222,
    "text": "",
    "annotation": "\u2705 Best Practice: Using named arguments for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1414,
    "end_token": 1414,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3706,
      7159,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Using named arguments for clarity and maintainability"
  },
  {
    "line": 225,
    "text": "):",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter values indicating common usage patterns",
    "confidence": 0.5,
    "tokens": [
      2599
    ],
    "start_token": 1414,
    "end_token": 1415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      3815,
      12739,
      2219,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter values indicating common usage patterns"
  },
  {
    "line": 226,
    "text": "    if not adjust_type:",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      4532,
      62,
      4906,
      25
    ],
    "start_token": 1415,
    "end_token": 1424,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with keyword arguments indicating common usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1424,
    "end_token": 1424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      21179,
      7159,
      12739,
      2219,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function call with keyword arguments indicating common usage patterns"
  },
  {
    "line": 229,
    "text": "    kdata_schema = get_kdata_schema(entity_type, level=IntervalLevel.LEVEL_1DAY, adjust_type=adjust_type)",
    "annotation": "\u2705 Best Practice: Use of keyword arguments for clarity and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      479,
      7890,
      62,
      15952,
      2611,
      796,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11,
      4532,
      62,
      4906,
      28,
      23032,
      62,
      4906,
      8
    ],
    "start_token": 1424,
    "end_token": 1465,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      21179,
      7159,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of keyword arguments for clarity and maintainability"
  },
  {
    "line": 229,
    "text": "    kdata_schema = get_kdata_schema(entity_type, level=IntervalLevel.LEVEL_1DAY, adjust_type=adjust_type)",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value, indicating common usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      479,
      7890,
      62,
      15952,
      2611,
      796,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11,
      4532,
      62,
      4906,
      28,
      23032,
      62,
      4906,
      8
    ],
    "start_token": 1465,
    "end_token": 1506,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      11,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value, indicating common usage pattern"
  },
  {
    "line": 230,
    "text": "    df = kdata_schema.query_data(",
    "annotation": "\u2705 Best Practice: Use of descriptive function name for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      479,
      7890,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 1506,
    "end_token": 1521,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name for clarity"
  },
  {
    "line": 230,
    "text": "    df = kdata_schema.query_data(",
    "annotation": "\u2705 Best Practice: Use of default parameter value for flexibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      479,
      7890,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 1521,
    "end_token": 1536,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value for flexibility"
  },
  {
    "line": 233,
    "text": "        index=\"entity_id\",",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameters, indicating common usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      2625,
      26858,
      62,
      312,
      1600
    ],
    "start_token": 1536,
    "end_token": 1549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      10007,
      11,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameters, indicating common usage pattern"
  },
  {
    "line": 234,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of named arguments for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1549,
    "end_token": 1553,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of named arguments for clarity"
  },
  {
    "line": 233,
    "text": "        index=\"entity_id\",",
    "annotation": "\ud83e\udde0 ML Signal: Function to query and filter stock data for limit up stocks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      2625,
      26858,
      62,
      312,
      1600
    ],
    "start_token": 1553,
    "end_token": 1566,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      12405,
      290,
      8106,
      4283,
      1366,
      329,
      4179,
      510,
      14420
    ],
    "label": "ml_signal",
    "reason": "Function to query and filter stock data for limit up stocks"
  },
  {
    "line": 235,
    "text": "    if pd_is_not_null(df):",
    "annotation": "\ud83e\udde0 ML Signal: Querying stock data with specific filters and columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 1566,
    "end_token": 1581,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      4283,
      1366,
      351,
      2176,
      16628,
      290,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying stock data with specific filters and columns"
  },
  {
    "line": 237,
    "text": "        df_result = df.copy()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      20274,
      796,
      47764,
      13,
      30073,
      3419
    ],
    "start_token": 1581,
    "end_token": 1596,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      6105,
      5447,
      393,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if pd_is_not_null is not properly defined or validated"
  },
  {
    "line": 239,
    "text": "            df_result = df_result.loc[(df[\"cap\"] >= cap_start)]",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame column to list for further processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      20274,
      796,
      47764,
      62,
      20274,
      13,
      17946,
      58,
      7,
      7568,
      14692,
      11128,
      8973,
      18189,
      1451,
      62,
      9688,
      15437
    ],
    "start_token": 1596,
    "end_token": 1627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame column to list for further processing"
  },
  {
    "line": 237,
    "text": "        df_result = df.copy()",
    "annotation": "\ud83e\udde0 ML Signal: Function parameter 'n' controls the number of top stocks, indicating user preference for data size",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      20274,
      796,
      47764,
      13,
      30073,
      3419
    ],
    "start_token": 1627,
    "end_token": 1642,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      11507,
      705,
      77,
      6,
      6973,
      262,
      1271,
      286,
      1353,
      14420,
      11,
      12739,
      2836,
      12741,
      329,
      1366,
      2546
    ],
    "label": "ml_signal",
    "reason": "Function parameter 'n' controls the number of top stocks, indicating user preference for data size"
  },
  {
    "line": 239,
    "text": "            df_result = df_result.loc[(df[\"cap\"] >= cap_start)]",
    "annotation": "\ud83e\udde0 ML Signal: Querying stock data with specific columns and order indicates user interest in top-performing stocks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      20274,
      796,
      47764,
      62,
      20274,
      13,
      17946,
      58,
      7,
      7568,
      14692,
      11128,
      8973,
      18189,
      1451,
      62,
      9688,
      15437
    ],
    "start_token": 1642,
    "end_token": 1673,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      4283,
      1366,
      351,
      2176,
      15180,
      290,
      1502,
      9217,
      2836,
      1393,
      287,
      1353,
      12,
      37440,
      14420
    ],
    "label": "ml_signal",
    "reason": "Querying stock data with specific columns and order indicates user interest in top-performing stocks"
  },
  {
    "line": 240,
    "text": "        if cap_end:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if 'query_data' method does not properly sanitize inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1451,
      62,
      437,
      25
    ],
    "start_token": 1673,
    "end_token": 1685,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      705,
      22766,
      62,
      7890,
      6,
      2446,
      857,
      407,
      6105,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if 'query_data' method does not properly sanitize inputs"
  },
  {
    "line": 242,
    "text": "        return df_result.index.tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Checking if DataFrame is not null indicates handling of empty or invalid data scenarios",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764,
      62,
      20274,
      13,
      9630,
      13,
      83,
      349,
      396,
      3419
    ],
    "start_token": 1685,
    "end_token": 1703,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      6060,
      19778,
      318,
      407,
      9242,
      9217,
      9041,
      286,
      6565,
      393,
      12515,
      1366,
      13858
    ],
    "label": "ml_signal",
    "reason": "Checking if DataFrame is not null indicates handling of empty or invalid data scenarios"
  },
  {
    "line": 243,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame column to list shows interest in specific data format for further processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1703,
    "end_token": 1708,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351,
      2523,
      1393,
      287,
      2176,
      1366,
      5794,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame column to list shows interest in specific data format for further processing"
  },
  {
    "line": 242,
    "text": "        return df_result.index.tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of current timestamp for time-based operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764,
      62,
      20274,
      13,
      9630,
      13,
      83,
      349,
      396,
      3419
    ],
    "start_token": 1708,
    "end_token": 1726,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1459,
      41033,
      329,
      640,
      12,
      3106,
      4560
    ],
    "label": "ml_signal",
    "reason": "Usage of current timestamp for time-based operations"
  },
  {
    "line": 243,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific columns and order",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1726,
    "end_token": 1731,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      15180,
      290,
      1502
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific columns and order"
  },
  {
    "line": 248,
    "text": "            cap_start=cap_start,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing specific data from a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1451,
      62,
      9688,
      28,
      11128,
      62,
      9688,
      11
    ],
    "start_token": 1731,
    "end_token": 1750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2176,
      1366,
      422,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing specific data from a DataFrame"
  },
  {
    "line": 251,
    "text": "            provider=provider,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information exposure through logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 1750,
    "end_token": 1766,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      7111,
      832,
      18931
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information exposure through logging"
  },
  {
    "line": 253,
    "text": "            retry_times=retry_times - 1,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive timing information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      22355,
      28,
      1186,
      563,
      62,
      22355,
      532,
      352,
      11
    ],
    "start_token": 1766,
    "end_token": 1789,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      10576,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive timing information"
  },
  {
    "line": 257,
    "text": "def get_big_cap_stock(timestamp, provider=\"em\"):",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on time range",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      14261,
      62,
      11128,
      62,
      13578,
      7,
      16514,
      27823,
      11,
      10131,
      2625,
      368,
      1,
      2599
    ],
    "start_token": 1789,
    "end_token": 1806,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      640,
      2837
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on time range"
  },
  {
    "line": 258,
    "text": "    return get_entity_list_by_cap(",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with filters and specific columns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      26858,
      62,
      4868,
      62,
      1525,
      62,
      11128,
      7
    ],
    "start_token": 1806,
    "end_token": 1820,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      16628,
      290,
      2176,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying data with filters and specific columns"
  },
  {
    "line": 264,
    "text": "    return get_entity_list_by_cap(",
    "annotation": "\u2705 Best Practice: Checking if DataFrame is not null before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      26858,
      62,
      4868,
      62,
      1525,
      62,
      11128,
      7
    ],
    "start_token": 1820,
    "end_token": 1834,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      611,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Checking if DataFrame is not null before processing"
  },
  {
    "line": 265,
    "text": "        timestamp=timestamp, cap_start=MIDDLE_CAP, cap_end=BIG_CAP, entity_type=\"stock\", provider=provider",
    "annotation": "\u2705 Best Practice: Sorting DataFrame for consistent processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      41033,
      28,
      16514,
      27823,
      11,
      1451,
      62,
      9688,
      28,
      44,
      2389,
      35,
      2538,
      62,
      33177,
      11,
      1451,
      62,
      437,
      28,
      3483,
      38,
      62,
      33177,
      11,
      9312,
      62,
      4906,
      2625,
      13578,
      1600,
      10131,
      28,
      15234,
      1304
    ],
    "start_token": 1834,
    "end_token": 1876,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      6060,
      19778,
      329,
      6414,
      7587
    ],
    "label": "best_practice",
    "reason": "Sorting DataFrame for consistent processing"
  },
  {
    "line": 267,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and aggregating data for analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1876,
    "end_token": 1876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      13262,
      803,
      1366,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Grouping and aggregating data for analysis"
  },
  {
    "line": 274,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information exposure through logging",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1876,
    "end_token": 1876,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      7111,
      832,
      18931
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information exposure through logging"
  },
  {
    "line": 275,
    "text": "def get_mini_cap_stock(timestamp, provider=\"em\"):",
    "annotation": "\ud83e\udde0 ML Signal: Identifying significant changes in data",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      45313,
      62,
      11128,
      62,
      13578,
      7,
      16514,
      27823,
      11,
      10131,
      2625,
      368,
      1,
      2599
    ],
    "start_token": 1876,
    "end_token": 1893,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      2383,
      2458,
      287,
      1366
    ],
    "label": "ml_signal",
    "reason": "Identifying significant changes in data"
  },
  {
    "line": 281,
    "text": "def get_mini_and_small_stock(timestamp, provider=\"em\"):",
    "annotation": "\u2705 Best Practice: Returning results in a clear and structured format",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      45313,
      62,
      392,
      62,
      17470,
      62,
      13578,
      7,
      16514,
      27823,
      11,
      10131,
      2625,
      368,
      1,
      2599
    ],
    "start_token": 1893,
    "end_token": 1912,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      2482,
      287,
      257,
      1598,
      290,
      20793,
      5794
    ],
    "label": "best_practice",
    "reason": "Returning results in a clear and structured format"
  },
  {
    "line": 274,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1912,
    "end_token": 1912,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 275,
    "text": "def get_mini_cap_stock(timestamp, provider=\"em\"):",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on provider type",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      45313,
      62,
      11128,
      62,
      13578,
      7,
      16514,
      27823,
      11,
      10131,
      2625,
      368,
      1,
      2599
    ],
    "start_token": 1912,
    "end_token": 1929,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      10131,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on provider type"
  },
  {
    "line": 283,
    "text": "        timestamp=timestamp, cap_start=None, cap_end=MIDDLE_CAP, entity_type=\"stock\", provider=provider",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      41033,
      28,
      16514,
      27823,
      11,
      1451,
      62,
      9688,
      28,
      14202,
      11,
      1451,
      62,
      437,
      28,
      44,
      2389,
      35,
      2538,
      62,
      33177,
      11,
      9312,
      62,
      4906,
      2625,
      13578,
      1600,
      10131,
      28,
      15234,
      1304
    ],
    "start_token": 1929,
    "end_token": 1968,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list"
  },
  {
    "line": 285,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling of optional parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1968,
    "end_token": 1968,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      286,
      11902,
      10007
    ],
    "label": "ml_signal",
    "reason": "Handling of optional parameters"
  },
  {
    "line": 285,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential timezone issues with date handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1968,
    "end_token": 1968,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      11340,
      2428,
      351,
      3128,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential timezone issues with date handling"
  },
  {
    "line": 298,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1968,
    "end_token": 1968,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list"
  },
  {
    "line": 294,
    "text": "    df = StockQuote.query_data(filters=[StockQuote.is_limit_up], columns=[StockQuote.entity_id])",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter value for 'n' indicates typical usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      10500,
      25178,
      13,
      22766,
      62,
      7890,
      7,
      10379,
      1010,
      41888,
      26207,
      25178,
      13,
      271,
      62,
      32374,
      62,
      929,
      4357,
      15180,
      41888,
      26207,
      25178,
      13,
      26858,
      62,
      312,
      12962
    ],
    "start_token": 1968,
    "end_token": 2001,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      1988,
      329,
      705,
      77,
      6,
      9217,
      7226,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Default parameter value for 'n' indicates typical usage pattern"
  },
  {
    "line": 296,
    "text": "        return df[\"entity_id\"].to_list()",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific columns and order indicates a pattern of data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      1462,
      62,
      4868,
      3419
    ],
    "start_token": 2001,
    "end_token": 2020,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      15180,
      290,
      1502,
      9217,
      257,
      3912,
      286,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific columns and order indicates a pattern of data retrieval"
  },
  {
    "line": 298,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if pd_is_not_null is not properly handling null checks",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2020,
    "end_token": 2020,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      6105,
      9041,
      9242,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if pd_is_not_null is not properly handling null checks"
  },
  {
    "line": 300,
    "text": "    df = StockQuote.query_data(columns=[StockQuote.entity_id], order=StockQuote.change_pct.desc(), limit=n)",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame column to list indicates a pattern of data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      10500,
      25178,
      13,
      22766,
      62,
      7890,
      7,
      28665,
      82,
      41888,
      26207,
      25178,
      13,
      26858,
      62,
      312,
      4357,
      1502,
      28,
      26207,
      25178,
      13,
      3803,
      62,
      79,
      310,
      13,
      20147,
      22784,
      4179,
      28,
      77,
      8
    ],
    "start_token": 2020,
    "end_token": 2058,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351,
      9217,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame column to list indicates a pattern of data transformation"
  },
  {
    "line": 298,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to query and filter stock data for limit down events",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2058,
    "end_token": 2058,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      12405,
      290,
      8106,
      4283,
      1366,
      329,
      4179,
      866,
      2995
    ],
    "label": "ml_signal",
    "reason": "Function to query and filter stock data for limit down events"
  },
  {
    "line": 300,
    "text": "    df = StockQuote.query_data(columns=[StockQuote.entity_id], order=StockQuote.change_pct.desc(), limit=n)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the query_data method handles input sanitization to prevent injection attacks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      10500,
      25178,
      13,
      22766,
      62,
      7890,
      7,
      28665,
      82,
      41888,
      26207,
      25178,
      13,
      26858,
      62,
      312,
      4357,
      1502,
      28,
      26207,
      25178,
      13,
      3803,
      62,
      79,
      310,
      13,
      20147,
      22784,
      4179,
      28,
      77,
      8
    ],
    "start_token": 2058,
    "end_token": 2096,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      12405,
      62,
      7890,
      2446,
      17105,
      5128,
      5336,
      270,
      1634,
      284,
      2948,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the query_data method handles input sanitization to prevent injection attacks"
  },
  {
    "line": 302,
    "text": "        return df[\"entity_id\"].to_list()",
    "annotation": "\u2705 Best Practice: Check for null data before processing to avoid runtime errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      1462,
      62,
      4868,
      3419
    ],
    "start_token": 2096,
    "end_token": 2115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      9242,
      1366,
      878,
      7587,
      284,
      3368,
      19124,
      8563
    ],
    "label": "best_practice",
    "reason": "Check for null data before processing to avoid runtime errors"
  },
  {
    "line": 304,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list for further processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2115,
    "end_token": 2115,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list for further processing"
  },
  {
    "line": 303,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of default parameters and function calls as default values",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2115,
    "end_token": 2115,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4277,
      10007,
      290,
      2163,
      3848,
      355,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of default parameters and function calls as default values"
  },
  {
    "line": 310,
    "text": "    latest_time = int(latest[\"time\"][0])",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with dynamic filters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3452,
      62,
      2435,
      796,
      493,
      7,
      42861,
      14692,
      2435,
      1,
      7131,
      15,
      12962
    ],
    "start_token": 2115,
    "end_token": 2131,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      8925,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with dynamic filters"
  },
  {
    "line": 317,
    "text": "    # interval minutes",
    "annotation": "\u2705 Best Practice: Sorting data for consistent processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      16654,
      2431
    ],
    "start_token": 2131,
    "end_token": 2137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      1366,
      329,
      6414,
      7587
    ],
    "label": "best_practice",
    "reason": "Sorting data for consistent processing"
  },
  {
    "line": 319,
    "text": "    filters = [StockQuoteLog.time > start_time]",
    "annotation": "\u2705 Best Practice: Dropping duplicates to ensure unique entity processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16628,
      796,
      685,
      26207,
      25178,
      11187,
      13,
      2435,
      1875,
      923,
      62,
      2435,
      60
    ],
    "start_token": 2137,
    "end_token": 2153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      14184,
      16856,
      284,
      4155,
      3748,
      9312,
      7587
    ],
    "label": "best_practice",
    "reason": "Dropping duplicates to ensure unique entity processing"
  },
  {
    "line": 321,
    "text": "        filters=filters, columns=[StockQuoteLog.entity_id, StockQuoteLog.time, StockQuoteLog.price], return_type=\"df\"",
    "annotation": "\ud83e\udde0 ML Signal: Mapping entities to specific attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      10379,
      1010,
      11,
      15180,
      41888,
      26207,
      25178,
      11187,
      13,
      26858,
      62,
      312,
      11,
      10500,
      25178,
      11187,
      13,
      2435,
      11,
      10500,
      25178,
      11187,
      13,
      20888,
      4357,
      1441,
      62,
      4906,
      2625,
      7568,
      1
    ],
    "start_token": 2153,
    "end_token": 2193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      12066,
      284,
      2176,
      12608
    ],
    "label": "ml_signal",
    "reason": "Mapping entities to specific attributes"
  },
  {
    "line": 321,
    "text": "        filters=filters, columns=[StockQuoteLog.entity_id, StockQuoteLog.time, StockQuoteLog.price], return_type=\"df\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct print statements can expose data in production environments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      10379,
      1010,
      11,
      15180,
      41888,
      26207,
      25178,
      11187,
      13,
      26858,
      62,
      312,
      11,
      10500,
      25178,
      11187,
      13,
      2435,
      11,
      10500,
      25178,
      11187,
      13,
      20888,
      4357,
      1441,
      62,
      4906,
      2625,
      7568,
      1
    ],
    "start_token": 2193,
    "end_token": 2233,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      3601,
      6299,
      460,
      15651,
      1366,
      287,
      3227,
      12493
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct print statements can expose data in production environments"
  },
  {
    "line": 321,
    "text": "        filters=filters, columns=[StockQuoteLog.entity_id, StockQuoteLog.time, StockQuoteLog.price], return_type=\"df\"",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      10379,
      1010,
      11,
      15180,
      41888,
      26207,
      25178,
      11187,
      13,
      26858,
      62,
      312,
      11,
      10500,
      25178,
      11187,
      13,
      2435,
      11,
      10500,
      25178,
      11187,
      13,
      20888,
      4357,
      1441,
      62,
      4906,
      2625,
      7568,
      1
    ],
    "start_token": 2233,
    "end_token": 2273,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module"
  }
]
[
  {
    "line": 9,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing external configuration without validation can lead to security risks if the configuration is tampered with.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      7097,
      8398,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      262,
      8398,
      318,
      21885,
      13653,
      351,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing external configuration without validation can lead to security risks if the configuration is tampered with."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a logger to capture and manage log messages instead of print statements.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      49706,
      284,
      8006,
      290,
      6687,
      2604,
      6218,
      2427,
      286,
      3601,
      6299,
      13
    ],
    "label": "best_practice",
    "reason": "Use a logger to capture and manage log messages instead of print statements."
  },
  {
    "line": 12,
    "text": "from zvt import zvt_config",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with parameters indicating a messaging feature",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      1330,
      1976,
      36540,
      62,
      11250
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      10007,
      12739,
      257,
      19925,
      3895
    ],
    "label": "ml_signal",
    "reason": "Method signature with parameters indicating a messaging feature"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 8,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 18,
    "text": "    def send_message(self, to_user, title, body, **kwargs):",
    "annotation": "\u2705 Best Practice: Explicitly initializing parent class for clarity and correctness",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3758,
      62,
      20500,
      7,
      944,
      11,
      284,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 8,
    "end_token": 30,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4238,
      2890,
      2560,
      1398,
      329,
      16287,
      290,
      29409
    ],
    "label": "best_practice",
    "reason": "Explicitly initializing parent class for clarity and correctness"
  },
  {
    "line": 19,
    "text": "        pass",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the use of SSL could indicate security preferences or requirements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1208
    ],
    "start_token": 30,
    "end_token": 38,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      779,
      286,
      25952,
      714,
      7603,
      2324,
      15387,
      393,
      5359
    ],
    "label": "ml_signal",
    "reason": "Tracking the use of SSL could indicate security preferences or requirements"
  },
  {
    "line": 25,
    "text": "        self.ssl = ssl",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing SMTP configuration can lead to failure in sending emails.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      45163,
      796,
      264,
      6649
    ],
    "start_token": 38,
    "end_token": 51,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      9447,
      7250,
      8398,
      460,
      1085,
      284,
      5287,
      287,
      7216,
      7237,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing SMTP configuration can lead to failure in sending emails."
  },
  {
    "line": 33,
    "text": "        ):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15179
    ],
    "start_token": 51,
    "end_token": 59,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors."
  },
  {
    "line": 37,
    "text": "        port = zvt_config[\"smtp_port\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2493,
      796,
      1976,
      36540,
      62,
      11250,
      14692,
      5796,
      34788,
      62,
      634,
      8973
    ],
    "start_token": 59,
    "end_token": 78,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors."
  },
  {
    "line": 41,
    "text": "            if self.ssl:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      45163,
      25
    ],
    "start_token": 78,
    "end_token": 94,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors."
  },
  {
    "line": 44,
    "text": "                except:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      25
    ],
    "start_token": 94,
    "end_token": 111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors."
  },
  {
    "line": 52,
    "text": "            smtp_client.connect(host=host, port=port)",
    "annotation": "\u2705 Best Practice: Use isinstance() instead of type() for type checking.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      895,
      34788,
      62,
      16366,
      13,
      8443,
      7,
      4774,
      28,
      4774,
      11,
      2493,
      28,
      634,
      8
    ],
    "start_token": 111,
    "end_token": 137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      3419,
      2427,
      286,
      2099,
      3419,
      329,
      2099,
      10627,
      13
    ],
    "label": "best_practice",
    "reason": "Use isinstance() instead of type() for type checking."
  },
  {
    "line": 62,
    "text": "            msg[\"Date\"] = email.utils.formatdate()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging exception with sensitive information can lead to information leakage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31456,
      14692,
      10430,
      8973,
      796,
      3053,
      13,
      26791,
      13,
      18982,
      4475,
      3419
    ],
    "start_token": 137,
    "end_token": 160,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6631,
      351,
      8564,
      1321,
      460,
      1085,
      284,
      1321,
      47988,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging exception with sensitive information can lead to information leakage."
  },
  {
    "line": 61,
    "text": "            msg[\"Message-id\"] = email.utils.make_msgid()",
    "annotation": "\u2705 Best Practice: Use isinstance() instead of type() for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31456,
      14692,
      12837,
      12,
      312,
      8973,
      796,
      3053,
      13,
      26791,
      13,
      15883,
      62,
      19662,
      312,
      3419
    ],
    "start_token": 160,
    "end_token": 187,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      3419,
      2427,
      286,
      2099,
      3419,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use isinstance() instead of type() for type checking"
  },
  {
    "line": 73,
    "text": "    def send_message(self, to_user, title, body, sub_size=20, with_sender=True, **kwargs):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential modification of the original list if to_user is a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3758,
      62,
      20500,
      7,
      944,
      11,
      284,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      850,
      62,
      7857,
      28,
      1238,
      11,
      351,
      62,
      82,
      2194,
      28,
      17821,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 187,
    "end_token": 222,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17613,
      286,
      262,
      2656,
      1351,
      611,
      284,
      62,
      7220,
      318,
      257,
      1351
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential modification of the original list if to_user is a list"
  },
  {
    "line": 75,
    "text": "            size = len(to_user)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom method for sending messages",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2546,
      796,
      18896,
      7,
      1462,
      62,
      7220,
      8
    ],
    "start_token": 222,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2446,
      329,
      7216,
      6218
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom method for sending messages"
  },
  {
    "line": 77,
    "text": "                step_size = int(size / sub_size)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom method for sending messages",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2239,
      62,
      7857,
      796,
      493,
      7,
      7857,
      1220,
      850,
      62,
      7857,
      8
    ],
    "start_token": 241,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2446,
      329,
      7216,
      6218
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom method for sending messages"
  },
  {
    "line": 76,
    "text": "            if size >= sub_size:",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions, which recommend CamelCase for class names.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2546,
      18189,
      850,
      62,
      7857,
      25
    ],
    "start_token": 268,
    "end_token": 286,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      11,
      543,
      4313,
      43281,
      20448,
      329,
      1398,
      3891,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions, which recommend CamelCase for class names."
  },
  {
    "line": 77,
    "text": "                step_size = int(size / sub_size)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate API usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2239,
      62,
      7857,
      796,
      493,
      7,
      7857,
      1220,
      850,
      62,
      7857,
      8
    ],
    "start_token": 286,
    "end_token": 313,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      7824,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate API usage patterns."
  },
  {
    "line": 80,
    "text": "            else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoding URLs can lead to inflexibility and potential exposure of sensitive endpoints.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 313,
    "end_token": 326,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      66,
      7656,
      32336,
      460,
      1085,
      284,
      1167,
      2588,
      2247,
      290,
      2785,
      7111,
      286,
      8564,
      886,
      13033,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoding URLs can lead to inflexibility and potential exposure of sensitive endpoints."
  },
  {
    "line": 81,
    "text": "                step_size = 1",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using format with unvalidated input can lead to injection vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2239,
      62,
      7857,
      796,
      352
    ],
    "start_token": 326,
    "end_token": 346,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      5794,
      351,
      555,
      12102,
      515,
      5128,
      460,
      1085,
      284,
      16954,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using format with unvalidated input can lead to injection vulnerabilities."
  },
  {
    "line": 84,
    "text": "                sub_to_user = to_user[sub_size * step : sub_size * (step + 1)]",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate API usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      1462,
      62,
      7220,
      796,
      284,
      62,
      7220,
      58,
      7266,
      62,
      7857,
      1635,
      2239,
      1058,
      850,
      62,
      7857,
      1635,
      357,
      9662,
      1343,
      352,
      15437
    ],
    "start_token": 346,
    "end_token": 386,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      7824,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate API usage patterns."
  },
  {
    "line": 85,
    "text": "                if with_sender:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoding URLs can lead to inflexibility and potential exposure of sensitive endpoints.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      351,
      62,
      82,
      2194,
      25
    ],
    "start_token": 386,
    "end_token": 407,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      66,
      7656,
      32336,
      460,
      1085,
      284,
      1167,
      2588,
      2247,
      290,
      2785,
      7111,
      286,
      8564,
      886,
      13033,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoding URLs can lead to inflexibility and potential exposure of sensitive endpoints."
  },
  {
    "line": 87,
    "text": "                self.send_message_(sub_to_user, title, body, **kwargs)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate API usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21280,
      62,
      20500,
      41052,
      7266,
      62,
      1462,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 407,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      7824,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate API usage patterns."
  },
  {
    "line": 88,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoding URLs can lead to inflexibility and potential exposure of sensitive endpoints.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 442,
    "end_token": 451,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      66,
      7656,
      32336,
      460,
      1085,
      284,
      1167,
      2588,
      2247,
      290,
      2785,
      7111,
      286,
      8564,
      886,
      13033,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoding URLs can lead to inflexibility and potential exposure of sensitive endpoints."
  },
  {
    "line": 89,
    "text": "            self.send_message_(to_user, title, body, **kwargs)",
    "annotation": "\u2705 Best Practice: Initialize class variables in the constructor for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21280,
      62,
      20500,
      41052,
      1462,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 451,
    "end_token": 480,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      1398,
      9633,
      287,
      262,
      23772,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize class variables in the constructor for better readability and maintainability."
  },
  {
    "line": 83,
    "text": "            for step in range(step_size):",
    "annotation": "\u2705 Best Practice: Use of __init__ method to initialize class instance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2239,
      287,
      2837,
      7,
      9662,
      62,
      7857,
      2599
    ],
    "start_token": 480,
    "end_token": 500,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      15003,
      834,
      2446,
      284,
      41216,
      1398,
      4554
    ],
    "label": "best_practice",
    "reason": "Use of __init__ method to initialize class instance"
  },
  {
    "line": 85,
    "text": "                if with_sender:",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method within __init__ to initialize state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      351,
      62,
      82,
      2194,
      25
    ],
    "start_token": 500,
    "end_token": 521,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      1626,
      11593,
      15003,
      834,
      284,
      41216,
      1181
    ],
    "label": "ml_signal",
    "reason": "Calling a method within __init__ to initialize state"
  },
  {
    "line": 86,
    "text": "                    sub_to_user.append(zvt_config[\"email_username\"])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of HTTP GET request to fetch a token",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      1462,
      62,
      7220,
      13,
      33295,
      7,
      89,
      36540,
      62,
      11250,
      14692,
      12888,
      62,
      29460,
      8973,
      8
    ],
    "start_token": 521,
    "end_token": 558,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      14626,
      17151,
      2581,
      284,
      21207,
      257,
      11241
    ],
    "label": "ml_signal",
    "reason": "Usage of HTTP GET request to fetch a token"
  },
  {
    "line": 87,
    "text": "                self.send_message_(sub_to_user, title, body, **kwargs)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network issues or request exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21280,
      62,
      20500,
      41052,
      7266,
      62,
      1462,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 558,
    "end_token": 593,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2428,
      393,
      2581,
      13269
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network issues or request exceptions"
  },
  {
    "line": 89,
    "text": "            self.send_message_(to_user, title, body, **kwargs)",
    "annotation": "\ud83e\udde0 ML Signal: Logging of HTTP response status and text",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21280,
      62,
      20500,
      41052,
      1462,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 593,
    "end_token": 622,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      286,
      14626,
      2882,
      3722,
      290,
      2420
    ],
    "label": "ml_signal",
    "reason": "Logging of HTTP response status and text"
  },
  {
    "line": 89,
    "text": "            self.send_message_(to_user, title, body, **kwargs)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging of sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21280,
      62,
      20500,
      41052,
      1462,
      62,
      7220,
      11,
      3670,
      11,
      1767,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 622,
    "end_token": 651,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      286,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging of sensitive information"
  },
  {
    "line": 92,
    "text": "class WechatInformer(Informer):",
    "annotation": "\ud83e\udde0 ML Signal: Checking for successful HTTP response and presence of access token",
    "confidence": 0.5,
    "tokens": [
      4871,
      775,
      17006,
      818,
      16354,
      7,
      818,
      16354,
      2599
    ],
    "start_token": 651,
    "end_token": 660,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      4388,
      14626,
      2882,
      290,
      4931,
      286,
      1895,
      11241
    ],
    "label": "ml_signal",
    "reason": "Checking for successful HTTP response and presence of access token"
  },
  {
    "line": 94,
    "text": "        zvt_config[\"wechat_app_id\"], zvt_config[\"wechat_app_secrect\"]",
    "annotation": "\ud83e\udde0 ML Signal: Storing access token in an instance variable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      36540,
      62,
      11250,
      14692,
      732,
      17006,
      62,
      1324,
      62,
      312,
      33116,
      1976,
      36540,
      62,
      11250,
      14692,
      732,
      17006,
      62,
      1324,
      62,
      2363,
      2554,
      8973
    ],
    "start_token": 660,
    "end_token": 692,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1895,
      11241,
      287,
      281,
      4554,
      7885
    ],
    "label": "ml_signal",
    "reason": "Storing access token in an instance variable"
  },
  {
    "line": 97,
    "text": "    GET_TEMPLATE_URL = \"https://api.weixin.qq.com/cgi-bin/template/get_all_private_template?access_token={}\"",
    "annotation": "\ud83e\udde0 ML Signal: Logging an exception when token refresh fails",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17151,
      62,
      51,
      3620,
      6489,
      6158,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      15042,
      13,
      732,
      844,
      259,
      13,
      38227,
      13,
      785,
      14,
      37157,
      12,
      8800,
      14,
      28243,
      14,
      1136,
      62,
      439,
      62,
      19734,
      62,
      28243,
      30,
      15526,
      62,
      30001,
      34758,
      36786
    ],
    "start_token": 692,
    "end_token": 736,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      281,
      6631,
      618,
      11241,
      14976,
      10143
    ],
    "label": "ml_signal",
    "reason": "Logging an exception when token refresh fails"
  },
  {
    "line": 98,
    "text": "    SEND_MSG_URL = \"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token={}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception logging without specific error details",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      311,
      10619,
      62,
      5653,
      38,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      15042,
      13,
      732,
      844,
      259,
      13,
      38227,
      13,
      785,
      14,
      37157,
      12,
      8800,
      14,
      20500,
      14,
      28243,
      14,
      21280,
      30,
      15526,
      62,
      30001,
      34758,
      36786
    ],
    "start_token": 736,
    "end_token": 775,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      18931,
      1231,
      2176,
      4049,
      3307
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception logging without specific error details"
  },
  {
    "line": 93,
    "text": "    GET_TOKEN_URL = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={}&secret={}\".format(",
    "annotation": "\ud83e\udde0 ML Signal: Method for sending notifications, useful for learning communication patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      17151,
      62,
      10468,
      43959,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      15042,
      13,
      732,
      844,
      259,
      13,
      38227,
      13,
      785,
      14,
      37157,
      12,
      8800,
      14,
      30001,
      30,
      2164,
      415,
      62,
      4906,
      28,
      16366,
      62,
      66,
      445,
      1843,
      5,
      1324,
      312,
      34758,
      92,
      5,
      21078,
      34758,
      92,
      1911,
      18982,
      7
    ],
    "start_token": 775,
    "end_token": 826,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      7216,
      19605,
      11,
      4465,
      329,
      4673,
      6946,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method for sending notifications, useful for learning communication patterns"
  },
  {
    "line": 95,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use descriptive variable names instead of 'the_json'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 826,
    "end_token": 830,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      2427,
      286,
      705,
      1169,
      62,
      17752,
      6
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names instead of 'the_json'"
  },
  {
    "line": 97,
    "text": "    GET_TEMPLATE_URL = \"https://api.weixin.qq.com/cgi-bin/template/get_all_private_template?access_token={}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for data leakage if sensitive information is included in the JSON",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      17151,
      62,
      51,
      3620,
      6489,
      6158,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      15042,
      13,
      732,
      844,
      259,
      13,
      38227,
      13,
      785,
      14,
      37157,
      12,
      8800,
      14,
      28243,
      14,
      1136,
      62,
      439,
      62,
      19734,
      62,
      28243,
      30,
      15526,
      62,
      30001,
      34758,
      36786
    ],
    "start_token": 830,
    "end_token": 874,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      1366,
      47988,
      611,
      8564,
      1321,
      318,
      3017,
      287,
      262,
      19449
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for data leakage if sensitive information is included in the JSON"
  },
  {
    "line": 98,
    "text": "    SEND_MSG_URL = \"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token={}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that 'the_json' is properly sanitized to prevent injection attacks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      311,
      10619,
      62,
      5653,
      38,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      15042,
      13,
      732,
      844,
      259,
      13,
      38227,
      13,
      785,
      14,
      37157,
      12,
      8800,
      14,
      20500,
      14,
      28243,
      14,
      21280,
      30,
      15526,
      62,
      30001,
      34758,
      36786
    ],
    "start_token": 874,
    "end_token": 913,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      705,
      1169,
      62,
      17752,
      6,
      318,
      6105,
      5336,
      36951,
      284,
      2948,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that 'the_json' is properly sanitized to prevent injection attacks"
  },
  {
    "line": 100,
    "text": "    token = None",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for the HTTP request, which could lead to unhandled exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11241,
      796,
      6045
    ],
    "start_token": 913,
    "end_token": 919,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581,
      11,
      543,
      714,
      1085,
      284,
      555,
      38788,
      13269
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for the HTTP request, which could lead to unhandled exceptions"
  },
  {
    "line": 101,
    "text": "",
    "annotation": "\u2705 Best Practice: Use logging with structured data instead of string formatting",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 919,
    "end_token": 919,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      351,
      20793,
      1366,
      2427,
      286,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use logging with structured data instead of string formatting"
  },
  {
    "line": 103,
    "text": "        self.refresh_token()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'resp.json()' is always a valid JSON, which may not be the case",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5420,
      3447,
      62,
      30001,
      3419
    ],
    "start_token": 919,
    "end_token": 933,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      4363,
      13,
      17752,
      3419,
      6,
      318,
      1464,
      257,
      4938,
      19449,
      11,
      543,
      743,
      407,
      307,
      262,
      1339
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'resp.json()' is always a valid JSON, which may not be the case"
  },
  {
    "line": 105,
    "text": "    def refresh_token(self):",
    "annotation": "\u2705 Best Practice: Use logging with structured data instead of string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      14976,
      62,
      30001,
      7,
      944,
      2599
    ],
    "start_token": 933,
    "end_token": 943,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      351,
      20793,
      1366,
      2427,
      286,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use logging with structured data instead of string formatting"
  },
  {
    "line": 99,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 943,
    "end_token": 943,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 101,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on change_pct could indicate user sentiment or market trend.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 943,
    "end_token": 943,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1487,
      62,
      79,
      310,
      714,
      7603,
      2836,
      15598,
      393,
      1910,
      5182,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on change_pct could indicate user sentiment or market trend."
  },
  {
    "line": 105,
    "text": "    def refresh_token(self):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific template_id could indicate a pattern in notification templates.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      14976,
      62,
      30001,
      7,
      944,
      2599
    ],
    "start_token": 943,
    "end_token": 953,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      11055,
      62,
      312,
      714,
      7603,
      257,
      3912,
      287,
      14483,
      24019,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a specific template_id could indicate a pattern in notification templates."
  },
  {
    "line": 105,
    "text": "    def refresh_token(self):",
    "annotation": "\ud83e\udde0 ML Signal: The structure of the JSON object could be used to identify notification patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      14976,
      62,
      30001,
      7,
      944,
      2599
    ],
    "start_token": 953,
    "end_token": 963,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      4645,
      286,
      262,
      19449,
      2134,
      714,
      307,
      973,
      284,
      5911,
      14483,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "The structure of the JSON object could be used to identify notification patterns."
  },
  {
    "line": 117,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded URL could be a potential security risk if not validated or if it changes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 963,
    "end_token": 963,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      10289,
      714,
      307,
      257,
      2785,
      2324,
      2526,
      611,
      407,
      31031,
      393,
      611,
      340,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded URL could be a potential security risk if not validated or if it changes."
  },
  {
    "line": 118,
    "text": "        resp = requests.post(self.SEND_MSG_URL.format(self.token), the_data)",
    "annotation": "\u2705 Best Practice: Use of string formatting for percentage ensures consistent output format.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      7353,
      7,
      944,
      13,
      50,
      10619,
      62,
      5653,
      38,
      62,
      21886,
      13,
      18982,
      7,
      944,
      13,
      30001,
      828,
      262,
      62,
      7890,
      8
    ],
    "start_token": 963,
    "end_token": 996,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4731,
      33313,
      329,
      5873,
      19047,
      6414,
      5072,
      5794,
      13
    ],
    "label": "best_practice",
    "reason": "Use of string formatting for percentage ensures consistent output format."
  },
  {
    "line": 123,
    "text": "            logger.info(\"send_price_notification to user:{} data:{} success\".format(to_user, the_json))",
    "annotation": "\u2705 Best Practice: Returning a well-structured JSON object improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      21280,
      62,
      20888,
      62,
      1662,
      2649,
      284,
      2836,
      29164,
      92,
      1366,
      29164,
      92,
      1943,
      1911,
      18982,
      7,
      1462,
      62,
      7220,
      11,
      262,
      62,
      17752,
      4008
    ],
    "start_token": 996,
    "end_token": 1036,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      880,
      12,
      7249,
      1522,
      19449,
      2134,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a well-structured JSON object improves code readability and maintainability."
  },
  {
    "line": 119,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring is missing, consider adding one to describe the purpose and usage of the class.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1036,
    "end_token": 1036,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      318,
      4814,
      11,
      2074,
      4375,
      530,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring is missing, consider adding one to describe the purpose and usage of the class."
  },
  {
    "line": 119,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default parameter values in function definitions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1036,
    "end_token": 1036,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      287,
      2163,
      17336
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values in function definitions"
  },
  {
    "line": 121,
    "text": "",
    "annotation": "\u2705 Best Practice: Storing parameters as instance variables",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1036,
    "end_token": 1036,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      10007,
      355,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Storing parameters as instance variables"
  },
  {
    "line": 124,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive information in logs",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1036,
    "end_token": 1036,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive information in logs"
  },
  {
    "line": 127,
    "text": "            title = \"\u5403\u8089\u559d\u6c64\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of configuration settings for authentication",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3670,
      796,
      366,
      28938,
      225,
      164,
      224,
      231,
      161,
      244,
      251,
      162,
      109,
      97,
      1
    ],
    "start_token": 1036,
    "end_token": 1062,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8398,
      6460,
      329,
      18239
    ],
    "label": "ml_signal",
    "reason": "Usage of configuration settings for authentication"
  },
  {
    "line": 133,
    "text": "        # {",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for the HTTP request",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1391
    ],
    "start_token": 1062,
    "end_token": 1071,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for the HTTP request"
  },
  {
    "line": 134,
    "text": "        #     \"template_id\": \"mkqi-L1h56mH637vLXiuS_ulLTs1byDYYgLBbSXQ65U\",",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of sending HTTP POST requests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      220,
      366,
      28243,
      62,
      312,
      1298,
      366,
      28015,
      40603,
      12,
      43,
      16,
      71,
      3980,
      76,
      39,
      21,
      2718,
      85,
      43,
      55,
      16115,
      50,
      62,
      377,
      27734,
      82,
      16,
      1525,
      35,
      26314,
      70,
      30501,
      65,
      50,
      55,
      48,
      2996,
      52,
      1600
    ],
    "start_token": 1071,
    "end_token": 1122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      7216,
      14626,
      24582,
      7007
    ],
    "label": "ml_signal",
    "reason": "Pattern of sending HTTP POST requests"
  },
  {
    "line": 135,
    "text": "        #     \"title\": \"\u6da8\u8dcc\u5e45\u63d0\u9192\",",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation and usage of a class object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      220,
      366,
      7839,
      1298,
      366,
      162,
      114,
      101,
      164,
      115,
      234,
      33176,
      227,
      162,
      237,
      238,
      165,
      10253,
      1600
    ],
    "start_token": 1122,
    "end_token": 1152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      290,
      8748,
      286,
      257,
      1398,
      2134
    ],
    "label": "ml_signal",
    "reason": "Instantiation and usage of a class object"
  },
  {
    "line": 135,
    "text": "        #     \"title\": \"\u6da8\u8dcc\u5e45\u63d0\u9192\",",
    "annotation": "\ud83e\udde0 ML Signal: Method invocation with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      220,
      366,
      7839,
      1298,
      366,
      162,
      114,
      101,
      164,
      115,
      234,
      33176,
      227,
      162,
      237,
      238,
      165,
      10253,
      1600
    ],
    "start_token": 1152,
    "end_token": 1182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      43219,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method invocation with specific parameters"
  },
  {
    "line": 135,
    "text": "        #     \"title\": \"\u6da8\u8dcc\u5e45\u63d0\u9192\",",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      220,
      366,
      7839,
      1298,
      366,
      162,
      114,
      101,
      164,
      115,
      234,
      33176,
      227,
      162,
      237,
      238,
      165,
      10253,
      1600
    ],
    "start_token": 1182,
    "end_token": 1212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
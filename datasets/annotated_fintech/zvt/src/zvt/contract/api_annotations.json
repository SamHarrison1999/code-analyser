[
  {
    "line": 21,
    "text": "from zvt.utils.pd_utils import pd_is_not_null, index_df",
    "annotation": "\u2705 Best Practice: Use of a logger is a best practice for tracking and debugging.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      11,
      6376,
      62,
      7568
    ],
    "start_token": 0,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      49706,
      318,
      257,
      1266,
      3357,
      329,
      9646,
      290,
      28769,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a logger is a best practice for tracking and debugging."
  },
  {
    "line": 21,
    "text": "from zvt.utils.pd_utils import pd_is_not_null, index_df",
    "annotation": "\u2705 Best Practice: Use of type hinting for function return type improves readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      11,
      6376,
      62,
      7568
    ],
    "start_token": 22,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      1441,
      2099,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function return type improves readability and maintainability"
  },
  {
    "line": 28,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to find a matching subclass",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 44,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1064,
      257,
      12336,
      47611
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to find a matching subclass"
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of issubclass to check class hierarchy",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 48,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1189,
      549,
      4871,
      284,
      2198,
      1398,
      18911
    ],
    "label": "ml_signal",
    "reason": "Use of issubclass to check class hierarchy"
  },
  {
    "line": 33,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if db_name is derived from untrusted input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 48,
    "end_token": 52,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      20613,
      62,
      3672,
      318,
      10944,
      422,
      1418,
      81,
      8459,
      5128
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if db_name is derived from untrusted input"
  },
  {
    "line": 41,
    "text": ") -> Engine:",
    "annotation": "\u2705 Best Practice: Check if data_schema is provided to determine db_name, improving flexibility.",
    "confidence": 1.0,
    "tokens": [
      8,
      4613,
      7117,
      25
    ],
    "start_token": 52,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1366,
      62,
      15952,
      2611,
      318,
      2810,
      284,
      5004,
      20613,
      62,
      3672,
      11,
      10068,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Check if data_schema is provided to determine db_name, improving flexibility."
  },
  {
    "line": 45,
    "text": "    :param provider: data provider",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directory creation without checking permissions or handling exceptions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      10131,
      25,
      1366,
      10131
    ],
    "start_token": 56,
    "end_token": 65,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      27387,
      6282,
      1231,
      10627,
      21627,
      393,
      9041,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directory creation without checking permissions or handling exceptions."
  },
  {
    "line": 48,
    "text": "    :param data_path: data path",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using string formatting for file paths can lead to path traversal vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      1366,
      62,
      6978,
      25,
      1366,
      3108
    ],
    "start_token": 65,
    "end_token": 76,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      4731,
      33313,
      329,
      2393,
      13532,
      460,
      1085,
      284,
      3108,
      33038,
      282,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using string formatting for file paths can lead to path traversal vulnerabilities."
  },
  {
    "line": 50,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a map to cache and retrieve database engines.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 76,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      3975,
      284,
      12940,
      290,
      19818,
      6831,
      11874,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a map to cache and retrieve database engines."
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking and retrieving from a context map for database engines.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 80,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      290,
      50122,
      422,
      257,
      4732,
      3975,
      329,
      6831,
      11874,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking and retrieving from a context map for database engines."
  },
  {
    "line": 55,
    "text": "    if not os.path.exists(provider_path):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL injection risk if db_path is not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      28686,
      13,
      6978,
      13,
      1069,
      1023,
      7,
      15234,
      1304,
      62,
      6978,
      2599
    ],
    "start_token": 80,
    "end_token": 97,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      20613,
      62,
      6978,
      318,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL injection risk if db_path is not properly sanitized."
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing newly created database engine in a context map.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 97,
    "end_token": 97,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8308,
      2727,
      6831,
      3113,
      287,
      257,
      4732,
      3975,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing newly created database engine in a context map."
  },
  {
    "line": 55,
    "text": "    if not os.path.exists(provider_path):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Accessing a global variable directly can lead to unexpected side effects if the global state changes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      28686,
      13,
      6978,
      13,
      1069,
      1023,
      7,
      15234,
      1304,
      62,
      6978,
      2599
    ],
    "start_token": 97,
    "end_token": 114,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8798,
      278,
      257,
      3298,
      7885,
      3264,
      460,
      1085,
      284,
      10059,
      1735,
      3048,
      611,
      262,
      3298,
      1181,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Accessing a global variable directly can lead to unexpected side effects if the global state changes."
  },
  {
    "line": 56,
    "text": "        os.makedirs(provider_path)",
    "annotation": "\u2705 Best Practice: Consider using dependency injection to pass the context or providers as a parameter.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      28686,
      13,
      76,
      4335,
      17062,
      7,
      15234,
      1304,
      62,
      6978,
      8
    ],
    "start_token": 114,
    "end_token": 132,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      20203,
      16954,
      284,
      1208,
      262,
      4732,
      393,
      9549,
      355,
      257,
      11507,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using dependency injection to pass the context or providers as a parameter."
  },
  {
    "line": 57,
    "text": "    db_path = os.path.join(provider_path, \"{}_{}.db?check_same_thread=False\".format(provider, db_name))",
    "annotation": "\u2705 Best Practice: Add type hint for the return type to improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      20613,
      62,
      6978,
      796,
      28686,
      13,
      6978,
      13,
      22179,
      7,
      15234,
      1304,
      62,
      6978,
      11,
      45144,
      92,
      23330,
      27422,
      9945,
      30,
      9122,
      62,
      31642,
      62,
      16663,
      28,
      25101,
      1911,
      18982,
      7,
      15234,
      1304,
      11,
      20613,
      62,
      3672,
      4008
    ],
    "start_token": 132,
    "end_token": 173,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      9254,
      329,
      262,
      1441,
      2099,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Add type hint for the return type to improve code readability and maintainability"
  },
  {
    "line": 65,
    "text": "        zvt_context.db_engine_map[engine_key] = db_engine",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to find matching keys",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      36540,
      62,
      22866,
      13,
      9945,
      62,
      18392,
      62,
      8899,
      58,
      18392,
      62,
      2539,
      60,
      796,
      20613,
      62,
      18392
    ],
    "start_token": 173,
    "end_token": 199,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1064,
      12336,
      8251
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to find matching keys"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for equality",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 199,
    "end_token": 199,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      10537
    ],
    "label": "ml_signal",
    "reason": "Conditional check for equality"
  },
  {
    "line": 69,
    "text": "def get_providers() -> List[str]:",
    "annotation": "\ud83e\udde0 ML Signal: Nested loop to iterate over a list of items",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      15234,
      4157,
      3419,
      4613,
      7343,
      58,
      2536,
      5974
    ],
    "start_token": 199,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      7287,
      9052,
      284,
      11629,
      378,
      625,
      257,
      1351,
      286,
      3709
    ],
    "label": "ml_signal",
    "reason": "Nested loop to iterate over a list of items"
  },
  {
    "line": 71,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary values with a key",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      3815,
      351,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary values with a key"
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for truthiness",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      3872,
      1272
    ],
    "label": "ml_signal",
    "reason": "Conditional check for truthiness"
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: List concatenation pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      1673,
      36686,
      341,
      3912
    ],
    "label": "ml_signal",
    "reason": "List concatenation pattern"
  },
  {
    "line": 80,
    "text": "    schemas = []",
    "annotation": "\u2705 Best Practice: Return statement at the end of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3897,
      5356,
      796,
      17635
    ],
    "start_token": 210,
    "end_token": 217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      379,
      262,
      886,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Return statement at the end of the function"
  },
  {
    "line": 80,
    "text": "    schemas = []",
    "annotation": "\u2705 Best Practice: Check if data_schema is provided to determine db_name, improving flexibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3897,
      5356,
      796,
      17635
    ],
    "start_token": 217,
    "end_token": 224,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1366,
      62,
      15952,
      2611,
      318,
      2810,
      284,
      5004,
      20613,
      62,
      3672,
      11,
      10068,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Check if data_schema is provided to determine db_name, improving flexibility."
  },
  {
    "line": 83,
    "text": "            for dbname in dbs:",
    "annotation": "\u2705 Best Practice: Use of format method for string formatting, which is more readable and maintainable.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      20613,
      3672,
      287,
      288,
      1443,
      25
    ],
    "start_token": 224,
    "end_token": 242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      2446,
      329,
      4731,
      33313,
      11,
      543,
      318,
      517,
      31744,
      290,
      5529,
      540,
      13
    ],
    "label": "best_practice",
    "reason": "Use of format method for string formatting, which is more readable and maintainable."
  },
  {
    "line": 85,
    "text": "                if schemas1:",
    "annotation": "\ud83e\udde0 ML Signal: Use of a flag (force_new) to control session creation behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3897,
      5356,
      16,
      25
    ],
    "start_token": 242,
    "end_token": 262,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      6056,
      357,
      3174,
      62,
      3605,
      8,
      284,
      1630,
      6246,
      6282,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a flag (force_new) to control session creation behavior."
  },
  {
    "line": 87,
    "text": "    return schemas",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for resource exhaustion if sessions are not properly managed.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      3897,
      5356
    ],
    "start_token": 262,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      8271,
      32493,
      611,
      10991,
      389,
      407,
      6105,
      5257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for resource exhaustion if sessions are not properly managed."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a global context (zvt_context.sessions) to manage sessions.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      3298,
      4732,
      357,
      89,
      36540,
      62,
      22866,
      13,
      82,
      6202,
      8,
      284,
      6687,
      10991,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a global context (zvt_context.sessions) to manage sessions."
  },
  {
    "line": 91,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for resource exhaustion if sessions are not properly managed.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 268,
    "end_token": 272,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      8271,
      32493,
      611,
      10991,
      389,
      407,
      6105,
      5257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for resource exhaustion if sessions are not properly managed."
  },
  {
    "line": 91,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Caching sessions in a global context for reuse.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 272,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      8103,
      10991,
      287,
      257,
      3298,
      4732,
      329,
      32349,
      13
    ],
    "label": "ml_signal",
    "reason": "Caching sessions in a global context for reuse."
  },
  {
    "line": 98,
    "text": "    :return: db session",
    "annotation": "\u2705 Best Practice: Check if data_schema is provided to determine db_name",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25,
      20613,
      6246
    ],
    "start_token": 276,
    "end_token": 284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1366,
      62,
      15952,
      2611,
      318,
      2810,
      284,
      5004,
      20613,
      62,
      3672
    ],
    "label": "best_practice",
    "reason": "Check if data_schema is provided to determine db_name"
  },
  {
    "line": 101,
    "text": "        db_name = _get_db_name(data_schema=data_schema)",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20613,
      62,
      3672,
      796,
      4808,
      1136,
      62,
      9945,
      62,
      3672,
      7,
      7890,
      62,
      15952,
      2611,
      28,
      7890,
      62,
      15952,
      2611,
      8
    ],
    "start_token": 284,
    "end_token": 312,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 103,
    "text": "    session_key = \"{}_{}\".format(provider, db_name)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a context or global map to store sessions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6246,
      62,
      2539,
      796,
      45144,
      92,
      23330,
      92,
      1911,
      18982,
      7,
      15234,
      1304,
      11,
      20613,
      62,
      3672,
      8
    ],
    "start_token": 312,
    "end_token": 333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      4732,
      393,
      3298,
      3975,
      284,
      3650,
      10991
    ],
    "label": "ml_signal",
    "reason": "Usage of a context or global map to store sessions"
  },
  {
    "line": 106,
    "text": "        return get_db_session_factory(provider, db_name, data_schema)()",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of creating a new session if not found",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      651,
      62,
      9945,
      62,
      29891,
      62,
      69,
      9548,
      7,
      15234,
      1304,
      11,
      20613,
      62,
      3672,
      11,
      1366,
      62,
      15952,
      2611,
      8,
      3419
    ],
    "start_token": 333,
    "end_token": 363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4441,
      257,
      649,
      6246,
      611,
      407,
      1043
    ],
    "label": "ml_signal",
    "reason": "Pattern of creating a new session if not found"
  },
  {
    "line": 108,
    "text": "    session = zvt_context.sessions.get(session_key)",
    "annotation": "\ud83e\udde0 ML Signal: Storing the session in a global or shared context",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6246,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      82,
      6202,
      13,
      1136,
      7,
      29891,
      62,
      2539,
      8
    ],
    "start_token": 363,
    "end_token": 382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      262,
      6246,
      287,
      257,
      3298,
      393,
      4888,
      4732
    ],
    "label": "ml_signal",
    "reason": "Storing the session in a global or shared context"
  },
  {
    "line": 113,
    "text": "    return session",
    "annotation": "\u2705 Best Practice: Assigning a function to a variable for reuse",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      6246
    ],
    "start_token": 382,
    "end_token": 387,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      257,
      2163,
      284,
      257,
      7885,
      329,
      32349
    ],
    "label": "best_practice",
    "reason": "Assigning a function to a variable for reuse"
  },
  {
    "line": 107,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with a specific input-output pattern that could be used to predict schema retrieval behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 387,
    "end_token": 387,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      257,
      2176,
      5128,
      12,
      22915,
      3912,
      326,
      714,
      307,
      973,
      284,
      4331,
      32815,
      45069,
      4069
    ],
    "label": "ml_signal",
    "reason": "Function with a specific input-output pattern that could be used to predict schema retrieval behavior"
  },
  {
    "line": 108,
    "text": "    session = zvt_context.sessions.get(session_key)",
    "annotation": "\u2705 Best Practice: Function docstring provides clear explanation of parameters and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6246,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      82,
      6202,
      13,
      1136,
      7,
      29891,
      62,
      2539,
      8
    ],
    "start_token": 387,
    "end_token": 406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      2205,
      8841,
      3769,
      1598,
      7468,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Function docstring provides clear explanation of parameters and return value"
  },
  {
    "line": 108,
    "text": "    session = zvt_context.sessions.get(session_key)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if entity_type is not in tradable_schema_map",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6246,
      796,
      1976,
      36540,
      62,
      22866,
      13,
      82,
      6202,
      13,
      1136,
      7,
      29891,
      62,
      2539,
      8
    ],
    "start_token": 406,
    "end_token": 425,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      9312,
      62,
      4906,
      318,
      407,
      287,
      2083,
      540,
      62,
      15952,
      2611,
      62,
      8899
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if entity_type is not in tradable_schema_map"
  },
  {
    "line": 114,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with a single responsibility to retrieve schema by name",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 425,
    "end_token": 425,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      257,
      2060,
      5798,
      284,
      19818,
      32815,
      416,
      1438
    ],
    "label": "ml_signal",
    "reason": "Function with a single responsibility to retrieve schema by name"
  },
  {
    "line": 121,
    "text": "    :param db_name: db name",
    "annotation": "\u2705 Best Practice: Iterating over a collection to find a match",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      20613,
      62,
      3672,
      25,
      20613,
      1438
    ],
    "start_token": 425,
    "end_token": 436,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      1064,
      257,
      2872
    ],
    "label": "best_practice",
    "reason": "Iterating over a collection to find a match"
  },
  {
    "line": 123,
    "text": "    :return: db session factory",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for None return if no schema matches",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25,
      20613,
      6246,
      8860
    ],
    "start_token": 436,
    "end_token": 445,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      1441,
      611,
      645,
      32815,
      7466
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for None return if no schema matches"
  },
  {
    "line": 123,
    "text": "    :return: db session factory",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with type hints indicating input and output types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25,
      20613,
      6246,
      8860
    ],
    "start_token": 445,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2099,
      20269,
      12739,
      5128,
      290,
      5072,
      3858
    ],
    "label": "ml_signal",
    "reason": "Function definition with type hints indicating input and output types"
  },
  {
    "line": 130,
    "text": "    if not session:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to __table__ attribute may expose internal structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      6246,
      25
    ],
    "start_token": 454,
    "end_token": 461,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      11593,
      11487,
      834,
      11688,
      743,
      15651,
      5387,
      4645
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to __table__ attribute may expose internal structure"
  },
  {
    "line": 130,
    "text": "    if not session:",
    "annotation": "\u2705 Best Practice: Consider specifying types for function parameters for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      6246,
      25
    ],
    "start_token": 461,
    "end_token": 468,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      31577,
      3858,
      329,
      2163,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider specifying types for function parameters for better readability and maintainability."
  },
  {
    "line": 154,
    "text": "    :return: schema",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25,
      32815
    ],
    "start_token": 468,
    "end_token": 475,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be bypassed if Python is run with optimizations."
  },
  {
    "line": 156,
    "text": "    for schema in zvt_context.schemas:",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of eval can lead to code injection vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      32815,
      287,
      1976,
      36540,
      62,
      22866,
      13,
      1416,
      4411,
      292,
      25
    ],
    "start_token": 475,
    "end_token": 490,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      5418,
      460,
      1085,
      284,
      2438,
      16954,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of eval can lead to code injection vulnerabilities."
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of timestamp filtering in queries.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 490,
    "end_token": 490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      41033,
      25431,
      287,
      20743,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of timestamp filtering in queries."
  },
  {
    "line": 162,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of timestamp filtering in queries.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 490,
    "end_token": 494,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      41033,
      25431,
      287,
      20743,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of timestamp filtering in queries."
  },
  {
    "line": 166,
    "text": "    :return: columns of the schema",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over filters to apply them to a query.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25,
      15180,
      286,
      262,
      32815
    ],
    "start_token": 494,
    "end_token": 504,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      16628,
      284,
      4174,
      606,
      284,
      257,
      12405,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over filters to apply them to a query."
  },
  {
    "line": 169,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional ordering of query results.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 504,
    "end_token": 504,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      16216,
      286,
      12405,
      2482,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional ordering of query results."
  },
  {
    "line": 172,
    "text": "    query: Query,",
    "annotation": "\ud83e\udde0 ML Signal: Default ordering of query results by time.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12405,
      25,
      43301,
      11
    ],
    "start_token": 504,
    "end_token": 511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      16216,
      286,
      12405,
      2482,
      416,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "Default ordering of query results by time."
  },
  {
    "line": 172,
    "text": "    query: Query,",
    "annotation": "\ud83e\udde0 ML Signal: Limiting the number of results in a query.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12405,
      25,
      43301,
      11
    ],
    "start_token": 511,
    "end_token": 518,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7576,
      1780,
      262,
      1271,
      286,
      2482,
      287,
      257,
      12405,
      13
    ],
    "label": "ml_signal",
    "reason": "Limiting the number of results in a query."
  },
  {
    "line": 178,
    "text": "    limit=None,",
    "annotation": "\ud83e\udde0 ML Signal: Applying distinct operation in a query.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4179,
      28,
      14202,
      11
    ],
    "start_token": 518,
    "end_token": 525,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      7310,
      4905,
      287,
      257,
      12405,
      13
    ],
    "label": "ml_signal",
    "reason": "Applying distinct operation in a query."
  },
  {
    "line": 180,
    "text": "    time_field=\"timestamp\",",
    "annotation": "\u2705 Best Practice: Use a context manager to ensure the session is properly closed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      640,
      62,
      3245,
      2625,
      16514,
      27823,
      1600
    ],
    "start_token": 525,
    "end_token": 535,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4732,
      4706,
      284,
      4155,
      262,
      6246,
      318,
      6105,
      4838
    ],
    "label": "best_practice",
    "reason": "Use a context manager to ensure the session is properly closed"
  },
  {
    "line": 185,
    "text": "    :param query: sql query",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      12405,
      25,
      44161,
      12405
    ],
    "start_token": 535,
    "end_token": 544,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL injection if filters are not properly sanitized"
  },
  {
    "line": 187,
    "text": "    :param start_timestamp: start timestamp",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Deleting data without confirmation or logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      923,
      62,
      16514,
      27823,
      25,
      923,
      41033
    ],
    "start_token": 544,
    "end_token": 556,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      42226,
      889,
      1366,
      1231,
      12641,
      393,
      18931
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Deleting data without confirmation or logging"
  },
  {
    "line": 188,
    "text": "    :param end_timestamp: end timestamp",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Committing changes without error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      886,
      62,
      16514,
      27823,
      25,
      886,
      41033
    ],
    "start_token": 556,
    "end_token": 568,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1520,
      2535,
      2458,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Committing changes without error handling"
  },
  {
    "line": 196,
    "text": "    time_col = eval(\"data_schema.{}\".format(time_field))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging format issue, use %s instead of {}",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      640,
      62,
      4033,
      796,
      5418,
      7203,
      7890,
      62,
      15952,
      2611,
      13,
      90,
      92,
      1911,
      18982,
      7,
      2435,
      62,
      3245,
      4008
    ],
    "start_token": 568,
    "end_token": 591,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      5794,
      2071,
      11,
      779,
      4064,
      82,
      2427,
      286,
      23884
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging format issue, use %s instead of {}"
  },
  {
    "line": 200,
    "text": "    if end_timestamp:",
    "annotation": "\ud83e\udde0 ML Signal: Defaulting to the first provider in the list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      886,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 591,
    "end_token": 600,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      278,
      284,
      262,
      717,
      10131,
      287,
      262,
      1351
    ],
    "label": "ml_signal",
    "reason": "Defaulting to the first provider in the list"
  },
  {
    "line": 203,
    "text": "    if filters:",
    "annotation": "\ud83e\udde0 ML Signal: Lazy initialization of session",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      16628,
      25
    ],
    "start_token": 600,
    "end_token": 606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      406,
      12582,
      37588,
      286,
      6246
    ],
    "label": "ml_signal",
    "reason": "Lazy initialization of session"
  },
  {
    "line": 205,
    "text": "            query = query.filter(filter)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if id is not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12405,
      796,
      12405,
      13,
      24455,
      7,
      24455,
      8
    ],
    "start_token": 606,
    "end_token": 625,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      4686,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if id is not properly sanitized"
  },
  {
    "line": 205,
    "text": "            query = query.filter(filter)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over table columns to convert a row to a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12405,
      796,
      12405,
      13,
      24455,
      7,
      24455,
      8
    ],
    "start_token": 625,
    "end_token": 644,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3084,
      15180,
      284,
      10385,
      257,
      5752,
      284,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Iterating over table columns to convert a row to a dictionary"
  },
  {
    "line": 207,
    "text": "        query = query.order_by(order)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing column name and value dynamically",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12405,
      796,
      12405,
      13,
      2875,
      62,
      1525,
      7,
      2875,
      8
    ],
    "start_token": 644,
    "end_token": 661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      5721,
      1438,
      290,
      1988,
      32366
    ],
    "label": "ml_signal",
    "reason": "Accessing column name and value dynamically"
  },
  {
    "line": 208,
    "text": "    else:",
    "annotation": "\u2705 Best Practice: Returning a dictionary representation of a database row",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 661,
    "end_token": 666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      22155,
      10552,
      286,
      257,
      6831,
      5752
    ],
    "label": "best_practice",
    "reason": "Returning a dictionary representation of a database row"
  },
  {
    "line": 255,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging format string vulnerability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 666,
    "end_token": 666,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      5794,
      4731,
      15131
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging format string vulnerability"
  },
  {
    "line": 259,
    "text": "def _row2dict(row):",
    "annotation": "\ud83e\udde0 ML Signal: Default provider selection logic",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      808,
      17,
      11600,
      7,
      808,
      2599
    ],
    "start_token": 666,
    "end_token": 674,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      10131,
      6356,
      9156
    ],
    "label": "ml_signal",
    "reason": "Default provider selection logic"
  },
  {
    "line": 262,
    "text": "        d[column.name] = getattr(row, column.name)",
    "annotation": "\ud83e\udde0 ML Signal: Default session creation logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      288,
      58,
      28665,
      13,
      3672,
      60,
      796,
      651,
      35226,
      7,
      808,
      11,
      5721,
      13,
      3672,
      8
    ],
    "start_token": 674,
    "end_token": 697,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      6246,
      6282,
      9156
    ],
    "label": "ml_signal",
    "reason": "Default session creation logic"
  },
  {
    "line": 264,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of eval can lead to code injection vulnerabilities",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 697,
    "end_token": 697,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      5418,
      460,
      1085,
      284,
      2438,
      16954,
      23805
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of eval can lead to code injection vulnerabilities"
  },
  {
    "line": 269,
    "text": "    entity_ids: List[str] = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of eval can lead to code injection vulnerabilities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      25,
      7343,
      58,
      2536,
      60,
      796,
      6045,
      11
    ],
    "start_token": 697,
    "end_token": 711,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      5418,
      460,
      1085,
      284,
      2438,
      16954,
      23805
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of eval can lead to code injection vulnerabilities"
  },
  {
    "line": 281,
    "text": "    session: Session = None,",
    "annotation": "\ud83e\udde0 ML Signal: Query construction pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6246,
      25,
      23575,
      796,
      6045,
      11
    ],
    "start_token": 711,
    "end_token": 720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      43301,
      5103,
      3912
    ],
    "label": "ml_signal",
    "reason": "Query construction pattern"
  },
  {
    "line": 284,
    "text": "    distinct=None,",
    "annotation": "\ud83e\udde0 ML Signal: Query construction pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      7310,
      28,
      14202,
      11
    ],
    "start_token": 720,
    "end_token": 727,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      43301,
      5103,
      3912
    ],
    "label": "ml_signal",
    "reason": "Query construction pattern"
  },
  {
    "line": 287,
    "text": "    time_field: str = \"timestamp\",",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by entity_id",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      640,
      62,
      3245,
      25,
      965,
      796,
      366,
      16514,
      27823,
      1600
    ],
    "start_token": 727,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      9312,
      62,
      312
    ],
    "label": "ml_signal",
    "reason": "Filtering by entity_id"
  },
  {
    "line": 290,
    "text": "    query data by the arguments",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by entity_ids",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12405,
      1366,
      416,
      262,
      7159
    ],
    "start_token": 740,
    "end_token": 748,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      9312,
      62,
      2340
    ],
    "label": "ml_signal",
    "reason": "Filtering by entity_ids"
  },
  {
    "line": 293,
    "text": "    :param ids:",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      220,
      2340,
      25
    ],
    "start_token": 748,
    "end_token": 756,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      2438
    ],
    "label": "ml_signal",
    "reason": "Filtering by code"
  },
  {
    "line": 296,
    "text": "    :param codes:",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by codes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      12416,
      25
    ],
    "start_token": 756,
    "end_token": 763,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      12416
    ],
    "label": "ml_signal",
    "reason": "Filtering by codes"
  },
  {
    "line": 297,
    "text": "    :param code:",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by ids",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      2438,
      25
    ],
    "start_token": 763,
    "end_token": 770,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      220,
      2340
    ],
    "label": "ml_signal",
    "reason": "Filtering by ids"
  },
  {
    "line": 308,
    "text": "    :param limit:",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by level",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      4179,
      25
    ],
    "start_token": 770,
    "end_token": 777,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      1241
    ],
    "label": "ml_signal",
    "reason": "Filtering by level"
  },
  {
    "line": 310,
    "text": "    :param drop_index_col: whether drop the col if it's in index, default False",
    "annotation": "\ud83e\udde0 ML Signal: Common filter application",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      4268,
      62,
      9630,
      62,
      4033,
      25,
      1771,
      4268,
      262,
      951,
      611,
      340,
      338,
      287,
      6376,
      11,
      4277,
      10352
    ],
    "start_token": 777,
    "end_token": 800,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8070,
      8106,
      3586
    ],
    "label": "ml_signal",
    "reason": "Common filter application"
  },
  {
    "line": 322,
    "text": "    time_col = eval(\"data_schema.{}\".format(time_field))",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame return type handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      640,
      62,
      4033,
      796,
      5418,
      7203,
      7890,
      62,
      15952,
      2611,
      13,
      90,
      92,
      1911,
      18982,
      7,
      2435,
      62,
      3245,
      4008
    ],
    "start_token": 800,
    "end_token": 823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      1441,
      2099,
      9041
    ],
    "label": "ml_signal",
    "reason": "DataFrame return type handling"
  },
  {
    "line": 329,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame indexing pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 823,
    "end_token": 823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      6376,
      278,
      3912
    ],
    "label": "ml_signal",
    "reason": "DataFrame indexing pattern"
  },
  {
    "line": 331,
    "text": "        if time_col not in columns:",
    "annotation": "\ud83e\udde0 ML Signal: Domain return type handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      640,
      62,
      4033,
      407,
      287,
      15180,
      25
    ],
    "start_token": 823,
    "end_token": 838,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20021,
      1441,
      2099,
      9041
    ],
    "label": "ml_signal",
    "reason": "Domain return type handling"
  },
  {
    "line": 331,
    "text": "        if time_col not in columns:",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary return type handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      640,
      62,
      4033,
      407,
      287,
      15180,
      25
    ],
    "start_token": 838,
    "end_token": 853,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      1441,
      2099,
      9041
    ],
    "label": "ml_signal",
    "reason": "Dictionary return type handling"
  },
  {
    "line": 338,
    "text": "                    columns_.append(col.label(col_label.get(col.name)))",
    "annotation": "\ud83e\udde0 ML Signal: Selectable return type handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      44807,
      33295,
      7,
      4033,
      13,
      18242,
      7,
      4033,
      62,
      18242,
      13,
      1136,
      7,
      4033,
      13,
      3672,
      22305
    ],
    "start_token": 853,
    "end_token": 890,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      540,
      1441,
      2099,
      9041
    ],
    "label": "ml_signal",
    "reason": "Selectable return type handling"
  },
  {
    "line": 321,
    "text": "",
    "annotation": "\u2705 Best Practice: Add type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 890,
    "end_token": 890,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Add type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 330,
    "text": "        # make sure get timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy session and query pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      787,
      1654,
      651,
      41033
    ],
    "start_token": 890,
    "end_token": 902,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      6246,
      290,
      12405,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy session and query pattern"
  },
  {
    "line": 331,
    "text": "        if time_col not in columns:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if `schema` or `id` are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      640,
      62,
      4033,
      407,
      287,
      15180,
      25
    ],
    "start_token": 902,
    "end_token": 917,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      4600,
      15952,
      2611,
      63,
      393,
      4600,
      312,
      63,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if `schema` or `id` are not properly sanitized"
  },
  {
    "line": 330,
    "text": "        # make sure get timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Function with parameters that can be used to analyze usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      787,
      1654,
      651,
      41033
    ],
    "start_token": 917,
    "end_token": 929,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      10007,
      326,
      460,
      307,
      973,
      284,
      16602,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with parameters that can be used to analyze usage patterns"
  },
  {
    "line": 339,
    "text": "                else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 929,
    "end_token": 946,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if filters are not properly sanitized"
  },
  {
    "line": 343,
    "text": "        query = session.query(*columns)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12405,
      796,
      6246,
      13,
      22766,
      46491,
      28665,
      82,
      8
    ],
    "start_token": 946,
    "end_token": 962,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if filters are not properly sanitized"
  },
  {
    "line": 345,
    "text": "        query = session.query(data_schema)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if data_schema.id is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12405,
      796,
      6246,
      13,
      22766,
      7,
      7890,
      62,
      15952,
      2611,
      8
    ],
    "start_token": 962,
    "end_token": 980,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      1366,
      62,
      15952,
      2611,
      13,
      312,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if data_schema.id is not properly sanitized"
  },
  {
    "line": 347,
    "text": "    if entity_id:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if count_q is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      9312,
      62,
      312,
      25
    ],
    "start_token": 980,
    "end_token": 988,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      954,
      62,
      80,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if count_q is not properly sanitized"
  },
  {
    "line": 345,
    "text": "        query = session.query(data_schema)",
    "annotation": "\u2705 Best Practice: Consider specifying the types of the parameters for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12405,
      796,
      6246,
      13,
      22766,
      7,
      7890,
      62,
      15952,
      2611,
      8
    ],
    "start_token": 988,
    "end_token": 1006,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      31577,
      262,
      3858,
      286,
      262,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider specifying the types of the parameters for better readability and maintainability."
  },
  {
    "line": 347,
    "text": "    if entity_id:",
    "annotation": "\u2705 Best Practice: Explicitly checking for None is more readable and less error-prone than a falsy check.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      9312,
      62,
      312,
      25
    ],
    "start_token": 1006,
    "end_token": 1014,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      10627,
      329,
      6045,
      318,
      517,
      31744,
      290,
      1342,
      4049,
      12,
      46330,
      621,
      257,
      27807,
      88,
      2198,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly checking for None is more readable and less error-prone than a falsy check."
  },
  {
    "line": 349,
    "text": "    if entity_ids:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk if get_db_session is not properly handling credentials or connections.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      9312,
      62,
      2340,
      25
    ],
    "start_token": 1014,
    "end_token": 1022,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      611,
      651,
      62,
      9945,
      62,
      29891,
      318,
      407,
      6105,
      9041,
      18031,
      393,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk if get_db_session is not properly handling credentials or connections."
  },
  {
    "line": 351,
    "text": "    if code:",
    "annotation": "\u2705 Best Practice: Checking if group_func is not None before using it.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2438,
      25
    ],
    "start_token": 1022,
    "end_token": 1028,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      611,
      1448,
      62,
      20786,
      318,
      407,
      6045,
      878,
      1262,
      340,
      13
    ],
    "label": "best_practice",
    "reason": "Checking if group_func is not None before using it."
  },
  {
    "line": 353,
    "text": "    if codes:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy query patterns can be used to train models on ORM usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      12416,
      25
    ],
    "start_token": 1028,
    "end_token": 1034,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      12405,
      7572,
      460,
      307,
      973,
      284,
      4512,
      4981,
      319,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy query patterns can be used to train models on ORM usage."
  },
  {
    "line": 355,
    "text": "    if ids:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy query patterns can be used to train models on ORM usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      220,
      2340,
      25
    ],
    "start_token": 1034,
    "end_token": 1041,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      12405,
      7572,
      460,
      307,
      973,
      284,
      4512,
      4981,
      319,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy query patterns can be used to train models on ORM usage."
  },
  {
    "line": 360,
    "text": "        try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using pd.read_sql with untrusted input can lead to SQL injection if not properly handled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 1041,
    "end_token": 1050,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      279,
      67,
      13,
      961,
      62,
      25410,
      351,
      1418,
      81,
      8459,
      5128,
      460,
      1085,
      284,
      16363,
      16954,
      611,
      407,
      6105,
      12118,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using pd.read_sql with untrusted input can lead to SQL injection if not properly handled."
  },
  {
    "line": 360,
    "text": "        try:",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 1050,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 362,
    "text": "            data_schema.level",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      13,
      5715
    ],
    "start_token": 1059,
    "end_token": 1076,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 364,
    "text": "                level = level.value",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      796,
      1241,
      13,
      8367
    ],
    "start_token": 1076,
    "end_token": 1096,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 366,
    "text": "        except Exception as e:",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1096,
    "end_token": 1108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 366,
    "text": "        except Exception as e:",
    "annotation": "\ud83e\udde0 ML Signal: Function returns a tuple, indicating a pattern of structured data output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1108,
    "end_token": 1120,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      5860,
      257,
      46545,
      11,
      12739,
      257,
      3912,
      286,
      20793,
      1366,
      5072
    ],
    "label": "ml_signal",
    "reason": "Function returns a tuple, indicating a pattern of structured data output"
  },
  {
    "line": 366,
    "text": "        except Exception as e:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1120,
    "end_token": 1132,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 372,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of tuple unpacking to extract specific values from a function return",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1132,
    "end_token": 1149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      46545,
      8593,
      5430,
      284,
      7925,
      2176,
      3815,
      422,
      257,
      2163,
      1441
    ],
    "label": "ml_signal",
    "reason": "Usage of tuple unpacking to extract specific values from a function return"
  },
  {
    "line": 374,
    "text": "        filters=filters,",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      10379,
      1010,
      11
    ],
    "start_token": 1149,
    "end_token": 1161,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 380,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of unpacking values from a function return",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1161,
    "end_token": 1161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      8593,
      5430,
      3815,
      422,
      257,
      2163,
      1441
    ],
    "label": "ml_signal",
    "reason": "Pattern of unpacking values from a function return"
  },
  {
    "line": 382,
    "text": "        df = pd.read_sql(query.statement, query.session.bind)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a specific part of a tuple or list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      25410,
      7,
      22766,
      13,
      26090,
      11,
      12405,
      13,
      29891,
      13,
      21653,
      8
    ],
    "start_token": 1161,
    "end_token": 1187,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      2176,
      636,
      286,
      257,
      46545,
      393,
      1351
    ],
    "label": "ml_signal",
    "reason": "Returning a specific part of a tuple or list"
  },
  {
    "line": 382,
    "text": "        df = pd.read_sql(query.statement, query.session.bind)",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      25410,
      7,
      22766,
      13,
      26090,
      11,
      12405,
      13,
      29891,
      13,
      21653,
      8
    ],
    "start_token": 1187,
    "end_token": 1213,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 388,
    "text": "        return query.all()",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of unpacking values from a function return",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      12405,
      13,
      439,
      3419
    ],
    "start_token": 1213,
    "end_token": 1225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      8593,
      5430,
      3815,
      422,
      257,
      2163,
      1441
    ],
    "label": "ml_signal",
    "reason": "Pattern of unpacking values from a function return"
  },
  {
    "line": 389,
    "text": "    elif return_type == \"dict\":",
    "annotation": "\ud83e\udde0 ML Signal: Returning a specific part of a tuple from a function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1288,
      361,
      1441,
      62,
      4906,
      6624,
      366,
      11600,
      1298
    ],
    "start_token": 1225,
    "end_token": 1237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      2176,
      636,
      286,
      257,
      46545,
      422,
      257,
      2163
    ],
    "label": "ml_signal",
    "reason": "Returning a specific part of a tuple from a function"
  },
  {
    "line": 389,
    "text": "    elif return_type == \"dict\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No input validation for 'df', 'data_schema', 'provider', which could lead to unexpected behavior or errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1288,
      361,
      1441,
      62,
      4906,
      6624,
      366,
      11600,
      1298
    ],
    "start_token": 1237,
    "end_token": 1249,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      5128,
      21201,
      329,
      705,
      7568,
      3256,
      705,
      7890,
      62,
      15952,
      2611,
      3256,
      705,
      15234,
      1304,
      3256,
      543,
      714,
      1085,
      284,
      10059,
      4069,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No input validation for 'df', 'data_schema', 'provider', which could lead to unexpected behavior or errors."
  },
  {
    "line": 411,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation for 'df' being a valid DataFrame.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1249,
    "end_token": 1249,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      329,
      705,
      7568,
      6,
      852,
      257,
      4938,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation for 'df' being a valid DataFrame."
  },
  {
    "line": 414,
    "text": "    :param session:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for logging sensitive data with 'logger.warning'.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      6246,
      25
    ],
    "start_token": 1249,
    "end_token": 1256,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      18931,
      8564,
      1366,
      351,
      705,
      6404,
      1362,
      13,
      43917,
      4458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for logging sensitive data with 'logger.warning'."
  },
  {
    "line": 418,
    "text": "    if filters:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation for 'data_schema' being a valid schema.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      16628,
      25
    ],
    "start_token": 1256,
    "end_token": 1262,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      329,
      705,
      7890,
      62,
      15952,
      2611,
      6,
      852,
      257,
      4938,
      32815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation for 'data_schema' being a valid schema."
  },
  {
    "line": 427,
    "text": "def get_group(provider, data_schema, column, group_func=func.count, session=None):",
    "annotation": "\u2705 Best Practice: Consider using a configuration file or environment variable for platform-specific settings.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      8094,
      7,
      15234,
      1304,
      11,
      1366,
      62,
      15952,
      2611,
      11,
      5721,
      11,
      1448,
      62,
      20786,
      28,
      20786,
      13,
      9127,
      11,
      6246,
      28,
      14202,
      2599
    ],
    "start_token": 1262,
    "end_token": 1289,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      8398,
      2393,
      393,
      2858,
      7885,
      329,
      3859,
      12,
      11423,
      6460,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a configuration file or environment variable for platform-specific settings."
  },
  {
    "line": 437,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation for 'session' being a valid database session.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1289,
    "end_token": 1289,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      329,
      705,
      29891,
      6,
      852,
      257,
      4938,
      6831,
      6246,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation for 'session' being a valid database session."
  },
  {
    "line": 445,
    "text": "    result = entity_id.split(\"_\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL injection risk with string formatting in SQL queries.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      9312,
      62,
      312,
      13,
      35312,
      7203,
      62,
      4943
    ],
    "start_token": 1289,
    "end_token": 1302,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      16954,
      2526,
      351,
      4731,
      33313,
      287,
      16363,
      20743,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL injection risk with string formatting in SQL queries."
  },
  {
    "line": 452,
    "text": "def get_entity_type(entity_id: str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL injection risk with string formatting in SQL queries.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      26858,
      62,
      4906,
      7,
      26858,
      62,
      312,
      25,
      965,
      2599
    ],
    "start_token": 1302,
    "end_token": 1315,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      16954,
      2526,
      351,
      4731,
      33313,
      287,
      16363,
      20743,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL injection risk with string formatting in SQL queries."
  },
  {
    "line": 461,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation for 'data_schema.__tablename__' being a valid table name.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1315,
    "end_token": 1315,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      329,
      705,
      7890,
      62,
      15952,
      2611,
      13,
      834,
      8658,
      11925,
      480,
      834,
      6,
      852,
      257,
      4938,
      3084,
      1438,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation for 'data_schema.__tablename__' being a valid table name."
  },
  {
    "line": 505,
    "text": "    :return:",
    "annotation": "\u2705 Best Practice: Defaulting to a specific entity schema if not provided",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 1315,
    "end_token": 1321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      278,
      284,
      257,
      2176,
      9312,
      32815,
      611,
      407,
      2810
    ],
    "label": "best_practice",
    "reason": "Defaulting to a specific entity schema if not provided"
  },
  {
    "line": 508,
    "text": "        return 0",
    "annotation": "\u2705 Best Practice: Defaulting to the first provider if not specified",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      657
    ],
    "start_token": 1321,
    "end_token": 1330,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      278,
      284,
      262,
      717,
      10131,
      611,
      407,
      7368
    ],
    "label": "best_practice",
    "reason": "Defaulting to the first provider if not specified"
  },
  {
    "line": 511,
    "text": "        logger.warning(f\"remove duplicated:{df[df.duplicated()]}\")",
    "annotation": "\u2705 Best Practice: Defaulting to ascending order if not specified",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      28956,
      14184,
      3474,
      29164,
      7568,
      58,
      7568,
      13,
      646,
      489,
      3474,
      3419,
      48999,
      4943
    ],
    "start_token": 1330,
    "end_token": 1357,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      278,
      284,
      41988,
      1502,
      611,
      407,
      7368
    ],
    "label": "best_practice",
    "reason": "Defaulting to ascending order if not specified"
  },
  {
    "line": 513,
    "text": "",
    "annotation": "\u2705 Best Practice: Handling filters for exchanges",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1357,
    "end_token": 1357,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      49500,
      16628,
      329,
      14525
    ],
    "label": "best_practice",
    "reason": "Handling filters for exchanges"
  },
  {
    "line": 516,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage pattern of get_data function with various parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1357,
    "end_token": 1357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      3912,
      286,
      651,
      62,
      7890,
      2163,
      351,
      2972,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage pattern of get_data function with various parameters"
  },
  {
    "line": 556,
    "text": "                    data_schema=data_schema,",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple parameters, useful for learning API usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 1357,
    "end_token": 1386,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      10007,
      11,
      4465,
      329,
      4673,
      7824,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple parameters, useful for learning API usage patterns"
  },
  {
    "line": 566,
    "text": "            df_current.to_sql(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if df is not properly validated before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      14421,
      13,
      1462,
      62,
      25410,
      7
    ],
    "start_token": 1386,
    "end_token": 1405,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      47764,
      318,
      407,
      6105,
      31031,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if df is not properly validated before use"
  },
  {
    "line": 568,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list, common data manipulation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1405,
    "end_token": 1417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351,
      11,
      2219,
      1366,
      17512,
      3912
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list, common data manipulation pattern"
  },
  {
    "line": 570,
    "text": "    return saved",
    "annotation": "\u2705 Best Practice: Use of __name__ guard to allow or prevent parts of code from being run when the modules are imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      7448
    ],
    "start_token": 1417,
    "end_token": 1422,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      4860,
      284,
      1249,
      393,
      2948,
      3354,
      286,
      2438,
      422,
      852,
      1057,
      618,
      262,
      13103,
      389,
      17392
    ],
    "label": "best_practice",
    "reason": "Use of __name__ guard to allow or prevent parts of code from being run when the modules are imported"
  },
  {
    "line": 570,
    "text": "    return saved",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if get_entities is not properly validated before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      7448
    ],
    "start_token": 1422,
    "end_token": 1427,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      651,
      62,
      298,
      871,
      318,
      407,
      6105,
      31031,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if get_entities is not properly validated before use"
  },
  {
    "line": 570,
    "text": "    return saved",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      7448
    ],
    "start_token": 1427,
    "end_token": 1432,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
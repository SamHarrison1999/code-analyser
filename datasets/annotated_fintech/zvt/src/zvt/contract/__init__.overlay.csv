annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Use of Enum for fixed set of constants improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 5969, 900, 286, 38491, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,5,best_practice,2,Use of Enum for fixed set of constants improves code readability and maintainability,,0,from enum import Enum,"[6738, 33829, 1330, 2039, 388]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,24,ml_signal,7,Use of string constants in an Enum can indicate categorical data,,5,"    Repeated fixed time interval, e.g, 5m, 1d.","[220, 220, 220, 30558, 515, 5969, 640, 16654, 11, 304, 13, 70, 11, 642, 76, 11, 352, 67, 13]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,24,ml_signal,9,Use of string constants in an Enum can indicate categorical data,,24,,[]
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,40,ml_signal,11,Use of string constants in an Enum can indicate categorical data,,24,"    LEVEL_L2_QUOTE = ""l2quote""","[220, 220, 220, 49277, 62, 43, 17, 62, 10917, 23051, 796, 366, 75, 17, 22708, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,51,ml_signal,13,Use of string constants in an Enum can indicate categorical data,,40,"    LEVEL_TICK = ""tick""","[220, 220, 220, 49277, 62, 51, 11860, 796, 366, 42298, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,63,ml_signal,15,Use of string constants in an Enum can indicate categorical data,,51,"    LEVEL_1MIN = ""1m""","[220, 220, 220, 49277, 62, 16, 23678, 796, 366, 16, 76, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,75,ml_signal,17,Use of string constants in an Enum can indicate categorical data,,63,"    LEVEL_5MIN = ""5m""","[220, 220, 220, 49277, 62, 20, 23678, 796, 366, 20, 76, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,87,ml_signal,19,Use of string constants in an Enum can indicate categorical data,,75,"    LEVEL_15MIN = ""15m""","[220, 220, 220, 49277, 62, 1314, 23678, 796, 366, 1314, 76, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,99,ml_signal,21,Use of string constants in an Enum can indicate categorical data,,87,"    LEVEL_30MIN = ""30m""","[220, 220, 220, 49277, 62, 1270, 23678, 796, 366, 1270, 76, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,112,ml_signal,23,Use of string constants in an Enum can indicate categorical data,,99,"    LEVEL_1HOUR = ""1h""","[220, 220, 220, 49277, 62, 16, 39, 11698, 796, 366, 16, 71, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,125,ml_signal,25,Use of string constants in an Enum can indicate categorical data,,112,"    LEVEL_4HOUR = ""4h""","[220, 220, 220, 49277, 62, 19, 39, 11698, 796, 366, 19, 71, 1]"
🧠 ML Signal: Use of string constants in an Enum can indicate categorical data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 38491, 287, 281, 2039, 388, 460, 7603, 4253, 12409, 1366]",1.0,137,ml_signal,27,Use of string constants in an Enum can indicate categorical data,,125,"    LEVEL_1DAY = ""1d""","[220, 220, 220, 49277, 62, 16, 26442, 796, 366, 16, 67, 1]"
✅ Best Practice: Consider using a dictionary to map IntervalLevel to strings for better maintainability and readability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 22155, 284, 3975, 4225, 2100, 4971, 284, 13042, 329, 1365, 5529, 1799, 290, 1100, 1799, 13]",1.0,149,best_practice,17,Consider using a dictionary to map IntervalLevel to strings for better maintainability and readability.,,137,"    LEVEL_5MIN = ""5m""","[220, 220, 220, 49277, 62, 20, 23678, 796, 366, 20, 76, 1]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,161,best_practice,19,Use elif for mutually exclusive conditions to improve readability and performance.,,149,"    LEVEL_15MIN = ""15m""","[220, 220, 220, 49277, 62, 1314, 23678, 796, 366, 1314, 76, 1]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,168,best_practice,22,Use elif for mutually exclusive conditions to improve readability and performance.,,161,    #: 1 hour,"[220, 220, 220, 1303, 25, 352, 1711]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,181,best_practice,25,Use elif for mutually exclusive conditions to improve readability and performance.,,168,"    LEVEL_4HOUR = ""4h""","[220, 220, 220, 49277, 62, 19, 39, 11698, 796, 366, 19, 71, 1]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,188,best_practice,28,Use elif for mutually exclusive conditions to improve readability and performance.,,181,    #: 1 week,"[220, 220, 220, 1303, 25, 352, 1285]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,200,best_practice,31,Use elif for mutually exclusive conditions to improve readability and performance.,,188,"    LEVEL_1MON = ""1mon""","[220, 220, 220, 49277, 62, 16, 27857, 796, 366, 16, 2144, 1]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,220,best_practice,34,Use elif for mutually exclusive conditions to improve readability and performance.,,200,        if self == IntervalLevel.LEVEL_1MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 23678, 25]"
✅ Best Practice: Use elif for mutually exclusive conditions to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,236,best_practice,37,Use elif for mutually exclusive conditions to improve readability and performance.,,220,"            return ""5min""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 20, 1084, 1]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,249,ml_signal,33,Use of conditional logic to handle different cases based on self value,,236,    def to_pd_freq(self):,"[220, 220, 220, 825, 284, 62, 30094, 62, 19503, 80, 7, 944, 2599]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,265,ml_signal,35,Use of pandas' floor method for timestamp manipulation,,249,"            return ""1min""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 16, 1084, 1]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,281,ml_signal,37,Use of conditional logic to handle different cases based on self value,,265,"            return ""5min""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 20, 1084, 1]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,297,ml_signal,39,Use of pandas' floor method for timestamp manipulation,,281,"            return ""15min""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 1314, 1084, 1]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,313,ml_signal,41,Use of conditional logic to handle different cases based on self value,,297,"            return ""30min""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 1270, 1084, 1]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,329,ml_signal,43,Use of pandas' floor method for timestamp manipulation,,313,"            return ""1H""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 16, 39, 1]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,345,ml_signal,45,Use of conditional logic to handle different cases based on self value,,329,"            return ""4H""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 19, 39, 1]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,361,ml_signal,47,Use of pandas' floor method for timestamp manipulation,,345,"            return ""1D""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 16, 35, 1]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,378,ml_signal,49,Use of conditional logic to handle different cases based on self value,,361,"    def floor_timestamp(self, pd_timestamp):","[220, 220, 220, 825, 4314, 62, 16514, 27823, 7, 944, 11, 279, 67, 62, 16514, 27823, 2599]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,401,ml_signal,51,Use of pandas' floor method for timestamp manipulation,,378,"            return pd_timestamp.floor(""1min"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 62, 16514, 27823, 13, 28300, 7203, 16, 1084, 4943]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,421,ml_signal,52,Use of conditional logic to handle different cases based on self value,,401,        if self == IntervalLevel.LEVEL_5MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 20, 23678, 25]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,441,ml_signal,56,Use of pandas' floor method for timestamp manipulation,,421,        if self == IntervalLevel.LEVEL_30MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 1270, 23678, 25]"
🧠 ML Signal: Use of conditional logic to handle different cases based on self value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663, 1912, 319, 2116, 1988]",1.0,464,ml_signal,57,Use of conditional logic to handle different cases based on self value,,441,"            return pd_timestamp.floor(""30min"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 62, 16514, 27823, 13, 28300, 7203, 1270, 1084, 4943]"
🧠 ML Signal: Use of pandas' floor method for timestamp manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6, 4314, 2446, 329, 41033, 17512]",0.5,487,ml_signal,59,Use of pandas' floor method for timestamp manipulation,,464,"            return pd_timestamp.floor(""1h"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 62, 16514, 27823, 13, 28300, 7203, 16, 71, 4943]"
✅ Best Practice: Consider adding a docstring to describe the purpose and usage of the function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163, 13]",1.0,503,best_practice,47,Consider adding a docstring to describe the purpose and usage of the function.,,487,"            return ""1D""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 16, 35, 1]"
"🧠 ML Signal: Method chaining pattern with self, indicating object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 2116, 11, 12739, 2134, 12, 17107, 1486, 13]",0.5,520,ml_signal,49,"Method chaining pattern with self, indicating object-oriented design.",,503,"    def floor_timestamp(self, pd_timestamp):","[220, 220, 220, 825, 4314, 62, 16514, 27823, 7, 944, 11, 279, 67, 62, 16514, 27823, 2599]"
⚠️ SAST Risk (Low): Ensure to_second() handles edge cases and returns a valid number.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 284, 62, 12227, 3419, 17105, 5743, 2663, 290, 5860, 257, 4938, 1271, 13]",0.5,540,sast_risk,50,Ensure to_second() handles edge cases and returns a valid number.,Low,520,        if self == IntervalLevel.LEVEL_1MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 23678, 25]"
✅ Best Practice: Consider adding a docstring to describe the purpose and usage of the function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163, 13]",1.0,557,best_practice,49,Consider adding a docstring to describe the purpose and usage of the function.,,540,"    def floor_timestamp(self, pd_timestamp):","[220, 220, 220, 825, 4314, 62, 16514, 27823, 7, 944, 11, 279, 67, 62, 16514, 27823, 2599]"
"🧠 ML Signal: Conversion of time units, which may indicate a pattern of time manipulation.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 640, 4991, 11, 543, 743, 7603, 257, 3912, 286, 640, 17512, 13]",0.5,580,ml_signal,51,"Conversion of time units, which may indicate a pattern of time manipulation.",,557,"            return pd_timestamp.floor(""1min"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 62, 16514, 27823, 13, 28300, 7203, 16, 1084, 4943]"
⚠️ SAST Risk (Low): Ensure that self.to_ms() returns a valid number to avoid exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 2116, 13, 1462, 62, 907, 3419, 5860, 257, 4938, 1271, 284, 3368, 13269, 13]",0.5,600,sast_risk,52,Ensure that self.to_ms() returns a valid number to avoid exceptions.,Low,580,        if self == IntervalLevel.LEVEL_5MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 20, 23678, 25]"
✅ Best Practice: Use of self to access instance-specific data,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 1895, 4554, 12, 11423, 1366]",1.0,620,best_practice,56,Use of self to access instance-specific data,,600,        if self == IntervalLevel.LEVEL_30MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 1270, 23678, 25]"
✅ Best Practice: Consistent use of multiplication for time conversion,"[26486, 227, 6705, 19939, 25, 3515, 7609, 779, 286, 48473, 329, 640, 11315]",0.5,643,best_practice,59,Consistent use of multiplication for time conversion,,620,"            return pd_timestamp.floor(""1h"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 62, 16514, 27823, 13, 28300, 7203, 16, 71, 4943]"
⚠️ SAST Risk (Low): Hardcoded value for month length may lead to inaccuracies,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 1988, 329, 1227, 4129, 743, 1085, 284, 47283, 13433]",0.5,651,sast_risk,76,Hardcoded value for month length may lead to inaccuracies,Low,643,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of dunder method for operator overloading,"[26486, 227, 6705, 19939, 25, 5765, 286, 288, 4625, 2446, 329, 10088, 625, 25138]",0.5,659,best_practice,76,Use of dunder method for operator overloading,,651,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Check if both objects are of the same class,"[26486, 227, 6705, 19939, 25, 6822, 611, 1111, 5563, 389, 286, 262, 976, 1398]",1.0,679,best_practice,78,Check if both objects are of the same class,,659,        if self == IntervalLevel.LEVEL_TICK:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 51, 11860, 25]"
🧠 ML Signal: Custom comparison logic using a method call,"[8582, 100, 254, 10373, 26484, 25, 8562, 7208, 9156, 1262, 257, 2446, 869]",1.0,699,ml_signal,80,Custom comparison logic using a method call,,679,        if self == IntervalLevel.LEVEL_1MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 23678, 25]"
✅ Best Practice: Return NotImplemented for unsupported comparisons,"[26486, 227, 6705, 19939, 25, 8229, 1892, 3546, 1154, 12061, 329, 24222, 17909]",1.0,719,best_practice,82,Return NotImplemented for unsupported comparisons,,699,        if self == IntervalLevel.LEVEL_5MIN:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 20, 23678, 25]"
✅ Best Practice: Check if both objects are of the same class before comparison,"[26486, 227, 6705, 19939, 25, 6822, 611, 1111, 5563, 389, 286, 262, 976, 1398, 878, 7208]",1.0,734,best_practice,81,Check if both objects are of the same class before comparison,,719,            return 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3126, 1635, 8576]"
🧠 ML Signal: Custom greater-than operator implementation,"[8582, 100, 254, 10373, 26484, 25, 8562, 3744, 12, 14813, 10088, 7822]",1.0,751,ml_signal,83,Custom greater-than operator implementation,,734,            return 5 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 642, 1635, 3126, 1635, 8576]"
✅ Best Practice: Return NotImplemented for unsupported comparisons,"[26486, 227, 6705, 19939, 25, 8229, 1892, 3546, 1154, 12061, 329, 24222, 17909]",1.0,768,best_practice,85,Return NotImplemented for unsupported comparisons,,751,            return 15 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1315, 1635, 3126, 1635, 8576]"
✅ Best Practice: Check if both objects are of the same class before comparison,"[26486, 227, 6705, 19939, 25, 6822, 611, 1111, 5563, 389, 286, 262, 976, 1398, 878, 7208]",1.0,785,best_practice,85,Check if both objects are of the same class before comparison,,768,            return 15 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1315, 1635, 3126, 1635, 8576]"
🧠 ML Signal: Custom comparison logic using a method call,"[8582, 100, 254, 10373, 26484, 25, 8562, 7208, 9156, 1262, 257, 2446, 869]",0.5,802,ml_signal,87,Custom comparison logic using a method call,,785,            return 30 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1542, 1635, 3126, 1635, 8576]"
✅ Best Practice: Return NotImplemented for unsupported comparisons,"[26486, 227, 6705, 19939, 25, 8229, 1892, 3546, 1154, 12061, 329, 24222, 17909]",1.0,819,best_practice,89,Return NotImplemented for unsupported comparisons,,802,            return 60 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3126, 1635, 3126, 1635, 8576]"
✅ Best Practice: Use of dunder method for implementing less-than comparison,"[26486, 227, 6705, 19939, 25, 5765, 286, 288, 4625, 2446, 329, 15427, 1342, 12, 14813, 7208]",0.5,840,best_practice,88,Use of dunder method for implementing less-than comparison,,819,        if self == IntervalLevel.LEVEL_1HOUR:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 39, 11698, 25]"
✅ Best Practice: Check if both objects are of the same class before comparison,"[26486, 227, 6705, 19939, 25, 6822, 611, 1111, 5563, 389, 286, 262, 976, 1398, 878, 7208]",1.0,861,best_practice,90,Check if both objects are of the same class before comparison,,840,        if self == IntervalLevel.LEVEL_4HOUR:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 19, 39, 11698, 25]"
🧠 ML Signal: Custom comparison logic using a method call,"[8582, 100, 254, 10373, 26484, 25, 8562, 7208, 9156, 1262, 257, 2446, 869]",0.5,881,ml_signal,92,Custom comparison logic using a method call,,861,        if self == IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
✅ Best Practice: Return NotImplemented for unsupported comparisons,"[26486, 227, 6705, 19939, 25, 8229, 1892, 3546, 1154, 12061, 329, 24222, 17909]",1.0,900,best_practice,93,Return NotImplemented for unsupported comparisons,,881,            return 24 * 60 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1987, 1635, 3126, 1635, 3126, 1635, 8576]"
✅ Best Practice: Use of Enum for defining a set of related constants,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 16215, 257, 900, 286, 3519, 38491]",0.5,920,best_practice,92,Use of Enum for defining a set of related constants,,900,        if self == IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
✅ Best Practice: Use of descriptive and meaningful constant names,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 290, 11570, 6937, 3891]",0.5,943,best_practice,97,Use of descriptive and meaningful constant names,,920,            return 31 * 7 * 24 * 60 * 60 * 1000,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3261, 1635, 767, 1635, 1987, 1635, 3126, 1635, 3126, 1635, 8576]"
✅ Best Practice: Use of Enum for defining a set of related constants improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 16215, 257, 900, 286, 3519, 38491, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,955,best_practice,99,Use of Enum for defining a set of related constants improves code readability and maintainability,,943,"    def __ge__(self, other):","[220, 220, 220, 825, 11593, 469, 834, 7, 944, 11, 584, 2599]"
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,980,ml_signal,101,Categorical values that can be used for classification tasks,,955,            return self.to_ms() >= other.to_ms(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 1462, 62, 907, 3419, 18189, 584, 13, 1462, 62, 907, 3419]"
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,980,ml_signal,103,Categorical values that can be used for classification tasks,,980,,[]
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,980,ml_signal,105,Categorical values that can be used for classification tasks,,980,,[]
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,1005,ml_signal,107,Categorical values that can be used for classification tasks,,980,            return self.to_ms() > other.to_ms(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 1462, 62, 907, 3419, 1875, 584, 13, 1462, 62, 907, 3419]"
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,1005,ml_signal,109,Categorical values that can be used for classification tasks,,1005,,[]
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,1025,ml_signal,111,Categorical values that can be used for classification tasks,,1005,        if self.__class__ is other.__class__:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 834, 4871, 834, 318, 584, 13, 834, 4871, 834, 25]"
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,1037,ml_signal,113,Categorical values that can be used for classification tasks,,1025,        return NotImplemented,"[220, 220, 220, 220, 220, 220, 220, 1441, 1892, 3546, 1154, 12061]"
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,1049,ml_signal,115,Categorical values that can be used for classification tasks,,1037,"    def __lt__(self, other):","[220, 220, 220, 825, 11593, 2528, 834, 7, 944, 11, 584, 2599]"
🧠 ML Signal: Categorical values that can be used for classification tasks,"[8582, 100, 254, 10373, 26484, 25, 327, 2397, 12409, 3815, 326, 460, 307, 973, 329, 17923, 8861]",0.5,1074,ml_signal,117,Categorical values that can be used for classification tasks,,1049,            return self.to_ms() < other.to_ms(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 1462, 62, 907, 3419, 1279, 584, 13, 1462, 62, 907, 3419]"
✅ Best Practice: Use of Enum for defining a set of related constants improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 16215, 257, 900, 286, 3519, 38491, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1074,best_practice,109,Use of Enum for defining a set of related constants improves code readability and maintainability,,1074,,[]
"🧠 ML Signal: Enum members can be used to categorize or label data, useful for feature extraction","[8582, 100, 254, 10373, 26484, 25, 2039, 388, 1866, 460, 307, 973, 284, 17851, 1096, 393, 6167, 1366, 11, 4465, 329, 3895, 22236]",1.0,1094,ml_signal,111,"Enum members can be used to categorize or label data, useful for feature extraction",,1074,        if self.__class__ is other.__class__:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 834, 4871, 834, 318, 584, 13, 834, 4871, 834, 25]"
✅ Best Practice: Use of Enum for Exchange ensures type safety and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 12516, 19047, 2099, 3747, 290, 1100, 1799]",1.0,1098,best_practice,122,Use of Enum for Exchange ensures type safety and readability,,1094,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Mapping of tradable types to exchanges could indicate trading preferences or market focus,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 286, 2083, 540, 3858, 284, 14525, 714, 7603, 7313, 15387, 393, 1910, 2962]",1.0,1106,ml_signal,140,Mapping of tradable types to exchanges could indicate trading preferences or market focus,,1098,"    individual = ""individual""","[220, 220, 220, 1981, 796, 366, 43129, 1]"
✅ Best Practice: Dictionary mapping provides clear association between TradableType and Exchange,"[26486, 227, 6705, 19939, 25, 28261, 16855, 3769, 1598, 8112, 1022, 11974, 6030, 290, 12516]",1.0,1114,best_practice,140,Dictionary mapping provides clear association between TradableType and Exchange,,1106,"    individual = ""individual""","[220, 220, 220, 1981, 796, 366, 43129, 1]"
🧠 ML Signal: Function parameter type conversion pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 11507, 2099, 11315, 3912]",0.5,1124,ml_signal,153,Function parameter type conversion pattern,,1114,    #: 私募,"[220, 220, 220, 1303, 25, 13328, 100, 223, 47947, 253]"
🧠 ML Signal: Dictionary access pattern,"[8582, 100, 254, 10373, 26484, 25, 28261, 1895, 3912]",0.5,1150,ml_signal,155,Dictionary access pattern,,1124,    #: 公司(可能包括私募),"[220, 220, 220, 1303, 25, 10263, 227, 105, 20998, 116, 7, 20998, 107, 47797, 121, 44293, 227, 162, 233, 105, 163, 100, 223, 47947, 253, 8]"
✅ Best Practice: Avoid redundant assignments,"[26486, 227, 6705, 19939, 25, 24390, 30806, 25815]",0.5,1157,best_practice,159,Avoid redundant assignments,,1150,class TradableType(Enum):,"[4871, 11974, 6030, 7, 4834, 388, 2599]"
✅ Best Practice: Explicitly define __all__ for module exports,"[26486, 227, 6705, 19939, 25, 11884, 306, 8160, 11593, 439, 834, 329, 8265, 15319]",0.5,1171,best_practice,160,Explicitly define __all__ for module exports,,1157,    #: A股(中国),"[220, 220, 220, 1303, 25, 317, 164, 224, 94, 7, 40792, 32368, 121, 8]"
⚠️ SAST Risk (Low): Importing * can lead to namespace pollution,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 1635, 460, 1085, 284, 25745, 12231]",0.5,1185,sast_risk,160,Importing * can lead to namespace pollution,Low,1171,    #: A股(中国),"[220, 220, 220, 1303, 25, 317, 164, 224, 94, 7, 40792, 32368, 121, 8]"
✅ Best Practice: Use += to extend __all__ with imported module's __all__,"[26486, 227, 6705, 19939, 25, 5765, 15853, 284, 9117, 11593, 439, 834, 351, 17392, 8265, 338, 11593, 439, 834]",0.5,1199,best_practice,160,Use += to extend __all__ with imported module's __all__,,1185,    #: A股(中国),"[220, 220, 220, 1303, 25, 317, 164, 224, 94, 7, 40792, 32368, 121, 8]"

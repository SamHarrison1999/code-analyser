annotation,annotation_tokens,confidence,end_token,label,line,reason,start_token,text,tokens
âœ… Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,0,best_practice,3,Grouping imports from the same module together improves readability.,0,,[]
âœ… Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,0,best_practice,5,Grouping imports from the same module together improves readability.,0,,[]
ðŸ§  ML Signal: Function definition with specific parameter types indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 11507, 3858, 9217, 8748, 7572]",0.5,0,ml_signal,5,Function definition with specific parameter types indicates usage patterns,0,,[]
ðŸ§  ML Signal: Conversion function usage indicates data normalization pattern,"[8582, 100, 254, 10373, 26484, 25, 44101, 2163, 8748, 9217, 1366, 3487, 1634, 3912]",0.5,16,ml_signal,7,Conversion function usage indicates data normalization pattern,0,from zvt.utils.time_utils import to_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823]"
ðŸ§  ML Signal: Conversion function usage indicates data normalization pattern,"[8582, 100, 254, 10373, 26484, 25, 44101, 2163, 8748, 9217, 1366, 3487, 1634, 3912]",0.5,16,ml_signal,9,Conversion function usage indicates data normalization pattern,16,,[]
âœ… Best Practice: Use of enum for level improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 33829, 329, 1241, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,32,best_practice,11,Use of enum for level improves code readability and maintainability,16,    t1 = to_pd_timestamp(t1),"[220, 220, 220, 256, 16, 796, 284, 62, 30094, 62, 16514, 27823, 7, 83, 16, 8]"
âœ… Best Practice: Direct comparison of attributes for logic clarity,"[26486, 227, 6705, 19939, 25, 4128, 7208, 286, 12608, 329, 9156, 16287]",0.5,49,best_practice,13,Direct comparison of attributes for logic clarity,32,    if level == IntervalLevel.LEVEL_1WEEK:,"[220, 220, 220, 611, 1241, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 54, 33823, 25]"
âœ… Best Practice: Use of enum for level improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 33829, 329, 1241, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,66,best_practice,16,Use of enum for level improves code readability and maintainability,49,        return t1.month == t2.month,"[220, 220, 220, 220, 220, 220, 220, 1441, 256, 16, 13, 8424, 6624, 256, 17, 13, 8424]"
âœ… Best Practice: Direct comparison of attributes for logic clarity,"[26486, 227, 6705, 19939, 25, 4128, 7208, 286, 12608, 329, 9156, 16287]",0.5,83,best_practice,16,Direct comparison of attributes for logic clarity,66,        return t1.month == t2.month,"[220, 220, 220, 220, 220, 220, 220, 1441, 256, 16, 13, 8424, 6624, 256, 17, 13, 8424]"
âœ… Best Practice: Use of method calls for abstraction and reusability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2446, 3848, 329, 34651, 290, 302, 385, 1799]",0.5,100,best_practice,16,Use of method calls for abstraction and reusability,83,        return t1.month == t2.month,"[220, 220, 220, 220, 220, 220, 220, 1441, 256, 16, 13, 8424, 6624, 256, 17, 13, 8424]"
âœ… Best Practice: Use of default parameter value for end_timestamp,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 886, 62, 16514, 27823]",1.0,120,best_practice,26,Use of default parameter value for end_timestamp,100,    it maybe a little bigger than the real size for fetching all the kdata.,"[220, 220, 220, 340, 3863, 257, 1310, 5749, 621, 262, 1103, 2546, 329, 21207, 278, 477, 262, 479, 7890, 13]"
ðŸ§  ML Signal: Use of current timestamp as a default value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 41033, 355, 257, 4277, 1988]",1.0,120,ml_signal,27,Use of current timestamp as a default value,120,,[]
âœ… Best Practice: Conversion function used for consistency,"[26486, 227, 6705, 19939, 25, 44101, 2163, 973, 329, 15794]",1.0,130,best_practice,31,Conversion function used for consistency,120,    :type level: IntervalLevel,"[220, 220, 220, 1058, 4906, 1241, 25, 4225, 2100, 4971]"
âœ… Best Practice: Consistent conversion of start_timestamp,"[26486, 227, 6705, 19939, 25, 3515, 7609, 11315, 286, 923, 62, 16514, 27823]",0.5,146,best_practice,33,Consistent conversion of start_timestamp,130,    :type one_day_trading_minutes: int,"[220, 220, 220, 1058, 4906, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 25, 493]"
âœ… Best Practice: Clear calculation of seconds in a day,"[26486, 227, 6705, 19939, 25, 11459, 17952, 286, 4201, 287, 257, 1110]",0.5,156,best_practice,35,Clear calculation of seconds in a day,146,    if not end_timestamp:,"[220, 220, 220, 611, 407, 886, 62, 16514, 27823, 25]"
ðŸ§  ML Signal: Return value based on specific level condition,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 1912, 319, 2176, 1241, 4006]",0.5,180,ml_signal,38,Return value based on specific level condition,156,        end_timestamp = to_pd_timestamp(end_timestamp),"[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 796, 284, 62, 30094, 62, 16514, 27823, 7, 437, 62, 16514, 27823, 8]"
ðŸ§  ML Signal: Return value based on specific level condition,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 1912, 319, 2176, 1241, 4006]",0.5,205,ml_signal,40,Return value based on specific level condition,180,    time_delta = end_timestamp - to_pd_timestamp(start_timestamp),"[220, 220, 220, 640, 62, 67, 12514, 796, 886, 62, 16514, 27823, 532, 284, 62, 30094, 62, 16514, 27823, 7, 9688, 62, 16514, 27823, 8]"
ðŸ§  ML Signal: Return value based on specific level condition,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 1912, 319, 2176, 1241, 4006]",0.5,221,ml_signal,44,Return value based on specific level condition,205,    if level == IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 611, 1241, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
âœ… Best Practice: Calculation of seconds for positive day delta,"[26486, 227, 6705, 19939, 25, 2199, 14902, 286, 4201, 329, 3967, 1110, 25979]",0.5,238,best_practice,47,Calculation of seconds for positive day delta,221,    if level == IntervalLevel.LEVEL_1WEEK:,"[220, 220, 220, 611, 1241, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 54, 33823, 25]"
ðŸ§  ML Signal: Return value based on calculated seconds,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 1912, 319, 10488, 4201]",0.5,238,ml_signal,49,Return value based on calculated seconds,238,,[]
âœ… Best Practice: Calculation of seconds for non-positive day delta,"[26486, 227, 6705, 19939, 25, 2199, 14902, 286, 4201, 329, 1729, 12, 24561, 1110, 25979]",1.0,264,best_practice,51,Calculation of seconds for non-positive day delta,238,        return int(math.ceil(time_delta.days / 30)) + 1,"[220, 220, 220, 220, 220, 220, 220, 1441, 493, 7, 11018, 13, 344, 346, 7, 2435, 62, 67, 12514, 13, 12545, 1220, 1542, 4008, 1343, 352]"
ðŸ§  ML Signal: Return value based on minimum of calculated seconds and trading seconds,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 1912, 319, 5288, 286, 10488, 4201, 290, 7313, 4201]",0.5,290,ml_signal,51,Return value based on minimum of calculated seconds and trading seconds,264,        return int(math.ceil(time_delta.days / 30)) + 1,"[220, 220, 220, 220, 220, 220, 220, 1441, 493, 7, 11018, 13, 344, 346, 7, 2435, 62, 67, 12514, 13, 12545, 1220, 1542, 4008, 1343, 352]"
âœ… Best Practice: Ensure the function has type hints for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 48987, 262, 2163, 468, 2099, 20269, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,306,best_practice,44,Ensure the function has type hints for better readability and maintainability,290,    if level == IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 611, 1241, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
ðŸ§  ML Signal: Conversion function usage pattern for timestamp normalization,"[8582, 100, 254, 10373, 26484, 25, 44101, 2163, 8748, 3912, 329, 41033, 3487, 1634]",1.0,306,ml_signal,46,Conversion function usage pattern for timestamp normalization,306,,[]
ðŸ§  ML Signal: Usage pattern of adding Timedelta to a timestamp,"[8582, 100, 254, 10373, 26484, 25, 29566, 3912, 286, 4375, 5045, 276, 12514, 284, 257, 41033]",0.5,332,ml_signal,48,Usage pattern of adding Timedelta to a timestamp,306,        return int(math.ceil(time_delta.days / 7)) + 1,"[220, 220, 220, 220, 220, 220, 220, 1441, 493, 7, 11018, 13, 344, 346, 7, 2435, 62, 67, 12514, 13, 12545, 1220, 767, 4008, 1343, 352]"
ðŸ§  ML Signal: Function definition with specific parameters indicates a pattern for timestamp processing,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 10007, 9217, 257, 3912, 329, 41033, 7587]",1.0,349,ml_signal,47,Function definition with specific parameters indicates a pattern for timestamp processing,332,    if level == IntervalLevel.LEVEL_1WEEK:,"[220, 220, 220, 611, 1241, 6624, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 54, 33823, 25]"
ðŸ§  ML Signal: Conversion of input to a specific type (pd.Timestamp) indicates data normalization,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 5128, 284, 257, 2176, 2099, 357, 30094, 13, 14967, 27823, 8, 9217, 1366, 3487, 1634]",0.5,349,ml_signal,49,Conversion of input to a specific type (pd.Timestamp) indicates data normalization,349,,[]
ðŸ§  ML Signal: Use of method chaining on objects (level.floor_timestamp) indicates object-oriented design patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2446, 442, 1397, 319, 5563, 357, 5715, 13, 28300, 62, 16514, 27823, 8, 9217, 2134, 12, 17107, 1486, 7572]",0.5,375,ml_signal,51,Use of method chaining on objects (level.floor_timestamp) indicates object-oriented design patterns,349,        return int(math.ceil(time_delta.days / 30)) + 1,"[220, 220, 220, 220, 220, 220, 220, 1441, 493, 7, 11018, 13, 344, 346, 7, 2435, 62, 67, 12514, 13, 12545, 1220, 1542, 4008, 1343, 352]"
âœ… Best Practice: Explicit return of boolean values improves readability,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 25131, 3815, 19575, 1100, 1799]",0.5,401,best_practice,51,Explicit return of boolean values improves readability,375,        return int(math.ceil(time_delta.days / 30)) + 1,"[220, 220, 220, 220, 220, 220, 220, 1441, 493, 7, 11018, 13, 344, 346, 7, 2435, 62, 67, 12514, 13, 12545, 1220, 1542, 4008, 1343, 352]"

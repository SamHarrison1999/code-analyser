[
  {
    "line": 1,
    "text": "# -*- coding: utf-8 -*-",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns and dependencies",
    "confidence": 1.0,
    "tokens": [
      2,
      532,
      9,
      12,
      19617,
      25,
      3384,
      69,
      12,
      23,
      532,
      9,
      12
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns and dependencies"
  },
  {
    "line": 2,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of new-style classes by inheriting from 'object' for compatibility and consistency",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 13,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      649,
      12,
      7635,
      6097,
      416,
      10639,
      1780,
      422,
      705,
      15252,
      6,
      329,
      17764,
      290,
      15794
    ],
    "label": "best_practice",
    "reason": "Use of new-style classes by inheriting from 'object' for compatibility and consistency"
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Class variable initialized to None, indicating a placeholder or default value",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 13,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      7885,
      23224,
      284,
      6045,
      11,
      12739,
      257,
      46076,
      393,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Class variable initialized to None, indicating a placeholder or default value"
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default values for parameters improves function usability and flexibility",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 13,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      10007,
      19575,
      2163,
      42863,
      290,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default values for parameters improves function usability and flexibility"
  },
  {
    "line": 10,
    "text": "        self.data_df = df",
    "annotation": "\u2705 Best Practice: Initializing lists and dictionaries in the constructor is a good practice for encapsulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      7568,
      796,
      47764
    ],
    "start_token": 13,
    "end_token": 27,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      8341,
      290,
      48589,
      3166,
      287,
      262,
      23772,
      318,
      257,
      922,
      3357,
      329,
      32652,
      1741
    ],
    "label": "best_practice",
    "reason": "Initializing lists and dictionaries in the constructor is a good practice for encapsulation"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Automatic invocation of a method during initialization could indicate a pattern for data preprocessing",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 27,
    "end_token": 27,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30199,
      43219,
      286,
      257,
      2446,
      1141,
      37588,
      714,
      7603,
      257,
      3912,
      329,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Automatic invocation of a method during initialization could indicate a pattern for data preprocessing"
  },
  {
    "line": 19,
    "text": "        self.normalize()",
    "annotation": "\u2705 Best Practice: Check if data_df is not null before proceeding with normalization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      11265,
      1096,
      3419
    ],
    "start_token": 27,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1366,
      62,
      7568,
      318,
      407,
      9242,
      878,
      18788,
      351,
      3487,
      1634
    ],
    "label": "best_practice",
    "reason": "Check if data_df is not null before proceeding with normalization"
  },
  {
    "line": 21,
    "text": "    def normalize(self):",
    "annotation": "\u2705 Best Practice: Check if data_df is already normalized before normalizing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3487,
      1096,
      7,
      944,
      2599
    ],
    "start_token": 39,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1366,
      62,
      7568,
      318,
      1541,
      39279,
      878,
      3487,
      2890
    ],
    "label": "best_practice",
    "reason": "Check if data_df is already normalized before normalizing"
  },
  {
    "line": 23,
    "text": "        normalize data_df to::",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom normalization function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3487,
      1096,
      1366,
      62,
      7568,
      284,
      3712
    ],
    "start_token": 48,
    "end_token": 62,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      3487,
      1634,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of custom normalization function"
  },
  {
    "line": 25,
    "text": "                                        col1    col2    col3",
    "annotation": "\ud83e\udde0 ML Signal: Extracting entity IDs from a multi-level index",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      951,
      16,
      220,
      220,
      220,
      951,
      17,
      220,
      220,
      220,
      951,
      18
    ],
    "start_token": 62,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      9312,
      32373,
      422,
      257,
      5021,
      12,
      5715,
      6376
    ],
    "label": "ml_signal",
    "reason": "Extracting entity IDs from a multi-level index"
  },
  {
    "line": 28,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over entity-specific data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 113,
    "end_token": 121,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      9312,
      12,
      11423,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over entity-specific data"
  },
  {
    "line": 30,
    "text": "            if not is_normal_df(self.data_df):",
    "annotation": "\ud83e\udde0 ML Signal: Appending dataframes to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      318,
      62,
      11265,
      62,
      7568,
      7,
      944,
      13,
      7890,
      62,
      7568,
      2599
    ],
    "start_token": 121,
    "end_token": 146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      1366,
      37805,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending dataframes to a list"
  },
  {
    "line": 31,
    "text": "                self.data_df = normal_index_df(self.data_df, self.category_field, self.time_field)",
    "annotation": "\ud83e\udde0 ML Signal: Mapping entity IDs to their respective dataframes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      7568,
      796,
      3487,
      62,
      9630,
      62,
      7568,
      7,
      944,
      13,
      7890,
      62,
      7568,
      11,
      2116,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      8
    ],
    "start_token": 146,
    "end_token": 191,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      9312,
      32373,
      284,
      511,
      11756,
      1366,
      37805
    ],
    "label": "ml_signal",
    "reason": "Mapping entity IDs to their respective dataframes"
  },
  {
    "line": 31,
    "text": "                self.data_df = normal_index_df(self.data_df, self.category_field, self.time_field)",
    "annotation": "\u2705 Best Practice: Check if df_list has more than one dataframe before filling index",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      7568,
      796,
      3487,
      62,
      9630,
      62,
      7568,
      7,
      944,
      13,
      7890,
      62,
      7568,
      11,
      2116,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      8
    ],
    "start_token": 191,
    "end_token": 236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      47764,
      62,
      4868,
      468,
      517,
      621,
      530,
      1366,
      14535,
      878,
      12591,
      6376
    ],
    "label": "best_practice",
    "reason": "Check if df_list has more than one dataframe before filling index"
  },
  {
    "line": 31,
    "text": "                self.data_df = normal_index_df(self.data_df, self.category_field, self.time_field)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom function to fill indices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      7568,
      796,
      3487,
      62,
      9630,
      62,
      7568,
      7,
      944,
      13,
      7890,
      62,
      7568,
      11,
      2116,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      8
    ],
    "start_token": 236,
    "end_token": 281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      2163,
      284,
      6070,
      36525
    ],
    "label": "ml_signal",
    "reason": "Usage of custom function to fill indices"
  },
  {
    "line": 29,
    "text": "        if pd_is_not_null(self.data_df):",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      944,
      13,
      7890,
      62,
      7568,
      2599
    ],
    "start_token": 281,
    "end_token": 304,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose"
  },
  {
    "line": 31,
    "text": "                self.data_df = normal_index_df(self.data_df, self.category_field, self.time_field)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas utility function to check for null values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      7568,
      796,
      3487,
      62,
      9630,
      62,
      7568,
      7,
      944,
      13,
      7890,
      62,
      7568,
      11,
      2116,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      8
    ],
    "start_token": 304,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      10361,
      2163,
      284,
      2198,
      329,
      9242,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas utility function to check for null values"
  },
  {
    "line": 31,
    "text": "                self.data_df = normal_index_df(self.data_df, self.category_field, self.time_field)",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      7568,
      796,
      3487,
      62,
      9630,
      62,
      7568,
      7,
      944,
      13,
      7890,
      62,
      7568,
      11,
      2116,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      8
    ],
    "start_token": 349,
    "end_token": 394,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of a logger is a best practice for tracking and debugging.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 49706, 318, 257, 1266, 3357, 329, 9646, 290, 28769, 13]",1.0,22,best_practice,21,Use of a logger is a best practice for tracking and debugging.,,0,"from zvt.utils.pd_utils import pd_is_not_null, index_df","[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423, 11, 6376, 62, 7568]"
‚úÖ Best Practice: Use of type hinting for function return type improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 1441, 2099, 19575, 1100, 1799, 290, 5529, 1799]",0.5,44,best_practice,21,Use of type hinting for function return type improves readability and maintainability,,22,"from zvt.utils.pd_utils import pd_is_not_null, index_df","[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423, 11, 6376, 62, 7568]"
üß† ML Signal: Iterating over a dictionary to find a matching subclass,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 1064, 257, 12336, 47611]",0.5,48,ml_signal,28,Iterating over a dictionary to find a matching subclass,,44,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of issubclass to check class hierarchy,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1189, 549, 4871, 284, 2198, 1398, 18911]",1.0,48,ml_signal,30,Use of issubclass to check class hierarchy,,48,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if db_name is derived from untrusted input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 20613, 62, 3672, 318, 10944, 422, 1418, 81, 8459, 5128]",0.5,52,sast_risk,33,Potential risk if db_name is derived from untrusted input,Low,48,"    """"""","[220, 220, 220, 37227]"
"‚úÖ Best Practice: Check if data_schema is provided to determine db_name, improving flexibility.","[26486, 227, 6705, 19939, 25, 6822, 611, 1366, 62, 15952, 2611, 318, 2810, 284, 5004, 20613, 62, 3672, 11, 10068, 13688, 13]",1.0,56,best_practice,41,"Check if data_schema is provided to determine db_name, improving flexibility.",,52,) -> Engine:,"[8, 4613, 7117, 25]"
‚ö†Ô∏è SAST Risk (Low): Directory creation without checking permissions or handling exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 10627, 21627, 393, 9041, 13269, 13]",1.0,65,sast_risk,45,Directory creation without checking permissions or handling exceptions.,Low,56,    :param provider: data provider,"[220, 220, 220, 1058, 17143, 10131, 25, 1366, 10131]"
‚ö†Ô∏è SAST Risk (Medium): Using string formatting for file paths can lead to path traversal vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 4731, 33313, 329, 2393, 13532, 460, 1085, 284, 3108, 33038, 282, 23805, 13]",0.5,76,sast_risk,48,Using string formatting for file paths can lead to path traversal vulnerabilities.,Medium,65,    :param data_path: data path,"[220, 220, 220, 1058, 17143, 1366, 62, 6978, 25, 1366, 3108]"
üß† ML Signal: Usage of a map to cache and retrieve database engines.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 3975, 284, 12940, 290, 19818, 6831, 11874, 13]",0.5,80,ml_signal,50,Usage of a map to cache and retrieve database engines.,,76,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Checking and retrieving from a context map for database engines.,"[8582, 100, 254, 10373, 26484, 25, 39432, 290, 50122, 422, 257, 4732, 3975, 329, 6831, 11874, 13]",0.5,80,ml_signal,53,Checking and retrieving from a context map for database engines.,,80,,[]
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection risk if db_path is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 611, 20613, 62, 6978, 318, 407, 6105, 5336, 36951, 13]",1.0,97,sast_risk,55,Potential SQL injection risk if db_path is not properly sanitized.,Medium,80,    if not os.path.exists(provider_path):,"[220, 220, 220, 611, 407, 28686, 13, 6978, 13, 1069, 1023, 7, 15234, 1304, 62, 6978, 2599]"
üß† ML Signal: Storing newly created database engine in a context map.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8308, 2727, 6831, 3113, 287, 257, 4732, 3975, 13]",1.0,97,ml_signal,58,Storing newly created database engine in a context map.,,97,,[]
‚ö†Ô∏è SAST Risk (Medium): Accessing a global variable directly can lead to unexpected side effects if the global state changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8798, 278, 257, 3298, 7885, 3264, 460, 1085, 284, 10059, 1735, 3048, 611, 262, 3298, 1181, 2458, 13]",0.5,114,sast_risk,55,Accessing a global variable directly can lead to unexpected side effects if the global state changes.,Medium,97,    if not os.path.exists(provider_path):,"[220, 220, 220, 611, 407, 28686, 13, 6978, 13, 1069, 1023, 7, 15234, 1304, 62, 6978, 2599]"
‚úÖ Best Practice: Consider using dependency injection to pass the context or providers as a parameter.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 20203, 16954, 284, 1208, 262, 4732, 393, 9549, 355, 257, 11507, 13]",0.5,132,best_practice,56,Consider using dependency injection to pass the context or providers as a parameter.,,114,        os.makedirs(provider_path),"[220, 220, 220, 220, 220, 220, 220, 28686, 13, 76, 4335, 17062, 7, 15234, 1304, 62, 6978, 8]"
‚úÖ Best Practice: Add type hint for the return type to improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 9254, 329, 262, 1441, 2099, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,173,best_practice,57,Add type hint for the return type to improve code readability and maintainability,,132,"    db_path = os.path.join(provider_path, ""{}_{}.db?check_same_thread=False"".format(provider, db_name))","[220, 220, 220, 20613, 62, 6978, 796, 28686, 13, 6978, 13, 22179, 7, 15234, 1304, 62, 6978, 11, 45144, 92, 23330, 27422, 9945, 30, 9122, 62, 31642, 62, 16663, 28, 25101, 1911, 18982, 7, 15234, 1304, 11, 20613, 62, 3672, 4008]"
üß† ML Signal: Iterating over a dictionary to find matching keys,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 1064, 12336, 8251]",0.5,199,ml_signal,65,Iterating over a dictionary to find matching keys,,173,        zvt_context.db_engine_map[engine_key] = db_engine,"[220, 220, 220, 220, 220, 220, 220, 1976, 36540, 62, 22866, 13, 9945, 62, 18392, 62, 8899, 58, 18392, 62, 2539, 60, 796, 20613, 62, 18392]"
üß† ML Signal: Conditional check for equality,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 10537]",0.5,199,ml_signal,67,Conditional check for equality,,199,,[]
üß† ML Signal: Nested loop to iterate over a list of items,"[8582, 100, 254, 10373, 26484, 25, 399, 7287, 9052, 284, 11629, 378, 625, 257, 1351, 286, 3709]",0.5,210,ml_signal,69,Nested loop to iterate over a list of items,,199,def get_providers() -> List[str]:,"[4299, 651, 62, 15234, 4157, 3419, 4613, 7343, 58, 2536, 5974]"
üß† ML Signal: Accessing dictionary values with a key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 3815, 351, 257, 1994]",0.5,210,ml_signal,71,Accessing dictionary values with a key,,210,,[]
üß† ML Signal: Conditional check for truthiness,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 3872, 1272]",0.5,210,ml_signal,72,Conditional check for truthiness,,210,,[]
üß† ML Signal: List concatenation pattern,"[8582, 100, 254, 10373, 26484, 25, 7343, 1673, 36686, 341, 3912]",0.5,210,ml_signal,72,List concatenation pattern,,210,,[]
‚úÖ Best Practice: Return statement at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 2643, 379, 262, 886, 286, 262, 2163]",0.5,217,best_practice,80,Return statement at the end of the function,,210,    schemas = [],"[220, 220, 220, 3897, 5356, 796, 17635]"
"‚úÖ Best Practice: Check if data_schema is provided to determine db_name, improving flexibility.","[26486, 227, 6705, 19939, 25, 6822, 611, 1366, 62, 15952, 2611, 318, 2810, 284, 5004, 20613, 62, 3672, 11, 10068, 13688, 13]",1.0,224,best_practice,80,"Check if data_schema is provided to determine db_name, improving flexibility.",,217,    schemas = [],"[220, 220, 220, 3897, 5356, 796, 17635]"
"‚úÖ Best Practice: Use of format method for string formatting, which is more readable and maintainable.","[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 2446, 329, 4731, 33313, 11, 543, 318, 517, 31744, 290, 5529, 540, 13]",0.5,242,best_practice,83,"Use of format method for string formatting, which is more readable and maintainable.",,224,            for dbname in dbs:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 20613, 3672, 287, 288, 1443, 25]"
üß† ML Signal: Use of a flag (force_new) to control session creation behavior.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6056, 357, 3174, 62, 3605, 8, 284, 1630, 6246, 6282, 4069, 13]",0.5,262,ml_signal,85,Use of a flag (force_new) to control session creation behavior.,,242,                if schemas1:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3897, 5356, 16, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for resource exhaustion if sessions are not properly managed.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 8271, 32493, 611, 10991, 389, 407, 6105, 5257, 13]",1.0,268,sast_risk,87,Potential for resource exhaustion if sessions are not properly managed.,Low,262,    return schemas,"[220, 220, 220, 1441, 3897, 5356]"
üß† ML Signal: Use of a global context (zvt_context.sessions) to manage sessions.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 3298, 4732, 357, 89, 36540, 62, 22866, 13, 82, 6202, 8, 284, 6687, 10991, 13]",0.5,268,ml_signal,89,Use of a global context (zvt_context.sessions) to manage sessions.,,268,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for resource exhaustion if sessions are not properly managed.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 8271, 32493, 611, 10991, 389, 407, 6105, 5257, 13]",1.0,272,sast_risk,91,Potential for resource exhaustion if sessions are not properly managed.,Low,268,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Caching sessions in a global context for reuse.,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 10991, 287, 257, 3298, 4732, 329, 32349, 13]",0.5,276,ml_signal,91,Caching sessions in a global context for reuse.,,272,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Check if data_schema is provided to determine db_name,"[26486, 227, 6705, 19939, 25, 6822, 611, 1366, 62, 15952, 2611, 318, 2810, 284, 5004, 20613, 62, 3672]",1.0,284,best_practice,98,Check if data_schema is provided to determine db_name,,276,    :return: db session,"[220, 220, 220, 1058, 7783, 25, 20613, 6246]"
‚úÖ Best Practice: Use descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287]",0.5,312,best_practice,101,Use descriptive variable names for clarity,,284,        db_name = _get_db_name(data_schema=data_schema),"[220, 220, 220, 220, 220, 220, 220, 20613, 62, 3672, 796, 4808, 1136, 62, 9945, 62, 3672, 7, 7890, 62, 15952, 2611, 28, 7890, 62, 15952, 2611, 8]"
üß† ML Signal: Usage of a context or global map to store sessions,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 4732, 393, 3298, 3975, 284, 3650, 10991]",0.5,333,ml_signal,103,Usage of a context or global map to store sessions,,312,"    session_key = ""{}_{}"".format(provider, db_name)","[220, 220, 220, 6246, 62, 2539, 796, 45144, 92, 23330, 92, 1911, 18982, 7, 15234, 1304, 11, 20613, 62, 3672, 8]"
üß† ML Signal: Pattern of creating a new session if not found,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 257, 649, 6246, 611, 407, 1043]",0.5,363,ml_signal,106,Pattern of creating a new session if not found,,333,"        return get_db_session_factory(provider, db_name, data_schema)()","[220, 220, 220, 220, 220, 220, 220, 1441, 651, 62, 9945, 62, 29891, 62, 69, 9548, 7, 15234, 1304, 11, 20613, 62, 3672, 11, 1366, 62, 15952, 2611, 8, 3419]"
üß† ML Signal: Storing the session in a global or shared context,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 262, 6246, 287, 257, 3298, 393, 4888, 4732]",1.0,382,ml_signal,108,Storing the session in a global or shared context,,363,    session = zvt_context.sessions.get(session_key),"[220, 220, 220, 6246, 796, 1976, 36540, 62, 22866, 13, 82, 6202, 13, 1136, 7, 29891, 62, 2539, 8]"
‚úÖ Best Practice: Assigning a function to a variable for reuse,"[26486, 227, 6705, 19939, 25, 2195, 38944, 257, 2163, 284, 257, 7885, 329, 32349]",1.0,387,best_practice,113,Assigning a function to a variable for reuse,,382,    return session,"[220, 220, 220, 1441, 6246]"
üß† ML Signal: Function with a specific input-output pattern that could be used to predict schema retrieval behavior,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 257, 2176, 5128, 12, 22915, 3912, 326, 714, 307, 973, 284, 4331, 32815, 45069, 4069]",0.5,387,ml_signal,107,Function with a specific input-output pattern that could be used to predict schema retrieval behavior,,387,,[]
‚úÖ Best Practice: Function docstring provides clear explanation of parameters and return value,"[26486, 227, 6705, 19939, 25, 15553, 2205, 8841, 3769, 1598, 7468, 286, 10007, 290, 1441, 1988]",0.5,406,best_practice,108,Function docstring provides clear explanation of parameters and return value,,387,    session = zvt_context.sessions.get(session_key),"[220, 220, 220, 6246, 796, 1976, 36540, 62, 22866, 13, 82, 6202, 13, 1136, 7, 29891, 62, 2539, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if entity_type is not in tradable_schema_map,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 9312, 62, 4906, 318, 407, 287, 2083, 540, 62, 15952, 2611, 62, 8899]",1.0,425,sast_risk,108,Potential KeyError if entity_type is not in tradable_schema_map,Low,406,    session = zvt_context.sessions.get(session_key),"[220, 220, 220, 6246, 796, 1976, 36540, 62, 22866, 13, 82, 6202, 13, 1136, 7, 29891, 62, 2539, 8]"
üß† ML Signal: Function with a single responsibility to retrieve schema by name,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 257, 2060, 5798, 284, 19818, 32815, 416, 1438]",0.5,425,ml_signal,114,Function with a single responsibility to retrieve schema by name,,425,,[]
‚úÖ Best Practice: Iterating over a collection to find a match,"[26486, 227, 6705, 19939, 25, 40806, 803, 625, 257, 4947, 284, 1064, 257, 2872]",0.5,436,best_practice,121,Iterating over a collection to find a match,,425,    :param db_name: db name,"[220, 220, 220, 1058, 17143, 20613, 62, 3672, 25, 20613, 1438]"
‚ö†Ô∏è SAST Risk (Low): Potential for None return if no schema matches,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 1441, 611, 645, 32815, 7466]",1.0,445,sast_risk,123,Potential for None return if no schema matches,Low,436,    :return: db session factory,"[220, 220, 220, 1058, 7783, 25, 20613, 6246, 8860]"
üß† ML Signal: Function definition with type hints indicating input and output types,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2099, 20269, 12739, 5128, 290, 5072, 3858]",0.5,454,ml_signal,123,Function definition with type hints indicating input and output types,,445,    :return: db session factory,"[220, 220, 220, 1058, 7783, 25, 20613, 6246, 8860]"
‚ö†Ô∏è SAST Risk (Low): Direct access to __table__ attribute may expose internal structure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 11593, 11487, 834, 11688, 743, 15651, 5387, 4645]",0.5,461,sast_risk,130,Direct access to __table__ attribute may expose internal structure,Low,454,    if not session:,"[220, 220, 220, 611, 407, 6246, 25]"
‚úÖ Best Practice: Consider specifying types for function parameters for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 31577, 3858, 329, 2163, 10007, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,468,best_practice,130,Consider specifying types for function parameters for better readability and maintainability.,,461,    if not session:,"[220, 220, 220, 611, 407, 6246, 25]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",0.5,475,sast_risk,154,Using assert for control flow can be bypassed if Python is run with optimizations.,Low,468,    :return: schema,"[220, 220, 220, 1058, 7783, 25, 32815]"
‚ö†Ô∏è SAST Risk (High): Use of eval can lead to code injection vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 5418, 460, 1085, 284, 2438, 16954, 23805, 13]",1.0,490,sast_risk,156,Use of eval can lead to code injection vulnerabilities.,High,475,    for schema in zvt_context.schemas:,"[220, 220, 220, 329, 32815, 287, 1976, 36540, 62, 22866, 13, 1416, 4411, 292, 25]"
üß† ML Signal: Usage of timestamp filtering in queries.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 41033, 25431, 287, 20743, 13]",1.0,490,ml_signal,159,Usage of timestamp filtering in queries.,,490,,[]
üß† ML Signal: Usage of timestamp filtering in queries.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 41033, 25431, 287, 20743, 13]",1.0,494,ml_signal,162,Usage of timestamp filtering in queries.,,490,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Iterating over filters to apply them to a query.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 16628, 284, 4174, 606, 284, 257, 12405, 13]",0.5,504,ml_signal,166,Iterating over filters to apply them to a query.,,494,    :return: columns of the schema,"[220, 220, 220, 1058, 7783, 25, 15180, 286, 262, 32815]"
üß† ML Signal: Conditional ordering of query results.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 16216, 286, 12405, 2482, 13]",1.0,504,ml_signal,169,Conditional ordering of query results.,,504,,[]
üß† ML Signal: Default ordering of query results by time.,"[8582, 100, 254, 10373, 26484, 25, 15161, 16216, 286, 12405, 2482, 416, 640, 13]",1.0,511,ml_signal,172,Default ordering of query results by time.,,504,"    query: Query,","[220, 220, 220, 12405, 25, 43301, 11]"
üß† ML Signal: Limiting the number of results in a query.,"[8582, 100, 254, 10373, 26484, 25, 7576, 1780, 262, 1271, 286, 2482, 287, 257, 12405, 13]",1.0,518,ml_signal,172,Limiting the number of results in a query.,,511,"    query: Query,","[220, 220, 220, 12405, 25, 43301, 11]"
üß† ML Signal: Applying distinct operation in a query.,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 7310, 4905, 287, 257, 12405, 13]",0.5,525,ml_signal,178,Applying distinct operation in a query.,,518,"    limit=None,","[220, 220, 220, 4179, 28, 14202, 11]"
‚úÖ Best Practice: Use a context manager to ensure the session is properly closed,"[26486, 227, 6705, 19939, 25, 5765, 257, 4732, 4706, 284, 4155, 262, 6246, 318, 6105, 4838]",0.5,535,best_practice,180,Use a context manager to ensure the session is properly closed,,525,"    time_field=""timestamp"",","[220, 220, 220, 640, 62, 3245, 2625, 16514, 27823, 1600]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,544,sast_risk,185,Potential SQL injection if filters are not properly sanitized,Medium,535,    :param query: sql query,"[220, 220, 220, 1058, 17143, 12405, 25, 44161, 12405]"
‚ö†Ô∏è SAST Risk (High): Deleting data without confirmation or logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 42226, 889, 1366, 1231, 12641, 393, 18931]",1.0,556,sast_risk,187,Deleting data without confirmation or logging,High,544,    :param start_timestamp: start timestamp,"[220, 220, 220, 1058, 17143, 923, 62, 16514, 27823, 25, 923, 41033]"
‚ö†Ô∏è SAST Risk (Medium): Committing changes without error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1520, 2535, 2458, 1231, 4049, 9041]",0.5,568,sast_risk,188,Committing changes without error handling,Medium,556,    :param end_timestamp: end timestamp,"[220, 220, 220, 1058, 17143, 886, 62, 16514, 27823, 25, 886, 41033]"
"‚ö†Ô∏è SAST Risk (Low): Potential logging format issue, use %s instead of {}","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18931, 5794, 2071, 11, 779, 4064, 82, 2427, 286, 23884]",0.5,591,sast_risk,196,"Potential logging format issue, use %s instead of {}",Low,568,"    time_col = eval(""data_schema.{}"".format(time_field))","[220, 220, 220, 640, 62, 4033, 796, 5418, 7203, 7890, 62, 15952, 2611, 13, 90, 92, 1911, 18982, 7, 2435, 62, 3245, 4008]"
üß† ML Signal: Defaulting to the first provider in the list,"[8582, 100, 254, 10373, 26484, 25, 15161, 278, 284, 262, 717, 10131, 287, 262, 1351]",1.0,600,ml_signal,200,Defaulting to the first provider in the list,,591,    if end_timestamp:,"[220, 220, 220, 611, 886, 62, 16514, 27823, 25]"
üß† ML Signal: Lazy initialization of session,"[8582, 100, 254, 10373, 26484, 25, 406, 12582, 37588, 286, 6246]",0.5,606,ml_signal,203,Lazy initialization of session,,600,    if filters:,"[220, 220, 220, 611, 16628, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if id is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 4686, 318, 407, 6105, 5336, 36951]",0.5,625,sast_risk,205,Potential SQL Injection if id is not properly sanitized,Medium,606,            query = query.filter(filter),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12405, 796, 12405, 13, 24455, 7, 24455, 8]"
üß† ML Signal: Iterating over table columns to convert a row to a dictionary,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3084, 15180, 284, 10385, 257, 5752, 284, 257, 22155]",1.0,644,ml_signal,205,Iterating over table columns to convert a row to a dictionary,,625,            query = query.filter(filter),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12405, 796, 12405, 13, 24455, 7, 24455, 8]"
üß† ML Signal: Accessing column name and value dynamically,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 5721, 1438, 290, 1988, 32366]",0.5,661,ml_signal,207,Accessing column name and value dynamically,,644,        query = query.order_by(order),"[220, 220, 220, 220, 220, 220, 220, 12405, 796, 12405, 13, 2875, 62, 1525, 7, 2875, 8]"
‚úÖ Best Practice: Returning a dictionary representation of a database row,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 10552, 286, 257, 6831, 5752]",0.5,666,best_practice,208,Returning a dictionary representation of a database row,,661,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential logging format string vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18931, 5794, 4731, 15131]",0.5,666,sast_risk,255,Potential logging format string vulnerability,Low,666,,[]
üß† ML Signal: Default provider selection logic,"[8582, 100, 254, 10373, 26484, 25, 15161, 10131, 6356, 9156]",1.0,674,ml_signal,259,Default provider selection logic,,666,def _row2dict(row):,"[4299, 4808, 808, 17, 11600, 7, 808, 2599]"
üß† ML Signal: Default session creation logic,"[8582, 100, 254, 10373, 26484, 25, 15161, 6246, 6282, 9156]",1.0,697,ml_signal,262,Default session creation logic,,674,"        d[column.name] = getattr(row, column.name)","[220, 220, 220, 220, 220, 220, 220, 288, 58, 28665, 13, 3672, 60, 796, 651, 35226, 7, 808, 11, 5721, 13, 3672, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of eval can lead to code injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 5418, 460, 1085, 284, 2438, 16954, 23805]",1.0,697,sast_risk,264,Use of eval can lead to code injection vulnerabilities,Low,697,,[]
‚ö†Ô∏è SAST Risk (Low): Use of eval can lead to code injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 5418, 460, 1085, 284, 2438, 16954, 23805]",1.0,711,sast_risk,269,Use of eval can lead to code injection vulnerabilities,Low,697,"    entity_ids: List[str] = None,","[220, 220, 220, 9312, 62, 2340, 25, 7343, 58, 2536, 60, 796, 6045, 11]"
üß† ML Signal: Query construction pattern,"[8582, 100, 254, 10373, 26484, 25, 43301, 5103, 3912]",1.0,720,ml_signal,281,Query construction pattern,,711,"    session: Session = None,","[220, 220, 220, 6246, 25, 23575, 796, 6045, 11]"
üß† ML Signal: Query construction pattern,"[8582, 100, 254, 10373, 26484, 25, 43301, 5103, 3912]",1.0,727,ml_signal,284,Query construction pattern,,720,"    distinct=None,","[220, 220, 220, 7310, 28, 14202, 11]"
üß† ML Signal: Filtering by entity_id,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 9312, 62, 312]",1.0,740,ml_signal,287,Filtering by entity_id,,727,"    time_field: str = ""timestamp"",","[220, 220, 220, 640, 62, 3245, 25, 965, 796, 366, 16514, 27823, 1600]"
üß† ML Signal: Filtering by entity_ids,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 9312, 62, 2340]",1.0,748,ml_signal,290,Filtering by entity_ids,,740,    query data by the arguments,"[220, 220, 220, 12405, 1366, 416, 262, 7159]"
üß† ML Signal: Filtering by code,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 2438]",1.0,756,ml_signal,293,Filtering by code,,748,    :param ids:,"[220, 220, 220, 1058, 17143, 220, 2340, 25]"
üß† ML Signal: Filtering by codes,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 12416]",1.0,763,ml_signal,296,Filtering by codes,,756,    :param codes:,"[220, 220, 220, 1058, 17143, 12416, 25]"
üß† ML Signal: Filtering by ids,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 220, 2340]",1.0,770,ml_signal,297,Filtering by ids,,763,    :param code:,"[220, 220, 220, 1058, 17143, 2438, 25]"
üß† ML Signal: Filtering by level,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 1241]",1.0,777,ml_signal,308,Filtering by level,,770,    :param limit:,"[220, 220, 220, 1058, 17143, 4179, 25]"
üß† ML Signal: Common filter application,"[8582, 100, 254, 10373, 26484, 25, 8070, 8106, 3586]",1.0,800,ml_signal,310,Common filter application,,777,"    :param drop_index_col: whether drop the col if it's in index, default False","[220, 220, 220, 1058, 17143, 4268, 62, 9630, 62, 4033, 25, 1771, 4268, 262, 951, 611, 340, 338, 287, 6376, 11, 4277, 10352]"
üß† ML Signal: DataFrame return type handling,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 1441, 2099, 9041]",1.0,823,ml_signal,322,DataFrame return type handling,,800,"    time_col = eval(""data_schema.{}"".format(time_field))","[220, 220, 220, 640, 62, 4033, 796, 5418, 7203, 7890, 62, 15952, 2611, 13, 90, 92, 1911, 18982, 7, 2435, 62, 3245, 4008]"
üß† ML Signal: DataFrame indexing pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6376, 278, 3912]",1.0,823,ml_signal,329,DataFrame indexing pattern,,823,,[]
üß† ML Signal: Domain return type handling,"[8582, 100, 254, 10373, 26484, 25, 20021, 1441, 2099, 9041]",1.0,838,ml_signal,331,Domain return type handling,,823,        if time_col not in columns:,"[220, 220, 220, 220, 220, 220, 220, 611, 640, 62, 4033, 407, 287, 15180, 25]"
üß† ML Signal: Dictionary return type handling,"[8582, 100, 254, 10373, 26484, 25, 28261, 1441, 2099, 9041]",1.0,853,ml_signal,331,Dictionary return type handling,,838,        if time_col not in columns:,"[220, 220, 220, 220, 220, 220, 220, 611, 640, 62, 4033, 407, 287, 15180, 25]"
üß† ML Signal: Selectable return type handling,"[8582, 100, 254, 10373, 26484, 25, 9683, 540, 1441, 2099, 9041]",1.0,890,ml_signal,338,Selectable return type handling,,853,                    columns_.append(col.label(col_label.get(col.name))),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 44807, 33295, 7, 4033, 13, 18242, 7, 4033, 62, 18242, 13, 1136, 7, 4033, 13, 3672, 22305]"
‚úÖ Best Practice: Add type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,890,best_practice,321,Add type hints for function parameters and return type for better readability and maintainability,,890,,[]
üß† ML Signal: Usage of SQLAlchemy session and query pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 6246, 290, 12405, 3912]",1.0,902,ml_signal,330,Usage of SQLAlchemy session and query pattern,,890,        # make sure get timestamp,"[220, 220, 220, 220, 220, 220, 220, 1303, 787, 1654, 651, 41033]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if `schema` or `id` are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 4600, 15952, 2611, 63, 393, 4600, 312, 63, 389, 407, 6105, 5336, 36951]",1.0,917,sast_risk,331,Potential SQL Injection if `schema` or `id` are not properly sanitized,Medium,902,        if time_col not in columns:,"[220, 220, 220, 220, 220, 220, 220, 611, 640, 62, 4033, 407, 287, 15180, 25]"
üß† ML Signal: Function with parameters that can be used to analyze usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 10007, 326, 460, 307, 973, 284, 16602, 8748, 7572]",0.5,929,ml_signal,330,Function with parameters that can be used to analyze usage patterns,,917,        # make sure get timestamp,"[220, 220, 220, 220, 220, 220, 220, 1303, 787, 1654, 651, 41033]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,946,sast_risk,339,Potential SQL Injection if filters are not properly sanitized,Medium,929,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,962,sast_risk,343,Potential SQL Injection if filters are not properly sanitized,Medium,946,        query = session.query(*columns),"[220, 220, 220, 220, 220, 220, 220, 12405, 796, 6246, 13, 22766, 46491, 28665, 82, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if data_schema.id is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 1366, 62, 15952, 2611, 13, 312, 318, 407, 6105, 5336, 36951]",1.0,980,sast_risk,345,Potential SQL Injection if data_schema.id is not properly sanitized,Medium,962,        query = session.query(data_schema),"[220, 220, 220, 220, 220, 220, 220, 12405, 796, 6246, 13, 22766, 7, 7890, 62, 15952, 2611, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if count_q is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 954, 62, 80, 318, 407, 6105, 5336, 36951]",1.0,988,sast_risk,347,Potential SQL Injection if count_q is not properly sanitized,Medium,980,    if entity_id:,"[220, 220, 220, 611, 9312, 62, 312, 25]"
‚úÖ Best Practice: Consider specifying the types of the parameters for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 31577, 262, 3858, 286, 262, 10007, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1006,best_practice,345,Consider specifying the types of the parameters for better readability and maintainability.,,988,        query = session.query(data_schema),"[220, 220, 220, 220, 220, 220, 220, 12405, 796, 6246, 13, 22766, 7, 7890, 62, 15952, 2611, 8]"
‚úÖ Best Practice: Explicitly checking for None is more readable and less error-prone than a falsy check.,"[26486, 227, 6705, 19939, 25, 11884, 306, 10627, 329, 6045, 318, 517, 31744, 290, 1342, 4049, 12, 46330, 621, 257, 27807, 88, 2198, 13]",0.5,1014,best_practice,347,Explicitly checking for None is more readable and less error-prone than a falsy check.,,1006,    if entity_id:,"[220, 220, 220, 611, 9312, 62, 312, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk if get_db_session is not properly handling credentials or connections.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 651, 62, 9945, 62, 29891, 318, 407, 6105, 9041, 18031, 393, 8787, 13]",0.5,1022,sast_risk,349,Potential risk if get_db_session is not properly handling credentials or connections.,Medium,1014,    if entity_ids:,"[220, 220, 220, 611, 9312, 62, 2340, 25]"
‚úÖ Best Practice: Checking if group_func is not None before using it.,"[26486, 227, 6705, 19939, 25, 39432, 611, 1448, 62, 20786, 318, 407, 6045, 878, 1262, 340, 13]",0.5,1028,best_practice,351,Checking if group_func is not None before using it.,,1022,    if code:,"[220, 220, 220, 611, 2438, 25]"
üß† ML Signal: Usage of SQLAlchemy query patterns can be used to train models on ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 12405, 7572, 460, 307, 973, 284, 4512, 4981, 319, 6375, 44, 8748, 13]",0.5,1034,ml_signal,353,Usage of SQLAlchemy query patterns can be used to train models on ORM usage.,,1028,    if codes:,"[220, 220, 220, 611, 12416, 25]"
üß† ML Signal: Usage of SQLAlchemy query patterns can be used to train models on ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 12405, 7572, 460, 307, 973, 284, 4512, 4981, 319, 6375, 44, 8748, 13]",0.5,1041,ml_signal,355,Usage of SQLAlchemy query patterns can be used to train models on ORM usage.,,1034,    if ids:,"[220, 220, 220, 611, 220, 2340, 25]"
‚ö†Ô∏è SAST Risk (Medium): Using pd.read_sql with untrusted input can lead to SQL injection if not properly handled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 279, 67, 13, 961, 62, 25410, 351, 1418, 81, 8459, 5128, 460, 1085, 284, 16363, 16954, 611, 407, 6105, 12118, 13]",0.5,1050,sast_risk,360,Using pd.read_sql with untrusted input can lead to SQL injection if not properly handled.,Medium,1041,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1059,best_practice,360,Use descriptive variable names for better readability,,1050,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1076,best_practice,362,Use descriptive variable names for better readability,,1059,            data_schema.level,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 15952, 2611, 13, 5715]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1096,best_practice,364,Use descriptive variable names for better readability,,1076,                level = level.value,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 796, 1241, 13, 8367]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1108,best_practice,366,Use descriptive variable names for better readability,,1096,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
"üß† ML Signal: Function returns a tuple, indicating a pattern of structured data output","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 46545, 11, 12739, 257, 3912, 286, 20793, 1366, 5072]",0.5,1120,ml_signal,366,"Function returns a tuple, indicating a pattern of structured data output",,1108,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,1132,best_practice,366,Include a docstring to describe the function's purpose and parameters,,1120,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Usage of tuple unpacking to extract specific values from a function return,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 46545, 8593, 5430, 284, 7925, 2176, 3815, 422, 257, 2163, 1441]",0.5,1149,ml_signal,372,Usage of tuple unpacking to extract specific values from a function return,,1132,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,1161,best_practice,374,Include a docstring to describe the function's purpose and parameters,,1149,"        filters=filters,","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11]"
üß† ML Signal: Pattern of unpacking values from a function return,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8593, 5430, 3815, 422, 257, 2163, 1441]",1.0,1161,ml_signal,380,Pattern of unpacking values from a function return,,1161,,[]
üß† ML Signal: Returning a specific part of a tuple or list,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 2176, 636, 286, 257, 46545, 393, 1351]",1.0,1187,ml_signal,382,Returning a specific part of a tuple or list,,1161,"        df = pd.read_sql(query.statement, query.session.bind)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 25410, 7, 22766, 13, 26090, 11, 12405, 13, 29891, 13, 21653, 8]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,1213,best_practice,382,Include a docstring to describe the function's purpose and parameters,,1187,"        df = pd.read_sql(query.statement, query.session.bind)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 25410, 7, 22766, 13, 26090, 11, 12405, 13, 29891, 13, 21653, 8]"
üß† ML Signal: Pattern of unpacking values from a function return,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8593, 5430, 3815, 422, 257, 2163, 1441]",1.0,1225,ml_signal,388,Pattern of unpacking values from a function return,,1213,        return query.all(),"[220, 220, 220, 220, 220, 220, 220, 1441, 12405, 13, 439, 3419]"
üß† ML Signal: Returning a specific part of a tuple from a function,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 2176, 636, 286, 257, 46545, 422, 257, 2163]",1.0,1237,ml_signal,389,Returning a specific part of a tuple from a function,,1225,"    elif return_type == ""dict"":","[220, 220, 220, 1288, 361, 1441, 62, 4906, 6624, 366, 11600, 1298]"
"‚ö†Ô∏è SAST Risk (Low): No input validation for 'df', 'data_schema', 'provider', which could lead to unexpected behavior or errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 5128, 21201, 329, 705, 7568, 3256, 705, 7890, 62, 15952, 2611, 3256, 705, 15234, 1304, 3256, 543, 714, 1085, 284, 10059, 4069, 393, 8563, 13]",0.5,1249,sast_risk,389,"No input validation for 'df', 'data_schema', 'provider', which could lead to unexpected behavior or errors.",Low,1237,"    elif return_type == ""dict"":","[220, 220, 220, 1288, 361, 1441, 62, 4906, 6624, 366, 11600, 1298]"
‚ö†Ô∏è SAST Risk (Low): No validation for 'df' being a valid DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 329, 705, 7568, 6, 852, 257, 4938, 6060, 19778, 13]",0.5,1249,sast_risk,411,No validation for 'df' being a valid DataFrame.,Low,1249,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for logging sensitive data with 'logger.warning'.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18931, 8564, 1366, 351, 705, 6404, 1362, 13, 43917, 4458]",0.5,1256,sast_risk,414,Potential for logging sensitive data with 'logger.warning'.,Low,1249,    :param session:,"[220, 220, 220, 1058, 17143, 6246, 25]"
‚ö†Ô∏è SAST Risk (Low): No validation for 'data_schema' being a valid schema.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 329, 705, 7890, 62, 15952, 2611, 6, 852, 257, 4938, 32815, 13]",0.5,1262,sast_risk,418,No validation for 'data_schema' being a valid schema.,Low,1256,    if filters:,"[220, 220, 220, 611, 16628, 25]"
‚úÖ Best Practice: Consider using a configuration file or environment variable for platform-specific settings.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 8398, 2393, 393, 2858, 7885, 329, 3859, 12, 11423, 6460, 13]",0.5,1289,best_practice,427,Consider using a configuration file or environment variable for platform-specific settings.,,1262,"def get_group(provider, data_schema, column, group_func=func.count, session=None):","[4299, 651, 62, 8094, 7, 15234, 1304, 11, 1366, 62, 15952, 2611, 11, 5721, 11, 1448, 62, 20786, 28, 20786, 13, 9127, 11, 6246, 28, 14202, 2599]"
‚ö†Ô∏è SAST Risk (Low): No validation for 'session' being a valid database session.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 329, 705, 29891, 6, 852, 257, 4938, 6831, 6246, 13]",0.5,1289,sast_risk,437,No validation for 'session' being a valid database session.,Low,1289,,[]
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection risk with string formatting in SQL queries.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 351, 4731, 33313, 287, 16363, 20743, 13]",0.5,1302,sast_risk,445,Potential SQL injection risk with string formatting in SQL queries.,Medium,1289,"    result = entity_id.split(""_"")","[220, 220, 220, 1255, 796, 9312, 62, 312, 13, 35312, 7203, 62, 4943]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection risk with string formatting in SQL queries.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 351, 4731, 33313, 287, 16363, 20743, 13]",0.5,1315,sast_risk,452,Potential SQL injection risk with string formatting in SQL queries.,Medium,1302,def get_entity_type(entity_id: str):,"[4299, 651, 62, 26858, 62, 4906, 7, 26858, 62, 312, 25, 965, 2599]"
‚ö†Ô∏è SAST Risk (Low): No validation for 'data_schema.__tablename__' being a valid table name.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 329, 705, 7890, 62, 15952, 2611, 13, 834, 8658, 11925, 480, 834, 6, 852, 257, 4938, 3084, 1438, 13]",0.5,1315,sast_risk,461,No validation for 'data_schema.__tablename__' being a valid table name.,Low,1315,,[]
‚úÖ Best Practice: Defaulting to a specific entity schema if not provided,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 257, 2176, 9312, 32815, 611, 407, 2810]",1.0,1321,best_practice,505,Defaulting to a specific entity schema if not provided,,1315,    :return:,"[220, 220, 220, 1058, 7783, 25]"
‚úÖ Best Practice: Defaulting to the first provider if not specified,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 262, 717, 10131, 611, 407, 7368]",1.0,1330,best_practice,508,Defaulting to the first provider if not specified,,1321,        return 0,"[220, 220, 220, 220, 220, 220, 220, 1441, 657]"
‚úÖ Best Practice: Defaulting to ascending order if not specified,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 41988, 1502, 611, 407, 7368]",1.0,1357,best_practice,511,Defaulting to ascending order if not specified,,1330,"        logger.warning(f""remove duplicated:{df[df.duplicated()]}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 28956, 14184, 3474, 29164, 7568, 58, 7568, 13, 646, 489, 3474, 3419, 48999, 4943]"
‚úÖ Best Practice: Handling filters for exchanges,"[26486, 227, 6705, 19939, 25, 49500, 16628, 329, 14525]",0.5,1357,best_practice,513,Handling filters for exchanges,,1357,,[]
üß† ML Signal: Usage pattern of get_data function with various parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 3912, 286, 651, 62, 7890, 2163, 351, 2972, 10007]",1.0,1357,ml_signal,516,Usage pattern of get_data function with various parameters,,1357,,[]
"üß† ML Signal: Function call with multiple parameters, useful for learning API usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 4465, 329, 4673, 7824, 8748, 7572]",1.0,1386,ml_signal,556,"Function call with multiple parameters, useful for learning API usage patterns",,1357,"                    data_schema=data_schema,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 15952, 2611, 28, 7890, 62, 15952, 2611, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if df is not properly validated before use,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 47764, 318, 407, 6105, 31031, 878, 779]",0.5,1405,sast_risk,566,Potential risk if df is not properly validated before use,Low,1386,            df_current.to_sql(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 14421, 13, 1462, 62, 25410, 7]"
"üß† ML Signal: Conversion of DataFrame column to list, common data manipulation pattern","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351, 11, 2219, 1366, 17512, 3912]",1.0,1417,ml_signal,568,"Conversion of DataFrame column to list, common data manipulation pattern",,1405,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of __name__ guard to allow or prevent parts of code from being run when the modules are imported,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 284, 1249, 393, 2948, 3354, 286, 2438, 422, 852, 1057, 618, 262, 13103, 389, 17392]",0.5,1422,best_practice,570,Use of __name__ guard to allow or prevent parts of code from being run when the modules are imported,,1417,    return saved,"[220, 220, 220, 1441, 7448]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if get_entities is not properly validated before use,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 651, 62, 298, 871, 318, 407, 6105, 31031, 878, 779]",0.5,1427,sast_risk,570,Potential risk if get_entities is not properly validated before use,Low,1422,    return saved,"[220, 220, 220, 1441, 7448]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,1432,best_practice,570,Use of __all__ to define public API of the module,,1427,    return saved,"[220, 220, 220, 1441, 7448]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Use of Enum for defining a set of named values,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 16215, 257, 900, 286, 3706, 3815]",0.5,2,best_practice,2,Use of Enum for defining a set of named values,,0,import logging,"[11748, 18931]"
✅ Best Practice: Use of typing for type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 19720, 329, 2099, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,8,best_practice,4,Use of typing for type hinting improves code readability and maintainability,,2,"from typing import List, Optional","[6738, 19720, 1330, 7343, 11, 32233]"
✅ Best Practice: Use of numpy for numerical operations is efficient and widely accepted,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 329, 29052, 4560, 318, 6942, 290, 6768, 6292]",0.5,13,best_practice,6,Use of numpy for numerical operations is efficient and widely accepted,,8,import numpy as np,"[11748, 299, 32152, 355, 45941]"
✅ Best Practice: Use of pandas for data manipulation is efficient and widely accepted,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 1366, 17512, 318, 6942, 290, 6768, 6292]",0.5,23,best_practice,8,Use of pandas for data manipulation is efficient and widely accepted,,13,import plotly.graph_objs as go,"[11748, 7110, 306, 13, 34960, 62, 672, 8457, 355, 467]"
✅ Best Practice: Use of plotly for interactive plots is a good choice for visualization,"[26486, 227, 6705, 19939, 25, 5765, 286, 7110, 306, 329, 14333, 21528, 318, 257, 922, 3572, 329, 32704]",0.5,23,best_practice,10,Use of plotly for interactive plots is a good choice for visualization,,23,,[]
✅ Best Practice: Use of make_subplots for creating complex plot layouts,"[26486, 227, 6705, 19939, 25, 5765, 286, 787, 62, 7266, 489, 1747, 329, 4441, 3716, 7110, 38489]",0.5,34,best_practice,12,Use of make_subplots for creating complex plot layouts,,23,from zvt.contract.data_type import Bean,"[6738, 1976, 36540, 13, 28484, 13, 7890, 62, 4906, 1330, 26510]"
⚠️ SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 13103, 460, 10400, 2324, 7476, 611, 407, 6105, 5257]",0.5,47,sast_risk,14,Importing from external modules can introduce security risks if not properly managed,Low,34,from zvt.utils.decorator import to_string,"[6738, 1976, 36540, 13, 26791, 13, 12501, 273, 1352, 1330, 284, 62, 8841]"
⚠️ SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 13103, 460, 10400, 2324, 7476, 611, 407, 6105, 5257]",0.5,65,sast_risk,15,Importing from external modules can introduce security risks if not properly managed,Low,47,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
⚠️ SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 13103, 460, 10400, 2324, 7476, 611, 407, 6105, 5257]",0.5,65,sast_risk,18,Importing from external modules can introduce security risks if not properly managed,Low,65,,[]
⚠️ SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 13103, 460, 10400, 2324, 7476, 611, 407, 6105, 5257]",0.5,72,sast_risk,20,Importing from external modules can introduce security risks if not properly managed,Low,65,class ChartType(Enum):,"[4871, 22086, 6030, 7, 4834, 388, 2599]"
⚠️ SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 13103, 460, 10400, 2324, 7476, 611, 407, 6105, 5257]",0.5,78,sast_risk,22,Importing from external modules can introduce security risks if not properly managed,Low,72,    Chart type enum,"[220, 220, 220, 22086, 2099, 33829]"
✅ Best Practice: Use of logging for tracking and debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 290, 28769]",0.5,78,best_practice,24,Use of logging for tracking and debugging,,78,,[]
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,78,best_practice,18,Enum members should be in uppercase to follow Python naming conventions.,,78,,[]
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,85,best_practice,20,Enum members should be in uppercase to follow Python naming conventions.,,78,class ChartType(Enum):,"[4871, 22086, 6030, 7, 4834, 388, 2599]"
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,91,best_practice,22,Enum members should be in uppercase to follow Python naming conventions.,,85,    Chart type enum,"[220, 220, 220, 22086, 2099, 33829]"
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,91,best_practice,24,Enum members should be in uppercase to follow Python naming conventions.,,91,,[]
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,100,best_practice,25,Enum members should be in uppercase to follow Python naming conventions.,,91,    #: candlestick chart,"[220, 220, 220, 1303, 25, 2658, 32712, 624, 8262]"
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,108,best_practice,28,Enum members should be in uppercase to follow Python naming conventions.,,100,"    line = ""line""","[220, 220, 220, 1627, 796, 366, 1370, 1]"
✅ Best Practice: Enum members should be in uppercase to follow Python naming conventions.,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 815, 307, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396, 13]",1.0,115,best_practice,31,Enum members should be in uppercase to follow Python naming conventions.,,108,    #: scatter chart,"[220, 220, 220, 1303, 25, 41058, 8262]"
✅ Best Practice: Leading underscore in variable name suggests it's intended for internal use.,"[26486, 227, 6705, 19939, 25, 43225, 44810, 287, 7885, 1438, 5644, 340, 338, 5292, 329, 5387, 779, 13]",0.5,123,best_practice,33,Leading underscore in variable name suggests it's intended for internal use.,,115,    #: histogram chart,"[220, 220, 220, 1303, 25, 1554, 21857, 8262]"
⚠️ SAST Risk (Low): Ensure the `to_string` decorator is safe and does not expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 4600, 1462, 62, 8841, 63, 11705, 1352, 318, 3338, 290, 857, 407, 15651, 8564, 1321, 13]",1.0,131,sast_risk,36,Ensure the `to_string` decorator is safe and does not expose sensitive information.,Low,123,"    pie = ""pie""","[220, 220, 220, 2508, 796, 366, 21749, 1]"
✅ Best Practice: Consider adding type hints for the class attributes for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1398, 12608, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,138,best_practice,31,Consider adding type hints for the class attributes for better readability and maintainability.,,131,    #: scatter chart,"[220, 220, 220, 1303, 25, 41058, 8262]"
✅ Best Practice: Use of default None values allows for optional parameters.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 6045, 3815, 3578, 329, 11902, 10007, 13]",0.5,145,best_practice,31,Use of default None values allows for optional parameters.,,138,    #: scatter chart,"[220, 220, 220, 1303, 25, 41058, 8262]"
✅ Best Practice: Initializing instance variables in the constructor.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 4554, 9633, 287, 262, 23772, 13]",1.0,153,best_practice,33,Initializing instance variables in the constructor.,,145,    #: histogram chart,"[220, 220, 220, 1303, 25, 1554, 21857, 8262]"
✅ Best Practice: Use of keyword arguments with default values improves function flexibility and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 21179, 7159, 351, 4277, 3815, 19575, 2163, 13688, 290, 1100, 1799]",0.5,153,best_practice,40,Use of keyword arguments with default values improves function flexibility and readability,,153,,[]
"🧠 ML Signal: Use of a method that wraps another method call, indicating a potential pattern for method delegation","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 326, 27521, 1194, 2446, 869, 11, 12739, 257, 2785, 3912, 329, 2446, 22635]",0.5,186,ml_signal,50,"Use of a method that wraps another method call, indicating a potential pattern for method delegation",,153,"    def __init__(self, x0=None, y0=None, x1=None, y1=None) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2124, 15, 28, 14202, 11, 331, 15, 28, 14202, 11, 2124, 16, 28, 14202, 11, 331, 16, 28, 14202, 8, 4613, 6045, 25]"
✅ Best Practice: Delegating functionality to another method promotes code reuse and separation of concerns,"[26486, 227, 6705, 19939, 25, 1024, 1455, 803, 11244, 284, 1194, 2446, 21068, 2438, 32349, 290, 14139, 286, 4786]",1.0,200,best_practice,53,Delegating functionality to another method promotes code reuse and separation of concerns,,186,        #: left-bottom y0,"[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1364, 12, 22487, 331, 15]"
✅ Best Practice: Use of default parameter values for flexibility and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 1100, 1799]",1.0,233,best_practice,50,Use of default parameter values for flexibility and readability,,200,"    def __init__(self, x0=None, y0=None, x1=None, y1=None) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2124, 15, 28, 14202, 11, 331, 15, 28, 14202, 11, 2124, 16, 28, 14202, 11, 331, 16, 28, 14202, 8, 4613, 6045, 25]"
✅ Best Practice: Use of None as default values to allow for optional parameters,"[26486, 227, 6705, 19939, 25, 5765, 286, 6045, 355, 4277, 3815, 284, 1249, 329, 11902, 10007]",1.0,247,best_practice,53,Use of None as default values to allow for optional parameters,,233,        #: left-bottom y0,"[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1364, 12, 22487, 331, 15]"
🧠 ML Signal: Method chaining pattern with self.draw,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 2116, 13, 19334]",0.5,261,ml_signal,53,Method chaining pattern with self.draw,,247,        #: left-bottom y0,"[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1364, 12, 22487, 331, 15]"
🧠 ML Signal: Use of enum or constant for chart type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 33829, 393, 6937, 329, 8262, 2099]",1.0,275,ml_signal,53,Use of enum or constant for chart type,,261,        #: left-bottom y0,"[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1364, 12, 22487, 331, 15]"
✅ Best Practice: Use of **kwargs for extensibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 12429, 46265, 22046, 329, 1070, 641, 2247]",0.5,296,best_practice,66,Use of **kwargs for extensibility,,275,"            main_chart=ChartType.kline,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 40926, 28, 45488, 6030, 13, 74, 1370, 11]"
✅ Best Practice: Using named parameters with default values improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 3706, 10007, 351, 4277, 3815, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,317,best_practice,66,Using named parameters with default values improves code readability and maintainability.,,296,"            main_chart=ChartType.kline,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 40926, 28, 45488, 6030, 13, 74, 1370, 11]"
🧠 ML Signal: The use of a method to draw an area chart indicates a pattern of data visualization.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 257, 2446, 284, 3197, 281, 1989, 8262, 9217, 257, 3912, 286, 1366, 32704, 13]",0.5,325,ml_signal,76,The use of a method to draw an area chart indicates a pattern of data visualization.,,317,    def draw_line(,"[220, 220, 220, 825, 3197, 62, 1370, 7]"
✅ Best Practice: Delegating functionality to another method (`self.draw`) promotes code reuse and separation of concerns.,"[26486, 227, 6705, 19939, 25, 1024, 1455, 803, 11244, 284, 1194, 2446, 357, 63, 944, 13, 19334, 63, 8, 21068, 2438, 32349, 290, 14139, 286, 4786, 13]",1.0,337,best_practice,79,Delegating functionality to another method (`self.draw`) promotes code reuse and separation of concerns.,,325,        return self.draw(,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 19334, 7]"
✅ Best Practice: Use of default parameter values for flexibility and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 1100, 1799]",1.0,345,best_practice,76,Use of default parameter values for flexibility and readability,,337,    def draw_line(,"[220, 220, 220, 825, 3197, 62, 1370, 7]"
🧠 ML Signal: Method chaining pattern with self.draw,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 2116, 13, 19334]",0.5,357,ml_signal,79,Method chaining pattern with self.draw,,345,        return self.draw(,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 19334, 7]"
✅ Best Practice: Use of named arguments for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 329, 16287]",0.5,369,best_practice,79,Use of named arguments for clarity,,357,        return self.draw(,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 19334, 7]"
🧠 ML Signal: Method signature with multiple optional parameters indicates flexibility in usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 3294, 11902, 10007, 9217, 13688, 287, 8748, 7572]",0.5,369,ml_signal,89,Method signature with multiple optional parameters indicates flexibility in usage patterns,,369,,[]
✅ Best Practice: Use of default parameter values for optional parameters improves function usability,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 11902, 10007, 19575, 2163, 42863]",0.5,369,best_practice,89,Use of default parameter values for optional parameters improves function usability,,369,,[]
🧠 ML Signal: Delegating functionality to another method (self.draw) shows a pattern of code reuse,"[8582, 100, 254, 10373, 26484, 25, 1024, 1455, 803, 11244, 284, 1194, 2446, 357, 944, 13, 19334, 8, 2523, 257, 3912, 286, 2438, 32349]",0.5,373,ml_signal,92,Delegating functionality to another method (self.draw) shows a pattern of code reuse,,369,    ):,"[220, 220, 220, 15179]"
✅ Best Practice: Use of named arguments improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,377,best_practice,92,Use of named arguments improves code readability and maintainability,,373,    ):,"[220, 220, 220, 15179]"
✅ Best Practice: Consider providing default values for parameters to improve function usability,"[26486, 227, 6705, 19939, 25, 12642, 4955, 4277, 3815, 329, 10007, 284, 2987, 2163, 42863]",0.5,385,best_practice,102,Consider providing default values for parameters to improve function usability,,377,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Method chaining pattern with self.draw can indicate a fluent interface design,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 2116, 13, 19334, 460, 7603, 257, 43472, 7071, 1486]",0.5,385,ml_signal,103,Method chaining pattern with self.draw can indicate a fluent interface design,,385,,[]
🧠 ML Signal: Use of enum-like pattern with ChartType.bar can indicate a fixed set of options,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 33829, 12, 2339, 3912, 351, 22086, 6030, 13, 5657, 460, 7603, 257, 5969, 900, 286, 3689]",0.5,385,ml_signal,103,Use of enum-like pattern with ChartType.bar can indicate a fixed set of options,,385,,[]
✅ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,400,best_practice,113,Consider adding type hints for function parameters and return type for better readability and maintainability.,,385,"            show=show,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 905, 28, 12860, 11]"
🧠 ML Signal: Method chaining pattern with self.draw can be used to identify similar method calls.,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 2116, 13, 19334, 460, 307, 973, 284, 5911, 2092, 2446, 3848, 13]",0.5,419,ml_signal,114,Method chaining pattern with self.draw can be used to identify similar method calls.,,400,"            scale_value=scale_value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5046, 62, 8367, 28, 9888, 62, 8367, 11]"
✅ Best Practice: Using named arguments improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 3706, 7159, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,438,best_practice,114,Using named arguments improves code readability and maintainability.,,419,"            scale_value=scale_value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5046, 62, 8367, 28, 9888, 62, 8367, 11]"
"🧠 ML Signal: Usage of ChartType.pie indicates a specific chart type being used, which can be a feature for ML models.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22086, 6030, 13, 21749, 9217, 257, 2176, 8262, 2099, 852, 973, 11, 543, 460, 307, 257, 3895, 329, 10373, 4981, 13]",0.5,457,ml_signal,114,"Usage of ChartType.pie indicates a specific chart type being used, which can be a feature for ML models.",,438,"            scale_value=scale_value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5046, 62, 8367, 28, 9888, 62, 8367, 11]"
✅ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",1.0,472,best_practice,124,Use of default parameter values for flexibility and ease of use,,457,"            height=height,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6001, 28, 17015, 11]"
"⚠️ SAST Risk (Low): Method is not implemented, which may lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 743, 1085, 284, 19124, 8563, 611, 1444]",1.0,487,sast_risk,137,"Method is not implemented, which may lead to runtime errors if called",Low,472,"            title=title,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3670, 28, 7839, 11]"
✅ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,510,best_practice,138,Use of default parameter values for flexibility and ease of use,,487,"            keep_ui_state=keep_ui_state,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1394, 62, 9019, 62, 5219, 28, 14894, 62, 9019, 62, 5219, 11]"
🧠 ML Signal: Method instantiation pattern with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 9113, 3920, 3912, 351, 3294, 10007]",0.5,558,ml_signal,193,Method instantiation pattern with multiple parameters,,510,"                            dict(count=3, label=""3m"", step=""month"", stepmode=""backward""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7, 9127, 28, 18, 11, 6167, 2625, 18, 76, 1600, 2239, 2625, 8424, 1600, 2239, 14171, 2625, 1891, 904, 12340]"
✅ Best Practice: Consider using keyword arguments for clarity,"[26486, 227, 6705, 19939, 25, 12642, 1262, 21179, 7159, 329, 16287]",0.5,606,best_practice,194,Consider using keyword arguments for clarity,,558,"                            dict(count=6, label=""6m"", step=""month"", stepmode=""backward""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7, 9127, 28, 21, 11, 6167, 2625, 21, 76, 1600, 2239, 2625, 8424, 1600, 2239, 14171, 2625, 1891, 904, 12340]"
🧠 ML Signal: Object creation with multiple data sources,"[8582, 100, 254, 10373, 26484, 25, 9515, 6282, 351, 3294, 1366, 4237]",0.5,654,ml_signal,194,Object creation with multiple data sources,,606,"                            dict(count=6, label=""6m"", step=""month"", stepmode=""backward""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7, 9127, 28, 21, 11, 6167, 2625, 21, 76, 1600, 2239, 2625, 8424, 1600, 2239, 14171, 2625, 1891, 904, 12340]"
✅ Best Practice: Use descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1100, 1799]",0.5,702,best_practice,194,Use descriptive variable names for readability,,654,"                            dict(count=6, label=""6m"", step=""month"", stepmode=""backward""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7, 9127, 28, 21, 11, 6167, 2625, 21, 76, 1600, 2239, 2625, 8424, 1600, 2239, 14171, 2625, 1891, 904, 12340]"
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,750,ml_signal,194,Method chaining pattern for data retrieval,,702,"                            dict(count=6, label=""6m"", step=""month"", stepmode=""backward""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7, 9127, 28, 21, 11, 6167, 2625, 21, 76, 1600, 2239, 2625, 8424, 1600, 2239, 14171, 2625, 1891, 904, 12340]"
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,762,ml_signal,205,Method chaining pattern for data retrieval,,750,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,774,ml_signal,205,Method chaining pattern for data retrieval,,762,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,786,ml_signal,205,Method chaining pattern for data retrieval,,774,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,786,ml_signal,206,Method chaining pattern for data retrieval,,786,,[]
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,786,ml_signal,206,Method chaining pattern for data retrieval,,786,,[]
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,786,ml_signal,206,Method chaining pattern for data retrieval,,786,,[]
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,805,ml_signal,213,Method chaining pattern for data retrieval,,786,"            uirevision=uirevision,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 334, 557, 10178, 28, 84, 557, 10178, 11]"
🧠 ML Signal: Method chaining pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 329, 1366, 45069]",0.5,820,ml_signal,215,Method chaining pattern for data retrieval,,805,"            width=width,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9647, 28, 10394, 11]"
✅ Best Practice: Explicit return of the created object,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 2727, 2134]",0.5,836,best_practice,217,Explicit return of the created object,,820,            yaxis=dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 11600, 7]"
✅ Best Practice: Using a method to encapsulate drawing logic improves code organization and reusability.,"[26486, 227, 6705, 19939, 25, 8554, 257, 2446, 284, 32652, 5039, 8263, 9156, 19575, 2438, 4009, 290, 302, 385, 1799, 13]",1.0,852,best_practice,217,Using a method to encapsulate drawing logic improves code organization and reusability.,,836,            yaxis=dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 11600, 7]"
🧠 ML Signal: The use of default parameters can indicate common usage patterns and preferences.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 4277, 10007, 460, 7603, 2219, 8748, 7572, 290, 15387, 13]",1.0,868,ml_signal,217,The use of default parameters can indicate common usage patterns and preferences.,,852,            yaxis=dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 11600, 7]"
🧠 ML Signal: The use of a method chain suggests a fluent interface pattern.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 257, 2446, 6333, 5644, 257, 43472, 7071, 3912, 13]",0.5,884,ml_signal,217,The use of a method chain suggests a fluent interface pattern.,,868,            yaxis=dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 11600, 7]"
✅ Best Practice: Include type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",1.0,900,best_practice,227,Include type hints for better code readability and maintainability,,884,"            **layout_params,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12429, 39786, 62, 37266, 11]"
✅ Best Practice: Explicitly returning None improves code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 19575, 2438, 16287]",1.0,900,best_practice,229,Explicitly returning None improves code clarity,,900,,[]
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,900,best_practice,229,Type hinting improves code readability and maintainability,,900,,[]
✅ Best Practice: Explicitly returning None can improve code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 460, 2987, 2438, 16287]",1.0,906,best_practice,231,Explicitly returning None can improve code clarity,,900,class Drawable(object):,"[4871, 15315, 540, 7, 15252, 2599]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,912,best_practice,231,Type hinting improves code readability and maintainability,,906,class Drawable(object):,"[4871, 15315, 540, 7, 15252, 2599]"
✅ Best Practice: Explicitly returning None can improve code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 460, 2987, 2438, 16287]",1.0,924,best_practice,233,Explicitly returning None can improve code clarity,,912,        drawer = Drawer(,"[220, 220, 220, 220, 220, 220, 220, 33451, 796, 15315, 263, 7]"
✅ Best Practice: Use of type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,936,best_practice,233,Use of type hinting improves code readability and maintainability,,924,        drawer = Drawer(,"[220, 220, 220, 220, 220, 220, 220, 33451, 796, 15315, 263, 7]"
✅ Best Practice: Explicitly returning None clarifies the function's behavior,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 10212, 6945, 262, 2163, 338, 4069]",0.5,960,best_practice,235,Explicitly returning None clarifies the function's behavior,,936,"            main_data=self.drawer_main_data(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 7890, 28, 944, 13, 19334, 263, 62, 12417, 62, 7890, 22784]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,984,best_practice,235,Type hinting improves code readability and maintainability,,960,"            main_data=self.drawer_main_data(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 7890, 28, 944, 13, 19334, 263, 62, 12417, 62, 7890, 22784]"
✅ Best Practice: Explicitly returning None can improve code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 460, 2987, 2438, 16287]",1.0,1012,best_practice,237,Explicitly returning None can improve code clarity,,984,"            factor_data_list=self.drawer_factor_data_list(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5766, 62, 7890, 62, 4868, 28, 944, 13, 19334, 263, 62, 31412, 62, 7890, 62, 4868, 22784]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1040,best_practice,237,Type hinting improves code readability and maintainability,,1012,"            factor_data_list=self.drawer_factor_data_list(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5766, 62, 7890, 62, 4868, 28, 944, 13, 19334, 263, 62, 31412, 62, 7890, 62, 4868, 22784]"
✅ Best Practice: Explicitly returning None can improve code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 460, 2987, 2438, 16287]",1.0,1068,best_practice,239,Explicitly returning None can improve code clarity,,1040,"            sub_data_list=self.drawer_sub_data_list(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 7890, 62, 4868, 28, 944, 13, 19334, 263, 62, 7266, 62, 7890, 62, 4868, 22784]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1096,best_practice,239,Type hinting improves code readability and maintainability,,1068,"            sub_data_list=self.drawer_sub_data_list(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 7890, 62, 4868, 28, 944, 13, 19334, 263, 62, 7266, 62, 7890, 62, 4868, 22784]"
✅ Best Practice: Explicitly returning None clarifies the function's behavior,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 10212, 6945, 262, 2163, 338, 4069]",0.5,1121,best_practice,241,Explicitly returning None clarifies the function's behavior,,1096,"            annotation_df=self.drawer_annotation_df(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 23025, 62, 7568, 28, 944, 13, 19334, 263, 62, 1236, 14221, 62, 7568, 22784]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1146,best_practice,241,Type hinting improves code readability and maintainability,,1121,"            annotation_df=self.drawer_annotation_df(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 23025, 62, 7568, 28, 944, 13, 19334, 263, 62, 1236, 14221, 62, 7568, 22784]"
✅ Best Practice: Explicitly returning None can improve code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 460, 2987, 2438, 16287]",1.0,1154,best_practice,243,Explicitly returning None can improve code clarity,,1146,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1162,best_practice,243,Use of type hinting for return type improves code readability and maintainability,,1154,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Explicitly returning None can improve code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 460, 2987, 2438, 16287]",1.0,1162,best_practice,245,Explicitly returning None can improve code clarity,,1162,,[]
✅ Best Practice: Class should inherit from object for compatibility with Python 2 and 3,"[26486, 227, 6705, 19939, 25, 5016, 815, 16955, 422, 2134, 329, 17764, 351, 11361, 362, 290, 513]",0.5,1162,best_practice,245,Class should inherit from object for compatibility with Python 2 and 3,,1162,,[]
⚠️ SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701]",0.5,1179,sast_risk,248,Use of assert for runtime checks can be disabled with optimization flags,Low,1162,"        main_chart=ChartType.kline,","[220, 220, 220, 220, 220, 220, 220, 1388, 62, 40926, 28, 45488, 6030, 13, 74, 1370, 11]"
🧠 ML Signal: Type hinting usage indicates a pattern for static type checking,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 8748, 9217, 257, 3912, 329, 9037, 2099, 10627]",1.0,1190,ml_signal,250,Type hinting usage indicates a pattern for static type checking,,1179,"        height=None,","[220, 220, 220, 220, 220, 220, 220, 6001, 28, 14202, 11]"
✅ Best Practice: Calculate 'part' once to avoid repeated computation.,"[26486, 227, 6705, 19939, 25, 27131, 378, 705, 3911, 6, 1752, 284, 3368, 5100, 29964, 13]",1.0,1201,best_practice,251,Calculate 'part' once to avoid repeated computation.,,1190,"        title=None,","[220, 220, 220, 220, 220, 220, 220, 3670, 28, 14202, 11]"
🧠 ML Signal: Use of f-strings for dynamic variable naming.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 37336, 329, 8925, 7885, 19264, 13]",1.0,1216,ml_signal,257,Use of f-strings for dynamic variable naming.,,1201,        return self.drawer().draw(,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 19334, 263, 22446, 19334, 7]"
🧠 ML Signal: Use of list comprehension for domain calculation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 329, 7386, 17952, 13]",1.0,1216,ml_signal,270,Use of list comprehension for domain calculation.,,1216,,[]
✅ Best Practice: Ensure the base class 'Draw' is defined or imported before use,"[26486, 227, 6705, 19939, 25, 48987, 262, 2779, 1398, 705, 25302, 6, 318, 5447, 393, 17392, 878, 779]",0.5,1227,best_practice,334,Ensure the base class 'Draw' is defined or imported before use,,1216,"        height=None,","[220, 220, 220, 220, 220, 220, 220, 6001, 28, 14202, 11]"
✅ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",0.5,1253,best_practice,348,Use of type hints for function parameters and return type,,1227,"                domain_range = (0.2, 1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7386, 62, 9521, 796, 357, 15, 13, 17, 11, 352, 8]"
✅ Best Practice: Lazy initialization of main_data if not provided,"[26486, 227, 6705, 19939, 25, 406, 12582, 37588, 286, 1388, 62, 7890, 611, 407, 2810]",0.5,1277,best_practice,359,Lazy initialization of main_data if not provided,,1253,                # update sub_traces with yaxis,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4296, 850, 62, 2213, 2114, 351, 331, 22704]"
✅ Best Practice: Lazy initialization of factor_data_list if not provided,"[26486, 227, 6705, 19939, 25, 406, 12582, 37588, 286, 5766, 62, 7890, 62, 4868, 611, 407, 2810]",0.5,1303,best_practice,363,Lazy initialization of factor_data_list if not provided,,1277,                stacked_fig.layout[yaxis] = layout,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24167, 62, 5647, 13, 39786, 58, 88, 22704, 60, 796, 12461]"
🧠 ML Signal: Iterating over a list to transform data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 6121, 1366]",0.5,1329,ml_signal,366,Iterating over a list to transform data,,1303,"            yaxis, y, layout = self.make_y_layout(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 11, 331, 11, 12461, 796, 2116, 13, 15883, 62, 88, 62, 39786, 7]"
✅ Best Practice: Lazy initialization of sub_data_list if not provided,"[26486, 227, 6705, 19939, 25, 406, 12582, 37588, 286, 850, 62, 7890, 62, 4868, 611, 407, 2810]",0.5,1351,best_practice,370,Lazy initialization of sub_data_list if not provided,,1329,            stacked_fig.layout[yaxis] = layout,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24167, 62, 5647, 13, 39786, 58, 88, 22704, 60, 796, 12461]"
🧠 ML Signal: Iterating over a list to transform data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 6121, 1366]",0.5,1367,ml_signal,373,Iterating over a list to transform data,,1351,            for trace in traces:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 12854, 287, 20675, 25]"
🧠 ML Signal: Method usage pattern for adding factor data to an object,"[8582, 100, 254, 10373, 26484, 25, 11789, 8748, 3912, 329, 4375, 5766, 1366, 284, 281, 2134]",0.5,1388,ml_signal,374,Method usage pattern for adding factor data to an object,,1367,                trace.yaxis = y,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12854, 13, 88, 22704, 796, 331]"
✅ Best Practice: Explicitly specifying the type of 'df' improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 11884, 306, 31577, 262, 2099, 286, 705, 7568, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1388,best_practice,376,Explicitly specifying the type of 'df' improves code readability and maintainability,,1388,,[]
🧠 ML Signal: Conversion of DataFrame to NormalData object,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 284, 14435, 6601, 2134]",0.5,1405,ml_signal,377,Conversion of DataFrame to NormalData object,,1388,            # update shapes with yaxis,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4296, 15268, 351, 331, 22704]"
✅ Best Practice: Check if the list is initialized before appending to it,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 1351, 318, 23224, 878, 598, 1571, 284, 340]",0.5,1422,best_practice,377,Check if the list is initialized before appending to it,,1405,            # update shapes with yaxis,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4296, 15268, 351, 331, 22704]"
✅ Best Practice: Initialize the list if it is not already initialized,"[26486, 227, 6705, 19939, 25, 20768, 1096, 262, 1351, 611, 340, 318, 407, 1541, 23224]",0.5,1445,best_practice,379,Initialize the list if it is not already initialized,,1422,                for rect in drawer.rects:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 13621, 287, 33451, 13, 2554, 82, 25]"
"🧠 ML Signal: Appending data to a list, common pattern for data collection","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351, 11, 2219, 3912, 329, 1366, 4947]",1.0,1472,ml_signal,381,"Appending data to a list, common pattern for data collection",,1445,"                        type=""rect"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 2625, 2554, 1600]"
"🧠 ML Signal: Method that takes a DataFrame as input, indicating data processing or transformation","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 2753, 257, 6060, 19778, 355, 5128, 11, 12739, 1366, 7587, 393, 13389]",0.5,1499,ml_signal,380,"Method that takes a DataFrame as input, indicating data processing or transformation",,1472,                    stacked_fig.add_shape(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24167, 62, 5647, 13, 2860, 62, 43358, 7]"
🧠 ML Signal: Usage of a method that wraps a DataFrame in a custom class,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 326, 27521, 257, 6060, 19778, 287, 257, 2183, 1398]",0.5,1530,ml_signal,382,Usage of a method that wraps a DataFrame in a custom class,,1499,"                        x0=rect.x0,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2124, 15, 28, 2554, 13, 87, 15, 11]"
✅ Best Practice: Check if sub_data_list is initialized before appending,"[26486, 227, 6705, 19939, 25, 6822, 611, 850, 62, 7890, 62, 4868, 318, 23224, 878, 598, 1571]",0.5,1561,best_practice,383,Check if sub_data_list is initialized before appending,,1530,"                        y0=rect.y0,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 15, 28, 2554, 13, 88, 15, 11]"
✅ Best Practice: Initialize sub_data_list as an empty list if not already initialized,"[26486, 227, 6705, 19939, 25, 20768, 1096, 850, 62, 7890, 62, 4868, 355, 281, 6565, 1351, 611, 407, 1541, 23224]",0.5,1592,best_practice,385,Initialize sub_data_list as an empty list if not already initialized,,1561,"                        y1=rect.y1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 16, 28, 2554, 13, 88, 16, 11]"
"🧠 ML Signal: Appending data to a list, common pattern in data handling","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351, 11, 2219, 3912, 287, 1366, 9041]",0.5,1623,ml_signal,387,"Appending data to a list, common pattern in data handling",,1592,"                        # fillcolor=""LightSkyBlue"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 6070, 8043, 2625, 15047, 22308, 14573, 1600]"
✅ Best Practice: Method name should be descriptive and follow naming conventions,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 290, 1061, 19264, 21396]",1.0,1659,best_practice,386,Method name should be descriptive and follow naming conventions,,1623,"                        line=dict(color=""RoyalBlue"", width=1),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1627, 28, 11600, 7, 8043, 2625, 41861, 14573, 1600, 9647, 28, 16, 828]"
"🧠 ML Signal: Checks for non-empty sub_data_list, indicating data validation logic","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 1729, 12, 28920, 850, 62, 7890, 62, 4868, 11, 12739, 1366, 21201, 9156]",0.5,1687,ml_signal,388,"Checks for non-empty sub_data_list, indicating data validation logic",,1659,"                        yref=y,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 5420, 28, 88, 11]"
⚠️ SAST Risk (Low): Potential AttributeError if sub_data_list is not a list or does not have an empty method,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 850, 62, 7890, 62, 4868, 318, 407, 257, 1351, 393, 857, 407, 423, 281, 6565, 2446]",0.5,1707,sast_risk,389,Potential AttributeError if sub_data_list is not a list or does not have an empty method,Low,1687,                    ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Use copy to avoid modifying the original dataframe,"[26486, 227, 6705, 19939, 25, 5765, 4866, 284, 3368, 30620, 262, 2656, 1366, 14535]",0.5,1747,best_practice,393,Use copy to avoid modifying the original dataframe,,1707,"                stacked_fig.layout[""annotations""] = annotations(drawer.annotation_df, yref=y)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24167, 62, 5647, 13, 39786, 14692, 34574, 602, 8973, 796, 37647, 7, 19334, 263, 13, 1236, 14221, 62, 7568, 11, 331, 5420, 28, 88, 8]"
⚠️ SAST Risk (Low): Catching broad exceptions can hide unexpected errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 10059, 8563]",0.5,1766,sast_risk,410,Catching broad exceptions can hide unexpected errors,Low,1747,"        main_df: pd.DataFrame = None,","[220, 220, 220, 220, 220, 220, 220, 1388, 62, 7568, 25, 279, 67, 13, 6601, 19778, 796, 6045, 11]"
🧠 ML Signal: Pattern of converting data to list for plotting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 1366, 284, 1351, 329, 29353]",0.5,1784,ml_signal,415,Pattern of converting data to list for plotting,,1766,"        sub_data_list: NormalData = None,","[220, 220, 220, 220, 220, 220, 220, 850, 62, 7890, 62, 4868, 25, 14435, 6601, 796, 6045, 11]"
🧠 ML Signal: Pattern of converting data to list for plotting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 1366, 284, 1351, 329, 29353]",0.5,1803,ml_signal,435,Pattern of converting data to list for plotting,,1784,        self.main_data: NormalData = main_data,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 12417, 62, 7890, 25, 14435, 6601, 796, 1388, 62, 7890]"
🧠 ML Signal: Pattern of converting data to list for plotting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 1366, 284, 1351, 329, 29353]",0.5,1823,ml_signal,440,Pattern of converting data to list for plotting,,1803,            for df in factor_df_list:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 47764, 287, 5766, 62, 7568, 62, 4868, 25]"
⚠️ SAST Risk (Low): Using assert for control flow can be disabled in optimized mode,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 23392, 4235]",0.5,1837,sast_risk,462,Using assert for control flow can be disabled in optimized mode,Low,1823,        self.rects = rects,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2554, 82, 796, 13621, 82]"
🧠 ML Signal: Pattern of converting data to list for plotting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 1366, 284, 1351, 329, 29353]",0.5,1856,ml_signal,472,Pattern of converting data to list for plotting,,1837,        self.factor_data_list.append(data),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 31412, 62, 7890, 62, 4868, 13, 33295, 7, 7890, 8]"
🧠 ML Signal: Pattern of converting data to list for plotting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 1366, 284, 1351, 329, 29353]",0.5,1898,ml_signal,485,Pattern of converting data to list for plotting,,1856,"    def make_traces(self, main_chart=ChartType.kline, sub_chart=""bar"", yaxis=""y"", scale_value=None, **kwargs):","[220, 220, 220, 825, 787, 62, 2213, 2114, 7, 944, 11, 1388, 62, 40926, 28, 45488, 6030, 13, 74, 1370, 11, 850, 62, 40926, 2625, 5657, 1600, 331, 22704, 2625, 88, 1600, 5046, 62, 8367, 28, 14202, 11, 12429, 46265, 22046, 2599]"
🧠 ML Signal: Function that maps input to categorical output,"[8582, 100, 254, 10373, 26484, 25, 15553, 326, 8739, 5128, 284, 4253, 12409, 5072]",0.5,1917,ml_signal,480,Function that maps input to categorical output,,1898,        self.sub_data_list.append(data),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7266, 62, 7890, 62, 4868, 13, 33295, 7, 7890, 8]"
🧠 ML Signal: List comprehension used for data transformation,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 1366, 13389]",0.5,1959,ml_signal,485,List comprehension used for data transformation,,1917,"    def make_traces(self, main_chart=ChartType.kline, sub_chart=""bar"", yaxis=""y"", scale_value=None, **kwargs):","[220, 220, 220, 825, 787, 62, 2213, 2114, 7, 944, 11, 1388, 62, 40926, 28, 45488, 6030, 13, 74, 1370, 11, 850, 62, 40926, 2625, 5657, 1600, 331, 22704, 2625, 88, 1600, 5046, 62, 8367, 28, 14202, 11, 12429, 46265, 22046, 2599]"
🧠 ML Signal: Conditional logic based on object attribute,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 11688]",0.5,1987,ml_signal,489,Conditional logic based on object attribute,,1959,"        for entity_id, df in self.main_data.entity_map_df.items():","[220, 220, 220, 220, 220, 220, 220, 329, 9312, 62, 312, 11, 47764, 287, 2116, 13, 12417, 62, 7890, 13, 26858, 62, 8899, 62, 7568, 13, 23814, 33529]"
🧠 ML Signal: Conditional logic to determine chart type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5004, 8262, 2099]",1.0,2018,ml_signal,495,Conditional logic to determine chart type,,1987,"                    for i in range(0, len(df)):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 15, 11, 18896, 7, 7568, 8, 2599]"
⚠️ SAST Risk (Low): Potential risk if sub_traces is not initialized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 850, 62, 2213, 2114, 318, 407, 23224]",0.5,2048,sast_risk,502,Potential risk if sub_traces is not initialized,Low,2018,                    df[col] = df[col] * scale,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 47764, 58, 4033, 60, 1635, 5046]"
⚠️ SAST Risk (Low): Potential risk if traces or sub_traces are not initialized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 20675, 393, 850, 62, 2213, 2114, 389, 407, 23224]",0.5,2064,sast_risk,503,Potential risk if traces or sub_traces are not initialized,Low,2048,            code = entity_id,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 796, 9312, 62, 312]"
🧠 ML Signal: Method uses a default parameter value,"[8582, 100, 254, 10373, 26484, 25, 11789, 3544, 257, 4277, 11507, 1988]",0.5,2090,ml_signal,501,Method uses a default parameter value,,2064,                    scale = scale_value / first,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5046, 796, 5046, 62, 8367, 1220, 717]"
🧠 ML Signal: Iterating over a list of objects,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 5563]",0.5,2106,ml_signal,503,Iterating over a list of objects,,2090,            code = entity_id,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 796, 9312, 62, 312]"
✅ Best Practice: Use of update_shapes to apply consistent properties to all shapes,"[26486, 227, 6705, 19939, 25, 5765, 286, 4296, 62, 1477, 7916, 284, 4174, 6414, 6608, 284, 477, 15268]",1.0,2140,best_practice,512,Use of update_shapes to apply consistent properties to all shapes,,2106,"                    trace_name = ""{}_{}"".format(code, col)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12854, 62, 3672, 796, 45144, 92, 23330, 92, 1911, 18982, 7, 8189, 11, 951, 8]"
✅ Best Practice: Consider adding type hints for function parameters for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,2165,best_practice,524,Consider adding type hints for function parameters for better readability and maintainability.,,2140,"                    yaxis=yaxis,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 88, 22704, 11]"
✅ Best Practice: Use descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",0.5,2188,best_practice,530,Use descriptive variable names for better readability.,,2165,                for col in df.columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 951, 287, 47764, 13, 28665, 82, 25]"
⚠️ SAST Risk (Low): Using fig.show() can lead to potential security risks if the figure contains sensitive data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2336, 13, 12860, 3419, 460, 1085, 284, 2785, 2324, 7476, 611, 262, 3785, 4909, 8564, 1366, 13]",0.5,2224,sast_risk,549,Using fig.show() can lead to potential security risks if the figure contains sensitive data.,Low,2188,                    if pd_is_not_null(self.annotation_df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 1236, 14221, 62, 7568, 2599]"
🧠 ML Signal: Usage of DataFrame index and columns to generate table headers,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 6376, 290, 15180, 284, 7716, 3084, 24697]",1.0,2245,ml_signal,551,Usage of DataFrame index and columns to generate table headers,,2224,                    else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Accessing DataFrame index level values,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 6376, 1241, 3815]",1.0,2267,ml_signal,553,Accessing DataFrame index level values,,2245,            elif main_chart == ChartType.pie:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 1388, 62, 40926, 6624, 22086, 6030, 13, 21749, 25]"
🧠 ML Signal: Accessing DataFrame index level values,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 6376, 1241, 3815]",1.0,2323,ml_signal,555,Accessing DataFrame index level values,,2267,"                    traces.append(go.Pie(name=entity_id, labels=df.columns.tolist(), values=row.tolist(), **kwargs))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20675, 13, 33295, 7, 2188, 13, 48223, 7, 3672, 28, 26858, 62, 312, 11, 14722, 28, 7568, 13, 28665, 82, 13, 83, 349, 396, 22784, 3815, 28, 808, 13, 83, 349, 396, 22784, 12429, 46265, 22046, 4008]"
🧠 ML Signal: Iterating over DataFrame columns to extract values,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15180, 284, 7925, 3815]",1.0,2379,ml_signal,555,Iterating over DataFrame columns to extract values,,2323,"                    traces.append(go.Pie(name=entity_id, labels=df.columns.tolist(), values=row.tolist(), **kwargs))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20675, 13, 33295, 7, 2188, 13, 48223, 7, 3672, 28, 26858, 62, 312, 11, 14722, 28, 7568, 13, 28665, 82, 13, 83, 349, 396, 22784, 3815, 28, 808, 13, 83, 349, 396, 22784, 12429, 46265, 22046, 4008]"
✅ Best Practice: Use of Plotly's go.Table for structured data visualization,"[26486, 227, 6705, 19939, 25, 5765, 286, 28114, 306, 338, 467, 13, 10962, 329, 20793, 1366, 32704]",1.0,2435,best_practice,555,Use of Plotly's go.Table for structured data visualization,,2379,"                    traces.append(go.Pie(name=entity_id, labels=df.columns.tolist(), values=row.tolist(), **kwargs))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20675, 13, 33295, 7, 2188, 13, 48223, 7, 3672, 28, 26858, 62, 312, 11, 14722, 28, 7568, 13, 28665, 82, 13, 83, 349, 396, 22784, 3815, 28, 808, 13, 83, 349, 396, 22784, 12429, 46265, 22046, 4008]"
✅ Best Practice: Creating a new Plotly Figure object,"[26486, 227, 6705, 19939, 25, 30481, 257, 649, 28114, 306, 11291, 2134]",1.0,2473,best_practice,570,Creating a new Plotly Figure object,,2435,                                line = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1627, 796, 467, 13, 3351, 1436, 7]"
✅ Best Practice: Adding traces to the Plotly figure,"[26486, 227, 6705, 19939, 25, 18247, 20675, 284, 262, 28114, 306, 3785]",1.0,2511,best_practice,570,Adding traces to the Plotly figure,,2473,                                line = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1627, 796, 467, 13, 3351, 1436, 7]"
✅ Best Practice: Updating layout with dynamic parameters,"[26486, 227, 6705, 19939, 25, 3205, 38734, 12461, 351, 8925, 10007]",1.0,2549,best_practice,570,Updating layout with dynamic parameters,,2511,                                line = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1627, 796, 467, 13, 3351, 1436, 7]"
✅ Best Practice: Displaying the figure using Plotly's show method,"[26486, 227, 6705, 19939, 25, 16531, 278, 262, 3785, 1262, 28114, 306, 338, 905, 2446]",1.0,2588,best_practice,578,Displaying the figure using Plotly's show method,,2549,                    sub_df = sub_data.entity_map_df.get(entity_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 7568, 796, 850, 62, 7890, 13, 26858, 62, 8899, 62, 7568, 13, 1136, 7, 26858, 62, 312, 8]"
✅ Best Practice: Check if the DataFrame is not null before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 6060, 19778, 318, 407, 9242, 878, 18788]",0.5,2627,best_practice,578,Check if the DataFrame is not null before proceeding,,2588,                    sub_df = sub_data.entity_map_df.get(entity_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 7568, 796, 850, 62, 7890, 13, 26858, 62, 8899, 62, 7568, 13, 1136, 7, 26858, 62, 312, 8]"
🧠 ML Signal: Iterating over grouped DataFrame by level 0 (entity_id),"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 32824, 6060, 19778, 416, 1241, 657, 357, 26858, 62, 312, 8]",0.5,2660,ml_signal,581,Iterating over grouped DataFrame by level 0 (entity_id),,2627,                        for col in sub_df.columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 951, 287, 850, 62, 7568, 13, 28665, 82, 25]"
✅ Best Practice: Check if the DataFrame is not null before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 6060, 19778, 318, 407, 9242, 878, 18788]",0.5,2702,best_practice,583,Check if the DataFrame is not null before proceeding,,2660,                            ydata = sub_df[col].values.tolist(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 7890, 796, 850, 62, 7568, 58, 4033, 4083, 27160, 13, 83, 349, 396, 3419]"
🧠 ML Signal: Iterating over DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15274]",0.5,2702,ml_signal,584,Iterating over DataFrame rows,,2702,,[]
✅ Best Practice: Use of 'in' to check for key existence in dictionary,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 259, 6, 284, 2198, 329, 1994, 6224, 287, 22155]",0.5,2741,best_practice,587,Use of 'in' to check for key existence in dictionary,,2702,"                                    return ""red""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 445, 1]"
✅ Best Practice: Rounding value for consistency,"[26486, 227, 6705, 19939, 25, 371, 9969, 1988, 329, 15794]",1.0,2774,best_practice,588,Rounding value for consistency,,2741,                                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Appending dictionary to list for annotations,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 22155, 284, 1351, 329, 37647]",0.5,2807,ml_signal,588,Appending dictionary to list for annotations,,2774,                                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,2807,best_practice,610,Use of __all__ to define public API of the module,,2807,,[]

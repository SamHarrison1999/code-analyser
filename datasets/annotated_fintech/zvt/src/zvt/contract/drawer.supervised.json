[
  {
    "line": 2,
    "text": "import logging",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of named values",
    "confidence": 0.5,
    "tokens": [
      11748,
      18931
    ],
    "start_token": 0,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3706,
      3815
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of named values"
  },
  {
    "line": 4,
    "text": "from typing import List, Optional",
    "annotation": "\u2705 Best Practice: Use of typing for type hinting improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      7343,
      11,
      32233
    ],
    "start_token": 2,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19720,
      329,
      2099,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of typing for type hinting improves code readability and maintainability"
  },
  {
    "line": 6,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Use of numpy for numerical operations is efficient and widely accepted",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 8,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      329,
      29052,
      4560,
      318,
      6942,
      290,
      6768,
      6292
    ],
    "label": "best_practice",
    "reason": "Use of numpy for numerical operations is efficient and widely accepted"
  },
  {
    "line": 8,
    "text": "import plotly.graph_objs as go",
    "annotation": "\u2705 Best Practice: Use of pandas for data manipulation is efficient and widely accepted",
    "confidence": 0.5,
    "tokens": [
      11748,
      7110,
      306,
      13,
      34960,
      62,
      672,
      8457,
      355,
      467
    ],
    "start_token": 13,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      329,
      1366,
      17512,
      318,
      6942,
      290,
      6768,
      6292
    ],
    "label": "best_practice",
    "reason": "Use of pandas for data manipulation is efficient and widely accepted"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of plotly for interactive plots is a good choice for visualization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 23,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      7110,
      306,
      329,
      14333,
      21528,
      318,
      257,
      922,
      3572,
      329,
      32704
    ],
    "label": "best_practice",
    "reason": "Use of plotly for interactive plots is a good choice for visualization"
  },
  {
    "line": 12,
    "text": "from zvt.contract.data_type import Bean",
    "annotation": "\u2705 Best Practice: Use of make_subplots for creating complex plot layouts",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      7890,
      62,
      4906,
      1330,
      26510
    ],
    "start_token": 23,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      787,
      62,
      7266,
      489,
      1747,
      329,
      4441,
      3716,
      7110,
      38489
    ],
    "label": "best_practice",
    "reason": "Use of make_subplots for creating complex plot layouts"
  },
  {
    "line": 14,
    "text": "from zvt.utils.decorator import to_string",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      12501,
      273,
      1352,
      1330,
      284,
      62,
      8841
    ],
    "start_token": 34,
    "end_token": 47,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules can introduce security risks if not properly managed"
  },
  {
    "line": 15,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 47,
    "end_token": 65,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules can introduce security risks if not properly managed"
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 65,
    "end_token": 65,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules can introduce security risks if not properly managed"
  },
  {
    "line": 20,
    "text": "class ChartType(Enum):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed",
    "confidence": 0.5,
    "tokens": [
      4871,
      22086,
      6030,
      7,
      4834,
      388,
      2599
    ],
    "start_token": 65,
    "end_token": 72,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules can introduce security risks if not properly managed"
  },
  {
    "line": 22,
    "text": "    Chart type enum",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules can introduce security risks if not properly managed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      22086,
      2099,
      33829
    ],
    "start_token": 72,
    "end_token": 78,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules can introduce security risks if not properly managed"
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of logging for tracking and debugging",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 78,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      290,
      28769
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking and debugging"
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 78,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 20,
    "text": "class ChartType(Enum):",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [
      4871,
      22086,
      6030,
      7,
      4834,
      388,
      2599
    ],
    "start_token": 78,
    "end_token": 85,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 22,
    "text": "    Chart type enum",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      22086,
      2099,
      33829
    ],
    "start_token": 85,
    "end_token": 91,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 91,
    "end_token": 91,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 25,
    "text": "    #: candlestick chart",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      2658,
      32712,
      624,
      8262
    ],
    "start_token": 91,
    "end_token": 100,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 28,
    "text": "    line = \"line\"",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1627,
      796,
      366,
      1370,
      1
    ],
    "start_token": 100,
    "end_token": 108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 31,
    "text": "    #: scatter chart",
    "annotation": "\u2705 Best Practice: Enum members should be in uppercase to follow Python naming conventions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      41058,
      8262
    ],
    "start_token": 108,
    "end_token": 115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      815,
      307,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396,
      13
    ],
    "label": "best_practice",
    "reason": "Enum members should be in uppercase to follow Python naming conventions."
  },
  {
    "line": 33,
    "text": "    #: histogram chart",
    "annotation": "\u2705 Best Practice: Leading underscore in variable name suggests it's intended for internal use.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      1554,
      21857,
      8262
    ],
    "start_token": 115,
    "end_token": 123,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      43225,
      44810,
      287,
      7885,
      1438,
      5644,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Leading underscore in variable name suggests it's intended for internal use."
  },
  {
    "line": 36,
    "text": "    pie = \"pie\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the `to_string` decorator is safe and does not expose sensitive information.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2508,
      796,
      366,
      21749,
      1
    ],
    "start_token": 123,
    "end_token": 131,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      4600,
      1462,
      62,
      8841,
      63,
      11705,
      1352,
      318,
      3338,
      290,
      857,
      407,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the `to_string` decorator is safe and does not expose sensitive information."
  },
  {
    "line": 31,
    "text": "    #: scatter chart",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the class attributes for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      41058,
      8262
    ],
    "start_token": 131,
    "end_token": 138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      1398,
      12608,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the class attributes for better readability and maintainability."
  },
  {
    "line": 31,
    "text": "    #: scatter chart",
    "annotation": "\u2705 Best Practice: Use of default None values allows for optional parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      41058,
      8262
    ],
    "start_token": 138,
    "end_token": 145,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      6045,
      3815,
      3578,
      329,
      11902,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default None values allows for optional parameters."
  },
  {
    "line": 33,
    "text": "    #: histogram chart",
    "annotation": "\u2705 Best Practice: Initializing instance variables in the constructor.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      1554,
      21857,
      8262
    ],
    "start_token": 145,
    "end_token": 153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      4554,
      9633,
      287,
      262,
      23772,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing instance variables in the constructor."
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of keyword arguments with default values improves function flexibility and readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 153,
    "end_token": 153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      21179,
      7159,
      351,
      4277,
      3815,
      19575,
      2163,
      13688,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of keyword arguments with default values improves function flexibility and readability"
  },
  {
    "line": 50,
    "text": "    def __init__(self, x0=None, y0=None, x1=None, y1=None) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method that wraps another method call, indicating a potential pattern for method delegation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2124,
      15,
      28,
      14202,
      11,
      331,
      15,
      28,
      14202,
      11,
      2124,
      16,
      28,
      14202,
      11,
      331,
      16,
      28,
      14202,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 153,
    "end_token": 186,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      326,
      27521,
      1194,
      2446,
      869,
      11,
      12739,
      257,
      2785,
      3912,
      329,
      2446,
      22635
    ],
    "label": "ml_signal",
    "reason": "Use of a method that wraps another method call, indicating a potential pattern for method delegation"
  },
  {
    "line": 53,
    "text": "        #: left-bottom y0",
    "annotation": "\u2705 Best Practice: Delegating functionality to another method promotes code reuse and separation of concerns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      25,
      1364,
      12,
      22487,
      331,
      15
    ],
    "start_token": 186,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1024,
      1455,
      803,
      11244,
      284,
      1194,
      2446,
      21068,
      2438,
      32349,
      290,
      14139,
      286,
      4786
    ],
    "label": "best_practice",
    "reason": "Delegating functionality to another method promotes code reuse and separation of concerns"
  },
  {
    "line": 50,
    "text": "    def __init__(self, x0=None, y0=None, x1=None, y1=None) -> None:",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2124,
      15,
      28,
      14202,
      11,
      331,
      15,
      28,
      14202,
      11,
      2124,
      16,
      28,
      14202,
      11,
      331,
      16,
      28,
      14202,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 200,
    "end_token": 233,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and readability"
  },
  {
    "line": 53,
    "text": "        #: left-bottom y0",
    "annotation": "\u2705 Best Practice: Use of None as default values to allow for optional parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      25,
      1364,
      12,
      22487,
      331,
      15
    ],
    "start_token": 233,
    "end_token": 247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6045,
      355,
      4277,
      3815,
      284,
      1249,
      329,
      11902,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of None as default values to allow for optional parameters"
  },
  {
    "line": 53,
    "text": "        #: left-bottom y0",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern with self.draw",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      25,
      1364,
      12,
      22487,
      331,
      15
    ],
    "start_token": 247,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      351,
      2116,
      13,
      19334
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern with self.draw"
  },
  {
    "line": 53,
    "text": "        #: left-bottom y0",
    "annotation": "\ud83e\udde0 ML Signal: Use of enum or constant for chart type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      25,
      1364,
      12,
      22487,
      331,
      15
    ],
    "start_token": 261,
    "end_token": 275,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      33829,
      393,
      6937,
      329,
      8262,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of enum or constant for chart type"
  },
  {
    "line": 66,
    "text": "            main_chart=ChartType.kline,",
    "annotation": "\u2705 Best Practice: Use of **kwargs for extensibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1388,
      62,
      40926,
      28,
      45488,
      6030,
      13,
      74,
      1370,
      11
    ],
    "start_token": 275,
    "end_token": 296,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      329,
      1070,
      641,
      2247
    ],
    "label": "best_practice",
    "reason": "Use of **kwargs for extensibility"
  },
  {
    "line": 66,
    "text": "            main_chart=ChartType.kline,",
    "annotation": "\u2705 Best Practice: Using named parameters with default values improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1388,
      62,
      40926,
      28,
      45488,
      6030,
      13,
      74,
      1370,
      11
    ],
    "start_token": 296,
    "end_token": 317,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3706,
      10007,
      351,
      4277,
      3815,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using named parameters with default values improves code readability and maintainability."
  },
  {
    "line": 76,
    "text": "    def draw_line(",
    "annotation": "\ud83e\udde0 ML Signal: The use of a method to draw an area chart indicates a pattern of data visualization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3197,
      62,
      1370,
      7
    ],
    "start_token": 317,
    "end_token": 325,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      2446,
      284,
      3197,
      281,
      1989,
      8262,
      9217,
      257,
      3912,
      286,
      1366,
      32704,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a method to draw an area chart indicates a pattern of data visualization."
  },
  {
    "line": 79,
    "text": "        return self.draw(",
    "annotation": "\u2705 Best Practice: Delegating functionality to another method (`self.draw`) promotes code reuse and separation of concerns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      19334,
      7
    ],
    "start_token": 325,
    "end_token": 337,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1024,
      1455,
      803,
      11244,
      284,
      1194,
      2446,
      357,
      63,
      944,
      13,
      19334,
      63,
      8,
      21068,
      2438,
      32349,
      290,
      14139,
      286,
      4786,
      13
    ],
    "label": "best_practice",
    "reason": "Delegating functionality to another method (`self.draw`) promotes code reuse and separation of concerns."
  },
  {
    "line": 76,
    "text": "    def draw_line(",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3197,
      62,
      1370,
      7
    ],
    "start_token": 337,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and readability"
  },
  {
    "line": 79,
    "text": "        return self.draw(",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern with self.draw",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      19334,
      7
    ],
    "start_token": 345,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      351,
      2116,
      13,
      19334
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern with self.draw"
  },
  {
    "line": 79,
    "text": "        return self.draw(",
    "annotation": "\u2705 Best Practice: Use of named arguments for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      19334,
      7
    ],
    "start_token": 357,
    "end_token": 369,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of named arguments for clarity"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with multiple optional parameters indicates flexibility in usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 369,
    "end_token": 369,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      3294,
      11902,
      10007,
      9217,
      13688,
      287,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method signature with multiple optional parameters indicates flexibility in usage patterns"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default parameter values for optional parameters improves function usability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 369,
    "end_token": 369,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      11902,
      10007,
      19575,
      2163,
      42863
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for optional parameters improves function usability"
  },
  {
    "line": 92,
    "text": "    ):",
    "annotation": "\ud83e\udde0 ML Signal: Delegating functionality to another method (self.draw) shows a pattern of code reuse",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 369,
    "end_token": 373,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1024,
      1455,
      803,
      11244,
      284,
      1194,
      2446,
      357,
      944,
      13,
      19334,
      8,
      2523,
      257,
      3912,
      286,
      2438,
      32349
    ],
    "label": "ml_signal",
    "reason": "Delegating functionality to another method (self.draw) shows a pattern of code reuse"
  },
  {
    "line": 92,
    "text": "    ):",
    "annotation": "\u2705 Best Practice: Use of named arguments improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 373,
    "end_token": 377,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of named arguments improves code readability and maintainability"
  },
  {
    "line": 102,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Consider providing default values for parameters to improve function usability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 377,
    "end_token": 385,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4955,
      4277,
      3815,
      329,
      10007,
      284,
      2987,
      2163,
      42863
    ],
    "label": "best_practice",
    "reason": "Consider providing default values for parameters to improve function usability"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern with self.draw can indicate a fluent interface design",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 385,
    "end_token": 385,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      351,
      2116,
      13,
      19334,
      460,
      7603,
      257,
      43472,
      7071,
      1486
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern with self.draw can indicate a fluent interface design"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of enum-like pattern with ChartType.bar can indicate a fixed set of options",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 385,
    "end_token": 385,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      33829,
      12,
      2339,
      3912,
      351,
      22086,
      6030,
      13,
      5657,
      460,
      7603,
      257,
      5969,
      900,
      286,
      3689
    ],
    "label": "ml_signal",
    "reason": "Use of enum-like pattern with ChartType.bar can indicate a fixed set of options"
  },
  {
    "line": 113,
    "text": "            show=show,",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      905,
      28,
      12860,
      11
    ],
    "start_token": 385,
    "end_token": 400,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 114,
    "text": "            scale_value=scale_value,",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern with self.draw can be used to identify similar method calls.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5046,
      62,
      8367,
      28,
      9888,
      62,
      8367,
      11
    ],
    "start_token": 400,
    "end_token": 419,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      351,
      2116,
      13,
      19334,
      460,
      307,
      973,
      284,
      5911,
      2092,
      2446,
      3848,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern with self.draw can be used to identify similar method calls."
  },
  {
    "line": 114,
    "text": "            scale_value=scale_value,",
    "annotation": "\u2705 Best Practice: Using named arguments improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5046,
      62,
      8367,
      28,
      9888,
      62,
      8367,
      11
    ],
    "start_token": 419,
    "end_token": 438,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3706,
      7159,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using named arguments improves code readability and maintainability."
  },
  {
    "line": 114,
    "text": "            scale_value=scale_value,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of ChartType.pie indicates a specific chart type being used, which can be a feature for ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5046,
      62,
      8367,
      28,
      9888,
      62,
      8367,
      11
    ],
    "start_token": 438,
    "end_token": 457,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22086,
      6030,
      13,
      21749,
      9217,
      257,
      2176,
      8262,
      2099,
      852,
      973,
      11,
      543,
      460,
      307,
      257,
      3895,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of ChartType.pie indicates a specific chart type being used, which can be a feature for ML models."
  },
  {
    "line": 124,
    "text": "            height=height,",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6001,
      28,
      17015,
      11
    ],
    "start_token": 457,
    "end_token": 472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 137,
    "text": "            title=title,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which may lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3670,
      28,
      7839,
      11
    ],
    "start_token": 472,
    "end_token": 487,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      743,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which may lead to runtime errors if called"
  },
  {
    "line": 138,
    "text": "            keep_ui_state=keep_ui_state,",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1394,
      62,
      9019,
      62,
      5219,
      28,
      14894,
      62,
      9019,
      62,
      5219,
      11
    ],
    "start_token": 487,
    "end_token": 510,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 193,
    "text": "                            dict(count=3, label=\"3m\", step=\"month\", stepmode=\"backward\"),",
    "annotation": "\ud83e\udde0 ML Signal: Method instantiation pattern with multiple parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7,
      9127,
      28,
      18,
      11,
      6167,
      2625,
      18,
      76,
      1600,
      2239,
      2625,
      8424,
      1600,
      2239,
      14171,
      2625,
      1891,
      904,
      12340
    ],
    "start_token": 510,
    "end_token": 558,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9113,
      3920,
      3912,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method instantiation pattern with multiple parameters"
  },
  {
    "line": 194,
    "text": "                            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),",
    "annotation": "\u2705 Best Practice: Consider using keyword arguments for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7,
      9127,
      28,
      21,
      11,
      6167,
      2625,
      21,
      76,
      1600,
      2239,
      2625,
      8424,
      1600,
      2239,
      14171,
      2625,
      1891,
      904,
      12340
    ],
    "start_token": 558,
    "end_token": 606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      21179,
      7159,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Consider using keyword arguments for clarity"
  },
  {
    "line": 194,
    "text": "                            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),",
    "annotation": "\ud83e\udde0 ML Signal: Object creation with multiple data sources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7,
      9127,
      28,
      21,
      11,
      6167,
      2625,
      21,
      76,
      1600,
      2239,
      2625,
      8424,
      1600,
      2239,
      14171,
      2625,
      1891,
      904,
      12340
    ],
    "start_token": 606,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9515,
      6282,
      351,
      3294,
      1366,
      4237
    ],
    "label": "ml_signal",
    "reason": "Object creation with multiple data sources"
  },
  {
    "line": 194,
    "text": "                            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7,
      9127,
      28,
      21,
      11,
      6167,
      2625,
      21,
      76,
      1600,
      2239,
      2625,
      8424,
      1600,
      2239,
      14171,
      2625,
      1891,
      904,
      12340
    ],
    "start_token": 654,
    "end_token": 702,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for readability"
  },
  {
    "line": 194,
    "text": "                            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7,
      9127,
      28,
      21,
      11,
      6167,
      2625,
      21,
      76,
      1600,
      2239,
      2625,
      8424,
      1600,
      2239,
      14171,
      2625,
      1891,
      904,
      12340
    ],
    "start_token": 702,
    "end_token": 750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 205,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 750,
    "end_token": 762,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 205,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 762,
    "end_token": 774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 205,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 774,
    "end_token": 786,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 206,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 786,
    "end_token": 786,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 206,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 786,
    "end_token": 786,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 206,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 786,
    "end_token": 786,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 213,
    "text": "            uirevision=uirevision,",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      334,
      557,
      10178,
      28,
      84,
      557,
      10178,
      11
    ],
    "start_token": 786,
    "end_token": 805,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 215,
    "text": "            width=width,",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9647,
      28,
      10394,
      11
    ],
    "start_token": 805,
    "end_token": 820,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for data retrieval"
  },
  {
    "line": 217,
    "text": "            yaxis=dict(",
    "annotation": "\u2705 Best Practice: Explicit return of the created object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      11600,
      7
    ],
    "start_token": 820,
    "end_token": 836,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      262,
      2727,
      2134
    ],
    "label": "best_practice",
    "reason": "Explicit return of the created object"
  },
  {
    "line": 217,
    "text": "            yaxis=dict(",
    "annotation": "\u2705 Best Practice: Using a method to encapsulate drawing logic improves code organization and reusability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      11600,
      7
    ],
    "start_token": 836,
    "end_token": 852,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      2446,
      284,
      32652,
      5039,
      8263,
      9156,
      19575,
      2438,
      4009,
      290,
      302,
      385,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using a method to encapsulate drawing logic improves code organization and reusability."
  },
  {
    "line": 217,
    "text": "            yaxis=dict(",
    "annotation": "\ud83e\udde0 ML Signal: The use of default parameters can indicate common usage patterns and preferences.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      11600,
      7
    ],
    "start_token": 852,
    "end_token": 868,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      4277,
      10007,
      460,
      7603,
      2219,
      8748,
      7572,
      290,
      15387,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of default parameters can indicate common usage patterns and preferences."
  },
  {
    "line": 217,
    "text": "            yaxis=dict(",
    "annotation": "\ud83e\udde0 ML Signal: The use of a method chain suggests a fluent interface pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      11600,
      7
    ],
    "start_token": 868,
    "end_token": 884,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      2446,
      6333,
      5644,
      257,
      43472,
      7071,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a method chain suggests a fluent interface pattern."
  },
  {
    "line": 227,
    "text": "            **layout_params,",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      39786,
      62,
      37266,
      11
    ],
    "start_token": 884,
    "end_token": 900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 229,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly returning None improves code clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 900,
    "end_token": 900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      19575,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None improves code clarity"
  },
  {
    "line": 229,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 900,
    "end_token": 900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 231,
    "text": "class Drawable(object):",
    "annotation": "\u2705 Best Practice: Explicitly returning None can improve code clarity",
    "confidence": 1.0,
    "tokens": [
      4871,
      15315,
      540,
      7,
      15252,
      2599
    ],
    "start_token": 900,
    "end_token": 906,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      460,
      2987,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None can improve code clarity"
  },
  {
    "line": 231,
    "text": "class Drawable(object):",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      4871,
      15315,
      540,
      7,
      15252,
      2599
    ],
    "start_token": 906,
    "end_token": 912,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 233,
    "text": "        drawer = Drawer(",
    "annotation": "\u2705 Best Practice: Explicitly returning None can improve code clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33451,
      796,
      15315,
      263,
      7
    ],
    "start_token": 912,
    "end_token": 924,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      460,
      2987,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None can improve code clarity"
  },
  {
    "line": 233,
    "text": "        drawer = Drawer(",
    "annotation": "\u2705 Best Practice: Use of type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33451,
      796,
      15315,
      263,
      7
    ],
    "start_token": 924,
    "end_token": 936,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting improves code readability and maintainability"
  },
  {
    "line": 235,
    "text": "            main_data=self.drawer_main_data(),",
    "annotation": "\u2705 Best Practice: Explicitly returning None clarifies the function's behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1388,
      62,
      7890,
      28,
      944,
      13,
      19334,
      263,
      62,
      12417,
      62,
      7890,
      22784
    ],
    "start_token": 936,
    "end_token": 960,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      10212,
      6945,
      262,
      2163,
      338,
      4069
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None clarifies the function's behavior"
  },
  {
    "line": 235,
    "text": "            main_data=self.drawer_main_data(),",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1388,
      62,
      7890,
      28,
      944,
      13,
      19334,
      263,
      62,
      12417,
      62,
      7890,
      22784
    ],
    "start_token": 960,
    "end_token": 984,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 237,
    "text": "            factor_data_list=self.drawer_factor_data_list(),",
    "annotation": "\u2705 Best Practice: Explicitly returning None can improve code clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      62,
      7890,
      62,
      4868,
      28,
      944,
      13,
      19334,
      263,
      62,
      31412,
      62,
      7890,
      62,
      4868,
      22784
    ],
    "start_token": 984,
    "end_token": 1012,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      460,
      2987,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None can improve code clarity"
  },
  {
    "line": 237,
    "text": "            factor_data_list=self.drawer_factor_data_list(),",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      62,
      7890,
      62,
      4868,
      28,
      944,
      13,
      19334,
      263,
      62,
      31412,
      62,
      7890,
      62,
      4868,
      22784
    ],
    "start_token": 1012,
    "end_token": 1040,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 239,
    "text": "            sub_data_list=self.drawer_sub_data_list(),",
    "annotation": "\u2705 Best Practice: Explicitly returning None can improve code clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      7890,
      62,
      4868,
      28,
      944,
      13,
      19334,
      263,
      62,
      7266,
      62,
      7890,
      62,
      4868,
      22784
    ],
    "start_token": 1040,
    "end_token": 1068,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      460,
      2987,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None can improve code clarity"
  },
  {
    "line": 239,
    "text": "            sub_data_list=self.drawer_sub_data_list(),",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      7890,
      62,
      4868,
      28,
      944,
      13,
      19334,
      263,
      62,
      7266,
      62,
      7890,
      62,
      4868,
      22784
    ],
    "start_token": 1068,
    "end_token": 1096,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 241,
    "text": "            annotation_df=self.drawer_annotation_df(),",
    "annotation": "\u2705 Best Practice: Explicitly returning None clarifies the function's behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23025,
      62,
      7568,
      28,
      944,
      13,
      19334,
      263,
      62,
      1236,
      14221,
      62,
      7568,
      22784
    ],
    "start_token": 1096,
    "end_token": 1121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      10212,
      6945,
      262,
      2163,
      338,
      4069
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None clarifies the function's behavior"
  },
  {
    "line": 241,
    "text": "            annotation_df=self.drawer_annotation_df(),",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23025,
      62,
      7568,
      28,
      944,
      13,
      19334,
      263,
      62,
      1236,
      14221,
      62,
      7568,
      22784
    ],
    "start_token": 1121,
    "end_token": 1146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 243,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Explicitly returning None can improve code clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1146,
    "end_token": 1154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      460,
      2987,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None can improve code clarity"
  },
  {
    "line": 243,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1154,
    "end_token": 1162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly returning None can improve code clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1162,
    "end_token": 1162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      460,
      2987,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None can improve code clarity"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Class should inherit from object for compatibility with Python 2 and 3",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1162,
    "end_token": 1162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      2134,
      329,
      17764,
      351,
      11361,
      362,
      290,
      513
    ],
    "label": "best_practice",
    "reason": "Class should inherit from object for compatibility with Python 2 and 3"
  },
  {
    "line": 248,
    "text": "        main_chart=ChartType.kline,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1388,
      62,
      40926,
      28,
      45488,
      6030,
      13,
      74,
      1370,
      11
    ],
    "start_token": 1162,
    "end_token": 1179,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 250,
    "text": "        height=None,",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting usage indicates a pattern for static type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6001,
      28,
      14202,
      11
    ],
    "start_token": 1179,
    "end_token": 1190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      8748,
      9217,
      257,
      3912,
      329,
      9037,
      2099,
      10627
    ],
    "label": "ml_signal",
    "reason": "Type hinting usage indicates a pattern for static type checking"
  },
  {
    "line": 251,
    "text": "        title=None,",
    "annotation": "\u2705 Best Practice: Calculate 'part' once to avoid repeated computation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3670,
      28,
      14202,
      11
    ],
    "start_token": 1190,
    "end_token": 1201,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      378,
      705,
      3911,
      6,
      1752,
      284,
      3368,
      5100,
      29964,
      13
    ],
    "label": "best_practice",
    "reason": "Calculate 'part' once to avoid repeated computation."
  },
  {
    "line": 257,
    "text": "        return self.drawer().draw(",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-strings for dynamic variable naming.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      19334,
      263,
      22446,
      19334,
      7
    ],
    "start_token": 1201,
    "end_token": 1216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      8925,
      7885,
      19264,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of f-strings for dynamic variable naming."
  },
  {
    "line": 270,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of list comprehension for domain calculation.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1216,
    "end_token": 1216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      35915,
      329,
      7386,
      17952,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of list comprehension for domain calculation."
  },
  {
    "line": 334,
    "text": "        height=None,",
    "annotation": "\u2705 Best Practice: Ensure the base class 'Draw' is defined or imported before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6001,
      28,
      14202,
      11
    ],
    "start_token": 1216,
    "end_token": 1227,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      2779,
      1398,
      705,
      25302,
      6,
      318,
      5447,
      393,
      17392,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Ensure the base class 'Draw' is defined or imported before use"
  },
  {
    "line": 348,
    "text": "                domain_range = (0.2, 1)",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7386,
      62,
      9521,
      796,
      357,
      15,
      13,
      17,
      11,
      352,
      8
    ],
    "start_token": 1227,
    "end_token": 1253,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 359,
    "text": "                # update sub_traces with yaxis",
    "annotation": "\u2705 Best Practice: Lazy initialization of main_data if not provided",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      850,
      62,
      2213,
      2114,
      351,
      331,
      22704
    ],
    "start_token": 1253,
    "end_token": 1277,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      406,
      12582,
      37588,
      286,
      1388,
      62,
      7890,
      611,
      407,
      2810
    ],
    "label": "best_practice",
    "reason": "Lazy initialization of main_data if not provided"
  },
  {
    "line": 363,
    "text": "                stacked_fig.layout[yaxis] = layout",
    "annotation": "\u2705 Best Practice: Lazy initialization of factor_data_list if not provided",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24167,
      62,
      5647,
      13,
      39786,
      58,
      88,
      22704,
      60,
      796,
      12461
    ],
    "start_token": 1277,
    "end_token": 1303,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      406,
      12582,
      37588,
      286,
      5766,
      62,
      7890,
      62,
      4868,
      611,
      407,
      2810
    ],
    "label": "best_practice",
    "reason": "Lazy initialization of factor_data_list if not provided"
  },
  {
    "line": 366,
    "text": "            yaxis, y, layout = self.make_y_layout(",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list to transform data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      11,
      331,
      11,
      12461,
      796,
      2116,
      13,
      15883,
      62,
      88,
      62,
      39786,
      7
    ],
    "start_token": 1303,
    "end_token": 1329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list to transform data"
  },
  {
    "line": 370,
    "text": "            stacked_fig.layout[yaxis] = layout",
    "annotation": "\u2705 Best Practice: Lazy initialization of sub_data_list if not provided",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24167,
      62,
      5647,
      13,
      39786,
      58,
      88,
      22704,
      60,
      796,
      12461
    ],
    "start_token": 1329,
    "end_token": 1351,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      406,
      12582,
      37588,
      286,
      850,
      62,
      7890,
      62,
      4868,
      611,
      407,
      2810
    ],
    "label": "best_practice",
    "reason": "Lazy initialization of sub_data_list if not provided"
  },
  {
    "line": 373,
    "text": "            for trace in traces:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list to transform data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      12854,
      287,
      20675,
      25
    ],
    "start_token": 1351,
    "end_token": 1367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list to transform data"
  },
  {
    "line": 374,
    "text": "                trace.yaxis = y",
    "annotation": "\ud83e\udde0 ML Signal: Method usage pattern for adding factor data to an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12854,
      13,
      88,
      22704,
      796,
      331
    ],
    "start_token": 1367,
    "end_token": 1388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8748,
      3912,
      329,
      4375,
      5766,
      1366,
      284,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method usage pattern for adding factor data to an object"
  },
  {
    "line": 376,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly specifying the type of 'df' improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1388,
    "end_token": 1388,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      31577,
      262,
      2099,
      286,
      705,
      7568,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly specifying the type of 'df' improves code readability and maintainability"
  },
  {
    "line": 377,
    "text": "            # update shapes with yaxis",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame to NormalData object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      15268,
      351,
      331,
      22704
    ],
    "start_token": 1388,
    "end_token": 1405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      284,
      14435,
      6601,
      2134
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame to NormalData object"
  },
  {
    "line": 377,
    "text": "            # update shapes with yaxis",
    "annotation": "\u2705 Best Practice: Check if the list is initialized before appending to it",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      15268,
      351,
      331,
      22704
    ],
    "start_token": 1405,
    "end_token": 1422,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      1351,
      318,
      23224,
      878,
      598,
      1571,
      284,
      340
    ],
    "label": "best_practice",
    "reason": "Check if the list is initialized before appending to it"
  },
  {
    "line": 379,
    "text": "                for rect in drawer.rects:",
    "annotation": "\u2705 Best Practice: Initialize the list if it is not already initialized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      13621,
      287,
      33451,
      13,
      2554,
      82,
      25
    ],
    "start_token": 1422,
    "end_token": 1445,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      262,
      1351,
      611,
      340,
      318,
      407,
      1541,
      23224
    ],
    "label": "best_practice",
    "reason": "Initialize the list if it is not already initialized"
  },
  {
    "line": 381,
    "text": "                        type=\"rect\",",
    "annotation": "\ud83e\udde0 ML Signal: Appending data to a list, common pattern for data collection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099,
      2625,
      2554,
      1600
    ],
    "start_token": 1445,
    "end_token": 1472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      1366,
      284,
      257,
      1351,
      11,
      2219,
      3912,
      329,
      1366,
      4947
    ],
    "label": "ml_signal",
    "reason": "Appending data to a list, common pattern for data collection"
  },
  {
    "line": 380,
    "text": "                    stacked_fig.add_shape(",
    "annotation": "\ud83e\udde0 ML Signal: Method that takes a DataFrame as input, indicating data processing or transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24167,
      62,
      5647,
      13,
      2860,
      62,
      43358,
      7
    ],
    "start_token": 1472,
    "end_token": 1499,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      2753,
      257,
      6060,
      19778,
      355,
      5128,
      11,
      12739,
      1366,
      7587,
      393,
      13389
    ],
    "label": "ml_signal",
    "reason": "Method that takes a DataFrame as input, indicating data processing or transformation"
  },
  {
    "line": 382,
    "text": "                        x0=rect.x0,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method that wraps a DataFrame in a custom class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      15,
      28,
      2554,
      13,
      87,
      15,
      11
    ],
    "start_token": 1499,
    "end_token": 1530,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      326,
      27521,
      257,
      6060,
      19778,
      287,
      257,
      2183,
      1398
    ],
    "label": "ml_signal",
    "reason": "Usage of a method that wraps a DataFrame in a custom class"
  },
  {
    "line": 383,
    "text": "                        y0=rect.y0,",
    "annotation": "\u2705 Best Practice: Check if sub_data_list is initialized before appending",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      15,
      28,
      2554,
      13,
      88,
      15,
      11
    ],
    "start_token": 1530,
    "end_token": 1561,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      850,
      62,
      7890,
      62,
      4868,
      318,
      23224,
      878,
      598,
      1571
    ],
    "label": "best_practice",
    "reason": "Check if sub_data_list is initialized before appending"
  },
  {
    "line": 385,
    "text": "                        y1=rect.y1,",
    "annotation": "\u2705 Best Practice: Initialize sub_data_list as an empty list if not already initialized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      16,
      28,
      2554,
      13,
      88,
      16,
      11
    ],
    "start_token": 1561,
    "end_token": 1592,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      850,
      62,
      7890,
      62,
      4868,
      355,
      281,
      6565,
      1351,
      611,
      407,
      1541,
      23224
    ],
    "label": "best_practice",
    "reason": "Initialize sub_data_list as an empty list if not already initialized"
  },
  {
    "line": 387,
    "text": "                        # fillcolor=\"LightSkyBlue\",",
    "annotation": "\ud83e\udde0 ML Signal: Appending data to a list, common pattern in data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6070,
      8043,
      2625,
      15047,
      22308,
      14573,
      1600
    ],
    "start_token": 1592,
    "end_token": 1623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      1366,
      284,
      257,
      1351,
      11,
      2219,
      3912,
      287,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Appending data to a list, common pattern in data handling"
  },
  {
    "line": 386,
    "text": "                        line=dict(color=\"RoyalBlue\", width=1),",
    "annotation": "\u2705 Best Practice: Method name should be descriptive and follow naming conventions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1627,
      28,
      11600,
      7,
      8043,
      2625,
      41861,
      14573,
      1600,
      9647,
      28,
      16,
      828
    ],
    "start_token": 1623,
    "end_token": 1659,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      815,
      307,
      35644,
      290,
      1061,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Method name should be descriptive and follow naming conventions"
  },
  {
    "line": 388,
    "text": "                        yref=y,",
    "annotation": "\ud83e\udde0 ML Signal: Checks for non-empty sub_data_list, indicating data validation logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      5420,
      28,
      88,
      11
    ],
    "start_token": 1659,
    "end_token": 1687,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      1729,
      12,
      28920,
      850,
      62,
      7890,
      62,
      4868,
      11,
      12739,
      1366,
      21201,
      9156
    ],
    "label": "ml_signal",
    "reason": "Checks for non-empty sub_data_list, indicating data validation logic"
  },
  {
    "line": 389,
    "text": "                    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential AttributeError if sub_data_list is not a list or does not have an empty method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1687,
    "end_token": 1707,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3460,
      4163,
      12331,
      611,
      850,
      62,
      7890,
      62,
      4868,
      318,
      407,
      257,
      1351,
      393,
      857,
      407,
      423,
      281,
      6565,
      2446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential AttributeError if sub_data_list is not a list or does not have an empty method"
  },
  {
    "line": 393,
    "text": "                stacked_fig.layout[\"annotations\"] = annotations(drawer.annotation_df, yref=y)",
    "annotation": "\u2705 Best Practice: Use copy to avoid modifying the original dataframe",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24167,
      62,
      5647,
      13,
      39786,
      14692,
      34574,
      602,
      8973,
      796,
      37647,
      7,
      19334,
      263,
      13,
      1236,
      14221,
      62,
      7568,
      11,
      331,
      5420,
      28,
      88,
      8
    ],
    "start_token": 1707,
    "end_token": 1747,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4866,
      284,
      3368,
      30620,
      262,
      2656,
      1366,
      14535
    ],
    "label": "best_practice",
    "reason": "Use copy to avoid modifying the original dataframe"
  },
  {
    "line": 410,
    "text": "        main_df: pd.DataFrame = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide unexpected errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1388,
      62,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      796,
      6045,
      11
    ],
    "start_token": 1747,
    "end_token": 1766,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      10059,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide unexpected errors"
  },
  {
    "line": 415,
    "text": "        sub_data_list: NormalData = None,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting data to list for plotting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      7890,
      62,
      4868,
      25,
      14435,
      6601,
      796,
      6045,
      11
    ],
    "start_token": 1766,
    "end_token": 1784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      1366,
      284,
      1351,
      329,
      29353
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting data to list for plotting"
  },
  {
    "line": 435,
    "text": "        self.main_data: NormalData = main_data",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting data to list for plotting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      12417,
      62,
      7890,
      25,
      14435,
      6601,
      796,
      1388,
      62,
      7890
    ],
    "start_token": 1784,
    "end_token": 1803,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      1366,
      284,
      1351,
      329,
      29353
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting data to list for plotting"
  },
  {
    "line": 440,
    "text": "            for df in factor_df_list:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting data to list for plotting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      47764,
      287,
      5766,
      62,
      7568,
      62,
      4868,
      25
    ],
    "start_token": 1803,
    "end_token": 1823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      1366,
      284,
      1351,
      329,
      29353
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting data to list for plotting"
  },
  {
    "line": 462,
    "text": "        self.rects = rects",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be disabled in optimized mode",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2554,
      82,
      796,
      13621,
      82
    ],
    "start_token": 1823,
    "end_token": 1837,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      287,
      23392,
      4235
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be disabled in optimized mode"
  },
  {
    "line": 472,
    "text": "        self.factor_data_list.append(data)",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting data to list for plotting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      31412,
      62,
      7890,
      62,
      4868,
      13,
      33295,
      7,
      7890,
      8
    ],
    "start_token": 1837,
    "end_token": 1856,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      1366,
      284,
      1351,
      329,
      29353
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting data to list for plotting"
  },
  {
    "line": 485,
    "text": "    def make_traces(self, main_chart=ChartType.kline, sub_chart=\"bar\", yaxis=\"y\", scale_value=None, **kwargs):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting data to list for plotting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      787,
      62,
      2213,
      2114,
      7,
      944,
      11,
      1388,
      62,
      40926,
      28,
      45488,
      6030,
      13,
      74,
      1370,
      11,
      850,
      62,
      40926,
      2625,
      5657,
      1600,
      331,
      22704,
      2625,
      88,
      1600,
      5046,
      62,
      8367,
      28,
      14202,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 1856,
    "end_token": 1898,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      1366,
      284,
      1351,
      329,
      29353
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting data to list for plotting"
  },
  {
    "line": 480,
    "text": "        self.sub_data_list.append(data)",
    "annotation": "\ud83e\udde0 ML Signal: Function that maps input to categorical output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7266,
      62,
      7890,
      62,
      4868,
      13,
      33295,
      7,
      7890,
      8
    ],
    "start_token": 1898,
    "end_token": 1917,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      326,
      8739,
      5128,
      284,
      4253,
      12409,
      5072
    ],
    "label": "ml_signal",
    "reason": "Function that maps input to categorical output"
  },
  {
    "line": 485,
    "text": "    def make_traces(self, main_chart=ChartType.kline, sub_chart=\"bar\", yaxis=\"y\", scale_value=None, **kwargs):",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      787,
      62,
      2213,
      2114,
      7,
      944,
      11,
      1388,
      62,
      40926,
      28,
      45488,
      6030,
      13,
      74,
      1370,
      11,
      850,
      62,
      40926,
      2625,
      5657,
      1600,
      331,
      22704,
      2625,
      88,
      1600,
      5046,
      62,
      8367,
      28,
      14202,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 1917,
    "end_token": 1959,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for data transformation"
  },
  {
    "line": 489,
    "text": "        for entity_id, df in self.main_data.entity_map_df.items():",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on object attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      9312,
      62,
      312,
      11,
      47764,
      287,
      2116,
      13,
      12417,
      62,
      7890,
      13,
      26858,
      62,
      8899,
      62,
      7568,
      13,
      23814,
      33529
    ],
    "start_token": 1959,
    "end_token": 1987,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2134,
      11688
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on object attribute"
  },
  {
    "line": 495,
    "text": "                    for i in range(0, len(df)):",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine chart type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      15,
      11,
      18896,
      7,
      7568,
      8,
      2599
    ],
    "start_token": 1987,
    "end_token": 2018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      8262,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine chart type"
  },
  {
    "line": 502,
    "text": "                    df[col] = df[col] * scale",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if sub_traces is not initialized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      4033,
      60,
      796,
      47764,
      58,
      4033,
      60,
      1635,
      5046
    ],
    "start_token": 2018,
    "end_token": 2048,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      850,
      62,
      2213,
      2114,
      318,
      407,
      23224
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if sub_traces is not initialized"
  },
  {
    "line": 503,
    "text": "            code = entity_id",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if traces or sub_traces are not initialized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      796,
      9312,
      62,
      312
    ],
    "start_token": 2048,
    "end_token": 2064,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      20675,
      393,
      850,
      62,
      2213,
      2114,
      389,
      407,
      23224
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if traces or sub_traces are not initialized"
  },
  {
    "line": 501,
    "text": "                    scale = scale_value / first",
    "annotation": "\ud83e\udde0 ML Signal: Method uses a default parameter value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5046,
      796,
      5046,
      62,
      8367,
      1220,
      717
    ],
    "start_token": 2064,
    "end_token": 2090,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3544,
      257,
      4277,
      11507,
      1988
    ],
    "label": "ml_signal",
    "reason": "Method uses a default parameter value"
  },
  {
    "line": 503,
    "text": "            code = entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of objects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      796,
      9312,
      62,
      312
    ],
    "start_token": 2090,
    "end_token": 2106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      5563
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of objects"
  },
  {
    "line": 512,
    "text": "                    trace_name = \"{}_{}\".format(code, col)",
    "annotation": "\u2705 Best Practice: Use of update_shapes to apply consistent properties to all shapes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12854,
      62,
      3672,
      796,
      45144,
      92,
      23330,
      92,
      1911,
      18982,
      7,
      8189,
      11,
      951,
      8
    ],
    "start_token": 2106,
    "end_token": 2140,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4296,
      62,
      1477,
      7916,
      284,
      4174,
      6414,
      6608,
      284,
      477,
      15268
    ],
    "label": "best_practice",
    "reason": "Use of update_shapes to apply consistent properties to all shapes"
  },
  {
    "line": 524,
    "text": "                    yaxis=yaxis,",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      88,
      22704,
      11
    ],
    "start_token": 2140,
    "end_token": 2165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters for better readability and maintainability."
  },
  {
    "line": 530,
    "text": "                for col in df.columns:",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      951,
      287,
      47764,
      13,
      28665,
      82,
      25
    ],
    "start_token": 2165,
    "end_token": 2188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability."
  },
  {
    "line": 549,
    "text": "                    if pd_is_not_null(self.annotation_df):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using fig.show() can lead to potential security risks if the figure contains sensitive data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      944,
      13,
      1236,
      14221,
      62,
      7568,
      2599
    ],
    "start_token": 2188,
    "end_token": 2224,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      2336,
      13,
      12860,
      3419,
      460,
      1085,
      284,
      2785,
      2324,
      7476,
      611,
      262,
      3785,
      4909,
      8564,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using fig.show() can lead to potential security risks if the figure contains sensitive data."
  },
  {
    "line": 551,
    "text": "                    else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame index and columns to generate table headers",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2224,
    "end_token": 2245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      6376,
      290,
      15180,
      284,
      7716,
      3084,
      24697
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame index and columns to generate table headers"
  },
  {
    "line": 553,
    "text": "            elif main_chart == ChartType.pie:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing DataFrame index level values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      1388,
      62,
      40926,
      6624,
      22086,
      6030,
      13,
      21749,
      25
    ],
    "start_token": 2245,
    "end_token": 2267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6060,
      19778,
      6376,
      1241,
      3815
    ],
    "label": "ml_signal",
    "reason": "Accessing DataFrame index level values"
  },
  {
    "line": 555,
    "text": "                    traces.append(go.Pie(name=entity_id, labels=df.columns.tolist(), values=row.tolist(), **kwargs))",
    "annotation": "\ud83e\udde0 ML Signal: Accessing DataFrame index level values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20675,
      13,
      33295,
      7,
      2188,
      13,
      48223,
      7,
      3672,
      28,
      26858,
      62,
      312,
      11,
      14722,
      28,
      7568,
      13,
      28665,
      82,
      13,
      83,
      349,
      396,
      22784,
      3815,
      28,
      808,
      13,
      83,
      349,
      396,
      22784,
      12429,
      46265,
      22046,
      4008
    ],
    "start_token": 2267,
    "end_token": 2323,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6060,
      19778,
      6376,
      1241,
      3815
    ],
    "label": "ml_signal",
    "reason": "Accessing DataFrame index level values"
  },
  {
    "line": 555,
    "text": "                    traces.append(go.Pie(name=entity_id, labels=df.columns.tolist(), values=row.tolist(), **kwargs))",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame columns to extract values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20675,
      13,
      33295,
      7,
      2188,
      13,
      48223,
      7,
      3672,
      28,
      26858,
      62,
      312,
      11,
      14722,
      28,
      7568,
      13,
      28665,
      82,
      13,
      83,
      349,
      396,
      22784,
      3815,
      28,
      808,
      13,
      83,
      349,
      396,
      22784,
      12429,
      46265,
      22046,
      4008
    ],
    "start_token": 2323,
    "end_token": 2379,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15180,
      284,
      7925,
      3815
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame columns to extract values"
  },
  {
    "line": 555,
    "text": "                    traces.append(go.Pie(name=entity_id, labels=df.columns.tolist(), values=row.tolist(), **kwargs))",
    "annotation": "\u2705 Best Practice: Use of Plotly's go.Table for structured data visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20675,
      13,
      33295,
      7,
      2188,
      13,
      48223,
      7,
      3672,
      28,
      26858,
      62,
      312,
      11,
      14722,
      28,
      7568,
      13,
      28665,
      82,
      13,
      83,
      349,
      396,
      22784,
      3815,
      28,
      808,
      13,
      83,
      349,
      396,
      22784,
      12429,
      46265,
      22046,
      4008
    ],
    "start_token": 2379,
    "end_token": 2435,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      28114,
      306,
      338,
      467,
      13,
      10962,
      329,
      20793,
      1366,
      32704
    ],
    "label": "best_practice",
    "reason": "Use of Plotly's go.Table for structured data visualization"
  },
  {
    "line": 570,
    "text": "                                line = go.Scatter(",
    "annotation": "\u2705 Best Practice: Creating a new Plotly Figure object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1627,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 2435,
    "end_token": 2473,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30481,
      257,
      649,
      28114,
      306,
      11291,
      2134
    ],
    "label": "best_practice",
    "reason": "Creating a new Plotly Figure object"
  },
  {
    "line": 570,
    "text": "                                line = go.Scatter(",
    "annotation": "\u2705 Best Practice: Adding traces to the Plotly figure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1627,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 2473,
    "end_token": 2511,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      20675,
      284,
      262,
      28114,
      306,
      3785
    ],
    "label": "best_practice",
    "reason": "Adding traces to the Plotly figure"
  },
  {
    "line": 570,
    "text": "                                line = go.Scatter(",
    "annotation": "\u2705 Best Practice: Updating layout with dynamic parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1627,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 2511,
    "end_token": 2549,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3205,
      38734,
      12461,
      351,
      8925,
      10007
    ],
    "label": "best_practice",
    "reason": "Updating layout with dynamic parameters"
  },
  {
    "line": 578,
    "text": "                    sub_df = sub_data.entity_map_df.get(entity_id)",
    "annotation": "\u2705 Best Practice: Displaying the figure using Plotly's show method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      7568,
      796,
      850,
      62,
      7890,
      13,
      26858,
      62,
      8899,
      62,
      7568,
      13,
      1136,
      7,
      26858,
      62,
      312,
      8
    ],
    "start_token": 2549,
    "end_token": 2588,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16531,
      278,
      262,
      3785,
      1262,
      28114,
      306,
      338,
      905,
      2446
    ],
    "label": "best_practice",
    "reason": "Displaying the figure using Plotly's show method"
  },
  {
    "line": 578,
    "text": "                    sub_df = sub_data.entity_map_df.get(entity_id)",
    "annotation": "\u2705 Best Practice: Check if the DataFrame is not null before proceeding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      7568,
      796,
      850,
      62,
      7890,
      13,
      26858,
      62,
      8899,
      62,
      7568,
      13,
      1136,
      7,
      26858,
      62,
      312,
      8
    ],
    "start_token": 2588,
    "end_token": 2627,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if the DataFrame is not null before proceeding"
  },
  {
    "line": 581,
    "text": "                        for col in sub_df.columns:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over grouped DataFrame by level 0 (entity_id)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      951,
      287,
      850,
      62,
      7568,
      13,
      28665,
      82,
      25
    ],
    "start_token": 2627,
    "end_token": 2660,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      32824,
      6060,
      19778,
      416,
      1241,
      657,
      357,
      26858,
      62,
      312,
      8
    ],
    "label": "ml_signal",
    "reason": "Iterating over grouped DataFrame by level 0 (entity_id)"
  },
  {
    "line": 583,
    "text": "                            ydata = sub_df[col].values.tolist()",
    "annotation": "\u2705 Best Practice: Check if the DataFrame is not null before proceeding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      7890,
      796,
      850,
      62,
      7568,
      58,
      4033,
      4083,
      27160,
      13,
      83,
      349,
      396,
      3419
    ],
    "start_token": 2660,
    "end_token": 2702,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if the DataFrame is not null before proceeding"
  },
  {
    "line": 584,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2702,
    "end_token": 2702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows"
  },
  {
    "line": 587,
    "text": "                                    return \"red\"",
    "annotation": "\u2705 Best Practice: Use of 'in' to check for key existence in dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      445,
      1
    ],
    "start_token": 2702,
    "end_token": 2741,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      259,
      6,
      284,
      2198,
      329,
      1994,
      6224,
      287,
      22155
    ],
    "label": "best_practice",
    "reason": "Use of 'in' to check for key existence in dictionary"
  },
  {
    "line": 588,
    "text": "                                else:",
    "annotation": "\u2705 Best Practice: Rounding value for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2741,
    "end_token": 2774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      1988,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding value for consistency"
  },
  {
    "line": 588,
    "text": "                                else:",
    "annotation": "\ud83e\udde0 ML Signal: Appending dictionary to list for annotations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2774,
    "end_token": 2807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      22155,
      284,
      1351,
      329,
      37647
    ],
    "label": "ml_signal",
    "reason": "Appending dictionary to list for annotations"
  },
  {
    "line": 610,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2807,
    "end_token": 2807,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
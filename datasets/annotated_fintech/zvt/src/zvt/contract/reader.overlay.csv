annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Consider using new-style classes by inheriting from 'object' for Python 2 compatibility.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 649, 12, 7635, 6097, 416, 10639, 1780, 422, 705, 15252, 6, 329, 11361, 362, 17764, 13]",0.5,18,best_practice,12,Consider using new-style classes by inheriting from 'object' for Python 2 compatibility.,,0,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
‚úÖ Best Practice: Include a docstring to describe the parameters and return type,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 10007, 290, 1441, 2099]",0.5,41,best_practice,13,Include a docstring to describe the parameters and return type,,18,"from zvt.utils.time_utils import to_pd_timestamp, now_pd_timestamp","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823, 11, 783, 62, 30094, 62, 16514, 27823]"
‚úÖ Best Practice: Raise NotImplementedError to indicate that this method should be overridden,"[26486, 227, 6705, 19939, 25, 35123, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 428, 2446, 815, 307, 23170, 4651]",0.5,64,best_practice,17,Raise NotImplementedError to indicate that this method should be overridden,,41,"    def on_data_loaded(self, data: pd.DataFrame) -> object:","[220, 220, 220, 825, 319, 62, 7890, 62, 14578, 7, 944, 11, 1366, 25, 279, 67, 13, 6601, 19778, 8, 4613, 2134, 25]"
‚úÖ Best Practice: Method docstring is present but should describe parameters and return value,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 1944, 475, 815, 6901, 10007, 290, 1441, 1988]",0.5,87,best_practice,17,Method docstring is present but should describe parameters and return value,,64,"    def on_data_loaded(self, data: pd.DataFrame) -> object:","[220, 220, 220, 825, 319, 62, 7890, 62, 14578, 7, 944, 11, 1366, 25, 279, 67, 13, 6601, 19778, 8, 4613, 2134, 25]"
‚úÖ Best Practice: Type hinting for parameters and return value improves code readability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 290, 1441, 1988, 19575, 2438, 1100, 1799]",0.5,95,best_practice,18,Type hinting for parameters and return value improves code readability,,87,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Placeholder for method implementation indicates intentional design,"[26486, 227, 6705, 19939, 25, 8474, 13829, 329, 2446, 7822, 9217, 21391, 1486]",0.5,95,best_practice,23,Placeholder for method implementation indicates intentional design,,95,,[]
‚úÖ Best Practice: Consider adding a docstring description for the return value,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 6764, 329, 262, 1441, 1988]",1.0,108,best_practice,22,Consider adding a docstring description for the return value,,95,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
‚úÖ Best Practice: Implement the function or raise NotImplementedError to indicate it's a placeholder,"[26486, 227, 6705, 19939, 25, 48282, 262, 2163, 393, 5298, 1892, 3546, 1154, 12061, 12331, 284, 7603, 340, 338, 257, 46076]",1.0,116,best_practice,28,Implement the function or raise NotImplementedError to indicate it's a placeholder,,108,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Class should inherit from 'object' explicitly in Python 2.x for new-style classes,"[26486, 227, 6705, 19939, 25, 5016, 815, 16955, 422, 705, 15252, 6, 11777, 287, 11361, 362, 13, 87, 329, 649, 12, 7635, 6097]",0.5,124,best_practice,28,Class should inherit from 'object' explicitly in Python 2.x for new-style classes,,116,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Custom class definition, useful for model training on class usage patterns","[8582, 100, 254, 10373, 26484, 25, 8562, 1398, 6770, 11, 4465, 329, 2746, 3047, 319, 1398, 8748, 7572]",0.5,137,ml_signal,29,"Custom class definition, useful for model training on class usage patterns",,124,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
"üß† ML Signal: Logger instantiation pattern, useful for identifying logging practices","[8582, 100, 254, 10373, 26484, 25, 5972, 1362, 9113, 3920, 3912, 11, 4465, 329, 13720, 18931, 6593]",1.0,137,ml_signal,30,"Logger instantiation pattern, useful for identifying logging practices",,137,,[]
"‚úÖ Best Practice: Use of __name__ ensures logger is named after the module, aiding in debugging","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 19047, 49706, 318, 3706, 706, 262, 8265, 11, 37221, 287, 28769]",0.5,137,best_practice,30,"Use of __name__ ensures logger is named after the module, aiding in debugging",,137,,[]
‚úÖ Best Practice: Use of logging for debugging and monitoring,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 28769, 290, 9904]",1.0,153,best_practice,50,Use of logging for debugging and monitoring,,137,"        exchanges: List[str] = None,","[220, 220, 220, 220, 220, 220, 220, 14525, 25, 7343, 58, 2536, 60, 796, 6045, 11]"
‚úÖ Best Practice: Converting timestamps to a consistent format,"[26486, 227, 6705, 19939, 25, 35602, 889, 4628, 395, 9430, 284, 257, 6414, 5794]",1.0,168,best_practice,58,Converting timestamps to a consistent format,,153,"        level: IntervalLevel = None,","[220, 220, 220, 220, 220, 220, 220, 1241, 25, 4225, 2100, 4971, 796, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType if get_entities returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 611, 651, 62, 298, 871, 5860, 6045]",0.5,186,sast_risk,68,Potential for NoneType if get_entities returns None,Low,168,        self.entity_provider = entity_provider,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 15234, 1304, 796, 9312, 62, 15234, 1304]"
‚úÖ Best Practice: Encapsulating level in IntervalLevel for consistency,"[26486, 227, 6705, 19939, 25, 14711, 1686, 8306, 1241, 287, 4225, 2100, 4971, 329, 15794]",1.0,202,best_practice,75,Encapsulating level in IntervalLevel for consistency,,186,        self.entity_ids = entity_ids,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 2340, 796, 9312, 62, 2340]"
‚ö†Ô∏è SAST Risk (Medium): Use of eval can lead to code injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 5418, 460, 1085, 284, 2438, 16954, 23805]",1.0,225,sast_risk,82,Use of eval can lead to code injection vulnerabilities,Medium,202,            if pd_is_not_null(df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Use of eval can lead to code injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 5418, 460, 1085, 284, 2438, 16954, 23805]",1.0,225,sast_risk,84,Use of eval can lead to code injection vulnerabilities,Medium,225,,[]
‚úÖ Best Practice: Ensuring essential columns are included,"[26486, 227, 6705, 19939, 25, 48221, 870, 6393, 15180, 389, 3017]",0.5,225,best_practice,88,Ensuring essential columns are included,,225,,[]
üß† ML Signal: Tracking data listeners can indicate event-driven architecture,"[8582, 100, 254, 10373, 26484, 25, 37169, 1366, 22054, 460, 7603, 1785, 12, 15808, 10959]",0.5,246,ml_signal,90,Tracking data listeners can indicate event-driven architecture,,225,            self.level = IntervalLevel(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5715, 796, 4225, 2100, 4971, 7, 5715, 8]"
üß† ML Signal: Use of pandas DataFrame for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6060, 19778, 329, 1366, 17512]",0.5,267,ml_signal,90,Use of pandas DataFrame for data manipulation,,246,            self.level = IntervalLevel(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5715, 796, 4225, 2100, 4971, 7, 5715, 8]"
üß† ML Signal: Automatic data loading on initialization,"[8582, 100, 254, 10373, 26484, 25, 30199, 1366, 11046, 319, 37588]",1.0,267,ml_signal,97,Automatic data loading on initialization,,267,,[]
üß† ML Signal: Iterating over entity_ids to load data for each entity,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 9312, 62, 2340, 284, 3440, 1366, 329, 1123, 9312]",1.0,288,ml_signal,90,Iterating over entity_ids to load data for each entity,,267,            self.level = IntervalLevel(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5715, 796, 4225, 2100, 4971, 7, 5715, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if data_schema.query_data does not handle SQL injection,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 1366, 62, 15952, 2611, 13, 22766, 62, 7890, 857, 407, 5412, 16363, 16954]",0.5,321,sast_risk,98,Potential risk if data_schema.query_data does not handle SQL injection,Low,288,"        self.category_col = eval(""self.data_schema.{}"".format(self.category_field))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22872, 62, 4033, 796, 5418, 7203, 944, 13, 7890, 62, 15952, 2611, 13, 90, 92, 1911, 18982, 7, 944, 13, 22872, 62, 3245, 4008]"
‚úÖ Best Practice: Using pd.concat to combine DataFrames,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 12082, 6060, 35439]",1.0,321,best_practice,102,Using pd.concat to combine DataFrames,,321,,[]
‚úÖ Best Practice: Sorting DataFrame by index for consistent ordering,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 416, 6376, 329, 6414, 16216]",1.0,345,best_practice,104,Sorting DataFrame by index for consistent ordering,,321,            # always add category_column and time_field for normalizing,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1464, 751, 6536, 62, 28665, 290, 640, 62, 3245, 329, 3487, 2890]"
‚úÖ Best Practice: Use of dictionary to organize parameters improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 284, 16481, 10007, 19575, 1100, 1799, 290, 5529, 1799]",1.0,345,best_practice,106,Use of dictionary to organize parameters improves readability and maintainability,,345,,[]
‚úÖ Best Practice: Use of conditional expression for concise assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 329, 35327, 16237]",1.0,345,best_practice,106,Use of conditional expression for concise assignment,,345,,[]
üß† ML Signal: Logging parameters can be useful for monitoring and debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 10007, 460, 307, 4465, 329, 9904, 290, 28769]",1.0,374,ml_signal,120,Logging parameters can be useful for monitoring and debugging,,345,"                index=[self.category_field, self.time_field],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 41888, 944, 13, 22872, 62, 3245, 11, 2116, 13, 2435, 62, 3245, 4357]"
"üß† ML Signal: Data loading pattern, useful for understanding data access patterns","[8582, 100, 254, 10373, 26484, 25, 6060, 11046, 3912, 11, 4465, 329, 4547, 1366, 1895, 7572]",1.0,403,ml_signal,120,"Data loading pattern, useful for understanding data access patterns",,374,"                index=[self.category_field, self.time_field],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 41888, 944, 13, 22872, 62, 3245, 11, 2116, 13, 2435, 62, 3245, 4357]"
üß† ML Signal: Logging execution time can be useful for performance monitoring,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 9706, 640, 460, 307, 4465, 329, 2854, 9904]",1.0,421,ml_signal,138,Logging execution time can be useful for performance monitoring,,403,"            columns=self.columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 944, 13, 28665, 82, 11]"
üß† ML Signal: Use of event listeners for data loading completion,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1785, 22054, 329, 1366, 11046, 11939]",0.5,439,ml_signal,138,Use of event listeners for data loading completion,,421,"            columns=self.columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 944, 13, 28665, 82, 11]"
‚úÖ Best Practice: Consider specifying a more precise return type instead of 'object' for better type clarity.,"[26486, 227, 6705, 19939, 25, 12642, 31577, 257, 517, 7141, 1441, 2099, 2427, 286, 705, 15252, 6, 329, 1365, 2099, 16287, 13]",0.5,457,best_practice,138,Consider specifying a more precise return type instead of 'object' for better type clarity.,,439,"            columns=self.columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 944, 13, 28665, 82, 11]"
‚ö†Ô∏è SAST Risk (Low): Logging data can expose sensitive information. Ensure no sensitive data is logged.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 1366, 460, 15651, 8564, 1321, 13, 48987, 645, 8564, 1366, 318, 18832, 13]",0.5,468,sast_risk,179,Logging data can expose sensitive information. Ensure no sensitive data is logged.,Low,457,        :param timeout:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 26827, 25]"
‚ö†Ô∏è SAST Risk (Low): Logging data can expose sensitive information. Ensure no sensitive data is logged.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 1366, 460, 15651, 8564, 1321, 13, 48987, 645, 8564, 1366, 318, 18832, 13]",0.5,492,sast_risk,196,Logging data can expose sensitive information. Ensure no sensitive data is logged.,Low,468,                if entity_id in has_got:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 9312, 62, 312, 287, 468, 62, 23442, 25]"
"üß† ML Signal: Checks for duplicate listeners before adding, indicating a pattern of managing unique subscribers","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 23418, 22054, 878, 4375, 11, 12739, 257, 3912, 286, 11149, 3748, 18327]",0.5,492,ml_signal,204,"Checks for duplicate listeners before adding, indicating a pattern of managing unique subscribers",,492,,[]
"üß† ML Signal: Immediate callback if data is already loaded, showing a pattern of eager notification","[8582, 100, 254, 10373, 26484, 25, 1846, 13857, 23838, 611, 1366, 318, 1541, 9639, 11, 4478, 257, 3912, 286, 11069, 14483]",0.5,521,ml_signal,207,"Immediate callback if data is already loaded, showing a pattern of eager notification",,492,                    filters = self.filters + added_filter,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 796, 2116, 13, 10379, 1010, 1343, 2087, 62, 24455]"
üß† ML Signal: Checks for membership before removing an item from a list,"[8582, 100, 254, 10373, 26484, 25, 47719, 329, 9931, 878, 10829, 281, 2378, 422, 257, 1351]",0.5,545,ml_signal,209,Checks for membership before removing an item from a list,,521,                    filters = added_filter,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 796, 2087, 62, 24455]"
‚úÖ Best Practice: Safely removes an item from a list after checking its existence,"[26486, 227, 6705, 19939, 25, 19978, 306, 20694, 281, 2378, 422, 257, 1351, 706, 10627, 663, 6224]",0.5,575,best_practice,211,Safely removes an item from a list after checking its existence,,545,                added_df = self.data_schema.query_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2087, 62, 7568, 796, 2116, 13, 7890, 62, 15952, 2611, 13, 22766, 62, 7890, 7]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",1.0,605,best_practice,211,Method should have a docstring explaining its purpose,,575,                added_df = self.data_schema.query_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2087, 62, 7568, 796, 2116, 13, 7890, 62, 15952, 2611, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Usage of pandas utility function to check for null values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 10361, 2163, 284, 2198, 329, 9242, 3815]",1.0,631,ml_signal,213,Usage of pandas utility function to check for null values,,605,"                    columns=self.columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 944, 13, 28665, 82, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse if pd_is_not_null is not correctly implemented,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 9380, 9177]",1.0,660,sast_risk,214,Potential misuse if pd_is_not_null is not correctly implemented,Low,631,"                    end_timestamp=to_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 1462, 62, 16514, 27823, 11]"
"‚úÖ Best Practice: Use of __name__ == ""__main__"" to ensure code only runs when the script is executed directly","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 6624, 366, 834, 12417, 834, 1, 284, 4155, 2438, 691, 4539, 618, 262, 4226, 318, 10945, 3264]",0.5,684,best_practice,215,"Use of __name__ == ""__main__"" to ensure code only runs when the script is executed directly",,660,"                    filters=filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11]"
üß† ML Signal: Usage of specific data schemas and entity schemas,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 1366, 3897, 5356, 290, 9312, 3897, 5356]",0.5,717,ml_signal,217,Usage of specific data schemas and entity schemas,,684,"                    index=[self.category_field, self.time_field],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 41888, 944, 13, 22872, 62, 3245, 11, 2116, 13, 2435, 62, 3245, 4357]"
üß† ML Signal: Method call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2176, 10007]",0.5,749,ml_signal,225,Method call with specific parameters,,717,"                    #: if got data,just move to another entity_id","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 25, 611, 1392, 1366, 11, 3137, 1445, 284, 1194, 9312, 62, 312]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,781,best_practice,225,Use of __all__ to define public API of the module,,749,"                    #: if got data,just move to another entity_id","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 25, 611, 1392, 1366, 11, 3137, 1445, 284, 1194, 9312, 62, 312]"

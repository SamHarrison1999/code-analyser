[
  {
    "line": 12,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u2705 Best Practice: Consider using new-style classes by inheriting from 'object' for Python 2 compatibility.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 0,
    "end_token": 18,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      649,
      12,
      7635,
      6097,
      416,
      10639,
      1780,
      422,
      705,
      15252,
      6,
      329,
      11361,
      362,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using new-style classes by inheriting from 'object' for Python 2 compatibility."
  },
  {
    "line": 13,
    "text": "from zvt.utils.time_utils import to_pd_timestamp, now_pd_timestamp",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the parameters and return type",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      11,
      783,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 18,
    "end_token": 41,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the parameters and return type"
  },
  {
    "line": 17,
    "text": "    def on_data_loaded(self, data: pd.DataFrame) -> object:",
    "annotation": "\u2705 Best Practice: Raise NotImplementedError to indicate that this method should be overridden",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      7890,
      62,
      14578,
      7,
      944,
      11,
      1366,
      25,
      279,
      67,
      13,
      6601,
      19778,
      8,
      4613,
      2134,
      25
    ],
    "start_token": 41,
    "end_token": 64,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35123,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      326,
      428,
      2446,
      815,
      307,
      23170,
      4651
    ],
    "label": "best_practice",
    "reason": "Raise NotImplementedError to indicate that this method should be overridden"
  },
  {
    "line": 17,
    "text": "    def on_data_loaded(self, data: pd.DataFrame) -> object:",
    "annotation": "\u2705 Best Practice: Method docstring is present but should describe parameters and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      7890,
      62,
      14578,
      7,
      944,
      11,
      1366,
      25,
      279,
      67,
      13,
      6601,
      19778,
      8,
      4613,
      2134,
      25
    ],
    "start_token": 64,
    "end_token": 87,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      2205,
      8841,
      318,
      1944,
      475,
      815,
      6901,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Method docstring is present but should describe parameters and return value"
  },
  {
    "line": 18,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for parameters and return value improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 87,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      10007,
      290,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for parameters and return value improves code readability"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\u2705 Best Practice: Placeholder for method implementation indicates intentional design",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 95,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8474,
      13829,
      329,
      2446,
      7822,
      9217,
      21391,
      1486
    ],
    "label": "best_practice",
    "reason": "Placeholder for method implementation indicates intentional design"
  },
  {
    "line": 22,
    "text": "        raise NotImplementedError",
    "annotation": "\u2705 Best Practice: Consider adding a docstring description for the return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 95,
    "end_token": 108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      6764,
      329,
      262,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring description for the return value"
  },
  {
    "line": 28,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Implement the function or raise NotImplementedError to indicate it's a placeholder",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 108,
    "end_token": 116,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      262,
      2163,
      393,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      340,
      338,
      257,
      46076
    ],
    "label": "best_practice",
    "reason": "Implement the function or raise NotImplementedError to indicate it's a placeholder"
  },
  {
    "line": 28,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Class should inherit from 'object' explicitly in Python 2.x for new-style classes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 116,
    "end_token": 124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      705,
      15252,
      6,
      11777,
      287,
      11361,
      362,
      13,
      87,
      329,
      649,
      12,
      7635,
      6097
    ],
    "label": "best_practice",
    "reason": "Class should inherit from 'object' explicitly in Python 2.x for new-style classes"
  },
  {
    "line": 29,
    "text": "        raise NotImplementedError",
    "annotation": "\ud83e\udde0 ML Signal: Custom class definition, useful for model training on class usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 124,
    "end_token": 137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      1398,
      6770,
      11,
      4465,
      329,
      2746,
      3047,
      319,
      1398,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Custom class definition, useful for model training on class usage patterns"
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logger instantiation pattern, useful for identifying logging practices",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 137,
    "end_token": 137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      1362,
      9113,
      3920,
      3912,
      11,
      4465,
      329,
      13720,
      18931,
      6593
    ],
    "label": "ml_signal",
    "reason": "Logger instantiation pattern, useful for identifying logging practices"
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __name__ ensures logger is named after the module, aiding in debugging",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 137,
    "end_token": 137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      19047,
      49706,
      318,
      3706,
      706,
      262,
      8265,
      11,
      37221,
      287,
      28769
    ],
    "label": "best_practice",
    "reason": "Use of __name__ ensures logger is named after the module, aiding in debugging"
  },
  {
    "line": 50,
    "text": "        exchanges: List[str] = None,",
    "annotation": "\u2705 Best Practice: Use of logging for debugging and monitoring",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      25,
      7343,
      58,
      2536,
      60,
      796,
      6045,
      11
    ],
    "start_token": 137,
    "end_token": 153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      28769,
      290,
      9904
    ],
    "label": "best_practice",
    "reason": "Use of logging for debugging and monitoring"
  },
  {
    "line": 58,
    "text": "        level: IntervalLevel = None,",
    "annotation": "\u2705 Best Practice: Converting timestamps to a consistent format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      25,
      4225,
      2100,
      4971,
      796,
      6045,
      11
    ],
    "start_token": 153,
    "end_token": 168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      4628,
      395,
      9430,
      284,
      257,
      6414,
      5794
    ],
    "label": "best_practice",
    "reason": "Converting timestamps to a consistent format"
  },
  {
    "line": 68,
    "text": "        self.entity_provider = entity_provider",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType if get_entities returns None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26858,
      62,
      15234,
      1304,
      796,
      9312,
      62,
      15234,
      1304
    ],
    "start_token": 168,
    "end_token": 186,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      611,
      651,
      62,
      298,
      871,
      5860,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType if get_entities returns None"
  },
  {
    "line": 75,
    "text": "        self.entity_ids = entity_ids",
    "annotation": "\u2705 Best Practice: Encapsulating level in IntervalLevel for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26858,
      62,
      2340,
      796,
      9312,
      62,
      2340
    ],
    "start_token": 186,
    "end_token": 202,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      8306,
      1241,
      287,
      4225,
      2100,
      4971,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Encapsulating level in IntervalLevel for consistency"
  },
  {
    "line": 82,
    "text": "            if pd_is_not_null(df):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of eval can lead to code injection vulnerabilities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 202,
    "end_token": 225,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      5418,
      460,
      1085,
      284,
      2438,
      16954,
      23805
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of eval can lead to code injection vulnerabilities"
  },
  {
    "line": 84,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of eval can lead to code injection vulnerabilities",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 225,
    "end_token": 225,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      5418,
      460,
      1085,
      284,
      2438,
      16954,
      23805
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of eval can lead to code injection vulnerabilities"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensuring essential columns are included",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 225,
    "end_token": 225,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      870,
      6393,
      15180,
      389,
      3017
    ],
    "label": "best_practice",
    "reason": "Ensuring essential columns are included"
  },
  {
    "line": 90,
    "text": "            self.level = IntervalLevel(level)",
    "annotation": "\ud83e\udde0 ML Signal: Tracking data listeners can indicate event-driven architecture",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5715,
      796,
      4225,
      2100,
      4971,
      7,
      5715,
      8
    ],
    "start_token": 225,
    "end_token": 246,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      1366,
      22054,
      460,
      7603,
      1785,
      12,
      15808,
      10959
    ],
    "label": "ml_signal",
    "reason": "Tracking data listeners can indicate event-driven architecture"
  },
  {
    "line": 90,
    "text": "            self.level = IntervalLevel(level)",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas DataFrame for data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5715,
      796,
      4225,
      2100,
      4971,
      7,
      5715,
      8
    ],
    "start_token": 246,
    "end_token": 267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      6060,
      19778,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of pandas DataFrame for data manipulation"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Automatic data loading on initialization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 267,
    "end_token": 267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30199,
      1366,
      11046,
      319,
      37588
    ],
    "label": "ml_signal",
    "reason": "Automatic data loading on initialization"
  },
  {
    "line": 90,
    "text": "            self.level = IntervalLevel(level)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over entity_ids to load data for each entity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5715,
      796,
      4225,
      2100,
      4971,
      7,
      5715,
      8
    ],
    "start_token": 267,
    "end_token": 288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      9312,
      62,
      2340,
      284,
      3440,
      1366,
      329,
      1123,
      9312
    ],
    "label": "ml_signal",
    "reason": "Iterating over entity_ids to load data for each entity"
  },
  {
    "line": 98,
    "text": "        self.category_col = eval(\"self.data_schema.{}\".format(self.category_field))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if data_schema.query_data does not handle SQL injection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      22872,
      62,
      4033,
      796,
      5418,
      7203,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      13,
      90,
      92,
      1911,
      18982,
      7,
      944,
      13,
      22872,
      62,
      3245,
      4008
    ],
    "start_token": 288,
    "end_token": 321,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      1366,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      857,
      407,
      5412,
      16363,
      16954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if data_schema.query_data does not handle SQL injection"
  },
  {
    "line": 102,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.concat to combine DataFrames",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 321,
    "end_token": 321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Using pd.concat to combine DataFrames"
  },
  {
    "line": 104,
    "text": "            # always add category_column and time_field for normalizing",
    "annotation": "\u2705 Best Practice: Sorting DataFrame by index for consistent ordering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1464,
      751,
      6536,
      62,
      28665,
      290,
      640,
      62,
      3245,
      329,
      3487,
      2890
    ],
    "start_token": 321,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      6060,
      19778,
      416,
      6376,
      329,
      6414,
      16216
    ],
    "label": "best_practice",
    "reason": "Sorting DataFrame by index for consistent ordering"
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of dictionary to organize parameters improves readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 345,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      284,
      16481,
      10007,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of dictionary to organize parameters improves readability and maintainability"
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of conditional expression for concise assignment",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 345,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26340,
      5408,
      329,
      35327,
      16237
    ],
    "label": "best_practice",
    "reason": "Use of conditional expression for concise assignment"
  },
  {
    "line": 120,
    "text": "                index=[self.category_field, self.time_field],",
    "annotation": "\ud83e\udde0 ML Signal: Logging parameters can be useful for monitoring and debugging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      41888,
      944,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      4357
    ],
    "start_token": 345,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      10007,
      460,
      307,
      4465,
      329,
      9904,
      290,
      28769
    ],
    "label": "ml_signal",
    "reason": "Logging parameters can be useful for monitoring and debugging"
  },
  {
    "line": 120,
    "text": "                index=[self.category_field, self.time_field],",
    "annotation": "\ud83e\udde0 ML Signal: Data loading pattern, useful for understanding data access patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      41888,
      944,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      4357
    ],
    "start_token": 374,
    "end_token": 403,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      11046,
      3912,
      11,
      4465,
      329,
      4547,
      1366,
      1895,
      7572
    ],
    "label": "ml_signal",
    "reason": "Data loading pattern, useful for understanding data access patterns"
  },
  {
    "line": 138,
    "text": "            columns=self.columns,",
    "annotation": "\ud83e\udde0 ML Signal: Logging execution time can be useful for performance monitoring",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      944,
      13,
      28665,
      82,
      11
    ],
    "start_token": 403,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      9706,
      640,
      460,
      307,
      4465,
      329,
      2854,
      9904
    ],
    "label": "ml_signal",
    "reason": "Logging execution time can be useful for performance monitoring"
  },
  {
    "line": 138,
    "text": "            columns=self.columns,",
    "annotation": "\ud83e\udde0 ML Signal: Use of event listeners for data loading completion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      944,
      13,
      28665,
      82,
      11
    ],
    "start_token": 421,
    "end_token": 439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1785,
      22054,
      329,
      1366,
      11046,
      11939
    ],
    "label": "ml_signal",
    "reason": "Use of event listeners for data loading completion"
  },
  {
    "line": 138,
    "text": "            columns=self.columns,",
    "annotation": "\u2705 Best Practice: Consider specifying a more precise return type instead of 'object' for better type clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      944,
      13,
      28665,
      82,
      11
    ],
    "start_token": 439,
    "end_token": 457,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      31577,
      257,
      517,
      7141,
      1441,
      2099,
      2427,
      286,
      705,
      15252,
      6,
      329,
      1365,
      2099,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Consider specifying a more precise return type instead of 'object' for better type clarity."
  },
  {
    "line": 179,
    "text": "        :param timeout:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging data can expose sensitive information. Ensure no sensitive data is logged.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      26827,
      25
    ],
    "start_token": 457,
    "end_token": 468,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      1366,
      460,
      15651,
      8564,
      1321,
      13,
      48987,
      645,
      8564,
      1366,
      318,
      18832,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging data can expose sensitive information. Ensure no sensitive data is logged."
  },
  {
    "line": 196,
    "text": "                if entity_id in has_got:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging data can expose sensitive information. Ensure no sensitive data is logged.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      9312,
      62,
      312,
      287,
      468,
      62,
      23442,
      25
    ],
    "start_token": 468,
    "end_token": 492,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      1366,
      460,
      15651,
      8564,
      1321,
      13,
      48987,
      645,
      8564,
      1366,
      318,
      18832,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging data can expose sensitive information. Ensure no sensitive data is logged."
  },
  {
    "line": 204,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checks for duplicate listeners before adding, indicating a pattern of managing unique subscribers",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 492,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      23418,
      22054,
      878,
      4375,
      11,
      12739,
      257,
      3912,
      286,
      11149,
      3748,
      18327
    ],
    "label": "ml_signal",
    "reason": "Checks for duplicate listeners before adding, indicating a pattern of managing unique subscribers"
  },
  {
    "line": 207,
    "text": "                    filters = self.filters + added_filter",
    "annotation": "\ud83e\udde0 ML Signal: Immediate callback if data is already loaded, showing a pattern of eager notification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      796,
      2116,
      13,
      10379,
      1010,
      1343,
      2087,
      62,
      24455
    ],
    "start_token": 492,
    "end_token": 521,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1846,
      13857,
      23838,
      611,
      1366,
      318,
      1541,
      9639,
      11,
      4478,
      257,
      3912,
      286,
      11069,
      14483
    ],
    "label": "ml_signal",
    "reason": "Immediate callback if data is already loaded, showing a pattern of eager notification"
  },
  {
    "line": 209,
    "text": "                    filters = added_filter",
    "annotation": "\ud83e\udde0 ML Signal: Checks for membership before removing an item from a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      796,
      2087,
      62,
      24455
    ],
    "start_token": 521,
    "end_token": 545,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      9931,
      878,
      10829,
      281,
      2378,
      422,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Checks for membership before removing an item from a list"
  },
  {
    "line": 211,
    "text": "                added_df = self.data_schema.query_data(",
    "annotation": "\u2705 Best Practice: Safely removes an item from a list after checking its existence",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2087,
      62,
      7568,
      796,
      2116,
      13,
      7890,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 545,
    "end_token": 575,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      19978,
      306,
      20694,
      281,
      2378,
      422,
      257,
      1351,
      706,
      10627,
      663,
      6224
    ],
    "label": "best_practice",
    "reason": "Safely removes an item from a list after checking its existence"
  },
  {
    "line": 211,
    "text": "                added_df = self.data_schema.query_data(",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2087,
      62,
      7568,
      796,
      2116,
      13,
      7890,
      62,
      15952,
      2611,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 575,
    "end_token": 605,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose"
  },
  {
    "line": 213,
    "text": "                    columns=self.columns,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas utility function to check for null values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      944,
      13,
      28665,
      82,
      11
    ],
    "start_token": 605,
    "end_token": 631,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      10361,
      2163,
      284,
      2198,
      329,
      9242,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas utility function to check for null values"
  },
  {
    "line": 214,
    "text": "                    end_timestamp=to_timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse if pd_is_not_null is not correctly implemented",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      1462,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 631,
    "end_token": 660,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      9380,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse if pd_is_not_null is not correctly implemented"
  },
  {
    "line": 215,
    "text": "                    filters=filters,",
    "annotation": "\u2705 Best Practice: Use of __name__ == \"__main__\" to ensure code only runs when the script is executed directly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      10379,
      1010,
      11
    ],
    "start_token": 660,
    "end_token": 684,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      6624,
      366,
      834,
      12417,
      834,
      1,
      284,
      4155,
      2438,
      691,
      4539,
      618,
      262,
      4226,
      318,
      10945,
      3264
    ],
    "label": "best_practice",
    "reason": "Use of __name__ == \"__main__\" to ensure code only runs when the script is executed directly"
  },
  {
    "line": 217,
    "text": "                    index=[self.category_field, self.time_field],",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific data schemas and entity schemas",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      41888,
      944,
      13,
      22872,
      62,
      3245,
      11,
      2116,
      13,
      2435,
      62,
      3245,
      4357
    ],
    "start_token": 684,
    "end_token": 717,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      1366,
      3897,
      5356,
      290,
      9312,
      3897,
      5356
    ],
    "label": "ml_signal",
    "reason": "Usage of specific data schemas and entity schemas"
  },
  {
    "line": 225,
    "text": "                    #: if got data,just move to another entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Method call with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      25,
      611,
      1392,
      1366,
      11,
      3137,
      1445,
      284,
      1194,
      9312,
      62,
      312
    ],
    "start_token": 717,
    "end_token": 749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call with specific parameters"
  },
  {
    "line": 225,
    "text": "                    #: if got data,just move to another entity_id",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      25,
      611,
      1392,
      1366,
      11,
      3137,
      1445,
      284,
      1194,
      9312,
      62,
      312
    ],
    "start_token": 749,
    "end_token": 781,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",1.0,0,ml_signal,7,Importing specific modules from a package indicates usage patterns and dependencies,,0,,[]
✅ Best Practice: Use of Enum for defining a set of named constants improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 16215, 257, 900, 286, 3706, 38491, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,42,best_practice,17,Use of Enum for defining a set of named constants improves code readability and maintainability.,,0,"from zvt.utils.pd_utils import pd_is_not_null, drop_continue_duplicate, is_filter_result_df, is_score_result_df","[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423, 11, 4268, 62, 43043, 62, 646, 489, 5344, 11, 318, 62, 24455, 62, 20274, 62, 7568, 11, 318, 62, 26675, 62, 20274, 62, 7568]"
✅ Best Practice: Defining specific string values for each enum member enhances clarity and prevents errors.,"[26486, 227, 6705, 19939, 25, 2896, 3191, 2176, 4731, 3815, 329, 1123, 33829, 2888, 32479, 16287, 290, 15174, 8563, 13]",0.5,58,best_practice,19,Defining specific string values for each enum member enhances clarity and prevents errors.,,42,from zvt.utils.time_utils import to_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823]"
"✅ Best Practice: Inheriting from 'object' is redundant in Python 3, as all classes are new-style by default.","[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 705, 15252, 6, 318, 30806, 287, 11361, 513, 11, 355, 477, 6097, 389, 649, 12, 7635, 416, 4277, 13]",0.5,65,best_practice,22,"Inheriting from 'object' is redundant in Python 3, as all classes are new-style by default.",,58,class TargetType(Enum):,"[4871, 12744, 6030, 7, 4834, 388, 2599]"
✅ Best Practice: Use of __init__ method to initialize instance variables,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 15003, 834, 2446, 284, 41216, 4554, 9633]",0.5,72,best_practice,22,Use of __init__ method to initialize instance variables,,65,class TargetType(Enum):,"[4871, 12744, 6030, 7, 4834, 388, 2599]"
✅ Best Practice: Using a logger with the class name for better traceability,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 351, 262, 1398, 1438, 329, 1365, 12854, 1799]",0.5,80,best_practice,24,Using a logger with the class name for better traceability,,72,"    negative = ""negative""","[220, 220, 220, 4633, 796, 366, 31591, 1]"
"🧠 ML Signal: Initialization of an empty list, indicating potential dynamic data storage","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 281, 6565, 1351, 11, 12739, 2785, 8925, 1366, 6143]",0.5,80,ml_signal,26,"Initialization of an empty list, indicating potential dynamic data storage",,80,,[]
✅ Best Practice: Class definition should include a docstring explaining its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 11170, 663, 4007, 290, 8748, 13]",0.5,80,best_practice,26,Class definition should include a docstring explaining its purpose and usage.,,80,,[]
✅ Best Practice: Define an explicit constructor for the class,"[26486, 227, 6705, 19939, 25, 2896, 500, 281, 7952, 23772, 329, 262, 1398]",0.5,80,best_practice,26,Define an explicit constructor for the class,,80,,[]
✅ Best Practice: Call the superclass constructor to ensure proper initialization,"[26486, 227, 6705, 19939, 25, 4889, 262, 2208, 4871, 23772, 284, 4155, 1774, 37588]",1.0,86,best_practice,28,Call the superclass constructor to ensure proper initialization,,80,class Indicator(object):,"[4871, 1423, 26407, 7, 15252, 2599]"
"🧠 ML Signal: Checks for single group in grouped data, indicating special handling for single entities","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 2060, 1448, 287, 32824, 1366, 11, 12739, 2041, 9041, 329, 2060, 12066]",0.5,98,ml_signal,40,"Checks for single group in grouped data, indicating special handling for single entities",,86,        input_df format::,"[220, 220, 220, 220, 220, 220, 220, 5128, 62, 7568, 5794, 3712]"
"🧠 ML Signal: Extracts entity_id from index, indicating entity-based transformation","[8582, 100, 254, 10373, 26484, 25, 29677, 82, 9312, 62, 312, 422, 6376, 11, 12739, 9312, 12, 3106, 13389]",0.5,151,ml_signal,42,"Extracts entity_id from index, indicating entity-based transformation",,98,                                      col1    col2    col3    ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 951, 16, 220, 220, 220, 951, 17, 220, 220, 220, 951, 18, 220, 220, 220, 2644]"
✅ Best Practice: Resetting index for easier manipulation of DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 4577, 17512, 286, 6060, 19778]",0.5,210,best_practice,44,Resetting index for easier manipulation of DataFrame,,151,                                      1.2     0.5     0.3     ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 17, 220, 220, 220, 220, 657, 13, 20, 220, 220, 220, 220, 657, 13, 18, 220, 220, 220, 220, 2644]"
🧠 ML Signal: Calls a method to transform data for a single entity,"[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2446, 284, 6121, 1366, 329, 257, 2060, 9312]",0.5,269,ml_signal,45,Calls a method to transform data for a single entity,,210,                                      1.0     0.7     0.2     ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 15, 220, 220, 220, 220, 657, 13, 22, 220, 220, 220, 220, 657, 13, 17, 220, 220, 220, 220, 2644]"
✅ Best Practice: Adds entity_id back to DataFrame for clarity and consistency,"[26486, 227, 6705, 19939, 25, 34333, 9312, 62, 312, 736, 284, 6060, 19778, 329, 16287, 290, 15794]",0.5,269,best_practice,48,Adds entity_id back to DataFrame for clarity and consistency,,269,,[]
✅ Best Practice: Sets and swaps index levels for consistent DataFrame structure,"[26486, 227, 6705, 19939, 25, 21394, 290, 43997, 6376, 2974, 329, 6414, 6060, 19778, 4645]",0.5,282,best_practice,49,Sets and swaps index levels for consistent DataFrame structure,,269,        :param input_df:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5128, 62, 7568, 25]"
"🧠 ML Signal: Applies transformation to each group, indicating batch processing","[8582, 100, 254, 10373, 26484, 25, 2034, 13508, 13389, 284, 1123, 1448, 11, 12739, 15458, 7587]",0.5,295,ml_signal,49,"Applies transformation to each group, indicating batch processing",,282,        :param input_df:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5128, 62, 7568, 25]"
✅ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,308,best_practice,49,Include a docstring to describe the function's purpose and parameters,,295,        :param input_df:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5128, 62, 7568, 25]"
🧠 ML Signal: Function signature with DataFrame parameter and return type,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 6060, 19778, 11507, 290, 1441, 2099]",0.5,317,ml_signal,61,Function signature with DataFrame parameter and return type,,308,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"✅ Best Practice: Class docstring is missing, consider adding one to describe the purpose and usage of the class.","[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 318, 4814, 11, 2074, 4375, 530, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398, 13]",0.5,326,best_practice,61,"Class docstring is missing, consider adding one to describe the purpose and usage of the class.",,317,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",1.0,326,best_practice,63,Use of type hints for function parameters and return type,,326,,[]
✅ Best Practice: Explicitly calling the superclass initializer,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 4238, 7509]",1.0,366,best_practice,68,Explicitly calling the superclass initializer,,326,                         col1    col2    col3    ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 951, 16, 220, 220, 220, 951, 17, 220, 220, 220, 951, 18, 220, 220, 220, 2644]"
🧠 ML Signal: Use of a parameter to configure object behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 11507, 284, 17425, 2134, 4069]",1.0,378,ml_signal,69,Use of a parameter to configure object behavior,,366,            timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41033]"
"🧠 ML Signal: Checks if the DataFrame has only one group, indicating single entity processing","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 262, 6060, 19778, 468, 691, 530, 1448, 11, 12739, 2060, 9312, 7587]",1.0,389,ml_signal,76,"Checks if the DataFrame has only one group, indicating single entity processing",,378,        :param df:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 47764, 25]"
🧠 ML Signal: Extracts entity_id from the DataFrame index,"[8582, 100, 254, 10373, 26484, 25, 29677, 82, 9312, 62, 312, 422, 262, 6060, 19778, 6376]",1.0,397,ml_signal,78,Extracts entity_id from the DataFrame index,,389,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Resetting index for easier manipulation of DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 4577, 17512, 286, 6060, 19778]",1.0,397,best_practice,80,Resetting index for easier manipulation of DataFrame,,397,,[]
⚠️ SAST Risk (Low): Assumes acc_df has the same structure as input_df without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 697, 62, 7568, 468, 262, 976, 4645, 355, 5128, 62, 7568, 1231, 21201]",1.0,405,sast_risk,82,Assumes acc_df has the same structure as input_df without validation,Low,397,class Accumulator(Indicator):,"[4871, 6366, 388, 8927, 7, 5497, 26407, 2599]"
✅ Best Practice: Resetting index for easier manipulation of DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 4577, 17512, 286, 6060, 19778]",1.0,413,best_practice,84,Resetting index for easier manipulation of DataFrame,,405,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Calls a method to process a single entity's data,"[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2446, 284, 1429, 257, 2060, 9312, 338, 1366]",1.0,426,ml_signal,88,Calls a method to process a single entity's data,,413,        super().__init__(),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 3419]"
⚠️ SAST Risk (Low): Assumes ret_df is not None without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 1005, 62, 7568, 318, 407, 6045, 1231, 21201]",1.0,442,sast_risk,89,Assumes ret_df is not None without validation,Low,426,        self.acc_window = acc_window,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4134, 62, 17497, 796, 697, 62, 17497]"
✅ Best Practice: Adds entity_id to DataFrame for traceability,"[26486, 227, 6705, 19939, 25, 34333, 9312, 62, 312, 284, 6060, 19778, 329, 12854, 1799]",1.0,450,best_practice,92,Adds entity_id to DataFrame for traceability,,442,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Sets and swaps index levels for consistent DataFrame structure,"[26486, 227, 6705, 19939, 25, 21394, 290, 43997, 6376, 2974, 329, 6414, 6060, 19778, 4645]",1.0,465,best_practice,94,Sets and swaps index levels for consistent DataFrame structure,,450,        :param input_df: new input,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5128, 62, 7568, 25, 649, 5128]"
✅ Best Practice: Ensures entity_id is present in the DataFrame,"[26486, 227, 6705, 19939, 25, 48221, 942, 9312, 62, 312, 318, 1944, 287, 262, 6060, 19778]",1.0,481,best_practice,96,Ensures entity_id is present in the DataFrame,,465,        :param states: current states of the entity,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 2585, 25, 1459, 2585, 286, 262, 9312]"
🧠 ML Signal: Initializes a dictionary to store states for multiple entities,"[8582, 100, 254, 10373, 26484, 25, 20768, 4340, 257, 22155, 284, 3650, 2585, 329, 3294, 12066]",1.0,498,ml_signal,100,Initializes a dictionary to store states for multiple entities,,481,        if len(g.groups) == 1:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 70, 13, 24432, 8, 6624, 352, 25]"
"🧠 ML Signal: Checks for non-null DataFrame, indicating data validation pattern","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 1729, 12, 8423, 6060, 19778, 11, 12739, 1366, 21201, 3912]",1.0,513,ml_signal,94,"Checks for non-null DataFrame, indicating data validation pattern",,498,        :param input_df: new input,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5128, 62, 7568, 25, 649, 5128]"
"🧠 ML Signal: Grouping data by a specific level, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 4912, 278, 1366, 416, 257, 2176, 1241, 11, 2219, 287, 1366, 7587, 8861]",1.0,529,ml_signal,96,"Grouping data by a specific level, common in data processing tasks",,513,        :param states: current states of the entity,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 2585, 25, 1459, 2585, 286, 262, 9312]"
"🧠 ML Signal: Conditional logic based on group membership, indicating data filtering","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1448, 9931, 11, 12739, 1366, 25431]",0.5,549,ml_signal,99,"Conditional logic based on group membership, indicating data filtering",,529,        g = input_df.groupby(level=0),"[220, 220, 220, 220, 220, 220, 220, 308, 796, 5128, 62, 7568, 13, 8094, 1525, 7, 5715, 28, 15, 8]"
"🧠 ML Signal: Accessing a specific group, common in data analysis","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 1448, 11, 2219, 287, 1366, 3781]",0.5,566,ml_signal,100,"Accessing a specific group, common in data analysis",,549,        if len(g.groups) == 1:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 70, 13, 24432, 8, 6624, 352, 25]"
"🧠 ML Signal: Checks for non-null DataFrame, indicating data validation pattern","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 1729, 12, 8423, 6060, 19778, 11, 12739, 1366, 21201, 3912]",1.0,595,ml_signal,103,"Checks for non-null DataFrame, indicating data validation pattern",,566,"            df = input_df.reset_index(level=0, drop=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 5128, 62, 7568, 13, 42503, 62, 9630, 7, 5715, 28, 15, 11, 4268, 28, 17821, 8]"
✅ Best Practice: Resetting index for cleaner DataFrame manipulation,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 21723, 6060, 19778, 17512]",0.5,624,best_practice,103,Resetting index for cleaner DataFrame manipulation,,595,"            df = input_df.reset_index(level=0, drop=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 5128, 62, 7568, 13, 42503, 62, 9630, 7, 5715, 28, 15, 11, 4268, 28, 17821, 8]"
"🧠 ML Signal: Function call with multiple parameters, indicating complex data processing","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 12739, 3716, 1366, 7587]",1.0,649,ml_signal,109,"Function call with multiple parameters, indicating complex data processing",,624,            if pd_is_not_null(ret_df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 1186, 62, 7568, 2599]"
"🧠 ML Signal: Updating a dictionary with new state, indicating state management","[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 257, 22155, 351, 649, 1181, 11, 12739, 1181, 4542]",1.0,670,ml_signal,114,"Updating a dictionary with new state, indicating state management",,649,"            return None, {entity_id: state}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045, 11, 1391, 26858, 62, 312, 25, 1181, 92]"
"🧠 ML Signal: Applying a function over a group, common in data processing","[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 625, 257, 1448, 11, 2219, 287, 1366, 7587]",1.0,691,ml_signal,114,"Applying a function over a group, common in data processing",,670,"            return None, {entity_id: state}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045, 11, 1391, 26858, 62, 312, 25, 1181, 92]"
✅ Best Practice: Returning multiple values for better function utility,"[26486, 227, 6705, 19939, 25, 42882, 3294, 3815, 329, 1365, 2163, 10361]",1.0,708,best_practice,127,Returning multiple values for better function utility,,691,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,729,best_practice,114,Include a docstring to describe the function's purpose and parameters,,708,"            return None, {entity_id: state}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045, 11, 1391, 26858, 62, 312, 25, 1181, 92]"
✅ Best Practice: Return statement is clear and matches the function's documented return type,"[26486, 227, 6705, 19939, 25, 8229, 2643, 318, 1598, 290, 7466, 262, 2163, 338, 12395, 1441, 2099]",0.5,755,best_practice,128,Return statement is clear and matches the function's documented return type,,729,                    acc_one_df = None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 505, 62, 7568, 796, 6045]"
✅ Best Practice: Using a logger with the class name improves traceability and debugging.,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 351, 262, 1398, 1438, 19575, 12854, 1799, 290, 28769, 13]",0.5,755,best_practice,129,Using a logger with the class name improves traceability and debugging.,,755,,[]
✅ Best Practice: Include type annotations for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 40348, 2099, 37647, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,790,best_practice,132,Include type annotations for function parameters and return type for better readability and maintainability.,,755,"                    df=x.reset_index(level=0, drop=True),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 28, 87, 13, 42503, 62, 9630, 7, 5715, 28, 15, 11, 4268, 28, 17821, 828]"
🧠 ML Signal: Directly returning the input DataFrame without processing may indicate a placeholder or a stub for future implementation.,"[8582, 100, 254, 10373, 26484, 25, 4128, 306, 8024, 262, 5128, 6060, 19778, 1231, 7587, 743, 7603, 257, 46076, 393, 257, 17071, 329, 2003, 7822, 13]",0.5,809,ml_signal,138,Directly returning the input DataFrame without processing may indicate a placeholder or a stub for future implementation.,,790,                return one_result,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 530, 62, 20274]"
🧠 ML Signal: Checking class name against a list of specific names indicates a pattern for class registration.,"[8582, 100, 254, 10373, 26484, 25, 39432, 1398, 1438, 1028, 257, 1351, 286, 2176, 3891, 9217, 257, 3912, 329, 1398, 9352, 13]",0.5,828,ml_signal,138,Checking class name against a list of specific names indicates a pattern for class registration.,,809,                return one_result,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 530, 62, 20274]"
⚠️ SAST Risk (Low): Potential risk if `zvt_context` is not properly initialized or if `factor_cls_registry` is not a dictionary.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 89, 36540, 62, 22866, 63, 318, 407, 6105, 23224, 393, 611, 4600, 31412, 62, 565, 82, 62, 2301, 4592, 63, 318, 407, 257, 22155, 13]",1.0,856,sast_risk,140,Potential risk if `zvt_context` is not properly initialized or if `factor_cls_registry` is not a dictionary.,Low,828,            ret_df = g.apply(lambda x: cal_acc(x)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 62, 7568, 796, 308, 13, 39014, 7, 50033, 2124, 25, 2386, 62, 4134, 7, 87, 4008]"
🧠 ML Signal: Dynamic registration of classes into a global context is a common pattern in plugin systems.,"[8582, 100, 254, 10373, 26484, 25, 26977, 9352, 286, 6097, 656, 257, 3298, 4732, 318, 257, 2219, 3912, 287, 13877, 3341, 13]",0.5,875,ml_signal,141,Dynamic registration of classes into a global context is a common pattern in plugin systems.,,856,"            return ret_df, new_states","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1005, 62, 7568, 11, 649, 62, 27219]"
"✅ Best Practice: Class docstring is missing, consider adding one for better documentation.","[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 318, 4814, 11, 2074, 4375, 530, 329, 1365, 10314, 13]",1.0,894,best_practice,141,"Class docstring is missing, consider adding one for better documentation.",,875,"            return ret_df, new_states","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1005, 62, 7568, 11, 649, 62, 27219]"
✅ Best Practice: Use of __new__ method to customize class creation,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3605, 834, 2446, 284, 24184, 1398, 6282]",1.0,913,best_practice,141,Use of __new__ method to customize class creation,,894,"            return ret_df, new_states","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1005, 62, 7568, 11, 649, 62, 27219]"
✅ Best Practice: Using type.__new__ to create a new class instance,"[26486, 227, 6705, 19939, 25, 8554, 2099, 13, 834, 3605, 834, 284, 2251, 257, 649, 1398, 4554]",0.5,958,best_practice,143,Using type.__new__ to create a new class instance,,913,"    def acc_one(self, entity_id, df: pd.DataFrame, acc_df: pd.DataFrame, state: dict) -> (pd.DataFrame, dict):","[220, 220, 220, 825, 697, 62, 505, 7, 944, 11, 9312, 62, 312, 11, 47764, 25, 279, 67, 13, 6601, 19778, 11, 697, 62, 7568, 25, 279, 67, 13, 6601, 19778, 11, 1181, 25, 8633, 8, 4613, 357, 30094, 13, 6601, 19778, 11, 8633, 2599]"
🧠 ML Signal: Custom class registration pattern,"[8582, 100, 254, 10373, 26484, 25, 8562, 1398, 9352, 3912]",1.0,968,ml_signal,145,Custom class registration pattern,,958,        df format::,"[220, 220, 220, 220, 220, 220, 220, 47764, 5794, 3712]"
"✅ Best Practice: Class inherits from multiple base classes, indicating a mixin or interface pattern.","[26486, 227, 6705, 19939, 25, 5016, 10639, 896, 422, 3294, 2779, 6097, 11, 12739, 257, 5022, 259, 393, 7071, 3912, 13]",0.5,978,best_practice,145,"Class inherits from multiple base classes, indicating a mixin or interface pattern.",,968,        df format::,"[220, 220, 220, 220, 220, 220, 220, 47764, 5794, 3712]"
"✅ Best Practice: Class variable for state schema, indicating a clear structure for state management.","[26486, 227, 6705, 19939, 25, 5016, 7885, 329, 1181, 32815, 11, 12739, 257, 1598, 4645, 329, 1181, 4542, 13]",0.5,1018,best_practice,147,"Class variable for state schema, indicating a clear structure for state management.",,978,                         col1    col2    col3    ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 951, 16, 220, 220, 220, 951, 17, 220, 220, 220, 951, 18, 220, 220, 220, 2644]"
✅ Best Practice: Type hinting for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1064,best_practice,149,Type hinting for class variables improves code readability and maintainability.,,1018,                         1.2     0.5     0.3     ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 17, 220, 220, 220, 220, 657, 13, 20, 220, 220, 220, 220, 657, 13, 18, 220, 220, 220, 220, 2644]"
✅ Best Practice: Type hinting for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1110,best_practice,150,Type hinting for class variables improves code readability and maintainability.,,1064,                         1.0     0.7     0.2     ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 15, 220, 220, 220, 220, 657, 13, 22, 220, 220, 220, 220, 657, 13, 17, 220, 220, 220, 220, 2644]"
✅ Best Practice: Type hinting for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1156,best_practice,150,Type hinting for class variables improves code readability and maintainability.,,1110,                         1.0     0.7     0.2     ...,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 15, 220, 220, 220, 220, 657, 13, 22, 220, 220, 220, 220, 657, 13, 17, 220, 220, 220, 220, 2644]"
✅ Best Practice: Docstring is provided for the constructor parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 318, 2810, 329, 262, 23772, 10007, 13]",0.5,1156,best_practice,180,Docstring is provided for the constructor parameters.,,1156,,[]
✅ Best Practice: Using a utility function to convert class name to snake case.,"[26486, 227, 6705, 19939, 25, 8554, 257, 10361, 2163, 284, 10385, 1398, 1438, 284, 17522, 1339, 13]",1.0,1173,best_practice,194,Using a utility function to convert class name to snake case.,,1156,    #: transformer for this factor if not passed as __init__ argument,"[220, 220, 220, 1303, 25, 47385, 329, 428, 5766, 611, 407, 3804, 355, 11593, 15003, 834, 4578]"
🧠 ML Signal: Usage of multiple inheritance and initialization of parent classes.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3294, 24155, 290, 37588, 286, 2560, 6097, 13]",0.5,1184,ml_signal,197,Usage of multiple inheritance and initialization of parent classes.,,1173,    accumulator: Accumulator = None,"[220, 220, 220, 10507, 8927, 25, 6366, 388, 8927, 796, 6045]"
🧠 ML Signal: Usage of multiple inheritance and initialization of parent classes.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3294, 24155, 290, 37588, 286, 2560, 6097, 13]",0.5,1199,ml_signal,220,Usage of multiple inheritance and initialization of parent classes.,,1184,"        effective_number: int = None,","[220, 220, 220, 220, 220, 220, 220, 4050, 62, 17618, 25, 493, 796, 6045, 11]"
✅ Best Practice: Defaulting to class-level transformer if not provided.,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 1398, 12, 5715, 47385, 611, 407, 2810, 13]",1.0,1207,best_practice,229,Defaulting to class-level transformer if not provided.,,1199,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Defaulting to class-level accumulator if not provided.,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 1398, 12, 5715, 10507, 8927, 611, 407, 2810, 13]",1.0,1219,best_practice,234,Defaulting to class-level accumulator if not provided.,,1207,        :param accumulator:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 10507, 8927, 25]"
✅ Best Practice: Type hinting for DataFrame attributes.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 6060, 19778, 12608, 13]",0.5,1232,best_practice,238,Type hinting for DataFrame attributes.,,1219,        :param clear_state:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 1598, 62, 5219, 25]"
🧠 ML Signal: Conditional logic based on class attributes.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1398, 12608, 13]",0.5,1232,ml_signal,242,Conditional logic based on class attributes.,,1232,,[]
⚠️ SAST Risk (Low): Potential risk if `get_data` is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 1136, 62, 7890, 63, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,1245,sast_risk,251,Potential risk if `get_data` is not properly validated or sanitized.,Low,1232,"            self,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 11]"
"🧠 ML Signal: Registering a data listener, indicating event-driven architecture.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 257, 1366, 24783, 11, 12739, 1785, 12, 15808, 10959, 13]",0.5,1260,ml_signal,266,"Registering a data listener, indicating event-driven architecture.",,1245,"            category_field,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6536, 62, 3245, 11]"
✅ Best Practice: Check for conditions early to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 3403, 1903, 284, 3368, 13114, 7587]",0.5,1273,best_practice,261,Check for conditions early to avoid unnecessary processing,,1260,"            columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 11]"
✅ Best Practice: Use of super() to call a method from the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 257, 2446, 422, 262, 2560, 1398]",0.5,1286,best_practice,264,Use of super() to call a method from the parent class,,1273,"            limit,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 11]"
✅ Best Practice: Consider adding a docstring to describe the purpose and functionality of the method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 11244, 286, 262, 2446, 13]",0.5,1299,best_practice,265,Consider adding a docstring to describe the purpose and functionality of the method.,,1286,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
✅ Best Practice: Ensure that `load_window_df` method handles exceptions or errors.,"[26486, 227, 6705, 19939, 25, 48987, 326, 4600, 2220, 62, 17497, 62, 7568, 63, 2446, 17105, 13269, 393, 8563, 13]",0.5,1314,best_practice,267,Ensure that `load_window_df` method handles exceptions or errors.,,1299,"            time_field,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 62, 3245, 11]"
✅ Best Practice: Ensure that `get_data` method handles exceptions or errors.,"[26486, 227, 6705, 19939, 25, 48987, 326, 4600, 1136, 62, 7890, 63, 2446, 17105, 13269, 393, 8563, 13]",0.5,1339,best_practice,271,Ensure that `get_data` method handles exceptions or errors.,,1314,"        EntityStateService.__init__(self, entity_ids=entity_ids)","[220, 220, 220, 220, 220, 220, 220, 20885, 9012, 16177, 13, 834, 15003, 834, 7, 944, 11, 9312, 62, 2340, 28, 26858, 62, 2340, 8]"
"🧠 ML Signal: The method `decode_factor_df` is called on `self.factor_df`, indicating a transformation or decoding step.","[8582, 100, 254, 10373, 26484, 25, 383, 2446, 4600, 12501, 1098, 62, 31412, 62, 7568, 63, 318, 1444, 319, 4600, 944, 13, 31412, 62, 7568, 47671, 12739, 257, 13389, 393, 39938, 2239, 13]",0.5,1363,ml_signal,282,"The method `decode_factor_df` is called on `self.factor_df`, indicating a transformation or decoding step.",,1339,            self.transformer = self.__class__.transformer,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 7645, 16354, 796, 2116, 13, 834, 4871, 834, 13, 7645, 16354]"
✅ Best Practice: Consider checking if 'df' is a DataFrame to ensure type safety.,"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 705, 7568, 6, 318, 257, 6060, 19778, 284, 4155, 2099, 3747, 13]",0.5,1372,best_practice,281,Consider checking if 'df' is a DataFrame to ensure type safety.,,1363,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Checking if a DataFrame is not null before processing is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 6060, 19778, 318, 407, 9242, 878, 7587, 318, 257, 2219, 3912, 13]",1.0,1372,ml_signal,283,Checking if a DataFrame is not null before processing is a common pattern.,,1372,,[]
🧠 ML Signal: Iterating over DataFrame columns to apply transformations is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15180, 284, 4174, 38226, 318, 257, 2219, 3912, 13]",1.0,1391,ml_signal,285,Iterating over DataFrame columns to apply transformations is a common pattern.,,1372,            self.accumulator = accumulator,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 4134, 388, 8927, 796, 10507, 8927]"
⚠️ SAST Risk (Medium): Using json.loads with object_hook can lead to code execution if the input is not trusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 33918, 13, 46030, 351, 2134, 62, 25480, 460, 1085, 284, 2438, 9706, 611, 262, 5128, 318, 407, 13467, 13]",1.0,1391,sast_risk,288,Using json.loads with object_hook can lead to code execution if the input is not trusted.,Medium,1391,,[]
🧠 ML Signal: Use of lambda functions for inline data transformation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 26098, 1366, 13389, 13]",1.0,1409,ml_signal,289,Use of lambda functions for inline data transformation.,,1391,        self.need_persist = need_persist,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 31227, 62, 19276, 396, 796, 761, 62, 19276, 396]"
✅ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",1.0,1427,best_practice,289,Include a docstring to describe the method's purpose and return value,,1409,        self.need_persist = need_persist,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 31227, 62, 19276, 396, 796, 761, 62, 19276, 396]"
✅ Best Practice: Return an empty dictionary as a default implementation,"[26486, 227, 6705, 19939, 25, 8229, 281, 6565, 22155, 355, 257, 4277, 7822]",1.0,1443,best_practice,293,Return an empty dictionary as a default implementation,,1427,        #: data_df->pipe_df,"[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1366, 62, 7568, 3784, 34360, 62, 7568]"
✅ Best Practice: Call to superclass method ensures base functionality is preserved.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 2779, 11244, 318, 17232, 13]",1.0,1463,best_practice,294,Call to superclass method ensures base functionality is preserved.,,1443,        self.pipe_df: pd.DataFrame = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 34360, 62, 7568, 25, 279, 67, 13, 6601, 19778, 796, 6045]"
⚠️ SAST Risk (Medium): Potential SQL injection risk if `entity_id` is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 611, 4600, 26858, 62, 312, 63, 318, 407, 6105, 5336, 36951, 13]",1.0,1521,sast_risk,296,Potential SQL injection risk if `entity_id` is not properly sanitized.,Medium,1463,"        #: 计算因子的结果，可持久化,通过对pipe_df的计算得到","[220, 220, 220, 220, 220, 220, 220, 1303, 25, 5525, 106, 94, 163, 106, 245, 32368, 254, 36310, 21410, 163, 119, 241, 162, 252, 250, 171, 120, 234, 20998, 107, 162, 234, 223, 20046, 227, 44293, 244, 11, 34460, 248, 32573, 229, 43380, 117, 34360, 62, 7568, 21410, 164, 106, 94, 163, 106, 245, 36181, 245, 26344, 108]"
🧠 ML Signal: Conditional logic based on the presence of `entity_id` indicates different behavior paths.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 4600, 26858, 62, 312, 63, 9217, 1180, 4069, 13532, 13]",1.0,1570,ml_signal,300,Conditional logic based on the presence of `entity_id` indicates different behavior paths.,,1521,"        #: result_df是用于选股的标准df,通过对factor_df的计算得到","[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1255, 62, 7568, 42468, 18796, 101, 12859, 236, 34460, 231, 164, 224, 94, 21410, 43718, 229, 49035, 228, 7568, 11, 34460, 248, 32573, 229, 43380, 117, 31412, 62, 7568, 21410, 164, 106, 94, 163, 106, 245, 36181, 245, 26344, 108]"
✅ Best Practice: Use of clear and descriptive variable names enhances readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1598, 290, 35644, 7885, 3891, 32479, 1100, 1799]",0.5,1619,best_practice,300,Use of clear and descriptive variable names enhances readability,,1570,"        #: result_df是用于选股的标准df,通过对factor_df的计算得到","[220, 220, 220, 220, 220, 220, 220, 1303, 25, 1255, 62, 7568, 42468, 18796, 101, 12859, 236, 34460, 231, 164, 224, 94, 21410, 43718, 229, 49035, 228, 7568, 11, 34460, 248, 32573, 229, 43380, 117, 31412, 62, 7568, 21410, 164, 106, 94, 163, 106, 245, 36181, 245, 26344, 108]"
⚠️ SAST Risk (Low): Potential risk if pd_is_not_null is not properly defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 6105, 5447, 393, 17392]",0.5,1639,sast_risk,302,Potential risk if pd_is_not_null is not properly defined or imported,Low,1619,        self.result_df: pd.DataFrame = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 20274, 62, 7568, 25, 279, 67, 13, 6601, 19778, 796, 6045]"
🧠 ML Signal: Assignment of one dataframe to another could indicate data transformation or preparation,"[8582, 100, 254, 10373, 26484, 25, 50144, 286, 530, 1366, 14535, 284, 1194, 714, 7603, 1366, 13389, 393, 11824]",1.0,1653,ml_signal,304,Assignment of one dataframe to another could indicate data transformation or preparation,,1639,        if self.clear_state:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 20063, 62, 5219, 25]"
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1673,ml_signal,302,Logging usage pattern,,1653,        self.result_df: pd.DataFrame = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 20274, 62, 7568, 25, 279, 67, 13, 6601, 19778, 796, 6045]"
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1687,ml_signal,304,Logging usage pattern,,1673,        if self.clear_state:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 20063, 62, 5219, 25]"
🧠 ML Signal: Method call pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912]",1.0,1711,ml_signal,306,Method call pattern,,1687,        elif self.need_persist or self.only_load_factor:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13, 31227, 62, 19276, 396, 393, 2116, 13, 8807, 62, 2220, 62, 31412, 25]"
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1711,ml_signal,308,Logging usage pattern,,1711,,[]
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1778,ml_signal,310,Logging usage pattern,,1711,"            #: 因为读取data_df的目的是为了计算factor_df,选股和回测只依赖factor_df","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 25, 10263, 249, 254, 10310, 118, 46237, 119, 20998, 244, 7890, 62, 7568, 21410, 33566, 106, 21410, 42468, 10310, 118, 12859, 228, 164, 106, 94, 163, 106, 245, 31412, 62, 7568, 11, 34460, 231, 164, 224, 94, 161, 240, 234, 32368, 252, 38184, 233, 20998, 103, 160, 122, 251, 164, 113, 244, 31412, 62, 7568]"
🧠 ML Signal: Method call pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912]",1.0,1813,ml_signal,312,Method call pattern,,1778,            if pd_is_not_null(self.data_df) and self.computing_window:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 7890, 62, 7568, 8, 290, 2116, 13, 785, 48074, 62, 17497, 25]"
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1832,ml_signal,313,Logging usage pattern,,1813,                dfs = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 9501, 796, 17635]"
🧠 ML Signal: Checks if data is not null before processing,"[8582, 100, 254, 10373, 26484, 25, 47719, 611, 1366, 318, 407, 9242, 878, 7587]",0.5,1867,ml_signal,312,Checks if data is not null before processing,,1832,            if pd_is_not_null(self.data_df) and self.computing_window:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 7890, 62, 7568, 8, 290, 2116, 13, 785, 48074, 62, 17497, 25]"
🧠 ML Signal: Usage of transformer pattern for data processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 47385, 3912, 329, 1366, 7587]",0.5,1886,ml_signal,313,Usage of transformer pattern for data processing,,1867,                dfs = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 9501, 796, 17635]"
🧠 ML Signal: Checks if transformed data is not null before further processing,"[8582, 100, 254, 10373, 26484, 25, 47719, 611, 14434, 1366, 318, 407, 9242, 878, 2252, 7587]",0.5,1921,ml_signal,317,Checks if transformed data is not null before further processing,,1886,"                        data_schema=self.factor_schema,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 15952, 2611, 28, 944, 13, 31412, 62, 15952, 2611, 11]"
🧠 ML Signal: Usage of accumulator pattern for data aggregation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10507, 8927, 3912, 329, 1366, 46500]",0.5,1948,ml_signal,320,Usage of accumulator pattern for data aggregation,,1921,"                        limit=1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
"🧠 ML Signal: Method checks for non-null DataFrame, indicating data validation pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8794, 329, 1729, 12, 8423, 6060, 19778, 11, 12739, 1366, 21201, 3912]",0.5,1985,ml_signal,321,"Method checks for non-null DataFrame, indicating data validation pattern",,1948,"                        index=[self.category_field, self.time_field],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 41888, 944, 13, 22872, 62, 3245, 11, 2116, 13, 2435, 62, 3245, 4357]"
"🧠 ML Signal: Conditional checks for specific DataFrame types, indicating type-based logic","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 8794, 329, 2176, 6060, 19778, 3858, 11, 12739, 2099, 12, 3106, 9156]",0.5,2010,ml_signal,324,"Conditional checks for specific DataFrame types, indicating type-based logic",,1985,                    if latest_laved:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3452, 62, 75, 9586, 25]"
"🧠 ML Signal: Conditional checks for specific DataFrame types, indicating type-based logic","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 8794, 329, 2176, 6060, 19778, 3858, 11, 12739, 2099, 12, 3106, 9156]",0.5,2057,ml_signal,327,"Conditional checks for specific DataFrame types, indicating type-based logic",,2010,                            df = df[df.timestamp >= df1.iloc[0].timestamp],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 58, 7568, 13, 16514, 27823, 18189, 47764, 16, 13, 346, 420, 58, 15, 4083, 16514, 27823, 60]"
✅ Best Practice: Check if list is non-empty before using it,"[26486, 227, 6705, 19939, 25, 6822, 611, 1351, 318, 1729, 12, 28920, 878, 1262, 340]",1.0,2087,best_practice,330,Check if list is non-empty before using it,,2057,                self.data_df = pd.concat(dfs),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 62, 7568, 796, 279, 67, 13, 1102, 9246, 7, 7568, 82, 8]"
"🧠 ML Signal: Assigning a subset of DataFrame columns, indicating feature selection pattern","[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 257, 24637, 286, 6060, 19778, 15180, 11, 12739, 3895, 6356, 3912]",0.5,2105,ml_signal,332,"Assigning a subset of DataFrame columns, indicating feature selection pattern",,2087,        self.register_data_listener(self),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30238, 62, 7890, 62, 4868, 877, 7, 944, 8]"
🧠 ML Signal: Method with conditional logic based on instance attributes,"[8582, 100, 254, 10373, 26484, 25, 11789, 351, 26340, 9156, 1912, 319, 4554, 12608]",1.0,2135,ml_signal,330,Method with conditional logic based on instance attributes,,2105,                self.data_df = pd.concat(dfs),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 62, 7568, 796, 279, 67, 13, 1102, 9246, 7, 7568, 82, 8]"
🧠 ML Signal: Conditional logic based on instance attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4554, 12608]",1.0,2135,ml_signal,333,Conditional logic based on instance attributes,,2135,,[]
"✅ Best Practice: Method call without arguments, likely a utility function","[26486, 227, 6705, 19939, 25, 11789, 869, 1231, 7159, 11, 1884, 257, 10361, 2163]",0.5,2160,best_practice,335,"Method call without arguments, likely a utility function",,2135,        #: for the case:1)load factor from db 2)compute the result,"[220, 220, 220, 220, 220, 220, 220, 1303, 25, 329, 262, 1339, 25, 16, 8, 2220, 5766, 422, 20613, 362, 8, 5589, 1133, 262, 1255]"
🧠 ML Signal: Conditional logic based on multiple instance attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 3294, 4554, 12608]",1.0,2176,ml_signal,337,Conditional logic based on multiple instance attributes,,2160,            self.compute(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5589, 1133, 3419]"
"✅ Best Practice: Method call without arguments, likely a utility function","[26486, 227, 6705, 19939, 25, 11789, 869, 1231, 7159, 11, 1884, 257, 10361, 2163]",0.5,2186,best_practice,339,"Method call without arguments, likely a utility function",,2176,    def load_data(self):,"[220, 220, 220, 825, 3440, 62, 7890, 7, 944, 2599]"
✅ Best Practice: Consider adding a docstring to describe the purpose and functionality of the compute method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 11244, 286, 262, 24061, 2446, 13]",1.0,2202,best_practice,337,Consider adding a docstring to describe the purpose and functionality of the compute method.,,2186,            self.compute(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5589, 1133, 3419]"
🧠 ML Signal: Logging usage pattern with self.logger.info,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 2116, 13, 6404, 1362, 13, 10951]",0.5,2212,ml_signal,339,Logging usage pattern with self.logger.info,,2202,    def load_data(self):,"[220, 220, 220, 825, 3440, 62, 7890, 7, 944, 2599]"
🧠 ML Signal: Logging usage pattern with self.logger.info,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 2116, 13, 6404, 1362, 13, 10951]",0.5,2224,ml_signal,341,Logging usage pattern with self.logger.info,,2212,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Capturing start time for performance measurement,"[8582, 100, 254, 10373, 26484, 25, 6790, 870, 923, 640, 329, 2854, 15558]",0.5,2224,ml_signal,343,Capturing start time for performance measurement,,2224,,[]
🧠 ML Signal: Calculating elapsed time for performance measurement,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 42118, 640, 329, 2854, 15558]",0.5,2280,ml_signal,346,Calculating elapsed time for performance measurement,,2224,            #: 如果只是为了计算因子，只需要读取acc_window的factor_df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 25, 10263, 99, 224, 162, 252, 250, 20998, 103, 42468, 10310, 118, 12859, 228, 164, 106, 94, 163, 106, 245, 32368, 254, 36310, 171, 120, 234, 20998, 103, 165, 250, 222, 17358, 223, 46237, 119, 20998, 244, 4134, 62, 17497, 21410, 31412, 62, 7568]"
🧠 ML Signal: Logging usage pattern with self.logger.info,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 2116, 13, 6404, 1362, 13, 10951]",0.5,2309,ml_signal,348,Logging usage pattern with self.logger.info,,2280,                self.factor_df = self.load_window_df(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 31412, 62, 7568, 796, 2116, 13, 2220, 62, 17497, 62, 7568, 7]"
🧠 ML Signal: Logging usage pattern with self.logger.info,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 2116, 13, 6404, 1362, 13, 10951]",0.5,2325,ml_signal,350,Logging usage pattern with self.logger.info,,2309,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Capturing start time for performance measurement,"[8582, 100, 254, 10373, 26484, 25, 6790, 870, 923, 640, 329, 2854, 15558]",0.5,2346,ml_signal,352,Capturing start time for performance measurement,,2325,            self.factor_df = get_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 31412, 62, 7568, 796, 651, 62, 7890, 7]"
🧠 ML Signal: Calculating elapsed time for performance measurement,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 42118, 640, 329, 2854, 15558]",0.5,2373,ml_signal,355,Calculating elapsed time for performance measurement,,2346,"                start_timestamp=self.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 944, 13, 9688, 62, 16514, 27823, 11]"
🧠 ML Signal: Logging usage pattern with self.logger.info,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 2116, 13, 6404, 1362, 13, 10951]",0.5,2400,ml_signal,357,Logging usage pattern with self.logger.info,,2373,"                end_timestamp=self.end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 944, 13, 437, 62, 16514, 27823, 11]"
🧠 ML Signal: Logging usage pattern with self.logger.info,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 2116, 13, 6404, 1362, 13, 10951]",0.5,2412,ml_signal,359,Logging usage pattern with self.logger.info,,2400,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2421,best_practice,351,Use of type hinting for return type improves code readability and maintainability,,2412,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Conditional logic based on object attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 12608]",0.5,2441,ml_signal,353,Conditional logic based on object attributes,,2421,"                provider=""zvt"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 2625, 89, 36540, 1600]"
🧠 ML Signal: Return of different attributes based on condition,"[8582, 100, 254, 10373, 26484, 25, 8229, 286, 1180, 12608, 1912, 319, 4006]",1.0,2468,ml_signal,355,Return of different attributes based on condition,,2441,"                start_timestamp=self.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 944, 13, 9688, 62, 16514, 27823, 11]"
✅ Best Practice: Check for None before using objects to avoid AttributeError,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 878, 1262, 5563, 284, 3368, 3460, 4163, 12331]",1.0,2495,best_practice,355,Check for None before using objects to avoid AttributeError,,2468,"                start_timestamp=self.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 944, 13, 9688, 62, 16514, 27823, 11]"
✅ Best Practice: Use of None check to determine which object's indicators to use,"[26486, 227, 6705, 19939, 25, 5765, 286, 6045, 2198, 284, 5004, 543, 2134, 338, 21337, 284, 779]",1.0,2524,best_practice,358,Use of None check to determine which object's indicators to use,,2495,"                index=[self.category_field, self.time_field],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 41888, 944, 13, 22872, 62, 3245, 11, 2116, 13, 2435, 62, 3245, 4357]"
✅ Best Practice: Check if indicators is not empty before using it,"[26486, 227, 6705, 19939, 25, 6822, 611, 21337, 318, 407, 6565, 878, 1262, 340]",1.0,2524,best_practice,362,Check if indicators is not empty before using it,,2524,,[]
🧠 ML Signal: Usage of DataFrame slicing with dynamic column selection,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 49289, 351, 8925, 5721, 6356]",0.5,2552,ml_signal,365,Usage of DataFrame slicing with dynamic column selection,,2524,        if pd_is_not_null(df) and col_map_object_hook:,"[220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 8, 290, 951, 62, 8899, 62, 15252, 62, 25480, 25]"
🧠 ML Signal: Returning a DataFrame in a list for consistency,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 287, 257, 1351, 329, 15794]",1.0,2582,ml_signal,368,Returning a DataFrame in a list for consistency,,2552,                    df[col] = df[col].apply(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 47764, 58, 4033, 4083, 39014, 7]"
✅ Best Practice: Explicitly returning None for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 6045, 329, 16287]",0.5,2602,best_practice,370,Explicitly returning None for clarity,,2582,                    ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Check for None before using objects to avoid AttributeError,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 878, 1262, 5563, 284, 3368, 3460, 4163, 12331]",1.0,2625,best_practice,367,Check for None before using objects to avoid AttributeError,,2602,                if col in df.columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 951, 287, 47764, 13, 28665, 82, 25]"
🧠 ML Signal: Returns a list containing a single DataFrame if conditions are met,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 1351, 7268, 257, 2060, 6060, 19778, 611, 3403, 389, 1138]",1.0,2677,ml_signal,369,Returns a list containing a single DataFrame if conditions are met,,2625,"                        lambda x: json.loads(x, object_hook=col_map_object_hook.get(col)) if x else None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 2124, 25, 33918, 13, 46030, 7, 87, 11, 2134, 62, 25480, 28, 4033, 62, 8899, 62, 15252, 62, 25480, 13, 1136, 7, 4033, 4008, 611, 2124, 2073, 6045]"
🧠 ML Signal: Returns None if conditions are not met,"[8582, 100, 254, 10373, 26484, 25, 16409, 6045, 611, 3403, 389, 407, 1138]",1.0,2677,ml_signal,371,Returns None if conditions are not met,,2677,,[]
✅ Best Practice: Type hinting improves code readability and maintainability by specifying expected return type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 416, 31577, 2938, 1441, 2099]",0.5,2697,best_practice,370,Type hinting improves code readability and maintainability by specifying expected return type,,2677,                    ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Check for None explicitly to handle null values.,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 11777, 284, 5412, 9242, 3815, 13]",1.0,2716,best_practice,372,Check for None explicitly to handle null values.,,2697,    def factor_col_map_object_hook(self) -> dict:,"[220, 220, 220, 825, 5766, 62, 4033, 62, 8899, 62, 15252, 62, 25480, 7, 944, 8, 4613, 8633, 25]"
✅ Best Practice: Return a specific value for truthy order_type.,"[26486, 227, 6705, 19939, 25, 8229, 257, 2176, 1988, 329, 3872, 88, 1502, 62, 4906, 13]",0.5,2732,best_practice,375,Return a specific value for truthy order_type.,,2716,        :return:{col:object_hook},"[220, 220, 220, 220, 220, 220, 220, 1058, 7783, 29164, 4033, 25, 15252, 62, 25480, 92]"
✅ Best Practice: Return a specific value for falsy order_type.,"[26486, 227, 6705, 19939, 25, 8229, 257, 2176, 1988, 329, 27807, 88, 1502, 62, 4906, 13]",0.5,2732,best_practice,378,Return a specific value for falsy order_type.,,2732,,[]
✅ Best Practice: Use of descriptive color codes for different order types,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 3124, 12416, 329, 1180, 1502, 3858]",1.0,2750,best_practice,379,Use of descriptive color codes for different order types,,2732,"    def clear_state_data(self, entity_id=None):","[220, 220, 220, 825, 1598, 62, 5219, 62, 7890, 7, 944, 11, 9312, 62, 312, 28, 14202, 2599]"
🧠 ML Signal: Checking if a DataFrame is a filter result,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 6060, 19778, 318, 257, 8106, 1255]",1.0,2750,ml_signal,385,Checking if a DataFrame is a filter result,,2750,,[]
✅ Best Practice: Removing NaN values to ensure data integrity,"[26486, 227, 6705, 19939, 25, 3982, 5165, 11013, 45, 3815, 284, 4155, 1366, 11540]",1.0,2783,best_practice,387,Removing NaN values to ensure data integrity,,2750,        if not self.only_load_factor and not pd_is_not_null(self.pipe_df):,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 8807, 62, 2220, 62, 31412, 290, 407, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 34360, 62, 7568, 2599]"
🧠 ML Signal: Dropping continuous duplicates in a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 21045, 2105, 12948, 14184, 16856, 287, 257, 6060, 19778]",0.5,2783,ml_signal,389,Dropping continuous duplicates in a DataFrame,,2783,,[]
🧠 ML Signal: Mapping index to another DataFrame to extract 'close' values,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 6376, 284, 1194, 6060, 19778, 284, 7925, 705, 19836, 6, 3815]",1.0,2802,ml_signal,391,Mapping index to another DataFrame to extract 'close' values,,2783,"        self.logger.info(""compute factor start"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 5589, 1133, 5766, 923, 4943]"
🧠 ML Signal: Applying a function to transform 'filter_result' into flags,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 6121, 705, 24455, 62, 20274, 6, 656, 9701]",1.0,2821,ml_signal,393,Applying a function to transform 'filter_result' into flags,,2802,"        self.logger.info(""compute factor finish"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 5589, 1133, 5766, 5461, 4943]"
🧠 ML Signal: Applying a function to transform 'filter_result' into colors,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 6121, 705, 24455, 62, 20274, 6, 656, 7577]",1.0,2835,ml_signal,396,Applying a function to transform 'filter_result' into colors,,2821,        self.compute_result(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5589, 1133, 62, 20274, 3419]"
🧠 ML Signal: Usage of pd.date_range to generate a range of dates,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 4475, 62, 9521, 284, 7716, 257, 2837, 286, 9667]",1.0,2854,ml_signal,393,Usage of pd.date_range to generate a range of dates,,2835,"        self.logger.info(""compute factor finish"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 5589, 1133, 5766, 5461, 4943]"
🧠 ML Signal: Creation of a MultiIndex for hierarchical indexing,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 257, 15237, 15732, 329, 38958, 6376, 278]",0.5,2873,ml_signal,397,Creation of a MultiIndex for hierarchical indexing,,2854,"        self.logger.info(""compute result finish"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 5589, 1133, 1255, 5461, 4943]"
⚠️ SAST Risk (Low): Potential data loss by removing duplicates without logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 2994, 416, 10829, 14184, 16856, 1231, 18931]",0.5,2883,sast_risk,399,Potential data loss by removing duplicates without logging,Low,2873,    def compute_factor(self):,"[220, 220, 220, 825, 24061, 62, 31412, 7, 944, 2599]"
🧠 ML Signal: Reindexing DataFrame to align with a new index,"[8582, 100, 254, 10373, 26484, 25, 797, 9630, 278, 6060, 19778, 284, 10548, 351, 257, 649, 6376]",1.0,2895,ml_signal,401,Reindexing DataFrame to align with a new index,,2883,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Usage of fillna with method and limit parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6070, 2616, 351, 2446, 290, 4179, 10007]",0.5,2924,ml_signal,403,Usage of fillna with method and limit parameters,,2895,        if pd_is_not_null(self.data_df) and self.transformer:,"[220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 7890, 62, 7568, 8, 290, 2116, 13, 7645, 16354, 25]"
✅ Best Practice: Grouping by level 0 for hierarchical data processing,"[26486, 227, 6705, 19939, 25, 4912, 278, 416, 1241, 657, 329, 38958, 1366, 7587]",0.5,2954,best_practice,404,Grouping by level 0 for hierarchical data processing,,2924,            self.pipe_df = self.transformer.transform(self.data_df),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 34360, 62, 7568, 796, 2116, 13, 7645, 16354, 13, 35636, 7, 944, 13, 7890, 62, 7568, 8]"
✅ Best Practice: Check for both self.entity_ids and entity_ids to avoid unnecessary operations,"[26486, 227, 6705, 19939, 25, 6822, 329, 1111, 2116, 13, 26858, 62, 2340, 290, 9312, 62, 2340, 284, 3368, 13114, 4560]",0.5,2970,best_practice,400,Check for both self.entity_ids and entity_ids to avoid unnecessary operations,,2954,        if self.only_load_factor:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 8807, 62, 2220, 62, 31412, 25]"
✅ Best Practice: Use set operations to find new entity IDs efficiently,"[26486, 227, 6705, 19939, 25, 5765, 900, 4560, 284, 1064, 649, 9312, 32373, 18306]",1.0,2970,best_practice,407,Use set operations to find new entity IDs efficiently,,2970,,[]
✅ Best Practice: Use set to avoid duplicate entity IDs,"[26486, 227, 6705, 19939, 25, 5765, 900, 284, 3368, 23418, 9312, 32373]",1.0,3000,best_practice,409,Use set to avoid duplicate entity IDs,,2970,        if pd_is_not_null(self.pipe_df) and self.accumulator:,"[220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 34360, 62, 7568, 8, 290, 2116, 13, 4134, 388, 8927, 25]"
⚠️ SAST Risk (Low): Potentially large data query without pagination,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 1588, 1366, 12405, 1231, 42208, 1883]",1.0,3009,sast_risk,411,Potentially large data query without pagination,Low,3000,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Low): Concatenating large DataFrames can lead to high memory usage,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1482, 9246, 268, 803, 1588, 6060, 35439, 460, 1085, 284, 1029, 4088, 8748]",0.5,3025,sast_risk,426,Concatenating large DataFrames can lead to high memory usage,Low,3009,        if self.only_load_factor:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 8807, 62, 2220, 62, 31412, 25]"
✅ Best Practice: Sorting index after concatenation for consistent data order,"[26486, 227, 6705, 19939, 25, 311, 24707, 6376, 706, 1673, 36686, 341, 329, 6414, 1366, 1502]",0.5,3041,best_practice,426,Sorting index after concatenation for consistent data order,,3025,        if self.only_load_factor:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 8807, 62, 2220, 62, 31412, 25]"
⚠️ SAST Risk (Low): External data fetching without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 34579, 1366, 21207, 278, 1231, 21201]",0.5,3049,sast_risk,434,External data fetching without validation,Low,3041,    def compute(self):,"[220, 220, 220, 825, 24061, 7, 944, 2599]"
🧠 ML Signal: Decoding data frames could indicate data transformation patterns,"[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 1366, 13431, 714, 7603, 1366, 13389, 7572]",0.5,3063,ml_signal,440,Decoding data frames could indicate data transformation patterns,,3049,        self.do_compute(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4598, 62, 5589, 1133, 3419]"
⚠️ SAST Risk (Low): Concatenating large DataFrames can lead to high memory usage,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1482, 9246, 268, 803, 1588, 6060, 35439, 460, 1085, 284, 1029, 4088, 8748]",0.5,3083,sast_risk,444,Concatenating large DataFrames can lead to high memory usage,Low,3063,"        self.logger.info(""after_compute start"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 8499, 62, 5589, 1133, 923, 4943]"
✅ Best Practice: Sorting index after concatenation for consistent data order,"[26486, 227, 6705, 19939, 25, 311, 24707, 6376, 706, 1673, 36686, 341, 329, 6414, 1366, 1502]",0.5,3098,best_practice,445,Sorting index after concatenation for consistent data order,,3083,        start_time = time.time(),"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 13, 2435, 3419]"
🧠 ML Signal: Method signature and parameter types can be used to infer method usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 11507, 3858, 460, 307, 973, 284, 13249, 2446, 8748, 7572]",0.5,3128,ml_signal,437,Method signature and parameter types can be used to infer method usage patterns,,3098,"        self.logger.info(f""[[[ ~~~~~~~~factor:{self.name} ~~~~~~~~]]]"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 30109, 220, 15116, 31412, 29164, 944, 13, 3672, 92, 220, 15116, 11907, 60, 4943]"
✅ Best Practice: Consider adding a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",0.5,3143,best_practice,439,Consider adding a docstring to describe the method's purpose and parameters,,3128,        start_time = time.time(),"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 13, 2435, 3419]"
⚠️ SAST Risk (Low): Ensure that 'data' is validated before use to prevent potential data integrity issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 705, 7890, 6, 318, 31031, 878, 779, 284, 2948, 2785, 1366, 11540, 2428]",0.5,3157,sast_risk,440,Ensure that 'data' is validated before use to prevent potential data integrity issues,Low,3143,        self.do_compute(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4598, 62, 5589, 1133, 3419]"
✅ Best Practice: Add type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",0.5,3171,best_practice,440,Add type hints for better code readability and maintainability,,3157,        self.do_compute(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4598, 62, 5589, 1133, 3419]"
✅ Best Practice: Consider adding a docstring description for the 'data' parameter,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 6764, 329, 262, 705, 7890, 6, 11507]",0.5,3186,best_practice,445,Consider adding a docstring description for the 'data' parameter,,3171,        start_time = time.time(),"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 13, 2435, 3419]"
🧠 ML Signal: Method call pattern that could be used to understand function usage,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 326, 714, 307, 973, 284, 1833, 2163, 8748]",0.5,3200,ml_signal,446,Method call pattern that could be used to understand function usage,,3186,        self.after_compute(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 8499, 62, 5589, 1133, 3419]"
"✅ Best Practice: Method docstring is provided, which improves code readability and maintainability","[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 2810, 11, 543, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,3215,best_practice,445,"Method docstring is provided, which improves code readability and maintainability",,3200,        start_time = time.time(),"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 13, 2435, 3419]"
✅ Best Practice: Docstring describes the purpose and parameters of the method,"[26486, 227, 6705, 19939, 25, 14432, 8841, 8477, 262, 4007, 290, 10007, 286, 262, 2446]",1.0,3229,best_practice,446,Docstring describes the purpose and parameters of the method,,3215,        self.after_compute(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 8499, 62, 5589, 1133, 3419]"
🧠 ML Signal: Method with a clear purpose and parameters can be used to identify usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 351, 257, 1598, 4007, 290, 10007, 460, 307, 973, 284, 5911, 8748, 7572]",0.5,3246,ml_signal,453,Method with a clear purpose and parameters can be used to identify usage patterns,,3229,            return self.factor_df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 31412, 62, 7568]"
✅ Best Practice: Check if DataFrame is not null before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 6060, 19778, 318, 407, 9242, 878, 18788]",0.5,3259,best_practice,454,Check if DataFrame is not null before proceeding,,3246,        return self.data_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 62, 7568]"
🧠 ML Signal: Iterating over columns to apply transformations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 15180, 284, 4174, 38226]",1.0,3284,ml_signal,456,Iterating over columns to apply transformations,,3259,    def drawer_factor_df_list(self) -> Optional[List[pd.DataFrame]]:,"[220, 220, 220, 825, 33451, 62, 31412, 62, 7568, 62, 4868, 7, 944, 8, 4613, 32233, 58, 8053, 58, 30094, 13, 6601, 19778, 60, 5974]"
🧠 ML Signal: Using json.dumps with a custom encoder,"[8582, 100, 254, 10373, 26484, 25, 8554, 33918, 13, 67, 8142, 351, 257, 2183, 2207, 12342]",0.5,3304,ml_signal,459,Using json.dumps with a custom encoder,,3284,            if self.transformer is not None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 7645, 16354, 318, 407, 6045, 25]"
🧠 ML Signal: Grouping DataFrame by level 0,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 6060, 19778, 416, 1241, 657]",0.5,3329,ml_signal,462,Grouping DataFrame by level 0,,3304,                indicators = self.accumulator.indicators,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 21337, 796, 2116, 13, 4134, 388, 8927, 13, 521, 44549]"
🧠 ML Signal: Persisting state for each entity,"[8582, 100, 254, 10373, 26484, 25, 9467, 9665, 1181, 329, 1123, 9312]",0.5,3342,ml_signal,466,Persisting state for each entity,,3329,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Medium): Potential SQL injection risk if df_to_db is not properly handling inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 318, 407, 6105, 9041, 17311]",1.0,3384,sast_risk,471,Potential SQL injection risk if df_to_db is not properly handling inputs,Medium,3342,        if (self.transformer is not None or self.accumulator is not None) and pd_is_not_null(self.result_df):,"[220, 220, 220, 220, 220, 220, 220, 611, 357, 944, 13, 7645, 16354, 318, 407, 6045, 393, 2116, 13, 4134, 388, 8927, 318, 407, 6045, 8, 290, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 944, 13, 20274, 62, 7568, 2599]"
✅ Best Practice: Logging errors with context,"[26486, 227, 6705, 19939, 25, 5972, 2667, 8563, 351, 4732]",1.0,3402,best_practice,476,Logging errors with context,,3384,        def order_type_flag(order_type):,"[220, 220, 220, 220, 220, 220, 220, 825, 1502, 62, 4906, 62, 32109, 7, 2875, 62, 4906, 2599]"
✅ Best Practice: Logging exception details,"[26486, 227, 6705, 19939, 25, 5972, 2667, 6631, 3307]",0.5,3419,best_practice,478,Logging exception details,,3402,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
🧠 ML Signal: Clearing state data on exception,"[8582, 100, 254, 10373, 26484, 25, 3779, 1723, 1181, 1366, 319, 6631]",0.5,3438,ml_signal,480,Clearing state data on exception,,3419,"                return ""B""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 33, 1]"
⚠️ SAST Risk (Medium): Potential SQL injection risk if df_to_db is not properly handling inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 318, 407, 6105, 9041, 17311]",1.0,3438,sast_risk,483,Potential SQL injection risk if df_to_db is not properly handling inputs,Medium,3438,,[]
🧠 ML Signal: Method checks a condition before accessing a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 11789, 8794, 257, 4006, 878, 22534, 257, 6060, 19778, 5721]",1.0,3456,ml_signal,476,Method checks a condition before accessing a DataFrame column,,3438,        def order_type_flag(order_type):,"[220, 220, 220, 220, 220, 220, 220, 825, 1502, 62, 4906, 62, 32109, 7, 2875, 62, 4906, 2599]"
🧠 ML Signal: Accessing specific columns of a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 15180, 286, 257, 6060, 19778]",1.0,3473,ml_signal,478,Accessing specific columns of a DataFrame,,3456,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
🧠 ML Signal: Method checks a condition before returning a specific DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 11789, 8794, 257, 4006, 878, 8024, 257, 2176, 6060, 19778, 5721]",1.0,3489,ml_signal,479,Method checks a condition before returning a specific DataFrame column,,3473,            if order_type:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 62, 4906, 25]"
✅ Best Practice: Explicitly specify the column name when returning a DataFrame slice,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 5721, 1438, 618, 8024, 257, 6060, 19778, 16416]",0.5,3506,best_practice,481,Explicitly specify the column name when returning a DataFrame slice,,3489,            if not order_type:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 1502, 62, 4906, 25]"
✅ Best Practice: Use of .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",0.5,3506,best_practice,483,Use of .copy() to avoid modifying the original DataFrame,,3506,,[]
✅ Best Practice: Filtering out NaN values to ensure data integrity,"[26486, 227, 6705, 19939, 25, 7066, 20212, 503, 11013, 45, 3815, 284, 4155, 1366, 11540]",0.5,3522,best_practice,485,Filtering out NaN values to ensure data integrity,,3506,            if order_type:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 62, 4906, 25]"
⚠️ SAST Risk (Low): Ensure drop_continue_duplicate is implemented securely to avoid data manipulation issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4268, 62, 43043, 62, 646, 489, 5344, 318, 9177, 30835, 284, 3368, 1366, 17512, 2428]",0.5,3542,sast_risk,486,Ensure drop_continue_duplicate is implemented securely to avoid data manipulation issues,Low,3522,"                return ""#ec0000""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25113, 721, 2388, 1]"
⚠️ SAST Risk (Low): Potential misuse of ValueError; consider using a more specific exception type.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 11052, 12331, 26, 2074, 1262, 257, 517, 2176, 6631, 2099, 13]",1.0,3582,sast_risk,495,Potential misuse of ValueError; consider using a more specific exception type.,Low,3542,"            annotation_df[""flag""] = annotation_df[""filter_result""].apply(lambda x: order_type_flag(x))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 23025, 62, 7568, 14692, 32109, 8973, 796, 23025, 62, 7568, 14692, 24455, 62, 20274, 1, 4083, 39014, 7, 50033, 2124, 25, 1502, 62, 4906, 62, 32109, 7, 87, 4008]"
"✅ Best Practice: Consider adding type hints for filter_df, selected_df, and target_df for better readability.","[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 8106, 62, 7568, 11, 6163, 62, 7568, 11, 290, 2496, 62, 7568, 329, 1365, 1100, 1799, 13]",1.0,3582,best_practice,498,"Consider adding type hints for filter_df, selected_df, and target_df for better readability.",,3582,,[]
✅ Best Practice: Consider using logging instead of print for better control over output.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072, 13]",0.5,3603,best_practice,521,Consider using logging instead of print for better control over output.,,3582,            if not self.only_load_factor:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 8807, 62, 2220, 62, 31412, 25]"
🧠 ML Signal: Returning a list of entity IDs could be a pattern for ML model training.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 286, 9312, 32373, 714, 307, 257, 3912, 329, 10373, 2746, 3047, 13]",0.5,3632,ml_signal,533,Returning a list of entity IDs could be a pattern for ML model training.,,3603,"                    time_field=self.time_field,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 62, 3245, 28, 944, 13, 2435, 62, 3245, 11]"
✅ Best Practice: Class attributes should be initialized in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 5016, 12608, 815, 307, 23224, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,3665,best_practice,532,Class attributes should be initialized in the constructor for clarity and maintainability,,3632,"                    index=[self.category_field, self.time_field],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 41888, 944, 13, 22872, 62, 3245, 11, 2116, 13, 2435, 62, 3245, 4357]"
✅ Best Practice: Type hinting for class attributes improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3681,best_practice,534,Type hinting for class attributes improves code readability and maintainability,,3665,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Call to superclass method ensures base functionality is executed,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 2779, 11244, 318, 10945]",1.0,3724,best_practice,535,Call to superclass method ensures base functionality is executed,,3681,"                self.data_df = pd.concat([self.data_df, new_data_df], sort=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 62, 7568, 796, 279, 67, 13, 1102, 9246, 26933, 944, 13, 7890, 62, 7568, 11, 649, 62, 7890, 62, 7568, 4357, 3297, 28, 25101, 8]"
🧠 ML Signal: Checking for null values in dataframes is a common data validation pattern,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 9242, 3815, 287, 1366, 37805, 318, 257, 2219, 1366, 21201, 3912]",1.0,3724,ml_signal,537,Checking for null values in dataframes is a common data validation pattern,,3724,,[]
🧠 ML Signal: Scoring dataframes is a common pattern in data processing and ML pipelines,"[8582, 100, 254, 10373, 26484, 25, 1446, 3255, 1366, 37805, 318, 257, 2219, 3912, 287, 1366, 7587, 290, 10373, 31108]",1.0,3745,ml_signal,538,Scoring dataframes is a common pattern in data processing and ML pipelines,,3724,            new_factor_df = get_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 31412, 62, 7568, 796, 651, 62, 7890, 7]"
✅ Best Practice: Using __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,3766,best_practice,538,Using __all__ to define public API of the module,,3745,            new_factor_df = get_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 31412, 62, 7568, 796, 651, 62, 7890, 7]"

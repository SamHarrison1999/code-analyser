[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific parameter types indicates usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      11507,
      3858,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific parameter types indicates usage patterns"
  },
  {
    "line": 7,
    "text": "from zvt.utils.time_utils import to_pd_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Conversion function usage indicates data normalization pattern",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 0,
    "end_token": 16,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      2163,
      8748,
      9217,
      1366,
      3487,
      1634,
      3912
    ],
    "label": "ml_signal",
    "reason": "Conversion function usage indicates data normalization pattern"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion function usage indicates data normalization pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 16,
    "end_token": 16,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      2163,
      8748,
      9217,
      1366,
      3487,
      1634,
      3912
    ],
    "label": "ml_signal",
    "reason": "Conversion function usage indicates data normalization pattern"
  },
  {
    "line": 11,
    "text": "    t1 = to_pd_timestamp(t1)",
    "annotation": "\u2705 Best Practice: Use of enum for level improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      256,
      16,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      83,
      16,
      8
    ],
    "start_token": 16,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33829,
      329,
      1241,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of enum for level improves code readability and maintainability"
  },
  {
    "line": 13,
    "text": "    if level == IntervalLevel.LEVEL_1WEEK:",
    "annotation": "\u2705 Best Practice: Direct comparison of attributes for logic clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      1241,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      54,
      33823,
      25
    ],
    "start_token": 32,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      7208,
      286,
      12608,
      329,
      9156,
      16287
    ],
    "label": "best_practice",
    "reason": "Direct comparison of attributes for logic clarity"
  },
  {
    "line": 16,
    "text": "        return t1.month == t2.month",
    "annotation": "\u2705 Best Practice: Use of enum for level improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      256,
      16,
      13,
      8424,
      6624,
      256,
      17,
      13,
      8424
    ],
    "start_token": 49,
    "end_token": 66,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33829,
      329,
      1241,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of enum for level improves code readability and maintainability"
  },
  {
    "line": 16,
    "text": "        return t1.month == t2.month",
    "annotation": "\u2705 Best Practice: Direct comparison of attributes for logic clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      256,
      16,
      13,
      8424,
      6624,
      256,
      17,
      13,
      8424
    ],
    "start_token": 66,
    "end_token": 83,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      7208,
      286,
      12608,
      329,
      9156,
      16287
    ],
    "label": "best_practice",
    "reason": "Direct comparison of attributes for logic clarity"
  },
  {
    "line": 16,
    "text": "        return t1.month == t2.month",
    "annotation": "\u2705 Best Practice: Use of method calls for abstraction and reusability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      256,
      16,
      13,
      8424,
      6624,
      256,
      17,
      13,
      8424
    ],
    "start_token": 83,
    "end_token": 100,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      3848,
      329,
      34651,
      290,
      302,
      385,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of method calls for abstraction and reusability"
  },
  {
    "line": 26,
    "text": "    it maybe a little bigger than the real size for fetching all the kdata.",
    "annotation": "\u2705 Best Practice: Use of default parameter value for end_timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      340,
      3863,
      257,
      1310,
      5749,
      621,
      262,
      1103,
      2546,
      329,
      21207,
      278,
      477,
      262,
      479,
      7890,
      13
    ],
    "start_token": 100,
    "end_token": 120,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      329,
      886,
      62,
      16514,
      27823
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value for end_timestamp"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of current timestamp as a default value",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 120,
    "end_token": 120,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1459,
      41033,
      355,
      257,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Use of current timestamp as a default value"
  },
  {
    "line": 31,
    "text": "    :type level: IntervalLevel",
    "annotation": "\u2705 Best Practice: Conversion function used for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1058,
      4906,
      1241,
      25,
      4225,
      2100,
      4971
    ],
    "start_token": 120,
    "end_token": 130,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44101,
      2163,
      973,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Conversion function used for consistency"
  },
  {
    "line": 33,
    "text": "    :type one_day_trading_minutes: int",
    "annotation": "\u2705 Best Practice: Consistent conversion of start_timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      4906,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      25,
      493
    ],
    "start_token": 130,
    "end_token": 146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3515,
      7609,
      11315,
      286,
      923,
      62,
      16514,
      27823
    ],
    "label": "best_practice",
    "reason": "Consistent conversion of start_timestamp"
  },
  {
    "line": 35,
    "text": "    if not end_timestamp:",
    "annotation": "\u2705 Best Practice: Clear calculation of seconds in a day",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      886,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 146,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      17952,
      286,
      4201,
      287,
      257,
      1110
    ],
    "label": "best_practice",
    "reason": "Clear calculation of seconds in a day"
  },
  {
    "line": 38,
    "text": "        end_timestamp = to_pd_timestamp(end_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Return value based on specific level condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 156,
    "end_token": 180,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      1988,
      1912,
      319,
      2176,
      1241,
      4006
    ],
    "label": "ml_signal",
    "reason": "Return value based on specific level condition"
  },
  {
    "line": 40,
    "text": "    time_delta = end_timestamp - to_pd_timestamp(start_timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Return value based on specific level condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      640,
      62,
      67,
      12514,
      796,
      886,
      62,
      16514,
      27823,
      532,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      9688,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 180,
    "end_token": 205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      1988,
      1912,
      319,
      2176,
      1241,
      4006
    ],
    "label": "ml_signal",
    "reason": "Return value based on specific level condition"
  },
  {
    "line": 44,
    "text": "    if level == IntervalLevel.LEVEL_1DAY:",
    "annotation": "\ud83e\udde0 ML Signal: Return value based on specific level condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      1241,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 205,
    "end_token": 221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      1988,
      1912,
      319,
      2176,
      1241,
      4006
    ],
    "label": "ml_signal",
    "reason": "Return value based on specific level condition"
  },
  {
    "line": 47,
    "text": "    if level == IntervalLevel.LEVEL_1WEEK:",
    "annotation": "\u2705 Best Practice: Calculation of seconds for positive day delta",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      1241,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      54,
      33823,
      25
    ],
    "start_token": 221,
    "end_token": 238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2199,
      14902,
      286,
      4201,
      329,
      3967,
      1110,
      25979
    ],
    "label": "best_practice",
    "reason": "Calculation of seconds for positive day delta"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Return value based on calculated seconds",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 238,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      1988,
      1912,
      319,
      10488,
      4201
    ],
    "label": "ml_signal",
    "reason": "Return value based on calculated seconds"
  },
  {
    "line": 51,
    "text": "        return int(math.ceil(time_delta.days / 30)) + 1",
    "annotation": "\u2705 Best Practice: Calculation of seconds for non-positive day delta",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      493,
      7,
      11018,
      13,
      344,
      346,
      7,
      2435,
      62,
      67,
      12514,
      13,
      12545,
      1220,
      1542,
      4008,
      1343,
      352
    ],
    "start_token": 238,
    "end_token": 264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2199,
      14902,
      286,
      4201,
      329,
      1729,
      12,
      24561,
      1110,
      25979
    ],
    "label": "best_practice",
    "reason": "Calculation of seconds for non-positive day delta"
  },
  {
    "line": 51,
    "text": "        return int(math.ceil(time_delta.days / 30)) + 1",
    "annotation": "\ud83e\udde0 ML Signal: Return value based on minimum of calculated seconds and trading seconds",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      493,
      7,
      11018,
      13,
      344,
      346,
      7,
      2435,
      62,
      67,
      12514,
      13,
      12545,
      1220,
      1542,
      4008,
      1343,
      352
    ],
    "start_token": 264,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      1988,
      1912,
      319,
      5288,
      286,
      10488,
      4201,
      290,
      7313,
      4201
    ],
    "label": "ml_signal",
    "reason": "Return value based on minimum of calculated seconds and trading seconds"
  },
  {
    "line": 44,
    "text": "    if level == IntervalLevel.LEVEL_1DAY:",
    "annotation": "\u2705 Best Practice: Ensure the function has type hints for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      1241,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 290,
    "end_token": 306,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      2163,
      468,
      2099,
      20269,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Ensure the function has type hints for better readability and maintainability"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion function usage pattern for timestamp normalization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 306,
    "end_token": 306,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      2163,
      8748,
      3912,
      329,
      41033,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Conversion function usage pattern for timestamp normalization"
  },
  {
    "line": 48,
    "text": "        return int(math.ceil(time_delta.days / 7)) + 1",
    "annotation": "\ud83e\udde0 ML Signal: Usage pattern of adding Timedelta to a timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      493,
      7,
      11018,
      13,
      344,
      346,
      7,
      2435,
      62,
      67,
      12514,
      13,
      12545,
      1220,
      767,
      4008,
      1343,
      352
    ],
    "start_token": 306,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      3912,
      286,
      4375,
      5045,
      276,
      12514,
      284,
      257,
      41033
    ],
    "label": "ml_signal",
    "reason": "Usage pattern of adding Timedelta to a timestamp"
  },
  {
    "line": 47,
    "text": "    if level == IntervalLevel.LEVEL_1WEEK:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific parameters indicates a pattern for timestamp processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      1241,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      54,
      33823,
      25
    ],
    "start_token": 332,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      10007,
      9217,
      257,
      3912,
      329,
      41033,
      7587
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific parameters indicates a pattern for timestamp processing"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of input to a specific type (pd.Timestamp) indicates data normalization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 349,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      5128,
      284,
      257,
      2176,
      2099,
      357,
      30094,
      13,
      14967,
      27823,
      8,
      9217,
      1366,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Conversion of input to a specific type (pd.Timestamp) indicates data normalization"
  },
  {
    "line": 51,
    "text": "        return int(math.ceil(time_delta.days / 30)) + 1",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining on objects (level.floor_timestamp) indicates object-oriented design patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      493,
      7,
      11018,
      13,
      344,
      346,
      7,
      2435,
      62,
      67,
      12514,
      13,
      12545,
      1220,
      1542,
      4008,
      1343,
      352
    ],
    "start_token": 349,
    "end_token": 375,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      319,
      5563,
      357,
      5715,
      13,
      28300,
      62,
      16514,
      27823,
      8,
      9217,
      2134,
      12,
      17107,
      1486,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining on objects (level.floor_timestamp) indicates object-oriented design patterns"
  },
  {
    "line": 51,
    "text": "        return int(math.ceil(time_delta.days / 30)) + 1",
    "annotation": "\u2705 Best Practice: Explicit return of boolean values improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      493,
      7,
      11018,
      13,
      344,
      346,
      7,
      2435,
      62,
      67,
      12514,
      13,
      12545,
      1220,
      1542,
      4008,
      1343,
      352
    ],
    "start_token": 375,
    "end_token": 401,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      25131,
      3815,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicit return of boolean values improves readability"
  }
]
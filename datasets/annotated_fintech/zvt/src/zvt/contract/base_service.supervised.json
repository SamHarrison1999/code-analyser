[
  {
    "line": 3,
    "text": "from typing import Type, List",
    "annotation": "\u2705 Best Practice: Group imports into standard library, third-party, and local sections for better readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      5994,
      11,
      7343
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      9004,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports into standard library, third-party, and local sections for better readability."
  },
  {
    "line": 6,
    "text": "from zvt.contract.zvt_info import StateMixin",
    "annotation": "\u2705 Best Practice: Class docstring provides a description of the class purpose",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      89,
      36540,
      62,
      10951,
      1330,
      1812,
      35608,
      259
    ],
    "start_token": 6,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a description of the class purpose"
  },
  {
    "line": 11,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for class variables improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 20,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1398,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for class variables improves code readability and maintainability"
  },
  {
    "line": 13,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Initializing class variables to None for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 24,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      1398,
      9633,
      284,
      6045,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Initializing class variables to None for clarity"
  },
  {
    "line": 13,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statement for runtime checks can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 28,
    "end_token": 32,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      2643,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statement for runtime checks can be disabled with optimization flags."
  },
  {
    "line": 15,
    "text": "    #: state schema",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an attribute is None before assigning a default value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      1181,
      32815
    ],
    "start_token": 32,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      11688,
      318,
      6045,
      878,
      38875,
      257,
      4277,
      1988,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking if an attribute is None before assigning a default value."
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting class name to snake case string for naming consistency.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 39,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1398,
      1438,
      284,
      17522,
      1339,
      4731,
      329,
      19264,
      15794,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting class name to snake case string for naming consistency."
  },
  {
    "line": 18,
    "text": "    #: name of the service, default name of class if not set manually",
    "annotation": "\ud83e\udde0 ML Signal: Initializing a database session with specific schema and provider.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      1438,
      286,
      262,
      2139,
      11,
      4277,
      1438,
      286,
      1398,
      611,
      407,
      900,
      14500
    ],
    "start_token": 39,
    "end_token": 57,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      257,
      6831,
      6246,
      351,
      2176,
      32815,
      290,
      10131,
      13
    ],
    "label": "ml_signal",
    "reason": "Initializing a database session with specific schema and provider."
  },
  {
    "line": 22,
    "text": "        assert self.state_schema is not None",
    "annotation": "\u2705 Best Practice: Use a list comprehension or extend method for better readability when adding to lists",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      2116,
      13,
      5219,
      62,
      15952,
      2611,
      318,
      407,
      6045
    ],
    "start_token": 57,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      1351,
      35915,
      393,
      9117,
      2446,
      329,
      1365,
      1100,
      1799,
      618,
      4375,
      284,
      8341
    ],
    "label": "best_practice",
    "reason": "Use a list comprehension or extend method for better readability when adding to lists"
  },
  {
    "line": 25,
    "text": "        self.state_session = get_db_session(data_schema=self.state_schema, provider=\"zvt\")",
    "annotation": "\u2705 Best Practice: Use list concatenation or extend method for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5219,
      62,
      29891,
      796,
      651,
      62,
      9945,
      62,
      29891,
      7,
      7890,
      62,
      15952,
      2611,
      28,
      944,
      13,
      5219,
      62,
      15952,
      2611,
      11,
      10131,
      2625,
      89,
      36540,
      4943
    ],
    "start_token": 74,
    "end_token": 110,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      1673,
      36686,
      341,
      393,
      9117,
      2446,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use list concatenation or extend method for better readability"
  },
  {
    "line": 27,
    "text": "    def clear_state_data(self, entity_id=None):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that del_data function properly sanitizes inputs to prevent SQL injection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1598,
      62,
      5219,
      62,
      7890,
      7,
      944,
      11,
      9312,
      62,
      312,
      28,
      14202,
      2599
    ],
    "start_token": 110,
    "end_token": 128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      1619,
      62,
      7890,
      2163,
      6105,
      5336,
      3029,
      274,
      17311,
      284,
      2948,
      16363,
      16954
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that del_data function properly sanitizes inputs to prevent SQL injection"
  },
  {
    "line": 32,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using json.loads with a custom object_hook can lead to code execution if the input is not trusted.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 128,
    "end_token": 136,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      33918,
      13,
      46030,
      351,
      257,
      2183,
      2134,
      62,
      25480,
      460,
      1085,
      284,
      2438,
      9706,
      611,
      262,
      5128,
      318,
      407,
      13467,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using json.loads with a custom object_hook can lead to code execution if the input is not trusted."
  },
  {
    "line": 33,
    "text": "        filters = [self.state_schema.state_name == self.name]",
    "annotation": "\u2705 Best Practice: Ensure that the state input is sanitized or comes from a trusted source to prevent security risks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      796,
      685,
      944,
      13,
      5219,
      62,
      15952,
      2611,
      13,
      5219,
      62,
      3672,
      6624,
      2116,
      13,
      3672,
      60
    ],
    "start_token": 136,
    "end_token": 161,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      1181,
      5128,
      318,
      5336,
      36951,
      393,
      2058,
      422,
      257,
      13467,
      2723,
      284,
      2948,
      2324,
      7476,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the state input is sanitized or comes from a trusted source to prevent security risks."
  },
  {
    "line": 39,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using json.dumps without ensuring the state is serializable can lead to runtime errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 161,
    "end_token": 169,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      33918,
      13,
      67,
      8142,
      1231,
      13359,
      262,
      1181,
      318,
      11389,
      13821,
      460,
      1085,
      284,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using json.dumps without ensuring the state is serializable can lead to runtime errors."
  },
  {
    "line": 40,
    "text": "        decode state",
    "annotation": "\u2705 Best Practice: Consider handling exceptions that may arise from json.dumps for robustness.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36899,
      1181
    ],
    "start_token": 169,
    "end_token": 178,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      9041,
      13269,
      326,
      743,
      15058,
      422,
      33918,
      13,
      67,
      8142,
      329,
      12373,
      1108,
      13
    ],
    "label": "best_practice",
    "reason": "Consider handling exceptions that may arise from json.dumps for robustness."
  },
  {
    "line": 40,
    "text": "        decode state",
    "annotation": "\u2705 Best Practice: Method should have a docstring to describe its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36899,
      1181
    ],
    "start_token": 178,
    "end_token": 187,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring to describe its purpose"
  },
  {
    "line": 42,
    "text": "        :param state:",
    "annotation": "\u2705 Best Practice: Consider adding a return type hint for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1181,
      25
    ],
    "start_token": 187,
    "end_token": 198,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      1441,
      2099,
      9254,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Consider adding a return type hint for clarity"
  },
  {
    "line": 42,
    "text": "        :param state:",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and behavior of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1181,
      25
    ],
    "start_token": 198,
    "end_token": 209,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and behavior of the function"
  },
  {
    "line": 44,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Returning None explicitly is clear, but consider if this is the intended behavior or a placeholder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 209,
    "end_token": 217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      6045,
      11777,
      318,
      1598,
      11,
      475,
      2074,
      611,
      428,
      318,
      262,
      5292,
      4069,
      393,
      257,
      46076
    ],
    "label": "best_practice",
    "reason": "Returning None explicitly is clear, but consider if this is the intended behavior or a placeholder"
  },
  {
    "line": 48,
    "text": "    def encode_state(self, state: object):",
    "annotation": "\u2705 Best Practice: Consider adding a constructor to initialize the state object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      37773,
      62,
      5219,
      7,
      944,
      11,
      1181,
      25,
      2134,
      2599
    ],
    "start_token": 217,
    "end_token": 231,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      23772,
      284,
      41216,
      262,
      1181,
      2134
    ],
    "label": "best_practice",
    "reason": "Consider adding a constructor to initialize the state object"
  },
  {
    "line": 50,
    "text": "        encode state",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37773,
      1181
    ],
    "start_token": 231,
    "end_token": 240,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 52,
    "text": "        :param state:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of an object.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1181,
      25
    ],
    "start_token": 240,
    "end_token": 251,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      281,
      2134,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of an object."
  },
  {
    "line": 54,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for 'self.state' improves code clarity and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 251,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      944,
      13,
      5219,
      6,
      19575,
      2438,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'self.state' improves code clarity and maintainability."
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling of NoneType for missing or invalid data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      286,
      6045,
      6030,
      329,
      4814,
      393,
      12515,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Handling of NoneType for missing or invalid data."
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method for persisting state, indicating a pattern of saving or updating data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      2774,
      9665,
      1181,
      11,
      12739,
      257,
      3912,
      286,
      8914,
      393,
      19698,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method for persisting state, indicating a pattern of saving or updating data"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Encoding state before persistence, common in data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14711,
      7656,
      1181,
      878,
      30802,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Encoding state before persistence, common in data processing"
  },
  {
    "line": 59,
    "text": "        return None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if self.state_domain is not properly initialized elsewhere",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 259,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      2116,
      13,
      5219,
      62,
      27830,
      318,
      407,
      6105,
      23224,
      8057
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if self.state_domain is not properly initialized elsewhere"
  },
  {
    "line": 61,
    "text": "    def state_encoder(self):",
    "annotation": "\ud83e\udde0 ML Signal: Lazy initialization of state_domain, a pattern for resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1181,
      62,
      12685,
      12342,
      7,
      944,
      2599
    ],
    "start_token": 268,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      406,
      12582,
      37588,
      286,
      1181,
      62,
      27830,
      11,
      257,
      3912,
      329,
      8271,
      4542
    ],
    "label": "ml_signal",
    "reason": "Lazy initialization of state_domain, a pattern for resource management"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assigning encoded state to domain object, a pattern in ORM usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 279,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      30240,
      1181,
      284,
      7386,
      2134,
      11,
      257,
      3912,
      287,
      6375,
      44,
      8748
    ],
    "label": "ml_signal",
    "reason": "Assigning encoded state to domain object, a pattern in ORM usage"
  },
  {
    "line": 66,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Adding domain object to session, indicating ORM usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 279,
    "end_token": 283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      7386,
      2134,
      284,
      6246,
      11,
      12739,
      6375,
      44,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Adding domain object to session, indicating ORM usage pattern"
  },
  {
    "line": 67,
    "text": "    StatefulService which saving all states in one object",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Committing to a session without error handling can lead to data integrity issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1812,
      913,
      16177,
      543,
      8914,
      477,
      2585,
      287,
      530,
      2134
    ],
    "start_token": 283,
    "end_token": 296,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1520,
      2535,
      284,
      257,
      6246,
      1231,
      4049,
      9041,
      460,
      1085,
      284,
      1366,
      11540,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Committing to a session without error handling can lead to data integrity issues"
  },
  {
    "line": 66,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Class docstring should be more descriptive and follow PEP 257 guidelines",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 296,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      815,
      307,
      517,
      35644,
      290,
      1061,
      350,
      8905,
      36100,
      9949
    ],
    "label": "best_practice",
    "reason": "Class docstring should be more descriptive and follow PEP 257 guidelines"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method with filters and entity_ids",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      351,
      16628,
      290,
      9312,
      62,
      2340
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method with filters and entity_ids"
  },
  {
    "line": 73,
    "text": "        if self.state_domain:",
    "annotation": "\u2705 Best Practice: Initialize self.states as a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5219,
      62,
      27830,
      25
    ],
    "start_token": 300,
    "end_token": 314,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      2116,
      13,
      27219,
      355,
      257,
      22155
    ],
    "label": "best_practice",
    "reason": "Initialize self.states as a dictionary"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over state_domains to populate self.states",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 314,
    "end_token": 314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1181,
      62,
      3438,
      1299,
      284,
      48040,
      2116,
      13,
      27219
    ],
    "label": "ml_signal",
    "reason": "Iterating over state_domains to populate self.states"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self.states.get to retrieve state by entity_id",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 314,
    "end_token": 314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      13,
      27219,
      13,
      1136,
      284,
      19818,
      1181,
      416,
      9312,
      62,
      312
    ],
    "label": "ml_signal",
    "reason": "Usage of self.states.get to retrieve state by entity_id"
  },
  {
    "line": 80,
    "text": "        if not self.state_domain:",
    "annotation": "\ud83e\udde0 ML Signal: String formatting pattern for domain_id",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      5219,
      62,
      27830,
      25
    ],
    "start_token": 314,
    "end_token": 329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      3912,
      329,
      7386,
      62,
      312
    ],
    "label": "ml_signal",
    "reason": "String formatting pattern for domain_id"
  },
  {
    "line": 82,
    "text": "        self.state_domain.state = state_str",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self.state_schema.get_by_id to retrieve state domain",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5219,
      62,
      27830,
      13,
      5219,
      796,
      1181,
      62,
      2536
    ],
    "start_token": 329,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      13,
      5219,
      62,
      15952,
      2611,
      13,
      1136,
      62,
      1525,
      62,
      312,
      284,
      19818,
      1181,
      7386
    ],
    "label": "ml_signal",
    "reason": "Usage of self.state_schema.get_by_id to retrieve state domain"
  },
  {
    "line": 84,
    "text": "        self.state_session.commit()",
    "annotation": "\ud83e\udde0 ML Signal: Encoding state using self.encode_state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5219,
      62,
      29891,
      13,
      41509,
      3419
    ],
    "start_token": 347,
    "end_token": 362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14711,
      7656,
      1181,
      1262,
      2116,
      13,
      268,
      8189,
      62,
      5219
    ],
    "label": "ml_signal",
    "reason": "Encoding state using self.encode_state"
  },
  {
    "line": 87,
    "text": "class EntityStateService(StatefulService):",
    "annotation": "\ud83e\udde0 ML Signal: Creating a new state domain if it doesn't exist",
    "confidence": 1.0,
    "tokens": [
      4871,
      20885,
      9012,
      16177,
      7,
      9012,
      913,
      16177,
      2599
    ],
    "start_token": 362,
    "end_token": 371,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      649,
      1181,
      7386,
      611,
      340,
      1595,
      470,
      2152
    ],
    "label": "ml_signal",
    "reason": "Creating a new state domain if it doesn't exist"
  },
  {
    "line": 87,
    "text": "class EntityStateService(StatefulService):",
    "annotation": "\ud83e\udde0 ML Signal: Setting state on state_domain",
    "confidence": 0.5,
    "tokens": [
      4871,
      20885,
      9012,
      16177,
      7,
      9012,
      913,
      16177,
      2599
    ],
    "start_token": 371,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      1181,
      319,
      1181,
      62,
      27830
    ],
    "label": "ml_signal",
    "reason": "Setting state on state_domain"
  },
  {
    "line": 87,
    "text": "class EntityStateService(StatefulService):",
    "annotation": "\ud83e\udde0 ML Signal: Adding state_domain to session",
    "confidence": 0.5,
    "tokens": [
      4871,
      20885,
      9012,
      16177,
      7,
      9012,
      913,
      16177,
      2599
    ],
    "start_token": 380,
    "end_token": 389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      1181,
      62,
      27830,
      284,
      6246
    ],
    "label": "ml_signal",
    "reason": "Adding state_domain to session"
  },
  {
    "line": 87,
    "text": "class EntityStateService(StatefulService):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Committing to the database without exception handling",
    "confidence": 1.0,
    "tokens": [
      4871,
      20885,
      9012,
      16177,
      7,
      9012,
      913,
      16177,
      2599
    ],
    "start_token": 389,
    "end_token": 398,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1520,
      2535,
      284,
      262,
      6831,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Committing to the database without exception handling"
  },
  {
    "line": 87,
    "text": "class EntityStateService(StatefulService):",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      4871,
      20885,
      9012,
      16177,
      7,
      9012,
      913,
      16177,
      2599
    ],
    "start_token": 398,
    "end_token": 407,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
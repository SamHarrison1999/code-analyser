[
  {
    "line": 2,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 7,
    "text": "from zvt.factors.technical_factor import TechnicalFactor",
    "annotation": "\ud83e\udde0 ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      47944,
      62,
      31412,
      1330,
      20671,
      41384
    ],
    "start_token": 6,
    "end_token": 19,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      12608,
      286,
      257,
      2746,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing attributes of a model object, indicating a pattern of object-oriented design."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 19,
    "end_token": 19,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      12608,
      286,
      257,
      2746,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing attributes of a model object, indicating a pattern of object-oriented design."
  },
  {
    "line": 11,
    "text": "def query_factor_result(factor_request_model: FactorRequestModel):",
    "annotation": "\ud83e\udde0 ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.",
    "confidence": 0.5,
    "tokens": [
      4299,
      12405,
      62,
      31412,
      62,
      20274,
      7,
      31412,
      62,
      25927,
      62,
      19849,
      25,
      27929,
      18453,
      17633,
      2599
    ],
    "start_token": 19,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      12608,
      286,
      257,
      2746,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing attributes of a model object, indicating a pattern of object-oriented design."
  },
  {
    "line": 11,
    "text": "def query_factor_result(factor_request_model: FactorRequestModel):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a registry pattern to retrieve a class, indicating dynamic class instantiation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      12405,
      62,
      31412,
      62,
      20274,
      7,
      31412,
      62,
      25927,
      62,
      19849,
      25,
      27929,
      18453,
      17633,
      2599
    ],
    "start_token": 36,
    "end_token": 53,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      20478,
      3912,
      284,
      19818,
      257,
      1398,
      11,
      12739,
      8925,
      1398,
      9113,
      3920,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a registry pattern to retrieve a class, indicating dynamic class instantiation."
  },
  {
    "line": 11,
    "text": "def query_factor_result(factor_request_model: FactorRequestModel):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of code injection if factor_name is not validated.",
    "confidence": 0.5,
    "tokens": [
      4299,
      12405,
      62,
      31412,
      62,
      20274,
      7,
      31412,
      62,
      25927,
      62,
      19849,
      25,
      27929,
      18453,
      17633,
      2599
    ],
    "start_token": 53,
    "end_token": 70,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      2438,
      16954,
      611,
      5766,
      62,
      3672,
      318,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of code injection if factor_name is not validated."
  },
  {
    "line": 21,
    "text": "        level=level,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      5715,
      11
    ],
    "start_token": 70,
    "end_token": 81,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      12608,
      286,
      257,
      2746,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing attributes of a model object, indicating a pattern of object-oriented design."
  },
  {
    "line": 24,
    "text": "    df = factor.get_trading_signal_df()",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object, indicating a pattern of object-oriented design.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      5766,
      13,
      1136,
      62,
      2213,
      4980,
      62,
      12683,
      282,
      62,
      7568,
      3419
    ],
    "start_token": 81,
    "end_token": 98,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call on an object, indicating a pattern of object-oriented design."
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly resetting index with drop=False to retain the old index as a column.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 98,
    "end_token": 98,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      13259,
      889,
      6376,
      351,
      4268,
      28,
      25101,
      284,
      12377,
      262,
      1468,
      6376,
      355,
      257,
      5721,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly resetting index with drop=False to retain the old index as a column."
  },
  {
    "line": 22,
    "text": "        start_timestamp=factor_request_model.start_timestamp,",
    "annotation": "\u2705 Best Practice: Check for None explicitly to handle null values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      31412,
      62,
      25927,
      62,
      19849,
      13,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 98,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      11777,
      284,
      5412,
      9242,
      3815
    ],
    "label": "best_practice",
    "reason": "Check for None explicitly to handle null values"
  },
  {
    "line": 25,
    "text": "    df = df.reset_index(drop=False)",
    "annotation": "\u2705 Best Practice: Simplify condition by directly returning the result",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      42503,
      62,
      9630,
      7,
      14781,
      28,
      25101,
      8
    ],
    "start_token": 121,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45157,
      1958,
      4006,
      416,
      3264,
      8024,
      262,
      1255
    ],
    "label": "best_practice",
    "reason": "Simplify condition by directly returning the result"
  },
  {
    "line": 28,
    "text": "        if order_type is None:",
    "annotation": "\u2705 Best Practice: The 'if not order_type' is redundant here, consider using 'else'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1502,
      62,
      4906,
      318,
      6045,
      25
    ],
    "start_token": 136,
    "end_token": 150,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      383,
      705,
      361,
      407,
      1502,
      62,
      4906,
      6,
      318,
      30806,
      994,
      11,
      2074,
      1262,
      705,
      17772,
      6
    ],
    "label": "best_practice",
    "reason": "The 'if not order_type' is redundant here, consider using 'else'"
  },
  {
    "line": 31,
    "text": "            return TradingSignalType.open_long",
    "annotation": "\u2705 Best Practice: Use descriptive column names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      11712,
      282,
      6030,
      13,
      9654,
      62,
      6511
    ],
    "start_token": 150,
    "end_token": 170,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      5721,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive column names for better readability"
  },
  {
    "line": 33,
    "text": "            return TradingSignalType.close_long",
    "annotation": "\ud83e\udde0 ML Signal: Feature engineering by creating new columns based on existing data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      11712,
      282,
      6030,
      13,
      19836,
      62,
      6511
    ],
    "start_token": 170,
    "end_token": 190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27018,
      8705,
      416,
      4441,
      649,
      15180,
      1912,
      319,
      4683,
      1366
    ],
    "label": "ml_signal",
    "reason": "Feature engineering by creating new columns based on existing data"
  },
  {
    "line": 33,
    "text": "            return TradingSignalType.close_long",
    "annotation": "\ud83e\udde0 ML Signal: Applying a function to a DataFrame column to transform data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      11712,
      282,
      6030,
      13,
      19836,
      62,
      6511
    ],
    "start_token": 190,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      2163,
      284,
      257,
      6060,
      19778,
      5721,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "Applying a function to a DataFrame column to transform data"
  },
  {
    "line": 33,
    "text": "            return TradingSignalType.close_long",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      11712,
      282,
      6030,
      13,
      19836,
      62,
      6511
    ],
    "start_token": 210,
    "end_token": 230,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 33,
    "text": "            return TradingSignalType.close_long",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame to a list of dictionaries for further processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      11712,
      282,
      6030,
      13,
      19836,
      62,
      6511
    ],
    "start_token": 230,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      284,
      257,
      1351,
      286,
      48589,
      3166,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame to a list of dictionaries for further processing"
  },
  {
    "line": 33,
    "text": "            return TradingSignalType.close_long",
    "annotation": "\u2705 Best Practice: Use __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      11712,
      282,
      6030,
      13,
      19836,
      62,
      6511
    ],
    "start_token": 250,
    "end_token": 270,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use __all__ to define public API of the module"
  }
]
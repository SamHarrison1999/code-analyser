[
  {
    "line": 5,
    "text": "from sqlalchemy import Column, String, Integer",
    "annotation": "\u2705 Best Practice: Group imports from the same module together for better readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      1330,
      29201,
      11,
      10903,
      11,
      34142
    ],
    "start_token": 0,
    "end_token": 10,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports from the same module together for better readability."
  },
  {
    "line": 28,
    "text": "    to_pd_timestamp,",
    "annotation": "\u2705 Best Practice: Use a consistent naming convention for base classes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 10,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      6414,
      19264,
      9831,
      329,
      2779,
      6097,
      13
    ],
    "label": "best_practice",
    "reason": "Use a consistent naming convention for base classes."
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 34,
    "text": "class TopStocks(TopStocksBase, Mixin):",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      4871,
      5849,
      1273,
      3320,
      7,
      9126,
      1273,
      3320,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 20,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 33,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 38,
    "text": "    short_stocks = Column(String(length=2048))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1790,
      62,
      29522,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      1238,
      2780,
      4008
    ],
    "start_token": 33,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 40,
    "text": "    long_count = Column(Integer)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      890,
      62,
      9127,
      796,
      29201,
      7,
      46541,
      8
    ],
    "start_token": 49,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 60,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 44,
    "text": "    small_vol_up_stocks = Column(String(length=2048))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1402,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      1238,
      2780,
      4008
    ],
    "start_token": 60,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 46,
    "text": "    big_vol_up_count = Column(Integer)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1263,
      62,
      10396,
      62,
      929,
      62,
      9127,
      796,
      29201,
      7,
      46541,
      8
    ],
    "start_token": 80,
    "end_token": 95,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 48,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of SQL injection if user input is not properly sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 95,
    "end_token": 95,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      16363,
      16954,
      611,
      2836,
      5128,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of SQL injection if user input is not properly sanitized"
  },
  {
    "line": 41,
    "text": "    long_stocks = Column(String(length=2048))",
    "annotation": "\ud83e\udde0 ML Signal: Function parameters indicate usage patterns for stock analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      890,
      62,
      29522,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      1238,
      2780,
      4008
    ],
    "start_token": 95,
    "end_token": 111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      10007,
      7603,
      8748,
      7572,
      329,
      4283,
      3781
    ],
    "label": "ml_signal",
    "reason": "Function parameters indicate usage patterns for stock analysis"
  },
  {
    "line": 43,
    "text": "    small_vol_up_count = Column(Integer)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on stock type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1402,
      62,
      10396,
      62,
      929,
      62,
      9127,
      796,
      29201,
      7,
      46541,
      8
    ],
    "start_token": 111,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4283,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on stock type"
  },
  {
    "line": 48,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on stock type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 126,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4283,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on stock type"
  },
  {
    "line": 54,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion without error message",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 126,
    "end_token": 126,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      1231,
      4049,
      3275
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion without error message"
  },
  {
    "line": 54,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering based on provided entity IDs",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 126,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1912,
      319,
      2810,
      9312,
      32373
    ],
    "label": "ml_signal",
    "reason": "Filtering based on provided entity IDs"
  },
  {
    "line": 63,
    "text": "        turnover_rate_threshold = 0.01",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25079,
      62,
      4873,
      62,
      400,
      10126,
      796,
      657,
      13,
      486
    ],
    "start_token": 126,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Further filtering based on current entity pool",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 143,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7735,
      25431,
      1912,
      319,
      1459,
      9312,
      5933
    ],
    "label": "ml_signal",
    "reason": "Further filtering based on current entity pool"
  },
  {
    "line": 87,
    "text": "        provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Using a factor model to get target stocks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 143,
    "end_token": 155,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      5766,
      2746,
      284,
      651,
      2496,
      14420
    ],
    "label": "ml_signal",
    "reason": "Using a factor model to get target stocks"
  },
  {
    "line": 82,
    "text": "        current_entity_pool = kdata_df.index.tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific database session provider and schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      26858,
      62,
      7742,
      796,
      479,
      7890,
      62,
      7568,
      13,
      9630,
      13,
      83,
      349,
      396,
      3419
    ],
    "start_token": 155,
    "end_token": 179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      6831,
      6246,
      10131,
      290,
      32815
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific database session provider and schema"
  },
  {
    "line": 84,
    "text": "    factor = VolumeUpMaFactor(",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      5766,
      796,
      14701,
      4933,
      21467,
      41384,
      7
    ],
    "start_token": 179,
    "end_token": 189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific parameters"
  },
  {
    "line": 89,
    "text": "        start_timestamp=date_time_by_interval(target_date, -600),",
    "annotation": "\ud83e\udde0 ML Signal: Fetching related data based on a timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      4475,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7,
      16793,
      62,
      4475,
      11,
      532,
      8054,
      828
    ],
    "start_token": 189,
    "end_token": 217,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      3519,
      1366,
      1912,
      319,
      257,
      41033
    ],
    "label": "ml_signal",
    "reason": "Fetching related data based on a timestamp"
  },
  {
    "line": 91,
    "text": "        adjust_type=AdjustType.hfq,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of loading untrusted JSON data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4532,
      62,
      4906,
      28,
      39668,
      6030,
      13,
      71,
      69,
      80,
      11
    ],
    "start_token": 217,
    "end_token": 235,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      11046,
      1418,
      81,
      8459,
      19449,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of loading untrusted JSON data"
  },
  {
    "line": 93,
    "text": "        over_mode=\"or\",",
    "annotation": "\u2705 Best Practice: Using set to remove duplicates from a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      625,
      62,
      14171,
      2625,
      273,
      1600
    ],
    "start_token": 235,
    "end_token": 248,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      284,
      4781,
      14184,
      16856,
      422,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Using set to remove duplicates from a list"
  },
  {
    "line": 95,
    "text": "        turnover_threshold=turnover_threshold,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of dumping untrusted JSON data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25079,
      62,
      400,
      10126,
      28,
      15344,
      2502,
      62,
      400,
      10126,
      11
    ],
    "start_token": 248,
    "end_token": 266,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      30231,
      1418,
      81,
      8459,
      19449,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of dumping untrusted JSON data"
  },
  {
    "line": 97,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Directly assigning the length of a list to a variable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 266,
    "end_token": 270,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      306,
      38875,
      262,
      4129,
      286,
      257,
      1351,
      284,
      257,
      7885
    ],
    "label": "best_practice",
    "reason": "Directly assigning the length of a list to a variable"
  },
  {
    "line": 100,
    "text": "    return stocks",
    "annotation": "\u2705 Best Practice: Using session.add_all for bulk operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      14420
    ],
    "start_token": 270,
    "end_token": 275,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      6246,
      13,
      2860,
      62,
      439,
      329,
      11963,
      4560
    ],
    "label": "best_practice",
    "reason": "Using session.add_all for bulk operations"
  },
  {
    "line": 101,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Committing changes to the database without error handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 275,
    "end_token": 275,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1520,
      2535,
      2458,
      284,
      262,
      6831,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Committing changes to the database without error handling"
  },
  {
    "line": 96,
    "text": "        turnover_rate_threshold=turnover_rate_threshold,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific database session provider and schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25079,
      62,
      4873,
      62,
      400,
      10126,
      28,
      15344,
      2502,
      62,
      4873,
      62,
      400,
      10126,
      11
    ],
    "start_token": 275,
    "end_token": 297,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      6831,
      6246,
      10131,
      290,
      32815
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific database session provider and schema"
  },
  {
    "line": 97,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 297,
    "end_token": 301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific parameters"
  },
  {
    "line": 104,
    "text": "    session = get_db_session(provider=\"zvt\", data_schema=TopStocks)",
    "annotation": "\ud83e\udde0 ML Signal: Counting intervals between dates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6246,
      796,
      651,
      62,
      9945,
      62,
      29891,
      7,
      15234,
      1304,
      2625,
      89,
      36540,
      1600,
      1366,
      62,
      15952,
      2611,
      28,
      9126,
      1273,
      3320,
      8
    ],
    "start_token": 301,
    "end_token": 327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      20016,
      1022,
      9667
    ],
    "label": "ml_signal",
    "reason": "Counting intervals between dates"
  },
  {
    "line": 104,
    "text": "    session = get_db_session(provider=\"zvt\", data_schema=TopStocks)",
    "annotation": "\ud83e\udde0 ML Signal: Filtering entity IDs based on multiple conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6246,
      796,
      651,
      62,
      9945,
      62,
      29891,
      7,
      15234,
      1304,
      2625,
      89,
      36540,
      1600,
      1366,
      62,
      15952,
      2611,
      28,
      9126,
      1273,
      3320,
      8
    ],
    "start_token": 327,
    "end_token": 353,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      9312,
      32373,
      1912,
      319,
      3294,
      3403
    ],
    "label": "ml_signal",
    "reason": "Filtering entity IDs based on multiple conditions"
  },
  {
    "line": 116,
    "text": "    session.commit()",
    "annotation": "\ud83e\udde0 ML Signal: Fetching stocks with volume up based on type and entity IDs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6246,
      13,
      41509,
      3419
    ],
    "start_token": 353,
    "end_token": 360,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      14420,
      351,
      6115,
      510,
      1912,
      319,
      2099,
      290,
      9312,
      32373
    ],
    "label": "ml_signal",
    "reason": "Fetching stocks with volume up based on type and entity IDs"
  },
  {
    "line": 120,
    "text": "    session = get_db_session(provider=\"zvt\", data_schema=TopStocks)",
    "annotation": "\u2705 Best Practice: Using len() to get the count of items in a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6246,
      796,
      651,
      62,
      9945,
      62,
      29891,
      7,
      15234,
      1304,
      2625,
      89,
      36540,
      1600,
      1366,
      62,
      15952,
      2611,
      28,
      9126,
      1273,
      3320,
      8
    ],
    "start_token": 360,
    "end_token": 386,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18896,
      3419,
      284,
      651,
      262,
      954,
      286,
      3709,
      287,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Using len() to get the count of items in a list"
  },
  {
    "line": 122,
    "text": "    top_stocks: List[TopStocks] = TopStocks.query_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Storing JSON data as a string in a database",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1353,
      62,
      29522,
      25,
      7343,
      58,
      9126,
      1273,
      3320,
      60,
      796,
      5849,
      1273,
      3320,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 386,
    "end_token": 408,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      520,
      3255,
      19449,
      1366,
      355,
      257,
      4731,
      287,
      257,
      6831
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Storing JSON data as a string in a database"
  },
  {
    "line": 127,
    "text": "        count_bj = count_interval(\"2023-09-01\", target_date)",
    "annotation": "\u2705 Best Practice: Using len() to get the count of items in a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      954,
      62,
      50007,
      796,
      954,
      62,
      3849,
      2100,
      7203,
      1238,
      1954,
      12,
      2931,
      12,
      486,
      1600,
      2496,
      62,
      4475,
      8
    ],
    "start_token": 408,
    "end_token": 435,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18896,
      3419,
      284,
      651,
      262,
      954,
      286,
      3709,
      287,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Using len() to get the count of items in a list"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Storing JSON data as a string in a database",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 435,
    "end_token": 435,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      520,
      3255,
      19449,
      1366,
      355,
      257,
      4731,
      287,
      257,
      6831
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Storing JSON data as a string in a database"
  },
  {
    "line": 131,
    "text": "            target_date=target_date,",
    "annotation": "\u2705 Best Practice: Adding and committing changes to the session",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2496,
      62,
      4475,
      28,
      16793,
      62,
      4475,
      11
    ],
    "start_token": 435,
    "end_token": 454,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      290,
      17222,
      2458,
      284,
      262,
      6246
    ],
    "label": "best_practice",
    "reason": "Adding and committing changes to the session"
  },
  {
    "line": 133,
    "text": "            ignore_delist=False,",
    "annotation": "\ud83e\udde0 ML Signal: Logging or printing completion messages",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      12381,
      396,
      28,
      25101,
      11
    ],
    "start_token": 454,
    "end_token": 472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      393,
      13570,
      11939,
      6218
    ],
    "label": "ml_signal",
    "reason": "Logging or printing completion messages"
  },
  {
    "line": 126,
    "text": "        target_date = top_stock.timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query to fetch latest data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2496,
      62,
      4475,
      796,
      1353,
      62,
      13578,
      13,
      16514,
      27823
    ],
    "start_token": 472,
    "end_token": 489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      284,
      21207,
      3452,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of query to fetch latest data"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on query result",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 489,
    "end_token": 489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      12405,
      1255
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on query result"
  },
  {
    "line": 131,
    "text": "            target_date=target_date,",
    "annotation": "\ud83e\udde0 ML Signal: Fetching trade dates for a given period",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2496,
      62,
      4475,
      28,
      16793,
      62,
      4475,
      11
    ],
    "start_token": 489,
    "end_token": 508,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      3292,
      9667,
      329,
      257,
      1813,
      2278
    ],
    "label": "ml_signal",
    "reason": "Fetching trade dates for a given period"
  },
  {
    "line": 133,
    "text": "            ignore_delist=False,",
    "annotation": "\u2705 Best Practice: Logging or printing progress for each target date",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      12381,
      396,
      28,
      25101,
      11
    ],
    "start_token": 508,
    "end_token": 526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      393,
      13570,
      4371,
      329,
      1123,
      2496,
      3128
    ],
    "label": "best_practice",
    "reason": "Logging or printing progress for each target date"
  },
  {
    "line": 136,
    "text": "            ignore_bj=ignore_bj,",
    "annotation": "\ud83e\udde0 ML Signal: Database session management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      50007,
      28,
      46430,
      62,
      50007,
      11
    ],
    "start_token": 526,
    "end_token": 545,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24047,
      6246,
      4542
    ],
    "label": "ml_signal",
    "reason": "Database session management"
  },
  {
    "line": 138,
    "text": "        small_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\ud83e\udde0 ML Signal: Creating a new TopStocks object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1402,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 545,
    "end_token": 568,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      649,
      5849,
      1273,
      3320,
      2134
    ],
    "label": "ml_signal",
    "reason": "Creating a new TopStocks object"
  },
  {
    "line": 138,
    "text": "        small_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\ud83e\udde0 ML Signal: Counting intervals for business logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1402,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 568,
    "end_token": 591,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      20016,
      329,
      1597,
      9156
    ],
    "label": "ml_signal",
    "reason": "Counting intervals for business logic"
  },
  {
    "line": 146,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on count",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 591,
    "end_token": 599,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      954
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on count"
  },
  {
    "line": 146,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Fetching entity IDs with specific filters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 599,
    "end_token": 607,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      9312,
      32373,
      351,
      2176,
      16628
    ],
    "label": "ml_signal",
    "reason": "Fetching entity IDs with specific filters"
  },
  {
    "line": 161,
    "text": "    for target_date in trade_days:",
    "annotation": "\ud83e\udde0 ML Signal: Fetching top performance entities",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      2496,
      62,
      4475,
      287,
      3292,
      62,
      12545,
      25
    ],
    "start_token": 607,
    "end_token": 619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1353,
      2854,
      12066
    ],
    "label": "ml_signal",
    "reason": "Fetching top performance entities"
  },
  {
    "line": 166,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Fetching limit up stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 619,
    "end_token": 627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      4179,
      510,
      14420
    ],
    "label": "ml_signal",
    "reason": "Fetching limit up stocks"
  },
  {
    "line": 166,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Combining and deduplicating stock lists",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 627,
    "end_token": 635,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14336,
      3191,
      290,
      4648,
      84,
      489,
      12364,
      4283,
      8341
    ],
    "label": "ml_signal",
    "reason": "Combining and deduplicating stock lists"
  },
  {
    "line": 181,
    "text": "            entity_provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Storing count of selected stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 635,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      954,
      286,
      6163,
      14420
    ],
    "label": "ml_signal",
    "reason": "Storing count of selected stocks"
  },
  {
    "line": 181,
    "text": "            entity_provider=provider,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential JSON injection if short_selected contains untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 654,
    "end_token": 673,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      19449,
      16954,
      611,
      1790,
      62,
      34213,
      4909,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential JSON injection if short_selected contains untrusted data"
  },
  {
    "line": 181,
    "text": "            entity_provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Calculating long period start",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 673,
    "end_token": 692,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      890,
      2278,
      923
    ],
    "label": "ml_signal",
    "reason": "Calculating long period start"
  },
  {
    "line": 181,
    "text": "            entity_provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Fetching long performance entities",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 692,
    "end_token": 711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      890,
      2854,
      12066
    ],
    "label": "ml_signal",
    "reason": "Fetching long performance entities"
  },
  {
    "line": 197,
    "text": "        top_stocks.short_count = len(short_selected)",
    "annotation": "\ud83e\udde0 ML Signal: Storing count of long selected stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1353,
      62,
      29522,
      13,
      19509,
      62,
      9127,
      796,
      18896,
      7,
      19509,
      62,
      34213,
      8
    ],
    "start_token": 711,
    "end_token": 732,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      954,
      286,
      890,
      6163,
      14420
    ],
    "label": "ml_signal",
    "reason": "Storing count of long selected stocks"
  },
  {
    "line": 198,
    "text": "        top_stocks.short_stocks = json.dumps(short_selected, ensure_ascii=False)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential JSON injection if long_selected contains untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1353,
      62,
      29522,
      13,
      19509,
      62,
      29522,
      796,
      33918,
      13,
      67,
      8142,
      7,
      19509,
      62,
      34213,
      11,
      4155,
      62,
      292,
      979,
      72,
      28,
      25101,
      8
    ],
    "start_token": 732,
    "end_token": 764,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      19449,
      16954,
      611,
      890,
      62,
      34213,
      4909,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential JSON injection if long_selected contains untrusted data"
  },
  {
    "line": 201,
    "text": "        long_selected, long_period = get_top_performance_entities_by_periods(",
    "annotation": "\ud83e\udde0 ML Signal: Fetching small volume up stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      34213,
      11,
      890,
      62,
      41007,
      796,
      651,
      62,
      4852,
      62,
      26585,
      62,
      298,
      871,
      62,
      1525,
      62,
      41007,
      82,
      7
    ],
    "start_token": 764,
    "end_token": 793,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1402,
      6115,
      510,
      14420
    ],
    "label": "ml_signal",
    "reason": "Fetching small volume up stocks"
  },
  {
    "line": 205,
    "text": "            periods=[*range(long_period_start, long_period_start + 30)],",
    "annotation": "\ud83e\udde0 ML Signal: Storing count of small volume up stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9574,
      41888,
      9,
      9521,
      7,
      6511,
      62,
      41007,
      62,
      9688,
      11,
      890,
      62,
      41007,
      62,
      9688,
      1343,
      1542,
      8,
      4357
    ],
    "start_token": 793,
    "end_token": 824,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      954,
      286,
      1402,
      6115,
      510,
      14420
    ],
    "label": "ml_signal",
    "reason": "Storing count of small volume up stocks"
  },
  {
    "line": 207,
    "text": "            ignore_st=False,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential JSON injection if small_vol_up_stocks contains untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      301,
      28,
      25101,
      11
    ],
    "start_token": 824,
    "end_token": 841,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      19449,
      16954,
      611,
      1402,
      62,
      10396,
      62,
      929,
      62,
      29522,
      4909,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential JSON injection if small_vol_up_stocks contains untrusted data"
  },
  {
    "line": 209,
    "text": "            entity_type=\"stock\",",
    "annotation": "\ud83e\udde0 ML Signal: Fetching big volume up stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      4906,
      2625,
      13578,
      1600
    ],
    "start_token": 841,
    "end_token": 858,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1263,
      6115,
      510,
      14420
    ],
    "label": "ml_signal",
    "reason": "Fetching big volume up stocks"
  },
  {
    "line": 213,
    "text": "            turnover_rate_threshold=0,",
    "annotation": "\ud83e\udde0 ML Signal: Storing count of big volume up stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25079,
      62,
      4873,
      62,
      400,
      10126,
      28,
      15,
      11
    ],
    "start_token": 858,
    "end_token": 878,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      954,
      286,
      1263,
      6115,
      510,
      14420
    ],
    "label": "ml_signal",
    "reason": "Storing count of big volume up stocks"
  },
  {
    "line": 215,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential JSON injection if big_vol_up_stocks contains untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 878,
    "end_token": 886,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      19449,
      16954,
      611,
      1263,
      62,
      10396,
      62,
      929,
      62,
      29522,
      4909,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential JSON injection if big_vol_up_stocks contains untrusted data"
  },
  {
    "line": 217,
    "text": "        top_stocks.long_stocks = json.dumps(long_selected, ensure_ascii=False)",
    "annotation": "\ud83e\udde0 ML Signal: Storing total count of all stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1353,
      62,
      29522,
      13,
      6511,
      62,
      29522,
      796,
      33918,
      13,
      67,
      8142,
      7,
      6511,
      62,
      34213,
      11,
      4155,
      62,
      292,
      979,
      72,
      28,
      25101,
      8
    ],
    "start_token": 886,
    "end_token": 918,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2472,
      954,
      286,
      477,
      14420
    ],
    "label": "ml_signal",
    "reason": "Storing total count of all stocks"
  },
  {
    "line": 219,
    "text": "        small_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\u2705 Best Practice: Logging or printing the top_stocks object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1402,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 918,
    "end_token": 941,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      393,
      13570,
      262,
      1353,
      62,
      29522,
      2134
    ],
    "label": "best_practice",
    "reason": "Logging or printing the top_stocks object"
  },
  {
    "line": 221,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Adding and committing to the database session",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 941,
    "end_token": 949,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      290,
      17222,
      284,
      262,
      6831,
      6246
    ],
    "label": "ml_signal",
    "reason": "Adding and committing to the database session"
  },
  {
    "line": 198,
    "text": "        top_stocks.short_stocks = json.dumps(short_selected, ensure_ascii=False)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a function with parameters and default values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1353,
      62,
      29522,
      13,
      19509,
      62,
      29522,
      796,
      33918,
      13,
      67,
      8142,
      7,
      19509,
      62,
      34213,
      11,
      4155,
      62,
      292,
      979,
      72,
      28,
      25101,
      8
    ],
    "start_token": 949,
    "end_token": 981,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2163,
      351,
      10007,
      290,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of a function with parameters and default values"
  },
  {
    "line": 202,
    "text": "            entity_provider=provider,",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      28,
      15234,
      1304,
      11
    ],
    "start_token": 981,
    "end_token": 1000,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific parameters"
  },
  {
    "line": 205,
    "text": "            periods=[*range(long_period_start, long_period_start + 30)],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9574,
      41888,
      9,
      9521,
      7,
      6511,
      62,
      41007,
      62,
      9688,
      11,
      890,
      62,
      41007,
      62,
      9688,
      1343,
      1542,
      8,
      4357
    ],
    "start_token": 1000,
    "end_token": 1031,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks"
  },
  {
    "line": 209,
    "text": "            entity_type=\"stock\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of json.loads without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      4906,
      2625,
      13578,
      1600
    ],
    "start_token": 1031,
    "end_token": 1048,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      33918,
      13,
      46030,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of json.loads without validation"
  },
  {
    "line": 214,
    "text": "            return_type=TopType.positive,",
    "annotation": "\u2705 Best Practice: Use set to remove duplicates",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      28,
      9126,
      6030,
      13,
      24561,
      11
    ],
    "start_token": 1048,
    "end_token": 1068,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      284,
      4781,
      14184,
      16856
    ],
    "label": "best_practice",
    "reason": "Use set to remove duplicates"
  },
  {
    "line": 218,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of json.loads without validation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1068,
    "end_token": 1068,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      33918,
      13,
      46030,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of json.loads without validation"
  },
  {
    "line": 221,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of json.loads without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1068,
    "end_token": 1076,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      33918,
      13,
      46030,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of json.loads without validation"
  },
  {
    "line": 224,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of json.loads without validation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1076,
    "end_token": 1076,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      33918,
      13,
      46030,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of json.loads without validation"
  },
  {
    "line": 225,
    "text": "        big_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of json.loads without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1263,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 1076,
    "end_token": 1099,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      33918,
      13,
      46030,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of json.loads without validation"
  },
  {
    "line": 225,
    "text": "        big_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1263,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 1099,
    "end_token": 1122,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks"
  },
  {
    "line": 225,
    "text": "        big_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\u2705 Best Practice: Use of main guard for script execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1263,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 1122,
    "end_token": 1145,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1388,
      4860,
      329,
      4226,
      9706
    ],
    "label": "best_practice",
    "reason": "Use of main guard for script execution"
  },
  {
    "line": 225,
    "text": "        big_vol_up_stocks = get_vol_up_stocks(",
    "annotation": "\u2705 Best Practice: Explicitly defining __all__ for module exports",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1263,
      62,
      10396,
      62,
      929,
      62,
      29522,
      796,
      651,
      62,
      10396,
      62,
      929,
      62,
      29522,
      7
    ],
    "start_token": 1145,
    "end_token": 1168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining __all__ for module exports"
  }
]
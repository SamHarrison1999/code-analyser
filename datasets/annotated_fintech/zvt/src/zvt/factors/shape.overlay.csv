annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Importing from external modules without validation can introduce security risks if the modules are compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 13103, 1231, 21201, 460, 10400, 2324, 7476, 611, 262, 13103, 389, 19066, 13]",0.5,0,sast_risk,6,Importing from external modules without validation can introduce security risks if the modules are compromised.,Low,0,,[]
‚úÖ Best Practice: Use a logger instead of print statements for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 5765, 257, 49706, 2427, 286, 3601, 6299, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",0.5,11,best_practice,11,Use a logger instead of print statements for better control over logging levels and outputs.,,0,from zvt.factors.algorithm import intersect,"[6738, 1976, 36540, 13, 22584, 669, 13, 282, 42289, 1330, 36177]"
‚úÖ Best Practice: Use of Enum for defining a set of named constants improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 16215, 257, 900, 286, 3706, 38491, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,22,best_practice,11,Use of Enum for defining a set of named constants improves code readability and maintainability,,11,from zvt.factors.algorithm import intersect,"[6738, 1976, 36540, 13, 22584, 669, 13, 282, 42289, 1330, 36177]"
‚úÖ Best Practice: Enum members are defined with clear and descriptive names,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 389, 5447, 351, 1598, 290, 35644, 3891]",1.0,22,best_practice,13,Enum members are defined with clear and descriptive names,,22,,[]
"üß† ML Signal: Method for determining opposite direction, useful for learning patterns in directional logic","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 13213, 6697, 4571, 11, 4465, 329, 4673, 7572, 287, 47424, 9156]",0.5,22,ml_signal,15,"Method for determining opposite direction, useful for learning patterns in directional logic",,22,,[]
‚úÖ Best Practice: Consider adding an else clause to handle unexpected values of self,"[26486, 227, 6705, 19939, 25, 12642, 4375, 281, 2073, 13444, 284, 5412, 10059, 3815, 286, 2116]",0.5,22,best_practice,20,Consider adding an else clause to handle unexpected values of self,,22,,[]
‚úÖ Best Practice: Use of type hints for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,22,best_practice,20,Use of type hints for the return type improves code readability and maintainability,,22,,[]
üß† ML Signal: Storing parameters as instance variables is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 355, 4554, 9633, 318, 257, 2219, 3912]",0.5,36,ml_signal,22,Storing parameters as instance variables is a common pattern,,22,        if self == Direction.up:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 41837, 13, 929, 25]"
üß† ML Signal: Storing parameters as instance variables is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 355, 4554, 9633, 318, 257, 2219, 3912]",0.5,50,ml_signal,24,Storing parameters as instance variables is a common pattern,,36,        if self == Direction.down:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 6624, 41837, 13, 2902, 25]"
üß† ML Signal: Storing parameters as instance variables is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 355, 4554, 9633, 318, 257, 2219, 3912]",0.5,50,ml_signal,26,Storing parameters as instance variables is a common pattern,,50,,[]
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",0.5,65,ml_signal,25,Use of default parameter values,,50,            return Direction.up,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 41837, 13, 929]"
‚úÖ Best Practice: Use descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287]",0.5,65,best_practice,27,Use descriptive variable names for clarity,,65,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if middle[""close""] is zero","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 3504, 14692, 19836, 8973, 318, 6632]",0.5,79,sast_risk,31,"Potential division by zero if middle[""close""] is zero",Low,65,        self.kdata = kdata,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 74, 7890, 796, 479, 7890]"
‚úÖ Best Practice: Use descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287]",0.5,79,best_practice,34,Use descriptive variable names for clarity,,79,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if middle[""close""] is zero","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 3504, 14692, 19836, 8973, 318, 6632]",0.5,93,sast_risk,36,"Potential division by zero if middle[""close""] is zero",Low,79,"    if fenxing == ""tmp_ding"":","[220, 220, 220, 611, 277, 268, 87, 278, 6624, 366, 22065, 62, 12083, 1298]"
‚úÖ Best Practice: Add type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,117,best_practice,35,Add type hints for function parameters and return type for better readability and maintainability,,93,"def fenxing_power(left, middle, right, fenxing=""tmp_ding""):","[4299, 277, 268, 87, 278, 62, 6477, 7, 9464, 11, 3504, 11, 826, 11, 277, 268, 87, 278, 2625, 22065, 62, 12083, 1, 2599]"
üß† ML Signal: Usage of pandas Series and comparison operations could indicate financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 7171, 290, 7208, 4560, 714, 7603, 3176, 1366, 3781]",1.0,138,ml_signal,43,Usage of pandas Series and comparison operations could indicate financial data analysis,,117,"        b = abs(middle[""low""] - left[""low""])","[220, 220, 220, 220, 220, 220, 220, 275, 796, 2352, 7, 27171, 14692, 9319, 8973, 532, 1364, 14692, 9319, 8973, 8]"
"‚ö†Ô∏è SAST Risk (Low): Assumes 'high' and 'low' keys exist in the Series, which may lead to KeyError if not present","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 8929, 6, 290, 705, 9319, 6, 8251, 2152, 287, 262, 7171, 11, 543, 743, 1085, 284, 7383, 12331, 611, 407, 1944]",1.0,159,sast_risk,44,"Assumes 'high' and 'low' keys exist in the Series, which may lead to KeyError if not present",Low,138,"        c = abs(middle[""low""] - right[""low""])","[220, 220, 220, 220, 220, 220, 220, 269, 796, 2352, 7, 27171, 14692, 9319, 8973, 532, 826, 14692, 9319, 8973, 8]"
‚úÖ Best Practice: Consider adding type hints for the parameters for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 10007, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,180,best_practice,43,Consider adding type hints for the parameters for better readability and maintainability,,159,"        b = abs(middle[""low""] - left[""low""])","[220, 220, 220, 220, 220, 220, 220, 275, 796, 2352, 7, 27171, 14692, 9319, 8973, 532, 1364, 14692, 9319, 8973, 8]"
"üß† ML Signal: Function uses conditional logic to determine direction, a pattern useful for ML models","[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 26340, 9156, 284, 5004, 4571, 11, 257, 3912, 4465, 329, 10373, 4981]",0.5,200,ml_signal,45,"Function uses conditional logic to determine direction, a pattern useful for ML models",,180,"        return (a + b + c) / middle[""close""]","[220, 220, 220, 220, 220, 220, 220, 1441, 357, 64, 1343, 275, 1343, 269, 8, 1220, 3504, 14692, 19836, 8973]"
"üß† ML Signal: Function uses conditional logic to determine direction, a pattern useful for ML models","[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 26340, 9156, 284, 5004, 4571, 11, 257, 3912, 4465, 329, 10373, 4981]",0.5,224,ml_signal,48,"Function uses conditional logic to determine direction, a pattern useful for ML models",,200,"def a_include_b(a: pd.Series, b: pd.Series) -> bool:","[4299, 257, 62, 17256, 62, 65, 7, 64, 25, 279, 67, 13, 27996, 11, 275, 25, 279, 67, 13, 27996, 8, 4613, 20512, 25]"
"üß† ML Signal: Function returns a default value if no conditions are met, a pattern useful for ML models","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 4277, 1988, 611, 645, 3403, 389, 1138, 11, 257, 3912, 4465, 329, 10373, 4981]",0.5,224,ml_signal,51,"Function returns a default value if no conditions are met, a pattern useful for ML models",,224,,[]
"üß† ML Signal: Function to compare 'high' values in dictionaries, indicating a pattern for trend analysis","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 8996, 705, 8929, 6, 3815, 287, 48589, 3166, 11, 12739, 257, 3912, 329, 5182, 3781]",1.0,228,ml_signal,49,"Function to compare 'high' values in dictionaries, indicating a pattern for trend analysis",,224,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Function name is descriptive and follows naming conventions,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 5679, 19264, 21396]",0.5,238,best_practice,50,Function name is descriptive and follows naming conventions,,228,    kdata a includes kdata b,"[220, 220, 220, 479, 7890, 257, 3407, 479, 7890, 275]"
"‚úÖ Best Practice: Use of dictionary keys to access values, assuming consistent data structure","[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 8251, 284, 1895, 3815, 11, 13148, 6414, 1366, 4645]",0.5,238,best_practice,51,"Use of dictionary keys to access values, assuming consistent data structure",,238,,[]
‚ö†Ô∏è SAST Risk (Low): No error handling for missing keys in dictionaries,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 4814, 8251, 287, 48589, 3166]",0.5,245,sast_risk,52,No error handling for missing keys in dictionaries,Low,238,    :param a:,"[220, 220, 220, 1058, 17143, 257, 25]"
"üß† ML Signal: Function to compare 'low' values in dictionaries, indicating a pattern for trend analysis","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 8996, 705, 9319, 6, 3815, 287, 48589, 3166, 11, 12739, 257, 3912, 329, 5182, 3781]",1.0,245,ml_signal,51,"Function to compare 'low' values in dictionaries, indicating a pattern for trend analysis",,245,,[]
‚ö†Ô∏è SAST Risk (Low): Assumes 'low' key exists in both dictionaries without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 9319, 6, 1994, 7160, 287, 1111, 48589, 3166, 1231, 21201]",0.5,252,sast_risk,53,Assumes 'low' key exists in both dictionaries without validation,Low,245,    :param b:,"[220, 220, 220, 1058, 17143, 275, 25]"
‚úÖ Best Practice: Check if step is greater than or equal to the length of one_df to avoid IndexError.,"[26486, 227, 6705, 19939, 25, 6822, 611, 2239, 318, 3744, 621, 393, 4961, 284, 262, 4129, 286, 530, 62, 7568, 284, 3368, 12901, 12331, 13]",0.5,258,best_practice,54,Check if step is greater than or equal to the length of one_df to avoid IndexError.,,252,    :return:,"[220, 220, 220, 1058, 7783, 25]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 13]",0.5,285,sast_risk,56,Logging potentially sensitive information.,Low,258,"    return (a[""high""] >= b[""high""]) and (a[""low""] <= b[""low""])","[220, 220, 220, 1441, 357, 64, 14692, 8929, 8973, 18189, 275, 14692, 8929, 8973, 8, 290, 357, 64, 14692, 9319, 8973, 19841, 275, 14692, 9319, 8973, 8]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 13]",0.5,308,sast_risk,59,Logging potentially sensitive information.,Low,285,"def get_direction(kdata, pre_kdata, current=Direction.up) -> Direction:","[4299, 651, 62, 37295, 7, 74, 7890, 11, 662, 62, 74, 7890, 11, 1459, 28, 35, 4154, 13, 929, 8, 4613, 41837, 25]"
üß† ML Signal: Identifying maximum value in a DataFrame column.,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 5415, 1988, 287, 257, 6060, 19778, 5721, 13]",1.0,324,ml_signal,62,Identifying maximum value in a DataFrame column.,,308,"    if is_down(kdata, pre_kdata):","[220, 220, 220, 611, 318, 62, 2902, 7, 74, 7890, 11, 662, 62, 74, 7890, 2599]"
üß† ML Signal: Converting DataFrame index to integer.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 6376, 284, 18253, 13]",1.0,324,ml_signal,64,Converting DataFrame index to integer.,,324,,[]
üß† ML Signal: Identifying minimum value in a DataFrame column.,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 5288, 1988, 287, 257, 6060, 19778, 5721, 13]",1.0,324,ml_signal,66,Identifying minimum value in a DataFrame column.,,324,,[]
üß† ML Signal: Converting DataFrame index to integer.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 6376, 284, 18253, 13]",1.0,337,ml_signal,68,Converting DataFrame index to integer.,,324,"def is_up(kdata, pre_kdata):","[4299, 318, 62, 929, 7, 74, 7890, 11, 662, 62, 74, 7890, 2599]"
‚úÖ Best Practice: Check the absolute difference between indices to ensure a valid range.,"[26486, 227, 6705, 19939, 25, 6822, 262, 4112, 3580, 1022, 36525, 284, 4155, 257, 4938, 2837, 13]",0.5,337,best_practice,70,Check the absolute difference between indices to ensure a valid range.,,337,,[]
"‚ö†Ô∏è SAST Risk (Low): Modifying DataFrame in place, which can lead to side effects.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 6060, 19778, 287, 1295, 11, 543, 460, 1085, 284, 1735, 3048, 13]",0.5,337,sast_risk,75,"Modifying DataFrame in place, which can lead to side effects.",Low,337,,[]
üß† ML Signal: Using an enumeration for direction.,"[8582, 100, 254, 10373, 26484, 25, 8554, 281, 27056, 341, 329, 4571, 13]",0.5,372,ml_signal,78,Using an enumeration for direction.,,337,"        logger.info(f""coult not get fenxing by step {step}, len {len(one_df)}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 66, 25955, 407, 651, 277, 268, 87, 278, 416, 2239, 1391, 9662, 5512, 18896, 1391, 11925, 7, 505, 62, 7568, 38165, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Modifying DataFrame in place, which can lead to side effects.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 6060, 19778, 287, 1295, 11, 543, 460, 1085, 284, 1735, 3048, 13]",0.5,407,sast_risk,78,"Modifying DataFrame in place, which can lead to side effects.",Low,372,"        logger.info(f""coult not get fenxing by step {step}, len {len(one_df)}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 66, 25955, 407, 651, 277, 268, 87, 278, 416, 2239, 1391, 9662, 5512, 18896, 1391, 11925, 7, 505, 62, 7568, 38165, 4943]"
üß† ML Signal: Using an enumeration for direction.,"[8582, 100, 254, 10373, 26484, 25, 8554, 281, 27056, 341, 329, 4571, 13]",0.5,423,ml_signal,92,Using an enumeration for direction.,,407,        if ding_index > di_index:,"[220, 220, 220, 220, 220, 220, 220, 611, 44852, 62, 9630, 1875, 2566, 62, 9630, 25]"
üß† ML Signal: Returning a complex data structure with multiple elements.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 3716, 1366, 4645, 351, 3294, 4847, 13]",0.5,439,ml_signal,92,Returning a complex data structure with multiple elements.,,423,        if ding_index > di_index:,"[220, 220, 220, 220, 220, 220, 220, 611, 44852, 62, 9630, 1875, 2566, 62, 9630, 25]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 13]",0.5,457,sast_risk,105,Logging potentially sensitive information.,Low,439,            start_index = di_index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 9630, 796, 2566, 62, 9630]"
‚úÖ Best Practice: Recursive call with an incremented step to find the desired result.,"[26486, 227, 6705, 19939, 25, 3311, 30753, 869, 351, 281, 1253, 12061, 2239, 284, 1064, 262, 10348, 1255, 13]",0.5,477,best_practice,107,Recursive call with an incremented step to find the desired result.,,457,            interval = di_index - ding_index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16654, 796, 2566, 62, 9630, 532, 44852, 62, 9630]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 1231, 21201]",1.0,486,sast_risk,108,Directly modifying DataFrame without validation,Low,477,        return (,"[220, 220, 220, 220, 220, 220, 220, 1441, 357]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 1231, 21201]",1.0,507,sast_risk,110,Directly modifying DataFrame without validation,Low,486,"                state=fenxing,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1181, 28, 41037, 87, 278, 11]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 1231, 21201]",1.0,512,sast_risk,121,Directly modifying DataFrame without validation,Low,507,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 1231, 21201]",1.0,538,sast_risk,123,Directly modifying DataFrame without validation,Low,512,"        return handle_first_fenxing(one_df, step=step + 1)","[220, 220, 220, 220, 220, 220, 220, 1441, 5412, 62, 11085, 62, 41037, 87, 278, 7, 505, 62, 7568, 11, 2239, 28, 9662, 1343, 352, 8]"
‚úÖ Best Practice: Explicitly returning multiple values improves readability,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 3294, 3815, 19575, 1100, 1799]",0.5,550,best_practice,128,Explicitly returning multiple values improves readability,,538,    zhongshu_change = None,"[220, 220, 220, 1976, 71, 506, 1477, 84, 62, 3803, 796, 6045]"
üß† ML Signal: Function definition with specific parameters and default values,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 10007, 290, 4277, 3815]",1.0,550,ml_signal,125,Function definition with specific parameters and default values,,550,,[]
üß† ML Signal: Accessing the first element's state in a list,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 717, 5002, 338, 1181, 287, 257, 1351]",1.0,560,ml_signal,127,Accessing the first element's state in a list,,550,    zhongshu = None,"[220, 220, 220, 1976, 71, 506, 1477, 84, 796, 6045]"
üß† ML Signal: Accessing specific attributes of objects in a list,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 12608, 286, 5563, 287, 257, 1351]",1.0,566,ml_signal,129,Accessing specific attributes of objects in a list,,560,    interval = None,"[220, 220, 220, 16654, 796, 6045]"
üß† ML Signal: Conditional logic based on a specific state value,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 2176, 1181, 1988]",1.0,566,ml_signal,134,Conditional logic based on a specific state value,,566,,[]
üß† ML Signal: Tuple creation for range representation,"[8582, 100, 254, 10373, 26484, 25, 309, 29291, 6282, 329, 2837, 10552]",1.0,588,ml_signal,135,Tuple creation for range representation,,566,        interval = points[3][2] - points[0][2],"[220, 220, 220, 220, 220, 220, 220, 16654, 796, 2173, 58, 18, 7131, 17, 60, 532, 2173, 58, 15, 7131, 17, 60]"
üß† ML Signal: Function call with specific arguments,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 7159]",1.0,629,ml_signal,139,Function call with specific arguments,,588,"            range = intersect((points[0][1], points[1][1]), (points[2][1], points[3][1]))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2837, 796, 36177, 19510, 13033, 58, 15, 7131, 16, 4357, 2173, 58, 16, 7131, 16, 46570, 357, 13033, 58, 17, 7131, 16, 4357, 2173, 58, 18, 7131, 16, 60, 4008]"
üß† ML Signal: Returning a default or previous state,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 4277, 393, 2180, 1181]",1.0,651,ml_signal,147,Returning a default or previous state,,629,                points = points[-1:],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2173, 796, 2173, 58, 12, 16, 47715]"
"üß† ML Signal: Function definition with multiple parameters, indicating a complex operation","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3294, 10007, 11, 12739, 257, 3716, 4905]",1.0,676,ml_signal,142,"Function definition with multiple parameters, indicating a complex operation",,651,                # ËÆ∞ÂΩï‰∏≠Êû¢,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 5525, 106, 108, 37605, 243, 40792, 162, 252, 95]"
üß† ML Signal: Conditional logic based on function call result,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2163, 869, 1255]",1.0,710,ml_signal,144,Conditional logic based on function call result,,676,                zhongshu_change = abs(y1 - y2) / y1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 506, 1477, 84, 62, 3803, 796, 2352, 7, 88, 16, 532, 331, 17, 8, 1220, 331, 16]"
üß† ML Signal: Conditional logic based on enum comparison,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 33829, 7208]",1.0,749,ml_signal,145,Conditional logic based on enum comparison,,710,"                acc_df.loc[end_index, zhongshu_col] = zhongshu","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 13, 17946, 58, 437, 62, 9630, 11, 1976, 71, 506, 1477, 84, 62, 4033, 60, 796, 1976, 71, 506, 1477, 84]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 3815, 460, 1085, 284, 30261, 1735, 3048]",1.0,762,sast_risk,148,Directly modifying DataFrame values can lead to unintended side effects,Low,749,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 3815, 460, 1085, 284, 30261, 1735, 3048]",1.0,771,sast_risk,150,Directly modifying DataFrame values can lead to unintended side effects,Low,762,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Conditional logic based on function call result,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2163, 869, 1255]",1.0,785,ml_signal,153,Conditional logic based on function call result,,771,            if range:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2837, 25]"
üß† ML Signal: Conditional logic based on enum comparison,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 33829, 7208]",1.0,810,ml_signal,155,Conditional logic based on enum comparison,,785,                # ËÆ∞ÂΩï‰∏≠Êû¢,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 5525, 106, 108, 37605, 243, 40792, 162, 252, 95]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 3815, 460, 1085, 284, 30261, 1735, 3048]",1.0,844,sast_risk,157,Directly modifying DataFrame values can lead to unintended side effects,Low,810,                zhongshu_change = abs(y1 - y2) / y1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 506, 1477, 84, 62, 3803, 796, 2352, 7, 88, 16, 532, 331, 17, 8, 1220, 331, 16]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 3815, 460, 1085, 284, 30261, 1735, 3048]",1.0,887,sast_risk,160,Directly modifying DataFrame values can lead to unintended side effects,Low,844,"                acc_df.loc[end_index, zhongshu_change_col] = zhongshu_change","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 13, 17946, 58, 437, 62, 9630, 11, 1976, 71, 506, 1477, 84, 62, 3803, 62, 4033, 60, 796, 1976, 71, 506, 1477, 84, 62, 3803]"
"‚úÖ Best Practice: Class definition should inherit from object explicitly in Python 2.x, but in Python 3.x it's optional as all classes are new-style by default.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 16955, 422, 2134, 11777, 287, 11361, 362, 13, 87, 11, 475, 287, 11361, 513, 13, 87, 340, 338, 11902, 355, 477, 6097, 389, 649, 12, 7635, 416, 4277, 13]",0.5,901,best_practice,153,"Class definition should inherit from object explicitly in Python 2.x, but in Python 3.x it's optional as all classes are new-style by default.",,887,            if range:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2837, 25]"
‚úÖ Best Practice: Check for specific types using isinstance for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 6822, 329, 2176, 3858, 1262, 318, 39098, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,926,best_practice,155,Check for specific types using isinstance for better readability and maintainability,,901,                # ËÆ∞ÂΩï‰∏≠Êû¢,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 5525, 106, 108, 37605, 243, 40792, 162, 252, 95]"
üß† ML Signal: Conversion of pandas Series to dictionary,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 19798, 292, 7171, 284, 22155]",1.0,960,ml_signal,157,Conversion of pandas Series to dictionary,,926,                zhongshu_change = abs(y1 - y2) / y1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 506, 1477, 84, 62, 3803, 796, 2352, 7, 88, 16, 532, 331, 17, 8, 1220, 331, 16]"
üß† ML Signal: Conversion of pandas Timestamp to string with specific format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 19798, 292, 5045, 27823, 284, 4731, 351, 2176, 5794]",1.0,1003,ml_signal,160,Conversion of pandas Timestamp to string with specific format,,960,"                acc_df.loc[end_index, zhongshu_change_col] = zhongshu_change","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 13, 17946, 58, 437, 62, 9630, 11, 1976, 71, 506, 1477, 84, 62, 3803, 62, 4033, 60, 796, 1976, 71, 506, 1477, 84, 62, 3803]"
üß† ML Signal: Accessing the value of an Enum,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 1988, 286, 281, 2039, 388]",1.0,1016,ml_signal,162,Accessing the value of an Enum,,1003,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Conversion of a Bean object to dictionary,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 257, 26510, 2134, 284, 22155]",1.0,1016,ml_signal,166,Conversion of a Bean object to dictionary,,1016,,[]
‚úÖ Best Practice: Use of superclass method for default behavior,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 4871, 2446, 329, 4277, 4069]",0.5,1028,best_practice,169,Use of superclass method for default behavior,,1016,    # 1Á¨îÂå∫Èó¥,"[220, 220, 220, 1303, 352, 163, 105, 242, 44293, 118, 29785, 112]"
"üß† ML Signal: Function for decoding dictionary to object, useful for ML models to understand data transformation patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 329, 39938, 22155, 284, 2134, 11, 4465, 329, 10373, 4981, 284, 1833, 1366, 13389, 7572]",1.0,1028,ml_signal,165,"Function for decoding dictionary to object, useful for ML models to understand data transformation patterns",,1028,,[]
‚úÖ Best Practice: Use of descriptive function name to indicate the purpose of the function,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 284, 7603, 262, 4007, 286, 262, 2163]",1.0,1028,best_practice,166,Use of descriptive function name to indicate the purpose of the function,,1028,,[]
‚úÖ Best Practice: Use of keyword arguments in object instantiation for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 21179, 7159, 287, 2134, 9113, 3920, 329, 16287]",0.5,1057,best_practice,167,Use of keyword arguments in object instantiation for clarity,,1028,"def handle_duan(fenxing_list: List[Fenxing], pre_duan_state=""yi""):","[4299, 5412, 62, 646, 272, 7, 41037, 87, 278, 62, 4868, 25, 7343, 58, 37, 268, 87, 278, 4357, 662, 62, 646, 272, 62, 5219, 2625, 48111, 1, 2599]"
"üß† ML Signal: Function uses dictionary keys to access values, indicating a pattern of data structure usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 22155, 8251, 284, 1895, 3815, 11, 12739, 257, 3912, 286, 1366, 4645, 8748, 13]",0.5,1072,ml_signal,168,"Function uses dictionary keys to access values, indicating a pattern of data structure usage.",,1057,    state = fenxing_list[0].state,"[220, 220, 220, 1181, 796, 277, 268, 87, 278, 62, 4868, 58, 15, 4083, 5219]"
‚úÖ Best Practice: Ensure that the dictionary contains the expected keys to avoid KeyError.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 22155, 4909, 262, 2938, 8251, 284, 3368, 7383, 12331, 13]",0.5,1084,best_practice,169,Ensure that the dictionary contains the expected keys to avoid KeyError.,,1072,    # 1Á¨îÂå∫Èó¥,"[220, 220, 220, 1303, 352, 163, 105, 242, 44293, 118, 29785, 112]"
"‚úÖ Best Practice: Using __all__ to define public API of the module, which improves code maintainability.","[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 11, 543, 19575, 2438, 5529, 1799, 13]",0.5,1096,best_practice,169,"Using __all__ to define public API of the module, which improves code maintainability.",,1084,    # 1Á¨îÂå∫Èó¥,"[220, 220, 220, 1303, 352, 163, 105, 242, 44293, 118, 29785, 112]"

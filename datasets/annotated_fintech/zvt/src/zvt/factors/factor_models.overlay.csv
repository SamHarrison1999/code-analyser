annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Use of Pydantic BaseModel for data validation and serialization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 350, 5173, 5109, 7308, 17633, 329, 1366, 21201, 290, 11389, 1634]",1.0,9,ml_signal,7,Use of Pydantic BaseModel for data validation and serialization,,0,from zvt.contract import IntervalLevel,"[6738, 1976, 36540, 13, 28484, 1330, 4225, 2100, 4971]"
üß† ML Signal: Use of type annotations for model attributes,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 37647, 329, 2746, 12608]",1.0,31,ml_signal,9,Use of type annotations for model attributes,,9,"from zvt.utils.time_utils import date_time_by_interval, current_date","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11, 1459, 62, 4475]"
üß† ML Signal: Use of Optional for nullable fields,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 32233, 329, 9242, 540, 7032]",1.0,31,ml_signal,11,Use of Optional for nullable fields,,31,,[]
üß† ML Signal: Use of default values in Pydantic models,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 3815, 287, 350, 5173, 5109, 4981]",1.0,39,ml_signal,13,Use of default values in Pydantic models,,31,    factor_name: str,"[220, 220, 220, 5766, 62, 3672, 25, 965]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues with datetime defaults,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 4818, 8079, 26235]",1.0,55,sast_risk,15,Potential timezone issues with datetime defaults,Low,39,"    data_provider: str = Field(default=""em"")","[220, 220, 220, 1366, 62, 15234, 1304, 25, 965, 796, 7663, 7, 12286, 2625, 368, 4943]"
üß† ML Signal: Use of Field for default values and validation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7663, 329, 4277, 3815, 290, 21201]",0.5,86,ml_signal,16,Use of Field for default values and validation,,55,"    start_timestamp: datetime = Field(default=date_time_by_interval(current_date(), -365))","[220, 220, 220, 923, 62, 16514, 27823, 25, 4818, 8079, 796, 7663, 7, 12286, 28, 4475, 62, 2435, 62, 1525, 62, 3849, 2100, 7, 14421, 62, 4475, 22784, 532, 24760, 4008]"
üß† ML Signal: Use of custom types in Pydantic models,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2183, 3858, 287, 350, 5173, 5109, 4981]",1.0,86,ml_signal,18,Use of custom types in Pydantic models,,86,,[]
‚úÖ Best Practice: Inheriting from BaseModel provides data validation and serialization.,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 7308, 17633, 3769, 1366, 21201, 290, 11389, 1634, 13]",0.5,94,best_practice,13,Inheriting from BaseModel provides data validation and serialization.,,86,    factor_name: str,"[220, 220, 220, 5766, 62, 3672, 25, 965]"
‚úÖ Best Practice: Using specific types for attributes improves code readability and type checking.,"[26486, 227, 6705, 19939, 25, 8554, 2176, 3858, 329, 12608, 19575, 2438, 1100, 1799, 290, 2099, 10627, 13]",0.5,110,best_practice,15,Using specific types for attributes improves code readability and type checking.,,94,"    data_provider: str = Field(default=""em"")","[220, 220, 220, 1366, 62, 15234, 1304, 25, 965, 796, 7663, 7, 12286, 2625, 368, 4943]"
‚úÖ Best Practice: Providing default values for fields enhances usability and reduces errors.,"[26486, 227, 6705, 19939, 25, 7518, 2530, 4277, 3815, 329, 7032, 32479, 42863, 290, 12850, 8563, 13]",0.5,110,best_practice,19,Providing default values for fields enhances usability and reduces errors.,,110,,[]
‚úÖ Best Practice: Using Optional for fields that can be None improves code clarity.,"[26486, 227, 6705, 19939, 25, 8554, 32233, 329, 7032, 326, 460, 307, 6045, 19575, 2438, 16287, 13]",0.5,120,best_practice,22,Using Optional for fields that can be None improves code clarity.,,110,    happen_timestamp: datetime,"[220, 220, 220, 1645, 62, 16514, 27823, 25, 4818, 8079]"
üß† ML Signal: Use of Pydantic BaseModel for data validation and serialization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 350, 5173, 5109, 7308, 17633, 329, 1366, 21201, 290, 11389, 1634]",0.5,130,ml_signal,23,Use of Pydantic BaseModel for data validation and serialization,,120,    due_timestamp: datetime,"[220, 220, 220, 2233, 62, 16514, 27823, 25, 4818, 8079]"
üß† ML Signal: Use of Optional type hint indicating nullable field,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 32233, 2099, 9254, 12739, 9242, 540, 2214]",0.5,144,ml_signal,25,Use of Optional type hint indicating nullable field,,130,    trading_signal_type: TradingSignalType,"[220, 220, 220, 7313, 62, 12683, 282, 62, 4906, 25, 25469, 11712, 282, 6030]"
üß† ML Signal: Use of type hint for data validation and clarity,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 9254, 329, 1366, 21201, 290, 16287]",0.5,158,ml_signal,25,Use of type hint for data validation and clarity,,144,    trading_signal_type: TradingSignalType,"[220, 220, 220, 7313, 62, 12683, 282, 62, 4906, 25, 25469, 11712, 282, 6030]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,172,best_practice,25,Use of __all__ to define public API of the module,,158,    trading_signal_type: TradingSignalType,"[220, 220, 220, 7313, 62, 12683, 282, 62, 4906, 25, 25469, 11712, 282, 6030]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping related imports together improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,6,best_practice,2,Grouping related imports together improves readability and maintainability.,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
"üß† ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 12608, 286, 257, 2746, 2134, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 1486, 13]",0.5,19,ml_signal,7,"Accessing attributes of a model object, indicating a pattern of object-oriented design.",,6,from zvt.factors.technical_factor import TechnicalFactor,"[6738, 1976, 36540, 13, 22584, 669, 13, 47944, 62, 31412, 1330, 20671, 41384]"
"üß† ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 12608, 286, 257, 2746, 2134, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 1486, 13]",0.5,19,ml_signal,9,"Accessing attributes of a model object, indicating a pattern of object-oriented design.",,19,,[]
"üß† ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 12608, 286, 257, 2746, 2134, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 1486, 13]",0.5,36,ml_signal,11,"Accessing attributes of a model object, indicating a pattern of object-oriented design.",,19,def query_factor_result(factor_request_model: FactorRequestModel):,"[4299, 12405, 62, 31412, 62, 20274, 7, 31412, 62, 25927, 62, 19849, 25, 27929, 18453, 17633, 2599]"
"üß† ML Signal: Usage of a registry pattern to retrieve a class, indicating dynamic class instantiation.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 20478, 3912, 284, 19818, 257, 1398, 11, 12739, 8925, 1398, 9113, 3920, 13]",0.5,53,ml_signal,11,"Usage of a registry pattern to retrieve a class, indicating dynamic class instantiation.",,36,def query_factor_result(factor_request_model: FactorRequestModel):,"[4299, 12405, 62, 31412, 62, 20274, 7, 31412, 62, 25927, 62, 19849, 25, 27929, 18453, 17633, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of code injection if factor_name is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 2438, 16954, 611, 5766, 62, 3672, 318, 407, 31031, 13]",0.5,70,sast_risk,11,Potential risk of code injection if factor_name is not validated.,Medium,53,def query_factor_result(factor_request_model: FactorRequestModel):,"[4299, 12405, 62, 31412, 62, 20274, 7, 31412, 62, 25927, 62, 19849, 25, 27929, 18453, 17633, 2599]"
"üß† ML Signal: Accessing attributes of a model object, indicating a pattern of object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 12608, 286, 257, 2746, 2134, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 1486, 13]",0.5,81,ml_signal,21,"Accessing attributes of a model object, indicating a pattern of object-oriented design.",,70,"        level=level,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 5715, 11]"
"üß† ML Signal: Method call on an object, indicating a pattern of object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 1486, 13]",0.5,98,ml_signal,24,"Method call on an object, indicating a pattern of object-oriented design.",,81,    df = factor.get_trading_signal_df(),"[220, 220, 220, 47764, 796, 5766, 13, 1136, 62, 2213, 4980, 62, 12683, 282, 62, 7568, 3419]"
‚úÖ Best Practice: Explicitly resetting index with drop=False to retain the old index as a column.,"[26486, 227, 6705, 19939, 25, 11884, 306, 13259, 889, 6376, 351, 4268, 28, 25101, 284, 12377, 262, 1468, 6376, 355, 257, 5721, 13]",0.5,98,best_practice,26,Explicitly resetting index with drop=False to retain the old index as a column.,,98,,[]
‚úÖ Best Practice: Check for None explicitly to handle null values,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 11777, 284, 5412, 9242, 3815]",1.0,121,best_practice,22,Check for None explicitly to handle null values,,98,"        start_timestamp=factor_request_model.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 31412, 62, 25927, 62, 19849, 13, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Simplify condition by directly returning the result,"[26486, 227, 6705, 19939, 25, 45157, 1958, 4006, 416, 3264, 8024, 262, 1255]",0.5,136,best_practice,25,Simplify condition by directly returning the result,,121,    df = df.reset_index(drop=False),"[220, 220, 220, 47764, 796, 47764, 13, 42503, 62, 9630, 7, 14781, 28, 25101, 8]"
"‚úÖ Best Practice: The 'if not order_type' is redundant here, consider using 'else'","[26486, 227, 6705, 19939, 25, 383, 705, 361, 407, 1502, 62, 4906, 6, 318, 30806, 994, 11, 2074, 1262, 705, 17772, 6]",0.5,150,best_practice,28,"The 'if not order_type' is redundant here, consider using 'else'",,136,        if order_type is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 1502, 62, 4906, 318, 6045, 25]"
‚úÖ Best Practice: Use descriptive column names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 5721, 3891, 329, 1365, 1100, 1799]",1.0,170,best_practice,31,Use descriptive column names for better readability,,150,            return TradingSignalType.open_long,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25469, 11712, 282, 6030, 13, 9654, 62, 6511]"
üß† ML Signal: Feature engineering by creating new columns based on existing data,"[8582, 100, 254, 10373, 26484, 25, 27018, 8705, 416, 4441, 649, 15180, 1912, 319, 4683, 1366]",0.5,190,ml_signal,33,Feature engineering by creating new columns based on existing data,,170,            return TradingSignalType.close_long,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25469, 11712, 282, 6030, 13, 19836, 62, 6511]"
üß† ML Signal: Applying a function to a DataFrame column to transform data,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 257, 6060, 19778, 5721, 284, 6121, 1366]",0.5,210,ml_signal,33,Applying a function to a DataFrame column to transform data,,190,            return TradingSignalType.close_long,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25469, 11712, 282, 6030, 13, 19836, 62, 6511]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",1.0,230,sast_risk,33,Printing data frames can expose sensitive data in logs,Low,210,            return TradingSignalType.close_long,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25469, 11712, 282, 6030, 13, 19836, 62, 6511]"
üß† ML Signal: Converting DataFrame to a list of dictionaries for further processing,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 284, 257, 1351, 286, 48589, 3166, 329, 2252, 7587]",1.0,250,ml_signal,33,Converting DataFrame to a list of dictionaries for further processing,,230,            return TradingSignalType.close_long,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25469, 11712, 282, 6030, 13, 19836, 62, 6511]"
‚úÖ Best Practice: Use __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,270,best_practice,33,Use __all__ to define public API of the module,,250,            return TradingSignalType.close_long,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 25469, 11712, 282, 6030, 13, 19836, 62, 6511]"

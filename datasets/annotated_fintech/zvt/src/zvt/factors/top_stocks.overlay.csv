annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Group imports from the same module together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 17944, 422, 262, 976, 8265, 1978, 329, 1365, 1100, 1799, 13]",1.0,10,best_practice,5,Group imports from the same module together for better readability.,,0,"from sqlalchemy import Column, String, Integer","[6738, 44161, 282, 26599, 1330, 29201, 11, 10903, 11, 34142]"
‚úÖ Best Practice: Use a consistent naming convention for base classes.,"[26486, 227, 6705, 19939, 25, 5765, 257, 6414, 19264, 9831, 329, 2779, 6097, 13]",0.5,20,best_practice,28,Use a consistent naming convention for base classes.,,10,"    to_pd_timestamp,","[220, 220, 220, 284, 62, 30094, 62, 16514, 27823, 11]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,20,ml_signal,30,Use of SQLAlchemy ORM for database interaction,,20,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,20,ml_signal,32,Use of SQLAlchemy ORM for database interaction,,20,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,33,ml_signal,34,Use of SQLAlchemy ORM for database interaction,,20,"class TopStocks(TopStocksBase, Mixin):","[4871, 5849, 1273, 3320, 7, 9126, 1273, 3320, 14881, 11, 15561, 259, 2599]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,33,ml_signal,36,Use of SQLAlchemy ORM for database interaction,,33,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,49,ml_signal,38,Use of SQLAlchemy ORM for database interaction,,33,    short_stocks = Column(String(length=2048)),"[220, 220, 220, 1790, 62, 29522, 796, 29201, 7, 10100, 7, 13664, 28, 1238, 2780, 4008]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,60,ml_signal,40,Use of SQLAlchemy ORM for database interaction,,49,    long_count = Column(Integer),"[220, 220, 220, 890, 62, 9127, 796, 29201, 7, 46541, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,60,ml_signal,42,Use of SQLAlchemy ORM for database interaction,,60,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,80,ml_signal,44,Use of SQLAlchemy ORM for database interaction,,60,    small_vol_up_stocks = Column(String(length=2048)),"[220, 220, 220, 1402, 62, 10396, 62, 929, 62, 29522, 796, 29201, 7, 10100, 7, 13664, 28, 1238, 2780, 4008]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,95,ml_signal,46,Use of SQLAlchemy ORM for database interaction,,80,    big_vol_up_count = Column(Integer),"[220, 220, 220, 1263, 62, 10396, 62, 929, 62, 9127, 796, 29201, 7, 46541, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of SQL injection if user input is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 16363, 16954, 611, 2836, 5128, 318, 407, 6105, 5336, 36951]",0.5,95,sast_risk,48,Potential risk of SQL injection if user input is not properly sanitized,Low,95,,[]
üß† ML Signal: Function parameters indicate usage patterns for stock analysis,"[8582, 100, 254, 10373, 26484, 25, 15553, 10007, 7603, 8748, 7572, 329, 4283, 3781]",1.0,111,ml_signal,41,Function parameters indicate usage patterns for stock analysis,,95,    long_stocks = Column(String(length=2048)),"[220, 220, 220, 890, 62, 29522, 796, 29201, 7, 10100, 7, 13664, 28, 1238, 2780, 4008]"
üß† ML Signal: Conditional logic based on stock type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4283, 2099]",1.0,126,ml_signal,43,Conditional logic based on stock type,,111,    small_vol_up_count = Column(Integer),"[220, 220, 220, 1402, 62, 10396, 62, 929, 62, 9127, 796, 29201, 7, 46541, 8]"
üß† ML Signal: Conditional logic based on stock type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4283, 2099]",1.0,126,ml_signal,48,Conditional logic based on stock type,,126,,[]
‚ö†Ô∏è SAST Risk (Low): Assertion without error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 1231, 4049, 3275]",1.0,126,sast_risk,54,Assertion without error message,Low,126,,[]
üß† ML Signal: Filtering based on provided entity IDs,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1912, 319, 2810, 9312, 32373]",1.0,126,ml_signal,54,Filtering based on provided entity IDs,,126,,[]
üß† ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",0.5,143,ml_signal,63,Querying data with specific filters,,126,        turnover_rate_threshold = 0.01,"[220, 220, 220, 220, 220, 220, 220, 25079, 62, 4873, 62, 400, 10126, 796, 657, 13, 486]"
üß† ML Signal: Further filtering based on current entity pool,"[8582, 100, 254, 10373, 26484, 25, 7735, 25431, 1912, 319, 1459, 9312, 5933]",1.0,143,ml_signal,66,Further filtering based on current entity pool,,143,,[]
üß† ML Signal: Using a factor model to get target stocks,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 5766, 2746, 284, 651, 2496, 14420]",0.5,155,ml_signal,87,Using a factor model to get target stocks,,143,"        provider=provider,","[220, 220, 220, 220, 220, 220, 220, 10131, 28, 15234, 1304, 11]"
üß† ML Signal: Usage of a specific database session provider and schema,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 6831, 6246, 10131, 290, 32815]",1.0,179,ml_signal,82,Usage of a specific database session provider and schema,,155,        current_entity_pool = kdata_df.index.tolist(),"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 26858, 62, 7742, 796, 479, 7890, 62, 7568, 13, 9630, 13, 83, 349, 396, 3419]"
üß† ML Signal: Querying data with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 10007]",1.0,189,ml_signal,84,Querying data with specific parameters,,179,    factor = VolumeUpMaFactor(,"[220, 220, 220, 5766, 796, 14701, 4933, 21467, 41384, 7]"
üß† ML Signal: Fetching related data based on a timestamp,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 3519, 1366, 1912, 319, 257, 41033]",0.5,217,ml_signal,89,Fetching related data based on a timestamp,,189,"        start_timestamp=date_time_by_interval(target_date, -600),","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 4475, 62, 2435, 62, 1525, 62, 3849, 2100, 7, 16793, 62, 4475, 11, 532, 8054, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of loading untrusted JSON data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 11046, 1418, 81, 8459, 19449, 1366]",0.5,235,sast_risk,91,Potential risk of loading untrusted JSON data,Low,217,"        adjust_type=AdjustType.hfq,","[220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 28, 39668, 6030, 13, 71, 69, 80, 11]"
‚úÖ Best Practice: Using set to remove duplicates from a list,"[26486, 227, 6705, 19939, 25, 8554, 900, 284, 4781, 14184, 16856, 422, 257, 1351]",1.0,248,best_practice,93,Using set to remove duplicates from a list,,235,"        over_mode=""or"",","[220, 220, 220, 220, 220, 220, 220, 625, 62, 14171, 2625, 273, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of dumping untrusted JSON data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 30231, 1418, 81, 8459, 19449, 1366]",0.5,266,sast_risk,95,Potential risk of dumping untrusted JSON data,Low,248,"        turnover_threshold=turnover_threshold,","[220, 220, 220, 220, 220, 220, 220, 25079, 62, 400, 10126, 28, 15344, 2502, 62, 400, 10126, 11]"
‚úÖ Best Practice: Directly assigning the length of a list to a variable,"[26486, 227, 6705, 19939, 25, 4128, 306, 38875, 262, 4129, 286, 257, 1351, 284, 257, 7885]",0.5,270,best_practice,97,Directly assigning the length of a list to a variable,,266,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Using session.add_all for bulk operations,"[26486, 227, 6705, 19939, 25, 8554, 6246, 13, 2860, 62, 439, 329, 11963, 4560]",0.5,275,best_practice,100,Using session.add_all for bulk operations,,270,    return stocks,"[220, 220, 220, 1441, 14420]"
‚ö†Ô∏è SAST Risk (Medium): Committing changes to the database without error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 4049, 9041]",0.5,275,sast_risk,101,Committing changes to the database without error handling,Medium,275,,[]
üß† ML Signal: Usage of a specific database session provider and schema,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 6831, 6246, 10131, 290, 32815]",1.0,297,ml_signal,96,Usage of a specific database session provider and schema,,275,"        turnover_rate_threshold=turnover_rate_threshold,","[220, 220, 220, 220, 220, 220, 220, 25079, 62, 4873, 62, 400, 10126, 28, 15344, 2502, 62, 4873, 62, 400, 10126, 11]"
üß† ML Signal: Querying data with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 10007]",1.0,301,ml_signal,97,Querying data with specific parameters,,297,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Counting intervals between dates,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 20016, 1022, 9667]",0.5,327,ml_signal,104,Counting intervals between dates,,301,"    session = get_db_session(provider=""zvt"", data_schema=TopStocks)","[220, 220, 220, 6246, 796, 651, 62, 9945, 62, 29891, 7, 15234, 1304, 2625, 89, 36540, 1600, 1366, 62, 15952, 2611, 28, 9126, 1273, 3320, 8]"
üß† ML Signal: Filtering entity IDs based on multiple conditions,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 9312, 32373, 1912, 319, 3294, 3403]",1.0,353,ml_signal,104,Filtering entity IDs based on multiple conditions,,327,"    session = get_db_session(provider=""zvt"", data_schema=TopStocks)","[220, 220, 220, 6246, 796, 651, 62, 9945, 62, 29891, 7, 15234, 1304, 2625, 89, 36540, 1600, 1366, 62, 15952, 2611, 28, 9126, 1273, 3320, 8]"
üß† ML Signal: Fetching stocks with volume up based on type and entity IDs,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 14420, 351, 6115, 510, 1912, 319, 2099, 290, 9312, 32373]",0.5,360,ml_signal,116,Fetching stocks with volume up based on type and entity IDs,,353,    session.commit(),"[220, 220, 220, 6246, 13, 41509, 3419]"
‚úÖ Best Practice: Using len() to get the count of items in a list,"[26486, 227, 6705, 19939, 25, 8554, 18896, 3419, 284, 651, 262, 954, 286, 3709, 287, 257, 1351]",1.0,386,best_practice,120,Using len() to get the count of items in a list,,360,"    session = get_db_session(provider=""zvt"", data_schema=TopStocks)","[220, 220, 220, 6246, 796, 651, 62, 9945, 62, 29891, 7, 15234, 1304, 2625, 89, 36540, 1600, 1366, 62, 15952, 2611, 28, 9126, 1273, 3320, 8]"
‚ö†Ô∏è SAST Risk (Low): Storing JSON data as a string in a database,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 520, 3255, 19449, 1366, 355, 257, 4731, 287, 257, 6831]",0.5,408,sast_risk,122,Storing JSON data as a string in a database,Low,386,    top_stocks: List[TopStocks] = TopStocks.query_data(,"[220, 220, 220, 1353, 62, 29522, 25, 7343, 58, 9126, 1273, 3320, 60, 796, 5849, 1273, 3320, 13, 22766, 62, 7890, 7]"
‚úÖ Best Practice: Using len() to get the count of items in a list,"[26486, 227, 6705, 19939, 25, 8554, 18896, 3419, 284, 651, 262, 954, 286, 3709, 287, 257, 1351]",1.0,435,best_practice,127,Using len() to get the count of items in a list,,408,"        count_bj = count_interval(""2023-09-01"", target_date)","[220, 220, 220, 220, 220, 220, 220, 954, 62, 50007, 796, 954, 62, 3849, 2100, 7203, 1238, 1954, 12, 2931, 12, 486, 1600, 2496, 62, 4475, 8]"
‚ö†Ô∏è SAST Risk (Low): Storing JSON data as a string in a database,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 520, 3255, 19449, 1366, 355, 257, 4731, 287, 257, 6831]",0.5,435,sast_risk,129,Storing JSON data as a string in a database,Low,435,,[]
‚úÖ Best Practice: Adding and committing changes to the session,"[26486, 227, 6705, 19939, 25, 18247, 290, 17222, 2458, 284, 262, 6246]",0.5,454,best_practice,131,Adding and committing changes to the session,,435,"            target_date=target_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2496, 62, 4475, 28, 16793, 62, 4475, 11]"
üß† ML Signal: Logging or printing completion messages,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 393, 13570, 11939, 6218]",0.5,472,ml_signal,133,Logging or printing completion messages,,454,"            ignore_delist=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 12381, 396, 28, 25101, 11]"
üß† ML Signal: Usage of query to fetch latest data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 284, 21207, 3452, 1366]",1.0,489,ml_signal,126,Usage of query to fetch latest data,,472,        target_date = top_stock.timestamp,"[220, 220, 220, 220, 220, 220, 220, 2496, 62, 4475, 796, 1353, 62, 13578, 13, 16514, 27823]"
üß† ML Signal: Conditional logic based on query result,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 12405, 1255]",1.0,489,ml_signal,129,Conditional logic based on query result,,489,,[]
üß† ML Signal: Fetching trade dates for a given period,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 3292, 9667, 329, 257, 1813, 2278]",0.5,508,ml_signal,131,Fetching trade dates for a given period,,489,"            target_date=target_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2496, 62, 4475, 28, 16793, 62, 4475, 11]"
‚úÖ Best Practice: Logging or printing progress for each target date,"[26486, 227, 6705, 19939, 25, 5972, 2667, 393, 13570, 4371, 329, 1123, 2496, 3128]",0.5,526,best_practice,133,Logging or printing progress for each target date,,508,"            ignore_delist=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 12381, 396, 28, 25101, 11]"
üß† ML Signal: Database session management,"[8582, 100, 254, 10373, 26484, 25, 24047, 6246, 4542]",1.0,545,ml_signal,136,Database session management,,526,"            ignore_bj=ignore_bj,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 50007, 28, 46430, 62, 50007, 11]"
üß† ML Signal: Creating a new TopStocks object,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 5849, 1273, 3320, 2134]",0.5,568,ml_signal,138,Creating a new TopStocks object,,545,        small_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1402, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"
üß† ML Signal: Counting intervals for business logic,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 20016, 329, 1597, 9156]",1.0,591,ml_signal,138,Counting intervals for business logic,,568,        small_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1402, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"
üß† ML Signal: Conditional logic based on count,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 954]",1.0,599,ml_signal,146,Conditional logic based on count,,591,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Fetching entity IDs with specific filters,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 9312, 32373, 351, 2176, 16628]",1.0,607,ml_signal,146,Fetching entity IDs with specific filters,,599,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Fetching top performance entities,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1353, 2854, 12066]",0.5,619,ml_signal,161,Fetching top performance entities,,607,    for target_date in trade_days:,"[220, 220, 220, 329, 2496, 62, 4475, 287, 3292, 62, 12545, 25]"
üß† ML Signal: Fetching limit up stocks,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 4179, 510, 14420]",1.0,627,ml_signal,166,Fetching limit up stocks,,619,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Combining and deduplicating stock lists,"[8582, 100, 254, 10373, 26484, 25, 14336, 3191, 290, 4648, 84, 489, 12364, 4283, 8341]",1.0,635,ml_signal,166,Combining and deduplicating stock lists,,627,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Storing count of selected stocks,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 954, 286, 6163, 14420]",1.0,654,ml_signal,181,Storing count of selected stocks,,635,"            entity_provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 28, 15234, 1304, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential JSON injection if short_selected contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 19449, 16954, 611, 1790, 62, 34213, 4909, 1418, 81, 8459, 1366]",0.5,673,sast_risk,181,Potential JSON injection if short_selected contains untrusted data,Low,654,"            entity_provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 28, 15234, 1304, 11]"
üß† ML Signal: Calculating long period start,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 890, 2278, 923]",0.5,692,ml_signal,181,Calculating long period start,,673,"            entity_provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 28, 15234, 1304, 11]"
üß† ML Signal: Fetching long performance entities,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 890, 2854, 12066]",0.5,711,ml_signal,181,Fetching long performance entities,,692,"            entity_provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 28, 15234, 1304, 11]"
üß† ML Signal: Storing count of long selected stocks,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 954, 286, 890, 6163, 14420]",1.0,732,ml_signal,197,Storing count of long selected stocks,,711,        top_stocks.short_count = len(short_selected),"[220, 220, 220, 220, 220, 220, 220, 1353, 62, 29522, 13, 19509, 62, 9127, 796, 18896, 7, 19509, 62, 34213, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential JSON injection if long_selected contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 19449, 16954, 611, 890, 62, 34213, 4909, 1418, 81, 8459, 1366]",0.5,764,sast_risk,198,Potential JSON injection if long_selected contains untrusted data,Low,732,"        top_stocks.short_stocks = json.dumps(short_selected, ensure_ascii=False)","[220, 220, 220, 220, 220, 220, 220, 1353, 62, 29522, 13, 19509, 62, 29522, 796, 33918, 13, 67, 8142, 7, 19509, 62, 34213, 11, 4155, 62, 292, 979, 72, 28, 25101, 8]"
üß† ML Signal: Fetching small volume up stocks,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1402, 6115, 510, 14420]",1.0,793,ml_signal,201,Fetching small volume up stocks,,764,"        long_selected, long_period = get_top_performance_entities_by_periods(","[220, 220, 220, 220, 220, 220, 220, 890, 62, 34213, 11, 890, 62, 41007, 796, 651, 62, 4852, 62, 26585, 62, 298, 871, 62, 1525, 62, 41007, 82, 7]"
üß† ML Signal: Storing count of small volume up stocks,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 954, 286, 1402, 6115, 510, 14420]",1.0,824,ml_signal,205,Storing count of small volume up stocks,,793,"            periods=[*range(long_period_start, long_period_start + 30)],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9574, 41888, 9, 9521, 7, 6511, 62, 41007, 62, 9688, 11, 890, 62, 41007, 62, 9688, 1343, 1542, 8, 4357]"
‚ö†Ô∏è SAST Risk (Low): Potential JSON injection if small_vol_up_stocks contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 19449, 16954, 611, 1402, 62, 10396, 62, 929, 62, 29522, 4909, 1418, 81, 8459, 1366]",0.5,841,sast_risk,207,Potential JSON injection if small_vol_up_stocks contains untrusted data,Low,824,"            ignore_st=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 301, 28, 25101, 11]"
üß† ML Signal: Fetching big volume up stocks,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1263, 6115, 510, 14420]",1.0,858,ml_signal,209,Fetching big volume up stocks,,841,"            entity_type=""stock"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 4906, 2625, 13578, 1600]"
üß† ML Signal: Storing count of big volume up stocks,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 954, 286, 1263, 6115, 510, 14420]",1.0,878,ml_signal,213,Storing count of big volume up stocks,,858,"            turnover_rate_threshold=0,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25079, 62, 4873, 62, 400, 10126, 28, 15, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential JSON injection if big_vol_up_stocks contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 19449, 16954, 611, 1263, 62, 10396, 62, 929, 62, 29522, 4909, 1418, 81, 8459, 1366]",0.5,886,sast_risk,215,Potential JSON injection if big_vol_up_stocks contains untrusted data,Low,878,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Storing total count of all stocks,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2472, 954, 286, 477, 14420]",1.0,918,ml_signal,217,Storing total count of all stocks,,886,"        top_stocks.long_stocks = json.dumps(long_selected, ensure_ascii=False)","[220, 220, 220, 220, 220, 220, 220, 1353, 62, 29522, 13, 6511, 62, 29522, 796, 33918, 13, 67, 8142, 7, 6511, 62, 34213, 11, 4155, 62, 292, 979, 72, 28, 25101, 8]"
‚úÖ Best Practice: Logging or printing the top_stocks object,"[26486, 227, 6705, 19939, 25, 5972, 2667, 393, 13570, 262, 1353, 62, 29522, 2134]",0.5,941,best_practice,219,Logging or printing the top_stocks object,,918,        small_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1402, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"
üß† ML Signal: Adding and committing to the database session,"[8582, 100, 254, 10373, 26484, 25, 18247, 290, 17222, 284, 262, 6831, 6246]",0.5,949,ml_signal,221,Adding and committing to the database session,,941,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of a function with parameters and default values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 351, 10007, 290, 4277, 3815]",0.5,981,ml_signal,198,Use of a function with parameters and default values,,949,"        top_stocks.short_stocks = json.dumps(short_selected, ensure_ascii=False)","[220, 220, 220, 220, 220, 220, 220, 1353, 62, 29522, 13, 19509, 62, 29522, 796, 33918, 13, 67, 8142, 7, 19509, 62, 34213, 11, 4155, 62, 292, 979, 72, 28, 25101, 8]"
üß† ML Signal: Querying data with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 10007]",0.5,1000,ml_signal,202,Querying data with specific parameters,,981,"            entity_provider=provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 28, 15234, 1304, 11]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794]",1.0,1031,sast_risk,205,Use of assert for runtime checks,Low,1000,"            periods=[*range(long_period_start, long_period_start + 30)],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9574, 41888, 9, 9521, 7, 6511, 62, 41007, 62, 9688, 11, 890, 62, 41007, 62, 9688, 1343, 1542, 8, 4357]"
‚ö†Ô∏è SAST Risk (Low): Use of json.loads without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 33918, 13, 46030, 1231, 21201]",0.5,1048,sast_risk,209,Use of json.loads without validation,Low,1031,"            entity_type=""stock"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 4906, 2625, 13578, 1600]"
‚úÖ Best Practice: Use set to remove duplicates,"[26486, 227, 6705, 19939, 25, 5765, 900, 284, 4781, 14184, 16856]",1.0,1068,best_practice,214,Use set to remove duplicates,,1048,"            return_type=TopType.positive,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 28, 9126, 6030, 13, 24561, 11]"
‚ö†Ô∏è SAST Risk (Low): Use of json.loads without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 33918, 13, 46030, 1231, 21201]",0.5,1068,sast_risk,218,Use of json.loads without validation,Low,1068,,[]
‚ö†Ô∏è SAST Risk (Low): Use of json.loads without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 33918, 13, 46030, 1231, 21201]",0.5,1076,sast_risk,221,Use of json.loads without validation,Low,1068,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Use of json.loads without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 33918, 13, 46030, 1231, 21201]",0.5,1076,sast_risk,224,Use of json.loads without validation,Low,1076,,[]
‚ö†Ô∏è SAST Risk (Low): Use of json.loads without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 33918, 13, 46030, 1231, 21201]",0.5,1099,sast_risk,225,Use of json.loads without validation,Low,1076,        big_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1263, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794]",1.0,1122,sast_risk,225,Use of assert for runtime checks,Low,1099,        big_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1263, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"
‚úÖ Best Practice: Use of main guard for script execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 1388, 4860, 329, 4226, 9706]",0.5,1145,best_practice,225,Use of main guard for script execution,,1122,        big_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1263, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"
‚úÖ Best Practice: Explicitly defining __all__ for module exports,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 11593, 439, 834, 329, 8265, 15319]",1.0,1168,best_practice,225,Explicitly defining __all__ for module exports,,1145,        big_vol_up_stocks = get_vol_up_stocks(,"[220, 220, 220, 220, 220, 220, 220, 1263, 62, 10396, 62, 929, 62, 29522, 796, 651, 62, 10396, 62, 929, 62, 29522, 7]"

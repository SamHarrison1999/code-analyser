[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local can improve readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      460,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local can improve readability."
  },
  {
    "line": 10,
    "text": "from zvt.factors.algorithm import live_or_dead",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      282,
      42289,
      1330,
      2107,
      62,
      273,
      62,
      25124
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value"
  },
  {
    "line": 12,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u2705 Best Practice: Use isinstance() instead of type() for type checking",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 15,
    "end_token": 33,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      3419,
      2427,
      286,
      2099,
      3419,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use isinstance() instead of type() for type checking"
  },
  {
    "line": 15,
    "text": "def get_ma_stats_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):",
    "annotation": "\u2705 Best Practice: Use f-string for better readability and performance",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      2611,
      62,
      34242,
      62,
      31412,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      25,
      965,
      11,
      1241,
      25,
      4479,
      58,
      9492,
      2100,
      4971,
      11,
      965,
      60,
      796,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      2599
    ],
    "start_token": 33,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1365,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use f-string for better readability and performance"
  },
  {
    "line": 17,
    "text": "        level = IntervalLevel(level)",
    "annotation": "\ud83e\udde0 ML Signal: Function call with dynamic string argument",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      796,
      4225,
      2100,
      4971,
      7,
      5715,
      8
    ],
    "start_token": 72,
    "end_token": 87,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      8925,
      4731,
      4578
    ],
    "label": "ml_signal",
    "reason": "Function call with dynamic string argument"
  },
  {
    "line": 15,
    "text": "def get_ma_stats_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions, which this does.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      2611,
      62,
      34242,
      62,
      31412,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      25,
      965,
      11,
      1241,
      25,
      4479,
      58,
      9492,
      2100,
      4971,
      11,
      965,
      60,
      796,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      2599
    ],
    "start_token": 87,
    "end_token": 126,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      11,
      543,
      428,
      857,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions, which this does."
  },
  {
    "line": 17,
    "text": "        level = IntervalLevel(level)",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      796,
      4225,
      2100,
      4971,
      7,
      5715,
      8
    ],
    "start_token": 126,
    "end_token": 141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 19,
    "text": "    schema_str = \"{}{}MaStatsFactor\".format(entity_type.capitalize(), level.value.capitalize())",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass's __init__ method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      32815,
      62,
      2536,
      796,
      45144,
      18477,
      92,
      21467,
      29668,
      41384,
      1911,
      18982,
      7,
      26858,
      62,
      4906,
      13,
      27544,
      1096,
      22784,
      1241,
      13,
      8367,
      13,
      27544,
      1096,
      28955
    ],
    "start_token": 141,
    "end_token": 171,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass's __init__ method"
  },
  {
    "line": 21,
    "text": "    return get_schema_by_name(schema_str)",
    "annotation": "\ud83e\udde0 ML Signal: Storing parameters in instance variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      15952,
      2611,
      62,
      1525,
      62,
      3672,
      7,
      15952,
      2611,
      62,
      2536,
      8
    ],
    "start_token": 171,
    "end_token": 189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      10007,
      287,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Storing parameters in instance variables"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing parameters in instance variables",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 189,
    "end_token": 189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      10007,
      287,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Storing parameters in instance variables"
  },
  {
    "line": 21,
    "text": "    return get_schema_by_name(schema_str)",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking function execution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      15952,
      2611,
      62,
      1525,
      62,
      3672,
      7,
      15952,
      2611,
      62,
      2536,
      8
    ],
    "start_token": 189,
    "end_token": 207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      2163,
      9706
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking function execution"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if pd_is_not_null is not defined or imported",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 207,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      5447,
      393,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if pd_is_not_null is not defined or imported"
  },
  {
    "line": 26,
    "text": "        super().__init__(acc_window)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if pd_is_not_null is not defined or imported",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      4134,
      62,
      17497,
      8
    ],
    "start_token": 207,
    "end_token": 224,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      407,
      5447,
      393,
      17392
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if pd_is_not_null is not defined or imported"
  },
  {
    "line": 28,
    "text": "        self.vol_windows = vol_windows",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      10396,
      62,
      28457,
      796,
      2322,
      62,
      28457
    ],
    "start_token": 224,
    "end_token": 240,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking data processing"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.concat for DataFrame concatenation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 240,
    "end_token": 240,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      329,
      6060,
      19778,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Using pd.concat for DataFrame concatenation"
  },
  {
    "line": 33,
    "text": "            df = df[df.index > acc_df.index[-1]]",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for conditional branches",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      58,
      7568,
      13,
      9630,
      1875,
      697,
      62,
      7568,
      13,
      9630,
      58,
      12,
      16,
      11907
    ],
    "start_token": 240,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      26340,
      13737
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for conditional branches"
  },
  {
    "line": 39,
    "text": "                return acc_df, state",
    "annotation": "\u2705 Best Practice: Using format for string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      697,
      62,
      7568,
      11,
      1181
    ],
    "start_token": 268,
    "end_token": 289,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting"
  },
  {
    "line": 41,
    "text": "            acc_df = df",
    "annotation": "\ud83e\udde0 ML Signal: Tracking indicators being appended",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      796,
      47764
    ],
    "start_token": 289,
    "end_token": 305,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      21337,
      852,
      598,
      1631
    ],
    "label": "ml_signal",
    "reason": "Tracking indicators being appended"
  },
  {
    "line": 43,
    "text": "        for window in self.windows:",
    "annotation": "\u2705 Best Practice: Using rolling mean for moving average calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4324,
      287,
      2116,
      13,
      28457,
      25
    ],
    "start_token": 305,
    "end_token": 319,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10708,
      1612,
      329,
      3867,
      2811,
      17952
    ],
    "label": "best_practice",
    "reason": "Using rolling mean for moving average calculation"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\u2705 Best Practice: Using apply with lambda for conditional column creation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 319,
    "end_token": 319,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4174,
      351,
      37456,
      329,
      26340,
      5721,
      6282
    ],
    "label": "best_practice",
    "reason": "Using apply with lambda for conditional column creation"
  },
  {
    "line": 50,
    "text": "        acc_df[\"live\"] = (acc_df[\"ma5\"] > acc_df[\"ma10\"]).apply(lambda x: live_or_dead(x))",
    "annotation": "\u2705 Best Practice: Using groupby and cumcount for sequence counting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      14692,
      12583,
      8973,
      796,
      357,
      4134,
      62,
      7568,
      14692,
      2611,
      20,
      8973,
      1875,
      697,
      62,
      7568,
      14692,
      2611,
      940,
      8973,
      737,
      39014,
      7,
      50033,
      2124,
      25,
      2107,
      62,
      273,
      62,
      25124,
      7,
      87,
      4008
    ],
    "start_token": 319,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1448,
      1525,
      290,
      10973,
      9127,
      329,
      8379,
      14143
    ],
    "label": "best_practice",
    "reason": "Using groupby and cumcount for sequence counting"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\u2705 Best Practice: Using groupby and cumsum for cumulative sum calculation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1448,
      1525,
      290,
      269,
      5700,
      388,
      329,
      23818,
      2160,
      17952
    ],
    "label": "best_practice",
    "reason": "Using groupby and cumsum for cumulative sum calculation"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\u2705 Best Practice: Using format for string formatting",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Tracking indicators being appended",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      21337,
      852,
      598,
      1631
    ],
    "label": "ml_signal",
    "reason": "Tracking indicators being appended"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\u2705 Best Practice: Using rolling mean for moving average calculation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10708,
      1612,
      329,
      3867,
      2811,
      17952
    ],
    "label": "best_practice",
    "reason": "Using rolling mean for moving average calculation"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\u2705 Best Practice: Setting index with drop=False to retain column",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      6376,
      351,
      4268,
      28,
      25101,
      284,
      12377,
      5721
    ],
    "label": "best_practice",
    "reason": "Setting index with drop=False to retain column"
  },
  {
    "line": 51,
    "text": "        acc_df[\"distance\"] = (acc_df[\"ma5\"] - acc_df[\"ma10\"]) / acc_df[\"close\"]",
    "annotation": "\u2705 Best Practice: Class definition should follow the naming convention of using CamelCase.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      14692,
      30246,
      8973,
      796,
      357,
      4134,
      62,
      7568,
      14692,
      2611,
      20,
      8973,
      532,
      697,
      62,
      7568,
      14692,
      2611,
      940,
      8973,
      8,
      1220,
      697,
      62,
      7568,
      14692,
      19836,
      8973
    ],
    "start_token": 363,
    "end_token": 401,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      262,
      19264,
      9831,
      286,
      1262,
      43281,
      20448,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow the naming convention of using CamelCase."
  },
  {
    "line": 81,
    "text": "        end_timestamp: Union[str, pd.Timestamp] = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `need_persist` is not properly validated before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      25,
      4479,
      58,
      2536,
      11,
      279,
      67,
      13,
      14967,
      27823,
      60,
      796,
      6045,
      11
    ],
    "start_token": 401,
    "end_token": 426,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      31227,
      62,
      19276,
      396,
      63,
      318,
      407,
      6105,
      31031,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `need_persist` is not properly validated before use"
  },
  {
    "line": 83,
    "text": "        order: object = None,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic schema generation based on entity type and level",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      25,
      2134,
      796,
      6045,
      11
    ],
    "start_token": 426,
    "end_token": 439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      32815,
      5270,
      1912,
      319,
      9312,
      2099,
      290,
      1241
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic schema generation based on entity type and level"
  },
  {
    "line": 85,
    "text": "        level: Union[str, IntervalLevel] = IntervalLevel.LEVEL_1DAY,",
    "annotation": "\u2705 Best Practice: Default values for `windows` should be set in the function signature",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      25,
      4479,
      58,
      2536,
      11,
      4225,
      2100,
      4971,
      60,
      796,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11
    ],
    "start_token": 439,
    "end_token": 467,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      3815,
      329,
      4600,
      28457,
      63,
      815,
      307,
      900,
      287,
      262,
      2163,
      9877
    ],
    "label": "best_practice",
    "reason": "Default values for `windows` should be set in the function signature"
  },
  {
    "line": 89,
    "text": "        keep_all_timestamp: bool = False,",
    "annotation": "\u2705 Best Practice: Default values for `vol_windows` should be set in the function signature",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1394,
      62,
      439,
      62,
      16514,
      27823,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 467,
    "end_token": 485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      3815,
      329,
      4600,
      10396,
      62,
      28457,
      63,
      815,
      307,
      900,
      287,
      262,
      2163,
      9877
    ],
    "label": "best_practice",
    "reason": "Default values for `vol_windows` should be set in the function signature"
  },
  {
    "line": 91,
    "text": "        effective_number: int = None,",
    "annotation": "\ud83e\udde0 ML Signal: Use of accumulator pattern for statistical calculations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4050,
      62,
      17618,
      25,
      493,
      796,
      6045,
      11
    ],
    "start_token": 485,
    "end_token": 500,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10507,
      8927,
      3912,
      329,
      13905,
      16765
    ],
    "label": "ml_signal",
    "reason": "Use of accumulator pattern for statistical calculations"
  },
  {
    "line": 91,
    "text": "        effective_number: int = None,",
    "annotation": "\ud83e\udde0 ML Signal: Use of inheritance and super() for class initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4050,
      62,
      17618,
      25,
      493,
      796,
      6045,
      11
    ],
    "start_token": 500,
    "end_token": 515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      24155,
      290,
      2208,
      3419,
      329,
      1398,
      37588
    ],
    "label": "ml_signal",
    "reason": "Use of inheritance and super() for class initialization"
  },
  {
    "line": 121,
    "text": "            exchanges,",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring explaining its purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      11
    ],
    "start_token": 515,
    "end_token": 528,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring explaining its purpose and usage."
  },
  {
    "line": 150,
    "text": "        entity_schema: Type[TradableEntity] = Stock,",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's __init__ method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      25,
      5994,
      58,
      2898,
      324,
      540,
      32398,
      60,
      796,
      10500,
      11
    ],
    "start_token": 528,
    "end_token": 550,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's __init__ method"
  },
  {
    "line": 178,
    "text": "            entity_schema,",
    "annotation": "\u2705 Best Practice: Specify the return type as List[pd.DataFrame] instead of Optional since the function always returns a list.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 550,
    "end_token": 566,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      1441,
      2099,
      355,
      7343,
      58,
      30094,
      13,
      6601,
      19778,
      60,
      2427,
      286,
      32233,
      1201,
      262,
      2163,
      1464,
      5860,
      257,
      1351,
      13
    ],
    "label": "best_practice",
    "reason": "Specify the return type as List[pd.DataFrame] instead of Optional since the function always returns a list."
  },
  {
    "line": 180,
    "text": "            entity_provider,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific column from a DataFrame, indicating columnar data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 566,
    "end_token": 582,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      5721,
      422,
      257,
      6060,
      19778,
      11,
      12739,
      5721,
      283,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific column from a DataFrame, indicating columnar data processing."
  },
  {
    "line": 181,
    "text": "            entity_ids,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"area\" column does not exist in factor_df.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      11
    ],
    "start_token": 582,
    "end_token": 597,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      20337,
      1,
      5721,
      857,
      407,
      2152,
      287,
      5766,
      62,
      7568,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"area\" column does not exist in factor_df."
  },
  {
    "line": 181,
    "text": "            entity_ids,",
    "annotation": "\u2705 Best Practice: Explicitly specify the columns to be included in the DataFrame to improve readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      11
    ],
    "start_token": 597,
    "end_token": 612,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      262,
      15180,
      284,
      307,
      3017,
      287,
      262,
      6060,
      19778,
      284,
      2987,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly specify the columns to be included in the DataFrame to improve readability and maintainability."
  },
  {
    "line": 184,
    "text": "            start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a main guard to execute code conditionally.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 612,
    "end_token": 628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1388,
      4860,
      284,
      12260,
      2438,
      4006,
      453,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a main guard to execute code conditionally."
  },
  {
    "line": 186,
    "text": "            filters,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      11
    ],
    "start_token": 628,
    "end_token": 641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters."
  },
  {
    "line": 186,
    "text": "            filters,",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object with specific parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      11
    ],
    "start_token": 641,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call on an object with specific parameters."
  },
  {
    "line": 186,
    "text": "            filters,",
    "annotation": "\u2705 Best Practice: Use of __all__ to define the public interface of the module.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      11
    ],
    "start_token": 654,
    "end_token": 667,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      262,
      1171,
      7071,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define the public interface of the module."
  }
]
[
  {
    "line": 12,
    "text": "from zvt.domain import Stock, Stock1dKdata",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local application sections improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500,
      11,
      10500,
      16,
      67,
      42,
      7890
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      3586,
      9004,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local application sections improves readability."
  },
  {
    "line": 14,
    "text": "from zvt.utils.time_utils import now_pd_timestamp",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      783,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 13,
    "end_token": 29,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass initializer",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 29,
    "end_token": 29,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      4238,
      7509
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass initializer"
  },
  {
    "line": 18,
    "text": "    def __init__(self, window=20) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the initialization of instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4324,
      28,
      1238,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 29,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      37588,
      286,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Tracking the initialization of instance variables"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method name 'transform' suggests a data transformation operation, common in data preprocessing for ML.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 46,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      705,
      35636,
      6,
      5644,
      257,
      1366,
      13389,
      4905,
      11,
      2219,
      287,
      1366,
      662,
      36948,
      329,
      10373,
      13
    ],
    "label": "ml_signal",
    "reason": "Method name 'transform' suggests a data transformation operation, common in data preprocessing for ML."
  },
  {
    "line": 18,
    "text": "    def __init__(self, window=20) -> None:",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like 'top_df' improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4324,
      28,
      1238,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 46,
    "end_token": 63,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      705,
      4852,
      62,
      7568,
      6,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like 'top_df' improves code readability."
  },
  {
    "line": 20,
    "text": "        self.window = window",
    "annotation": "\u2705 Best Practice: Resetting index with 'drop=True' to avoid unnecessary index column in the result.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17497,
      796,
      4324
    ],
    "start_token": 63,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      351,
      705,
      14781,
      28,
      17821,
      6,
      284,
      3368,
      13114,
      6376,
      5721,
      287,
      262,
      1255,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting index with 'drop=True' to avoid unnecessary index column in the result."
  },
  {
    "line": 22,
    "text": "    def transform(self, input_df) -> pd.DataFrame:",
    "annotation": "\u2705 Best Practice: Directly assigning new columns to 'input_df' makes the transformation clear and concise.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6121,
      7,
      944,
      11,
      5128,
      62,
      7568,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 75,
    "end_token": 94,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      306,
      38875,
      649,
      15180,
      284,
      705,
      15414,
      62,
      7568,
      6,
      1838,
      262,
      13389,
      1598,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Directly assigning new columns to 'input_df' makes the transformation clear and concise."
  },
  {
    "line": 24,
    "text": "        top_df = top_df.reset_index(level=0, drop=True)",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like 'bottom_df' improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1353,
      62,
      7568,
      796,
      1353,
      62,
      7568,
      13,
      42503,
      62,
      9630,
      7,
      5715,
      28,
      15,
      11,
      4268,
      28,
      17821,
      8
    ],
    "start_token": 94,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      705,
      22487,
      62,
      7568,
      6,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like 'bottom_df' improves code readability."
  },
  {
    "line": 25,
    "text": "        input_df[\"top\"] = top_df",
    "annotation": "\u2705 Best Practice: Resetting index with 'drop=True' to avoid unnecessary index column in the result.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5128,
      62,
      7568,
      14692,
      4852,
      8973,
      796,
      1353,
      62,
      7568
    ],
    "start_token": 121,
    "end_token": 138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      351,
      705,
      14781,
      28,
      17821,
      6,
      284,
      3368,
      13114,
      6376,
      5721,
      287,
      262,
      1255,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting index with 'drop=True' to avoid unnecessary index column in the result."
  },
  {
    "line": 25,
    "text": "        input_df[\"top\"] = top_df",
    "annotation": "\u2705 Best Practice: Directly assigning new columns to 'input_df' makes the transformation clear and concise.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5128,
      62,
      7568,
      14692,
      4852,
      8973,
      796,
      1353,
      62,
      7568
    ],
    "start_token": 138,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      306,
      38875,
      649,
      15180,
      284,
      705,
      15414,
      62,
      7568,
      6,
      1838,
      262,
      13389,
      1598,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Directly assigning new columns to 'input_df' makes the transformation clear and concise."
  },
  {
    "line": 25,
    "text": "        input_df[\"top\"] = top_df",
    "annotation": "\u2705 Best Practice: Returning the modified DataFrame allows for method chaining and functional programming style.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5128,
      62,
      7568,
      14692,
      4852,
      8973,
      796,
      1353,
      62,
      7568
    ],
    "start_token": 155,
    "end_token": 172,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      262,
      9518,
      6060,
      19778,
      3578,
      329,
      2446,
      442,
      1397,
      290,
      10345,
      8300,
      3918,
      13
    ],
    "label": "best_practice",
    "reason": "Returning the modified DataFrame allows for method chaining and functional programming style."
  },
  {
    "line": 55,
    "text": "        effective_number: int = None,",
    "annotation": "\u2705 Best Practice: Initialize transformer with a clear and descriptive name",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4050,
      62,
      17618,
      25,
      493,
      796,
      6045,
      11
    ],
    "start_token": 172,
    "end_token": 187,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      47385,
      351,
      257,
      1598,
      290,
      35644,
      1438
    ],
    "label": "best_practice",
    "reason": "Initialize transformer with a clear and descriptive name"
  },
  {
    "line": 56,
    "text": "        accumulator: Accumulator = None,",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's __init__ method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10507,
      8927,
      25,
      6366,
      388,
      8927,
      796,
      6045,
      11
    ],
    "start_token": 187,
    "end_token": 203,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's __init__ method"
  },
  {
    "line": 86,
    "text": "            fill_method,",
    "annotation": "\ud83e\udde0 ML Signal: Example of instantiating a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6070,
      62,
      24396,
      11
    ],
    "start_token": 203,
    "end_token": 218,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      9113,
      26336,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Example of instantiating a class with specific parameters"
  },
  {
    "line": 96,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Printing the factor's dataframe, indicating usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 218,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44118,
      262,
      5766,
      338,
      1366,
      14535,
      11,
      12739,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Printing the factor's dataframe, indicating usage pattern"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Example of creating a DataReader with specific parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 226,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      4441,
      257,
      6060,
      33634,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Example of creating a DataReader with specific parameters"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Example of using a Drawer to visualize data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 226,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      1262,
      257,
      15315,
      263,
      284,
      38350,
      1366
    ],
    "label": "ml_signal",
    "reason": "Example of using a Drawer to visualize data"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Drawing a kline chart, indicating visualization usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 226,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40027,
      257,
      479,
      1370,
      8262,
      11,
      12739,
      32704,
      8748
    ],
    "label": "ml_signal",
    "reason": "Drawing a kline chart, indicating visualization usage"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 226,
    "end_token": 226,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
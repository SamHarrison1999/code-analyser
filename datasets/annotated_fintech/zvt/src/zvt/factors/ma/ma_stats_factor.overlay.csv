annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports by standard, third-party, and local can improve readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 416, 3210, 11, 2368, 12, 10608, 11, 290, 1957, 460, 2987, 1100, 1799, 13]",0.5,0,best_practice,3,"Grouping imports by standard, third-party, and local can improve readability.",,0,,[]
üß† ML Signal: Function with default parameter value,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988]",0.5,15,ml_signal,10,Function with default parameter value,,0,from zvt.factors.algorithm import live_or_dead,"[6738, 1976, 36540, 13, 22584, 669, 13, 282, 42289, 1330, 2107, 62, 273, 62, 25124]"
‚úÖ Best Practice: Use isinstance() instead of type() for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 3419, 2427, 286, 2099, 3419, 329, 2099, 10627]",1.0,33,best_practice,12,Use isinstance() instead of type() for type checking,,15,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
‚úÖ Best Practice: Use f-string for better readability and performance,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1365, 1100, 1799, 290, 2854]",0.5,72,best_practice,15,Use f-string for better readability and performance,,33,"def get_ma_stats_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):","[4299, 651, 62, 2611, 62, 34242, 62, 31412, 62, 15952, 2611, 7, 26858, 62, 4906, 25, 965, 11, 1241, 25, 4479, 58, 9492, 2100, 4971, 11, 965, 60, 796, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 2599]"
üß† ML Signal: Function call with dynamic string argument,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8925, 4731, 4578]",0.5,87,ml_signal,17,Function call with dynamic string argument,,72,        level = IntervalLevel(level),"[220, 220, 220, 220, 220, 220, 220, 1241, 796, 4225, 2100, 4971, 7, 5715, 8]"
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which this does.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 428, 857, 13]",0.5,126,best_practice,15,"Class definition should follow PEP 8 naming conventions, which this does.",,87,"def get_ma_stats_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):","[4299, 651, 62, 2611, 62, 34242, 62, 31412, 62, 15952, 2611, 7, 26858, 62, 4906, 25, 965, 11, 1241, 25, 4479, 58, 9492, 2100, 4971, 11, 965, 60, 796, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 2599]"
‚úÖ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",1.0,141,best_practice,17,Use of type hints for function parameters and return type,,126,        level = IntervalLevel(level),"[220, 220, 220, 220, 220, 220, 220, 1241, 796, 4225, 2100, 4971, 7, 5715, 8]"
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446]",1.0,171,best_practice,19,Explicitly calling the superclass's __init__ method,,141,"    schema_str = ""{}{}MaStatsFactor"".format(entity_type.capitalize(), level.value.capitalize())","[220, 220, 220, 32815, 62, 2536, 796, 45144, 18477, 92, 21467, 29668, 41384, 1911, 18982, 7, 26858, 62, 4906, 13, 27544, 1096, 22784, 1241, 13, 8367, 13, 27544, 1096, 28955]"
üß† ML Signal: Storing parameters in instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 287, 4554, 9633]",1.0,189,ml_signal,21,Storing parameters in instance variables,,171,    return get_schema_by_name(schema_str),"[220, 220, 220, 1441, 651, 62, 15952, 2611, 62, 1525, 62, 3672, 7, 15952, 2611, 62, 2536, 8]"
üß† ML Signal: Storing parameters in instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 287, 4554, 9633]",1.0,189,ml_signal,23,Storing parameters in instance variables,,189,,[]
üß† ML Signal: Logging usage pattern for tracking function execution,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 2163, 9706]",1.0,207,ml_signal,21,Logging usage pattern for tracking function execution,,189,    return get_schema_by_name(schema_str),"[220, 220, 220, 1441, 651, 62, 15952, 2611, 62, 1525, 62, 3672, 7, 15952, 2611, 62, 2536, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if pd_is_not_null is not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 5447, 393, 17392]",1.0,207,sast_risk,23,Potential issue if pd_is_not_null is not defined or imported,Low,207,,[]
‚ö†Ô∏è SAST Risk (Low): Potential issue if pd_is_not_null is not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 407, 5447, 393, 17392]",1.0,224,sast_risk,26,Potential issue if pd_is_not_null is not defined or imported,Low,207,        super().__init__(acc_window),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 4134, 62, 17497, 8]"
üß† ML Signal: Logging usage pattern for tracking data processing,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 1366, 7587]",1.0,240,ml_signal,28,Logging usage pattern for tracking data processing,,224,        self.vol_windows = vol_windows,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 10396, 62, 28457, 796, 2322, 62, 28457]"
‚úÖ Best Practice: Using pd.concat for DataFrame concatenation,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 6060, 19778, 1673, 36686, 341]",0.5,240,best_practice,29,Using pd.concat for DataFrame concatenation,,240,,[]
üß† ML Signal: Logging usage pattern for conditional branches,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 26340, 13737]",0.5,268,ml_signal,33,Logging usage pattern for conditional branches,,240,            df = df[df.index > acc_df.index[-1]],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 58, 7568, 13, 9630, 1875, 697, 62, 7568, 13, 9630, 58, 12, 16, 11907]"
‚úÖ Best Practice: Using format for string formatting,"[26486, 227, 6705, 19939, 25, 8554, 5794, 329, 4731, 33313]",0.5,289,best_practice,39,Using format for string formatting,,268,"                return acc_df, state","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 697, 62, 7568, 11, 1181]"
üß† ML Signal: Tracking indicators being appended,"[8582, 100, 254, 10373, 26484, 25, 37169, 21337, 852, 598, 1631]",1.0,305,ml_signal,41,Tracking indicators being appended,,289,            acc_df = df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 796, 47764]"
‚úÖ Best Practice: Using rolling mean for moving average calculation,"[26486, 227, 6705, 19939, 25, 8554, 10708, 1612, 329, 3867, 2811, 17952]",0.5,319,best_practice,43,Using rolling mean for moving average calculation,,305,        for window in self.windows:,"[220, 220, 220, 220, 220, 220, 220, 329, 4324, 287, 2116, 13, 28457, 25]"
‚úÖ Best Practice: Using apply with lambda for conditional column creation,"[26486, 227, 6705, 19939, 25, 8554, 4174, 351, 37456, 329, 26340, 5721, 6282]",0.5,319,best_practice,46,Using apply with lambda for conditional column creation,,319,,[]
‚úÖ Best Practice: Using groupby and cumcount for sequence counting,"[26486, 227, 6705, 19939, 25, 8554, 1448, 1525, 290, 10973, 9127, 329, 8379, 14143]",0.5,363,best_practice,50,Using groupby and cumcount for sequence counting,,319,"        acc_df[""live""] = (acc_df[""ma5""] > acc_df[""ma10""]).apply(lambda x: live_or_dead(x))","[220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 14692, 12583, 8973, 796, 357, 4134, 62, 7568, 14692, 2611, 20, 8973, 1875, 697, 62, 7568, 14692, 2611, 940, 8973, 737, 39014, 7, 50033, 2124, 25, 2107, 62, 273, 62, 25124, 7, 87, 4008]"
‚úÖ Best Practice: Using groupby and cumsum for cumulative sum calculation,"[26486, 227, 6705, 19939, 25, 8554, 1448, 1525, 290, 269, 5700, 388, 329, 23818, 2160, 17952]",0.5,363,best_practice,52,Using groupby and cumsum for cumulative sum calculation,,363,,[]
‚úÖ Best Practice: Using format for string formatting,"[26486, 227, 6705, 19939, 25, 8554, 5794, 329, 4731, 33313]",0.5,363,best_practice,52,Using format for string formatting,,363,,[]
üß† ML Signal: Tracking indicators being appended,"[8582, 100, 254, 10373, 26484, 25, 37169, 21337, 852, 598, 1631]",1.0,363,ml_signal,52,Tracking indicators being appended,,363,,[]
‚úÖ Best Practice: Using rolling mean for moving average calculation,"[26486, 227, 6705, 19939, 25, 8554, 10708, 1612, 329, 3867, 2811, 17952]",0.5,363,best_practice,52,Using rolling mean for moving average calculation,,363,,[]
‚úÖ Best Practice: Setting index with drop=False to retain column,"[26486, 227, 6705, 19939, 25, 25700, 6376, 351, 4268, 28, 25101, 284, 12377, 5721]",1.0,363,best_practice,52,Setting index with drop=False to retain column,,363,,[]
‚úÖ Best Practice: Class definition should follow the naming convention of using CamelCase.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 262, 19264, 9831, 286, 1262, 43281, 20448, 13]",0.5,401,best_practice,51,Class definition should follow the naming convention of using CamelCase.,,363,"        acc_df[""distance""] = (acc_df[""ma5""] - acc_df[""ma10""]) / acc_df[""close""]","[220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 14692, 30246, 8973, 796, 357, 4134, 62, 7568, 14692, 2611, 20, 8973, 532, 697, 62, 7568, 14692, 2611, 940, 8973, 8, 1220, 697, 62, 7568, 14692, 19836, 8973]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `need_persist` is not properly validated before use,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 31227, 62, 19276, 396, 63, 318, 407, 6105, 31031, 878, 779]",0.5,426,sast_risk,81,Potential risk if `need_persist` is not properly validated before use,Low,401,"        end_timestamp: Union[str, pd.Timestamp] = None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 25, 4479, 58, 2536, 11, 279, 67, 13, 14967, 27823, 60, 796, 6045, 11]"
üß† ML Signal: Usage of dynamic schema generation based on entity type and level,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 32815, 5270, 1912, 319, 9312, 2099, 290, 1241]",1.0,439,ml_signal,83,Usage of dynamic schema generation based on entity type and level,,426,"        order: object = None,","[220, 220, 220, 220, 220, 220, 220, 1502, 25, 2134, 796, 6045, 11]"
‚úÖ Best Practice: Default values for `windows` should be set in the function signature,"[26486, 227, 6705, 19939, 25, 15161, 3815, 329, 4600, 28457, 63, 815, 307, 900, 287, 262, 2163, 9877]",0.5,467,best_practice,85,Default values for `windows` should be set in the function signature,,439,"        level: Union[str, IntervalLevel] = IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 220, 220, 220, 220, 1241, 25, 4479, 58, 2536, 11, 4225, 2100, 4971, 60, 796, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
‚úÖ Best Practice: Default values for `vol_windows` should be set in the function signature,"[26486, 227, 6705, 19939, 25, 15161, 3815, 329, 4600, 10396, 62, 28457, 63, 815, 307, 900, 287, 262, 2163, 9877]",0.5,485,best_practice,89,Default values for `vol_windows` should be set in the function signature,,467,"        keep_all_timestamp: bool = False,","[220, 220, 220, 220, 220, 220, 220, 1394, 62, 439, 62, 16514, 27823, 25, 20512, 796, 10352, 11]"
üß† ML Signal: Use of accumulator pattern for statistical calculations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10507, 8927, 3912, 329, 13905, 16765]",1.0,500,ml_signal,91,Use of accumulator pattern for statistical calculations,,485,"        effective_number: int = None,","[220, 220, 220, 220, 220, 220, 220, 4050, 62, 17618, 25, 493, 796, 6045, 11]"
üß† ML Signal: Use of inheritance and super() for class initialization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 24155, 290, 2208, 3419, 329, 1398, 37588]",0.5,515,ml_signal,91,Use of inheritance and super() for class initialization,,500,"        effective_number: int = None,","[220, 220, 220, 220, 220, 220, 220, 4050, 62, 17618, 25, 493, 796, 6045, 11]"
‚úÖ Best Practice: Class definition should include a docstring explaining its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 11170, 663, 4007, 290, 8748, 13]",1.0,528,best_practice,121,Class definition should include a docstring explaining its purpose and usage.,,515,"            exchanges,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14525, 11]"
‚úÖ Best Practice: Use of super() to call the parent class's __init__ method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446]",0.5,550,best_practice,150,Use of super() to call the parent class's __init__ method,,528,"        entity_schema: Type[TradableEntity] = Stock,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 15952, 2611, 25, 5994, 58, 2898, 324, 540, 32398, 60, 796, 10500, 11]"
‚úÖ Best Practice: Specify the return type as List[pd.DataFrame] instead of Optional since the function always returns a list.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 355, 7343, 58, 30094, 13, 6601, 19778, 60, 2427, 286, 32233, 1201, 262, 2163, 1464, 5860, 257, 1351, 13]",1.0,566,best_practice,178,Specify the return type as List[pd.DataFrame] instead of Optional since the function always returns a list.,,550,"            entity_schema,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15952, 2611, 11]"
"üß† ML Signal: Accessing a specific column from a DataFrame, indicating columnar data processing.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 422, 257, 6060, 19778, 11, 12739, 5721, 283, 1366, 7587, 13]",1.0,582,ml_signal,180,"Accessing a specific column from a DataFrame, indicating columnar data processing.",,566,"            entity_provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 15234, 1304, 11]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""area"" column does not exist in factor_df.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 20337, 1, 5721, 857, 407, 2152, 287, 5766, 62, 7568, 13]",1.0,597,sast_risk,181,"Potential KeyError if ""area"" column does not exist in factor_df.",Low,582,"            entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 11]"
‚úÖ Best Practice: Explicitly specify the columns to be included in the DataFrame to improve readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 15180, 284, 307, 3017, 287, 262, 6060, 19778, 284, 2987, 1100, 1799, 290, 5529, 1799, 13]",0.5,612,best_practice,181,Explicitly specify the columns to be included in the DataFrame to improve readability and maintainability.,,597,"            entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 11]"
üß† ML Signal: Usage of a main guard to execute code conditionally.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1388, 4860, 284, 12260, 2438, 4006, 453, 13]",0.5,628,ml_signal,184,Usage of a main guard to execute code conditionally.,,612,"            start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 11]"
üß† ML Signal: Instantiation of a class with specific parameters.,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 1398, 351, 2176, 10007, 13]",0.5,641,ml_signal,186,Instantiation of a class with specific parameters.,,628,"            filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 11]"
üß† ML Signal: Method call on an object with specific parameters.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 351, 2176, 10007, 13]",0.5,654,ml_signal,186,Method call on an object with specific parameters.,,641,"            filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 11]"
‚úÖ Best Practice: Use of __all__ to define the public interface of the module.,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 262, 1171, 7071, 286, 262, 8265, 13]",0.5,667,best_practice,186,Use of __all__ to define the public interface of the module.,,654,"            filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 11]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,start_token,text,tokens
"âœ… Best Practice: Grouping imports into standard library, third-party, and local application sections improves readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 3586, 9004, 19575, 1100, 1799, 13]",1.0,13,best_practice,12,"Grouping imports into standard library, third-party, and local application sections improves readability.",0,"from zvt.domain import Stock, Stock1dKdata","[6738, 1976, 36540, 13, 27830, 1330, 10500, 11, 10500, 16, 67, 42, 7890]"
âœ… Best Practice: Use of default parameter values for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688]",1.0,29,best_practice,14,Use of default parameter values for flexibility,13,from zvt.utils.time_utils import now_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 783, 62, 30094, 62, 16514, 27823]"
âœ… Best Practice: Explicitly calling the superclass initializer,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 4238, 7509]",1.0,29,best_practice,16,Explicitly calling the superclass initializer,29,,[]
ðŸ§  ML Signal: Tracking the initialization of instance variables,"[8582, 100, 254, 10373, 26484, 25, 37169, 262, 37588, 286, 4554, 9633]",0.5,46,ml_signal,18,Tracking the initialization of instance variables,29,"    def __init__(self, window=20) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4324, 28, 1238, 8, 4613, 6045, 25]"
"ðŸ§  ML Signal: Method name 'transform' suggests a data transformation operation, common in data preprocessing for ML.","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 705, 35636, 6, 5644, 257, 1366, 13389, 4905, 11, 2219, 287, 1366, 662, 36948, 329, 10373, 13]",0.5,46,ml_signal,16,"Method name 'transform' suggests a data transformation operation, common in data preprocessing for ML.",46,,[]
âœ… Best Practice: Using descriptive variable names like 'top_df' improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 705, 4852, 62, 7568, 6, 19575, 2438, 1100, 1799, 13]",0.5,63,best_practice,18,Using descriptive variable names like 'top_df' improves code readability.,46,"    def __init__(self, window=20) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4324, 28, 1238, 8, 4613, 6045, 25]"
âœ… Best Practice: Resetting index with 'drop=True' to avoid unnecessary index column in the result.,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 351, 705, 14781, 28, 17821, 6, 284, 3368, 13114, 6376, 5721, 287, 262, 1255, 13]",0.5,75,best_practice,20,Resetting index with 'drop=True' to avoid unnecessary index column in the result.,63,        self.window = window,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 17497, 796, 4324]"
âœ… Best Practice: Directly assigning new columns to 'input_df' makes the transformation clear and concise.,"[26486, 227, 6705, 19939, 25, 4128, 306, 38875, 649, 15180, 284, 705, 15414, 62, 7568, 6, 1838, 262, 13389, 1598, 290, 35327, 13]",0.5,94,best_practice,22,Directly assigning new columns to 'input_df' makes the transformation clear and concise.,75,"    def transform(self, input_df) -> pd.DataFrame:","[220, 220, 220, 825, 6121, 7, 944, 11, 5128, 62, 7568, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
âœ… Best Practice: Using descriptive variable names like 'bottom_df' improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 705, 22487, 62, 7568, 6, 19575, 2438, 1100, 1799, 13]",0.5,121,best_practice,24,Using descriptive variable names like 'bottom_df' improves code readability.,94,"        top_df = top_df.reset_index(level=0, drop=True)","[220, 220, 220, 220, 220, 220, 220, 1353, 62, 7568, 796, 1353, 62, 7568, 13, 42503, 62, 9630, 7, 5715, 28, 15, 11, 4268, 28, 17821, 8]"
âœ… Best Practice: Resetting index with 'drop=True' to avoid unnecessary index column in the result.,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 351, 705, 14781, 28, 17821, 6, 284, 3368, 13114, 6376, 5721, 287, 262, 1255, 13]",0.5,138,best_practice,25,Resetting index with 'drop=True' to avoid unnecessary index column in the result.,121,"        input_df[""top""] = top_df","[220, 220, 220, 220, 220, 220, 220, 5128, 62, 7568, 14692, 4852, 8973, 796, 1353, 62, 7568]"
âœ… Best Practice: Directly assigning new columns to 'input_df' makes the transformation clear and concise.,"[26486, 227, 6705, 19939, 25, 4128, 306, 38875, 649, 15180, 284, 705, 15414, 62, 7568, 6, 1838, 262, 13389, 1598, 290, 35327, 13]",0.5,155,best_practice,25,Directly assigning new columns to 'input_df' makes the transformation clear and concise.,138,"        input_df[""top""] = top_df","[220, 220, 220, 220, 220, 220, 220, 5128, 62, 7568, 14692, 4852, 8973, 796, 1353, 62, 7568]"
âœ… Best Practice: Returning the modified DataFrame allows for method chaining and functional programming style.,"[26486, 227, 6705, 19939, 25, 42882, 262, 9518, 6060, 19778, 3578, 329, 2446, 442, 1397, 290, 10345, 8300, 3918, 13]",0.5,172,best_practice,25,Returning the modified DataFrame allows for method chaining and functional programming style.,155,"        input_df[""top""] = top_df","[220, 220, 220, 220, 220, 220, 220, 5128, 62, 7568, 14692, 4852, 8973, 796, 1353, 62, 7568]"
âœ… Best Practice: Initialize transformer with a clear and descriptive name,"[26486, 227, 6705, 19939, 25, 20768, 1096, 47385, 351, 257, 1598, 290, 35644, 1438]",1.0,187,best_practice,55,Initialize transformer with a clear and descriptive name,172,"        effective_number: int = None,","[220, 220, 220, 220, 220, 220, 220, 4050, 62, 17618, 25, 493, 796, 6045, 11]"
âœ… Best Practice: Use of super() to call the parent class's __init__ method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446]",1.0,203,best_practice,56,Use of super() to call the parent class's __init__ method,187,"        accumulator: Accumulator = None,","[220, 220, 220, 220, 220, 220, 220, 10507, 8927, 25, 6366, 388, 8927, 796, 6045, 11]"
ðŸ§  ML Signal: Example of instantiating a class with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 17934, 286, 9113, 26336, 257, 1398, 351, 2176, 10007]",1.0,218,ml_signal,86,Example of instantiating a class with specific parameters,203,"            fill_method,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 11]"
"ðŸ§  ML Signal: Printing the factor's dataframe, indicating usage pattern","[8582, 100, 254, 10373, 26484, 25, 44118, 262, 5766, 338, 1366, 14535, 11, 12739, 8748, 3912]",0.5,226,ml_signal,96,"Printing the factor's dataframe, indicating usage pattern",218,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
ðŸ§  ML Signal: Example of creating a DataReader with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 17934, 286, 4441, 257, 6060, 33634, 351, 2176, 10007]",1.0,226,ml_signal,97,Example of creating a DataReader with specific parameters,226,,[]
ðŸ§  ML Signal: Example of using a Drawer to visualize data,"[8582, 100, 254, 10373, 26484, 25, 17934, 286, 1262, 257, 15315, 263, 284, 38350, 1366]",0.5,226,ml_signal,97,Example of using a Drawer to visualize data,226,,[]
"ðŸ§  ML Signal: Drawing a kline chart, indicating visualization usage","[8582, 100, 254, 10373, 26484, 25, 40027, 257, 479, 1370, 8262, 11, 12739, 32704, 8748]",0.5,226,ml_signal,97,"Drawing a kline chart, indicating visualization usage",226,,[]
âœ… Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,226,best_practice,97,Use of __all__ to define public API of the module,226,,[]

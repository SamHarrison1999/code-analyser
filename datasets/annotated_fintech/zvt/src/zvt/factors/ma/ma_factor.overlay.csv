annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports into standard library, third-party, and local can improve readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 460, 2987, 1100, 1799, 13]",1.0,0,best_practice,3,"Grouping imports into standard library, third-party, and local can improve readability.",,0,,[]
‚úÖ Best Practice: Consider importing Union from typing for type hinting,"[26486, 227, 6705, 19939, 25, 12642, 33332, 4479, 422, 19720, 329, 2099, 9254, 278]",0.5,19,best_practice,11,Consider importing Union from typing for type hinting,,0,"from zvt.factors.algorithm import MaTransformer, MaAndVolumeTransformer","[6738, 1976, 36540, 13, 22584, 669, 13, 282, 42289, 1330, 6669, 8291, 16354, 11, 6669, 1870, 31715, 8291, 16354]"
‚úÖ Best Practice: Use isinstance() instead of type() for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 3419, 2427, 286, 2099, 3419, 329, 2099, 10627]",0.5,35,best_practice,13,Use isinstance() instead of type() for type checking,,19,from zvt.utils.time_utils import now_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 783, 62, 30094, 62, 16514, 27823]"
‚úÖ Best Practice: Consider handling exceptions when converting string to IntervalLevel,"[26486, 227, 6705, 19939, 25, 12642, 9041, 13269, 618, 23202, 4731, 284, 4225, 2100, 4971]",0.5,35,best_practice,15,Consider handling exceptions when converting string to IntervalLevel,,35,,[]
üß† ML Signal: Usage of string formatting to create schema names,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 33313, 284, 2251, 32815, 3891]",0.5,46,ml_signal,17,Usage of string formatting to create schema names,,35,    if type(level) == str:,"[220, 220, 220, 611, 2099, 7, 5715, 8, 6624, 965, 25]"
üß† ML Signal: Function call pattern to retrieve schema by name,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 284, 19818, 32815, 416, 1438]",0.5,57,ml_signal,17,Function call pattern to retrieve schema by name,,46,    if type(level) == str:,"[220, 220, 220, 611, 2099, 7, 5715, 8, 6624, 965, 25]"
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which is CamelCase.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 318, 43281, 20448, 13]",0.5,94,best_practice,16,"Class definition should follow PEP 8 naming conventions, which is CamelCase.",,57,"def get_ma_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):","[4299, 651, 62, 2611, 62, 31412, 62, 15952, 2611, 7, 26858, 62, 4906, 25, 965, 11, 1241, 25, 4479, 58, 9492, 2100, 4971, 11, 965, 60, 796, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `need_persist` is set to True without proper validation of `entity_schema`.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 31227, 62, 19276, 396, 63, 318, 900, 284, 6407, 1231, 1774, 21201, 286, 4600, 26858, 62, 15952, 2611, 44646]",0.5,109,sast_risk,46,Potential risk if `need_persist` is set to True without proper validation of `entity_schema`.,Low,94,"        effective_number: int = None,","[220, 220, 220, 220, 220, 220, 220, 4050, 62, 17618, 25, 493, 796, 6045, 11]"
üß† ML Signal: Usage of dynamic schema generation based on entity type and level.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 32815, 5270, 1912, 319, 9312, 2099, 290, 1241, 13]",0.5,127,ml_signal,48,Usage of dynamic schema generation based on entity type and level.,,109,"        only_compute_factor: bool = False,","[220, 220, 220, 220, 220, 220, 220, 691, 62, 5589, 1133, 62, 31412, 25, 20512, 796, 10352, 11]"
‚úÖ Best Practice: Defaulting `windows` to a list of integers if not provided.,"[26486, 227, 6705, 19939, 25, 15161, 278, 4600, 28457, 63, 284, 257, 1351, 286, 37014, 611, 407, 2810, 13]",1.0,142,best_practice,50,Defaulting `windows` to a list of integers if not provided.,,127,"        clear_state: bool = False,","[220, 220, 220, 220, 220, 220, 220, 1598, 62, 5219, 25, 20512, 796, 10352, 11]"
üß† ML Signal: Initialization of a transformer with specific window sizes.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 47385, 351, 2176, 4324, 10620, 13]",0.5,163,ml_signal,52,Initialization of a transformer with specific window sizes.,,142,"        adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Using `super()` to ensure proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 8554, 4600, 16668, 3419, 63, 284, 4155, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,184,best_practice,52,Using `super()` to ensure proper initialization of the base class.,,163,"        adjust_type: Union[AdjustType, str] = None,","[220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 25, 4479, 58, 39668, 6030, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Call to superclass method ensures base class functionality is executed,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 2779, 1398, 11244, 318, 10945]",0.5,197,best_practice,83,Call to superclass method ensures base class functionality is executed,,184,"            transformer,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47385, 11]"
üß† ML Signal: List comprehension used for dynamic column name generation,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 8925, 5721, 1438, 5270]",0.5,213,ml_signal,85,List comprehension used for dynamic column name generation,,197,"            need_persist,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 761, 62, 19276, 396, 11]"
üß† ML Signal: Boolean indexing pattern for DataFrame filtering,"[8582, 100, 254, 10373, 26484, 25, 41146, 6376, 278, 3912, 329, 6060, 19778, 25431]",0.5,228,ml_signal,87,Boolean indexing pattern for DataFrame filtering,,213,"            factor_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5766, 62, 3672, 11]"
üß† ML Signal: Iterative boolean condition refinement,"[8582, 100, 254, 10373, 26484, 25, 40806, 876, 25131, 4006, 47517]",1.0,236,ml_signal,91,Iterative boolean condition refinement,,228,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Use of print statement for debugging can expose data in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 2643, 329, 28769, 460, 15651, 1366, 287, 3227]",0.5,236,sast_risk,93,Use of print statement for debugging can expose data in production,Low,236,,[]
‚úÖ Best Practice: Converting boolean Series to DataFrame for consistent data handling,"[26486, 227, 6705, 19939, 25, 35602, 889, 25131, 7171, 284, 6060, 19778, 329, 6414, 1366, 9041]",0.5,236,best_practice,93,Converting boolean Series to DataFrame for consistent data handling,,236,,[]
‚úÖ Best Practice: Use of default mutable arguments (like lists) should be avoided to prevent shared state across instances.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4517, 540, 7159, 357, 2339, 8341, 8, 815, 307, 13941, 284, 2948, 4888, 1181, 1973, 10245, 13]",1.0,253,best_practice,128,Use of default mutable arguments (like lists) should be avoided to prevent shared state across instances.,,236,"        fill_method: str = ""ffill"",","[220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 25, 965, 796, 366, 487, 359, 1600]"
‚úÖ Best Practice: Use of default mutable arguments (like lists) should be avoided to prevent shared state across instances.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4517, 540, 7159, 357, 2339, 8341, 8, 815, 307, 13941, 284, 2948, 4888, 1181, 1973, 10245, 13]",1.0,269,best_practice,131,Use of default mutable arguments (like lists) should be avoided to prevent shared state across instances.,,253,"        need_persist: bool = False,","[220, 220, 220, 220, 220, 220, 220, 761, 62, 19276, 396, 25, 20512, 796, 10352, 11]"
üß† ML Signal: Use of a specific transformer class indicates a pattern for data transformation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 47385, 1398, 9217, 257, 3912, 329, 1366, 13389, 13]",0.5,284,ml_signal,139,Use of a specific transformer class indicates a pattern for data transformation.,,269,"        turnover_threshold=300000000,","[220, 220, 220, 220, 220, 220, 220, 25079, 62, 400, 10126, 28, 18, 8269, 11]"
üß† ML Signal: Use of a superclass constructor with many parameters suggests a pattern for object initialization.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2208, 4871, 23772, 351, 867, 10007, 5644, 257, 3912, 329, 2134, 37588, 13]",0.5,299,ml_signal,139,Use of a superclass constructor with many parameters suggests a pattern for object initialization.,,284,"        turnover_threshold=300000000,","[220, 220, 220, 220, 220, 220, 220, 25079, 62, 400, 10126, 28, 18, 8269, 11]"
‚úÖ Best Practice: Call to superclass method ensures base functionality is executed,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 2779, 11244, 318, 10945]",0.5,312,best_practice,169,Call to superclass method ensures base functionality is executed,,299,"            order,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 11]"
üß† ML Signal: Use of list comprehension to generate column names,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 284, 7716, 5721, 3891]",1.0,325,ml_signal,171,Use of list comprehension to generate column names,,312,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
üß† ML Signal: Use of boolean indexing for filtering data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 25131, 6376, 278, 329, 25431, 1366]",0.5,340,ml_signal,174,Use of boolean indexing for filtering data,,325,"            keep_window,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1394, 62, 17497, 11]"
üß† ML Signal: Conditional logic based on attribute value,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11688, 1988]",1.0,355,ml_signal,176,Conditional logic based on attribute value,,340,"            fill_method,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 11]"
üß† ML Signal: Conditional logic based on attribute presence,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11688, 4931]",1.0,369,ml_signal,189,Conditional logic based on attribute presence,,355,        super().compute_result(),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 5589, 1133, 62, 20274, 3419]"
üß† ML Signal: Use of list comprehension to generate column names,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 284, 7716, 5721, 3891]",1.0,369,ml_signal,190,Use of list comprehension to generate column names,,369,,[]
üß† ML Signal: Use of boolean indexing for filtering data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 25131, 6376, 278, 329, 25431, 1366]",0.5,385,ml_signal,196,Use of boolean indexing for filtering data,,369,        for col in cols[1:]:,"[220, 220, 220, 220, 220, 220, 220, 329, 951, 287, 951, 82, 58, 16, 25, 5974]"
üß† ML Signal: Combination of multiple filters using logical AND,"[8582, 100, 254, 10373, 26484, 25, 14336, 1883, 286, 3294, 16628, 1262, 12219, 5357]",0.5,427,ml_signal,200,Combination of multiple filters using logical AND,,385,"                    & (self.factor_df[""close""] < 1.1 * self.factor_df[col])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1222, 357, 944, 13, 31412, 62, 7568, 14692, 19836, 8973, 1279, 352, 13, 16, 1635, 2116, 13, 31412, 62, 7568, 58, 4033, 12962]"
"‚ö†Ô∏è SAST Risk (Low): Use of '==' to compare with False, consider using 'is False'","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 705, 855, 6, 284, 8996, 351, 10352, 11, 2074, 1262, 705, 271, 10352, 6]",0.5,469,sast_risk,200,"Use of '==' to compare with False, consider using 'is False'",Low,427,"                    & (self.factor_df[""close""] < 1.1 * self.factor_df[col])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1222, 357, 944, 13, 31412, 62, 7568, 14692, 19836, 8973, 1279, 352, 13, 16, 1635, 2116, 13, 31412, 62, 7568, 58, 4033, 12962]"
üß† ML Signal: Use of groupby and fillna for forward filling missing values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1448, 1525, 290, 6070, 2616, 329, 2651, 12591, 4814, 3815]",0.5,511,ml_signal,200,Use of groupby and fillna for forward filling missing values,,469,"                    & (self.factor_df[""close""] < 1.1 * self.factor_df[col])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1222, 357, 944, 13, 31412, 62, 7568, 14692, 19836, 8973, 1279, 352, 13, 16, 1635, 2116, 13, 31412, 62, 7568, 58, 4033, 12962]"
‚ö†Ô∏è SAST Risk (Low): Use of 'isna()' to check for NaN values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 705, 271, 2616, 3419, 6, 284, 2198, 329, 11013, 45, 3815]",0.5,553,sast_risk,200,Use of 'isna()' to check for NaN values,Low,511,"                    & (self.factor_df[""close""] < 1.1 * self.factor_df[col])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1222, 357, 944, 13, 31412, 62, 7568, 14692, 19836, 8973, 1279, 352, 13, 16, 1635, 2116, 13, 31412, 62, 7568, 58, 4033, 12962]"
üß† ML Signal: Combination of multiple filters using logical AND,"[8582, 100, 254, 10373, 26484, 25, 14336, 1883, 286, 3294, 16628, 1262, 12219, 5357]",0.5,595,ml_signal,200,Combination of multiple filters using logical AND,,553,"                    & (self.factor_df[""close""] < 1.1 * self.factor_df[col])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1222, 357, 944, 13, 31412, 62, 7568, 14692, 19836, 8973, 1279, 352, 13, 16, 1635, 2116, 13, 31412, 62, 7568, 58, 4033, 12962]"
‚úÖ Best Practice: Storing result in a DataFrame for further processing,"[26486, 227, 6705, 19939, 25, 520, 3255, 1255, 287, 257, 6060, 19778, 329, 2252, 7587]",0.5,637,best_practice,200,Storing result in a DataFrame for further processing,,595,"                    & (self.factor_df[""close""] < 1.1 * self.factor_df[col])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1222, 357, 944, 13, 31412, 62, 7568, 14692, 19836, 8973, 1279, 352, 13, 16, 1635, 2116, 13, 31412, 62, 7568, 58, 4033, 12962]"
‚úÖ Best Practice: Use of super() to call the parent class's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,645,best_practice,235,Use of super() to call the parent class's __init__ method ensures proper initialization.,,637,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
üß† ML Signal: Usage of dynamic column names based on a pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 5721, 3891, 1912, 319, 257, 3912]",1.0,658,ml_signal,270,Usage of dynamic column names based on a pattern,,645,        super().__init__(,"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7]"
üß† ML Signal: Filtering data based on a condition,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 257, 4006]",1.0,671,ml_signal,272,Filtering data based on a condition,,658,"            provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 11]"
üß† ML Signal: Iterative filtering with logical AND,"[8582, 100, 254, 10373, 26484, 25, 40806, 876, 25431, 351, 12219, 5357]",1.0,684,ml_signal,276,Iterative filtering with logical AND,,671,"            codes,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12416, 11]"
üß† ML Signal: Additional filtering based on a threshold,"[8582, 100, 254, 10373, 26484, 25, 15891, 25431, 1912, 319, 257, 11387]",1.0,697,ml_signal,279,Additional filtering based on a threshold,,684,"            columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 11]"
üß† ML Signal: Conversion of filter result to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 8106, 1255, 284, 6060, 19778]",0.5,710,ml_signal,279,Conversion of filter result to DataFrame,,697,"            columns,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `CrossMaVolumeFactor` is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 21544, 21467, 31715, 41384, 63, 318, 407, 6105, 31031]",1.0,728,sast_risk,287,Potential risk if `CrossMaVolumeFactor` is not properly validated,Low,710,"            keep_all_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1394, 62, 439, 62, 16514, 27823, 11]"
‚ö†Ô∏è SAST Risk (Low): Use of current timestamp can lead to non-deterministic behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1459, 41033, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069]",0.5,743,sast_risk,288,Use of current timestamp can lead to non-deterministic behavior,Low,728,"            fill_method,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 11]"
‚úÖ Best Practice: Explicitly setting persistence behavior,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 30802, 4069]",0.5,758,best_practice,288,Explicitly setting persistence behavior,,743,"            fill_method,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 11]"
üß† ML Signal: Visualization of results,"[8582, 100, 254, 10373, 26484, 25, 15612, 1634, 286, 2482]",1.0,773,ml_signal,288,Visualization of results,,758,"            fill_method,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 11]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,788,best_practice,288,Use of __all__ to define public API of the module,,773,"            fill_method,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 24396, 11]"

[
  {
    "line": 8,
    "text": "from zvt.domain import Stock",
    "annotation": "\u2705 Best Practice: Define a class to encapsulate related functionality and data.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      1398,
      284,
      32652,
      5039,
      3519,
      11244,
      290,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Define a class to encapsulate related functionality and data."
  },
  {
    "line": 8,
    "text": "from zvt.domain import Stock",
    "annotation": "\u2705 Best Practice: Use type hints for function parameters and return types for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500
    ],
    "start_token": 7,
    "end_token": 14,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      3858,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use type hints for function parameters and return types for better readability and maintainability."
  },
  {
    "line": 8,
    "text": "from zvt.domain import Stock",
    "annotation": "\u2705 Best Practice: Call the superclass constructor to ensure proper initialization.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500
    ],
    "start_token": 14,
    "end_token": 21,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      262,
      2208,
      4871,
      23772,
      284,
      4155,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Call the superclass constructor to ensure proper initialization."
  },
  {
    "line": 8,
    "text": "from zvt.domain import Stock",
    "annotation": "\ud83e\udde0 ML Signal: Tracking initialization parameters can help in understanding usage patterns.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500
    ],
    "start_token": 21,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      37588,
      10007,
      460,
      1037,
      287,
      4547,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Tracking initialization parameters can help in understanding usage patterns."
  },
  {
    "line": 29,
    "text": "        keep_window: int = None,",
    "annotation": "\u2705 Best Practice: Use type hints for function parameters and return types for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1394,
      62,
      17497,
      25,
      493,
      796,
      6045,
      11
    ],
    "start_token": 28,
    "end_token": 43,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      3858,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use type hints for function parameters and return types for better readability and maintainability."
  },
  {
    "line": 31,
    "text": "        fill_method: str = \"ffill\",",
    "annotation": "\ud83e\udde0 ML Signal: The use of a method named 'compute' suggests a pattern of data processing or transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6070,
      62,
      24396,
      25,
      965,
      796,
      366,
      487,
      359,
      1600
    ],
    "start_token": 43,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      2446,
      3706,
      705,
      5589,
      1133,
      6,
      5644,
      257,
      3912,
      286,
      1366,
      7587,
      393,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a method named 'compute' suggests a pattern of data processing or transformation."
  },
  {
    "line": 32,
    "text": "        effective_number: int = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that data processing does not lead to data leakage or unintended data exposure.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4050,
      62,
      17618,
      25,
      493,
      796,
      6045,
      11
    ],
    "start_token": 60,
    "end_token": 75,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      1366,
      7587,
      857,
      407,
      1085,
      284,
      1366,
      47988,
      393,
      30261,
      1366,
      7111,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that data processing does not lead to data leakage or unintended data exposure."
  },
  {
    "line": 33,
    "text": "        transformer: Transformer = None,",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47385,
      25,
      3602,
      16354,
      796,
      6045,
      11
    ],
    "start_token": 75,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better code readability."
  },
  {
    "line": 35,
    "text": "        need_persist: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: The pattern of transforming data can be useful for understanding data processing workflows.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      761,
      62,
      19276,
      396,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 89,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      3912,
      286,
      25449,
      1366,
      460,
      307,
      4465,
      329,
      4547,
      1366,
      7587,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "The pattern of transforming data can be useful for understanding data processing workflows."
  },
  {
    "line": 38,
    "text": "        clear_state: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulation of data over time can indicate a pattern of historical data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1598,
      62,
      5219,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 105,
    "end_token": 120,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      1741,
      286,
      1366,
      625,
      640,
      460,
      7603,
      257,
      3912,
      286,
      6754,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulation of data over time can indicate a pattern of historical data analysis."
  },
  {
    "line": 39,
    "text": "        only_load_factor: bool = False,",
    "annotation": "\u2705 Best Practice: Use type hints for function parameters and return types for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      691,
      62,
      2220,
      62,
      31412,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 120,
    "end_token": 137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      3858,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use type hints for function parameters and return types for better readability and maintainability."
  },
  {
    "line": 39,
    "text": "        only_load_factor: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: Fetching data based on schema and provider can indicate data source preferences.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      691,
      62,
      2220,
      62,
      31412,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 137,
    "end_token": 154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1366,
      1912,
      319,
      32815,
      290,
      10131,
      460,
      7603,
      1366,
      2723,
      15387,
      13
    ],
    "label": "ml_signal",
    "reason": "Fetching data based on schema and provider can indicate data source preferences."
  },
  {
    "line": 52,
    "text": "                \"volume\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that data fetching is secure and does not expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      29048,
      1600
    ],
    "start_token": 154,
    "end_token": 172,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      1366,
      21207,
      278,
      318,
      5713,
      290,
      857,
      407,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that data fetching is secure and does not expose sensitive information."
  },
  {
    "line": 52,
    "text": "                \"volume\",",
    "annotation": "\ud83e\udde0 ML Signal: The use of a default adjust type can indicate a preference for data normalization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      29048,
      1600
    ],
    "start_token": 172,
    "end_token": 190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      4277,
      4532,
      2099,
      460,
      7603,
      257,
      12741,
      329,
      1366,
      3487,
      1634,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a default adjust type can indicate a preference for data normalization."
  },
  {
    "line": 8,
    "text": "from zvt.domain import Stock",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions, using CamelCase.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500
    ],
    "start_token": 190,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      11,
      1262,
      43281,
      20448,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions, using CamelCase."
  },
  {
    "line": 38,
    "text": "        clear_state: bool = False,",
    "annotation": "\u2705 Best Practice: Initialize mutable default arguments like lists to avoid shared state across instances.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1598,
      62,
      5219,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 197,
    "end_token": 212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4517,
      540,
      4277,
      7159,
      588,
      8341,
      284,
      3368,
      4888,
      1181,
      1973,
      10245,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize mutable default arguments like lists to avoid shared state across instances."
  },
  {
    "line": 53,
    "text": "                \"turnover\",",
    "annotation": "\u2705 Best Practice: Use default values for optional parameters to ensure consistent behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      15344,
      2502,
      1600
    ],
    "start_token": 212,
    "end_token": 231,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4277,
      3815,
      329,
      11902,
      10007,
      284,
      4155,
      6414,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Use default values for optional parameters to ensure consistent behavior."
  },
  {
    "line": 57,
    "text": "        # \u80a1\u7968\u9ed8\u8ba4\u4f7f\u7528\u540e\u590d\u6743",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic schema generation based on input parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      224,
      94,
      163,
      98,
      101,
      165,
      119,
      246,
      164,
      106,
      97,
      45635,
      18796,
      101,
      28938,
      236,
      13783,
      235,
      30266,
      225
    ],
    "start_token": 231,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      32815,
      5270,
      1912,
      319,
      5128,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic schema generation based on input parameters."
  },
  {
    "line": 58,
    "text": "        if not adjust_type:",
    "annotation": "\u2705 Best Practice: Use default values for optional parameters to ensure consistent behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      4532,
      62,
      4906,
      25
    ],
    "start_token": 260,
    "end_token": 273,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4277,
      3815,
      329,
      11902,
      10007,
      284,
      4155,
      6414,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Use default values for optional parameters to ensure consistent behavior."
  },
  {
    "line": 61,
    "text": "        self.adjust_type = adjust_type",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic naming pattern based on class type and level.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23032,
      62,
      4906,
      796,
      4532,
      62,
      4906
    ],
    "start_token": 273,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      19264,
      3912,
      1912,
      319,
      1398,
      2099,
      290,
      1241,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic naming pattern based on class type and level."
  },
  {
    "line": 61,
    "text": "        self.adjust_type = adjust_type",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance and method overriding patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23032,
      62,
      4906,
      796,
      4532,
      62,
      4906
    ],
    "start_token": 289,
    "end_token": 305,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      290,
      2446,
      44987,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Inheritance and method overriding patterns."
  },
  {
    "line": 90,
    "text": "            effective_number,",
    "annotation": "\u2705 Best Practice: Specify return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4050,
      62,
      17618,
      11
    ],
    "start_token": 305,
    "end_token": 320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Specify return type for better readability and maintainability"
  },
  {
    "line": 92,
    "text": "            accumulator,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific column from a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10507,
      8927,
      11
    ],
    "start_token": 320,
    "end_token": 334,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      5721,
      422,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific column from a DataFrame"
  },
  {
    "line": 92,
    "text": "            accumulator,",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10507,
      8927,
      11
    ],
    "start_token": 334,
    "end_token": 348,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
[
  {
    "line": 7,
    "text": "from pandas import DataFrame",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      19798,
      292,
      1330,
      6060,
      19778
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 12,
    "text": "from zvt.utils.pd_utils import index_df, pd_is_not_null, is_filter_result_df, is_score_result_df",
    "annotation": "\u2705 Best Practice: Use of Enum for TradeType ensures type safety and readability",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      6376,
      62,
      7568,
      11,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      11,
      318,
      62,
      24455,
      62,
      20274,
      62,
      7568,
      11,
      318,
      62,
      26675,
      62,
      20274,
      62,
      7568
    ],
    "start_token": 6,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      9601,
      6030,
      19047,
      2099,
      3747,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of Enum for TradeType ensures type safety and readability"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Enum members are defined with clear and descriptive names",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 44,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      389,
      5447,
      351,
      1598,
      290,
      35644,
      3891
    ],
    "label": "best_practice",
    "reason": "Enum members are defined with clear and descriptive names"
  },
  {
    "line": 16,
    "text": "class TradeType(Enum):",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of related constants",
    "confidence": 1.0,
    "tokens": [
      4871,
      9601,
      6030,
      7,
      4834,
      388,
      2599
    ],
    "start_token": 44,
    "end_token": 51,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3519,
      38491
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of related constants"
  },
  {
    "line": 18,
    "text": "    open_long = \"open_long\"",
    "annotation": "\u2705 Best Practice: Clear and descriptive naming for enum members",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1280,
      62,
      6511,
      796,
      366,
      9654,
      62,
      6511,
      1
    ],
    "start_token": 51,
    "end_token": 63,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      290,
      35644,
      19264,
      329,
      33829,
      1866
    ],
    "label": "best_practice",
    "reason": "Clear and descriptive naming for enum members"
  },
  {
    "line": 20,
    "text": "    open_short = \"open_short\"",
    "annotation": "\u2705 Best Practice: Clear and descriptive naming for enum members",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1280,
      62,
      19509,
      796,
      366,
      9654,
      62,
      19509,
      1
    ],
    "start_token": 63,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      290,
      35644,
      19264,
      329,
      33829,
      1866
    ],
    "label": "best_practice",
    "reason": "Clear and descriptive naming for enum members"
  },
  {
    "line": 20,
    "text": "    open_short = \"open_short\"",
    "annotation": "\u2705 Best Practice: Inheriting from 'object' is redundant in Python 3, as it is the default.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1280,
      62,
      19509,
      796,
      366,
      9654,
      62,
      19509,
      1
    ],
    "start_token": 75,
    "end_token": 87,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      705,
      15252,
      6,
      318,
      30806,
      287,
      11361,
      513,
      11,
      355,
      340,
      318,
      262,
      4277,
      13
    ],
    "label": "best_practice",
    "reason": "Inheriting from 'object' is redundant in Python 3, as it is the default."
  },
  {
    "line": 34,
    "text": "        entity_schema=Stock,",
    "annotation": "\u2705 Best Practice: Initialize instance variables in the constructor for clarity and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      28,
      26207,
      11
    ],
    "start_token": 87,
    "end_token": 101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in the constructor for clarity and maintainability"
  },
  {
    "line": 42,
    "text": "        provider=None,",
    "annotation": "\u2705 Best Practice: Convert timestamps to a standard format for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      14202,
      11
    ],
    "start_token": 101,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4628,
      395,
      9430,
      284,
      257,
      3210,
      5794,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert timestamps to a standard format for consistency"
  },
  {
    "line": 45,
    "text": "        self.entity_ids = entity_ids",
    "annotation": "\u2705 Best Practice: Convert timestamps to a standard format for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26858,
      62,
      2340,
      796,
      9312,
      62,
      2340
    ],
    "start_token": 112,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4628,
      395,
      9430,
      284,
      257,
      3210,
      5794,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert timestamps to a standard format for consistency"
  },
  {
    "line": 48,
    "text": "        self.codes = codes",
    "annotation": "\u2705 Best Practice: Use current timestamp as default for end_timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      40148,
      796,
      12416
    ],
    "start_token": 128,
    "end_token": 140,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1459,
      41033,
      355,
      4277,
      329,
      886,
      62,
      16514,
      27823
    ],
    "label": "best_practice",
    "reason": "Use current timestamp as default for end_timestamp"
  },
  {
    "line": 53,
    "text": "            self.start_timestamp = to_pd_timestamp(start_timestamp)",
    "annotation": "\u2705 Best Practice: Use type annotations for lists to improve code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      9688,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 140,
    "end_token": 170,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      37647,
      329,
      8341,
      284,
      2987,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use type annotations for lists to improve code readability"
  },
  {
    "line": 55,
    "text": "            self.end_timestamp = to_pd_timestamp(end_timestamp)",
    "annotation": "\u2705 Best Practice: Use Optional type annotations for variables that can be None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 170,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      32233,
      2099,
      37647,
      329,
      9633,
      326,
      460,
      307,
      6045
    ],
    "label": "best_practice",
    "reason": "Use Optional type annotations for variables that can be None"
  },
  {
    "line": 64,
    "text": "        self.filter_result = None",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of factors with various parameters could indicate a setup for a model or algorithm",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24455,
      62,
      20274,
      796,
      6045
    ],
    "start_token": 200,
    "end_token": 214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      5087,
      351,
      2972,
      10007,
      714,
      7603,
      257,
      9058,
      329,
      257,
      2746,
      393,
      11862
    ],
    "label": "ml_signal",
    "reason": "Initialization of factors with various parameters could indicate a setup for a model or algorithm"
  },
  {
    "line": 64,
    "text": "        self.filter_result = None",
    "annotation": "\u2705 Best Practice: Method signature is clear and self-explanatory, which aids in readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24455,
      62,
      20274,
      796,
      6045
    ],
    "start_token": 214,
    "end_token": 228,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      9877,
      318,
      1598,
      290,
      2116,
      12,
      1069,
      11578,
      2870,
      11,
      543,
      31378,
      287,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Method signature is clear and self-explanatory, which aids in readability and maintainability."
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\u2705 Best Practice: Using 'pass' in a method indicates that it's intentionally left unimplemented, which is useful for future development.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 228,
    "end_token": 228,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      6603,
      6,
      287,
      257,
      2446,
      9217,
      326,
      340,
      338,
      16464,
      1364,
      28418,
      1154,
      12061,
      11,
      543,
      318,
      4465,
      329,
      2003,
      2478,
      13
    ],
    "label": "best_practice",
    "reason": "Using 'pass' in a method indicates that it's intentionally left unimplemented, which is useful for future development."
  },
  {
    "line": 67,
    "text": "        self.open_long_df: Optional[DataFrame] = None",
    "annotation": "\ud83e\udde0 ML Signal: Method for adding elements to a list, common pattern in data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9654,
      62,
      6511,
      62,
      7568,
      25,
      32233,
      58,
      6601,
      19778,
      60,
      796,
      6045
    ],
    "start_token": 228,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      4375,
      4847,
      284,
      257,
      1351,
      11,
      2219,
      3912,
      287,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Method for adding elements to a list, common pattern in data manipulation"
  },
  {
    "line": 68,
    "text": "        self.open_short_df: Optional[DataFrame] = None",
    "annotation": "\u2705 Best Practice: Type hinting for 'factor' improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9654,
      62,
      19509,
      62,
      7568,
      25,
      32233,
      58,
      6601,
      19778,
      60,
      796,
      6045
    ],
    "start_token": 250,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      31412,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'factor' improves code readability and maintainability"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a method to validate 'factor' before appending ensures data integrity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      2446,
      284,
      26571,
      705,
      31412,
      6,
      878,
      598,
      1571,
      19047,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Using a method to validate 'factor' before appending ensures data integrity"
  },
  {
    "line": 72,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list, common operation in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 272,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      11,
      2219,
      4905,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Appending to a list, common operation in data processing"
  },
  {
    "line": 74,
    "text": "            exchanges=exchanges,",
    "annotation": "\ud83e\udde0 ML Signal: Returning 'self' allows for method chaining, a common design pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      1069,
      36653,
      11
    ],
    "start_token": 291,
    "end_token": 307,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      705,
      944,
      6,
      3578,
      329,
      2446,
      442,
      1397,
      11,
      257,
      2219,
      1486,
      3912
    ],
    "label": "ml_signal",
    "reason": "Returning 'self' allows for method chaining, a common design pattern"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose and parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 307,
    "end_token": 307,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 72,
    "text": "            entity_ids=entity_ids,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled in optimized mode",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 307,
    "end_token": 326,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      287,
      23392,
      4235
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled in optimized mode"
  },
  {
    "line": 73,
    "text": "            entity_schema=entity_schema,",
    "annotation": "\u2705 Best Practice: Consider using a more informative exception for better error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      28,
      26858,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 326,
    "end_token": 347,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      30304,
      6631,
      329,
      1365,
      4049,
      9041
    ],
    "label": "best_practice",
    "reason": "Consider using a more informative exception for better error handling"
  },
  {
    "line": 73,
    "text": "            entity_schema=entity_schema,",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values can indicate common usage patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      28,
      26858,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 347,
    "end_token": 368,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values can indicate common usage patterns."
  },
  {
    "line": 74,
    "text": "            exchanges=exchanges,",
    "annotation": "\u2705 Best Practice: Consider documenting the purpose and expected values of parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      1069,
      36653,
      11
    ],
    "start_token": 368,
    "end_token": 384,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33045,
      262,
      4007,
      290,
      2938,
      3815,
      286,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider documenting the purpose and expected values of parameters."
  },
  {
    "line": 76,
    "text": "            start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of objects and calling a method on each can indicate a common design pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 384,
    "end_token": 405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      5563,
      290,
      4585,
      257,
      2446,
      319,
      1123,
      460,
      7603,
      257,
      2219,
      1486,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of objects and calling a method on each can indicate a common design pattern."
  },
  {
    "line": 78,
    "text": "            level=self.level,",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining or delegation pattern, calling a method on each object in a collection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      944,
      13,
      5715,
      11
    ],
    "start_token": 405,
    "end_token": 422,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      393,
      22635,
      3912,
      11,
      4585,
      257,
      2446,
      319,
      1123,
      2134,
      287,
      257,
      4947,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining or delegation pattern, calling a method on each object in a collection."
  },
  {
    "line": 80,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method after processing a collection can indicate a common workflow pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 422,
    "end_token": 422,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      706,
      7587,
      257,
      4947,
      460,
      7603,
      257,
      2219,
      30798,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling a method after processing a collection can indicate a common workflow pattern."
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of factors to process data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 422,
    "end_token": 422,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      5087,
      284,
      1429,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of factors to process data"
  },
  {
    "line": 86,
    "text": "        self.factors.append(factor)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"filter_result\" is not in columns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      22584,
      669,
      13,
      33295,
      7,
      31412,
      8
    ],
    "start_token": 422,
    "end_token": 438,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      24455,
      62,
      20274,
      1,
      318,
      407,
      287,
      15180
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"filter_result\" is not in columns"
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic Exception, which can be improved for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 438,
    "end_token": 438,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      35528,
      11,
      543,
      460,
      307,
      6596,
      329,
      16287
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic Exception, which can be improved for clarity"
  },
  {
    "line": 94,
    "text": "            for factor in self.factors:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"score_result\" is not in columns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5766,
      287,
      2116,
      13,
      22584,
      669,
      25
    ],
    "start_token": 438,
    "end_token": 457,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      26675,
      62,
      20274,
      1,
      318,
      407,
      287,
      15180
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"score_result\" is not in columns"
  },
  {
    "line": 99,
    "text": "    def run(self):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic Exception, which can be improved for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 457,
    "end_token": 465,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      35528,
      11,
      543,
      460,
      307,
      6596,
      329,
      16287
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic Exception, which can be improved for clarity"
  },
  {
    "line": 104,
    "text": "            for factor in self.factors:",
    "annotation": "\u2705 Best Practice: Using list and accumulate for clarity and readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5766,
      287,
      2116,
      13,
      22584,
      669,
      25
    ],
    "start_token": 465,
    "end_token": 484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      290,
      29915,
      329,
      16287,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using list and accumulate for clarity and readability"
  },
  {
    "line": 107,
    "text": "                    if pd_is_not_null(df):",
    "annotation": "\u2705 Best Practice: Using list and accumulate for clarity and readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 484,
    "end_token": 515,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      290,
      29915,
      329,
      16287,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using list and accumulate for clarity and readability"
  },
  {
    "line": 110,
    "text": "                    else:",
    "annotation": "\u2705 Best Practice: Using list and accumulate for clarity and readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 515,
    "end_token": 536,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      290,
      29915,
      329,
      16287,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using list and accumulate for clarity and readability"
  },
  {
    "line": 111,
    "text": "                        raise Exception(\"no data for factor:{},{}\".format(factor.name, factor))",
    "annotation": "\ud83e\udde0 ML Signal: Method call to generate targets after processing factors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      35528,
      7203,
      3919,
      1366,
      329,
      5766,
      29164,
      5512,
      90,
      92,
      1911,
      18982,
      7,
      31412,
      13,
      3672,
      11,
      5766,
      4008
    ],
    "start_token": 536,
    "end_token": 579,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      7716,
      6670,
      706,
      7587,
      5087
    ],
    "label": "ml_signal",
    "reason": "Method call to generate targets after processing factors"
  },
  {
    "line": 105,
    "text": "                if is_filter_result_df(factor.result_df):",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the return type of the function for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      62,
      24455,
      62,
      20274,
      62,
      7568,
      7,
      31412,
      13,
      20274,
      62,
      7568,
      2599
    ],
    "start_token": 579,
    "end_token": 609,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      286,
      262,
      2163,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the return type of the function for better readability and maintainability."
  },
  {
    "line": 107,
    "text": "                    if pd_is_not_null(df):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of conditional logic to select data based on trade type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 609,
    "end_token": 640,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      26340,
      9156,
      284,
      2922,
      1366,
      1912,
      319,
      3292,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of conditional logic to select data based on trade type."
  },
  {
    "line": 115,
    "text": "                        df.columns = [\"score\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be risky in production code as it can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      14631,
      26675,
      8973
    ],
    "start_token": 640,
    "end_token": 671,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17564,
      287,
      3227,
      2438,
      355,
      340,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be risky in production code as it can be disabled with optimization flags."
  },
  {
    "line": 117,
    "text": "                    else:",
    "annotation": "\ud83e\udde0 ML Signal: Checking for non-null data frame before processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 671,
    "end_token": 692,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      1729,
      12,
      8423,
      1366,
      5739,
      878,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for non-null data frame before processing."
  },
  {
    "line": 119,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking for the presence of a timestamp in the data frame index.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 692,
    "end_token": 692,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      262,
      4931,
      286,
      257,
      41033,
      287,
      262,
      1366,
      5739,
      6376,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for the presence of a timestamp in the data frame index."
  },
  {
    "line": 122,
    "text": "                    self.filter_result = list(accumulate(filters, func=operator.__and__))[-1]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas to filter data based on timestamp.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24455,
      62,
      20274,
      796,
      1351,
      7,
      4134,
      388,
      5039,
      7,
      10379,
      1010,
      11,
      25439,
      28,
      46616,
      13,
      834,
      392,
      834,
      4008,
      58,
      12,
      16,
      60
    ],
    "start_token": 692,
    "end_token": 738,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      284,
      8106,
      1366,
      1912,
      319,
      41033,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas to filter data based on timestamp."
  },
  {
    "line": 123,
    "text": "                else:",
    "annotation": "\ud83e\udde0 ML Signal: Extracting a list of entity IDs from the data frame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 738,
    "end_token": 755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      257,
      1351,
      286,
      9312,
      32373,
      422,
      262,
      1366,
      5739,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracting a list of entity IDs from the data frame."
  },
  {
    "line": 125,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning an empty list as a default case for better function reliability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 755,
    "end_token": 755,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      281,
      6565,
      1351,
      355,
      257,
      4277,
      1339,
      329,
      1365,
      2163,
      17843,
      13
    ],
    "label": "best_practice",
    "reason": "Returning an empty list as a default case for better function reliability."
  },
  {
    "line": 122,
    "text": "                    self.filter_result = list(accumulate(filters, func=operator.__and__))[-1]",
    "annotation": "\u2705 Best Practice: Use of default parameter value for trade_type improves function usability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24455,
      62,
      20274,
      796,
      1351,
      7,
      4134,
      388,
      5039,
      7,
      10379,
      1010,
      11,
      25439,
      28,
      46616,
      13,
      834,
      392,
      834,
      4008,
      58,
      12,
      16,
      60
    ],
    "start_token": 755,
    "end_token": 801,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      329,
      3292,
      62,
      4906,
      19575,
      2163,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value for trade_type improves function usability."
  },
  {
    "line": 131,
    "text": "    def get_targets(self, timestamp, trade_type: TradeType = TradeType.open_long) -> List[str]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      83,
      853,
      1039,
      7,
      944,
      11,
      41033,
      11,
      3292,
      62,
      4906,
      25,
      9601,
      6030,
      796,
      9601,
      6030,
      13,
      9654,
      62,
      6511,
      8,
      4613,
      7343,
      58,
      2536,
      5974
    ],
    "start_token": 801,
    "end_token": 834,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be bypassed if Python is run with optimizations."
  },
  {
    "line": 133,
    "text": "            df = self.open_long_df",
    "annotation": "\ud83e\udde0 ML Signal: Use of date range filtering indicates time-series data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      9654,
      62,
      6511,
      62,
      7568
    ],
    "start_token": 834,
    "end_token": 854,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3128,
      2837,
      25431,
      9217,
      640,
      12,
      25076,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of date range filtering indicates time-series data processing."
  },
  {
    "line": 135,
    "text": "            df = self.open_short_df",
    "annotation": "\ud83e\udde0 ML Signal: Use of set to remove duplicates from a list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      9654,
      62,
      19509,
      62,
      7568
    ],
    "start_token": 854,
    "end_token": 874,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      284,
      4781,
      14184,
      16856,
      422,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of set to remove duplicates from a list."
  },
  {
    "line": 134,
    "text": "        elif trade_type == TradeType.open_short:",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests a pattern of retrieving specific trade targets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      3292,
      62,
      4906,
      6624,
      9601,
      6030,
      13,
      9654,
      62,
      19509,
      25
    ],
    "start_token": 874,
    "end_token": 894,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      257,
      3912,
      286,
      50122,
      2176,
      3292,
      6670
    ],
    "label": "ml_signal",
    "reason": "Method name suggests a pattern of retrieving specific trade targets"
  },
  {
    "line": 136,
    "text": "        elif trade_type == TradeType.keep:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self indicates this is a method of a class, which is useful for class behavior analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      3292,
      62,
      4906,
      6624,
      9601,
      6030,
      13,
      14894,
      25
    ],
    "start_token": 894,
    "end_token": 912,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      9217,
      428,
      318,
      257,
      2446,
      286,
      257,
      1398,
      11,
      543,
      318,
      4465,
      329,
      1398,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of self indicates this is a method of a class, which is useful for class behavior analysis"
  },
  {
    "line": 137,
    "text": "            df = self.keep_df",
    "annotation": "\ud83e\udde0 ML Signal: Method call with specific parameters can indicate a pattern of usage for retrieving data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      14894,
      62,
      7568
    ],
    "start_token": 912,
    "end_token": 930,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      2176,
      10007,
      460,
      7603,
      257,
      3912,
      286,
      8748,
      329,
      50122,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method call with specific parameters can indicate a pattern of usage for retrieving data"
  },
  {
    "line": 136,
    "text": "        elif trade_type == TradeType.keep:",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and parameter usage can indicate function behavior and purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      3292,
      62,
      4906,
      6624,
      9601,
      6030,
      13,
      14894,
      25
    ],
    "start_token": 930,
    "end_token": 948,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      11507,
      8748,
      460,
      7603,
      2163,
      4069,
      290,
      4007
    ],
    "label": "ml_signal",
    "reason": "Method signature and parameter usage can indicate function behavior and purpose"
  },
  {
    "line": 138,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern can indicate relationships between methods and data flow",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 948,
    "end_token": 957,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      460,
      7603,
      6958,
      1022,
      5050,
      290,
      1366,
      5202
    ],
    "label": "ml_signal",
    "reason": "Method call pattern can indicate relationships between methods and data flow"
  },
  {
    "line": 167,
    "text": "    def get_open_short_targets(self, timestamp):",
    "annotation": "\u2705 Best Practice: Method should have a docstring to describe its purpose and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      9654,
      62,
      19509,
      62,
      83,
      853,
      1039,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 957,
    "end_token": 975,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring to describe its purpose and return value"
  },
  {
    "line": 169,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning an attribute, indicating a possible getter pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 975,
    "end_token": 975,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      281,
      11688,
      11,
      12739,
      257,
      1744,
      651,
      353,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning an attribute, indicating a possible getter pattern"
  },
  {
    "line": 170,
    "text": "    # overwrite it to generate targets",
    "annotation": "\ud83e\udde0 ML Signal: Checks for null values in DataFrame, indicating data validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      49312,
      340,
      284,
      7716,
      6670
    ],
    "start_token": 975,
    "end_token": 984,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      9242,
      3815,
      287,
      6060,
      19778,
      11,
      12739,
      1366,
      21201
    ],
    "label": "ml_signal",
    "reason": "Checks for null values in DataFrame, indicating data validation"
  },
  {
    "line": 172,
    "text": "        keep_result = pd.DataFrame()",
    "annotation": "\u2705 Best Practice: Resetting index for DataFrame to ensure clean data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1394,
      62,
      20274,
      796,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 984,
    "end_token": 1001,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      329,
      6060,
      19778,
      284,
      4155,
      3424,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Resetting index for DataFrame to ensure clean data manipulation"
  },
  {
    "line": 174,
    "text": "        short_result = pd.DataFrame()",
    "annotation": "\ud83e\udde0 ML Signal: Custom indexing function applied, indicating data transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1790,
      62,
      20274,
      796,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 1001,
    "end_token": 1018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      6376,
      278,
      2163,
      5625,
      11,
      12739,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Custom indexing function applied, indicating data transformation"
  },
  {
    "line": 175,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Sorting DataFrame by specific columns, indicating feature importance",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1018,
    "end_token": 1018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      6060,
      19778,
      416,
      2176,
      15180,
      11,
      12739,
      3895,
      6817
    ],
    "label": "ml_signal",
    "reason": "Sorting DataFrame by specific columns, indicating feature importance"
  },
  {
    "line": 175,
    "text": "",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1018,
    "end_token": 1018,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module"
  }
]
[
  {
    "line": 5,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules without validation can introduce security risks if the modules are compromised.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      1231,
      21201,
      460,
      10400,
      2324,
      7476,
      611,
      262,
      13103,
      389,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules without validation can introduce security risks if the modules are compromised."
  },
  {
    "line": 39,
    "text": "        only_compute_factor: bool = False,",
    "annotation": "\u2705 Best Practice: Check if 'columns' is None before assigning a default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      691,
      62,
      5589,
      1133,
      62,
      31412,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 0,
    "end_token": 18,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      28665,
      82,
      6,
      318,
      6045,
      878,
      38875,
      257,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Check if 'columns' is None before assigning a default value"
  },
  {
    "line": 41,
    "text": "        clear_state: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to get important columns from a schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1598,
      62,
      5219,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 18,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      651,
      1593,
      15180,
      422,
      257,
      32815
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to get important columns from a schema"
  },
  {
    "line": 41,
    "text": "        clear_state: bool = False,",
    "annotation": "\u2705 Best Practice: Use of super() to initialize the parent class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1598,
      62,
      5219,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 33,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of super() to initialize the parent class"
  },
  {
    "line": 71,
    "text": "            factor_name,",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating use of object-oriented design patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      62,
      3672,
      11
    ],
    "start_token": 48,
    "end_token": 63,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      779,
      286,
      2134,
      12,
      17107,
      1486,
      7572
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating use of object-oriented design patterns"
  },
  {
    "line": 121,
    "text": "        factor_name: str = None,",
    "annotation": "\u2705 Best Practice: Initialize instance variables in the constructor for clarity and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      62,
      3672,
      25,
      965,
      796,
      6045,
      11
    ],
    "start_token": 63,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in the constructor for clarity and maintainability."
  },
  {
    "line": 126,
    "text": "        col_period_threshold={\"roe\": 0.02},",
    "annotation": "\u2705 Best Practice: Check for conditions before modifying lists to avoid unintended side effects.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      951,
      62,
      41007,
      62,
      400,
      10126,
      28,
      4895,
      20646,
      1298,
      657,
      13,
      2999,
      5512
    ],
    "start_token": 78,
    "end_token": 99,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      3403,
      878,
      30620,
      8341,
      284,
      3368,
      30261,
      1735,
      3048,
      13
    ],
    "label": "best_practice",
    "reason": "Check for conditions before modifying lists to avoid unintended side effects."
  },
  {
    "line": 128,
    "text": "        self.window = window",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Modifying a default mutable argument (columns) can lead to unexpected behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17497,
      796,
      4324
    ],
    "start_token": 99,
    "end_token": 111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3401,
      4035,
      257,
      4277,
      4517,
      540,
      4578,
      357,
      28665,
      82,
      8,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Modifying a default mutable argument (columns) can lead to unexpected behavior."
  },
  {
    "line": 128,
    "text": "        self.window = window",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage patterns can be used to train models for log analysis or anomaly detection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17497,
      796,
      4324
    ],
    "start_token": 111,
    "end_token": 123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      7572,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      2604,
      3781,
      393,
      32172,
      13326,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage patterns can be used to train models for log analysis or anomaly detection."
  },
  {
    "line": 128,
    "text": "        self.window = window",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's __init__ method ensures proper initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17497,
      796,
      4324
    ],
    "start_token": 123,
    "end_token": 135,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's __init__ method ensures proper initialization."
  },
  {
    "line": 159,
    "text": "            effective_number,",
    "annotation": "\u2705 Best Practice: Initialize Series with a specific dtype to avoid deprecation warnings",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4050,
      62,
      17618,
      11
    ],
    "start_token": 135,
    "end_token": 150,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      7171,
      351,
      257,
      2176,
      288,
      4906,
      284,
      3368,
      1207,
      8344,
      341,
      14601
    ],
    "label": "best_practice",
    "reason": "Initialize Series with a specific dtype to avoid deprecation warnings"
  },
  {
    "line": 172,
    "text": "            for index, row in df.iterrows():",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of eval() can lead to code injection vulnerabilities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      47764,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 150,
    "end_token": 171,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      5418,
      3419,
      460,
      1085,
      284,
      2438,
      16954,
      23805
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of eval() can lead to code injection vulnerabilities"
  },
  {
    "line": 178,
    "text": "                elif row.report_period == \"half_year\":",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on attribute presence",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      5752,
      13,
      13116,
      62,
      41007,
      6624,
      366,
      13959,
      62,
      1941,
      1298
    ],
    "start_token": 171,
    "end_token": 199,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11688,
      4931
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on attribute presence"
  },
  {
    "line": 181,
    "text": "                    mul = 1",
    "annotation": "\u2705 Best Practice: Consider using meaningful variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35971,
      796,
      352
    ],
    "start_token": 199,
    "end_token": 221,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      11570,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider using meaningful variable names for readability"
  },
  {
    "line": 187,
    "text": "                se[index] = list(accumulate(filters, func=operator.__and__))[-1]",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      384,
      58,
      9630,
      60,
      796,
      1351,
      7,
      4134,
      388,
      5039,
      7,
      10379,
      1010,
      11,
      25439,
      28,
      46616,
      13,
      834,
      392,
      834,
      4008,
      58,
      12,
      16,
      60
    ],
    "start_token": 221,
    "end_token": 262,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Logging information about data processing"
  },
  {
    "line": 185,
    "text": "                    col_se = eval(f\"row.{col}\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame apply method with lambda function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      951,
      62,
      325,
      796,
      5418,
      7,
      69,
      1,
      808,
      13,
      90,
      4033,
      92,
      4943
    ],
    "start_token": 262,
    "end_token": 295,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4174,
      2446,
      351,
      37456,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame apply method with lambda function"
  },
  {
    "line": 187,
    "text": "                se[index] = list(accumulate(filters, func=operator.__and__))[-1]",
    "annotation": "\u2705 Best Practice: Explicitly setting column names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      384,
      58,
      9630,
      60,
      796,
      1351,
      7,
      4134,
      388,
      5039,
      7,
      10379,
      1010,
      11,
      25439,
      28,
      46616,
      13,
      834,
      392,
      834,
      4008,
      58,
      12,
      16,
      60
    ],
    "start_token": 295,
    "end_token": 336,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      5721,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly setting column names for clarity"
  },
  {
    "line": 189,
    "text": "            return se",
    "annotation": "\ud83e\udde0 ML Signal: Logging information with dynamic content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      384
    ],
    "start_token": 336,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging information with dynamic content"
  },
  {
    "line": 189,
    "text": "            return se",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of GoodCompanyFactor with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      384
    ],
    "start_token": 349,
    "end_token": 362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      4599,
      39154,
      41384,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of GoodCompanyFactor with specific parameters"
  },
  {
    "line": 197,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Printing the result of a DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 362,
    "end_token": 362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44118,
      262,
      1255,
      286,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Printing the result of a DataFrame"
  },
  {
    "line": 197,
    "text": "",
    "annotation": "\u2705 Best Practice: Defining __all__ for module exports",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 362,
    "end_token": 362,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Defining __all__ for module exports"
  }
]
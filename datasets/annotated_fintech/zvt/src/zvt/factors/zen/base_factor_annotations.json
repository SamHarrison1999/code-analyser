[
  {
    "line": 8,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module in a single line improves readability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      287,
      257,
      2060,
      1627,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module in a single line improves readability."
  },
  {
    "line": 11,
    "text": "from zvt.contract import IntervalLevel, AdjustType",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module in a single line improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      1330,
      4225,
      2100,
      4971,
      11,
      20292,
      6030
    ],
    "start_token": 5,
    "end_token": 17,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      287,
      257,
      2060,
      1627,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module in a single line improves readability."
  },
  {
    "line": 15,
    "text": "from zvt.contract.drawer import Rect",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module in a single line improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      19334,
      263,
      1330,
      48599
    ],
    "start_token": 17,
    "end_token": 27,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      287,
      257,
      2060,
      1627,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module in a single line improves readability."
  },
  {
    "line": 17,
    "text": "from zvt.contract.factor import Transformer",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module in a single line improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      31412,
      1330,
      3602,
      16354
    ],
    "start_token": 27,
    "end_token": 37,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      287,
      257,
      2060,
      1627,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module in a single line improves readability."
  },
  {
    "line": 17,
    "text": "from zvt.contract.factor import Transformer",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module in a single line improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      31412,
      1330,
      3602,
      16354
    ],
    "start_token": 37,
    "end_token": 47,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      287,
      257,
      2060,
      1627,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module in a single line improves readability."
  },
  {
    "line": 35,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module in a single line improves readability.",
    "confidence": 1.0,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 47,
    "end_token": 60,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      287,
      257,
      2060,
      1627,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module in a single line improves readability."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a logger is a good practice for handling log messages.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 60,
    "end_token": 60,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      318,
      257,
      922,
      3357,
      329,
      9041,
      2604,
      6218,
      13
    ],
    "label": "best_practice",
    "reason": "Using a logger is a good practice for handling log messages."
  },
  {
    "line": 32,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u2705 Best Practice: Inheriting from json.JSONEncoder to create a custom encoder",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 60,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      33918,
      13,
      40386,
      27195,
      12342,
      284,
      2251,
      257,
      2183,
      2207,
      12342
    ],
    "label": "best_practice",
    "reason": "Inheriting from json.JSONEncoder to create a custom encoder"
  },
  {
    "line": 33,
    "text": "from zvt.utils.time_utils import TIME_FORMAT_ISO8601, to_time_str",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      20460,
      62,
      21389,
      1404,
      62,
      40734,
      4521,
      486,
      11,
      284,
      62,
      2435,
      62,
      2536
    ],
    "start_token": 78,
    "end_token": 102,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 35,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of an object is a common and clear pattern.",
    "confidence": 0.5,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 102,
    "end_token": 115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      281,
      2134,
      318,
      257,
      2219,
      290,
      1598,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of an object is a common and clear pattern."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting a pandas Series to a dictionary is a common pattern.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 115,
    "end_token": 115,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      19798,
      292,
      7171,
      284,
      257,
      22155,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting a pandas Series to a dictionary is a common pattern."
  },
  {
    "line": 40,
    "text": "        if isinstance(object, pd.Series):",
    "annotation": "\ud83e\udde0 ML Signal: Converting a pandas Timestamp to a string with a specific format is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      15252,
      11,
      279,
      67,
      13,
      27996,
      2599
    ],
    "start_token": 115,
    "end_token": 133,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      19798,
      292,
      5045,
      27823,
      284,
      257,
      4731,
      351,
      257,
      2176,
      5794,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting a pandas Timestamp to a string with a specific format is a common pattern."
  },
  {
    "line": 43,
    "text": "            return to_time_str(object, fmt=TIME_FORMAT_ISO8601)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the value of an Enum is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      284,
      62,
      2435,
      62,
      2536,
      7,
      15252,
      11,
      46996,
      28,
      34694,
      62,
      21389,
      1404,
      62,
      40734,
      4521,
      486,
      8
    ],
    "start_token": 133,
    "end_token": 164,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      1988,
      286,
      281,
      2039,
      388,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing the value of an Enum is a common pattern."
  },
  {
    "line": 46,
    "text": "        elif isinstance(object, Bean):",
    "annotation": "\ud83e\udde0 ML Signal: Converting a custom object to a dictionary is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      318,
      39098,
      7,
      15252,
      11,
      26510,
      2599
    ],
    "start_token": 164,
    "end_token": 180,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      2183,
      2134,
      284,
      257,
      22155,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting a custom object to a dictionary is a common pattern."
  },
  {
    "line": 48,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Using super() to call a method from the parent class is a common and clear pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 180,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2208,
      3419,
      284,
      869,
      257,
      2446,
      422,
      262,
      2560,
      1398,
      318,
      257,
      2219,
      290,
      1598,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Using super() to call a method from the parent class is a common and clear pattern."
  },
  {
    "line": 45,
    "text": "            return object.value",
    "annotation": "\u2705 Best Practice: Use isinstance() instead of type() for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2134,
      13,
      8367
    ],
    "start_token": 189,
    "end_token": 204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      3419,
      2427,
      286,
      2099,
      3419,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use isinstance() instead of type() for type checking"
  },
  {
    "line": 48,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of string formatting to create dynamic schema names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 204,
    "end_token": 213,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4731,
      33313,
      284,
      2251,
      8925,
      32815,
      3891
    ],
    "label": "ml_signal",
    "reason": "Usage of string formatting to create dynamic schema names"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern to retrieve schema by name",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 213,
    "end_token": 213,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      284,
      19818,
      32815,
      416,
      1438
    ],
    "label": "ml_signal",
    "reason": "Function call pattern to retrieve schema by name"
  },
  {
    "line": 52,
    "text": "def get_zen_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of decorators if not properly defined",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      4801,
      62,
      31412,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      25,
      965,
      11,
      1241,
      25,
      4479,
      58,
      9492,
      2100,
      4971,
      11,
      965,
      60,
      796,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      2599
    ],
    "start_token": 213,
    "end_token": 250,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      11705,
      2024,
      611,
      407,
      6105,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of decorators if not properly defined"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a class named 'Bean' suggests a pattern of using a specific framework or library",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 250,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      1398,
      3706,
      705,
      3856,
      272,
      6,
      5644,
      257,
      3912,
      286,
      1262,
      257,
      2176,
      9355,
      393,
      5888
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a class named 'Bean' suggests a pattern of using a specific framework or library"
  },
  {
    "line": 52,
    "text": "def get_zen_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):",
    "annotation": "\u2705 Best Practice: Use of default mutable arguments (like dict) can lead to unexpected behavior. Consider using None and initializing inside the function.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      4801,
      62,
      31412,
      62,
      15952,
      2611,
      7,
      26858,
      62,
      4906,
      25,
      965,
      11,
      1241,
      25,
      4479,
      58,
      9492,
      2100,
      4971,
      11,
      965,
      60,
      796,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      2599
    ],
    "start_token": 250,
    "end_token": 287,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      4517,
      540,
      7159,
      357,
      2339,
      8633,
      8,
      460,
      1085,
      284,
      10059,
      4069,
      13,
      12642,
      1262,
      6045,
      290,
      4238,
      2890,
      2641,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default mutable arguments (like dict) can lead to unexpected behavior. Consider using None and initializing inside the function."
  },
  {
    "line": 56,
    "text": "    # z factor schema rule",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used to transform data, indicating a pattern of data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      1976,
      5766,
      32815,
      3896
    ],
    "start_token": 287,
    "end_token": 295,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      284,
      6121,
      1366,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "List comprehension used to transform data, indicating a pattern of data processing."
  },
  {
    "line": 59,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on dictionary keys, indicating a pattern of optional configuration.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 295,
    "end_token": 295,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      22155,
      8251,
      11,
      12739,
      257,
      3912,
      286,
      11902,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on dictionary keys, indicating a pattern of optional configuration."
  },
  {
    "line": 80,
    "text": "            self.direction = None",
    "annotation": "\u2705 Best Practice: Initialize variables to None for clarity and to avoid potential reference before assignment errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      37295,
      796,
      6045
    ],
    "start_token": 295,
    "end_token": 311,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      284,
      6045,
      329,
      16287,
      290,
      284,
      3368,
      2785,
      4941,
      878,
      16237,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize variables to None for clarity and to avoid potential reference before assignment errors."
  },
  {
    "line": 84,
    "text": "        self.can_fenxing_index = state.get(\"can_fenxing_index\")",
    "annotation": "\ud83e\udde0 ML Signal: Checking the length of a list to determine logic flow is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5171,
      62,
      41037,
      87,
      278,
      62,
      9630,
      796,
      1181,
      13,
      1136,
      7203,
      5171,
      62,
      41037,
      87,
      278,
      62,
      9630,
      4943
    ],
    "start_token": 311,
    "end_token": 340,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      4129,
      286,
      257,
      1351,
      284,
      5004,
      9156,
      5202,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the length of a list to determine logic flow is a common pattern."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on list element comparison is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 340,
    "end_token": 340,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1351,
      5002,
      7208,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on list element comparison is a common pattern."
  },
  {
    "line": 91,
    "text": "        # list of (timestamp,value)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if intersect function is not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1351,
      286,
      357,
      16514,
      27823,
      11,
      8367,
      8
    ],
    "start_token": 340,
    "end_token": 356,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      36177,
      2163,
      318,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if intersect function is not properly validated."
  },
  {
    "line": 95,
    "text": "        # \u524d\u4e00\u4e2a\u70b9",
    "annotation": "\u2705 Best Practice: Use of named arguments in object creation improves readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      231,
      235,
      31660,
      10310,
      103,
      163,
      224,
      117
    ],
    "start_token": 356,
    "end_token": 373,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      287,
      2134,
      6282,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of named arguments in object creation improves readability."
  },
  {
    "line": 97,
    "text": "        self.pre_duan = state.get(\"pre_duan\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by zero risk if y1 is zero.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3866,
      62,
      646,
      272,
      796,
      1181,
      13,
      1136,
      7203,
      3866,
      62,
      646,
      272,
      4943
    ],
    "start_token": 373,
    "end_token": 396,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      6632,
      2526,
      611,
      331,
      16,
      318,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by zero risk if y1 is zero."
  },
  {
    "line": 99,
    "text": "        # \u76ee\u524d\u7684merge_zhongshu",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct assignment to DataFrame without validation can lead to data integrity issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      13328,
      249,
      106,
      30298,
      235,
      21410,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84
    ],
    "start_token": 396,
    "end_token": 417,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      16237,
      284,
      6060,
      19778,
      1231,
      21201,
      460,
      1085,
      284,
      1366,
      11540,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct assignment to DataFrame without validation can lead to data integrity issues."
  },
  {
    "line": 106,
    "text": "    points: list,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if intersect function is not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2173,
      25,
      1351,
      11
    ],
    "start_token": 417,
    "end_token": 424,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      36177,
      2163,
      318,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if intersect function is not properly validated."
  },
  {
    "line": 110,
    "text": "    zhongshu_change_col=\"zhongshu_change\",",
    "annotation": "\u2705 Best Practice: Use of named arguments in object creation improves readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      62,
      4033,
      2625,
      23548,
      506,
      1477,
      84,
      62,
      3803,
      1600
    ],
    "start_token": 424,
    "end_token": 444,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      287,
      2134,
      6282,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of named arguments in object creation improves readability."
  },
  {
    "line": 112,
    "text": "    zhongshu = None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by zero risk if y1 is zero.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      796,
      6045
    ],
    "start_token": 444,
    "end_token": 454,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      6632,
      2526,
      611,
      331,
      16,
      318,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by zero risk if y1 is zero."
  },
  {
    "line": 112,
    "text": "    zhongshu = None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct assignment to DataFrame without validation can lead to data integrity issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      796,
      6045
    ],
    "start_token": 454,
    "end_token": 464,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      16237,
      284,
      6060,
      19778,
      1231,
      21201,
      460,
      1085,
      284,
      1366,
      11540,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct assignment to DataFrame without validation can lead to data integrity issues."
  },
  {
    "line": 110,
    "text": "    zhongshu_change_col=\"zhongshu_change\",",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions, which this does.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      62,
      4033,
      2625,
      23548,
      506,
      1477,
      84,
      62,
      3803,
      1600
    ],
    "start_token": 464,
    "end_token": 484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      11,
      543,
      428,
      857,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions, which this does."
  },
  {
    "line": 112,
    "text": "    zhongshu = None",
    "annotation": "\u2705 Best Practice: Docstring provides detailed explanation of the algorithm and concepts used.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      796,
      6045
    ],
    "start_token": 484,
    "end_token": 494,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      7468,
      286,
      262,
      11862,
      290,
      10838,
      973,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed explanation of the algorithm and concepts used."
  },
  {
    "line": 137,
    "text": "            range = intersect((points[1][1], points[0][1]), (points[3][1], points[2][1]))",
    "annotation": "\u2705 Best Practice: Calls the superclass's __init__ method to ensure proper initialization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2837,
      796,
      36177,
      19510,
      13033,
      58,
      16,
      7131,
      16,
      4357,
      2173,
      58,
      15,
      7131,
      16,
      46570,
      357,
      13033,
      58,
      18,
      7131,
      16,
      4357,
      2173,
      58,
      17,
      7131,
      16,
      60,
      4008
    ],
    "start_token": 494,
    "end_token": 535,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27592,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      284,
      4155,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Calls the superclass's __init__ method to ensure proper initialization."
  },
  {
    "line": 138,
    "text": "            if range:",
    "annotation": "\ud83e\udde0 ML Signal: Logging the start of processing for a specific entity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2837,
      25
    ],
    "start_token": 535,
    "end_token": 549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      923,
      286,
      7587,
      329,
      257,
      2176,
      9312
    ],
    "label": "ml_signal",
    "reason": "Logging the start of processing for a specific entity"
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging the timestamp from which computation starts",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 549,
    "end_token": 549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      41033,
      422,
      543,
      29964,
      4940
    ],
    "label": "ml_signal",
    "reason": "Logging the timestamp from which computation starts"
  },
  {
    "line": 146,
    "text": "                points = points[-1:]",
    "annotation": "\u2705 Best Practice: Using pd.concat to append dataframes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2173,
      796,
      2173,
      58,
      12,
      16,
      47715
    ],
    "start_token": 549,
    "end_token": 571,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      284,
      24443,
      1366,
      37805
    ],
    "label": "best_practice",
    "reason": "Using pd.concat to append dataframes"
  },
  {
    "line": 149,
    "text": "    return points, zhongshu, zhongshu_change, interval",
    "annotation": "\u2705 Best Practice: Resetting index for a clean DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      2173,
      11,
      1976,
      71,
      506,
      1477,
      84,
      11,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      11,
      16654
    ],
    "start_token": 571,
    "end_token": 592,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      329,
      257,
      3424,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Resetting index for a clean DataFrame"
  },
  {
    "line": 153,
    "text": "    def __init__(self, acc_window: int = 1) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Logging when no computation is needed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      697,
      62,
      17497,
      25,
      493,
      796,
      352,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 592,
    "end_token": 613,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      618,
      645,
      29964,
      318,
      2622
    ],
    "label": "ml_signal",
    "reason": "Logging when no computation is needed"
  },
  {
    "line": 158,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing DataFrame columns with default values",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 613,
    "end_token": 613,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      6060,
      19778,
      15180,
      351,
      4277,
      3815
    ],
    "label": "best_practice",
    "reason": "Initializing DataFrame columns with default values"
  },
  {
    "line": 194,
    "text": "",
    "annotation": "\u2705 Best Practice: Resetting index for a clean DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 613,
    "end_token": 613,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      329,
      257,
      3424,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Resetting index for a clean DataFrame"
  },
  {
    "line": 457,
    "text": "",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions, which is CamelCase.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 613,
    "end_token": 613,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      11,
      543,
      318,
      43281,
      20448,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions, which is CamelCase."
  },
  {
    "line": 459,
    "text": "                        zen_state.bis.append(",
    "annotation": "\u2705 Best Practice: Class attributes should be defined at the top of the class for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      41907,
      13,
      33295,
      7
    ],
    "start_token": 613,
    "end_token": 645,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be defined at the top of the class for better readability."
  },
  {
    "line": 459,
    "text": "                        zen_state.bis.append(",
    "annotation": "\ud83e\udde0 ML Signal: Use of a class attribute to hold an instance of another class, indicating a composition relationship.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      41907,
      13,
      33295,
      7
    ],
    "start_token": 645,
    "end_token": 677,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1398,
      11688,
      284,
      1745,
      281,
      4554,
      286,
      1194,
      1398,
      11,
      12739,
      257,
      11742,
      2776,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a class attribute to hold an instance of another class, indicating a composition relationship."
  },
  {
    "line": 489,
    "text": "                            current_merge_zhongshu_interval = current_zhongshu_interval",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      3849,
      2100,
      796,
      1459,
      62,
      23548,
      506,
      1477,
      84,
      62,
      3849,
      2100
    ],
    "start_token": 677,
    "end_token": 726,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 490,
    "text": "                        else:",
    "annotation": "\u2705 Best Practice: Type annotations help with code clarity and static analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 726,
    "end_token": 751,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      1037,
      351,
      2438,
      16287,
      290,
      9037,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations help with code clarity and static analysis."
  },
  {
    "line": 490,
    "text": "                        else:",
    "annotation": "\ud83e\udde0 ML Signal: Use of a schema pattern indicates structured data handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 751,
    "end_token": 776,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      32815,
      3912,
      9217,
      20793,
      1366,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a schema pattern indicates structured data handling."
  },
  {
    "line": 520,
    "text": "                                acc_df.loc[end_index, \"merge_zhongshu_level\"] = current_merge_zhongshu_level",
    "annotation": "\u2705 Best Practice: Calling the superclass constructor ensures proper initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      13,
      17946,
      58,
      437,
      62,
      9630,
      11,
      366,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      5715,
      8973,
      796,
      1459,
      62,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      5715
    ],
    "start_token": 776,
    "end_token": 840,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      23772,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Calling the superclass constructor ensures proper initialization."
  },
  {
    "line": 519,
    "text": "                                acc_df.loc[end_index, \"merge_zhongshu_change\"] = current_merge_zhongshu_change",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      13,
      17946,
      58,
      437,
      62,
      9630,
      11,
      366,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      3803,
      8973,
      796,
      1459,
      62,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      3803
    ],
    "start_token": 840,
    "end_token": 904,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 520,
    "text": "                                acc_df.loc[end_index, \"merge_zhongshu_level\"] = current_merge_zhongshu_level",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to map keys to functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      13,
      17946,
      58,
      437,
      62,
      9630,
      11,
      366,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      5715,
      8973,
      796,
      1459,
      62,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      5715
    ],
    "start_token": 904,
    "end_token": 968,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      8251,
      284,
      5499
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to map keys to functions"
  },
  {
    "line": 523,
    "text": "                        zen_state.merge_zhongshu = current_merge_zhongshu",
    "annotation": "\ud83e\udde0 ML Signal: Consistent use of the same function for multiple keys",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      796,
      1459,
      62,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84
    ],
    "start_token": 968,
    "end_token": 1013,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      779,
      286,
      262,
      976,
      2163,
      329,
      3294,
      8251
    ],
    "label": "ml_signal",
    "reason": "Consistent use of the same function for multiple keys"
  },
  {
    "line": 525,
    "text": "                        zen_state.merge_zhongshu_level = current_merge_zhongshu_level",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a class or function, indicating a factory pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      5715,
      796,
      1459,
      62,
      647,
      469,
      62,
      23548,
      506,
      1477,
      84,
      62,
      5715
    ],
    "start_token": 1013,
    "end_token": 1062,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1398,
      393,
      2163,
      11,
      12739,
      257,
      8860,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning a class or function, indicating a factory pattern"
  },
  {
    "line": 527,
    "text": "                        zen_state.pre_bi = (zen_state.can_fenxing_index, bi_value)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a class from a method, useful for dynamic behavior analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      3866,
      62,
      8482,
      796,
      357,
      4801,
      62,
      5219,
      13,
      5171,
      62,
      41037,
      87,
      278,
      62,
      9630,
      11,
      3182,
      62,
      8367,
      8
    ],
    "start_token": 1062,
    "end_token": 1111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1398,
      422,
      257,
      2446,
      11,
      4465,
      329,
      8925,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Returning a class from a method, useful for dynamic behavior analysis"
  },
  {
    "line": 527,
    "text": "                        zen_state.pre_bi = (zen_state.can_fenxing_index, bi_value)",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      3866,
      62,
      8482,
      796,
      357,
      4801,
      62,
      5219,
      13,
      5171,
      62,
      41037,
      87,
      278,
      62,
      9630,
      11,
      3182,
      62,
      8367,
      8
    ],
    "start_token": 1111,
    "end_token": 1160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 529,
    "text": "                        zen_state.opposite_count = 0",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas DataFrame operations like dropna",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      10365,
      5971,
      62,
      9127,
      796,
      657
    ],
    "start_token": 1160,
    "end_token": 1194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6060,
      19778,
      4560,
      588,
      4268,
      2616
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas DataFrame operations like dropna"
  },
  {
    "line": 531,
    "text": "                        zen_state.can_fenxing = None",
    "annotation": "\ud83e\udde0 ML Signal: Returning a list containing a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      5171,
      62,
      41037,
      87,
      278,
      796,
      6045
    ],
    "start_token": 1194,
    "end_token": 1229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1351,
      7268,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Returning a list containing a DataFrame"
  },
  {
    "line": 530,
    "text": "                        zen_state.direction = zen_state.direction.opposite()",
    "annotation": "\u2705 Best Practice: Specify the return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      37295,
      796,
      1976,
      268,
      62,
      5219,
      13,
      37295,
      13,
      10365,
      5971,
      3419
    ],
    "start_token": 1229,
    "end_token": 1269,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Specify the return type for better readability and maintainability"
  },
  {
    "line": 532,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame dropna method to handle missing data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1269,
    "end_token": 1269,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4268,
      2616,
      2446,
      284,
      5412,
      4814,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame dropna method to handle missing data"
  },
  {
    "line": 534,
    "text": "                        if zen_state.fenxing_list != None:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1976,
      268,
      62,
      5219,
      13,
      41037,
      87,
      278,
      62,
      4868,
      14512,
      6045,
      25
    ],
    "start_token": 1269,
    "end_token": 1306,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list"
  },
  {
    "line": 535,
    "text": "                            zen_state.fenxing_list.append(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dropna() indicates data cleaning, which is a common preprocessing step in ML pipelines.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      268,
      62,
      5219,
      13,
      41037,
      87,
      278,
      62,
      4868,
      13,
      33295,
      7
    ],
    "start_token": 1306,
    "end_token": 1346,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4268,
      2616,
      3419,
      9217,
      1366,
      12724,
      11,
      543,
      318,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      10373,
      31108,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dropna() indicates data cleaning, which is a common preprocessing step in ML pipelines."
  },
  {
    "line": 539,
    "text": "                                        \"low\": float(acc_df.loc[zen_state.can_fenxing_index][\"low\"]),",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded entity IDs suggest a specific use case or dataset, which can be a feature for ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9319,
      1298,
      12178,
      7,
      4134,
      62,
      7568,
      13,
      17946,
      58,
      4801,
      62,
      5219,
      13,
      5171,
      62,
      41037,
      87,
      278,
      62,
      9630,
      7131,
      1,
      9319,
      8973,
      828
    ],
    "start_token": 1346,
    "end_token": 1412,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      9312,
      32373,
      1950,
      257,
      2176,
      779,
      1339,
      393,
      27039,
      11,
      543,
      460,
      307,
      257,
      3895,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded entity IDs suggest a specific use case or dataset, which can be a feature for ML models."
  },
  {
    "line": 539,
    "text": "                                        \"low\": float(acc_df.loc[zen_state.can_fenxing_index][\"low\"]),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if entity_ids are user-controlled, leading to data injection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9319,
      1298,
      12178,
      7,
      4134,
      62,
      7568,
      13,
      17946,
      58,
      4801,
      62,
      5219,
      13,
      5171,
      62,
      41037,
      87,
      278,
      62,
      9630,
      7131,
      1,
      9319,
      8973,
      828
    ],
    "start_token": 1412,
    "end_token": 1478,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      9312,
      62,
      2340,
      389,
      2836,
      12,
      14401,
      11,
      3756,
      284,
      1366,
      16954,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if entity_ids are user-controlled, leading to data injection."
  },
  {
    "line": 547,
    "text": "                                duan_state = handle_duan(",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of ZenFactor with specific parameters can indicate a pattern for model configuration.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7043,
      272,
      62,
      5219,
      796,
      5412,
      62,
      646,
      272,
      7
    ],
    "start_token": 1478,
    "end_token": 1519,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      14760,
      41384,
      351,
      2176,
      10007,
      460,
      7603,
      257,
      3912,
      329,
      2746,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of ZenFactor with specific parameters can indicate a pattern for model configuration."
  },
  {
    "line": 547,
    "text": "                                duan_state = handle_duan(",
    "annotation": "\ud83e\udde0 ML Signal: Visualization function call, indicating a pattern of data exploration or result presentation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7043,
      272,
      62,
      5219,
      796,
      5412,
      62,
      646,
      272,
      7
    ],
    "start_token": 1519,
    "end_token": 1560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15612,
      1634,
      2163,
      869,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      13936,
      393,
      1255,
      10470,
      13
    ],
    "label": "ml_signal",
    "reason": "Visualization function call, indicating a pattern of data exploration or result presentation."
  },
  {
    "line": 547,
    "text": "                                duan_state = handle_duan(",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module, improving code maintainability and readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7043,
      272,
      62,
      5219,
      796,
      5412,
      62,
      646,
      272,
      7
    ],
    "start_token": 1560,
    "end_token": 1601,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      11,
      10068,
      2438,
      5529,
      1799,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module, improving code maintainability and readability."
  }
]
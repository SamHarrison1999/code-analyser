annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module in a single line improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 287, 257, 2060, 1627, 19575, 1100, 1799, 13]",1.0,5,best_practice,8,Grouping imports from the same module in a single line improves readability.,,0,import numpy as np,"[11748, 299, 32152, 355, 45941]"
‚úÖ Best Practice: Grouping imports from the same module in a single line improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 287, 257, 2060, 1627, 19575, 1100, 1799, 13]",1.0,17,best_practice,11,Grouping imports from the same module in a single line improves readability.,,5,"from zvt.contract import IntervalLevel, AdjustType","[6738, 1976, 36540, 13, 28484, 1330, 4225, 2100, 4971, 11, 20292, 6030]"
‚úÖ Best Practice: Grouping imports from the same module in a single line improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 287, 257, 2060, 1627, 19575, 1100, 1799, 13]",1.0,27,best_practice,15,Grouping imports from the same module in a single line improves readability.,,17,from zvt.contract.drawer import Rect,"[6738, 1976, 36540, 13, 28484, 13, 19334, 263, 1330, 48599]"
‚úÖ Best Practice: Grouping imports from the same module in a single line improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 287, 257, 2060, 1627, 19575, 1100, 1799, 13]",1.0,37,best_practice,17,Grouping imports from the same module in a single line improves readability.,,27,from zvt.contract.factor import Transformer,"[6738, 1976, 36540, 13, 28484, 13, 31412, 1330, 3602, 16354]"
‚úÖ Best Practice: Grouping imports from the same module in a single line improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 287, 257, 2060, 1627, 19575, 1100, 1799, 13]",1.0,47,best_practice,17,Grouping imports from the same module in a single line improves readability.,,37,from zvt.contract.factor import Transformer,"[6738, 1976, 36540, 13, 28484, 13, 31412, 1330, 3602, 16354]"
‚úÖ Best Practice: Grouping imports from the same module in a single line improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 287, 257, 2060, 1627, 19575, 1100, 1799, 13]",1.0,60,best_practice,35,Grouping imports from the same module in a single line improves readability.,,47,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
‚úÖ Best Practice: Using a logger is a good practice for handling log messages.,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 318, 257, 922, 3357, 329, 9041, 2604, 6218, 13]",1.0,60,best_practice,37,Using a logger is a good practice for handling log messages.,,60,,[]
‚úÖ Best Practice: Inheriting from json.JSONEncoder to create a custom encoder,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 33918, 13, 40386, 27195, 12342, 284, 2251, 257, 2183, 2207, 12342]",1.0,78,best_practice,32,Inheriting from json.JSONEncoder to create a custom encoder,,60,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,102,best_practice,33,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,78,"from zvt.utils.time_utils import TIME_FORMAT_ISO8601, to_time_str","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 20460, 62, 21389, 1404, 62, 40734, 4521, 486, 11, 284, 62, 2435, 62, 2536]"
‚úÖ Best Practice: Using isinstance to check the type of an object is a common and clear pattern.,"[26486, 227, 6705, 19939, 25, 8554, 318, 39098, 284, 2198, 262, 2099, 286, 281, 2134, 318, 257, 2219, 290, 1598, 3912, 13]",0.5,115,best_practice,35,Using isinstance to check the type of an object is a common and clear pattern.,,102,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
üß† ML Signal: Converting a pandas Series to a dictionary is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 19798, 292, 7171, 284, 257, 22155, 318, 257, 2219, 3912, 13]",1.0,115,ml_signal,37,Converting a pandas Series to a dictionary is a common pattern.,,115,,[]
üß† ML Signal: Converting a pandas Timestamp to a string with a specific format is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 19798, 292, 5045, 27823, 284, 257, 4731, 351, 257, 2176, 5794, 318, 257, 2219, 3912, 13]",1.0,133,ml_signal,40,Converting a pandas Timestamp to a string with a specific format is a common pattern.,,115,"        if isinstance(object, pd.Series):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 15252, 11, 279, 67, 13, 27996, 2599]"
üß† ML Signal: Accessing the value of an Enum is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 1988, 286, 281, 2039, 388, 318, 257, 2219, 3912, 13]",1.0,164,ml_signal,43,Accessing the value of an Enum is a common pattern.,,133,"            return to_time_str(object, fmt=TIME_FORMAT_ISO8601)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 284, 62, 2435, 62, 2536, 7, 15252, 11, 46996, 28, 34694, 62, 21389, 1404, 62, 40734, 4521, 486, 8]"
üß† ML Signal: Converting a custom object to a dictionary is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 2183, 2134, 284, 257, 22155, 318, 257, 2219, 3912, 13]",0.5,180,ml_signal,46,Converting a custom object to a dictionary is a common pattern.,,164,"        elif isinstance(object, Bean):","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 318, 39098, 7, 15252, 11, 26510, 2599]"
‚úÖ Best Practice: Using super() to call a method from the parent class is a common and clear pattern.,"[26486, 227, 6705, 19939, 25, 8554, 2208, 3419, 284, 869, 257, 2446, 422, 262, 2560, 1398, 318, 257, 2219, 290, 1598, 3912, 13]",0.5,189,best_practice,48,Using super() to call a method from the parent class is a common and clear pattern.,,180,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use isinstance() instead of type() for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 3419, 2427, 286, 2099, 3419, 329, 2099, 10627]",1.0,204,best_practice,45,Use isinstance() instead of type() for type checking,,189,            return object.value,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2134, 13, 8367]"
üß† ML Signal: Usage of string formatting to create dynamic schema names,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 33313, 284, 2251, 8925, 32815, 3891]",0.5,213,ml_signal,48,Usage of string formatting to create dynamic schema names,,204,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Function call pattern to retrieve schema by name,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 284, 19818, 32815, 416, 1438]",0.5,213,ml_signal,50,Function call pattern to retrieve schema by name,,213,,[]
‚ö†Ô∏è SAST Risk (Low): Potential misuse of decorators if not properly defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 11705, 2024, 611, 407, 6105, 5447]",0.5,250,sast_risk,52,Potential misuse of decorators if not properly defined,Low,213,"def get_zen_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):","[4299, 651, 62, 4801, 62, 31412, 62, 15952, 2611, 7, 26858, 62, 4906, 25, 965, 11, 1241, 25, 4479, 58, 9492, 2100, 4971, 11, 965, 60, 796, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 2599]"
üß† ML Signal: Inheritance from a class named 'Bean' suggests a pattern of using a specific framework or library,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 1398, 3706, 705, 3856, 272, 6, 5644, 257, 3912, 286, 1262, 257, 2176, 9355, 393, 5888]",1.0,250,ml_signal,51,Inheritance from a class named 'Bean' suggests a pattern of using a specific framework or library,,250,,[]
‚úÖ Best Practice: Use of default mutable arguments (like dict) can lead to unexpected behavior. Consider using None and initializing inside the function.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4517, 540, 7159, 357, 2339, 8633, 8, 460, 1085, 284, 10059, 4069, 13, 12642, 1262, 6045, 290, 4238, 2890, 2641, 262, 2163, 13]",0.5,287,best_practice,52,Use of default mutable arguments (like dict) can lead to unexpected behavior. Consider using None and initializing inside the function.,,250,"def get_zen_factor_schema(entity_type: str, level: Union[IntervalLevel, str] = IntervalLevel.LEVEL_1DAY):","[4299, 651, 62, 4801, 62, 31412, 62, 15952, 2611, 7, 26858, 62, 4906, 25, 965, 11, 1241, 25, 4479, 58, 9492, 2100, 4971, 11, 965, 60, 796, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 2599]"
"üß† ML Signal: List comprehension used to transform data, indicating a pattern of data processing.","[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 284, 6121, 1366, 11, 12739, 257, 3912, 286, 1366, 7587, 13]",1.0,295,ml_signal,56,"List comprehension used to transform data, indicating a pattern of data processing.",,287,    # z factor schema rule,"[220, 220, 220, 1303, 1976, 5766, 32815, 3896]"
"üß† ML Signal: Conditional logic based on dictionary keys, indicating a pattern of optional configuration.","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 22155, 8251, 11, 12739, 257, 3912, 286, 11902, 8398, 13]",0.5,295,ml_signal,59,"Conditional logic based on dictionary keys, indicating a pattern of optional configuration.",,295,,[]
‚úÖ Best Practice: Initialize variables to None for clarity and to avoid potential reference before assignment errors.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 284, 6045, 329, 16287, 290, 284, 3368, 2785, 4941, 878, 16237, 8563, 13]",1.0,311,best_practice,80,Initialize variables to None for clarity and to avoid potential reference before assignment errors.,,295,            self.direction = None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 37295, 796, 6045]"
üß† ML Signal: Checking the length of a list to determine logic flow is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 262, 4129, 286, 257, 1351, 284, 5004, 9156, 5202, 318, 257, 2219, 3912, 13]",1.0,340,ml_signal,84,Checking the length of a list to determine logic flow is a common pattern.,,311,"        self.can_fenxing_index = state.get(""can_fenxing_index"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5171, 62, 41037, 87, 278, 62, 9630, 796, 1181, 13, 1136, 7203, 5171, 62, 41037, 87, 278, 62, 9630, 4943]"
üß† ML Signal: Conditional logic based on list element comparison is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1351, 5002, 7208, 318, 257, 2219, 3912, 13]",0.5,340,ml_signal,89,Conditional logic based on list element comparison is a common pattern.,,340,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if intersect function is not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 36177, 2163, 318, 407, 6105, 31031, 13]",1.0,356,sast_risk,91,Potential risk if intersect function is not properly validated.,Low,340,"        # list of (timestamp,value)","[220, 220, 220, 220, 220, 220, 220, 1303, 1351, 286, 357, 16514, 27823, 11, 8367, 8]"
‚úÖ Best Practice: Use of named arguments in object creation improves readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 287, 2134, 6282, 19575, 1100, 1799, 13]",0.5,373,best_practice,95,Use of named arguments in object creation improves readability.,,356,        # Ââç‰∏Ä‰∏™ÁÇπ,"[220, 220, 220, 220, 220, 220, 220, 1303, 10263, 231, 235, 31660, 10310, 103, 163, 224, 117]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if y1 is zero.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 331, 16, 318, 6632, 13]",1.0,396,sast_risk,97,Division by zero risk if y1 is zero.,Low,373,"        self.pre_duan = state.get(""pre_duan"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 3866, 62, 646, 272, 796, 1181, 13, 1136, 7203, 3866, 62, 646, 272, 4943]"
‚ö†Ô∏è SAST Risk (Low): Direct assignment to DataFrame without validation can lead to data integrity issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 16237, 284, 6060, 19778, 1231, 21201, 460, 1085, 284, 1366, 11540, 2428, 13]",0.5,417,sast_risk,99,Direct assignment to DataFrame without validation can lead to data integrity issues.,Low,396,        # ÁõÆÂâçÁöÑmerge_zhongshu,"[220, 220, 220, 220, 220, 220, 220, 1303, 13328, 249, 106, 30298, 235, 21410, 647, 469, 62, 23548, 506, 1477, 84]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if intersect function is not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 36177, 2163, 318, 407, 6105, 31031, 13]",1.0,424,sast_risk,106,Potential risk if intersect function is not properly validated.,Low,417,"    points: list,","[220, 220, 220, 2173, 25, 1351, 11]"
‚úÖ Best Practice: Use of named arguments in object creation improves readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 287, 2134, 6282, 19575, 1100, 1799, 13]",0.5,444,best_practice,110,Use of named arguments in object creation improves readability.,,424,"    zhongshu_change_col=""zhongshu_change"",","[220, 220, 220, 1976, 71, 506, 1477, 84, 62, 3803, 62, 4033, 2625, 23548, 506, 1477, 84, 62, 3803, 1600]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if y1 is zero.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 331, 16, 318, 6632, 13]",1.0,454,sast_risk,112,Division by zero risk if y1 is zero.,Low,444,    zhongshu = None,"[220, 220, 220, 1976, 71, 506, 1477, 84, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Direct assignment to DataFrame without validation can lead to data integrity issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 16237, 284, 6060, 19778, 1231, 21201, 460, 1085, 284, 1366, 11540, 2428, 13]",0.5,464,sast_risk,112,Direct assignment to DataFrame without validation can lead to data integrity issues.,Low,454,    zhongshu = None,"[220, 220, 220, 1976, 71, 506, 1477, 84, 796, 6045]"
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which this does.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 428, 857, 13]",0.5,484,best_practice,110,"Class definition should follow PEP 8 naming conventions, which this does.",,464,"    zhongshu_change_col=""zhongshu_change"",","[220, 220, 220, 1976, 71, 506, 1477, 84, 62, 3803, 62, 4033, 2625, 23548, 506, 1477, 84, 62, 3803, 1600]"
‚úÖ Best Practice: Docstring provides detailed explanation of the algorithm and concepts used.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 7468, 286, 262, 11862, 290, 10838, 973, 13]",1.0,494,best_practice,112,Docstring provides detailed explanation of the algorithm and concepts used.,,484,    zhongshu = None,"[220, 220, 220, 1976, 71, 506, 1477, 84, 796, 6045]"
‚úÖ Best Practice: Calls the superclass's __init__ method to ensure proper initialization.,"[26486, 227, 6705, 19939, 25, 27592, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588, 13]",1.0,535,best_practice,137,Calls the superclass's __init__ method to ensure proper initialization.,,494,"            range = intersect((points[1][1], points[0][1]), (points[3][1], points[2][1]))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2837, 796, 36177, 19510, 13033, 58, 16, 7131, 16, 4357, 2173, 58, 15, 7131, 16, 46570, 357, 13033, 58, 18, 7131, 16, 4357, 2173, 58, 17, 7131, 16, 60, 4008]"
üß† ML Signal: Logging the start of processing for a specific entity,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 923, 286, 7587, 329, 257, 2176, 9312]",0.5,549,ml_signal,138,Logging the start of processing for a specific entity,,535,            if range:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2837, 25]"
üß† ML Signal: Logging the timestamp from which computation starts,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 41033, 422, 543, 29964, 4940]",0.5,549,ml_signal,143,Logging the timestamp from which computation starts,,549,,[]
‚úÖ Best Practice: Using pd.concat to append dataframes,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 24443, 1366, 37805]",0.5,571,best_practice,146,Using pd.concat to append dataframes,,549,                points = points[-1:],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2173, 796, 2173, 58, 12, 16, 47715]"
‚úÖ Best Practice: Resetting index for a clean DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 257, 3424, 6060, 19778]",1.0,592,best_practice,149,Resetting index for a clean DataFrame,,571,"    return points, zhongshu, zhongshu_change, interval","[220, 220, 220, 1441, 2173, 11, 1976, 71, 506, 1477, 84, 11, 1976, 71, 506, 1477, 84, 62, 3803, 11, 16654]"
üß† ML Signal: Logging when no computation is needed,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 618, 645, 29964, 318, 2622]",0.5,613,ml_signal,153,Logging when no computation is needed,,592,"    def __init__(self, acc_window: int = 1) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 697, 62, 17497, 25, 493, 796, 352, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Initializing DataFrame columns with default values,"[26486, 227, 6705, 19939, 25, 20768, 2890, 6060, 19778, 15180, 351, 4277, 3815]",1.0,613,best_practice,158,Initializing DataFrame columns with default values,,613,,[]
‚úÖ Best Practice: Resetting index for a clean DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 257, 3424, 6060, 19778]",1.0,613,best_practice,194,Resetting index for a clean DataFrame,,613,,[]
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which is CamelCase.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 318, 43281, 20448, 13]",0.5,613,best_practice,457,"Class definition should follow PEP 8 naming conventions, which is CamelCase.",,613,,[]
‚úÖ Best Practice: Class attributes should be defined at the top of the class for better readability.,"[26486, 227, 6705, 19939, 25, 5016, 12608, 815, 307, 5447, 379, 262, 1353, 286, 262, 1398, 329, 1365, 1100, 1799, 13]",0.5,645,best_practice,459,Class attributes should be defined at the top of the class for better readability.,,613,                        zen_state.bis.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 41907, 13, 33295, 7]"
"üß† ML Signal: Use of a class attribute to hold an instance of another class, indicating a composition relationship.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1398, 11688, 284, 1745, 281, 4554, 286, 1194, 1398, 11, 12739, 257, 11742, 2776, 13]",0.5,677,ml_signal,459,"Use of a class attribute to hold an instance of another class, indicating a composition relationship.",,645,                        zen_state.bis.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 41907, 13, 33295, 7]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,726,best_practice,489,Use of descriptive variable names improves code readability.,,677,                            current_merge_zhongshu_interval = current_zhongshu_interval,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 647, 469, 62, 23548, 506, 1477, 84, 62, 3849, 2100, 796, 1459, 62, 23548, 506, 1477, 84, 62, 3849, 2100]"
‚úÖ Best Practice: Type annotations help with code clarity and static analysis.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 1037, 351, 2438, 16287, 290, 9037, 3781, 13]",0.5,751,best_practice,490,Type annotations help with code clarity and static analysis.,,726,                        else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Use of a schema pattern indicates structured data handling.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 32815, 3912, 9217, 20793, 1366, 9041, 13]",1.0,776,ml_signal,490,Use of a schema pattern indicates structured data handling.,,751,                        else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Calling the superclass constructor ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 23772, 19047, 1774, 37588, 13]",0.5,840,best_practice,520,Calling the superclass constructor ensures proper initialization.,,776,"                                acc_df.loc[end_index, ""merge_zhongshu_level""] = current_merge_zhongshu_level","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 13, 17946, 58, 437, 62, 9630, 11, 366, 647, 469, 62, 23548, 506, 1477, 84, 62, 5715, 8973, 796, 1459, 62, 647, 469, 62, 23548, 506, 1477, 84, 62, 5715]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,904,best_practice,519,Use of type hint for return value improves code readability and maintainability,,840,"                                acc_df.loc[end_index, ""merge_zhongshu_change""] = current_merge_zhongshu_change","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 13, 17946, 58, 437, 62, 9630, 11, 366, 647, 469, 62, 23548, 506, 1477, 84, 62, 3803, 8973, 796, 1459, 62, 647, 469, 62, 23548, 506, 1477, 84, 62, 3803]"
üß† ML Signal: Use of a dictionary to map keys to functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 284, 3975, 8251, 284, 5499]",0.5,968,ml_signal,520,Use of a dictionary to map keys to functions,,904,"                                acc_df.loc[end_index, ""merge_zhongshu_level""] = current_merge_zhongshu_level","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 697, 62, 7568, 13, 17946, 58, 437, 62, 9630, 11, 366, 647, 469, 62, 23548, 506, 1477, 84, 62, 5715, 8973, 796, 1459, 62, 647, 469, 62, 23548, 506, 1477, 84, 62, 5715]"
üß† ML Signal: Consistent use of the same function for multiple keys,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 262, 976, 2163, 329, 3294, 8251]",1.0,1013,ml_signal,523,Consistent use of the same function for multiple keys,,968,                        zen_state.merge_zhongshu = current_merge_zhongshu,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 647, 469, 62, 23548, 506, 1477, 84, 796, 1459, 62, 647, 469, 62, 23548, 506, 1477, 84]"
"üß† ML Signal: Method returning a class or function, indicating a factory pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1398, 393, 2163, 11, 12739, 257, 8860, 3912]",1.0,1062,ml_signal,525,"Method returning a class or function, indicating a factory pattern",,1013,                        zen_state.merge_zhongshu_level = current_merge_zhongshu_level,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 647, 469, 62, 23548, 506, 1477, 84, 62, 5715, 796, 1459, 62, 647, 469, 62, 23548, 506, 1477, 84, 62, 5715]"
"üß† ML Signal: Returning a class from a method, useful for dynamic behavior analysis","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1398, 422, 257, 2446, 11, 4465, 329, 8925, 4069, 3781]",0.5,1111,ml_signal,527,"Returning a class from a method, useful for dynamic behavior analysis",,1062,"                        zen_state.pre_bi = (zen_state.can_fenxing_index, bi_value)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 3866, 62, 8482, 796, 357, 4801, 62, 5219, 13, 5171, 62, 41037, 87, 278, 62, 9630, 11, 3182, 62, 8367, 8]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1160,best_practice,527,Type hinting improves code readability and maintainability,,1111,"                        zen_state.pre_bi = (zen_state.can_fenxing_index, bi_value)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 3866, 62, 8482, 796, 357, 4801, 62, 5219, 13, 5171, 62, 41037, 87, 278, 62, 9630, 11, 3182, 62, 8367, 8]"
üß† ML Signal: Usage of pandas DataFrame operations like dropna,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 4560, 588, 4268, 2616]",0.5,1194,ml_signal,529,Usage of pandas DataFrame operations like dropna,,1160,                        zen_state.opposite_count = 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 10365, 5971, 62, 9127, 796, 657]"
üß† ML Signal: Returning a list containing a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 7268, 257, 6060, 19778]",0.5,1229,ml_signal,531,Returning a list containing a DataFrame,,1194,                        zen_state.can_fenxing = None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 5171, 62, 41037, 87, 278, 796, 6045]"
‚úÖ Best Practice: Specify the return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,1269,best_practice,530,Specify the return type for better readability and maintainability,,1229,                        zen_state.direction = zen_state.direction.opposite(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 37295, 796, 1976, 268, 62, 5219, 13, 37295, 13, 10365, 5971, 3419]"
üß† ML Signal: Usage of DataFrame dropna method to handle missing data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 4268, 2616, 2446, 284, 5412, 4814, 1366]",0.5,1269,ml_signal,532,Usage of DataFrame dropna method to handle missing data,,1269,,[]
üß† ML Signal: Conversion of DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351]",0.5,1306,ml_signal,534,Conversion of DataFrame column to list,,1269,                        if zen_state.fenxing_list != None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1976, 268, 62, 5219, 13, 41037, 87, 278, 62, 4868, 14512, 6045, 25]"
"üß† ML Signal: Usage of dropna() indicates data cleaning, which is a common preprocessing step in ML pipelines.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4268, 2616, 3419, 9217, 1366, 12724, 11, 543, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 31108, 13]",0.5,1346,ml_signal,535,"Usage of dropna() indicates data cleaning, which is a common preprocessing step in ML pipelines.",,1306,                            zen_state.fenxing_list.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 268, 62, 5219, 13, 41037, 87, 278, 62, 4868, 13, 33295, 7]"
"üß† ML Signal: Hardcoded entity IDs suggest a specific use case or dataset, which can be a feature for ML models.","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 9312, 32373, 1950, 257, 2176, 779, 1339, 393, 27039, 11, 543, 460, 307, 257, 3895, 329, 10373, 4981, 13]",0.5,1412,ml_signal,539,"Hardcoded entity IDs suggest a specific use case or dataset, which can be a feature for ML models.",,1346,"                                        ""low"": float(acc_df.loc[zen_state.can_fenxing_index][""low""]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9319, 1298, 12178, 7, 4134, 62, 7568, 13, 17946, 58, 4801, 62, 5219, 13, 5171, 62, 41037, 87, 278, 62, 9630, 7131, 1, 9319, 8973, 828]"
"‚ö†Ô∏è SAST Risk (Low): Potential risk if entity_ids are user-controlled, leading to data injection.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 9312, 62, 2340, 389, 2836, 12, 14401, 11, 3756, 284, 1366, 16954, 13]",0.5,1478,sast_risk,539,"Potential risk if entity_ids are user-controlled, leading to data injection.",Low,1412,"                                        ""low"": float(acc_df.loc[zen_state.can_fenxing_index][""low""]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9319, 1298, 12178, 7, 4134, 62, 7568, 13, 17946, 58, 4801, 62, 5219, 13, 5171, 62, 41037, 87, 278, 62, 9630, 7131, 1, 9319, 8973, 828]"
üß† ML Signal: Instantiation of ZenFactor with specific parameters can indicate a pattern for model configuration.,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 14760, 41384, 351, 2176, 10007, 460, 7603, 257, 3912, 329, 2746, 8398, 13]",0.5,1519,ml_signal,547,Instantiation of ZenFactor with specific parameters can indicate a pattern for model configuration.,,1478,                                duan_state = handle_duan(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7043, 272, 62, 5219, 796, 5412, 62, 646, 272, 7]"
"üß† ML Signal: Visualization function call, indicating a pattern of data exploration or result presentation.","[8582, 100, 254, 10373, 26484, 25, 15612, 1634, 2163, 869, 11, 12739, 257, 3912, 286, 1366, 13936, 393, 1255, 10470, 13]",1.0,1560,ml_signal,547,"Visualization function call, indicating a pattern of data exploration or result presentation.",,1519,                                duan_state = handle_duan(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7043, 272, 62, 5219, 796, 5412, 62, 646, 272, 7]"
"‚úÖ Best Practice: Use of __all__ to define public API of the module, improving code maintainability and readability.","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 11, 10068, 2438, 5529, 1799, 290, 1100, 1799, 13]",1.0,1601,best_practice,547,"Use of __all__ to define public API of the module, improving code maintainability and readability.",,1560,                                duan_state = handle_duan(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7043, 272, 62, 5219, 796, 5412, 62, 646, 272, 7]"

[
  {
    "line": 2,
    "text": "from sqlalchemy.ext.declarative import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      2302,
      13,
      32446,
      283,
      876,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 5,
    "text": "from zvt.factors.zen.domain.common import ZenFactorCommon",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's declarative_base indicates ORM pattern.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      4801,
      13,
      27830,
      13,
      11321,
      1330,
      14760,
      41384,
      17227
    ],
    "start_token": 16,
    "end_token": 32,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      2377,
      283,
      876,
      62,
      8692,
      9217,
      6375,
      44,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's declarative_base indicates ORM pattern."
  },
  {
    "line": 7,
    "text": "Stock1wkZenFactorBase = declarative_base()",
    "annotation": "\ud83e\udde0 ML Signal: Use of class inheritance, indicating a pattern of code reuse and extension.",
    "confidence": 1.0,
    "tokens": [
      26207,
      16,
      43021,
      47573,
      41384,
      14881,
      796,
      2377,
      283,
      876,
      62,
      8692,
      3419
    ],
    "start_token": 32,
    "end_token": 45,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      24155,
      11,
      12739,
      257,
      3912,
      286,
      2438,
      32349,
      290,
      7552,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of class inheritance, indicating a pattern of code reuse and extension."
  },
  {
    "line": 7,
    "text": "Stock1wkZenFactorBase = declarative_base()",
    "annotation": "\u2705 Best Practice: Class naming follows a clear and descriptive convention.",
    "confidence": 0.5,
    "tokens": [
      26207,
      16,
      43021,
      47573,
      41384,
      14881,
      796,
      2377,
      283,
      876,
      62,
      8692,
      3419
    ],
    "start_token": 45,
    "end_token": 58,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      19264,
      5679,
      257,
      1598,
      290,
      35644,
      9831,
      13
    ],
    "label": "best_practice",
    "reason": "Class naming follows a clear and descriptive convention."
  },
  {
    "line": 10,
    "text": "class Stock1wkZenFactor(Stock1wkZenFactorBase, ZenFactorCommon):",
    "annotation": "\ud83e\udde0 ML Signal: Registration of schema with specific providers and database name, indicating a pattern of database interaction.",
    "confidence": 1.0,
    "tokens": [
      4871,
      10500,
      16,
      43021,
      47573,
      41384,
      7,
      26207,
      16,
      43021,
      47573,
      41384,
      14881,
      11,
      14760,
      41384,
      17227,
      2599
    ],
    "start_token": 58,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24610,
      286,
      32815,
      351,
      2176,
      9549,
      290,
      6831,
      1438,
      11,
      12739,
      257,
      3912,
      286,
      6831,
      10375,
      13
    ],
    "label": "ml_signal",
    "reason": "Registration of schema with specific providers and database name, indicating a pattern of database interaction."
  },
  {
    "line": 10,
    "text": "class Stock1wkZenFactor(Stock1wkZenFactorBase, ZenFactorCommon):",
    "annotation": "\u2705 Best Practice: Use of keyword arguments improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      4871,
      10500,
      16,
      43021,
      47573,
      41384,
      7,
      26207,
      16,
      43021,
      47573,
      41384,
      14881,
      11,
      14760,
      41384,
      17227,
      2599
    ],
    "start_token": 76,
    "end_token": 94,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      21179,
      7159,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of keyword arguments improves code readability and maintainability."
  },
  {
    "line": 10,
    "text": "class Stock1wkZenFactor(Stock1wkZenFactorBase, ZenFactorCommon):",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public symbols of the module, improving code clarity and module interface management.",
    "confidence": 1.0,
    "tokens": [
      4871,
      10500,
      16,
      43021,
      47573,
      41384,
      7,
      26207,
      16,
      43021,
      47573,
      41384,
      14881,
      11,
      14760,
      41384,
      17227,
      2599
    ],
    "start_token": 94,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      14354,
      286,
      262,
      8265,
      11,
      10068,
      2438,
      16287,
      290,
      8265,
      7071,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public symbols of the module, improving code clarity and module interface management."
  }
]
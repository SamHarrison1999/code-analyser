[
  {
    "line": 6,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external modules without validation can introduce security risks if the modules are compromised.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      13103,
      1231,
      21201,
      460,
      10400,
      2324,
      7476,
      611,
      262,
      13103,
      389,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external modules without validation can introduce security risks if the modules are compromised."
  },
  {
    "line": 11,
    "text": "from zvt.factors.algorithm import intersect",
    "annotation": "\u2705 Best Practice: Use a logger instead of print statements for better control over logging levels and outputs.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      282,
      42289,
      1330,
      36177
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      49706,
      2427,
      286,
      3601,
      6299,
      329,
      1365,
      1630,
      625,
      18931,
      2974,
      290,
      23862,
      13
    ],
    "label": "best_practice",
    "reason": "Use a logger instead of print statements for better control over logging levels and outputs."
  },
  {
    "line": 11,
    "text": "from zvt.factors.algorithm import intersect",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of named constants improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      282,
      42289,
      1330,
      36177
    ],
    "start_token": 11,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3706,
      38491,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of named constants improves code readability and maintainability"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Enum members are defined with clear and descriptive names",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 22,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      389,
      5447,
      351,
      1598,
      290,
      35644,
      3891
    ],
    "label": "best_practice",
    "reason": "Enum members are defined with clear and descriptive names"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method for determining opposite direction, useful for learning patterns in directional logic",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 22,
    "end_token": 22,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      13213,
      6697,
      4571,
      11,
      4465,
      329,
      4673,
      7572,
      287,
      47424,
      9156
    ],
    "label": "ml_signal",
    "reason": "Method for determining opposite direction, useful for learning patterns in directional logic"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding an else clause to handle unexpected values of self",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 22,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      281,
      2073,
      13444,
      284,
      5412,
      10059,
      3815,
      286,
      2116
    ],
    "label": "best_practice",
    "reason": "Consider adding an else clause to handle unexpected values of self"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hints for the return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 22,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for the return type improves code readability and maintainability"
  },
  {
    "line": 22,
    "text": "        if self == Direction.up:",
    "annotation": "\ud83e\udde0 ML Signal: Storing parameters as instance variables is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      6624,
      41837,
      13,
      929,
      25
    ],
    "start_token": 22,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      10007,
      355,
      4554,
      9633,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Storing parameters as instance variables is a common pattern"
  },
  {
    "line": 24,
    "text": "        if self == Direction.down:",
    "annotation": "\ud83e\udde0 ML Signal: Storing parameters as instance variables is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      6624,
      41837,
      13,
      2902,
      25
    ],
    "start_token": 36,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      10007,
      355,
      4554,
      9633,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Storing parameters as instance variables is a common pattern"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing parameters as instance variables is a common pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 50,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      10007,
      355,
      4554,
      9633,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Storing parameters as instance variables is a common pattern"
  },
  {
    "line": 25,
    "text": "            return Direction.up",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      41837,
      13,
      929
    ],
    "start_token": 50,
    "end_token": 65,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 65,
    "end_token": 65,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 31,
    "text": "        self.kdata = kdata",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if middle[\"close\"] is zero",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      74,
      7890,
      796,
      479,
      7890
    ],
    "start_token": 65,
    "end_token": 79,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      3504,
      14692,
      19836,
      8973,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if middle[\"close\"] is zero"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 79,
    "end_token": 79,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 36,
    "text": "    if fenxing == \"tmp_ding\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if middle[\"close\"] is zero",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      277,
      268,
      87,
      278,
      6624,
      366,
      22065,
      62,
      12083,
      1298
    ],
    "start_token": 79,
    "end_token": 93,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      3504,
      14692,
      19836,
      8973,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if middle[\"close\"] is zero"
  },
  {
    "line": 35,
    "text": "def fenxing_power(left, middle, right, fenxing=\"tmp_ding\"):",
    "annotation": "\u2705 Best Practice: Add type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      4299,
      277,
      268,
      87,
      278,
      62,
      6477,
      7,
      9464,
      11,
      3504,
      11,
      826,
      11,
      277,
      268,
      87,
      278,
      2625,
      22065,
      62,
      12083,
      1,
      2599
    ],
    "start_token": 93,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Add type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 43,
    "text": "        b = abs(middle[\"low\"] - left[\"low\"])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas Series and comparison operations could indicate financial data analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      275,
      796,
      2352,
      7,
      27171,
      14692,
      9319,
      8973,
      532,
      1364,
      14692,
      9319,
      8973,
      8
    ],
    "start_token": 117,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      7171,
      290,
      7208,
      4560,
      714,
      7603,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas Series and comparison operations could indicate financial data analysis"
  },
  {
    "line": 44,
    "text": "        c = abs(middle[\"low\"] - right[\"low\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'high' and 'low' keys exist in the Series, which may lead to KeyError if not present",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      796,
      2352,
      7,
      27171,
      14692,
      9319,
      8973,
      532,
      826,
      14692,
      9319,
      8973,
      8
    ],
    "start_token": 138,
    "end_token": 159,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      8929,
      6,
      290,
      705,
      9319,
      6,
      8251,
      2152,
      287,
      262,
      7171,
      11,
      543,
      743,
      1085,
      284,
      7383,
      12331,
      611,
      407,
      1944
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'high' and 'low' keys exist in the Series, which may lead to KeyError if not present"
  },
  {
    "line": 43,
    "text": "        b = abs(middle[\"low\"] - left[\"low\"])",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the parameters for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      275,
      796,
      2352,
      7,
      27171,
      14692,
      9319,
      8973,
      532,
      1364,
      14692,
      9319,
      8973,
      8
    ],
    "start_token": 159,
    "end_token": 180,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the parameters for better readability and maintainability"
  },
  {
    "line": 45,
    "text": "        return (a + b + c) / middle[\"close\"]",
    "annotation": "\ud83e\udde0 ML Signal: Function uses conditional logic to determine direction, a pattern useful for ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      357,
      64,
      1343,
      275,
      1343,
      269,
      8,
      1220,
      3504,
      14692,
      19836,
      8973
    ],
    "start_token": 180,
    "end_token": 200,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      26340,
      9156,
      284,
      5004,
      4571,
      11,
      257,
      3912,
      4465,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function uses conditional logic to determine direction, a pattern useful for ML models"
  },
  {
    "line": 48,
    "text": "def a_include_b(a: pd.Series, b: pd.Series) -> bool:",
    "annotation": "\ud83e\udde0 ML Signal: Function uses conditional logic to determine direction, a pattern useful for ML models",
    "confidence": 0.5,
    "tokens": [
      4299,
      257,
      62,
      17256,
      62,
      65,
      7,
      64,
      25,
      279,
      67,
      13,
      27996,
      11,
      275,
      25,
      279,
      67,
      13,
      27996,
      8,
      4613,
      20512,
      25
    ],
    "start_token": 200,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      26340,
      9156,
      284,
      5004,
      4571,
      11,
      257,
      3912,
      4465,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function uses conditional logic to determine direction, a pattern useful for ML models"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function returns a default value if no conditions are met, a pattern useful for ML models",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 224,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      5860,
      257,
      4277,
      1988,
      611,
      645,
      3403,
      389,
      1138,
      11,
      257,
      3912,
      4465,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function returns a default value if no conditions are met, a pattern useful for ML models"
  },
  {
    "line": 49,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function to compare 'high' values in dictionaries, indicating a pattern for trend analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 224,
    "end_token": 228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      8996,
      705,
      8929,
      6,
      3815,
      287,
      48589,
      3166,
      11,
      12739,
      257,
      3912,
      329,
      5182,
      3781
    ],
    "label": "ml_signal",
    "reason": "Function to compare 'high' values in dictionaries, indicating a pattern for trend analysis"
  },
  {
    "line": 50,
    "text": "    kdata a includes kdata b",
    "annotation": "\u2705 Best Practice: Function name is descriptive and follows naming conventions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      479,
      7890,
      257,
      3407,
      479,
      7890,
      275
    ],
    "start_token": 228,
    "end_token": 238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      35644,
      290,
      5679,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Function name is descriptive and follows naming conventions"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of dictionary keys to access values, assuming consistent data structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 238,
    "end_token": 238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      8251,
      284,
      1895,
      3815,
      11,
      13148,
      6414,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Use of dictionary keys to access values, assuming consistent data structure"
  },
  {
    "line": 52,
    "text": "    :param a:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for missing keys in dictionaries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      257,
      25
    ],
    "start_token": 238,
    "end_token": 245,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      4814,
      8251,
      287,
      48589,
      3166
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for missing keys in dictionaries"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to compare 'low' values in dictionaries, indicating a pattern for trend analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 245,
    "end_token": 245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      8996,
      705,
      9319,
      6,
      3815,
      287,
      48589,
      3166,
      11,
      12739,
      257,
      3912,
      329,
      5182,
      3781
    ],
    "label": "ml_signal",
    "reason": "Function to compare 'low' values in dictionaries, indicating a pattern for trend analysis"
  },
  {
    "line": 53,
    "text": "    :param b:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'low' key exists in both dictionaries without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      275,
      25
    ],
    "start_token": 245,
    "end_token": 252,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      9319,
      6,
      1994,
      7160,
      287,
      1111,
      48589,
      3166,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'low' key exists in both dictionaries without validation"
  },
  {
    "line": 54,
    "text": "    :return:",
    "annotation": "\u2705 Best Practice: Check if step is greater than or equal to the length of one_df to avoid IndexError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 252,
    "end_token": 258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2239,
      318,
      3744,
      621,
      393,
      4961,
      284,
      262,
      4129,
      286,
      530,
      62,
      7568,
      284,
      3368,
      12901,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Check if step is greater than or equal to the length of one_df to avoid IndexError."
  },
  {
    "line": 56,
    "text": "    return (a[\"high\"] >= b[\"high\"]) and (a[\"low\"] <= b[\"low\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      357,
      64,
      14692,
      8929,
      8973,
      18189,
      275,
      14692,
      8929,
      8973,
      8,
      290,
      357,
      64,
      14692,
      9319,
      8973,
      19841,
      275,
      14692,
      9319,
      8973,
      8
    ],
    "start_token": 258,
    "end_token": 285,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information."
  },
  {
    "line": 59,
    "text": "def get_direction(kdata, pre_kdata, current=Direction.up) -> Direction:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      37295,
      7,
      74,
      7890,
      11,
      662,
      62,
      74,
      7890,
      11,
      1459,
      28,
      35,
      4154,
      13,
      929,
      8,
      4613,
      41837,
      25
    ],
    "start_token": 285,
    "end_token": 308,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information."
  },
  {
    "line": 62,
    "text": "    if is_down(kdata, pre_kdata):",
    "annotation": "\ud83e\udde0 ML Signal: Identifying maximum value in a DataFrame column.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      318,
      62,
      2902,
      7,
      74,
      7890,
      11,
      662,
      62,
      74,
      7890,
      2599
    ],
    "start_token": 308,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      5415,
      1988,
      287,
      257,
      6060,
      19778,
      5721,
      13
    ],
    "label": "ml_signal",
    "reason": "Identifying maximum value in a DataFrame column."
  },
  {
    "line": 64,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame index to integer.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 324,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      6376,
      284,
      18253,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame index to integer."
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Identifying minimum value in a DataFrame column.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 324,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      5288,
      1988,
      287,
      257,
      6060,
      19778,
      5721,
      13
    ],
    "label": "ml_signal",
    "reason": "Identifying minimum value in a DataFrame column."
  },
  {
    "line": 68,
    "text": "def is_up(kdata, pre_kdata):",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame index to integer.",
    "confidence": 1.0,
    "tokens": [
      4299,
      318,
      62,
      929,
      7,
      74,
      7890,
      11,
      662,
      62,
      74,
      7890,
      2599
    ],
    "start_token": 324,
    "end_token": 337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      6376,
      284,
      18253,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame index to integer."
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u2705 Best Practice: Check the absolute difference between indices to ensure a valid range.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 337,
    "end_token": 337,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      262,
      4112,
      3580,
      1022,
      36525,
      284,
      4155,
      257,
      4938,
      2837,
      13
    ],
    "label": "best_practice",
    "reason": "Check the absolute difference between indices to ensure a valid range."
  },
  {
    "line": 75,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Modifying DataFrame in place, which can lead to side effects.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 337,
    "end_token": 337,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3401,
      4035,
      6060,
      19778,
      287,
      1295,
      11,
      543,
      460,
      1085,
      284,
      1735,
      3048,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Modifying DataFrame in place, which can lead to side effects."
  },
  {
    "line": 78,
    "text": "        logger.info(f\"coult not get fenxing by step {step}, len {len(one_df)}\")",
    "annotation": "\ud83e\udde0 ML Signal: Using an enumeration for direction.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      66,
      25955,
      407,
      651,
      277,
      268,
      87,
      278,
      416,
      2239,
      1391,
      9662,
      5512,
      18896,
      1391,
      11925,
      7,
      505,
      62,
      7568,
      38165,
      4943
    ],
    "start_token": 337,
    "end_token": 372,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      281,
      27056,
      341,
      329,
      4571,
      13
    ],
    "label": "ml_signal",
    "reason": "Using an enumeration for direction."
  },
  {
    "line": 78,
    "text": "        logger.info(f\"coult not get fenxing by step {step}, len {len(one_df)}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Modifying DataFrame in place, which can lead to side effects.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      66,
      25955,
      407,
      651,
      277,
      268,
      87,
      278,
      416,
      2239,
      1391,
      9662,
      5512,
      18896,
      1391,
      11925,
      7,
      505,
      62,
      7568,
      38165,
      4943
    ],
    "start_token": 372,
    "end_token": 407,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3401,
      4035,
      6060,
      19778,
      287,
      1295,
      11,
      543,
      460,
      1085,
      284,
      1735,
      3048,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Modifying DataFrame in place, which can lead to side effects."
  },
  {
    "line": 92,
    "text": "        if ding_index > di_index:",
    "annotation": "\ud83e\udde0 ML Signal: Using an enumeration for direction.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      44852,
      62,
      9630,
      1875,
      2566,
      62,
      9630,
      25
    ],
    "start_token": 407,
    "end_token": 423,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      281,
      27056,
      341,
      329,
      4571,
      13
    ],
    "label": "ml_signal",
    "reason": "Using an enumeration for direction."
  },
  {
    "line": 92,
    "text": "        if ding_index > di_index:",
    "annotation": "\ud83e\udde0 ML Signal: Returning a complex data structure with multiple elements.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      44852,
      62,
      9630,
      1875,
      2566,
      62,
      9630,
      25
    ],
    "start_token": 423,
    "end_token": 439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      3716,
      1366,
      4645,
      351,
      3294,
      4847,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a complex data structure with multiple elements."
  },
  {
    "line": 105,
    "text": "            start_index = di_index",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      9630,
      796,
      2566,
      62,
      9630
    ],
    "start_token": 439,
    "end_token": 457,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information."
  },
  {
    "line": 107,
    "text": "            interval = di_index - ding_index",
    "annotation": "\u2705 Best Practice: Recursive call with an incremented step to find the desired result.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16654,
      796,
      2566,
      62,
      9630,
      532,
      44852,
      62,
      9630
    ],
    "start_token": 457,
    "end_token": 477,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3311,
      30753,
      869,
      351,
      281,
      1253,
      12061,
      2239,
      284,
      1064,
      262,
      10348,
      1255,
      13
    ],
    "label": "best_practice",
    "reason": "Recursive call with an incremented step to find the desired result."
  },
  {
    "line": 108,
    "text": "        return (",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      357
    ],
    "start_token": 477,
    "end_token": 486,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame without validation"
  },
  {
    "line": 110,
    "text": "                state=fenxing,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1181,
      28,
      41037,
      87,
      278,
      11
    ],
    "start_token": 486,
    "end_token": 507,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame without validation"
  },
  {
    "line": 121,
    "text": "    else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 507,
    "end_token": 512,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame without validation"
  },
  {
    "line": 123,
    "text": "        return handle_first_fenxing(one_df, step=step + 1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      5412,
      62,
      11085,
      62,
      41037,
      87,
      278,
      7,
      505,
      62,
      7568,
      11,
      2239,
      28,
      9662,
      1343,
      352,
      8
    ],
    "start_token": 512,
    "end_token": 538,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame without validation"
  },
  {
    "line": 128,
    "text": "    zhongshu_change = None",
    "annotation": "\u2705 Best Practice: Explicitly returning multiple values improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      796,
      6045
    ],
    "start_token": 538,
    "end_token": 550,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      3294,
      3815,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly returning multiple values improves readability"
  },
  {
    "line": 125,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific parameters and default values",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 550,
    "end_token": 550,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      10007,
      290,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific parameters and default values"
  },
  {
    "line": 127,
    "text": "    zhongshu = None",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the first element's state in a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      796,
      6045
    ],
    "start_token": 550,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      717,
      5002,
      338,
      1181,
      287,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Accessing the first element's state in a list"
  },
  {
    "line": 129,
    "text": "    interval = None",
    "annotation": "\ud83e\udde0 ML Signal: Accessing specific attributes of objects in a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16654,
      796,
      6045
    ],
    "start_token": 560,
    "end_token": 566,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2176,
      12608,
      286,
      5563,
      287,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Accessing specific attributes of objects in a list"
  },
  {
    "line": 134,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a specific state value",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 566,
    "end_token": 566,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      2176,
      1181,
      1988
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a specific state value"
  },
  {
    "line": 135,
    "text": "        interval = points[3][2] - points[0][2]",
    "annotation": "\ud83e\udde0 ML Signal: Tuple creation for range representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16654,
      796,
      2173,
      58,
      18,
      7131,
      17,
      60,
      532,
      2173,
      58,
      15,
      7131,
      17,
      60
    ],
    "start_token": 566,
    "end_token": 588,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      309,
      29291,
      6282,
      329,
      2837,
      10552
    ],
    "label": "ml_signal",
    "reason": "Tuple creation for range representation"
  },
  {
    "line": 139,
    "text": "            range = intersect((points[0][1], points[1][1]), (points[2][1], points[3][1]))",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific arguments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2837,
      796,
      36177,
      19510,
      13033,
      58,
      15,
      7131,
      16,
      4357,
      2173,
      58,
      16,
      7131,
      16,
      46570,
      357,
      13033,
      58,
      17,
      7131,
      16,
      4357,
      2173,
      58,
      18,
      7131,
      16,
      60,
      4008
    ],
    "start_token": 588,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      7159
    ],
    "label": "ml_signal",
    "reason": "Function call with specific arguments"
  },
  {
    "line": 147,
    "text": "                points = points[-1:]",
    "annotation": "\ud83e\udde0 ML Signal: Returning a default or previous state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2173,
      796,
      2173,
      58,
      12,
      16,
      47715
    ],
    "start_token": 629,
    "end_token": 651,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      4277,
      393,
      2180,
      1181
    ],
    "label": "ml_signal",
    "reason": "Returning a default or previous state"
  },
  {
    "line": 142,
    "text": "                # \u8bb0\u5f55\u4e2d\u67a2",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with multiple parameters, indicating a complex operation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      106,
      108,
      37605,
      243,
      40792,
      162,
      252,
      95
    ],
    "start_token": 651,
    "end_token": 676,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      3294,
      10007,
      11,
      12739,
      257,
      3716,
      4905
    ],
    "label": "ml_signal",
    "reason": "Function definition with multiple parameters, indicating a complex operation"
  },
  {
    "line": 144,
    "text": "                zhongshu_change = abs(y1 - y2) / y1",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on function call result",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      796,
      2352,
      7,
      88,
      16,
      532,
      331,
      17,
      8,
      1220,
      331,
      16
    ],
    "start_token": 676,
    "end_token": 710,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2163,
      869,
      1255
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on function call result"
  },
  {
    "line": 145,
    "text": "                acc_df.loc[end_index, zhongshu_col] = zhongshu",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on enum comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      13,
      17946,
      58,
      437,
      62,
      9630,
      11,
      1976,
      71,
      506,
      1477,
      84,
      62,
      4033,
      60,
      796,
      1976,
      71,
      506,
      1477,
      84
    ],
    "start_token": 710,
    "end_token": 749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      33829,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on enum comparison"
  },
  {
    "line": 148,
    "text": "            else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 749,
    "end_token": 762,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      3815,
      460,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame values can lead to unintended side effects"
  },
  {
    "line": 150,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 762,
    "end_token": 771,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      3815,
      460,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame values can lead to unintended side effects"
  },
  {
    "line": 153,
    "text": "            if range:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on function call result",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2837,
      25
    ],
    "start_token": 771,
    "end_token": 785,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2163,
      869,
      1255
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on function call result"
  },
  {
    "line": 155,
    "text": "                # \u8bb0\u5f55\u4e2d\u67a2",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on enum comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      106,
      108,
      37605,
      243,
      40792,
      162,
      252,
      95
    ],
    "start_token": 785,
    "end_token": 810,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      33829,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on enum comparison"
  },
  {
    "line": 157,
    "text": "                zhongshu_change = abs(y1 - y2) / y1",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      796,
      2352,
      7,
      88,
      16,
      532,
      331,
      17,
      8,
      1220,
      331,
      16
    ],
    "start_token": 810,
    "end_token": 844,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      3815,
      460,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame values can lead to unintended side effects"
  },
  {
    "line": 160,
    "text": "                acc_df.loc[end_index, zhongshu_change_col] = zhongshu_change",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame values can lead to unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      13,
      17946,
      58,
      437,
      62,
      9630,
      11,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      62,
      4033,
      60,
      796,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803
    ],
    "start_token": 844,
    "end_token": 887,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      3815,
      460,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame values can lead to unintended side effects"
  },
  {
    "line": 153,
    "text": "            if range:",
    "annotation": "\u2705 Best Practice: Class definition should inherit from object explicitly in Python 2.x, but in Python 3.x it's optional as all classes are new-style by default.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2837,
      25
    ],
    "start_token": 887,
    "end_token": 901,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      16955,
      422,
      2134,
      11777,
      287,
      11361,
      362,
      13,
      87,
      11,
      475,
      287,
      11361,
      513,
      13,
      87,
      340,
      338,
      11902,
      355,
      477,
      6097,
      389,
      649,
      12,
      7635,
      416,
      4277,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should inherit from object explicitly in Python 2.x, but in Python 3.x it's optional as all classes are new-style by default."
  },
  {
    "line": 155,
    "text": "                # \u8bb0\u5f55\u4e2d\u67a2",
    "annotation": "\u2705 Best Practice: Check for specific types using isinstance for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      106,
      108,
      37605,
      243,
      40792,
      162,
      252,
      95
    ],
    "start_token": 901,
    "end_token": 926,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      2176,
      3858,
      1262,
      318,
      39098,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Check for specific types using isinstance for better readability and maintainability"
  },
  {
    "line": 157,
    "text": "                zhongshu_change = abs(y1 - y2) / y1",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of pandas Series to dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      796,
      2352,
      7,
      88,
      16,
      532,
      331,
      17,
      8,
      1220,
      331,
      16
    ],
    "start_token": 926,
    "end_token": 960,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      19798,
      292,
      7171,
      284,
      22155
    ],
    "label": "ml_signal",
    "reason": "Conversion of pandas Series to dictionary"
  },
  {
    "line": 160,
    "text": "                acc_df.loc[end_index, zhongshu_change_col] = zhongshu_change",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of pandas Timestamp to string with specific format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      697,
      62,
      7568,
      13,
      17946,
      58,
      437,
      62,
      9630,
      11,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803,
      62,
      4033,
      60,
      796,
      1976,
      71,
      506,
      1477,
      84,
      62,
      3803
    ],
    "start_token": 960,
    "end_token": 1003,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      19798,
      292,
      5045,
      27823,
      284,
      4731,
      351,
      2176,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of pandas Timestamp to string with specific format"
  },
  {
    "line": 162,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the value of an Enum",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1003,
    "end_token": 1016,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      1988,
      286,
      281,
      2039,
      388
    ],
    "label": "ml_signal",
    "reason": "Accessing the value of an Enum"
  },
  {
    "line": 166,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of a Bean object to dictionary",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1016,
    "end_token": 1016,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      257,
      26510,
      2134,
      284,
      22155
    ],
    "label": "ml_signal",
    "reason": "Conversion of a Bean object to dictionary"
  },
  {
    "line": 169,
    "text": "    # 1\u7b14\u533a\u95f4",
    "annotation": "\u2705 Best Practice: Use of superclass method for default behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      352,
      163,
      105,
      242,
      44293,
      118,
      29785,
      112
    ],
    "start_token": 1016,
    "end_token": 1028,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      4871,
      2446,
      329,
      4277,
      4069
    ],
    "label": "best_practice",
    "reason": "Use of superclass method for default behavior"
  },
  {
    "line": 165,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function for decoding dictionary to object, useful for ML models to understand data transformation patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1028,
    "end_token": 1028,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      39938,
      22155,
      284,
      2134,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      1833,
      1366,
      13389,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function for decoding dictionary to object, useful for ML models to understand data transformation patterns"
  },
  {
    "line": 166,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive function name to indicate the purpose of the function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1028,
    "end_token": 1028,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      284,
      7603,
      262,
      4007,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name to indicate the purpose of the function"
  },
  {
    "line": 167,
    "text": "def handle_duan(fenxing_list: List[Fenxing], pre_duan_state=\"yi\"):",
    "annotation": "\u2705 Best Practice: Use of keyword arguments in object instantiation for clarity",
    "confidence": 0.5,
    "tokens": [
      4299,
      5412,
      62,
      646,
      272,
      7,
      41037,
      87,
      278,
      62,
      4868,
      25,
      7343,
      58,
      37,
      268,
      87,
      278,
      4357,
      662,
      62,
      646,
      272,
      62,
      5219,
      2625,
      48111,
      1,
      2599
    ],
    "start_token": 1028,
    "end_token": 1057,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      21179,
      7159,
      287,
      2134,
      9113,
      3920,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of keyword arguments in object instantiation for clarity"
  },
  {
    "line": 168,
    "text": "    state = fenxing_list[0].state",
    "annotation": "\ud83e\udde0 ML Signal: Function uses dictionary keys to access values, indicating a pattern of data structure usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1181,
      796,
      277,
      268,
      87,
      278,
      62,
      4868,
      58,
      15,
      4083,
      5219
    ],
    "start_token": 1057,
    "end_token": 1072,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      22155,
      8251,
      284,
      1895,
      3815,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4645,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function uses dictionary keys to access values, indicating a pattern of data structure usage."
  },
  {
    "line": 169,
    "text": "    # 1\u7b14\u533a\u95f4",
    "annotation": "\u2705 Best Practice: Ensure that the dictionary contains the expected keys to avoid KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      352,
      163,
      105,
      242,
      44293,
      118,
      29785,
      112
    ],
    "start_token": 1072,
    "end_token": 1084,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      22155,
      4909,
      262,
      2938,
      8251,
      284,
      3368,
      7383,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the dictionary contains the expected keys to avoid KeyError."
  },
  {
    "line": 169,
    "text": "    # 1\u7b14\u533a\u95f4",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module, which improves code maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      352,
      163,
      105,
      242,
      44293,
      118,
      29785,
      112
    ],
    "start_token": 1084,
    "end_token": 1096,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      11,
      543,
      19575,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module, which improves code maintainability."
  }
]
[
  {
    "line": 4,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TechnicalFactor suggests a pattern for feature engineering in financial data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5,
    "end_token": 5,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      20671,
      41384,
      5644,
      257,
      3912,
      329,
      3895,
      8705,
      287,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TechnicalFactor suggests a pattern for feature engineering in financial data"
  },
  {
    "line": 8,
    "text": "from zvt.factors.technical_factor import TechnicalFactor",
    "annotation": "\ud83e\udde0 ML Signal: Use of a transformer object indicates a pattern of data transformation",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      47944,
      62,
      31412,
      1330,
      20671,
      41384
    ],
    "start_token": 5,
    "end_token": 18,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      47385,
      2134,
      9217,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of a transformer object indicates a pattern of data transformation"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing class variables directly can improve readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 18,
    "end_token": 18,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      1398,
      9633,
      3264,
      460,
      2987,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initializing class variables directly can improve readability and maintainability"
  },
  {
    "line": 8,
    "text": "from zvt.factors.technical_factor import TechnicalFactor",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      22584,
      669,
      13,
      47944,
      62,
      31412,
      1330,
      20671,
      41384
    ],
    "start_token": 18,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly returning None improves code clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 31,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6045,
      19575,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly returning None improves code clarity"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Specify the return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 31,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Specify the return type for better readability and maintainability"
  },
  {
    "line": 12,
    "text": "    transformer = MacdTransformer(count_live_dead=True)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing specific columns from a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47385,
      796,
      4100,
      67,
      8291,
      16354,
      7,
      9127,
      62,
      12583,
      62,
      25124,
      28,
      17821,
      8
    ],
    "start_token": 31,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2176,
      15180,
      422,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing specific columns from a DataFrame"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Use list comprehension for concise and efficient list creation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 49,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      35915,
      329,
      35327,
      290,
      6942,
      1351,
      6282
    ],
    "label": "best_practice",
    "reason": "Use list comprehension for concise and efficient list creation"
  },
  {
    "line": 12,
    "text": "    transformer = MacdTransformer(count_live_dead=True)",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47385,
      796,
      4100,
      67,
      8291,
      16354,
      7,
      9127,
      62,
      12583,
      62,
      25124,
      28,
      17821,
      8
    ],
    "start_token": 49,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 14,
    "text": "    def drawer_factor_df_list(self) -> Optional[List[pd.DataFrame]]:",
    "annotation": "\ud83e\udde0 ML Signal: Returns a dictionary with specific keys and values, indicating a pattern in data representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      33451,
      62,
      31412,
      62,
      7568,
      62,
      4868,
      7,
      944,
      8,
      4613,
      32233,
      58,
      8053,
      58,
      30094,
      13,
      6601,
      19778,
      60,
      5974
    ],
    "start_token": 67,
    "end_token": 92,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      22155,
      351,
      2176,
      8251,
      290,
      3815,
      11,
      12739,
      257,
      3912,
      287,
      1366,
      10552
    ],
    "label": "ml_signal",
    "reason": "Returns a dictionary with specific keys and values, indicating a pattern in data representation"
  },
  {
    "line": 15,
    "text": "        return None",
    "annotation": "\u2705 Best Practice: Add a docstring to describe the purpose and usage of the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 92,
    "end_token": 101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Add a docstring to describe the purpose and usage of the class"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method overriding in class inheritance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 101,
    "end_token": 101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      44987,
      287,
      1398,
      24155
    ],
    "label": "ml_signal",
    "reason": "Method overriding in class inheritance"
  },
  {
    "line": 18,
    "text": "        return [self.factor_df[[\"diff\", \"dea\", \"macd\"]]]",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame column selection and transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      685,
      944,
      13,
      31412,
      62,
      7568,
      58,
      14692,
      26069,
      1600,
      366,
      2934,
      64,
      1600,
      366,
      20285,
      67,
      8973,
      11907
    ],
    "start_token": 101,
    "end_token": 128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      5721,
      6356,
      290,
      13389
    ],
    "label": "ml_signal",
    "reason": "DataFrame column selection and transformation"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u2705 Best Practice: Use to_frame() for creating a DataFrame from a Series",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 128,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      284,
      62,
      14535,
      3419,
      329,
      4441,
      257,
      6060,
      19778,
      422,
      257,
      7171
    ],
    "label": "best_practice",
    "reason": "Use to_frame() for creating a DataFrame from a Series"
  },
  {
    "line": 18,
    "text": "        return [self.factor_df[[\"diff\", \"dea\", \"macd\"]]]",
    "annotation": "\u2705 Best Practice: Class should have a docstring explaining its purpose and usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      685,
      944,
      13,
      31412,
      62,
      7568,
      58,
      14692,
      26069,
      1600,
      366,
      2934,
      64,
      1600,
      366,
      20285,
      67,
      8973,
      11907
    ],
    "start_token": 128,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class should have a docstring explaining its purpose and usage"
  },
  {
    "line": 20,
    "text": "    def drawer_sub_col_chart(self) -> Optional[dict]:",
    "annotation": "\u2705 Best Practice: Class variables should have comments explaining their purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      33451,
      62,
      7266,
      62,
      4033,
      62,
      40926,
      7,
      944,
      8,
      4613,
      32233,
      58,
      11600,
      5974
    ],
    "start_token": 155,
    "end_token": 174,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      9633,
      815,
      423,
      3651,
      11170,
      511,
      4007
    ],
    "label": "best_practice",
    "reason": "Class variables should have comments explaining their purpose"
  },
  {
    "line": 21,
    "text": "        return {\"diff\": \"line\", \"dea\": \"line\", \"macd\": \"bar\"}",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures base functionality is executed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      19779,
      26069,
      1298,
      366,
      1370,
      1600,
      366,
      2934,
      64,
      1298,
      366,
      1370,
      1600,
      366,
      20285,
      67,
      1298,
      366,
      5657,
      20662
    ],
    "start_token": 174,
    "end_token": 202,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      2779,
      11244,
      318,
      10945,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures base functionality is executed."
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame and groupby operation indicates data processing pattern.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 202,
    "end_token": 202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      290,
      1448,
      1525,
      4905,
      9217,
      1366,
      7587,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame and groupby operation indicates data processing pattern."
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operation is common in time series analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 202,
    "end_token": 202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4905,
      318,
      2219,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operation is common in time series analysis."
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for custom aggregation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 202,
    "end_token": 202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      2183,
      46500,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for custom aggregation."
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Resetting index improves DataFrame consistency after groupby operations.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 202,
    "end_token": 202,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      19575,
      6060,
      19778,
      15794,
      706,
      1448,
      1525,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting index improves DataFrame consistency after groupby operations."
  },
  {
    "line": 34,
    "text": "        super().compute_result()",
    "annotation": "\ud83e\udde0 ML Signal: Assignment back to DataFrame column indicates data transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      5589,
      1133,
      62,
      20274,
      3419
    ],
    "start_token": 202,
    "end_token": 216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      736,
      284,
      6060,
      19778,
      5721,
      9217,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Assignment back to DataFrame column indicates data transformation."
  },
  {
    "line": 30,
    "text": "class KeepBullFactor(BullFactor):",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from MacdFactor suggests a pattern for financial analysis",
    "confidence": 0.5,
    "tokens": [
      4871,
      9175,
      39549,
      41384,
      7,
      39549,
      41384,
      2599
    ],
    "start_token": 216,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      4100,
      67,
      41384,
      5644,
      257,
      3912,
      329,
      3176,
      3781
    ],
    "label": "ml_signal",
    "reason": "Inheritance from MacdFactor suggests a pattern for financial analysis"
  },
  {
    "line": 31,
    "text": "    keep_window = 10",
    "annotation": "\ud83e\udde0 ML Signal: The pattern attribute could be used to identify specific market conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1394,
      62,
      17497,
      796,
      838
    ],
    "start_token": 224,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      3912,
      11688,
      714,
      307,
      973,
      284,
      5911,
      2176,
      1910,
      3403
    ],
    "label": "ml_signal",
    "reason": "The pattern attribute could be used to identify specific market conditions"
  },
  {
    "line": 33,
    "text": "    def compute_result(self):",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures base class functionality is preserved.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      24061,
      62,
      20274,
      7,
      944,
      2599
    ],
    "start_token": 232,
    "end_token": 242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      2779,
      1398,
      11244,
      318,
      17232,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures base class functionality is preserved."
  },
  {
    "line": 35,
    "text": "        df = (",
    "annotation": "\u2705 Best Practice: Using shift() to access previous row values is a common and efficient pattern in data manipulation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      357
    ],
    "start_token": 242,
    "end_token": 252,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      6482,
      3419,
      284,
      1895,
      2180,
      5752,
      3815,
      318,
      257,
      2219,
      290,
      6942,
      3912,
      287,
      1366,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Using shift() to access previous row values is a common and efficient pattern in data manipulation."
  },
  {
    "line": 37,
    "text": "            .groupby(level=0)",
    "annotation": "\ud83e\udde0 ML Signal: Pattern matching on DataFrame columns can indicate feature engineering for ML models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      8094,
      1525,
      7,
      5715,
      28,
      15,
      8
    ],
    "start_token": 252,
    "end_token": 271,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      12336,
      319,
      6060,
      19778,
      15180,
      460,
      7603,
      3895,
      8705,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern matching on DataFrame columns can indicate feature engineering for ML models."
  },
  {
    "line": 39,
    "text": "            .apply(lambda x: np.logical_and.reduce(x))",
    "annotation": "\u2705 Best Practice: Converting a Series to a DataFrame with a specific column name improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      39014,
      7,
      50033,
      2124,
      25,
      45941,
      13,
      6404,
      605,
      62,
      392,
      13,
      445,
      7234,
      7,
      87,
      4008
    ],
    "start_token": 271,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      257,
      7171,
      284,
      257,
      6060,
      19778,
      351,
      257,
      2176,
      5721,
      1438,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Converting a Series to a DataFrame with a specific column name improves code readability."
  },
  {
    "line": 40,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 300,
    "end_token": 308,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 42,
    "text": "        self.result_df[\"filter_result\"] = df",
    "annotation": "\u2705 Best Practice: Converting a Series to a DataFrame with a specific column name enhances clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      20274,
      62,
      7568,
      14692,
      24455,
      62,
      20274,
      8973,
      796,
      47764
    ],
    "start_token": 308,
    "end_token": 327,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      257,
      7171,
      284,
      257,
      6060,
      19778,
      351,
      257,
      2176,
      5721,
      1438,
      32479,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Converting a Series to a DataFrame with a specific column name enhances clarity."
  },
  {
    "line": 45,
    "text": "# \u91d1\u53c9 \u6b7b\u53c9 \u6301\u7eed\u65f6\u95f4 \u5207\u6362\u70b9",
    "annotation": "\ud83e\udde0 ML Signal: Entry point for script execution, common pattern for standalone scripts.",
    "confidence": 0.5,
    "tokens": [
      2,
      16268,
      229,
      239,
      20998,
      231,
      10545,
      255,
      119,
      20998,
      231,
      10545,
      234,
      223,
      163,
      119,
      255,
      33768,
      114,
      29785,
      112,
      10263,
      230,
      229,
      162,
      235,
      95,
      163,
      224,
      117
    ],
    "start_token": 327,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21617,
      966,
      329,
      4226,
      9706,
      11,
      2219,
      3912,
      329,
      27669,
      14750,
      13
    ],
    "label": "ml_signal",
    "reason": "Entry point for script execution, common pattern for standalone scripts."
  },
  {
    "line": 45,
    "text": "# \u91d1\u53c9 \u6b7b\u53c9 \u6301\u7eed\u65f6\u95f4 \u5207\u6362\u70b9",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters, useful for understanding usage patterns.",
    "confidence": 0.5,
    "tokens": [
      2,
      16268,
      229,
      239,
      20998,
      231,
      10545,
      255,
      119,
      20998,
      231,
      10545,
      234,
      223,
      163,
      119,
      255,
      33768,
      114,
      29785,
      112,
      10263,
      230,
      229,
      162,
      235,
      95,
      163,
      224,
      117
    ],
    "start_token": 357,
    "end_token": 387,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007,
      11,
      4465,
      329,
      4547,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters, useful for understanding usage patterns."
  },
  {
    "line": 45,
    "text": "# \u91d1\u53c9 \u6b7b\u53c9 \u6301\u7eed\u65f6\u95f4 \u5207\u6362\u70b9",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern, often used in fluent interfaces.",
    "confidence": 0.5,
    "tokens": [
      2,
      16268,
      229,
      239,
      20998,
      231,
      10545,
      255,
      119,
      20998,
      231,
      10545,
      234,
      223,
      163,
      119,
      255,
      33768,
      114,
      29785,
      112,
      10263,
      230,
      229,
      162,
      235,
      95,
      163,
      224,
      117
    ],
    "start_token": 387,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      11,
      1690,
      973,
      287,
      43472,
      20314,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern, often used in fluent interfaces."
  },
  {
    "line": 45,
    "text": "# \u91d1\u53c9 \u6b7b\u53c9 \u6301\u7eed\u65f6\u95f4 \u5207\u6362\u70b9",
    "annotation": "\u2705 Best Practice: Defining __all__ for module exports improves code maintainability and clarity.",
    "confidence": 0.5,
    "tokens": [
      2,
      16268,
      229,
      239,
      20998,
      231,
      10545,
      255,
      119,
      20998,
      231,
      10545,
      234,
      223,
      163,
      119,
      255,
      33768,
      114,
      29785,
      112,
      10263,
      230,
      229,
      162,
      235,
      95,
      163,
      224,
      117
    ],
    "start_token": 417,
    "end_token": 447,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      329,
      8265,
      15319,
      19575,
      2438,
      5529,
      1799,
      290,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Defining __all__ for module exports improves code maintainability and clarity."
  }
]
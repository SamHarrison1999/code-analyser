[
  {
    "line": 23,
    "text": "    TIME_FORMAT_MINUTE2,",
    "annotation": "\u2705 Best Practice: Use of logging for tracking and debugging purposes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20460,
      62,
      21389,
      1404,
      62,
      23678,
      37780,
      17,
      11
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      290,
      28769,
      4959
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking and debugging purposes"
  },
  {
    "line": 24,
    "text": "    now_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Function to transform entity_id into a specific code format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      783,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 12,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      6121,
      9312,
      62,
      312,
      656,
      257,
      2176,
      2438,
      5794
    ],
    "label": "ml_signal",
    "reason": "Function to transform entity_id into a specific code format"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of decode_entity_id function to extract components",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      36899,
      62,
      26858,
      62,
      312,
      2163,
      284,
      7925,
      6805
    ],
    "label": "ml_signal",
    "reason": "Usage of decode_entity_id function to extract components"
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting"
  },
  {
    "line": 27,
    "text": "# https://dict.thinktrader.net/nativeApi/start_now.html?id=e2M5nZ",
    "annotation": "\ud83e\udde0 ML Signal: Function for converting qmt_code to a specific entity ID format",
    "confidence": 0.5,
    "tokens": [
      2,
      3740,
      1378,
      11600,
      13,
      14925,
      2213,
      5067,
      13,
      3262,
      14,
      30191,
      32,
      14415,
      14,
      9688,
      62,
      2197,
      13,
      6494,
      30,
      312,
      28,
      68,
      17,
      44,
      20,
      77,
      57
    ],
    "start_token": 20,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      23202,
      10662,
      16762,
      62,
      8189,
      284,
      257,
      2176,
      9312,
      4522,
      5794
    ],
    "label": "ml_signal",
    "reason": "Function for converting qmt_code to a specific entity ID format"
  },
  {
    "line": 29,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\ud83e\udde0 ML Signal: Splitting a string by a delimiter to extract components",
    "confidence": 0.5,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 49,
    "end_token": 62,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      257,
      4731,
      416,
      257,
      46728,
      2676,
      284,
      7925,
      6805
    ],
    "label": "ml_signal",
    "reason": "Splitting a string by a delimiter to extract components"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting string to lowercase for normalization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 62,
    "end_token": 62,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      4731,
      284,
      2793,
      7442,
      329,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Converting string to lowercase for normalization"
  },
  {
    "line": 33,
    "text": "    _, exchange, code = decode_entity_id(entity_id=entity_id)",
    "annotation": "\ud83e\udde0 ML Signal: String formatting to create a standardized entity ID",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      11,
      5163,
      11,
      2438,
      796,
      36899,
      62,
      26858,
      62,
      312,
      7,
      26858,
      62,
      312,
      28,
      26858,
      62,
      312,
      8
    ],
    "start_token": 62,
    "end_token": 85,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      284,
      2251,
      257,
      25713,
      9312,
      4522
    ],
    "label": "ml_signal",
    "reason": "String formatting to create a standardized entity ID"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive function name for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 85,
    "end_token": 85,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name for clarity"
  },
  {
    "line": 33,
    "text": "    _, exchange, code = decode_entity_id(entity_id=entity_id)",
    "annotation": "\u2705 Best Practice: Use of enum for adjust_type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      11,
      5163,
      11,
      2438,
      796,
      36899,
      62,
      26858,
      62,
      312,
      7,
      26858,
      62,
      312,
      28,
      26858,
      62,
      312,
      8
    ],
    "start_token": 85,
    "end_token": 108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33829,
      329,
      4532,
      62,
      4906,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of enum for adjust_type improves code readability and maintainability"
  },
  {
    "line": 40,
    "text": "    return f\"stock_{exchange}_{code}\"",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      277,
      1,
      13578,
      23330,
      1069,
      3803,
      92,
      23330,
      8189,
      36786
    ],
    "start_token": 108,
    "end_token": 122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 122,
    "end_token": 122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 44,
    "text": "    if adjust_type == AdjustType.qfq:",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      4532,
      62,
      4906,
      6624,
      20292,
      6030,
      13,
      80,
      69,
      80,
      25
    ],
    "start_token": 122,
    "end_token": 137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 47,
    "text": "        return \"back\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Broad exception handling without specifying exception type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      1891,
      1
    ],
    "start_token": 137,
    "end_token": 148,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9765,
      6631,
      9041,
      1231,
      31577,
      6631,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Broad exception handling without specifying exception type"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 148,
    "end_token": 148,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 53,
    "text": "    exchange = stock_detail[\"ExchangeID\"].lower()",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5163,
      796,
      4283,
      62,
      49170,
      14692,
      3109,
      3803,
      2389,
      1,
      4083,
      21037,
      3419
    ],
    "start_token": 148,
    "end_token": 164,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 53,
    "text": "    exchange = stock_detail[\"ExchangeID\"].lower()",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5163,
      796,
      4283,
      62,
      49170,
      14692,
      3109,
      3803,
      2389,
      1,
      4083,
      21037,
      3419
    ],
    "start_token": 164,
    "end_token": 180,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 53,
    "text": "    exchange = stock_detail[\"ExchangeID\"].lower()",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5163,
      796,
      4283,
      62,
      49170,
      14692,
      3109,
      3803,
      2389,
      1,
      4083,
      21037,
      3419
    ],
    "start_token": 180,
    "end_token": 196,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 53,
    "text": "    exchange = stock_detail[\"ExchangeID\"].lower()",
    "annotation": "\ud83e\udde0 ML Signal: Extracting and transforming data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5163,
      796,
      4283,
      62,
      49170,
      14692,
      3109,
      3803,
      2389,
      1,
      4083,
      21037,
      3419
    ],
    "start_token": 196,
    "end_token": 212,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      290,
      25449,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting and transforming data from a dictionary"
  },
  {
    "line": 53,
    "text": "    exchange = stock_detail[\"ExchangeID\"].lower()",
    "annotation": "\ud83e\udde0 ML Signal: Constructing a unique identifier for an entity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5163,
      796,
      4283,
      62,
      49170,
      14692,
      3109,
      3803,
      2389,
      1,
      4083,
      21037,
      3419
    ],
    "start_token": 212,
    "end_token": 228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      278,
      257,
      3748,
      27421,
      329,
      281,
      9312
    ],
    "label": "ml_signal",
    "reason": "Constructing a unique identifier for an entity"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a utility function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 228,
    "end_token": 228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      10361,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a utility function"
  },
  {
    "line": 71,
    "text": "        \"id\": entity_id,",
    "annotation": "\ud83e\udde0 ML Signal: API call to fetch data, indicating integration with external services",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      9312,
      62,
      312,
      11
    ],
    "start_token": 228,
    "end_token": 242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      284,
      21207,
      1366,
      11,
      12739,
      11812,
      351,
      7097,
      2594
    ],
    "label": "ml_signal",
    "reason": "API call to fetch data, indicating integration with external services"
  },
  {
    "line": 73,
    "text": "        \"timestamp\": list_date,",
    "annotation": "\ud83e\udde0 ML Signal: Data transformation using map, indicating data processing pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      1351,
      62,
      4475,
      11
    ],
    "start_token": 242,
    "end_token": 257,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      13389,
      1262,
      3975,
      11,
      12739,
      1366,
      7587,
      3912
    ],
    "label": "ml_signal",
    "reason": "Data transformation using map, indicating data processing pattern"
  },
  {
    "line": 75,
    "text": "        \"exchange\": exchange,",
    "annotation": "\ud83e\udde0 ML Signal: API call to fetch data, indicating integration with external services",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      5163,
      11
    ],
    "start_token": 257,
    "end_token": 270,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      284,
      21207,
      1366,
      11,
      12739,
      11812,
      351,
      7097,
      2594
    ],
    "label": "ml_signal",
    "reason": "API call to fetch data, indicating integration with external services"
  },
  {
    "line": 77,
    "text": "        \"name\": name,",
    "annotation": "\u2705 Best Practice: Using += for list concatenation for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      1438,
      11
    ],
    "start_token": 270,
    "end_token": 282,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      15853,
      329,
      1351,
      1673,
      36686,
      341,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using += for list concatenation for better readability"
  },
  {
    "line": 79,
    "text": "        \"end_date\": end_date,",
    "annotation": "\ud83e\udde0 ML Signal: Returning a list, indicating the function's output type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      437,
      62,
      4475,
      1298,
      886,
      62,
      4475,
      11
    ],
    "start_token": 282,
    "end_token": 298,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1351,
      11,
      12739,
      262,
      2163,
      338,
      5072,
      2099
    ],
    "label": "ml_signal",
    "reason": "Returning a list, indicating the function's output type"
  },
  {
    "line": 85,
    "text": "    }",
    "annotation": "\u2705 Best Practice: Use f-string for consistent and readable string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 298,
    "end_token": 302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      6414,
      290,
      31744,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use f-string for consistent and readable string formatting"
  },
  {
    "line": 105,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df is not None before accessing its elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 302,
    "end_token": 311,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      318,
      407,
      6045,
      878,
      22534,
      663,
      4847
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df is not None before accessing its elements"
  },
  {
    "line": 108,
    "text": "            entity_id = f\"stock_{exchange}_{code}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'circulating_capital' and 'total_capital' keys exist in latest_data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      312,
      796,
      277,
      1,
      13578,
      23330,
      1069,
      3803,
      92,
      23330,
      8189,
      36786
    ],
    "start_token": 311,
    "end_token": 336,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      21170,
      8306,
      62,
      27544,
      6,
      290,
      705,
      23350,
      62,
      27544,
      6,
      8251,
      2152,
      287,
      3452,
      62,
      7890
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'circulating_capital' and 'total_capital' keys exist in latest_data"
  },
  {
    "line": 112,
    "text": "                entity = datas[0]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure tick[stock] is not None before accessing its elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      796,
      19395,
      58,
      15,
      60
    ],
    "start_token": 336,
    "end_token": 357,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4378,
      58,
      13578,
      60,
      318,
      407,
      6045,
      878,
      22534,
      663,
      4847
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure tick[stock] is not None before accessing its elements"
  },
  {
    "line": 114,
    "text": "                entity = {",
    "annotation": "\u2705 Best Practice: Use tuple for multiple startswith checks for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      796,
      1391
    ],
    "start_token": 357,
    "end_token": 375,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      46545,
      329,
      3294,
      923,
      2032,
      342,
      8794,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use tuple for multiple startswith checks for readability"
  },
  {
    "line": 123,
    "text": "            # xtdata.download_financial_data(stock_list=[stock], table_list=[\"Capital\"])",
    "annotation": "\u2705 Best Practice: Use round for consistent numerical precision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      742,
      7890,
      13,
      15002,
      62,
      46921,
      62,
      7890,
      7,
      13578,
      62,
      4868,
      41888,
      13578,
      4357,
      3084,
      62,
      4868,
      28,
      14692,
      39315,
      8973,
      8
    ],
    "start_token": 375,
    "end_token": 411,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2835,
      329,
      6414,
      29052,
      15440
    ],
    "label": "best_practice",
    "reason": "Use round for consistent numerical precision"
  },
  {
    "line": 128,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list of entities to DataFrame, useful for ML model training",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 411,
    "end_token": 423,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      286,
      12066,
      284,
      6060,
      19778,
      11,
      4465,
      329,
      10373,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Conversion of list of entities to DataFrame, useful for ML model training"
  },
  {
    "line": 123,
    "text": "            # xtdata.download_financial_data(stock_list=[stock], table_list=[\"Capital\"])",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with multiple parameters, including default values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      742,
      7890,
      13,
      15002,
      62,
      46921,
      62,
      7890,
      7,
      13578,
      62,
      4868,
      41888,
      13578,
      4357,
      3084,
      62,
      4868,
      28,
      14692,
      39315,
      8973,
      8
    ],
    "start_token": 423,
    "end_token": 459,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      3294,
      10007,
      11,
      1390,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function signature with multiple parameters, including default values"
  },
  {
    "line": 132,
    "text": "                entity[\"float_volume\"] = latest_data[\"circulating_capital\"]",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of entity_id to a specific code format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      14692,
      22468,
      62,
      29048,
      8973,
      796,
      3452,
      62,
      7890,
      14692,
      21170,
      8306,
      62,
      27544,
      8973
    ],
    "start_token": 459,
    "end_token": 490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      9312,
      62,
      312,
      284,
      257,
      2176,
      2438,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of entity_id to a specific code format"
  },
  {
    "line": 134,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of level to determine period value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 490,
    "end_token": 490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1241,
      284,
      5004,
      2278,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of level to determine period value"
  },
  {
    "line": 136,
    "text": "            if tick and tick[stock]:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of timestamps to string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4378,
      290,
      4378,
      58,
      13578,
      5974
    ],
    "start_token": 490,
    "end_token": 508,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4628,
      395,
      9430,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of timestamps to string format"
  },
  {
    "line": 141,
    "text": "                    limit_up_price = tick[stock][\"lastClose\"] * 1.2",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of print for logging, which may not be suitable for production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      62,
      929,
      62,
      20888,
      796,
      4378,
      58,
      13578,
      7131,
      1,
      12957,
      26125,
      8973,
      1635,
      352,
      13,
      17
    ],
    "start_token": 508,
    "end_token": 545,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      3601,
      329,
      18931,
      11,
      543,
      743,
      407,
      307,
      11080,
      329,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of print for logging, which may not be suitable for production"
  },
  {
    "line": 141,
    "text": "                    limit_up_price = tick[stock][\"lastClose\"] * 1.2",
    "annotation": "\ud83e\udde0 ML Signal: Conditional data download based on a flag",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      62,
      929,
      62,
      20888,
      796,
      4378,
      58,
      13578,
      7131,
      1,
      12957,
      26125,
      8973,
      1635,
      352,
      13,
      17
    ],
    "start_token": 545,
    "end_token": 582,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      1366,
      4321,
      1912,
      319,
      257,
      6056
    ],
    "label": "ml_signal",
    "reason": "Conditional data download based on a flag"
  },
  {
    "line": 149,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Fetching market data with specific parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 582,
    "end_token": 582,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1910,
      1366,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Fetching market data with specific parameters"
  },
  {
    "line": 158,
    "text": "    adjust_type=AdjustType.qfq,",
    "annotation": "\ud83e\udde0 ML Signal: Transposing and renaming columns in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4532,
      62,
      4906,
      28,
      39668,
      6030,
      13,
      80,
      69,
      80,
      11
    ],
    "start_token": 582,
    "end_token": 596,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3602,
      32927,
      290,
      8851,
      3723,
      15180,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Transposing and renaming columns in data processing"
  },
  {
    "line": 162,
    "text": "    period = level.value",
    "annotation": "\u2705 Best Practice: Using pd.concat for combining DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2278,
      796,
      1241,
      13,
      8367
    ],
    "start_token": 596,
    "end_token": 604,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Using pd.concat for combining DataFrames"
  },
  {
    "line": 164,
    "text": "    end_time = to_time_str(end_timestamp, fmt=\"YYYYMMDDHHmmss\")",
    "annotation": "\ud83e\udde0 ML Signal: Data transformation by scaling volume",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      2435,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      437,
      62,
      16514,
      27823,
      11,
      46996,
      2625,
      26314,
      26314,
      12038,
      16458,
      16768,
      3020,
      824,
      4943
    ],
    "start_token": 604,
    "end_token": 632,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      13389,
      416,
      20796,
      6115
    ],
    "label": "ml_signal",
    "reason": "Data transformation by scaling volume"
  },
  {
    "line": 157,
    "text": "    level=IntervalLevel.LEVEL_1DAY,",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a possible global state or reliance on external data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11
    ],
    "start_token": 632,
    "end_token": 647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      1744,
      3298,
      1181,
      393,
      24126,
      319,
      7097,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a possible global state or reliance on external data"
  },
  {
    "line": 159,
    "text": "    download_history=True,",
    "annotation": "\ud83e\udde0 ML Signal: Function call to get_entity_list, indicating a dependency on external data source",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4321,
      62,
      23569,
      28,
      17821,
      11
    ],
    "start_token": 647,
    "end_token": 656,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      651,
      62,
      26858,
      62,
      4868,
      11,
      12739,
      257,
      20203,
      319,
      7097,
      1366,
      2723
    ],
    "label": "ml_signal",
    "reason": "Function call to get_entity_list, indicating a dependency on external data source"
  },
  {
    "line": 162,
    "text": "    period = level.value",
    "annotation": "\u2705 Best Practice: Explicitly listing columns to select improves readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2278,
      796,
      1241,
      13,
      8367
    ],
    "start_token": 656,
    "end_token": 664,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      13487,
      15180,
      284,
      2922,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly listing columns to select improves readability and maintainability"
  },
  {
    "line": 165,
    "text": "    # download\u6bd4\u8f83\u8017\u65f6\uff0c\u5efa\u8bae\u5355\u72ec\u5b9a\u65f6\u4efb\u52a1\u6765\u505a",
    "annotation": "\u2705 Best Practice: Setting index with drop=False retains the original column, which can be useful for future operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      4321,
      162,
      107,
      242,
      164,
      122,
      225,
      32003,
      245,
      33768,
      114,
      171,
      120,
      234,
      161,
      119,
      118,
      164,
      106,
      106,
      39355,
      243,
      45379,
      105,
      22522,
      248,
      33768,
      114,
      20015,
      119,
      27950,
      94,
      30266,
      98,
      161,
      223,
      248
    ],
    "start_token": 664,
    "end_token": 705,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      6376,
      351,
      4268,
      28,
      25101,
      27452,
      262,
      2656,
      5721,
      11,
      543,
      460,
      307,
      4465,
      329,
      2003,
      4560
    ],
    "label": "best_practice",
    "reason": "Setting index with drop=False retains the original column, which can be useful for future operations"
  },
  {
    "line": 163,
    "text": "    start_time = to_time_str(start_timestamp, fmt=\"YYYYMMDDHHmmss\")",
    "annotation": "\u2705 Best Practice: Use of descriptive function name for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      2435,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      16514,
      27823,
      11,
      46996,
      2625,
      26314,
      26314,
      12038,
      16458,
      16768,
      3020,
      824,
      4943
    ],
    "start_token": 705,
    "end_token": 733,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name for clarity"
  },
  {
    "line": 165,
    "text": "    # download\u6bd4\u8f83\u8017\u65f6\uff0c\u5efa\u8bae\u5355\u72ec\u5b9a\u65f6\u4efb\u52a1\u6765\u505a",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a boolean field",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      4321,
      162,
      107,
      242,
      164,
      122,
      225,
      32003,
      245,
      33768,
      114,
      171,
      120,
      234,
      161,
      119,
      118,
      164,
      106,
      106,
      39355,
      243,
      45379,
      105,
      22522,
      248,
      33768,
      114,
      20015,
      119,
      27950,
      94,
      30266,
      98,
      161,
      223,
      248
    ],
    "start_token": 733,
    "end_token": 774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      25131,
      2214
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a boolean field"
  },
  {
    "line": 167,
    "text": "        print(f\"download from {start_time} to {end_time}\")",
    "annotation": "\ud83e\udde0 ML Signal: Calculation involving multiple fields",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      69,
      1,
      15002,
      422,
      1391,
      9688,
      62,
      2435,
      92,
      284,
      1391,
      437,
      62,
      2435,
      92,
      4943
    ],
    "start_token": 774,
    "end_token": 799,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      7411,
      3294,
      7032
    ],
    "label": "ml_signal",
    "reason": "Calculation involving multiple fields"
  },
  {
    "line": 170,
    "text": "            start_time=start_time, end_time=end_time",
    "annotation": "\ud83e\udde0 ML Signal: Handling of None return for specific conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435
    ],
    "start_token": 799,
    "end_token": 825,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      286,
      6045,
      1441,
      329,
      2176,
      3403
    ],
    "label": "ml_signal",
    "reason": "Handling of None return for specific conditions"
  },
  {
    "line": 169,
    "text": "            stock_code=code, period=period,",
    "annotation": "\u2705 Best Practice: Check if key exists in dictionary to avoid KeyError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      8189,
      28,
      8189,
      11,
      2278,
      28,
      41007,
      11
    ],
    "start_token": 825,
    "end_token": 846,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1994,
      7160,
      287,
      22155,
      284,
      3368,
      7383,
      12331
    ],
    "label": "best_practice",
    "reason": "Check if key exists in dictionary to avoid KeyError"
  },
  {
    "line": 170,
    "text": "            start_time=start_time, end_time=end_time",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'price' or 'askVol' keys are missing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435
    ],
    "start_token": 846,
    "end_token": 872,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      20888,
      6,
      393,
      705,
      2093,
      16598,
      6,
      8251,
      389,
      4814
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'price' or 'askVol' keys are missing"
  },
  {
    "line": 172,
    "text": "    records = xtdata.get_market_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if 'askVol' list is empty",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4406,
      796,
      220,
      742,
      7890,
      13,
      1136,
      62,
      10728,
      62,
      7890,
      7
    ],
    "start_token": 872,
    "end_token": 887,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      705,
      2093,
      16598,
      6,
      1351,
      318,
      6565
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if 'askVol' list is empty"
  },
  {
    "line": 216,
    "text": "            if delay < 2:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5711,
      1279,
      362,
      25
    ],
    "start_token": 887,
    "end_token": 903,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if df_to_db does not sanitize inputs"
  },
  {
    "line": 219,
    "text": "                logger.warning(f\"delay {delay} minutes, may need to restart this script or qmt client\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      40850,
      1391,
      40850,
      92,
      2431,
      11,
      743,
      761,
      284,
      15765,
      428,
      4226,
      393,
      10662,
      16762,
      5456,
      4943
    ],
    "start_token": 903,
    "end_token": 941,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if df_to_db does not sanitize inputs"
  },
  {
    "line": 223,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 941,
    "end_token": 941,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if df_to_db does not sanitize inputs"
  },
  {
    "line": 229,
    "text": "            [",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      685
    ],
    "start_token": 941,
    "end_token": 953,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if df_to_db does not sanitize inputs"
  },
  {
    "line": 230,
    "text": "                stock_df.loc[tick_df.index,],",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific task name, useful for understanding code intent",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      7568,
      13,
      17946,
      58,
      42298,
      62,
      7568,
      13,
      9630,
      11,
      4357
    ],
    "start_token": 953,
    "end_token": 981,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      4876,
      1438,
      11,
      4465,
      329,
      4547,
      2438,
      6824
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific task name, useful for understanding code intent"
  },
  {
    "line": 232,
    "text": "            ],",
    "annotation": "\ud83e\udde0 ML Signal: Variable assignment capturing the result of a function call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 981,
    "end_token": 993,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35748,
      16237,
      21430,
      262,
      1255,
      286,
      257,
      2163,
      869
    ],
    "label": "ml_signal",
    "reason": "Variable assignment capturing the result of a function call"
  },
  {
    "line": 234,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of a lambda function with print, could lead to excessive logging in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 993,
    "end_token": 1001,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      257,
      37456,
      2163,
      351,
      3601,
      11,
      714,
      1085,
      284,
      13181,
      18931,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of a lambda function with print, could lead to excessive logging in production"
  },
  {
    "line": 235,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive callback function instead of a lambda for better readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1001,
    "end_token": 1001,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      23838,
      2163,
      2427,
      286,
      257,
      37456,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive callback function instead of a lambda for better readability"
  },
  {
    "line": 237,
    "text": "        df[\"close\"] = df[\"price\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of named parameters in a function call, indicating explicit parameter passing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      19836,
      8973,
      796,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1001,
    "end_token": 1017,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3706,
      10007,
      287,
      257,
      2163,
      869,
      11,
      12739,
      7952,
      11507,
      6427
    ],
    "label": "ml_signal",
    "reason": "Use of named parameters in a function call, indicating explicit parameter passing"
  },
  {
    "line": 235,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific task name, indicating a pattern of clearing historical data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1017,
    "end_token": 1017,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      4876,
      1438,
      11,
      12739,
      257,
      3912,
      286,
      17304,
      6754,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific task name, indicating a pattern of clearing historical data"
  },
  {
    "line": 237,
    "text": "        df[\"close\"] = df[\"price\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a database session, indicating interaction with a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      19836,
      8973,
      796,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1017,
    "end_token": 1033,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      6831,
      6246,
      11,
      12739,
      10375,
      351,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Usage of a database session, indicating interaction with a database"
  },
  {
    "line": 239,
    "text": "        df[\"timestamp\"] = df[\"time\"].apply(to_pd_timestamp)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly deleting records without backup or logging could lead to data loss",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      47764,
      14692,
      2435,
      1,
      4083,
      39014,
      7,
      1462,
      62,
      30094,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 1033,
    "end_token": 1060,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      34817,
      4406,
      1231,
      11559,
      393,
      18931,
      714,
      1085,
      284,
      1366,
      2994
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly deleting records without backup or logging could lead to data loss"
  },
  {
    "line": 241,
    "text": "        df[\"id\"] = df[[\"entity_id\", \"timestamp\"]].apply(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of a date interval, indicating a pattern of time-based data management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      312,
      8973,
      796,
      47764,
      58,
      14692,
      26858,
      62,
      312,
      1600,
      366,
      16514,
      27823,
      8973,
      4083,
      39014,
      7
    ],
    "start_token": 1060,
    "end_token": 1086,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      257,
      3128,
      16654,
      11,
      12739,
      257,
      3912,
      286,
      640,
      12,
      3106,
      1366,
      4542
    ],
    "label": "ml_signal",
    "reason": "Calculation of a date interval, indicating a pattern of time-based data management"
  },
  {
    "line": 243,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly deleting records without backup or logging could lead to data loss",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1086,
    "end_token": 1094,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      34817,
      4406,
      1231,
      11559,
      393,
      18931,
      714,
      1085,
      284,
      1366,
      2994
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly deleting records without backup or logging could lead to data loss"
  },
  {
    "line": 245,
    "text": "        df[\"volume\"] = df[\"pvolume\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly deleting records without backup or logging could lead to data loss",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      29048,
      8973,
      796,
      47764,
      14692,
      79,
      29048,
      8973
    ],
    "start_token": 1094,
    "end_token": 1111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      34817,
      4406,
      1231,
      11559,
      393,
      18931,
      714,
      1085,
      284,
      1366,
      2994
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly deleting records without backup or logging could lead to data loss"
  },
  {
    "line": 247,
    "text": "        # \u6362\u624b\u7387",
    "annotation": "\u2705 Best Practice: Committing the session to ensure all changes are saved to the database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      235,
      95,
      33699,
      233,
      163,
      236,
      229
    ],
    "start_token": 1111,
    "end_token": 1127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1520,
      2535,
      262,
      6246,
      284,
      4155,
      477,
      2458,
      389,
      7448,
      284,
      262,
      6831
    ],
    "label": "best_practice",
    "reason": "Committing the session to ensure all changes are saved to the database"
  },
  {
    "line": 243,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1127,
    "end_token": 1135,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and behavior."
  },
  {
    "line": 245,
    "text": "        df[\"volume\"] = df[\"pvolume\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific provider for recording data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      29048,
      8973,
      796,
      47764,
      14692,
      79,
      29048,
      8973
    ],
    "start_token": 1135,
    "end_token": 1152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      10131,
      329,
      8296,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific provider for recording data."
  },
  {
    "line": 247,
    "text": "        # \u6362\u624b\u7387",
    "annotation": "\ud83e\udde0 ML Signal: Retrieval of stock data, indicating interaction with a stock data source.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      235,
      95,
      33699,
      233,
      163,
      236,
      229
    ],
    "start_token": 1152,
    "end_token": 1168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      380,
      18206,
      286,
      4283,
      1366,
      11,
      12739,
      10375,
      351,
      257,
      4283,
      1366,
      2723,
      13
    ],
    "label": "ml_signal",
    "reason": "Retrieval of stock data, indicating interaction with a stock data source."
  },
  {
    "line": 249,
    "text": "        # \u6da8\u8dcc\u5e45",
    "annotation": "\ud83e\udde0 ML Signal: Logging the number of stocks subscribed to, which can indicate system load or usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      114,
      101,
      164,
      115,
      234,
      33176,
      227
    ],
    "start_token": 1168,
    "end_token": 1184,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      1271,
      286,
      14420,
      45794,
      284,
      11,
      543,
      460,
      7603,
      1080,
      3440,
      393,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging the number of stocks subscribed to, which can indicate system load or usage patterns."
  },
  {
    "line": 251,
    "text": "        # \u76d8\u53e3\u5356\u5355\u91d1\u989d",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk if `tick_to_quote()` is not a function, as it should be passed as a callback.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      13328,
      249,
      246,
      20998,
      96,
      39355,
      244,
      39355,
      243,
      34932,
      239,
      165,
      95,
      251
    ],
    "start_token": 1184,
    "end_token": 1206,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      611,
      4600,
      42298,
      62,
      1462,
      62,
      22708,
      3419,
      63,
      318,
      407,
      257,
      2163,
      11,
      355,
      340,
      815,
      307,
      3804,
      355,
      257,
      23838,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk if `tick_to_quote()` is not a function, as it should be passed as a callback."
  },
  {
    "line": 255,
    "text": "        # \u76d8\u53e3\u4e70\u5355\u91d1\u989d",
    "annotation": "\u2705 Best Practice: Import statements should be at the top of the file.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      13328,
      249,
      246,
      20998,
      96,
      20046,
      108,
      39355,
      243,
      34932,
      239,
      165,
      95,
      251
    ],
    "start_token": 1206,
    "end_token": 1228,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      6299,
      815,
      307,
      379,
      262,
      1353,
      286,
      262,
      2393,
      13
    ],
    "label": "best_practice",
    "reason": "Import statements should be at the top of the file."
  },
  {
    "line": 258,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Regular sleep intervals in a loop, indicating periodic checks or updates.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1228,
    "end_token": 1236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23603,
      3993,
      20016,
      287,
      257,
      9052,
      11,
      12739,
      27458,
      8794,
      393,
      5992,
      13
    ],
    "label": "ml_signal",
    "reason": "Regular sleep intervals in a loop, indicating periodic checks or updates."
  },
  {
    "line": 260,
    "text": "        df[\"is_limit_up\"] = (df[\"price\"] != 0) & (df[\"price\"] >= df[\"limit_up_price\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Exception handling could be more specific to handle different disconnection scenarios.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      271,
      62,
      32374,
      62,
      929,
      8973,
      796,
      357,
      7568,
      14692,
      20888,
      8973,
      14512,
      657,
      8,
      1222,
      357,
      7568,
      14692,
      20888,
      8973,
      18189,
      47764,
      14692,
      32374,
      62,
      929,
      62,
      20888,
      8973,
      8
    ],
    "start_token": 1236,
    "end_token": 1276,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      35528,
      9041,
      714,
      307,
      517,
      2176,
      284,
      5412,
      1180,
      22837,
      295,
      13858,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Exception handling could be more specific to handle different disconnection scenarios."
  },
  {
    "line": 263,
    "text": "        # \u8dcc\u505c",
    "annotation": "\ud83e\udde0 ML Signal: Use of current timestamp to control loop execution, indicating time-based logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      115,
      234,
      161,
      223,
      250
    ],
    "start_token": 1276,
    "end_token": 1290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1459,
      41033,
      284,
      1630,
      9052,
      9706,
      11,
      12739,
      640,
      12,
      3106,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of current timestamp to control loop execution, indicating time-based logic."
  },
  {
    "line": 266,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging the completion time, useful for tracking execution duration.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      11939,
      640,
      11,
      4465,
      329,
      9646,
      9706,
      9478,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging the completion time, useful for tracking execution duration."
  },
  {
    "line": 267,
    "text": "        df[\"float_cap\"] = df[\"float_volume\"] * df[\"price\"]",
    "annotation": "\ud83e\udde0 ML Signal: Unsubscribing from quotes, indicating cleanup or resource management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22468,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      22468,
      62,
      29048,
      8973,
      1635,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1290,
    "end_token": 1315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      791,
      7266,
      1416,
      23098,
      422,
      13386,
      11,
      12739,
      27425,
      393,
      8271,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Unsubscribing from quotes, indicating cleanup or resource management."
  },
  {
    "line": 267,
    "text": "        df[\"float_cap\"] = df[\"float_volume\"] * df[\"price\"]",
    "annotation": "\u2705 Best Practice: Consider adding error handling for scheduler initialization and job execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22468,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      22468,
      62,
      29048,
      8973,
      1635,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1315,
    "end_token": 1340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      6038,
      18173,
      37588,
      290,
      1693,
      9706,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for scheduler initialization and job execution."
  },
  {
    "line": 267,
    "text": "        df[\"float_cap\"] = df[\"float_volume\"] * df[\"price\"]",
    "annotation": "\ud83e\udde0 ML Signal: Immediate execution of `record_tick`, indicating a startup routine.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22468,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      22468,
      62,
      29048,
      8973,
      1635,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1340,
    "end_token": 1365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1846,
      13857,
      9706,
      286,
      4600,
      22105,
      62,
      42298,
      47671,
      12739,
      257,
      13693,
      8027,
      13
    ],
    "label": "ml_signal",
    "reason": "Immediate execution of `record_tick`, indicating a startup routine."
  },
  {
    "line": 267,
    "text": "        df[\"float_cap\"] = df[\"float_volume\"] * df[\"price\"]",
    "annotation": "\ud83e\udde0 ML Signal: Scheduled job setup, indicating periodic task execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22468,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      22468,
      62,
      29048,
      8973,
      1635,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1365,
    "end_token": 1390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27774,
      6309,
      1693,
      9058,
      11,
      12739,
      27458,
      4876,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Scheduled job setup, indicating periodic task execution."
  },
  {
    "line": 267,
    "text": "        df[\"float_cap\"] = df[\"float_volume\"] * df[\"price\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to protected member `_thread`, which may change in future versions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22468,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      22468,
      62,
      29048,
      8973,
      1635,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1390,
    "end_token": 1415,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      6861,
      2888,
      4600,
      62,
      16663,
      47671,
      543,
      743,
      1487,
      287,
      2003,
      6300,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to protected member `_thread`, which may change in future versions."
  },
  {
    "line": 267,
    "text": "        df[\"float_cap\"] = df[\"float_volume\"] * df[\"price\"]",
    "annotation": "\u2705 Best Practice: Ensure all listed functions and variables are defined in the module.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22468,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      22468,
      62,
      29048,
      8973,
      1635,
      47764,
      14692,
      20888,
      8973
    ],
    "start_token": 1415,
    "end_token": 1440,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      477,
      5610,
      5499,
      290,
      9633,
      389,
      5447,
      287,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure all listed functions and variables are defined in the module."
  }
]
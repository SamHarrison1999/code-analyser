annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of logging for tracking and debugging purposes,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 290, 28769, 4959]",0.5,12,best_practice,23,Use of logging for tracking and debugging purposes,,0,"    TIME_FORMAT_MINUTE2,","[220, 220, 220, 20460, 62, 21389, 1404, 62, 23678, 37780, 17, 11]"
üß† ML Signal: Function to transform entity_id into a specific code format,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 6121, 9312, 62, 312, 656, 257, 2176, 2438, 5794]",0.5,20,ml_signal,24,Function to transform entity_id into a specific code format,,12,"    now_timestamp,","[220, 220, 220, 783, 62, 16514, 27823, 11]"
üß† ML Signal: Usage of decode_entity_id function to extract components,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 36899, 62, 26858, 62, 312, 2163, 284, 7925, 6805]",0.5,20,ml_signal,26,Usage of decode_entity_id function to extract components,,20,,[]
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",1.0,20,best_practice,28,Use of f-string for string formatting,,20,,[]
üß† ML Signal: Function for converting qmt_code to a specific entity ID format,"[8582, 100, 254, 10373, 26484, 25, 15553, 329, 23202, 10662, 16762, 62, 8189, 284, 257, 2176, 9312, 4522, 5794]",0.5,49,ml_signal,27,Function for converting qmt_code to a specific entity ID format,,20,# https://dict.thinktrader.net/nativeApi/start_now.html?id=e2M5nZ,"[2, 3740, 1378, 11600, 13, 14925, 2213, 5067, 13, 3262, 14, 30191, 32, 14415, 14, 9688, 62, 2197, 13, 6494, 30, 312, 28, 68, 17, 44, 20, 77, 57]"
üß† ML Signal: Splitting a string by a delimiter to extract components,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 257, 4731, 416, 257, 46728, 2676, 284, 7925, 6805]",0.5,62,ml_signal,29,Splitting a string by a delimiter to extract components,,49,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
üß† ML Signal: Converting string to lowercase for normalization,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 4731, 284, 2793, 7442, 329, 3487, 1634]",0.5,62,ml_signal,31,Converting string to lowercase for normalization,,62,,[]
üß† ML Signal: String formatting to create a standardized entity ID,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 284, 2251, 257, 25713, 9312, 4522]",0.5,85,ml_signal,33,String formatting to create a standardized entity ID,,62,"    _, exchange, code = decode_entity_id(entity_id=entity_id)","[220, 220, 220, 4808, 11, 5163, 11, 2438, 796, 36899, 62, 26858, 62, 312, 7, 26858, 62, 312, 28, 26858, 62, 312, 8]"
‚úÖ Best Practice: Use of descriptive function name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 329, 16287]",0.5,85,best_practice,31,Use of descriptive function name for clarity,,85,,[]
‚úÖ Best Practice: Use of enum for adjust_type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 33829, 329, 4532, 62, 4906, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,108,best_practice,33,Use of enum for adjust_type improves code readability and maintainability,,85,"    _, exchange, code = decode_entity_id(entity_id=entity_id)","[220, 220, 220, 4808, 11, 5163, 11, 2438, 796, 36899, 62, 26858, 62, 312, 7, 26858, 62, 312, 28, 26858, 62, 312, 8]"
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,122,ml_signal,40,Extracting and transforming data from a dictionary,,108,"    return f""stock_{exchange}_{code}""","[220, 220, 220, 1441, 277, 1, 13578, 23330, 1069, 3803, 92, 23330, 8189, 36786]"
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,122,ml_signal,42,Extracting and transforming data from a dictionary,,122,,[]
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,137,ml_signal,44,Extracting and transforming data from a dictionary,,122,    if adjust_type == AdjustType.qfq:,"[220, 220, 220, 611, 4532, 62, 4906, 6624, 20292, 6030, 13, 80, 69, 80, 25]"
‚ö†Ô∏è SAST Risk (Low): Broad exception handling without specifying exception type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9765, 6631, 9041, 1231, 31577, 6631, 2099]",0.5,148,sast_risk,47,Broad exception handling without specifying exception type,Low,137,"        return ""back""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 1891, 1]"
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,148,ml_signal,51,Extracting and transforming data from a dictionary,,148,,[]
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,164,ml_signal,53,Extracting and transforming data from a dictionary,,148,"    exchange = stock_detail[""ExchangeID""].lower()","[220, 220, 220, 5163, 796, 4283, 62, 49170, 14692, 3109, 3803, 2389, 1, 4083, 21037, 3419]"
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,180,ml_signal,53,Extracting and transforming data from a dictionary,,164,"    exchange = stock_detail[""ExchangeID""].lower()","[220, 220, 220, 5163, 796, 4283, 62, 49170, 14692, 3109, 3803, 2389, 1, 4083, 21037, 3419]"
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,196,ml_signal,53,Extracting and transforming data from a dictionary,,180,"    exchange = stock_detail[""ExchangeID""].lower()","[220, 220, 220, 5163, 796, 4283, 62, 49170, 14692, 3109, 3803, 2389, 1, 4083, 21037, 3419]"
üß† ML Signal: Extracting and transforming data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 25449, 1366, 422, 257, 22155]",0.5,212,ml_signal,53,Extracting and transforming data from a dictionary,,196,"    exchange = stock_detail[""ExchangeID""].lower()","[220, 220, 220, 5163, 796, 4283, 62, 49170, 14692, 3109, 3803, 2389, 1, 4083, 21037, 3419]"
üß† ML Signal: Constructing a unique identifier for an entity,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 257, 3748, 27421, 329, 281, 9312]",0.5,228,ml_signal,53,Constructing a unique identifier for an entity,,212,"    exchange = stock_detail[""ExchangeID""].lower()","[220, 220, 220, 5163, 796, 4283, 62, 49170, 14692, 3109, 3803, 2389, 1, 4083, 21037, 3419]"
"üß† ML Signal: Function definition with no parameters, indicating a utility function","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 10361, 2163]",1.0,228,ml_signal,69,"Function definition with no parameters, indicating a utility function",,228,,[]
"üß† ML Signal: API call to fetch data, indicating integration with external services","[8582, 100, 254, 10373, 26484, 25, 7824, 869, 284, 21207, 1366, 11, 12739, 11812, 351, 7097, 2594]",0.5,242,ml_signal,71,"API call to fetch data, indicating integration with external services",,228,"        ""id"": entity_id,","[220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 9312, 62, 312, 11]"
"üß† ML Signal: Data transformation using map, indicating data processing pattern","[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 1262, 3975, 11, 12739, 1366, 7587, 3912]",1.0,257,ml_signal,73,"Data transformation using map, indicating data processing pattern",,242,"        ""timestamp"": list_date,","[220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 1351, 62, 4475, 11]"
"üß† ML Signal: API call to fetch data, indicating integration with external services","[8582, 100, 254, 10373, 26484, 25, 7824, 869, 284, 21207, 1366, 11, 12739, 11812, 351, 7097, 2594]",0.5,270,ml_signal,75,"API call to fetch data, indicating integration with external services",,257,"        ""exchange"": exchange,","[220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 5163, 11]"
‚úÖ Best Practice: Using += for list concatenation for better readability,"[26486, 227, 6705, 19939, 25, 8554, 15853, 329, 1351, 1673, 36686, 341, 329, 1365, 1100, 1799]",1.0,282,best_practice,77,Using += for list concatenation for better readability,,270,"        ""name"": name,","[220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 1438, 11]"
"üß† ML Signal: Returning a list, indicating the function's output type","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 11, 12739, 262, 2163, 338, 5072, 2099]",1.0,298,ml_signal,79,"Returning a list, indicating the function's output type",,282,"        ""end_date"": end_date,","[220, 220, 220, 220, 220, 220, 220, 366, 437, 62, 4475, 1298, 886, 62, 4475, 11]"
‚úÖ Best Practice: Use f-string for consistent and readable string formatting,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 6414, 290, 31744, 4731, 33313]",0.5,302,best_practice,85,Use f-string for consistent and readable string formatting,,298,    },"[220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Low): Ensure df is not None before accessing its elements,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 47764, 318, 407, 6045, 878, 22534, 663, 4847]",0.5,311,sast_risk,105,Ensure df is not None before accessing its elements,Low,302,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'circulating_capital' and 'total_capital' keys exist in latest_data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 21170, 8306, 62, 27544, 6, 290, 705, 23350, 62, 27544, 6, 8251, 2152, 287, 3452, 62, 7890]",0.5,336,sast_risk,108,Ensure 'circulating_capital' and 'total_capital' keys exist in latest_data,Low,311,"            entity_id = f""stock_{exchange}_{code}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 796, 277, 1, 13578, 23330, 1069, 3803, 92, 23330, 8189, 36786]"
‚ö†Ô∏è SAST Risk (Low): Ensure tick[stock] is not None before accessing its elements,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4378, 58, 13578, 60, 318, 407, 6045, 878, 22534, 663, 4847]",0.5,357,sast_risk,112,Ensure tick[stock] is not None before accessing its elements,Low,336,                entity = datas[0],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 796, 19395, 58, 15, 60]"
‚úÖ Best Practice: Use tuple for multiple startswith checks for readability,"[26486, 227, 6705, 19939, 25, 5765, 46545, 329, 3294, 923, 2032, 342, 8794, 329, 1100, 1799]",0.5,375,best_practice,114,Use tuple for multiple startswith checks for readability,,357,                entity = {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 796, 1391]"
‚úÖ Best Practice: Use round for consistent numerical precision,"[26486, 227, 6705, 19939, 25, 5765, 2835, 329, 6414, 29052, 15440]",0.5,411,best_practice,123,Use round for consistent numerical precision,,375,"            # xtdata.download_financial_data(stock_list=[stock], table_list=[""Capital""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 220, 742, 7890, 13, 15002, 62, 46921, 62, 7890, 7, 13578, 62, 4868, 41888, 13578, 4357, 3084, 62, 4868, 28, 14692, 39315, 8973, 8]"
"üß† ML Signal: Conversion of list of entities to DataFrame, useful for ML model training","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1351, 286, 12066, 284, 6060, 19778, 11, 4465, 329, 10373, 2746, 3047]",0.5,423,ml_signal,128,"Conversion of list of entities to DataFrame, useful for ML model training",,411,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Function signature with multiple parameters, including default values","[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 3294, 10007, 11, 1390, 4277, 3815]",1.0,459,ml_signal,123,"Function signature with multiple parameters, including default values",,423,"            # xtdata.download_financial_data(stock_list=[stock], table_list=[""Capital""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 220, 742, 7890, 13, 15002, 62, 46921, 62, 7890, 7, 13578, 62, 4868, 41888, 13578, 4357, 3084, 62, 4868, 28, 14692, 39315, 8973, 8]"
üß† ML Signal: Conversion of entity_id to a specific code format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 9312, 62, 312, 284, 257, 2176, 2438, 5794]",1.0,490,ml_signal,132,Conversion of entity_id to a specific code format,,459,"                entity[""float_volume""] = latest_data[""circulating_capital""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 14692, 22468, 62, 29048, 8973, 796, 3452, 62, 7890, 14692, 21170, 8306, 62, 27544, 8973]"
üß† ML Signal: Usage of level to determine period value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1241, 284, 5004, 2278, 1988]",0.5,490,ml_signal,134,Usage of level to determine period value,,490,,[]
üß† ML Signal: Conversion of timestamps to string format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4628, 395, 9430, 284, 4731, 5794]",1.0,508,ml_signal,136,Conversion of timestamps to string format,,490,            if tick and tick[stock]:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4378, 290, 4378, 58, 13578, 5974]"
"‚ö†Ô∏è SAST Risk (Low): Use of print for logging, which may not be suitable for production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 329, 18931, 11, 543, 743, 407, 307, 11080, 329, 3227]",1.0,545,sast_risk,141,"Use of print for logging, which may not be suitable for production",Low,508,"                    limit_up_price = tick[stock][""lastClose""] * 1.2","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 62, 929, 62, 20888, 796, 4378, 58, 13578, 7131, 1, 12957, 26125, 8973, 1635, 352, 13, 17]"
üß† ML Signal: Conditional data download based on a flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 1366, 4321, 1912, 319, 257, 6056]",1.0,582,ml_signal,141,Conditional data download based on a flag,,545,"                    limit_up_price = tick[stock][""lastClose""] * 1.2","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 62, 929, 62, 20888, 796, 4378, 58, 13578, 7131, 1, 12957, 26125, 8973, 1635, 352, 13, 17]"
üß† ML Signal: Fetching market data with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1910, 1366, 351, 2176, 10007]",0.5,582,ml_signal,149,Fetching market data with specific parameters,,582,,[]
üß† ML Signal: Transposing and renaming columns in data processing,"[8582, 100, 254, 10373, 26484, 25, 3602, 32927, 290, 8851, 3723, 15180, 287, 1366, 7587]",1.0,596,ml_signal,158,Transposing and renaming columns in data processing,,582,"    adjust_type=AdjustType.qfq,","[220, 220, 220, 4532, 62, 4906, 28, 39668, 6030, 13, 80, 69, 80, 11]"
‚úÖ Best Practice: Using pd.concat for combining DataFrames,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439]",1.0,604,best_practice,162,Using pd.concat for combining DataFrames,,596,    period = level.value,"[220, 220, 220, 2278, 796, 1241, 13, 8367]"
üß† ML Signal: Data transformation by scaling volume,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 416, 20796, 6115]",1.0,632,ml_signal,164,Data transformation by scaling volume,,604,"    end_time = to_time_str(end_timestamp, fmt=""YYYYMMDDHHmmss"")","[220, 220, 220, 886, 62, 2435, 796, 284, 62, 2435, 62, 2536, 7, 437, 62, 16514, 27823, 11, 46996, 2625, 26314, 26314, 12038, 16458, 16768, 3020, 824, 4943]"
"üß† ML Signal: Function definition with no parameters, indicating a possible global state or reliance on external data","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 1744, 3298, 1181, 393, 24126, 319, 7097, 1366]",1.0,647,ml_signal,157,"Function definition with no parameters, indicating a possible global state or reliance on external data",,632,"    level=IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
"üß† ML Signal: Function call to get_entity_list, indicating a dependency on external data source","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 651, 62, 26858, 62, 4868, 11, 12739, 257, 20203, 319, 7097, 1366, 2723]",0.5,656,ml_signal,159,"Function call to get_entity_list, indicating a dependency on external data source",,647,"    download_history=True,","[220, 220, 220, 4321, 62, 23569, 28, 17821, 11]"
‚úÖ Best Practice: Explicitly listing columns to select improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 11884, 306, 13487, 15180, 284, 2922, 19575, 1100, 1799, 290, 5529, 1799]",1.0,664,best_practice,162,Explicitly listing columns to select improves readability and maintainability,,656,    period = level.value,"[220, 220, 220, 2278, 796, 1241, 13, 8367]"
"‚úÖ Best Practice: Setting index with drop=False retains the original column, which can be useful for future operations","[26486, 227, 6705, 19939, 25, 25700, 6376, 351, 4268, 28, 25101, 27452, 262, 2656, 5721, 11, 543, 460, 307, 4465, 329, 2003, 4560]",1.0,705,best_practice,165,"Setting index with drop=False retains the original column, which can be useful for future operations",,664,    # downloadÊØîËæÉËÄóÊó∂ÔºåÂª∫ËÆÆÂçïÁã¨ÂÆöÊó∂‰ªªÂä°Êù•ÂÅö,"[220, 220, 220, 1303, 4321, 162, 107, 242, 164, 122, 225, 32003, 245, 33768, 114, 171, 120, 234, 161, 119, 118, 164, 106, 106, 39355, 243, 45379, 105, 22522, 248, 33768, 114, 20015, 119, 27950, 94, 30266, 98, 161, 223, 248]"
‚úÖ Best Practice: Use of descriptive function name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 329, 16287]",1.0,733,best_practice,163,Use of descriptive function name for clarity,,705,"    start_time = to_time_str(start_timestamp, fmt=""YYYYMMDDHHmmss"")","[220, 220, 220, 923, 62, 2435, 796, 284, 62, 2435, 62, 2536, 7, 9688, 62, 16514, 27823, 11, 46996, 2625, 26314, 26314, 12038, 16458, 16768, 3020, 824, 4943]"
üß† ML Signal: Conditional logic based on a boolean field,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 2214]",1.0,774,ml_signal,165,Conditional logic based on a boolean field,,733,    # downloadÊØîËæÉËÄóÊó∂ÔºåÂª∫ËÆÆÂçïÁã¨ÂÆöÊó∂‰ªªÂä°Êù•ÂÅö,"[220, 220, 220, 1303, 4321, 162, 107, 242, 164, 122, 225, 32003, 245, 33768, 114, 171, 120, 234, 161, 119, 118, 164, 106, 106, 39355, 243, 45379, 105, 22522, 248, 33768, 114, 20015, 119, 27950, 94, 30266, 98, 161, 223, 248]"
üß† ML Signal: Calculation involving multiple fields,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 7411, 3294, 7032]",1.0,799,ml_signal,167,Calculation involving multiple fields,,774,"        print(f""download from {start_time} to {end_time}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 15002, 422, 1391, 9688, 62, 2435, 92, 284, 1391, 437, 62, 2435, 92, 4943]"
üß† ML Signal: Handling of None return for specific conditions,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 6045, 1441, 329, 2176, 3403]",1.0,825,ml_signal,170,Handling of None return for specific conditions,,799,"            start_time=start_time, end_time=end_time","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11, 886, 62, 2435, 28, 437, 62, 2435]"
‚úÖ Best Practice: Check if key exists in dictionary to avoid KeyError,"[26486, 227, 6705, 19939, 25, 6822, 611, 1994, 7160, 287, 22155, 284, 3368, 7383, 12331]",0.5,846,best_practice,169,Check if key exists in dictionary to avoid KeyError,,825,"            stock_code=code, period=period,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 8189, 28, 8189, 11, 2278, 28, 41007, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'price' or 'askVol' keys are missing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 20888, 6, 393, 705, 2093, 16598, 6, 8251, 389, 4814]",0.5,872,sast_risk,170,Potential KeyError if 'price' or 'askVol' keys are missing,Low,846,"            start_time=start_time, end_time=end_time","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11, 886, 62, 2435, 28, 437, 62, 2435]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if 'askVol' list is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 705, 2093, 16598, 6, 1351, 318, 6565]",0.5,887,sast_risk,172,Potential IndexError if 'askVol' list is empty,Low,872,    records = xtdata.get_market_data(,"[220, 220, 220, 4406, 796, 220, 742, 7890, 13, 1136, 62, 10728, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5336, 270, 1096, 17311]",1.0,903,sast_risk,216,Potential SQL injection risk if df_to_db does not sanitize inputs,Low,887,            if delay < 2:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 5711, 1279, 362, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5336, 270, 1096, 17311]",1.0,941,sast_risk,219,Potential SQL injection risk if df_to_db does not sanitize inputs,Low,903,"                logger.warning(f""delay {delay} minutes, may need to restart this script or qmt client"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 40850, 1391, 40850, 92, 2431, 11, 743, 761, 284, 15765, 428, 4226, 393, 10662, 16762, 5456, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5336, 270, 1096, 17311]",1.0,941,sast_risk,223,Potential SQL injection risk if df_to_db does not sanitize inputs,Low,941,,[]
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if df_to_db does not sanitize inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5336, 270, 1096, 17311]",1.0,953,sast_risk,229,Potential SQL injection risk if df_to_db does not sanitize inputs,Low,941,            [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685]"
"üß† ML Signal: Function definition with a specific task name, useful for understanding code intent","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4876, 1438, 11, 4465, 329, 4547, 2438, 6824]",0.5,981,ml_signal,230,"Function definition with a specific task name, useful for understanding code intent",,953,"                stock_df.loc[tick_df.index,],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 7568, 13, 17946, 58, 42298, 62, 7568, 13, 9630, 11, 4357]"
üß† ML Signal: Variable assignment capturing the result of a function call,"[8582, 100, 254, 10373, 26484, 25, 35748, 16237, 21430, 262, 1255, 286, 257, 2163, 869]",0.5,993,ml_signal,232,Variable assignment capturing the result of a function call,,981,"            ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
"‚ö†Ô∏è SAST Risk (Low): Use of a lambda function with print, could lead to excessive logging in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 257, 37456, 2163, 351, 3601, 11, 714, 1085, 284, 13181, 18931, 287, 3227]",1.0,1001,sast_risk,234,"Use of a lambda function with print, could lead to excessive logging in production",Low,993,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Consider using a more descriptive callback function instead of a lambda for better readability,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 23838, 2163, 2427, 286, 257, 37456, 329, 1365, 1100, 1799]",0.5,1001,best_practice,235,Consider using a more descriptive callback function instead of a lambda for better readability,,1001,,[]
"üß† ML Signal: Use of named parameters in a function call, indicating explicit parameter passing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3706, 10007, 287, 257, 2163, 869, 11, 12739, 7952, 11507, 6427]",0.5,1017,ml_signal,237,"Use of named parameters in a function call, indicating explicit parameter passing",,1001,"        df[""close""] = df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 19836, 8973, 796, 47764, 14692, 20888, 8973]"
"üß† ML Signal: Function definition with a specific task name, indicating a pattern of clearing historical data","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4876, 1438, 11, 12739, 257, 3912, 286, 17304, 6754, 1366]",1.0,1017,ml_signal,235,"Function definition with a specific task name, indicating a pattern of clearing historical data",,1017,,[]
"üß† ML Signal: Usage of a database session, indicating interaction with a database","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6831, 6246, 11, 12739, 10375, 351, 257, 6831]",1.0,1033,ml_signal,237,"Usage of a database session, indicating interaction with a database",,1017,"        df[""close""] = df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 19836, 8973, 796, 47764, 14692, 20888, 8973]"
‚ö†Ô∏è SAST Risk (Medium): Directly deleting records without backup or logging could lead to data loss,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 34817, 4406, 1231, 11559, 393, 18931, 714, 1085, 284, 1366, 2994]",1.0,1060,sast_risk,239,Directly deleting records without backup or logging could lead to data loss,Medium,1033,"        df[""timestamp""] = df[""time""].apply(to_pd_timestamp)","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 16514, 27823, 8973, 796, 47764, 14692, 2435, 1, 4083, 39014, 7, 1462, 62, 30094, 62, 16514, 27823, 8]"
"üß† ML Signal: Calculation of a date interval, indicating a pattern of time-based data management","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 3128, 16654, 11, 12739, 257, 3912, 286, 640, 12, 3106, 1366, 4542]",1.0,1086,ml_signal,241,"Calculation of a date interval, indicating a pattern of time-based data management",,1060,"        df[""id""] = df[[""entity_id"", ""timestamp""]].apply(","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 312, 8973, 796, 47764, 58, 14692, 26858, 62, 312, 1600, 366, 16514, 27823, 8973, 4083, 39014, 7]"
‚ö†Ô∏è SAST Risk (Medium): Directly deleting records without backup or logging could lead to data loss,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 34817, 4406, 1231, 11559, 393, 18931, 714, 1085, 284, 1366, 2994]",1.0,1094,sast_risk,243,Directly deleting records without backup or logging could lead to data loss,Medium,1086,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Medium): Directly deleting records without backup or logging could lead to data loss,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 34817, 4406, 1231, 11559, 393, 18931, 714, 1085, 284, 1366, 2994]",1.0,1111,sast_risk,245,Directly deleting records without backup or logging could lead to data loss,Medium,1094,"        df[""volume""] = df[""pvolume""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 29048, 8973, 796, 47764, 14692, 79, 29048, 8973]"
‚úÖ Best Practice: Committing the session to ensure all changes are saved to the database,"[26486, 227, 6705, 19939, 25, 1520, 2535, 262, 6246, 284, 4155, 477, 2458, 389, 7448, 284, 262, 6831]",1.0,1127,best_practice,247,Committing the session to ensure all changes are saved to the database,,1111,        # Êç¢ÊâãÁéá,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 235, 95, 33699, 233, 163, 236, 229]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 4069, 13]",1.0,1135,best_practice,243,Consider adding a docstring to describe the function's purpose and behavior.,,1127,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of a specific provider for recording data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 10131, 329, 8296, 1366, 13]",1.0,1152,ml_signal,245,Usage of a specific provider for recording data.,,1135,"        df[""volume""] = df[""pvolume""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 29048, 8973, 796, 47764, 14692, 79, 29048, 8973]"
"üß† ML Signal: Retrieval of stock data, indicating interaction with a stock data source.","[8582, 100, 254, 10373, 26484, 25, 4990, 380, 18206, 286, 4283, 1366, 11, 12739, 10375, 351, 257, 4283, 1366, 2723, 13]",0.5,1168,ml_signal,247,"Retrieval of stock data, indicating interaction with a stock data source.",,1152,        # Êç¢ÊâãÁéá,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 235, 95, 33699, 233, 163, 236, 229]"
"üß† ML Signal: Logging the number of stocks subscribed to, which can indicate system load or usage patterns.","[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 1271, 286, 14420, 45794, 284, 11, 543, 460, 7603, 1080, 3440, 393, 8748, 7572, 13]",0.5,1184,ml_signal,249,"Logging the number of stocks subscribed to, which can indicate system load or usage patterns.",,1168,        # Ê∂®Ë∑åÂπÖ,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 114, 101, 164, 115, 234, 33176, 227]"
"‚ö†Ô∏è SAST Risk (Medium): Potential risk if `tick_to_quote()` is not a function, as it should be passed as a callback.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 4600, 42298, 62, 1462, 62, 22708, 3419, 63, 318, 407, 257, 2163, 11, 355, 340, 815, 307, 3804, 355, 257, 23838, 13]",0.5,1206,sast_risk,251,"Potential risk if `tick_to_quote()` is not a function, as it should be passed as a callback.",Medium,1184,        # ÁõòÂè£ÂçñÂçïÈáëÈ¢ù,"[220, 220, 220, 220, 220, 220, 220, 1303, 13328, 249, 246, 20998, 96, 39355, 244, 39355, 243, 34932, 239, 165, 95, 251]"
‚úÖ Best Practice: Import statements should be at the top of the file.,"[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 379, 262, 1353, 286, 262, 2393, 13]",1.0,1228,best_practice,255,Import statements should be at the top of the file.,,1206,        # ÁõòÂè£‰π∞ÂçïÈáëÈ¢ù,"[220, 220, 220, 220, 220, 220, 220, 1303, 13328, 249, 246, 20998, 96, 20046, 108, 39355, 243, 34932, 239, 165, 95, 251]"
"üß† ML Signal: Regular sleep intervals in a loop, indicating periodic checks or updates.","[8582, 100, 254, 10373, 26484, 25, 23603, 3993, 20016, 287, 257, 9052, 11, 12739, 27458, 8794, 393, 5992, 13]",0.5,1236,ml_signal,258,"Regular sleep intervals in a loop, indicating periodic checks or updates.",,1228,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Exception handling could be more specific to handle different disconnection scenarios.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 35528, 9041, 714, 307, 517, 2176, 284, 5412, 1180, 22837, 295, 13858, 13]",0.5,1276,sast_risk,260,Exception handling could be more specific to handle different disconnection scenarios.,Low,1236,"        df[""is_limit_up""] = (df[""price""] != 0) & (df[""price""] >= df[""limit_up_price""])","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 271, 62, 32374, 62, 929, 8973, 796, 357, 7568, 14692, 20888, 8973, 14512, 657, 8, 1222, 357, 7568, 14692, 20888, 8973, 18189, 47764, 14692, 32374, 62, 929, 62, 20888, 8973, 8]"
"üß† ML Signal: Use of current timestamp to control loop execution, indicating time-based logic.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 41033, 284, 1630, 9052, 9706, 11, 12739, 640, 12, 3106, 9156, 13]",0.5,1290,ml_signal,263,"Use of current timestamp to control loop execution, indicating time-based logic.",,1276,        # Ë∑åÂÅú,"[220, 220, 220, 220, 220, 220, 220, 1303, 5525, 115, 234, 161, 223, 250]"
"üß† ML Signal: Logging the completion time, useful for tracking execution duration.","[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 11939, 640, 11, 4465, 329, 9646, 9706, 9478, 13]",0.5,1290,ml_signal,266,"Logging the completion time, useful for tracking execution duration.",,1290,,[]
"üß† ML Signal: Unsubscribing from quotes, indicating cleanup or resource management.","[8582, 100, 254, 10373, 26484, 25, 791, 7266, 1416, 23098, 422, 13386, 11, 12739, 27425, 393, 8271, 4542, 13]",0.5,1315,ml_signal,267,"Unsubscribing from quotes, indicating cleanup or resource management.",,1290,"        df[""float_cap""] = df[""float_volume""] * df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22468, 62, 11128, 8973, 796, 47764, 14692, 22468, 62, 29048, 8973, 1635, 47764, 14692, 20888, 8973]"
‚úÖ Best Practice: Consider adding error handling for scheduler initialization and job execution.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 6038, 18173, 37588, 290, 1693, 9706, 13]",0.5,1340,best_practice,267,Consider adding error handling for scheduler initialization and job execution.,,1315,"        df[""float_cap""] = df[""float_volume""] * df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22468, 62, 11128, 8973, 796, 47764, 14692, 22468, 62, 29048, 8973, 1635, 47764, 14692, 20888, 8973]"
"üß† ML Signal: Immediate execution of `record_tick`, indicating a startup routine.","[8582, 100, 254, 10373, 26484, 25, 1846, 13857, 9706, 286, 4600, 22105, 62, 42298, 47671, 12739, 257, 13693, 8027, 13]",1.0,1365,ml_signal,267,"Immediate execution of `record_tick`, indicating a startup routine.",,1340,"        df[""float_cap""] = df[""float_volume""] * df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22468, 62, 11128, 8973, 796, 47764, 14692, 22468, 62, 29048, 8973, 1635, 47764, 14692, 20888, 8973]"
"üß† ML Signal: Scheduled job setup, indicating periodic task execution.","[8582, 100, 254, 10373, 26484, 25, 27774, 6309, 1693, 9058, 11, 12739, 27458, 4876, 9706, 13]",0.5,1390,ml_signal,267,"Scheduled job setup, indicating periodic task execution.",,1365,"        df[""float_cap""] = df[""float_volume""] * df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22468, 62, 11128, 8973, 796, 47764, 14692, 22468, 62, 29048, 8973, 1635, 47764, 14692, 20888, 8973]"
"‚ö†Ô∏è SAST Risk (Low): Direct access to protected member `_thread`, which may change in future versions.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 6861, 2888, 4600, 62, 16663, 47671, 543, 743, 1487, 287, 2003, 6300, 13]",0.5,1415,sast_risk,267,"Direct access to protected member `_thread`, which may change in future versions.",Low,1390,"        df[""float_cap""] = df[""float_volume""] * df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22468, 62, 11128, 8973, 796, 47764, 14692, 22468, 62, 29048, 8973, 1635, 47764, 14692, 20888, 8973]"
‚úÖ Best Practice: Ensure all listed functions and variables are defined in the module.,"[26486, 227, 6705, 19939, 25, 48987, 477, 5610, 5499, 290, 9633, 389, 5447, 287, 262, 8265, 13]",0.5,1440,best_practice,267,Ensure all listed functions and variables are defined in the module.,,1415,"        df[""float_cap""] = df[""float_volume""] * df[""price""]","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22468, 62, 11128, 8973, 796, 47764, 14692, 22468, 62, 29048, 8973, 1635, 47764, 14692, 20888, 8973]"

[
  {
    "line": 4,
    "text": "from typing import Optional",
    "annotation": "\u2705 Best Practice: Use of Pydantic for data validation and settings management",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      32233
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      350,
      5173,
      5109,
      329,
      1366,
      21201,
      290,
      6460,
      4542
    ],
    "label": "best_practice",
    "reason": "Use of Pydantic for data validation and settings management"
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of related constants improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3519,
      38491,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of related constants improves code readability and maintainability."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Defining enum members with clear and descriptive names.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      33829,
      1866,
      351,
      1598,
      290,
      35644,
      3891,
      13
    ],
    "label": "best_practice",
    "reason": "Defining enum members with clear and descriptive names."
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Enum for defining a set of related constants improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      16215,
      257,
      900,
      286,
      3519,
      38491,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of Enum for defining a set of related constants improves code readability and maintainability"
  },
  {
    "line": 10,
    "text": "    asc = \"asc\"",
    "annotation": "\u2705 Best Practice: Defining string values for Enum members enhances clarity and usability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10570,
      796,
      366,
      3372,
      1
    ],
    "start_token": 4,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      4731,
      3815,
      329,
      2039,
      388,
      1866,
      32479,
      16287,
      290,
      42863
    ],
    "label": "best_practice",
    "reason": "Defining string values for Enum members enhances clarity and usability"
  },
  {
    "line": 15,
    "text": "    year = \"year\"",
    "annotation": "\u2705 Best Practice: Inheriting from BaseModel suggests use of Pydantic for data validation and settings management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      614,
      796,
      366,
      1941,
      1
    ],
    "start_token": 12,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      7308,
      17633,
      5644,
      779,
      286,
      350,
      5173,
      5109,
      329,
      1366,
      21201,
      290,
      6460,
      4542
    ],
    "label": "best_practice",
    "reason": "Inheriting from BaseModel suggests use of Pydantic for data validation and settings management"
  },
  {
    "line": 17,
    "text": "    day = \"day\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of datetime for timestamps indicates time-based data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1110,
      796,
      366,
      820,
      1
    ],
    "start_token": 20,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4818,
      8079,
      329,
      4628,
      395,
      9430,
      9217,
      640,
      12,
      3106,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of datetime for timestamps indicates time-based data processing"
  },
  {
    "line": 19,
    "text": "    minute = \"minute\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of datetime for timestamps indicates time-based data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5664,
      796,
      366,
      11374,
      1
    ],
    "start_token": 28,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4818,
      8079,
      329,
      4628,
      395,
      9430,
      9217,
      640,
      12,
      3106,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of datetime for timestamps indicates time-based data processing"
  },
  {
    "line": 18,
    "text": "    hour = \"hour\"",
    "annotation": "\u2705 Best Practice: Class should inherit from BaseModel to leverage pydantic's data validation features",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1711,
      796,
      366,
      9769,
      1
    ],
    "start_token": 36,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      7308,
      17633,
      284,
      16094,
      279,
      5173,
      5109,
      338,
      1366,
      21201,
      3033
    ],
    "label": "best_practice",
    "reason": "Class should inherit from BaseModel to leverage pydantic's data validation features"
  },
  {
    "line": 20,
    "text": "    second = \"second\"",
    "annotation": "\u2705 Best Practice: Type hinting for class attributes improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1218,
      796,
      366,
      12227,
      1
    ],
    "start_token": 44,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for class attributes improves code readability and maintainability"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for class attributes improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 52,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for class attributes improves code readability and maintainability"
  },
  {
    "line": 21,
    "text": "",
    "annotation": "\u2705 Best Practice: Inheriting from BaseModel suggests use of Pydantic for data validation and settings management.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 52,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      7308,
      17633,
      5644,
      779,
      286,
      350,
      5173,
      5109,
      329,
      1366,
      21201,
      290,
      6460,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Inheriting from BaseModel suggests use of Pydantic for data validation and settings management."
  },
  {
    "line": 23,
    "text": "class AbsoluteTimeRange(BaseModel):",
    "annotation": "\u2705 Best Practice: Use of Optional and default=None indicates that these fields are not mandatory.",
    "confidence": 0.5,
    "tokens": [
      4871,
      36532,
      7575,
      17257,
      7,
      14881,
      17633,
      2599
    ],
    "start_token": 52,
    "end_token": 60,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      32233,
      290,
      4277,
      28,
      14202,
      9217,
      326,
      777,
      7032,
      389,
      407,
      13677,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Optional and default=None indicates that these fields are not mandatory."
  },
  {
    "line": 24,
    "text": "    start_timestamp: datetime",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Typo in 'RelativeTimeRage' could lead to runtime errors or misbehavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      25,
      4818,
      8079
    ],
    "start_token": 60,
    "end_token": 70,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17134,
      78,
      287,
      705,
      6892,
      876,
      7575,
      49,
      496,
      6,
      714,
      1085,
      284,
      19124,
      8563,
      393,
      2984,
      46571,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Typo in 'RelativeTimeRage' could lead to runtime errors or misbehavior."
  },
  {
    "line": 24,
    "text": "    start_timestamp: datetime",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      25,
      4818,
      8079
    ],
    "start_token": 70,
    "end_token": 80,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module."
  }
]
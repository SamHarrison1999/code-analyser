annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Group related imports together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 3519, 17944, 1978, 329, 1365, 1100, 1799, 13]",0.5,6,best_practice,5,Group related imports together for better readability.,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Usage of logging for tracking and debugging.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 18931, 329, 9646, 290, 28769, 13]",0.5,24,ml_signal,17,Usage of logging for tracking and debugging.,,6,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
üß† ML Signal: Iterating over a predefined list of stock pool names,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2747, 18156, 1351, 286, 4283, 5933, 3891]",1.0,53,ml_signal,18,Iterating over a predefined list of stock pool names,,24,"from zvt.utils.time_utils import to_pd_timestamp, date_time_by_interval, current_date","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823, 11, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11, 1459, 62, 4475]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if StockPools.query_data is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 10500, 47, 10141, 13, 22766, 62, 7890, 318, 407, 6105, 5336, 36951]",1.0,53,sast_risk,19,Potential SQL injection if StockPools.query_data is not properly sanitized,Low,53,,[]
‚úÖ Best Practice: Using a helper function to handle date-time conversion,"[26486, 227, 6705, 19939, 25, 8554, 257, 31904, 2163, 284, 5412, 3128, 12, 2435, 11315]",1.0,70,best_practice,29,Using a helper function to handle date-time conversion,,53,"            return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if TopStocks.query_data is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 5849, 1273, 3320, 13, 22766, 62, 7890, 318, 407, 6105, 5336, 36951]",1.0,80,sast_risk,31,Potential SQL injection if TopStocks.query_data is not properly sanitized,Low,70,        start = None,"[220, 220, 220, 220, 220, 220, 220, 923, 796, 6045]"
‚úÖ Best Practice: Checking for null data before proceeding,"[26486, 227, 6705, 19939, 25, 39432, 329, 9242, 1366, 878, 18788]",1.0,110,best_practice,33,Checking for null data before proceeding,,80,            start = date_time_by_interval(datas[0].timestamp),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7, 19608, 292, 58, 15, 4083, 16514, 27823, 8]"
üß† ML Signal: Logging information about missing data,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 4814, 1366]",0.5,154,ml_signal,35,Logging information about missing data,,110,"        df = TopStocks.query_data(start_timestamp=start, columns=[TopStocks.timestamp], order=TopStocks.timestamp.asc())","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 5849, 1273, 3320, 13, 22766, 62, 7890, 7, 9688, 62, 16514, 27823, 28, 9688, 11, 15180, 41888, 9126, 1273, 3320, 13, 16514, 27823, 4357, 1502, 28, 9126, 1273, 3320, 13, 16514, 27823, 13, 3372, 28955]"
‚úÖ Best Practice: Converting DataFrame column to list for iteration,"[26486, 227, 6705, 19939, 25, 35602, 889, 6060, 19778, 5721, 284, 1351, 329, 24415]",1.0,166,best_practice,38,Converting DataFrame column to list for iteration,,154,            continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
üß† ML Signal: Logging the process of building stock pools,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 1429, 286, 2615, 4283, 20354]",0.5,205,ml_signal,41,Logging the process of building stock pools,,166,"            logger.info(f""build_system_stock_pools {stock_pool_name} to {target_date}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 11249, 62, 10057, 62, 13578, 62, 7742, 82, 1391, 13578, 62, 7742, 62, 3672, 92, 284, 1391, 16793, 62, 4475, 92, 4943]"
üß† ML Signal: Different stock selection strategies based on pool name,"[8582, 100, 254, 10373, 26484, 25, 20615, 4283, 6356, 10064, 1912, 319, 5933, 1438]",1.0,244,ml_signal,44,Different stock selection strategies based on pool name,,205,"                long_stocks = get_top_stocks(target_date=target_date, return_type=""long"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 890, 62, 29522, 796, 651, 62, 4852, 62, 29522, 7, 16793, 62, 4475, 28, 16793, 62, 4475, 11, 1441, 62, 4906, 2625, 6511, 4943]"
‚úÖ Best Practice: Using set to remove duplicates,"[26486, 227, 6705, 19939, 25, 8554, 900, 284, 4781, 14184, 16856]",1.0,287,best_practice,47,Using set to remove duplicates,,244,"                small_stocks = get_top_stocks(target_date=target_date, return_type=""small_vol_up"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1402, 62, 29522, 796, 651, 62, 4852, 62, 29522, 7, 16793, 62, 4475, 28, 16793, 62, 4475, 11, 1441, 62, 4906, 2625, 17470, 62, 10396, 62, 929, 4943]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be risky if assertions are disabled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 17564, 611, 29965, 389, 10058]",1.0,306,sast_risk,56,Using assert for control flow can be risky if assertions are disabled,Low,287,"                provider=""em"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 2625, 368, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if Stock1dHfqKdata.query_data is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 10500, 16, 67, 39, 69, 80, 42, 7890, 13, 22766, 62, 7890, 318, 407, 6105, 5336, 36951]",1.0,323,sast_risk,57,Potential SQL injection if Stock1dHfqKdata.query_data is not properly sanitized,Low,306,                filters=[,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 41888]"
‚úÖ Best Practice: Converting DataFrame column to list for further processing,"[26486, 227, 6705, 19939, 25, 35602, 889, 6060, 19778, 5721, 284, 1351, 329, 2252, 7587]",0.5,323,best_practice,70,Converting DataFrame column to list for further processing,,323,,[]
‚úÖ Best Practice: Type hinting for better code readability and maintenance,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 9262]",1.0,323,best_practice,70,Type hinting for better code readability and maintenance,,323,,[]
üß† ML Signal: Building stock pool with a specific model and target date,"[8582, 100, 254, 10373, 26484, 25, 11819, 4283, 5933, 351, 257, 2176, 2746, 290, 2496, 3128]",1.0,335,ml_signal,74,Building stock pool with a specific model and target date,,323,    datas = TagStats.query_data(,"[220, 220, 220, 19395, 796, 17467, 29668, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Function signature with parameters indicating usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 10007, 12739, 8748, 7572]",0.5,364,ml_signal,64,Function signature with parameters indicating usage patterns,,335,"            entity_ids = kdata_df[""entity_id""].tolist()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 479, 7890, 62, 7568, 14692, 26858, 62, 312, 1, 4083, 83, 349, 396, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 17311, 389, 407, 5336, 36951]",1.0,375,sast_risk,75,Potential SQL Injection if inputs are not sanitized,Medium,364,"        limit=1,","[220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
‚úÖ Best Practice: Recursive call with modified parameters,"[26486, 227, 6705, 19939, 25, 3311, 30753, 869, 351, 9518, 10007]",1.0,383,best_practice,81,Recursive call with modified parameters,,375,    current_df = None,"[220, 220, 220, 1459, 62, 7568, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Potential data integrity risk if df_to_db fails,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 11540, 2526, 611, 47764, 62, 1462, 62, 9945, 10143]",0.5,415,sast_risk,142,Potential data integrity risk if df_to_db fails,Low,383,"            sorted_df.set_index(""main_tag"", inplace=True, drop=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 23243, 62, 7568, 13, 2617, 62, 9630, 7203, 12417, 62, 12985, 1600, 287, 5372, 28, 17821, 11, 4268, 28, 25101, 8]"
‚úÖ Best Practice: Type hinting for create_stock_pools_model improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2251, 62, 13578, 62, 7742, 82, 62, 19849, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,423,best_practice,158,Type hinting for create_stock_pools_model improves code readability and maintainability,,415,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Function call to build_stock_pool with parameters could indicate usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 1382, 62, 13578, 62, 7742, 351, 10007, 714, 7603, 8748, 7572]",0.5,442,ml_signal,162,Function call to build_stock_pool with parameters could indicate usage patterns,,423,"            data_schema=TagStats,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 15952, 2611, 28, 24835, 29668, 11]"
üß† ML Signal: Function call to build_stock_pool_tag_stats with parameters could indicate usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 1382, 62, 13578, 62, 7742, 62, 12985, 62, 34242, 351, 10007, 714, 7603, 8748, 7572]",0.5,461,ml_signal,162,Function call to build_stock_pool_tag_stats with parameters could indicate usage patterns,,442,"            data_schema=TagStats,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 15952, 2611, 28, 24835, 29668, 11]"
‚ö†Ô∏è SAST Risk (Low): Direct execution of code in the global scope can lead to unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 9706, 286, 2438, 287, 262, 3298, 8354, 460, 1085, 284, 30261, 1735, 3048]",1.0,468,sast_risk,171,Direct execution of code in the global scope can lead to unintended side effects,Low,461,"    entity_ids,","[220, 220, 220, 9312, 62, 2340, 11]"
‚ö†Ô∏è SAST Risk (Low): Missing required parameter 'entity_ids' in function call,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25639, 2672, 11507, 705, 26858, 62, 2340, 6, 287, 2163, 869]",0.5,475,sast_risk,171,Missing required parameter 'entity_ids' in function call,Low,468,"    entity_ids,","[220, 220, 220, 9312, 62, 2340, 11]"
‚úÖ Best Practice: Defining __all__ helps to control the module's public API,"[26486, 227, 6705, 19939, 25, 2896, 3191, 11593, 439, 834, 5419, 284, 1630, 262, 8265, 338, 1171, 7824]",0.5,482,best_practice,171,Defining __all__ helps to control the module's public API,,475,"    entity_ids,","[220, 220, 220, 9312, 62, 2340, 11]"

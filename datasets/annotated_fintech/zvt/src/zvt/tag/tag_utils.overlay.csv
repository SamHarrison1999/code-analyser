annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,0,ml_signal,5,Importing specific modules from a package indicates usage patterns and dependencies,,0,,[]
🧠 ML Signal: Importing specific functions or classes from a module indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 9217, 8748, 7572]",0.5,0,ml_signal,7,Importing specific functions or classes from a module indicates usage patterns,,0,,[]
🧠 ML Signal: Importing specific classes from a module indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 8748, 7572]",0.5,13,ml_signal,9,Importing specific classes from a module indicates usage patterns,,0,from zvt.contract.api import df_to_db,"[6738, 1976, 36540, 13, 28484, 13, 15042, 1330, 47764, 62, 1462, 62, 9945]"
🧠 ML Signal: Importing specific classes from a module indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 8748, 7572]",0.5,24,ml_signal,11,Importing specific classes from a module indicates usage patterns,,13,from zvt.tag.common import StockPoolType,"[6738, 1976, 36540, 13, 12985, 13, 11321, 1330, 10500, 27201, 6030]"
🧠 ML Signal: Importing specific classes from a module indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 8748, 7572]",0.5,24,ml_signal,13,Importing specific classes from a module indicates usage patterns,,24,,[]
"⚠️ SAST Risk (Low): Potential file path traversal if zvt_env[""resource_path""] is user-controlled","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 33038, 282, 611, 1976, 36540, 62, 24330, 14692, 31092, 62, 6978, 8973, 318, 2836, 12, 14401]",1.0,31,sast_risk,10,"Potential file path traversal if zvt_env[""resource_path""] is user-controlled",Low,24,from zvt.domain import Block,"[6738, 1976, 36540, 13, 27830, 1330, 9726]"
✅ Best Practice: Use a context manager to ensure the file is properly closed after reading,"[26486, 227, 6705, 19939, 25, 5765, 257, 4732, 4706, 284, 4155, 262, 2393, 318, 6105, 4838, 706, 3555]",0.5,42,best_practice,11,Use a context manager to ensure the file is properly closed after reading,,31,from zvt.tag.common import StockPoolType,"[6738, 1976, 36540, 13, 12985, 13, 11321, 1330, 10500, 27201, 6030]"
🧠 ML Signal: Usage of os.path.join for constructing file paths,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 28686, 13, 6978, 13, 22179, 329, 30580, 2393, 13532]",0.5,72,ml_signal,12,Usage of os.path.join for constructing file paths,,42,"from zvt.tag.tag_schemas import MainTagInfo, SubTagInfo, HiddenTagInfo, StockPoolInfo, IndustryInfo","[6738, 1976, 36540, 13, 12985, 13, 12985, 62, 1416, 4411, 292, 1330, 8774, 24835, 12360, 11, 3834, 24835, 12360, 11, 20458, 24835, 12360, 11, 10500, 27201, 12360, 11, 17420, 12360]"
🧠 ML Signal: Reading JSON data from a file,"[8582, 100, 254, 10373, 26484, 25, 11725, 19449, 1366, 422, 257, 2393]",0.5,72,ml_signal,13,Reading JSON data from a file,,72,,[]
✅ Best Practice: Use of type hints for function return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,72,best_practice,13,Use of type hints for function return type improves code readability and maintainability.,,72,,[]
"🧠 ML Signal: Calls a function to get a mapping, indicating a pattern of data transformation.","[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2163, 284, 651, 257, 16855, 11, 12739, 257, 3912, 286, 1366, 13389, 13]",0.5,96,ml_signal,15,"Calls a function to get a mapping, indicating a pattern of data transformation.",,72,"def _get_default_industry_main_tag_mapping() -> Dict[str, str]:","[4299, 4808, 1136, 62, 12286, 62, 23213, 563, 62, 12417, 62, 12985, 62, 76, 5912, 3419, 4613, 360, 713, 58, 2536, 11, 965, 5974]"
"🧠 ML Signal: Iterating over dictionary items, a common pattern for data processing.","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 11, 257, 2219, 3912, 329, 1366, 7587, 13]",0.5,96,ml_signal,18,"Iterating over dictionary items, a common pattern for data processing.",,96,,[]
✅ Best Practice: Use of setdefault to initialize a list if the key is not present.,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 12286, 284, 41216, 257, 1351, 611, 262, 1994, 318, 407, 1944, 13]",1.0,123,best_practice,20,Use of setdefault to initialize a list if the key is not present.,,96,"def _get_default_main_tag_industry_mapping() -> Dict[str, List[str]]:","[4299, 4808, 1136, 62, 12286, 62, 12417, 62, 12985, 62, 23213, 563, 62, 76, 5912, 3419, 4613, 360, 713, 58, 2536, 11, 7343, 58, 2536, 60, 5974]"
✅ Best Practice: Use of get method to safely access dictionary values.,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 2446, 284, 11512, 1895, 22155, 3815, 13]",1.0,129,best_practice,22,Use of get method to safely access dictionary values.,,123,    result = {},"[220, 220, 220, 1255, 796, 23884]"
✅ Best Practice: Use of type hinting for function return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,156,best_practice,20,Use of type hinting for function return type improves code readability and maintainability,,129,"def _get_default_main_tag_industry_mapping() -> Dict[str, List[str]]:","[4299, 4808, 1136, 62, 12286, 62, 12417, 62, 12985, 62, 23213, 563, 62, 76, 5912, 3419, 4613, 360, 713, 58, 2536, 11, 7343, 58, 2536, 60, 5974]"
"⚠️ SAST Risk (Medium): Potential file path traversal vulnerability if zvt_env[""resource_path""] is user-controlled","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 33038, 282, 15131, 611, 1976, 36540, 62, 24330, 14692, 31092, 62, 6978, 8973, 318, 2836, 12, 14401]",1.0,162,sast_risk,22,"Potential file path traversal vulnerability if zvt_env[""resource_path""] is user-controlled",Medium,156,    result = {},"[220, 220, 220, 1255, 796, 23884]"
✅ Best Practice: Use of context manager for file handling ensures proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 2393, 9041, 19047, 1774, 8271, 4542]",0.5,176,best_practice,23,Use of context manager for file handling ensures proper resource management,,162,"    for industry, main_tag in mapping.items():","[220, 220, 220, 329, 2831, 11, 1388, 62, 12985, 287, 16855, 13, 23814, 33529]"
🧠 ML Signal: Use of json.load to parse JSON data from a file,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 33918, 13, 2220, 284, 21136, 19449, 1366, 422, 257, 2393]",0.5,196,ml_signal,25,Use of json.load to parse JSON data from a file,,176,        result.get(main_tag).append(industry),"[220, 220, 220, 220, 220, 220, 220, 1255, 13, 1136, 7, 12417, 62, 12985, 737, 33295, 7, 23213, 563, 8]"
✅ Best Practice: Include type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",1.0,210,best_practice,23,Include type hints for better code readability and maintainability,,196,"    for industry, main_tag in mapping.items():","[220, 220, 220, 329, 2831, 11, 1388, 62, 12985, 287, 16855, 13, 23814, 33529]"
🧠 ML Signal: Function calls can indicate common utility functions or patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 460, 7603, 2219, 10361, 5499, 393, 7572]",0.5,230,ml_signal,25,Function calls can indicate common utility functions or patterns,,210,        result.get(main_tag).append(industry),"[220, 220, 220, 220, 220, 220, 220, 1255, 13, 1136, 7, 12417, 62, 12985, 737, 33295, 7, 23213, 563, 8]"
✅ Best Practice: Use setdefault to simplify dictionary initialization,"[26486, 227, 6705, 19939, 25, 5765, 900, 12286, 284, 30276, 22155, 37588]",0.5,253,best_practice,29,Use setdefault to simplify dictionary initialization,,230,"def _get_default_concept_main_tag_mapping() -> Dict[str, str]:","[4299, 4808, 1136, 62, 12286, 62, 43169, 62, 12417, 62, 12985, 62, 76, 5912, 3419, 4613, 360, 713, 58, 2536, 11, 965, 5974]"
✅ Best Practice: Use get method to safely access dictionary values,"[26486, 227, 6705, 19939, 25, 5765, 651, 2446, 284, 11512, 1895, 22155, 3815]",1.0,267,best_practice,31,Use get method to safely access dictionary values,,253,        return json.load(f),"[220, 220, 220, 220, 220, 220, 220, 1441, 33918, 13, 2220, 7, 69, 8]"
✅ Best Practice: Use of type hinting for function return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,309,best_practice,30,Use of type hinting for function return type improves code readability and maintainability.,,267,"    with open(os.path.join(zvt_env[""resource_path""], ""concept_main_tag_mapping.json""), encoding=""utf-8"") as f:","[220, 220, 220, 351, 1280, 7, 418, 13, 6978, 13, 22179, 7, 89, 36540, 62, 24330, 14692, 31092, 62, 6978, 33116, 366, 43169, 62, 12417, 62, 12985, 62, 76, 5912, 13, 17752, 12340, 21004, 2625, 40477, 12, 23, 4943, 355, 277, 25]"
✅ Best Practice: Using list() to explicitly convert keys to a list for clarity.,"[26486, 227, 6705, 19939, 25, 8554, 1351, 3419, 284, 11777, 10385, 8251, 284, 257, 1351, 329, 16287, 13]",0.5,309,best_practice,32,Using list() to explicitly convert keys to a list for clarity.,,309,,[]
🧠 ML Signal: Use of query_data method to filter and order data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12405, 62, 7890, 2446, 284, 8106, 290, 1502, 1366]",0.5,309,ml_signal,32,Use of query_data method to filter and order data,,309,,[]
⚠️ SAST Risk (Low): Potential risk of SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,309,sast_risk,33,Potential risk of SQL injection if filters are not properly sanitized,Low,309,,[]
✅ Best Practice: Use of descriptive function name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2163, 1438, 329, 16287]",0.5,309,best_practice,33,Use of descriptive function name for clarity,,309,,[]
🧠 ML Signal: Filtering data based on category,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 6536]",1.0,315,ml_signal,36,Filtering data based on category,,309,    result = {},"[220, 220, 220, 1255, 796, 23884]"
🧠 ML Signal: Selecting specific columns from the data,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 2176, 15180, 422, 262, 1366]",1.0,329,ml_signal,37,Selecting specific columns from the data,,315,"    for concept, main_tag in mapping.items():","[220, 220, 220, 329, 3721, 11, 1388, 62, 12985, 287, 16855, 13, 23814, 33529]"
🧠 ML Signal: Returning data in a specific format (dataframe),"[8582, 100, 254, 10373, 26484, 25, 42882, 1366, 287, 257, 2176, 5794, 357, 7890, 14535, 8]",0.5,347,ml_signal,38,Returning data in a specific format (dataframe),,329,"        result.setdefault(main_tag, [])","[220, 220, 220, 220, 220, 220, 220, 1255, 13, 2617, 12286, 7, 12417, 62, 12985, 11, 685, 12962]"
✅ Best Practice: Use of method chaining for concise code,"[26486, 227, 6705, 19939, 25, 5765, 286, 2446, 442, 1397, 329, 35327, 2438]",0.5,365,best_practice,38,Use of method chaining for concise code,,347,"        result.setdefault(main_tag, [])","[220, 220, 220, 220, 220, 220, 220, 1255, 13, 2617, 12286, 7, 12417, 62, 12985, 11, 685, 12962]"
🧠 ML Signal: Use of filters to query specific data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16628, 284, 12405, 2176, 1366]",0.5,365,ml_signal,41,Use of filters to query specific data,,365,,[]
🧠 ML Signal: Specifying columns to retrieve,"[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 15180, 284, 19818]",0.5,380,ml_signal,43,Specifying columns to retrieve,,365,def _get_initial_sub_tags() -> List[str]:,"[4299, 4808, 1136, 62, 36733, 62, 7266, 62, 31499, 3419, 4613, 7343, 58, 2536, 5974]"
🧠 ML Signal: Specifying return type for the query,"[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 1441, 2099, 329, 262, 12405]",1.0,380,ml_signal,45,Specifying return type for the query,,380,,[]
🧠 ML Signal: Ordering data by timestamp in descending order,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 1366, 416, 41033, 287, 31491, 1502]",1.0,389,ml_signal,47,Ordering data by timestamp in descending order,,380,def _get_industry_list():,"[4299, 4808, 1136, 62, 23213, 563, 62, 4868, 33529]"
🧠 ML Signal: Converting dataframe column to list,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 14535, 5721, 284, 1351]",1.0,393,ml_signal,50,Converting dataframe column to list,,389,    ),"[220, 220, 220, 1267]"
🧠 ML Signal: Use of a private function naming convention with an underscore,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2839, 2163, 19264, 9831, 351, 281, 44810]",1.0,407,ml_signal,37,Use of a private function naming convention with an underscore,,393,"    for concept, main_tag in mapping.items():","[220, 220, 220, 329, 3721, 11, 1388, 62, 12985, 287, 16855, 13, 23814, 33529]"
🧠 ML Signal: Querying data with specific filters and ordering,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 290, 16216]",1.0,425,ml_signal,38,Querying data with specific filters and ordering,,407,"        result.setdefault(main_tag, [])","[220, 220, 220, 220, 220, 220, 220, 1255, 13, 2617, 12286, 7, 12417, 62, 12985, 11, 685, 12962]"
⚠️ SAST Risk (Low): Potential SQL injection risk if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,425,sast_risk,41,Potential SQL injection risk if filters are not properly sanitized,Low,425,,[]
🧠 ML Signal: Filtering data based on a specific category,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 257, 2176, 6536]",1.0,425,ml_signal,42,Filtering data based on a specific category,,425,,[]
🧠 ML Signal: Selecting specific columns from the data,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 2176, 15180, 422, 262, 1366]",1.0,440,ml_signal,43,Selecting specific columns from the data,,425,def _get_initial_sub_tags() -> List[str]:,"[4299, 4808, 1136, 62, 36733, 62, 7266, 62, 31499, 3419, 4613, 7343, 58, 2536, 5974]"
🧠 ML Signal: Specifying the return type of the query,"[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 262, 1441, 2099, 286, 262, 12405]",1.0,461,ml_signal,44,Specifying the return type of the query,,440,    return list(_get_default_concept_main_tag_mapping().keys()),"[220, 220, 220, 1441, 1351, 28264, 1136, 62, 12286, 62, 43169, 62, 12417, 62, 12985, 62, 76, 5912, 22446, 13083, 28955]"
🧠 ML Signal: Ordering data by a timestamp in descending order,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 1366, 416, 257, 41033, 287, 31491, 1502]",1.0,461,ml_signal,45,Ordering data by a timestamp in descending order,,461,,[]
🧠 ML Signal: Converting a DataFrame column to a list,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 6060, 19778, 5721, 284, 257, 1351]",1.0,472,ml_signal,48,Converting a DataFrame column to a list,,461,    df = Block.query_data(,"[220, 220, 220, 47764, 796, 9726, 13, 22766, 62, 7890, 7]"
✅ Best Practice: Function name is descriptive and indicates its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 9217, 663, 4007]",0.5,472,best_practice,42,Function name is descriptive and indicates its purpose,,472,,[]
"🧠 ML Signal: Usage of a function to retrieve a mapping, indicating a pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 257, 16855, 11, 12739, 257, 3912, 286, 1366, 45069]",0.5,493,ml_signal,44,"Usage of a function to retrieve a mapping, indicating a pattern of data retrieval",,472,    return list(_get_default_concept_main_tag_mapping().keys()),"[220, 220, 220, 1441, 1351, 28264, 1136, 62, 12286, 62, 43169, 62, 12417, 62, 12985, 62, 76, 5912, 22446, 13083, 28955]"
"🧠 ML Signal: Conversion to set for set operations, indicating a pattern of data comparison","[8582, 100, 254, 10373, 26484, 25, 44101, 284, 900, 329, 900, 4560, 11, 12739, 257, 3912, 286, 1366, 7208]",0.5,493,ml_signal,46,"Conversion to set for set operations, indicating a pattern of data comparison",,493,,[]
"🧠 ML Signal: Usage of list and set operations to find differences, indicating a pattern of data manipulation","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 290, 900, 4560, 284, 1064, 5400, 11, 12739, 257, 3912, 286, 1366, 17512]",0.5,502,ml_signal,47,"Usage of list and set operations to find differences, indicating a pattern of data manipulation",,493,def _get_industry_list():,"[4299, 4808, 1136, 62, 23213, 563, 62, 4868, 33529]"
"✅ Best Practice: Function name is prefixed with an underscore, indicating it's intended for internal use.","[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 7694, 2966, 351, 281, 44810, 11, 12739, 340, 338, 5292, 329, 5387, 779, 13]",0.5,502,best_practice,45,"Function name is prefixed with an underscore, indicating it's intended for internal use.",,502,,[]
🧠 ML Signal: Usage of a function to retrieve a list of keys from a dictionary.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 257, 1351, 286, 8251, 422, 257, 22155, 13]",0.5,511,ml_signal,47,Usage of a function to retrieve a list of keys from a dictionary.,,502,def _get_industry_list():,"[4299, 4808, 1136, 62, 23213, 563, 62, 4868, 33529]"
🧠 ML Signal: Use of set operations to find differences between two lists.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 4560, 284, 1064, 5400, 1022, 734, 8341, 13]",0.5,549,ml_signal,49,Use of set operations to find differences between two lists.,,511,"        filters=[Block.category == ""industry""], columns=[Block.name], return_type=""df"", order=Block.timestamp.desc()","[220, 220, 220, 220, 220, 220, 220, 16628, 41888, 12235, 13, 22872, 6624, 366, 23213, 563, 33116, 15180, 41888, 12235, 13, 3672, 4357, 1441, 62, 4906, 2625, 7568, 1600, 1502, 28, 12235, 13, 16514, 27823, 13, 20147, 3419]"
🧠 ML Signal: Hardcoded entity_id could indicate a default or special user,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 9312, 62, 312, 714, 7603, 257, 4277, 393, 2041, 2836]",1.0,553,ml_signal,50,Hardcoded entity_id could indicate a default or special user,,549,    ),"[220, 220, 220, 1267]"
🧠 ML Signal: Use of f-string for id generation shows dynamic key creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 4686, 5270, 2523, 8925, 1994, 6282]",0.5,566,ml_signal,51,Use of f-string for id generation shows dynamic key creation,,553,"    return df[""name""].tolist()","[220, 220, 220, 1441, 47764, 14692, 3672, 1, 4083, 83, 349, 396, 3419]"
🧠 ML Signal: Use of f-string for tag_reason shows dynamic message creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 7621, 62, 41181, 2523, 8925, 3275, 6282]",0.5,566,ml_signal,61,Use of f-string for tag_reason shows dynamic message creation,,566,,[]
🧠 ML Signal: Iterating over items of a mapping function,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3709, 286, 257, 16855, 2163]",1.0,576,ml_signal,62,Iterating over items of a mapping function,,566,def _check_missed_industry():,"[4299, 4808, 9122, 62, 3927, 276, 62, 23213, 563, 33529]"
🧠 ML Signal: Iterating over items of a mapping function,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3709, 286, 257, 16855, 2163]",1.0,601,ml_signal,64,Iterating over items of a mapping function,,576,    return list(set(_get_industry_list()) - set(current_industry_list)),"[220, 220, 220, 1441, 1351, 7, 2617, 28264, 1136, 62, 23213, 563, 62, 4868, 28955, 532, 900, 7, 14421, 62, 23213, 563, 62, 4868, 4008]"
✅ Best Practice: Checking for existence in a dictionary before processing,"[26486, 227, 6705, 19939, 25, 39432, 329, 6224, 287, 257, 22155, 878, 7587]",1.0,626,best_practice,64,Checking for existence in a dictionary before processing,,601,    return list(set(_get_industry_list()) - set(current_industry_list)),"[220, 220, 220, 1441, 1351, 7, 2617, 28264, 1136, 62, 23213, 563, 62, 4868, 28955, 532, 900, 7, 14421, 62, 23213, 563, 62, 4868, 4008]"
🧠 ML Signal: Use of f-string for id generation shows dynamic key creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 4686, 5270, 2523, 8925, 1994, 6282]",0.5,639,ml_signal,73,Use of f-string for id generation shows dynamic key creation,,626,"    timestamp = ""2024-03-25""","[220, 220, 220, 41033, 796, 366, 1238, 1731, 12, 3070, 12, 1495, 1]"
🧠 ML Signal: Use of f-string for tag_reason shows dynamic message creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 7621, 62, 41181, 2523, 8925, 3275, 6282]",0.5,647,ml_signal,77,Use of f-string for tag_reason shows dynamic message creation,,639,        {,"[220, 220, 220, 220, 220, 220, 220, 1391]"
✅ Best Practice: Concatenating lists for a combined result,"[26486, 227, 6705, 19939, 25, 1482, 9246, 268, 803, 8341, 329, 257, 5929, 1255]",0.5,655,best_practice,77,Concatenating lists for a combined result,,647,        {,"[220, 220, 220, 220, 220, 220, 220, 1391]"
🧠 ML Signal: Use of hardcoded timestamp and entity_id could indicate a pattern for default or initial data setup,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1327, 40976, 41033, 290, 9312, 62, 312, 714, 7603, 257, 3912, 329, 4277, 393, 4238, 1366, 9058]",1.0,665,ml_signal,74,Use of hardcoded timestamp and entity_id could indicate a pattern for default or initial data setup,,655,"    entity_id = ""admin""","[220, 220, 220, 9312, 62, 312, 796, 366, 28482, 1]"
🧠 ML Signal: Use of dictionary comprehension to transform data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 35915, 284, 6121, 1366]",0.5,689,ml_signal,88,Use of dictionary comprehension to transform data,,665,"    for tag, concepts in _get_default_main_tag_concept_mapping().items():","[220, 220, 220, 329, 7621, 11, 10838, 287, 4808, 1136, 62, 12286, 62, 12417, 62, 12985, 62, 43169, 62, 76, 5912, 22446, 23814, 33529]"
🧠 ML Signal: Function name with underscore prefix suggests internal or private use,"[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 351, 44810, 21231, 5644, 5387, 393, 2839, 779]",1.0,715,ml_signal,89,Function name with underscore prefix suggests internal or private use,,689,        if tag not in _get_default_main_tag_industry_mapping():,"[220, 220, 220, 220, 220, 220, 220, 611, 7621, 407, 287, 4808, 1136, 62, 12286, 62, 12417, 62, 12985, 62, 23213, 563, 62, 76, 5912, 33529]"
🧠 ML Signal: Hardcoded entity_id could indicate a default or special user,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 9312, 62, 312, 714, 7603, 257, 4277, 393, 2041, 2836]",1.0,748,ml_signal,92,Hardcoded entity_id could indicate a default or special user,,715,"                    ""id"": f""{entity_id}_{tag}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 12985, 92, 1600]"
🧠 ML Signal: Use of f-string for dynamic ID generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 8925, 4522, 5270]",1.0,781,ml_signal,92,Use of f-string for dynamic ID generation,,748,"                    ""id"": f""{entity_id}_{tag}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 12985, 92, 1600]"
✅ Best Practice: Using dictionary comprehension for readability and efficiency,"[26486, 227, 6705, 19939, 25, 8554, 22155, 35915, 329, 1100, 1799, 290, 9332]",1.0,794,best_practice,104,Using dictionary comprehension for readability and efficiency,,781,"    timestamp = ""2024-03-25""","[220, 220, 220, 41033, 796, 366, 1238, 1731, 12, 3070, 12, 1495, 1]"
🧠 ML Signal: Use of hardcoded timestamp and entity_id for stock pool information,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1327, 40976, 41033, 290, 9312, 62, 312, 329, 4283, 5933, 1321]",0.5,807,ml_signal,104,Use of hardcoded timestamp and entity_id for stock pool information,,794,"    timestamp = ""2024-03-25""","[220, 220, 220, 41033, 796, 366, 1238, 1731, 12, 3070, 12, 1495, 1]"
🧠 ML Signal: Pattern of constructing unique IDs using entity_id and stock_pool_name,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30580, 3748, 32373, 1262, 9312, 62, 312, 290, 4283, 62, 7742, 62, 3672]",0.5,815,ml_signal,106,Pattern of constructing unique IDs using entity_id and stock_pool_name,,807,    industry_info = [,"[220, 220, 220, 2831, 62, 10951, 796, 685]"
⚠️ SAST Risk (Low): Potential misuse of StockPoolType if not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 10500, 27201, 6030, 611, 407, 6105, 31031]",1.0,835,sast_risk,113,Potential misuse of StockPoolType if not properly validated,Low,815,"            ""main_tag"": main_tag,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12417, 62, 12985, 1298, 1388, 62, 12985, 11]"
🧠 ML Signal: Iteration over a predefined list of stock pool names,"[8582, 100, 254, 10373, 26484, 25, 40806, 341, 625, 257, 2747, 18156, 1351, 286, 4283, 5933, 3891]",1.0,839,ml_signal,116,Iteration over a predefined list of stock pool names,,835,    ],"[220, 220, 220, 2361]"
🧠 ML Signal: Use of a dictionary to map stock tags to descriptions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 284, 3975, 4283, 15940, 284, 16969]",1.0,839,ml_signal,123,Use of a dictionary to map stock tags to descriptions,,839,,[]
"✅ Best Practice: Function name is prefixed with an underscore, indicating it's intended for internal use.","[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 7694, 2966, 351, 281, 44810, 11, 12739, 340, 338, 5292, 329, 5387, 779, 13]",0.5,839,best_practice,123,"Function name is prefixed with an underscore, indicating it's intended for internal use.",,839,,[]
🧠 ML Signal: Hardcoded timestamp could indicate a fixed point in time for data processing.,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 41033, 714, 7603, 257, 5969, 966, 287, 640, 329, 1366, 7587, 13]",0.5,847,ml_signal,125,Hardcoded timestamp could indicate a fixed point in time for data processing.,,839,        {,"[220, 220, 220, 220, 220, 220, 220, 1391]"
🧠 ML Signal: Hardcoded entity_id could indicate a specific user or role context.,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 9312, 62, 312, 714, 7603, 257, 2176, 2836, 393, 2597, 4732, 13]",0.5,874,ml_signal,126,Hardcoded entity_id could indicate a specific user or role context.,,847,"            ""id"": f""{entity_id}_{sub_tag}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 7266, 62, 12985, 92, 1600]"
🧠 ML Signal: Use of f-string for dynamic ID generation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 8925, 4522, 5270, 13]",0.5,901,ml_signal,126,Use of f-string for dynamic ID generation.,,874,"            ""id"": f""{entity_id}_{sub_tag}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 7266, 62, 12985, 92, 1600]"
⚠️ SAST Risk (Medium): Potential risk if _hidden_tags is user-controlled or external input.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 4808, 30342, 62, 31499, 318, 2836, 12, 14401, 393, 7097, 5128, 13]",0.5,914,sast_risk,138,Potential risk if _hidden_tags is user-controlled or external input.,Medium,901,"    timestamp = ""2024-03-25""","[220, 220, 220, 41033, 796, 366, 1238, 1731, 12, 3070, 12, 1495, 1]"
"🧠 ML Signal: Function definition with no parameters, indicating a possible utility or helper function","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 1744, 10361, 393, 31904, 2163]",1.0,914,ml_signal,136,"Function definition with no parameters, indicating a possible utility or helper function",,914,,[]
"🧠 ML Signal: Function call to a private or internal function, indicating encapsulation or modular design","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 257, 2839, 393, 5387, 2163, 11, 12739, 32652, 1741, 393, 26507, 1486]",1.0,927,ml_signal,138,"Function call to a private or internal function, indicating encapsulation or modular design",,914,"    timestamp = ""2024-03-25""","[220, 220, 220, 41033, 796, 366, 1238, 1731, 12, 3070, 12, 1495, 1]"
"🧠 ML Signal: Conversion of list to DataFrame, indicating data processing or transformation","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1351, 284, 6060, 19778, 11, 12739, 1366, 7587, 393, 13389]",1.0,932,ml_signal,140,"Conversion of list to DataFrame, indicating data processing or transformation",,927,    return [,"[220, 220, 220, 1441, 685]"
"🧠 ML Signal: Function call with multiple parameters, indicating a data persistence or storage operation","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 12739, 257, 1366, 30802, 393, 6143, 4905]",0.5,961,ml_signal,142,"Function call with multiple parameters, indicating a data persistence or storage operation",,932,"            ""id"": f""{entity_id}_{stock_pool_name}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 13578, 62, 7742, 62, 3672, 92, 1600]"
⚠️ SAST Risk (Low): Potential risk if df_to_db function does not handle data securely,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 47764, 62, 1462, 62, 9945, 2163, 857, 407, 5412, 1366, 30835]",1.0,981,sast_risk,143,Potential risk if df_to_db function does not handle data securely,Low,961,"            ""entity_id"": entity_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 26858, 62, 312, 1298, 9312, 62, 312, 11]"
"🧠 ML Signal: Function definition with no parameters, indicating a possible standard process or routine","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 1744, 3210, 1429, 393, 8027]",0.5,986,ml_signal,140,"Function definition with no parameters, indicating a possible standard process or routine",,981,    return [,"[220, 220, 220, 1441, 685]"
"🧠 ML Signal: Private function call pattern, indicating encapsulation or internal logic","[8582, 100, 254, 10373, 26484, 25, 15348, 2163, 869, 3912, 11, 12739, 32652, 1741, 393, 5387, 9156]",1.0,1015,ml_signal,142,"Private function call pattern, indicating encapsulation or internal logic",,986,"            ""id"": f""{entity_id}_{stock_pool_name}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 13578, 62, 7742, 62, 3672, 92, 1600]"
"🧠 ML Signal: Conversion of data to DataFrame, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1366, 284, 6060, 19778, 11, 2219, 287, 1366, 7587, 8861]",0.5,1032,ml_signal,144,"Conversion of data to DataFrame, common in data processing tasks",,1015,"            ""timestamp"": timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 41033, 11]"
"🧠 ML Signal: Data persistence pattern, saving DataFrame to a database","[8582, 100, 254, 10373, 26484, 25, 6060, 30802, 3912, 11, 8914, 6060, 19778, 284, 257, 6831]",1.0,1056,ml_signal,146,"Data persistence pattern, saving DataFrame to a database",,1032,"            ""stock_pool_name"": stock_pool_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 7742, 62, 3672, 1298, 4283, 62, 7742, 62, 3672, 11]"
⚠️ SAST Risk (Low): Potential risk if df_to_db does not handle SQL injection or data validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5412, 16363, 16954, 393, 1366, 21201]",1.0,1064,sast_risk,147,Potential risk if df_to_db does not handle SQL injection or data validation,Low,1056,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
🧠 ML Signal: Function with a boolean parameter that alters behavior,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 257, 25131, 11507, 326, 40866, 4069]",0.5,1081,ml_signal,144,Function with a boolean parameter that alters behavior,,1064,"            ""timestamp"": timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 41033, 11]"
🧠 ML Signal: Function call pattern to retrieve data,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 284, 19818, 1366]",0.5,1105,ml_signal,146,Function call pattern to retrieve data,,1081,"            ""stock_pool_name"": stock_pool_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 7742, 62, 3672, 1298, 4283, 62, 7742, 62, 3672, 11]"
🧠 ML Signal: Conversion of list to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1351, 284, 6060, 19778]",0.5,1138,ml_signal,148,Conversion of list to DataFrame,,1105,"        for stock_pool_name in [""main_line"", ""vol_up"", ""大局"", ""all""]","[220, 220, 220, 220, 220, 220, 220, 329, 4283, 62, 7742, 62, 3672, 287, 14631, 12417, 62, 1370, 1600, 366, 10396, 62, 929, 1600, 366, 32014, 161, 109, 222, 1600, 366, 439, 8973]"
⚠️ SAST Risk (Low): Potential risk if df_to_db does not handle SQL injection or data validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5412, 16363, 16954, 393, 1366, 21201]",1.0,1138,sast_risk,150,Potential risk if df_to_db does not handle SQL injection or data validation,Low,1138,,[]
🧠 ML Signal: Data persistence function call with parameters,"[8582, 100, 254, 10373, 26484, 25, 6060, 30802, 2163, 869, 351, 10007]",0.5,1138,ml_signal,151,Data persistence function call with parameters,,1138,,[]
✅ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1171,best_practice,148,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,1138,"        for stock_pool_name in [""main_line"", ""vol_up"", ""大局"", ""all""]","[220, 220, 220, 220, 220, 220, 220, 329, 4283, 62, 7742, 62, 3672, 287, 14631, 12417, 62, 1370, 1600, 366, 10396, 62, 929, 1600, 366, 32014, 161, 109, 222, 1600, 366, 439, 8973]"
"🧠 ML Signal: Function calls a private function _get_initial_stock_pool_info, indicating encapsulation of logic.","[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 257, 2839, 2163, 4808, 1136, 62, 36733, 62, 13578, 62, 7742, 62, 10951, 11, 12739, 32652, 1741, 286, 9156, 13]",0.5,1171,ml_signal,150,"Function calls a private function _get_initial_stock_pool_info, indicating encapsulation of logic.",,1171,,[]
⚠️ SAST Risk (Low): Ensure that stock_pool_info_list is properly validated before use to prevent potential data issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 4283, 62, 7742, 62, 10951, 62, 4868, 318, 6105, 31031, 878, 779, 284, 2948, 2785, 1366, 2428, 13]",0.5,1177,sast_risk,152,Ensure that stock_pool_info_list is properly validated before use to prevent potential data issues.,Low,1171,_hidden_tags = {,"[62, 30342, 62, 31499, 796, 1391]"
"🧠 ML Signal: Conversion of list to DataFrame, indicating data processing pattern.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1351, 284, 6060, 19778, 11, 12739, 1366, 7587, 3912, 13]",1.0,1209,ml_signal,153,"Conversion of list to DataFrame, indicating data processing pattern.",,1177,"    ""中字头"": ""央企，国资委控股"",","[220, 220, 220, 366, 40792, 27764, 245, 13783, 112, 1298, 366, 13783, 106, 27670, 223, 171, 120, 234, 32368, 121, 164, 113, 226, 34650, 242, 162, 236, 100, 164, 224, 94, 1600]"
⚠️ SAST Risk (Low): Ensure df is sanitized before passing to df_to_db to prevent injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 47764, 318, 5336, 36951, 878, 6427, 284, 47764, 62, 1462, 62, 9945, 284, 2948, 16954, 3434, 13]",0.5,1232,sast_risk,155,Ensure df is sanitized before passing to df_to_db to prevent injection attacks.,Low,1209,"    ""高股息"": ""高股息"",","[220, 220, 220, 366, 165, 45865, 164, 224, 94, 162, 223, 107, 1298, 366, 165, 45865, 164, 224, 94, 162, 223, 107, 1600]"
"🧠 ML Signal: Interaction with a database, indicating data persistence pattern.","[8582, 100, 254, 10373, 26484, 25, 4225, 2673, 351, 257, 6831, 11, 12739, 1366, 30802, 3912, 13]",0.5,1258,ml_signal,156,"Interaction with a database, indicating data persistence pattern.",,1232,"    ""微盘股"": ""市值50亿以下"",","[220, 220, 220, 366, 36181, 106, 33566, 246, 164, 224, 94, 1298, 366, 30585, 224, 161, 222, 120, 1120, 12859, 123, 20015, 98, 10310, 233, 1600]"
✅ Best Practice: Consider adding a docstring to describe the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 4069]",1.0,1264,best_practice,152,Consider adding a docstring to describe the function's purpose and behavior,,1258,_hidden_tags = {,"[62, 30342, 62, 31499, 796, 1391]"
"🧠 ML Signal: Function call pattern to _get_initial_hidden_tag_info, indicating data retrieval","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 284, 4808, 1136, 62, 36733, 62, 30342, 62, 12985, 62, 10951, 11, 12739, 1366, 45069]",0.5,1342,ml_signal,154,"Function call pattern to _get_initial_hidden_tag_info, indicating data retrieval",,1264,"    ""核心资产"": ""高ROE 高现金流 高股息 低应收 低资本开支 低财务杠杆 有增长"",","[220, 220, 220, 366, 43718, 116, 33232, 225, 164, 113, 226, 12859, 100, 1298, 366, 165, 45865, 13252, 36, 16268, 45865, 163, 236, 108, 34932, 239, 38184, 223, 16268, 45865, 164, 224, 94, 162, 223, 107, 220, 19526, 236, 41753, 242, 162, 242, 114, 220, 19526, 236, 164, 113, 226, 17312, 105, 28156, 222, 162, 242, 107, 220, 19526, 236, 164, 112, 95, 27950, 94, 30266, 254, 30266, 228, 42164, 231, 161, 95, 252, 165, 243, 123, 1600]"
"🧠 ML Signal: Usage of pandas DataFrame, indicating data manipulation","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 11, 12739, 1366, 17512]",0.5,1368,ml_signal,156,"Usage of pandas DataFrame, indicating data manipulation",,1342,"    ""微盘股"": ""市值50亿以下"",","[220, 220, 220, 366, 36181, 106, 33566, 246, 164, 224, 94, 1298, 366, 30585, 224, 161, 222, 120, 1120, 12859, 123, 20015, 98, 10310, 233, 1600]"
"🧠 ML Signal: Function call pattern to df_to_db, indicating data persistence","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 284, 47764, 62, 1462, 62, 9945, 11, 12739, 1366, 30802]",0.5,1369,ml_signal,158,"Function call pattern to df_to_db, indicating data persistence",,1368,},[92]
⚠️ SAST Risk (Low): Ensure df_to_db handles data securely to prevent injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 47764, 62, 1462, 62, 9945, 17105, 1366, 30835, 284, 2948, 16954, 3434]",0.5,1369,sast_risk,159,Ensure df_to_db handles data securely to prevent injection attacks,Low,1369,,[]
🧠 ML Signal: Function definition with a clear purpose and name,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 1598, 4007, 290, 1438]",0.5,1395,ml_signal,156,Function definition with a clear purpose and name,,1369,"    ""微盘股"": ""市值50亿以下"",","[220, 220, 220, 366, 36181, 106, 33566, 246, 164, 224, 94, 1298, 366, 30585, 224, 161, 222, 120, 1120, 12859, 123, 20015, 98, 10310, 233, 1600]"
🧠 ML Signal: Querying data from a database model,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 2746]",0.5,1396,ml_signal,158,Querying data from a database model,,1395,},[92]
✅ Best Practice: Returning a list of tags for better usability,"[26486, 227, 6705, 19939, 25, 42882, 257, 1351, 286, 15940, 329, 1365, 42863]",0.5,1396,best_practice,160,Returning a list of tags for better usability,,1396,,[]
🧠 ML Signal: Function definition with specific input and output patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 5128, 290, 5072, 7572]",0.5,1396,ml_signal,159,Function definition with specific input and output patterns,,1396,,[]
🧠 ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",0.5,1408,ml_signal,161,Querying data with specific filters,,1396,def _get_initial_hidden_tag_info():,"[4299, 4808, 1136, 62, 36733, 62, 30342, 62, 12985, 62, 10951, 33529]"
✅ Best Practice: Check if list is not empty before accessing elements,"[26486, 227, 6705, 19939, 25, 6822, 611, 1351, 318, 407, 6565, 878, 22534, 4847]",0.5,1421,best_practice,162,Check if list is not empty before accessing elements,,1408,"    timestamp = ""2024-03-25""","[220, 220, 220, 41033, 796, 366, 1238, 1731, 12, 3070, 12, 1495, 1]"
🧠 ML Signal: Accessing the first element of a list,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 717, 5002, 286, 257, 1351]",0.5,1429,ml_signal,165,Accessing the first element of a list,,1421,        {,"[220, 220, 220, 220, 220, 220, 220, 1391]"
✅ Best Practice: Use of default value in dictionary get method,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 1988, 287, 22155, 651, 2446]",0.5,1445,best_practice,169,Use of default value in dictionary get method,,1429,"            ""tag"": tag,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12985, 1298, 7621, 11]"
🧠 ML Signal: Function to retrieve main tag based on industry name,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 19818, 1388, 7621, 1912, 319, 2831, 1438]",1.0,1453,ml_signal,165,Function to retrieve main tag based on industry name,,1445,        {,"[220, 220, 220, 220, 220, 220, 220, 1391]"
⚠️ SAST Risk (Low): Potential SQL injection if `industry_name` is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 4600, 23213, 563, 62, 3672, 63, 318, 407, 6105, 5336, 36951]",1.0,1478,sast_risk,166,Potential SQL injection if `industry_name` is not properly sanitized,Low,1453,"            ""id"": f""{entity_id}_{tag}"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 277, 1, 90, 26858, 62, 312, 92, 23330, 12985, 92, 1600]"
🧠 ML Signal: Querying data based on industry name,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 1912, 319, 2831, 1438]",1.0,1494,ml_signal,169,Querying data based on industry name,,1478,"            ""tag"": tag,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12985, 1298, 7621, 11]"
🧠 ML Signal: Returning main tag if data is found,"[8582, 100, 254, 10373, 26484, 25, 42882, 1388, 7621, 611, 1366, 318, 1043]",0.5,1498,ml_signal,173,Returning main tag if data is found,,1494,    ],"[220, 220, 220, 2361]"
✅ Best Practice: Use of default value when no data is found,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 1988, 618, 645, 1366, 318, 1043]",0.5,1509,best_practice,176,Use of default value when no data is found,,1498,def build_initial_main_tag_info():,"[4299, 1382, 62, 36733, 62, 12417, 62, 12985, 62, 10951, 33529]"
"🧠 ML Signal: Function definition with no parameters, indicating a possible utility function","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 1744, 10361, 2163]",1.0,1513,ml_signal,173,"Function definition with no parameters, indicating a possible utility function",,1509,    ],"[220, 220, 220, 2361]"
"🧠 ML Signal: Querying a database model, indicating interaction with a database","[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 257, 6831, 2746, 11, 12739, 10375, 351, 257, 6831]",0.5,1513,ml_signal,175,"Querying a database model, indicating interaction with a database",,1513,,[]
⚠️ SAST Risk (Medium): Potential for SQL injection if input is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 16363, 16954, 611, 5128, 318, 407, 6105, 5336, 36951]",1.0,1524,sast_risk,176,Potential for SQL injection if input is not properly sanitized,Medium,1513,def build_initial_main_tag_info():,"[4299, 1382, 62, 36733, 62, 12417, 62, 12985, 62, 10951, 33529]"
"🧠 ML Signal: Accessing a DataFrame column and converting it to a list, indicating data transformation","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 6060, 19778, 5721, 290, 23202, 340, 284, 257, 1351, 11, 12739, 1366, 13389]",1.0,1548,ml_signal,178,"Accessing a DataFrame column and converting it to a list, indicating data transformation",,1524,    df = pd.DataFrame.from_records(main_tag_info_list),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 12417, 62, 12985, 62, 10951, 62, 4868, 8]"
🧠 ML Signal: Function definition with a specific purpose (get_hidden_tags),"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4007, 357, 1136, 62, 30342, 62, 31499, 8]",1.0,1559,ml_signal,176,Function definition with a specific purpose (get_hidden_tags),,1548,def build_initial_main_tag_info():,"[4299, 1382, 62, 36733, 62, 12417, 62, 12985, 62, 10951, 33529]"
🧠 ML Signal: Querying data from a database model,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 2746]",1.0,1583,ml_signal,178,Querying data from a database model,,1559,    df = pd.DataFrame.from_records(main_tag_info_list),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 12417, 62, 12985, 62, 10951, 62, 4868, 8]"
✅ Best Practice: Returning a specific column as a list,"[26486, 227, 6705, 19939, 25, 42882, 257, 2176, 5721, 355, 257, 1351]",0.5,1583,best_practice,180,Returning a specific column as a list,,1583,,[]
🧠 ML Signal: Function definition with a clear purpose of retrieving stock pool names,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 1598, 4007, 286, 50122, 4283, 5933, 3891]",0.5,1616,ml_signal,179,Function definition with a clear purpose of retrieving stock pool names,,1583,"    df_to_db(df=df, data_schema=MainTagInfo, provider=""zvt"", force_update=False)","[220, 220, 220, 47764, 62, 1462, 62, 9945, 7, 7568, 28, 7568, 11, 1366, 62, 15952, 2611, 28, 13383, 24835, 12360, 11, 10131, 2625, 89, 36540, 1600, 2700, 62, 19119, 28, 25101, 8]"
🧠 ML Signal: Querying a database model for specific columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 257, 6831, 2746, 329, 2176, 15180]",0.5,1616,ml_signal,181,Querying a database model for specific columns,,1616,,[]
🧠 ML Signal: Accessing a DataFrame column and converting it to a list,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 6060, 19778, 5721, 290, 23202, 340, 284, 257, 1351]",0.5,1636,ml_signal,183,Accessing a DataFrame column and converting it to a list,,1616,    initial_industry_info = _get_initial_industry_info(),"[220, 220, 220, 4238, 62, 23213, 563, 62, 10951, 796, 4808, 1136, 62, 36733, 62, 23213, 563, 62, 10951, 3419]"
🧠 ML Signal: Function with multiple conditional branches based on input parameter,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3294, 26340, 13737, 1912, 319, 5128, 11507]",1.0,1646,ml_signal,182,Function with multiple conditional branches based on input parameter,,1636,def build_initial_industry_info():,"[4299, 1382, 62, 36733, 62, 23213, 563, 62, 10951, 33529]"
🧠 ML Signal: Default parameter value usage,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 1988, 8748]",1.0,1669,ml_signal,184,Default parameter value usage,,1646,    df = pd.DataFrame.from_records(initial_industry_info),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 36733, 62, 23213, 563, 62, 10951, 8]"
⚠️ SAST Risk (Low): Use of assert for control flow can be disabled in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 3227]",1.0,1669,sast_risk,192,Use of assert for control flow can be disabled in production,Low,1669,,[]
🧠 ML Signal: Use of set intersection to find common elements,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 16246, 284, 1064, 2219, 4847]",1.0,1702,ml_signal,197,Use of set intersection to find common elements,,1669,"    df_to_db(df=df, data_schema=StockPoolInfo, provider=""zvt"", force_update=False)","[220, 220, 220, 47764, 62, 1462, 62, 9945, 7, 7568, 28, 7568, 11, 1366, 62, 15952, 2611, 28, 26207, 27201, 12360, 11, 10131, 2625, 89, 36540, 1600, 2700, 62, 19119, 28, 25101, 8]"
🧠 ML Signal: Function uses a pattern of checking multiple conditions sequentially,"[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 257, 3912, 286, 10627, 3294, 3403, 4726, 3746]",0.5,1726,ml_signal,202,Function uses a pattern of checking multiple conditions sequentially,,1702,    df = pd.DataFrame.from_records(hidden_tag_info_list),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 30342, 62, 12985, 62, 10951, 62, 4868, 8]"
✅ Best Practice: Explicitly defining the entry point for script execution,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 262, 5726, 966, 329, 4226, 9706]",1.0,1731,best_practice,215,Explicitly defining the entry point for script execution,,1726,    else:,"[220, 220, 220, 2073, 25]"
✅ Best Practice: Using __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,1736,best_practice,215,Using __all__ to define public API of the module,,1731,    else:,"[220, 220, 220, 2073, 25]"

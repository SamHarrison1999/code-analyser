[
  {
    "line": 3,
    "text": "from sqlalchemy import Column, String, JSON, Boolean, Float, Integer",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom mixin class for ORM models",
    "confidence": 0.5,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      1330,
      29201,
      11,
      10903,
      11,
      19449,
      11,
      41146,
      11,
      48436,
      11,
      34142
    ],
    "start_token": 0,
    "end_token": 16,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      5022,
      259,
      1398,
      329,
      6375,
      44,
      4981
    ],
    "label": "ml_signal",
    "reason": "Usage of custom mixin class for ORM models"
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Custom schema registration pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 16,
    "end_token": 16,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      32815,
      9352,
      3912
    ],
    "label": "ml_signal",
    "reason": "Custom schema registration pattern"
  },
  {
    "line": 7,
    "text": "from zvt.contract.register import register_schema",
    "annotation": "\ud83e\udde0 ML Signal: Declarative base pattern for SQLAlchemy ORM",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      30238,
      1330,
      7881,
      62,
      15952,
      2611
    ],
    "start_token": 16,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16691,
      283,
      876,
      2779,
      3912,
      329,
      16363,
      2348,
      26599,
      6375,
      44
    ],
    "label": "ml_signal",
    "reason": "Declarative base pattern for SQLAlchemy ORM"
  },
  {
    "line": 6,
    "text": "from zvt.contract import Mixin",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      1330,
      15561,
      259
    ],
    "start_token": 28,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database table definition",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 36,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      3084,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database table definition"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for defining table columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 36,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      16215,
      3084,
      15180
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for defining table columns"
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL Injection if user input is not sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 36,
    "end_token": 36,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      2836,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL Injection if user input is not sanitized"
  },
  {
    "line": 13,
    "text": "    __tablename__ = \"industry_info\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for defining table columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      23213,
      563,
      62,
      10951,
      1
    ],
    "start_token": 36,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      16215,
      3084,
      15180
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for defining table columns"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL Injection if user input is not sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 51,
    "end_token": 51,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      2836,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL Injection if user input is not sanitized"
  },
  {
    "line": 16,
    "text": "    description = Column(String)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for defining table columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6764,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 51,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      16215,
      3084,
      15180
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for defining table columns"
  },
  {
    "line": 17,
    "text": "    # related main tag",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL Injection if user input is not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      3519,
      1388,
      7621
    ],
    "start_token": 60,
    "end_token": 67,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      2836,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL Injection if user input is not sanitized"
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Class should inherit from object for compatibility with Python 2 and 3",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 67,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      2134,
      329,
      17764,
      351,
      11361,
      362,
      290,
      513
    ],
    "label": "best_practice",
    "reason": "Class should inherit from object for compatibility with Python 2 and 3"
  },
  {
    "line": 13,
    "text": "    __tablename__ = \"industry_info\"",
    "annotation": "\u2705 Best Practice: Use a class variable to define the table name for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      23213,
      563,
      62,
      10951,
      1
    ],
    "start_token": 67,
    "end_token": 82,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      1398,
      7885,
      284,
      8160,
      262,
      3084,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use a class variable to define the table name for clarity"
  },
  {
    "line": 15,
    "text": "    industry_name = Column(String, unique=True)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of unique constraint on a column",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2831,
      62,
      3672,
      796,
      29201,
      7,
      10100,
      11,
      3748,
      28,
      17821,
      8
    ],
    "start_token": 82,
    "end_token": 97,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3748,
      32315,
      319,
      257,
      5721
    ],
    "label": "ml_signal",
    "reason": "Usage of unique constraint on a column"
  },
  {
    "line": 17,
    "text": "    # related main tag",
    "annotation": "\ud83e\udde0 ML Signal: Definition of a column without constraints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      3519,
      1388,
      7621
    ],
    "start_token": 97,
    "end_token": 104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      257,
      5721,
      1231,
      17778
    ],
    "label": "ml_signal",
    "reason": "Definition of a column without constraints"
  },
  {
    "line": 15,
    "text": "    industry_name = Column(String, unique=True)",
    "annotation": "\u2705 Best Practice: Class should inherit from object explicitly in Python 2.x for new-style classes, but in Python 3.x it's optional.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2831,
      62,
      3672,
      796,
      29201,
      7,
      10100,
      11,
      3748,
      28,
      17821,
      8
    ],
    "start_token": 104,
    "end_token": 119,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      2134,
      11777,
      287,
      11361,
      362,
      13,
      87,
      329,
      649,
      12,
      7635,
      6097,
      11,
      475,
      287,
      11361,
      513,
      13,
      87,
      340,
      338,
      11902,
      13
    ],
    "label": "best_practice",
    "reason": "Class should inherit from object explicitly in Python 2.x for new-style classes, but in Python 3.x it's optional."
  },
  {
    "line": 17,
    "text": "    # related main tag",
    "annotation": "\ud83e\udde0 ML Signal: Use of __tablename__ indicates interaction with a database ORM.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      3519,
      1388,
      7621
    ],
    "start_token": 119,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      8658,
      11925,
      480,
      834,
      9217,
      10375,
      351,
      257,
      6831,
      6375,
      44,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of __tablename__ indicates interaction with a database ORM."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Column definition with unique constraint indicates a need for unique values in the database.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 126,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29201,
      6770,
      351,
      3748,
      32315,
      9217,
      257,
      761,
      329,
      3748,
      3815,
      287,
      262,
      6831,
      13
    ],
    "label": "ml_signal",
    "reason": "Column definition with unique constraint indicates a need for unique values in the database."
  },
  {
    "line": 21,
    "text": "class MainTagInfo(StockTagsBase, Mixin):",
    "annotation": "\ud83e\udde0 ML Signal: Column definition indicates a mapping to a database field.",
    "confidence": 0.5,
    "tokens": [
      4871,
      8774,
      24835,
      12360,
      7,
      26207,
      36142,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 126,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29201,
      6770,
      9217,
      257,
      16855,
      284,
      257,
      6831,
      2214,
      13
    ],
    "label": "ml_signal",
    "reason": "Column definition indicates a mapping to a database field."
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Column definition indicates a mapping to a database field.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 138,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29201,
      6770,
      9217,
      257,
      16855,
      284,
      257,
      6831,
      2214,
      13
    ],
    "label": "ml_signal",
    "reason": "Column definition indicates a mapping to a database field."
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Class names should follow the CapWords convention for readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 138,
    "end_token": 138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      3891,
      815,
      1061,
      262,
      4476,
      37117,
      9831,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Class names should follow the CapWords convention for readability"
  },
  {
    "line": 22,
    "text": "    __tablename__ = \"main_tag_info\"",
    "annotation": "\u2705 Best Practice: Use of __tablename__ is a common pattern in SQLAlchemy for table naming",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      12417,
      62,
      12985,
      62,
      10951,
      1
    ],
    "start_token": 138,
    "end_token": 154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      8658,
      11925,
      480,
      834,
      318,
      257,
      2219,
      3912,
      287,
      16363,
      2348,
      26599,
      329,
      3084,
      19264
    ],
    "label": "best_practice",
    "reason": "Use of __tablename__ is a common pattern in SQLAlchemy for table naming"
  },
  {
    "line": 24,
    "text": "    tag = Column(String, unique=True)",
    "annotation": "\ud83e\udde0 ML Signal: Use of unique constraint on a column indicates a need for distinct values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7621,
      796,
      29201,
      7,
      10100,
      11,
      3748,
      28,
      17821,
      8
    ],
    "start_token": 154,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3748,
      32315,
      319,
      257,
      5721,
      9217,
      257,
      761,
      329,
      7310,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of unique constraint on a column indicates a need for distinct values"
  },
  {
    "line": 29,
    "text": "    __tablename__ = \"sub_tag_info\"",
    "annotation": "\u2705 Best Practice: Specify a maximum length for string columns to prevent excessive data storage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      7266,
      62,
      12985,
      62,
      10951,
      1
    ],
    "start_token": 167,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      257,
      5415,
      4129,
      329,
      4731,
      15180,
      284,
      2948,
      13181,
      1366,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specify a maximum length for string columns to prevent excessive data storage."
  },
  {
    "line": 31,
    "text": "    tag = Column(String, unique=True)",
    "annotation": "\u2705 Best Practice: Specify a maximum length for string columns to prevent excessive data storage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7621,
      796,
      29201,
      7,
      10100,
      11,
      3748,
      28,
      17821,
      8
    ],
    "start_token": 183,
    "end_token": 196,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      257,
      5415,
      4129,
      329,
      4731,
      15180,
      284,
      2948,
      13181,
      1366,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specify a maximum length for string columns to prevent excessive data storage."
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 196,
    "end_token": 196,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12642,
      4375,
      17778,
      393,
      21201,
      284,
      4155,
      1366,
      11540,
      329,
      4731,
      7032,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Consider adding constraints or validation to ensure data integrity for string fields."
  },
  {
    "line": 35,
    "text": "    main_tag = Column(String)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1388,
      62,
      12985,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 196,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12642,
      4375,
      17778,
      393,
      21201,
      284,
      4155,
      1366,
      11540,
      329,
      4731,
      7032,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Consider adding constraints or validation to ensure data integrity for string fields."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 207,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      19449,
      7032,
      460,
      3650,
      14977,
      1366,
      26,
      4155,
      1774,
      21201,
      290,
      5336,
      270,
      1634,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "JSON fields can store arbitrary data; ensure proper validation and sanitization."
  },
  {
    "line": 39,
    "text": "    __tablename__ = \"hidden_tag_info\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      30342,
      62,
      12985,
      62,
      10951,
      1
    ],
    "start_token": 207,
    "end_token": 223,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12642,
      4375,
      17778,
      393,
      21201,
      284,
      4155,
      1366,
      11540,
      329,
      4731,
      7032,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Consider adding constraints or validation to ensure data integrity for string fields."
  },
  {
    "line": 41,
    "text": "    tag = Column(String, unique=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7621,
      796,
      29201,
      7,
      10100,
      11,
      3748,
      28,
      17821,
      8
    ],
    "start_token": 223,
    "end_token": 236,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12642,
      4375,
      17778,
      393,
      21201,
      284,
      4155,
      1366,
      11540,
      329,
      4731,
      7032,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Consider adding constraints or validation to ensure data integrity for string fields."
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 236,
    "end_token": 236,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      19449,
      7032,
      460,
      3650,
      14977,
      1366,
      26,
      4155,
      1774,
      21201,
      290,
      5336,
      270,
      1634,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "JSON fields can store arbitrary data; ensure proper validation and sanitization."
  },
  {
    "line": 45,
    "text": "class StockTags(StockTagsBase, Mixin):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.",
    "confidence": 0.5,
    "tokens": [
      4871,
      10500,
      36142,
      7,
      26207,
      36142,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 236,
    "end_token": 247,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      19449,
      7032,
      460,
      3650,
      14977,
      1366,
      26,
      4155,
      1774,
      21201,
      290,
      5336,
      270,
      1634,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "JSON fields can store arbitrary data; ensure proper validation and sanitization."
  },
  {
    "line": 47,
    "text": "    Schema for storing stock tags",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10011,
      2611,
      329,
      23069,
      4283,
      15940
    ],
    "start_token": 247,
    "end_token": 256,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      19449,
      7032,
      460,
      3650,
      14977,
      1366,
      26,
      4155,
      1774,
      21201,
      290,
      5336,
      270,
      1634,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "JSON fields can store arbitrary data; ensure proper validation and sanitization."
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields can indicate binary states, useful for classification models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 256,
    "end_token": 256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      460,
      7603,
      13934,
      2585,
      11,
      4465,
      329,
      17923,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Boolean fields can indicate binary states, useful for classification models."
  },
  {
    "line": 41,
    "text": "    tag = Column(String, unique=True)",
    "annotation": "\u2705 Best Practice: Use of __tablename__ to explicitly define the table name in SQLAlchemy",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7621,
      796,
      29201,
      7,
      10100,
      11,
      3748,
      28,
      17821,
      8
    ],
    "start_token": 256,
    "end_token": 269,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      8658,
      11925,
      480,
      834,
      284,
      11777,
      8160,
      262,
      3084,
      1438,
      287,
      16363,
      2348,
      26599
    ],
    "label": "best_practice",
    "reason": "Use of __tablename__ to explicitly define the table name in SQLAlchemy"
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a fixed-length string for 'code' suggests a standardized identifier",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 269,
    "end_token": 269,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      5969,
      12,
      13664,
      4731,
      329,
      705,
      8189,
      6,
      5644,
      257,
      25713,
      27421
    ],
    "label": "ml_signal",
    "reason": "Use of a fixed-length string for 'code' suggests a standardized identifier"
  },
  {
    "line": 45,
    "text": "class StockTags(StockTagsBase, Mixin):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a longer string for 'name' suggests it holds descriptive text",
    "confidence": 0.5,
    "tokens": [
      4871,
      10500,
      36142,
      7,
      26207,
      36142,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 269,
    "end_token": 280,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2392,
      4731,
      329,
      705,
      3672,
      6,
      5644,
      340,
      6622,
      35644,
      2420
    ],
    "label": "ml_signal",
    "reason": "Use of a longer string for 'name' suggests it holds descriptive text"
  },
  {
    "line": 47,
    "text": "    Schema for storing stock tags",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10011,
      2611,
      329,
      23069,
      4283,
      15940
    ],
    "start_token": 280,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 289,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 289,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 53,
    "text": "    name = Column(String(length=128))",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      12762,
      4008
    ],
    "start_token": 289,
    "end_token": 302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 55,
    "text": "    main_tag = Column(String)",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1388,
      62,
      12985,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 302,
    "end_token": 313,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 57,
    "text": "    main_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1388,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 313,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 59,
    "text": "    sub_tag = Column(String)",
    "annotation": "\ud83e\udde0 ML Signal: Integer field could represent a count or frequency, useful for ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      850,
      62,
      12985,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 324,
    "end_token": 335,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      34142,
      2214,
      714,
      2380,
      257,
      954,
      393,
      8373,
      11,
      4465,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Integer field could represent a count or frequency, useful for ML models"
  },
  {
    "line": 61,
    "text": "    sub_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      850,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 335,
    "end_token": 346,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 63,
    "text": "    active_hidden_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4075,
      62,
      30342,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 346,
    "end_token": 359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 65,
    "text": "    set_by_user = Column(Boolean, default=False)",
    "annotation": "\ud83e\udde0 ML Signal: Boolean fields indicate binary features that can be used in ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      900,
      62,
      1525,
      62,
      7220,
      796,
      29201,
      7,
      46120,
      13087,
      11,
      4277,
      28,
      25101,
      8
    ],
    "start_token": 359,
    "end_token": 377,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      7032,
      7603,
      13934,
      3033,
      326,
      460,
      307,
      973,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Boolean fields indicate binary features that can be used in ML models"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: JSON field can store complex data structures, useful for ML feature extraction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 377,
    "end_token": 377,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19449,
      2214,
      460,
      3650,
      3716,
      1366,
      8573,
      11,
      4465,
      329,
      10373,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "JSON field can store complex data structures, useful for ML feature extraction"
  },
  {
    "line": 55,
    "text": "    main_tag = Column(String)",
    "annotation": "\u2705 Best Practice: Class inherits from multiple base classes, indicating use of mixins for shared functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1388,
      62,
      12985,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 377,
    "end_token": 388,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      10639,
      896,
      422,
      3294,
      2779,
      6097,
      11,
      12739,
      779,
      286,
      5022,
      1040,
      329,
      4888,
      11244
    ],
    "label": "best_practice",
    "reason": "Class inherits from multiple base classes, indicating use of mixins for shared functionality"
  },
  {
    "line": 57,
    "text": "    main_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __tablename__ suggests ORM pattern, common in database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1388,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 388,
    "end_token": 399,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      8658,
      11925,
      480,
      834,
      5644,
      6375,
      44,
      3912,
      11,
      2219,
      287,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of __tablename__ suggests ORM pattern, common in database interaction"
  },
  {
    "line": 59,
    "text": "    sub_tag = Column(String)",
    "annotation": "\ud83e\udde0 ML Signal: Column definitions indicate ORM usage for database schema mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      850,
      62,
      12985,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 399,
    "end_token": 410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29201,
      17336,
      7603,
      6375,
      44,
      8748,
      329,
      6831,
      32815,
      16855
    ],
    "label": "ml_signal",
    "reason": "Column definitions indicate ORM usage for database schema mapping"
  },
  {
    "line": 61,
    "text": "    sub_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Unique constraint on stock_pool_name suggests importance of this field for identification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      850,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 410,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30015,
      32315,
      319,
      4283,
      62,
      7742,
      62,
      3672,
      5644,
      6817,
      286,
      428,
      2214,
      329,
      11795
    ],
    "label": "ml_signal",
    "reason": "Unique constraint on stock_pool_name suggests importance of this field for identification"
  },
  {
    "line": 59,
    "text": "    sub_tag = Column(String)",
    "annotation": "\u2705 Best Practice: Class inherits from multiple base classes, ensure MRO is correct",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      850,
      62,
      12985,
      796,
      29201,
      7,
      10100,
      8
    ],
    "start_token": 421,
    "end_token": 432,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      10639,
      896,
      422,
      3294,
      2779,
      6097,
      11,
      4155,
      337,
      13252,
      318,
      3376
    ],
    "label": "best_practice",
    "reason": "Class inherits from multiple base classes, ensure MRO is correct"
  },
  {
    "line": 61,
    "text": "    sub_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Custom table name for ORM mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      850,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 432,
    "end_token": 443,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      3084,
      1438,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Custom table name for ORM mapping"
  },
  {
    "line": 63,
    "text": "    active_hidden_tags = Column(JSON)",
    "annotation": "\ud83e\udde0 ML Signal: Column definition for ORM, indicates schema design",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4075,
      62,
      30342,
      62,
      31499,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 443,
    "end_token": 456,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29201,
      6770,
      329,
      6375,
      44,
      11,
      9217,
      32815,
      1486
    ],
    "label": "ml_signal",
    "reason": "Column definition for ORM, indicates schema design"
  },
  {
    "line": 65,
    "text": "    set_by_user = Column(Boolean, default=False)",
    "annotation": "\ud83e\udde0 ML Signal: Use of JSON type for a column, indicates flexible data storage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      900,
      62,
      1525,
      62,
      7220,
      796,
      29201,
      7,
      46120,
      13087,
      11,
      4277,
      28,
      25101,
      8
    ],
    "start_token": 456,
    "end_token": 474,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19449,
      2099,
      329,
      257,
      5721,
      11,
      9217,
      12846,
      1366,
      6143
    ],
    "label": "ml_signal",
    "reason": "Use of JSON type for a column, indicates flexible data storage"
  },
  {
    "line": 65,
    "text": "    set_by_user = Column(Boolean, default=False)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      900,
      62,
      1525,
      62,
      7220,
      796,
      29201,
      7,
      46120,
      13087,
      11,
      4277,
      28,
      25101,
      8
    ],
    "start_token": 474,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 492,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 69,
    "text": "    __tablename__ = \"stock_system_tags\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      13578,
      62,
      10057,
      62,
      31499,
      1
    ],
    "start_token": 492,
    "end_token": 508,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 71,
    "text": "    code = Column(String(length=64))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2414,
      4008
    ],
    "start_token": 508,
    "end_token": 521,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 73,
    "text": "    name = Column(String(length=128))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      12762,
      4008
    ],
    "start_token": 521,
    "end_token": 534,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 74,
    "text": "    #: \u51cf\u6301",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      237,
      162,
      234,
      223
    ],
    "start_token": 534,
    "end_token": 545,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 74,
    "text": "    #: \u51cf\u6301",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      237,
      162,
      234,
      223
    ],
    "start_token": 545,
    "end_token": 556,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 74,
    "text": "    #: \u51cf\u6301",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database schema definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      237,
      162,
      234,
      223
    ],
    "start_token": 556,
    "end_token": 567,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database schema definition"
  },
  {
    "line": 74,
    "text": "    #: \u51cf\u6301",
    "annotation": "\ud83e\udde0 ML Signal: Registering schema with specific providers and database name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      237,
      162,
      234,
      223
    ],
    "start_token": 567,
    "end_token": 578,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      32815,
      351,
      2176,
      9549,
      290,
      6831,
      1438
    ],
    "label": "ml_signal",
    "reason": "Registering schema with specific providers and database name"
  },
  {
    "line": 74,
    "text": "    #: \u51cf\u6301",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      237,
      162,
      234,
      223
    ],
    "start_token": 578,
    "end_token": 589,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
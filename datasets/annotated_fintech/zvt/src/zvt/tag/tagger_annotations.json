[
  {
    "line": 3,
    "text": "from typing import Type",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local application sections improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      5994
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      3586,
      9004,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local application sections improves readability."
  },
  {
    "line": 11,
    "text": "from zvt.tag.tag_schemas import StockTags",
    "annotation": "\u2705 Best Practice: Using a logger with __name__ ensures that the log messages are correctly associated with the module name.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      12985,
      13,
      12985,
      62,
      1416,
      4411,
      292,
      1330,
      10500,
      36142
    ],
    "start_token": 4,
    "end_token": 18,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      351,
      11593,
      3672,
      834,
      19047,
      326,
      262,
      2604,
      6218,
      389,
      9380,
      3917,
      351,
      262,
      8265,
      1438,
      13
    ],
    "label": "best_practice",
    "reason": "Using a logger with __name__ ensures that the log messages are correctly associated with the module name."
  },
  {
    "line": 11,
    "text": "from zvt.tag.tag_schemas import StockTags",
    "annotation": "\u2705 Best Practice: Class should inherit from a base class to ensure consistent behavior and structure",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      12985,
      13,
      12985,
      62,
      1416,
      4411,
      292,
      1330,
      10500,
      36142
    ],
    "start_token": 18,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      4155,
      6414,
      4069,
      290,
      4645
    ],
    "label": "best_practice",
    "reason": "Class should inherit from a base class to ensure consistent behavior and structure"
  },
  {
    "line": 13,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\u2705 Best Practice: Defining state_schema for the class to ensure consistent state management",
    "confidence": 0.5,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 32,
    "end_token": 45,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      1181,
      62,
      15952,
      2611,
      329,
      262,
      1398,
      284,
      4155,
      6414,
      1181,
      4542
    ],
    "label": "best_practice",
    "reason": "Defining state_schema for the class to ensure consistent state management"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for entity_schema to improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 45,
    "end_token": 45,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      9312,
      62,
      15952,
      2611,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for entity_schema to improve code readability and maintainability"
  },
  {
    "line": 17,
    "text": "    state_schema = TaggerState",
    "annotation": "\u2705 Best Practice: Type hinting for data_schema to improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1181,
      62,
      15952,
      2611,
      796,
      309,
      7928,
      9012
    ],
    "start_token": 45,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1366,
      62,
      15952,
      2611,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for data_schema to improve code readability and maintainability"
  },
  {
    "line": 19,
    "text": "    entity_schema: Type[TradableEntity] = None",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded start timestamp could be used to identify patterns or trends over time",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      25,
      5994,
      58,
      2898,
      324,
      540,
      32398,
      60,
      796,
      6045
    ],
    "start_token": 56,
    "end_token": 73,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      923,
      41033,
      714,
      307,
      973,
      284,
      5911,
      7572,
      393,
      11257,
      625,
      640
    ],
    "label": "ml_signal",
    "reason": "Hardcoded start timestamp could be used to identify patterns or trends over time"
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 73,
    "end_token": 73,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 73,
    "end_token": 73,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 23,
    "text": "    start_timestamp = \"2018-01-01\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific database session provider",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      796,
      366,
      7908,
      12,
      486,
      12,
      486,
      1
    ],
    "start_token": 73,
    "end_token": 88,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      6831,
      6246,
      10131
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific database session provider"
  },
  {
    "line": 26,
    "text": "        super().__init__()",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for state management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      3419
    ],
    "start_token": 88,
    "end_token": 101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for state management"
  },
  {
    "line": 29,
    "text": "        self.force = force",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking execution flow",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3174,
      796,
      2700
    ],
    "start_token": 101,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      9706,
      5202
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking execution flow"
  },
  {
    "line": 26,
    "text": "        super().__init__()",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      3419
    ],
    "start_token": 113,
    "end_token": 126,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose"
  },
  {
    "line": 28,
    "text": "        assert self.data_schema is not None",
    "annotation": "\u2705 Best Practice: Consider providing a custom error message for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      2116,
      13,
      7890,
      62,
      15952,
      2611,
      318,
      407,
      6045
    ],
    "start_token": 126,
    "end_token": 143,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4955,
      257,
      2183,
      4049,
      3275,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Consider providing a custom error message for clarity"
  },
  {
    "line": 28,
    "text": "        assert self.data_schema is not None",
    "annotation": "\u2705 Best Practice: Class definition should inherit from a base class to promote code reuse and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      2116,
      13,
      7890,
      62,
      15952,
      2611,
      318,
      407,
      6045
    ],
    "start_token": 143,
    "end_token": 160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      7719,
      2438,
      32349,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Class definition should inherit from a base class to promote code reuse and maintainability"
  },
  {
    "line": 30,
    "text": "        self.session = get_db_session(provider=\"zvt\", data_schema=self.data_schema)",
    "annotation": "\u2705 Best Practice: Class attributes should be defined at the top of the class for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      29891,
      796,
      651,
      62,
      9945,
      62,
      29891,
      7,
      15234,
      1304,
      2625,
      89,
      36540,
      1600,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      8
    ],
    "start_token": 160,
    "end_token": 195,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Class attributes should be defined at the top of the class for better readability"
  },
  {
    "line": 32,
    "text": "            logger.info(f\"get start_timestamp from state\")",
    "annotation": "\u2705 Best Practice: Class attributes should be defined at the top of the class for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      1136,
      923,
      62,
      16514,
      27823,
      422,
      1181,
      4943
    ],
    "start_token": 195,
    "end_token": 220,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Class attributes should be defined at the top of the class for better readability"
  },
  {
    "line": 31,
    "text": "        if self.state and not self.force:",
    "annotation": "\u2705 Best Practice: Method should be defined within a class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5219,
      290,
      407,
      2116,
      13,
      3174,
      25
    ],
    "start_token": 220,
    "end_token": 237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      307,
      5447,
      1626,
      257,
      1398
    ],
    "label": "best_practice",
    "reason": "Method should be defined within a class"
  },
  {
    "line": 33,
    "text": "            self.start_timestamp = self.state[\"current_timestamp\"]",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError is a common pattern for abstract methods",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      796,
      2116,
      13,
      5219,
      14692,
      14421,
      62,
      16514,
      27823,
      8973
    ],
    "start_token": 237,
    "end_token": 264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      318,
      257,
      2219,
      3912,
      329,
      12531,
      5050
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError is a common pattern for abstract methods"
  },
  {
    "line": 33,
    "text": "            self.start_timestamp = self.state[\"current_timestamp\"]",
    "annotation": "\u2705 Best Practice: __all__ is used to define the public interface of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      16514,
      27823,
      796,
      2116,
      13,
      5219,
      14692,
      14421,
      62,
      16514,
      27823,
      8973
    ],
    "start_token": 264,
    "end_token": 291,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11593,
      439,
      834,
      318,
      973,
      284,
      8160,
      262,
      1171,
      7071,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "__all__ is used to define the public interface of the module"
  }
]
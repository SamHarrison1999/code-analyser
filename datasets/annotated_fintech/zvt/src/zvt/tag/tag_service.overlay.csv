annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Importing all functions from a module can lead to namespace conflicts and may include unused functions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 477, 5499, 422, 257, 8265, 460, 1085, 284, 25745, 12333, 290, 743, 2291, 21958, 5499, 13]",1.0,6,sast_risk,5,Importing all functions from a module can lead to namespace conflicts and may include unused functions.,Low,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚ö†Ô∏è SAST Risk (Low): Importing with a wildcard can lead to namespace conflicts and may include unused functions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 351, 257, 4295, 9517, 460, 1085, 284, 25745, 12333, 290, 743, 2291, 21958, 5499, 13]",1.0,12,sast_risk,7,Importing with a wildcard can lead to namespace conflicts and may include unused functions.,Low,6,from sqlalchemy import func,"[6738, 44161, 282, 26599, 1330, 25439]"
‚ö†Ô∏è SAST Risk (Low): Importing specific functions from a module is preferred for clarity and to avoid namespace pollution.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 2176, 5499, 422, 257, 8265, 318, 9871, 329, 16287, 290, 284, 3368, 25745, 12231, 13]",1.0,23,sast_risk,9,Importing specific functions from a module is preferred for clarity and to avoid namespace pollution.,Low,12,import zvt.contract.api as contract_api,"[11748, 1976, 36540, 13, 28484, 13, 15042, 355, 2775, 62, 15042]"
‚úÖ Best Practice: Use of a logger is a good practice for tracking and debugging.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 49706, 318, 257, 922, 3357, 329, 9646, 290, 28769, 13]",0.5,44,best_practice,45,Use of a logger is a good practice for tracking and debugging.,,23,"from zvt.utils.utils import fill_dict, compare_dicts, flatten_list","[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 11600, 11, 8996, 62, 11600, 82, 11, 27172, 268, 62, 4868]"
‚úÖ Best Practice: Function name is descriptive and follows naming conventions.,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 5679, 19264, 21396, 13]",1.0,77,best_practice,44,Function name is descriptive and follows naming conventions.,,44,"from zvt.utils.time_utils import to_pd_timestamp, to_time_str, current_date, now_pd_timestamp","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 30094, 62, 16514, 27823, 11, 284, 62, 2435, 62, 2536, 11, 1459, 62, 4475, 11, 783, 62, 30094, 62, 16514, 27823]"
‚úÖ Best Practice: Using a single return statement for clarity.,"[26486, 227, 6705, 19939, 25, 8554, 257, 2060, 1441, 2643, 329, 16287, 13]",1.0,98,best_practice,45,Using a single return statement for clarity.,,77,"from zvt.utils.utils import fill_dict, compare_dicts, flatten_list","[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 11600, 11, 8996, 62, 11600, 82, 11, 27172, 268, 62, 4868]"
‚úÖ Best Practice: Checking each attribute separately for better readability.,"[26486, 227, 6705, 19939, 25, 39432, 1123, 11688, 13869, 329, 1365, 1100, 1799, 13]",0.5,119,best_practice,45,Checking each attribute separately for better readability.,,98,"from zvt.utils.utils import fill_dict, compare_dicts, flatten_list","[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 6070, 62, 11600, 11, 8996, 62, 11600, 82, 11, 27172, 268, 62, 4868]"
"üß† ML Signal: Comparing dictionary structures, which could indicate data structure changes.","[8582, 100, 254, 10373, 26484, 25, 3082, 1723, 22155, 8573, 11, 543, 714, 7603, 1366, 4645, 2458, 13]",0.5,150,ml_signal,53,"Comparing dictionary structures, which could indicate data structure changes.",,119,        or stock_tags.main_tag_reason != set_stock_tags_model.main_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 393, 4283, 62, 31499, 13, 12417, 62, 12985, 62, 41181, 14512, 900, 62, 13578, 62, 31499, 62, 19849, 13, 12417, 62, 12985, 62, 41181]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if entity_id is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 9312, 62, 312, 318, 407, 6105, 5336, 36951]",0.5,181,sast_risk,55,Potential SQL injection if entity_id is not properly sanitized,Low,150,        or stock_tags.sub_tag_reason != set_stock_tags_model.sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 393, 4283, 62, 31499, 13, 7266, 62, 12985, 62, 41181, 14512, 900, 62, 13578, 62, 31499, 62, 19849, 13, 7266, 62, 12985, 62, 41181]"
üß† ML Signal: Usage of query_data method to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 284, 21207, 1366]",0.5,219,ml_signal,56,Usage of query_data method to fetch data,,181,"        or not compare_dicts(stock_tags.active_hidden_tags, set_stock_tags_model.active_hidden_tags)","[220, 220, 220, 220, 220, 220, 220, 393, 407, 8996, 62, 11600, 82, 7, 13578, 62, 31499, 13, 5275, 62, 30342, 62, 31499, 11, 900, 62, 13578, 62, 31499, 62, 19849, 13, 5275, 62, 30342, 62, 31499, 8]"
üß† ML Signal: Pattern of creating tag options from data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 7621, 3689, 422, 1366]",0.5,231,ml_signal,71,Pattern of creating tag options from data,,219,        main_tag = None,"[220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 796, 6045]"
üß† ML Signal: Pattern of creating tag options from data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 7621, 3689, 422, 1366]",0.5,251,ml_signal,80,Pattern of creating tag options from data,,231,            if stock_tags.main_tags:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4283, 62, 31499, 13, 12417, 62, 31499, 25]"
üß† ML Signal: Pattern of creating tag options from data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 7621, 3689, 422, 1366]",0.5,273,ml_signal,87,Pattern of creating tag options from data,,251,                sub_tag_options = [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 62, 25811, 796, 685]"
üß† ML Signal: Usage of query_data method to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 284, 21207, 1366]",0.5,289,ml_signal,90,Usage of query_data method to fetch data,,273,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Pattern of creating tag options from data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 7621, 3689, 422, 1366]",0.5,311,ml_signal,96,Pattern of creating tag options from data,,289,                hidden_tag_options = [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7104, 62, 12985, 62, 25811, 796, 685]"
üß† ML Signal: Usage of query_data method to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 284, 21207, 1366]",0.5,335,ml_signal,103,Usage of query_data method to fetch data,,311,            main_tag = main_tags_info[0].tag,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 796, 1388, 62, 31499, 62, 10951, 58, 15, 4083, 12985]"
üß† ML Signal: Pattern of creating tag options from data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 7621, 3689, 422, 1366]",0.5,335,ml_signal,104,Pattern of creating tag options from data,,335,,[]
üß† ML Signal: Usage of query_data method to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 284, 21207, 1366]",0.5,343,ml_signal,109,Usage of query_data method to fetch data,,335,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Pattern of creating tag options from data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 7621, 3689, 422, 1366]",0.5,363,ml_signal,114,Pattern of creating tag options from data,,343,        sub_tag_options = sub_tag_options + [,"[220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 62, 25811, 796, 850, 62, 12985, 62, 25811, 1343, 685]"
‚úÖ Best Practice: Returning a structured data object for better maintainability,"[26486, 227, 6705, 19939, 25, 42882, 257, 20793, 1366, 2134, 329, 1365, 5529, 1799]",1.0,401,best_practice,120,Returning a structured data object for better maintainability,,363,"        hidden_tags_info: List[HiddenTagInfo] = HiddenTagInfo.query_data(session=session, return_type=""domain"")","[220, 220, 220, 220, 220, 220, 220, 7104, 62, 31499, 62, 10951, 25, 7343, 58, 41691, 24835, 12360, 60, 796, 20458, 24835, 12360, 13, 22766, 62, 7890, 7, 29891, 28, 29891, 11, 1441, 62, 4906, 2625, 27830, 4943]"
üß† ML Signal: Logging the model can be used to track usage patterns and model data.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 2746, 460, 307, 973, 284, 2610, 8748, 7572, 290, 2746, 1366, 13]",1.0,439,ml_signal,120,Logging the model can be used to track usage patterns and model data.,,401,"        hidden_tags_info: List[HiddenTagInfo] = HiddenTagInfo.query_data(session=session, return_type=""domain"")","[220, 220, 220, 220, 220, 220, 220, 7104, 62, 31499, 62, 10951, 25, 7343, 58, 41691, 24835, 12360, 60, 796, 20458, 24835, 12360, 13, 22766, 62, 7890, 7, 29891, 28, 29891, 11, 1441, 62, 4906, 2625, 27830, 4943]"
‚úÖ Best Practice: Checking for existence before creation prevents duplicates.,"[26486, 227, 6705, 19939, 25, 39432, 329, 6224, 878, 6282, 15174, 14184, 16856, 13]",0.5,447,best_practice,125,Checking for existence before creation prevents duplicates.,,439,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Checking for existence before creation prevents duplicates.,"[26486, 227, 6705, 19939, 25, 39432, 329, 6224, 878, 6282, 15174, 14184, 16856, 13]",0.5,470,best_practice,132,Checking for existence before creation prevents duplicates.,,447,"            sub_tag_options=sub_tag_options,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 62, 25811, 28, 7266, 62, 12985, 62, 25811, 11]"
‚úÖ Best Practice: Checking for existence before creation prevents duplicates.,"[26486, 227, 6705, 19939, 25, 39432, 329, 6224, 878, 6282, 15174, 14184, 16856, 13]",0.5,507,best_practice,138,Checking for existence before creation prevents duplicates.,,470,"    set_stock_tags_model: SetStockTagsModel, timestamp: pd.Timestamp, set_by_user: bool, keep_current=False","[220, 220, 220, 900, 62, 13578, 62, 31499, 62, 19849, 25, 5345, 26207, 36142, 17633, 11, 41033, 25, 279, 67, 13, 14967, 27823, 11, 900, 62, 1525, 62, 7220, 25, 20512, 11, 1394, 62, 14421, 28, 25101]"
‚ö†Ô∏è SAST Risk (Medium): Ensure the session is properly closed to prevent resource leaks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 262, 6246, 318, 6105, 4838, 284, 2948, 8271, 17316, 13]",0.5,507,sast_risk,141,Ensure the session is properly closed to prevent resource leaks.,Medium,507,,[]
‚ö†Ô∏è SAST Risk (Medium): Ensure query parameters are sanitized to prevent SQL injection.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 12405, 10007, 389, 5336, 36951, 284, 2948, 16363, 16954, 13]",0.5,523,sast_risk,148,Ensure query parameters are sanitized to prevent SQL injection.,Medium,507,    if set_stock_tags_model.sub_tag:,"[220, 220, 220, 611, 900, 62, 13578, 62, 31499, 62, 19849, 13, 7266, 62, 12985, 25]"
‚úÖ Best Practice: Logging decisions can help in debugging and understanding flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 5370, 460, 1037, 287, 28769, 290, 4547, 5202, 13]",0.5,547,best_practice,156,Logging decisions can help in debugging and understanding flow.,,523,        for tag in set_stock_tags_model.active_hidden_tags:,"[220, 220, 220, 220, 220, 220, 220, 329, 7621, 287, 900, 62, 13578, 62, 31499, 62, 19849, 13, 5275, 62, 30342, 62, 31499, 25]"
‚ö†Ô∏è SAST Risk (Medium): Ensure data integrity and handle exceptions during database operations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 1366, 11540, 290, 5412, 13269, 1141, 6831, 4560, 13]",0.5,574,sast_risk,190,Ensure data integrity and handle exceptions during database operations.,Medium,547,"                id=f""{entity_id}_tags"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4686, 28, 69, 1, 90, 26858, 62, 312, 92, 62, 31499, 1600]"
üß† ML Signal: Usage of conditional logic to determine tag reasons,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 9156, 284, 5004, 7621, 3840]",0.5,594,ml_signal,192,Usage of conditional logic to determine tag reasons,,574,"                timestamp=timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41033, 28, 16514, 27823, 11]"
üß† ML Signal: Usage of conditional logic to determine tag reasons,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 9156, 284, 5004, 7621, 3840]",0.5,630,ml_signal,201,Usage of conditional logic to determine tag reasons,,594,                current_stock_tags.sub_tag = set_stock_tags_model.sub_tag,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 13578, 62, 31499, 13, 7266, 62, 12985, 796, 900, 62, 13578, 62, 31499, 62, 19849, 13, 7266, 62, 12985]"
üß† ML Signal: Usage of conditional logic to determine tag reasons,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 9156, 284, 5004, 7621, 3840]",0.5,671,ml_signal,209,Usage of conditional logic to determine tag reasons,,630,            sub_tags[set_stock_tags_model.sub_tag] = set_stock_tags_model.sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 31499, 58, 2617, 62, 13578, 62, 31499, 62, 19849, 13, 7266, 62, 12985, 60, 796, 900, 62, 13578, 62, 31499, 62, 19849, 13, 7266, 62, 12985, 62, 41181]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for control flow, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202, 11, 543, 460, 307, 10058, 287, 3227]",0.5,671,sast_risk,218,"Use of assert for control flow, which can be disabled in production",Low,671,,[]
‚úÖ Best Practice: Early return pattern improves code readability and reduces nesting.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 2438, 1100, 1799, 290, 12850, 46282, 13]",1.0,681,best_practice,227,Early return pattern improves code readability and reduces nesting.,,671,    hidden_tag_reason = None,"[220, 220, 220, 7104, 62, 12985, 62, 41181, 796, 6045]"
üß† ML Signal: Usage of model to create another model instance.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2746, 284, 2251, 1194, 2746, 4554, 13]",0.5,693,ml_signal,230,Usage of model to create another model instance.,,681,        main_tag = tag,"[220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 796, 7621]"
üß† ML Signal: Checking existence before creation is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 6224, 878, 6282, 318, 257, 2219, 3912, 13]",1.0,728,ml_signal,232,Checking existence before creation is a common pattern.,,693,"            main_tag_reason = stock_tag.main_tags.get(main_tag, tag_reason)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 4283, 62, 12985, 13, 12417, 62, 31499, 13, 1136, 7, 12417, 62, 12985, 11, 7621, 62, 41181, 8]"
üß† ML Signal: Conditional creation of resources based on existence check.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 6282, 286, 4133, 1912, 319, 6224, 2198, 13]",0.5,748,ml_signal,234,Conditional creation of resources based on existence check.,,728,            main_tag_reason = tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 7621, 62, 41181]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the session is properly closed to avoid resource leaks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 6246, 318, 6105, 4838, 284, 3368, 8271, 17316, 13]",0.5,770,sast_risk,236,Ensure that the session is properly closed to avoid resource leaks.,Low,748,        sub_tag_reason = stock_tag.sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 62, 41181, 796, 4283, 62, 12985, 13, 7266, 62, 12985, 62, 41181]"
üß† ML Signal: Querying data with specific filters.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 13]",0.5,790,ml_signal,242,Querying data with specific filters.,,770,            sub_tag_reason = tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 62, 41181, 796, 7621, 62, 41181]"
üß† ML Signal: Querying data with specific filters.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 13]",0.5,810,ml_signal,250,Querying data with specific filters.,,790,            hidden_tag_reason = tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7104, 62, 12985, 62, 41181, 796, 7621, 62, 41181]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection risk with dynamic queries.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 351, 8925, 20743, 13]",0.5,819,sast_risk,259,Potential SQL injection risk with dynamic queries.,Medium,810,        assert False,"[220, 220, 220, 220, 220, 220, 220, 6818, 10352]"
üß† ML Signal: Building parameters for further processing.,"[8582, 100, 254, 10373, 26484, 25, 11819, 10007, 329, 2252, 7587, 13]",0.5,834,ml_signal,266,Building parameters for further processing.,,819,"        hidden_tag=hidden_tag,","[220, 220, 220, 220, 220, 220, 220, 7104, 62, 12985, 28, 30342, 62, 12985, 11]"
üß† ML Signal: Conditional logic based on tag type.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 7621, 2099, 13]",0.5,873,ml_signal,277,Conditional logic based on tag type.,,834,"        build_tag_info(tag_info=tag_info, tag_type=batch_set_stock_tags_model.tag_type)","[220, 220, 220, 220, 220, 220, 220, 1382, 62, 12985, 62, 10951, 7, 12985, 62, 10951, 28, 12985, 62, 10951, 11, 7621, 62, 4906, 28, 43501, 62, 2617, 62, 13578, 62, 31499, 62, 19849, 13, 12985, 62, 4906, 8]"
üß† ML Signal: Model instantiation with multiple parameters.,"[8582, 100, 254, 10373, 26484, 25, 9104, 9113, 3920, 351, 3294, 10007, 13]",0.5,912,ml_signal,277,Model instantiation with multiple parameters.,,873,"        build_tag_info(tag_info=tag_info, tag_type=batch_set_stock_tags_model.tag_type)","[220, 220, 220, 220, 220, 220, 220, 1382, 62, 12985, 62, 10951, 7, 12985, 62, 10951, 28, 12985, 62, 10951, 11, 7621, 62, 4906, 28, 43501, 62, 2617, 62, 13578, 62, 31499, 62, 19849, 13, 12985, 62, 4906, 8]"
üß† ML Signal: Function call with multiple parameters indicating complex logic.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 12739, 3716, 9156, 13]",1.0,931,ml_signal,286,Function call with multiple parameters indicating complex logic.,,912,"                session=session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the session is properly managed to avoid stale data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 6246, 318, 6105, 5257, 284, 3368, 39985, 1366, 13]",0.5,952,sast_risk,295,Ensure that the session is properly managed to avoid stale data.,Low,931,"                return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
‚úÖ Best Practice: Use of default mutable arguments (like lists) should be avoided; using None is a safer default.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4517, 540, 7159, 357, 2339, 8341, 8, 815, 307, 13941, 26, 1262, 6045, 318, 257, 14178, 4277, 13]",1.0,980,best_practice,291,Use of default mutable arguments (like lists) should be avoided; using None is a safer default.,,952,            stock_tags: List[StockTags] = StockTags.query_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 31499, 25, 7343, 58, 26207, 36142, 60, 796, 10500, 36142, 13, 22766, 62, 7890, 7]"
"üß† ML Signal: Function call with specific parameters, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 12739, 257, 3912, 286, 8748, 13]",0.5,1013,ml_signal,292,"Function call with specific parameters, indicating a pattern of usage.",,980,"                entity_ids=batch_set_stock_tags_model.entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 43501, 62, 2617, 62, 13578, 62, 31499, 62, 19849, 13, 26858, 62, 2340, 11]"
üß† ML Signal: Querying data from a database or data source.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 393, 1366, 2723, 13]",1.0,1033,ml_signal,297,Querying data from a database or data source.,,1013,        elif tag_type == TagType.hidden_tag:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 7621, 62, 4906, 6624, 17467, 6030, 13, 30342, 62, 12985, 25]"
"üß† ML Signal: Conversion of data to a list, indicating a common data processing pattern.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1366, 284, 257, 1351, 11, 12739, 257, 2219, 1366, 7587, 3912, 13]",0.5,1053,ml_signal,297,"Conversion of data to a list, indicating a common data processing pattern.",,1033,        elif tag_type == TagType.hidden_tag:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 7621, 62, 4906, 6624, 17467, 6030, 13, 30342, 62, 12985, 25]"
‚úÖ Best Practice: Type hinting for better code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1099,best_practice,302,Type hinting for better code readability and maintainability.,,1053,"                filters=[func.json_extract(StockTags.active_hidden_tags, f'$.""{hidden_tag}""') == None],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 41888, 20786, 13, 17752, 62, 2302, 974, 7, 26207, 36142, 13, 5275, 62, 30342, 62, 31499, 11, 277, 6, 3, 526, 90, 30342, 62, 12985, 36786, 11537, 6624, 6045, 4357]"
‚úÖ Best Practice: Dictionary comprehension for efficient mapping.,"[26486, 227, 6705, 19939, 25, 28261, 35915, 329, 6942, 16855, 13]",1.0,1115,best_practice,307,Dictionary comprehension for efficient mapping.,,1099,        for stock_tag in stock_tags:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 62, 12985, 287, 4283, 62, 31499, 25]"
‚úÖ Best Practice: Type hinting for better code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1144,best_practice,310,Type hinting for better code readability and maintainability.,,1115,"                tag=batch_set_stock_tags_model.tag,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7621, 28, 43501, 62, 2617, 62, 13578, 62, 31499, 62, 19849, 13, 12985, 11]"
"üß† ML Signal: Logging information, useful for understanding code execution flow.","[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 11, 4465, 329, 4547, 2438, 9706, 5202, 13]",0.5,1167,ml_signal,312,"Logging information, useful for understanding code execution flow.",,1144,"                stock_tag=stock_tag,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 12985, 28, 13578, 62, 12985, 11]"
"üß† ML Signal: Logging information, useful for understanding code execution flow.","[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 11, 4465, 329, 4547, 2438, 9706, 5202, 13]",0.5,1180,ml_signal,316,"Logging information, useful for understanding code execution flow.",,1167,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Type hinting for better code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1193,best_practice,316,Type hinting for better code readability and maintainability.,,1180,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"üß† ML Signal: Function call with specific parameters, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 12739, 257, 3912, 286, 8748, 13]",0.5,1206,ml_signal,316,"Function call with specific parameters, indicating a pattern of usage.",,1193,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"üß† ML Signal: Function call with specific parameters, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 12739, 257, 3912, 286, 8748, 13]",0.5,1206,ml_signal,327,"Function call with specific parameters, indicating a pattern of usage.",,1206,,[]
‚úÖ Best Practice: Use of a data model for structured data handling.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 1366, 2746, 329, 20793, 1366, 9041, 13]",1.0,1237,best_practice,329,Use of a data model for structured data handling.,,1206,"                set_stock_tags_model=set_stock_tags_model,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 62, 13578, 62, 31499, 62, 19849, 28, 2617, 62, 13578, 62, 31499, 62, 19849, 11]"
"üß† ML Signal: Function call with specific parameters, indicating a pattern of usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 12739, 257, 3912, 286, 8748, 13]",0.5,1259,ml_signal,338,"Function call with specific parameters, indicating a pattern of usage.",,1237,"def build_default_main_tag(entity_ids=None, force_rebuild=False):","[4299, 1382, 62, 12286, 62, 12417, 62, 12985, 7, 26858, 62, 2340, 28, 14202, 11, 2700, 62, 260, 11249, 28, 25101, 2599]"
üß† ML Signal: Default behavior when no entity_ids are provided,"[8582, 100, 254, 10373, 26484, 25, 15161, 4069, 618, 645, 9312, 62, 2340, 389, 2810]",0.5,1282,ml_signal,331,Default behavior when no entity_ids are provided,,1259,"                set_by_user=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 62, 1525, 62, 7220, 28, 17821, 11]"
üß† ML Signal: Iterating over entity_ids to perform operations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 9312, 62, 2340, 284, 1620, 4560]",0.5,1282,ml_signal,336,Iterating over entity_ids to perform operations,,1282,,[]
‚ö†Ô∏è SAST Risk (Medium): Raising an exception without handling it,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 1710, 281, 6631, 1231, 9041, 340]",0.5,1291,sast_risk,340,Raising an exception without handling it,Medium,1282,    build default main tag by industry,"[220, 220, 220, 1382, 4277, 1388, 7621, 416, 2831]"
‚úÖ Best Practice: Consider using a dictionary to map tag_type to data_schema for better scalability and readability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 22155, 284, 3975, 7621, 62, 4906, 284, 1366, 62, 15952, 2611, 329, 1365, 16578, 1799, 290, 1100, 1799, 13]",1.0,1310,best_practice,385,Consider using a dictionary to map tag_type to data_schema for better scalability and readability.,,1291,"            set_by_user=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 62, 1525, 62, 7220, 28, 25101, 11]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",0.5,1318,sast_risk,394,Using assert for control flow can be bypassed if Python is run with optimizations.,Low,1310,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Function definition with specific parameters indicating a pattern for checking existence,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 10007, 12739, 257, 3912, 329, 10627, 6224]",0.5,1318,ml_signal,395,Function definition with specific parameters indicating a pattern for checking existence,,1318,,[]
üß† ML Signal: Dynamic schema retrieval based on tag type,"[8582, 100, 254, 10373, 26484, 25, 26977, 32815, 45069, 1912, 319, 7621, 2099]",0.5,1342,ml_signal,397,Dynamic schema retrieval based on tag type,,1318,"        logger.info(f""build sub tag for: {entity_id}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 11249, 850, 7621, 329, 25, 1391, 26858, 62, 312, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential for SQL injection if `data_schema` is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 16363, 16954, 611, 4600, 7890, 62, 15952, 2611, 63, 318, 407, 6105, 5336, 36951]",0.5,1376,sast_risk,398,Potential for SQL injection if `data_schema` is not properly sanitized,Low,1342,"        datas = StockTags.query_data(entity_id=entity_id, limit=1, return_type=""domain"")","[220, 220, 220, 220, 220, 220, 220, 19395, 796, 10500, 36142, 13, 22766, 62, 7890, 7, 26858, 62, 312, 28, 26858, 62, 312, 11, 4179, 28, 16, 11, 1441, 62, 4906, 2625, 27830, 4943]"
üß† ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",0.5,1376,ml_signal,401,Querying data with specific filters,,1376,,[]
‚úÖ Best Practice: Explicit check for truthiness,"[26486, 227, 6705, 19939, 25, 11884, 2198, 329, 3872, 1272]",0.5,1407,best_practice,405,Explicit check for truthiness,,1376,"            logger.info(f""keep current tags set by user for: {entity_id}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 14894, 1459, 15940, 900, 416, 2836, 329, 25, 1391, 26858, 62, 312, 92, 4943]"
‚úÖ Best Practice: Explicit return of False for clarity,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 10352, 329, 16287]",0.5,1429,best_practice,408,Explicit return of False for clarity,,1407,        current_sub_tag = current_stock_tags.sub_tag,"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 7266, 62, 12985, 796, 1459, 62, 13578, 62, 31499, 13, 7266, 62, 12985]"
üß† ML Signal: Checking for existence before creation is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 6224, 878, 6282, 318, 257, 2219, 3912]",1.0,1451,ml_signal,408,Checking for existence before creation is a common pattern,,1429,        current_sub_tag = current_stock_tags.sub_tag,"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 7266, 62, 12985, 796, 1459, 62, 13578, 62, 31499, 13, 7266, 62, 12985]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 4049, 3275]",1.0,1465,sast_risk,410,Potential information disclosure through error message,Low,1451,        if current_sub_tag:,"[220, 220, 220, 220, 220, 220, 220, 611, 1459, 62, 7266, 62, 12985, 25]"
üß† ML Signal: Dynamic schema retrieval based on type,"[8582, 100, 254, 10373, 26484, 25, 26977, 32815, 45069, 1912, 319, 2099]",1.0,1494,ml_signal,412,Dynamic schema retrieval based on type,,1465,            current_sub_tags = current_stock_tags.sub_tags.keys(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 7266, 62, 31499, 796, 1459, 62, 13578, 62, 31499, 13, 7266, 62, 31499, 13, 13083, 3419]"
‚úÖ Best Practice: Using context manager for database session ensures proper resource management,"[26486, 227, 6705, 19939, 25, 8554, 4732, 4706, 329, 6831, 6246, 19047, 1774, 8271, 4542]",1.0,1494,best_practice,414,Using context manager for database session ensures proper resource management,,1494,,[]
üß† ML Signal: Use of current timestamp for record creation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 41033, 329, 1700, 6282]",1.0,1494,ml_signal,414,Use of current timestamp for record creation,,1494,,[]
"üß† ML Signal: Hardcoded entity_id, could indicate a default or admin action","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 9312, 62, 312, 11, 714, 7603, 257, 4277, 393, 13169, 2223]",1.0,1510,ml_signal,421,"Hardcoded entity_id, could indicate a default or admin action",,1494,"            filters=filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11]"
üß† ML Signal: Constructing a database model instance,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 257, 6831, 2746, 4554]",0.5,1526,ml_signal,421,Constructing a database model instance,,1510,"            filters=filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 28, 10379, 1010, 11]"
‚úÖ Best Practice: Adding new record to session before committing,"[26486, 227, 6705, 19939, 25, 18247, 649, 1700, 284, 6246, 878, 17222]",0.5,1526,best_practice,427,Adding new record to session before committing,,1526,,[]
‚úÖ Best Practice: Committing session to persist changes,"[26486, 227, 6705, 19939, 25, 1520, 2535, 6246, 284, 21160, 2458]",0.5,1526,best_practice,427,Committing session to persist changes,,1526,,[]
‚úÖ Best Practice: Refreshing session to get updated state of the object,"[26486, 227, 6705, 19939, 25, 6524, 411, 722, 6246, 284, 651, 6153, 1181, 286, 262, 2134]",1.0,1552,best_practice,434,Refreshing session to get updated state of the object,,1526,                main_tag_reason = sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 850, 62, 12985, 62, 41181]"
üß† ML Signal: Returning the created database object,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 2727, 6831, 2134]",0.5,1578,ml_signal,434,Returning the created database object,,1552,                main_tag_reason = sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 850, 62, 12985, 62, 41181]"
üß† ML Signal: Function definition with parameters indicating a pattern for data processing,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 1366, 7587]",1.0,1607,ml_signal,425,Function definition with parameters indicating a pattern for data processing,,1578,"            logger.info(f""no block_stocks for: {entity_id}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 3919, 2512, 62, 29522, 329, 25, 1391, 26858, 62, 312, 92, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded provider name ""zvt"" could lead to inflexibility or misconfiguration","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10131, 1438, 366, 89, 36540, 1, 714, 1085, 284, 1167, 2588, 2247, 393, 2984, 11250, 3924]",1.0,1607,sast_risk,427,"Hardcoded provider name ""zvt"" could lead to inflexibility or misconfiguration",Low,1607,,[]
"‚ö†Ô∏è SAST Risk (Low): Hardcoded entity_id ""admin"" could lead to privilege escalation if misused","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 9312, 62, 312, 366, 28482, 1, 714, 1085, 284, 11941, 29459, 611, 2984, 1484]",0.5,1607,sast_risk,427,"Hardcoded entity_id ""admin"" could lead to privilege escalation if misused",Low,1607,,[]
‚úÖ Best Practice: Use of a conversion function for timestamp ensures consistent data format,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 11315, 2163, 329, 41033, 19047, 6414, 1366, 5794]",1.0,1633,best_practice,434,Use of a conversion function for timestamp ensures consistent data format,,1607,                main_tag_reason = sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 850, 62, 12985, 62, 41181]"
‚ö†Ô∏è SAST Risk (Low): Potential for ID collision if stock_pool_name is not unique,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4522, 17661, 611, 4283, 62, 7742, 62, 3672, 318, 407, 3748]",0.5,1659,sast_risk,434,Potential for ID collision if stock_pool_name is not unique,Low,1633,                main_tag_reason = sub_tag_reason,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 850, 62, 12985, 62, 41181]"
üß† ML Signal: Use of model attributes to set object properties,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2746, 12608, 284, 900, 2134, 6608]",0.5,1691,ml_signal,436,Use of model attributes to set object properties,,1659,                    main_tag = current_stock_tags.main_tag,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 796, 1459, 62, 13578, 62, 31499, 13, 12417, 62, 12985]"
üß† ML Signal: Pattern of adding and committing to a session,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4375, 290, 17222, 284, 257, 6246]",0.5,1723,ml_signal,440,Pattern of adding and committing to a session,,1691,                    set_stock_tags_model=SetStockTagsModel(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 62, 13578, 62, 31499, 62, 19849, 28, 7248, 26207, 36142, 17633, 7]"
‚úÖ Best Practice: Refreshing the session to ensure the object is updated with the latest database state,"[26486, 227, 6705, 19939, 25, 6524, 411, 722, 262, 6246, 284, 4155, 262, 2134, 318, 6153, 351, 262, 3452, 6831, 1181]",0.5,1754,best_practice,441,Refreshing the session to ensure the object is updated with the latest database state,,1723,"                        entity_id=entity_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 28, 26858, 62, 312, 11]"
üß† ML Signal: Returning a database object after creation,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6831, 2134, 706, 6282]",0.5,1774,ml_signal,447,Returning a database object after creation,,1754,"                    ),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10612]"
üß† ML Signal: Function definition with parameters indicating a pattern for model building,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 2746, 2615]",0.5,1774,ml_signal,438,Function definition with parameters indicating a pattern for model building,,1774,,[]
‚ö†Ô∏è SAST Risk (Low): Use of a hardcoded provider name in DBSession,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 257, 1327, 40976, 10131, 1438, 287, 360, 4462, 2521]",0.5,1806,sast_risk,440,Use of a hardcoded provider name in DBSession,Low,1774,                    set_stock_tags_model=SetStockTagsModel(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 62, 13578, 62, 31499, 62, 19849, 28, 7248, 26207, 36142, 17633, 7]"
üß† ML Signal: Conditional check for existence in a list,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 6224, 287, 257, 1351]",0.5,1837,ml_signal,441,Conditional check for existence in a list,,1806,"                        entity_id=entity_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 28, 26858, 62, 312, 11]"
üß† ML Signal: Function call with model creation and timestamp,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2746, 6282, 290, 41033]",0.5,1868,ml_signal,441,Function call with model creation and timestamp,,1837,"                        entity_id=entity_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 28, 26858, 62, 312, 11]"
üß† ML Signal: String formatting for ID creation,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 329, 4522, 6282]",0.5,1896,ml_signal,448,String formatting for ID creation,,1868,"                    timestamp=now_pd_timestamp(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41033, 28, 2197, 62, 30094, 62, 16514, 27823, 22784]"
üß† ML Signal: Querying data with filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 16628]",0.5,1913,ml_signal,456,Querying data with filters,,1896,def get_tag_info_schema(tag_type: TagType):,"[4299, 651, 62, 12985, 62, 10951, 62, 15952, 2611, 7, 12985, 62, 4906, 25, 17467, 6030, 2599]"
üß† ML Signal: Conditional logic based on query results,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 12405, 2482]",0.5,1929,ml_signal,461,Conditional logic based on query results,,1913,    elif tag_type == TagType.hidden_tag:,"[220, 220, 220, 1288, 361, 7621, 62, 4906, 6624, 17467, 6030, 13, 30342, 62, 12985, 25]"
üß† ML Signal: Conditional logic for different insert modes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 1180, 7550, 12881]",0.5,1934,ml_signal,463,Conditional logic for different insert modes,,1929,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of set to avoid duplicate entries,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 3368, 23418, 12784]",1.0,1959,best_practice,470,Use of set to avoid duplicate entries,,1934,    data_schema = get_tag_info_schema(tag_type=tag_type),"[220, 220, 220, 1366, 62, 15952, 2611, 796, 651, 62, 12985, 62, 10951, 62, 15952, 2611, 7, 12985, 62, 4906, 28, 12985, 62, 4906, 8]"
üß† ML Signal: Object creation with multiple attributes,"[8582, 100, 254, 10373, 26484, 25, 9515, 6282, 351, 3294, 12608]",0.5,1981,ml_signal,472,Object creation with multiple attributes,,1959,        current_tags_info = data_schema.query_data(,"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 31499, 62, 10951, 796, 1366, 62, 15952, 2611, 13, 22766, 62, 7890, 7]"
‚úÖ Best Practice: Adding and committing session changes,"[26486, 227, 6705, 19939, 25, 18247, 290, 17222, 6246, 2458]",0.5,1985,best_practice,481,Adding and committing session changes,,1981,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Return statement indicating function output,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 12739, 2163, 5072]",0.5,2014,ml_signal,484,Return statement indicating function output,,1985,"    if is_tag_info_existed(tag_info=tag_info, tag_type=tag_type):","[220, 220, 220, 611, 318, 62, 12985, 62, 10951, 62, 1069, 6347, 7, 12985, 62, 10951, 28, 12985, 62, 10951, 11, 7621, 62, 4906, 28, 12985, 62, 4906, 2599]"
üß† ML Signal: Function definition with a specific task related to stock pool management,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4876, 3519, 284, 4283, 5933, 4542]",0.5,2022,ml_signal,474,Function definition with a specific task related to stock pool management,,2014,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Using a context manager for database session ensures proper resource management,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 6831, 6246, 19047, 1774, 8271, 4542]",1.0,2035,best_practice,476,Using a context manager for database session ensures proper resource management,,2022,            return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
üß† ML Signal: Querying data from a database using specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 1262, 2176, 16628]",1.0,2048,ml_signal,476,Querying data from a database using specific filters,,2035,            return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",0.5,2077,sast_risk,484,Potential risk of SQL injection if filters are not properly sanitized,Medium,2048,"    if is_tag_info_existed(tag_info=tag_info, tag_type=tag_type):","[220, 220, 220, 611, 318, 62, 12985, 62, 10951, 62, 1069, 6347, 7, 12985, 62, 10951, 28, 12985, 62, 10951, 11, 7621, 62, 4906, 28, 12985, 62, 4906, 2599]"
‚úÖ Best Practice: Deleting an object from the session before committing,"[26486, 227, 6705, 19939, 25, 42226, 889, 281, 2134, 422, 262, 6246, 878, 17222]",0.5,2102,best_practice,487,Deleting an object from the session before committing,,2077,    data_schema = get_tag_info_schema(tag_type=tag_type),"[220, 220, 220, 1366, 62, 15952, 2611, 796, 651, 62, 12985, 62, 10951, 62, 15952, 2611, 7, 12985, 62, 4906, 28, 12985, 62, 4906, 8]"
‚úÖ Best Practice: Use of context manager for session ensures proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 6246, 19047, 1774, 8271, 4542]",1.0,2134,best_practice,488,Use of context manager for session ensures proper resource management,,2102,"    with contract_api.DBSession(provider=""zvt"", data_schema=data_schema)() as session:","[220, 220, 220, 351, 2775, 62, 15042, 13, 35, 4462, 2521, 7, 15234, 1304, 2625, 89, 36540, 1600, 1366, 62, 15952, 2611, 28, 7890, 62, 15952, 2611, 8, 3419, 355, 6246, 25]"
üß† ML Signal: Use of type hints can be used to infer data structures and types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 20269, 460, 307, 973, 284, 13249, 1366, 8573, 290, 3858]",0.5,2145,ml_signal,499,Use of type hints can be used to infer data structures and types,,2134,        session.commit(),"[220, 220, 220, 220, 220, 220, 220, 6246, 13, 41509, 3419]"
üß† ML Signal: Use of flatten_list indicates data transformation patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 27172, 268, 62, 4868, 9217, 1366, 13389, 7572]",0.5,2153,ml_signal,512,Use of flatten_list indicates data transformation patterns,,2145,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of dictionary comprehensions for mapping,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 8569, 507, 329, 16855]",0.5,2170,ml_signal,513,Use of dictionary comprehensions for mapping,,2153,        session.add(stock_pool_info),"[220, 220, 220, 220, 220, 220, 220, 6246, 13, 2860, 7, 13578, 62, 7742, 62, 10951, 8]"
üß† ML Signal: Use of dictionary comprehensions for mapping,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 8569, 507, 329, 16855]",0.5,2221,ml_signal,524,Use of dictionary comprehensions for mapping,,2170,"                    stock_pool_type=StockPoolType.custom, stock_pool_name=create_stock_pools_model.stock_pool_name","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 7742, 62, 4906, 28, 26207, 27201, 6030, 13, 23144, 11, 4283, 62, 7742, 62, 3672, 28, 17953, 62, 13578, 62, 7742, 82, 62, 19849, 13, 13578, 62, 7742, 62, 3672]"
üß† ML Signal: Use of dictionary comprehensions for mapping,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 8569, 507, 329, 16855]",0.5,2233,ml_signal,528,Use of dictionary comprehensions for mapping,,2221,        # one instance per day,"[220, 220, 220, 220, 220, 220, 220, 1303, 530, 4554, 583, 1110]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType access if entity_id is not found in entity_map,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 1895, 611, 9312, 62, 312, 318, 407, 1043, 287, 9312, 62, 8899]",1.0,2241,sast_risk,537,Potential NoneType access if entity_id is not found in entity_map,Low,2233,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType access if entity_id is not found in entity_map,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 1895, 611, 9312, 62, 312, 318, 407, 1043, 287, 9312, 62, 8899]",1.0,2260,sast_risk,539,Potential NoneType access if entity_id is not found in entity_map,Low,2241,            stock_pool = datas[0],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 7742, 796, 19395, 58, 15, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType access if entity_id is not found in entity_tags_map,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 1895, 611, 9312, 62, 312, 318, 407, 1043, 287, 9312, 62, 31499, 62, 8899]",1.0,2308,sast_risk,543,Potential NoneType access if entity_id is not found in entity_tags_map,Low,2260,                stock_pool.entity_ids = list(set(stock_pool.entity_ids + create_stock_pools_model.entity_ids)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 7742, 13, 26858, 62, 2340, 796, 1351, 7, 2617, 7, 13578, 62, 7742, 13, 26858, 62, 2340, 1343, 2251, 62, 13578, 62, 7742, 82, 62, 19849, 13, 26858, 62, 2340, 4008]"
üß† ML Signal: Use of fill_dict indicates data merging patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6070, 62, 11600, 9217, 1366, 35981, 7572]",0.5,2340,ml_signal,550,Use of fill_dict indicates data merging patterns,,2308,"                entity_ids=create_stock_pools_model.entity_ids,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 28, 17953, 62, 13578, 62, 7742, 82, 62, 19849, 13, 26858, 62, 2340, 11]"
üß† ML Signal: Checking for the presence of sub_tags can indicate data completeness or quality.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 262, 4931, 286, 850, 62, 31499, 460, 7603, 1366, 1224, 43205, 393, 3081, 13]",0.5,2361,ml_signal,546,Checking for the presence of sub_tags can indicate data completeness or quality.,,2340,"                entity_id=""admin"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 2625, 28482, 1600]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information (entity_id).,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 357, 26858, 62, 312, 737]",1.0,2384,sast_risk,548,Logging potentially sensitive information (entity_id).,Low,2361,"                id=stock_pool_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4686, 28, 13578, 62, 7742, 62, 312, 11]"
üß† ML Signal: Accessing a specific sub_tag from a collection.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 850, 62, 12985, 422, 257, 4947, 13]",0.5,2396,ml_signal,551,Accessing a specific sub_tag from a collection.,,2384,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Mapping sub_tag to its reason, indicating a relationship between data points.","[8582, 100, 254, 10373, 26484, 25, 337, 5912, 850, 62, 12985, 284, 663, 1738, 11, 12739, 257, 2776, 1022, 1366, 2173, 13]",0.5,2407,ml_signal,553,"Mapping sub_tag to its reason, indicating a relationship between data points.",,2396,        session.commit(),"[220, 220, 220, 220, 220, 220, 220, 6246, 13, 41509, 3419]"
"üß† ML Signal: Function call to derive main_tag from sub_tag, indicating a transformation or mapping.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 27099, 1388, 62, 12985, 422, 850, 62, 12985, 11, 12739, 257, 13389, 393, 16855, 13]",0.5,2418,ml_signal,555,"Function call to derive main_tag from sub_tag, indicating a transformation or mapping.",,2407,        return stock_pool,"[220, 220, 220, 220, 220, 220, 220, 1441, 4283, 62, 7742]"
"üß† ML Signal: Conditional logic to handle specific cases, such as ""ÂÖ∂‰ªñ"".","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 2176, 2663, 11, 884, 355, 366, 17739, 114, 20015, 244, 1911]",0.5,2418,ml_signal,556,"Conditional logic to handle specific cases, such as ""ÂÖ∂‰ªñ"".",,2418,,[]
"‚úÖ Best Practice: Using a model to encapsulate data, improving readability and maintainability.","[26486, 227, 6705, 19939, 25, 8554, 257, 2746, 284, 32652, 5039, 1366, 11, 10068, 1100, 1799, 290, 5529, 1799, 13]",0.5,2426,best_practice,564,"Using a model to encapsulate data, improving readability and maintainability.",,2418,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information (set_stock_tags_model).,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 357, 2617, 62, 13578, 62, 31499, 62, 19849, 737]",1.0,2441,sast_risk,571,Logging potentially sensitive information (set_stock_tags_model).,Low,2426,"            return ""success""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 13138, 1]"
"üß† ML Signal: Function call to build stock tags, indicating a data processing step.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 1382, 4283, 15940, 11, 12739, 257, 1366, 7587, 2239, 13]",0.5,2441,ml_signal,573,"Function call to build stock tags, indicating a data processing step.",,2441,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 4069]",0.5,2456,best_practice,571,Consider adding a docstring to describe the function's purpose and behavior,,2441,"            return ""success""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 366, 13138, 1]"
‚úÖ Best Practice: Use a context manager for database session to ensure proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 257, 4732, 4706, 329, 6831, 6246, 284, 4155, 1774, 8271, 4542]",1.0,2456,best_practice,573,Use a context manager for database session to ensure proper resource management,,2456,,[]
üß† ML Signal: Querying data from a database can indicate data retrieval patterns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 460, 7603, 1366, 45069, 7572]",0.5,2456,ml_signal,573,Querying data from a database can indicate data retrieval patterns,,2456,,[]
üß† ML Signal: Iterating over database query results is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6831, 12405, 2482, 318, 257, 2219, 3912]",1.0,2477,ml_signal,580,Iterating over database query results is a common pattern,,2456,"            order=TagStats.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 28, 24835, 29668, 13, 16514, 27823, 13, 20147, 22784]"
üß† ML Signal: Function calls within loops can indicate batch processing patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 1626, 23607, 460, 7603, 15458, 7587, 7572]",0.5,2498,ml_signal,580,Function calls within loops can indicate batch processing patterns,,2477,"            order=TagStats.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 28, 24835, 29668, 13, 16514, 27823, 13, 20147, 22784]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,2519,best_practice,580,Consider adding type hints for function parameters and return type for better readability and maintainability.,,2498,"            order=TagStats.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 28, 24835, 29668, 13, 16514, 27823, 13, 20147, 22784]"
üß† ML Signal: Usage of query_data method with specific filters and columns can indicate common data access patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 351, 2176, 16628, 290, 15180, 460, 7603, 2219, 1366, 1895, 7572, 13]",0.5,2519,ml_signal,586,Usage of query_data method with specific filters and columns can indicate common data access patterns.,,2519,,[]
üß† ML Signal: Converting a DataFrame column to a list is a common pattern for data processing.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 6060, 19778, 5721, 284, 257, 1351, 318, 257, 2219, 3912, 329, 1366, 7587, 13]",0.5,2519,ml_signal,588,Converting a DataFrame column to a list is a common pattern for data processing.,,2519,,[]
‚úÖ Best Practice: Logging information messages helps in tracking the flow and state of the application.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 1321, 6218, 5419, 287, 9646, 262, 5202, 290, 1181, 286, 262, 3586, 13]",0.5,2534,best_practice,590,Logging information messages helps in tracking the flow and state of the application.,,2519,"            session=session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11]"
‚úÖ Best Practice: Early return pattern improves code readability by reducing nested blocks.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 2438, 1100, 1799, 416, 8868, 28376, 7021, 13]",0.5,2559,best_practice,593,Early return pattern improves code readability by reducing nested blocks.,,2534,"                TagStats.timestamp == target_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17467, 29668, 13, 16514, 27823, 6624, 2496, 62, 4475, 11]"
üß† ML Signal: Calling a function with specific parameters can indicate a pattern of usage or behavior.,"[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 351, 2176, 10007, 460, 7603, 257, 3912, 286, 8748, 393, 4069, 13]",0.5,2584,ml_signal,593,Calling a function with specific parameters can indicate a pattern of usage or behavior.,,2559,"                TagStats.timestamp == target_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17467, 29668, 13, 16514, 27823, 6624, 2496, 62, 4475, 11]"
üß† ML Signal: Function definition with specific parameter types can be used to infer usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 11507, 3858, 460, 307, 973, 284, 13249, 8748, 7572, 13]",1.0,2599,ml_signal,590,Function definition with specific parameter types can be used to infer usage patterns.,,2584,"            session=session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11]"
üß† ML Signal: Querying data with specific filters can indicate common data access patterns.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 460, 7603, 2219, 1366, 1895, 7572, 13]",0.5,2639,ml_signal,592,Querying data with specific filters can indicate common data access patterns.,,2599,"                TagStats.stock_pool_name == query_stock_tag_stats_model.stock_pool_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17467, 29668, 13, 13578, 62, 7742, 62, 3672, 6624, 12405, 62, 13578, 62, 12985, 62, 34242, 62, 19849, 13, 13578, 62, 7742, 62, 3672, 11]"
üß† ML Signal: Converting query results to a list can indicate common data processing patterns.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 12405, 2482, 284, 257, 1351, 460, 7603, 2219, 1366, 7587, 7572, 13]",0.5,2664,ml_signal,593,Converting query results to a list can indicate common data processing patterns.,,2639,"                TagStats.timestamp == target_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17467, 29668, 13, 16514, 27823, 6624, 2496, 62, 4475, 11]"
üß† ML Signal: Querying data with specific filters can indicate common data access patterns.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 460, 7603, 2219, 1366, 1895, 7572, 13]",0.5,2664,ml_signal,598,Querying data with specific filters can indicate common data access patterns.,,2664,,[]
üß† ML Signal: List comprehension usage can indicate common data transformation patterns.,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 8748, 460, 7603, 2219, 1366, 13389, 7572, 13]",0.5,2699,ml_signal,602,List comprehension usage can indicate common data transformation patterns.,,2664,"        entity_ids = flatten_list([tag_stats[""entity_ids""] for tag_stats in tag_stats_list])","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 27172, 268, 62, 4868, 26933, 12985, 62, 34242, 14692, 26858, 62, 2340, 8973, 329, 7621, 62, 34242, 287, 7621, 62, 34242, 62, 4868, 12962]"
‚ö†Ô∏è SAST Risk (Low): Logging information about empty results could potentially expose sensitive data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 1321, 546, 6565, 2482, 714, 6196, 15651, 8564, 1366, 13]",0.5,2710,sast_risk,604,Logging information about empty results could potentially expose sensitive data.,Low,2699,        # get stocks meta,"[220, 220, 220, 220, 220, 220, 220, 1303, 651, 14420, 13634]"
üß† ML Signal: Function call with specific parameters can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 460, 7603, 2219, 8748, 7572, 13]",0.5,2721,ml_signal,608,Function call with specific parameters can indicate common usage patterns.,,2710,        # get stock tags,"[220, 220, 220, 220, 220, 220, 220, 1303, 651, 4283, 15940]"
üß† ML Signal: Function definition with specific model parameter type,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 2746, 11507, 2099]",1.0,2721,ml_signal,603,Function definition with specific model parameter type,,2721,,[]
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if sub_tags are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 850, 62, 31499, 389, 407, 6105, 5336, 36951]",1.0,2745,sast_risk,606,Potential SQL injection if sub_tags are not properly sanitized,Low,2721,        entity_map = {item.entity_id: item for item in stocks},"[220, 220, 220, 220, 220, 220, 220, 9312, 62, 8899, 796, 1391, 9186, 13, 26858, 62, 312, 25, 2378, 329, 2378, 287, 14420, 92]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if sub_tag is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 850, 62, 12985, 318, 407, 6105, 5336, 36951]",1.0,2763,sast_risk,609,Potential SQL injection if sub_tag is not properly sanitized,Low,2745,        tags_dict = StockTags.query_data(,"[220, 220, 220, 220, 220, 220, 220, 15940, 62, 11600, 796, 10500, 36142, 13, 22766, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Use of raw SQL functions can lead to SQL injection,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 8246, 16363, 5499, 460, 1085, 284, 16363, 16954]",1.0,2763,sast_risk,615,Use of raw SQL functions can lead to SQL injection,Low,2763,,[]
‚úÖ Best Practice: Use of logging for information tracking,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 1321, 9646]",0.5,2780,best_practice,620,Use of logging for information tracking,,2763,"            return_type=""dict"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 11600, 1600]"
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 21201]",1.0,2796,sast_risk,625,Committing changes to the database without validation,Low,2780,            stock_details = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 36604, 796, 17635]"
üß† ML Signal: Tracking changes to entity_id in result,"[8582, 100, 254, 10373, 26484, 25, 37169, 2458, 284, 9312, 62, 312, 287, 1255]",1.0,2821,ml_signal,626,Tracking changes to entity_id in result,,2796,"            for entity_id in tag_stats[""entity_ids""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 9312, 62, 312, 287, 7621, 62, 34242, 14692, 26858, 62, 2340, 1, 5974]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection risk if `hidden_tag` is not properly sanitized before being used in the query.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 611, 4600, 30342, 62, 12985, 63, 318, 407, 6105, 5336, 36951, 878, 852, 973, 287, 262, 12405, 13]",1.0,2839,sast_risk,624,Potential SQL injection risk if `hidden_tag` is not properly sanitized before being used in the query.,Medium,2821,        for tag_stats in tag_stats_list:,"[220, 220, 220, 220, 220, 220, 220, 329, 7621, 62, 34242, 287, 7621, 62, 34242, 62, 4868, 25]"
‚úÖ Best Practice: Consider using parameterized queries to prevent SQL injection.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 11507, 1143, 20743, 284, 2948, 16363, 16954, 13]",1.0,2855,best_practice,625,Consider using parameterized queries to prevent SQL injection.,,2839,            stock_details = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 36604, 796, 17635]"
‚úÖ Best Practice: Using a context manager for the session ensures that resources are properly managed and released.,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 262, 6246, 19047, 326, 4133, 389, 6105, 5257, 290, 2716, 13]",0.5,2880,best_practice,626,Using a context manager for the session ensures that resources are properly managed and released.,,2855,"            for entity_id in tag_stats[""entity_ids""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 9312, 62, 312, 287, 7621, 62, 34242, 14692, 26858, 62, 2340, 1, 5974]"
üß† ML Signal: Usage of query_data method with filters indicates a pattern for querying databases.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 351, 16628, 9217, 257, 3912, 329, 42517, 1112, 20083, 13]",0.5,2914,ml_signal,631,Usage of query_data method with filters indicates a pattern for querying databases.,,2880,"                    ""name"": entity_map.get(entity_id).name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 9312, 62, 8899, 13, 1136, 7, 26858, 62, 312, 737, 3672, 11]"
‚ö†Ô∏è SAST Risk (Medium): Use of `func.json_extract` with dynamic input can lead to SQL injection if not properly handled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 4600, 20786, 13, 17752, 62, 2302, 974, 63, 351, 8925, 5128, 460, 1085, 284, 16363, 16954, 611, 407, 6105, 12118, 13]",1.0,2930,sast_risk,632,Use of `func.json_extract` with dynamic input can lead to SQL injection if not properly handled.,Medium,2914,                },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Logging patterns can be used to train models for detecting logging practices.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 7572, 460, 307, 973, 284, 4512, 4981, 329, 31521, 18931, 6593, 13]",0.5,2973,ml_signal,637,Logging patterns can be used to train models for detecting logging practices.,,2930,"                    stock_details_model[""hidden_tags""] = stock_tags[""active_hidden_tags""].keys()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 36604, 62, 19849, 14692, 30342, 62, 31499, 8973, 796, 4283, 62, 31499, 14692, 5275, 62, 30342, 62, 31499, 1, 4083, 13083, 3419]"
‚úÖ Best Practice: Converting to a dictionary before modification ensures that the original data structure is not directly altered.,"[26486, 227, 6705, 19939, 25, 35602, 889, 284, 257, 22155, 878, 17613, 19047, 326, 262, 2656, 1366, 4645, 318, 407, 3264, 14294, 13]",0.5,3008,best_practice,641,Converting to a dictionary before modification ensures that the original data structure is not directly altered.,,2973,                stock_system_tags = entity_system_tags_map.get(entity_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 10057, 62, 31499, 796, 9312, 62, 10057, 62, 31499, 62, 8899, 13, 1136, 7, 26858, 62, 312, 8]"
‚úÖ Best Practice: Committing the session after changes ensures that the database is updated with the latest data.,"[26486, 227, 6705, 19939, 25, 1520, 2535, 262, 6246, 706, 2458, 19047, 326, 262, 6831, 318, 6153, 351, 262, 3452, 1366, 13]",0.5,3008,best_practice,643,Committing the session after changes ensures that the database is updated with the latest data.,,3008,,[]
‚úÖ Best Practice: Refreshing the session ensures that the object is updated with the latest data from the database.,"[26486, 227, 6705, 19939, 25, 6524, 411, 722, 262, 6246, 19047, 326, 262, 2134, 318, 6153, 351, 262, 3452, 1366, 422, 262, 6831, 13]",1.0,3008,best_practice,648,Refreshing the session ensures that the object is updated with the latest data from the database.,,3008,,[]
üß† ML Signal: Function definition with a specific task related to database operations,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4876, 3519, 284, 6831, 4560]",1.0,3043,ml_signal,641,Function definition with a specific task related to database operations,,3008,                stock_system_tags = entity_system_tags_map.get(entity_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 10057, 62, 31499, 796, 9312, 62, 10057, 62, 31499, 62, 8899, 13, 1136, 7, 26858, 62, 312, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `contract_api.DBSession` is not properly handling exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 28484, 62, 15042, 13, 35, 4462, 2521, 63, 318, 407, 6105, 9041, 13269]",0.5,3043,sast_risk,643,Potential risk if `contract_api.DBSession` is not properly handling exceptions,Low,3043,,[]
üß† ML Signal: Querying a database using specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 257, 6831, 1262, 2176, 16628]",0.5,3043,ml_signal,643,Querying a database using specific filters,,3043,,[]
‚úÖ Best Practice: Checking if the query result is empty before proceeding,"[26486, 227, 6705, 19939, 25, 39432, 611, 262, 12405, 1255, 318, 6565, 878, 18788]",1.0,3056,best_practice,651,Checking if the query result is empty before proceeding,,3043,    if not stock_tag.sub_tags:,"[220, 220, 220, 611, 407, 4283, 62, 12985, 13, 7266, 62, 31499, 25]"
üß† ML Signal: Logging information about the operation,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 262, 4905]",0.5,3067,ml_signal,653,Logging information about the operation,,3056,        return stock_tag,"[220, 220, 220, 220, 220, 220, 220, 1441, 4283, 62, 12985]"
üß† ML Signal: Calling a function to perform an operation based on the query result,"[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 284, 1620, 281, 4905, 1912, 319, 262, 12405, 1255]",1.0,3088,ml_signal,656,Calling a function to perform an operation based on the query result,,3067,    sub_tag_reason = stock_tag.sub_tags[sub_tag],"[220, 220, 220, 850, 62, 12985, 62, 41181, 796, 4283, 62, 12985, 13, 7266, 62, 31499, 58, 7266, 62, 12985, 60]"
‚ö†Ô∏è SAST Risk (Low): Deleting data from the database; ensure proper authorization and validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42226, 889, 1366, 422, 262, 6831, 26, 4155, 1774, 19601, 290, 21201]",0.5,3111,sast_risk,658,Deleting data from the database; ensure proper authorization and validation,Low,3088,    main_tag = get_main_tag_by_sub_tag(sub_tag),"[220, 220, 220, 1388, 62, 12985, 796, 651, 62, 12417, 62, 12985, 62, 1525, 62, 7266, 62, 12985, 7, 7266, 62, 12985, 8]"
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database; ensure atomicity and error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 26, 4155, 22037, 8467, 290, 4049, 9041]",1.0,3125,sast_risk,660,Committing changes to the database; ensure atomicity and error handling,Low,3111,"    if main_tag == ""ÂÖ∂‰ªñ"":","[220, 220, 220, 611, 1388, 62, 12985, 6624, 366, 17739, 114, 20015, 244, 1298]"
üß† ML Signal: Function definition with parameters indicating a creation operation,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 6282, 4905]",1.0,3139,ml_signal,655,Function definition with parameters indicating a creation operation,,3125,    sub_tag = stock_tag.sub_tag,"[220, 220, 220, 850, 62, 12985, 796, 4283, 62, 12985, 13, 7266, 62, 12985]"
üß† ML Signal: Instantiation of a model object with specific attributes,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 2746, 2134, 351, 2176, 12608]",1.0,3139,ml_signal,657,Instantiation of a model object with specific attributes,,3139,,[]
üß† ML Signal: Conditional check for existence of an entity,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 6224, 286, 281, 9312]",1.0,3153,ml_signal,659,Conditional check for existence of an entity,,3139,    main_tag_reason = sub_tag_reason,"[220, 220, 220, 1388, 62, 12985, 62, 41181, 796, 850, 62, 12985, 62, 41181]"
üß† ML Signal: Function call to build or create an entity,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 1382, 393, 2251, 281, 9312]",1.0,3171,ml_signal,661,Function call to build or create an entity,,3153,        main_tag = stock_tag.main_tag,"[220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 796, 4283, 62, 12985, 13, 12417, 62, 12985]"
‚úÖ Best Practice: Using a context manager for database session ensures proper resource management.,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 6831, 6246, 19047, 1774, 8271, 4542, 13]",0.5,3185,best_practice,660,Using a context manager for database session ensures proper resource management.,,3171,"    if main_tag == ""ÂÖ∂‰ªñ"":","[220, 220, 220, 611, 1388, 62, 12985, 6624, 366, 17739, 114, 20015, 244, 1298]"
üß† ML Signal: Querying data based on a specific tag can indicate a pattern of interest in certain industries.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 1912, 319, 257, 2176, 7621, 460, 7603, 257, 3912, 286, 1393, 287, 1728, 11798, 13]",0.5,3203,ml_signal,661,Querying data based on a specific tag can indicate a pattern of interest in certain industries.,,3185,        main_tag = stock_tag.main_tag,"[220, 220, 220, 220, 220, 220, 220, 1388, 62, 12985, 796, 4283, 62, 12985, 13, 12417, 62, 12985]"
‚úÖ Best Practice: Returning a dictionary with clear keys improves readability and usability of the function's output.,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 351, 1598, 8251, 19575, 1100, 1799, 290, 42863, 286, 262, 2163, 338, 5072, 13]",0.5,3222,best_practice,669,Returning a dictionary with clear keys improves readability and usability of the function's output.,,3203,"        sub_tag_reason=sub_tag_reason,","[220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 62, 41181, 28, 7266, 62, 12985, 62, 41181, 11]"
üß† ML Signal: Function definition with a specific pattern of input and output,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 3912, 286, 5128, 290, 5072]",1.0,3237,ml_signal,668,Function definition with a specific pattern of input and output,,3222,"        sub_tag=sub_tag,","[220, 220, 220, 220, 220, 220, 220, 850, 62, 12985, 28, 7266, 62, 12985, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'contract_api.DBSession' is not properly handling exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 28484, 62, 15042, 13, 35, 4462, 2521, 6, 318, 407, 6105, 9041, 13269]",0.5,3260,sast_risk,670,Potential risk if 'contract_api.DBSession' is not properly handling exceptions,Low,3237,"        active_hidden_tags=stock_tag.active_hidden_tags,","[220, 220, 220, 220, 220, 220, 220, 4075, 62, 30342, 62, 31499, 28, 13578, 62, 12985, 13, 5275, 62, 30342, 62, 31499, 11]"
üß† ML Signal: Querying a database using a session object,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 257, 6831, 1262, 257, 6246, 2134]",1.0,3283,ml_signal,670,Querying a database using a session object,,3260,"        active_hidden_tags=stock_tag.active_hidden_tags,","[220, 220, 220, 220, 220, 220, 220, 4075, 62, 30342, 62, 31499, 28, 13578, 62, 12985, 13, 5275, 62, 30342, 62, 31499, 11]"
‚úÖ Best Practice: Returning a dictionary with clear key-value pairs,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 351, 1598, 1994, 12, 8367, 14729]",0.5,3287,best_practice,679,Returning a dictionary with clear key-value pairs,,3283,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Usage of a database session pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6831, 6246, 3912]",1.0,3300,ml_signal,678,Usage of a database session pattern,,3287,"        keep_current=False,","[220, 220, 220, 220, 220, 220, 220, 1394, 62, 14421, 28, 25101, 11]"
üß† ML Signal: Function call to create a tag if it doesn't exist,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 2251, 257, 7621, 611, 340, 1595, 470, 2152]",1.0,3300,ml_signal,681,Function call to create a tag if it doesn't exist,,3300,,[]
üß† ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",1.0,3315,ml_signal,682,Querying data with specific filters,,3300,def refresh_all_main_tag_by_sub_tag():,"[4299, 14976, 62, 439, 62, 12417, 62, 12985, 62, 1525, 62, 7266, 62, 12985, 33529]"
üß† ML Signal: Modifying attributes of queried data,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 12608, 286, 42517, 798, 1366]",0.5,3315,ml_signal,690,Modifying attributes of queried data,,3315,,[]
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database without error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 4049, 9041]",1.0,3331,sast_risk,695,Committing changes to the database without error handling,Low,3315,"        columns=[StockTags.entity_id],","[220, 220, 220, 220, 220, 220, 220, 15180, 41888, 26207, 36142, 13, 26858, 62, 312, 4357]"
üß† ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",1.0,3347,ml_signal,695,Querying data with specific filters,,3331,"        columns=[StockTags.entity_id],","[220, 220, 220, 220, 220, 220, 220, 15180, 41888, 26207, 36142, 13, 26858, 62, 312, 4357]"
üß† ML Signal: Modifying attributes of queried data,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 12608, 286, 42517, 798, 1366]",0.5,3373,ml_signal,702,Modifying attributes of queried data,,3347,"    build_default_main_tag(entity_ids=entity_ids, force_rebuild=True)","[220, 220, 220, 1382, 62, 12286, 62, 12417, 62, 12985, 7, 26858, 62, 2340, 28, 26858, 62, 2340, 11, 2700, 62, 260, 11249, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database without error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 4049, 9041]",1.0,3373,sast_risk,703,Committing changes to the database without error handling,Low,3373,,[]
‚úÖ Best Practice: Using a context manager for the session ensures it is properly closed after use.,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 262, 6246, 19047, 340, 318, 6105, 4838, 706, 779, 13]",1.0,3382,best_practice,699,Using a context manager for the session ensures it is properly closed after use.,,3373,    if not entity_ids:,"[220, 220, 220, 611, 407, 9312, 62, 2340, 25]"
üß† ML Signal: Function call to create a main tag if it doesn't exist indicates a pattern of ensuring data integrity.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 2251, 257, 1388, 7621, 611, 340, 1595, 470, 2152, 9217, 257, 3912, 286, 13359, 1366, 11540, 13]",1.0,3408,ml_signal,702,Function call to create a main tag if it doesn't exist indicates a pattern of ensuring data integrity.,,3382,"    build_default_main_tag(entity_ids=entity_ids, force_rebuild=True)","[220, 220, 220, 1382, 62, 12286, 62, 12417, 62, 12985, 7, 26858, 62, 2340, 28, 26858, 62, 2340, 11, 2700, 62, 260, 11249, 28, 17821, 8]"
üß† ML Signal: Querying data with specific filters shows a pattern of data retrieval based on conditions.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 2523, 257, 3912, 286, 1366, 45069, 1912, 319, 3403, 13]",1.0,3408,ml_signal,703,Querying data with specific filters shows a pattern of data retrieval based on conditions.,,3408,,[]
üß† ML Signal: Modifying data based on conditions is a common pattern in data processing.,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 1366, 1912, 319, 3403, 318, 257, 2219, 3912, 287, 1366, 7587, 13]",0.5,3421,ml_signal,711,Modifying data based on conditions is a common pattern in data processing.,,3408,"        return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database without exception handling could lead to data inconsistency.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 6631, 9041, 714, 1085, 284, 1366, 43831, 13]",1.0,3444,sast_risk,716,Committing changes to the database without exception handling could lead to data inconsistency.,Low,3421,"        logger.info(f""No stocks in {industry_list}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 2949, 14420, 287, 1391, 23213, 563, 62, 4868, 92, 4943]"
üß† ML Signal: Querying data with specific filters shows a pattern of data retrieval based on conditions.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 2523, 257, 3912, 286, 1366, 45069, 1912, 319, 3403, 13]",1.0,3467,ml_signal,716,Querying data with specific filters shows a pattern of data retrieval based on conditions.,,3444,"        logger.info(f""No stocks in {industry_list}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 2949, 14420, 287, 1391, 23213, 563, 62, 4868, 92, 4943]"
üß† ML Signal: Modifying data based on conditions is a common pattern in data processing.,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 1366, 1912, 319, 3403, 318, 257, 2219, 3912, 287, 1366, 7587, 13]",0.5,3485,ml_signal,723,Modifying data based on conditions is a common pattern in data processing.,,3467,    sub_tags = activate_sub_tags_model.sub_tags,"[220, 220, 220, 850, 62, 31499, 796, 15155, 62, 7266, 62, 31499, 62, 19849, 13, 7266, 62, 31499]"
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database without exception handling could lead to data inconsistency.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 6631, 9041, 714, 1085, 284, 1366, 43831, 13]",1.0,3503,sast_risk,723,Committing changes to the database without exception handling could lead to data inconsistency.,Low,3485,    sub_tags = activate_sub_tags_model.sub_tags,"[220, 220, 220, 850, 62, 31499, 796, 15155, 62, 7266, 62, 31499, 62, 19849, 13, 7266, 62, 31499]"
üß† ML Signal: Usage of a function to ensure a main tag exists before proceeding,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 4155, 257, 1388, 7621, 7160, 878, 18788]",1.0,3503,ml_signal,721,Usage of a function to ensure a main tag exists before proceeding,,3503,,[]
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",0.5,3521,sast_risk,723,Potential SQL injection if filters are not properly sanitized,Low,3503,    sub_tags = activate_sub_tags_model.sub_tags,"[220, 220, 220, 850, 62, 31499, 796, 15155, 62, 7266, 62, 31499, 62, 19849, 13, 7266, 62, 31499]"
üß† ML Signal: Querying data with specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628]",1.0,3539,ml_signal,723,Querying data with specific filters,,3521,    sub_tags = activate_sub_tags_model.sub_tags,"[220, 220, 220, 850, 62, 31499, 796, 15155, 62, 7266, 62, 31499, 62, 19849, 13, 7266, 62, 31499]"
üß† ML Signal: Building a tag parameter for each stock tag,"[8582, 100, 254, 10373, 26484, 25, 11819, 257, 7621, 11507, 329, 1123, 4283, 7621]",1.0,3568,ml_signal,729,Building a tag parameter for each stock tag,,3539,"            #     filters=[StockTags.sub_tag != sub_tag],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 16628, 41888, 26207, 36142, 13, 7266, 62, 12985, 14512, 850, 62, 12985, 4357]"
üß† ML Signal: Creating a model to set stock tags,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 2746, 284, 900, 4283, 15940]",1.0,3568,ml_signal,735,Creating a model to set stock tags,,3568,,[]
üß† ML Signal: Building stock tags with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 11819, 4283, 15940, 351, 2176, 10007]",1.0,3587,ml_signal,749,Building stock tags with specific parameters,,3568,                session.commit(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 13, 41509, 3419]"
‚úÖ Best Practice: Refreshing session to ensure data consistency,"[26486, 227, 6705, 19939, 25, 6524, 411, 722, 6246, 284, 4155, 1366, 15794]",0.5,3587,best_practice,753,Refreshing session to ensure data consistency,,3587,,[]
‚ö†Ô∏è SAST Risk (Low): Direct execution of code in the main block,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 9706, 286, 2438, 287, 262, 1388, 2512]",1.0,3587,sast_risk,753,Direct execution of code in the main block,Low,3587,,[]
‚ö†Ô∏è SAST Risk (Low): Potentially unsafe print statement for debugging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 21596, 3601, 2643, 329, 28769]",0.5,3587,sast_risk,753,Potentially unsafe print statement for debugging,Low,3587,,[]
‚úÖ Best Practice: Using __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,3587,best_practice,753,Using __all__ to define public API of the module,,3587,,[]

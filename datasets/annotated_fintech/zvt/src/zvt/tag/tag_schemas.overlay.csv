annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Usage of custom mixin class for ORM models,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 5022, 259, 1398, 329, 6375, 44, 4981]",0.5,16,ml_signal,3,Usage of custom mixin class for ORM models,,0,"from sqlalchemy import Column, String, JSON, Boolean, Float, Integer","[6738, 44161, 282, 26599, 1330, 29201, 11, 10903, 11, 19449, 11, 41146, 11, 48436, 11, 34142]"
üß† ML Signal: Custom schema registration pattern,"[8582, 100, 254, 10373, 26484, 25, 8562, 32815, 9352, 3912]",0.5,16,ml_signal,5,Custom schema registration pattern,,16,,[]
üß† ML Signal: Declarative base pattern for SQLAlchemy ORM,"[8582, 100, 254, 10373, 26484, 25, 16691, 283, 876, 2779, 3912, 329, 16363, 2348, 26599, 6375, 44]",0.5,28,ml_signal,7,Declarative base pattern for SQLAlchemy ORM,,16,from zvt.contract.register import register_schema,"[6738, 1976, 36540, 13, 28484, 13, 30238, 1330, 7881, 62, 15952, 2611]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",0.5,36,ml_signal,6,Use of SQLAlchemy ORM for database modeling,,28,from zvt.contract import Mixin,"[6738, 1976, 36540, 13, 28484, 1330, 15561, 259]"
üß† ML Signal: Use of SQLAlchemy ORM for database table definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 3084, 6770]",0.5,36,ml_signal,8,Use of SQLAlchemy ORM for database table definition,,36,,[]
üß† ML Signal: Use of SQLAlchemy Column for defining table columns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 29201, 329, 16215, 3084, 15180]",0.5,36,ml_signal,10,Use of SQLAlchemy Column for defining table columns,,36,,[]
‚ö†Ô∏è SAST Risk (Low): Potential SQL Injection if user input is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 554, 29192, 611, 2836, 5128, 318, 407, 5336, 36951]",0.5,36,sast_risk,11,Potential SQL Injection if user input is not sanitized,Low,36,,[]
üß† ML Signal: Use of SQLAlchemy Column for defining table columns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 29201, 329, 16215, 3084, 15180]",0.5,51,ml_signal,13,Use of SQLAlchemy Column for defining table columns,,36,"    __tablename__ = ""industry_info""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 23213, 563, 62, 10951, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL Injection if user input is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 554, 29192, 611, 2836, 5128, 318, 407, 5336, 36951]",0.5,51,sast_risk,14,Potential SQL Injection if user input is not sanitized,Low,51,,[]
üß† ML Signal: Use of SQLAlchemy Column for defining table columns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 29201, 329, 16215, 3084, 15180]",0.5,60,ml_signal,16,Use of SQLAlchemy Column for defining table columns,,51,    description = Column(String),"[220, 220, 220, 6764, 796, 29201, 7, 10100, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL Injection if user input is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 554, 29192, 611, 2836, 5128, 318, 407, 5336, 36951]",0.5,67,sast_risk,17,Potential SQL Injection if user input is not sanitized,Low,60,    # related main tag,"[220, 220, 220, 1303, 3519, 1388, 7621]"
‚úÖ Best Practice: Class should inherit from object for compatibility with Python 2 and 3,"[26486, 227, 6705, 19939, 25, 5016, 815, 16955, 422, 2134, 329, 17764, 351, 11361, 362, 290, 513]",0.5,67,best_practice,11,Class should inherit from object for compatibility with Python 2 and 3,,67,,[]
‚úÖ Best Practice: Use a class variable to define the table name for clarity,"[26486, 227, 6705, 19939, 25, 5765, 257, 1398, 7885, 284, 8160, 262, 3084, 1438, 329, 16287]",0.5,82,best_practice,13,Use a class variable to define the table name for clarity,,67,"    __tablename__ = ""industry_info""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 23213, 563, 62, 10951, 1]"
üß† ML Signal: Usage of unique constraint on a column,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3748, 32315, 319, 257, 5721]",0.5,97,ml_signal,15,Usage of unique constraint on a column,,82,"    industry_name = Column(String, unique=True)","[220, 220, 220, 2831, 62, 3672, 796, 29201, 7, 10100, 11, 3748, 28, 17821, 8]"
üß† ML Signal: Definition of a column without constraints,"[8582, 100, 254, 10373, 26484, 25, 30396, 286, 257, 5721, 1231, 17778]",0.5,104,ml_signal,17,Definition of a column without constraints,,97,    # related main tag,"[220, 220, 220, 1303, 3519, 1388, 7621]"
"‚úÖ Best Practice: Class should inherit from object explicitly in Python 2.x for new-style classes, but in Python 3.x it's optional.","[26486, 227, 6705, 19939, 25, 5016, 815, 16955, 422, 2134, 11777, 287, 11361, 362, 13, 87, 329, 649, 12, 7635, 6097, 11, 475, 287, 11361, 513, 13, 87, 340, 338, 11902, 13]",0.5,119,best_practice,15,"Class should inherit from object explicitly in Python 2.x for new-style classes, but in Python 3.x it's optional.",,104,"    industry_name = Column(String, unique=True)","[220, 220, 220, 2831, 62, 3672, 796, 29201, 7, 10100, 11, 3748, 28, 17821, 8]"
üß† ML Signal: Use of __tablename__ indicates interaction with a database ORM.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 9217, 10375, 351, 257, 6831, 6375, 44, 13]",0.5,126,ml_signal,17,Use of __tablename__ indicates interaction with a database ORM.,,119,    # related main tag,"[220, 220, 220, 1303, 3519, 1388, 7621]"
üß† ML Signal: Column definition with unique constraint indicates a need for unique values in the database.,"[8582, 100, 254, 10373, 26484, 25, 29201, 6770, 351, 3748, 32315, 9217, 257, 761, 329, 3748, 3815, 287, 262, 6831, 13]",0.5,126,ml_signal,19,Column definition with unique constraint indicates a need for unique values in the database.,,126,,[]
üß† ML Signal: Column definition indicates a mapping to a database field.,"[8582, 100, 254, 10373, 26484, 25, 29201, 6770, 9217, 257, 16855, 284, 257, 6831, 2214, 13]",0.5,138,ml_signal,21,Column definition indicates a mapping to a database field.,,126,"class MainTagInfo(StockTagsBase, Mixin):","[4871, 8774, 24835, 12360, 7, 26207, 36142, 14881, 11, 15561, 259, 2599]"
üß† ML Signal: Column definition indicates a mapping to a database field.,"[8582, 100, 254, 10373, 26484, 25, 29201, 6770, 9217, 257, 16855, 284, 257, 6831, 2214, 13]",0.5,138,ml_signal,23,Column definition indicates a mapping to a database field.,,138,,[]
‚úÖ Best Practice: Class names should follow the CapWords convention for readability,"[26486, 227, 6705, 19939, 25, 5016, 3891, 815, 1061, 262, 4476, 37117, 9831, 329, 1100, 1799]",0.5,138,best_practice,20,Class names should follow the CapWords convention for readability,,138,,[]
‚úÖ Best Practice: Use of __tablename__ is a common pattern in SQLAlchemy for table naming,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 318, 257, 2219, 3912, 287, 16363, 2348, 26599, 329, 3084, 19264]",1.0,154,best_practice,22,Use of __tablename__ is a common pattern in SQLAlchemy for table naming,,138,"    __tablename__ = ""main_tag_info""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 12417, 62, 12985, 62, 10951, 1]"
üß† ML Signal: Use of unique constraint on a column indicates a need for distinct values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3748, 32315, 319, 257, 5721, 9217, 257, 761, 329, 7310, 3815]",0.5,167,ml_signal,24,Use of unique constraint on a column indicates a need for distinct values,,154,"    tag = Column(String, unique=True)","[220, 220, 220, 7621, 796, 29201, 7, 10100, 11, 3748, 28, 17821, 8]"
‚úÖ Best Practice: Specify a maximum length for string columns to prevent excessive data storage.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 257, 5415, 4129, 329, 4731, 15180, 284, 2948, 13181, 1366, 6143, 13]",0.5,183,best_practice,29,Specify a maximum length for string columns to prevent excessive data storage.,,167,"    __tablename__ = ""sub_tag_info""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 7266, 62, 12985, 62, 10951, 1]"
‚úÖ Best Practice: Specify a maximum length for string columns to prevent excessive data storage.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 257, 5415, 4129, 329, 4731, 15180, 284, 2948, 13181, 1366, 6143, 13]",0.5,196,best_practice,31,Specify a maximum length for string columns to prevent excessive data storage.,,183,"    tag = Column(String, unique=True)","[220, 220, 220, 7621, 796, 29201, 7, 10100, 11, 3748, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12642, 4375, 17778, 393, 21201, 284, 4155, 1366, 11540, 329, 4731, 7032, 13]",0.5,196,sast_risk,33,Consider adding constraints or validation to ensure data integrity for string fields.,Low,196,,[]
‚ö†Ô∏è SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12642, 4375, 17778, 393, 21201, 284, 4155, 1366, 11540, 329, 4731, 7032, 13]",0.5,207,sast_risk,35,Consider adding constraints or validation to ensure data integrity for string fields.,Low,196,    main_tag = Column(String),"[220, 220, 220, 1388, 62, 12985, 796, 29201, 7, 10100, 8]"
‚ö†Ô∏è SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 19449, 7032, 460, 3650, 14977, 1366, 26, 4155, 1774, 21201, 290, 5336, 270, 1634, 13]",0.5,207,sast_risk,37,JSON fields can store arbitrary data; ensure proper validation and sanitization.,Low,207,,[]
‚ö†Ô∏è SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12642, 4375, 17778, 393, 21201, 284, 4155, 1366, 11540, 329, 4731, 7032, 13]",0.5,223,sast_risk,39,Consider adding constraints or validation to ensure data integrity for string fields.,Low,207,"    __tablename__ = ""hidden_tag_info""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 30342, 62, 12985, 62, 10951, 1]"
‚ö†Ô∏è SAST Risk (Low): Consider adding constraints or validation to ensure data integrity for string fields.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12642, 4375, 17778, 393, 21201, 284, 4155, 1366, 11540, 329, 4731, 7032, 13]",0.5,236,sast_risk,41,Consider adding constraints or validation to ensure data integrity for string fields.,Low,223,"    tag = Column(String, unique=True)","[220, 220, 220, 7621, 796, 29201, 7, 10100, 11, 3748, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 19449, 7032, 460, 3650, 14977, 1366, 26, 4155, 1774, 21201, 290, 5336, 270, 1634, 13]",0.5,236,sast_risk,43,JSON fields can store arbitrary data; ensure proper validation and sanitization.,Low,236,,[]
‚ö†Ô∏è SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 19449, 7032, 460, 3650, 14977, 1366, 26, 4155, 1774, 21201, 290, 5336, 270, 1634, 13]",0.5,247,sast_risk,45,JSON fields can store arbitrary data; ensure proper validation and sanitization.,Low,236,"class StockTags(StockTagsBase, Mixin):","[4871, 10500, 36142, 7, 26207, 36142, 14881, 11, 15561, 259, 2599]"
‚ö†Ô∏è SAST Risk (Low): JSON fields can store arbitrary data; ensure proper validation and sanitization.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 19449, 7032, 460, 3650, 14977, 1366, 26, 4155, 1774, 21201, 290, 5336, 270, 1634, 13]",0.5,256,sast_risk,47,JSON fields can store arbitrary data; ensure proper validation and sanitization.,Low,247,    Schema for storing stock tags,"[220, 220, 220, 10011, 2611, 329, 23069, 4283, 15940]"
"üß† ML Signal: Boolean fields can indicate binary states, useful for classification models.","[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 460, 7603, 13934, 2585, 11, 4465, 329, 17923, 4981, 13]",0.5,256,ml_signal,49,"Boolean fields can indicate binary states, useful for classification models.",,256,,[]
‚úÖ Best Practice: Use of __tablename__ to explicitly define the table name in SQLAlchemy,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 284, 11777, 8160, 262, 3084, 1438, 287, 16363, 2348, 26599]",0.5,269,best_practice,41,Use of __tablename__ to explicitly define the table name in SQLAlchemy,,256,"    tag = Column(String, unique=True)","[220, 220, 220, 7621, 796, 29201, 7, 10100, 11, 3748, 28, 17821, 8]"
üß† ML Signal: Use of a fixed-length string for 'code' suggests a standardized identifier,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 5969, 12, 13664, 4731, 329, 705, 8189, 6, 5644, 257, 25713, 27421]",0.5,269,ml_signal,43,Use of a fixed-length string for 'code' suggests a standardized identifier,,269,,[]
üß† ML Signal: Use of a longer string for 'name' suggests it holds descriptive text,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2392, 4731, 329, 705, 3672, 6, 5644, 340, 6622, 35644, 2420]",0.5,280,ml_signal,45,Use of a longer string for 'name' suggests it holds descriptive text,,269,"class StockTags(StockTagsBase, Mixin):","[4871, 10500, 36142, 7, 26207, 36142, 14881, 11, 15561, 259, 2599]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,289,ml_signal,47,Boolean fields indicate binary features that can be used in ML models,,280,    Schema for storing stock tags,"[220, 220, 220, 10011, 2611, 329, 23069, 4283, 15940]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,289,ml_signal,49,Boolean fields indicate binary features that can be used in ML models,,289,,[]
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,289,ml_signal,51,Boolean fields indicate binary features that can be used in ML models,,289,,[]
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,302,ml_signal,53,Boolean fields indicate binary features that can be used in ML models,,289,    name = Column(String(length=128)),"[220, 220, 220, 1438, 796, 29201, 7, 10100, 7, 13664, 28, 12762, 4008]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,313,ml_signal,55,Boolean fields indicate binary features that can be used in ML models,,302,    main_tag = Column(String),"[220, 220, 220, 1388, 62, 12985, 796, 29201, 7, 10100, 8]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,324,ml_signal,57,Boolean fields indicate binary features that can be used in ML models,,313,    main_tags = Column(JSON),"[220, 220, 220, 1388, 62, 31499, 796, 29201, 7, 40386, 8]"
"üß† ML Signal: Integer field could represent a count or frequency, useful for ML models","[8582, 100, 254, 10373, 26484, 25, 34142, 2214, 714, 2380, 257, 954, 393, 8373, 11, 4465, 329, 10373, 4981]",0.5,335,ml_signal,59,"Integer field could represent a count or frequency, useful for ML models",,324,    sub_tag = Column(String),"[220, 220, 220, 850, 62, 12985, 796, 29201, 7, 10100, 8]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,346,ml_signal,61,Boolean fields indicate binary features that can be used in ML models,,335,    sub_tags = Column(JSON),"[220, 220, 220, 850, 62, 31499, 796, 29201, 7, 40386, 8]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,359,ml_signal,63,Boolean fields indicate binary features that can be used in ML models,,346,    active_hidden_tags = Column(JSON),"[220, 220, 220, 4075, 62, 30342, 62, 31499, 796, 29201, 7, 40386, 8]"
üß† ML Signal: Boolean fields indicate binary features that can be used in ML models,"[8582, 100, 254, 10373, 26484, 25, 41146, 7032, 7603, 13934, 3033, 326, 460, 307, 973, 287, 10373, 4981]",0.5,377,ml_signal,65,Boolean fields indicate binary features that can be used in ML models,,359,"    set_by_user = Column(Boolean, default=False)","[220, 220, 220, 900, 62, 1525, 62, 7220, 796, 29201, 7, 46120, 13087, 11, 4277, 28, 25101, 8]"
"üß† ML Signal: JSON field can store complex data structures, useful for ML feature extraction","[8582, 100, 254, 10373, 26484, 25, 19449, 2214, 460, 3650, 3716, 1366, 8573, 11, 4465, 329, 10373, 3895, 22236]",0.5,377,ml_signal,67,"JSON field can store complex data structures, useful for ML feature extraction",,377,,[]
"‚úÖ Best Practice: Class inherits from multiple base classes, indicating use of mixins for shared functionality","[26486, 227, 6705, 19939, 25, 5016, 10639, 896, 422, 3294, 2779, 6097, 11, 12739, 779, 286, 5022, 1040, 329, 4888, 11244]",0.5,388,best_practice,55,"Class inherits from multiple base classes, indicating use of mixins for shared functionality",,377,    main_tag = Column(String),"[220, 220, 220, 1388, 62, 12985, 796, 29201, 7, 10100, 8]"
"üß† ML Signal: Use of __tablename__ suggests ORM pattern, common in database interaction","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 5644, 6375, 44, 3912, 11, 2219, 287, 6831, 10375]",0.5,399,ml_signal,57,"Use of __tablename__ suggests ORM pattern, common in database interaction",,388,    main_tags = Column(JSON),"[220, 220, 220, 1388, 62, 31499, 796, 29201, 7, 40386, 8]"
üß† ML Signal: Column definitions indicate ORM usage for database schema mapping,"[8582, 100, 254, 10373, 26484, 25, 29201, 17336, 7603, 6375, 44, 8748, 329, 6831, 32815, 16855]",0.5,410,ml_signal,59,Column definitions indicate ORM usage for database schema mapping,,399,    sub_tag = Column(String),"[220, 220, 220, 850, 62, 12985, 796, 29201, 7, 10100, 8]"
üß† ML Signal: Unique constraint on stock_pool_name suggests importance of this field for identification,"[8582, 100, 254, 10373, 26484, 25, 30015, 32315, 319, 4283, 62, 7742, 62, 3672, 5644, 6817, 286, 428, 2214, 329, 11795]",0.5,421,ml_signal,61,Unique constraint on stock_pool_name suggests importance of this field for identification,,410,    sub_tags = Column(JSON),"[220, 220, 220, 850, 62, 31499, 796, 29201, 7, 40386, 8]"
"‚úÖ Best Practice: Class inherits from multiple base classes, ensure MRO is correct","[26486, 227, 6705, 19939, 25, 5016, 10639, 896, 422, 3294, 2779, 6097, 11, 4155, 337, 13252, 318, 3376]",0.5,432,best_practice,59,"Class inherits from multiple base classes, ensure MRO is correct",,421,    sub_tag = Column(String),"[220, 220, 220, 850, 62, 12985, 796, 29201, 7, 10100, 8]"
üß† ML Signal: Custom table name for ORM mapping,"[8582, 100, 254, 10373, 26484, 25, 8562, 3084, 1438, 329, 6375, 44, 16855]",0.5,443,ml_signal,61,Custom table name for ORM mapping,,432,    sub_tags = Column(JSON),"[220, 220, 220, 850, 62, 31499, 796, 29201, 7, 40386, 8]"
"üß† ML Signal: Column definition for ORM, indicates schema design","[8582, 100, 254, 10373, 26484, 25, 29201, 6770, 329, 6375, 44, 11, 9217, 32815, 1486]",1.0,456,ml_signal,63,"Column definition for ORM, indicates schema design",,443,    active_hidden_tags = Column(JSON),"[220, 220, 220, 4075, 62, 30342, 62, 31499, 796, 29201, 7, 40386, 8]"
"üß† ML Signal: Use of JSON type for a column, indicates flexible data storage","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19449, 2099, 329, 257, 5721, 11, 9217, 12846, 1366, 6143]",0.5,474,ml_signal,65,"Use of JSON type for a column, indicates flexible data storage",,456,"    set_by_user = Column(Boolean, default=False)","[220, 220, 220, 900, 62, 1525, 62, 7220, 796, 29201, 7, 46120, 13087, 11, 4277, 28, 25101, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,492,ml_signal,65,Use of SQLAlchemy ORM for database schema definition,,474,"    set_by_user = Column(Boolean, default=False)","[220, 220, 220, 900, 62, 1525, 62, 7220, 796, 29201, 7, 46120, 13087, 11, 4277, 28, 25101, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,492,ml_signal,67,Use of SQLAlchemy ORM for database schema definition,,492,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,508,ml_signal,69,Use of SQLAlchemy ORM for database schema definition,,492,"    __tablename__ = ""stock_system_tags""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 13578, 62, 10057, 62, 31499, 1]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,521,ml_signal,71,Use of SQLAlchemy ORM for database schema definition,,508,    code = Column(String(length=64)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2414, 4008]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,534,ml_signal,73,Use of SQLAlchemy ORM for database schema definition,,521,    name = Column(String(length=128)),"[220, 220, 220, 1438, 796, 29201, 7, 10100, 7, 13664, 28, 12762, 4008]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,545,ml_signal,74,Use of SQLAlchemy ORM for database schema definition,,534,    #: ÂáèÊåÅ,"[220, 220, 220, 1303, 25, 10263, 229, 237, 162, 234, 223]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,556,ml_signal,74,Use of SQLAlchemy ORM for database schema definition,,545,    #: ÂáèÊåÅ,"[220, 220, 220, 1303, 25, 10263, 229, 237, 162, 234, 223]"
üß† ML Signal: Use of SQLAlchemy ORM for database schema definition,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 32815, 6770]",1.0,567,ml_signal,74,Use of SQLAlchemy ORM for database schema definition,,556,    #: ÂáèÊåÅ,"[220, 220, 220, 1303, 25, 10263, 229, 237, 162, 234, 223]"
üß† ML Signal: Registering schema with specific providers and database name,"[8582, 100, 254, 10373, 26484, 25, 17296, 278, 32815, 351, 2176, 9549, 290, 6831, 1438]",0.5,578,ml_signal,74,Registering schema with specific providers and database name,,567,    #: ÂáèÊåÅ,"[220, 220, 220, 1303, 25, 10263, 229, 237, 162, 234, 223]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,589,best_practice,74,Use of __all__ to define public API of the module,,578,    #: ÂáèÊåÅ,"[220, 220, 220, 1303, 25, 10263, 229, 237, 162, 234, 223]"

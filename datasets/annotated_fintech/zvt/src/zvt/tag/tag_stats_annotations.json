[
  {
    "line": 5,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Group related imports together for better readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      3519,
      17944,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group related imports together for better readability."
  },
  {
    "line": 17,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\ud83e\udde0 ML Signal: Usage of logging for tracking and debugging.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 6,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      18931,
      329,
      9646,
      290,
      28769,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of logging for tracking and debugging."
  },
  {
    "line": 18,
    "text": "from zvt.utils.time_utils import to_pd_timestamp, date_time_by_interval, current_date",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a predefined list of stock pool names",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      11,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      11,
      1459,
      62,
      4475
    ],
    "start_token": 24,
    "end_token": 53,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2747,
      18156,
      1351,
      286,
      4283,
      5933,
      3891
    ],
    "label": "ml_signal",
    "reason": "Iterating over a predefined list of stock pool names"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if StockPools.query_data is not properly sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 53,
    "end_token": 53,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      10500,
      47,
      10141,
      13,
      22766,
      62,
      7890,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if StockPools.query_data is not properly sanitized"
  },
  {
    "line": 29,
    "text": "            return_type=\"domain\",",
    "annotation": "\u2705 Best Practice: Using a helper function to handle date-time conversion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 53,
    "end_token": 70,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      31904,
      2163,
      284,
      5412,
      3128,
      12,
      2435,
      11315
    ],
    "label": "best_practice",
    "reason": "Using a helper function to handle date-time conversion"
  },
  {
    "line": 31,
    "text": "        start = None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if TopStocks.query_data is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      796,
      6045
    ],
    "start_token": 70,
    "end_token": 80,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      5849,
      1273,
      3320,
      13,
      22766,
      62,
      7890,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if TopStocks.query_data is not properly sanitized"
  },
  {
    "line": 33,
    "text": "            start = date_time_by_interval(datas[0].timestamp)",
    "annotation": "\u2705 Best Practice: Checking for null data before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7,
      19608,
      292,
      58,
      15,
      4083,
      16514,
      27823,
      8
    ],
    "start_token": 80,
    "end_token": 110,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      9242,
      1366,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Checking for null data before proceeding"
  },
  {
    "line": 35,
    "text": "        df = TopStocks.query_data(start_timestamp=start, columns=[TopStocks.timestamp], order=TopStocks.timestamp.asc())",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about missing data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      5849,
      1273,
      3320,
      13,
      22766,
      62,
      7890,
      7,
      9688,
      62,
      16514,
      27823,
      28,
      9688,
      11,
      15180,
      41888,
      9126,
      1273,
      3320,
      13,
      16514,
      27823,
      4357,
      1502,
      28,
      9126,
      1273,
      3320,
      13,
      16514,
      27823,
      13,
      3372,
      28955
    ],
    "start_token": 110,
    "end_token": 154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      4814,
      1366
    ],
    "label": "ml_signal",
    "reason": "Logging information about missing data"
  },
  {
    "line": 38,
    "text": "            continue",
    "annotation": "\u2705 Best Practice: Converting DataFrame column to list for iteration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2555
    ],
    "start_token": 154,
    "end_token": 166,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351,
      329,
      24415
    ],
    "label": "best_practice",
    "reason": "Converting DataFrame column to list for iteration"
  },
  {
    "line": 41,
    "text": "            logger.info(f\"build_system_stock_pools {stock_pool_name} to {target_date}\")",
    "annotation": "\ud83e\udde0 ML Signal: Logging the process of building stock pools",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      11249,
      62,
      10057,
      62,
      13578,
      62,
      7742,
      82,
      1391,
      13578,
      62,
      7742,
      62,
      3672,
      92,
      284,
      1391,
      16793,
      62,
      4475,
      92,
      4943
    ],
    "start_token": 166,
    "end_token": 205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      1429,
      286,
      2615,
      4283,
      20354
    ],
    "label": "ml_signal",
    "reason": "Logging the process of building stock pools"
  },
  {
    "line": 44,
    "text": "                long_stocks = get_top_stocks(target_date=target_date, return_type=\"long\")",
    "annotation": "\ud83e\udde0 ML Signal: Different stock selection strategies based on pool name",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      29522,
      796,
      651,
      62,
      4852,
      62,
      29522,
      7,
      16793,
      62,
      4475,
      28,
      16793,
      62,
      4475,
      11,
      1441,
      62,
      4906,
      2625,
      6511,
      4943
    ],
    "start_token": 205,
    "end_token": 244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      4283,
      6356,
      10064,
      1912,
      319,
      5933,
      1438
    ],
    "label": "ml_signal",
    "reason": "Different stock selection strategies based on pool name"
  },
  {
    "line": 47,
    "text": "                small_stocks = get_top_stocks(target_date=target_date, return_type=\"small_vol_up\")",
    "annotation": "\u2705 Best Practice: Using set to remove duplicates",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1402,
      62,
      29522,
      796,
      651,
      62,
      4852,
      62,
      29522,
      7,
      16793,
      62,
      4475,
      28,
      16793,
      62,
      4475,
      11,
      1441,
      62,
      4906,
      2625,
      17470,
      62,
      10396,
      62,
      929,
      4943
    ],
    "start_token": 244,
    "end_token": 287,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      284,
      4781,
      14184,
      16856
    ],
    "label": "best_practice",
    "reason": "Using set to remove duplicates"
  },
  {
    "line": 56,
    "text": "                provider=\"em\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be risky if assertions are disabled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      368,
      1600
    ],
    "start_token": 287,
    "end_token": 306,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17564,
      611,
      29965,
      389,
      10058
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be risky if assertions are disabled"
  },
  {
    "line": 57,
    "text": "                filters=[",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if Stock1dHfqKdata.query_data is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888
    ],
    "start_token": 306,
    "end_token": 323,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      10500,
      16,
      67,
      39,
      69,
      80,
      42,
      7890,
      13,
      22766,
      62,
      7890,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if Stock1dHfqKdata.query_data is not properly sanitized"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u2705 Best Practice: Converting DataFrame column to list for further processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 323,
    "end_token": 323,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351,
      329,
      2252,
      7587
    ],
    "label": "best_practice",
    "reason": "Converting DataFrame column to list for further processing"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for better code readability and maintenance",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 323,
    "end_token": 323,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      9262
    ],
    "label": "best_practice",
    "reason": "Type hinting for better code readability and maintenance"
  },
  {
    "line": 74,
    "text": "    datas = TagStats.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Building stock pool with a specific model and target date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19395,
      796,
      17467,
      29668,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 323,
    "end_token": 335,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11819,
      4283,
      5933,
      351,
      257,
      2176,
      2746,
      290,
      2496,
      3128
    ],
    "label": "ml_signal",
    "reason": "Building stock pool with a specific model and target date"
  },
  {
    "line": 64,
    "text": "            entity_ids = kdata_df[\"entity_id\"].tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with parameters indicating usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      479,
      7890,
      62,
      7568,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 335,
    "end_token": 364,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      10007,
      12739,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function signature with parameters indicating usage patterns"
  },
  {
    "line": 75,
    "text": "        limit=1,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL Injection if inputs are not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      28,
      16,
      11
    ],
    "start_token": 364,
    "end_token": 375,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      554,
      29192,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL Injection if inputs are not sanitized"
  },
  {
    "line": 81,
    "text": "    current_df = None",
    "annotation": "\u2705 Best Practice: Recursive call with modified parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1459,
      62,
      7568,
      796,
      6045
    ],
    "start_token": 375,
    "end_token": 383,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3311,
      30753,
      869,
      351,
      9518,
      10007
    ],
    "label": "best_practice",
    "reason": "Recursive call with modified parameters"
  },
  {
    "line": 142,
    "text": "            sorted_df.set_index(\"main_tag\", inplace=True, drop=False)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data integrity risk if df_to_db fails",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23243,
      62,
      7568,
      13,
      2617,
      62,
      9630,
      7203,
      12417,
      62,
      12985,
      1600,
      287,
      5372,
      28,
      17821,
      11,
      4268,
      28,
      25101,
      8
    ],
    "start_token": 383,
    "end_token": 415,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      11540,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      10143
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data integrity risk if df_to_db fails"
  },
  {
    "line": 158,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Type hinting for create_stock_pools_model improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 415,
    "end_token": 423,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2251,
      62,
      13578,
      62,
      7742,
      82,
      62,
      19849,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for create_stock_pools_model improves code readability and maintainability"
  },
  {
    "line": 162,
    "text": "            data_schema=TagStats,",
    "annotation": "\ud83e\udde0 ML Signal: Function call to build_stock_pool with parameters could indicate usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      24835,
      29668,
      11
    ],
    "start_token": 423,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      1382,
      62,
      13578,
      62,
      7742,
      351,
      10007,
      714,
      7603,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function call to build_stock_pool with parameters could indicate usage patterns"
  },
  {
    "line": 162,
    "text": "            data_schema=TagStats,",
    "annotation": "\ud83e\udde0 ML Signal: Function call to build_stock_pool_tag_stats with parameters could indicate usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      24835,
      29668,
      11
    ],
    "start_token": 442,
    "end_token": 461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      1382,
      62,
      13578,
      62,
      7742,
      62,
      12985,
      62,
      34242,
      351,
      10007,
      714,
      7603,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function call to build_stock_pool_tag_stats with parameters could indicate usage patterns"
  },
  {
    "line": 171,
    "text": "    entity_ids,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct execution of code in the global scope can lead to unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      11
    ],
    "start_token": 461,
    "end_token": 468,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      9706,
      286,
      2438,
      287,
      262,
      3298,
      8354,
      460,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct execution of code in the global scope can lead to unintended side effects"
  },
  {
    "line": 171,
    "text": "    entity_ids,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Missing required parameter 'entity_ids' in function call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      11
    ],
    "start_token": 468,
    "end_token": 475,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25639,
      2672,
      11507,
      705,
      26858,
      62,
      2340,
      6,
      287,
      2163,
      869
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Missing required parameter 'entity_ids' in function call"
  },
  {
    "line": 171,
    "text": "    entity_ids,",
    "annotation": "\u2705 Best Practice: Defining __all__ helps to control the module's public API",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      11
    ],
    "start_token": 475,
    "end_token": 482,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      5419,
      284,
      1630,
      262,
      8265,
      338,
      1171,
      7824
    ],
    "label": "best_practice",
    "reason": "Defining __all__ helps to control the module's public API"
  }
]
[
  {
    "line": 5,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns and dependencies"
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions or classes from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions or classes from a module indicates usage patterns"
  },
  {
    "line": 9,
    "text": "from zvt.contract.api import df_to_db",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      15042,
      1330,
      47764,
      62,
      1462,
      62,
      9945
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates usage patterns"
  },
  {
    "line": 11,
    "text": "from zvt.tag.common import StockPoolType",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      12985,
      13,
      11321,
      1330,
      10500,
      27201,
      6030
    ],
    "start_token": 13,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates usage patterns"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates usage patterns"
  },
  {
    "line": 10,
    "text": "from zvt.domain import Block",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential file path traversal if zvt_env[\"resource_path\"] is user-controlled",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      9726
    ],
    "start_token": 24,
    "end_token": 31,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2393,
      3108,
      33038,
      282,
      611,
      1976,
      36540,
      62,
      24330,
      14692,
      31092,
      62,
      6978,
      8973,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential file path traversal if zvt_env[\"resource_path\"] is user-controlled"
  },
  {
    "line": 11,
    "text": "from zvt.tag.common import StockPoolType",
    "annotation": "\u2705 Best Practice: Use a context manager to ensure the file is properly closed after reading",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      12985,
      13,
      11321,
      1330,
      10500,
      27201,
      6030
    ],
    "start_token": 31,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4732,
      4706,
      284,
      4155,
      262,
      2393,
      318,
      6105,
      4838,
      706,
      3555
    ],
    "label": "best_practice",
    "reason": "Use a context manager to ensure the file is properly closed after reading"
  },
  {
    "line": 12,
    "text": "from zvt.tag.tag_schemas import MainTagInfo, SubTagInfo, HiddenTagInfo, StockPoolInfo, IndustryInfo",
    "annotation": "\ud83e\udde0 ML Signal: Usage of os.path.join for constructing file paths",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      12985,
      13,
      12985,
      62,
      1416,
      4411,
      292,
      1330,
      8774,
      24835,
      12360,
      11,
      3834,
      24835,
      12360,
      11,
      20458,
      24835,
      12360,
      11,
      10500,
      27201,
      12360,
      11,
      17420,
      12360
    ],
    "start_token": 42,
    "end_token": 72,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      28686,
      13,
      6978,
      13,
      22179,
      329,
      30580,
      2393,
      13532
    ],
    "label": "ml_signal",
    "reason": "Usage of os.path.join for constructing file paths"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Reading JSON data from a file",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 72,
    "end_token": 72,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      19449,
      1366,
      422,
      257,
      2393
    ],
    "label": "ml_signal",
    "reason": "Reading JSON data from a file"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hints for function return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 72,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function return type improves code readability and maintainability."
  },
  {
    "line": 15,
    "text": "def _get_default_industry_main_tag_mapping() -> Dict[str, str]:",
    "annotation": "\ud83e\udde0 ML Signal: Calls a function to get a mapping, indicating a pattern of data transformation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      12286,
      62,
      23213,
      563,
      62,
      12417,
      62,
      12985,
      62,
      76,
      5912,
      3419,
      4613,
      360,
      713,
      58,
      2536,
      11,
      965,
      5974
    ],
    "start_token": 72,
    "end_token": 96,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27592,
      257,
      2163,
      284,
      651,
      257,
      16855,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Calls a function to get a mapping, indicating a pattern of data transformation."
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items, a common pattern for data processing.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 96,
    "end_token": 96,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      11,
      257,
      2219,
      3912,
      329,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items, a common pattern for data processing."
  },
  {
    "line": 20,
    "text": "def _get_default_main_tag_industry_mapping() -> Dict[str, List[str]]:",
    "annotation": "\u2705 Best Practice: Use of setdefault to initialize a list if the key is not present.",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      12286,
      62,
      12417,
      62,
      12985,
      62,
      23213,
      563,
      62,
      76,
      5912,
      3419,
      4613,
      360,
      713,
      58,
      2536,
      11,
      7343,
      58,
      2536,
      60,
      5974
    ],
    "start_token": 96,
    "end_token": 123,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      12286,
      284,
      41216,
      257,
      1351,
      611,
      262,
      1994,
      318,
      407,
      1944,
      13
    ],
    "label": "best_practice",
    "reason": "Use of setdefault to initialize a list if the key is not present."
  },
  {
    "line": 22,
    "text": "    result = {}",
    "annotation": "\u2705 Best Practice: Use of get method to safely access dictionary values.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      23884
    ],
    "start_token": 123,
    "end_token": 129,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      651,
      2446,
      284,
      11512,
      1895,
      22155,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Use of get method to safely access dictionary values."
  },
  {
    "line": 20,
    "text": "def _get_default_main_tag_industry_mapping() -> Dict[str, List[str]]:",
    "annotation": "\u2705 Best Practice: Use of type hinting for function return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      12286,
      62,
      12417,
      62,
      12985,
      62,
      23213,
      563,
      62,
      76,
      5912,
      3419,
      4613,
      360,
      713,
      58,
      2536,
      11,
      7343,
      58,
      2536,
      60,
      5974
    ],
    "start_token": 129,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function return type improves code readability and maintainability"
  },
  {
    "line": 22,
    "text": "    result = {}",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential file path traversal vulnerability if zvt_env[\"resource_path\"] is user-controlled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      23884
    ],
    "start_token": 156,
    "end_token": 162,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2393,
      3108,
      33038,
      282,
      15131,
      611,
      1976,
      36540,
      62,
      24330,
      14692,
      31092,
      62,
      6978,
      8973,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential file path traversal vulnerability if zvt_env[\"resource_path\"] is user-controlled"
  },
  {
    "line": 23,
    "text": "    for industry, main_tag in mapping.items():",
    "annotation": "\u2705 Best Practice: Use of context manager for file handling ensures proper resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      2831,
      11,
      1388,
      62,
      12985,
      287,
      16855,
      13,
      23814,
      33529
    ],
    "start_token": 162,
    "end_token": 176,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4732,
      4706,
      329,
      2393,
      9041,
      19047,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use of context manager for file handling ensures proper resource management"
  },
  {
    "line": 25,
    "text": "        result.get(main_tag).append(industry)",
    "annotation": "\ud83e\udde0 ML Signal: Use of json.load to parse JSON data from a file",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      13,
      1136,
      7,
      12417,
      62,
      12985,
      737,
      33295,
      7,
      23213,
      563,
      8
    ],
    "start_token": 176,
    "end_token": 196,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      33918,
      13,
      2220,
      284,
      21136,
      19449,
      1366,
      422,
      257,
      2393
    ],
    "label": "ml_signal",
    "reason": "Use of json.load to parse JSON data from a file"
  },
  {
    "line": 23,
    "text": "    for industry, main_tag in mapping.items():",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      2831,
      11,
      1388,
      62,
      12985,
      287,
      16855,
      13,
      23814,
      33529
    ],
    "start_token": 196,
    "end_token": 210,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 25,
    "text": "        result.get(main_tag).append(industry)",
    "annotation": "\ud83e\udde0 ML Signal: Function calls can indicate common utility functions or patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      13,
      1136,
      7,
      12417,
      62,
      12985,
      737,
      33295,
      7,
      23213,
      563,
      8
    ],
    "start_token": 210,
    "end_token": 230,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3848,
      460,
      7603,
      2219,
      10361,
      5499,
      393,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function calls can indicate common utility functions or patterns"
  },
  {
    "line": 29,
    "text": "def _get_default_concept_main_tag_mapping() -> Dict[str, str]:",
    "annotation": "\u2705 Best Practice: Use setdefault to simplify dictionary initialization",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      12286,
      62,
      43169,
      62,
      12417,
      62,
      12985,
      62,
      76,
      5912,
      3419,
      4613,
      360,
      713,
      58,
      2536,
      11,
      965,
      5974
    ],
    "start_token": 230,
    "end_token": 253,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      12286,
      284,
      30276,
      22155,
      37588
    ],
    "label": "best_practice",
    "reason": "Use setdefault to simplify dictionary initialization"
  },
  {
    "line": 31,
    "text": "        return json.load(f)",
    "annotation": "\u2705 Best Practice: Use get method to safely access dictionary values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      33918,
      13,
      2220,
      7,
      69,
      8
    ],
    "start_token": 253,
    "end_token": 267,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      651,
      2446,
      284,
      11512,
      1895,
      22155,
      3815
    ],
    "label": "best_practice",
    "reason": "Use get method to safely access dictionary values"
  },
  {
    "line": 30,
    "text": "    with open(os.path.join(zvt_env[\"resource_path\"], \"concept_main_tag_mapping.json\"), encoding=\"utf-8\") as f:",
    "annotation": "\u2705 Best Practice: Use of type hinting for function return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      351,
      1280,
      7,
      418,
      13,
      6978,
      13,
      22179,
      7,
      89,
      36540,
      62,
      24330,
      14692,
      31092,
      62,
      6978,
      33116,
      366,
      43169,
      62,
      12417,
      62,
      12985,
      62,
      76,
      5912,
      13,
      17752,
      12340,
      21004,
      2625,
      40477,
      12,
      23,
      4943,
      355,
      277,
      25
    ],
    "start_token": 267,
    "end_token": 309,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function return type improves code readability and maintainability."
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Using list() to explicitly convert keys to a list for clarity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 309,
    "end_token": 309,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      3419,
      284,
      11777,
      10385,
      8251,
      284,
      257,
      1351,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Using list() to explicitly convert keys to a list for clarity."
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of query_data method to filter and order data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 309,
    "end_token": 309,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12405,
      62,
      7890,
      2446,
      284,
      8106,
      290,
      1502,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of query_data method to filter and order data"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 309,
    "end_token": 309,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of SQL injection if filters are not properly sanitized"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive function name for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 309,
    "end_token": 309,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2163,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive function name for clarity"
  },
  {
    "line": 36,
    "text": "    result = {}",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on category",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      23884
    ],
    "start_token": 309,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      6536
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on category"
  },
  {
    "line": 37,
    "text": "    for concept, main_tag in mapping.items():",
    "annotation": "\ud83e\udde0 ML Signal: Selecting specific columns from the data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      3721,
      11,
      1388,
      62,
      12985,
      287,
      16855,
      13,
      23814,
      33529
    ],
    "start_token": 315,
    "end_token": 329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      278,
      2176,
      15180,
      422,
      262,
      1366
    ],
    "label": "ml_signal",
    "reason": "Selecting specific columns from the data"
  },
  {
    "line": 38,
    "text": "        result.setdefault(main_tag, [])",
    "annotation": "\ud83e\udde0 ML Signal: Returning data in a specific format (dataframe)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      13,
      2617,
      12286,
      7,
      12417,
      62,
      12985,
      11,
      685,
      12962
    ],
    "start_token": 329,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1366,
      287,
      257,
      2176,
      5794,
      357,
      7890,
      14535,
      8
    ],
    "label": "ml_signal",
    "reason": "Returning data in a specific format (dataframe)"
  },
  {
    "line": 38,
    "text": "        result.setdefault(main_tag, [])",
    "annotation": "\u2705 Best Practice: Use of method chaining for concise code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      13,
      2617,
      12286,
      7,
      12417,
      62,
      12985,
      11,
      685,
      12962
    ],
    "start_token": 347,
    "end_token": 365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of method chaining for concise code"
  },
  {
    "line": 41,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of filters to query specific data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 365,
    "end_token": 365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16628,
      284,
      12405,
      2176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of filters to query specific data"
  },
  {
    "line": 43,
    "text": "def _get_initial_sub_tags() -> List[str]:",
    "annotation": "\ud83e\udde0 ML Signal: Specifying columns to retrieve",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      36733,
      62,
      7266,
      62,
      31499,
      3419,
      4613,
      7343,
      58,
      2536,
      5974
    ],
    "start_token": 365,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      15180,
      284,
      19818
    ],
    "label": "ml_signal",
    "reason": "Specifying columns to retrieve"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Specifying return type for the query",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 380,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      1441,
      2099,
      329,
      262,
      12405
    ],
    "label": "ml_signal",
    "reason": "Specifying return type for the query"
  },
  {
    "line": 47,
    "text": "def _get_industry_list():",
    "annotation": "\ud83e\udde0 ML Signal: Ordering data by timestamp in descending order",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      23213,
      563,
      62,
      4868,
      33529
    ],
    "start_token": 380,
    "end_token": 389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8284,
      278,
      1366,
      416,
      41033,
      287,
      31491,
      1502
    ],
    "label": "ml_signal",
    "reason": "Ordering data by timestamp in descending order"
  },
  {
    "line": 50,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Converting dataframe column to list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 389,
    "end_token": 393,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1366,
      14535,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Converting dataframe column to list"
  },
  {
    "line": 37,
    "text": "    for concept, main_tag in mapping.items():",
    "annotation": "\ud83e\udde0 ML Signal: Use of a private function naming convention with an underscore",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      3721,
      11,
      1388,
      62,
      12985,
      287,
      16855,
      13,
      23814,
      33529
    ],
    "start_token": 393,
    "end_token": 407,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2839,
      2163,
      19264,
      9831,
      351,
      281,
      44810
    ],
    "label": "ml_signal",
    "reason": "Use of a private function naming convention with an underscore"
  },
  {
    "line": 38,
    "text": "        result.setdefault(main_tag, [])",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters and ordering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      13,
      2617,
      12286,
      7,
      12417,
      62,
      12985,
      11,
      685,
      12962
    ],
    "start_token": 407,
    "end_token": 425,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      290,
      16216
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters and ordering"
  },
  {
    "line": 41,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 425,
    "end_token": 425,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if filters are not properly sanitized"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on a specific category",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 425,
    "end_token": 425,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      257,
      2176,
      6536
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on a specific category"
  },
  {
    "line": 43,
    "text": "def _get_initial_sub_tags() -> List[str]:",
    "annotation": "\ud83e\udde0 ML Signal: Selecting specific columns from the data",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      36733,
      62,
      7266,
      62,
      31499,
      3419,
      4613,
      7343,
      58,
      2536,
      5974
    ],
    "start_token": 425,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      278,
      2176,
      15180,
      422,
      262,
      1366
    ],
    "label": "ml_signal",
    "reason": "Selecting specific columns from the data"
  },
  {
    "line": 44,
    "text": "    return list(_get_default_concept_main_tag_mapping().keys())",
    "annotation": "\ud83e\udde0 ML Signal: Specifying the return type of the query",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1351,
      28264,
      1136,
      62,
      12286,
      62,
      43169,
      62,
      12417,
      62,
      12985,
      62,
      76,
      5912,
      22446,
      13083,
      28955
    ],
    "start_token": 440,
    "end_token": 461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      262,
      1441,
      2099,
      286,
      262,
      12405
    ],
    "label": "ml_signal",
    "reason": "Specifying the return type of the query"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Ordering data by a timestamp in descending order",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 461,
    "end_token": 461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8284,
      278,
      1366,
      416,
      257,
      41033,
      287,
      31491,
      1502
    ],
    "label": "ml_signal",
    "reason": "Ordering data by a timestamp in descending order"
  },
  {
    "line": 48,
    "text": "    df = Block.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Converting a DataFrame column to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      9726,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 461,
    "end_token": 472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      6060,
      19778,
      5721,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Converting a DataFrame column to a list"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\u2705 Best Practice: Function name is descriptive and indicates its purpose",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 472,
    "end_token": 472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      35644,
      290,
      9217,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Function name is descriptive and indicates its purpose"
  },
  {
    "line": 44,
    "text": "    return list(_get_default_concept_main_tag_mapping().keys())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to retrieve a mapping, indicating a pattern of data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      1351,
      28264,
      1136,
      62,
      12286,
      62,
      43169,
      62,
      12417,
      62,
      12985,
      62,
      76,
      5912,
      22446,
      13083,
      28955
    ],
    "start_token": 472,
    "end_token": 493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      19818,
      257,
      16855,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to retrieve a mapping, indicating a pattern of data retrieval"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion to set for set operations, indicating a pattern of data comparison",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 493,
    "end_token": 493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      284,
      900,
      329,
      900,
      4560,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conversion to set for set operations, indicating a pattern of data comparison"
  },
  {
    "line": 47,
    "text": "def _get_industry_list():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list and set operations to find differences, indicating a pattern of data manipulation",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      23213,
      563,
      62,
      4868,
      33529
    ],
    "start_token": 493,
    "end_token": 502,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      290,
      900,
      4560,
      284,
      1064,
      5400,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of list and set operations to find differences, indicating a pattern of data manipulation"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\u2705 Best Practice: Function name is prefixed with an underscore, indicating it's intended for internal use.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 502,
    "end_token": 502,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      7694,
      2966,
      351,
      281,
      44810,
      11,
      12739,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Function name is prefixed with an underscore, indicating it's intended for internal use."
  },
  {
    "line": 47,
    "text": "def _get_industry_list():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to retrieve a list of keys from a dictionary.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      23213,
      563,
      62,
      4868,
      33529
    ],
    "start_token": 502,
    "end_token": 511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      19818,
      257,
      1351,
      286,
      8251,
      422,
      257,
      22155,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to retrieve a list of keys from a dictionary."
  },
  {
    "line": 49,
    "text": "        filters=[Block.category == \"industry\"], columns=[Block.name], return_type=\"df\", order=Block.timestamp.desc()",
    "annotation": "\ud83e\udde0 ML Signal: Use of set operations to find differences between two lists.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      12235,
      13,
      22872,
      6624,
      366,
      23213,
      563,
      33116,
      15180,
      41888,
      12235,
      13,
      3672,
      4357,
      1441,
      62,
      4906,
      2625,
      7568,
      1600,
      1502,
      28,
      12235,
      13,
      16514,
      27823,
      13,
      20147,
      3419
    ],
    "start_token": 511,
    "end_token": 549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      4560,
      284,
      1064,
      5400,
      1022,
      734,
      8341,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of set operations to find differences between two lists."
  },
  {
    "line": 50,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded entity_id could indicate a default or special user",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 549,
    "end_token": 553,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      9312,
      62,
      312,
      714,
      7603,
      257,
      4277,
      393,
      2041,
      2836
    ],
    "label": "ml_signal",
    "reason": "Hardcoded entity_id could indicate a default or special user"
  },
  {
    "line": 51,
    "text": "    return df[\"name\"].tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for id generation shows dynamic key creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764,
      14692,
      3672,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 553,
    "end_token": 566,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4686,
      5270,
      2523,
      8925,
      1994,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for id generation shows dynamic key creation"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for tag_reason shows dynamic message creation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 566,
    "end_token": 566,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      7621,
      62,
      41181,
      2523,
      8925,
      3275,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for tag_reason shows dynamic message creation"
  },
  {
    "line": 62,
    "text": "def _check_missed_industry():",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over items of a mapping function",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      9122,
      62,
      3927,
      276,
      62,
      23213,
      563,
      33529
    ],
    "start_token": 566,
    "end_token": 576,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3709,
      286,
      257,
      16855,
      2163
    ],
    "label": "ml_signal",
    "reason": "Iterating over items of a mapping function"
  },
  {
    "line": 64,
    "text": "    return list(set(_get_industry_list()) - set(current_industry_list))",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over items of a mapping function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1351,
      7,
      2617,
      28264,
      1136,
      62,
      23213,
      563,
      62,
      4868,
      28955,
      532,
      900,
      7,
      14421,
      62,
      23213,
      563,
      62,
      4868,
      4008
    ],
    "start_token": 576,
    "end_token": 601,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3709,
      286,
      257,
      16855,
      2163
    ],
    "label": "ml_signal",
    "reason": "Iterating over items of a mapping function"
  },
  {
    "line": 64,
    "text": "    return list(set(_get_industry_list()) - set(current_industry_list))",
    "annotation": "\u2705 Best Practice: Checking for existence in a dictionary before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1351,
      7,
      2617,
      28264,
      1136,
      62,
      23213,
      563,
      62,
      4868,
      28955,
      532,
      900,
      7,
      14421,
      62,
      23213,
      563,
      62,
      4868,
      4008
    ],
    "start_token": 601,
    "end_token": 626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6224,
      287,
      257,
      22155,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Checking for existence in a dictionary before processing"
  },
  {
    "line": 73,
    "text": "    timestamp = \"2024-03-25\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for id generation shows dynamic key creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      366,
      1238,
      1731,
      12,
      3070,
      12,
      1495,
      1
    ],
    "start_token": 626,
    "end_token": 639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4686,
      5270,
      2523,
      8925,
      1994,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for id generation shows dynamic key creation"
  },
  {
    "line": 77,
    "text": "        {",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for tag_reason shows dynamic message creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 639,
    "end_token": 647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      7621,
      62,
      41181,
      2523,
      8925,
      3275,
      6282
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for tag_reason shows dynamic message creation"
  },
  {
    "line": 77,
    "text": "        {",
    "annotation": "\u2705 Best Practice: Concatenating lists for a combined result",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 647,
    "end_token": 655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1482,
      9246,
      268,
      803,
      8341,
      329,
      257,
      5929,
      1255
    ],
    "label": "best_practice",
    "reason": "Concatenating lists for a combined result"
  },
  {
    "line": 74,
    "text": "    entity_id = \"admin\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded timestamp and entity_id could indicate a pattern for default or initial data setup",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      312,
      796,
      366,
      28482,
      1
    ],
    "start_token": 655,
    "end_token": 665,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      41033,
      290,
      9312,
      62,
      312,
      714,
      7603,
      257,
      3912,
      329,
      4277,
      393,
      4238,
      1366,
      9058
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded timestamp and entity_id could indicate a pattern for default or initial data setup"
  },
  {
    "line": 88,
    "text": "    for tag, concepts in _get_default_main_tag_concept_mapping().items():",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary comprehension to transform data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      7621,
      11,
      10838,
      287,
      4808,
      1136,
      62,
      12286,
      62,
      12417,
      62,
      12985,
      62,
      43169,
      62,
      76,
      5912,
      22446,
      23814,
      33529
    ],
    "start_token": 665,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      35915,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary comprehension to transform data"
  },
  {
    "line": 89,
    "text": "        if tag not in _get_default_main_tag_industry_mapping():",
    "annotation": "\ud83e\udde0 ML Signal: Function name with underscore prefix suggests internal or private use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      7621,
      407,
      287,
      4808,
      1136,
      62,
      12286,
      62,
      12417,
      62,
      12985,
      62,
      23213,
      563,
      62,
      76,
      5912,
      33529
    ],
    "start_token": 689,
    "end_token": 715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      351,
      44810,
      21231,
      5644,
      5387,
      393,
      2839,
      779
    ],
    "label": "ml_signal",
    "reason": "Function name with underscore prefix suggests internal or private use"
  },
  {
    "line": 92,
    "text": "                    \"id\": f\"{entity_id}_{tag}\",",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded entity_id could indicate a default or special user",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      12985,
      92,
      1600
    ],
    "start_token": 715,
    "end_token": 748,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      9312,
      62,
      312,
      714,
      7603,
      257,
      4277,
      393,
      2041,
      2836
    ],
    "label": "ml_signal",
    "reason": "Hardcoded entity_id could indicate a default or special user"
  },
  {
    "line": 92,
    "text": "                    \"id\": f\"{entity_id}_{tag}\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for dynamic ID generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      12985,
      92,
      1600
    ],
    "start_token": 748,
    "end_token": 781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      8925,
      4522,
      5270
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for dynamic ID generation"
  },
  {
    "line": 104,
    "text": "    timestamp = \"2024-03-25\"",
    "annotation": "\u2705 Best Practice: Using dictionary comprehension for readability and efficiency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      366,
      1238,
      1731,
      12,
      3070,
      12,
      1495,
      1
    ],
    "start_token": 781,
    "end_token": 794,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      22155,
      35915,
      329,
      1100,
      1799,
      290,
      9332
    ],
    "label": "best_practice",
    "reason": "Using dictionary comprehension for readability and efficiency"
  },
  {
    "line": 104,
    "text": "    timestamp = \"2024-03-25\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded timestamp and entity_id for stock pool information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      366,
      1238,
      1731,
      12,
      3070,
      12,
      1495,
      1
    ],
    "start_token": 794,
    "end_token": 807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      41033,
      290,
      9312,
      62,
      312,
      329,
      4283,
      5933,
      1321
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded timestamp and entity_id for stock pool information"
  },
  {
    "line": 106,
    "text": "    industry_info = [",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of constructing unique IDs using entity_id and stock_pool_name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2831,
      62,
      10951,
      796,
      685
    ],
    "start_token": 807,
    "end_token": 815,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      30580,
      3748,
      32373,
      1262,
      9312,
      62,
      312,
      290,
      4283,
      62,
      7742,
      62,
      3672
    ],
    "label": "ml_signal",
    "reason": "Pattern of constructing unique IDs using entity_id and stock_pool_name"
  },
  {
    "line": 113,
    "text": "            \"main_tag\": main_tag,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of StockPoolType if not properly validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      12417,
      62,
      12985,
      1298,
      1388,
      62,
      12985,
      11
    ],
    "start_token": 815,
    "end_token": 835,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      10500,
      27201,
      6030,
      611,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of StockPoolType if not properly validated"
  },
  {
    "line": 116,
    "text": "    ]",
    "annotation": "\ud83e\udde0 ML Signal: Iteration over a predefined list of stock pool names",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2361
    ],
    "start_token": 835,
    "end_token": 839,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      341,
      625,
      257,
      2747,
      18156,
      1351,
      286,
      4283,
      5933,
      3891
    ],
    "label": "ml_signal",
    "reason": "Iteration over a predefined list of stock pool names"
  },
  {
    "line": 123,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to map stock tags to descriptions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 839,
    "end_token": 839,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      4283,
      15940,
      284,
      16969
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to map stock tags to descriptions"
  },
  {
    "line": 123,
    "text": "",
    "annotation": "\u2705 Best Practice: Function name is prefixed with an underscore, indicating it's intended for internal use.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 839,
    "end_token": 839,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      7694,
      2966,
      351,
      281,
      44810,
      11,
      12739,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Function name is prefixed with an underscore, indicating it's intended for internal use."
  },
  {
    "line": 125,
    "text": "        {",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded timestamp could indicate a fixed point in time for data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 839,
    "end_token": 847,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      41033,
      714,
      7603,
      257,
      5969,
      966,
      287,
      640,
      329,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded timestamp could indicate a fixed point in time for data processing."
  },
  {
    "line": 126,
    "text": "            \"id\": f\"{entity_id}_{sub_tag}\",",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded entity_id could indicate a specific user or role context.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      7266,
      62,
      12985,
      92,
      1600
    ],
    "start_token": 847,
    "end_token": 874,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      9312,
      62,
      312,
      714,
      7603,
      257,
      2176,
      2836,
      393,
      2597,
      4732,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded entity_id could indicate a specific user or role context."
  },
  {
    "line": 126,
    "text": "            \"id\": f\"{entity_id}_{sub_tag}\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for dynamic ID generation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      7266,
      62,
      12985,
      92,
      1600
    ],
    "start_token": 874,
    "end_token": 901,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      8925,
      4522,
      5270,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for dynamic ID generation."
  },
  {
    "line": 138,
    "text": "    timestamp = \"2024-03-25\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk if _hidden_tags is user-controlled or external input.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      366,
      1238,
      1731,
      12,
      3070,
      12,
      1495,
      1
    ],
    "start_token": 901,
    "end_token": 914,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      611,
      4808,
      30342,
      62,
      31499,
      318,
      2836,
      12,
      14401,
      393,
      7097,
      5128,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk if _hidden_tags is user-controlled or external input."
  },
  {
    "line": 136,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a possible utility or helper function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 914,
    "end_token": 914,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      1744,
      10361,
      393,
      31904,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a possible utility or helper function"
  },
  {
    "line": 138,
    "text": "    timestamp = \"2024-03-25\"",
    "annotation": "\ud83e\udde0 ML Signal: Function call to a private or internal function, indicating encapsulation or modular design",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      366,
      1238,
      1731,
      12,
      3070,
      12,
      1495,
      1
    ],
    "start_token": 914,
    "end_token": 927,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      257,
      2839,
      393,
      5387,
      2163,
      11,
      12739,
      32652,
      1741,
      393,
      26507,
      1486
    ],
    "label": "ml_signal",
    "reason": "Function call to a private or internal function, indicating encapsulation or modular design"
  },
  {
    "line": 140,
    "text": "    return [",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list to DataFrame, indicating data processing or transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      685
    ],
    "start_token": 927,
    "end_token": 932,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      284,
      6060,
      19778,
      11,
      12739,
      1366,
      7587,
      393,
      13389
    ],
    "label": "ml_signal",
    "reason": "Conversion of list to DataFrame, indicating data processing or transformation"
  },
  {
    "line": 142,
    "text": "            \"id\": f\"{entity_id}_{stock_pool_name}\",",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple parameters, indicating a data persistence or storage operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      13578,
      62,
      7742,
      62,
      3672,
      92,
      1600
    ],
    "start_token": 932,
    "end_token": 961,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      10007,
      11,
      12739,
      257,
      1366,
      30802,
      393,
      6143,
      4905
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple parameters, indicating a data persistence or storage operation"
  },
  {
    "line": 143,
    "text": "            \"entity_id\": entity_id,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if df_to_db function does not handle data securely",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      26858,
      62,
      312,
      1298,
      9312,
      62,
      312,
      11
    ],
    "start_token": 961,
    "end_token": 981,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      2163,
      857,
      407,
      5412,
      1366,
      30835
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if df_to_db function does not handle data securely"
  },
  {
    "line": 140,
    "text": "    return [",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a possible standard process or routine",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      685
    ],
    "start_token": 981,
    "end_token": 986,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      1744,
      3210,
      1429,
      393,
      8027
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a possible standard process or routine"
  },
  {
    "line": 142,
    "text": "            \"id\": f\"{entity_id}_{stock_pool_name}\",",
    "annotation": "\ud83e\udde0 ML Signal: Private function call pattern, indicating encapsulation or internal logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      13578,
      62,
      7742,
      62,
      3672,
      92,
      1600
    ],
    "start_token": 986,
    "end_token": 1015,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15348,
      2163,
      869,
      3912,
      11,
      12739,
      32652,
      1741,
      393,
      5387,
      9156
    ],
    "label": "ml_signal",
    "reason": "Private function call pattern, indicating encapsulation or internal logic"
  },
  {
    "line": 144,
    "text": "            \"timestamp\": timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of data to DataFrame, common in data processing tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      41033,
      11
    ],
    "start_token": 1015,
    "end_token": 1032,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1366,
      284,
      6060,
      19778,
      11,
      2219,
      287,
      1366,
      7587,
      8861
    ],
    "label": "ml_signal",
    "reason": "Conversion of data to DataFrame, common in data processing tasks"
  },
  {
    "line": 146,
    "text": "            \"stock_pool_name\": stock_pool_name,",
    "annotation": "\ud83e\udde0 ML Signal: Data persistence pattern, saving DataFrame to a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      7742,
      62,
      3672,
      1298,
      4283,
      62,
      7742,
      62,
      3672,
      11
    ],
    "start_token": 1032,
    "end_token": 1056,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      30802,
      3912,
      11,
      8914,
      6060,
      19778,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Data persistence pattern, saving DataFrame to a database"
  },
  {
    "line": 147,
    "text": "        }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if df_to_db does not handle SQL injection or data validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1056,
    "end_token": 1064,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5412,
      16363,
      16954,
      393,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if df_to_db does not handle SQL injection or data validation"
  },
  {
    "line": 144,
    "text": "            \"timestamp\": timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Function with a boolean parameter that alters behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      41033,
      11
    ],
    "start_token": 1064,
    "end_token": 1081,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      257,
      25131,
      11507,
      326,
      40866,
      4069
    ],
    "label": "ml_signal",
    "reason": "Function with a boolean parameter that alters behavior"
  },
  {
    "line": 146,
    "text": "            \"stock_pool_name\": stock_pool_name,",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern to retrieve data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      7742,
      62,
      3672,
      1298,
      4283,
      62,
      7742,
      62,
      3672,
      11
    ],
    "start_token": 1081,
    "end_token": 1105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      284,
      19818,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function call pattern to retrieve data"
  },
  {
    "line": 148,
    "text": "        for stock_pool_name in [\"main_line\", \"vol_up\", \"\u5927\u5c40\", \"all\"]",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list to DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4283,
      62,
      7742,
      62,
      3672,
      287,
      14631,
      12417,
      62,
      1370,
      1600,
      366,
      10396,
      62,
      929,
      1600,
      366,
      32014,
      161,
      109,
      222,
      1600,
      366,
      439,
      8973
    ],
    "start_token": 1105,
    "end_token": 1138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Conversion of list to DataFrame"
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if df_to_db does not handle SQL injection or data validation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1138,
    "end_token": 1138,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5412,
      16363,
      16954,
      393,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if df_to_db does not handle SQL injection or data validation"
  },
  {
    "line": 151,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Data persistence function call with parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1138,
    "end_token": 1138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      30802,
      2163,
      869,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Data persistence function call with parameters"
  },
  {
    "line": 148,
    "text": "        for stock_pool_name in [\"main_line\", \"vol_up\", \"\u5927\u5c40\", \"all\"]",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4283,
      62,
      7742,
      62,
      3672,
      287,
      14631,
      12417,
      62,
      1370,
      1600,
      366,
      10396,
      62,
      929,
      1600,
      366,
      32014,
      161,
      109,
      222,
      1600,
      366,
      439,
      8973
    ],
    "start_token": 1138,
    "end_token": 1171,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function calls a private function _get_initial_stock_pool_info, indicating encapsulation of logic.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1171,
    "end_token": 1171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3848,
      257,
      2839,
      2163,
      4808,
      1136,
      62,
      36733,
      62,
      13578,
      62,
      7742,
      62,
      10951,
      11,
      12739,
      32652,
      1741,
      286,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Function calls a private function _get_initial_stock_pool_info, indicating encapsulation of logic."
  },
  {
    "line": 152,
    "text": "_hidden_tags = {",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that stock_pool_info_list is properly validated before use to prevent potential data issues.",
    "confidence": 0.5,
    "tokens": [
      62,
      30342,
      62,
      31499,
      796,
      1391
    ],
    "start_token": 1171,
    "end_token": 1177,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      4283,
      62,
      7742,
      62,
      10951,
      62,
      4868,
      318,
      6105,
      31031,
      878,
      779,
      284,
      2948,
      2785,
      1366,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that stock_pool_info_list is properly validated before use to prevent potential data issues."
  },
  {
    "line": 153,
    "text": "    \"\u4e2d\u5b57\u5934\": \"\u592e\u4f01\uff0c\u56fd\u8d44\u59d4\u63a7\u80a1\",",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list to DataFrame, indicating data processing pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      40792,
      27764,
      245,
      13783,
      112,
      1298,
      366,
      13783,
      106,
      27670,
      223,
      171,
      120,
      234,
      32368,
      121,
      164,
      113,
      226,
      34650,
      242,
      162,
      236,
      100,
      164,
      224,
      94,
      1600
    ],
    "start_token": 1177,
    "end_token": 1209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      284,
      6060,
      19778,
      11,
      12739,
      1366,
      7587,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of list to DataFrame, indicating data processing pattern."
  },
  {
    "line": 155,
    "text": "    \"\u9ad8\u80a1\u606f\": \"\u9ad8\u80a1\u606f\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df is sanitized before passing to df_to_db to prevent injection attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      165,
      45865,
      164,
      224,
      94,
      162,
      223,
      107,
      1298,
      366,
      165,
      45865,
      164,
      224,
      94,
      162,
      223,
      107,
      1600
    ],
    "start_token": 1209,
    "end_token": 1232,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      318,
      5336,
      36951,
      878,
      6427,
      284,
      47764,
      62,
      1462,
      62,
      9945,
      284,
      2948,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df is sanitized before passing to df_to_db to prevent injection attacks."
  },
  {
    "line": 156,
    "text": "    \"\u5fae\u76d8\u80a1\": \"\u5e02\u503c50\u4ebf\u4ee5\u4e0b\",",
    "annotation": "\ud83e\udde0 ML Signal: Interaction with a database, indicating data persistence pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      36181,
      106,
      33566,
      246,
      164,
      224,
      94,
      1298,
      366,
      30585,
      224,
      161,
      222,
      120,
      1120,
      12859,
      123,
      20015,
      98,
      10310,
      233,
      1600
    ],
    "start_token": 1232,
    "end_token": 1258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4225,
      2673,
      351,
      257,
      6831,
      11,
      12739,
      1366,
      30802,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Interaction with a database, indicating data persistence pattern."
  },
  {
    "line": 152,
    "text": "_hidden_tags = {",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      62,
      30342,
      62,
      31499,
      796,
      1391
    ],
    "start_token": 1258,
    "end_token": 1264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and behavior"
  },
  {
    "line": 154,
    "text": "    \"\u6838\u5fc3\u8d44\u4ea7\": \"\u9ad8ROE \u9ad8\u73b0\u91d1\u6d41 \u9ad8\u80a1\u606f \u4f4e\u5e94\u6536 \u4f4e\u8d44\u672c\u5f00\u652f \u4f4e\u8d22\u52a1\u6760\u6746 \u6709\u589e\u957f\",",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern to _get_initial_hidden_tag_info, indicating data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      43718,
      116,
      33232,
      225,
      164,
      113,
      226,
      12859,
      100,
      1298,
      366,
      165,
      45865,
      13252,
      36,
      16268,
      45865,
      163,
      236,
      108,
      34932,
      239,
      38184,
      223,
      16268,
      45865,
      164,
      224,
      94,
      162,
      223,
      107,
      220,
      19526,
      236,
      41753,
      242,
      162,
      242,
      114,
      220,
      19526,
      236,
      164,
      113,
      226,
      17312,
      105,
      28156,
      222,
      162,
      242,
      107,
      220,
      19526,
      236,
      164,
      112,
      95,
      27950,
      94,
      30266,
      254,
      30266,
      228,
      42164,
      231,
      161,
      95,
      252,
      165,
      243,
      123,
      1600
    ],
    "start_token": 1264,
    "end_token": 1342,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      284,
      4808,
      1136,
      62,
      36733,
      62,
      30342,
      62,
      12985,
      62,
      10951,
      11,
      12739,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function call pattern to _get_initial_hidden_tag_info, indicating data retrieval"
  },
  {
    "line": 156,
    "text": "    \"\u5fae\u76d8\u80a1\": \"\u5e02\u503c50\u4ebf\u4ee5\u4e0b\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas DataFrame, indicating data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      36181,
      106,
      33566,
      246,
      164,
      224,
      94,
      1298,
      366,
      30585,
      224,
      161,
      222,
      120,
      1120,
      12859,
      123,
      20015,
      98,
      10310,
      233,
      1600
    ],
    "start_token": 1342,
    "end_token": 1368,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6060,
      19778,
      11,
      12739,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas DataFrame, indicating data manipulation"
  },
  {
    "line": 158,
    "text": "}",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern to df_to_db, indicating data persistence",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 1368,
    "end_token": 1369,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      284,
      47764,
      62,
      1462,
      62,
      9945,
      11,
      12739,
      1366,
      30802
    ],
    "label": "ml_signal",
    "reason": "Function call pattern to df_to_db, indicating data persistence"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df_to_db handles data securely to prevent injection attacks",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1369,
    "end_token": 1369,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      62,
      1462,
      62,
      9945,
      17105,
      1366,
      30835,
      284,
      2948,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df_to_db handles data securely to prevent injection attacks"
  },
  {
    "line": 156,
    "text": "    \"\u5fae\u76d8\u80a1\": \"\u5e02\u503c50\u4ebf\u4ee5\u4e0b\",",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a clear purpose and name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      36181,
      106,
      33566,
      246,
      164,
      224,
      94,
      1298,
      366,
      30585,
      224,
      161,
      222,
      120,
      1120,
      12859,
      123,
      20015,
      98,
      10310,
      233,
      1600
    ],
    "start_token": 1369,
    "end_token": 1395,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      1598,
      4007,
      290,
      1438
    ],
    "label": "ml_signal",
    "reason": "Function definition with a clear purpose and name"
  },
  {
    "line": 158,
    "text": "}",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database model",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 1395,
    "end_token": 1396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831,
      2746
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database model"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a list of tags for better usability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1396,
    "end_token": 1396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1351,
      286,
      15940,
      329,
      1365,
      42863
    ],
    "label": "best_practice",
    "reason": "Returning a list of tags for better usability"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific input and output patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1396,
    "end_token": 1396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      5128,
      290,
      5072,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific input and output patterns"
  },
  {
    "line": 161,
    "text": "def _get_initial_hidden_tag_info():",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      36733,
      62,
      30342,
      62,
      12985,
      62,
      10951,
      33529
    ],
    "start_token": 1396,
    "end_token": 1408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters"
  },
  {
    "line": 162,
    "text": "    timestamp = \"2024-03-25\"",
    "annotation": "\u2705 Best Practice: Check if list is not empty before accessing elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      366,
      1238,
      1731,
      12,
      3070,
      12,
      1495,
      1
    ],
    "start_token": 1408,
    "end_token": 1421,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1351,
      318,
      407,
      6565,
      878,
      22534,
      4847
    ],
    "label": "best_practice",
    "reason": "Check if list is not empty before accessing elements"
  },
  {
    "line": 165,
    "text": "        {",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the first element of a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 1421,
    "end_token": 1429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      717,
      5002,
      286,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Accessing the first element of a list"
  },
  {
    "line": 169,
    "text": "            \"tag\": tag,",
    "annotation": "\u2705 Best Practice: Use of default value in dictionary get method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      12985,
      1298,
      7621,
      11
    ],
    "start_token": 1429,
    "end_token": 1445,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      1988,
      287,
      22155,
      651,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of default value in dictionary get method"
  },
  {
    "line": 165,
    "text": "        {",
    "annotation": "\ud83e\udde0 ML Signal: Function to retrieve main tag based on industry name",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 1445,
    "end_token": 1453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      19818,
      1388,
      7621,
      1912,
      319,
      2831,
      1438
    ],
    "label": "ml_signal",
    "reason": "Function to retrieve main tag based on industry name"
  },
  {
    "line": 166,
    "text": "            \"id\": f\"{entity_id}_{tag}\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if `industry_name` is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      277,
      1,
      90,
      26858,
      62,
      312,
      92,
      23330,
      12985,
      92,
      1600
    ],
    "start_token": 1453,
    "end_token": 1478,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      4600,
      23213,
      563,
      62,
      3672,
      63,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if `industry_name` is not properly sanitized"
  },
  {
    "line": 169,
    "text": "            \"tag\": tag,",
    "annotation": "\ud83e\udde0 ML Signal: Querying data based on industry name",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      12985,
      1298,
      7621,
      11
    ],
    "start_token": 1478,
    "end_token": 1494,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      1912,
      319,
      2831,
      1438
    ],
    "label": "ml_signal",
    "reason": "Querying data based on industry name"
  },
  {
    "line": 173,
    "text": "    ]",
    "annotation": "\ud83e\udde0 ML Signal: Returning main tag if data is found",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2361
    ],
    "start_token": 1494,
    "end_token": 1498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1388,
      7621,
      611,
      1366,
      318,
      1043
    ],
    "label": "ml_signal",
    "reason": "Returning main tag if data is found"
  },
  {
    "line": 176,
    "text": "def build_initial_main_tag_info():",
    "annotation": "\u2705 Best Practice: Use of default value when no data is found",
    "confidence": 0.5,
    "tokens": [
      4299,
      1382,
      62,
      36733,
      62,
      12417,
      62,
      12985,
      62,
      10951,
      33529
    ],
    "start_token": 1498,
    "end_token": 1509,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      1988,
      618,
      645,
      1366,
      318,
      1043
    ],
    "label": "best_practice",
    "reason": "Use of default value when no data is found"
  },
  {
    "line": 173,
    "text": "    ]",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a possible utility function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2361
    ],
    "start_token": 1509,
    "end_token": 1513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      1744,
      10361,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a possible utility function"
  },
  {
    "line": 175,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying a database model, indicating interaction with a database",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1513,
    "end_token": 1513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      257,
      6831,
      2746,
      11,
      12739,
      10375,
      351,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Querying a database model, indicating interaction with a database"
  },
  {
    "line": 176,
    "text": "def build_initial_main_tag_info():",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for SQL injection if input is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      4299,
      1382,
      62,
      36733,
      62,
      12417,
      62,
      12985,
      62,
      10951,
      33529
    ],
    "start_token": 1513,
    "end_token": 1524,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      5128,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for SQL injection if input is not properly sanitized"
  },
  {
    "line": 178,
    "text": "    df = pd.DataFrame.from_records(main_tag_info_list)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a DataFrame column and converting it to a list, indicating data transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      12417,
      62,
      12985,
      62,
      10951,
      62,
      4868,
      8
    ],
    "start_token": 1524,
    "end_token": 1548,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      6060,
      19778,
      5721,
      290,
      23202,
      340,
      284,
      257,
      1351,
      11,
      12739,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Accessing a DataFrame column and converting it to a list, indicating data transformation"
  },
  {
    "line": 176,
    "text": "def build_initial_main_tag_info():",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific purpose (get_hidden_tags)",
    "confidence": 1.0,
    "tokens": [
      4299,
      1382,
      62,
      36733,
      62,
      12417,
      62,
      12985,
      62,
      10951,
      33529
    ],
    "start_token": 1548,
    "end_token": 1559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      4007,
      357,
      1136,
      62,
      30342,
      62,
      31499,
      8
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific purpose (get_hidden_tags)"
  },
  {
    "line": 178,
    "text": "    df = pd.DataFrame.from_records(main_tag_info_list)",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database model",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      12417,
      62,
      12985,
      62,
      10951,
      62,
      4868,
      8
    ],
    "start_token": 1559,
    "end_token": 1583,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831,
      2746
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database model"
  },
  {
    "line": 180,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a specific column as a list",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1583,
    "end_token": 1583,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      2176,
      5721,
      355,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Returning a specific column as a list"
  },
  {
    "line": 179,
    "text": "    df_to_db(df=df, data_schema=MainTagInfo, provider=\"zvt\", force_update=False)",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a clear purpose of retrieving stock pool names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7,
      7568,
      28,
      7568,
      11,
      1366,
      62,
      15952,
      2611,
      28,
      13383,
      24835,
      12360,
      11,
      10131,
      2625,
      89,
      36540,
      1600,
      2700,
      62,
      19119,
      28,
      25101,
      8
    ],
    "start_token": 1583,
    "end_token": 1616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      1598,
      4007,
      286,
      50122,
      4283,
      5933,
      3891
    ],
    "label": "ml_signal",
    "reason": "Function definition with a clear purpose of retrieving stock pool names"
  },
  {
    "line": 181,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying a database model for specific columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1616,
    "end_token": 1616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      257,
      6831,
      2746,
      329,
      2176,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying a database model for specific columns"
  },
  {
    "line": 183,
    "text": "    initial_industry_info = _get_initial_industry_info()",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a DataFrame column and converting it to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4238,
      62,
      23213,
      563,
      62,
      10951,
      796,
      4808,
      1136,
      62,
      36733,
      62,
      23213,
      563,
      62,
      10951,
      3419
    ],
    "start_token": 1616,
    "end_token": 1636,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      6060,
      19778,
      5721,
      290,
      23202,
      340,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Accessing a DataFrame column and converting it to a list"
  },
  {
    "line": 182,
    "text": "def build_initial_industry_info():",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple conditional branches based on input parameter",
    "confidence": 1.0,
    "tokens": [
      4299,
      1382,
      62,
      36733,
      62,
      23213,
      563,
      62,
      10951,
      33529
    ],
    "start_token": 1636,
    "end_token": 1646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      26340,
      13737,
      1912,
      319,
      5128,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function with multiple conditional branches based on input parameter"
  },
  {
    "line": 184,
    "text": "    df = pd.DataFrame.from_records(initial_industry_info)",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter value usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      36733,
      62,
      23213,
      563,
      62,
      10951,
      8
    ],
    "start_token": 1646,
    "end_token": 1669,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      1988,
      8748
    ],
    "label": "ml_signal",
    "reason": "Default parameter value usage"
  },
  {
    "line": 192,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for control flow can be disabled in production",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1669,
    "end_token": 1669,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for control flow can be disabled in production"
  },
  {
    "line": 197,
    "text": "    df_to_db(df=df, data_schema=StockPoolInfo, provider=\"zvt\", force_update=False)",
    "annotation": "\ud83e\udde0 ML Signal: Use of set intersection to find common elements",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7,
      7568,
      28,
      7568,
      11,
      1366,
      62,
      15952,
      2611,
      28,
      26207,
      27201,
      12360,
      11,
      10131,
      2625,
      89,
      36540,
      1600,
      2700,
      62,
      19119,
      28,
      25101,
      8
    ],
    "start_token": 1669,
    "end_token": 1702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      16246,
      284,
      1064,
      2219,
      4847
    ],
    "label": "ml_signal",
    "reason": "Use of set intersection to find common elements"
  },
  {
    "line": 202,
    "text": "    df = pd.DataFrame.from_records(hidden_tag_info_list)",
    "annotation": "\ud83e\udde0 ML Signal: Function uses a pattern of checking multiple conditions sequentially",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      30342,
      62,
      12985,
      62,
      10951,
      62,
      4868,
      8
    ],
    "start_token": 1702,
    "end_token": 1726,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      257,
      3912,
      286,
      10627,
      3294,
      3403,
      4726,
      3746
    ],
    "label": "ml_signal",
    "reason": "Function uses a pattern of checking multiple conditions sequentially"
  },
  {
    "line": 215,
    "text": "    else:",
    "annotation": "\u2705 Best Practice: Explicitly defining the entry point for script execution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1726,
    "end_token": 1731,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      262,
      5726,
      966,
      329,
      4226,
      9706
    ],
    "label": "best_practice",
    "reason": "Explicitly defining the entry point for script execution"
  },
  {
    "line": 215,
    "text": "    else:",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1731,
    "end_token": 1736,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module"
  }
]
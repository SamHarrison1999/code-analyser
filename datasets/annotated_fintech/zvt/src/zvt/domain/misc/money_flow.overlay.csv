annotation,annotation_tokens,confidence,end_token,label,line,reason,start_token,text,tokens
‚úÖ Best Practice: Grouping related imports together improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,12,best_practice,3,Grouping related imports together improves readability and maintainability.,0,from sqlalchemy.orm import declarative_base,"[6738, 44161, 282, 26599, 13, 579, 1330, 2377, 283, 876, 62, 8692]"
‚úÖ Best Practice: Naming convention for base classes should be clear and descriptive.,"[26486, 227, 6705, 19939, 25, 399, 3723, 9831, 329, 2779, 6097, 815, 307, 1598, 290, 35644, 13]",1.0,12,best_practice,7,Naming convention for base classes should be clear and descriptive.,12,,[]
üß† ML Signal: Inheritance from MoneyFlowBase and Mixin indicates a pattern of using base classes and mixins for shared functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 12911, 37535, 14881, 290, 15561, 259, 9217, 257, 3912, 286, 1262, 2779, 6097, 290, 5022, 1040, 329, 4888, 11244]",0.5,24,ml_signal,6,Inheritance from MoneyFlowBase and Mixin indicates a pattern of using base classes and mixins for shared functionality,12,from zvt.contract.register import register_schema,"[6738, 1976, 36540, 13, 28484, 13, 30238, 1330, 7881, 62, 15952, 2611]"
üß† ML Signal: Use of __tablename__ suggests a pattern of ORM usage for database table mapping,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 5644, 257, 3912, 286, 6375, 44, 8748, 329, 6831, 3084, 16855]",0.5,34,ml_signal,8,Use of __tablename__ suggests a pattern of ORM usage for database table mapping,24,MoneyFlowBase = declarative_base(),"[26788, 37535, 14881, 796, 2377, 283, 876, 62, 8692, 3419]"
üß† ML Signal: Use of Column with String type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 10903, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,34,ml_signal,10,Use of Column with String type indicates a pattern of defining database schema with specific data types,34,,[]
üß† ML Signal: Use of Column with String type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 10903, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,34,ml_signal,12,Use of Column with String type indicates a pattern of defining database schema with specific data types,34,,[]
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,46,ml_signal,14,Use of Column with Float type indicates a pattern of defining database schema with specific data types,34,"class BlockMoneyFlow(MoneyFlowBase, Mixin):","[4871, 9726, 26788, 37535, 7, 26788, 37535, 14881, 11, 15561, 259, 2599]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,46,ml_signal,16,Use of Column with Float type indicates a pattern of defining database schema with specific data types,46,,[]
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,59,ml_signal,18,Use of Column with Float type indicates a pattern of defining database schema with specific data types,46,    name = Column(String(length=32)),"[220, 220, 220, 1438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,71,ml_signal,20,Use of Column with Float type indicates a pattern of defining database schema with specific data types,59,    #: Êî∂Áõò‰ª∑,"[220, 220, 220, 1303, 25, 10545, 242, 114, 33566, 246, 20015, 115]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,83,ml_signal,22,Use of Column with Float type indicates a pattern of defining database schema with specific data types,71,    change_pct = Column(Float),"[220, 220, 220, 1487, 62, 79, 310, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,83,ml_signal,24,Use of Column with Float type indicates a pattern of defining database schema with specific data types,83,,[]
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,95,ml_signal,26,Use of Column with Float type indicates a pattern of defining database schema with specific data types,83,    net_inflows = Column(Float),"[220, 220, 220, 2010, 62, 259, 44041, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,109,ml_signal,28,Use of Column with Float type indicates a pattern of defining database schema with specific data types,95,    net_inflow_rate = Column(Float),"[220, 220, 220, 2010, 62, 259, 11125, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,129,ml_signal,30,Use of Column with Float type indicates a pattern of defining database schema with specific data types,109,    #: ‰∏ªÂäõ=Ë∂ÖÂ§ßÂçï+Â§ßÂçï,"[220, 220, 220, 1303, 25, 220, 10310, 119, 27950, 249, 28, 164, 41678, 32014, 39355, 243, 10, 32014, 39355, 243]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,145,ml_signal,32,Use of Column with Float type indicates a pattern of defining database schema with specific data types,129,    net_main_inflow_rate = Column(Float),"[220, 220, 220, 2010, 62, 12417, 62, 259, 11125, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,159,ml_signal,34,Use of Column with Float type indicates a pattern of defining database schema with specific data types,145,    net_huge_inflows = Column(Float),"[220, 220, 220, 2010, 62, 40878, 62, 259, 44041, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,168,ml_signal,36,Use of Column with Float type indicates a pattern of defining database schema with specific data types,159,    #: Â§ßÂçï,"[220, 220, 220, 1303, 25, 36469, 100, 39355, 243]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,184,ml_signal,38,Use of Column with Float type indicates a pattern of defining database schema with specific data types,168,    net_big_inflow_rate = Column(Float),"[220, 220, 220, 2010, 62, 14261, 62, 259, 11125, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,193,ml_signal,40,Use of Column with Float type indicates a pattern of defining database schema with specific data types,184,    #: ‰∏≠Âçï,"[220, 220, 220, 1303, 25, 220, 40792, 39355, 243]"
üß† ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 29201, 351, 48436, 2099, 9217, 257, 3912, 286, 16215, 6831, 32815, 351, 2176, 1366, 3858]",0.5,209,ml_signal,42,Use of Column with Float type indicates a pattern of defining database schema with specific data types,193,    net_medium_inflow_rate = Column(Float),"[220, 220, 220, 2010, 62, 24132, 62, 259, 11125, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,224,ml_signal,27,Use of SQLAlchemy ORM for database interaction,209,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,224,ml_signal,29,Use of SQLAlchemy ORM for database interaction,224,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,238,ml_signal,31,Use of SQLAlchemy ORM for database interaction,224,    net_main_inflows = Column(Float),"[220, 220, 220, 2010, 62, 12417, 62, 259, 44041, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,248,ml_signal,33,Use of SQLAlchemy ORM for database interaction,238,    #: Ë∂ÖÂ§ßÂçï,"[220, 220, 220, 1303, 25, 5525, 41678, 32014, 39355, 243]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,264,ml_signal,35,Use of SQLAlchemy ORM for database interaction,248,    net_huge_inflow_rate = Column(Float),"[220, 220, 220, 2010, 62, 40878, 62, 259, 11125, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,278,ml_signal,37,Use of SQLAlchemy ORM for database interaction,264,    net_big_inflows = Column(Float),"[220, 220, 220, 2010, 62, 14261, 62, 259, 44041, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,278,ml_signal,39,Use of SQLAlchemy ORM for database interaction,278,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,292,ml_signal,41,Use of SQLAlchemy ORM for database interaction,278,    net_medium_inflows = Column(Float),"[220, 220, 220, 2010, 62, 24132, 62, 259, 44041, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,302,ml_signal,43,Use of SQLAlchemy ORM for database interaction,292,    #: Â∞èÂçï,"[220, 220, 220, 1303, 25, 10263, 108, 237, 39355, 243]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,318,ml_signal,45,Use of SQLAlchemy ORM for database interaction,302,    net_small_inflow_rate = Column(Float),"[220, 220, 220, 2010, 62, 17470, 62, 259, 11125, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,318,ml_signal,47,Use of SQLAlchemy ORM for database interaction,318,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,334,ml_signal,49,Use of SQLAlchemy ORM for database interaction,318,"    __tablename__ = ""stock_money_flow""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 13578, 62, 26316, 62, 11125, 1]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,347,ml_signal,51,Use of SQLAlchemy ORM for database interaction,334,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,347,ml_signal,53,Use of SQLAlchemy ORM for database interaction,347,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,356,ml_signal,55,Use of SQLAlchemy ORM for database interaction,347,    close = Column(Float),"[220, 220, 220, 1969, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,367,ml_signal,57,Use of SQLAlchemy ORM for database interaction,356,    turnover_rate = Column(Float),"[220, 220, 220, 25079, 62, 4873, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",0.5,379,ml_signal,59,Use of SQLAlchemy ORM for database interaction,367,    #: ÂáÄÊµÅÂÖ•,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,379,best_practice,46,Define column types and constraints for database schema,379,,[]
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,391,best_practice,48,Define column types and constraints for database schema,379,"class StockMoneyFlow(MoneyFlowBase, Mixin):","[4871, 10500, 26788, 37535, 7, 26788, 37535, 14881, 11, 15561, 259, 2599]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,391,best_practice,50,Define column types and constraints for database schema,391,,[]
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,404,best_practice,52,Define column types and constraints for database schema,391,    name = Column(String(length=32)),"[220, 220, 220, 1438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,416,best_practice,54,Define column types and constraints for database schema,404,    #: Êî∂Áõò‰ª∑,"[220, 220, 220, 1303, 25, 10545, 242, 114, 33566, 246, 20015, 115]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,428,best_practice,56,Define column types and constraints for database schema,416,    change_pct = Column(Float),"[220, 220, 220, 1487, 62, 79, 310, 796, 29201, 7, 43879, 8]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,428,best_practice,58,Define column types and constraints for database schema,428,,[]
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,440,best_practice,60,Define column types and constraints for database schema,428,    net_inflows = Column(Float),"[220, 220, 220, 2010, 62, 259, 44041, 796, 29201, 7, 43879, 8]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,455,best_practice,61,Define column types and constraints for database schema,440,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,470,best_practice,61,Define column types and constraints for database schema,455,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,485,best_practice,61,Define column types and constraints for database schema,470,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,500,best_practice,61,Define column types and constraints for database schema,485,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,515,best_practice,61,Define column types and constraints for database schema,500,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",0.5,530,best_practice,61,Define column types and constraints for database schema,515,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
üß† ML Signal: Usage of register_schema function indicates schema registration pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7881, 62, 15952, 2611, 2163, 9217, 32815, 9352, 3912]",0.5,545,ml_signal,61,Usage of register_schema function indicates schema registration pattern,530,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"
üß† ML Signal: Use of __all__ to define public API of the module,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,560,ml_signal,61,Use of __all__ to define public API of the module,545,    #: ÂáÄÊµÅÂÖ•Áéá,"[220, 220, 220, 1303, 25, 10263, 229, 222, 38184, 223, 17739, 98, 163, 236, 229]"

[
  {
    "line": 3,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Naming convention for base classes should be clear and descriptive.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      9831,
      329,
      2779,
      6097,
      815,
      307,
      1598,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Naming convention for base classes should be clear and descriptive."
  },
  {
    "line": 6,
    "text": "from zvt.contract.register import register_schema",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from MoneyFlowBase and Mixin indicates a pattern of using base classes and mixins for shared functionality",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      30238,
      1330,
      7881,
      62,
      15952,
      2611
    ],
    "start_token": 12,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      12911,
      37535,
      14881,
      290,
      15561,
      259,
      9217,
      257,
      3912,
      286,
      1262,
      2779,
      6097,
      290,
      5022,
      1040,
      329,
      4888,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from MoneyFlowBase and Mixin indicates a pattern of using base classes and mixins for shared functionality"
  },
  {
    "line": 8,
    "text": "MoneyFlowBase = declarative_base()",
    "annotation": "\ud83e\udde0 ML Signal: Use of __tablename__ suggests a pattern of ORM usage for database table mapping",
    "confidence": 0.5,
    "tokens": [
      26788,
      37535,
      14881,
      796,
      2377,
      283,
      876,
      62,
      8692,
      3419
    ],
    "start_token": 24,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      8658,
      11925,
      480,
      834,
      5644,
      257,
      3912,
      286,
      6375,
      44,
      8748,
      329,
      6831,
      3084,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of __tablename__ suggests a pattern of ORM usage for database table mapping"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with String type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      10903,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with String type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with String type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      10903,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with String type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 14,
    "text": "class BlockMoneyFlow(MoneyFlowBase, Mixin):",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      4871,
      9726,
      26788,
      37535,
      7,
      26788,
      37535,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 34,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 46,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 18,
    "text": "    name = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 46,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 20,
    "text": "    #: \u6536\u76d8\u4ef7",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      242,
      114,
      33566,
      246,
      20015,
      115
    ],
    "start_token": 59,
    "end_token": 71,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 22,
    "text": "    change_pct = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 71,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 83,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 26,
    "text": "    net_inflows = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      259,
      44041,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 83,
    "end_token": 95,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 28,
    "text": "    net_inflow_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      259,
      11125,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 95,
    "end_token": 109,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 30,
    "text": "    #: \u4e3b\u529b=\u8d85\u5927\u5355+\u5927\u5355",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      220,
      10310,
      119,
      27950,
      249,
      28,
      164,
      41678,
      32014,
      39355,
      243,
      10,
      32014,
      39355,
      243
    ],
    "start_token": 109,
    "end_token": 129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 32,
    "text": "    net_main_inflow_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      12417,
      62,
      259,
      11125,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 129,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 34,
    "text": "    net_huge_inflows = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      40878,
      62,
      259,
      44041,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 145,
    "end_token": 159,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 36,
    "text": "    #: \u5927\u5355",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      36469,
      100,
      39355,
      243
    ],
    "start_token": 159,
    "end_token": 168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 38,
    "text": "    net_big_inflow_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      14261,
      62,
      259,
      11125,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 168,
    "end_token": 184,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 40,
    "text": "    #: \u4e2d\u5355",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      220,
      40792,
      39355,
      243
    ],
    "start_token": 184,
    "end_token": 193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 42,
    "text": "    net_medium_inflow_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Column with Float type indicates a pattern of defining database schema with specific data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      24132,
      62,
      259,
      11125,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 193,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      9217,
      257,
      3912,
      286,
      16215,
      6831,
      32815,
      351,
      2176,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of Column with Float type indicates a pattern of defining database schema with specific data types"
  },
  {
    "line": 27,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 209,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 224,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 31,
    "text": "    net_main_inflows = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      12417,
      62,
      259,
      44041,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 224,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 33,
    "text": "    #: \u8d85\u5927\u5355",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      41678,
      32014,
      39355,
      243
    ],
    "start_token": 238,
    "end_token": 248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 35,
    "text": "    net_huge_inflow_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      40878,
      62,
      259,
      11125,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 248,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 37,
    "text": "    net_big_inflows = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      14261,
      62,
      259,
      44041,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 264,
    "end_token": 278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 278,
    "end_token": 278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 41,
    "text": "    net_medium_inflows = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      24132,
      62,
      259,
      44041,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 278,
    "end_token": 292,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 43,
    "text": "    #: \u5c0f\u5355",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      108,
      237,
      39355,
      243
    ],
    "start_token": 292,
    "end_token": 302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 45,
    "text": "    net_small_inflow_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      17470,
      62,
      259,
      11125,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 302,
    "end_token": 318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 318,
    "end_token": 318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 49,
    "text": "    __tablename__ = \"stock_money_flow\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      13578,
      62,
      26316,
      62,
      11125,
      1
    ],
    "start_token": 318,
    "end_token": 334,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 51,
    "text": "    code = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 334,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 347,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 55,
    "text": "    close = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1969,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 347,
    "end_token": 356,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 57,
    "text": "    turnover_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25079,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 356,
    "end_token": 367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 59,
    "text": "    #: \u51c0\u6d41\u5165",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98
    ],
    "start_token": 367,
    "end_token": 379,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 379,
    "end_token": 379,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 48,
    "text": "class StockMoneyFlow(MoneyFlowBase, Mixin):",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      4871,
      10500,
      26788,
      37535,
      7,
      26788,
      37535,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 379,
    "end_token": 391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 391,
    "end_token": 391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 52,
    "text": "    name = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 391,
    "end_token": 404,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 54,
    "text": "    #: \u6536\u76d8\u4ef7",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      242,
      114,
      33566,
      246,
      20015,
      115
    ],
    "start_token": 404,
    "end_token": 416,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 56,
    "text": "    change_pct = Column(Float)",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 416,
    "end_token": 428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 428,
    "end_token": 428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 60,
    "text": "    net_inflows = Column(Float)",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2010,
      62,
      259,
      44041,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 428,
    "end_token": 440,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 440,
    "end_token": 455,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 455,
    "end_token": 470,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 470,
    "end_token": 485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 485,
    "end_token": 500,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 500,
    "end_token": 515,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 515,
    "end_token": 530,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\ud83e\udde0 ML Signal: Usage of register_schema function indicates schema registration pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 530,
    "end_token": 545,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7881,
      62,
      15952,
      2611,
      2163,
      9217,
      32815,
      9352,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of register_schema function indicates schema registration pattern"
  },
  {
    "line": 61,
    "text": "    #: \u51c0\u6d41\u5165\u7387",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      229,
      222,
      38184,
      223,
      17739,
      98,
      163,
      236,
      229
    ],
    "start_token": 545,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to define public API of the module"
  }
]
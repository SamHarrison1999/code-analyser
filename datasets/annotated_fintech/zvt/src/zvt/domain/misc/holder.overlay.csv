annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Group related imports together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 3519, 17944, 1978, 329, 1365, 1100, 1799, 13]",1.0,12,best_practice,3,Group related imports together for better readability.,,0,from sqlalchemy.orm import declarative_base,"[6738, 44161, 282, 26599, 13, 579, 1330, 2377, 283, 876, 62, 8692]"
‚úÖ Best Practice: Naming convention for base classes should be clear and descriptive.,"[26486, 227, 6705, 19939, 25, 399, 3723, 9831, 329, 2779, 6097, 815, 307, 1598, 290, 35644, 13]",1.0,12,best_practice,7,Naming convention for base classes should be clear and descriptive.,,12,,[]
‚úÖ Best Practice: Define a class-level variable for the table name to avoid magic strings,"[26486, 227, 6705, 19939, 25, 2896, 500, 257, 1398, 12, 5715, 7885, 329, 262, 3084, 1438, 284, 3368, 5536, 13042]",0.5,12,best_practice,7,Define a class-level variable for the table name to avoid magic strings,,12,,[]
‚úÖ Best Practice: Specify a maximum length for string columns to prevent excessive data storage,"[26486, 227, 6705, 19939, 25, 18291, 1958, 257, 5415, 4129, 329, 4731, 15180, 284, 2948, 13181, 1366, 6143]",0.5,12,best_practice,9,Specify a maximum length for string columns to prevent excessive data storage,,12,,[]
‚úÖ Best Practice: Specify a maximum length for string columns to prevent excessive data storage,"[26486, 227, 6705, 19939, 25, 18291, 1958, 257, 5415, 4129, 329, 4731, 15180, 284, 2948, 13181, 1366, 6143]",0.5,25,best_practice,11,Specify a maximum length for string columns to prevent excessive data storage,,12,"class HkHolder(HolderBase, Mixin):","[4871, 367, 74, 39, 19892, 7, 39, 19892, 14881, 11, 15561, 259, 2599]"
‚úÖ Best Practice: Specify a maximum length for string columns to prevent excessive data storage,"[26486, 227, 6705, 19939, 25, 18291, 1958, 257, 5415, 4129, 329, 4731, 15180, 284, 2948, 13181, 1366, 6143]",0.5,40,best_practice,13,Specify a maximum length for string columns to prevent excessive data storage,,25,    #: ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 1303, 25, 5525, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚úÖ Best Practice: Specify a maximum length for string columns to prevent excessive data storage,"[26486, 227, 6705, 19939, 25, 18291, 1958, 257, 5415, 4129, 329, 4731, 15180, 284, 2948, 13181, 1366, 6143]",0.5,56,best_practice,15,Specify a maximum length for string columns to prevent excessive data storage,,40,    #: ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 1303, 25, 5525, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the Float type is appropriate for financial data to avoid precision issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 48436, 2099, 318, 5035, 329, 3176, 1366, 284, 3368, 15440, 2428]",0.5,56,sast_risk,17,Ensure that the Float type is appropriate for financial data to avoid precision issues,Low,56,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure that the Float type is appropriate for financial data to avoid precision issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 48436, 2099, 318, 5035, 329, 3176, 1366, 284, 3368, 15440, 2428]",0.5,71,sast_risk,19,Ensure that the Float type is appropriate for financial data to avoid precision issues,Low,56,    holder_code = Column(String(length=32)),"[220, 220, 220, 15762, 62, 8189, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
üß† ML Signal: Inheritance from multiple classes indicates a pattern of using mixins or base classes.,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 3294, 6097, 9217, 257, 3912, 286, 1262, 5022, 1040, 393, 2779, 6097, 13]",0.5,87,ml_signal,15,Inheritance from multiple classes indicates a pattern of using mixins or base classes.,,71,    #: ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 1303, 25, 5525, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
üß† ML Signal: Use of SQLAlchemy ORM for database table mapping.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 3084, 16855, 13]",0.5,87,ml_signal,17,Use of SQLAlchemy ORM for database table mapping.,,87,,[]
‚úÖ Best Practice: Specifying length for String columns improves database performance and storage.,"[26486, 227, 6705, 19939, 25, 18291, 4035, 4129, 329, 10903, 15180, 19575, 6831, 2854, 290, 6143, 13]",0.5,102,best_practice,19,Specifying length for String columns improves database performance and storage.,,87,    holder_code = Column(String(length=32)),"[220, 220, 220, 15762, 62, 8189, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Specifying length for String columns improves database performance and storage.,"[26486, 227, 6705, 19939, 25, 18291, 4035, 4129, 329, 10903, 15180, 19575, 6831, 2854, 290, 6143, 13]",0.5,117,best_practice,21,Specifying length for String columns improves database performance and storage.,,102,    holder_name = Column(String(length=32)),"[220, 220, 220, 15762, 62, 3672, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Specifying length for String columns improves database performance and storage.,"[26486, 227, 6705, 19939, 25, 18291, 4035, 4129, 329, 10903, 15180, 19575, 6831, 2854, 290, 6143, 13]",0.5,132,best_practice,23,Specifying length for String columns improves database performance and storage.,,117,    #: ÊåÅËÇ°Êï∞Èáè,"[220, 220, 220, 1303, 25, 10545, 234, 223, 164, 224, 94, 46763, 108, 34932, 237]"
‚úÖ Best Practice: Use of DateTime for date fields ensures proper date handling and querying.,"[26486, 227, 6705, 19939, 25, 5765, 286, 7536, 7575, 329, 3128, 7032, 19047, 1774, 3128, 9041, 290, 42517, 1112, 13]",0.5,149,best_practice,25,Use of DateTime for date fields ensures proper date handling and querying.,,132,    #: ÊåÅËÇ°ÊØî‰æã,"[220, 220, 220, 1303, 25, 10545, 234, 223, 164, 224, 94, 162, 107, 242, 160, 122, 233]"
‚úÖ Best Practice: Specifying length for String columns improves database performance and storage.,"[26486, 227, 6705, 19939, 25, 18291, 4035, 4129, 329, 10903, 15180, 19575, 6831, 2854, 290, 6143, 13]",0.5,149,best_practice,27,Specifying length for String columns improves database performance and storage.,,149,,[]
‚úÖ Best Practice: Specifying length for String columns improves database performance and storage.,"[26486, 227, 6705, 19939, 25, 18291, 4035, 4129, 329, 10903, 15180, 19575, 6831, 2854, 290, 6143, 13]",0.5,165,best_practice,29,Specifying length for String columns improves database performance and storage.,,149,"class TopTenTradableHolder(HolderBase, Mixin):","[4871, 5849, 24893, 2898, 324, 540, 39, 19892, 7, 39, 19892, 14881, 11, 15561, 259, 2599]"
‚úÖ Best Practice: Use of Float for numeric fields allows for decimal precision.,"[26486, 227, 6705, 19939, 25, 5765, 286, 48436, 329, 35575, 7032, 3578, 329, 32465, 15440, 13]",0.5,165,best_practice,31,Use of Float for numeric fields allows for decimal precision.,,165,,[]
‚úÖ Best Practice: Use of Float for numeric fields allows for decimal precision.,"[26486, 227, 6705, 19939, 25, 5765, 286, 48436, 329, 35575, 7032, 3578, 329, 32465, 15440, 13]",0.5,178,best_practice,33,Use of Float for numeric fields allows for decimal precision.,,165,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Use of Float for numeric fields allows for decimal precision.,"[26486, 227, 6705, 19939, 25, 5765, 286, 48436, 329, 35575, 7032, 3578, 329, 32465, 15440, 13]",0.5,193,best_practice,35,Use of Float for numeric fields allows for decimal precision.,,178,    report_period = Column(String(length=32)),"[220, 220, 220, 989, 62, 41007, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Use of Float for numeric fields allows for decimal precision.,"[26486, 227, 6705, 19939, 25, 5765, 286, 48436, 329, 35575, 7032, 3578, 329, 32465, 15440, 13]",0.5,193,best_practice,37,Use of Float for numeric fields allows for decimal precision.,,193,,[]
"üß† ML Signal: Class definition with inheritance, useful for understanding class hierarchy and relationships","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 24155, 11, 4465, 329, 4547, 1398, 18911, 290, 6958]",0.5,205,ml_signal,26,"Class definition with inheritance, useful for understanding class hierarchy and relationships",,193,    share_ratio = Column(Float),"[220, 220, 220, 2648, 62, 10366, 952, 796, 29201, 7, 43879, 8]"
"üß† ML Signal: Use of class variable for table name, indicating ORM pattern","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 7885, 329, 3084, 1438, 11, 12739, 6375, 44, 3912]",0.5,205,ml_signal,28,"Use of class variable for table name, indicating ORM pattern",,205,,[]
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,225,ml_signal,30,"Definition of database columns, useful for schema inference",,205,"    __tablename__ = ""top_ten_tradable_holder""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 4852, 62, 1452, 62, 2213, 324, 540, 62, 13829, 1]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,238,ml_signal,32,"Definition of database columns, useful for schema inference",,225,    provider = Column(String(length=32)),"[220, 220, 220, 10131, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,238,ml_signal,34,"Definition of database columns, useful for schema inference",,238,,[]
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,250,ml_signal,36,"Definition of database columns, useful for schema inference",,238,    report_date = Column(DateTime),"[220, 220, 220, 989, 62, 4475, 796, 29201, 7, 10430, 7575, 8]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,264,ml_signal,38,"Definition of database columns, useful for schema inference",,250,    #: ËÇ°‰∏ú‰ª£Á†Å,"[220, 220, 220, 1303, 25, 5525, 224, 94, 10310, 250, 47987, 163, 254, 223]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,279,ml_signal,40,"Definition of database columns, useful for schema inference",,264,    #: ËÇ°‰∏úÂêçÁß∞,"[220, 220, 220, 1303, 25, 5525, 224, 94, 10310, 250, 28938, 235, 163, 100, 108]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,292,ml_signal,42,"Definition of database columns, useful for schema inference",,279,    #: ÊåÅËÇ°Êï∞,"[220, 220, 220, 1303, 25, 10545, 234, 223, 164, 224, 94, 46763, 108]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,309,ml_signal,44,"Definition of database columns, useful for schema inference",,292,    #: ÊåÅËÇ°ÊØî‰æã,"[220, 220, 220, 1303, 25, 10545, 234, 223, 164, 224, 94, 162, 107, 242, 160, 122, 233]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,319,ml_signal,46,"Definition of database columns, useful for schema inference",,309,    #: ÂèòÂä®,"[220, 220, 220, 1303, 25, 10263, 237, 246, 27950, 101]"
"üß† ML Signal: Definition of database columns, useful for schema inference","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 6831, 15180, 11, 4465, 329, 32815, 32278]",0.5,335,ml_signal,48,"Definition of database columns, useful for schema inference",,319,    #: ÂèòÂä®ÊØî‰æã,"[220, 220, 220, 1303, 25, 10263, 237, 246, 27950, 101, 162, 107, 242, 160, 122, 233]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,350,ml_signal,40,Use of SQLAlchemy ORM for database modeling,,335,    #: ËÇ°‰∏úÂêçÁß∞,"[220, 220, 220, 1303, 25, 5525, 224, 94, 10310, 250, 28938, 235, 163, 100, 108]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,363,ml_signal,42,Use of SQLAlchemy ORM for database modeling,,350,    #: ÊåÅËÇ°Êï∞,"[220, 220, 220, 1303, 25, 10545, 234, 223, 164, 224, 94, 46763, 108]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,380,ml_signal,44,Use of SQLAlchemy ORM for database modeling,,363,    #: ÊåÅËÇ°ÊØî‰æã,"[220, 220, 220, 1303, 25, 10545, 234, 223, 164, 224, 94, 162, 107, 242, 160, 122, 233]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,390,ml_signal,46,Use of SQLAlchemy ORM for database modeling,,380,    #: ÂèòÂä®,"[220, 220, 220, 1303, 25, 10263, 237, 246, 27950, 101]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,406,ml_signal,48,Use of SQLAlchemy ORM for database modeling,,390,    #: ÂèòÂä®ÊØî‰æã,"[220, 220, 220, 1303, 25, 10263, 237, 246, 27950, 101, 162, 107, 242, 160, 122, 233]"
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,406,ml_signal,50,Use of SQLAlchemy ORM for database modeling,,406,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,406,ml_signal,50,Use of SQLAlchemy ORM for database modeling,,406,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,406,ml_signal,50,Use of SQLAlchemy ORM for database modeling,,406,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database modeling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 21128]",1.0,406,ml_signal,50,Use of SQLAlchemy ORM for database modeling,,406,,[]
üß† ML Signal: Registration of schema with specific providers and database,"[8582, 100, 254, 10373, 26484, 25, 24610, 286, 32815, 351, 2176, 9549, 290, 6831]",1.0,406,ml_signal,50,Registration of schema with specific providers and database,,406,,[]
‚úÖ Best Practice: Explicitly specifying providers and database details for schema registration,"[26486, 227, 6705, 19939, 25, 11884, 306, 31577, 9549, 290, 6831, 3307, 329, 32815, 9352]",1.0,406,best_practice,50,Explicitly specifying providers and database details for schema registration,,406,,[]
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,406,best_practice,50,Use of __all__ to define public API of the module,,406,,[]

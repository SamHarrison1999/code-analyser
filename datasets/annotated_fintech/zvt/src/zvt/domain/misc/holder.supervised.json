[
  {
    "line": 3,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Group related imports together for better readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      3519,
      17944,
      1978,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group related imports together for better readability."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Naming convention for base classes should be clear and descriptive.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      9831,
      329,
      2779,
      6097,
      815,
      307,
      1598,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Naming convention for base classes should be clear and descriptive."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Define a class-level variable for the table name to avoid magic strings",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      1398,
      12,
      5715,
      7885,
      329,
      262,
      3084,
      1438,
      284,
      3368,
      5536,
      13042
    ],
    "label": "best_practice",
    "reason": "Define a class-level variable for the table name to avoid magic strings"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Specify a maximum length for string columns to prevent excessive data storage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      257,
      5415,
      4129,
      329,
      4731,
      15180,
      284,
      2948,
      13181,
      1366,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify a maximum length for string columns to prevent excessive data storage"
  },
  {
    "line": 11,
    "text": "class HkHolder(HolderBase, Mixin):",
    "annotation": "\u2705 Best Practice: Specify a maximum length for string columns to prevent excessive data storage",
    "confidence": 0.5,
    "tokens": [
      4871,
      367,
      74,
      39,
      19892,
      7,
      39,
      19892,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 12,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      257,
      5415,
      4129,
      329,
      4731,
      15180,
      284,
      2948,
      13181,
      1366,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify a maximum length for string columns to prevent excessive data storage"
  },
  {
    "line": 13,
    "text": "    #: \u80a1\u7968\u4ee3\u7801",
    "annotation": "\u2705 Best Practice: Specify a maximum length for string columns to prevent excessive data storage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223
    ],
    "start_token": 25,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      257,
      5415,
      4129,
      329,
      4731,
      15180,
      284,
      2948,
      13181,
      1366,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify a maximum length for string columns to prevent excessive data storage"
  },
  {
    "line": 15,
    "text": "    #: \u80a1\u7968\u540d\u79f0",
    "annotation": "\u2705 Best Practice: Specify a maximum length for string columns to prevent excessive data storage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      224,
      94,
      163,
      98,
      101,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 40,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      257,
      5415,
      4129,
      329,
      4731,
      15180,
      284,
      2948,
      13181,
      1366,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify a maximum length for string columns to prevent excessive data storage"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the Float type is appropriate for financial data to avoid precision issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 56,
    "end_token": 56,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      48436,
      2099,
      318,
      5035,
      329,
      3176,
      1366,
      284,
      3368,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the Float type is appropriate for financial data to avoid precision issues"
  },
  {
    "line": 19,
    "text": "    holder_code = Column(String(length=32))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the Float type is appropriate for financial data to avoid precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15762,
      62,
      8189,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 56,
    "end_token": 71,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      48436,
      2099,
      318,
      5035,
      329,
      3176,
      1366,
      284,
      3368,
      15440,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the Float type is appropriate for financial data to avoid precision issues"
  },
  {
    "line": 15,
    "text": "    #: \u80a1\u7968\u540d\u79f0",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from multiple classes indicates a pattern of using mixins or base classes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      224,
      94,
      163,
      98,
      101,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 71,
    "end_token": 87,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3294,
      6097,
      9217,
      257,
      3912,
      286,
      1262,
      5022,
      1040,
      393,
      2779,
      6097,
      13
    ],
    "label": "ml_signal",
    "reason": "Inheritance from multiple classes indicates a pattern of using mixins or base classes."
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database table mapping.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 87,
    "end_token": 87,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      3084,
      16855,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database table mapping."
  },
  {
    "line": 19,
    "text": "    holder_code = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Specifying length for String columns improves database performance and storage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15762,
      62,
      8189,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 87,
    "end_token": 102,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      4035,
      4129,
      329,
      10903,
      15180,
      19575,
      6831,
      2854,
      290,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specifying length for String columns improves database performance and storage."
  },
  {
    "line": 21,
    "text": "    holder_name = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Specifying length for String columns improves database performance and storage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15762,
      62,
      3672,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 102,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      4035,
      4129,
      329,
      10903,
      15180,
      19575,
      6831,
      2854,
      290,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specifying length for String columns improves database performance and storage."
  },
  {
    "line": 23,
    "text": "    #: \u6301\u80a1\u6570\u91cf",
    "annotation": "\u2705 Best Practice: Specifying length for String columns improves database performance and storage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      234,
      223,
      164,
      224,
      94,
      46763,
      108,
      34932,
      237
    ],
    "start_token": 117,
    "end_token": 132,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      4035,
      4129,
      329,
      10903,
      15180,
      19575,
      6831,
      2854,
      290,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specifying length for String columns improves database performance and storage."
  },
  {
    "line": 25,
    "text": "    #: \u6301\u80a1\u6bd4\u4f8b",
    "annotation": "\u2705 Best Practice: Use of DateTime for date fields ensures proper date handling and querying.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      234,
      223,
      164,
      224,
      94,
      162,
      107,
      242,
      160,
      122,
      233
    ],
    "start_token": 132,
    "end_token": 149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      7536,
      7575,
      329,
      3128,
      7032,
      19047,
      1774,
      3128,
      9041,
      290,
      42517,
      1112,
      13
    ],
    "label": "best_practice",
    "reason": "Use of DateTime for date fields ensures proper date handling and querying."
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\u2705 Best Practice: Specifying length for String columns improves database performance and storage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 149,
    "end_token": 149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      4035,
      4129,
      329,
      10903,
      15180,
      19575,
      6831,
      2854,
      290,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specifying length for String columns improves database performance and storage."
  },
  {
    "line": 29,
    "text": "class TopTenTradableHolder(HolderBase, Mixin):",
    "annotation": "\u2705 Best Practice: Specifying length for String columns improves database performance and storage.",
    "confidence": 0.5,
    "tokens": [
      4871,
      5849,
      24893,
      2898,
      324,
      540,
      39,
      19892,
      7,
      39,
      19892,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 149,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      4035,
      4129,
      329,
      10903,
      15180,
      19575,
      6831,
      2854,
      290,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Specifying length for String columns improves database performance and storage."
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Float for numeric fields allows for decimal precision.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 165,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      35575,
      7032,
      3578,
      329,
      32465,
      15440,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Float for numeric fields allows for decimal precision."
  },
  {
    "line": 33,
    "text": "    code = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Use of Float for numeric fields allows for decimal precision.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 165,
    "end_token": 178,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      35575,
      7032,
      3578,
      329,
      32465,
      15440,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Float for numeric fields allows for decimal precision."
  },
  {
    "line": 35,
    "text": "    report_period = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Use of Float for numeric fields allows for decimal precision.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      989,
      62,
      41007,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 178,
    "end_token": 193,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      35575,
      7032,
      3578,
      329,
      32465,
      15440,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Float for numeric fields allows for decimal precision."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Float for numeric fields allows for decimal precision.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 193,
    "end_token": 193,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      35575,
      7032,
      3578,
      329,
      32465,
      15440,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Float for numeric fields allows for decimal precision."
  },
  {
    "line": 26,
    "text": "    share_ratio = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Class definition with inheritance, useful for understanding class hierarchy and relationships",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2648,
      62,
      10366,
      952,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 193,
    "end_token": 205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      351,
      24155,
      11,
      4465,
      329,
      4547,
      1398,
      18911,
      290,
      6958
    ],
    "label": "ml_signal",
    "reason": "Class definition with inheritance, useful for understanding class hierarchy and relationships"
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class variable for table name, indicating ORM pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 205,
    "end_token": 205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      7885,
      329,
      3084,
      1438,
      11,
      12739,
      6375,
      44,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of class variable for table name, indicating ORM pattern"
  },
  {
    "line": 30,
    "text": "    __tablename__ = \"top_ten_tradable_holder\"",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      4852,
      62,
      1452,
      62,
      2213,
      324,
      540,
      62,
      13829,
      1
    ],
    "start_token": 205,
    "end_token": 225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 32,
    "text": "    provider = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 225,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 238,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 36,
    "text": "    report_date = Column(DateTime)",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      989,
      62,
      4475,
      796,
      29201,
      7,
      10430,
      7575,
      8
    ],
    "start_token": 238,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 38,
    "text": "    #: \u80a1\u4e1c\u4ee3\u7801",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      224,
      94,
      10310,
      250,
      47987,
      163,
      254,
      223
    ],
    "start_token": 250,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 40,
    "text": "    #: \u80a1\u4e1c\u540d\u79f0",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      224,
      94,
      10310,
      250,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 264,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 42,
    "text": "    #: \u6301\u80a1\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      234,
      223,
      164,
      224,
      94,
      46763,
      108
    ],
    "start_token": 279,
    "end_token": 292,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 44,
    "text": "    #: \u6301\u80a1\u6bd4\u4f8b",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      234,
      223,
      164,
      224,
      94,
      162,
      107,
      242,
      160,
      122,
      233
    ],
    "start_token": 292,
    "end_token": 309,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 46,
    "text": "    #: \u53d8\u52a8",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      237,
      246,
      27950,
      101
    ],
    "start_token": 309,
    "end_token": 319,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 48,
    "text": "    #: \u53d8\u52a8\u6bd4\u4f8b",
    "annotation": "\ud83e\udde0 ML Signal: Definition of database columns, useful for schema inference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      237,
      246,
      27950,
      101,
      162,
      107,
      242,
      160,
      122,
      233
    ],
    "start_token": 319,
    "end_token": 335,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      6831,
      15180,
      11,
      4465,
      329,
      32815,
      32278
    ],
    "label": "ml_signal",
    "reason": "Definition of database columns, useful for schema inference"
  },
  {
    "line": 40,
    "text": "    #: \u80a1\u4e1c\u540d\u79f0",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      5525,
      224,
      94,
      10310,
      250,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 335,
    "end_token": 350,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 42,
    "text": "    #: \u6301\u80a1\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      234,
      223,
      164,
      224,
      94,
      46763,
      108
    ],
    "start_token": 350,
    "end_token": 363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 44,
    "text": "    #: \u6301\u80a1\u6bd4\u4f8b",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      234,
      223,
      164,
      224,
      94,
      162,
      107,
      242,
      160,
      122,
      233
    ],
    "start_token": 363,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 46,
    "text": "    #: \u53d8\u52a8",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      237,
      246,
      27950,
      101
    ],
    "start_token": 380,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 48,
    "text": "    #: \u53d8\u52a8\u6bd4\u4f8b",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      237,
      246,
      27950,
      101,
      162,
      107,
      242,
      160,
      122,
      233
    ],
    "start_token": 390,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database modeling",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database modeling"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Registration of schema with specific providers and database",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24610,
      286,
      32815,
      351,
      2176,
      9549,
      290,
      6831
    ],
    "label": "ml_signal",
    "reason": "Registration of schema with specific providers and database"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly specifying providers and database details for schema registration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      31577,
      9549,
      290,
      6831,
      3307,
      329,
      32815,
      9352
    ],
    "label": "best_practice",
    "reason": "Explicitly specifying providers and database details for schema registration"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
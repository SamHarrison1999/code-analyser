[
  {
    "line": 3,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 6,
    "text": "from zvt.contract.register import register_schema",
    "annotation": "\u2705 Best Practice: Naming the base class as OverallBase provides clarity on its purpose.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      30238,
      1330,
      7881,
      62,
      15952,
      2611
    ],
    "start_token": 12,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      262,
      2779,
      1398,
      355,
      14674,
      14881,
      3769,
      16287,
      319,
      663,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Naming the base class as OverallBase provides clarity on its purpose."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from OverallBase and Mixin suggests a pattern for class design",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      14674,
      14881,
      290,
      15561,
      259,
      5644,
      257,
      3912,
      329,
      1398,
      1486
    ],
    "label": "ml_signal",
    "reason": "Inheritance from OverallBase and Mixin suggests a pattern for class design"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database table mapping",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      3084,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database table mapping"
  },
  {
    "line": 11,
    "text": "#: \u5e02\u573a\u6574\u4f53\u4f30\u503c",
    "annotation": "\u2705 Best Practice: Specify length for String columns to optimize database storage",
    "confidence": 0.5,
    "tokens": [
      2,
      25,
      10263,
      116,
      224,
      28839,
      118,
      46763,
      112,
      19526,
      241,
      27670,
      108,
      161,
      222,
      120
    ],
    "start_token": 24,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      4129,
      329,
      10903,
      15180,
      284,
      27183,
      6831,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify length for String columns to optimize database storage"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Specify length for String columns to optimize database storage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 40,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      4129,
      329,
      10903,
      15180,
      284,
      27183,
      6831,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify length for String columns to optimize database storage"
  },
  {
    "line": 15,
    "text": "    __tablename__ = \"stock_summary\"",
    "annotation": "\u2705 Best Practice: Specify length for String columns to optimize database storage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      13578,
      62,
      49736,
      1
    ],
    "start_token": 40,
    "end_token": 54,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      4129,
      329,
      10903,
      15180,
      284,
      27183,
      6831,
      6143
    ],
    "label": "best_practice",
    "reason": "Specify length for String columns to optimize database storage"
  },
  {
    "line": 17,
    "text": "    provider = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Use of Float for numerical data to handle large and small numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 54,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      29052,
      1366,
      284,
      5412,
      1588,
      290,
      1402,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of Float for numerical data to handle large and small numbers"
  },
  {
    "line": 19,
    "text": "    name = Column(String(length=32))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential typo in 'total_tradable_vaule', should be 'total_tradable_value'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 67,
    "end_token": 80,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      46517,
      287,
      705,
      23350,
      62,
      2213,
      324,
      540,
      62,
      85,
      559,
      293,
      3256,
      815,
      307,
      705,
      23350,
      62,
      2213,
      324,
      540,
      62,
      8367,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential typo in 'total_tradable_vaule', should be 'total_tradable_value'"
  },
  {
    "line": 21,
    "text": "    total_value = Column(Float)",
    "annotation": "\u2705 Best Practice: Use of Float for numerical data to handle large and small numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2472,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 80,
    "end_token": 91,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      29052,
      1366,
      284,
      5412,
      1588,
      290,
      1402,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of Float for numerical data to handle large and small numbers"
  },
  {
    "line": 23,
    "text": "    pe = Column(Float)",
    "annotation": "\u2705 Best Practice: Use of Float for numerical data to handle large and small numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      613,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 91,
    "end_token": 100,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      29052,
      1366,
      284,
      5412,
      1588,
      290,
      1402,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of Float for numerical data to handle large and small numbers"
  },
  {
    "line": 25,
    "text": "    volume = Column(Float)",
    "annotation": "\u2705 Best Practice: Use of Float for numerical data to handle large and small numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6115,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 100,
    "end_token": 109,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      29052,
      1366,
      284,
      5412,
      1588,
      290,
      1402,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of Float for numerical data to handle large and small numbers"
  },
  {
    "line": 27,
    "text": "    turnover_rate = Column(Float)",
    "annotation": "\u2705 Best Practice: Use of Float for numerical data to handle large and small numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25079,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 109,
    "end_token": 120,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      29052,
      1366,
      284,
      5412,
      1588,
      290,
      1402,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of Float for numerical data to handle large and small numbers"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Float for numerical data to handle large and small numbers",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 120,
    "end_token": 120,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      48436,
      329,
      29052,
      1366,
      284,
      5412,
      1588,
      290,
      1402,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of Float for numerical data to handle large and small numbers"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 120,
    "end_token": 120,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 22,
    "text": "    total_tradable_vaule = Column(Float)",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2472,
      62,
      2213,
      324,
      540,
      62,
      85,
      559,
      293,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 120,
    "end_token": 137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 24,
    "text": "    pb = Column(Float)",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      279,
      65,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 137,
    "end_token": 147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 26,
    "text": "    turnover = Column(Float)",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25079,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 147,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 156,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 30,
    "text": "#: \u878d\u8d44\u878d\u5238\u6982\u51b5",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      2,
      25,
      5525,
      252,
      235,
      164,
      113,
      226,
      164,
      252,
      235,
      26344,
      116,
      162,
      99,
      224,
      37863,
      113
    ],
    "start_token": 156,
    "end_token": 174,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 174,
    "end_token": 174,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 34,
    "text": "    __tablename__ = \"margin_trading_summary\"",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      36153,
      62,
      2213,
      4980,
      62,
      49736,
      1
    ],
    "start_token": 174,
    "end_token": 191,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 30,
    "text": "#: \u878d\u8d44\u878d\u5238\u6982\u51b5",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      2,
      25,
      5525,
      252,
      235,
      164,
      113,
      226,
      164,
      252,
      235,
      26344,
      116,
      162,
      99,
      224,
      37863,
      113
    ],
    "start_token": 191,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 209,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 34,
    "text": "    __tablename__ = \"margin_trading_summary\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      36153,
      62,
      2213,
      4980,
      62,
      49736,
      1
    ],
    "start_token": 209,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 36,
    "text": "    code = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 226,
    "end_token": 239,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 38,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 239,
    "end_token": 239,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 40,
    "text": "    margin_value = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10330,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 239,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 40,
    "text": "    margin_value = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10330,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 250,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 40,
    "text": "    margin_value = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10330,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 261,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 40,
    "text": "    margin_value = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10330,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 272,
    "end_token": 283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 40,
    "text": "    margin_value = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Registration of schema with specific providers and database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10330,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 283,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24610,
      286,
      32815,
      351,
      2176,
      9549,
      290,
      6831
    ],
    "label": "ml_signal",
    "reason": "Registration of schema with specific providers and database"
  },
  {
    "line": 40,
    "text": "    margin_value = Column(Float)",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10330,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 294,
    "end_token": 305,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
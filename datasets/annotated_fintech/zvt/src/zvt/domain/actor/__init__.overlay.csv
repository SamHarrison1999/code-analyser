annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Explicitly importing all from a module can make it clear what is being used.,"[26486, 227, 6705, 19939, 25, 11884, 306, 33332, 477, 422, 257, 8265, 460, 787, 340, 1598, 644, 318, 852, 973, 13]",1.0,0,best_practice,2,Explicitly importing all from a module can make it clear what is being used.,,0,,[]
‚ö†Ô∏è SAST Risk (Medium): Using wildcard imports can lead to namespace collisions and make the code harder to understand.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 4295, 9517, 17944, 460, 1085, 284, 25745, 31998, 290, 787, 262, 2438, 7069, 284, 1833, 13]",1.0,7,sast_risk,4,Using wildcard imports can lead to namespace collisions and make the code harder to understand.,Medium,0,# the __all__ is generated,"[2, 262, 11593, 439, 834, 318, 7560]"
üß† ML Signal: Aggregating __all__ from multiple modules indicates dynamic module exposure.,"[8582, 100, 254, 10373, 26484, 25, 19015, 2301, 803, 11593, 439, 834, 422, 3294, 13103, 9217, 8925, 8265, 7111, 13]",0.5,7,ml_signal,6,Aggregating __all__ from multiple modules indicates dynamic module exposure.,,7,,[]
‚úÖ Best Practice: Explicitly importing all from a module can make it clear what is being used.,"[26486, 227, 6705, 19939, 25, 11884, 306, 33332, 477, 422, 257, 8265, 460, 787, 340, 1598, 644, 318, 852, 973, 13]",1.0,15,best_practice,7,Explicitly importing all from a module can make it clear what is being used.,,7,# __init__.py structure:,"[2, 11593, 15003, 834, 13, 9078, 4645, 25]"
‚ö†Ô∏è SAST Risk (Medium): Using wildcard imports can lead to namespace collisions and make the code harder to understand.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 4295, 9517, 17944, 460, 1085, 284, 25745, 31998, 290, 787, 262, 2438, 7069, 284, 1833, 13]",1.0,23,sast_risk,7,Using wildcard imports can lead to namespace collisions and make the code harder to understand.,Medium,15,# __init__.py structure:,"[2, 11593, 15003, 834, 13, 9078, 4645, 25]"
üß† ML Signal: Aggregating __all__ from multiple modules indicates dynamic module exposure.,"[8582, 100, 254, 10373, 26484, 25, 19015, 2301, 803, 11593, 439, 834, 422, 3294, 13103, 9217, 8925, 8265, 7111, 13]",0.5,31,ml_signal,7,Aggregating __all__ from multiple modules indicates dynamic module exposure.,,23,# __init__.py structure:,"[2, 11593, 15003, 834, 13, 9078, 4645, 25]"

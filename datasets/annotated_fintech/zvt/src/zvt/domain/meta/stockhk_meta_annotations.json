[
  {
    "line": 3,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Naming convention for base classes should be consistent and descriptive.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      9831,
      329,
      2779,
      6097,
      815,
      307,
      6414,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Naming convention for base classes should be consistent and descriptive."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators to register entities indicates a pattern for extensibility and plugin-like architecture.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      284,
      7881,
      12066,
      9217,
      257,
      3912,
      329,
      1070,
      641,
      2247,
      290,
      13877,
      12,
      2339,
      10959,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators to register entities indicates a pattern for extensibility and plugin-like architecture."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of SQLAlchemy's Column to define table columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      3084,
      15180
    ],
    "label": "best_practice",
    "reason": "Use of SQLAlchemy's Column to define table columns"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a return type hint for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      1441,
      2099,
      9254,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding a return type hint for better readability and maintainability"
  },
  {
    "line": 20,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 12,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and return value"
  },
  {
    "line": 25,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a boolean parameter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 20,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      25131,
      11507
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a boolean parameter"
  },
  {
    "line": 29,
    "text": "    def get_trading_intervals(cls, include_bidding_time=False):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `register_schema` is not properly validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      2213,
      4980,
      62,
      3849,
      12786,
      7,
      565,
      82,
      11,
      2291,
      62,
      65,
      13494,
      62,
      2435,
      28,
      25101,
      2599
    ],
    "start_token": 28,
    "end_token": 52,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      30238,
      62,
      15952,
      2611,
      63,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `register_schema` is not properly validated or sanitized"
  },
  {
    "line": 29,
    "text": "    def get_trading_intervals(cls, include_bidding_time=False):",
    "annotation": "\u2705 Best Practice: Explicitly defining `__all__` to control module exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      2213,
      4980,
      62,
      3849,
      12786,
      7,
      565,
      82,
      11,
      2291,
      62,
      65,
      13494,
      62,
      2435,
      28,
      25101,
      2599
    ],
    "start_token": 52,
    "end_token": 76,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      4600,
      834,
      439,
      834,
      63,
      284,
      1630,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining `__all__` to control module exports"
  }
]
[
  {
    "line": 3,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability."
  },
  {
    "line": 6,
    "text": "from zvt.contract.register import register_schema",
    "annotation": "\u2705 Best Practice: Naming convention for base classes should be consistent and descriptive.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      30238,
      1330,
      7881,
      62,
      15952,
      2611
    ],
    "start_token": 12,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      9831,
      329,
      2779,
      6097,
      815,
      307,
      6414,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Naming convention for base classes should be consistent and descriptive."
  },
  {
    "line": 8,
    "text": "DividendFinancingBase = declarative_base()",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      35,
      1699,
      437,
      18467,
      5077,
      14881,
      796,
      2377,
      283,
      876,
      62,
      8692,
      3419
    ],
    "start_token": 24,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 37,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 12,
    "text": "    __tablename__ = \"dividend_financing\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      67,
      1699,
      437,
      62,
      15643,
      5077,
      1
    ],
    "start_token": 37,
    "end_token": 54,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 14,
    "text": "    provider = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 54,
    "end_token": 67,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 67,
    "end_token": 67,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 18,
    "text": "    dividend_money = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      30494,
      62,
      26316,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 67,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 20,
    "text": "    #: \u65b0\u80a1",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      244,
      108,
      164,
      224,
      94
    ],
    "start_token": 78,
    "end_token": 89,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 22,
    "text": "    ipo_raising_fund = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      20966,
      78,
      62,
      32741,
      62,
      10990,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 89,
    "end_token": 103,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 24,
    "text": "    #: \u589e\u53d1",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy ORM for database interaction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      95,
      252,
      20998,
      239
    ],
    "start_token": 103,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      6375,
      44,
      329,
      6831,
      10375
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy ORM for database interaction"
  },
  {
    "line": 18,
    "text": "    dividend_money = Column(Float)",
    "annotation": "\u2705 Best Practice: Define a table name for ORM mapping to ensure clarity and avoid errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      30494,
      62,
      26316,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 113,
    "end_token": 124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      3084,
      1438,
      329,
      6375,
      44,
      16855,
      284,
      4155,
      16287,
      290,
      3368,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Define a table name for ORM mapping to ensure clarity and avoid errors."
  },
  {
    "line": 20,
    "text": "    #: \u65b0\u80a1",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's Column to define database schema.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      244,
      108,
      164,
      224,
      94
    ],
    "start_token": 124,
    "end_token": 135,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's Column to define database schema."
  },
  {
    "line": 22,
    "text": "    ipo_raising_fund = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's Column to define database schema.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20966,
      78,
      62,
      32741,
      62,
      10990,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 135,
    "end_token": 149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's Column to define database schema."
  },
  {
    "line": 24,
    "text": "    #: \u589e\u53d1",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's Column to define database schema.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      95,
      252,
      20998,
      239
    ],
    "start_token": 149,
    "end_token": 159,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's Column to define database schema."
  },
  {
    "line": 26,
    "text": "    spo_raising_fund = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's Column to define database schema.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15106,
      62,
      32741,
      62,
      10990,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 159,
    "end_token": 172,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's Column to define database schema."
  },
  {
    "line": 28,
    "text": "    rights_issues = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's Column to define database schema.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2489,
      62,
      37165,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 172,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's Column to define database schema."
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of SQLAlchemy's Column to define database schema.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 183,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of SQLAlchemy's Column to define database schema."
  },
  {
    "line": 25,
    "text": "    spo_issues = Column(Float)",
    "annotation": "\u2705 Best Practice: Class inherits from DividendFinancingBase and Mixin, indicating a structured design.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15106,
      62,
      37165,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 183,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      10639,
      896,
      422,
      360,
      1699,
      437,
      18467,
      5077,
      14881,
      290,
      15561,
      259,
      11,
      12739,
      257,
      20793,
      1486,
      13
    ],
    "label": "best_practice",
    "reason": "Class inherits from DividendFinancingBase and Mixin, indicating a structured design."
  },
  {
    "line": 27,
    "text": "    #: \u914d\u80a1",
    "annotation": "\u2705 Best Practice: Use of __tablename__ to explicitly define the table name in the database.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      16268,
      227,
      235,
      164,
      224,
      94
    ],
    "start_token": 194,
    "end_token": 205,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      8658,
      11925,
      480,
      834,
      284,
      11777,
      8160,
      262,
      3084,
      1438,
      287,
      262,
      6831,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __tablename__ to explicitly define the table name in the database."
  },
  {
    "line": 29,
    "text": "    rights_raising_fund = Column(Float)",
    "annotation": "\u2705 Best Practice: Use of Column with String type for provider, ensuring consistent data type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2489,
      62,
      32741,
      62,
      10990,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 205,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      29201,
      351,
      10903,
      2099,
      329,
      10131,
      11,
      13359,
      6414,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Column with String type for provider, ensuring consistent data type."
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Column with String type for code, ensuring consistent data type.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 218,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      29201,
      351,
      10903,
      2099,
      329,
      2438,
      11,
      13359,
      6414,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Column with String type for code, ensuring consistent data type."
  },
  {
    "line": 33,
    "text": "    __tablename__ = \"dividend_detail\"",
    "annotation": "\u2705 Best Practice: Use of Column with Float type for spo_issues, ensuring consistent data type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11593,
      8658,
      11925,
      480,
      834,
      796,
      366,
      67,
      1699,
      437,
      62,
      49170,
      1
    ],
    "start_token": 218,
    "end_token": 234,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      329,
      15106,
      62,
      37165,
      11,
      13359,
      6414,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Column with Float type for spo_issues, ensuring consistent data type."
  },
  {
    "line": 35,
    "text": "    provider = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Use of Column with Float type for spo_price, ensuring consistent data type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 234,
    "end_token": 247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      329,
      15106,
      62,
      20888,
      11,
      13359,
      6414,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Column with Float type for spo_price, ensuring consistent data type."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Column with Float type for spo_raising_fund, ensuring consistent data type.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 247,
    "end_token": 247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      29201,
      351,
      48436,
      2099,
      329,
      15106,
      62,
      32741,
      62,
      10990,
      11,
      13359,
      6414,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Column with Float type for spo_raising_fund, ensuring consistent data type."
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 247,
    "end_token": 247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 36,
    "text": "    code = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 247,
    "end_token": 260,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 38,
    "text": "    #: \u516c\u544a\u65e5",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      227,
      105,
      37772,
      232,
      33768,
      98
    ],
    "start_token": 260,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 39,
    "text": "    announce_date = Column(DateTime)",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      5453,
      62,
      4475,
      796,
      29201,
      7,
      10430,
      7575,
      8
    ],
    "start_token": 272,
    "end_token": 284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 42,
    "text": "    #: \u9664\u6743\u9664\u606f\u65e5",
    "annotation": "\u2705 Best Practice: Define column types and constraints for database schema",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      16268,
      247,
      97,
      30266,
      225,
      165,
      247,
      97,
      162,
      223,
      107,
      33768,
      98
    ],
    "start_token": 284,
    "end_token": 302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      5721,
      3858,
      290,
      17778,
      329,
      6831,
      32815
    ],
    "label": "best_practice",
    "reason": "Define column types and constraints for database schema"
  },
  {
    "line": 42,
    "text": "    #: \u9664\u6743\u9664\u606f\u65e5",
    "annotation": "\ud83e\udde0 ML Signal: Usage of register_schema function indicates schema registration pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      16268,
      247,
      97,
      30266,
      225,
      165,
      247,
      97,
      162,
      223,
      107,
      33768,
      98
    ],
    "start_token": 302,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7881,
      62,
      15952,
      2611,
      2163,
      9217,
      32815,
      9352,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of register_schema function indicates schema registration pattern"
  },
  {
    "line": 42,
    "text": "    #: \u9664\u6743\u9664\u606f\u65e5",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      16268,
      247,
      97,
      30266,
      225,
      165,
      247,
      97,
      162,
      223,
      107,
      33768,
      98
    ],
    "start_token": 320,
    "end_token": 338,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
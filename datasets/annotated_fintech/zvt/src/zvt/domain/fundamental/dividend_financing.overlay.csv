annotation,annotation_tokens,confidence,end_token,label,line,reason,start_token,text,tokens
‚úÖ Best Practice: Grouping related imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 13]",1.0,12,best_practice,3,Grouping related imports together improves readability.,0,from sqlalchemy.orm import declarative_base,"[6738, 44161, 282, 26599, 13, 579, 1330, 2377, 283, 876, 62, 8692]"
‚úÖ Best Practice: Naming convention for base classes should be consistent and descriptive.,"[26486, 227, 6705, 19939, 25, 399, 3723, 9831, 329, 2779, 6097, 815, 307, 6414, 290, 35644, 13]",1.0,24,best_practice,6,Naming convention for base classes should be consistent and descriptive.,12,from zvt.contract.register import register_schema,"[6738, 1976, 36540, 13, 28484, 13, 30238, 1330, 7881, 62, 15952, 2611]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,37,ml_signal,8,Use of SQLAlchemy ORM for database interaction,24,DividendFinancingBase = declarative_base(),"[35, 1699, 437, 18467, 5077, 14881, 796, 2377, 283, 876, 62, 8692, 3419]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,37,ml_signal,10,Use of SQLAlchemy ORM for database interaction,37,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,54,ml_signal,12,Use of SQLAlchemy ORM for database interaction,37,"    __tablename__ = ""dividend_financing""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 67, 1699, 437, 62, 15643, 5077, 1]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,67,ml_signal,14,Use of SQLAlchemy ORM for database interaction,54,    provider = Column(String(length=32)),"[220, 220, 220, 10131, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,67,ml_signal,16,Use of SQLAlchemy ORM for database interaction,67,,[]
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,78,ml_signal,18,Use of SQLAlchemy ORM for database interaction,67,    dividend_money = Column(Float),"[220, 220, 220, 30494, 62, 26316, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,89,ml_signal,20,Use of SQLAlchemy ORM for database interaction,78,    #: Êñ∞ËÇ°,"[220, 220, 220, 1303, 25, 10545, 244, 108, 164, 224, 94]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,103,ml_signal,22,Use of SQLAlchemy ORM for database interaction,89,    ipo_raising_fund = Column(Float),"[220, 220, 220, 20966, 78, 62, 32741, 62, 10990, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Use of SQLAlchemy ORM for database interaction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 6375, 44, 329, 6831, 10375]",1.0,113,ml_signal,24,Use of SQLAlchemy ORM for database interaction,103,    #: Â¢ûÂèë,"[220, 220, 220, 1303, 25, 10263, 95, 252, 20998, 239]"
‚úÖ Best Practice: Define a table name for ORM mapping to ensure clarity and avoid errors.,"[26486, 227, 6705, 19939, 25, 2896, 500, 257, 3084, 1438, 329, 6375, 44, 16855, 284, 4155, 16287, 290, 3368, 8563, 13]",0.5,124,best_practice,18,Define a table name for ORM mapping to ensure clarity and avoid errors.,113,    dividend_money = Column(Float),"[220, 220, 220, 30494, 62, 26316, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Usage of SQLAlchemy's Column to define database schema.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 338, 29201, 284, 8160, 6831, 32815, 13]",0.5,135,ml_signal,20,Usage of SQLAlchemy's Column to define database schema.,124,    #: Êñ∞ËÇ°,"[220, 220, 220, 1303, 25, 10545, 244, 108, 164, 224, 94]"
üß† ML Signal: Usage of SQLAlchemy's Column to define database schema.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 338, 29201, 284, 8160, 6831, 32815, 13]",0.5,149,ml_signal,22,Usage of SQLAlchemy's Column to define database schema.,135,    ipo_raising_fund = Column(Float),"[220, 220, 220, 20966, 78, 62, 32741, 62, 10990, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Usage of SQLAlchemy's Column to define database schema.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 338, 29201, 284, 8160, 6831, 32815, 13]",0.5,159,ml_signal,24,Usage of SQLAlchemy's Column to define database schema.,149,    #: Â¢ûÂèë,"[220, 220, 220, 1303, 25, 10263, 95, 252, 20998, 239]"
üß† ML Signal: Usage of SQLAlchemy's Column to define database schema.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 338, 29201, 284, 8160, 6831, 32815, 13]",0.5,172,ml_signal,26,Usage of SQLAlchemy's Column to define database schema.,159,    spo_raising_fund = Column(Float),"[220, 220, 220, 15106, 62, 32741, 62, 10990, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Usage of SQLAlchemy's Column to define database schema.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 338, 29201, 284, 8160, 6831, 32815, 13]",0.5,183,ml_signal,28,Usage of SQLAlchemy's Column to define database schema.,172,    rights_issues = Column(Float),"[220, 220, 220, 2489, 62, 37165, 796, 29201, 7, 43879, 8]"
üß† ML Signal: Usage of SQLAlchemy's Column to define database schema.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16363, 2348, 26599, 338, 29201, 284, 8160, 6831, 32815, 13]",0.5,183,ml_signal,30,Usage of SQLAlchemy's Column to define database schema.,183,,[]
"‚úÖ Best Practice: Class inherits from DividendFinancingBase and Mixin, indicating a structured design.","[26486, 227, 6705, 19939, 25, 5016, 10639, 896, 422, 360, 1699, 437, 18467, 5077, 14881, 290, 15561, 259, 11, 12739, 257, 20793, 1486, 13]",0.5,194,best_practice,25,"Class inherits from DividendFinancingBase and Mixin, indicating a structured design.",183,    spo_issues = Column(Float),"[220, 220, 220, 15106, 62, 37165, 796, 29201, 7, 43879, 8]"
‚úÖ Best Practice: Use of __tablename__ to explicitly define the table name in the database.,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 8658, 11925, 480, 834, 284, 11777, 8160, 262, 3084, 1438, 287, 262, 6831, 13]",0.5,205,best_practice,27,Use of __tablename__ to explicitly define the table name in the database.,194,    #: ÈÖçËÇ°,"[220, 220, 220, 1303, 25, 16268, 227, 235, 164, 224, 94]"
"‚úÖ Best Practice: Use of Column with String type for provider, ensuring consistent data type.","[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 329, 10131, 11, 13359, 6414, 1366, 2099, 13]",0.5,218,best_practice,29,"Use of Column with String type for provider, ensuring consistent data type.",205,    rights_raising_fund = Column(Float),"[220, 220, 220, 2489, 62, 32741, 62, 10990, 796, 29201, 7, 43879, 8]"
"‚úÖ Best Practice: Use of Column with String type for code, ensuring consistent data type.","[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 10903, 2099, 329, 2438, 11, 13359, 6414, 1366, 2099, 13]",0.5,218,best_practice,31,"Use of Column with String type for code, ensuring consistent data type.",218,,[]
"‚úÖ Best Practice: Use of Column with Float type for spo_issues, ensuring consistent data type.","[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 48436, 2099, 329, 15106, 62, 37165, 11, 13359, 6414, 1366, 2099, 13]",0.5,234,best_practice,33,"Use of Column with Float type for spo_issues, ensuring consistent data type.",218,"    __tablename__ = ""dividend_detail""","[220, 220, 220, 11593, 8658, 11925, 480, 834, 796, 366, 67, 1699, 437, 62, 49170, 1]"
"‚úÖ Best Practice: Use of Column with Float type for spo_price, ensuring consistent data type.","[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 48436, 2099, 329, 15106, 62, 20888, 11, 13359, 6414, 1366, 2099, 13]",0.5,247,best_practice,35,"Use of Column with Float type for spo_price, ensuring consistent data type.",234,    provider = Column(String(length=32)),"[220, 220, 220, 10131, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
"‚úÖ Best Practice: Use of Column with Float type for spo_raising_fund, ensuring consistent data type.","[26486, 227, 6705, 19939, 25, 5765, 286, 29201, 351, 48436, 2099, 329, 15106, 62, 32741, 62, 10990, 11, 13359, 6414, 1366, 2099, 13]",0.5,247,best_practice,37,"Use of Column with Float type for spo_raising_fund, ensuring consistent data type.",247,,[]
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",1.0,247,best_practice,34,Define column types and constraints for database schema,247,,[]
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",1.0,260,best_practice,36,Define column types and constraints for database schema,247,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",1.0,272,best_practice,38,Define column types and constraints for database schema,260,    #: ÂÖ¨ÂëäÊó•,"[220, 220, 220, 1303, 25, 10263, 227, 105, 37772, 232, 33768, 98]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",1.0,284,best_practice,39,Define column types and constraints for database schema,272,    announce_date = Column(DateTime),"[220, 220, 220, 5453, 62, 4475, 796, 29201, 7, 10430, 7575, 8]"
‚úÖ Best Practice: Define column types and constraints for database schema,"[26486, 227, 6705, 19939, 25, 2896, 500, 5721, 3858, 290, 17778, 329, 6831, 32815]",1.0,302,best_practice,42,Define column types and constraints for database schema,284,    #: Èô§ÊùÉÈô§ÊÅØÊó•,"[220, 220, 220, 1303, 25, 16268, 247, 97, 30266, 225, 165, 247, 97, 162, 223, 107, 33768, 98]"
üß† ML Signal: Usage of register_schema function indicates schema registration pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7881, 62, 15952, 2611, 2163, 9217, 32815, 9352, 3912]",1.0,320,ml_signal,42,Usage of register_schema function indicates schema registration pattern,302,    #: Èô§ÊùÉÈô§ÊÅØÊó•,"[220, 220, 220, 1303, 25, 16268, 247, 97, 30266, 225, 165, 247, 97, 162, 223, 107, 33768, 98]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,338,best_practice,42,Use of __all__ to define public API of the module,320,    #: Èô§ÊùÉÈô§ÊÅØÊó•,"[220, 220, 220, 1303, 25, 16268, 247, 97, 30266, 225, 165, 247, 97, 162, 223, 107, 33768, 98]"

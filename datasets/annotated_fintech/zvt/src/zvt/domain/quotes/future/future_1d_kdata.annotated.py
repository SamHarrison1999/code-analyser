# -*- coding: utf-8 -*-
# âœ… Best Practice: Grouping imports from the same module together improves readability.
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base

# ðŸ§  ML Signal: Usage of SQLAlchemy's declarative_base indicates ORM pattern.
# âœ… Best Practice: Class definition should be followed by a docstring explaining its purpose and usage.
from zvt.contract.register import register_schema
from zvt.domain.quotes import FutureKdataCommon
# ðŸ§  ML Signal: Use of dunder (double underscore) variable to define a table name in an ORM context.

# ðŸ§  ML Signal: Function call pattern for registering a schema, indicating a setup or configuration step.
# âœ… Best Practice: Consider adding a comment explaining the purpose of registering the schema.
# âœ… Best Practice: Use of __all__ to define public API of the module, aiding in code readability and maintenance.
KdataBase = declarative_base()


class Future1dKdata(KdataBase, FutureKdataCommon):
    __tablename__ = "future_1d_kdata"


register_schema(providers=["em"], db_name="future_1d_kdata", schema_base=KdataBase, entity_type="future")


# the __all__ is generated
__all__ = ["Future1dKdata"]
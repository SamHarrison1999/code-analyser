[
  {
    "line": 2,
    "text": "from sqlalchemy import String, Column, Float, Integer, JSON",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      1330,
      10903,
      11,
      29201,
      11,
      48436,
      11,
      34142,
      11,
      19449
    ],
    "start_token": 0,
    "end_token": 14,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 4,
    "text": "from zvt.contract import Mixin",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      1330,
      15561,
      259
    ],
    "start_token": 14,
    "end_token": 22,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 22,
    "end_token": 22,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 8,
    "text": "    provider = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 22,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 10,
    "text": "    name = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 35,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 12,
    "text": "    # level = Column(Enum(IntervalLevel, values_callable=enum_value))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      1241,
      796,
      29201,
      7,
      4834,
      388,
      7,
      9492,
      2100,
      4971,
      11,
      3815,
      62,
      13345,
      540,
      28,
      44709,
      62,
      8367,
      4008
    ],
    "start_token": 48,
    "end_token": 72,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 72,
    "end_token": 72,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 16,
    "text": "    open = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1280,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 72,
    "end_token": 81,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 18,
    "text": "    close = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1969,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 81,
    "end_token": 90,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 20,
    "text": "    high = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1029,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 90,
    "end_token": 99,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 22,
    "text": "    low = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1877,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 99,
    "end_token": 108,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 24,
    "text": "    volume = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6115,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 108,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 26,
    "text": "    turnover = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column to define database schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25079,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 117,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column to define database schema"
  },
  {
    "line": 16,
    "text": "    open = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Class definition with multiple attributes indicates a data model pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1280,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 126,
    "end_token": 135,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      351,
      3294,
      12608,
      9217,
      257,
      1366,
      2746,
      3912
    ],
    "label": "ml_signal",
    "reason": "Class definition with multiple attributes indicates a data model pattern"
  },
  {
    "line": 18,
    "text": "    close = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1969,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 135,
    "end_token": 144,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 20,
    "text": "    high = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1029,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 144,
    "end_token": 153,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 22,
    "text": "    low = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1877,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 153,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 24,
    "text": "    volume = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6115,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 162,
    "end_token": 171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 26,
    "text": "    turnover = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      25079,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 171,
    "end_token": 180,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 28,
    "text": "    change_pct = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 180,
    "end_token": 192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 30,
    "text": "    turnover_rate = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      25079,
      62,
      4873,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 192,
    "end_token": 203,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 203,
    "end_token": 203,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 34,
    "text": "    #: UNIX\u65f6\u95f4\u6233",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      4725,
      10426,
      33768,
      114,
      29785,
      112,
      22755,
      111
    ],
    "start_token": 203,
    "end_token": 216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 36,
    "text": "    #: \u5f00\u76d8\u4ef7",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      120,
      222,
      33566,
      246,
      20015,
      115
    ],
    "start_token": 216,
    "end_token": 228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 38,
    "text": "    #: \u6536\u76d8\u4ef7/\u5f53\u524d\u4ef7\u683c",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      242,
      114,
      33566,
      246,
      20015,
      115,
      14,
      37605,
      241,
      30298,
      235,
      20015,
      115,
      43718,
      120
    ],
    "start_token": 228,
    "end_token": 249,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 40,
    "text": "    #: \u6700\u9ad8\u4ef7",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy Column for ORM mapping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      42164,
      222,
      165,
      45865,
      20015,
      115
    ],
    "start_token": 249,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      29201,
      329,
      6375,
      44,
      16855
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy Column for ORM mapping"
  },
  {
    "line": 29,
    "text": "    # \u6362\u624b\u7387",
    "annotation": "\u2705 Best Practice: Use of inheritance to extend functionality from a base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      235,
      95,
      33699,
      233,
      163,
      236,
      229
    ],
    "start_token": 260,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24155,
      284,
      9117,
      11244,
      422,
      257,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of inheritance to extend functionality from a base class"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'pass' to indicate an intentionally empty class definition",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      6603,
      6,
      284,
      7603,
      281,
      16464,
      6565,
      1398,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of 'pass' to indicate an intentionally empty class definition"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of inheritance to extend functionality from a base class",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24155,
      284,
      9117,
      11244,
      422,
      257,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of inheritance to extend functionality from a base class"
  },
  {
    "line": 33,
    "text": "class TickCommon(Mixin):",
    "annotation": "\u2705 Best Practice: Use of 'pass' to indicate an intentionally empty class",
    "confidence": 0.5,
    "tokens": [
      4871,
      46093,
      17227,
      7,
      35608,
      259,
      2599
    ],
    "start_token": 272,
    "end_token": 279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      6603,
      6,
      284,
      7603,
      281,
      16464,
      6565,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of 'pass' to indicate an intentionally empty class"
  },
  {
    "line": 33,
    "text": "class TickCommon(Mixin):",
    "annotation": "\u2705 Best Practice: Use of inheritance to extend functionality from a base class",
    "confidence": 1.0,
    "tokens": [
      4871,
      46093,
      17227,
      7,
      35608,
      259,
      2599
    ],
    "start_token": 279,
    "end_token": 286,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24155,
      284,
      9117,
      11244,
      422,
      257,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of inheritance to extend functionality from a base class"
  },
  {
    "line": 35,
    "text": "    time = Column(Integer)",
    "annotation": "\u2705 Best Practice: Use of 'pass' to indicate an intentionally empty class definition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      640,
      796,
      29201,
      7,
      46541,
      8
    ],
    "start_token": 286,
    "end_token": 295,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      6603,
      6,
      284,
      7603,
      281,
      16464,
      6565,
      1398,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of 'pass' to indicate an intentionally empty class definition"
  },
  {
    "line": 35,
    "text": "    time = Column(Integer)",
    "annotation": "\u2705 Best Practice: Class should have a docstring to describe its purpose and usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      640,
      796,
      29201,
      7,
      46541,
      8
    ],
    "start_token": 295,
    "end_token": 304,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      423,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class should have a docstring to describe its purpose and usage"
  },
  {
    "line": 37,
    "text": "    open = Column(Float)",
    "annotation": "\u2705 Best Practice: Class attributes should have comments or docstrings explaining their purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1280,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 304,
    "end_token": 313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      423,
      3651,
      393,
      2205,
      37336,
      11170,
      511,
      4007
    ],
    "label": "best_practice",
    "reason": "Class attributes should have comments or docstrings explaining their purpose"
  },
  {
    "line": 39,
    "text": "    close = Column(Float)",
    "annotation": "\u2705 Best Practice: Class attributes should have comments or docstrings explaining their purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1969,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 313,
    "end_token": 322,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      423,
      3651,
      393,
      2205,
      37336,
      11170,
      511,
      4007
    ],
    "label": "best_practice",
    "reason": "Class attributes should have comments or docstrings explaining their purpose"
  },
  {
    "line": 38,
    "text": "    #: \u6536\u76d8\u4ef7/\u5f53\u524d\u4ef7\u683c",
    "annotation": "\u2705 Best Practice: Use of inheritance to extend functionality from a base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      242,
      114,
      33566,
      246,
      20015,
      115,
      14,
      37605,
      241,
      30298,
      235,
      20015,
      115,
      43718,
      120
    ],
    "start_token": 322,
    "end_token": 343,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24155,
      284,
      9117,
      11244,
      422,
      257,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of inheritance to extend functionality from a base class"
  },
  {
    "line": 40,
    "text": "    #: \u6700\u9ad8\u4ef7",
    "annotation": "\u2705 Best Practice: Use of inheritance to extend functionality from a base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      42164,
      222,
      165,
      45865,
      20015,
      115
    ],
    "start_token": 343,
    "end_token": 354,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24155,
      284,
      9117,
      11244,
      422,
      257,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of inheritance to extend functionality from a base class"
  },
  {
    "line": 42,
    "text": "    #: \u6700\u4f4e\u4ef7",
    "annotation": "\u2705 Best Practice: Use of inheritance to extend functionality from a base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      42164,
      222,
      19526,
      236,
      20015,
      115
    ],
    "start_token": 354,
    "end_token": 365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24155,
      284,
      9117,
      11244,
      422,
      257,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of inheritance to extend functionality from a base class"
  },
  {
    "line": 44,
    "text": "    #: \u6210\u4ea4\u91cf",
    "annotation": "\u2705 Best Practice: Class should inherit from a base class to promote code reuse and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      230,
      238,
      12859,
      97,
      34932,
      237
    ],
    "start_token": 365,
    "end_token": 377,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      7719,
      2438,
      32349,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Class should inherit from a base class to promote code reuse and maintainability"
  },
  {
    "line": 46,
    "text": "    #: \u6210\u4ea4\u91d1\u989d",
    "annotation": "\u2705 Best Practice: Class attributes are defined using SQLAlchemy's Column, which is a common pattern for ORM models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10545,
      230,
      238,
      12859,
      97,
      34932,
      239,
      165,
      95,
      251
    ],
    "start_token": 377,
    "end_token": 392,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      389,
      5447,
      1262,
      16363,
      2348,
      26599,
      338,
      29201,
      11,
      543,
      318,
      257,
      2219,
      3912,
      329,
      6375,
      44,
      4981
    ],
    "label": "best_practice",
    "reason": "Class attributes are defined using SQLAlchemy's Column, which is a common pattern for ORM models"
  },
  {
    "line": 48,
    "text": "    #: \u59d4\u5356\u4ef7",
    "annotation": "\u2705 Best Practice: Class attributes are defined using SQLAlchemy's Column, which is a common pattern for ORM models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      100,
      242,
      39355,
      244,
      20015,
      115
    ],
    "start_token": 392,
    "end_token": 404,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      389,
      5447,
      1262,
      16363,
      2348,
      26599,
      338,
      29201,
      11,
      543,
      318,
      257,
      2219,
      3912,
      329,
      6375,
      44,
      4981
    ],
    "label": "best_practice",
    "reason": "Class attributes are defined using SQLAlchemy's Column, which is a common pattern for ORM models"
  },
  {
    "line": 50,
    "text": "    #: \u59d4\u4e70\u4ef7",
    "annotation": "\u2705 Best Practice: Class attributes are defined using SQLAlchemy's Column, which is a common pattern for ORM models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      100,
      242,
      20046,
      108,
      20015,
      115
    ],
    "start_token": 404,
    "end_token": 416,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      389,
      5447,
      1262,
      16363,
      2348,
      26599,
      338,
      29201,
      11,
      543,
      318,
      257,
      2219,
      3912,
      329,
      6375,
      44,
      4981
    ],
    "label": "best_practice",
    "reason": "Class attributes are defined using SQLAlchemy's Column, which is a common pattern for ORM models"
  },
  {
    "line": 52,
    "text": "    #: \u59d4\u5356\u91cf",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      25,
      10263,
      100,
      242,
      39355,
      244,
      34932,
      237
    ],
    "start_token": 416,
    "end_token": 428,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to define public API of the module"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 428,
    "end_token": 428,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 68,
    "text": "class IndexusKdataCommon(KdataCommon):",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      4871,
      12901,
      385,
      42,
      7890,
      17227,
      7,
      42,
      7890,
      17227,
      2599
    ],
    "start_token": 428,
    "end_token": 439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 439,
    "end_token": 439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 72,
    "text": "class EtfKdataCommon(KdataCommon):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      4871,
      17906,
      69,
      42,
      7890,
      17227,
      7,
      42,
      7890,
      17227,
      2599
    ],
    "start_token": 439,
    "end_token": 450,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 74,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 450,
    "end_token": 450,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 76,
    "text": "    cumulative_net_value = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      23818,
      62,
      3262,
      62,
      8367,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 450,
    "end_token": 463,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 463,
    "end_token": 463,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 80,
    "text": "    pass",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1208
    ],
    "start_token": 463,
    "end_token": 467,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 467,
    "end_token": 467,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 84,
    "text": "    pass",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1208
    ],
    "start_token": 467,
    "end_token": 471,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 86,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 471,
    "end_token": 471,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 88,
    "text": "    pass",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1208
    ],
    "start_token": 471,
    "end_token": 475,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 475,
    "end_token": 475,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 92,
    "text": "class FutureKdataCommon(KdataCommon):",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      4871,
      10898,
      42,
      7890,
      17227,
      7,
      42,
      7890,
      17227,
      2599
    ],
    "start_token": 475,
    "end_token": 485,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 485,
    "end_token": 494,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 494,
    "end_token": 503,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 503,
    "end_token": 512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 512,
    "end_token": 521,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 521,
    "end_token": 530,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 530,
    "end_token": 539,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 539,
    "end_token": 548,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 548,
    "end_token": 557,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 557,
    "end_token": 566,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 566,
    "end_token": 575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 575,
    "end_token": 584,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 584,
    "end_token": 593,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 593,
    "end_token": 602,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using wildcard imports can lead to namespace pollution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 602,
    "end_token": 611,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4295,
      9517,
      17944,
      460,
      1085,
      284,
      25745,
      12231
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using wildcard imports can lead to namespace pollution"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to manage namespace exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 611,
    "end_token": 620,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      6687,
      25745,
      15319
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to manage namespace exports"
  },
  {
    "line": 94,
    "text": "    interest = Column(Float)",
    "annotation": "\ud83e\udde0 ML Signal: Extending __all__ with imported module's __all__",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1393,
      796,
      29201,
      7,
      43879,
      8
    ],
    "start_token": 620,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      1571,
      11593,
      439,
      834,
      351,
      17392,
      8265,
      338,
      11593,
      439,
      834
    ],
    "label": "ml_signal",
    "reason": "Extending __all__ with imported module's __all__"
  }
]
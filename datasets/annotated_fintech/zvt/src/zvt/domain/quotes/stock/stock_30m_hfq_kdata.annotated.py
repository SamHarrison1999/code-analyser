# -*- coding: utf-8 -*-
# ðŸ§  ML Signal: Importing from a specific module indicates usage of SQLAlchemy ORM for database operations
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base

# ðŸ§  ML Signal: Importing a function from a specific module indicates usage of a custom schema registration

from zvt.contract.register import register_schema

# ðŸ§  ML Signal: Importing a class from a specific module indicates usage of a domain-specific data model
# ðŸ§  ML Signal: Inheritance from multiple classes, indicating a pattern of using mixins or shared functionality
from zvt.domain.quotes import StockKdataCommon

# ðŸ§  ML Signal: Use of class attribute to define table name, common in ORM patterns
# âœ… Best Practice: Use a consistent naming convention for base classes to improve code readability

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registration pattern for schemas, indicating dynamic or plugin-based architecture
# âœ… Best Practice: Use of keyword arguments improves readability and maintainability
# âœ… Best Practice: Use of __all__ to define public API of the module


class Stock30mHfqKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_30m_hfq_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"],
    db_name="stock_30m_hfq_kdata",
    schema_base=KdataBase,
    entity_type="stock",
)


# the __all__ is generated
__all__ = ["Stock30mHfqKdata"]

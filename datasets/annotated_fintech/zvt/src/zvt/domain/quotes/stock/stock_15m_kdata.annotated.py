# -*- coding: utf-8 -*-
# ðŸ§  ML Signal: Importing from specific modules indicates usage patterns and dependencies
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base

# ðŸ§  ML Signal: Importing from specific modules indicates usage patterns and dependencies

from zvt.contract.register import register_schema

# ðŸ§  ML Signal: Importing from specific modules indicates usage patterns and dependencies
# ðŸ§  ML Signal: Inheritance from multiple base classes, indicating a pattern of code reuse and extension.
from zvt.domain.quotes import StockKdataCommon

# ðŸ§  ML Signal: Use of class attribute to define table name, common in ORM patterns.
# âœ… Best Practice: Using declarative_base() is a standard way to define a base class for SQLAlchemy models

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registration of schema with multiple providers, indicating integration with external data sources.
# âœ… Best Practice: Explicitly specifying providers and database name improves code readability and maintainability.
# âœ… Best Practice: Use of __all__ to define public API of the module, enhancing code clarity.


class Stock15mKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_15m_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"],
    db_name="stock_15m_kdata",
    schema_base=KdataBase,
    entity_type="stock",
)


# the __all__ is generated
__all__ = ["Stock15mKdata"]

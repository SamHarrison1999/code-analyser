# -*- coding: utf-8 -*-
# ðŸ§  ML Signal: Importing from a specific module indicates usage of a custom library
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base
# ðŸ§  ML Signal: Importing from a specific module indicates usage of a custom library

from zvt.contract.register import register_schema
# ðŸ§  ML Signal: Usage of declarative_base indicates ORM pattern
# ðŸ§  ML Signal: Inheritance from multiple classes indicates a pattern of code reuse and polymorphism.
from zvt.domain.quotes import StockKdataCommon
# ðŸ§  ML Signal: Use of a class attribute to define a database table name is a common pattern in ORM frameworks.

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registering a schema with multiple providers suggests integration with multiple data sources.
# âœ… Best Practice: Explicitly specifying parameters in function calls improves readability and maintainability.
# âœ… Best Practice: Defining __all__ helps to control what is exported when the module is imported, improving encapsulation.

class Stock1hHfqKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_1h_hfq_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"], db_name="stock_1h_hfq_kdata", schema_base=KdataBase, entity_type="stock"
)


# the __all__ is generated
__all__ = ["Stock1hHfqKdata"]
# -*- coding: utf-8 -*-
# ðŸ§  ML Signal: Importing custom modules indicates specific domain usage patterns
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base
# ðŸ§  ML Signal: Importing specific classes from a module indicates usage patterns

from zvt.contract.register import register_schema
# ðŸ§  ML Signal: Usage of declarative_base indicates ORM pattern
# ðŸ§  ML Signal: Inheritance from multiple classes, indicating a pattern of using mixins or shared functionality
from zvt.domain.quotes import StockKdataCommon
# ðŸ§  ML Signal: Use of a class attribute to define a database table name, common in ORM patterns

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registration of schema with multiple providers, indicating a pattern of supporting multiple data sources
# âœ… Best Practice: Explicitly specifying parameters in function calls improves readability and maintainability
# âœ… Best Practice: Use of __all__ to define public API of the module, improving code clarity and encapsulation

class Stock1wkHfqKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_1wk_hfq_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"], db_name="stock_1wk_hfq_kdata", schema_base=KdataBase, entity_type="stock"
)


# the __all__ is generated
__all__ = ["Stock1wkHfqKdata"]
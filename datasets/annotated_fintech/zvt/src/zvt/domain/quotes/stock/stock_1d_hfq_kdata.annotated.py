# -*- coding: utf-8 -*-
# âœ… Best Practice: Grouping imports from the same module together improves readability.
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base

# âœ… Best Practice: Using a descriptive variable name for the base class improves code readability.
from zvt.contract.register import register_schema

# ðŸ§  ML Signal: Inheritance from multiple classes indicates a pattern of code reuse and polymorphism.
from zvt.domain.quotes import StockKdataCommon

# ðŸ§  ML Signal: Use of class attributes to define table names suggests a pattern for ORM usage.

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registration of schema with multiple providers indicates a pattern of multi-source data integration.
# âœ… Best Practice: Use of a function to register schema improves modularity and reusability.
# âœ… Best Practice: Defining __all__ for module exports improves code readability and maintainability.


class Stock1dHfqKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_1d_hfq_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"],
    db_name="stock_1d_hfq_kdata",
    schema_base=KdataBase,
    entity_type="stock",
)


# the __all__ is generated
__all__ = ["Stock1dHfqKdata"]

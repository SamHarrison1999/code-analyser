# -*- coding: utf-8 -*-
# âœ… Best Practice: Grouping imports from the same module together improves readability.
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base

# âœ… Best Practice: Using declarative_base() is a standard way to define a base class for ORM models in SQLAlchemy.
from zvt.contract.register import register_schema
# ðŸ§  ML Signal: Inheritance from multiple base classes, indicating a pattern of code reuse and polymorphism
from zvt.domain.quotes import StockKdataCommon
# ðŸ§  ML Signal: Use of class attribute to define table name, indicating ORM usage pattern

KdataBase = declarative_base()

# âœ… Best Practice: Use of __all__ to define public API of the module
# ðŸ§  ML Signal: Registration of schema with multiple providers, indicating extensibility and integration pattern

class Stock4hHfqKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_4h_hfq_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"], db_name="stock_4h_hfq_kdata", schema_base=KdataBase, entity_type="stock"
)


# the __all__ is generated
__all__ = ["Stock4hHfqKdata"]
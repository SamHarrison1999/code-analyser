# -*- coding: utf-8 -*-
# âœ… Best Practice: Grouping imports from the same module together improves readability.
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base

# ðŸ§  ML Signal: Usage of SQLAlchemy's declarative_base indicates ORM pattern.
from zvt.contract.register import register_schema
# ðŸ§  ML Signal: Inheritance from KdataBase and StockKdataCommon indicates a pattern of using base classes for shared functionality.
from zvt.domain.quotes import StockKdataCommon
# ðŸ§  ML Signal: Use of a class attribute to define a table name suggests a pattern for ORM table mapping.

KdataBase = declarative_base()

# âœ… Best Practice: Explicitly specifying parameters in function calls improves readability and maintainability.
# ðŸ§  ML Signal: Registration of schema with multiple providers indicates a pattern of supporting multiple data sources.
# âœ… Best Practice: Defining __all__ for module exports clarifies the intended public interface of the module.

class Stock15mHfqKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_15m_hfq_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"], db_name="stock_15m_hfq_kdata", schema_base=KdataBase, entity_type="stock"
)


# the __all__ is generated
__all__ = ["Stock15mHfqKdata"]
# -*- coding: utf-8 -*-
# ðŸ§  ML Signal: Importing from specific modules indicates usage patterns and dependencies
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base
# ðŸ§  ML Signal: Importing from specific modules indicates usage patterns and dependencies

from zvt.contract.register import register_schema
# ðŸ§  ML Signal: Importing from specific modules indicates usage patterns and dependencies
from zvt.domain.quotes import StockKdataCommon
# âœ… Best Practice: Using declarative_base() is a standard way to define a base class for SQLAlchemy models
# ðŸ§  ML Signal: Usage of class inheritance to extend functionality from base classes

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registration of schema with multiple providers indicates integration with external data sources
# âœ… Best Practice: Use of a function to register schema improves modularity and reusability
# âœ… Best Practice: Defining __all__ to specify public API of the module

class Stock1monKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_1mon_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"], db_name="stock_1mon_kdata", schema_base=KdataBase, entity_type="stock"
)


# the __all__ is generated
__all__ = ["Stock1monKdata"]
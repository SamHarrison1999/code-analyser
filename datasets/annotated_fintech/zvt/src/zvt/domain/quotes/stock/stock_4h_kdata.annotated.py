# -*- coding: utf-8 -*-
# ðŸ§  ML Signal: Importing custom modules indicates a specific usage pattern
# this file is generated by gen_kdata_schema function, dont't change it
from sqlalchemy.orm import declarative_base
# ðŸ§  ML Signal: Importing custom modules indicates a specific usage pattern

from zvt.contract.register import register_schema
# ðŸ§  ML Signal: Usage of declarative_base indicates ORM pattern
# ðŸ§  ML Signal: Inheritance from multiple base classes, indicating a pattern of code reuse and extension.
from zvt.domain.quotes import StockKdataCommon
# ðŸ§  ML Signal: Use of class attribute to define table name, common in ORM patterns.

KdataBase = declarative_base()

# ðŸ§  ML Signal: Registration of schema with multiple providers, indicating a pattern of integrating multiple data sources.
# âœ… Best Practice: Explicitly listing providers and parameters improves code readability and maintainability.
# âœ… Best Practice: Use of __all__ to define public API of the module, enhancing code clarity and encapsulation.

class Stock4hKdata(KdataBase, StockKdataCommon):
    __tablename__ = "stock_4h_kdata"


register_schema(
    providers=["em", "qmt", "joinquant"], db_name="stock_4h_kdata", schema_base=KdataBase, entity_type="stock"
)


# the __all__ is generated
__all__ = ["Stock4hKdata"]
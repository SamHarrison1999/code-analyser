annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping related imports together improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,12,best_practice,3,Grouping related imports together improves readability and maintainability.,,0,from sqlalchemy.orm import declarative_base,"[6738, 44161, 282, 26599, 13, 579, 1330, 2377, 283, 876, 62, 8692]"
‚úÖ Best Practice: Naming convention for SQLAlchemy base class is clear and descriptive.,"[26486, 227, 6705, 19939, 25, 399, 3723, 9831, 329, 16363, 2348, 26599, 2779, 1398, 318, 1598, 290, 35644, 13]",1.0,12,best_practice,7,Naming convention for SQLAlchemy base class is clear and descriptive.,,12,,[]
üß† ML Signal: Inheritance from MonetaryBase and Mixin indicates a pattern of using mixins for shared functionality.,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 34112, 14881, 290, 15561, 259, 9217, 257, 3912, 286, 1262, 5022, 1040, 329, 4888, 11244, 13]",0.5,12,ml_signal,7,Inheritance from MonetaryBase and Mixin indicates a pattern of using mixins for shared functionality.,,12,,[]
üß† ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 338, 29201, 290, 10903, 14, 43879, 3858, 9217, 257, 3912, 286, 6375, 44, 8748, 13]",0.5,12,ml_signal,9,Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,,12,,[]
üß† ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 338, 29201, 290, 10903, 14, 43879, 3858, 9217, 257, 3912, 286, 6375, 44, 8748, 13]",0.5,24,ml_signal,11,Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,,12,"class TreasuryYield(MonetaryBase, Mixin):","[4871, 13419, 56, 1164, 7, 9069, 8527, 14881, 11, 15561, 259, 2599]"
üß† ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 338, 29201, 290, 10903, 14, 43879, 3858, 9217, 257, 3912, 286, 6375, 44, 8748, 13]",0.5,24,ml_signal,13,Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,,24,,[]
üß† ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 338, 29201, 290, 10903, 14, 43879, 3858, 9217, 257, 3912, 286, 6375, 44, 8748, 13]",0.5,37,ml_signal,14,Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,,24,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
üß† ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16363, 2348, 26599, 338, 29201, 290, 10903, 14, 43879, 3858, 9217, 257, 3912, 286, 6375, 44, 8748, 13]",0.5,50,ml_signal,14,Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.,,37,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the register_schema function handles inputs securely to prevent injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 7881, 62, 15952, 2611, 2163, 17105, 17311, 30835, 284, 2948, 16954, 3434, 13]",0.5,63,sast_risk,14,Ensure that the register_schema function handles inputs securely to prevent injection attacks.,Low,50,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"
‚úÖ Best Practice: Use of __all__ to define public API of the module.,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 13]",1.0,76,best_practice,14,Use of __all__ to define public API of the module.,,63,    code = Column(String(length=32)),"[220, 220, 220, 2438, 796, 29201, 7, 10100, 7, 13664, 28, 2624, 4008]"

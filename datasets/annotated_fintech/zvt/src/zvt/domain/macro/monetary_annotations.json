[
  {
    "line": 3,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Naming convention for SQLAlchemy base class is clear and descriptive.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      9831,
      329,
      16363,
      2348,
      26599,
      2779,
      1398,
      318,
      1598,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Naming convention for SQLAlchemy base class is clear and descriptive."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from MonetaryBase and Mixin indicates a pattern of using mixins for shared functionality.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      34112,
      14881,
      290,
      15561,
      259,
      9217,
      257,
      3912,
      286,
      1262,
      5022,
      1040,
      329,
      4888,
      11244,
      13
    ],
    "label": "ml_signal",
    "reason": "Inheritance from MonetaryBase and Mixin indicates a pattern of using mixins for shared functionality."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      290,
      10903,
      14,
      43879,
      3858,
      9217,
      257,
      3912,
      286,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage."
  },
  {
    "line": 11,
    "text": "class TreasuryYield(MonetaryBase, Mixin):",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.",
    "confidence": 0.5,
    "tokens": [
      4871,
      13419,
      56,
      1164,
      7,
      9069,
      8527,
      14881,
      11,
      15561,
      259,
      2599
    ],
    "start_token": 12,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      290,
      10903,
      14,
      43879,
      3858,
      9217,
      257,
      3912,
      286,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage."
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      290,
      10903,
      14,
      43879,
      3858,
      9217,
      257,
      3912,
      286,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage."
  },
  {
    "line": 14,
    "text": "    code = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 24,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      290,
      10903,
      14,
      43879,
      3858,
      9217,
      257,
      3912,
      286,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage."
  },
  {
    "line": 14,
    "text": "    code = Column(String(length=32))",
    "annotation": "\ud83e\udde0 ML Signal: Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 37,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      290,
      10903,
      14,
      43879,
      3858,
      9217,
      257,
      3912,
      286,
      6375,
      44,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of SQLAlchemy's Column and String/Float types indicates a pattern of ORM usage."
  },
  {
    "line": 14,
    "text": "    code = Column(String(length=32))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the register_schema function handles inputs securely to prevent injection attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 50,
    "end_token": 63,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      7881,
      62,
      15952,
      2611,
      2163,
      17105,
      17311,
      30835,
      284,
      2948,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the register_schema function handles inputs securely to prevent injection attacks."
  },
  {
    "line": 14,
    "text": "    code = Column(String(length=32))",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      29201,
      7,
      10100,
      7,
      13664,
      28,
      2624,
      4008
    ],
    "start_token": 63,
    "end_token": 76,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module."
  }
]
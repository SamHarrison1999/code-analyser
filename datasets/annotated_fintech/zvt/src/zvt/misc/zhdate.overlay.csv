annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of docstring for module-level documentation,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 329, 8265, 12, 5715, 10314]",0.5,1,best_practice,1,Use of docstring for module-level documentation,,0,"""""""",[37811]
‚úÖ Best Practice: Importing specific classes and functions improves readability and avoids namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 290, 5499, 19575, 1100, 1799, 290, 30940, 25745, 12231]",1.0,2,best_practice,1,Importing specific classes and functions improves readability and avoids namespace pollution,,1,"""""""",[37811]
‚úÖ Best Practice: Importing specific classes and functions improves readability and avoids namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 290, 5499, 19575, 1100, 1799, 290, 30940, 25745, 12231]",1.0,11,best_practice,5,Importing specific classes and functions improves readability and avoids namespace pollution,,2,"from datetime import datetime, timedelta","[6738, 4818, 8079, 1330, 4818, 8079, 11, 28805, 12514]"
‚ö†Ô∏è SAST Risk (Low): Importing from external or less-known modules can introduce security risks if not properly vetted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 393, 1342, 12, 4002, 13103, 460, 10400, 2324, 7476, 611, 407, 6105, 48383]",1.0,11,sast_risk,7,Importing from external or less-known modules can introduce security risks if not properly vetted,Low,11,,[]
‚úÖ Best Practice: Use of self to define instance variables,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 8160, 4554, 9633]",1.0,36,best_practice,18,Use of self to define instance variables,,11,            lunar_day {int} -- ÂÜúÂéÜÊó•,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25572, 62, 820, 1391, 600, 92, 1377, 10263, 228, 250, 43889, 228, 33768, 98]"
‚úÖ Best Practice: Use of self to define instance variables,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 8160, 4554, 9633]",1.0,48,best_practice,20,Use of self to define instance variables,,36,        Keyword Arguments:,"[220, 220, 220, 220, 220, 220, 220, 7383, 4775, 20559, 2886, 25]"
‚úÖ Best Practice: Use of self to define instance variables,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 8160, 4554, 9633]",1.0,56,best_practice,22,Use of self to define instance variables,,48,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of self to define instance variables,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 8160, 4554, 9633]",1.0,74,best_practice,24,Use of self to define instance variables,,56,        self.lunar_month = lunar_month,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 75, 403, 283, 62, 8424, 796, 25572, 62, 8424]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if lunar_year is out of bounds for CHINESEYEARCODE,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 25572, 62, 1941, 318, 503, 286, 22303, 329, 5870, 1268, 1546, 22348, 17133, 34, 16820]",1.0,91,sast_risk,26,Potential IndexError if lunar_year is out of bounds for CHINESEYEARCODE,Low,74,        self.leap_month = leap_month,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 293, 499, 62, 8424, 796, 16470, 62, 8424]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if lunar_year is out of bounds for CHINESENEWYEAR,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 25572, 62, 1941, 318, 503, 286, 22303, 329, 5870, 1268, 1546, 1677, 6217, 56, 17133]",1.0,122,sast_risk,27,Potential IndexError if lunar_year is out of bounds for CHINESENEWYEAR,Low,91,        self.year_code = CHINESEYEARCODE[self.lunar_year - 1900],"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1941, 62, 8189, 796, 5870, 1268, 1546, 22348, 17133, 34, 16820, 58, 944, 13, 75, 403, 283, 62, 1941, 532, 21489, 60]"
üß† ML Signal: Custom validation logic for lunar date,"[8582, 100, 254, 10373, 26484, 25, 8562, 21201, 9156, 329, 25572, 3128]",0.5,122,ml_signal,31,Custom validation logic for lunar date,,122,,[]
‚ö†Ô∏è SAST Risk (Low): TypeError might not be the most appropriate exception type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5994, 12331, 1244, 407, 307, 262, 749, 5035, 6631, 2099]",1.0,122,sast_risk,31,TypeError might not be the most appropriate exception type,Low,122,,[]
‚úÖ Best Practice: Use of timedelta for date arithmetic is a clear and standard approach.,"[26486, 227, 6705, 19939, 25, 5765, 286, 28805, 12514, 329, 3128, 34768, 318, 257, 1598, 290, 3210, 3164, 13]",1.0,122,best_practice,31,Use of timedelta for date arithmetic is a clear and standard approach.,,122,,[]
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,128,best_practice,40,Use of descriptive variable names improves code readability.,,122,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect date handling if CHINESENEWYEAR data is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 3128, 9041, 611, 5870, 1268, 1546, 1677, 6217, 56, 17133, 1366, 318, 407, 31031, 13]",1.0,168,sast_risk,42,Potential for incorrect date handling if CHINESENEWYEAR data is not validated.,Low,128,"        """"""ÈùôÊÄÅÊñπÊ≥ïÔºå‰ªéÂÖ¨ÂéÜÊó•ÊúüÁîüÊàêÂÜúÂéÜÊó•Êúü","[220, 220, 220, 220, 220, 220, 220, 37227, 165, 251, 247, 45250, 223, 43095, 37345, 243, 171, 120, 234, 20015, 236, 17739, 105, 43889, 228, 33768, 98, 17312, 253, 37955, 22755, 238, 37863, 250, 43889, 228, 33768, 98, 17312, 253]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect date handling if CHINESENEWYEAR data is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 3128, 9041, 611, 5870, 1268, 1546, 1677, 6217, 56, 17133, 1366, 318, 407, 31031, 13]",1.0,178,sast_risk,44,Potential for incorrect date handling if CHINESENEWYEAR data is not validated.,Low,168,        Arguments:,"[220, 220, 220, 220, 220, 220, 220, 20559, 2886, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect year code handling if CHINESEYEARCODE data is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 614, 2438, 9041, 611, 5870, 1268, 1546, 22348, 17133, 34, 16820, 1366, 318, 407, 31031, 13]",1.0,187,sast_risk,47,Potential for incorrect year code handling if CHINESEYEARCODE data is not validated.,Low,178,        Returns:,"[220, 220, 220, 220, 220, 220, 220, 16409, 25]"
üß† ML Signal: Use of custom decoding logic for year codes.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2183, 39938, 9156, 329, 614, 12416, 13]",1.0,195,ml_signal,49,Use of custom decoding logic for year codes.,,187,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of enumerate and accumulate for iteration is efficient and readable.,"[26486, 227, 6705, 19939, 25, 5765, 286, 27056, 378, 290, 29915, 329, 24415, 318, 6942, 290, 31744, 13]",1.0,243,best_practice,51,Use of enumerate and accumulate for iteration is efficient and readable.,,195,        # Â¶ÇÊûúËøòÊ≤°ÊúâÂà∞ÂÜúÂéÜÊ≠£ÊúàÂàù‰∏Ä ÂÜúÂéÜÂπ¥‰ªΩÂáèÂéª1,"[220, 220, 220, 220, 220, 220, 220, 1303, 10263, 99, 224, 162, 252, 250, 32573, 246, 162, 110, 94, 17312, 231, 26344, 108, 37863, 250, 43889, 228, 29826, 96, 17312, 230, 26344, 251, 31660, 10263, 228, 250, 43889, 228, 33176, 112, 20015, 121, 49035, 237, 43889, 119, 16]"
‚úÖ Best Practice: Clear conditional logic for determining lunar month.,"[26486, 227, 6705, 19939, 25, 11459, 26340, 9156, 329, 13213, 25572, 1227, 13]",0.5,270,best_practice,58,Clear conditional logic for determining lunar month.,,243,        year_code = CHINESEYEARCODE[lunar_year - 1900],"[220, 220, 220, 220, 220, 220, 220, 614, 62, 8189, 796, 5870, 1268, 1546, 22348, 17133, 34, 16820, 58, 75, 403, 283, 62, 1941, 532, 21489, 60]"
üß† ML Signal: Return of a custom object based on calculated values.,"[8582, 100, 254, 10373, 26484, 25, 8229, 286, 257, 2183, 2134, 1912, 319, 10488, 3815, 13]",0.5,291,ml_signal,63,Return of a custom object based on calculated values.,,270,            if days_passed + 1 <= days:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1528, 62, 6603, 276, 1343, 352, 19841, 1528, 25]"
‚úÖ Best Practice: Function name should be more descriptive to indicate its purpose or return value,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 517, 35644, 284, 7603, 663, 4007, 393, 1441, 1988]",1.0,312,best_practice,60,Function name should be more descriptive to indicate its purpose or return value,,291,        month_days = ZhDate.decode(year_code),"[220, 220, 220, 220, 220, 220, 220, 1227, 62, 12545, 796, 10511, 10430, 13, 12501, 1098, 7, 1941, 62, 8189, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of system time can lead to non-deterministic behavior in certain applications,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1080, 640, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 287, 1728, 5479]",1.0,336,sast_risk,62,Use of system time can lead to non-deterministic behavior in certain applications,Low,312,"        for pos, days in enumerate(accumulate(month_days)):","[220, 220, 220, 220, 220, 220, 220, 329, 1426, 11, 1528, 287, 27056, 378, 7, 4134, 388, 5039, 7, 8424, 62, 12545, 8, 2599]"
üß† ML Signal: Use of current date/time can indicate time-based logic or features,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 3128, 14, 2435, 460, 7603, 640, 12, 3106, 9156, 393, 3033]",0.5,357,ml_signal,63,Use of current date/time can indicate time-based logic or features,,336,            if days_passed + 1 <= days:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1528, 62, 6603, 276, 1343, 352, 19841, 1528, 25]"
üß† ML Signal: Use of a private method indicates encapsulation and abstraction patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2839, 2446, 9217, 32652, 1741, 290, 34651, 7572, 13]",0.5,357,ml_signal,67,Use of a private method indicates encapsulation and abstraction patterns.,,357,,[]
‚úÖ Best Practice: Use of a private method to encapsulate functionality.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 2446, 284, 32652, 5039, 11244, 13]",1.0,369,best_practice,68,Use of a private method to encapsulate functionality.,,357,        leap_month = False,"[220, 220, 220, 220, 220, 220, 220, 16470, 62, 8424, 796, 10352]"
üß† ML Signal: Decoding a year code to get month days is a specific pattern for date calculations.,"[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 257, 614, 2438, 284, 651, 1227, 1528, 318, 257, 2176, 3912, 329, 3128, 16765, 13]",0.5,385,ml_signal,70,Decoding a year code to get month days is a specific pattern for date calculations.,,369,            lunar_month = month,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25572, 62, 8424, 796, 1227]"
üß† ML Signal: Bitwise operations on year_code to determine leap month.,"[8582, 100, 254, 10373, 26484, 25, 4722, 3083, 4560, 319, 614, 62, 8189, 284, 5004, 16470, 1227, 13]",1.0,403,ml_signal,72,Bitwise operations on year_code to determine leap month.,,385,            lunar_month = month - 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25572, 62, 8424, 796, 1227, 532, 352]"
‚úÖ Best Practice: Use of sum() for calculating total days in months.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2160, 3419, 329, 26019, 2472, 1528, 287, 1933, 13]",0.5,409,best_practice,79,Use of sum() for calculating total days in months.,,403,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚úÖ Best Practice: Clear return statement with calculation.,"[26486, 227, 6705, 19939, 25, 11459, 1441, 2643, 351, 17952, 13]",1.0,430,best_practice,81,Clear return statement with calculation.,,409,        return ZhDate.from_datetime(datetime.now()),"[220, 220, 220, 220, 220, 220, 220, 1441, 10511, 10430, 13, 6738, 62, 19608, 8079, 7, 19608, 8079, 13, 2197, 28955]"
üß† ML Signal: Iterating over a fixed range to construct a string,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 5969, 2837, 284, 5678, 257, 4731]",1.0,436,ml_signal,80,Iterating over a fixed range to construct a string,,430,    def today():,"[220, 220, 220, 825, 1909, 33529]"
üß† ML Signal: Conditional logic based on numeric ranges,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 35575, 16069]",0.5,478,ml_signal,90,Conditional logic based on numeric ranges,,436,        # ÂΩìÂâçÂÜúÂéÜÂπ¥ÁöÑÈó∞ÊúàÔºå‰∏∫0Ë°®Á§∫Êó†Ê∂¶Âè∂,"[220, 220, 220, 220, 220, 220, 220, 1303, 10263, 121, 241, 30298, 235, 37863, 250, 43889, 228, 33176, 112, 21410, 29785, 108, 17312, 230, 171, 120, 234, 10310, 118, 15, 26193, 101, 163, 97, 118, 33768, 254, 162, 114, 99, 20998, 114]"
‚ö†Ô∏è SAST Risk (Low): Potential off-by-one error if lunar_year is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 572, 12, 1525, 12, 505, 4049, 611, 25572, 62, 1941, 318, 407, 31031]",1.0,512,sast_risk,105,Potential off-by-one error if lunar_year is not validated,Low,478,"        ZHNUMS = ""„Äá‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πùÂçÅ""","[220, 220, 220, 220, 220, 220, 220, 1168, 39, 45, 52, 5653, 796, 366, 5099, 229, 31660, 12859, 234, 49011, 32368, 249, 49390, 17739, 255, 10310, 225, 17739, 104, 20046, 251, 39355, 223, 1]"
‚úÖ Best Practice: Use of format for string construction,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 329, 4731, 5103]",0.5,528,best_practice,107,Use of format for string construction,,512,"        for i in range(0, 4):","[220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 15, 11, 604, 2599]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",1.0,544,best_practice,107,Include a docstring to describe the method's purpose and return value,,528,"        for i in range(0, 4):","[220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 15, 11, 604, 2599]"
üß† ML Signal: Usage of string formatting with format method,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 33313, 351, 5794, 2446]",1.0,553,ml_signal,112,Usage of string formatting with format method,,544,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Implementing __repr__ to return a string representation of the object,"[26486, 227, 6705, 19939, 25, 48282, 278, 11593, 260, 1050, 834, 284, 1441, 257, 4731, 10552, 286, 262, 2134]",1.0,562,best_practice,112,Implementing __repr__ to return a string representation of the object,,553,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Using __str__ in __repr__ to provide a consistent string representation,"[26486, 227, 6705, 19939, 25, 8554, 11593, 2536, 834, 287, 11593, 260, 1050, 834, 284, 2148, 257, 6414, 4731, 10552]",1.0,562,best_practice,114,Using __str__ in __repr__ to provide a consistent string representation,,562,,[]
‚úÖ Best Practice: Check if the object is an instance of the expected class before proceeding.,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2134, 318, 281, 4554, 286, 262, 2938, 1398, 878, 18788, 13]",0.5,580,best_practice,115,Check if the object is an instance of the expected class before proceeding.,,562,        if self.lunar_month == 1:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 75, 403, 283, 62, 8424, 6624, 352, 25]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic TypeError without additional context.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 5994, 12331, 1231, 3224, 4732, 13]",0.5,599,sast_risk,117,Raising a generic TypeError without additional context.,Low,580,        elif self.lunar_month == 12:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13, 75, 403, 283, 62, 8424, 6624, 1105, 25]"
üß† ML Signal: Comparing attributes for equality.,"[8582, 100, 254, 10373, 26484, 25, 3082, 1723, 12608, 329, 10537, 13]",0.5,618,ml_signal,119,Comparing attributes for equality.,,599,        elif self.lunar_month <= 10:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13, 75, 403, 283, 62, 8424, 19841, 838, 25]"
üß† ML Signal: Comparing attributes for equality.,"[8582, 100, 254, 10373, 26484, 25, 3082, 1723, 12608, 329, 10537, 13]",0.5,627,ml_signal,121,Comparing attributes for equality.,,618,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Comparing attributes for equality.,"[8582, 100, 254, 10373, 26484, 25, 3082, 1723, 12608, 329, 10537, 13]",0.5,627,ml_signal,123,Comparing attributes for equality.,,627,,[]
üß† ML Signal: Comparing attributes for equality.,"[8582, 100, 254, 10373, 26484, 25, 3082, 1723, 12608, 329, 10537, 13]",0.5,665,ml_signal,125,Comparing attributes for equality.,,627,"            zh_day = ""Âàù{}"".format(ZHNUMS[self.lunar_day])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 26344, 251, 90, 92, 1911, 18982, 7, 57, 39, 45, 52, 5653, 58, 944, 13, 75, 403, 283, 62, 820, 12962]"
‚úÖ Best Practice: Return a boolean expression directly.,"[26486, 227, 6705, 19939, 25, 8229, 257, 25131, 5408, 3264, 13]",1.0,705,best_practice,127,Return a boolean expression directly.,,665,"            zh_day = ""ÂçÅ{}"".format(ZHNUMS[self.lunar_day - 10])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 39355, 223, 90, 92, 1911, 18982, 7, 57, 39, 45, 52, 5653, 58, 944, 13, 75, 403, 283, 62, 820, 532, 838, 12962]"
‚úÖ Best Practice: Check for type to ensure correct operation,"[26486, 227, 6705, 19939, 25, 6822, 329, 2099, 284, 4155, 3376, 4905]",1.0,705,best_practice,123,Check for type to ensure correct operation,,705,,[]
‚ö†Ô∏è SAST Risk (Low): Error message should be in English for broader understanding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 815, 307, 287, 3594, 329, 11622, 4547]",0.5,743,sast_risk,125,Error message should be in English for broader understanding,Low,705,"            zh_day = ""Âàù{}"".format(ZHNUMS[self.lunar_day])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 26344, 251, 90, 92, 1911, 18982, 7, 57, 39, 45, 52, 5653, 58, 944, 13, 75, 403, 283, 62, 820, 12962]"
üß† ML Signal: Custom addition operation for a class,"[8582, 100, 254, 10373, 26484, 25, 8562, 3090, 4905, 329, 257, 1398]",0.5,783,ml_signal,127,Custom addition operation for a class,,743,"            zh_day = ""ÂçÅ{}"".format(ZHNUMS[self.lunar_day - 10])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 39355, 223, 90, 92, 1911, 18982, 7, 57, 39, 45, 52, 5653, 58, 944, 13, 75, 403, 283, 62, 820, 532, 838, 12962]"
üß† ML Signal: Use of isinstance to check type before operation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 878, 4905]",1.0,823,ml_signal,127,Use of isinstance to check type before operation,,783,"            zh_day = ""ÂçÅ{}"".format(ZHNUMS[self.lunar_day - 10])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 39355, 223, 90, 92, 1911, 18982, 7, 57, 39, 45, 52, 5653, 58, 944, 13, 75, 403, 283, 62, 820, 532, 838, 12962]"
üß† ML Signal: Use of timedelta for date arithmetic,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 28805, 12514, 329, 3128, 34768]",1.0,845,ml_signal,129,Use of timedelta for date arithmetic,,823,"            zh_day = ""‰∫åÂçÅ""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 12859, 234, 39355, 223, 1]"
üß† ML Signal: Use of isinstance to check type before operation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 878, 4905]",1.0,886,ml_signal,131,Use of isinstance to check type before operation,,845,"            zh_day = ""Âªø{}"".format(ZHNUMS[self.lunar_day - 20])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1976, 71, 62, 820, 796, 366, 161, 119, 123, 90, 92, 1911, 18982, 7, 57, 39, 45, 52, 5653, 58, 944, 13, 75, 403, 283, 62, 820, 532, 1160, 12962]"
üß† ML Signal: Use of isinstance to check type before operation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 878, 4905]",1.0,886,ml_signal,134,Use of isinstance to check type before operation,,886,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for TypeError if input is not as expected,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5994, 12331, 611, 5128, 318, 407, 355, 2938]",0.5,950,sast_risk,139,Potential for TypeError if input is not as expected,Low,886,"        return ""{}Âπ¥{}Êúà{} {}{}Âπ¥"".format(zh_year, zh_month, zh_day, year_tiandi, shengxiao[(self.lunar_year - 1900) % 12])","[220, 220, 220, 220, 220, 220, 220, 1441, 45144, 92, 33176, 112, 90, 92, 17312, 230, 90, 92, 1391, 18477, 92, 33176, 112, 1911, 18982, 7, 23548, 62, 1941, 11, 1976, 71, 62, 8424, 11, 1976, 71, 62, 820, 11, 614, 62, 20259, 26800, 11, 673, 782, 87, 13481, 58, 7, 944, 13, 75, 403, 283, 62, 1941, 532, 21489, 8, 4064, 1105, 12962]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,950,best_practice,140,Use descriptive variable names for better readability,,950,,[]
üß† ML Signal: Use of string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313]",1.0,973,ml_signal,142,Use of string formatting,,950,"        """"""ÊâìÂç∞Â≠óÁ¨¶‰∏≤ÁöÑÊñπÊ≥ï","[220, 220, 220, 220, 220, 220, 220, 37227, 33699, 241, 39355, 108, 27764, 245, 163, 105, 99, 10310, 110, 21410, 43095, 37345, 243]"
‚úÖ Best Practice: Use of range checks for input validation,"[26486, 227, 6705, 19939, 25, 5765, 286, 2837, 8794, 329, 5128, 21201]",1.0,1012,best_practice,154,Use of range checks for input validation,,973,"            raise TypeError(""ÊØîËæÉÂøÖÈ°ªÈÉΩÊòØZhDateÁ±ªÂûã"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 5994, 12331, 7203, 162, 107, 242, 164, 122, 225, 33232, 227, 165, 94, 119, 32849, 121, 42468, 57, 71, 10430, 163, 109, 119, 161, 252, 233, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if CHINESEYEARCODE is not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5870, 1268, 1546, 22348, 17133, 34, 16820, 318, 407, 31031, 393, 5336, 36951]",1.0,1037,sast_risk,157,Potential risk if CHINESEYEARCODE is not validated or sanitized,Low,1012,        cond3 = self.lunar_day == another.lunar_day,"[220, 220, 220, 220, 220, 220, 220, 1779, 18, 796, 2116, 13, 75, 403, 283, 62, 820, 6624, 1194, 13, 75, 403, 283, 62, 820]"
‚ö†Ô∏è SAST Risk (Low): Bitwise operations can be error-prone and hard to maintain,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4722, 3083, 4560, 460, 307, 4049, 12, 46330, 290, 1327, 284, 5529]",1.0,1037,sast_risk,160,Bitwise operations can be error-prone and hard to maintain,Low,1037,,[]
‚ö†Ô∏è SAST Risk (Low): Bitwise operations can be error-prone and hard to maintain,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4722, 3083, 4560, 460, 307, 4049, 12, 46330, 290, 1327, 284, 5529]",1.0,1068,sast_risk,164,Bitwise operations can be error-prone and hard to maintain,Low,1037,        return ZhDate.from_datetime(self.to_datetime() + timedelta(days=another)),"[220, 220, 220, 220, 220, 220, 220, 1441, 10511, 10430, 13, 6738, 62, 19608, 8079, 7, 944, 13, 1462, 62, 19608, 8079, 3419, 1343, 28805, 12514, 7, 12545, 28, 29214, 4008]"
‚ö†Ô∏è SAST Risk (Low): Bitwise operations can be error-prone and hard to maintain,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4722, 3083, 4560, 460, 307, 4049, 12, 46330, 290, 1327, 284, 5529]",1.0,1098,sast_risk,170,Bitwise operations can be error-prone and hard to maintain,Low,1068,            return (self.to_datetime() - another.to_datetime()).days,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 357, 944, 13, 1462, 62, 19608, 8079, 3419, 532, 1194, 13, 1462, 62, 19608, 8079, 3419, 737, 12545]"
‚úÖ Best Practice: Use of bitwise operations for efficient computation,"[26486, 227, 6705, 19939, 25, 5765, 286, 1643, 3083, 4560, 329, 6942, 29964]",1.0,1116,best_practice,177,Use of bitwise operations for efficient computation,,1098,    ‰ª•‰∏ã‰∏∫Â∏ÆÂä©ÂáΩÊï∞,"[220, 220, 220, 220, 20015, 98, 10310, 233, 10310, 118, 30585, 106, 27950, 102, 49035, 121, 46763, 108]"
üß† ML Signal: Use of bitwise operations to determine month days,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1643, 3083, 4560, 284, 5004, 1227, 1528]",0.5,1116,ml_signal,179,Use of bitwise operations to determine month days,,1116,,[]
‚úÖ Best Practice: Checking for leap month using bitwise operations,"[26486, 227, 6705, 19939, 25, 39432, 329, 16470, 1227, 1262, 1643, 3083, 4560]",0.5,1127,best_practice,181,Checking for leap month using bitwise operations,,1116,    def __tiandi(anum):,"[220, 220, 220, 825, 11593, 20259, 26800, 7, 272, 388, 2599]"
üß† ML Signal: Conditional logic to handle leap months,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 16470, 1933]",0.5,1163,ml_signal,183,Conditional logic to handle leap months,,1127,"        di = ""Â≠ê‰∏ëÂØÖÂçØËæ∞Â∑≥ÂçàÊú™Áî≥ÈÖâÊàå‰∫•""","[220, 220, 220, 220, 220, 220, 220, 2566, 796, 366, 36310, 10310, 239, 43380, 227, 39355, 107, 164, 122, 108, 32432, 111, 39355, 230, 17312, 103, 18796, 111, 165, 227, 231, 22755, 234, 12859, 98, 1]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,1199,best_practice,183,Add a docstring to describe the function's purpose and parameters,,1163,"        di = ""Â≠ê‰∏ëÂØÖÂçØËæ∞Â∑≥ÂçàÊú™Áî≥ÈÖâÊàå‰∫•""","[220, 220, 220, 220, 220, 220, 220, 2566, 796, 366, 36310, 10310, 239, 43380, 227, 39355, 107, 164, 122, 108, 32432, 111, 39355, 230, 17312, 103, 18796, 111, 165, 227, 231, 22755, 234, 12859, 98, 1]"
‚ö†Ô∏è SAST Risk (Low): Assumes CHINESEYEARCODE is properly defined and indexed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 5870, 1268, 1546, 22348, 17133, 34, 16820, 318, 6105, 5447, 290, 41497]",0.5,1224,sast_risk,191,Assumes CHINESEYEARCODE is properly defined and indexed,Low,1199,            year {int} -- ÂÜúÂéÜÂπ¥‰ªΩ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 614, 1391, 600, 92, 1377, 10263, 228, 250, 43889, 228, 33176, 112, 20015, 121]"
‚úÖ Best Practice: Use __all__ to define the public interface of the module,"[26486, 227, 6705, 19939, 25, 5765, 11593, 439, 834, 284, 8160, 262, 1171, 7071, 286, 262, 8265]",0.5,1249,best_practice,191,Use __all__ to define the public interface of the module,,1224,            year {int} -- ÂÜúÂéÜÂπ¥‰ªΩ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 614, 1391, 600, 92, 1377, 10263, 228, 250, 43889, 228, 33176, 112, 20015, 121]"

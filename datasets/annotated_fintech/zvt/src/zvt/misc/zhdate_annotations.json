[
  {
    "line": 1,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Use of docstring for module-level documentation",
    "confidence": 0.5,
    "tokens": [
      37811
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      329,
      8265,
      12,
      5715,
      10314
    ],
    "label": "best_practice",
    "reason": "Use of docstring for module-level documentation"
  },
  {
    "line": 1,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Importing specific classes and functions improves readability and avoids namespace pollution",
    "confidence": 1.0,
    "tokens": [
      37811
    ],
    "start_token": 1,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      290,
      5499,
      19575,
      1100,
      1799,
      290,
      30940,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific classes and functions improves readability and avoids namespace pollution"
  },
  {
    "line": 5,
    "text": "from datetime import datetime, timedelta",
    "annotation": "\u2705 Best Practice: Importing specific classes and functions improves readability and avoids namespace pollution",
    "confidence": 1.0,
    "tokens": [
      6738,
      4818,
      8079,
      1330,
      4818,
      8079,
      11,
      28805,
      12514
    ],
    "start_token": 2,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      290,
      5499,
      19575,
      1100,
      1799,
      290,
      30940,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific classes and functions improves readability and avoids namespace pollution"
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external or less-known modules can introduce security risks if not properly vetted",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 11,
    "end_token": 11,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      393,
      1342,
      12,
      4002,
      13103,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      48383
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external or less-known modules can introduce security risks if not properly vetted"
  },
  {
    "line": 18,
    "text": "            lunar_day {int} -- \u519c\u5386\u65e5",
    "annotation": "\u2705 Best Practice: Use of self to define instance variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25572,
      62,
      820,
      1391,
      600,
      92,
      1377,
      10263,
      228,
      250,
      43889,
      228,
      33768,
      98
    ],
    "start_token": 11,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      8160,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of self to define instance variables"
  },
  {
    "line": 20,
    "text": "        Keyword Arguments:",
    "annotation": "\u2705 Best Practice: Use of self to define instance variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7383,
      4775,
      20559,
      2886,
      25
    ],
    "start_token": 36,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      8160,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of self to define instance variables"
  },
  {
    "line": 22,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of self to define instance variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 48,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      8160,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of self to define instance variables"
  },
  {
    "line": 24,
    "text": "        self.lunar_month = lunar_month",
    "annotation": "\u2705 Best Practice: Use of self to define instance variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      75,
      403,
      283,
      62,
      8424,
      796,
      25572,
      62,
      8424
    ],
    "start_token": 56,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      8160,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of self to define instance variables"
  },
  {
    "line": 26,
    "text": "        self.leap_month = leap_month",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if lunar_year is out of bounds for CHINESEYEARCODE",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      293,
      499,
      62,
      8424,
      796,
      16470,
      62,
      8424
    ],
    "start_token": 74,
    "end_token": 91,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      25572,
      62,
      1941,
      318,
      503,
      286,
      22303,
      329,
      5870,
      1268,
      1546,
      22348,
      17133,
      34,
      16820
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if lunar_year is out of bounds for CHINESEYEARCODE"
  },
  {
    "line": 27,
    "text": "        self.year_code = CHINESEYEARCODE[self.lunar_year - 1900]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if lunar_year is out of bounds for CHINESENEWYEAR",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1941,
      62,
      8189,
      796,
      5870,
      1268,
      1546,
      22348,
      17133,
      34,
      16820,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      1941,
      532,
      21489,
      60
    ],
    "start_token": 91,
    "end_token": 122,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      25572,
      62,
      1941,
      318,
      503,
      286,
      22303,
      329,
      5870,
      1268,
      1546,
      1677,
      6217,
      56,
      17133
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if lunar_year is out of bounds for CHINESENEWYEAR"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Custom validation logic for lunar date",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 122,
    "end_token": 122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      21201,
      9156,
      329,
      25572,
      3128
    ],
    "label": "ml_signal",
    "reason": "Custom validation logic for lunar date"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): TypeError might not be the most appropriate exception type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 122,
    "end_token": 122,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      12331,
      1244,
      407,
      307,
      262,
      749,
      5035,
      6631,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "TypeError might not be the most appropriate exception type"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of timedelta for date arithmetic is a clear and standard approach.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 122,
    "end_token": 122,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      28805,
      12514,
      329,
      3128,
      34768,
      318,
      257,
      1598,
      290,
      3210,
      3164,
      13
    ],
    "label": "best_practice",
    "reason": "Use of timedelta for date arithmetic is a clear and standard approach."
  },
  {
    "line": 40,
    "text": "    @staticmethod",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 122,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 42,
    "text": "        \"\"\"\u9759\u6001\u65b9\u6cd5\uff0c\u4ece\u516c\u5386\u65e5\u671f\u751f\u6210\u519c\u5386\u65e5\u671f",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect date handling if CHINESENEWYEAR data is not validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      165,
      251,
      247,
      45250,
      223,
      43095,
      37345,
      243,
      171,
      120,
      234,
      20015,
      236,
      17739,
      105,
      43889,
      228,
      33768,
      98,
      17312,
      253,
      37955,
      22755,
      238,
      37863,
      250,
      43889,
      228,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 128,
    "end_token": 168,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      3128,
      9041,
      611,
      5870,
      1268,
      1546,
      1677,
      6217,
      56,
      17133,
      1366,
      318,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect date handling if CHINESENEWYEAR data is not validated."
  },
  {
    "line": 44,
    "text": "        Arguments:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect date handling if CHINESENEWYEAR data is not validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20559,
      2886,
      25
    ],
    "start_token": 168,
    "end_token": 178,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      3128,
      9041,
      611,
      5870,
      1268,
      1546,
      1677,
      6217,
      56,
      17133,
      1366,
      318,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect date handling if CHINESENEWYEAR data is not validated."
  },
  {
    "line": 47,
    "text": "        Returns:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect year code handling if CHINESEYEARCODE data is not validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409,
      25
    ],
    "start_token": 178,
    "end_token": 187,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      614,
      2438,
      9041,
      611,
      5870,
      1268,
      1546,
      22348,
      17133,
      34,
      16820,
      1366,
      318,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect year code handling if CHINESEYEARCODE data is not validated."
  },
  {
    "line": 49,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of custom decoding logic for year codes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 187,
    "end_token": 195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2183,
      39938,
      9156,
      329,
      614,
      12416,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of custom decoding logic for year codes."
  },
  {
    "line": 51,
    "text": "        # \u5982\u679c\u8fd8\u6ca1\u6709\u5230\u519c\u5386\u6b63\u6708\u521d\u4e00 \u519c\u5386\u5e74\u4efd\u51cf\u53bb1",
    "annotation": "\u2705 Best Practice: Use of enumerate and accumulate for iteration is efficient and readable.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      99,
      224,
      162,
      252,
      250,
      32573,
      246,
      162,
      110,
      94,
      17312,
      231,
      26344,
      108,
      37863,
      250,
      43889,
      228,
      29826,
      96,
      17312,
      230,
      26344,
      251,
      31660,
      10263,
      228,
      250,
      43889,
      228,
      33176,
      112,
      20015,
      121,
      49035,
      237,
      43889,
      119,
      16
    ],
    "start_token": 195,
    "end_token": 243,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      27056,
      378,
      290,
      29915,
      329,
      24415,
      318,
      6942,
      290,
      31744,
      13
    ],
    "label": "best_practice",
    "reason": "Use of enumerate and accumulate for iteration is efficient and readable."
  },
  {
    "line": 58,
    "text": "        year_code = CHINESEYEARCODE[lunar_year - 1900]",
    "annotation": "\u2705 Best Practice: Clear conditional logic for determining lunar month.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      62,
      8189,
      796,
      5870,
      1268,
      1546,
      22348,
      17133,
      34,
      16820,
      58,
      75,
      403,
      283,
      62,
      1941,
      532,
      21489,
      60
    ],
    "start_token": 243,
    "end_token": 270,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      26340,
      9156,
      329,
      13213,
      25572,
      1227,
      13
    ],
    "label": "best_practice",
    "reason": "Clear conditional logic for determining lunar month."
  },
  {
    "line": 63,
    "text": "            if days_passed + 1 <= days:",
    "annotation": "\ud83e\udde0 ML Signal: Return of a custom object based on calculated values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1528,
      62,
      6603,
      276,
      1343,
      352,
      19841,
      1528,
      25
    ],
    "start_token": 270,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      286,
      257,
      2183,
      2134,
      1912,
      319,
      10488,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Return of a custom object based on calculated values."
  },
  {
    "line": 60,
    "text": "        month_days = ZhDate.decode(year_code)",
    "annotation": "\u2705 Best Practice: Function name should be more descriptive to indicate its purpose or return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1227,
      62,
      12545,
      796,
      10511,
      10430,
      13,
      12501,
      1098,
      7,
      1941,
      62,
      8189,
      8
    ],
    "start_token": 291,
    "end_token": 312,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      815,
      307,
      517,
      35644,
      284,
      7603,
      663,
      4007,
      393,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Function name should be more descriptive to indicate its purpose or return value"
  },
  {
    "line": 62,
    "text": "        for pos, days in enumerate(accumulate(month_days)):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of system time can lead to non-deterministic behavior in certain applications",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1426,
      11,
      1528,
      287,
      27056,
      378,
      7,
      4134,
      388,
      5039,
      7,
      8424,
      62,
      12545,
      8,
      2599
    ],
    "start_token": 312,
    "end_token": 336,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1080,
      640,
      460,
      1085,
      284,
      1729,
      12,
      67,
      2357,
      49228,
      4069,
      287,
      1728,
      5479
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of system time can lead to non-deterministic behavior in certain applications"
  },
  {
    "line": 63,
    "text": "            if days_passed + 1 <= days:",
    "annotation": "\ud83e\udde0 ML Signal: Use of current date/time can indicate time-based logic or features",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1528,
      62,
      6603,
      276,
      1343,
      352,
      19841,
      1528,
      25
    ],
    "start_token": 336,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1459,
      3128,
      14,
      2435,
      460,
      7603,
      640,
      12,
      3106,
      9156,
      393,
      3033
    ],
    "label": "ml_signal",
    "reason": "Use of current date/time can indicate time-based logic or features"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a private method indicates encapsulation and abstraction patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 357,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2839,
      2446,
      9217,
      32652,
      1741,
      290,
      34651,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a private method indicates encapsulation and abstraction patterns."
  },
  {
    "line": 68,
    "text": "        leap_month = False",
    "annotation": "\u2705 Best Practice: Use of a private method to encapsulate functionality.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16470,
      62,
      8424,
      796,
      10352
    ],
    "start_token": 357,
    "end_token": 369,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2839,
      2446,
      284,
      32652,
      5039,
      11244,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a private method to encapsulate functionality."
  },
  {
    "line": 70,
    "text": "            lunar_month = month",
    "annotation": "\ud83e\udde0 ML Signal: Decoding a year code to get month days is a specific pattern for date calculations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25572,
      62,
      8424,
      796,
      1227
    ],
    "start_token": 369,
    "end_token": 385,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4280,
      7656,
      257,
      614,
      2438,
      284,
      651,
      1227,
      1528,
      318,
      257,
      2176,
      3912,
      329,
      3128,
      16765,
      13
    ],
    "label": "ml_signal",
    "reason": "Decoding a year code to get month days is a specific pattern for date calculations."
  },
  {
    "line": 72,
    "text": "            lunar_month = month - 1",
    "annotation": "\ud83e\udde0 ML Signal: Bitwise operations on year_code to determine leap month.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25572,
      62,
      8424,
      796,
      1227,
      532,
      352
    ],
    "start_token": 385,
    "end_token": 403,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4722,
      3083,
      4560,
      319,
      614,
      62,
      8189,
      284,
      5004,
      16470,
      1227,
      13
    ],
    "label": "ml_signal",
    "reason": "Bitwise operations on year_code to determine leap month."
  },
  {
    "line": 79,
    "text": "    @staticmethod",
    "annotation": "\u2705 Best Practice: Use of sum() for calculating total days in months.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 403,
    "end_token": 409,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2160,
      3419,
      329,
      26019,
      2472,
      1528,
      287,
      1933,
      13
    ],
    "label": "best_practice",
    "reason": "Use of sum() for calculating total days in months."
  },
  {
    "line": 81,
    "text": "        return ZhDate.from_datetime(datetime.now())",
    "annotation": "\u2705 Best Practice: Clear return statement with calculation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      10511,
      10430,
      13,
      6738,
      62,
      19608,
      8079,
      7,
      19608,
      8079,
      13,
      2197,
      28955
    ],
    "start_token": 409,
    "end_token": 430,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      1441,
      2643,
      351,
      17952,
      13
    ],
    "label": "best_practice",
    "reason": "Clear return statement with calculation."
  },
  {
    "line": 80,
    "text": "    def today():",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a fixed range to construct a string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1909,
      33529
    ],
    "start_token": 430,
    "end_token": 436,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      5969,
      2837,
      284,
      5678,
      257,
      4731
    ],
    "label": "ml_signal",
    "reason": "Iterating over a fixed range to construct a string"
  },
  {
    "line": 90,
    "text": "        # \u5f53\u524d\u519c\u5386\u5e74\u7684\u95f0\u6708\uff0c\u4e3a0\u8868\u793a\u65e0\u6da6\u53f6",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on numeric ranges",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      121,
      241,
      30298,
      235,
      37863,
      250,
      43889,
      228,
      33176,
      112,
      21410,
      29785,
      108,
      17312,
      230,
      171,
      120,
      234,
      10310,
      118,
      15,
      26193,
      101,
      163,
      97,
      118,
      33768,
      254,
      162,
      114,
      99,
      20998,
      114
    ],
    "start_token": 436,
    "end_token": 478,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      35575,
      16069
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on numeric ranges"
  },
  {
    "line": 105,
    "text": "        ZHNUMS = \"\u3007\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential off-by-one error if lunar_year is not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1168,
      39,
      45,
      52,
      5653,
      796,
      366,
      5099,
      229,
      31660,
      12859,
      234,
      49011,
      32368,
      249,
      49390,
      17739,
      255,
      10310,
      225,
      17739,
      104,
      20046,
      251,
      39355,
      223,
      1
    ],
    "start_token": 478,
    "end_token": 512,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      572,
      12,
      1525,
      12,
      505,
      4049,
      611,
      25572,
      62,
      1941,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential off-by-one error if lunar_year is not validated"
  },
  {
    "line": 107,
    "text": "        for i in range(0, 4):",
    "annotation": "\u2705 Best Practice: Use of format for string construction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      15,
      11,
      604,
      2599
    ],
    "start_token": 512,
    "end_token": 528,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      329,
      4731,
      5103
    ],
    "label": "best_practice",
    "reason": "Use of format for string construction"
  },
  {
    "line": 107,
    "text": "        for i in range(0, 4):",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      15,
      11,
      604,
      2599
    ],
    "start_token": 528,
    "end_token": 544,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 112,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of string formatting with format method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 544,
    "end_token": 553,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4731,
      33313,
      351,
      5794,
      2446
    ],
    "label": "ml_signal",
    "reason": "Usage of string formatting with format method"
  },
  {
    "line": 112,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Implementing __repr__ to return a string representation of the object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 553,
    "end_token": 562,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      260,
      1050,
      834,
      284,
      1441,
      257,
      4731,
      10552,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Implementing __repr__ to return a string representation of the object"
  },
  {
    "line": 114,
    "text": "",
    "annotation": "\u2705 Best Practice: Using __str__ in __repr__ to provide a consistent string representation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 562,
    "end_token": 562,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      2536,
      834,
      287,
      11593,
      260,
      1050,
      834,
      284,
      2148,
      257,
      6414,
      4731,
      10552
    ],
    "label": "best_practice",
    "reason": "Using __str__ in __repr__ to provide a consistent string representation"
  },
  {
    "line": 115,
    "text": "        if self.lunar_month == 1:",
    "annotation": "\u2705 Best Practice: Check if the object is an instance of the expected class before proceeding.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      75,
      403,
      283,
      62,
      8424,
      6624,
      352,
      25
    ],
    "start_token": 562,
    "end_token": 580,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      2134,
      318,
      281,
      4554,
      286,
      262,
      2938,
      1398,
      878,
      18788,
      13
    ],
    "label": "best_practice",
    "reason": "Check if the object is an instance of the expected class before proceeding."
  },
  {
    "line": 117,
    "text": "        elif self.lunar_month == 12:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic TypeError without additional context.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2116,
      13,
      75,
      403,
      283,
      62,
      8424,
      6624,
      1105,
      25
    ],
    "start_token": 580,
    "end_token": 599,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      5994,
      12331,
      1231,
      3224,
      4732,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic TypeError without additional context."
  },
  {
    "line": 119,
    "text": "        elif self.lunar_month <= 10:",
    "annotation": "\ud83e\udde0 ML Signal: Comparing attributes for equality.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2116,
      13,
      75,
      403,
      283,
      62,
      8424,
      19841,
      838,
      25
    ],
    "start_token": 599,
    "end_token": 618,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3082,
      1723,
      12608,
      329,
      10537,
      13
    ],
    "label": "ml_signal",
    "reason": "Comparing attributes for equality."
  },
  {
    "line": 121,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Comparing attributes for equality.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 618,
    "end_token": 627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3082,
      1723,
      12608,
      329,
      10537,
      13
    ],
    "label": "ml_signal",
    "reason": "Comparing attributes for equality."
  },
  {
    "line": 123,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Comparing attributes for equality.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 627,
    "end_token": 627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3082,
      1723,
      12608,
      329,
      10537,
      13
    ],
    "label": "ml_signal",
    "reason": "Comparing attributes for equality."
  },
  {
    "line": 125,
    "text": "            zh_day = \"\u521d{}\".format(ZHNUMS[self.lunar_day])",
    "annotation": "\ud83e\udde0 ML Signal: Comparing attributes for equality.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      26344,
      251,
      90,
      92,
      1911,
      18982,
      7,
      57,
      39,
      45,
      52,
      5653,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      820,
      12962
    ],
    "start_token": 627,
    "end_token": 665,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3082,
      1723,
      12608,
      329,
      10537,
      13
    ],
    "label": "ml_signal",
    "reason": "Comparing attributes for equality."
  },
  {
    "line": 127,
    "text": "            zh_day = \"\u5341{}\".format(ZHNUMS[self.lunar_day - 10])",
    "annotation": "\u2705 Best Practice: Return a boolean expression directly.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      39355,
      223,
      90,
      92,
      1911,
      18982,
      7,
      57,
      39,
      45,
      52,
      5653,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      820,
      532,
      838,
      12962
    ],
    "start_token": 665,
    "end_token": 705,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      25131,
      5408,
      3264,
      13
    ],
    "label": "best_practice",
    "reason": "Return a boolean expression directly."
  },
  {
    "line": 123,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for type to ensure correct operation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 705,
    "end_token": 705,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      2099,
      284,
      4155,
      3376,
      4905
    ],
    "label": "best_practice",
    "reason": "Check for type to ensure correct operation"
  },
  {
    "line": 125,
    "text": "            zh_day = \"\u521d{}\".format(ZHNUMS[self.lunar_day])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Error message should be in English for broader understanding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      26344,
      251,
      90,
      92,
      1911,
      18982,
      7,
      57,
      39,
      45,
      52,
      5653,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      820,
      12962
    ],
    "start_token": 705,
    "end_token": 743,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13047,
      3275,
      815,
      307,
      287,
      3594,
      329,
      11622,
      4547
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Error message should be in English for broader understanding"
  },
  {
    "line": 127,
    "text": "            zh_day = \"\u5341{}\".format(ZHNUMS[self.lunar_day - 10])",
    "annotation": "\ud83e\udde0 ML Signal: Custom addition operation for a class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      39355,
      223,
      90,
      92,
      1911,
      18982,
      7,
      57,
      39,
      45,
      52,
      5653,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      820,
      532,
      838,
      12962
    ],
    "start_token": 743,
    "end_token": 783,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      3090,
      4905,
      329,
      257,
      1398
    ],
    "label": "ml_signal",
    "reason": "Custom addition operation for a class"
  },
  {
    "line": 127,
    "text": "            zh_day = \"\u5341{}\".format(ZHNUMS[self.lunar_day - 10])",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type before operation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      39355,
      223,
      90,
      92,
      1911,
      18982,
      7,
      57,
      39,
      45,
      52,
      5653,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      820,
      532,
      838,
      12962
    ],
    "start_token": 783,
    "end_token": 823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      878,
      4905
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type before operation"
  },
  {
    "line": 129,
    "text": "            zh_day = \"\u4e8c\u5341\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of timedelta for date arithmetic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      12859,
      234,
      39355,
      223,
      1
    ],
    "start_token": 823,
    "end_token": 845,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      28805,
      12514,
      329,
      3128,
      34768
    ],
    "label": "ml_signal",
    "reason": "Use of timedelta for date arithmetic"
  },
  {
    "line": 131,
    "text": "            zh_day = \"\u5eff{}\".format(ZHNUMS[self.lunar_day - 20])",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type before operation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1976,
      71,
      62,
      820,
      796,
      366,
      161,
      119,
      123,
      90,
      92,
      1911,
      18982,
      7,
      57,
      39,
      45,
      52,
      5653,
      58,
      944,
      13,
      75,
      403,
      283,
      62,
      820,
      532,
      1160,
      12962
    ],
    "start_token": 845,
    "end_token": 886,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      878,
      4905
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type before operation"
  },
  {
    "line": 134,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type before operation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 886,
    "end_token": 886,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      878,
      4905
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type before operation"
  },
  {
    "line": 139,
    "text": "        return \"{}\u5e74{}\u6708{} {}{}\u5e74\".format(zh_year, zh_month, zh_day, year_tiandi, shengxiao[(self.lunar_year - 1900) % 12])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for TypeError if input is not as expected",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      45144,
      92,
      33176,
      112,
      90,
      92,
      17312,
      230,
      90,
      92,
      1391,
      18477,
      92,
      33176,
      112,
      1911,
      18982,
      7,
      23548,
      62,
      1941,
      11,
      1976,
      71,
      62,
      8424,
      11,
      1976,
      71,
      62,
      820,
      11,
      614,
      62,
      20259,
      26800,
      11,
      673,
      782,
      87,
      13481,
      58,
      7,
      944,
      13,
      75,
      403,
      283,
      62,
      1941,
      532,
      21489,
      8,
      4064,
      1105,
      12962
    ],
    "start_token": 886,
    "end_token": 950,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5994,
      12331,
      611,
      5128,
      318,
      407,
      355,
      2938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for TypeError if input is not as expected"
  },
  {
    "line": 140,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 950,
    "end_token": 950,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 142,
    "text": "        \"\"\"\u6253\u5370\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5",
    "annotation": "\ud83e\udde0 ML Signal: Use of string formatting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      33699,
      241,
      39355,
      108,
      27764,
      245,
      163,
      105,
      99,
      10310,
      110,
      21410,
      43095,
      37345,
      243
    ],
    "start_token": 950,
    "end_token": 973,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of string formatting"
  },
  {
    "line": 154,
    "text": "            raise TypeError(\"\u6bd4\u8f83\u5fc5\u987b\u90fd\u662fZhDate\u7c7b\u578b\")",
    "annotation": "\u2705 Best Practice: Use of range checks for input validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      5994,
      12331,
      7203,
      162,
      107,
      242,
      164,
      122,
      225,
      33232,
      227,
      165,
      94,
      119,
      32849,
      121,
      42468,
      57,
      71,
      10430,
      163,
      109,
      119,
      161,
      252,
      233,
      4943
    ],
    "start_token": 973,
    "end_token": 1012,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2837,
      8794,
      329,
      5128,
      21201
    ],
    "label": "best_practice",
    "reason": "Use of range checks for input validation"
  },
  {
    "line": 157,
    "text": "        cond3 = self.lunar_day == another.lunar_day",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if CHINESEYEARCODE is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1779,
      18,
      796,
      2116,
      13,
      75,
      403,
      283,
      62,
      820,
      6624,
      1194,
      13,
      75,
      403,
      283,
      62,
      820
    ],
    "start_token": 1012,
    "end_token": 1037,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      5870,
      1268,
      1546,
      22348,
      17133,
      34,
      16820,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if CHINESEYEARCODE is not validated or sanitized"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Bitwise operations can be error-prone and hard to maintain",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1037,
    "end_token": 1037,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4722,
      3083,
      4560,
      460,
      307,
      4049,
      12,
      46330,
      290,
      1327,
      284,
      5529
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Bitwise operations can be error-prone and hard to maintain"
  },
  {
    "line": 164,
    "text": "        return ZhDate.from_datetime(self.to_datetime() + timedelta(days=another))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Bitwise operations can be error-prone and hard to maintain",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      10511,
      10430,
      13,
      6738,
      62,
      19608,
      8079,
      7,
      944,
      13,
      1462,
      62,
      19608,
      8079,
      3419,
      1343,
      28805,
      12514,
      7,
      12545,
      28,
      29214,
      4008
    ],
    "start_token": 1037,
    "end_token": 1068,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4722,
      3083,
      4560,
      460,
      307,
      4049,
      12,
      46330,
      290,
      1327,
      284,
      5529
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Bitwise operations can be error-prone and hard to maintain"
  },
  {
    "line": 170,
    "text": "            return (self.to_datetime() - another.to_datetime()).days",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Bitwise operations can be error-prone and hard to maintain",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      357,
      944,
      13,
      1462,
      62,
      19608,
      8079,
      3419,
      532,
      1194,
      13,
      1462,
      62,
      19608,
      8079,
      3419,
      737,
      12545
    ],
    "start_token": 1068,
    "end_token": 1098,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4722,
      3083,
      4560,
      460,
      307,
      4049,
      12,
      46330,
      290,
      1327,
      284,
      5529
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Bitwise operations can be error-prone and hard to maintain"
  },
  {
    "line": 177,
    "text": "    \u4ee5\u4e0b\u4e3a\u5e2e\u52a9\u51fd\u6570",
    "annotation": "\u2705 Best Practice: Use of bitwise operations for efficient computation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      20015,
      98,
      10310,
      233,
      10310,
      118,
      30585,
      106,
      27950,
      102,
      49035,
      121,
      46763,
      108
    ],
    "start_token": 1098,
    "end_token": 1116,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1643,
      3083,
      4560,
      329,
      6942,
      29964
    ],
    "label": "best_practice",
    "reason": "Use of bitwise operations for efficient computation"
  },
  {
    "line": 179,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of bitwise operations to determine month days",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1116,
    "end_token": 1116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1643,
      3083,
      4560,
      284,
      5004,
      1227,
      1528
    ],
    "label": "ml_signal",
    "reason": "Use of bitwise operations to determine month days"
  },
  {
    "line": 181,
    "text": "    def __tiandi(anum):",
    "annotation": "\u2705 Best Practice: Checking for leap month using bitwise operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      20259,
      26800,
      7,
      272,
      388,
      2599
    ],
    "start_token": 1116,
    "end_token": 1127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      16470,
      1227,
      1262,
      1643,
      3083,
      4560
    ],
    "label": "best_practice",
    "reason": "Checking for leap month using bitwise operations"
  },
  {
    "line": 183,
    "text": "        di = \"\u5b50\u4e11\u5bc5\u536f\u8fb0\u5df3\u5348\u672a\u7533\u9149\u620c\u4ea5\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to handle leap months",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2566,
      796,
      366,
      36310,
      10310,
      239,
      43380,
      227,
      39355,
      107,
      164,
      122,
      108,
      32432,
      111,
      39355,
      230,
      17312,
      103,
      18796,
      111,
      165,
      227,
      231,
      22755,
      234,
      12859,
      98,
      1
    ],
    "start_token": 1127,
    "end_token": 1163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5412,
      16470,
      1933
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to handle leap months"
  },
  {
    "line": 183,
    "text": "        di = \"\u5b50\u4e11\u5bc5\u536f\u8fb0\u5df3\u5348\u672a\u7533\u9149\u620c\u4ea5\"",
    "annotation": "\u2705 Best Practice: Add a docstring to describe the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2566,
      796,
      366,
      36310,
      10310,
      239,
      43380,
      227,
      39355,
      107,
      164,
      122,
      108,
      32432,
      111,
      39355,
      230,
      17312,
      103,
      18796,
      111,
      165,
      227,
      231,
      22755,
      234,
      12859,
      98,
      1
    ],
    "start_token": 1163,
    "end_token": 1199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Add a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 191,
    "text": "            year {int} -- \u519c\u5386\u5e74\u4efd",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes CHINESEYEARCODE is properly defined and indexed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      1391,
      600,
      92,
      1377,
      10263,
      228,
      250,
      43889,
      228,
      33176,
      112,
      20015,
      121
    ],
    "start_token": 1199,
    "end_token": 1224,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      5870,
      1268,
      1546,
      22348,
      17133,
      34,
      16820,
      318,
      6105,
      5447,
      290,
      41497
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes CHINESEYEARCODE is properly defined and indexed"
  },
  {
    "line": 191,
    "text": "            year {int} -- \u519c\u5386\u5e74\u4efd",
    "annotation": "\u2705 Best Practice: Use __all__ to define the public interface of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      1391,
      600,
      92,
      1377,
      10263,
      228,
      250,
      43889,
      228,
      33176,
      112,
      20015,
      121
    ],
    "start_token": 1224,
    "end_token": 1249,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      439,
      834,
      284,
      8160,
      262,
      1171,
      7071,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use __all__ to define the public interface of the module"
  }
]
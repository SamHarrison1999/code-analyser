[
  {
    "line": 4,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external library for pagination",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      5888,
      329,
      42208,
      1883
    ],
    "label": "ml_signal",
    "reason": "Usage of external library for pagination"
  },
  {
    "line": 22,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of utility function for checking DataFrame null values",
    "confidence": 0.5,
    "tokens": [
      8
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10361,
      2163,
      329,
      10627,
      6060,
      19778,
      9242,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of utility function for checking DataFrame null values"
  },
  {
    "line": 32,
    "text": ")",
    "annotation": "\u2705 Best Practice: Use of logging for tracking and debugging",
    "confidence": 0.5,
    "tokens": [
      8
    ],
    "start_token": 1,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      290,
      28769
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking and debugging"
  },
  {
    "line": 31,
    "text": "    date_and_time,",
    "annotation": "\ud83e\udde0 ML Signal: Function signature and parameter types can be used to infer usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3128,
      62,
      392,
      62,
      2435,
      11
    ],
    "start_token": 2,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      290,
      11507,
      3858,
      460,
      307,
      973,
      284,
      13249,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Function signature and parameter types can be used to infer usage patterns."
  },
  {
    "line": 32,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: API call pattern can be used to understand data retrieval methods.",
    "confidence": 0.5,
    "tokens": [
      8
    ],
    "start_token": 11,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      3912,
      460,
      307,
      973,
      284,
      1833,
      1366,
      45069,
      5050,
      13
    ],
    "label": "ml_signal",
    "reason": "API call pattern can be used to understand data retrieval methods."
  },
  {
    "line": 41,
    "text": "        start_timestamp=kdata_request_model.start_timestamp,",
    "annotation": "\u2705 Best Practice: Check for null data before processing to avoid errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      74,
      7890,
      62,
      25927,
      62,
      19849,
      13,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 12,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      9242,
      1366,
      878,
      7587,
      284,
      3368,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Check for null data before processing to avoid errors."
  },
  {
    "line": 41,
    "text": "        start_timestamp=kdata_request_model.start_timestamp,",
    "annotation": "\u2705 Best Practice: Convert timestamps to a consistent format for easier processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      74,
      7890,
      62,
      25927,
      62,
      19849,
      13,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 36,
    "end_token": 60,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4628,
      395,
      9430,
      284,
      257,
      6414,
      5794,
      329,
      4577,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Convert timestamps to a consistent format for easier processing."
  },
  {
    "line": 47,
    "text": "        kdata_df[\"data\"] = kdata_df.apply(",
    "annotation": "\u2705 Best Practice: Use apply for row-wise operations to maintain readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      7890,
      62,
      7568,
      14692,
      7890,
      8973,
      796,
      479,
      7890,
      62,
      7568,
      13,
      39014,
      7
    ],
    "start_token": 60,
    "end_token": 82,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4174,
      329,
      5752,
      12,
      3083,
      4560,
      284,
      5529,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use apply for row-wise operations to maintain readability."
  },
  {
    "line": 53,
    "text": "        df = kdata_df.groupby(\"entity_id\").agg(",
    "annotation": "\u2705 Best Practice: Use groupby and agg for efficient data aggregation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      479,
      7890,
      62,
      7568,
      13,
      8094,
      1525,
      7203,
      26858,
      62,
      312,
      11074,
      9460,
      7
    ],
    "start_token": 82,
    "end_token": 105,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1448,
      1525,
      290,
      4194,
      329,
      6942,
      1366,
      46500,
      13
    ],
    "label": "best_practice",
    "reason": "Use groupby and agg for efficient data aggregation."
  },
  {
    "line": 57,
    "text": "            datas=(\"data\", lambda data: list(data)),",
    "annotation": "\u2705 Best Practice: Reset index after groupby to maintain DataFrame structure.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19395,
      28,
      7203,
      7890,
      1600,
      37456,
      1366,
      25,
      1351,
      7,
      7890,
      36911
    ],
    "start_token": 105,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      6376,
      706,
      1448,
      1525,
      284,
      5529,
      6060,
      19778,
      4645,
      13
    ],
    "label": "best_practice",
    "reason": "Reset index after groupby to maintain DataFrame structure."
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning data as a dictionary can indicate data serialization patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 128,
    "end_token": 128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1366,
      355,
      257,
      22155,
      460,
      7603,
      1366,
      11389,
      1634,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning data as a dictionary can indicate data serialization patterns."
  },
  {
    "line": 56,
    "text": "            level=(\"level\", \"first\"),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external API to fetch trading dates",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      7203,
      5715,
      1600,
      366,
      11085,
      12340
    ],
    "start_token": 128,
    "end_token": 147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      7824,
      284,
      21207,
      7313,
      9667
    ],
    "label": "ml_signal",
    "reason": "Usage of external API to fetch trading dates"
  },
  {
    "line": 57,
    "text": "            datas=(\"data\", lambda data: list(data)),",
    "annotation": "\ud83e\udde0 ML Signal: Querying data based on entity IDs and provider",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19395,
      28,
      7203,
      7890,
      1600,
      37456,
      1366,
      25,
      1351,
      7,
      7890,
      36911
    ],
    "start_token": 147,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      1912,
      319,
      9312,
      32373,
      290,
      10131
    ],
    "label": "ml_signal",
    "reason": "Querying data based on entity IDs and provider"
  },
  {
    "line": 63,
    "text": "def query_ts(ts_request_model: TSRequestModel):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if ts_df is None or not a DataFrame",
    "confidence": 1.0,
    "tokens": [
      4299,
      12405,
      62,
      912,
      7,
      912,
      62,
      25927,
      62,
      19849,
      25,
      26136,
      18453,
      17633,
      2599
    ],
    "start_token": 170,
    "end_token": 185,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      40379,
      62,
      7568,
      318,
      6045,
      393,
      407,
      257,
      6060,
      19778
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if ts_df is None or not a DataFrame"
  },
  {
    "line": 63,
    "text": "def query_ts(ts_request_model: TSRequestModel):",
    "annotation": "\u2705 Best Practice: Using apply with lambda for row-wise operations",
    "confidence": 0.5,
    "tokens": [
      4299,
      12405,
      62,
      912,
      7,
      912,
      62,
      25927,
      62,
      19849,
      25,
      26136,
      18453,
      17633,
      2599
    ],
    "start_token": 185,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4174,
      351,
      37456,
      329,
      5752,
      12,
      3083,
      4560
    ],
    "label": "best_practice",
    "reason": "Using apply with lambda for row-wise operations"
  },
  {
    "line": 74,
    "text": "            ].values.tolist(),",
    "annotation": "\u2705 Best Practice: Using groupby and agg for data aggregation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20740,
      27160,
      13,
      83,
      349,
      396,
      22784
    ],
    "start_token": 200,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1448,
      1525,
      290,
      4194,
      329,
      1366,
      46500
    ],
    "label": "best_practice",
    "reason": "Using groupby and agg for data aggregation"
  },
  {
    "line": 79,
    "text": "            name=(\"name\", \"first\"),",
    "annotation": "\u2705 Best Practice: Resetting index for a clean DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      28,
      7203,
      3672,
      1600,
      366,
      11085,
      12340
    ],
    "start_token": 218,
    "end_token": 237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      329,
      257,
      3424,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Resetting index for a clean DataFrame"
  },
  {
    "line": 81,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame to dictionary for record-oriented data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 237,
    "end_token": 245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      284,
      22155,
      329,
      1700,
      12,
      17107,
      1366
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame to dictionary for record-oriented data"
  },
  {
    "line": 77,
    "text": "        df = ts_df.groupby(\"entity_id\").agg(",
    "annotation": "\u2705 Best Practice: Use of context manager for session ensures proper resource management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      40379,
      62,
      7568,
      13,
      8094,
      1525,
      7203,
      26858,
      62,
      312,
      11074,
      9460,
      7
    ],
    "start_token": 245,
    "end_token": 267,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4732,
      4706,
      329,
      6246,
      19047,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use of context manager for session ensures proper resource management"
  },
  {
    "line": 80,
    "text": "            datas=(\"data\", lambda data: list(data)),",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date to string and timestamp for consistent date handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19395,
      28,
      7203,
      7890,
      1600,
      37456,
      1366,
      25,
      1351,
      7,
      7890,
      36911
    ],
    "start_token": 267,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      284,
      4731,
      290,
      41033,
      329,
      6414,
      3128,
      9041
    ],
    "label": "ml_signal",
    "reason": "Conversion of date to string and timestamp for consistent date handling"
  },
  {
    "line": 83,
    "text": "        return df.to_dict(orient=\"records\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of trading signal type as a value for plan identification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764,
      13,
      1462,
      62,
      11600,
      7,
      13989,
      2625,
      8344,
      3669,
      4943
    ],
    "start_token": 290,
    "end_token": 309,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7313,
      6737,
      2099,
      355,
      257,
      1988,
      329,
      1410,
      11795
    ],
    "label": "ml_signal",
    "reason": "Use of trading signal type as a value for plan identification"
  },
  {
    "line": 86,
    "text": "def build_trading_plan(build_trading_plan_model: BuildTradingPlanModel):",
    "annotation": "\ud83e\udde0 ML Signal: Unique plan ID generation pattern",
    "confidence": 1.0,
    "tokens": [
      4299,
      1382,
      62,
      2213,
      4980,
      62,
      11578,
      7,
      11249,
      62,
      2213,
      4980,
      62,
      11578,
      62,
      19849,
      25,
      10934,
      2898,
      4980,
      20854,
      17633,
      2599
    ],
    "start_token": 309,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30015,
      1410,
      4522,
      5270,
      3912
    ],
    "label": "ml_signal",
    "reason": "Unique plan ID generation pattern"
  },
  {
    "line": 87,
    "text": "    with contract_api.DBSession(provider=\"zvt\", data_schema=TradingPlan)() as session:",
    "annotation": "\u2705 Best Practice: Use of query_data method for data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      351,
      2775,
      62,
      15042,
      13,
      35,
      4462,
      2521,
      7,
      15234,
      1304,
      2625,
      89,
      36540,
      1600,
      1366,
      62,
      15952,
      2611,
      28,
      2898,
      4980,
      20854,
      8,
      3419,
      355,
      6246,
      25
    ],
    "start_token": 332,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12405,
      62,
      7890,
      2446,
      329,
      1366,
      45069
    ],
    "label": "best_practice",
    "reason": "Use of query_data method for data retrieval"
  },
  {
    "line": 92,
    "text": "        plan_id = f\"{stock_id}_{trading_date_str}_{signal}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assertion can raise exceptions if condition is not met",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1410,
      62,
      312,
      796,
      277,
      1,
      90,
      13578,
      62,
      312,
      92,
      23330,
      2213,
      4980,
      62,
      4475,
      62,
      2536,
      92,
      23330,
      12683,
      282,
      36786
    ],
    "start_token": 363,
    "end_token": 393,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      460,
      5298,
      13269,
      611,
      4006,
      318,
      407,
      1138
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assertion can raise exceptions if condition is not met"
  },
  {
    "line": 92,
    "text": "        plan_id = f\"{stock_id}_{trading_date_str}_{signal}\"",
    "annotation": "\u2705 Best Practice: Use of query_data method for data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1410,
      62,
      312,
      796,
      277,
      1,
      90,
      13578,
      62,
      312,
      92,
      23330,
      2213,
      4980,
      62,
      4475,
      62,
      2536,
      92,
      23330,
      12683,
      282,
      36786
    ],
    "start_token": 393,
    "end_token": 423,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12405,
      62,
      7890,
      2446,
      329,
      1366,
      45069
    ],
    "label": "best_practice",
    "reason": "Use of query_data method for data retrieval"
  },
  {
    "line": 92,
    "text": "        plan_id = f\"{stock_id}_{trading_date_str}_{signal}\"",
    "annotation": "\u2705 Best Practice: Use of ORM model for data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1410,
      62,
      312,
      796,
      277,
      1,
      90,
      13578,
      62,
      312,
      92,
      23330,
      2213,
      4980,
      62,
      4475,
      62,
      2536,
      92,
      23330,
      12683,
      282,
      36786
    ],
    "start_token": 423,
    "end_token": 453,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6375,
      44,
      2746,
      329,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of ORM model for data manipulation"
  },
  {
    "line": 114,
    "text": "                trading_signal_type=signal,",
    "annotation": "\ud83e\udde0 ML Signal: Timestamping for tracking plan creation or update time",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7313,
      62,
      12683,
      282,
      62,
      4906,
      28,
      12683,
      282,
      11
    ],
    "start_token": 453,
    "end_token": 478,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5045,
      27823,
      278,
      329,
      9646,
      1410,
      6282,
      393,
      4296,
      640
    ],
    "label": "ml_signal",
    "reason": "Timestamping for tracking plan creation or update time"
  },
  {
    "line": 115,
    "text": "                status=ExecutionStatus.init.value,",
    "annotation": "\u2705 Best Practice: Adding and committing changes to the session",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3722,
      28,
      23002,
      1009,
      19580,
      13,
      15003,
      13,
      8367,
      11
    ],
    "start_token": 478,
    "end_token": 503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      290,
      17222,
      2458,
      284,
      262,
      6246
    ],
    "label": "best_practice",
    "reason": "Adding and committing changes to the session"
  },
  {
    "line": 118,
    "text": "        session.add(plan)",
    "annotation": "\u2705 Best Practice: Refreshing the session to get the latest state of the object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      13,
      2860,
      7,
      11578,
      8
    ],
    "start_token": 503,
    "end_token": 516,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6524,
      411,
      722,
      262,
      6246,
      284,
      651,
      262,
      3452,
      1181,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Refreshing the session to get the latest state of the object"
  },
  {
    "line": 111,
    "text": "                buy_price=build_trading_plan_model.buy_price,",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific input type can be used to infer usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2822,
      62,
      20888,
      28,
      11249,
      62,
      2213,
      4980,
      62,
      11578,
      62,
      19849,
      13,
      17846,
      62,
      20888,
      11
    ],
    "start_token": 516,
    "end_token": 548,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      5128,
      2099,
      460,
      307,
      973,
      284,
      13249,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific input type can be used to infer usage patterns"
  },
  {
    "line": 113,
    "text": "                trading_reason=build_trading_plan_model.trading_reason,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of external session management, ensure proper handling of session lifecycle",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7313,
      62,
      41181,
      28,
      11249,
      62,
      2213,
      4980,
      62,
      11578,
      62,
      19849,
      13,
      2213,
      4980,
      62,
      41181,
      11
    ],
    "start_token": 548,
    "end_token": 581,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      7097,
      6246,
      4542,
      11,
      4155,
      1774,
      9041,
      286,
      6246,
      3868,
      47510
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of external session management, ensure proper handling of session lifecycle"
  },
  {
    "line": 115,
    "text": "                status=ExecutionStatus.init.value,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on object attributes can indicate decision-making patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3722,
      28,
      23002,
      1009,
      19580,
      13,
      15003,
      13,
      8367,
      11
    ],
    "start_token": 581,
    "end_token": 606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2134,
      12608,
      460,
      7603,
      2551,
      12,
      8601,
      7572
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on object attributes can indicate decision-making patterns"
  },
  {
    "line": 118,
    "text": "        session.add(plan)",
    "annotation": "\ud83e\udde0 ML Signal: Use of date and time manipulation functions can indicate temporal data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      13,
      2860,
      7,
      11578,
      8
    ],
    "start_token": 606,
    "end_token": 619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3128,
      290,
      640,
      17512,
      5499,
      460,
      7603,
      21964,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of date and time manipulation functions can indicate temporal data handling"
  },
  {
    "line": 126,
    "text": "        time_range = query_trading_plan_model.time_range",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific parameters can indicate data access patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      9521,
      796,
      12405,
      62,
      2213,
      4980,
      62,
      11578,
      62,
      19849,
      13,
      2435,
      62,
      9521
    ],
    "start_token": 619,
    "end_token": 642,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      10007,
      460,
      7603,
      1366,
      1895,
      7572
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific parameters can indicate data access patterns"
  },
  {
    "line": 128,
    "text": "            start_timestamp = date_time_by_interval(",
    "annotation": "\ud83e\udde0 ML Signal: Use of pagination function can indicate handling of large datasets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7
    ],
    "start_token": 642,
    "end_token": 667,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      42208,
      1883,
      2163,
      460,
      7603,
      9041,
      286,
      1588,
      40522
    ],
    "label": "ml_signal",
    "reason": "Use of pagination function can indicate handling of large datasets"
  },
  {
    "line": 126,
    "text": "        time_range = query_trading_plan_model.time_range",
    "annotation": "\ud83e\udde0 ML Signal: Use of a database session pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      9521,
      796,
      12405,
      62,
      2213,
      4980,
      62,
      11578,
      62,
      19849,
      13,
      2435,
      62,
      9521
    ],
    "start_token": 667,
    "end_token": 690,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      6831,
      6246,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of a database session pattern"
  },
  {
    "line": 128,
    "text": "            start_timestamp = date_time_by_interval(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for SQL injection if filters are not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7
    ],
    "start_token": 690,
    "end_token": 715,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for SQL injection if filters are not properly sanitized"
  },
  {
    "line": 128,
    "text": "            start_timestamp = date_time_by_interval(",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters and ordering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      796,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      7
    ],
    "start_token": 715,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      290,
      16216
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters and ordering"
  },
  {
    "line": 134,
    "text": "            end_timestamp = time_range.absolute_time_range.end_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Use of a database session pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      796,
      640,
      62,
      9521,
      13,
      48546,
      62,
      2435,
      62,
      9521,
      13,
      437,
      62,
      16514,
      27823
    ],
    "start_token": 740,
    "end_token": 770,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      6831,
      6246,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of a database session pattern"
  },
  {
    "line": 135,
    "text": "        selectable = TradingPlan.query_data(",
    "annotation": "\u2705 Best Practice: Use of context manager for database session",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2922,
      540,
      796,
      25469,
      20854,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 770,
    "end_token": 787,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4732,
      4706,
      329,
      6831,
      6246
    ],
    "label": "best_practice",
    "reason": "Use of context manager for database session"
  },
  {
    "line": 136,
    "text": "            session=session, start_timestamp=start_timestamp, end_timestamp=end_timestamp, return_type=\"select\"",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters and order",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      28,
      29891,
      11,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11,
      1441,
      62,
      4906,
      2625,
      19738,
      1
    ],
    "start_token": 787,
    "end_token": 828,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      290,
      1502
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters and order"
  },
  {
    "line": 136,
    "text": "            session=session, start_timestamp=start_timestamp, end_timestamp=end_timestamp, return_type=\"select\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      28,
      29891,
      11,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11,
      1441,
      62,
      4906,
      2625,
      19738,
      1
    ],
    "start_token": 828,
    "end_token": 869,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if filters are not properly sanitized"
  },
  {
    "line": 143,
    "text": "        return TradingPlan.query_data(",
    "annotation": "\u2705 Best Practice: Using a context manager for session management ensures that resources are properly managed and released.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25469,
      20854,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 869,
    "end_token": 884,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      4732,
      4706,
      329,
      6246,
      4542,
      19047,
      326,
      4133,
      389,
      6105,
      5257,
      290,
      2716,
      13
    ],
    "label": "best_practice",
    "reason": "Using a context manager for session management ensures that resources are properly managed and released."
  },
  {
    "line": 144,
    "text": "            session=session,",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters and ordering can indicate patterns in data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      28,
      29891,
      11
    ],
    "start_token": 884,
    "end_token": 899,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      290,
      16216,
      460,
      7603,
      7572,
      287,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters and ordering can indicate patterns in data retrieval."
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering by status and trading date can be used to identify specific trading plan conditions.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 899,
    "end_token": 899,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      416,
      3722,
      290,
      7313,
      3128,
      460,
      307,
      973,
      284,
      5911,
      2176,
      7313,
      1410,
      3403,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering by status and trading date can be used to identify specific trading plan conditions."
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Ordering by trading date can indicate a preference for processing data in chronological order.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 899,
    "end_token": 899,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8284,
      278,
      416,
      7313,
      3128,
      460,
      7603,
      257,
      12741,
      329,
      7587,
      1366,
      287,
      45946,
      1502,
      13
    ],
    "label": "ml_signal",
    "reason": "Ordering by trading date can indicate a preference for processing data in chronological order."
  },
  {
    "line": 152,
    "text": "    with contract_api.DBSession(provider=\"zvt\", data_schema=TradingPlan)() as session:",
    "annotation": "\ud83e\udde0 ML Signal: Returning data as a specific type can indicate how the data is intended to be used.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      351,
      2775,
      62,
      15042,
      13,
      35,
      4462,
      2521,
      7,
      15234,
      1304,
      2625,
      89,
      36540,
      1600,
      1366,
      62,
      15952,
      2611,
      28,
      2898,
      4980,
      20854,
      8,
      3419,
      355,
      6246,
      25
    ],
    "start_token": 899,
    "end_token": 930,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1366,
      355,
      257,
      2176,
      2099,
      460,
      7603,
      703,
      262,
      1366,
      318,
      5292,
      284,
      307,
      973,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning data as a specific type can indicate how the data is intended to be used."
  },
  {
    "line": 157,
    "text": "            return_type=\"domain\",",
    "annotation": "\u2705 Best Practice: Logging the current plans can help in debugging and tracking the flow of data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 930,
    "end_token": 947,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      262,
      1459,
      3352,
      460,
      1037,
      287,
      28769,
      290,
      9646,
      262,
      5202,
      286,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Logging the current plans can help in debugging and tracking the flow of data."
  },
  {
    "line": 151,
    "text": "def get_future_trading_plan():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific filter range for change_pct",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      37443,
      62,
      2213,
      4980,
      62,
      11578,
      33529
    ],
    "start_token": 947,
    "end_token": 957,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      8106,
      2837,
      329,
      1487,
      62,
      79,
      310
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific filter range for change_pct"
  },
  {
    "line": 157,
    "text": "            return_type=\"domain\",",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of statistics from a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 957,
    "end_token": 974,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      7869,
      422,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Calculation of statistics from a DataFrame"
  },
  {
    "line": 165,
    "text": "            filters=[TradingPlan.status == ExecutionStatus.init.value, TradingPlan.trading_date == current_date()],",
    "annotation": "\u2705 Best Practice: Check if the list is not empty before accessing the first element",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      2898,
      4980,
      20854,
      13,
      13376,
      6624,
      37497,
      19580,
      13,
      15003,
      13,
      8367,
      11,
      25469,
      20854,
      13,
      2213,
      4980,
      62,
      4475,
      6624,
      1459,
      62,
      4475,
      3419,
      4357
    ],
    "start_token": 974,
    "end_token": 1013,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      1351,
      318,
      407,
      6565,
      878,
      22534,
      262,
      717,
      5002
    ],
    "label": "best_practice",
    "reason": "Check if the list is not empty before accessing the first element"
  },
  {
    "line": 171,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific filter range for change_pct",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1013,
    "end_token": 1013,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      8106,
      2837,
      329,
      1487,
      62,
      79,
      310
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific filter range for change_pct"
  },
  {
    "line": 180,
    "text": "    start_timestamp = current_stats[\"timestamp\"]",
    "annotation": "\u2705 Best Practice: Check for null DataFrame before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      796,
      1459,
      62,
      34242,
      14692,
      16514,
      27823,
      8973
    ],
    "start_token": 1013,
    "end_token": 1028,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      9242,
      6060,
      19778,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check for null DataFrame before processing"
  },
  {
    "line": 182,
    "text": "    pre_date_df = Stock1mQuote.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of statistics from a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      662,
      62,
      4475,
      62,
      7568,
      796,
      10500,
      16,
      76,
      25178,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 1028,
    "end_token": 1046,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      7869,
      422,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Calculation of statistics from a DataFrame"
  },
  {
    "line": 183,
    "text": "        filters=[Stock1mQuote.timestamp < to_time_str(start_timestamp)],",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame operations to calculate statistics",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      26207,
      16,
      76,
      25178,
      13,
      16514,
      27823,
      1279,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      16514,
      27823,
      8,
      4357
    ],
    "start_token": 1046,
    "end_token": 1075,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4560,
      284,
      15284,
      7869
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame operations to calculate statistics"
  },
  {
    "line": 184,
    "text": "        order=Stock1mQuote.timestamp.desc(),",
    "annotation": "\u2705 Best Practice: Avoid using magic numbers; consider using a named constant for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      28,
      26207,
      16,
      76,
      25178,
      13,
      16514,
      27823,
      13,
      20147,
      22784
    ],
    "start_token": 1075,
    "end_token": 1094,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      1262,
      5536,
      3146,
      26,
      2074,
      1262,
      257,
      3706,
      6937,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Avoid using magic numbers; consider using a named constant for clarity"
  },
  {
    "line": 185,
    "text": "        limit=1,",
    "annotation": "\ud83e\udde0 ML Signal: Grouping data by a constant to aggregate over the entire DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      28,
      16,
      11
    ],
    "start_token": 1094,
    "end_token": 1105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      1366,
      416,
      257,
      6937,
      284,
      19406,
      625,
      262,
      2104,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Grouping data by a constant to aggregate over the entire DataFrame"
  },
  {
    "line": 185,
    "text": "        limit=1,",
    "annotation": "\ud83e\udde0 ML Signal: Custom aggregation function to count positive changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      28,
      16,
      11
    ],
    "start_token": 1105,
    "end_token": 1116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      46500,
      2163,
      284,
      954,
      3967,
      2458
    ],
    "label": "ml_signal",
    "reason": "Custom aggregation function to count positive changes"
  },
  {
    "line": 199,
    "text": "        end_timestamp=end_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Custom aggregation function to count non-positive changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1116,
    "end_token": 1133,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      46500,
      2163,
      284,
      954,
      1729,
      12,
      24561,
      2458
    ],
    "label": "ml_signal",
    "reason": "Custom aggregation function to count non-positive changes"
  },
  {
    "line": 199,
    "text": "        end_timestamp=end_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Summing turnover values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1133,
    "end_token": 1150,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5060,
      2229,
      25079,
      3815
    ],
    "label": "ml_signal",
    "reason": "Summing turnover values"
  },
  {
    "line": 199,
    "text": "        end_timestamp=end_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Calculating mean of percentage changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 1150,
    "end_token": 1167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      1612,
      286,
      5873,
      2458
    ],
    "label": "ml_signal",
    "reason": "Calculating mean of percentage changes"
  },
  {
    "line": 200,
    "text": "        filters=[Stock1mQuote.change_pct >= -0.31, Stock1mQuote.change_pct <= 0.31],",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences of limit up events",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      26207,
      16,
      76,
      25178,
      13,
      3803,
      62,
      79,
      310,
      18189,
      532,
      15,
      13,
      3132,
      11,
      10500,
      16,
      76,
      25178,
      13,
      3803,
      62,
      79,
      310,
      19841,
      657,
      13,
      3132,
      4357
    ],
    "start_token": 1167,
    "end_token": 1205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      286,
      4179,
      510,
      2995
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences of limit up events"
  },
  {
    "line": 201,
    "text": "        columns=[\"timestamp\", \"entity_id\", \"time\", \"change_pct\", \"turnover\", \"is_limit_up\", \"is_limit_down\"],",
    "annotation": "\ud83e\udde0 ML Signal: Custom aggregation function to count limit down events",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      14692,
      16514,
      27823,
      1600,
      366,
      26858,
      62,
      312,
      1600,
      366,
      2435,
      1600,
      366,
      3803,
      62,
      79,
      310,
      1600,
      366,
      15344,
      2502,
      1600,
      366,
      271,
      62,
      32374,
      62,
      929,
      1600,
      366,
      271,
      62,
      32374,
      62,
      2902,
      33116
    ],
    "start_token": 1205,
    "end_token": 1250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      46500,
      2163,
      284,
      954,
      4179,
      866,
      2995
    ],
    "label": "ml_signal",
    "reason": "Custom aggregation function to count limit down events"
  },
  {
    "line": 207,
    "text": "        current_stats[\"turnover_change\"] = current_stats[\"turnover\"] - current_stats[\"pre_turnover\"]",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame to dictionary for record-based access",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      34242,
      14692,
      15344,
      2502,
      62,
      3803,
      8973,
      796,
      1459,
      62,
      34242,
      14692,
      15344,
      2502,
      8973,
      532,
      1459,
      62,
      34242,
      14692,
      3866,
      62,
      15344,
      2502,
      8973
    ],
    "start_token": 1250,
    "end_token": 1284,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      284,
      22155,
      329,
      1700,
      12,
      3106,
      1895
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame to dictionary for record-based access"
  },
  {
    "line": 200,
    "text": "        filters=[Stock1mQuote.change_pct >= -0.31, Stock1mQuote.change_pct <= 0.31],",
    "annotation": "\ud83e\udde0 ML Signal: Function name suggests a specific task related to stock data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      26207,
      16,
      76,
      25178,
      13,
      3803,
      62,
      79,
      310,
      18189,
      532,
      15,
      13,
      3132,
      11,
      10500,
      16,
      76,
      25178,
      13,
      3803,
      62,
      79,
      310,
      19841,
      657,
      13,
      3132,
      4357
    ],
    "start_token": 1284,
    "end_token": 1322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5644,
      257,
      2176,
      4876,
      3519,
      284,
      4283,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Function name suggests a specific task related to stock data processing"
  },
  {
    "line": 201,
    "text": "        columns=[\"timestamp\", \"entity_id\", \"time\", \"change_pct\", \"turnover\", \"is_limit_up\", \"is_limit_down\"],",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database using specific filters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      14692,
      16514,
      27823,
      1600,
      366,
      26858,
      62,
      312,
      1600,
      366,
      2435,
      1600,
      366,
      3803,
      62,
      79,
      310,
      1600,
      366,
      15344,
      2502,
      1600,
      366,
      271,
      62,
      32374,
      62,
      929,
      1600,
      366,
      271,
      62,
      32374,
      62,
      2902,
      33116
    ],
    "start_token": 1322,
    "end_token": 1367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831,
      1262,
      2176,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database using specific filters"
  },
  {
    "line": 211,
    "text": "def cal_quote_stats(quote_df):",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific columns and filters",
    "confidence": 0.5,
    "tokens": [
      4299,
      2386,
      62,
      22708,
      62,
      34242,
      7,
      22708,
      62,
      7568,
      2599
    ],
    "start_token": 1367,
    "end_token": 1378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      15180,
      290,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific columns and filters"
  },
  {
    "line": 221,
    "text": "            turnover=(\"turnover\", \"sum\"),",
    "annotation": "\ud83e\udde0 ML Signal: Converting a DataFrame column to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25079,
      28,
      7203,
      15344,
      2502,
      1600,
      366,
      16345,
      12340
    ],
    "start_token": 1378,
    "end_token": 1398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      6060,
      19778,
      5721,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Converting a DataFrame column to a list"
  },
  {
    "line": 222,
    "text": "            change_pct=(\"change_pct\", \"mean\"),",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific return type and index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      28,
      7203,
      3803,
      62,
      79,
      310,
      1600,
      366,
      32604,
      12340
    ],
    "start_token": 1398,
    "end_token": 1423,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      1441,
      2099,
      290,
      6376
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific return type and index"
  },
  {
    "line": 222,
    "text": "            change_pct=(\"change_pct\", \"mean\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'timestamp' column exists and has at least one entry",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      28,
      7203,
      3803,
      62,
      79,
      310,
      1600,
      366,
      32604,
      12340
    ],
    "start_token": 1423,
    "end_token": 1448,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      16514,
      27823,
      6,
      5721,
      7160,
      290,
      468,
      379,
      1551,
      530,
      5726
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'timestamp' column exists and has at least one entry"
  },
  {
    "line": 222,
    "text": "            change_pct=(\"change_pct\", \"mean\"),",
    "annotation": "\ud83e\udde0 ML Signal: Concatenating DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      28,
      7203,
      3803,
      62,
      79,
      310,
      1600,
      366,
      32604,
      12340
    ],
    "start_token": 1448,
    "end_token": 1473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      803,
      6060,
      35439
    ],
    "label": "ml_signal",
    "reason": "Concatenating DataFrames"
  },
  {
    "line": 235,
    "text": "        order=StockPools.timestamp.desc(),",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and aggregating DataFrame data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      28,
      26207,
      47,
      10141,
      13,
      16514,
      27823,
      13,
      20147,
      22784
    ],
    "start_token": 1473,
    "end_token": 1491,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      13262,
      803,
      6060,
      19778,
      1366
    ],
    "label": "ml_signal",
    "reason": "Grouping and aggregating DataFrame data"
  },
  {
    "line": 243,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Adding new columns to DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1491,
    "end_token": 1491,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      649,
      15180,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Adding new columns to DataFrame"
  },
  {
    "line": 244,
    "text": "    tag_df = StockTags.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Applying a function to DataFrame rows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7621,
      62,
      7568,
      796,
      10500,
      36142,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 1491,
    "end_token": 1505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      2163,
      284,
      6060,
      19778,
      15274
    ],
    "label": "ml_signal",
    "reason": "Applying a function to DataFrame rows"
  },
  {
    "line": 248,
    "text": "        return_type=\"df\",",
    "annotation": "\ud83e\udde0 ML Signal: Creating unique identifiers for DataFrame rows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      7568,
      1600
    ],
    "start_token": 1505,
    "end_token": 1518,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      3748,
      42814,
      329,
      6060,
      19778,
      15274
    ],
    "label": "ml_signal",
    "reason": "Creating unique identifiers for DataFrame rows"
  },
  {
    "line": 254,
    "text": "    quote_df = StockQuote.query_data(entity_ids=entity_ids, return_type=\"df\", index=\"entity_id\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing potentially sensitive data to the console",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9577,
      62,
      7568,
      796,
      10500,
      25178,
      13,
      22766,
      62,
      7890,
      7,
      26858,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11,
      1441,
      62,
      4906,
      2625,
      7568,
      1600,
      6376,
      2625,
      26858,
      62,
      312,
      4943
    ],
    "start_token": 1518,
    "end_token": 1552,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      6196,
      8564,
      1366,
      284,
      262,
      8624
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing potentially sensitive data to the console"
  },
  {
    "line": 255,
    "text": "    timestamp = quote_df[\"timestamp\"].tolist()[0]",
    "annotation": "\ud83e\udde0 ML Signal: Storing DataFrame to a database",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      41033,
      796,
      9577,
      62,
      7568,
      14692,
      16514,
      27823,
      1,
      4083,
      83,
      349,
      396,
      3419,
      58,
      15,
      60
    ],
    "start_token": 1552,
    "end_token": 1572,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      6060,
      19778,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Storing DataFrame to a database"
  },
  {
    "line": 248,
    "text": "        return_type=\"df\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific query pattern to retrieve stock pool data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      7568,
      1600
    ],
    "start_token": 1572,
    "end_token": 1585,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      12405,
      3912,
      284,
      19818,
      4283,
      5933,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific query pattern to retrieve stock pool data"
  },
  {
    "line": 248,
    "text": "        return_type=\"df\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `query_data` method is vulnerable to injection attacks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      7568,
      1600
    ],
    "start_token": 1585,
    "end_token": 1598,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      22766,
      62,
      7890,
      63,
      2446,
      318,
      8826,
      284,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `query_data` method is vulnerable to injection attacks"
  },
  {
    "line": 254,
    "text": "    quote_df = StockQuote.query_data(entity_ids=entity_ids, return_type=\"df\", index=\"entity_id\")",
    "annotation": "\u2705 Best Practice: Using descending order to get the latest timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9577,
      62,
      7568,
      796,
      10500,
      25178,
      13,
      22766,
      62,
      7890,
      7,
      26858,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11,
      1441,
      62,
      4906,
      2625,
      7568,
      1600,
      6376,
      2625,
      26858,
      62,
      312,
      4943
    ],
    "start_token": 1598,
    "end_token": 1632,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      31491,
      1502,
      284,
      651,
      262,
      3452,
      41033
    ],
    "label": "best_practice",
    "reason": "Using descending order to get the latest timestamp"
  },
  {
    "line": 258,
    "text": "    grouped_df = (",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on main tags",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      32824,
      62,
      7568,
      796,
      357
    ],
    "start_token": 1632,
    "end_token": 1640,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      1388,
      15940
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on main tags"
  },
  {
    "line": 265,
    "text": "            limit_up_count=(\"is_limit_up\", \"sum\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `in_` method is vulnerable to injection attacks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      62,
      929,
      62,
      9127,
      28,
      7203,
      271,
      62,
      32374,
      62,
      929,
      1600,
      366,
      16345,
      12340
    ],
    "start_token": 1640,
    "end_token": 1667,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      259,
      62,
      63,
      2446,
      318,
      8826,
      284,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `in_` method is vulnerable to injection attacks"
  },
  {
    "line": 268,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1667,
    "end_token": 1675,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list"
  },
  {
    "line": 268,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Querying stock quotes based on entity IDs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1675,
    "end_token": 1683,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      4283,
      13386,
      1912,
      319,
      9312,
      32373
    ],
    "label": "ml_signal",
    "reason": "Querying stock quotes based on entity IDs"
  },
  {
    "line": 268,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Concatenating DataFrames for combined analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1683,
    "end_token": 1691,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1482,
      9246,
      268,
      803,
      6060,
      35439,
      329,
      5929,
      3781
    ],
    "label": "best_practice",
    "reason": "Concatenating DataFrames for combined analysis"
  },
  {
    "line": 281,
    "text": "    print(grouped_df)",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and aggregating data for analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      8094,
      276,
      62,
      7568,
      8
    ],
    "start_token": 1691,
    "end_token": 1701,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      13262,
      803,
      1366,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Grouping and aggregating data for analysis"
  },
  {
    "line": 281,
    "text": "    print(grouped_df)",
    "annotation": "\ud83e\udde0 ML Signal: Counting positive changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      8094,
      276,
      62,
      7568,
      8
    ],
    "start_token": 1701,
    "end_token": 1711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      3967,
      2458
    ],
    "label": "ml_signal",
    "reason": "Counting positive changes"
  },
  {
    "line": 282,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Counting non-positive changes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1711,
    "end_token": 1711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      1729,
      12,
      24561,
      2458
    ],
    "label": "ml_signal",
    "reason": "Counting non-positive changes"
  },
  {
    "line": 284,
    "text": "        df=grouped_df, data_schema=TagQuoteStats, provider=\"zvt\", force_update=True, drop_duplicates=False",
    "annotation": "\ud83e\udde0 ML Signal: Summing turnover values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      8094,
      276,
      62,
      7568,
      11,
      1366,
      62,
      15952,
      2611,
      28,
      24835,
      25178,
      29668,
      11,
      10131,
      2625,
      89,
      36540,
      1600,
      2700,
      62,
      19119,
      28,
      17821,
      11,
      4268,
      62,
      646,
      489,
      16856,
      28,
      25101
    ],
    "start_token": 1711,
    "end_token": 1752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5060,
      2229,
      25079,
      3815
    ],
    "label": "ml_signal",
    "reason": "Summing turnover values"
  },
  {
    "line": 286,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating mean percentage change",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1752,
    "end_token": 1752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      1612,
      5873,
      1487
    ],
    "label": "ml_signal",
    "reason": "Calculating mean percentage change"
  },
  {
    "line": 286,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Counting limit up occurrences",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1752,
    "end_token": 1752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      4179,
      510,
      40279
    ],
    "label": "ml_signal",
    "reason": "Counting limit up occurrences"
  },
  {
    "line": 292,
    "text": "        limit=1,",
    "annotation": "\ud83e\udde0 ML Signal: Counting limit down occurrences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      28,
      16,
      11
    ],
    "start_token": 1752,
    "end_token": 1763,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      4179,
      866,
      40279
    ],
    "label": "ml_signal",
    "reason": "Counting limit down occurrences"
  },
  {
    "line": 292,
    "text": "        limit=1,",
    "annotation": "\ud83e\udde0 ML Signal: Counting total occurrences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      28,
      16,
      11
    ],
    "start_token": 1763,
    "end_token": 1774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      2472,
      40279
    ],
    "label": "ml_signal",
    "reason": "Counting total occurrences"
  },
  {
    "line": 297,
    "text": "    else:",
    "annotation": "\u2705 Best Practice: Sorting DataFrame for prioritized analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1774,
    "end_token": 1779,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      6060,
      19778,
      329,
      19086,
      1143,
      3781
    ],
    "label": "best_practice",
    "reason": "Sorting DataFrame for prioritized analysis"
  },
  {
    "line": 297,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame to dictionary for output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1779,
    "end_token": 1784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      284,
      22155,
      329,
      5072
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame to dictionary for output"
  },
  {
    "line": 286,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query pattern with filters and ordering",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1784,
    "end_token": 1784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      3912,
      351,
      16628,
      290,
      16216
    ],
    "label": "ml_signal",
    "reason": "Usage of query pattern with filters and ordering"
  },
  {
    "line": 297,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional query based on main_tag presence",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1784,
    "end_token": 1789,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      12405,
      1912,
      319,
      1388,
      62,
      12985,
      4931
    ],
    "label": "ml_signal",
    "reason": "Conditional query based on main_tag presence"
  },
  {
    "line": 309,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Query without filters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1789,
    "end_token": 1789,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      43301,
      1231,
      16628
    ],
    "label": "ml_signal",
    "reason": "Query without filters"
  },
  {
    "line": 312,
    "text": "    df = pd.concat([tag_df, quote_df], axis=1)",
    "annotation": "\ud83e\udde0 ML Signal: Mapping entity_ids to tags",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      1102,
      9246,
      26933,
      12985,
      62,
      7568,
      11,
      9577,
      62,
      7568,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 1789,
    "end_token": 1812,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      9312,
      62,
      2340,
      284,
      15940
    ],
    "label": "ml_signal",
    "reason": "Mapping entity_ids to tags"
  },
  {
    "line": 314,
    "text": "        df.groupby(\"main_tag\")",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of eval() with dynamic input can lead to code injection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      8094,
      1525,
      7203,
      12417,
      62,
      12985,
      4943
    ],
    "start_token": 1812,
    "end_token": 1828,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      5418,
      3419,
      351,
      8925,
      5128,
      460,
      1085,
      284,
      2438,
      16954
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of eval() with dynamic input can lead to code injection"
  },
  {
    "line": 316,
    "text": "            up_count=(\"change_pct\", lambda x: (x > 0).sum()),",
    "annotation": "\ud83e\udde0 ML Signal: Query pattern with dynamic ordering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      510,
      62,
      9127,
      28,
      7203,
      3803,
      62,
      79,
      310,
      1600,
      37456,
      2124,
      25,
      357,
      87,
      1875,
      657,
      737,
      16345,
      3419,
      828
    ],
    "start_token": 1828,
    "end_token": 1860,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      43301,
      3912,
      351,
      8925,
      16216
    ],
    "label": "ml_signal",
    "reason": "Query pattern with dynamic ordering"
  },
  {
    "line": 316,
    "text": "            up_count=(\"change_pct\", lambda x: (x > 0).sum()),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary keys to retrieve values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      510,
      62,
      9127,
      28,
      7203,
      3803,
      62,
      79,
      310,
      1600,
      37456,
      2124,
      25,
      357,
      87,
      1875,
      657,
      737,
      16345,
      3419,
      828
    ],
    "start_token": 1860,
    "end_token": 1892,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      8251,
      284,
      19818,
      3815
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary keys to retrieve values"
  },
  {
    "line": 318,
    "text": "            turnover=(\"turnover\", \"sum\"),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary keys to retrieve values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25079,
      28,
      7203,
      15344,
      2502,
      1600,
      366,
      16345,
      12340
    ],
    "start_token": 1892,
    "end_token": 1912,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      8251,
      284,
      19818,
      3815
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary keys to retrieve values"
  },
  {
    "line": 320,
    "text": "            limit_up_count=(\"is_limit_up\", \"sum\"),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary keys to retrieve values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      62,
      929,
      62,
      9127,
      28,
      7203,
      271,
      62,
      32374,
      62,
      929,
      1600,
      366,
      16345,
      12340
    ],
    "start_token": 1912,
    "end_token": 1939,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      8251,
      284,
      19818,
      3815
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary keys to retrieve values"
  },
  {
    "line": 323,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on dictionary content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1939,
    "end_token": 1947,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      22155,
      2695
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on dictionary content"
  },
  {
    "line": 327,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a pandas Series from a function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1947,
    "end_token": 1947,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      19798,
      292,
      7171,
      422,
      257,
      2163
    ],
    "label": "ml_signal",
    "reason": "Returning a pandas Series from a function"
  },
  {
    "line": 329,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Applying a function across DataFrame rows",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1947,
    "end_token": 1947,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      2163,
      1973,
      6060,
      19778,
      15274
    ],
    "label": "ml_signal",
    "reason": "Applying a function across DataFrame rows"
  },
  {
    "line": 331,
    "text": "def query_stock_quotes(query_stock_quote_model: QueryStockQuoteModel):",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences based on a condition",
    "confidence": 1.0,
    "tokens": [
      4299,
      12405,
      62,
      13578,
      62,
      421,
      6421,
      7,
      22766,
      62,
      13578,
      62,
      22708,
      62,
      19849,
      25,
      43301,
      26207,
      25178,
      17633,
      2599
    ],
    "start_token": 1947,
    "end_token": 1968,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences based on a condition"
  },
  {
    "line": 332,
    "text": "    entity_ids = None",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences based on a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      6045
    ],
    "start_token": 1968,
    "end_token": 1976,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences based on a condition"
  },
  {
    "line": 332,
    "text": "    entity_ids = None",
    "annotation": "\ud83e\udde0 ML Signal: Summing a DataFrame column",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      6045
    ],
    "start_token": 1976,
    "end_token": 1984,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5060,
      2229,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Summing a DataFrame column"
  },
  {
    "line": 341,
    "text": "            entity_ids = stock_pools[0].entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Calculating the mean of a DataFrame column",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      4283,
      62,
      7742,
      82,
      58,
      15,
      4083,
      26858,
      62,
      2340
    ],
    "start_token": 1984,
    "end_token": 2009,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      262,
      1612,
      286,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Calculating the mean of a DataFrame column"
  },
  {
    "line": 341,
    "text": "            entity_ids = stock_pools[0].entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences based on a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      4283,
      62,
      7742,
      82,
      58,
      15,
      4083,
      26858,
      62,
      2340
    ],
    "start_token": 2009,
    "end_token": 2034,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences based on a condition"
  },
  {
    "line": 341,
    "text": "            entity_ids = stock_pools[0].entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences based on a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      4283,
      62,
      7742,
      82,
      58,
      15,
      4083,
      26858,
      62,
      2340
    ],
    "start_token": 2034,
    "end_token": 2059,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences based on a condition"
  },
  {
    "line": 343,
    "text": "        entity_ids = query_stock_quote_model.entity_ids",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame to a list of dictionaries",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      12405,
      62,
      13578,
      62,
      22708,
      62,
      19849,
      13,
      26858,
      62,
      2340
    ],
    "start_token": 2059,
    "end_token": 2081,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      284,
      257,
      1351,
      286,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame to a list of dictionaries"
  },
  {
    "line": 345,
    "text": "    if query_stock_quote_model.main_tag:",
    "annotation": "\ud83e\udde0 ML Signal: Constructing a dictionary with computed values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      12405,
      62,
      13578,
      62,
      22708,
      62,
      19849,
      13,
      12417,
      62,
      12985,
      25
    ],
    "start_token": 2081,
    "end_token": 2097,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      278,
      257,
      22155,
      351,
      29231,
      3815
    ],
    "label": "ml_signal",
    "reason": "Constructing a dictionary with computed values"
  },
  {
    "line": 353,
    "text": "        entity_ids = [item[\"entity_id\"] for item in tags_dict]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of large data exposure if quotes is too large",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      685,
      9186,
      14692,
      26858,
      62,
      312,
      8973,
      329,
      2378,
      287,
      15940,
      62,
      11600,
      60
    ],
    "start_token": 2097,
    "end_token": 2122,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      1588,
      1366,
      7111,
      611,
      13386,
      318,
      1165,
      1588
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of large data exposure if quotes is too large"
  },
  {
    "line": 356,
    "text": "            return_type=\"dict\",",
    "annotation": "\ud83e\udde0 ML Signal: Returning a dictionary from a function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      11600,
      1600
    ],
    "start_token": 2122,
    "end_token": 2139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      22155,
      422,
      257,
      2163
    ],
    "label": "ml_signal",
    "reason": "Returning a dictionary from a function"
  },
  {
    "line": 342,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a financial context, useful for identifying domain-specific functions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2139,
    "end_token": 2144,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      3176,
      4732,
      11,
      4465,
      329,
      13720,
      7386,
      12,
      11423,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function definition with a financial context, useful for identifying domain-specific functions"
  },
  {
    "line": 344,
    "text": "",
    "annotation": "\u2705 Best Practice: Define a function to encapsulate stock selling logic for reusability and clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2144,
    "end_token": 2144,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      257,
      2163,
      284,
      32652,
      5039,
      4283,
      6301,
      9156,
      329,
      302,
      385,
      1799,
      290,
      16287
    ],
    "label": "best_practice",
    "reason": "Define a function to encapsulate stock selling logic for reusability and clarity"
  },
  {
    "line": 346,
    "text": "        tags_dict = StockTags.query_data(",
    "annotation": "\u2705 Best Practice: Use 'pass' as a placeholder for future implementation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      62,
      11600,
      796,
      10500,
      36142,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 2144,
    "end_token": 2162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      6603,
      6,
      355,
      257,
      46076,
      329,
      2003,
      7822
    ],
    "label": "best_practice",
    "reason": "Use 'pass' as a placeholder for future implementation"
  },
  {
    "line": 346,
    "text": "        tags_dict = StockTags.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific model parameter indicates a pattern for ML model usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      62,
      11600,
      796,
      10500,
      36142,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 2162,
    "end_token": 2180,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      2746,
      11507,
      9217,
      257,
      3912,
      329,
      10373,
      2746,
      8748
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific model parameter indicates a pattern for ML model usage"
  },
  {
    "line": 348,
    "text": "            filters=[StockTags.main_tag == query_stock_quote_model.main_tag],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded ID value could lead to potential issues if not managed properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      26207,
      36142,
      13,
      12417,
      62,
      12985,
      6624,
      12405,
      62,
      13578,
      62,
      22708,
      62,
      19849,
      13,
      12417,
      62,
      12985,
      4357
    ],
    "start_token": 2180,
    "end_token": 2212,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      4522,
      1988,
      714,
      1085,
      284,
      2785,
      2428,
      611,
      407,
      5257,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded ID value could lead to potential issues if not managed properly"
  },
  {
    "line": 351,
    "text": "        if not tags_dict:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Querying data without input validation can lead to SQL injection risks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      15940,
      62,
      11600,
      25
    ],
    "start_token": 2212,
    "end_token": 2225,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      2264,
      263,
      1112,
      1366,
      1231,
      5128,
      21201,
      460,
      1085,
      284,
      16363,
      16954,
      7476
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Querying data without input validation can lead to SQL injection risks"
  },
  {
    "line": 356,
    "text": "            return_type=\"dict\",",
    "annotation": "\u2705 Best Practice: Initialize object with default values to ensure consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      11600,
      1600
    ],
    "start_token": 2225,
    "end_token": 2242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      2134,
      351,
      4277,
      3815,
      284,
      4155,
      15794
    ],
    "label": "best_practice",
    "reason": "Initialize object with default values to ensure consistency"
  },
  {
    "line": 358,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Updating timestamp indicates a pattern of tracking changes over time",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2242,
    "end_token": 2242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      41033,
      9217,
      257,
      3912,
      286,
      9646,
      2458,
      625,
      640
    ],
    "label": "ml_signal",
    "reason": "Updating timestamp indicates a pattern of tracking changes over time"
  },
  {
    "line": 360,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assigning model attributes to object properties shows a pattern of data transformation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2242,
    "end_token": 2242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      2746,
      12608,
      284,
      2134,
      6608,
      2523,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Assigning model attributes to object properties shows a pattern of data transformation"
  },
  {
    "line": 363,
    "text": "    df = StockQuote.query_data(order=order, entity_ids=entity_ids, return_type=\"df\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Adding objects to session without validation can lead to data integrity issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      10500,
      25178,
      13,
      22766,
      62,
      7890,
      7,
      2875,
      28,
      2875,
      11,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11,
      1441,
      62,
      4906,
      2625,
      7568,
      4943
    ],
    "start_token": 2242,
    "end_token": 2272,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      18247,
      5563,
      284,
      6246,
      1231,
      21201,
      460,
      1085,
      284,
      1366,
      11540,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Adding objects to session without validation can lead to data integrity issues"
  },
  {
    "line": 365,
    "text": "    if not pd_is_not_null(df):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Committing session without exception handling can lead to unhandled errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 2272,
    "end_token": 2288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1520,
      2535,
      6246,
      1231,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      8563
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Committing session without exception handling can lead to unhandled errors"
  },
  {
    "line": 367,
    "text": "",
    "annotation": "\u2705 Best Practice: Refreshing session to ensure the object is updated with the latest database state",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2288,
    "end_token": 2288,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6524,
      411,
      722,
      6246,
      284,
      4155,
      262,
      2134,
      318,
      6153,
      351,
      262,
      3452,
      6831,
      1181
    ],
    "label": "best_practice",
    "reason": "Refreshing session to ensure the object is updated with the latest database state"
  },
  {
    "line": 368,
    "text": "    def set_tags(quote):",
    "annotation": "\ud83e\udde0 ML Signal: Returning the updated object indicates a pattern of function output for further processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      31499,
      7,
      22708,
      2599
    ],
    "start_token": 2288,
    "end_token": 2298,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      262,
      6153,
      2134,
      9217,
      257,
      3912,
      286,
      2163,
      5072,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Returning the updated object indicates a pattern of function output for further processing"
  },
  {
    "line": 362,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to build default settings if not present",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2298,
    "end_token": 2298,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      1382,
      4277,
      6460,
      611,
      407,
      1944
    ],
    "label": "ml_signal",
    "reason": "Function to build default settings if not present"
  },
  {
    "line": 366,
    "text": "        return None",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 2298,
    "end_token": 2307,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameters"
  },
  {
    "line": 368,
    "text": "    def set_tags(quote):",
    "annotation": "\u2705 Best Practice: Use of __name__ guard for script execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      31499,
      7,
      22708,
      2599
    ],
    "start_token": 2307,
    "end_token": 2317,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      4860,
      329,
      4226,
      9706
    ],
    "label": "best_practice",
    "reason": "Use of __name__ guard for script execution"
  },
  {
    "line": 368,
    "text": "    def set_tags(quote):",
    "annotation": "\u2705 Best Practice: Explicitly defining __all__ for module exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      31499,
      7,
      22708,
      2599
    ],
    "start_token": 2317,
    "end_token": 2327,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining __all__ for module exports"
  }
]
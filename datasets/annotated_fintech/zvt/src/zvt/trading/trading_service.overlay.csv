annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Usage of external library for pagination,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 329, 42208, 1883]",0.5,0,ml_signal,4,Usage of external library for pagination,,0,,[]
üß† ML Signal: Usage of utility function for checking DataFrame null values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10361, 2163, 329, 10627, 6060, 19778, 9242, 3815]",0.5,1,ml_signal,22,Usage of utility function for checking DataFrame null values,,0,),[8]
‚úÖ Best Practice: Use of logging for tracking and debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 290, 28769]",0.5,2,best_practice,32,Use of logging for tracking and debugging,,1,),[8]
üß† ML Signal: Function signature and parameter types can be used to infer usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 290, 11507, 3858, 460, 307, 973, 284, 13249, 8748, 7572, 13]",0.5,11,ml_signal,31,Function signature and parameter types can be used to infer usage patterns.,,2,"    date_and_time,","[220, 220, 220, 3128, 62, 392, 62, 2435, 11]"
üß† ML Signal: API call pattern can be used to understand data retrieval methods.,"[8582, 100, 254, 10373, 26484, 25, 7824, 869, 3912, 460, 307, 973, 284, 1833, 1366, 45069, 5050, 13]",0.5,12,ml_signal,32,API call pattern can be used to understand data retrieval methods.,,11,),[8]
‚úÖ Best Practice: Check for null data before processing to avoid errors.,"[26486, 227, 6705, 19939, 25, 6822, 329, 9242, 1366, 878, 7587, 284, 3368, 8563, 13]",0.5,36,best_practice,41,Check for null data before processing to avoid errors.,,12,"        start_timestamp=kdata_request_model.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 74, 7890, 62, 25927, 62, 19849, 13, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Convert timestamps to a consistent format for easier processing.,"[26486, 227, 6705, 19939, 25, 38240, 4628, 395, 9430, 284, 257, 6414, 5794, 329, 4577, 7587, 13]",0.5,60,best_practice,41,Convert timestamps to a consistent format for easier processing.,,36,"        start_timestamp=kdata_request_model.start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 74, 7890, 62, 25927, 62, 19849, 13, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Use apply for row-wise operations to maintain readability.,"[26486, 227, 6705, 19939, 25, 5765, 4174, 329, 5752, 12, 3083, 4560, 284, 5529, 1100, 1799, 13]",0.5,82,best_practice,47,Use apply for row-wise operations to maintain readability.,,60,"        kdata_df[""data""] = kdata_df.apply(","[220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 7568, 14692, 7890, 8973, 796, 479, 7890, 62, 7568, 13, 39014, 7]"
‚úÖ Best Practice: Use groupby and agg for efficient data aggregation.,"[26486, 227, 6705, 19939, 25, 5765, 1448, 1525, 290, 4194, 329, 6942, 1366, 46500, 13]",0.5,105,best_practice,53,Use groupby and agg for efficient data aggregation.,,82,"        df = kdata_df.groupby(""entity_id"").agg(","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 479, 7890, 62, 7568, 13, 8094, 1525, 7203, 26858, 62, 312, 11074, 9460, 7]"
‚úÖ Best Practice: Reset index after groupby to maintain DataFrame structure.,"[26486, 227, 6705, 19939, 25, 30027, 6376, 706, 1448, 1525, 284, 5529, 6060, 19778, 4645, 13]",0.5,128,best_practice,57,Reset index after groupby to maintain DataFrame structure.,,105,"            datas=(""data"", lambda data: list(data)),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19395, 28, 7203, 7890, 1600, 37456, 1366, 25, 1351, 7, 7890, 36911]"
üß† ML Signal: Returning data as a dictionary can indicate data serialization patterns.,"[8582, 100, 254, 10373, 26484, 25, 42882, 1366, 355, 257, 22155, 460, 7603, 1366, 11389, 1634, 7572, 13]",0.5,128,ml_signal,62,Returning data as a dictionary can indicate data serialization patterns.,,128,,[]
üß† ML Signal: Usage of external API to fetch trading dates,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 284, 21207, 7313, 9667]",1.0,147,ml_signal,56,Usage of external API to fetch trading dates,,128,"            level=(""level"", ""first""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 28, 7203, 5715, 1600, 366, 11085, 12340]"
üß† ML Signal: Querying data based on entity IDs and provider,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 1912, 319, 9312, 32373, 290, 10131]",0.5,170,ml_signal,57,Querying data based on entity IDs and provider,,147,"            datas=(""data"", lambda data: list(data)),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19395, 28, 7203, 7890, 1600, 37456, 1366, 25, 1351, 7, 7890, 36911]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if ts_df is None or not a DataFrame,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 40379, 62, 7568, 318, 6045, 393, 407, 257, 6060, 19778]",1.0,185,sast_risk,63,Potential risk if ts_df is None or not a DataFrame,Low,170,def query_ts(ts_request_model: TSRequestModel):,"[4299, 12405, 62, 912, 7, 912, 62, 25927, 62, 19849, 25, 26136, 18453, 17633, 2599]"
‚úÖ Best Practice: Using apply with lambda for row-wise operations,"[26486, 227, 6705, 19939, 25, 8554, 4174, 351, 37456, 329, 5752, 12, 3083, 4560]",0.5,200,best_practice,63,Using apply with lambda for row-wise operations,,185,def query_ts(ts_request_model: TSRequestModel):,"[4299, 12405, 62, 912, 7, 912, 62, 25927, 62, 19849, 25, 26136, 18453, 17633, 2599]"
‚úÖ Best Practice: Using groupby and agg for data aggregation,"[26486, 227, 6705, 19939, 25, 8554, 1448, 1525, 290, 4194, 329, 1366, 46500]",0.5,218,best_practice,74,Using groupby and agg for data aggregation,,200,"            ].values.tolist(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20740, 27160, 13, 83, 349, 396, 22784]"
‚úÖ Best Practice: Resetting index for a clean DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 329, 257, 3424, 6060, 19778]",1.0,237,best_practice,79,Resetting index for a clean DataFrame,,218,"            name=(""name"", ""first""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 28, 7203, 3672, 1600, 366, 11085, 12340]"
üß† ML Signal: Converting DataFrame to dictionary for record-oriented data,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 284, 22155, 329, 1700, 12, 17107, 1366]",1.0,245,ml_signal,81,Converting DataFrame to dictionary for record-oriented data,,237,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of context manager for session ensures proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 6246, 19047, 1774, 8271, 4542]",1.0,267,best_practice,77,Use of context manager for session ensures proper resource management,,245,"        df = ts_df.groupby(""entity_id"").agg(","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 40379, 62, 7568, 13, 8094, 1525, 7203, 26858, 62, 312, 11074, 9460, 7]"
üß† ML Signal: Conversion of date to string and timestamp for consistent date handling,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3128, 284, 4731, 290, 41033, 329, 6414, 3128, 9041]",1.0,290,ml_signal,80,Conversion of date to string and timestamp for consistent date handling,,267,"            datas=(""data"", lambda data: list(data)),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19395, 28, 7203, 7890, 1600, 37456, 1366, 25, 1351, 7, 7890, 36911]"
üß† ML Signal: Use of trading signal type as a value for plan identification,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7313, 6737, 2099, 355, 257, 1988, 329, 1410, 11795]",0.5,309,ml_signal,83,Use of trading signal type as a value for plan identification,,290,"        return df.to_dict(orient=""records"")","[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 13, 1462, 62, 11600, 7, 13989, 2625, 8344, 3669, 4943]"
üß† ML Signal: Unique plan ID generation pattern,"[8582, 100, 254, 10373, 26484, 25, 30015, 1410, 4522, 5270, 3912]",1.0,332,ml_signal,86,Unique plan ID generation pattern,,309,def build_trading_plan(build_trading_plan_model: BuildTradingPlanModel):,"[4299, 1382, 62, 2213, 4980, 62, 11578, 7, 11249, 62, 2213, 4980, 62, 11578, 62, 19849, 25, 10934, 2898, 4980, 20854, 17633, 2599]"
‚úÖ Best Practice: Use of query_data method for data retrieval,"[26486, 227, 6705, 19939, 25, 5765, 286, 12405, 62, 7890, 2446, 329, 1366, 45069]",1.0,363,best_practice,87,Use of query_data method for data retrieval,,332,"    with contract_api.DBSession(provider=""zvt"", data_schema=TradingPlan)() as session:","[220, 220, 220, 351, 2775, 62, 15042, 13, 35, 4462, 2521, 7, 15234, 1304, 2625, 89, 36540, 1600, 1366, 62, 15952, 2611, 28, 2898, 4980, 20854, 8, 3419, 355, 6246, 25]"
‚ö†Ô∏è SAST Risk (Low): Assertion can raise exceptions if condition is not met,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 460, 5298, 13269, 611, 4006, 318, 407, 1138]",0.5,393,sast_risk,92,Assertion can raise exceptions if condition is not met,Low,363,"        plan_id = f""{stock_id}_{trading_date_str}_{signal}""","[220, 220, 220, 220, 220, 220, 220, 1410, 62, 312, 796, 277, 1, 90, 13578, 62, 312, 92, 23330, 2213, 4980, 62, 4475, 62, 2536, 92, 23330, 12683, 282, 36786]"
‚úÖ Best Practice: Use of query_data method for data retrieval,"[26486, 227, 6705, 19939, 25, 5765, 286, 12405, 62, 7890, 2446, 329, 1366, 45069]",1.0,423,best_practice,92,Use of query_data method for data retrieval,,393,"        plan_id = f""{stock_id}_{trading_date_str}_{signal}""","[220, 220, 220, 220, 220, 220, 220, 1410, 62, 312, 796, 277, 1, 90, 13578, 62, 312, 92, 23330, 2213, 4980, 62, 4475, 62, 2536, 92, 23330, 12683, 282, 36786]"
‚úÖ Best Practice: Use of ORM model for data manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 6375, 44, 2746, 329, 1366, 17512]",0.5,453,best_practice,92,Use of ORM model for data manipulation,,423,"        plan_id = f""{stock_id}_{trading_date_str}_{signal}""","[220, 220, 220, 220, 220, 220, 220, 1410, 62, 312, 796, 277, 1, 90, 13578, 62, 312, 92, 23330, 2213, 4980, 62, 4475, 62, 2536, 92, 23330, 12683, 282, 36786]"
üß† ML Signal: Timestamping for tracking plan creation or update time,"[8582, 100, 254, 10373, 26484, 25, 5045, 27823, 278, 329, 9646, 1410, 6282, 393, 4296, 640]",0.5,478,ml_signal,114,Timestamping for tracking plan creation or update time,,453,"                trading_signal_type=signal,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7313, 62, 12683, 282, 62, 4906, 28, 12683, 282, 11]"
‚úÖ Best Practice: Adding and committing changes to the session,"[26486, 227, 6705, 19939, 25, 18247, 290, 17222, 2458, 284, 262, 6246]",0.5,503,best_practice,115,Adding and committing changes to the session,,478,"                status=ExecutionStatus.init.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3722, 28, 23002, 1009, 19580, 13, 15003, 13, 8367, 11]"
‚úÖ Best Practice: Refreshing the session to get the latest state of the object,"[26486, 227, 6705, 19939, 25, 6524, 411, 722, 262, 6246, 284, 651, 262, 3452, 1181, 286, 262, 2134]",0.5,516,best_practice,118,Refreshing the session to get the latest state of the object,,503,        session.add(plan),"[220, 220, 220, 220, 220, 220, 220, 6246, 13, 2860, 7, 11578, 8]"
üß† ML Signal: Function definition with specific input type can be used to infer usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 5128, 2099, 460, 307, 973, 284, 13249, 8748, 7572]",1.0,548,ml_signal,111,Function definition with specific input type can be used to infer usage patterns,,516,"                buy_price=build_trading_plan_model.buy_price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2822, 62, 20888, 28, 11249, 62, 2213, 4980, 62, 11578, 62, 19849, 13, 17846, 62, 20888, 11]"
"‚ö†Ô∏è SAST Risk (Low): Use of external session management, ensure proper handling of session lifecycle","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 7097, 6246, 4542, 11, 4155, 1774, 9041, 286, 6246, 3868, 47510]",0.5,581,sast_risk,113,"Use of external session management, ensure proper handling of session lifecycle",Low,548,"                trading_reason=build_trading_plan_model.trading_reason,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7313, 62, 41181, 28, 11249, 62, 2213, 4980, 62, 11578, 62, 19849, 13, 2213, 4980, 62, 41181, 11]"
üß† ML Signal: Conditional logic based on object attributes can indicate decision-making patterns,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 12608, 460, 7603, 2551, 12, 8601, 7572]",0.5,606,ml_signal,115,Conditional logic based on object attributes can indicate decision-making patterns,,581,"                status=ExecutionStatus.init.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3722, 28, 23002, 1009, 19580, 13, 15003, 13, 8367, 11]"
üß† ML Signal: Use of date and time manipulation functions can indicate temporal data handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3128, 290, 640, 17512, 5499, 460, 7603, 21964, 1366, 9041]",0.5,619,ml_signal,118,Use of date and time manipulation functions can indicate temporal data handling,,606,        session.add(plan),"[220, 220, 220, 220, 220, 220, 220, 6246, 13, 2860, 7, 11578, 8]"
üß† ML Signal: Querying data with specific parameters can indicate data access patterns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 10007, 460, 7603, 1366, 1895, 7572]",1.0,642,ml_signal,126,Querying data with specific parameters can indicate data access patterns,,619,        time_range = query_trading_plan_model.time_range,"[220, 220, 220, 220, 220, 220, 220, 640, 62, 9521, 796, 12405, 62, 2213, 4980, 62, 11578, 62, 19849, 13, 2435, 62, 9521]"
üß† ML Signal: Use of pagination function can indicate handling of large datasets,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 42208, 1883, 2163, 460, 7603, 9041, 286, 1588, 40522]",1.0,667,ml_signal,128,Use of pagination function can indicate handling of large datasets,,642,            start_timestamp = date_time_by_interval(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7]"
üß† ML Signal: Use of a database session pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6831, 6246, 3912]",0.5,690,ml_signal,126,Use of a database session pattern,,667,        time_range = query_trading_plan_model.time_range,"[220, 220, 220, 220, 220, 220, 220, 640, 62, 9521, 796, 12405, 62, 2213, 4980, 62, 11578, 62, 19849, 13, 2435, 62, 9521]"
‚ö†Ô∏è SAST Risk (Low): Potential for SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",0.5,715,sast_risk,128,Potential for SQL injection if filters are not properly sanitized,Low,690,            start_timestamp = date_time_by_interval(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7]"
üß† ML Signal: Querying data with specific filters and ordering,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 290, 16216]",1.0,740,ml_signal,128,Querying data with specific filters and ordering,,715,            start_timestamp = date_time_by_interval(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 796, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 7]"
üß† ML Signal: Use of a database session pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6831, 6246, 3912]",0.5,770,ml_signal,134,Use of a database session pattern,,740,            end_timestamp = time_range.absolute_time_range.end_timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 796, 640, 62, 9521, 13, 48546, 62, 2435, 62, 9521, 13, 437, 62, 16514, 27823]"
‚úÖ Best Practice: Use of context manager for database session,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 6831, 6246]",0.5,787,best_practice,135,Use of context manager for database session,,770,        selectable = TradingPlan.query_data(,"[220, 220, 220, 220, 220, 220, 220, 2922, 540, 796, 25469, 20854, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Querying data with specific filters and order,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 290, 1502]",1.0,828,ml_signal,136,Querying data with specific filters and order,,787,"            session=session, start_timestamp=start_timestamp, end_timestamp=end_timestamp, return_type=""select""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11, 1441, 62, 4906, 2625, 19738, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,869,sast_risk,136,Potential SQL injection if filters are not properly sanitized,Low,828,"            session=session, start_timestamp=start_timestamp, end_timestamp=end_timestamp, return_type=""select""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11, 1441, 62, 4906, 2625, 19738, 1]"
‚úÖ Best Practice: Using a context manager for session management ensures that resources are properly managed and released.,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 6246, 4542, 19047, 326, 4133, 389, 6105, 5257, 290, 2716, 13]",0.5,884,best_practice,143,Using a context manager for session management ensures that resources are properly managed and released.,,869,        return TradingPlan.query_data(,"[220, 220, 220, 220, 220, 220, 220, 1441, 25469, 20854, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Querying data with specific filters and ordering can indicate patterns in data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 290, 16216, 460, 7603, 7572, 287, 1366, 45069, 13]",1.0,899,ml_signal,144,Querying data with specific filters and ordering can indicate patterns in data retrieval.,,884,"            session=session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 29891, 11]"
üß† ML Signal: Filtering by status and trading date can be used to identify specific trading plan conditions.,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 416, 3722, 290, 7313, 3128, 460, 307, 973, 284, 5911, 2176, 7313, 1410, 3403, 13]",0.5,899,ml_signal,150,Filtering by status and trading date can be used to identify specific trading plan conditions.,,899,,[]
üß† ML Signal: Ordering by trading date can indicate a preference for processing data in chronological order.,"[8582, 100, 254, 10373, 26484, 25, 8284, 278, 416, 7313, 3128, 460, 7603, 257, 12741, 329, 7587, 1366, 287, 45946, 1502, 13]",1.0,899,ml_signal,150,Ordering by trading date can indicate a preference for processing data in chronological order.,,899,,[]
üß† ML Signal: Returning data as a specific type can indicate how the data is intended to be used.,"[8582, 100, 254, 10373, 26484, 25, 42882, 1366, 355, 257, 2176, 2099, 460, 7603, 703, 262, 1366, 318, 5292, 284, 307, 973, 13]",0.5,930,ml_signal,152,Returning data as a specific type can indicate how the data is intended to be used.,,899,"    with contract_api.DBSession(provider=""zvt"", data_schema=TradingPlan)() as session:","[220, 220, 220, 351, 2775, 62, 15042, 13, 35, 4462, 2521, 7, 15234, 1304, 2625, 89, 36540, 1600, 1366, 62, 15952, 2611, 28, 2898, 4980, 20854, 8, 3419, 355, 6246, 25]"
‚úÖ Best Practice: Logging the current plans can help in debugging and tracking the flow of data.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 1459, 3352, 460, 1037, 287, 28769, 290, 9646, 262, 5202, 286, 1366, 13]",0.5,947,best_practice,157,Logging the current plans can help in debugging and tracking the flow of data.,,930,"            return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
üß† ML Signal: Usage of a specific filter range for change_pct,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 8106, 2837, 329, 1487, 62, 79, 310]",0.5,957,ml_signal,151,Usage of a specific filter range for change_pct,,947,def get_future_trading_plan():,"[4299, 651, 62, 37443, 62, 2213, 4980, 62, 11578, 33529]"
üß† ML Signal: Calculation of statistics from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 7869, 422, 257, 6060, 19778]",1.0,974,ml_signal,157,Calculation of statistics from a DataFrame,,957,"            return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
‚úÖ Best Practice: Check if the list is not empty before accessing the first element,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 1351, 318, 407, 6565, 878, 22534, 262, 717, 5002]",0.5,1013,best_practice,165,Check if the list is not empty before accessing the first element,,974,"            filters=[TradingPlan.status == ExecutionStatus.init.value, TradingPlan.trading_date == current_date()],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 41888, 2898, 4980, 20854, 13, 13376, 6624, 37497, 19580, 13, 15003, 13, 8367, 11, 25469, 20854, 13, 2213, 4980, 62, 4475, 6624, 1459, 62, 4475, 3419, 4357]"
üß† ML Signal: Usage of a specific filter range for change_pct,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 8106, 2837, 329, 1487, 62, 79, 310]",0.5,1013,ml_signal,171,Usage of a specific filter range for change_pct,,1013,,[]
‚úÖ Best Practice: Check for null DataFrame before processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 9242, 6060, 19778, 878, 7587]",0.5,1028,best_practice,180,Check for null DataFrame before processing,,1013,"    start_timestamp = current_stats[""timestamp""]","[220, 220, 220, 923, 62, 16514, 27823, 796, 1459, 62, 34242, 14692, 16514, 27823, 8973]"
üß† ML Signal: Calculation of statistics from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 7869, 422, 257, 6060, 19778]",1.0,1046,ml_signal,182,Calculation of statistics from a DataFrame,,1028,    pre_date_df = Stock1mQuote.query_data(,"[220, 220, 220, 662, 62, 4475, 62, 7568, 796, 10500, 16, 76, 25178, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Usage of DataFrame operations to calculate statistics,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 4560, 284, 15284, 7869]",0.5,1075,ml_signal,183,Usage of DataFrame operations to calculate statistics,,1046,"        filters=[Stock1mQuote.timestamp < to_time_str(start_timestamp)],","[220, 220, 220, 220, 220, 220, 220, 16628, 41888, 26207, 16, 76, 25178, 13, 16514, 27823, 1279, 284, 62, 2435, 62, 2536, 7, 9688, 62, 16514, 27823, 8, 4357]"
‚úÖ Best Practice: Avoid using magic numbers; consider using a named constant for clarity,"[26486, 227, 6705, 19939, 25, 24390, 1262, 5536, 3146, 26, 2074, 1262, 257, 3706, 6937, 329, 16287]",0.5,1094,best_practice,184,Avoid using magic numbers; consider using a named constant for clarity,,1075,"        order=Stock1mQuote.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 1502, 28, 26207, 16, 76, 25178, 13, 16514, 27823, 13, 20147, 22784]"
üß† ML Signal: Grouping data by a constant to aggregate over the entire DataFrame,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 1366, 416, 257, 6937, 284, 19406, 625, 262, 2104, 6060, 19778]",1.0,1105,ml_signal,185,Grouping data by a constant to aggregate over the entire DataFrame,,1094,"        limit=1,","[220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
üß† ML Signal: Custom aggregation function to count positive changes,"[8582, 100, 254, 10373, 26484, 25, 8562, 46500, 2163, 284, 954, 3967, 2458]",0.5,1116,ml_signal,185,Custom aggregation function to count positive changes,,1105,"        limit=1,","[220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
üß† ML Signal: Custom aggregation function to count non-positive changes,"[8582, 100, 254, 10373, 26484, 25, 8562, 46500, 2163, 284, 954, 1729, 12, 24561, 2458]",0.5,1133,ml_signal,199,Custom aggregation function to count non-positive changes,,1116,"        end_timestamp=end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11]"
üß† ML Signal: Summing turnover values,"[8582, 100, 254, 10373, 26484, 25, 5060, 2229, 25079, 3815]",0.5,1150,ml_signal,199,Summing turnover values,,1133,"        end_timestamp=end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11]"
üß† ML Signal: Calculating mean of percentage changes,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 1612, 286, 5873, 2458]",0.5,1167,ml_signal,199,Calculating mean of percentage changes,,1150,"        end_timestamp=end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 437, 62, 16514, 27823, 11]"
üß† ML Signal: Counting occurrences of limit up events,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 286, 4179, 510, 2995]",0.5,1205,ml_signal,200,Counting occurrences of limit up events,,1167,"        filters=[Stock1mQuote.change_pct >= -0.31, Stock1mQuote.change_pct <= 0.31],","[220, 220, 220, 220, 220, 220, 220, 16628, 41888, 26207, 16, 76, 25178, 13, 3803, 62, 79, 310, 18189, 532, 15, 13, 3132, 11, 10500, 16, 76, 25178, 13, 3803, 62, 79, 310, 19841, 657, 13, 3132, 4357]"
üß† ML Signal: Custom aggregation function to count limit down events,"[8582, 100, 254, 10373, 26484, 25, 8562, 46500, 2163, 284, 954, 4179, 866, 2995]",0.5,1250,ml_signal,201,Custom aggregation function to count limit down events,,1205,"        columns=[""timestamp"", ""entity_id"", ""time"", ""change_pct"", ""turnover"", ""is_limit_up"", ""is_limit_down""],","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 14692, 16514, 27823, 1600, 366, 26858, 62, 312, 1600, 366, 2435, 1600, 366, 3803, 62, 79, 310, 1600, 366, 15344, 2502, 1600, 366, 271, 62, 32374, 62, 929, 1600, 366, 271, 62, 32374, 62, 2902, 33116]"
üß† ML Signal: Converting DataFrame to dictionary for record-based access,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 284, 22155, 329, 1700, 12, 3106, 1895]",0.5,1284,ml_signal,207,Converting DataFrame to dictionary for record-based access,,1250,"        current_stats[""turnover_change""] = current_stats[""turnover""] - current_stats[""pre_turnover""]","[220, 220, 220, 220, 220, 220, 220, 1459, 62, 34242, 14692, 15344, 2502, 62, 3803, 8973, 796, 1459, 62, 34242, 14692, 15344, 2502, 8973, 532, 1459, 62, 34242, 14692, 3866, 62, 15344, 2502, 8973]"
üß† ML Signal: Function name suggests a specific task related to stock data processing,"[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 5644, 257, 2176, 4876, 3519, 284, 4283, 1366, 7587]",0.5,1322,ml_signal,200,Function name suggests a specific task related to stock data processing,,1284,"        filters=[Stock1mQuote.change_pct >= -0.31, Stock1mQuote.change_pct <= 0.31],","[220, 220, 220, 220, 220, 220, 220, 16628, 41888, 26207, 16, 76, 25178, 13, 3803, 62, 79, 310, 18189, 532, 15, 13, 3132, 11, 10500, 16, 76, 25178, 13, 3803, 62, 79, 310, 19841, 657, 13, 3132, 4357]"
üß† ML Signal: Querying data from a database using specific filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 1262, 2176, 16628]",0.5,1367,ml_signal,201,Querying data from a database using specific filters,,1322,"        columns=[""timestamp"", ""entity_id"", ""time"", ""change_pct"", ""turnover"", ""is_limit_up"", ""is_limit_down""],","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 14692, 16514, 27823, 1600, 366, 26858, 62, 312, 1600, 366, 2435, 1600, 366, 3803, 62, 79, 310, 1600, 366, 15344, 2502, 1600, 366, 271, 62, 32374, 62, 929, 1600, 366, 271, 62, 32374, 62, 2902, 33116]"
üß† ML Signal: Querying data with specific columns and filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 15180, 290, 16628]",0.5,1378,ml_signal,211,Querying data with specific columns and filters,,1367,def cal_quote_stats(quote_df):,"[4299, 2386, 62, 22708, 62, 34242, 7, 22708, 62, 7568, 2599]"
üß† ML Signal: Converting a DataFrame column to a list,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 6060, 19778, 5721, 284, 257, 1351]",1.0,1398,ml_signal,221,Converting a DataFrame column to a list,,1378,"            turnover=(""turnover"", ""sum""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25079, 28, 7203, 15344, 2502, 1600, 366, 16345, 12340]"
üß† ML Signal: Querying data with specific return type and index,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 1441, 2099, 290, 6376]",0.5,1423,ml_signal,222,Querying data with specific return type and index,,1398,"            change_pct=(""change_pct"", ""mean""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 62, 79, 310, 28, 7203, 3803, 62, 79, 310, 1600, 366, 32604, 12340]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'timestamp' column exists and has at least one entry,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 16514, 27823, 6, 5721, 7160, 290, 468, 379, 1551, 530, 5726]",0.5,1448,sast_risk,222,Assumes 'timestamp' column exists and has at least one entry,Low,1423,"            change_pct=(""change_pct"", ""mean""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 62, 79, 310, 28, 7203, 3803, 62, 79, 310, 1600, 366, 32604, 12340]"
üß† ML Signal: Concatenating DataFrames,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 6060, 35439]",1.0,1473,ml_signal,222,Concatenating DataFrames,,1448,"            change_pct=(""change_pct"", ""mean""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 62, 79, 310, 28, 7203, 3803, 62, 79, 310, 1600, 366, 32604, 12340]"
üß† ML Signal: Grouping and aggregating DataFrame data,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 13262, 803, 6060, 19778, 1366]",1.0,1491,ml_signal,235,Grouping and aggregating DataFrame data,,1473,"        order=StockPools.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 1502, 28, 26207, 47, 10141, 13, 16514, 27823, 13, 20147, 22784]"
üß† ML Signal: Adding new columns to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 649, 15180, 284, 6060, 19778]",1.0,1491,ml_signal,243,Adding new columns to DataFrame,,1491,,[]
üß† ML Signal: Applying a function to DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 6060, 19778, 15274]",0.5,1505,ml_signal,244,Applying a function to DataFrame rows,,1491,    tag_df = StockTags.query_data(,"[220, 220, 220, 7621, 62, 7568, 796, 10500, 36142, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Creating unique identifiers for DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 30481, 3748, 42814, 329, 6060, 19778, 15274]",0.5,1518,ml_signal,248,Creating unique identifiers for DataFrame rows,,1505,"        return_type=""df"",","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 7568, 1600]"
‚ö†Ô∏è SAST Risk (Low): Printing potentially sensitive data to the console,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 6196, 8564, 1366, 284, 262, 8624]",0.5,1552,sast_risk,254,Printing potentially sensitive data to the console,Low,1518,"    quote_df = StockQuote.query_data(entity_ids=entity_ids, return_type=""df"", index=""entity_id"")","[220, 220, 220, 9577, 62, 7568, 796, 10500, 25178, 13, 22766, 62, 7890, 7, 26858, 62, 2340, 28, 26858, 62, 2340, 11, 1441, 62, 4906, 2625, 7568, 1600, 6376, 2625, 26858, 62, 312, 4943]"
üß† ML Signal: Storing DataFrame to a database,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 6060, 19778, 284, 257, 6831]",0.5,1572,ml_signal,255,Storing DataFrame to a database,,1552,"    timestamp = quote_df[""timestamp""].tolist()[0]","[220, 220, 220, 41033, 796, 9577, 62, 7568, 14692, 16514, 27823, 1, 4083, 83, 349, 396, 3419, 58, 15, 60]"
üß† ML Signal: Usage of a specific query pattern to retrieve stock pool data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 12405, 3912, 284, 19818, 4283, 5933, 1366]",0.5,1585,ml_signal,248,Usage of a specific query pattern to retrieve stock pool data,,1572,"        return_type=""df"",","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 7568, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `query_data` method is vulnerable to injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 22766, 62, 7890, 63, 2446, 318, 8826, 284, 16954, 3434]",0.5,1598,sast_risk,248,Potential risk if `query_data` method is vulnerable to injection attacks,Low,1585,"        return_type=""df"",","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 7568, 1600]"
‚úÖ Best Practice: Using descending order to get the latest timestamp,"[26486, 227, 6705, 19939, 25, 8554, 31491, 1502, 284, 651, 262, 3452, 41033]",1.0,1632,best_practice,254,Using descending order to get the latest timestamp,,1598,"    quote_df = StockQuote.query_data(entity_ids=entity_ids, return_type=""df"", index=""entity_id"")","[220, 220, 220, 9577, 62, 7568, 796, 10500, 25178, 13, 22766, 62, 7890, 7, 26858, 62, 2340, 28, 26858, 62, 2340, 11, 1441, 62, 4906, 2625, 7568, 1600, 6376, 2625, 26858, 62, 312, 4943]"
üß† ML Signal: Filtering data based on main tags,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 1388, 15940]",0.5,1640,ml_signal,258,Filtering data based on main tags,,1632,    grouped_df = (,"[220, 220, 220, 32824, 62, 7568, 796, 357]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `in_` method is vulnerable to injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 259, 62, 63, 2446, 318, 8826, 284, 16954, 3434]",0.5,1667,sast_risk,265,Potential risk if `in_` method is vulnerable to injection attacks,Low,1640,"            limit_up_count=(""is_limit_up"", ""sum""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 62, 929, 62, 9127, 28, 7203, 271, 62, 32374, 62, 929, 1600, 366, 16345, 12340]"
üß† ML Signal: Conversion of DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351]",0.5,1675,ml_signal,268,Conversion of DataFrame column to list,,1667,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Querying stock quotes based on entity IDs,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 4283, 13386, 1912, 319, 9312, 32373]",0.5,1683,ml_signal,268,Querying stock quotes based on entity IDs,,1675,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Concatenating DataFrames for combined analysis,"[26486, 227, 6705, 19939, 25, 1482, 9246, 268, 803, 6060, 35439, 329, 5929, 3781]",1.0,1691,best_practice,268,Concatenating DataFrames for combined analysis,,1683,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Grouping and aggregating data for analysis,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 13262, 803, 1366, 329, 3781]",1.0,1701,ml_signal,281,Grouping and aggregating data for analysis,,1691,    print(grouped_df),"[220, 220, 220, 3601, 7, 8094, 276, 62, 7568, 8]"
üß† ML Signal: Counting positive changes,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 3967, 2458]",0.5,1711,ml_signal,281,Counting positive changes,,1701,    print(grouped_df),"[220, 220, 220, 3601, 7, 8094, 276, 62, 7568, 8]"
üß† ML Signal: Counting non-positive changes,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 1729, 12, 24561, 2458]",0.5,1711,ml_signal,282,Counting non-positive changes,,1711,,[]
üß† ML Signal: Summing turnover values,"[8582, 100, 254, 10373, 26484, 25, 5060, 2229, 25079, 3815]",0.5,1752,ml_signal,284,Summing turnover values,,1711,"        df=grouped_df, data_schema=TagQuoteStats, provider=""zvt"", force_update=True, drop_duplicates=False","[220, 220, 220, 220, 220, 220, 220, 47764, 28, 8094, 276, 62, 7568, 11, 1366, 62, 15952, 2611, 28, 24835, 25178, 29668, 11, 10131, 2625, 89, 36540, 1600, 2700, 62, 19119, 28, 17821, 11, 4268, 62, 646, 489, 16856, 28, 25101]"
üß† ML Signal: Calculating mean percentage change,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 1612, 5873, 1487]",0.5,1752,ml_signal,286,Calculating mean percentage change,,1752,,[]
üß† ML Signal: Counting limit up occurrences,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 4179, 510, 40279]",0.5,1752,ml_signal,286,Counting limit up occurrences,,1752,,[]
üß† ML Signal: Counting limit down occurrences,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 4179, 866, 40279]",0.5,1763,ml_signal,292,Counting limit down occurrences,,1752,"        limit=1,","[220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
üß† ML Signal: Counting total occurrences,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 2472, 40279]",0.5,1774,ml_signal,292,Counting total occurrences,,1763,"        limit=1,","[220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
‚úÖ Best Practice: Sorting DataFrame for prioritized analysis,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 329, 19086, 1143, 3781]",1.0,1779,best_practice,297,Sorting DataFrame for prioritized analysis,,1774,    else:,"[220, 220, 220, 2073, 25]"
üß† ML Signal: Converting DataFrame to dictionary for output,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 284, 22155, 329, 5072]",1.0,1784,ml_signal,297,Converting DataFrame to dictionary for output,,1779,    else:,"[220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of query pattern with filters and ordering,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 3912, 351, 16628, 290, 16216]",1.0,1784,ml_signal,286,Usage of query pattern with filters and ordering,,1784,,[]
üß† ML Signal: Conditional query based on main_tag presence,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 12405, 1912, 319, 1388, 62, 12985, 4931]",1.0,1789,ml_signal,297,Conditional query based on main_tag presence,,1784,    else:,"[220, 220, 220, 2073, 25]"
üß† ML Signal: Query without filters,"[8582, 100, 254, 10373, 26484, 25, 43301, 1231, 16628]",1.0,1789,ml_signal,309,Query without filters,,1789,,[]
üß† ML Signal: Mapping entity_ids to tags,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 9312, 62, 2340, 284, 15940]",0.5,1812,ml_signal,312,Mapping entity_ids to tags,,1789,"    df = pd.concat([tag_df, quote_df], axis=1)","[220, 220, 220, 47764, 796, 279, 67, 13, 1102, 9246, 26933, 12985, 62, 7568, 11, 9577, 62, 7568, 4357, 16488, 28, 16, 8]"
‚ö†Ô∏è SAST Risk (High): Use of eval() with dynamic input can lead to code injection,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 5418, 3419, 351, 8925, 5128, 460, 1085, 284, 2438, 16954]",1.0,1828,sast_risk,314,Use of eval() with dynamic input can lead to code injection,High,1812,"        df.groupby(""main_tag"")","[220, 220, 220, 220, 220, 220, 220, 47764, 13, 8094, 1525, 7203, 12417, 62, 12985, 4943]"
üß† ML Signal: Query pattern with dynamic ordering,"[8582, 100, 254, 10373, 26484, 25, 43301, 3912, 351, 8925, 16216]",1.0,1860,ml_signal,316,Query pattern with dynamic ordering,,1828,"            up_count=(""change_pct"", lambda x: (x > 0).sum()),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 510, 62, 9127, 28, 7203, 3803, 62, 79, 310, 1600, 37456, 2124, 25, 357, 87, 1875, 657, 737, 16345, 3419, 828]"
üß† ML Signal: Accessing dictionary keys to retrieve values,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 8251, 284, 19818, 3815]",1.0,1892,ml_signal,316,Accessing dictionary keys to retrieve values,,1860,"            up_count=(""change_pct"", lambda x: (x > 0).sum()),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 510, 62, 9127, 28, 7203, 3803, 62, 79, 310, 1600, 37456, 2124, 25, 357, 87, 1875, 657, 737, 16345, 3419, 828]"
üß† ML Signal: Accessing dictionary keys to retrieve values,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 8251, 284, 19818, 3815]",1.0,1912,ml_signal,318,Accessing dictionary keys to retrieve values,,1892,"            turnover=(""turnover"", ""sum""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25079, 28, 7203, 15344, 2502, 1600, 366, 16345, 12340]"
üß† ML Signal: Accessing dictionary keys to retrieve values,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 8251, 284, 19818, 3815]",1.0,1939,ml_signal,320,Accessing dictionary keys to retrieve values,,1912,"            limit_up_count=(""is_limit_up"", ""sum""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 62, 929, 62, 9127, 28, 7203, 271, 62, 32374, 62, 929, 1600, 366, 16345, 12340]"
üß† ML Signal: Conditional logic based on dictionary content,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 22155, 2695]",1.0,1947,ml_signal,323,Conditional logic based on dictionary content,,1939,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Returning a pandas Series from a function,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 19798, 292, 7171, 422, 257, 2163]",1.0,1947,ml_signal,327,Returning a pandas Series from a function,,1947,,[]
üß† ML Signal: Applying a function across DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 1973, 6060, 19778, 15274]",1.0,1947,ml_signal,329,Applying a function across DataFrame rows,,1947,,[]
üß† ML Signal: Counting occurrences based on a condition,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 1912, 319, 257, 4006]",1.0,1968,ml_signal,331,Counting occurrences based on a condition,,1947,def query_stock_quotes(query_stock_quote_model: QueryStockQuoteModel):,"[4299, 12405, 62, 13578, 62, 421, 6421, 7, 22766, 62, 13578, 62, 22708, 62, 19849, 25, 43301, 26207, 25178, 17633, 2599]"
üß† ML Signal: Counting occurrences based on a condition,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 1912, 319, 257, 4006]",1.0,1976,ml_signal,332,Counting occurrences based on a condition,,1968,    entity_ids = None,"[220, 220, 220, 9312, 62, 2340, 796, 6045]"
üß† ML Signal: Summing a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 5060, 2229, 257, 6060, 19778, 5721]",1.0,1984,ml_signal,332,Summing a DataFrame column,,1976,    entity_ids = None,"[220, 220, 220, 9312, 62, 2340, 796, 6045]"
üß† ML Signal: Calculating the mean of a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 262, 1612, 286, 257, 6060, 19778, 5721]",1.0,2009,ml_signal,341,Calculating the mean of a DataFrame column,,1984,            entity_ids = stock_pools[0].entity_ids,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 4283, 62, 7742, 82, 58, 15, 4083, 26858, 62, 2340]"
üß† ML Signal: Counting occurrences based on a condition,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 1912, 319, 257, 4006]",1.0,2034,ml_signal,341,Counting occurrences based on a condition,,2009,            entity_ids = stock_pools[0].entity_ids,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 4283, 62, 7742, 82, 58, 15, 4083, 26858, 62, 2340]"
üß† ML Signal: Counting occurrences based on a condition,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 1912, 319, 257, 4006]",1.0,2059,ml_signal,341,Counting occurrences based on a condition,,2034,            entity_ids = stock_pools[0].entity_ids,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 4283, 62, 7742, 82, 58, 15, 4083, 26858, 62, 2340]"
üß† ML Signal: Converting DataFrame to a list of dictionaries,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 284, 257, 1351, 286, 48589, 3166]",1.0,2081,ml_signal,343,Converting DataFrame to a list of dictionaries,,2059,        entity_ids = query_stock_quote_model.entity_ids,"[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 12405, 62, 13578, 62, 22708, 62, 19849, 13, 26858, 62, 2340]"
üß† ML Signal: Constructing a dictionary with computed values,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 257, 22155, 351, 29231, 3815]",0.5,2097,ml_signal,345,Constructing a dictionary with computed values,,2081,    if query_stock_quote_model.main_tag:,"[220, 220, 220, 611, 12405, 62, 13578, 62, 22708, 62, 19849, 13, 12417, 62, 12985, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of large data exposure if quotes is too large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 1588, 1366, 7111, 611, 13386, 318, 1165, 1588]",0.5,2122,sast_risk,353,Potential risk of large data exposure if quotes is too large,Low,2097,"        entity_ids = [item[""entity_id""] for item in tags_dict]","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 2340, 796, 685, 9186, 14692, 26858, 62, 312, 8973, 329, 2378, 287, 15940, 62, 11600, 60]"
üß† ML Signal: Returning a dictionary from a function,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 22155, 422, 257, 2163]",1.0,2139,ml_signal,356,Returning a dictionary from a function,,2122,"            return_type=""dict"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 11600, 1600]"
"üß† ML Signal: Function definition with a financial context, useful for identifying domain-specific functions","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 3176, 4732, 11, 4465, 329, 13720, 7386, 12, 11423, 5499]",1.0,2144,ml_signal,342,"Function definition with a financial context, useful for identifying domain-specific functions",,2139,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Define a function to encapsulate stock selling logic for reusability and clarity,"[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2163, 284, 32652, 5039, 4283, 6301, 9156, 329, 302, 385, 1799, 290, 16287]",1.0,2144,best_practice,344,Define a function to encapsulate stock selling logic for reusability and clarity,,2144,,[]
‚úÖ Best Practice: Use 'pass' as a placeholder for future implementation,"[26486, 227, 6705, 19939, 25, 5765, 705, 6603, 6, 355, 257, 46076, 329, 2003, 7822]",1.0,2162,best_practice,346,Use 'pass' as a placeholder for future implementation,,2144,        tags_dict = StockTags.query_data(,"[220, 220, 220, 220, 220, 220, 220, 15940, 62, 11600, 796, 10500, 36142, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Function definition with a specific model parameter indicates a pattern for ML model usage,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 2746, 11507, 9217, 257, 3912, 329, 10373, 2746, 8748]",0.5,2180,ml_signal,346,Function definition with a specific model parameter indicates a pattern for ML model usage,,2162,        tags_dict = StockTags.query_data(,"[220, 220, 220, 220, 220, 220, 220, 15940, 62, 11600, 796, 10500, 36142, 13, 22766, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded ID value could lead to potential issues if not managed properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 4522, 1988, 714, 1085, 284, 2785, 2428, 611, 407, 5257, 6105]",0.5,2212,sast_risk,348,Hardcoded ID value could lead to potential issues if not managed properly,Low,2180,"            filters=[StockTags.main_tag == query_stock_quote_model.main_tag],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 41888, 26207, 36142, 13, 12417, 62, 12985, 6624, 12405, 62, 13578, 62, 22708, 62, 19849, 13, 12417, 62, 12985, 4357]"
‚ö†Ô∏è SAST Risk (Medium): Querying data without input validation can lead to SQL injection risks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 2264, 263, 1112, 1366, 1231, 5128, 21201, 460, 1085, 284, 16363, 16954, 7476]",0.5,2225,sast_risk,351,Querying data without input validation can lead to SQL injection risks,Medium,2212,        if not tags_dict:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 15940, 62, 11600, 25]"
‚úÖ Best Practice: Initialize object with default values to ensure consistency,"[26486, 227, 6705, 19939, 25, 20768, 1096, 2134, 351, 4277, 3815, 284, 4155, 15794]",1.0,2242,best_practice,356,Initialize object with default values to ensure consistency,,2225,"            return_type=""dict"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 11600, 1600]"
üß† ML Signal: Updating timestamp indicates a pattern of tracking changes over time,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 41033, 9217, 257, 3912, 286, 9646, 2458, 625, 640]",0.5,2242,ml_signal,358,Updating timestamp indicates a pattern of tracking changes over time,,2242,,[]
üß† ML Signal: Assigning model attributes to object properties shows a pattern of data transformation,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 2746, 12608, 284, 2134, 6608, 2523, 257, 3912, 286, 1366, 13389]",0.5,2242,ml_signal,360,Assigning model attributes to object properties shows a pattern of data transformation,,2242,,[]
‚ö†Ô∏è SAST Risk (Low): Adding objects to session without validation can lead to data integrity issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 18247, 5563, 284, 6246, 1231, 21201, 460, 1085, 284, 1366, 11540, 2428]",0.5,2272,sast_risk,363,Adding objects to session without validation can lead to data integrity issues,Low,2242,"    df = StockQuote.query_data(order=order, entity_ids=entity_ids, return_type=""df"")","[220, 220, 220, 47764, 796, 10500, 25178, 13, 22766, 62, 7890, 7, 2875, 28, 2875, 11, 9312, 62, 2340, 28, 26858, 62, 2340, 11, 1441, 62, 4906, 2625, 7568, 4943]"
‚ö†Ô∏è SAST Risk (Medium): Committing session without exception handling can lead to unhandled errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1520, 2535, 6246, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 8563]",0.5,2288,sast_risk,365,Committing session without exception handling can lead to unhandled errors,Medium,2272,    if not pd_is_not_null(df):,"[220, 220, 220, 611, 407, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
‚úÖ Best Practice: Refreshing session to ensure the object is updated with the latest database state,"[26486, 227, 6705, 19939, 25, 6524, 411, 722, 6246, 284, 4155, 262, 2134, 318, 6153, 351, 262, 3452, 6831, 1181]",0.5,2288,best_practice,367,Refreshing session to ensure the object is updated with the latest database state,,2288,,[]
üß† ML Signal: Returning the updated object indicates a pattern of function output for further processing,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 6153, 2134, 9217, 257, 3912, 286, 2163, 5072, 329, 2252, 7587]",0.5,2298,ml_signal,368,Returning the updated object indicates a pattern of function output for further processing,,2288,    def set_tags(quote):,"[220, 220, 220, 825, 900, 62, 31499, 7, 22708, 2599]"
üß† ML Signal: Function to build default settings if not present,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 1382, 4277, 6460, 611, 407, 1944]",0.5,2298,ml_signal,362,Function to build default settings if not present,,2298,,[]
üß† ML Signal: Function call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007]",0.5,2307,ml_signal,366,Function call with specific parameters,,2298,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Use of __name__ guard for script execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 329, 4226, 9706]",0.5,2317,best_practice,368,Use of __name__ guard for script execution,,2307,    def set_tags(quote):,"[220, 220, 220, 825, 900, 62, 31499, 7, 22708, 2599]"
‚úÖ Best Practice: Explicitly defining __all__ for module exports,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 11593, 439, 834, 329, 8265, 15319]",0.5,2327,best_practice,368,Explicitly defining __all__ for module exports,,2317,    def set_tags(quote):,"[220, 220, 220, 825, 900, 62, 31499, 7, 22708, 2599]"

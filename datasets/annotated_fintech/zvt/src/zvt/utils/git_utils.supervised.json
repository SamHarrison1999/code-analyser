[
  {
    "line": 2,
    "text": "import subprocess",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using subprocess can lead to command injection vulnerabilities if inputs are not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      11748,
      850,
      14681
    ],
    "start_token": 0,
    "end_token": 3,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      850,
      14681,
      460,
      1085,
      284,
      3141,
      16954,
      23805,
      611,
      17311,
      389,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using subprocess can lead to command injection vulnerabilities if inputs are not properly sanitized."
  },
  {
    "line": 2,
    "text": "import subprocess",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): subprocess.check_output can execute arbitrary commands if input is not sanitized",
    "confidence": 0.5,
    "tokens": [
      11748,
      850,
      14681
    ],
    "start_token": 3,
    "end_token": 6,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      850,
      14681,
      13,
      9122,
      62,
      22915,
      460,
      12260,
      14977,
      9729,
      611,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "subprocess.check_output can execute arbitrary commands if input is not sanitized"
  },
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Import the subprocess module explicitly at the beginning of the file",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      262,
      850,
      14681,
      8265,
      11777,
      379,
      262,
      3726,
      286,
      262,
      2393
    ],
    "label": "best_practice",
    "reason": "Import the subprocess module explicitly at the beginning of the file"
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of subprocess to execute shell commands",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      850,
      14681,
      284,
      12260,
      7582,
      9729
    ],
    "label": "ml_signal",
    "reason": "Usage of subprocess to execute shell commands"
  },
  {
    "line": 7,
    "text": "        return subprocess.check_output([\"git\", \"config\", \"--get\", \"user.name\"]).decode(\"utf8\").strip()",
    "annotation": "\u2705 Best Practice: Specify the exception type to catch specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      850,
      14681,
      13,
      9122,
      62,
      22915,
      7,
      14692,
      18300,
      1600,
      366,
      11250,
      1600,
      366,
      438,
      1136,
      1600,
      366,
      7220,
      13,
      3672,
      8973,
      737,
      12501,
      1098,
      7203,
      40477,
      23,
      11074,
      36311,
      3419
    ],
    "start_token": 6,
    "end_token": 45,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      6631,
      2099,
      284,
      4929,
      2176,
      8563
    ],
    "label": "best_practice",
    "reason": "Specify the exception type to catch specific errors"
  },
  {
    "line": 9,
    "text": "        return \"foolcage\"",
    "annotation": "\u2705 Best Practice: Avoid using bare except, specify the exception type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      69,
      970,
      66,
      496,
      1
    ],
    "start_token": 45,
    "end_token": 59,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      1262,
      6247,
      2845,
      11,
      11986,
      262,
      6631,
      2099
    ],
    "label": "best_practice",
    "reason": "Avoid using bare except, specify the exception type"
  },
  {
    "line": 7,
    "text": "        return subprocess.check_output([\"git\", \"config\", \"--get\", \"user.name\"]).decode(\"utf8\").strip()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): subprocess.check_output can be dangerous if input is not controlled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      850,
      14681,
      13,
      9122,
      62,
      22915,
      7,
      14692,
      18300,
      1600,
      366,
      11250,
      1600,
      366,
      438,
      1136,
      1600,
      366,
      7220,
      13,
      3672,
      8973,
      737,
      12501,
      1098,
      7203,
      40477,
      23,
      11074,
      36311,
      3419
    ],
    "start_token": 59,
    "end_token": 98,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      850,
      14681,
      13,
      9122,
      62,
      22915,
      460,
      307,
      4923,
      611,
      5128,
      318,
      407,
      6856
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "subprocess.check_output can be dangerous if input is not controlled"
  },
  {
    "line": 8,
    "text": "    except:",
    "annotation": "\u2705 Best Practice: Specify the exception type to avoid catching unexpected exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2845,
      25
    ],
    "start_token": 98,
    "end_token": 103,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      6631,
      2099,
      284,
      3368,
      16508,
      10059,
      13269
    ],
    "label": "best_practice",
    "reason": "Specify the exception type to avoid catching unexpected exceptions"
  },
  {
    "line": 9,
    "text": "        return \"foolcage\"",
    "annotation": "\u2705 Best Practice: Log the exception or provide more context when returning an empty string",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      69,
      970,
      66,
      496,
      1
    ],
    "start_token": 103,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      262,
      6631,
      393,
      2148,
      517,
      4732,
      618,
      8024,
      281,
      6565,
      4731
    ],
    "label": "best_practice",
    "reason": "Log the exception or provide more context when returning an empty string"
  },
  {
    "line": 12,
    "text": "def get_git_user_email():",
    "annotation": "\u2705 Best Practice: Ensure that all functions listed in __all__ are defined in the module",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      18300,
      62,
      7220,
      62,
      12888,
      33529
    ],
    "start_token": 117,
    "end_token": 126,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      477,
      5499,
      5610,
      287,
      11593,
      439,
      834,
      389,
      5447,
      287,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Ensure that all functions listed in __all__ are defined in the module"
  }
]
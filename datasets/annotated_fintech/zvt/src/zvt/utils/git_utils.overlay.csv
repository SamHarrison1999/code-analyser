annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (High): Using subprocess can lead to command injection vulnerabilities if inputs are not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 850, 14681, 460, 1085, 284, 3141, 16954, 23805, 611, 17311, 389, 407, 6105, 5336, 36951, 13]",1.0,3,sast_risk,2,Using subprocess can lead to command injection vulnerabilities if inputs are not properly sanitized.,High,0,import subprocess,"[11748, 850, 14681]"
‚ö†Ô∏è SAST Risk (Medium): subprocess.check_output can execute arbitrary commands if input is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 850, 14681, 13, 9122, 62, 22915, 460, 12260, 14977, 9729, 611, 5128, 318, 407, 5336, 36951]",0.5,6,sast_risk,2,subprocess.check_output can execute arbitrary commands if input is not sanitized,Medium,3,import subprocess,"[11748, 850, 14681]"
‚úÖ Best Practice: Import the subprocess module explicitly at the beginning of the file,"[26486, 227, 6705, 19939, 25, 17267, 262, 850, 14681, 8265, 11777, 379, 262, 3726, 286, 262, 2393]",1.0,6,best_practice,3,Import the subprocess module explicitly at the beginning of the file,,6,,[]
üß† ML Signal: Usage of subprocess to execute shell commands,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 850, 14681, 284, 12260, 7582, 9729]",1.0,6,ml_signal,4,Usage of subprocess to execute shell commands,,6,,[]
‚úÖ Best Practice: Specify the exception type to catch specific errors,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 6631, 2099, 284, 4929, 2176, 8563]",1.0,45,best_practice,7,Specify the exception type to catch specific errors,,6,"        return subprocess.check_output([""git"", ""config"", ""--get"", ""user.name""]).decode(""utf8"").strip()","[220, 220, 220, 220, 220, 220, 220, 1441, 850, 14681, 13, 9122, 62, 22915, 7, 14692, 18300, 1600, 366, 11250, 1600, 366, 438, 1136, 1600, 366, 7220, 13, 3672, 8973, 737, 12501, 1098, 7203, 40477, 23, 11074, 36311, 3419]"
"‚úÖ Best Practice: Avoid using bare except, specify the exception type","[26486, 227, 6705, 19939, 25, 24390, 1262, 6247, 2845, 11, 11986, 262, 6631, 2099]",0.5,59,best_practice,9,"Avoid using bare except, specify the exception type",,45,"        return ""foolcage""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 69, 970, 66, 496, 1]"
‚ö†Ô∏è SAST Risk (Medium): subprocess.check_output can be dangerous if input is not controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 850, 14681, 13, 9122, 62, 22915, 460, 307, 4923, 611, 5128, 318, 407, 6856]",1.0,98,sast_risk,7,subprocess.check_output can be dangerous if input is not controlled,Medium,59,"        return subprocess.check_output([""git"", ""config"", ""--get"", ""user.name""]).decode(""utf8"").strip()","[220, 220, 220, 220, 220, 220, 220, 1441, 850, 14681, 13, 9122, 62, 22915, 7, 14692, 18300, 1600, 366, 11250, 1600, 366, 438, 1136, 1600, 366, 7220, 13, 3672, 8973, 737, 12501, 1098, 7203, 40477, 23, 11074, 36311, 3419]"
‚úÖ Best Practice: Specify the exception type to avoid catching unexpected exceptions,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 6631, 2099, 284, 3368, 16508, 10059, 13269]",0.5,103,best_practice,8,Specify the exception type to avoid catching unexpected exceptions,,98,    except:,"[220, 220, 220, 2845, 25]"
‚úÖ Best Practice: Log the exception or provide more context when returning an empty string,"[26486, 227, 6705, 19939, 25, 5972, 262, 6631, 393, 2148, 517, 4732, 618, 8024, 281, 6565, 4731]",0.5,117,best_practice,9,Log the exception or provide more context when returning an empty string,,103,"        return ""foolcage""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 69, 970, 66, 496, 1]"
‚úÖ Best Practice: Ensure that all functions listed in __all__ are defined in the module,"[26486, 227, 6705, 19939, 25, 48987, 326, 477, 5499, 5610, 287, 11593, 439, 834, 389, 5447, 287, 262, 8265]",1.0,126,best_practice,12,Ensure that all functions listed in __all__ are defined in the module,,117,def get_git_user_email():,"[4299, 651, 62, 18300, 62, 7220, 62, 12888, 33529]"

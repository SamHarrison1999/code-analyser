[
  {
    "line": 7,
    "text": "from zvt.utils.utils import to_float",
    "annotation": "\ud83e\udde0 ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      284,
      62,
      22468
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      351,
      24155,
      11,
      4465,
      329,
      4547,
      1398,
      28398,
      444,
      290,
      6958
    ],
    "label": "ml_signal",
    "reason": "Class definition with inheritance, useful for understanding class hierarchies and relationships"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute definition, useful for understanding default values and configurations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 11,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      6770,
      11,
      4465,
      329,
      4547,
      4277,
      3815,
      290,
      25412
    ],
    "label": "ml_signal",
    "reason": "Class attribute definition, useful for understanding default values and configurations"
  },
  {
    "line": 11,
    "text": "    data_schema = RightsIssueDetail",
    "annotation": "\ud83e\udde0 ML Signal: URL definition, useful for understanding network interactions and API usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      6923,
      45147,
      11242,
      603
    ],
    "start_token": 11,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      6770,
      11,
      4465,
      329,
      4547,
      3127,
      12213,
      290,
      7824,
      8748
    ],
    "label": "ml_signal",
    "reason": "URL definition, useful for understanding network interactions and API usage"
  },
  {
    "line": 13,
    "text": "    url = \"https://emh5.eastmoney.com/api/FenHongRongZi/GetPeiGuMingXiList\"",
    "annotation": "\u2705 Best Practice: Reuse of URL variable, improves maintainability and reduces errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      37,
      268,
      48559,
      49,
      506,
      57,
      72,
      14,
      3855,
      6435,
      72,
      8205,
      44,
      278,
      42528,
      8053,
      1
    ],
    "start_token": 23,
    "end_token": 59,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      797,
      1904,
      286,
      10289,
      7885,
      11,
      19575,
      5529,
      1799,
      290,
      12850,
      8563
    ],
    "label": "best_practice",
    "reason": "Reuse of URL variable, improves maintainability and reduces errors"
  },
  {
    "line": 15,
    "text": "    path_fields = [\"PeiGuMingXiList\"]",
    "annotation": "\ud83e\udde0 ML Signal: Path fields definition, useful for understanding data extraction patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3108,
      62,
      25747,
      796,
      14631,
      6435,
      72,
      8205,
      44,
      278,
      42528,
      8053,
      8973
    ],
    "start_token": 59,
    "end_token": 75,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10644,
      7032,
      6770,
      11,
      4465,
      329,
      4547,
      1366,
      22236,
      7572
    ],
    "label": "ml_signal",
    "reason": "Path fields definition, useful for understanding data extraction patterns"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\u2705 Best Practice: Method name should be descriptive of its purpose or action",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 75,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      815,
      307,
      35644,
      286,
      663,
      4007,
      393,
      2223
    ],
    "label": "best_practice",
    "reason": "Method name should be descriptive of its purpose or action"
  },
  {
    "line": 14,
    "text": "    page_url = url",
    "annotation": "\ud83e\udde0 ML Signal: Returns a hardcoded string, indicating a fixed mapping or constant",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2443,
      62,
      6371,
      796,
      19016
    ],
    "start_token": 75,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      1327,
      40976,
      4731,
      11,
      12739,
      257,
      5969,
      16855,
      393,
      6937
    ],
    "label": "ml_signal",
    "reason": "Returns a hardcoded string, indicating a fixed mapping or constant"
  },
  {
    "line": 14,
    "text": "    page_url = url",
    "annotation": "\u2705 Best Practice: Use of a method to encapsulate and return a dictionary improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2443,
      62,
      6371,
      796,
      19016
    ],
    "start_token": 83,
    "end_token": 91,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2446,
      284,
      32652,
      5039,
      290,
      1441,
      257,
      22155,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a method to encapsulate and return a dictionary improves readability and maintainability."
  },
  {
    "line": 15,
    "text": "    path_fields = [\"PeiGuMingXiList\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to map keys to tuples, indicating a pattern of structured data transformation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3108,
      62,
      25747,
      796,
      14631,
      6435,
      72,
      8205,
      44,
      278,
      42528,
      8053,
      8973
    ],
    "start_token": 91,
    "end_token": 107,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      8251,
      284,
      12777,
      2374,
      11,
      12739,
      257,
      3912,
      286,
      20793,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to map keys to tuples, indicating a pattern of structured data transformation."
  },
  {
    "line": 18,
    "text": "        return \"PeiGuGongGaoRi\"",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of string keys to tuples with a function, indicating a pattern of data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      6435,
      72,
      8205,
      38,
      506,
      38,
      5488,
      49,
      72,
      1
    ],
    "start_token": 107,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      4731,
      8251,
      284,
      12777,
      2374,
      351,
      257,
      2163,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping of string keys to tuples with a function, indicating a pattern of data processing."
  },
  {
    "line": 20,
    "text": "    def get_data_map(self):",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of string keys to tuples with a function, indicating a pattern of data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      7890,
      62,
      8899,
      7,
      944,
      2599
    ],
    "start_token": 126,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      4731,
      8251,
      284,
      12777,
      2374,
      351,
      257,
      2163,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping of string keys to tuples with a function, indicating a pattern of data processing."
  },
  {
    "line": 22,
    "text": "            \"rights_issues\": (\"ShiJiPeiGu\", to_float),",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of string keys to tuples with a function, indicating a pattern of data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      28046,
      62,
      37165,
      1298,
      5855,
      2484,
      72,
      41,
      72,
      6435,
      72,
      8205,
      1600,
      284,
      62,
      22468,
      828
    ],
    "start_token": 138,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      4731,
      8251,
      284,
      12777,
      2374,
      351,
      257,
      2163,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping of string keys to tuples with a function, indicating a pattern of data processing."
  },
  {
    "line": 22,
    "text": "            \"rights_issues\": (\"ShiJiPeiGu\", to_float),",
    "annotation": "\ud83e\udde0 ML Signal: Extracting year from timestamp, common pattern for time-based operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      28046,
      62,
      37165,
      1298,
      5855,
      2484,
      72,
      41,
      72,
      6435,
      72,
      8205,
      1600,
      284,
      62,
      22468,
      828
    ],
    "start_token": 167,
    "end_token": 196,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      614,
      422,
      41033,
      11,
      2219,
      3912,
      329,
      640,
      12,
      3106,
      4560
    ],
    "label": "ml_signal",
    "reason": "Extracting year from timestamp, common pattern for time-based operations"
  },
  {
    "line": 23,
    "text": "            \"rights_issue_price\": (\"PeiGuJiaGe\", to_float),",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension to extract attributes from objects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      28046,
      62,
      21949,
      62,
      20888,
      1298,
      5855,
      6435,
      72,
      8205,
      41,
      544,
      10082,
      1600,
      284,
      62,
      22468,
      828
    ],
    "start_token": 196,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      284,
      7925,
      12608,
      422,
      5563
    ],
    "label": "ml_signal",
    "reason": "List comprehension to extract attributes from objects"
  },
  {
    "line": 41,
    "text": "                provider=self.provider,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for DataFrame nullity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11
    ],
    "start_token": 226,
    "end_token": 248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      6060,
      19778,
      9242,
      414
    ],
    "label": "ml_signal",
    "reason": "Conditional check for DataFrame nullity"
  },
  {
    "line": 44,
    "text": "                start_timestamp=item.timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct database commit without error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9186,
      13,
      16514,
      27823,
      11
    ],
    "start_token": 248,
    "end_token": 273,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      6831,
      4589,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct database commit without error handling"
  },
  {
    "line": 46,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Calling superclass method to ensure proper inheritance behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 273,
    "end_token": 285,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      2208,
      4871,
      2446,
      284,
      4155,
      1774,
      24155,
      4069
    ],
    "label": "best_practice",
    "reason": "Calling superclass method to ensure proper inheritance behavior"
  },
  {
    "line": 46,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Typical pattern for running a script directly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 285,
    "end_token": 297,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      48752,
      3912,
      329,
      2491,
      257,
      4226,
      3264
    ],
    "label": "ml_signal",
    "reason": "Typical pattern for running a script directly"
  },
  {
    "line": 46,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Defining __all__ for module exports",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 297,
    "end_token": 309,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Defining __all__ for module exports"
  }
]
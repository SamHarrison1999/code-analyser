[
  {
    "line": 2,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 3,
    "text": "from jqdatapy.api import get_fundamentals, get_query_count",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the imported functions are from a trusted source",
    "confidence": 0.5,
    "tokens": [
      6738,
      474,
      80,
      19608,
      12826,
      13,
      15042,
      1330,
      651,
      62,
      10990,
      3263,
      874,
      11,
      651,
      62,
      22766,
      62,
      9127
    ],
    "start_token": 0,
    "end_token": 19,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      17392,
      5499,
      389,
      422,
      257,
      13467,
      2723
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the imported functions are from a trusted source"
  },
  {
    "line": 5,
    "text": "from zvt.api.utils import to_report_period_type",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      26791,
      1330,
      284,
      62,
      13116,
      62,
      41007,
      62,
      4906
    ],
    "start_token": 19,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 5,
    "text": "from zvt.api.utils import to_report_period_type",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      26791,
      1330,
      284,
      62,
      13116,
      62,
      41007,
      62,
      4906
    ],
    "start_token": 34,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 12,
    "text": "    call_eastmoney_api,",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      869,
      62,
      23316,
      26316,
      62,
      15042,
      11
    ],
    "start_token": 49,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates usage patterns"
  },
  {
    "line": 17,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\ud83e\udde0 ML Signal: Importing multiple specific functions and classes indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 59,
    "end_token": 77,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      3294,
      2176,
      5499,
      290,
      6097,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing multiple specific functions and classes indicates usage patterns"
  },
  {
    "line": 18,
    "text": "from zvt.utils.time_utils import to_time_str, to_pd_timestamp",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the imported functions and classes are from a trusted source",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 77,
    "end_token": 99,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      17392,
      5499,
      290,
      6097,
      389,
      422,
      257,
      13467,
      2723
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the imported functions and classes are from a trusted source"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 99,
    "end_token": 99,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 22,
    "text": "    the_date = to_pd_timestamp(timestamp)",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      262,
      62,
      4475,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      8
    ],
    "start_token": 99,
    "end_token": 116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 24,
    "text": "    if report_period == ReportPeriod.year.value:",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      989,
      62,
      41007,
      6624,
      6358,
      5990,
      2101,
      13,
      1941,
      13,
      8367,
      25
    ],
    "start_token": 116,
    "end_token": 132,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 26,
    "text": "    if report_period == ReportPeriod.season1.value:",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      989,
      62,
      41007,
      6624,
      6358,
      5990,
      2101,
      13,
      6230,
      16,
      13,
      8367,
      25
    ],
    "start_token": 132,
    "end_token": 149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 16,
    "text": "from zvt.utils.pd_utils import index_df",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      6376,
      62,
      7568
    ],
    "start_token": 149,
    "end_token": 162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and parameters."
  },
  {
    "line": 18,
    "text": "from zvt.utils.time_utils import to_time_str, to_pd_timestamp",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the to_pd_timestamp function.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 162,
    "end_token": 184,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the to_pd_timestamp function."
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the to_report_period_type function.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 184,
    "end_token": 184,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      284,
      62,
      13116,
      62,
      41007,
      62,
      4906,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the to_report_period_type function."
  },
  {
    "line": 22,
    "text": "    the_date = to_pd_timestamp(timestamp)",
    "annotation": "\u2705 Best Practice: Use elif for mutually exclusive conditions to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      262,
      62,
      4475,
      796,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      16514,
      27823,
      8
    ],
    "start_token": 184,
    "end_token": 201,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1288,
      361,
      329,
      26519,
      8568,
      3403,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use elif for mutually exclusive conditions to improve readability."
  },
  {
    "line": 25,
    "text": "        return \"{}\".format(the_date.year)",
    "annotation": "\u2705 Best Practice: Use elif for mutually exclusive conditions to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      45144,
      92,
      1911,
      18982,
      7,
      1169,
      62,
      4475,
      13,
      1941,
      8
    ],
    "start_token": 201,
    "end_token": 220,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1288,
      361,
      329,
      26519,
      8568,
      3403,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use elif for mutually exclusive conditions to improve readability."
  },
  {
    "line": 28,
    "text": "    if report_period == ReportPeriod.half_year.value:",
    "annotation": "\u2705 Best Practice: Use elif for mutually exclusive conditions to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      989,
      62,
      41007,
      6624,
      6358,
      5990,
      2101,
      13,
      13959,
      62,
      1941,
      13,
      8367,
      25
    ],
    "start_token": 220,
    "end_token": 238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1288,
      361,
      329,
      26519,
      8568,
      3403,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use elif for mutually exclusive conditions to improve readability."
  },
  {
    "line": 31,
    "text": "        return \"{}q3\".format(the_date.year)",
    "annotation": "\u2705 Best Practice: Use elif for mutually exclusive conditions to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      45144,
      92,
      80,
      18,
      1911,
      18982,
      7,
      1169,
      62,
      4475,
      13,
      1941,
      8
    ],
    "start_token": 238,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1288,
      361,
      329,
      26519,
      8568,
      3403,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use elif for mutually exclusive conditions to improve readability."
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be risky in production code as it may be disabled with optimization.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17564,
      287,
      3227,
      2438,
      355,
      340,
      743,
      307,
      10058,
      351,
      23989,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be risky in production code as it may be disabled with optimization."
  },
  {
    "line": 28,
    "text": "    if report_period == ReportPeriod.half_year.value:",
    "annotation": "\ud83e\udde0 ML Signal: Class definition for a recorder, indicating a pattern for data recording",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      989,
      62,
      41007,
      6624,
      6358,
      5990,
      2101,
      13,
      13959,
      62,
      1941,
      13,
      8367,
      25
    ],
    "start_token": 259,
    "end_token": 277,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      329,
      257,
      38156,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      8296
    ],
    "label": "ml_signal",
    "reason": "Class definition for a recorder, indicating a pattern for data recording"
  },
  {
    "line": 30,
    "text": "    if report_period == ReportPeriod.season3.value:",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating a specific type of finance report",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      989,
      62,
      41007,
      6624,
      6358,
      5990,
      2101,
      13,
      6230,
      18,
      13,
      8367,
      25
    ],
    "start_token": 277,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      257,
      2176,
      2099,
      286,
      9604,
      989
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating a specific type of finance report"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating a specific data type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 294,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      257,
      2176,
      1366,
      2099
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating a specific data type"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: URL pattern for fetching timestamps, useful for identifying data sources",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 294,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      3912,
      329,
      21207,
      278,
      4628,
      395,
      9430,
      11,
      4465,
      329,
      13720,
      1366,
      4237
    ],
    "label": "ml_signal",
    "reason": "URL pattern for fetching timestamps, useful for identifying data sources"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Path fields for extracting timestamp list, indicating data structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 294,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10644,
      7032,
      329,
      37895,
      41033,
      1351,
      11,
      12739,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Path fields for extracting timestamp list, indicating data structure"
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Path fields for extracting individual timestamps, indicating data structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 294,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10644,
      7032,
      329,
      37895,
      1981,
      4628,
      395,
      9430,
      11,
      12739,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Path fields for extracting individual timestamps, indicating data structure"
  },
  {
    "line": 49,
    "text": "        code=None,",
    "annotation": "\u2705 Best Practice: Explicitly call the superclass's __init__ method to ensure proper initialization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      14202,
      11
    ],
    "start_token": 294,
    "end_token": 305,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      869,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      284,
      4155,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly call the superclass's __init__ method to ensure proper initialization."
  },
  {
    "line": 65,
    "text": "            code,",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern, capturing query count information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      11
    ],
    "start_token": 305,
    "end_token": 318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      11,
      21430,
      12405,
      954,
      1321,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern, capturing query count information."
  },
  {
    "line": 71,
    "text": "            end_timestamp=end_timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching a broad exception without specific handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 318,
    "end_token": 339,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      257,
      3154,
      6631,
      1231,
      2176,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching a broad exception without specific handling."
  },
  {
    "line": 71,
    "text": "            end_timestamp=end_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern, capturing warning messages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 339,
    "end_token": 360,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      11,
      21430,
      6509,
      6218,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern, capturing warning messages."
  },
  {
    "line": 71,
    "text": "            end_timestamp=end_timestamp,",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and usage of the function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 360,
    "end_token": 381,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and usage of the function."
  },
  {
    "line": 73,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store parameters for API call.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      10007,
      329,
      7824,
      869,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store parameters for API call."
  },
  {
    "line": 75,
    "text": "            self.logger.info(f\"joinquant query count:{get_query_count()}\")",
    "annotation": "\u2705 Best Practice: Use 'in' for multiple comparisons to improve readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      7639,
      18934,
      415,
      12405,
      954,
      29164,
      1136,
      62,
      22766,
      62,
      9127,
      3419,
      92,
      4943
    ],
    "start_token": 381,
    "end_token": 415,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      259,
      6,
      329,
      3294,
      17909,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'in' for multiple comparisons to improve readability."
  },
  {
    "line": 78,
    "text": "            self.fetch_jq_timestamp = False",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calling an external API with specific parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      69,
      7569,
      62,
      73,
      80,
      62,
      16514,
      27823,
      796,
      10352
    ],
    "start_token": 415,
    "end_token": 438,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4585,
      281,
      7097,
      7824,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of calling an external API with specific parameters."
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'self.timestamp_path_fields' is not set.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 438,
    "end_token": 438,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      944,
      13,
      16514,
      27823,
      62,
      6978,
      62,
      25747,
      6,
      318,
      407,
      900,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'self.timestamp_path_fields' is not set."
  },
  {
    "line": 83,
    "text": "    def init_timestamps(self, entity):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list comprehension to transform data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      16514,
      395,
      9430,
      7,
      944,
      11,
      9312,
      2599
    ],
    "start_token": 438,
    "end_token": 452,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      35915,
      284,
      6121,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of list comprehension to transform data."
  },
  {
    "line": 83,
    "text": "    def init_timestamps(self, entity):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential UnboundLocalError if 'timestamps' is not initialized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      16514,
      395,
      9430,
      7,
      944,
      11,
      9312,
      2599
    ],
    "start_token": 452,
    "end_token": 466,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      791,
      7784,
      14565,
      12331,
      611,
      705,
      16514,
      395,
      9430,
      6,
      318,
      407,
      23224,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential UnboundLocalError if 'timestamps' is not initialized."
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the length of a list",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 466,
    "end_token": 466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4129,
      286,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the length of a list"
  },
  {
    "line": 83,
    "text": "    def init_timestamps(self, entity):",
    "annotation": "\ud83e\udde0 ML Signal: Function call with a specific parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      16514,
      395,
      9430,
      7,
      944,
      11,
      9312,
      2599
    ],
    "start_token": 466,
    "end_token": 480,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      257,
      2176,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function call with a specific parameter"
  },
  {
    "line": 92,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with a specific parameter",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 480,
    "end_token": 480,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      257,
      2176,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function call with a specific parameter"
  },
  {
    "line": 100,
    "text": "            param = {",
    "annotation": "\ud83e\udde0 ML Signal: Function call with a specific parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5772,
      796,
      1391
    ],
    "start_token": 480,
    "end_token": 494,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      257,
      2176,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function call with a specific parameter"
  },
  {
    "line": 100,
    "text": "            param = {",
    "annotation": "\ud83e\udde0 ML Signal: Function call with a specific parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5772,
      796,
      1391
    ],
    "start_token": 494,
    "end_token": 508,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      257,
      2176,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function call with a specific parameter"
  },
  {
    "line": 102,
    "text": "                \"fc\": get_fc(security_item),",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of a list element to a string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16072,
      1298,
      651,
      62,
      16072,
      7,
      12961,
      62,
      9186,
      828
    ],
    "start_token": 508,
    "end_token": 534,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      257,
      1351,
      5002,
      284,
      257,
      4731
    ],
    "label": "ml_signal",
    "reason": "Conversion of a list element to a string"
  },
  {
    "line": 106,
    "text": "                \"endDate\": \"\",",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on string comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      437,
      10430,
      1298,
      366,
      1600
    ],
    "start_token": 534,
    "end_token": 555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4731,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on string comparison"
  },
  {
    "line": 103,
    "text": "                \"corpType\": company_type_flag(security_item),",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a parameter indicates a pattern for function usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      10215,
      79,
      6030,
      1298,
      1664,
      62,
      4906,
      62,
      32109,
      7,
      12961,
      62,
      9186,
      828
    ],
    "start_token": 555,
    "end_token": 585,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      11507,
      9217,
      257,
      3912,
      329,
      2163,
      8748
    ],
    "label": "ml_signal",
    "reason": "Function definition with a parameter indicates a pattern for function usage"
  },
  {
    "line": 105,
    "text": "                \"reportDateType\": 0,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper function to determine company type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13116,
      10430,
      6030,
      1298,
      657,
      11
    ],
    "start_token": 585,
    "end_token": 607,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      2163,
      284,
      5004,
      1664,
      2099
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper function to determine company type"
  },
  {
    "line": 107,
    "text": "                \"latestCount\": size,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on company type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      42861,
      12332,
      1298,
      2546,
      11
    ],
    "start_token": 607,
    "end_token": 628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1664,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on company type"
  },
  {
    "line": 109,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Using format for string formatting improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 628,
    "end_token": 637,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting improves readability"
  },
  {
    "line": 112,
    "text": "                \"fc\": get_fc(security_item),",
    "annotation": "\u2705 Best Practice: Using format for string formatting improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16072,
      1298,
      651,
      62,
      16072,
      7,
      12961,
      62,
      9186,
      828
    ],
    "start_token": 637,
    "end_token": 663,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting improves readability"
  },
  {
    "line": 115,
    "text": "                \"reportDateType\": 0,",
    "annotation": "\u2705 Best Practice: Using format for string formatting improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13116,
      10430,
      6030,
      1298,
      657,
      11
    ],
    "start_token": 663,
    "end_token": 685,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting improves readability"
  },
  {
    "line": 118,
    "text": "            }",
    "annotation": "\u2705 Best Practice: Using format for string formatting improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 685,
    "end_token": 697,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting improves readability"
  },
  {
    "line": 113,
    "text": "                \"corpType\": company_type_flag(security_item),",
    "annotation": "\u2705 Best Practice: Consider adding type hints for better code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      10215,
      79,
      6030,
      1298,
      1664,
      62,
      4906,
      62,
      32109,
      7,
      12961,
      62,
      9186,
      828
    ],
    "start_token": 697,
    "end_token": 727,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for better code readability and maintainability"
  },
  {
    "line": 115,
    "text": "                \"reportDateType\": 0,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to generate request parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13116,
      10430,
      6030,
      1298,
      657,
      11
    ],
    "start_token": 727,
    "end_token": 749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      7716,
      2581,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to generate request parameters"
  },
  {
    "line": 116,
    "text": "                \"endDate\": to_time_str(timestamps[10]),",
    "annotation": "\ud83e\udde0 ML Signal: Logging request parameters for debugging or monitoring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      437,
      10430,
      1298,
      284,
      62,
      2435,
      62,
      2536,
      7,
      16514,
      395,
      9430,
      58,
      940,
      46570
    ],
    "start_token": 749,
    "end_token": 780,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      2581,
      10007,
      329,
      28769,
      393,
      9904
    ],
    "label": "ml_signal",
    "reason": "Logging request parameters for debugging or monitoring"
  },
  {
    "line": 119,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information exposure in logs if sensitive data is included in param",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 780,
    "end_token": 780,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      7111,
      287,
      17259,
      611,
      8564,
      1366,
      318,
      3017,
      287,
      5772
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information exposure in logs if sensitive data is included in param"
  },
  {
    "line": 121,
    "text": "            param[\"reportType\"] = 1",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a URL and method for making API requests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5772,
      14692,
      13116,
      6030,
      8973,
      796,
      352
    ],
    "start_token": 780,
    "end_token": 798,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      10289,
      290,
      2446,
      329,
      1642,
      7824,
      7007
    ],
    "label": "ml_signal",
    "reason": "Usage of a URL and method for making API requests"
  },
  {
    "line": 123,
    "text": "        return param",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the API request handles exceptions and errors properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      5772
    ],
    "start_token": 798,
    "end_token": 807,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      7824,
      2581,
      17105,
      13269,
      290,
      8563,
      6105
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the API request handles exceptions and errors properly"
  },
  {
    "line": 119,
    "text": "",
    "annotation": "\u2705 Best Practice: Method name is descriptive and follows naming conventions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 807,
    "end_token": 807,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      318,
      35644,
      290,
      5679,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Method name is descriptive and follows naming conventions"
  },
  {
    "line": 121,
    "text": "            param[\"reportType\"] = 1",
    "annotation": "\u2705 Best Practice: Returning a hardcoded string is simple and efficient for constant values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5772,
      14692,
      13116,
      6030,
      8973,
      796,
      352
    ],
    "start_token": 807,
    "end_token": 825,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1327,
      40976,
      4731,
      318,
      2829,
      290,
      6942,
      329,
      6937,
      3815
    ],
    "label": "best_practice",
    "reason": "Returning a hardcoded string is simple and efficient for constant values"
  },
  {
    "line": 131,
    "text": "            return [\"{}_BaoXian\".format(self.finance_report_type)]",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a DataFrame is not null before proceeding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      14631,
      90,
      92,
      62,
      33,
      5488,
      55,
      666,
      1911,
      18982,
      7,
      944,
      13,
      69,
      14149,
      62,
      13116,
      62,
      4906,
      15437
    ],
    "start_token": 825,
    "end_token": 857,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      18788
    ],
    "label": "ml_signal",
    "reason": "Checking if a DataFrame is not null before proceeding"
  },
  {
    "line": 133,
    "text": "            return [\"{}_QuanShang\".format(self.finance_report_type)]",
    "annotation": "\ud83e\udde0 ML Signal: Assigning a value to an object's attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      14631,
      90,
      92,
      62,
      4507,
      272,
      2484,
      648,
      1911,
      18982,
      7,
      944,
      13,
      69,
      14149,
      62,
      13116,
      62,
      4906,
      15437
    ],
    "start_token": 857,
    "end_token": 889,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      257,
      1988,
      284,
      281,
      2134,
      338,
      11688
    ],
    "label": "ml_signal",
    "reason": "Assigning a value to an object's attribute"
  },
  {
    "line": 133,
    "text": "            return [\"{}_QuanShang\".format(self.finance_report_type)]",
    "annotation": "\u2705 Best Practice: Using logging for information tracking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      14631,
      90,
      92,
      62,
      4507,
      272,
      2484,
      648,
      1911,
      18982,
      7,
      944,
      13,
      69,
      14149,
      62,
      13116,
      62,
      4906,
      15437
    ],
    "start_token": 889,
    "end_token": 921,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18931,
      329,
      1321,
      9646
    ],
    "label": "best_practice",
    "reason": "Using logging for information tracking"
  },
  {
    "line": 141,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Committing to a session without exception handling for database errors",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 921,
    "end_token": 921,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1520,
      2535,
      284,
      257,
      6246,
      1231,
      6631,
      9041,
      329,
      6831,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Committing to a session without exception handling for database errors"
  },
  {
    "line": 144,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Using logging for error tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 921,
    "end_token": 929,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18931,
      329,
      4049,
      9646
    ],
    "label": "best_practice",
    "reason": "Using logging for error tracking"
  },
  {
    "line": 157,
    "text": "                count=None,",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a list is not empty before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      954,
      28,
      14202,
      11
    ],
    "start_token": 929,
    "end_token": 948,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      1351,
      318,
      407,
      6565,
      878,
      7587
    ],
    "label": "ml_signal",
    "reason": "Checking if a list is not empty before processing"
  },
  {
    "line": 159,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on data schema type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 948,
    "end_token": 960,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1366,
      32815,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on data schema type"
  },
  {
    "line": 174,
    "text": "        if not self.fetch_jq_timestamp:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a DataFrame is not null before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      69,
      7569,
      62,
      73,
      80,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 960,
    "end_token": 980,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      7587
    ],
    "label": "ml_signal",
    "reason": "Checking if a DataFrame is not null before processing"
  },
  {
    "line": 177,
    "text": "        # fill the timestamp for report published date",
    "annotation": "\ud83e\udde0 ML Signal: Complex condition checking involving DataFrame and list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6070,
      262,
      41033,
      329,
      989,
      3199,
      3128
    ],
    "start_token": 980,
    "end_token": 995,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19157,
      4006,
      10627,
      7411,
      6060,
      19778,
      290,
      1351
    ],
    "label": "ml_signal",
    "reason": "Complex condition checking involving DataFrame and list"
  },
  {
    "line": 182,
    "text": "            order=self.data_schema.timestamp.asc(),",
    "annotation": "\u2705 Best Practice: Using logging for information tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      13,
      16514,
      27823,
      13,
      3372,
      22784
    ],
    "start_token": 995,
    "end_token": 1020,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18931,
      329,
      1321,
      9646
    ],
    "label": "best_practice",
    "reason": "Using logging for information tracking"
  },
  {
    "line": 185,
    "text": "            filters=[",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Committing to a session without exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888
    ],
    "start_token": 1020,
    "end_token": 1033,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1520,
      2535,
      284,
      257,
      6246,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Committing to a session without exception handling"
  },
  {
    "line": 185,
    "text": "            filters=[",
    "annotation": "\u2705 Best Practice: Define __all__ for module exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888
    ],
    "start_token": 1033,
    "end_token": 1046,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Define __all__ for module exports"
  }
]
[
  {
    "line": 6,
    "text": "from zvt.utils.utils import add_func_to_value, first_item_to_float",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary mapping for financial terms, useful for feature extraction in ML models",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      751,
      62,
      20786,
      62,
      1462,
      62,
      8367,
      11,
      717,
      62,
      9186,
      62,
      1462,
      62,
      22468
    ],
    "start_token": 0,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      16855,
      329,
      3176,
      2846,
      11,
      4465,
      329,
      3895,
      22236,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Dictionary mapping for financial terms, useful for feature extraction in ML models"
  },
  {
    "line": 76,
    "text": "    \"fi_net_interest_income\": \"Intnreve\",",
    "annotation": "\u2705 Best Practice: Using a utility function to apply transformations to dictionary values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      12463,
      62,
      3262,
      62,
      9446,
      62,
      12519,
      1298,
      366,
      5317,
      77,
      36955,
      1600
    ],
    "start_token": 23,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      10361,
      2163,
      284,
      4174,
      38226,
      284,
      22155,
      3815
    ],
    "label": "best_practice",
    "reason": "Using a utility function to apply transformations to dictionary values"
  },
  {
    "line": 79,
    "text": "    # \u5229\u606f\u652f\u51fa",
    "annotation": "\u2705 Best Practice: Adding additional keys with transformation functions for specific data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      230,
      102,
      162,
      223,
      107,
      162,
      242,
      107,
      49035,
      118
    ],
    "start_token": 40,
    "end_token": 55,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      3224,
      8251,
      351,
      13389,
      5499,
      329,
      2176,
      1366,
      7587
    ],
    "label": "best_practice",
    "reason": "Adding additional keys with transformation functions for specific data processing"
  },
  {
    "line": 77,
    "text": "    # \u5176\u4e2d:\u5229\u606f\u6536\u5165",
    "annotation": "\ud83e\udde0 ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      227,
      114,
      40792,
      25,
      26344,
      102,
      162,
      223,
      107,
      162,
      242,
      114,
      17739,
      98
    ],
    "start_token": 55,
    "end_token": 74,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      351,
      24155,
      11,
      4465,
      329,
      4547,
      1398,
      28398,
      444,
      290,
      6958
    ],
    "label": "ml_signal",
    "reason": "Class definition with inheritance, useful for understanding class hierarchies and relationships"
  },
  {
    "line": 79,
    "text": "    # \u5229\u606f\u652f\u51fa",
    "annotation": "\ud83e\udde0 ML Signal: Static URL assignment, useful for detecting hardcoded endpoints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      230,
      102,
      162,
      223,
      107,
      162,
      242,
      107,
      49035,
      118
    ],
    "start_token": 74,
    "end_token": 89,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      10289,
      16237,
      11,
      4465,
      329,
      31521,
      1327,
      40976,
      886,
      13033
    ],
    "label": "ml_signal",
    "reason": "Static URL assignment, useful for detecting hardcoded endpoints"
  },
  {
    "line": 81,
    "text": "    # \u624b\u7eed\u8d39\u53ca\u4f63\u91d1\u51c0\u6536\u5165",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded URL can lead to inflexibility and potential security risks if the endpoint changes or is deprecated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      231,
      233,
      163,
      119,
      255,
      164,
      112,
      117,
      20998,
      232,
      19526,
      96,
      34932,
      239,
      49035,
      222,
      162,
      242,
      114,
      17739,
      98
    ],
    "start_token": 89,
    "end_token": 115,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      10289,
      460,
      1085,
      284,
      1167,
      2588,
      2247,
      290,
      2785,
      2324,
      7476,
      611,
      262,
      36123,
      2458,
      393,
      318,
      39224
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded URL can lead to inflexibility and potential security risks if the endpoint changes or is deprecated"
  },
  {
    "line": 83,
    "text": "    # \u5176\u4e2d:\u624b\u7eed\u8d39\u53ca\u4f63\u91d1\u6536\u5165",
    "annotation": "\ud83e\udde0 ML Signal: Static string assignment, useful for detecting hardcoded values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      227,
      114,
      40792,
      25,
      33699,
      233,
      163,
      119,
      255,
      164,
      112,
      117,
      20998,
      232,
      19526,
      96,
      34932,
      239,
      162,
      242,
      114,
      17739,
      98
    ],
    "start_token": 115,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      4731,
      16237,
      11,
      4465,
      329,
      31521,
      1327,
      40976,
      3815
    ],
    "label": "ml_signal",
    "reason": "Static string assignment, useful for detecting hardcoded values"
  },
  {
    "line": 85,
    "text": "    # \u624b\u7eed\u8d39\u53ca\u4f63\u91d1\u652f\u51fa",
    "annotation": "\ud83e\udde0 ML Signal: Static integer assignment, useful for detecting hardcoded values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      231,
      233,
      163,
      119,
      255,
      164,
      112,
      117,
      20998,
      232,
      19526,
      96,
      34932,
      239,
      162,
      242,
      107,
      49035,
      118
    ],
    "start_token": 143,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      18253,
      16237,
      11,
      4465,
      329,
      31521,
      1327,
      40976,
      3815
    ],
    "label": "ml_signal",
    "reason": "Static integer assignment, useful for detecting hardcoded values"
  },
  {
    "line": 81,
    "text": "    # \u624b\u7eed\u8d39\u53ca\u4f63\u91d1\u51c0\u6536\u5165",
    "annotation": "\ud83e\udde0 ML Signal: Method definition without parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      231,
      233,
      163,
      119,
      255,
      164,
      112,
      117,
      20998,
      232,
      19526,
      96,
      34932,
      239,
      49035,
      222,
      162,
      242,
      114,
      17739,
      98
    ],
    "start_token": 167,
    "end_token": 193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      6770,
      1231,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method definition without parameters"
  },
  {
    "line": 83,
    "text": "    # \u5176\u4e2d:\u624b\u7eed\u8d39\u53ca\u4f63\u91d1\u6536\u5165",
    "annotation": "\ud83e\udde0 ML Signal: Returning a variable from a method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      227,
      114,
      40792,
      25,
      33699,
      233,
      163,
      119,
      255,
      164,
      112,
      117,
      20998,
      232,
      19526,
      96,
      34932,
      239,
      162,
      242,
      114,
      17739,
      98
    ],
    "start_token": 193,
    "end_token": 221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      7885,
      422,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Returning a variable from a method"
  },
  {
    "line": 86,
    "text": "    \"fi_expenses_for_fees_and_commissions\": \"Commexp\",",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the script is run as the main program",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      12463,
      62,
      11201,
      4541,
      62,
      1640,
      62,
      69,
      2841,
      62,
      392,
      62,
      785,
      8481,
      1298,
      366,
      6935,
      11201,
      1600
    ],
    "start_token": 221,
    "end_token": 244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      4226,
      318,
      1057,
      355,
      262,
      1388,
      1430
    ],
    "label": "ml_signal",
    "reason": "Checking if the script is run as the main program"
  },
  {
    "line": 86,
    "text": "    \"fi_expenses_for_fees_and_commissions\": \"Commexp\",",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      12463,
      62,
      11201,
      4541,
      62,
      1640,
      62,
      69,
      2841,
      62,
      392,
      62,
      785,
      8481,
      1298,
      366,
      6935,
      11201,
      1600
    ],
    "start_token": 244,
    "end_token": 267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiating a class with specific parameters"
  },
  {
    "line": 86,
    "text": "    \"fi_expenses_for_fees_and_commissions\": \"Commexp\",",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      12463,
      62,
      11201,
      4541,
      62,
      1640,
      62,
      69,
      2841,
      62,
      392,
      62,
      785,
      8481,
      1298,
      366,
      6935,
      11201,
      1600
    ],
    "start_token": 267,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Calling a method on an object"
  },
  {
    "line": 86,
    "text": "    \"fi_expenses_for_fees_and_commissions\": \"Commexp\",",
    "annotation": "\u2705 Best Practice: Defining __all__ to specify public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      12463,
      62,
      11201,
      4541,
      62,
      1640,
      62,
      69,
      2841,
      62,
      392,
      62,
      785,
      8481,
      1298,
      366,
      6935,
      11201,
      1600
    ],
    "start_token": 290,
    "end_token": 313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      284,
      11986,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Defining __all__ to specify public API of the module"
  }
]
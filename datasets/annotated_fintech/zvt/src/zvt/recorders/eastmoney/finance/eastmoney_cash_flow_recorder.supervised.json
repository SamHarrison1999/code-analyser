[
  {
    "line": 6,
    "text": "from zvt.utils.utils import add_func_to_value, first_item_to_float",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of cash flow terms to their corresponding codes, useful for feature extraction in ML models",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      751,
      62,
      20786,
      62,
      1462,
      62,
      8367,
      11,
      717,
      62,
      9186,
      62,
      1462,
      62,
      22468
    ],
    "start_token": 0,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      5003,
      5202,
      2846,
      284,
      511,
      11188,
      12416,
      11,
      4465,
      329,
      3895,
      22236,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Mapping of cash flow terms to their corresponding codes, useful for feature extraction in ML models"
  },
  {
    "line": 87,
    "text": "    \"cash_at_beginning\": \"Cashequibeginning\",",
    "annotation": "\u2705 Best Practice: Using a utility function to apply transformations to dictionary values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      30350,
      62,
      265,
      62,
      27471,
      768,
      1298,
      366,
      35155,
      258,
      421,
      571,
      1533,
      23062,
      1600
    ],
    "start_token": 23,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      10361,
      2163,
      284,
      4174,
      38226,
      284,
      22155,
      3815
    ],
    "label": "best_practice",
    "reason": "Using a utility function to apply transformations to dictionary values"
  },
  {
    "line": 90,
    "text": "    # \u94f6\u884c\u76f8\u5173",
    "annotation": "\ud83e\udde0 ML Signal: Adding additional fields to the cash flow map for report period and date, useful for temporal analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      16268,
      241,
      114,
      26193,
      234,
      33566,
      116,
      17739,
      111
    ],
    "start_token": 42,
    "end_token": 55,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      3224,
      7032,
      284,
      262,
      5003,
      5202,
      3975,
      329,
      989,
      2278,
      290,
      3128,
      11,
      4465,
      329,
      21964,
      3781
    ],
    "label": "ml_signal",
    "reason": "Adding additional fields to the cash flow map for report period and date, useful for temporal analysis"
  },
  {
    "line": 87,
    "text": "    \"cash_at_beginning\": \"Cashequibeginning\",",
    "annotation": "\ud83e\udde0 ML Signal: Class definition for a specific financial data recorder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      30350,
      62,
      265,
      62,
      27471,
      768,
      1298,
      366,
      35155,
      258,
      421,
      571,
      1533,
      23062,
      1600
    ],
    "start_token": 55,
    "end_token": 74,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      329,
      257,
      2176,
      3176,
      1366,
      38156
    ],
    "label": "ml_signal",
    "reason": "Class definition for a specific financial data recorder"
  },
  {
    "line": 89,
    "text": "    \"cash\": \"Cashequiending\",",
    "annotation": "\ud83e\udde0 ML Signal: Specifies the data schema used for the recorder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      30350,
      1298,
      366,
      35155,
      258,
      421,
      72,
      1571,
      1600
    ],
    "start_token": 74,
    "end_token": 87,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      6945,
      262,
      1366,
      32815,
      973,
      329,
      262,
      38156
    ],
    "label": "ml_signal",
    "reason": "Specifies the data schema used for the recorder"
  },
  {
    "line": 91,
    "text": "    # \u5ba2\u6237\u5b58\u6b3e\u548c\u540c\u4e1a\u53ca\u5176\u4ed6\u91d1\u878d\u673a\u6784\u5b58\u653e\u6b3e\u9879\u51c0\u589e\u52a0\u989d",
    "annotation": "\ud83e\udde0 ML Signal: URL for fetching financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      106,
      95,
      22755,
      115,
      27764,
      246,
      162,
      105,
      122,
      161,
      240,
      234,
      28938,
      234,
      10310,
      248,
      20998,
      232,
      17739,
      114,
      20015,
      244,
      34932,
      239,
      164,
      252,
      235,
      17312,
      118,
      162,
      252,
      226,
      27764,
      246,
      162,
      242,
      122,
      162,
      105,
      122,
      165,
      94,
      117,
      49035,
      222,
      161,
      95,
      252,
      27950,
      254,
      165,
      95,
      251
    ],
    "start_token": 87,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      329,
      21207,
      278,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "URL for fetching financial data"
  },
  {
    "line": 93,
    "text": "    # \u5411\u4e2d\u592e\u94f6\u884c\u501f\u6b3e\u51c0\u589e\u52a0\u989d",
    "annotation": "\ud83e\udde0 ML Signal: Type of financial report being recorded",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      238,
      239,
      40792,
      13783,
      106,
      165,
      241,
      114,
      26193,
      234,
      161,
      222,
      253,
      162,
      105,
      122,
      49035,
      222,
      161,
      95,
      252,
      27950,
      254,
      165,
      95,
      251
    ],
    "start_token": 145,
    "end_token": 176,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      286,
      3176,
      989,
      852,
      6264
    ],
    "label": "ml_signal",
    "reason": "Type of financial report being recorded"
  },
  {
    "line": 95,
    "text": "    # \u5b58\u653e\u4e2d\u592e\u94f6\u884c\u548c\u540c\u4e1a\u6b3e\u9879\u53ca\u5176\u4ed6\u91d1\u878d\u673a\u6784\u51c0\u51cf\u5c11\u989d",
    "annotation": "\ud83e\udde0 ML Signal: Indicates a specific data type used in the recorder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      255,
      246,
      162,
      242,
      122,
      40792,
      13783,
      106,
      165,
      241,
      114,
      26193,
      234,
      161,
      240,
      234,
      28938,
      234,
      10310,
      248,
      162,
      105,
      122,
      165,
      94,
      117,
      20998,
      232,
      17739,
      114,
      20015,
      244,
      34932,
      239,
      164,
      252,
      235,
      17312,
      118,
      162,
      252,
      226,
      49035,
      222,
      49035,
      237,
      22887,
      239,
      165,
      95,
      251
    ],
    "start_token": 176,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1423,
      16856,
      257,
      2176,
      1366,
      2099,
      973,
      287,
      262,
      38156
    ],
    "label": "ml_signal",
    "reason": "Indicates a specific data type used in the recorder"
  },
  {
    "line": 92,
    "text": "    \"fi_deposit_increase\": \"Nideposit\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The function get_data_map accesses cash_flow_map, which is not defined within the function or passed as a parameter.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      12463,
      62,
      10378,
      7434,
      62,
      24988,
      589,
      1298,
      366,
      45,
      485,
      1930,
      270,
      1600
    ],
    "start_token": 232,
    "end_token": 250,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      2163,
      651,
      62,
      7890,
      62,
      8899,
      1895,
      274,
      5003,
      62,
      11125,
      62,
      8899,
      11,
      543,
      318,
      407,
      5447,
      1626,
      262,
      2163,
      393,
      3804,
      355,
      257,
      11507,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The function get_data_map accesses cash_flow_map, which is not defined within the function or passed as a parameter."
  },
  {
    "line": 95,
    "text": "    # \u5b58\u653e\u4e2d\u592e\u94f6\u884c\u548c\u540c\u4e1a\u6b3e\u9879\u53ca\u5176\u4ed6\u91d1\u878d\u673a\u6784\u51c0\u51cf\u5c11\u989d",
    "annotation": "\u2705 Best Practice: Use the standard Python idiom for checking if a script is run as the main program.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10263,
      255,
      246,
      162,
      242,
      122,
      40792,
      13783,
      106,
      165,
      241,
      114,
      26193,
      234,
      161,
      240,
      234,
      28938,
      234,
      10310,
      248,
      162,
      105,
      122,
      165,
      94,
      117,
      20998,
      232,
      17739,
      114,
      20015,
      244,
      34932,
      239,
      164,
      252,
      235,
      17312,
      118,
      162,
      252,
      226,
      49035,
      222,
      49035,
      237,
      22887,
      239,
      165,
      95,
      251
    ],
    "start_token": 250,
    "end_token": 306,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      262,
      3210,
      11361,
      4686,
      29005,
      329,
      10627,
      611,
      257,
      4226,
      318,
      1057,
      355,
      262,
      1388,
      1430,
      13
    ],
    "label": "best_practice",
    "reason": "Use the standard Python idiom for checking if a script is run as the main program."
  },
  {
    "line": 97,
    "text": "    # \u62c6\u5165\u8d44\u91d1\u53ca\u5356\u51fa\u56de\u8d2d\u91d1\u878d\u8d44\u4ea7\u6b3e\u51c0\u589e\u52a0\u989d",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating a class with specific parameters can indicate typical usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      233,
      228,
      17739,
      98,
      164,
      113,
      226,
      34932,
      239,
      20998,
      232,
      39355,
      244,
      49035,
      118,
      32368,
      252,
      164,
      112,
      255,
      34932,
      239,
      164,
      252,
      235,
      164,
      113,
      226,
      12859,
      100,
      162,
      105,
      122,
      49035,
      222,
      161,
      95,
      252,
      27950,
      254,
      165,
      95,
      251
    ],
    "start_token": 306,
    "end_token": 354,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      257,
      1398,
      351,
      2176,
      10007,
      460,
      7603,
      7226,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiating a class with specific parameters can indicate typical usage patterns."
  },
  {
    "line": 97,
    "text": "    # \u62c6\u5165\u8d44\u91d1\u53ca\u5356\u51fa\u56de\u8d2d\u91d1\u878d\u8d44\u4ea7\u6b3e\u51c0\u589e\u52a0\u989d",
    "annotation": "\ud83e\udde0 ML Signal: Calling the run method on an object can indicate a common entry point for execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      233,
      228,
      17739,
      98,
      164,
      113,
      226,
      34932,
      239,
      20998,
      232,
      39355,
      244,
      49035,
      118,
      32368,
      252,
      164,
      112,
      255,
      34932,
      239,
      164,
      252,
      235,
      164,
      113,
      226,
      12859,
      100,
      162,
      105,
      122,
      49035,
      222,
      161,
      95,
      252,
      27950,
      254,
      165,
      95,
      251
    ],
    "start_token": 354,
    "end_token": 402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      262,
      1057,
      2446,
      319,
      281,
      2134,
      460,
      7603,
      257,
      2219,
      5726,
      966,
      329,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling the run method on an object can indicate a common entry point for execution."
  },
  {
    "line": 97,
    "text": "    # \u62c6\u5165\u8d44\u91d1\u53ca\u5356\u51fa\u56de\u8d2d\u91d1\u878d\u8d44\u4ea7\u6b3e\u51c0\u589e\u52a0\u989d",
    "annotation": "\u2705 Best Practice: Defining __all__ specifies the public API of the module, which improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      233,
      228,
      17739,
      98,
      164,
      113,
      226,
      34932,
      239,
      20998,
      232,
      39355,
      244,
      49035,
      118,
      32368,
      252,
      164,
      112,
      255,
      34932,
      239,
      164,
      252,
      235,
      164,
      113,
      226,
      12859,
      100,
      162,
      105,
      122,
      49035,
      222,
      161,
      95,
      252,
      27950,
      254,
      165,
      95,
      251
    ],
    "start_token": 402,
    "end_token": 450,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      26052,
      262,
      1171,
      7824,
      286,
      262,
      8265,
      11,
      543,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Defining __all__ specifies the public API of the module, which improves code readability and maintainability."
  }
]
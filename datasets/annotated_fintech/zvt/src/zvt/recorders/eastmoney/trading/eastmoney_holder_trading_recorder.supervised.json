[
  {
    "line": 2,
    "text": "from zvt.domain import HolderTrading",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      24210,
      2898,
      4980
    ],
    "start_token": 0,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 4,
    "text": "from zvt.utils.utils import to_float",
    "annotation": "\u2705 Best Practice: Class definition should follow the naming conventions (CamelCase).",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      284,
      62,
      22468
    ],
    "start_token": 9,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      262,
      19264,
      21396,
      357,
      34,
      17983,
      20448,
      737
    ],
    "label": "best_practice",
    "reason": "Class definition should follow the naming conventions (CamelCase)."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Class attributes should be defined at the top of the class for better readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be defined at the top of the class for better readability."
  },
  {
    "line": 8,
    "text": "    data_schema = HolderTrading",
    "annotation": "\ud83e\udde0 ML Signal: URL patterns can be used to identify API endpoints for web scraping or data collection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      24210,
      2898,
      4980
    ],
    "start_token": 20,
    "end_token": 31,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      7572,
      460,
      307,
      973,
      284,
      5911,
      7824,
      886,
      13033,
      329,
      3992,
      46743,
      393,
      1366,
      4947,
      13
    ],
    "label": "ml_signal",
    "reason": "URL patterns can be used to identify API endpoints for web scraping or data collection."
  },
  {
    "line": 10,
    "text": "    url = \"https://emh5.eastmoney.com/api/JiaoYiShuJu/GetGuDongZengJian\"",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      41,
      13481,
      56,
      72,
      2484,
      84,
      33018,
      14,
      3855,
      8205,
      35,
      506,
      57,
      1516,
      41,
      666,
      1
    ],
    "start_token": 31,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 8,
    "text": "    data_schema = HolderTrading",
    "annotation": "\u2705 Best Practice: Method name should reflect its purpose and be descriptive",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      24210,
      2898,
      4980
    ],
    "start_token": 67,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      815,
      4079,
      663,
      4007,
      290,
      307,
      35644
    ],
    "label": "best_practice",
    "reason": "Method name should reflect its purpose and be descriptive"
  },
  {
    "line": 10,
    "text": "    url = \"https://emh5.eastmoney.com/api/JiaoYiShuJu/GetGuDongZengJian\"",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded return values can indicate fixed configurations or constants",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      41,
      13481,
      56,
      72,
      2484,
      84,
      33018,
      14,
      3855,
      8205,
      35,
      506,
      57,
      1516,
      41,
      666,
      1
    ],
    "start_token": 78,
    "end_token": 114,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      1441,
      3815,
      460,
      7603,
      5969,
      25412,
      393,
      38491
    ],
    "label": "ml_signal",
    "reason": "Hardcoded return values can indicate fixed configurations or constants"
  },
  {
    "line": 10,
    "text": "    url = \"https://emh5.eastmoney.com/api/JiaoYiShuJu/GetGuDongZengJian\"",
    "annotation": "\u2705 Best Practice: Use of a dictionary to map keys to tuples for structured data representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      41,
      13481,
      56,
      72,
      2484,
      84,
      33018,
      14,
      3855,
      8205,
      35,
      506,
      57,
      1516,
      41,
      666,
      1
    ],
    "start_token": 114,
    "end_token": 150,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      8251,
      284,
      12777,
      2374,
      329,
      20793,
      1366,
      10552
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to map keys to tuples for structured data representation"
  },
  {
    "line": 11,
    "text": "    path_fields = [\"GuDongZengJianList\"]",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of human-readable keys to internal data representation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3108,
      62,
      25747,
      796,
      14631,
      8205,
      35,
      506,
      57,
      1516,
      41,
      666,
      8053,
      8973
    ],
    "start_token": 150,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      1692,
      12,
      46155,
      8251,
      284,
      5387,
      1366,
      10552
    ],
    "label": "ml_signal",
    "reason": "Mapping of human-readable keys to internal data representation"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom function 'to_float' for data conversion",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 167,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      2163,
      705,
      1462,
      62,
      22468,
      6,
      329,
      1366,
      11315
    ],
    "label": "ml_signal",
    "reason": "Use of a custom function 'to_float' for data conversion"
  },
  {
    "line": 17,
    "text": "        return {",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom function 'to_float' for data conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1391
    ],
    "start_token": 167,
    "end_token": 176,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      2163,
      705,
      1462,
      62,
      22468,
      6,
      329,
      1366,
      11315
    ],
    "label": "ml_signal",
    "reason": "Use of a custom function 'to_float' for data conversion"
  },
  {
    "line": 19,
    "text": "            \"volume\": (\"BianDongShuLiang\", to_float),",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom function 'to_float' for data conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      29048,
      1298,
      5855,
      33,
      666,
      35,
      506,
      2484,
      84,
      43,
      15483,
      1600,
      284,
      62,
      22468,
      828
    ],
    "start_token": 176,
    "end_token": 204,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      2163,
      705,
      1462,
      62,
      22468,
      6,
      329,
      1366,
      11315
    ],
    "label": "ml_signal",
    "reason": "Use of a custom function 'to_float' for data conversion"
  },
  {
    "line": 18,
    "text": "            \"holder_name\": (\"GuDongMingCheng\", str),",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13829,
      62,
      3672,
      1298,
      5855,
      8205,
      35,
      506,
      44,
      278,
      7376,
      782,
      1600,
      965,
      828
    ],
    "start_token": 204,
    "end_token": 231,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 20,
    "text": "            \"change_pct\": (\"BianDongBiLi\", to_float),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary values using the get method, which is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3803,
      62,
      79,
      310,
      1298,
      5855,
      33,
      666,
      35,
      506,
      23286,
      32304,
      1600,
      284,
      62,
      22468,
      828
    ],
    "start_token": 231,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      3815,
      1262,
      262,
      651,
      2446,
      11,
      543,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary values using the get method, which is a common pattern."
  },
  {
    "line": 22,
    "text": "        }",
    "annotation": "\ud83e\udde0 ML Signal: String formatting using format method, a common pattern in Python.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 260,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      1262,
      5794,
      2446,
      11,
      257,
      2219,
      3912,
      287,
      11361,
      13
    ],
    "label": "ml_signal",
    "reason": "String formatting using format method, a common pattern in Python."
  },
  {
    "line": 25,
    "text": "        the_name = original_data.get(\"GuDongMingCheng\")",
    "annotation": "\ud83e\udde0 ML Signal: Common pattern for checking if the script is run as the main program.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      8205,
      35,
      506,
      44,
      278,
      7376,
      782,
      4943
    ],
    "start_token": 268,
    "end_token": 293,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8070,
      3912,
      329,
      10627,
      611,
      262,
      4226,
      318,
      1057,
      355,
      262,
      1388,
      1430,
      13
    ],
    "label": "ml_signal",
    "reason": "Common pattern for checking if the script is run as the main program."
  },
  {
    "line": 25,
    "text": "        the_name = original_data.get(\"GuDongMingCheng\")",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      8205,
      35,
      506,
      44,
      278,
      7376,
      782,
      4943
    ],
    "start_token": 293,
    "end_token": 318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters."
  },
  {
    "line": 25,
    "text": "        the_name = original_data.get(\"GuDongMingCheng\")",
    "annotation": "\ud83e\udde0 ML Signal: Invocation of a method on an object.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      8205,
      35,
      506,
      44,
      278,
      7376,
      782,
      4943
    ],
    "start_token": 318,
    "end_token": 343,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10001,
      5040,
      286,
      257,
      2446,
      319,
      281,
      2134,
      13
    ],
    "label": "ml_signal",
    "reason": "Invocation of a method on an object."
  },
  {
    "line": 25,
    "text": "        the_name = original_data.get(\"GuDongMingCheng\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to define public symbols of a module.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      8205,
      35,
      506,
      44,
      278,
      7376,
      782,
      4943
    ],
    "start_token": 343,
    "end_token": 368,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      14354,
      286,
      257,
      8265,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to define public symbols of a module."
  }
]
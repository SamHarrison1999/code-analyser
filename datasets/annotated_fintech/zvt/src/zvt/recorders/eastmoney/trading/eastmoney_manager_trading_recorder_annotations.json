[
  {
    "line": 4,
    "text": "from zvt.utils.utils import to_float",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions or classes indicates usage patterns and dependencies",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      284,
      62,
      22468
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions or classes indicates usage patterns and dependencies"
  },
  {
    "line": 4,
    "text": "from zvt.utils.utils import to_float",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a specific base class indicates a pattern of extending functionality",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      284,
      62,
      22468
    ],
    "start_token": 11,
    "end_token": 22,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2176,
      2779,
      1398,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a specific base class indicates a pattern of extending functionality"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute assignment indicates a pattern of setting schema for data handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 22,
    "end_token": 22,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      16237,
      9217,
      257,
      3912,
      286,
      4634,
      32815,
      329,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Class attribute assignment indicates a pattern of setting schema for data handling"
  },
  {
    "line": 8,
    "text": "    data_schema = ManagerTrading",
    "annotation": "\ud83e\udde0 ML Signal: URL assignment indicates a pattern of accessing external resources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      9142,
      2898,
      4980
    ],
    "start_token": 22,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      16237,
      9217,
      257,
      3912,
      286,
      22534,
      7097,
      4133
    ],
    "label": "ml_signal",
    "reason": "URL assignment indicates a pattern of accessing external resources"
  },
  {
    "line": 10,
    "text": "    url = \"https://emh5.eastmoney.com/api/JiaoYiShuJu/GetGaoGuanZengJian\"",
    "annotation": "\ud83e\udde0 ML Signal: Path fields assignment indicates a pattern of specifying data extraction paths",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      41,
      13481,
      56,
      72,
      2484,
      84,
      33018,
      14,
      3855,
      38,
      5488,
      38,
      7258,
      57,
      1516,
      41,
      666,
      1
    ],
    "start_token": 33,
    "end_token": 70,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10644,
      7032,
      16237,
      9217,
      257,
      3912,
      286,
      31577,
      1366,
      22236,
      13532
    ],
    "label": "ml_signal",
    "reason": "Path fields assignment indicates a pattern of specifying data extraction paths"
  },
  {
    "line": 8,
    "text": "    data_schema = ManagerTrading",
    "annotation": "\u2705 Best Practice: Method name should be descriptive of its functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      9142,
      2898,
      4980
    ],
    "start_token": 70,
    "end_token": 81,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      815,
      307,
      35644,
      286,
      663,
      11244
    ],
    "label": "best_practice",
    "reason": "Method name should be descriptive of its functionality"
  },
  {
    "line": 10,
    "text": "    url = \"https://emh5.eastmoney.com/api/JiaoYiShuJu/GetGaoGuanZengJian\"",
    "annotation": "\ud83e\udde0 ML Signal: Returns a hardcoded string, indicating a potential constant or configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      41,
      13481,
      56,
      72,
      2484,
      84,
      33018,
      14,
      3855,
      38,
      5488,
      38,
      7258,
      57,
      1516,
      41,
      666,
      1
    ],
    "start_token": 81,
    "end_token": 118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      1327,
      40976,
      4731,
      11,
      12739,
      257,
      2785,
      6937,
      393,
      8398
    ],
    "label": "ml_signal",
    "reason": "Returns a hardcoded string, indicating a potential constant or configuration"
  },
  {
    "line": 10,
    "text": "    url = \"https://emh5.eastmoney.com/api/JiaoYiShuJu/GetGaoGuanZengJian\"",
    "annotation": "\u2705 Best Practice: Use of a dictionary to map keys to tuples for structured data representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      41,
      13481,
      56,
      72,
      2484,
      84,
      33018,
      14,
      3855,
      38,
      5488,
      38,
      7258,
      57,
      1516,
      41,
      666,
      1
    ],
    "start_token": 118,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      8251,
      284,
      12777,
      2374,
      329,
      20793,
      1366,
      10552
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to map keys to tuples for structured data representation"
  },
  {
    "line": 11,
    "text": "    path_fields = [\"GaoGuanZengJianList\"]",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of keys to data types and conversion functions indicates data processing patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3108,
      62,
      25747,
      796,
      14631,
      38,
      5488,
      38,
      7258,
      57,
      1516,
      41,
      666,
      8053,
      8973
    ],
    "start_token": 155,
    "end_token": 173,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      8251,
      284,
      1366,
      3858,
      290,
      11315,
      5499,
      9217,
      1366,
      7587,
      7572
    ],
    "label": "ml_signal",
    "reason": "Mapping of keys to data types and conversion functions indicates data processing patterns"
  },
  {
    "line": 11,
    "text": "    path_fields = [\"GaoGuanZengJianList\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of string keys and conversion functions suggests a pattern for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3108,
      62,
      25747,
      796,
      14631,
      38,
      5488,
      38,
      7258,
      57,
      1516,
      41,
      666,
      8053,
      8973
    ],
    "start_token": 173,
    "end_token": 191,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      8251,
      290,
      11315,
      5499,
      5644,
      257,
      3912,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of string keys and conversion functions suggests a pattern for data transformation"
  },
  {
    "line": 11,
    "text": "    path_fields = [\"GaoGuanZengJianList\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom function 'to_float' for data conversion indicates a specific data handling pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3108,
      62,
      25747,
      796,
      14631,
      38,
      5488,
      38,
      7258,
      57,
      1516,
      41,
      666,
      8053,
      8973
    ],
    "start_token": 191,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      2163,
      705,
      1462,
      62,
      22468,
      6,
      329,
      1366,
      11315,
      9217,
      257,
      2176,
      1366,
      9041,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of a custom function 'to_float' for data conversion indicates a specific data handling pattern"
  },
  {
    "line": 18,
    "text": "            \"trading_person\": (\"BianDongRen\", str),",
    "annotation": "\ud83e\udde0 ML Signal: Consistent use of 'to_float' for numerical data conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2213,
      4980,
      62,
      6259,
      1298,
      5855,
      33,
      666,
      35,
      506,
      26764,
      1600,
      965,
      828
    ],
    "start_token": 209,
    "end_token": 235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      779,
      286,
      705,
      1462,
      62,
      22468,
      6,
      329,
      29052,
      1366,
      11315
    ],
    "label": "ml_signal",
    "reason": "Consistent use of 'to_float' for numerical data conversion"
  },
  {
    "line": 20,
    "text": "            \"price\": (\"JiaoYiJunJia\", to_float),",
    "annotation": "\ud83e\udde0 ML Signal: Consistent use of 'to_float' for numerical data conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      20888,
      1298,
      5855,
      41,
      13481,
      56,
      72,
      22396,
      41,
      544,
      1600,
      284,
      62,
      22468,
      828
    ],
    "start_token": 235,
    "end_token": 262,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      779,
      286,
      705,
      1462,
      62,
      22468,
      6,
      329,
      29052,
      1366,
      11315
    ],
    "label": "ml_signal",
    "reason": "Consistent use of 'to_float' for numerical data conversion"
  },
  {
    "line": 22,
    "text": "            \"trading_way\": (\"JiaoYiTuJing\", str),",
    "annotation": "\ud83e\udde0 ML Signal: Use of string keys and conversion functions suggests a pattern for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2213,
      4980,
      62,
      1014,
      1298,
      5855,
      41,
      13481,
      56,
      72,
      47247,
      41,
      278,
      1600,
      965,
      828
    ],
    "start_token": 262,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      8251,
      290,
      11315,
      5499,
      5644,
      257,
      3912,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of string keys and conversion functions suggests a pattern for data transformation"
  },
  {
    "line": 24,
    "text": "            \"manager_position\": (\"GaoGuanZhiWei\", str),",
    "annotation": "\ud83e\udde0 ML Signal: Use of string keys and conversion functions suggests a pattern for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      37153,
      62,
      9150,
      1298,
      5855,
      38,
      5488,
      38,
      7258,
      57,
      5303,
      1135,
      72,
      1600,
      965,
      828
    ],
    "start_token": 290,
    "end_token": 318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      8251,
      290,
      11315,
      5499,
      5644,
      257,
      3912,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of string keys and conversion functions suggests a pattern for data transformation"
  },
  {
    "line": 26,
    "text": "        }",
    "annotation": "\ud83e\udde0 ML Signal: Use of string keys and conversion functions suggests a pattern for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 318,
    "end_token": 326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      8251,
      290,
      11315,
      5499,
      5644,
      257,
      3912,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of string keys and conversion functions suggests a pattern for data transformation"
  },
  {
    "line": 28,
    "text": "    def generate_domain_id(self, entity, original_data):",
    "annotation": "\ud83e\udde0 ML Signal: Use of string keys and conversion functions suggests a pattern for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7716,
      62,
      27830,
      62,
      312,
      7,
      944,
      11,
      9312,
      11,
      2656,
      62,
      7890,
      2599
    ],
    "start_token": 326,
    "end_token": 344,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      8251,
      290,
      11315,
      5499,
      5644,
      257,
      3912,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of string keys and conversion functions suggests a pattern for data transformation"
  },
  {
    "line": 22,
    "text": "            \"trading_way\": (\"JiaoYiTuJing\", str),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method to access data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2213,
      4980,
      62,
      1014,
      1298,
      5855,
      41,
      13481,
      56,
      72,
      47247,
      41,
      278,
      1600,
      965,
      828
    ],
    "start_token": 344,
    "end_token": 372,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      284,
      1895,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method to access data"
  },
  {
    "line": 24,
    "text": "            \"manager_position\": (\"GaoGuanZhiWei\", str),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a method to retrieve a specific field name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      37153,
      62,
      9150,
      1298,
      5855,
      38,
      5488,
      38,
      7258,
      57,
      5303,
      1135,
      72,
      1600,
      965,
      828
    ],
    "start_token": 372,
    "end_token": 400,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2446,
      284,
      19818,
      257,
      2176,
      2214,
      1438
    ],
    "label": "ml_signal",
    "reason": "Accessing a method to retrieve a specific field name"
  },
  {
    "line": 26,
    "text": "        }",
    "annotation": "\ud83e\udde0 ML Signal: String formatting pattern for ID generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 400,
    "end_token": 408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      3912,
      329,
      4522,
      5270
    ],
    "label": "ml_signal",
    "reason": "String formatting pattern for ID generation"
  },
  {
    "line": 29,
    "text": "        the_name = original_data.get(\"BianDongRen\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct execution of code in the main block without input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      33,
      666,
      35,
      506,
      26764,
      4943
    ],
    "start_token": 408,
    "end_token": 431,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      9706,
      286,
      2438,
      287,
      262,
      1388,
      2512,
      1231,
      5128,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct execution of code in the main block without input validation"
  },
  {
    "line": 29,
    "text": "        the_name = original_data.get(\"BianDongRen\")",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      33,
      666,
      35,
      506,
      26764,
      4943
    ],
    "start_token": 431,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters"
  },
  {
    "line": 29,
    "text": "        the_name = original_data.get(\"BianDongRen\")",
    "annotation": "\ud83e\udde0 ML Signal: Invocation of a run method on an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      33,
      666,
      35,
      506,
      26764,
      4943
    ],
    "start_token": 454,
    "end_token": 477,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10001,
      5040,
      286,
      257,
      1057,
      2446,
      319,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Invocation of a run method on an object"
  },
  {
    "line": 29,
    "text": "        the_name = original_data.get(\"BianDongRen\")",
    "annotation": "\u2705 Best Practice: Explicitly defining __all__ for module exports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      3672,
      796,
      2656,
      62,
      7890,
      13,
      1136,
      7203,
      33,
      666,
      35,
      506,
      26764,
      4943
    ],
    "start_token": 477,
    "end_token": 500,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      11593,
      439,
      834,
      329,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining __all__ for module exports"
  }
]
[
  {
    "line": 3,
    "text": "import requests",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      7007
    ],
    "start_token": 0,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to map categories to URLs, indicating a pattern of categorization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2,
    "end_token": 2,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      9376,
      284,
      32336,
      11,
      12739,
      257,
      3912,
      286,
      17851,
      1634
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to map categories to URLs, indicating a pattern of categorization"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded URLs can lead to maintenance issues if the URLs change",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2,
    "end_token": 2,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      32336,
      460,
      1085,
      284,
      9262,
      2428,
      611,
      262,
      32336,
      1487
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded URLs can lead to maintenance issues if the URLs change"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded URLs can lead to maintenance issues if the URLs change",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2,
    "end_token": 2,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      32336,
      460,
      1085,
      284,
      9262,
      2428,
      611,
      262,
      32336,
      1487
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded URLs can lead to maintenance issues if the URLs change"
  },
  {
    "line": 19,
    "text": "    category_map_url = {",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network request",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6536,
      62,
      8899,
      62,
      6371,
      796,
      1391
    ],
    "start_token": 2,
    "end_token": 12,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network request"
  },
  {
    "line": 21,
    "text": "        BlockCategory.concept: \"https://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx?type=CT&cmd=C._BKGN&sty=DCRRBKCPAL&st=(ChangePercent)&sr=-1&p=1&ps=300&lvl=&cb=jsonp_3071689CC1E6486A80027D69E8B33F26&token=4f1862fc3b5e77c150a2b985b12db0fd&_=08251\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk if json_callback_param is not properly validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9726,
      27313,
      13,
      43169,
      25,
      366,
      5450,
      1378,
      77,
      3046,
      76,
      13,
      7568,
      12993,
      86,
      13,
      785,
      14,
      3620,
      62,
      37,
      14149,
      4967,
      45,
      39223,
      23416,
      14,
      20120,
      13,
      31740,
      30,
      4906,
      28,
      4177,
      5,
      28758,
      28,
      34,
      13557,
      33,
      42,
      16630,
      5,
      34365,
      28,
      35,
      9419,
      27912,
      42,
      8697,
      1847,
      5,
      301,
      16193,
      19400,
      31905,
      8,
      5,
      27891,
      10779,
      16,
      5,
      79,
      28,
      16,
      5,
      862,
      28,
      6200,
      5,
      47147,
      28,
      5,
      21101,
      28,
      17752,
      79,
      62,
      22996,
      1433,
      4531,
      4093,
      16,
      36,
      2414,
      4521,
      32,
      7410,
      1983,
      35,
      3388,
      36,
      23,
      33,
      2091,
      37,
      2075,
      5,
      30001,
      28,
      19,
      69,
      1507,
      5237,
      16072,
      18,
      65,
      20,
      68,
      3324,
      66,
      8628,
      64,
      17,
      65,
      42250,
      65,
      1065,
      9945,
      15,
      16344,
      5,
      62,
      28,
      2919,
      28072,
      1600
    ],
    "start_token": 12,
    "end_token": 146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      611,
      33918,
      62,
      47423,
      62,
      17143,
      318,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk if json_callback_param is not properly validated"
  },
  {
    "line": 25,
    "text": "    def run(self):",
    "annotation": "\ud83e\udde0 ML Signal: Splitting strings by a delimiter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 146,
    "end_token": 154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      13042,
      416,
      257,
      46728,
      2676
    ],
    "label": "ml_signal",
    "reason": "Splitting strings by a delimiter"
  },
  {
    "line": 27,
    "text": "            resp = requests.get(url, headers=DEFAULT_HEADER)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing list elements by index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      24697,
      28,
      7206,
      38865,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 154,
    "end_token": 181,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1351,
      4847,
      416,
      6376
    ],
    "label": "ml_signal",
    "reason": "Accessing list elements by index"
  },
  {
    "line": 27,
    "text": "            resp = requests.get(url, headers=DEFAULT_HEADER)",
    "annotation": "\ud83e\udde0 ML Signal: String formatting for ID creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      24697,
      28,
      7206,
      38865,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 181,
    "end_token": 208,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      329,
      4522,
      6282
    ],
    "label": "ml_signal",
    "reason": "String formatting for ID creation"
  },
  {
    "line": 40,
    "text": "                        \"exchange\": \"cn\",",
    "annotation": "\ud83e\udde0 ML Signal: Accessing object properties",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      366,
      31522,
      1600
    ],
    "start_token": 208,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2134,
      6608
    ],
    "label": "ml_signal",
    "reason": "Accessing object properties"
  },
  {
    "line": 45,
    "text": "                )",
    "annotation": "\u2705 Best Practice: Check if list is not empty before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 238,
    "end_token": 254,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1351,
      318,
      407,
      6565,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check if list is not empty before processing"
  },
  {
    "line": 46,
    "text": "            if the_list:",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame from a list of dictionaries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      262,
      62,
      4868,
      25
    ],
    "start_token": 254,
    "end_token": 270,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      422,
      257,
      1351,
      286,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame from a list of dictionaries"
  },
  {
    "line": 48,
    "text": "                df_to_db(data_schema=self.data_schema, df=df, provider=self.provider, force_update=self.force_update)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation or sanitization before database insertion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7,
      7890,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11,
      47764,
      28,
      7568,
      11,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11,
      2700,
      62,
      19119,
      28,
      944,
      13,
      3174,
      62,
      19119,
      8
    ],
    "start_token": 270,
    "end_token": 324,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      393,
      5336,
      270,
      1634,
      878,
      6831,
      36075
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation or sanitization before database insertion"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging information",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 324,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321
    ],
    "label": "ml_signal",
    "reason": "Logging information"
  },
  {
    "line": 43,
    "text": "                        \"category\": category.value,",
    "annotation": "\ud83e\udde0 ML Signal: Custom class definition indicating a specific data recording pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      22872,
      1298,
      6536,
      13,
      8367,
      11
    ],
    "start_token": 324,
    "end_token": 354,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      1398,
      6770,
      12739,
      257,
      2176,
      1366,
      8296,
      3912
    ],
    "label": "ml_signal",
    "reason": "Custom class definition indicating a specific data recording pattern"
  },
  {
    "line": 45,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Static string assignment indicating a specific data source",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 354,
    "end_token": 370,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      4731,
      16237,
      12739,
      257,
      2176,
      1366,
      2723
    ],
    "label": "ml_signal",
    "reason": "Static string assignment indicating a specific data source"
  },
  {
    "line": 47,
    "text": "                df = pd.DataFrame.from_records(the_list)",
    "annotation": "\ud83e\udde0 ML Signal: Static assignment of schema indicating data structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      1169,
      62,
      4868,
      8
    ],
    "start_token": 370,
    "end_token": 402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      16237,
      286,
      32815,
      12739,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Static assignment of schema indicating data structure"
  },
  {
    "line": 49,
    "text": "            self.logger.info(f\"finish record eastmoney blocks:{category.value}\")",
    "annotation": "\ud83e\udde0 ML Signal: Static string assignment indicating a specific data source",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      15643,
      680,
      1700,
      7627,
      26316,
      7021,
      29164,
      22872,
      13,
      8367,
      92,
      4943
    ],
    "start_token": 402,
    "end_token": 434,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      4731,
      16237,
      12739,
      257,
      2176,
      1366,
      2723
    ],
    "label": "ml_signal",
    "reason": "Static string assignment indicating a specific data source"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Static assignment of schema indicating data structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 434,
    "end_token": 434,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36125,
      16237,
      286,
      32815,
      12739,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Static assignment of schema indicating data structure"
  },
  {
    "line": 53,
    "text": "    entity_provider = \"eastmoney\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded URL and token, which could lead to security issues if sensitive",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      23316,
      26316,
      1
    ],
    "start_token": 434,
    "end_token": 446,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      10289,
      290,
      11241,
      11,
      543,
      714,
      1085,
      284,
      2324,
      2428,
      611,
      8564
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded URL and token, which could lead to security issues if sensitive"
  },
  {
    "line": 54,
    "text": "    entity_schema = Block",
    "annotation": "\u2705 Best Practice: Consider externalizing URLs and tokens to configuration files",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      9726
    ],
    "start_token": 446,
    "end_token": 455,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      7097,
      2890,
      32336,
      290,
      16326,
      284,
      8398,
      3696
    ],
    "label": "best_practice",
    "reason": "Consider externalizing URLs and tokens to configuration files"
  },
  {
    "line": 49,
    "text": "            self.logger.info(f\"finish record eastmoney blocks:{category.value}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network issues or invalid responses",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      15643,
      680,
      1700,
      7627,
      26316,
      7021,
      29164,
      22872,
      13,
      8367,
      92,
      4943
    ],
    "start_token": 455,
    "end_token": 487,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2428,
      393,
      12515,
      9109
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network issues or invalid responses"
  },
  {
    "line": 52,
    "text": "class EastmoneyBlockStockRecorder(TimeSeriesDataRecorder):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): json_callback_param may execute arbitrary code if not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      4871,
      3687,
      26316,
      12235,
      26207,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 487,
    "end_token": 501,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      33918,
      62,
      47423,
      62,
      17143,
      743,
      12260,
      14977,
      2438,
      611,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "json_callback_param may execute arbitrary code if not properly sanitized"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to stock ID",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 501,
    "end_token": 501,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      4283,
      4522
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to stock ID"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Unique ID generation pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 501,
    "end_token": 501,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30015,
      4522,
      5270,
      3912
    ],
    "label": "ml_signal",
    "reason": "Unique ID generation pattern"
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Timestamp generation for records",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 501,
    "end_token": 501,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5045,
      27823,
      5270,
      329,
      4406
    ],
    "label": "ml_signal",
    "reason": "Timestamp generation for records"
  },
  {
    "line": 78,
    "text": "                        \"exchange\": entity.exchange,",
    "annotation": "\u2705 Best Practice: Use of pandas for data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      9312,
      13,
      1069,
      3803,
      11
    ],
    "start_token": 501,
    "end_token": 533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      329,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of pandas for data manipulation"
  },
  {
    "line": 80,
    "text": "                        \"name\": entity.name,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if df_to_db does not sanitize inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      9312,
      13,
      3672,
      11
    ],
    "start_token": 533,
    "end_token": 563,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5336,
      270,
      1096,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if df_to_db does not sanitize inputs"
  },
  {
    "line": 82,
    "text": "                        \"stock_id\": stock_id,",
    "annotation": "\u2705 Best Practice: Informative logging for process completion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      312,
      1298,
      4283,
      62,
      312,
      11
    ],
    "start_token": 563,
    "end_token": 595,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      1429,
      11939
    ],
    "label": "best_practice",
    "reason": "Informative logging for process completion"
  },
  {
    "line": 83,
    "text": "                        \"stock_code\": stock_code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception handling; may hide specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      8189,
      1298,
      4283,
      62,
      8189,
      11
    ],
    "start_token": 595,
    "end_token": 627,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      9041,
      26,
      743,
      7808,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception handling; may hide specific errors"
  },
  {
    "line": 83,
    "text": "                        \"stock_code\": stock_code,",
    "annotation": "\u2705 Best Practice: Use of sleep to manage request rate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      8189,
      1298,
      4283,
      62,
      8189,
      11
    ],
    "start_token": 627,
    "end_token": 659,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3993,
      284,
      6687,
      2581,
      2494
    ],
    "label": "best_practice",
    "reason": "Use of sleep to manage request rate"
  },
  {
    "line": 83,
    "text": "                        \"stock_code\": stock_code,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of running main functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      8189,
      1298,
      4283,
      62,
      8189,
      11
    ],
    "start_token": 659,
    "end_token": 691,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      2491,
      1388,
      5499
    ],
    "label": "ml_signal",
    "reason": "Pattern of running main functions"
  },
  {
    "line": 83,
    "text": "                        \"stock_code\": stock_code,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation and execution of recorder with specific code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      8189,
      1298,
      4283,
      62,
      8189,
      11
    ],
    "start_token": 691,
    "end_token": 723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      290,
      9706,
      286,
      38156,
      351,
      2176,
      2438
    ],
    "label": "ml_signal",
    "reason": "Instantiation and execution of recorder with specific code"
  },
  {
    "line": 83,
    "text": "                        \"stock_code\": stock_code,",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      13578,
      62,
      8189,
      1298,
      4283,
      62,
      8189,
      11
    ],
    "start_token": 723,
    "end_token": 755,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
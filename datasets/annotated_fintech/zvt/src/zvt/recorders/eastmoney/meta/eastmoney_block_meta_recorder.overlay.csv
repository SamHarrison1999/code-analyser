annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",1.0,2,best_practice,3,Grouping imports from the same package together improves readability.,,0,import requests,"[11748, 7007]"
"üß† ML Signal: Use of a dictionary to map categories to URLs, indicating a pattern of categorization","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 284, 3975, 9376, 284, 32336, 11, 12739, 257, 3912, 286, 17851, 1634]",1.0,2,ml_signal,13,"Use of a dictionary to map categories to URLs, indicating a pattern of categorization",,2,,[]
‚ö†Ô∏è SAST Risk (Low): Hardcoded URLs can lead to maintenance issues if the URLs change,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 32336, 460, 1085, 284, 9262, 2428, 611, 262, 32336, 1487]",1.0,2,sast_risk,13,Hardcoded URLs can lead to maintenance issues if the URLs change,Low,2,,[]
‚ö†Ô∏è SAST Risk (Low): Hardcoded URLs can lead to maintenance issues if the URLs change,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 32336, 460, 1085, 284, 9262, 2428, 611, 262, 32336, 1487]",1.0,2,sast_risk,17,Hardcoded URLs can lead to maintenance issues if the URLs change,Low,2,,[]
‚ö†Ô∏è SAST Risk (Medium): No error handling for network request,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2581]",1.0,12,sast_risk,19,No error handling for network request,Medium,2,    category_map_url = {,"[220, 220, 220, 6536, 62, 8899, 62, 6371, 796, 1391]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk if json_callback_param is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 33918, 62, 47423, 62, 17143, 318, 407, 6105, 31031]",0.5,146,sast_risk,21,Potential risk if json_callback_param is not properly validated,Medium,12,"        BlockCategory.concept: ""https://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx?type=CT&cmd=C._BKGN&sty=DCRRBKCPAL&st=(ChangePercent)&sr=-1&p=1&ps=300&lvl=&cb=jsonp_3071689CC1E6486A80027D69E8B33F26&token=4f1862fc3b5e77c150a2b985b12db0fd&_=08251"",","[220, 220, 220, 220, 220, 220, 220, 9726, 27313, 13, 43169, 25, 366, 5450, 1378, 77, 3046, 76, 13, 7568, 12993, 86, 13, 785, 14, 3620, 62, 37, 14149, 4967, 45, 39223, 23416, 14, 20120, 13, 31740, 30, 4906, 28, 4177, 5, 28758, 28, 34, 13557, 33, 42, 16630, 5, 34365, 28, 35, 9419, 27912, 42, 8697, 1847, 5, 301, 16193, 19400, 31905, 8, 5, 27891, 10779, 16, 5, 79, 28, 16, 5, 862, 28, 6200, 5, 47147, 28, 5, 21101, 28, 17752, 79, 62, 22996, 1433, 4531, 4093, 16, 36, 2414, 4521, 32, 7410, 1983, 35, 3388, 36, 23, 33, 2091, 37, 2075, 5, 30001, 28, 19, 69, 1507, 5237, 16072, 18, 65, 20, 68, 3324, 66, 8628, 64, 17, 65, 42250, 65, 1065, 9945, 15, 16344, 5, 62, 28, 2919, 28072, 1600]"
üß† ML Signal: Splitting strings by a delimiter,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 13042, 416, 257, 46728, 2676]",0.5,154,ml_signal,25,Splitting strings by a delimiter,,146,    def run(self):,"[220, 220, 220, 825, 1057, 7, 944, 2599]"
üß† ML Signal: Accessing list elements by index,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1351, 4847, 416, 6376]",0.5,181,ml_signal,27,Accessing list elements by index,,154,"            resp = requests.get(url, headers=DEFAULT_HEADER)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1217, 796, 7007, 13, 1136, 7, 6371, 11, 24697, 28, 7206, 38865, 62, 37682, 1137, 8]"
üß† ML Signal: String formatting for ID creation,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 329, 4522, 6282]",0.5,208,ml_signal,27,String formatting for ID creation,,181,"            resp = requests.get(url, headers=DEFAULT_HEADER)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1217, 796, 7007, 13, 1136, 7, 6371, 11, 24697, 28, 7206, 38865, 62, 37682, 1137, 8]"
üß† ML Signal: Accessing object properties,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2134, 6608]",0.5,238,ml_signal,40,Accessing object properties,,208,"                        ""exchange"": ""cn"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 366, 31522, 1600]"
‚úÖ Best Practice: Check if list is not empty before processing,"[26486, 227, 6705, 19939, 25, 6822, 611, 1351, 318, 407, 6565, 878, 7587]",0.5,254,best_practice,45,Check if list is not empty before processing,,238,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Creating a DataFrame from a list of dictionaries,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 422, 257, 1351, 286, 48589, 3166]",0.5,270,ml_signal,46,Creating a DataFrame from a list of dictionaries,,254,            if the_list:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 262, 62, 4868, 25]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization before database insertion,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 878, 6831, 36075]",0.5,324,sast_risk,48,No validation or sanitization before database insertion,Medium,270,"                df_to_db(data_schema=self.data_schema, df=df, provider=self.provider, force_update=self.force_update)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 1462, 62, 9945, 7, 7890, 62, 15952, 2611, 28, 944, 13, 7890, 62, 15952, 2611, 11, 47764, 28, 7568, 11, 10131, 28, 944, 13, 15234, 1304, 11, 2700, 62, 19119, 28, 944, 13, 3174, 62, 19119, 8]"
üß† ML Signal: Logging information,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321]",0.5,324,ml_signal,50,Logging information,,324,,[]
üß† ML Signal: Custom class definition indicating a specific data recording pattern,"[8582, 100, 254, 10373, 26484, 25, 8562, 1398, 6770, 12739, 257, 2176, 1366, 8296, 3912]",0.5,354,ml_signal,43,Custom class definition indicating a specific data recording pattern,,324,"                        ""category"": category.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 22872, 1298, 6536, 13, 8367, 11]"
üß† ML Signal: Static string assignment indicating a specific data source,"[8582, 100, 254, 10373, 26484, 25, 36125, 4731, 16237, 12739, 257, 2176, 1366, 2723]",0.5,370,ml_signal,45,Static string assignment indicating a specific data source,,354,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Static assignment of schema indicating data structure,"[8582, 100, 254, 10373, 26484, 25, 36125, 16237, 286, 32815, 12739, 1366, 4645]",0.5,402,ml_signal,47,Static assignment of schema indicating data structure,,370,                df = pd.DataFrame.from_records(the_list),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 1169, 62, 4868, 8]"
üß† ML Signal: Static string assignment indicating a specific data source,"[8582, 100, 254, 10373, 26484, 25, 36125, 4731, 16237, 12739, 257, 2176, 1366, 2723]",0.5,434,ml_signal,49,Static string assignment indicating a specific data source,,402,"            self.logger.info(f""finish record eastmoney blocks:{category.value}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 15643, 680, 1700, 7627, 26316, 7021, 29164, 22872, 13, 8367, 92, 4943]"
üß† ML Signal: Static assignment of schema indicating data structure,"[8582, 100, 254, 10373, 26484, 25, 36125, 16237, 286, 32815, 12739, 1366, 4645]",0.5,434,ml_signal,51,Static assignment of schema indicating data structure,,434,,[]
"‚ö†Ô∏è SAST Risk (Low): Hardcoded URL and token, which could lead to security issues if sensitive","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 290, 11241, 11, 543, 714, 1085, 284, 2324, 2428, 611, 8564]",1.0,446,sast_risk,53,"Hardcoded URL and token, which could lead to security issues if sensitive",Low,434,"    entity_provider = ""eastmoney""","[220, 220, 220, 9312, 62, 15234, 1304, 796, 366, 23316, 26316, 1]"
‚úÖ Best Practice: Consider externalizing URLs and tokens to configuration files,"[26486, 227, 6705, 19939, 25, 12642, 7097, 2890, 32336, 290, 16326, 284, 8398, 3696]",0.5,455,best_practice,54,Consider externalizing URLs and tokens to configuration files,,446,    entity_schema = Block,"[220, 220, 220, 9312, 62, 15952, 2611, 796, 9726]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for network issues or invalid responses,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2428, 393, 12515, 9109]",1.0,487,sast_risk,49,No error handling for network issues or invalid responses,Medium,455,"            self.logger.info(f""finish record eastmoney blocks:{category.value}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 15643, 680, 1700, 7627, 26316, 7021, 29164, 22872, 13, 8367, 92, 4943]"
‚ö†Ô∏è SAST Risk (Medium): json_callback_param may execute arbitrary code if not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 33918, 62, 47423, 62, 17143, 743, 12260, 14977, 2438, 611, 407, 6105, 5336, 36951]",1.0,501,sast_risk,52,json_callback_param may execute arbitrary code if not properly sanitized,Medium,487,class EastmoneyBlockStockRecorder(TimeSeriesDataRecorder):,"[4871, 3687, 26316, 12235, 26207, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"
üß† ML Signal: Conversion of stock code to stock ID,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 4283, 4522]",1.0,501,ml_signal,58,Conversion of stock code to stock ID,,501,,[]
üß† ML Signal: Unique ID generation pattern,"[8582, 100, 254, 10373, 26484, 25, 30015, 4522, 5270, 3912]",1.0,501,ml_signal,58,Unique ID generation pattern,,501,,[]
üß† ML Signal: Timestamp generation for records,"[8582, 100, 254, 10373, 26484, 25, 5045, 27823, 5270, 329, 4406]",1.0,501,ml_signal,72,Timestamp generation for records,,501,,[]
‚úÖ Best Practice: Use of pandas for data manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",1.0,533,best_practice,78,Use of pandas for data manipulation,,501,"                        ""exchange"": entity.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 9312, 13, 1069, 3803, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if df_to_db does not sanitize inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5336, 270, 1096, 17311]",1.0,563,sast_risk,80,Potential SQL injection if df_to_db does not sanitize inputs,Low,533,"                        ""name"": entity.name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 9312, 13, 3672, 11]"
‚úÖ Best Practice: Informative logging for process completion,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 1429, 11939]",1.0,595,best_practice,82,Informative logging for process completion,,563,"                        ""stock_id"": stock_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 312, 1298, 4283, 62, 312, 11]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling; may hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 26, 743, 7808, 2176, 8563]",1.0,627,sast_risk,83,Generic exception handling; may hide specific errors,Low,595,"                        ""stock_code"": stock_code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 8189, 1298, 4283, 62, 8189, 11]"
‚úÖ Best Practice: Use of sleep to manage request rate,"[26486, 227, 6705, 19939, 25, 5765, 286, 3993, 284, 6687, 2581, 2494]",1.0,659,best_practice,83,Use of sleep to manage request rate,,627,"                        ""stock_code"": stock_code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 8189, 1298, 4283, 62, 8189, 11]"
üß† ML Signal: Pattern of running main functions,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 2491, 1388, 5499]",0.5,691,ml_signal,83,Pattern of running main functions,,659,"                        ""stock_code"": stock_code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 8189, 1298, 4283, 62, 8189, 11]"
üß† ML Signal: Instantiation and execution of recorder with specific code,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 290, 9706, 286, 38156, 351, 2176, 2438]",1.0,723,ml_signal,83,Instantiation and execution of recorder with specific code,,691,"                        ""stock_code"": stock_code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 8189, 1298, 4283, 62, 8189, 11]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,755,best_practice,83,Use of __all__ to define public API of the module,,723,"                        ""stock_code"": stock_code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 13578, 62, 8189, 1298, 4283, 62, 8189, 11]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports by standard library, third-party, and local modules improves readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 416, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 13103, 19575, 1100, 1799, 13]",0.5,4,best_practice,9,"Grouping imports by standard library, third-party, and local modules improves readability.",,0,import sqlalchemy,"[11748, 44161, 282, 26599]"
üß† ML Signal: Use of logging indicates tracking and debugging practices.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 18931, 9217, 9646, 290, 28769, 6593, 13]",1.0,5,ml_signal,32,Use of logging indicates tracking and debugging practices.,,4,),[8]
üß† ML Signal: Function signature and parameters can be used to understand API usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 290, 10007, 460, 307, 973, 284, 1833, 7824, 8748, 7572]",1.0,6,ml_signal,32,Function signature and parameters can be used to understand API usage patterns,,5,),[8]
üß† ML Signal: API call pattern with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 7824, 869, 3912, 351, 2176, 10007]",1.0,23,ml_signal,33,API call pattern with specific parameters,,6,"from zvt.utils.utils import to_float, json_callback_param","[6738, 1976, 36540, 13, 26791, 13, 26791, 1330, 284, 62, 22468, 11, 33918, 62, 47423, 62, 17143]"
‚úÖ Best Practice: Initialize an empty list before appending items,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 1351, 878, 598, 1571, 3709]",1.0,34,best_practice,45,Initialize an empty list before appending items,,23,"        sort=""desc"",","[220, 220, 220, 220, 220, 220, 220, 3297, 2625, 20147, 1600]"
‚úÖ Best Practice: Use descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287]",1.0,46,best_practice,46,Use descriptive variable names for clarity,,34,"        pn=pn,","[220, 220, 220, 220, 220, 220, 220, 279, 77, 28, 21999, 11]"
üß† ML Signal: Pattern of constructing dictionary with specific keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30580, 22155, 351, 2176, 8251]",1.0,58,ml_signal,46,Pattern of constructing dictionary with specific keys,,46,"        pn=pn,","[220, 220, 220, 220, 220, 220, 220, 279, 77, 28, 21999, 11]"
üß† ML Signal: Use of f-string for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 8925, 4731, 33313]",0.5,86,ml_signal,58,Use of f-string for dynamic string formatting,,58,"                ""timestamp"": to_pd_timestamp(date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 284, 62, 30094, 62, 16514, 27823, 7, 4475, 828]"
üß† ML Signal: Conversion of date to timestamp,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3128, 284, 41033]",0.5,114,ml_signal,58,Conversion of date to timestamp,,86,"                ""timestamp"": to_pd_timestamp(date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 284, 62, 30094, 62, 16514, 27823, 7, 4475, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing keys in item dictionary,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 8251, 287, 2378, 22155]",0.5,142,sast_risk,58,Potential for missing keys in item dictionary,Low,114,"                ""timestamp"": to_pd_timestamp(date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 284, 62, 30094, 62, 16514, 27823, 7, 4475, 828]"
üß† ML Signal: Use of f-string for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 8925, 4731, 33313]",0.5,170,ml_signal,70,Use of f-string for dynamic string formatting,,142,"                ""timestamp"": to_pd_timestamp(date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16514, 27823, 1298, 284, 62, 30094, 62, 16514, 27823, 7, 4475, 828]"
üß† ML Signal: Conversion of date to timestamp,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3128, 284, 41033]",0.5,191,ml_signal,71,Conversion of date to timestamp,,170,"                ""code"": ""US"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 366, 2937, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing keys in item dictionary,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 8251, 287, 2378, 22155]",0.5,222,sast_risk,72,Potential for missing keys in item dictionary,Low,191,"                ""yield_2"": item.get(""EMG00001306""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 88, 1164, 62, 17, 1298, 2378, 13, 1136, 7203, 3620, 38, 2388, 12952, 21, 12340]"
‚úÖ Best Practice: Return statement at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 2643, 379, 262, 886, 286, 262, 2163]",1.0,237,best_practice,81,Return statement at the end of the function,,222,# Êú∫ÊûÑÊåÅ‰ªìÊó•Êúü,"[2, 42164, 118, 162, 252, 226, 162, 234, 223, 20015, 241, 33768, 98, 17312, 253]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",0.5,258,ml_signal,71,"Function definition with parameters, useful for learning function usage patterns",,237,"                ""code"": ""US"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 366, 2937, 1600]"
"üß† ML Signal: Function call with keyword arguments, useful for learning API usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 21179, 7159, 11, 4465, 329, 4673, 7824, 8748, 7572]",0.5,289,ml_signal,72,"Function call with keyword arguments, useful for learning API usage patterns",,258,"                ""yield_2"": item.get(""EMG00001306""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 88, 1164, 62, 17, 1298, 2378, 13, 1136, 7203, 3620, 38, 2388, 12952, 21, 12340]"
"üß† ML Signal: Function call with dynamic argument, useful for learning how functions are composed","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8925, 4578, 11, 4465, 329, 4673, 703, 5499, 389, 13160]",0.5,297,ml_signal,77,"Function call with dynamic argument, useful for learning how functions are composed",,289,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Function with date range parameters, common in time-series data processing","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3128, 2837, 10007, 11, 2219, 287, 640, 12, 25076, 1366, 7587]",1.0,297,ml_signal,79,"Function with date range parameters, common in time-series data processing",,297,,[]
‚úÖ Best Practice: Convert date to string format for consistency,"[26486, 227, 6705, 19939, 25, 38240, 3128, 284, 4731, 5794, 329, 15794]",1.0,312,best_practice,81,Convert date to string format for consistency,,297,# Êú∫ÊûÑÊåÅ‰ªìÊó•Êúü,"[2, 42164, 118, 162, 252, 226, 162, 234, 223, 20015, 241, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Default value handling for optional parameters,"[26486, 227, 6705, 19939, 25, 15161, 1988, 9041, 329, 11902, 10007]",0.5,322,best_practice,83,Default value handling for optional parameters,,312,    return get_em_data(,"[220, 220, 220, 1441, 651, 62, 368, 62, 7890, 7]"
üß† ML Signal: Use of current timestamp as a default value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 41033, 355, 257, 4277, 1988]",0.5,346,ml_signal,84,Use of current timestamp as a default value,,322,"        request_type=""RPT_F10_MAIN_ORGHOLD"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 37, 940, 62, 5673, 1268, 62, 1581, 17511, 15173, 1600]"
‚úÖ Best Practice: Convert date to string format for consistency,"[26486, 227, 6705, 19939, 25, 38240, 3128, 284, 4731, 5794, 329, 15794]",1.0,370,best_practice,84,Convert date to string format for consistency,,346,"        request_type=""RPT_F10_MAIN_ORGHOLD"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 37, 940, 62, 5673, 1268, 62, 1581, 17511, 15173, 1600]"
"üß† ML Signal: Function call with multiple parameters, indicating complex data retrieval","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 12739, 3716, 1366, 45069]",1.0,374,ml_signal,89,"Function call with multiple parameters, indicating complex data retrieval",,370,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Use of specific request type for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 2581, 2099, 329, 1366, 45069]",0.5,374,ml_signal,91,Use of specific request type for data retrieval,,374,,[]
"üß† ML Signal: Requesting all fields, indicating comprehensive data usage","[8582, 100, 254, 10373, 26484, 25, 19390, 278, 477, 7032, 11, 12739, 9815, 1366, 8748]",0.5,391,ml_signal,93,"Requesting all fields, indicating comprehensive data usage",,374,    start_date = to_time_str(start_date),"[220, 220, 220, 923, 62, 4475, 796, 284, 62, 2435, 62, 2536, 7, 9688, 62, 4475, 8]"
"üß† ML Signal: Specifying data source, indicating data provenance","[8582, 100, 254, 10373, 26484, 25, 18291, 4035, 1366, 2723, 11, 12739, 1366, 9157, 590]",1.0,408,ml_signal,93,"Specifying data source, indicating data provenance",,391,    start_date = to_time_str(start_date),"[220, 220, 220, 923, 62, 4475, 796, 284, 62, 2435, 62, 2536, 7, 9688, 62, 4475, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,425,sast_risk,93,Potential for SQL injection if filters are not properly sanitized,Low,408,    start_date = to_time_str(start_date),"[220, 220, 220, 923, 62, 4475, 796, 284, 62, 2435, 62, 2536, 7, 9688, 62, 4475, 8]"
"üß† ML Signal: Sorting by multiple fields, indicating data organization preferences","[8582, 100, 254, 10373, 26484, 25, 311, 24707, 416, 3294, 7032, 11, 12739, 1366, 4009, 15387]",0.5,436,ml_signal,99,"Sorting by multiple fields, indicating data organization preferences",,425,"        fields=""ALL"",","[220, 220, 220, 220, 220, 220, 220, 7032, 2625, 7036, 1600]"
"üß† ML Signal: Ascending sort order, indicating preference for chronological data","[8582, 100, 254, 10373, 26484, 25, 29469, 1571, 3297, 1502, 11, 12739, 12741, 329, 45946, 1366]",0.5,475,ml_signal,101,"Ascending sort order, indicating preference for chronological data",,436,"        filters=f""(TRADE_DATE>='{start_date}')(TRADE_DATE<='{end_date}')"",","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 69, 18109, 5446, 19266, 62, 35, 6158, 29, 11639, 90, 9688, 62, 4475, 92, 6, 5769, 5446, 19266, 62, 35, 6158, 27, 11639, 90, 437, 62, 4475, 92, 11537, 1600]"
"üß† ML Signal: Function name suggests a specific domain-related operation, useful for domain-specific model training","[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 5644, 257, 2176, 7386, 12, 5363, 4905, 11, 4465, 329, 7386, 12, 11423, 2746, 3047]",0.5,497,ml_signal,92,"Function name suggests a specific domain-related operation, useful for domain-specific model training",,475,"def get_dragon_and_tiger_list(start_date, end_date=None):","[4299, 651, 62, 14844, 62, 392, 62, 83, 8254, 62, 4868, 7, 9688, 62, 4475, 11, 886, 62, 4475, 28, 14202, 2599]"
‚úÖ Best Practice: Use of descriptive parameter names improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 11507, 3891, 19575, 2438, 1100, 1799]",0.5,514,best_practice,93,Use of descriptive parameter names improves code readability,,497,    start_date = to_time_str(start_date),"[220, 220, 220, 923, 62, 4475, 796, 284, 62, 2435, 62, 2536, 7, 9688, 62, 4475, 8]"
üß† ML Signal: Hardcoded request type indicates a specific API usage pattern,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 2581, 2099, 9217, 257, 2176, 7824, 8748, 3912]",0.5,531,ml_signal,93,Hardcoded request type indicates a specific API usage pattern,,514,    start_date = to_time_str(start_date),"[220, 220, 220, 923, 62, 4475, 796, 284, 62, 2435, 62, 2536, 7, 9688, 62, 4475, 8]"
üß† ML Signal: Specific fields requested can indicate data importance or relevance,"[8582, 100, 254, 10373, 26484, 25, 17377, 7032, 9167, 460, 7603, 1366, 6817, 393, 23082]",0.5,555,ml_signal,98,Specific fields requested can indicate data importance or relevance,,531,"        request_type=""RPT_DAILYBILLBOARD_DETAILS"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 5631, 33340, 39888, 8202, 9795, 62, 35, 20892, 45484, 1600]"
üß† ML Signal: Use of a filter function indicates a pattern of data selection,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 8106, 2163, 9217, 257, 3912, 286, 1366, 6356]",0.5,567,ml_signal,100,Use of a filter function indicates a pattern of data selection,,555,"        source=""DataCenter"",","[220, 220, 220, 220, 220, 220, 220, 2723, 2625, 6601, 23656, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if params are constructed from untrusted input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 42287, 389, 12006, 422, 1418, 81, 8459, 5128]",1.0,591,sast_risk,102,Potential risk if params are constructed from untrusted input,Low,567,"        sort_by=""TRADE_DATE,SECURITY_CODE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 5446, 19266, 62, 35, 6158, 11, 23683, 4261, 9050, 62, 34, 16820, 1600]"
üß† ML Signal: Sorting preferences can indicate data processing patterns,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 15387, 460, 7603, 1366, 7587, 7572]",0.5,615,ml_signal,102,Sorting preferences can indicate data processing patterns,,591,"        sort_by=""TRADE_DATE,SECURITY_CODE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 5446, 19266, 62, 35, 6158, 11, 23683, 4261, 9050, 62, 34, 16820, 1600]"
üß† ML Signal: Function name suggests a pattern of retrieving report dates for a holder,"[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 5644, 257, 3912, 286, 50122, 989, 9667, 329, 257, 15762]",1.0,654,ml_signal,101,Function name suggests a pattern of retrieving report dates for a holder,,615,"        filters=f""(TRADE_DATE>='{start_date}')(TRADE_DATE<='{end_date}')"",","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 69, 18109, 5446, 19266, 62, 35, 6158, 29, 11639, 90, 9688, 62, 4475, 92, 6, 5769, 5446, 19266, 62, 35, 6158, 27, 11639, 90, 437, 62, 4475, 92, 11537, 1600]"
‚úÖ Best Practice: Using a descriptive function name for `get_em_data` indicates its purpose,"[26486, 227, 6705, 19939, 25, 8554, 257, 35644, 2163, 1438, 329, 4600, 1136, 62, 368, 62, 7890, 63, 9217, 663, 4007]",0.5,678,best_practice,102,Using a descriptive function name for `get_em_data` indicates its purpose,,654,"        sort_by=""TRADE_DATE,SECURITY_CODE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 5446, 19266, 62, 35, 6158, 11, 23683, 4261, 9050, 62, 34, 16820, 1600]"
‚úÖ Best Practice: Using named parameters improves readability,"[26486, 227, 6705, 19939, 25, 8554, 3706, 10007, 19575, 1100, 1799]",1.0,702,best_practice,102,Using named parameters improves readability,,678,"        sort_by=""TRADE_DATE,SECURITY_CODE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 5446, 19266, 62, 35, 6158, 11, 23683, 4261, 9050, 62, 34, 16820, 1600]"
üß† ML Signal: Use of a helper function to generate filters based on code,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 31904, 2163, 284, 7716, 16628, 1912, 319, 2438]",0.5,720,ml_signal,108,Use of a helper function to generate filters based on code,,702,"def get_dragon_and_tiger(code, start_date=None):","[4299, 651, 62, 14844, 62, 392, 62, 83, 8254, 7, 8189, 11, 923, 62, 4475, 28, 14202, 2599]"
üß† ML Signal: Function definition with parameters indicating a pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 1366, 45069]",0.5,730,ml_signal,109,Function definition with parameters indicating a pattern for data retrieval,,720,    return get_em_data(,"[220, 220, 220, 1441, 651, 62, 368, 62, 7890, 7]"
üß† ML Signal: Usage of a specific request type indicating a pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2581, 2099, 12739, 257, 3912, 329, 1366, 45069]",0.5,752,ml_signal,110,Usage of a specific request type indicating a pattern for data retrieval,,730,"        request_type=""RPT_OPERATEDEPT_TRADE"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 31054, 11617, 8905, 51, 62, 5446, 19266, 1600]"
‚úÖ Best Practice: Using named arguments improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 8554, 3706, 7159, 19575, 1100, 1799, 290, 5529, 1799]",0.5,774,best_practice,110,Using named arguments improves readability and maintainability,,752,"        request_type=""RPT_OPERATEDEPT_TRADE"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 31054, 11617, 8905, 51, 62, 5446, 19266, 1600]"
üß† ML Signal: Function call with dynamic filters based on input parameter,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8925, 16628, 1912, 319, 5128, 11507]",0.5,778,ml_signal,116,Function call with dynamic filters based on input parameter,,774,    ),"[220, 220, 220, 1267]"
"‚úÖ Best Practice: Sorting parameters are explicitly defined, improving clarity","[26486, 227, 6705, 19939, 25, 311, 24707, 10007, 389, 11777, 5447, 11, 10068, 16287]",0.5,778,best_practice,118,"Sorting parameters are explicitly defined, improving clarity",,778,,[]
üß† ML Signal: Function definition with a specific pattern of parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 3912, 286, 10007]",1.0,778,ml_signal,117,Function definition with a specific pattern of parameters,,778,,[]
üß† ML Signal: Usage of a specific API call pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 7824, 869, 3912]",0.5,778,ml_signal,118,Usage of a specific API call pattern,,778,,[]
üß† ML Signal: Use of hardcoded request type indicating a specific data retrieval pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1327, 40976, 2581, 2099, 12739, 257, 2176, 1366, 45069, 3912]",0.5,788,ml_signal,121,Use of hardcoded request type indicating a specific data retrieval pattern,,778,    return get_em_data(,"[220, 220, 220, 1441, 651, 62, 368, 62, 7890, 7]"
üß† ML Signal: Use of specific fields indicating a pattern in data selection,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 7032, 12739, 257, 3912, 287, 1366, 6356]",0.5,814,ml_signal,123,Use of specific fields indicating a pattern in data selection,,788,"        fields=""END_DATE,IS_DEFAULT,IS_REPORTDATE"",","[220, 220, 220, 220, 220, 220, 220, 7032, 2625, 10619, 62, 35, 6158, 11, 1797, 62, 7206, 38865, 11, 1797, 62, 2200, 15490, 35, 6158, 1600]"
"üß† ML Signal: Use of a function to generate filters, indicating a pattern in data filtering","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 7716, 16628, 11, 12739, 257, 3912, 287, 1366, 25431]",0.5,833,ml_signal,124,"Use of a function to generate filters, indicating a pattern in data filtering",,814,"        filters=generate_filters(code=code),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 828]"
"üß† ML Signal: Function with multiple parameters, indicating a pattern of data processing or transformation","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3294, 10007, 11, 12739, 257, 3912, 286, 1366, 7587, 393, 13389]",0.5,859,ml_signal,123,"Function with multiple parameters, indicating a pattern of data processing or transformation",,833,"        fields=""END_DATE,IS_DEFAULT,IS_REPORTDATE"",","[220, 220, 220, 220, 220, 220, 220, 7032, 2625, 10619, 62, 35, 6158, 11, 1797, 62, 7206, 38865, 11, 1797, 62, 2200, 15490, 35, 6158, 1600]"
"üß† ML Signal: Use of a specific request type, indicating a pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 2581, 2099, 11, 12739, 257, 3912, 286, 1366, 45069]",1.0,878,ml_signal,124,"Use of a specific request type, indicating a pattern of data retrieval",,859,"        filters=generate_filters(code=code),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 828]"
"üß† ML Signal: Use of specific fields, indicating a pattern of data selection","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 7032, 11, 12739, 257, 3912, 286, 1366, 6356]",1.0,897,ml_signal,124,"Use of specific fields, indicating a pattern of data selection",,878,"        filters=generate_filters(code=code),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 828]"
"üß† ML Signal: Use of a filter generation function, indicating a pattern of data filtering","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 8106, 5270, 2163, 11, 12739, 257, 3912, 286, 1366, 25431]",0.5,915,ml_signal,130,"Use of a filter generation function, indicating a pattern of data filtering",,897,# ÂçÅÂ§ßÊµÅÈÄöËÇ°‰∏úÊó•Êúü,"[2, 10263, 235, 223, 32014, 38184, 223, 34460, 248, 164, 224, 94, 10310, 250, 33768, 98, 17312, 253]"
"üß† ML Signal: Function with multiple parameters, indicating a pattern for ML models to learn parameter usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3294, 10007, 11, 12739, 257, 3912, 329, 10373, 4981, 284, 2193, 11507, 8748, 13]",1.0,915,ml_signal,129,"Function with multiple parameters, indicating a pattern for ML models to learn parameter usage.",,915,,[]
"üß† ML Signal: Usage of a specific request type string, which could be a pattern for ML models to learn API usage.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2581, 2099, 4731, 11, 543, 714, 307, 257, 3912, 329, 10373, 4981, 284, 2193, 7824, 8748, 13]",0.5,933,ml_signal,130,"Usage of a specific request type string, which could be a pattern for ML models to learn API usage.",,915,# ÂçÅÂ§ßÊµÅÈÄöËÇ°‰∏úÊó•Êúü,"[2, 10263, 235, 223, 32014, 38184, 223, 34460, 248, 164, 224, 94, 10310, 250, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use of named parameters improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 10007, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,951,best_practice,130,Use of named parameters improves readability and maintainability.,,933,# ÂçÅÂ§ßÊµÅÈÄöËÇ°‰∏úÊó•Êúü,"[2, 10263, 235, 223, 32014, 38184, 223, 34460, 248, 164, 224, 94, 10310, 250, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use of a single string for fields improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2060, 4731, 329, 7032, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,970,best_practice,135,Use of a single string for fields improves readability and maintainability.,,951,"        filters=generate_filters(code=code),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 828]"
"üß† ML Signal: Function call with parameters, indicating a pattern for ML models to learn function usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 10007, 11, 12739, 257, 3912, 329, 10373, 4981, 284, 2193, 2163, 8748, 13]",0.5,986,ml_signal,136,"Function call with parameters, indicating a pattern for ML models to learn function usage.",,970,"        sort_by=""END_DATE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 10619, 62, 35, 6158, 1600]"
üß† ML Signal: Function name suggests a specific data retrieval pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 5644, 257, 2176, 1366, 45069, 3912]",0.5,1005,ml_signal,135,Function name suggests a specific data retrieval pattern,,986,"        filters=generate_filters(code=code),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 828]"
üß† ML Signal: Usage of a specific request type for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2581, 2099, 329, 1366, 45069]",1.0,1021,ml_signal,136,Usage of a specific request type for data retrieval,,1005,"        sort_by=""END_DATE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 10619, 62, 35, 6158, 1600]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded request type could lead to inflexibility,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2581, 2099, 714, 1085, 284, 1167, 2588, 2247]",0.5,1037,sast_risk,136,Hardcoded request type could lead to inflexibility,Low,1021,"        sort_by=""END_DATE"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 10619, 62, 35, 6158, 1600]"
üß† ML Signal: Specific fields requested indicate data usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17377, 7032, 9167, 7603, 1366, 8748, 7572]",1.0,1169,ml_signal,141,Specific fields requested indicate data usage patterns,,1037,# https://datacenter.eastmoney.com/securities/api/data/get?type=RPT_F10_EH_RELATION&sty=SECUCODE%2CHOLDER_NAME%2CRELATED_RELATION%2CHOLD_RATIO&filter=(SECUCODE%3D%22601162.SH%22)&client=APP&source=SECURITIES&p=1&ps=200&rdm=rnd_01BE6995104944ED99B70EEB7FFC0353&v=012649539724458458,"[2, 3740, 1378, 19608, 330, 9255, 13, 23316, 26316, 13, 785, 14, 2363, 10886, 14, 15042, 14, 7890, 14, 1136, 30, 4906, 28, 49, 11571, 62, 37, 940, 62, 42413, 62, 16448, 6234, 5, 34365, 28, 23683, 9598, 16820, 4, 17, 3398, 3535, 14418, 62, 20608, 4, 17, 34, 20112, 62, 16448, 6234, 4, 17, 3398, 15173, 62, 49, 1404, 9399, 5, 24455, 16193, 23683, 9598, 16820, 4, 18, 35, 4, 24909, 486, 25061, 13, 9693, 4, 1828, 8, 5, 16366, 28, 24805, 5, 10459, 28, 23683, 4261, 30383, 5, 79, 28, 16, 5, 862, 28, 2167, 5, 4372, 76, 28, 81, 358, 62, 486, 12473, 21, 33438, 940, 2920, 2598, 1961, 2079, 33, 2154, 6500, 33, 22, 37, 4851, 15, 33319, 5, 85, 28, 486, 2075, 33781, 33372, 1731, 29334, 29334]"
‚úÖ Best Practice: Use of a helper function to generate filters improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 31904, 2163, 284, 7716, 16628, 19575, 1100, 1799]",0.5,1180,best_practice,143,Use of a helper function to generate filters improves readability,,1169,def get_controlling_shareholder(code):,"[4299, 651, 62, 3642, 18886, 62, 20077, 13829, 7, 8189, 2599]"
üß† ML Signal: Sorting by a specific field indicates importance of data order,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 416, 257, 2176, 2214, 9217, 6817, 286, 1366, 1502]",1.0,1202,ml_signal,145,Sorting by a specific field indicates importance of data order,,1180,"        request_type=""RPT_F10_EH_RELATION"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 37, 940, 62, 42413, 62, 16448, 6234, 1600]"
üß† ML Signal: Function parameter 'code' indicates a pattern of processing financial or stock data,"[8582, 100, 254, 10373, 26484, 25, 15553, 11507, 705, 8189, 6, 9217, 257, 3912, 286, 7587, 3176, 393, 4283, 1366]",1.0,1213,ml_signal,143,Function parameter 'code' indicates a pattern of processing financial or stock data,,1202,def get_controlling_shareholder(code):,"[4299, 651, 62, 3642, 18886, 62, 20077, 13829, 7, 8189, 2599]"
üß† ML Signal: Use of 'datas[0]' suggests a pattern of accessing the most recent or first element,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 19608, 292, 58, 15, 49946, 5644, 257, 3912, 286, 22534, 262, 749, 2274, 393, 717, 5002]",0.5,1245,ml_signal,146,Use of 'datas[0]' suggests a pattern of accessing the most recent or first element,,1213,"        fields=""SECUCODE,CHOLDER_NAME,CRELATED_RELATION,CHOLD_RATIO"",","[220, 220, 220, 220, 220, 220, 220, 7032, 2625, 23683, 9598, 16820, 11, 3398, 3535, 14418, 62, 20608, 11, 34, 20112, 62, 16448, 6234, 11, 3398, 15173, 62, 49, 1404, 9399, 1600]"
üß† ML Signal: 'request_type' and 'fields' parameters indicate a pattern of querying specific data,"[8582, 100, 254, 10373, 26484, 25, 705, 25927, 62, 4906, 6, 290, 705, 25747, 6, 10007, 7603, 257, 3912, 286, 42517, 1112, 2176, 1366]",0.5,1256,ml_signal,151,'request_type' and 'fields' parameters indicate a pattern of querying specific data,,1245,# Êú∫ÊûÑÊåÅ‰ªì,"[2, 42164, 118, 162, 252, 226, 162, 234, 223, 20015, 241]"
üß† ML Signal: Use of 'generate_filters' suggests a pattern of filtering data based on parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 8612, 378, 62, 10379, 1010, 6, 5644, 257, 3912, 286, 25431, 1366, 1912, 319, 10007]",0.5,1273,ml_signal,152,Use of 'generate_filters' suggests a pattern of filtering data based on parameters,,1256,"def get_ii_holder(code, report_date, org_type):","[4299, 651, 62, 4178, 62, 13829, 7, 8189, 11, 989, 62, 4475, 11, 8745, 62, 4906, 2599]"
üß† ML Signal: Accessing 'holders[0]' indicates a pattern of using the first result from a query,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 705, 10476, 58, 15, 49946, 9217, 257, 3912, 286, 1262, 262, 717, 1255, 422, 257, 12405]",0.5,1308,ml_signal,156,Accessing 'holders[0]' indicates a pattern of using the first result from a query,,1273,"        filters=generate_filters(code=code, report_date=report_date, org_type=org_type),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 11, 989, 62, 4475, 28, 13116, 62, 4475, 11, 8745, 62, 4906, 28, 2398, 62, 4906, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'HOLD_RATIO_COUNT' is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 39, 15173, 62, 49, 1404, 9399, 62, 34, 28270, 6, 318, 6632]",1.0,1318,sast_risk,162,Potential division by zero if 'HOLD_RATIO_COUNT' is zero,Low,1308,    return get_em_data(,"[220, 220, 220, 1441, 651, 62, 368, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'HOLD_RATIO_CHANGE' is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 39, 15173, 62, 49, 1404, 9399, 62, 3398, 27746, 6, 318, 6632]",1.0,1328,sast_risk,162,Potential division by zero if 'HOLD_RATIO_CHANGE' is zero,Low,1318,    return get_em_data(,"[220, 220, 220, 1441, 651, 62, 368, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide unexpected errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 10059, 8563]",1.0,1328,sast_risk,168,Catching broad exceptions can hide unexpected errors,Low,1328,,[]
‚úÖ Best Practice: Use logging with exception information for better debugging,"[26486, 227, 6705, 19939, 25, 5765, 18931, 351, 6631, 1321, 329, 1365, 28769]",0.5,1341,best_practice,169,Use logging with exception information for better debugging,,1328,"def get_free_holders(code, end_date):","[4299, 651, 62, 5787, 62, 10476, 7, 8189, 11, 886, 62, 4475, 2599]"
üß† ML Signal: Returning a dictionary with specific keys indicates a pattern of structured data output,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 22155, 351, 2176, 8251, 9217, 257, 3912, 286, 20793, 1366, 5072]",1.0,1359,ml_signal,174,Returning a dictionary with specific keys indicates a pattern of structured data output,,1341,"        sort_by=""HOLDER_RANK"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 39, 3535, 14418, 62, 49, 15154, 1600]"
üß† ML Signal: Function to retrieve controlling shareholder data based on a code,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 19818, 12755, 29378, 1366, 1912, 319, 257, 2438]",1.0,1372,ml_signal,169,Function to retrieve controlling shareholder data based on a code,,1359,"def get_free_holders(code, end_date):","[4299, 651, 62, 5787, 62, 10476, 7, 8189, 11, 886, 62, 4475, 2599]"
‚úÖ Best Practice: Using a helper function to generate filters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 8554, 257, 31904, 2163, 284, 7716, 16628, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1390,best_practice,174,Using a helper function to generate filters improves code readability and maintainability,,1372,"        sort_by=""HOLDER_RANK"",","[220, 220, 220, 220, 220, 220, 220, 3297, 62, 1525, 2625, 39, 3535, 14418, 62, 49, 15154, 1600]"
‚úÖ Best Practice: Initializing a dictionary to store control information,"[26486, 227, 6705, 19939, 25, 20768, 2890, 257, 22155, 284, 3650, 1630, 1321]",1.0,1390,best_practice,177,Initializing a dictionary to store control information,,1390,,[]
üß† ML Signal: Pattern of checking specific relationship types in data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 2176, 2776, 3858, 287, 1366]",1.0,1396,ml_signal,180,Pattern of checking specific relationship types in data,,1390,    if datas:,"[220, 220, 220, 611, 19395, 25]"
"‚ö†Ô∏è SAST Risk (Low): Potential risk if ""HOLD_RATIO"" is not a number; consider validating input","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 366, 39, 15173, 62, 49, 1404, 9399, 1, 318, 407, 257, 1271, 26, 2074, 4938, 803, 5128]",0.5,1427,sast_risk,185,"Potential risk if ""HOLD_RATIO"" is not a number; consider validating input",Low,1396,"            filters=generate_filters(code=code, end_date=end_date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 11, 886, 62, 4475, 28, 437, 62, 4475, 828]"
üß† ML Signal: Function definition with parameters indicating a pattern of data retrieval based on code and date,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 286, 1366, 45069, 1912, 319, 2438, 290, 3128]",1.0,1485,ml_signal,184,Function definition with parameters indicating a pattern of data retrieval based on code and date,,1427,"            fields=""SECUCODE,SECURITY_CODE,END_DATE,HOLD_NUM_COUNT,HOLD_RATIO_COUNT,HOLD_RATIO_CHANGE,"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 2625, 23683, 9598, 16820, 11, 23683, 4261, 9050, 62, 34, 16820, 11, 10619, 62, 35, 6158, 11, 39, 15173, 62, 41359, 62, 34, 28270, 11, 39, 15173, 62, 49, 1404, 9399, 62, 34, 28270, 11, 39, 15173, 62, 49, 1404, 9399, 62, 3398, 27746, 553, 11]"
üß† ML Signal: Use of a specific request type indicating a pattern of accessing holder data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 2581, 2099, 12739, 257, 3912, 286, 22534, 15762, 1366]",0.5,1516,ml_signal,185,Use of a specific request type indicating a pattern of accessing holder data,,1485,"            filters=generate_filters(code=code, end_date=end_date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 11, 886, 62, 4475, 28, 437, 62, 4475, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive data if request_type is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1366, 611, 2581, 62, 4906, 318, 407, 31031]",1.0,1547,sast_risk,185,Potential exposure of sensitive data if request_type is not validated,Low,1516,"            filters=generate_filters(code=code, end_date=end_date),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 11, 886, 62, 4475, 28, 437, 62, 4475, 828]"
üß† ML Signal: Specific fields requested indicating a pattern of data usage,"[8582, 100, 254, 10373, 26484, 25, 17377, 7032, 9167, 12739, 257, 3912, 286, 1366, 8748]",0.5,1561,ml_signal,190,Specific fields requested indicating a pattern of data usage,,1547,            change = 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 796, 657]"
üß† ML Signal: Use of a filter function indicating a pattern of data filtering,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 8106, 2163, 12739, 257, 3912, 286, 1366, 25431]",0.5,1590,ml_signal,192,Use of a filter function indicating a pattern of data filtering,,1561,"                if holder[""HOLD_RATIO_COUNT""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 15762, 14692, 39, 15173, 62, 49, 1404, 9399, 62, 34, 28270, 1, 5974]"
‚ö†Ô∏è SAST Risk (Low): Potential injection risk if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16954, 2526, 611, 16628, 389, 407, 6105, 5336, 36951]",0.5,1625,sast_risk,193,Potential injection risk if filters are not properly sanitized,Low,1590,"                    ratio = holder[""HOLD_RATIO_COUNT""] / 100","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8064, 796, 15762, 14692, 39, 15173, 62, 49, 1404, 9399, 62, 34, 28270, 8973, 1220, 1802]"
üß† ML Signal: Sorting by a specific field indicating a pattern of data ordering,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 416, 257, 2176, 2214, 12739, 257, 3912, 286, 1366, 16216]",0.5,1660,ml_signal,195,Sorting by a specific field indicating a pattern of data ordering,,1625,"                    change = holder[""HOLD_RATIO_CHANGE""] / 100","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 796, 15762, 14692, 39, 15173, 62, 49, 1404, 9399, 62, 3398, 27746, 8973, 1220, 1802]"
‚úÖ Best Practice: Check if 'order' is not None or empty before processing,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 2875, 6, 318, 407, 6045, 393, 6565, 878, 7587]",1.0,1689,best_practice,192,Check if 'order' is not None or empty before processing,,1660,"                if holder[""HOLD_RATIO_COUNT""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 15762, 14692, 39, 15173, 62, 49, 1404, 9399, 62, 34, 28270, 1, 5974]"
üß† ML Signal: Splitting a string by a delimiter to process each element,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 257, 4731, 416, 257, 46728, 2676, 284, 1429, 1123, 5002]",1.0,1718,ml_signal,194,Splitting a string by a delimiter to process each element,,1689,"                if holder[""HOLD_RATIO_CHANGE""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 15762, 14692, 39, 15173, 62, 49, 1404, 9399, 62, 3398, 27746, 1, 5974]"
üß† ML Signal: List comprehension used for conditional transformation of list elements,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 26340, 13389, 286, 1351, 4847]",1.0,1734,ml_signal,196,List comprehension used for conditional transformation of list elements,,1718,            except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Return the original 'order' if it is None or empty,"[26486, 227, 6705, 19939, 25, 8229, 262, 2656, 705, 2875, 6, 611, 340, 318, 6045, 393, 6565]",1.0,1734,best_practice,198,Return the original 'order' if it is None or empty,,1734,,[]
‚úÖ Best Practice: Consider using more descriptive parameter names for better readability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 517, 35644, 11507, 3891, 329, 1365, 1100, 1799, 13]",1.0,1750,best_practice,196,Consider using more descriptive parameter names for better readability.,,1734,            except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Use a helper function to encapsulate order parameter logic.,"[26486, 227, 6705, 19939, 25, 5765, 257, 31904, 2163, 284, 32652, 5039, 1502, 11507, 9156, 13]",0.5,1750,best_practice,198,Use a helper function to encapsulate order parameter logic.,,1750,,[]
‚ö†Ô∏è SAST Risk (Low): Use of random number generation without a seed can lead to non-deterministic behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4738, 1271, 5270, 1231, 257, 9403, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 13]",1.0,1770,sast_risk,200,Use of random number generation without a seed can lead to non-deterministic behavior.,Low,1750,"                ""code"": code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 2438, 11]"
üß† ML Signal: Conditional logic based on input parameters.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 5128, 10007, 13]",1.0,1791,ml_signal,202,Conditional logic based on input parameters.,,1770,"                ""ratio"": ratio,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 10366, 952, 1298, 8064, 11]"
üß† ML Signal: URL construction pattern with multiple query parameters.,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912, 351, 3294, 12405, 10007, 13]",1.0,1803,ml_signal,204,URL construction pattern with multiple query parameters.,,1791,            },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: URL construction pattern with multiple query parameters.,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912, 351, 3294, 12405, 10007, 13]",1.0,1814,ml_signal,207,URL construction pattern with multiple query parameters.,,1803,def get_controlling_shareholder(code):,"[4299, 651, 62, 3642, 18886, 62, 20077, 13829, 7, 8189, 2599]"
üß† ML Signal: Appending additional parameters to a URL.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 3224, 10007, 284, 257, 10289, 13]",1.0,1836,ml_signal,209,Appending additional parameters to a URL.,,1814,"        request_type=""RPT_F10_EH_RELATION"",","[220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 49, 11571, 62, 37, 940, 62, 42413, 62, 16448, 6234, 1600]"
‚úÖ Best Practice: Return statement should be the last line of the function for clarity.,"[26486, 227, 6705, 19939, 25, 8229, 2643, 815, 307, 262, 938, 1627, 286, 262, 2163, 329, 16287, 13]",0.5,1855,best_practice,211,Return statement should be the last line of the function for clarity.,,1836,"        filters=generate_filters(code=code),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 828]"
üß† ML Signal: Function definition with a single responsibility,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2060, 5798]",0.5,1855,ml_signal,206,Function definition with a single responsibility,,1855,,[]
‚úÖ Best Practice: Convert input to integer for consistent comparison,"[26486, 227, 6705, 19939, 25, 38240, 5128, 284, 18253, 329, 6414, 7208]",1.0,1866,best_practice,208,Convert input to integer for consistent comparison,,1855,    holders = get_em_data(,"[220, 220, 220, 16392, 796, 651, 62, 368, 62, 7890, 7]"
‚úÖ Best Practice: Use of chained comparison for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 40682, 7208, 329, 1100, 1799]",1.0,1897,best_practice,210,Use of chained comparison for readability,,1866,"        fields=""SECUCODE,HOLDER_NAME,RELATED_RELATION,HOLD_RATIO"",","[220, 220, 220, 220, 220, 220, 220, 7032, 2625, 23683, 9598, 16820, 11, 39, 3535, 14418, 62, 20608, 11, 20112, 62, 16448, 6234, 11, 39, 15173, 62, 49, 1404, 9399, 1600]"
‚úÖ Best Practice: Clear and concise conditional logic,"[26486, 227, 6705, 19939, 25, 11459, 290, 35327, 26340, 9156]",0.5,1897,best_practice,213,Clear and concise conditional logic,,1897,,[]
‚úÖ Best Practice: Consider using a dictionary for mapping to improve readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 22155, 329, 16855, 284, 2987, 1100, 1799, 290, 5529, 1799, 13]",1.0,1912,best_practice,215,Consider using a dictionary for mapping to improve readability and maintainability.,,1897,"        control = {""ratio"": 0}","[220, 220, 220, 220, 220, 220, 220, 1630, 796, 19779, 10366, 952, 1298, 657, 92]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be disabled with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 10058, 351, 23989, 9701, 13]",1.0,1991,sast_risk,230,Using assert for control flow can be disabled with optimization flags.,Low,1912,"        fields=""SECUCODE,END_DATE,HOLDER_NAME,HOLDER_CODE,HOLDER_CODE_OLD,HOLD_NUM,HOLD_NUM_RATIO,HOLD_RATIO_QOQ,HOLDER_RANK,IS_HOLDORG"",","[220, 220, 220, 220, 220, 220, 220, 7032, 2625, 23683, 9598, 16820, 11, 10619, 62, 35, 6158, 11, 39, 3535, 14418, 62, 20608, 11, 39, 3535, 14418, 62, 34, 16820, 11, 39, 3535, 14418, 62, 34, 16820, 62, 15173, 11, 39, 15173, 62, 41359, 11, 39, 15173, 62, 41359, 62, 49, 1404, 9399, 11, 39, 15173, 62, 49, 1404, 9399, 62, 48, 46, 48, 11, 39, 3535, 14418, 62, 49, 15154, 11, 1797, 62, 39, 15173, 1581, 38, 1600]"
‚úÖ Best Practice: Using list comprehension for filtering and processing items in a dictionary,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 329, 25431, 290, 7587, 3709, 287, 257, 22155]",1.0,2018,best_practice,231,Using list comprehension for filtering and processing items in a dictionary,,1991,"        filters=generate_filters(code=code, end_date=end_date),","[220, 220, 220, 220, 220, 220, 220, 16628, 28, 8612, 378, 62, 10379, 1010, 7, 8189, 28, 8189, 11, 886, 62, 4475, 28, 437, 62, 4475, 828]"
üß† ML Signal: Conditional logic based on the presence of 'code',"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 705, 8189, 6]",1.0,2018,ml_signal,235,Conditional logic based on the presence of 'code',,2018,,[]
‚ö†Ô∏è SAST Risk (Low): Potential injection risk if 'code' is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16954, 2526, 611, 705, 8189, 6, 318, 407, 6105, 5336, 36951]",1.0,2028,sast_risk,236,Potential injection risk if 'code' is not properly sanitized,Low,2018,def _order_param(order: str):,"[4299, 4808, 2875, 62, 17143, 7, 2875, 25, 965, 2599]"
üß† ML Signal: Conditional logic based on the presence of 'org_type',"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 705, 2398, 62, 4906, 6]",1.0,2059,ml_signal,239,Conditional logic based on the presence of 'org_type',,2028,"        return "","".join([""1"" if item == ""asc"" else ""-1"" for item in orders])","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 553, 13, 22179, 7, 14692, 16, 1, 611, 2378, 6624, 366, 3372, 1, 2073, 27444, 16, 1, 329, 2378, 287, 6266, 12962]"
üß† ML Signal: Use of a dictionary to determine operation type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 284, 5004, 4905, 2099]",1.0,2080,ml_signal,245,Use of a dictionary to determine operation type,,2059,    # type=RPT_F10_MAIN_ORGHOLDDETAILS,"[220, 220, 220, 1303, 2099, 28, 49, 11571, 62, 37, 940, 62, 5673, 1268, 62, 1581, 17511, 15173, 35, 20892, 45484]"
‚ö†Ô∏è SAST Risk (Low): Potential injection risk if 'value' is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16954, 2526, 611, 705, 8367, 6, 318, 407, 6105, 5336, 36951]",1.0,2156,sast_risk,246,Potential injection risk if 'value' is not properly sanitized,Low,2080,"    # sty=SECURITY_CODE,SECUCODE,REPORT_DATE,ORG_TYPE,TOTAL_ORG_NUM,TOTAL_FREE_SHARES,TOTAL_MARKET_CAP,TOTAL_SHARES_RATIO,CHANGE_RATIO,IS_COMPLETE","[220, 220, 220, 1303, 8944, 28, 23683, 4261, 9050, 62, 34, 16820, 11, 23683, 9598, 16820, 11, 2200, 15490, 62, 35, 6158, 11, 1581, 38, 62, 25216, 11, 51, 27510, 62, 1581, 38, 62, 41359, 11, 51, 27510, 62, 39274, 62, 9693, 1503, 1546, 11, 51, 27510, 62, 44, 14175, 2767, 62, 33177, 11, 51, 27510, 62, 9693, 1503, 1546, 62, 49, 1404, 9399, 11, 3398, 27746, 62, 49, 1404, 9399, 11, 1797, 62, 41335, 9328]"
"üß† ML Signal: Function call with multiple parameters, including optional ones","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 1390, 11902, 3392]",1.0,2156,ml_signal,260,"Function call with multiple parameters, including optional ones",,2156,,[]
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,2156,ml_signal,272,Logging usage pattern,,2156,,[]
‚ö†Ô∏è SAST Risk (Low): Potential misuse of session object if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 6246, 2134, 611, 407, 6105, 5257]",0.5,2171,sast_risk,275,Potential misuse of session object if not properly managed,Low,2156,    if actor_type == ActorType.raised_fund:,"[220, 220, 220, 611, 8674, 62, 4906, 6624, 27274, 6030, 13, 49309, 62, 10990, 25]"
"‚ö†Ô∏è SAST Risk (Low): No timeout specified in requests.get, which can lead to hanging","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 26827, 7368, 287, 7007, 13, 1136, 11, 543, 460, 1085, 284, 10938]",0.5,2182,sast_risk,278,"No timeout specified in requests.get, which can lead to hanging",Low,2171,"        return ""02""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 2999, 1]"
‚ö†Ô∏è SAST Risk (Low): Assumes JSON response without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 19449, 2882, 1231, 6631, 9041]",1.0,2196,sast_risk,281,Assumes JSON response without exception handling,Low,2182,    if actor_type == ActorType.broker:,"[220, 220, 220, 611, 8674, 62, 4906, 6624, 27274, 6030, 13, 7957, 6122, 25]"
‚úÖ Best Practice: Explicitly closing the response to free up resources,"[26486, 227, 6705, 19939, 25, 11884, 306, 9605, 262, 2882, 284, 1479, 510, 4133]",0.5,2210,best_practice,283,Explicitly closing the response to free up resources,,2196,    if actor_type == ActorType.insurance:,"[220, 220, 220, 611, 8674, 62, 4906, 6624, 27274, 6030, 13, 1040, 3874, 25]"
üß† ML Signal: Recursive function call pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912]",1.0,2210,ml_signal,291,Recursive function call pattern,,2210,,[]
‚úÖ Best Practice: Using list concatenation,"[26486, 227, 6705, 19939, 25, 8554, 1351, 1673, 36686, 341]",1.0,2217,best_practice,313,Using list concatenation,,2210,def get_em_data(,"[4299, 651, 62, 368, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Raises a generic RuntimeError without specific exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 257, 14276, 43160, 12331, 1231, 2176, 6631, 9041]",0.5,2226,sast_risk,317,Raises a generic RuntimeError without specific exception handling,Low,2217,"    source=""SECURITIES"",","[220, 220, 220, 2723, 2625, 23683, 4261, 30383, 1600]"
"‚ö†Ô∏è SAST Risk (High): The function does not return any value or perform any operations, leading to potential logical errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 383, 2163, 857, 407, 1441, 597, 1988, 393, 1620, 597, 4560, 11, 3756, 284, 2785, 12219, 8563, 13]",1.0,2235,sast_risk,317,"The function does not return any value or perform any operations, leading to potential logical errors.",High,2226,"    source=""SECURITIES"",","[220, 220, 220, 2723, 2625, 23683, 4261, 30383, 1600]"
‚úÖ Best Practice: Consider returning the dictionaries or performing operations on them.,"[26486, 227, 6705, 19939, 25, 12642, 8024, 262, 48589, 3166, 393, 9489, 4560, 319, 606, 13]",1.0,2244,best_practice,317,Consider returning the dictionaries or performing operations on them.,,2235,"    source=""SECURITIES"",","[220, 220, 220, 2723, 2625, 23683, 4261, 30383, 1600]"
"‚ö†Ô∏è SAST Risk (High): The function does not return any value or perform any operations, leading to potential logical errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 383, 2163, 857, 407, 1441, 597, 1988, 393, 1620, 597, 4560, 11, 3756, 284, 2785, 12219, 8563, 13]",1.0,2250,sast_risk,339,"The function does not return any value or perform any operations, leading to potential logical errors.",High,2244,    if session:,"[220, 220, 220, 611, 6246, 25]"
‚úÖ Best Practice: Consider returning the dictionaries or performing operations on them.,"[26486, 227, 6705, 19939, 25, 12642, 8024, 262, 48589, 3166, 393, 9489, 4560, 319, 606, 13]",1.0,2256,best_practice,339,Consider returning the dictionaries or performing operations on them.,,2250,    if session:,"[220, 220, 220, 611, 6246, 25]"
"‚ö†Ô∏è SAST Risk (High): The function does not return any value or perform any operations, leading to potential logical errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 383, 2163, 857, 407, 1441, 597, 1988, 393, 1620, 597, 4560, 11, 3756, 284, 2785, 12219, 8563, 13]",1.0,2287,sast_risk,361,"The function does not return any value or perform any operations, leading to potential logical errors.",High,2256,"                        request_type=request_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 28, 25927, 62, 4906, 11]"
‚úÖ Best Practice: Consider returning the dictionaries or performing operations on them.,"[26486, 227, 6705, 19939, 25, 12642, 8024, 262, 48589, 3166, 393, 9489, 4560, 319, 606, 13]",1.0,2318,best_practice,361,Consider returning the dictionaries or performing operations on them.,,2287,"                        request_type=request_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 28, 25927, 62, 4906, 11]"
üß† ML Signal: Function signature with default parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007]",0.5,2318,ml_signal,384,Function signature with default parameters,,2318,,[]
üß† ML Signal: URL construction with dynamic parameters,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 351, 8925, 10007]",0.5,2339,ml_signal,390,URL construction with dynamic parameters,,2318,        # ÊúÄÊñ∞‰ª∑ 660/100=6.6,"[220, 220, 220, 220, 220, 220, 220, 1303, 42164, 222, 23877, 108, 20015, 115, 41717, 14, 3064, 28, 21, 13, 21]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse of session object,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 6246, 2134]",0.5,2352,sast_risk,393,Potential misuse of session object,Low,2339,"        ""f3"": 2000,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 18, 1298, 4751, 11]"
‚ö†Ô∏è SAST Risk (Low): No timeout specified in requests.get,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 26827, 7368, 287, 7007, 13, 1136]",0.5,2365,sast_risk,396,No timeout specified in requests.get,Low,2352,        # ÊÄªÊâã,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 222, 119, 33699, 233]"
‚ö†Ô∏è SAST Risk (Low): raise_for_status() can raise an exception,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5298, 62, 1640, 62, 13376, 3419, 460, 5298, 281, 6631]",0.5,2381,sast_risk,398,raise_for_status() can raise an exception,Low,2365,        # Êàê‰∫§È¢ù,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 230, 238, 12859, 97, 165, 95, 251]"
‚ö†Ô∏è SAST Risk (Low): Assumes response is always JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2882, 318, 1464, 19449]",0.5,2400,sast_risk,400,Assumes response is always JSON,Low,2381,        # Êç¢ÊâãÁéá 239/10000,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 235, 95, 33699, 233, 163, 236, 229, 32817, 14, 49388]"
‚úÖ Best Practice: Explicitly close the response,"[26486, 227, 6705, 19939, 25, 11884, 306, 1969, 262, 2882]",0.5,2417,best_practice,402,Explicitly close the response,,2400,        # Â∏ÇÁõàÁéá 110,"[220, 220, 220, 220, 220, 220, 220, 1303, 10263, 116, 224, 33566, 230, 163, 236, 229, 9796]"
üß† ML Signal: Appending structured data to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 20793, 1366, 284, 257, 1351]",1.0,2430,ml_signal,414,Appending structured data to a list,,2417,"        ""f31"": 660,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 3132, 1298, 41717, 11]"
üß† ML Signal: Conversion of list of dicts to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1351, 286, 8633, 82, 284, 6060, 19778]",0.5,2443,ml_signal,442,Conversion of list of dicts to DataFrame,,2430,"        ""f139"": 2,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 20219, 1298, 362, 11]"
"üß† ML Signal: Function to decode entity IDs, indicating a pattern of handling different entity types","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 36899, 9312, 32373, 11, 12739, 257, 3912, 286, 9041, 1180, 9312, 3858]",1.0,2458,ml_signal,436,"Function to decode entity IDs, indicating a pattern of handling different entity types",,2443,"        ""f30"": -1281,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1270, 1298, 532, 1065, 6659, 11]"
"üß† ML Signal: Decoding entity IDs to determine type, exchange, and code","[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 9312, 32373, 284, 5004, 2099, 11, 5163, 11, 290, 2438]",1.0,2472,ml_signal,438,"Decoding entity IDs to determine type, exchange, and code",,2458,"        ""f31"": 1515,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 3132, 1298, 1315, 1314, 11]"
‚úÖ Best Practice: Using if-elif-else for clear conditional logic,"[26486, 227, 6705, 19939, 25, 8554, 611, 12, 417, 361, 12, 17772, 329, 1598, 26340, 9156]",0.5,2485,best_practice,440,Using if-elif-else for clear conditional logic,,2472,"        ""f32"": None,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 2624, 1298, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be disabled in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 3227]",1.0,2500,sast_risk,451,Using assert for control flow can be disabled in production,Low,2485,"        ""f5"": 478746,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 20, 1298, 604, 41019, 3510, 11]"
üß† ML Signal: Constructing data payload for API request,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 1366, 21437, 329, 7824, 2581]",1.0,2514,ml_signal,453,Constructing data payload for API request,,2500,"        ""f8"": 803,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 23, 1298, 807, 3070, 11]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network request failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 2581, 15536]",1.0,2530,sast_risk,455,No exception handling for network request failures,Medium,2514,"        ""f12"": ""000788"",","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1065, 1298, 366, 830, 22, 3459, 1600]"
‚ö†Ô∏è SAST Risk (Low): No handling for potential HTTP errors other than raising exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 9041, 329, 2785, 14626, 8563, 584, 621, 8620, 13269]",1.0,2551,sast_risk,457,No handling for potential HTTP errors other than raising exceptions,Low,2530,"        ""f14"": ""ÂåóÂ§ßÂåªËçØ"",","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1415, 1298, 366, 44293, 245, 32014, 44293, 119, 164, 235, 107, 1600]"
‚úÖ Best Practice: Closing response to free up resources,"[26486, 227, 6705, 19939, 25, 47055, 2882, 284, 1479, 510, 4133]",0.5,2564,best_practice,459,Closing response to free up resources,,2551,"        ""f19"": 6,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1129, 1298, 718, 11]"
‚ö†Ô∏è SAST Risk (Low): Assumes JSON response structure without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 19449, 2882, 4645, 1231, 21201]",0.5,2578,sast_risk,461,Assumes JSON response structure without validation,Low,2564,"        ""f31"": 611,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 3132, 1298, 718, 1157, 11]"
‚ö†Ô∏è SAST Risk (Medium): URL may be vulnerable to injection if `now_timestamp()` is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 743, 307, 8826, 284, 16954, 611, 4600, 2197, 62, 16514, 27823, 3419, 63, 318, 407, 6105, 5336, 36951]",0.5,2592,sast_risk,454,URL may be vulnerable to injection if `now_timestamp()` is not properly sanitized,Medium,2578,"        ""f9"": 2067,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 24, 1298, 1160, 3134, 11]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 8563]",1.0,2605,sast_risk,456,No exception handling for network errors,Medium,2592,"        ""f13"": 0,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1485, 1298, 657, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled HTTP errors if `raise_for_status` is not called,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 14626, 8563, 611, 4600, 40225, 62, 1640, 62, 13376, 63, 318, 407, 1444]",1.0,2619,sast_risk,458,Potential for unhandled HTTP errors if `raise_for_status` is not called,Low,2605,"        ""f18"": 591,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1507, 1298, 642, 6420, 11]"
‚ö†Ô∏è SAST Risk (Medium): `json_callback_param` function may be vulnerable to injection if not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4600, 17752, 62, 47423, 62, 17143, 63, 2163, 743, 307, 8826, 284, 16954, 611, 407, 6105, 5336, 36951]",0.5,2634,sast_risk,460,`json_callback_param` function may be vulnerable to injection if not properly sanitized,Medium,2619,"        ""f30"": -4015,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 1270, 1298, 532, 21844, 20, 11]"
‚úÖ Best Practice: Ensure the response is closed to free up resources,"[26486, 227, 6705, 19939, 25, 48987, 262, 2882, 318, 4838, 284, 1479, 510, 4133]",1.0,2648,best_practice,462,Ensure the response is closed to free up resources,,2634,"        ""f32"": 612,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 2624, 1298, 718, 1065, 11]"
üß† ML Signal: Pattern of splitting strings to extract multiple values,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26021, 13042, 284, 7925, 3294, 3815]",0.5,2661,ml_signal,466,Pattern of splitting strings to extract multiple values,,2648,"        ""f152"": 2,","[220, 220, 220, 220, 220, 220, 220, 366, 69, 17827, 1298, 362, 11]"
üß† ML Signal: Pattern of transforming data using a specific function,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 25449, 1366, 1262, 257, 2176, 2163]",0.5,2687,ml_signal,471,Pattern of transforming data using a specific function,,2661,# url = 'https://push2his.eastmoney.com/api/qt/stock/kline/get?',"[2, 19016, 796, 705, 5450, 1378, 14689, 17, 14363, 13, 23316, 26316, 13, 785, 14, 15042, 14, 39568, 14, 13578, 14, 74, 1370, 14, 1136, 8348]"
üß† ML Signal: Usage of enum-like pattern for value conversion,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 33829, 12, 2339, 3912, 329, 1988, 11315]",0.5,2702,ml_signal,474,Usage of enum-like pattern for value conversion,,2687,# ÊúàÁ∫ø      klt=103,"[2, 42164, 230, 163, 118, 123, 220, 220, 220, 220, 220, 479, 2528, 28, 15197]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for control flow can be disabled in optimized mode,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 23392, 4235]",1.0,2737,sast_risk,480,Use of assert for control flow can be disabled in optimized mode,Low,2702,# Â§çÊùÉ      fqt 0 ‰∏çÂ§çÊùÉ 1 ÂâçÂ§çÊùÉ 2 ÂêéÂ§çÊùÉ,"[2, 36469, 235, 30266, 225, 220, 220, 220, 220, 220, 277, 39568, 657, 220, 38834, 13783, 235, 30266, 225, 352, 10263, 231, 235, 13783, 235, 30266, 225, 362, 10263, 238, 236, 13783, 235, 30266, 225]"
üß† ML Signal: Pattern of converting strings to uppercase,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 13042, 284, 334, 39921, 589]",0.5,2738,ml_signal,482,Pattern of converting strings to uppercase,,2737,#,[2]
‚ö†Ô∏è SAST Risk (Low): Logging error without handling may expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 4049, 1231, 9041, 743, 15651, 8564, 1321]",0.5,2748,sast_risk,485,Logging error without handling may expose sensitive information,Low,2738,"# timestamp,open,close,high,low","[2, 41033, 11, 9654, 11, 19836, 11, 8929, 11, 9319]"
üß† ML Signal: Pattern of constructing unique identifiers,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30580, 3748, 42814]",1.0,2881,ml_signal,490,Pattern of constructing unique identifiers,,2748,"# secid=0.399001&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 15, 13, 28771, 8298, 5, 74, 2528, 28, 15377, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
‚úÖ Best Practice: Use of pandas for structured data manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 20793, 1366, 17512]",1.0,3014,best_practice,494,Use of pandas for structured data manipulation,,2881,"# secid=116.01024&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 18298, 13, 20943, 1731, 5, 74, 2528, 28, 15377, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
üß† ML Signal: Function to calculate limits based on specific code patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 15284, 7095, 1912, 319, 2176, 2438, 7572]",1.0,3024,ml_signal,485,Function to calculate limits based on specific code patterns,,3014,"# timestamp,open,close,high,low","[2, 41033, 11, 9654, 11, 19836, 11, 8929, 11, 9319]"
üß† ML Signal: Accessing dictionary values by key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 3815, 416, 1994]",0.5,3030,ml_signal,488,Accessing dictionary values by key,,3024,# Ê∑±Âú≥,"[2, 10545, 115, 109, 28839, 111]"
üß† ML Signal: Pattern matching with specific code prefixes,"[8582, 100, 254, 10373, 26484, 25, 23939, 12336, 351, 2176, 2438, 21231, 274]",1.0,3163,ml_signal,490,Pattern matching with specific code prefixes,,3030,"# secid=0.399001&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 15, 13, 28771, 8298, 5, 74, 2528, 28, 15377, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
üß† ML Signal: Conditional logic based on code patterns,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2438, 7572]",0.5,3296,ml_signal,491,Conditional logic based on code patterns,,3163,"# secid=0.000338&klt=101&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 15, 13, 830, 28460, 5, 74, 2528, 28, 8784, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
üß† ML Signal: Pattern matching with specific code prefixes,"[8582, 100, 254, 10373, 26484, 25, 23939, 12336, 351, 2176, 2438, 21231, 274]",1.0,3429,ml_signal,494,Pattern matching with specific code prefixes,,3296,"# secid=116.01024&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 18298, 13, 20943, 1731, 5, 74, 2528, 28, 15377, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
üß† ML Signal: Conditional logic based on code patterns,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2438, 7572]",0.5,3562,ml_signal,496,Conditional logic based on code patterns,,3429,"# secid=106.BABA&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 15801, 13, 4339, 4339, 5, 74, 2528, 28, 15377, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
üß† ML Signal: Default case for codes not matching specific patterns,"[8582, 100, 254, 10373, 26484, 25, 15161, 1339, 329, 12416, 407, 12336, 2176, 7572]",0.5,3696,ml_signal,499,Default case for codes not matching specific patterns,,3562,"# secid=1.512660&klt=101&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 16, 13, 20, 19420, 1899, 5, 74, 2528, 28, 8784, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network request failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 2581, 15536]",1.0,3829,sast_risk,494,No exception handling for network request failures,Medium,3696,"# secid=116.01024&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1","[2, 792, 312, 28, 18298, 13, 20943, 1731, 5, 74, 2528, 28, 15377, 5, 69, 39568, 28, 16, 5, 75, 16762, 28, 2791, 5, 437, 28, 1238, 4059, 830, 5, 271, 13227, 28, 16, 5, 25747, 16, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 5, 25747, 17, 28, 69, 4349, 11, 69, 4309, 11, 69, 4310, 11, 69, 4051, 11, 69, 2816, 11, 69, 3980, 11, 69, 3553, 11, 69, 3365, 11, 69, 3270, 11, 69, 1899, 11, 69, 5333, 11, 69, 5237, 11, 69, 5066, 11, 69, 2414, 5, 315, 28, 69, 43526, 66, 15630, 65, 344, 17, 64, 4521, 68, 2078, 2791, 397, 3459, 3324, 9945, 16, 67, 46712, 5, 3174, 310, 28, 16]"
‚úÖ Best Practice: Use a constant or configuration for the URL to improve maintainability,"[26486, 227, 6705, 19939, 25, 5765, 257, 6937, 393, 8398, 329, 262, 10289, 284, 2987, 5529, 1799]",0.5,3836,best_practice,495,Use a constant or configuration for the URL to improve maintainability,,3829,# ÁæéËÇ°,"[2, 13328, 122, 236, 164, 224, 94]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the response data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 2882, 1366]",0.5,3837,sast_risk,497,No validation or sanitization of the response data,Medium,3836,#,[2]
üß† ML Signal: Usage of external API for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 329, 1366, 45069]",0.5,3842,ml_signal,498,Usage of external API for data retrieval,,3837,# ‰∏äÊµ∑,"[2, 220, 41468, 38184, 115]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled HTTP errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 14626, 8563]",1.0,3883,sast_risk,500,Potential for unhandled HTTP errors,Low,3842,"def get_kdata(entity_id, session=None, level=IntervalLevel.LEVEL_1DAY, adjust_type=AdjustType.qfq, limit=10000):","[4299, 651, 62, 74, 7890, 7, 26858, 62, 312, 11, 6246, 28, 14202, 11, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11, 4532, 62, 4906, 28, 39668, 6030, 13, 80, 69, 80, 11, 4179, 28, 49388, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Assumes the JSON response structure without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 2195, 8139, 262, 19449, 2882, 4645, 1231, 21201]",1.0,3894,sast_risk,502,Assumes the JSON response structure without validation,Medium,3883,    level = IntervalLevel(level),"[220, 220, 220, 1241, 796, 4225, 2100, 4971, 7, 5715, 8]"
‚úÖ Best Practice: Use a context manager (with statement) for handling resources like network connections,"[26486, 227, 6705, 19939, 25, 5765, 257, 4732, 4706, 357, 4480, 2643, 8, 329, 9041, 4133, 588, 3127, 8787]",0.5,3913,best_practice,504,Use a context manager (with statement) for handling resources like network connections,,3894,    sec_id = to_em_sec_id(entity_id),"[220, 220, 220, 792, 62, 312, 796, 284, 62, 368, 62, 2363, 62, 312, 7, 26858, 62, 312, 8]"
üß† ML Signal: Function returns data from an external API,"[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 1366, 422, 281, 7097, 7824]",0.5,3930,ml_signal,506,Function returns data from an external API,,3913,    level_flag = to_em_level_flag(level),"[220, 220, 220, 1241, 62, 32109, 796, 284, 62, 368, 62, 5715, 62, 32109, 7, 5715, 8]"
‚ö†Ô∏è SAST Risk (Low): URL construction with user-controlled parameters can lead to SSRF or information disclosure if not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10289, 5103, 351, 2836, 12, 14401, 10007, 460, 1085, 284, 6723, 32754, 393, 1321, 13019, 611, 407, 6105, 31031, 13]",0.5,3951,sast_risk,501,URL construction with user-controlled parameters can lead to SSRF or information disclosure if not properly validated.,Low,3930,"    entity_type, exchange, code = decode_entity_id(entity_id)","[220, 220, 220, 9312, 62, 4906, 11, 5163, 11, 2438, 796, 36899, 62, 26858, 62, 312, 7, 26858, 62, 312, 8]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for the HTTP request, which can lead to hanging requests.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 262, 14626, 2581, 11, 543, 460, 1085, 284, 10938, 7007, 13]",1.0,3951,sast_risk,503,"No timeout specified for the HTTP request, which can lead to hanging requests.",Medium,3951,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled exceptions if the response does not contain expected JSON structure.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 13269, 611, 262, 2882, 857, 407, 3994, 2938, 19449, 4645, 13]",0.5,3972,sast_risk,505,Potential for unhandled exceptions if the response does not contain expected JSON structure.,Low,3951,    fq_flag = to_em_fq_flag(adjust_type),"[220, 220, 220, 277, 80, 62, 32109, 796, 284, 62, 368, 62, 69, 80, 62, 32109, 7, 23032, 62, 4906, 8]"
‚úÖ Best Practice: Ensure the response is closed to free up system resources.,"[26486, 227, 6705, 19939, 25, 48987, 262, 2882, 318, 4838, 284, 1479, 510, 1080, 4133, 13]",1.0,3986,best_practice,507,Ensure the response is closed to free up system resources.,,3972,    # f131 ÁªìÁÆó‰ª∑,"[220, 220, 220, 1303, 277, 22042, 13328, 119, 241, 163, 106, 245, 20015, 115]"
üß† ML Signal: Usage of pandas DataFrame for data manipulation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 329, 1366, 17512, 13]",0.5,4002,ml_signal,509,Usage of pandas DataFrame for data manipulation.,,3986,    # ÁõÆÂâçÊú™Ëé∑Âèñ,"[220, 220, 220, 1303, 13328, 249, 106, 30298, 235, 17312, 103, 164, 236, 115, 20998, 244]"
üß† ML Signal: Conditional logic based on function parameters.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2163, 10007, 13]",0.5,4002,ml_signal,511,Conditional logic based on function parameters.,,4002,,[]
üß† ML Signal: DataFrame column selection and renaming.,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 5721, 6356, 290, 8851, 3723, 13]",0.5,4002,ml_signal,511,DataFrame column selection and renaming.,,4002,,[]
‚úÖ Best Practice: Dropping NaN values to ensure data integrity.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 11013, 45, 3815, 284, 4155, 1366, 11540, 13]",1.0,4072,best_practice,529,Dropping NaN values to ensure data integrity.,,4002,"            # ""2021-08-27,19.39,20.30,20.30,19.25,1688497,3370240912.00,5.48,6.01,1.15,3.98,0,0,0""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 366, 1238, 2481, 12, 2919, 12, 1983, 11, 1129, 13, 2670, 11, 1238, 13, 1270, 11, 1238, 13, 1270, 11, 1129, 13, 1495, 11, 1433, 3459, 38073, 11, 2091, 2154, 1731, 2931, 1065, 13, 405, 11, 20, 13, 2780, 11, 21, 13, 486, 11, 16, 13, 1314, 11, 18, 13, 4089, 11, 15, 11, 15, 11, 15, 1]"
‚úÖ Best Practice: Filtering out invalid data entries.,"[26486, 227, 6705, 19939, 25, 7066, 20212, 503, 12515, 1366, 12784, 13]",0.5,4152,best_practice,531,Filtering out invalid data entries.,,4072,"            # ""2022-04-13,10708,10664,10790,10638,402712,43124771328,1.43,0.57,60,0.00,4667112399583576064,4690067230254170112,1169270784""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 366, 1238, 1828, 12, 3023, 12, 1485, 11, 940, 32583, 11, 15801, 2414, 11, 940, 37750, 11, 15801, 2548, 11, 1821, 1983, 1065, 11, 3559, 1065, 32883, 1485, 2078, 11, 16, 13, 3559, 11, 15, 13, 3553, 11, 1899, 11, 15, 13, 405, 11, 42199, 4869, 10163, 2079, 3365, 27277, 1899, 2414, 11, 42947, 405, 3134, 19214, 24970, 1558, 486, 1065, 11, 1157, 3388, 1983, 2998, 5705, 1]"
‚úÖ Best Practice: Explicit type conversion for DataFrame columns.,"[26486, 227, 6705, 19939, 25, 11884, 2099, 11315, 329, 6060, 19778, 15180, 13]",0.5,4193,best_practice,535,Explicit type conversion for DataFrame columns.,,4152,"            the_id = generate_kdata_id(entity_id=entity_id, timestamp=the_timestamp, level=level)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 62, 312, 796, 7716, 62, 74, 7890, 62, 312, 7, 26858, 62, 312, 28, 26858, 62, 312, 11, 41033, 28, 1169, 62, 16514, 27823, 11, 1241, 28, 5715, 8]"
üß† ML Signal: Data normalization by scaling values.,"[8582, 100, 254, 10373, 26484, 25, 6060, 3487, 1634, 416, 20796, 3815, 13]",0.5,4214,ml_signal,537,Data normalization by scaling values.,,4193,            open = to_float(fields[1]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 796, 284, 62, 22468, 7, 25747, 58, 16, 12962]"
üß† ML Signal: Use of lambda functions for row-wise operations.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 5752, 12, 3083, 4560, 13]",0.5,4235,ml_signal,541,Use of lambda functions for row-wise operations.,,4214,            volume = to_float(fields[5]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6115, 796, 284, 62, 22468, 7, 25747, 58, 20, 12962]"
üß† ML Signal: Conditional logic based on entity type.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 9312, 2099, 13]",0.5,4267,ml_signal,544,Conditional logic based on entity type.,,4235,            change_pct = value_to_pct(to_float(fields[8])),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 62, 79, 310, 796, 1988, 62, 1462, 62, 79, 310, 7, 1462, 62, 22468, 7, 25747, 58, 23, 60, 4008]"
‚úÖ Best Practice: Use of to_numeric with error handling for data conversion.,"[26486, 227, 6705, 19939, 25, 5765, 286, 284, 62, 77, 39223, 351, 4049, 9041, 329, 1366, 11315, 13]",0.5,4284,best_practice,548,Use of to_numeric with error handling for data conversion.,,4267,            kdatas.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 19608, 292, 13, 33295, 7]"
üß† ML Signal: Conditional assignment based on function parameters.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 16237, 1912, 319, 2163, 10007, 13]",0.5,4307,ml_signal,553,Conditional assignment based on function parameters.,,4284,"                    provider=""em"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 2625, 368, 1600]"
üß† ML Signal: Adding new columns to DataFrame.,"[8582, 100, 254, 10373, 26484, 25, 18247, 649, 15180, 284, 6060, 19778, 13]",0.5,4332,ml_signal,556,Adding new columns to DataFrame.,,4307,"                    level=level.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 28, 5715, 13, 8367, 11]"
üß† ML Signal: Use of lambda functions for row-wise string operations.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 5752, 12, 3083, 4731, 4560, 13]",0.5,4355,ml_signal,557,Use of lambda functions for row-wise string operations.,,4332,"                    open=open,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 28, 9654, 11]"
üß† ML Signal: Returning a DataFrame as a function result.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 355, 257, 2163, 1255, 13]",0.5,4378,ml_signal,560,Returning a DataFrame as a function result.,,4355,"                    low=low,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1877, 28, 9319, 11]"
‚úÖ Best Practice: Use of default parameter value for limit increases function flexibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 4179, 5732, 2163, 13688, 13]",1.0,4395,best_practice,549,Use of default parameter value for limit increases function flexibility.,,4378,                dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7]"
üß† ML Signal: Use of specific entity_flag pattern could indicate a common configuration or filter criteria.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 9312, 62, 32109, 3912, 714, 7603, 257, 2219, 8398, 393, 8106, 9987, 13]",1.0,4421,ml_signal,551,Use of specific entity_flag pattern could indicate a common configuration or filter criteria.,,4395,"                    timestamp=the_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41033, 28, 1169, 62, 16514, 27823, 11]"
üß† ML Signal: Specific fields requested could indicate common data attributes of interest.,"[8582, 100, 254, 10373, 26484, 25, 17377, 7032, 9167, 714, 7603, 2219, 1366, 12608, 286, 1393, 13]",1.0,4444,ml_signal,553,Specific fields requested could indicate common data attributes of interest.,,4421,"                    provider=""em"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 2625, 368, 1600]"
‚úÖ Best Practice: Explicit parameter naming improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 11507, 19264, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,4467,best_practice,557,Explicit parameter naming improves readability and maintainability.,,4444,"                    open=open,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 28, 9654, 11]"
"üß† ML Signal: Function with default parameter value, indicating common usage pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 11, 12739, 2219, 8748, 3912]",0.5,4490,ml_signal,554,"Function with default parameter value, indicating common usage pattern",,4467,"                    code=code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 28, 8189, 11]"
"üß† ML Signal: Hardcoded string values, indicating specific API usage pattern","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 4731, 3815, 11, 12739, 2176, 7824, 8748, 3912]",0.5,4515,ml_signal,556,"Hardcoded string values, indicating specific API usage pattern",,4490,"                    level=level.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 28, 5715, 13, 8367, 11]"
"üß† ML Signal: Hardcoded string values, indicating specific API usage pattern","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 4731, 3815, 11, 12739, 2176, 7824, 8748, 3912]",0.5,4538,ml_signal,557,"Hardcoded string values, indicating specific API usage pattern",,4515,"                    open=open,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 28, 9654, 11]"
‚úÖ Best Practice: Use of named arguments improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 19575, 1100, 1799, 290, 5529, 1799]",1.0,4561,best_practice,560,Use of named arguments improves readability and maintainability,,4538,"                    low=low,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1877, 28, 9319, 11]"
"üß† ML Signal: Use of specific enum value, indicating common usage pattern","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 33829, 1988, 11, 12739, 2219, 8748, 3912]",0.5,4584,ml_signal,560,"Use of specific enum value, indicating common usage pattern",,4561,"                    low=low,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1877, 28, 9319, 11]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,4607,best_practice,560,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,4584,"                    low=low,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1877, 28, 9319, 11]"
‚úÖ Best Practice: Convert entity_type to TradableType early to ensure consistent type usage throughout the function.,"[26486, 227, 6705, 19939, 25, 38240, 9312, 62, 4906, 284, 11974, 6030, 1903, 284, 4155, 6414, 2099, 8748, 3690, 262, 2163, 13]",1.0,4631,best_practice,568,Convert entity_type to TradableType early to ensure consistent type usage throughout the function.,,4607,        df = pd.DataFrame.from_records(kdatas),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 74, 19608, 292, 8]"
‚úÖ Best Practice: Retrieve exchanges based on entity_type to ensure valid exchange options.,"[26486, 227, 6705, 19939, 25, 4990, 30227, 14525, 1912, 319, 9312, 62, 4906, 284, 4155, 4938, 5163, 3689, 13]",1.0,4642,best_practice,572,Retrieve exchanges based on entity_type to ensure valid exchange options.,,4631,def get_basic_info(entity_id):,"[4299, 651, 62, 35487, 62, 10951, 7, 26858, 62, 312, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using assert for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,4682,sast_risk,575,Using assert for input validation can be bypassed if Python is run with optimizations.,Low,4642,"        url = ""https://emh5.eastmoney.com/api/GongSiGaiKuang/GetJiBenZiLiao""","[220, 220, 220, 220, 220, 220, 220, 19016, 796, 366, 5450, 1378, 368, 71, 20, 13, 23316, 26316, 13, 785, 14, 15042, 14, 38, 506, 42801, 38, 1872, 41733, 648, 14, 3855, 41, 72, 11696, 57, 72, 43, 13481, 1]"
‚úÖ Best Practice: Convert exchange to Exchange type to ensure consistent type usage.,"[26486, 227, 6705, 19939, 25, 38240, 5163, 284, 12516, 2099, 284, 4155, 6414, 2099, 8748, 13]",1.0,4696,best_practice,580,Convert exchange to Exchange type to ensure consistent type usage.,,4682,"    elif entity_type == ""stockhk"":","[220, 220, 220, 1288, 361, 9312, 62, 4906, 6624, 366, 13578, 71, 74, 1298]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,4707,sast_risk,599,Using assert for control flow can be bypassed if Python is run with optimizations.,Low,4696,    resp.raise_for_status(),"[220, 220, 220, 1217, 13, 40225, 62, 1640, 62, 13376, 3419]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,4724,sast_risk,624,Using assert for control flow can be bypassed if Python is run with optimizations.,Low,4707,"        entity[""entity_type""] = ""future""","[220, 220, 220, 220, 220, 220, 220, 9312, 14692, 26858, 62, 4906, 8973, 796, 366, 37443, 1]"
üß† ML Signal: The function get_top_tradable_list is called with parameters that could be used to learn patterns of tradable entities.,"[8582, 100, 254, 10373, 26484, 25, 383, 2163, 651, 62, 4852, 62, 2213, 324, 540, 62, 4868, 318, 1444, 351, 10007, 326, 714, 307, 973, 284, 2193, 7572, 286, 2083, 540, 12066, 13]",1.0,4737,ml_signal,628,The function get_top_tradable_list is called with parameters that could be used to learn patterns of tradable entities.,,4724,        futures.append(entity),"[220, 220, 220, 220, 220, 220, 220, 25650, 13, 33295, 7, 26858, 8]"
üß† ML Signal: The use of pd.concat to combine dataframes could be a pattern for learning data aggregation techniques.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 279, 67, 13, 1102, 9246, 284, 12082, 1366, 37805, 714, 307, 257, 3912, 329, 4673, 1366, 46500, 7605, 13]",1.0,4752,ml_signal,635,The use of pd.concat to combine dataframes could be a pattern for learning data aggregation techniques.,,4737,"    change_pct = row[""change_pct""]","[220, 220, 220, 1487, 62, 79, 310, 796, 5752, 14692, 3803, 62, 79, 310, 8973]"
"üß† ML Signal: Function uses a URL with query parameters, indicating a pattern of API usage.","[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 257, 10289, 351, 12405, 10007, 11, 12739, 257, 3912, 286, 7824, 8748, 13]",0.5,4774,ml_signal,629,"Function uses a URL with query parameters, indicating a pattern of API usage.",,4752,    df = pd.DataFrame.from_records(data=futures),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 7890, 28, 69, 315, 942, 8]"
"‚ö†Ô∏è SAST Risk (Medium): URL contains dynamic query parameters, which could be manipulated if not properly validated.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 4909, 8925, 12405, 10007, 11, 543, 714, 307, 25036, 611, 407, 6105, 31031, 13]",1.0,4779,sast_risk,630,"URL contains dynamic query parameters, which could be manipulated if not properly validated.",Medium,4774,    return df,"[220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Medium): URL construction with dynamic parameters can lead to injection attacks if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 351, 8925, 10007, 460, 1085, 284, 16954, 3434, 611, 17311, 389, 407, 5336, 36951, 13]",0.5,4779,sast_risk,632,URL construction with dynamic parameters can lead to injection attacks if inputs are not sanitized.,Medium,4779,,[]
‚úÖ Best Practice: Use session object for HTTP requests to leverage connection pooling.,"[26486, 227, 6705, 19939, 25, 5765, 6246, 2134, 329, 14626, 7007, 284, 16094, 4637, 5933, 278, 13]",0.5,4794,best_practice,635,Use session object for HTTP requests to leverage connection pooling.,,4779,"    change_pct = row[""change_pct""]","[220, 220, 220, 1487, 62, 79, 310, 796, 5752, 14692, 3803, 62, 79, 310, 8973]"
‚ö†Ô∏è SAST Risk (Low): Direct use of requests.get without session can lead to inefficient network usage.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 779, 286, 7007, 13, 1136, 1231, 6246, 460, 1085, 284, 30904, 3127, 8748, 13]",0.5,4826,sast_risk,638,Direct use of requests.get without session can lead to inefficient network usage.,Low,4794,"    elif code.startswith(""300"") or code.startswith(""301"") or code.startswith(""688""):","[220, 220, 220, 1288, 361, 2438, 13, 9688, 2032, 342, 7203, 6200, 4943, 393, 2438, 13, 9688, 2032, 342, 7203, 18938, 4943, 393, 2438, 13, 9688, 2032, 342, 7203, 34427, 1, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of JSON injection if the response is not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 19449, 16954, 611, 262, 2882, 318, 407, 6105, 31031, 13]",0.5,4831,sast_risk,640,Potential risk of JSON injection if the response is not properly validated.,Medium,4826,    else:,"[220, 220, 220, 2073, 25]"
"üß† ML Signal: Pattern of converting stock codes to IDs, useful for entity recognition models.","[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 4283, 12416, 284, 32373, 11, 4465, 329, 9312, 9465, 4981, 13]",0.5,4831,ml_signal,643,"Pattern of converting stock codes to IDs, useful for entity recognition models.",,4831,,[]
‚úÖ Best Practice: Use of format method for string formatting improves readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 5794, 2446, 329, 4731, 33313, 19575, 1100, 1799, 13]",0.5,4850,best_practice,657,Use of format method for string formatting improves readability.,,4831,"    resp = requests.get(url, headers=DEFAULT_HEADER)","[220, 220, 220, 1217, 796, 7007, 13, 1136, 7, 6371, 11, 24697, 28, 7206, 38865, 62, 37682, 1137, 8]"
"üß† ML Signal: Use of current date as a timestamp, indicating a pattern of time-based data logging.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 3128, 355, 257, 41033, 11, 12739, 257, 3912, 286, 640, 12, 3106, 1366, 18931, 13]",0.5,4861,ml_signal,659,"Use of current date as a timestamp, indicating a pattern of time-based data logging.",,4850,    resp.raise_for_status(),"[220, 220, 220, 1217, 13, 40225, 62, 1640, 62, 13376, 3419]"
üß† ML Signal: Conditional logic based on market values indicates a pattern for market-specific processing.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1910, 3815, 9217, 257, 3912, 329, 1910, 12, 11423, 7587, 13]",1.0,4872,ml_signal,659,Conditional logic based on market values indicates a pattern for market-specific processing.,,4861,    resp.raise_for_status(),"[220, 220, 220, 1217, 13, 40225, 62, 1640, 62, 13376, 3419]"
üß† ML Signal: Function call with specific market code suggests a pattern for handling Chinese stock codes.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 1910, 2438, 5644, 257, 3912, 329, 9041, 3999, 4283, 12416, 13]",0.5,4887,ml_signal,661,Function call with specific market code suggests a pattern for handling Chinese stock codes.,,4872,    result = json_callback_param(resp.text),"[220, 220, 220, 1255, 796, 33918, 62, 47423, 62, 17143, 7, 4363, 13, 5239, 8]"
üß† ML Signal: Specific market codes mapped to formatted strings indicate a pattern for US stock exchanges.,"[8582, 100, 254, 10373, 26484, 25, 17377, 1910, 12416, 27661, 284, 39559, 13042, 7603, 257, 3912, 329, 1294, 4283, 14525, 13]",0.5,4900,ml_signal,663,Specific market codes mapped to formatted strings indicate a pattern for US stock exchanges.,,4887,"    data = result[""data""][""diff""]","[220, 220, 220, 1366, 796, 1255, 14692, 7890, 1, 7131, 1, 26069, 8973]"
üß† ML Signal: Specific market code for Hong Kong stock exchange indicates a pattern for HK market handling.,"[8582, 100, 254, 10373, 26484, 25, 17377, 1910, 2438, 329, 9764, 9071, 4283, 5163, 9217, 257, 3912, 329, 31440, 1910, 9041, 13]",0.5,4913,ml_signal,668,Specific market code for Hong Kong stock exchange indicates a pattern for HK market handling.,,4900,        df.columns = [,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 685]"
üß† ML Signal: Iterating over exchange map suggests a pattern for dynamic market handling.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5163, 3975, 5644, 257, 3912, 329, 8925, 1910, 9041, 13]",0.5,4930,ml_signal,672,Iterating over exchange map suggests a pattern for dynamic market handling.,,4913,"            ""change_pct"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3803, 62, 79, 310, 1600]"
üß† ML Signal: Matching market flag to exchange indicates a pattern for exchange-specific processing.,"[8582, 100, 254, 10373, 26484, 25, 13225, 278, 1910, 6056, 284, 5163, 9217, 257, 3912, 329, 5163, 12, 11423, 7587, 13]",0.5,4947,ml_signal,674,Matching market flag to exchange indicates a pattern for exchange-specific processing.,,4930,"            ""turnover_rate"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 15344, 2502, 62, 4873, 1600]"
üß† ML Signal: Nested iteration over tradable types suggests a pattern for entity type mapping.,"[8582, 100, 254, 10373, 26484, 25, 399, 7287, 24415, 625, 2083, 540, 3858, 5644, 257, 3912, 329, 9312, 2099, 16855, 13]",0.5,4961,ml_signal,676,Nested iteration over tradable types suggests a pattern for entity type mapping.,,4947,"            ""high"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8929, 1600]"
üß† ML Signal: Checking if exchange is in exchanges indicates a pattern for valid exchange filtering.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 5163, 318, 287, 14525, 9217, 257, 3912, 329, 4938, 5163, 25431, 13]",0.5,4975,ml_signal,676,Checking if exchange is in exchanges indicates a pattern for valid exchange filtering.,,4961,"            ""high"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8929, 1600]"
‚ö†Ô∏è SAST Risk (Low): Returning the code directly if no conditions match may lead to unexpected results.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 262, 2438, 3264, 611, 645, 3403, 2872, 743, 1085, 284, 10059, 2482, 13]",0.5,4983,sast_risk,681,Returning the code directly if no conditions match may lead to unexpected results.,Low,4975,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Hardcoded URL can be used to identify API usage patterns,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 10289, 460, 307, 973, 284, 5911, 7824, 8748, 7572]",0.5,4997,ml_signal,676,Hardcoded URL can be used to identify API usage patterns,,4983,"            ""high"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8929, 1600]"
üß† ML Signal: Logging usage can indicate debugging or monitoring practices,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 460, 7603, 28769, 393, 9904, 6593]",0.5,4997,ml_signal,682,Logging usage can indicate debugging or monitoring practices,,4997,,[]
‚ö†Ô∏è SAST Risk (Low): Potential misuse of session object if not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 6246, 2134, 611, 407, 6105, 31031]",1.0,5017,sast_risk,685,Potential misuse of session object if not properly validated,Low,4997,"        df = df[df.turnover_rate != ""-""]","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 58, 7568, 13, 15344, 2502, 62, 4873, 14512, 27444, 8973]"
‚ö†Ô∏è SAST Risk (Low): No exception handling for network request failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 6631, 9041, 329, 3127, 2581, 15536]",1.0,5063,sast_risk,688,No exception handling for network request failures,Low,5017,"        df = df.astype({""change_pct"": ""float"", ""turnover_rate"": ""float"", ""turnover"": ""float"", ""volume"": ""float""})","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 459, 2981, 7, 4895, 3803, 62, 79, 310, 1298, 366, 22468, 1600, 366, 15344, 2502, 62, 4873, 1298, 366, 22468, 1600, 366, 15344, 2502, 1298, 366, 22468, 1600, 366, 29048, 1298, 366, 22468, 20662, 8]"
‚ö†Ô∏è SAST Risk (Low): Assumes JSON response without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 19449, 2882, 1231, 21201]",0.5,5087,sast_risk,691,Assumes JSON response without validation,Low,5063,"        df[""turnover_rate""] = df[""turnover_rate""] / 100","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 15344, 2502, 62, 4873, 8973, 796, 47764, 14692, 15344, 2502, 62, 4873, 8973, 1220, 1802]"
üß† ML Signal: Usage of list comprehensions can indicate coding style,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 8569, 507, 460, 7603, 19617, 3918]",0.5,5104,ml_signal,697,Usage of list comprehensions can indicate coding style,,5087,        if entity_type == TradableType.stock:,"[220, 220, 220, 220, 220, 220, 220, 611, 9312, 62, 4906, 6624, 11974, 6030, 13, 13578, 25]"
‚úÖ Best Practice: Use of timestamp functions for consistent time handling,"[26486, 227, 6705, 19939, 25, 5765, 286, 41033, 5499, 329, 6414, 640, 9041]",0.5,5115,best_practice,713,Use of timestamp functions for consistent time handling,,5104,def get_top_stocks(limit=100):,"[4299, 651, 62, 4852, 62, 29522, 7, 32374, 28, 3064, 2599]"
üß† ML Signal: Error logging can be used to identify error handling practices,"[8582, 100, 254, 10373, 26484, 25, 13047, 18931, 460, 307, 973, 284, 5911, 4049, 9041, 6593]",0.5,5119,ml_signal,720,Error logging can be used to identify error handling practices,,5115,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Function definition and naming pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 290, 19264, 3912]",0.5,5207,ml_signal,715,Function definition and naming pattern,,5119,"    entity_flag = ""fs=m:0+t:6+f:!2,m:0+t:13+f:!2,m:0+t:80+f:!2,m:1+t:2+f:!2,m:1+t:23+f:!2,m:0+t:81+s:2048""","[220, 220, 220, 9312, 62, 32109, 796, 366, 9501, 28, 76, 25, 15, 10, 83, 25, 21, 10, 69, 25, 0, 17, 11, 76, 25, 15, 10, 83, 25, 1485, 10, 69, 25, 0, 17, 11, 76, 25, 15, 10, 83, 25, 1795, 10, 69, 25, 0, 17, 11, 76, 25, 16, 10, 83, 25, 17, 10, 69, 25, 0, 17, 11, 76, 25, 16, 10, 83, 25, 1954, 10, 69, 25, 0, 17, 11, 76, 25, 15, 10, 83, 25, 6659, 10, 82, 25, 1238, 2780, 1]"
üß† ML Signal: Function call pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912]",0.5,5249,ml_signal,717,Function call pattern,,5207,"    fields = ""f2,f3,f5,f6,f8,f12,f14,f15,f16,f17,f20,f21""","[220, 220, 220, 7032, 796, 366, 69, 17, 11, 69, 18, 11, 69, 20, 11, 69, 21, 11, 69, 23, 11, 69, 1065, 11, 69, 1415, 11, 69, 1314, 11, 69, 1433, 11, 69, 1558, 11, 69, 1238, 11, 69, 2481, 1]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,5288,ml_signal,719,Logging usage pattern,,5249,"        entity_type=TradableType.stock, fields=fields, limit=limit, entity_flag=entity_flag, return_quote=True","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 4906, 28, 2898, 324, 540, 6030, 13, 13578, 11, 7032, 28, 25747, 11, 4179, 28, 32374, 11, 9312, 62, 32109, 28, 26858, 62, 32109, 11, 1441, 62, 22708, 28, 17821]"
üß† ML Signal: DataFrame creation from records,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 422, 4406]",0.5,5288,ml_signal,722,DataFrame creation from records,,5288,,[]
üß† ML Signal: Function call with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007]",0.5,5312,ml_signal,724,Function call with multiple parameters,,5288,"    entity_flag = ""fs=b:DLMK0144,b:DLMK0146""","[220, 220, 220, 9312, 62, 32109, 796, 366, 9501, 28, 65, 25, 19260, 33907, 486, 2598, 11, 65, 25, 19260, 33907, 486, 3510, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 17311, 389, 407, 5336, 36951]",0.5,5354,sast_risk,725,Potential SQL injection if inputs are not sanitized,Low,5312,"    fields = ""f2,f3,f5,f6,f8,f12,f14,f15,f16,f17,f20,f21""","[220, 220, 220, 7032, 796, 366, 69, 17, 11, 69, 18, 11, 69, 20, 11, 69, 21, 11, 69, 23, 11, 69, 1065, 11, 69, 1415, 11, 69, 1314, 11, 69, 1433, 11, 69, 1558, 11, 69, 1238, 11, 69, 2481, 1]"
‚úÖ Best Practice: Use of a helper function to convert entity_id to sec_id improves code readability and reusability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 31904, 2163, 284, 10385, 9312, 62, 312, 284, 792, 62, 312, 19575, 2438, 1100, 1799, 290, 302, 385, 1799, 13]",0.5,5378,best_practice,724,Use of a helper function to convert entity_id to sec_id improves code readability and reusability.,,5354,"    entity_flag = ""fs=b:DLMK0144,b:DLMK0146""","[220, 220, 220, 9312, 62, 32109, 796, 366, 9501, 28, 65, 25, 19260, 33907, 486, 2598, 11, 65, 25, 19260, 33907, 486, 3510, 1]"
‚ö†Ô∏è SAST Risk (Low): URL construction with f-strings can lead to injection if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10289, 5103, 351, 277, 12, 37336, 460, 1085, 284, 16954, 611, 17311, 389, 407, 5336, 36951, 13]",1.0,5392,sast_risk,726,URL construction with f-strings can lead to injection if inputs are not sanitized.,Low,5378,    return get_top_tradable_list(,"[220, 220, 220, 1441, 651, 62, 4852, 62, 2213, 324, 540, 62, 4868, 7]"
‚úÖ Best Practice: Logging the URL for debugging purposes.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 10289, 329, 28769, 4959, 13]",0.5,5396,best_practice,728,Logging the URL for debugging purposes.,,5392,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Use of session for requests can improve performance by reusing connections.,"[26486, 227, 6705, 19939, 25, 5765, 286, 6246, 329, 7007, 460, 2987, 2854, 416, 302, 3500, 8787, 13]",0.5,5405,best_practice,731,Use of session for requests can improve performance by reusing connections.,,5396,def get_tradable_list(,"[4299, 651, 62, 2213, 324, 540, 62, 4868, 7]"
‚ö†Ô∏è SAST Risk (Medium): Directly manipulating response text without validation can lead to security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 29349, 2882, 2420, 1231, 21201, 460, 1085, 284, 2324, 2428, 13]",1.0,5417,sast_risk,736,Directly manipulating response text without validation can lead to security issues.,Medium,5405,"    block_category=BlockCategory.concept,","[220, 220, 220, 2512, 62, 22872, 28, 12235, 27313, 13, 43169, 11]"
‚úÖ Best Practice: Closing the response to free up resources.,"[26486, 227, 6705, 19939, 25, 47055, 262, 2882, 284, 1479, 510, 4133, 13]",1.0,5418,best_practice,737,Closing the response to free up resources.,,5417,):,[2599]
üß† ML Signal: Pattern of filtering and transforming data from an API response.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 25431, 290, 25449, 1366, 422, 281, 7824, 2882, 13]",0.5,5419,ml_signal,737,Pattern of filtering and transforming data from an API response.,,5418,):,[2599]
üß† ML Signal: Recursive function call pattern for pagination.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 329, 42208, 1883, 13]",0.5,5465,ml_signal,763,Recursive function call pattern for pagination.,,5419,"            entity_flag = ""fs=i:100.NDX,i:100.DJIA,i:100.SPX,i:100.UDI""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 32109, 796, 366, 9501, 28, 72, 25, 3064, 13, 8575, 55, 11, 72, 25, 3064, 13, 35028, 3539, 11, 72, 25, 3064, 13, 4303, 55, 11, 72, 25, 3064, 13, 8322, 40, 1]"
‚úÖ Best Practice: Logging errors with detailed information for troubleshooting.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 8563, 351, 6496, 1321, 329, 14979, 35486, 13]",0.5,5502,best_practice,771,Logging errors with detailed information for troubleshooting.,,5465,        # m‰∏∫‰∫§ÊòìÊâÄ‰ª£Á†ÅÔºåt‰∏∫‰∫§ÊòìÁ±ªÂûã,"[220, 220, 220, 220, 220, 220, 220, 1303, 285, 10310, 118, 12859, 97, 23626, 241, 33699, 222, 47987, 163, 254, 223, 171, 120, 234, 83, 10310, 118, 12859, 97, 23626, 241, 163, 109, 119, 161, 252, 233]"
üß† ML Signal: Function decodes entity_id into components and processes based on type and exchange,"[8582, 100, 254, 10373, 26484, 25, 15553, 875, 4147, 9312, 62, 312, 656, 6805, 290, 7767, 1912, 319, 2099, 290, 5163]",0.5,5521,ml_signal,765,Function decodes entity_id into components and processes based on type and exchange,,5502,            if exchange == Exchange.sz:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 5163, 6624, 12516, 13, 82, 89, 25]"
"üß† ML Signal: Mapping of exchanges to specific flags, useful for feature extraction","[8582, 100, 254, 10373, 26484, 25, 337, 5912, 286, 14525, 284, 2176, 9701, 11, 4465, 329, 3895, 22236]",0.5,5545,ml_signal,778,"Mapping of exchanges to specific flags, useful for feature extraction",,5521,                # t=6 ‰∏ªÊùø,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 256, 28, 21, 220, 10310, 119, 30266, 123]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if Exchange is not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 12516, 318, 407, 31031, 393, 5336, 36951]",0.5,5569,sast_risk,778,Potential risk if Exchange is not validated or sanitized,Low,5545,                # t=6 ‰∏ªÊùø,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 256, 28, 21, 220, 10310, 119, 30266, 123]"
‚úÖ Best Practice: Consider adding type hints for the return type of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 2099, 286, 262, 2163]",0.5,5608,best_practice,794,Consider adding type hints for the return type of the function,,5569,"                entity_flag = f""fs=m:105+t:1,m:105+t:3""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 32109, 796, 277, 1, 9501, 28, 76, 25, 13348, 10, 83, 25, 16, 11, 76, 25, 13348, 10, 83, 25, 18, 1]"
üß† ML Signal: Conversion of input to a specific type (Exchange) indicates a pattern of type normalization,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 5128, 284, 257, 2176, 2099, 357, 3109, 3803, 8, 9217, 257, 3912, 286, 2099, 3487, 1634]",0.5,5627,ml_signal,796,Conversion of input to a specific type (Exchange) indicates a pattern of type normalization,,5608,                # t=1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 256, 28, 16]"
üß† ML Signal: Use of a dictionary for mapping suggests a pattern of key-value retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 329, 16855, 5644, 257, 3912, 286, 1994, 12, 8367, 45069]",0.5,5666,ml_signal,798,Use of a dictionary for mapping suggests a pattern of key-value retrieval,,5627,"                entity_flag = f""fs=m:106+t:1,m:105+t:3""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 32109, 796, 277, 1, 9501, 28, 76, 25, 15801, 10, 83, 25, 16, 11, 76, 25, 13348, 10, 83, 25, 18, 1]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,5693,best_practice,797,Consider adding a docstring to describe the function's purpose and parameters.,,5666,                # t=3 ‰∏≠Ê¶ÇËÇ°,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 256, 28, 18, 220, 40792, 162, 99, 224, 164, 224, 94]"
‚úÖ Best Practice: Ensure the input is of the correct type by converting it to AdjustType.,"[26486, 227, 6705, 19939, 25, 48987, 262, 5128, 318, 286, 262, 3376, 2099, 416, 23202, 340, 284, 20292, 6030, 13]",1.0,5711,best_practice,799,Ensure the input is of the correct type by converting it to AdjustType.,,5693,            if exchange == Exchange.cn:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 5163, 6624, 12516, 13, 31522, 25]"
üß† ML Signal: Using conditional checks to map enum values to integers.,"[8582, 100, 254, 10373, 26484, 25, 8554, 26340, 8794, 284, 3975, 33829, 3815, 284, 37014, 13]",0.5,5743,ml_signal,801,Using conditional checks to map enum values to integers.,,5711,"                    entity_flag = entity_flag + ""+t:2""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 32109, 796, 9312, 62, 32109, 1343, 43825, 83, 25, 17, 1]"
"üß† ML Signal: Function converts interval levels to numeric flags, useful for feature extraction","[8582, 100, 254, 10373, 26484, 25, 15553, 26161, 16654, 2974, 284, 35575, 9701, 11, 4465, 329, 3895, 22236]",0.5,5764,ml_signal,805,"Function converts interval levels to numeric flags, useful for feature extraction",,5743,                    assert False,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6818, 10352]"
‚úÖ Best Practice: Explicitly converting level to IntervalLevel ensures type consistency,"[26486, 227, 6705, 19939, 25, 11884, 306, 23202, 1241, 284, 4225, 2100, 4971, 19047, 2099, 15794]",0.5,5798,best_practice,807,Explicitly converting level to IntervalLevel ensures type consistency,,5764,"        # f2, f3, f4, f12, f13, f14, f19, f111, f148","[220, 220, 220, 220, 220, 220, 220, 1303, 277, 17, 11, 277, 18, 11, 277, 19, 11, 277, 1065, 11, 277, 1485, 11, 277, 1415, 11, 277, 1129, 11, 277, 16243, 11, 277, 18294]"
üß† ML Signal: Mapping specific interval levels to numeric values,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2176, 16654, 2974, 284, 35575, 3815]",0.5,5825,ml_signal,809,Mapping specific interval levels to numeric values,,5798,"        if entity_type in (TradableType.stock, TradableType.stockhk):","[220, 220, 220, 220, 220, 220, 220, 611, 9312, 62, 4906, 287, 357, 2898, 324, 540, 6030, 13, 13578, 11, 11974, 6030, 13, 13578, 71, 74, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using assert for control flow can be disabled in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 3227]",1.0,6067,sast_risk,826,Using assert for control flow can be disabled in production,Low,5825,"    category_stocks_url = f""http://48.push2.eastmoney.com/api/qt/clist/get?cb=jQuery11240710111145777397_{now_timestamp() - 1}&pn=1&pz=1000&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&wbp2u=4668014655929990|0|1|0|web&fid=f3&fs=b:{code}+f:!50&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152,f45&_={now_timestamp()}""","[220, 220, 220, 6536, 62, 29522, 62, 6371, 796, 277, 1, 4023, 1378, 2780, 13, 14689, 17, 13, 23316, 26316, 13, 785, 14, 15042, 14, 39568, 14, 565, 396, 14, 1136, 30, 21101, 28, 73, 20746, 14686, 1821, 4869, 486, 1157, 18781, 29331, 33372, 23330, 2197, 62, 16514, 27823, 3419, 532, 352, 92, 5, 21999, 28, 16, 5, 79, 89, 28, 12825, 5, 7501, 28, 16, 5, 37659, 28, 16, 5, 315, 28, 17457, 16, 67, 24, 1860, 65, 36676, 4531, 9879, 12993, 24, 66, 1983, 69, 21, 69, 4524, 2075, 30368, 5, 2704, 926, 28, 17, 5, 16340, 83, 28, 17, 5, 39346, 79, 17, 84, 28, 19, 35809, 486, 3510, 38605, 1959, 34155, 91, 15, 91, 16, 91, 15, 91, 12384, 5, 69, 312, 28, 69, 18, 5, 9501, 28, 65, 29164, 8189, 92, 10, 69, 25, 0, 1120, 5, 25747, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 11, 69, 24, 11, 69, 940, 11, 69, 1065, 11, 69, 1485, 11, 69, 1415, 11, 69, 1314, 11, 69, 1433, 11, 69, 1558, 11, 69, 1507, 11, 69, 1238, 11, 69, 2481, 11, 69, 1954, 11, 69, 1731, 11, 69, 1495, 11, 69, 1828, 11, 69, 1157, 11, 69, 5237, 11, 69, 12762, 11, 69, 20809, 11, 69, 15363, 11, 69, 17827, 11, 69, 2231, 5, 62, 34758, 2197, 62, 16514, 27823, 3419, 36786]"
üß† ML Signal: Function definition with specific naming pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 19264, 3912]",1.0,6085,ml_signal,824,Function definition with specific naming pattern,,6067,"def get_block_stocks(block_id, name="""", session=None):","[4299, 651, 62, 9967, 62, 29522, 7, 9967, 62, 312, 11, 1438, 2625, 1600, 6246, 28, 14202, 2599]"
üß† ML Signal: Unpacking tuple from function return,"[8582, 100, 254, 10373, 26484, 25, 791, 41291, 46545, 422, 2163, 1441]",1.0,6327,ml_signal,826,Unpacking tuple from function return,,6085,"    category_stocks_url = f""http://48.push2.eastmoney.com/api/qt/clist/get?cb=jQuery11240710111145777397_{now_timestamp() - 1}&pn=1&pz=1000&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&wbp2u=4668014655929990|0|1|0|web&fid=f3&fs=b:{code}+f:!50&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152,f45&_={now_timestamp()}""","[220, 220, 220, 6536, 62, 29522, 62, 6371, 796, 277, 1, 4023, 1378, 2780, 13, 14689, 17, 13, 23316, 26316, 13, 785, 14, 15042, 14, 39568, 14, 565, 396, 14, 1136, 30, 21101, 28, 73, 20746, 14686, 1821, 4869, 486, 1157, 18781, 29331, 33372, 23330, 2197, 62, 16514, 27823, 3419, 532, 352, 92, 5, 21999, 28, 16, 5, 79, 89, 28, 12825, 5, 7501, 28, 16, 5, 37659, 28, 16, 5, 315, 28, 17457, 16, 67, 24, 1860, 65, 36676, 4531, 9879, 12993, 24, 66, 1983, 69, 21, 69, 4524, 2075, 30368, 5, 2704, 926, 28, 17, 5, 16340, 83, 28, 17, 5, 39346, 79, 17, 84, 28, 19, 35809, 486, 3510, 38605, 1959, 34155, 91, 15, 91, 16, 91, 15, 91, 12384, 5, 69, 312, 28, 69, 18, 5, 9501, 28, 65, 29164, 8189, 92, 10, 69, 25, 0, 1120, 5, 25747, 28, 69, 16, 11, 69, 17, 11, 69, 18, 11, 69, 19, 11, 69, 20, 11, 69, 21, 11, 69, 22, 11, 69, 23, 11, 69, 24, 11, 69, 940, 11, 69, 1065, 11, 69, 1485, 11, 69, 1415, 11, 69, 1314, 11, 69, 1433, 11, 69, 1558, 11, 69, 1507, 11, 69, 1238, 11, 69, 2481, 11, 69, 1954, 11, 69, 1731, 11, 69, 1495, 11, 69, 1828, 11, 69, 1157, 11, 69, 5237, 11, 69, 12762, 11, 69, 20809, 11, 69, 15363, 11, 69, 17827, 11, 69, 2231, 5, 62, 34758, 2197, 62, 16514, 27823, 3419, 36786]"
üß† ML Signal: Conditional logic based on entity type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 9312, 2099]",1.0,6354,ml_signal,828,Conditional logic based on entity type,,6327,"        resp = session.get(category_stocks_url, headers=DEFAULT_HEADER)","[220, 220, 220, 220, 220, 220, 220, 1217, 796, 6246, 13, 1136, 7, 22872, 62, 29522, 62, 6371, 11, 24697, 28, 7206, 38865, 62, 37682, 1137, 8]"
‚úÖ Best Practice: Clear and concise string manipulation,"[26486, 227, 6705, 19939, 25, 11459, 290, 35327, 4731, 17512]",0.5,6381,best_practice,830,Clear and concise string manipulation,,6354,"        resp = requests.get(category_stocks_url, headers=DEFAULT_HEADER)","[220, 220, 220, 220, 220, 220, 220, 1217, 796, 7007, 13, 1136, 7, 22872, 62, 29522, 62, 6371, 11, 24697, 28, 7206, 38865, 62, 37682, 1137, 8]"
üß† ML Signal: Conditional logic based on entity type and substring check,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 9312, 2099, 290, 3293, 1806, 2198]",1.0,6399,ml_signal,832,Conditional logic based on entity type and substring check,,6381,"    data = json_callback_param(resp.text)[""data""]","[220, 220, 220, 1366, 796, 33918, 62, 47423, 62, 17143, 7, 4363, 13, 5239, 8, 14692, 7890, 8973]"
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",0.5,6405,best_practice,834,Use of f-string for string formatting,,6399,    if data:,"[220, 220, 220, 611, 1366, 25]"
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",0.5,6417,best_practice,836,Use of f-string for string formatting,,6405,        for result in results:,"[220, 220, 220, 220, 220, 220, 220, 329, 1255, 287, 2482, 25]"
üß† ML Signal: Function uses a series of conditional checks to map input codes to specific values.,"[8582, 100, 254, 10373, 26484, 25, 15553, 3544, 257, 2168, 286, 26340, 8794, 284, 3975, 5128, 12416, 284, 2176, 3815, 13]",0.5,6435,ml_signal,832,Function uses a series of conditional checks to map input codes to specific values.,,6417,"    data = json_callback_param(resp.text)[""data""]","[220, 220, 220, 1366, 796, 33918, 62, 47423, 62, 17143, 7, 4363, 13, 5239, 8, 14692, 7890, 8973]"
"‚ö†Ô∏è SAST Risk (High): The function get_stock_turnover() is called without being defined or imported, leading to a potential NameError.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 383, 2163, 651, 62, 13578, 62, 15344, 2502, 3419, 318, 1444, 1231, 852, 5447, 393, 17392, 11, 3756, 284, 257, 2785, 6530, 12331, 13]",0.5,6459,sast_risk,847,"The function get_stock_turnover() is called without being defined or imported, leading to a potential NameError.",High,6435,"                    ""code"": code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 2438, 11]"
"‚úÖ Best Practice: Using __all__ to define public API of the module, which improves code maintainability and readability.","[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 11, 543, 19575, 2438, 5529, 1799, 290, 1100, 1799, 13]",0.5,6483,best_practice,847,"Using __all__ to define public API of the module, which improves code maintainability and readability.",,6459,"                    ""code"": code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 2438, 11]"

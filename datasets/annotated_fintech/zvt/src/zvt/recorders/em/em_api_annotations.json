[
  {
    "line": 9,
    "text": "import sqlalchemy",
    "annotation": "\u2705 Best Practice: Grouping imports by standard library, third-party, and local modules improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      44161,
      282,
      26599
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard library, third-party, and local modules improves readability."
  },
  {
    "line": 32,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: Use of logging indicates tracking and debugging practices.",
    "confidence": 1.0,
    "tokens": [
      8
    ],
    "start_token": 4,
    "end_token": 5,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      18931,
      9217,
      9646,
      290,
      28769,
      6593,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of logging indicates tracking and debugging practices."
  },
  {
    "line": 32,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: Function signature and parameters can be used to understand API usage patterns",
    "confidence": 1.0,
    "tokens": [
      8
    ],
    "start_token": 5,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      290,
      10007,
      460,
      307,
      973,
      284,
      1833,
      7824,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function signature and parameters can be used to understand API usage patterns"
  },
  {
    "line": 33,
    "text": "from zvt.utils.utils import to_float, json_callback_param",
    "annotation": "\ud83e\udde0 ML Signal: API call pattern with specific parameters",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      26791,
      1330,
      284,
      62,
      22468,
      11,
      33918,
      62,
      47423,
      62,
      17143
    ],
    "start_token": 6,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      3912,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "API call pattern with specific parameters"
  },
  {
    "line": 45,
    "text": "        sort=\"desc\",",
    "annotation": "\u2705 Best Practice: Initialize an empty list before appending items",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      2625,
      20147,
      1600
    ],
    "start_token": 23,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      281,
      6565,
      1351,
      878,
      598,
      1571,
      3709
    ],
    "label": "best_practice",
    "reason": "Initialize an empty list before appending items"
  },
  {
    "line": 46,
    "text": "        pn=pn,",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      77,
      28,
      21999,
      11
    ],
    "start_token": 34,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 46,
    "text": "        pn=pn,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of constructing dictionary with specific keys",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      77,
      28,
      21999,
      11
    ],
    "start_token": 46,
    "end_token": 58,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      30580,
      22155,
      351,
      2176,
      8251
    ],
    "label": "ml_signal",
    "reason": "Pattern of constructing dictionary with specific keys"
  },
  {
    "line": 58,
    "text": "                \"timestamp\": to_pd_timestamp(date),",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for dynamic string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      4475,
      828
    ],
    "start_token": 58,
    "end_token": 86,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      8925,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for dynamic string formatting"
  },
  {
    "line": 58,
    "text": "                \"timestamp\": to_pd_timestamp(date),",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date to timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      4475,
      828
    ],
    "start_token": 86,
    "end_token": 114,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      284,
      41033
    ],
    "label": "ml_signal",
    "reason": "Conversion of date to timestamp"
  },
  {
    "line": 58,
    "text": "                \"timestamp\": to_pd_timestamp(date),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing keys in item dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      4475,
      828
    ],
    "start_token": 114,
    "end_token": 142,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      8251,
      287,
      2378,
      22155
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing keys in item dictionary"
  },
  {
    "line": 70,
    "text": "                \"timestamp\": to_pd_timestamp(date),",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for dynamic string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      4475,
      828
    ],
    "start_token": 142,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      8925,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for dynamic string formatting"
  },
  {
    "line": 71,
    "text": "                \"code\": \"US\",",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date to timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      366,
      2937,
      1600
    ],
    "start_token": 170,
    "end_token": 191,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      284,
      41033
    ],
    "label": "ml_signal",
    "reason": "Conversion of date to timestamp"
  },
  {
    "line": 72,
    "text": "                \"yield_2\": item.get(\"EMG00001306\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing keys in item dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      88,
      1164,
      62,
      17,
      1298,
      2378,
      13,
      1136,
      7203,
      3620,
      38,
      2388,
      12952,
      21,
      12340
    ],
    "start_token": 191,
    "end_token": 222,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      8251,
      287,
      2378,
      22155
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing keys in item dictionary"
  },
  {
    "line": 81,
    "text": "# \u673a\u6784\u6301\u4ed3\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Return statement at the end of the function",
    "confidence": 1.0,
    "tokens": [
      2,
      42164,
      118,
      162,
      252,
      226,
      162,
      234,
      223,
      20015,
      241,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 222,
    "end_token": 237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      379,
      262,
      886,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Return statement at the end of the function"
  },
  {
    "line": 71,
    "text": "                \"code\": \"US\",",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters, useful for learning function usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      366,
      2937,
      1600
    ],
    "start_token": 237,
    "end_token": 258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      11,
      4465,
      329,
      4673,
      2163,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters, useful for learning function usage patterns"
  },
  {
    "line": 72,
    "text": "                \"yield_2\": item.get(\"EMG00001306\"),",
    "annotation": "\ud83e\udde0 ML Signal: Function call with keyword arguments, useful for learning API usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      88,
      1164,
      62,
      17,
      1298,
      2378,
      13,
      1136,
      7203,
      3620,
      38,
      2388,
      12952,
      21,
      12340
    ],
    "start_token": 258,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      21179,
      7159,
      11,
      4465,
      329,
      4673,
      7824,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function call with keyword arguments, useful for learning API usage patterns"
  },
  {
    "line": 77,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Function call with dynamic argument, useful for learning how functions are composed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 289,
    "end_token": 297,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      8925,
      4578,
      11,
      4465,
      329,
      4673,
      703,
      5499,
      389,
      13160
    ],
    "label": "ml_signal",
    "reason": "Function call with dynamic argument, useful for learning how functions are composed"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with date range parameters, common in time-series data processing",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 297,
    "end_token": 297,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3128,
      2837,
      10007,
      11,
      2219,
      287,
      640,
      12,
      25076,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Function with date range parameters, common in time-series data processing"
  },
  {
    "line": 81,
    "text": "# \u673a\u6784\u6301\u4ed3\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Convert date to string format for consistency",
    "confidence": 1.0,
    "tokens": [
      2,
      42164,
      118,
      162,
      252,
      226,
      162,
      234,
      223,
      20015,
      241,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 297,
    "end_token": 312,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3128,
      284,
      4731,
      5794,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert date to string format for consistency"
  },
  {
    "line": 83,
    "text": "    return get_em_data(",
    "annotation": "\u2705 Best Practice: Default value handling for optional parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 312,
    "end_token": 322,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      1988,
      9041,
      329,
      11902,
      10007
    ],
    "label": "best_practice",
    "reason": "Default value handling for optional parameters"
  },
  {
    "line": 84,
    "text": "        request_type=\"RPT_F10_MAIN_ORGHOLD\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of current timestamp as a default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      37,
      940,
      62,
      5673,
      1268,
      62,
      1581,
      17511,
      15173,
      1600
    ],
    "start_token": 322,
    "end_token": 346,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1459,
      41033,
      355,
      257,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Use of current timestamp as a default value"
  },
  {
    "line": 84,
    "text": "        request_type=\"RPT_F10_MAIN_ORGHOLD\",",
    "annotation": "\u2705 Best Practice: Convert date to string format for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      37,
      940,
      62,
      5673,
      1268,
      62,
      1581,
      17511,
      15173,
      1600
    ],
    "start_token": 346,
    "end_token": 370,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3128,
      284,
      4731,
      5794,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert date to string format for consistency"
  },
  {
    "line": 89,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple parameters, indicating complex data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 370,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      10007,
      11,
      12739,
      3716,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple parameters, indicating complex data retrieval"
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific request type for data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 374,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      2581,
      2099,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of specific request type for data retrieval"
  },
  {
    "line": 93,
    "text": "    start_date = to_time_str(start_date)",
    "annotation": "\ud83e\udde0 ML Signal: Requesting all fields, indicating comprehensive data usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      4475,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      4475,
      8
    ],
    "start_token": 374,
    "end_token": 391,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19390,
      278,
      477,
      7032,
      11,
      12739,
      9815,
      1366,
      8748
    ],
    "label": "ml_signal",
    "reason": "Requesting all fields, indicating comprehensive data usage"
  },
  {
    "line": 93,
    "text": "    start_date = to_time_str(start_date)",
    "annotation": "\ud83e\udde0 ML Signal: Specifying data source, indicating data provenance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      4475,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      4475,
      8
    ],
    "start_token": 391,
    "end_token": 408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      1366,
      2723,
      11,
      12739,
      1366,
      9157,
      590
    ],
    "label": "ml_signal",
    "reason": "Specifying data source, indicating data provenance"
  },
  {
    "line": 93,
    "text": "    start_date = to_time_str(start_date)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      4475,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      4475,
      8
    ],
    "start_token": 408,
    "end_token": 425,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for SQL injection if filters are not properly sanitized"
  },
  {
    "line": 99,
    "text": "        fields=\"ALL\",",
    "annotation": "\ud83e\udde0 ML Signal: Sorting by multiple fields, indicating data organization preferences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      7036,
      1600
    ],
    "start_token": 425,
    "end_token": 436,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      416,
      3294,
      7032,
      11,
      12739,
      1366,
      4009,
      15387
    ],
    "label": "ml_signal",
    "reason": "Sorting by multiple fields, indicating data organization preferences"
  },
  {
    "line": 101,
    "text": "        filters=f\"(TRADE_DATE>='{start_date}')(TRADE_DATE<='{end_date}')\",",
    "annotation": "\ud83e\udde0 ML Signal: Ascending sort order, indicating preference for chronological data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      69,
      18109,
      5446,
      19266,
      62,
      35,
      6158,
      29,
      11639,
      90,
      9688,
      62,
      4475,
      92,
      6,
      5769,
      5446,
      19266,
      62,
      35,
      6158,
      27,
      11639,
      90,
      437,
      62,
      4475,
      92,
      11537,
      1600
    ],
    "start_token": 436,
    "end_token": 475,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29469,
      1571,
      3297,
      1502,
      11,
      12739,
      12741,
      329,
      45946,
      1366
    ],
    "label": "ml_signal",
    "reason": "Ascending sort order, indicating preference for chronological data"
  },
  {
    "line": 92,
    "text": "def get_dragon_and_tiger_list(start_date, end_date=None):",
    "annotation": "\ud83e\udde0 ML Signal: Function name suggests a specific domain-related operation, useful for domain-specific model training",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      14844,
      62,
      392,
      62,
      83,
      8254,
      62,
      4868,
      7,
      9688,
      62,
      4475,
      11,
      886,
      62,
      4475,
      28,
      14202,
      2599
    ],
    "start_token": 475,
    "end_token": 497,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5644,
      257,
      2176,
      7386,
      12,
      5363,
      4905,
      11,
      4465,
      329,
      7386,
      12,
      11423,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Function name suggests a specific domain-related operation, useful for domain-specific model training"
  },
  {
    "line": 93,
    "text": "    start_date = to_time_str(start_date)",
    "annotation": "\u2705 Best Practice: Use of descriptive parameter names improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      4475,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      4475,
      8
    ],
    "start_token": 497,
    "end_token": 514,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      11507,
      3891,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive parameter names improves code readability"
  },
  {
    "line": 93,
    "text": "    start_date = to_time_str(start_date)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded request type indicates a specific API usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      4475,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      62,
      4475,
      8
    ],
    "start_token": 514,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      2581,
      2099,
      9217,
      257,
      2176,
      7824,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Hardcoded request type indicates a specific API usage pattern"
  },
  {
    "line": 98,
    "text": "        request_type=\"RPT_DAILYBILLBOARD_DETAILS\",",
    "annotation": "\ud83e\udde0 ML Signal: Specific fields requested can indicate data importance or relevance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      5631,
      33340,
      39888,
      8202,
      9795,
      62,
      35,
      20892,
      45484,
      1600
    ],
    "start_token": 531,
    "end_token": 555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      7032,
      9167,
      460,
      7603,
      1366,
      6817,
      393,
      23082
    ],
    "label": "ml_signal",
    "reason": "Specific fields requested can indicate data importance or relevance"
  },
  {
    "line": 100,
    "text": "        source=\"DataCenter\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of a filter function indicates a pattern of data selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2723,
      2625,
      6601,
      23656,
      1600
    ],
    "start_token": 555,
    "end_token": 567,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      8106,
      2163,
      9217,
      257,
      3912,
      286,
      1366,
      6356
    ],
    "label": "ml_signal",
    "reason": "Use of a filter function indicates a pattern of data selection"
  },
  {
    "line": 102,
    "text": "        sort_by=\"TRADE_DATE,SECURITY_CODE\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if params are constructed from untrusted input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      5446,
      19266,
      62,
      35,
      6158,
      11,
      23683,
      4261,
      9050,
      62,
      34,
      16820,
      1600
    ],
    "start_token": 567,
    "end_token": 591,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      42287,
      389,
      12006,
      422,
      1418,
      81,
      8459,
      5128
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if params are constructed from untrusted input"
  },
  {
    "line": 102,
    "text": "        sort_by=\"TRADE_DATE,SECURITY_CODE\",",
    "annotation": "\ud83e\udde0 ML Signal: Sorting preferences can indicate data processing patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      5446,
      19266,
      62,
      35,
      6158,
      11,
      23683,
      4261,
      9050,
      62,
      34,
      16820,
      1600
    ],
    "start_token": 591,
    "end_token": 615,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      15387,
      460,
      7603,
      1366,
      7587,
      7572
    ],
    "label": "ml_signal",
    "reason": "Sorting preferences can indicate data processing patterns"
  },
  {
    "line": 101,
    "text": "        filters=f\"(TRADE_DATE>='{start_date}')(TRADE_DATE<='{end_date}')\",",
    "annotation": "\ud83e\udde0 ML Signal: Function name suggests a pattern of retrieving report dates for a holder",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      69,
      18109,
      5446,
      19266,
      62,
      35,
      6158,
      29,
      11639,
      90,
      9688,
      62,
      4475,
      92,
      6,
      5769,
      5446,
      19266,
      62,
      35,
      6158,
      27,
      11639,
      90,
      437,
      62,
      4475,
      92,
      11537,
      1600
    ],
    "start_token": 615,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5644,
      257,
      3912,
      286,
      50122,
      989,
      9667,
      329,
      257,
      15762
    ],
    "label": "ml_signal",
    "reason": "Function name suggests a pattern of retrieving report dates for a holder"
  },
  {
    "line": 102,
    "text": "        sort_by=\"TRADE_DATE,SECURITY_CODE\",",
    "annotation": "\u2705 Best Practice: Using a descriptive function name for `get_em_data` indicates its purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      5446,
      19266,
      62,
      35,
      6158,
      11,
      23683,
      4261,
      9050,
      62,
      34,
      16820,
      1600
    ],
    "start_token": 654,
    "end_token": 678,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      35644,
      2163,
      1438,
      329,
      4600,
      1136,
      62,
      368,
      62,
      7890,
      63,
      9217,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Using a descriptive function name for `get_em_data` indicates its purpose"
  },
  {
    "line": 102,
    "text": "        sort_by=\"TRADE_DATE,SECURITY_CODE\",",
    "annotation": "\u2705 Best Practice: Using named parameters improves readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      5446,
      19266,
      62,
      35,
      6158,
      11,
      23683,
      4261,
      9050,
      62,
      34,
      16820,
      1600
    ],
    "start_token": 678,
    "end_token": 702,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3706,
      10007,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using named parameters improves readability"
  },
  {
    "line": 108,
    "text": "def get_dragon_and_tiger(code, start_date=None):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a helper function to generate filters based on code",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      14844,
      62,
      392,
      62,
      83,
      8254,
      7,
      8189,
      11,
      923,
      62,
      4475,
      28,
      14202,
      2599
    ],
    "start_token": 702,
    "end_token": 720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      7716,
      16628,
      1912,
      319,
      2438
    ],
    "label": "ml_signal",
    "reason": "Use of a helper function to generate filters based on code"
  },
  {
    "line": 109,
    "text": "    return get_em_data(",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 720,
    "end_token": 730,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for data retrieval"
  },
  {
    "line": 110,
    "text": "        request_type=\"RPT_OPERATEDEPT_TRADE\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific request type indicating a pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      31054,
      11617,
      8905,
      51,
      62,
      5446,
      19266,
      1600
    ],
    "start_token": 730,
    "end_token": 752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2581,
      2099,
      12739,
      257,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific request type indicating a pattern for data retrieval"
  },
  {
    "line": 110,
    "text": "        request_type=\"RPT_OPERATEDEPT_TRADE\",",
    "annotation": "\u2705 Best Practice: Using named arguments improves readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      31054,
      11617,
      8905,
      51,
      62,
      5446,
      19266,
      1600
    ],
    "start_token": 752,
    "end_token": 774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3706,
      7159,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Using named arguments improves readability and maintainability"
  },
  {
    "line": 116,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Function call with dynamic filters based on input parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 774,
    "end_token": 778,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      8925,
      16628,
      1912,
      319,
      5128,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function call with dynamic filters based on input parameter"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Sorting parameters are explicitly defined, improving clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 778,
    "end_token": 778,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      10007,
      389,
      11777,
      5447,
      11,
      10068,
      16287
    ],
    "label": "best_practice",
    "reason": "Sorting parameters are explicitly defined, improving clarity"
  },
  {
    "line": 117,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific pattern of parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 778,
    "end_token": 778,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      3912,
      286,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific pattern of parameters"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific API call pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 778,
    "end_token": 778,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      7824,
      869,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific API call pattern"
  },
  {
    "line": 121,
    "text": "    return get_em_data(",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded request type indicating a specific data retrieval pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 778,
    "end_token": 788,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      2581,
      2099,
      12739,
      257,
      2176,
      1366,
      45069,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded request type indicating a specific data retrieval pattern"
  },
  {
    "line": 123,
    "text": "        fields=\"END_DATE,IS_DEFAULT,IS_REPORTDATE\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific fields indicating a pattern in data selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      10619,
      62,
      35,
      6158,
      11,
      1797,
      62,
      7206,
      38865,
      11,
      1797,
      62,
      2200,
      15490,
      35,
      6158,
      1600
    ],
    "start_token": 788,
    "end_token": 814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      7032,
      12739,
      257,
      3912,
      287,
      1366,
      6356
    ],
    "label": "ml_signal",
    "reason": "Use of specific fields indicating a pattern in data selection"
  },
  {
    "line": 124,
    "text": "        filters=generate_filters(code=code),",
    "annotation": "\ud83e\udde0 ML Signal: Use of a function to generate filters, indicating a pattern in data filtering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      828
    ],
    "start_token": 814,
    "end_token": 833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2163,
      284,
      7716,
      16628,
      11,
      12739,
      257,
      3912,
      287,
      1366,
      25431
    ],
    "label": "ml_signal",
    "reason": "Use of a function to generate filters, indicating a pattern in data filtering"
  },
  {
    "line": 123,
    "text": "        fields=\"END_DATE,IS_DEFAULT,IS_REPORTDATE\",",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple parameters, indicating a pattern of data processing or transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      10619,
      62,
      35,
      6158,
      11,
      1797,
      62,
      7206,
      38865,
      11,
      1797,
      62,
      2200,
      15490,
      35,
      6158,
      1600
    ],
    "start_token": 833,
    "end_token": 859,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7587,
      393,
      13389
    ],
    "label": "ml_signal",
    "reason": "Function with multiple parameters, indicating a pattern of data processing or transformation"
  },
  {
    "line": 124,
    "text": "        filters=generate_filters(code=code),",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific request type, indicating a pattern of data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      828
    ],
    "start_token": 859,
    "end_token": 878,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      2581,
      2099,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of a specific request type, indicating a pattern of data retrieval"
  },
  {
    "line": 124,
    "text": "        filters=generate_filters(code=code),",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific fields, indicating a pattern of data selection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      828
    ],
    "start_token": 878,
    "end_token": 897,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      7032,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      6356
    ],
    "label": "ml_signal",
    "reason": "Use of specific fields, indicating a pattern of data selection"
  },
  {
    "line": 130,
    "text": "# \u5341\u5927\u6d41\u901a\u80a1\u4e1c\u65e5\u671f",
    "annotation": "\ud83e\udde0 ML Signal: Use of a filter generation function, indicating a pattern of data filtering",
    "confidence": 0.5,
    "tokens": [
      2,
      10263,
      235,
      223,
      32014,
      38184,
      223,
      34460,
      248,
      164,
      224,
      94,
      10310,
      250,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 897,
    "end_token": 915,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      8106,
      5270,
      2163,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      25431
    ],
    "label": "ml_signal",
    "reason": "Use of a filter generation function, indicating a pattern of data filtering"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple parameters, indicating a pattern for ML models to learn parameter usage.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 915,
    "end_token": 915,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      10007,
      11,
      12739,
      257,
      3912,
      329,
      10373,
      4981,
      284,
      2193,
      11507,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function with multiple parameters, indicating a pattern for ML models to learn parameter usage."
  },
  {
    "line": 130,
    "text": "# \u5341\u5927\u6d41\u901a\u80a1\u4e1c\u65e5\u671f",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific request type string, which could be a pattern for ML models to learn API usage.",
    "confidence": 0.5,
    "tokens": [
      2,
      10263,
      235,
      223,
      32014,
      38184,
      223,
      34460,
      248,
      164,
      224,
      94,
      10310,
      250,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 915,
    "end_token": 933,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2581,
      2099,
      4731,
      11,
      543,
      714,
      307,
      257,
      3912,
      329,
      10373,
      4981,
      284,
      2193,
      7824,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific request type string, which could be a pattern for ML models to learn API usage."
  },
  {
    "line": 130,
    "text": "# \u5341\u5927\u6d41\u901a\u80a1\u4e1c\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Use of named parameters improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      2,
      10263,
      235,
      223,
      32014,
      38184,
      223,
      34460,
      248,
      164,
      224,
      94,
      10310,
      250,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 933,
    "end_token": 951,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of named parameters improves readability and maintainability."
  },
  {
    "line": 135,
    "text": "        filters=generate_filters(code=code),",
    "annotation": "\u2705 Best Practice: Use of a single string for fields improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      828
    ],
    "start_token": 951,
    "end_token": 970,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2060,
      4731,
      329,
      7032,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a single string for fields improves readability and maintainability."
  },
  {
    "line": 136,
    "text": "        sort_by=\"END_DATE\",",
    "annotation": "\ud83e\udde0 ML Signal: Function call with parameters, indicating a pattern for ML models to learn function usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      10619,
      62,
      35,
      6158,
      1600
    ],
    "start_token": 970,
    "end_token": 986,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      10007,
      11,
      12739,
      257,
      3912,
      329,
      10373,
      4981,
      284,
      2193,
      2163,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call with parameters, indicating a pattern for ML models to learn function usage."
  },
  {
    "line": 135,
    "text": "        filters=generate_filters(code=code),",
    "annotation": "\ud83e\udde0 ML Signal: Function name suggests a specific data retrieval pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      828
    ],
    "start_token": 986,
    "end_token": 1005,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5644,
      257,
      2176,
      1366,
      45069,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function name suggests a specific data retrieval pattern"
  },
  {
    "line": 136,
    "text": "        sort_by=\"END_DATE\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific request type for data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      10619,
      62,
      35,
      6158,
      1600
    ],
    "start_token": 1005,
    "end_token": 1021,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      2581,
      2099,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific request type for data retrieval"
  },
  {
    "line": 136,
    "text": "        sort_by=\"END_DATE\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded request type could lead to inflexibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      10619,
      62,
      35,
      6158,
      1600
    ],
    "start_token": 1021,
    "end_token": 1037,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      2581,
      2099,
      714,
      1085,
      284,
      1167,
      2588,
      2247
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded request type could lead to inflexibility"
  },
  {
    "line": 141,
    "text": "# https://datacenter.eastmoney.com/securities/api/data/get?type=RPT_F10_EH_RELATION&sty=SECUCODE%2CHOLDER_NAME%2CRELATED_RELATION%2CHOLD_RATIO&filter=(SECUCODE%3D%22601162.SH%22)&client=APP&source=SECURITIES&p=1&ps=200&rdm=rnd_01BE6995104944ED99B70EEB7FFC0353&v=012649539724458458",
    "annotation": "\ud83e\udde0 ML Signal: Specific fields requested indicate data usage patterns",
    "confidence": 1.0,
    "tokens": [
      2,
      3740,
      1378,
      19608,
      330,
      9255,
      13,
      23316,
      26316,
      13,
      785,
      14,
      2363,
      10886,
      14,
      15042,
      14,
      7890,
      14,
      1136,
      30,
      4906,
      28,
      49,
      11571,
      62,
      37,
      940,
      62,
      42413,
      62,
      16448,
      6234,
      5,
      34365,
      28,
      23683,
      9598,
      16820,
      4,
      17,
      3398,
      3535,
      14418,
      62,
      20608,
      4,
      17,
      34,
      20112,
      62,
      16448,
      6234,
      4,
      17,
      3398,
      15173,
      62,
      49,
      1404,
      9399,
      5,
      24455,
      16193,
      23683,
      9598,
      16820,
      4,
      18,
      35,
      4,
      24909,
      486,
      25061,
      13,
      9693,
      4,
      1828,
      8,
      5,
      16366,
      28,
      24805,
      5,
      10459,
      28,
      23683,
      4261,
      30383,
      5,
      79,
      28,
      16,
      5,
      862,
      28,
      2167,
      5,
      4372,
      76,
      28,
      81,
      358,
      62,
      486,
      12473,
      21,
      33438,
      940,
      2920,
      2598,
      1961,
      2079,
      33,
      2154,
      6500,
      33,
      22,
      37,
      4851,
      15,
      33319,
      5,
      85,
      28,
      486,
      2075,
      33781,
      33372,
      1731,
      29334,
      29334
    ],
    "start_token": 1037,
    "end_token": 1169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      7032,
      9167,
      7603,
      1366,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Specific fields requested indicate data usage patterns"
  },
  {
    "line": 143,
    "text": "def get_controlling_shareholder(code):",
    "annotation": "\u2705 Best Practice: Use of a helper function to generate filters improves readability",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      3642,
      18886,
      62,
      20077,
      13829,
      7,
      8189,
      2599
    ],
    "start_token": 1169,
    "end_token": 1180,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      7716,
      16628,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to generate filters improves readability"
  },
  {
    "line": 145,
    "text": "        request_type=\"RPT_F10_EH_RELATION\",",
    "annotation": "\ud83e\udde0 ML Signal: Sorting by a specific field indicates importance of data order",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      37,
      940,
      62,
      42413,
      62,
      16448,
      6234,
      1600
    ],
    "start_token": 1180,
    "end_token": 1202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      416,
      257,
      2176,
      2214,
      9217,
      6817,
      286,
      1366,
      1502
    ],
    "label": "ml_signal",
    "reason": "Sorting by a specific field indicates importance of data order"
  },
  {
    "line": 143,
    "text": "def get_controlling_shareholder(code):",
    "annotation": "\ud83e\udde0 ML Signal: Function parameter 'code' indicates a pattern of processing financial or stock data",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      3642,
      18886,
      62,
      20077,
      13829,
      7,
      8189,
      2599
    ],
    "start_token": 1202,
    "end_token": 1213,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      11507,
      705,
      8189,
      6,
      9217,
      257,
      3912,
      286,
      7587,
      3176,
      393,
      4283,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function parameter 'code' indicates a pattern of processing financial or stock data"
  },
  {
    "line": 146,
    "text": "        fields=\"SECUCODE,CHOLDER_NAME,CRELATED_RELATION,CHOLD_RATIO\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'datas[0]' suggests a pattern of accessing the most recent or first element",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      23683,
      9598,
      16820,
      11,
      3398,
      3535,
      14418,
      62,
      20608,
      11,
      34,
      20112,
      62,
      16448,
      6234,
      11,
      3398,
      15173,
      62,
      49,
      1404,
      9399,
      1600
    ],
    "start_token": 1213,
    "end_token": 1245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      19608,
      292,
      58,
      15,
      49946,
      5644,
      257,
      3912,
      286,
      22534,
      262,
      749,
      2274,
      393,
      717,
      5002
    ],
    "label": "ml_signal",
    "reason": "Use of 'datas[0]' suggests a pattern of accessing the most recent or first element"
  },
  {
    "line": 151,
    "text": "# \u673a\u6784\u6301\u4ed3",
    "annotation": "\ud83e\udde0 ML Signal: 'request_type' and 'fields' parameters indicate a pattern of querying specific data",
    "confidence": 0.5,
    "tokens": [
      2,
      42164,
      118,
      162,
      252,
      226,
      162,
      234,
      223,
      20015,
      241
    ],
    "start_token": 1245,
    "end_token": 1256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      705,
      25927,
      62,
      4906,
      6,
      290,
      705,
      25747,
      6,
      10007,
      7603,
      257,
      3912,
      286,
      42517,
      1112,
      2176,
      1366
    ],
    "label": "ml_signal",
    "reason": "'request_type' and 'fields' parameters indicate a pattern of querying specific data"
  },
  {
    "line": 152,
    "text": "def get_ii_holder(code, report_date, org_type):",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'generate_filters' suggests a pattern of filtering data based on parameters",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      4178,
      62,
      13829,
      7,
      8189,
      11,
      989,
      62,
      4475,
      11,
      8745,
      62,
      4906,
      2599
    ],
    "start_token": 1256,
    "end_token": 1273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      8612,
      378,
      62,
      10379,
      1010,
      6,
      5644,
      257,
      3912,
      286,
      25431,
      1366,
      1912,
      319,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of 'generate_filters' suggests a pattern of filtering data based on parameters"
  },
  {
    "line": 156,
    "text": "        filters=generate_filters(code=code, report_date=report_date, org_type=org_type),",
    "annotation": "\ud83e\udde0 ML Signal: Accessing 'holders[0]' indicates a pattern of using the first result from a query",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      11,
      989,
      62,
      4475,
      28,
      13116,
      62,
      4475,
      11,
      8745,
      62,
      4906,
      28,
      2398,
      62,
      4906,
      828
    ],
    "start_token": 1273,
    "end_token": 1308,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      705,
      10476,
      58,
      15,
      49946,
      9217,
      257,
      3912,
      286,
      1262,
      262,
      717,
      1255,
      422,
      257,
      12405
    ],
    "label": "ml_signal",
    "reason": "Accessing 'holders[0]' indicates a pattern of using the first result from a query"
  },
  {
    "line": 162,
    "text": "    return get_em_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if 'HOLD_RATIO_COUNT' is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 1308,
    "end_token": 1318,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      705,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      34,
      28270,
      6,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if 'HOLD_RATIO_COUNT' is zero"
  },
  {
    "line": 162,
    "text": "    return get_em_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if 'HOLD_RATIO_CHANGE' is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 1318,
    "end_token": 1328,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      705,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      3398,
      27746,
      6,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if 'HOLD_RATIO_CHANGE' is zero"
  },
  {
    "line": 168,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide unexpected errors",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1328,
    "end_token": 1328,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      10059,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide unexpected errors"
  },
  {
    "line": 169,
    "text": "def get_free_holders(code, end_date):",
    "annotation": "\u2705 Best Practice: Use logging with exception information for better debugging",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      5787,
      62,
      10476,
      7,
      8189,
      11,
      886,
      62,
      4475,
      2599
    ],
    "start_token": 1328,
    "end_token": 1341,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      351,
      6631,
      1321,
      329,
      1365,
      28769
    ],
    "label": "best_practice",
    "reason": "Use logging with exception information for better debugging"
  },
  {
    "line": 174,
    "text": "        sort_by=\"HOLDER_RANK\",",
    "annotation": "\ud83e\udde0 ML Signal: Returning a dictionary with specific keys indicates a pattern of structured data output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      39,
      3535,
      14418,
      62,
      49,
      15154,
      1600
    ],
    "start_token": 1341,
    "end_token": 1359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      22155,
      351,
      2176,
      8251,
      9217,
      257,
      3912,
      286,
      20793,
      1366,
      5072
    ],
    "label": "ml_signal",
    "reason": "Returning a dictionary with specific keys indicates a pattern of structured data output"
  },
  {
    "line": 169,
    "text": "def get_free_holders(code, end_date):",
    "annotation": "\ud83e\udde0 ML Signal: Function to retrieve controlling shareholder data based on a code",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      5787,
      62,
      10476,
      7,
      8189,
      11,
      886,
      62,
      4475,
      2599
    ],
    "start_token": 1359,
    "end_token": 1372,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      19818,
      12755,
      29378,
      1366,
      1912,
      319,
      257,
      2438
    ],
    "label": "ml_signal",
    "reason": "Function to retrieve controlling shareholder data based on a code"
  },
  {
    "line": 174,
    "text": "        sort_by=\"HOLDER_RANK\",",
    "annotation": "\u2705 Best Practice: Using a helper function to generate filters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3297,
      62,
      1525,
      2625,
      39,
      3535,
      14418,
      62,
      49,
      15154,
      1600
    ],
    "start_token": 1372,
    "end_token": 1390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      31904,
      2163,
      284,
      7716,
      16628,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Using a helper function to generate filters improves code readability and maintainability"
  },
  {
    "line": 177,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing a dictionary to store control information",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1390,
    "end_token": 1390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      257,
      22155,
      284,
      3650,
      1630,
      1321
    ],
    "label": "best_practice",
    "reason": "Initializing a dictionary to store control information"
  },
  {
    "line": 180,
    "text": "    if datas:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of checking specific relationship types in data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      19395,
      25
    ],
    "start_token": 1390,
    "end_token": 1396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      10627,
      2176,
      2776,
      3858,
      287,
      1366
    ],
    "label": "ml_signal",
    "reason": "Pattern of checking specific relationship types in data"
  },
  {
    "line": 185,
    "text": "            filters=generate_filters(code=code, end_date=end_date),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if \"HOLD_RATIO\" is not a number; consider validating input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      828
    ],
    "start_token": 1396,
    "end_token": 1427,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      366,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      1,
      318,
      407,
      257,
      1271,
      26,
      2074,
      4938,
      803,
      5128
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if \"HOLD_RATIO\" is not a number; consider validating input"
  },
  {
    "line": 184,
    "text": "            fields=\"SECUCODE,SECURITY_CODE,END_DATE,HOLD_NUM_COUNT,HOLD_RATIO_COUNT,HOLD_RATIO_CHANGE,\",",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern of data retrieval based on code and date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      23683,
      9598,
      16820,
      11,
      23683,
      4261,
      9050,
      62,
      34,
      16820,
      11,
      10619,
      62,
      35,
      6158,
      11,
      39,
      15173,
      62,
      41359,
      62,
      34,
      28270,
      11,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      34,
      28270,
      11,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      3398,
      27746,
      553,
      11
    ],
    "start_token": 1427,
    "end_token": 1485,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      286,
      1366,
      45069,
      1912,
      319,
      2438,
      290,
      3128
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern of data retrieval based on code and date"
  },
  {
    "line": 185,
    "text": "            filters=generate_filters(code=code, end_date=end_date),",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific request type indicating a pattern of accessing holder data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      828
    ],
    "start_token": 1485,
    "end_token": 1516,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      2581,
      2099,
      12739,
      257,
      3912,
      286,
      22534,
      15762,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of a specific request type indicating a pattern of accessing holder data"
  },
  {
    "line": 185,
    "text": "            filters=generate_filters(code=code, end_date=end_date),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data if request_type is not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      828
    ],
    "start_token": 1516,
    "end_token": 1547,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      611,
      2581,
      62,
      4906,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data if request_type is not validated"
  },
  {
    "line": 190,
    "text": "            change = 0",
    "annotation": "\ud83e\udde0 ML Signal: Specific fields requested indicating a pattern of data usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1487,
      796,
      657
    ],
    "start_token": 1547,
    "end_token": 1561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      7032,
      9167,
      12739,
      257,
      3912,
      286,
      1366,
      8748
    ],
    "label": "ml_signal",
    "reason": "Specific fields requested indicating a pattern of data usage"
  },
  {
    "line": 192,
    "text": "                if holder[\"HOLD_RATIO_COUNT\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Use of a filter function indicating a pattern of data filtering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      15762,
      14692,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      34,
      28270,
      1,
      5974
    ],
    "start_token": 1561,
    "end_token": 1590,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      8106,
      2163,
      12739,
      257,
      3912,
      286,
      1366,
      25431
    ],
    "label": "ml_signal",
    "reason": "Use of a filter function indicating a pattern of data filtering"
  },
  {
    "line": 193,
    "text": "                    ratio = holder[\"HOLD_RATIO_COUNT\"] / 100",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential injection risk if filters are not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8064,
      796,
      15762,
      14692,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      34,
      28270,
      8973,
      1220,
      1802
    ],
    "start_token": 1590,
    "end_token": 1625,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16954,
      2526,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential injection risk if filters are not properly sanitized"
  },
  {
    "line": 195,
    "text": "                    change = holder[\"HOLD_RATIO_CHANGE\"] / 100",
    "annotation": "\ud83e\udde0 ML Signal: Sorting by a specific field indicating a pattern of data ordering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1487,
      796,
      15762,
      14692,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      3398,
      27746,
      8973,
      1220,
      1802
    ],
    "start_token": 1625,
    "end_token": 1660,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      416,
      257,
      2176,
      2214,
      12739,
      257,
      3912,
      286,
      1366,
      16216
    ],
    "label": "ml_signal",
    "reason": "Sorting by a specific field indicating a pattern of data ordering"
  },
  {
    "line": 192,
    "text": "                if holder[\"HOLD_RATIO_COUNT\"]:",
    "annotation": "\u2705 Best Practice: Check if 'order' is not None or empty before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      15762,
      14692,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      34,
      28270,
      1,
      5974
    ],
    "start_token": 1660,
    "end_token": 1689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      2875,
      6,
      318,
      407,
      6045,
      393,
      6565,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check if 'order' is not None or empty before processing"
  },
  {
    "line": 194,
    "text": "                if holder[\"HOLD_RATIO_CHANGE\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Splitting a string by a delimiter to process each element",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      15762,
      14692,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      3398,
      27746,
      1,
      5974
    ],
    "start_token": 1689,
    "end_token": 1718,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      257,
      4731,
      416,
      257,
      46728,
      2676,
      284,
      1429,
      1123,
      5002
    ],
    "label": "ml_signal",
    "reason": "Splitting a string by a delimiter to process each element"
  },
  {
    "line": 196,
    "text": "            except Exception as e:",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for conditional transformation of list elements",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1718,
    "end_token": 1734,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      26340,
      13389,
      286,
      1351,
      4847
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for conditional transformation of list elements"
  },
  {
    "line": 198,
    "text": "",
    "annotation": "\u2705 Best Practice: Return the original 'order' if it is None or empty",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1734,
    "end_token": 1734,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      262,
      2656,
      705,
      2875,
      6,
      611,
      340,
      318,
      6045,
      393,
      6565
    ],
    "label": "best_practice",
    "reason": "Return the original 'order' if it is None or empty"
  },
  {
    "line": 196,
    "text": "            except Exception as e:",
    "annotation": "\u2705 Best Practice: Consider using more descriptive parameter names for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1734,
    "end_token": 1750,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      517,
      35644,
      11507,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using more descriptive parameter names for better readability."
  },
  {
    "line": 198,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a helper function to encapsulate order parameter logic.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1750,
    "end_token": 1750,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      31904,
      2163,
      284,
      32652,
      5039,
      1502,
      11507,
      9156,
      13
    ],
    "label": "best_practice",
    "reason": "Use a helper function to encapsulate order parameter logic."
  },
  {
    "line": 200,
    "text": "                \"code\": code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of random number generation without a seed can lead to non-deterministic behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      2438,
      11
    ],
    "start_token": 1750,
    "end_token": 1770,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      4738,
      1271,
      5270,
      1231,
      257,
      9403,
      460,
      1085,
      284,
      1729,
      12,
      67,
      2357,
      49228,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of random number generation without a seed can lead to non-deterministic behavior."
  },
  {
    "line": 202,
    "text": "                \"ratio\": ratio,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on input parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      10366,
      952,
      1298,
      8064,
      11
    ],
    "start_token": 1770,
    "end_token": 1791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      5128,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on input parameters."
  },
  {
    "line": 204,
    "text": "            }",
    "annotation": "\ud83e\udde0 ML Signal: URL construction pattern with multiple query parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1791,
    "end_token": 1803,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      3912,
      351,
      3294,
      12405,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "URL construction pattern with multiple query parameters."
  },
  {
    "line": 207,
    "text": "def get_controlling_shareholder(code):",
    "annotation": "\ud83e\udde0 ML Signal: URL construction pattern with multiple query parameters.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      3642,
      18886,
      62,
      20077,
      13829,
      7,
      8189,
      2599
    ],
    "start_token": 1803,
    "end_token": 1814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      3912,
      351,
      3294,
      12405,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "URL construction pattern with multiple query parameters."
  },
  {
    "line": 209,
    "text": "        request_type=\"RPT_F10_EH_RELATION\",",
    "annotation": "\ud83e\udde0 ML Signal: Appending additional parameters to a URL.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      2625,
      49,
      11571,
      62,
      37,
      940,
      62,
      42413,
      62,
      16448,
      6234,
      1600
    ],
    "start_token": 1814,
    "end_token": 1836,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      3224,
      10007,
      284,
      257,
      10289,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending additional parameters to a URL."
  },
  {
    "line": 211,
    "text": "        filters=generate_filters(code=code),",
    "annotation": "\u2705 Best Practice: Return statement should be the last line of the function for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      828
    ],
    "start_token": 1836,
    "end_token": 1855,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      815,
      307,
      262,
      938,
      1627,
      286,
      262,
      2163,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Return statement should be the last line of the function for clarity."
  },
  {
    "line": 206,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a single responsibility",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1855,
    "end_token": 1855,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2060,
      5798
    ],
    "label": "ml_signal",
    "reason": "Function definition with a single responsibility"
  },
  {
    "line": 208,
    "text": "    holders = get_em_data(",
    "annotation": "\u2705 Best Practice: Convert input to integer for consistent comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16392,
      796,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 1855,
    "end_token": 1866,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      5128,
      284,
      18253,
      329,
      6414,
      7208
    ],
    "label": "best_practice",
    "reason": "Convert input to integer for consistent comparison"
  },
  {
    "line": 210,
    "text": "        fields=\"SECUCODE,HOLDER_NAME,RELATED_RELATION,HOLD_RATIO\",",
    "annotation": "\u2705 Best Practice: Use of chained comparison for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      23683,
      9598,
      16820,
      11,
      39,
      3535,
      14418,
      62,
      20608,
      11,
      20112,
      62,
      16448,
      6234,
      11,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      1600
    ],
    "start_token": 1866,
    "end_token": 1897,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      40682,
      7208,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of chained comparison for readability"
  },
  {
    "line": 213,
    "text": "",
    "annotation": "\u2705 Best Practice: Clear and concise conditional logic",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1897,
    "end_token": 1897,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      290,
      35327,
      26340,
      9156
    ],
    "label": "best_practice",
    "reason": "Clear and concise conditional logic"
  },
  {
    "line": 215,
    "text": "        control = {\"ratio\": 0}",
    "annotation": "\u2705 Best Practice: Consider using a dictionary for mapping to improve readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1630,
      796,
      19779,
      10366,
      952,
      1298,
      657,
      92
    ],
    "start_token": 1897,
    "end_token": 1912,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      22155,
      329,
      16855,
      284,
      2987,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a dictionary for mapping to improve readability and maintainability."
  },
  {
    "line": 230,
    "text": "        fields=\"SECUCODE,END_DATE,HOLDER_NAME,HOLDER_CODE,HOLDER_CODE_OLD,HOLD_NUM,HOLD_NUM_RATIO,HOLD_RATIO_QOQ,HOLDER_RANK,IS_HOLDORG\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      2625,
      23683,
      9598,
      16820,
      11,
      10619,
      62,
      35,
      6158,
      11,
      39,
      3535,
      14418,
      62,
      20608,
      11,
      39,
      3535,
      14418,
      62,
      34,
      16820,
      11,
      39,
      3535,
      14418,
      62,
      34,
      16820,
      62,
      15173,
      11,
      39,
      15173,
      62,
      41359,
      11,
      39,
      15173,
      62,
      41359,
      62,
      49,
      1404,
      9399,
      11,
      39,
      15173,
      62,
      49,
      1404,
      9399,
      62,
      48,
      46,
      48,
      11,
      39,
      3535,
      14418,
      62,
      49,
      15154,
      11,
      1797,
      62,
      39,
      15173,
      1581,
      38,
      1600
    ],
    "start_token": 1912,
    "end_token": 1991,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be disabled with optimization flags."
  },
  {
    "line": 231,
    "text": "        filters=generate_filters(code=code, end_date=end_date),",
    "annotation": "\u2705 Best Practice: Using list comprehension for filtering and processing items in a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      28,
      8612,
      378,
      62,
      10379,
      1010,
      7,
      8189,
      28,
      8189,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      828
    ],
    "start_token": 1991,
    "end_token": 2018,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      35915,
      329,
      25431,
      290,
      7587,
      3709,
      287,
      257,
      22155
    ],
    "label": "best_practice",
    "reason": "Using list comprehension for filtering and processing items in a dictionary"
  },
  {
    "line": 235,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of 'code'",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2018,
    "end_token": 2018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      705,
      8189,
      6
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of 'code'"
  },
  {
    "line": 236,
    "text": "def _order_param(order: str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential injection risk if 'code' is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      2875,
      62,
      17143,
      7,
      2875,
      25,
      965,
      2599
    ],
    "start_token": 2018,
    "end_token": 2028,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16954,
      2526,
      611,
      705,
      8189,
      6,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential injection risk if 'code' is not properly sanitized"
  },
  {
    "line": 239,
    "text": "        return \",\".join([\"1\" if item == \"asc\" else \"-1\" for item in orders])",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of 'org_type'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      553,
      13,
      22179,
      7,
      14692,
      16,
      1,
      611,
      2378,
      6624,
      366,
      3372,
      1,
      2073,
      27444,
      16,
      1,
      329,
      2378,
      287,
      6266,
      12962
    ],
    "start_token": 2028,
    "end_token": 2059,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      705,
      2398,
      62,
      4906,
      6
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of 'org_type'"
  },
  {
    "line": 245,
    "text": "    # type=RPT_F10_MAIN_ORGHOLDDETAILS",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to determine operation type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      2099,
      28,
      49,
      11571,
      62,
      37,
      940,
      62,
      5673,
      1268,
      62,
      1581,
      17511,
      15173,
      35,
      20892,
      45484
    ],
    "start_token": 2059,
    "end_token": 2080,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      5004,
      4905,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to determine operation type"
  },
  {
    "line": 246,
    "text": "    # sty=SECURITY_CODE,SECUCODE,REPORT_DATE,ORG_TYPE,TOTAL_ORG_NUM,TOTAL_FREE_SHARES,TOTAL_MARKET_CAP,TOTAL_SHARES_RATIO,CHANGE_RATIO,IS_COMPLETE",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential injection risk if 'value' is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      8944,
      28,
      23683,
      4261,
      9050,
      62,
      34,
      16820,
      11,
      23683,
      9598,
      16820,
      11,
      2200,
      15490,
      62,
      35,
      6158,
      11,
      1581,
      38,
      62,
      25216,
      11,
      51,
      27510,
      62,
      1581,
      38,
      62,
      41359,
      11,
      51,
      27510,
      62,
      39274,
      62,
      9693,
      1503,
      1546,
      11,
      51,
      27510,
      62,
      44,
      14175,
      2767,
      62,
      33177,
      11,
      51,
      27510,
      62,
      9693,
      1503,
      1546,
      62,
      49,
      1404,
      9399,
      11,
      3398,
      27746,
      62,
      49,
      1404,
      9399,
      11,
      1797,
      62,
      41335,
      9328
    ],
    "start_token": 2080,
    "end_token": 2156,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16954,
      2526,
      611,
      705,
      8367,
      6,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential injection risk if 'value' is not properly sanitized"
  },
  {
    "line": 260,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple parameters, including optional ones",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2156,
    "end_token": 2156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      10007,
      11,
      1390,
      11902,
      3392
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple parameters, including optional ones"
  },
  {
    "line": 272,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2156,
    "end_token": 2156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 275,
    "text": "    if actor_type == ActorType.raised_fund:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of session object if not properly managed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      8674,
      62,
      4906,
      6624,
      27274,
      6030,
      13,
      49309,
      62,
      10990,
      25
    ],
    "start_token": 2156,
    "end_token": 2171,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      6246,
      2134,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of session object if not properly managed"
  },
  {
    "line": 278,
    "text": "        return \"02\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No timeout specified in requests.get, which can lead to hanging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      2999,
      1
    ],
    "start_token": 2171,
    "end_token": 2182,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      26827,
      7368,
      287,
      7007,
      13,
      1136,
      11,
      543,
      460,
      1085,
      284,
      10938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No timeout specified in requests.get, which can lead to hanging"
  },
  {
    "line": 281,
    "text": "    if actor_type == ActorType.broker:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes JSON response without exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      8674,
      62,
      4906,
      6624,
      27274,
      6030,
      13,
      7957,
      6122,
      25
    ],
    "start_token": 2182,
    "end_token": 2196,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      19449,
      2882,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes JSON response without exception handling"
  },
  {
    "line": 283,
    "text": "    if actor_type == ActorType.insurance:",
    "annotation": "\u2705 Best Practice: Explicitly closing the response to free up resources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      8674,
      62,
      4906,
      6624,
      27274,
      6030,
      13,
      1040,
      3874,
      25
    ],
    "start_token": 2196,
    "end_token": 2210,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      9605,
      262,
      2882,
      284,
      1479,
      510,
      4133
    ],
    "label": "best_practice",
    "reason": "Explicitly closing the response to free up resources"
  },
  {
    "line": 291,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Recursive function call pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2210,
    "end_token": 2210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      2163,
      869,
      3912
    ],
    "label": "ml_signal",
    "reason": "Recursive function call pattern"
  },
  {
    "line": 313,
    "text": "def get_em_data(",
    "annotation": "\u2705 Best Practice: Using list concatenation",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      368,
      62,
      7890,
      7
    ],
    "start_token": 2210,
    "end_token": 2217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Using list concatenation"
  },
  {
    "line": 317,
    "text": "    source=\"SECURITIES\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises a generic RuntimeError without specific exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2723,
      2625,
      23683,
      4261,
      30383,
      1600
    ],
    "start_token": 2217,
    "end_token": 2226,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      257,
      14276,
      43160,
      12331,
      1231,
      2176,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises a generic RuntimeError without specific exception handling"
  },
  {
    "line": 317,
    "text": "    source=\"SECURITIES\",",
    "annotation": "\u26a0\ufe0f SAST Risk (High): The function does not return any value or perform any operations, leading to potential logical errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2723,
      2625,
      23683,
      4261,
      30383,
      1600
    ],
    "start_token": 2226,
    "end_token": 2235,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      383,
      2163,
      857,
      407,
      1441,
      597,
      1988,
      393,
      1620,
      597,
      4560,
      11,
      3756,
      284,
      2785,
      12219,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "The function does not return any value or perform any operations, leading to potential logical errors."
  },
  {
    "line": 317,
    "text": "    source=\"SECURITIES\",",
    "annotation": "\u2705 Best Practice: Consider returning the dictionaries or performing operations on them.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2723,
      2625,
      23683,
      4261,
      30383,
      1600
    ],
    "start_token": 2235,
    "end_token": 2244,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8024,
      262,
      48589,
      3166,
      393,
      9489,
      4560,
      319,
      606,
      13
    ],
    "label": "best_practice",
    "reason": "Consider returning the dictionaries or performing operations on them."
  },
  {
    "line": 339,
    "text": "    if session:",
    "annotation": "\u26a0\ufe0f SAST Risk (High): The function does not return any value or perform any operations, leading to potential logical errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      6246,
      25
    ],
    "start_token": 2244,
    "end_token": 2250,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      383,
      2163,
      857,
      407,
      1441,
      597,
      1988,
      393,
      1620,
      597,
      4560,
      11,
      3756,
      284,
      2785,
      12219,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "The function does not return any value or perform any operations, leading to potential logical errors."
  },
  {
    "line": 339,
    "text": "    if session:",
    "annotation": "\u2705 Best Practice: Consider returning the dictionaries or performing operations on them.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      6246,
      25
    ],
    "start_token": 2250,
    "end_token": 2256,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8024,
      262,
      48589,
      3166,
      393,
      9489,
      4560,
      319,
      606,
      13
    ],
    "label": "best_practice",
    "reason": "Consider returning the dictionaries or performing operations on them."
  },
  {
    "line": 361,
    "text": "                        request_type=request_type,",
    "annotation": "\u26a0\ufe0f SAST Risk (High): The function does not return any value or perform any operations, leading to potential logical errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      28,
      25927,
      62,
      4906,
      11
    ],
    "start_token": 2256,
    "end_token": 2287,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      383,
      2163,
      857,
      407,
      1441,
      597,
      1988,
      393,
      1620,
      597,
      4560,
      11,
      3756,
      284,
      2785,
      12219,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "The function does not return any value or perform any operations, leading to potential logical errors."
  },
  {
    "line": 361,
    "text": "                        request_type=request_type,",
    "annotation": "\u2705 Best Practice: Consider returning the dictionaries or performing operations on them.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      4906,
      28,
      25927,
      62,
      4906,
      11
    ],
    "start_token": 2287,
    "end_token": 2318,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8024,
      262,
      48589,
      3166,
      393,
      9489,
      4560,
      319,
      606,
      13
    ],
    "label": "best_practice",
    "reason": "Consider returning the dictionaries or performing operations on them."
  },
  {
    "line": 384,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2318,
    "end_token": 2318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters"
  },
  {
    "line": 390,
    "text": "        # \u6700\u65b0\u4ef7 660/100=6.6",
    "annotation": "\ud83e\udde0 ML Signal: URL construction with dynamic parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      42164,
      222,
      23877,
      108,
      20015,
      115,
      41717,
      14,
      3064,
      28,
      21,
      13,
      21
    ],
    "start_token": 2318,
    "end_token": 2339,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      351,
      8925,
      10007
    ],
    "label": "ml_signal",
    "reason": "URL construction with dynamic parameters"
  },
  {
    "line": 393,
    "text": "        \"f3\": 2000,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of session object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      18,
      1298,
      4751,
      11
    ],
    "start_token": 2339,
    "end_token": 2352,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      6246,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of session object"
  },
  {
    "line": 396,
    "text": "        # \u603b\u624b",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No timeout specified in requests.get",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      222,
      119,
      33699,
      233
    ],
    "start_token": 2352,
    "end_token": 2365,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      26827,
      7368,
      287,
      7007,
      13,
      1136
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No timeout specified in requests.get"
  },
  {
    "line": 398,
    "text": "        # \u6210\u4ea4\u989d",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): raise_for_status() can raise an exception",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      230,
      238,
      12859,
      97,
      165,
      95,
      251
    ],
    "start_token": 2365,
    "end_token": 2381,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5298,
      62,
      1640,
      62,
      13376,
      3419,
      460,
      5298,
      281,
      6631
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "raise_for_status() can raise an exception"
  },
  {
    "line": 400,
    "text": "        # \u6362\u624b\u7387 239/10000",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes response is always JSON",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      235,
      95,
      33699,
      233,
      163,
      236,
      229,
      32817,
      14,
      49388
    ],
    "start_token": 2381,
    "end_token": 2400,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2882,
      318,
      1464,
      19449
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes response is always JSON"
  },
  {
    "line": 402,
    "text": "        # \u5e02\u76c8\u7387 110",
    "annotation": "\u2705 Best Practice: Explicitly close the response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      116,
      224,
      33566,
      230,
      163,
      236,
      229,
      9796
    ],
    "start_token": 2400,
    "end_token": 2417,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      1969,
      262,
      2882
    ],
    "label": "best_practice",
    "reason": "Explicitly close the response"
  },
  {
    "line": 414,
    "text": "        \"f31\": 660,",
    "annotation": "\ud83e\udde0 ML Signal: Appending structured data to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      3132,
      1298,
      41717,
      11
    ],
    "start_token": 2417,
    "end_token": 2430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      20793,
      1366,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending structured data to a list"
  },
  {
    "line": 442,
    "text": "        \"f139\": 2,",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list of dicts to DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      20219,
      1298,
      362,
      11
    ],
    "start_token": 2430,
    "end_token": 2443,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      286,
      8633,
      82,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Conversion of list of dicts to DataFrame"
  },
  {
    "line": 436,
    "text": "        \"f30\": -1281,",
    "annotation": "\ud83e\udde0 ML Signal: Function to decode entity IDs, indicating a pattern of handling different entity types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1270,
      1298,
      532,
      1065,
      6659,
      11
    ],
    "start_token": 2443,
    "end_token": 2458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      36899,
      9312,
      32373,
      11,
      12739,
      257,
      3912,
      286,
      9041,
      1180,
      9312,
      3858
    ],
    "label": "ml_signal",
    "reason": "Function to decode entity IDs, indicating a pattern of handling different entity types"
  },
  {
    "line": 438,
    "text": "        \"f31\": 1515,",
    "annotation": "\ud83e\udde0 ML Signal: Decoding entity IDs to determine type, exchange, and code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      3132,
      1298,
      1315,
      1314,
      11
    ],
    "start_token": 2458,
    "end_token": 2472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4280,
      7656,
      9312,
      32373,
      284,
      5004,
      2099,
      11,
      5163,
      11,
      290,
      2438
    ],
    "label": "ml_signal",
    "reason": "Decoding entity IDs to determine type, exchange, and code"
  },
  {
    "line": 440,
    "text": "        \"f32\": None,",
    "annotation": "\u2705 Best Practice: Using if-elif-else for clear conditional logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      2624,
      1298,
      6045,
      11
    ],
    "start_token": 2472,
    "end_token": 2485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      611,
      12,
      417,
      361,
      12,
      17772,
      329,
      1598,
      26340,
      9156
    ],
    "label": "best_practice",
    "reason": "Using if-elif-else for clear conditional logic"
  },
  {
    "line": 451,
    "text": "        \"f5\": 478746,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      20,
      1298,
      604,
      41019,
      3510,
      11
    ],
    "start_token": 2485,
    "end_token": 2500,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be disabled in production"
  },
  {
    "line": 453,
    "text": "        \"f8\": 803,",
    "annotation": "\ud83e\udde0 ML Signal: Constructing data payload for API request",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      23,
      1298,
      807,
      3070,
      11
    ],
    "start_token": 2500,
    "end_token": 2514,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      278,
      1366,
      21437,
      329,
      7824,
      2581
    ],
    "label": "ml_signal",
    "reason": "Constructing data payload for API request"
  },
  {
    "line": 455,
    "text": "        \"f12\": \"000788\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network request failures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1065,
      1298,
      366,
      830,
      22,
      3459,
      1600
    ],
    "start_token": 2514,
    "end_token": 2530,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network request failures"
  },
  {
    "line": 457,
    "text": "        \"f14\": \"\u5317\u5927\u533b\u836f\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No handling for potential HTTP errors other than raising exceptions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1415,
      1298,
      366,
      44293,
      245,
      32014,
      44293,
      119,
      164,
      235,
      107,
      1600
    ],
    "start_token": 2530,
    "end_token": 2551,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      9041,
      329,
      2785,
      14626,
      8563,
      584,
      621,
      8620,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No handling for potential HTTP errors other than raising exceptions"
  },
  {
    "line": 459,
    "text": "        \"f19\": 6,",
    "annotation": "\u2705 Best Practice: Closing response to free up resources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1129,
      1298,
      718,
      11
    ],
    "start_token": 2551,
    "end_token": 2564,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47055,
      2882,
      284,
      1479,
      510,
      4133
    ],
    "label": "best_practice",
    "reason": "Closing response to free up resources"
  },
  {
    "line": 461,
    "text": "        \"f31\": 611,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes JSON response structure without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      3132,
      1298,
      718,
      1157,
      11
    ],
    "start_token": 2564,
    "end_token": 2578,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      19449,
      2882,
      4645,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes JSON response structure without validation"
  },
  {
    "line": 454,
    "text": "        \"f9\": 2067,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL may be vulnerable to injection if `now_timestamp()` is not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      24,
      1298,
      1160,
      3134,
      11
    ],
    "start_token": 2578,
    "end_token": 2592,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      743,
      307,
      8826,
      284,
      16954,
      611,
      4600,
      2197,
      62,
      16514,
      27823,
      3419,
      63,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL may be vulnerable to injection if `now_timestamp()` is not properly sanitized"
  },
  {
    "line": 456,
    "text": "        \"f13\": 0,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1485,
      1298,
      657,
      11
    ],
    "start_token": 2592,
    "end_token": 2605,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      8563
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network errors"
  },
  {
    "line": 458,
    "text": "        \"f18\": 591,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unhandled HTTP errors if `raise_for_status` is not called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1507,
      1298,
      642,
      6420,
      11
    ],
    "start_token": 2605,
    "end_token": 2619,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      555,
      38788,
      14626,
      8563,
      611,
      4600,
      40225,
      62,
      1640,
      62,
      13376,
      63,
      318,
      407,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unhandled HTTP errors if `raise_for_status` is not called"
  },
  {
    "line": 460,
    "text": "        \"f30\": -4015,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): `json_callback_param` function may be vulnerable to injection if not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      1270,
      1298,
      532,
      21844,
      20,
      11
    ],
    "start_token": 2619,
    "end_token": 2634,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4600,
      17752,
      62,
      47423,
      62,
      17143,
      63,
      2163,
      743,
      307,
      8826,
      284,
      16954,
      611,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "`json_callback_param` function may be vulnerable to injection if not properly sanitized"
  },
  {
    "line": 462,
    "text": "        \"f32\": 612,",
    "annotation": "\u2705 Best Practice: Ensure the response is closed to free up resources",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      2624,
      1298,
      718,
      1065,
      11
    ],
    "start_token": 2634,
    "end_token": 2648,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      2882,
      318,
      4838,
      284,
      1479,
      510,
      4133
    ],
    "label": "best_practice",
    "reason": "Ensure the response is closed to free up resources"
  },
  {
    "line": 466,
    "text": "        \"f152\": 2,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of splitting strings to extract multiple values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      17827,
      1298,
      362,
      11
    ],
    "start_token": 2648,
    "end_token": 2661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      26021,
      13042,
      284,
      7925,
      3294,
      3815
    ],
    "label": "ml_signal",
    "reason": "Pattern of splitting strings to extract multiple values"
  },
  {
    "line": 471,
    "text": "# url = 'https://push2his.eastmoney.com/api/qt/stock/kline/get?'",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of transforming data using a specific function",
    "confidence": 0.5,
    "tokens": [
      2,
      19016,
      796,
      705,
      5450,
      1378,
      14689,
      17,
      14363,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      39568,
      14,
      13578,
      14,
      74,
      1370,
      14,
      1136,
      8348
    ],
    "start_token": 2661,
    "end_token": 2687,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      25449,
      1366,
      1262,
      257,
      2176,
      2163
    ],
    "label": "ml_signal",
    "reason": "Pattern of transforming data using a specific function"
  },
  {
    "line": 474,
    "text": "# \u6708\u7ebf      klt=103",
    "annotation": "\ud83e\udde0 ML Signal: Usage of enum-like pattern for value conversion",
    "confidence": 0.5,
    "tokens": [
      2,
      42164,
      230,
      163,
      118,
      123,
      220,
      220,
      220,
      220,
      220,
      479,
      2528,
      28,
      15197
    ],
    "start_token": 2687,
    "end_token": 2702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      33829,
      12,
      2339,
      3912,
      329,
      1988,
      11315
    ],
    "label": "ml_signal",
    "reason": "Usage of enum-like pattern for value conversion"
  },
  {
    "line": 480,
    "text": "# \u590d\u6743      fqt 0 \u4e0d\u590d\u6743 1 \u524d\u590d\u6743 2 \u540e\u590d\u6743",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for control flow can be disabled in optimized mode",
    "confidence": 1.0,
    "tokens": [
      2,
      36469,
      235,
      30266,
      225,
      220,
      220,
      220,
      220,
      220,
      277,
      39568,
      657,
      220,
      38834,
      13783,
      235,
      30266,
      225,
      352,
      10263,
      231,
      235,
      13783,
      235,
      30266,
      225,
      362,
      10263,
      238,
      236,
      13783,
      235,
      30266,
      225
    ],
    "start_token": 2702,
    "end_token": 2737,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      287,
      23392,
      4235
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for control flow can be disabled in optimized mode"
  },
  {
    "line": 482,
    "text": "#",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting strings to uppercase",
    "confidence": 0.5,
    "tokens": [
      2
    ],
    "start_token": 2737,
    "end_token": 2738,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      13042,
      284,
      334,
      39921,
      589
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting strings to uppercase"
  },
  {
    "line": 485,
    "text": "# timestamp,open,close,high,low",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging error without handling may expose sensitive information",
    "confidence": 0.5,
    "tokens": [
      2,
      41033,
      11,
      9654,
      11,
      19836,
      11,
      8929,
      11,
      9319
    ],
    "start_token": 2738,
    "end_token": 2748,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      4049,
      1231,
      9041,
      743,
      15651,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging error without handling may expose sensitive information"
  },
  {
    "line": 490,
    "text": "# secid=0.399001&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of constructing unique identifiers",
    "confidence": 1.0,
    "tokens": [
      2,
      792,
      312,
      28,
      15,
      13,
      28771,
      8298,
      5,
      74,
      2528,
      28,
      15377,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 2748,
    "end_token": 2881,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      30580,
      3748,
      42814
    ],
    "label": "ml_signal",
    "reason": "Pattern of constructing unique identifiers"
  },
  {
    "line": 494,
    "text": "# secid=116.01024&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\u2705 Best Practice: Use of pandas for structured data manipulation",
    "confidence": 1.0,
    "tokens": [
      2,
      792,
      312,
      28,
      18298,
      13,
      20943,
      1731,
      5,
      74,
      2528,
      28,
      15377,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 2881,
    "end_token": 3014,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      329,
      20793,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of pandas for structured data manipulation"
  },
  {
    "line": 485,
    "text": "# timestamp,open,close,high,low",
    "annotation": "\ud83e\udde0 ML Signal: Function to calculate limits based on specific code patterns",
    "confidence": 1.0,
    "tokens": [
      2,
      41033,
      11,
      9654,
      11,
      19836,
      11,
      8929,
      11,
      9319
    ],
    "start_token": 3014,
    "end_token": 3024,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      15284,
      7095,
      1912,
      319,
      2176,
      2438,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function to calculate limits based on specific code patterns"
  },
  {
    "line": 488,
    "text": "# \u6df1\u5733",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary values by key",
    "confidence": 0.5,
    "tokens": [
      2,
      10545,
      115,
      109,
      28839,
      111
    ],
    "start_token": 3024,
    "end_token": 3030,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      3815,
      416,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary values by key"
  },
  {
    "line": 490,
    "text": "# secid=0.399001&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\ud83e\udde0 ML Signal: Pattern matching with specific code prefixes",
    "confidence": 1.0,
    "tokens": [
      2,
      792,
      312,
      28,
      15,
      13,
      28771,
      8298,
      5,
      74,
      2528,
      28,
      15377,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 3030,
    "end_token": 3163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      12336,
      351,
      2176,
      2438,
      21231,
      274
    ],
    "label": "ml_signal",
    "reason": "Pattern matching with specific code prefixes"
  },
  {
    "line": 491,
    "text": "# secid=0.000338&klt=101&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on code patterns",
    "confidence": 0.5,
    "tokens": [
      2,
      792,
      312,
      28,
      15,
      13,
      830,
      28460,
      5,
      74,
      2528,
      28,
      8784,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 3163,
    "end_token": 3296,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2438,
      7572
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on code patterns"
  },
  {
    "line": 494,
    "text": "# secid=116.01024&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\ud83e\udde0 ML Signal: Pattern matching with specific code prefixes",
    "confidence": 1.0,
    "tokens": [
      2,
      792,
      312,
      28,
      18298,
      13,
      20943,
      1731,
      5,
      74,
      2528,
      28,
      15377,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 3296,
    "end_token": 3429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      12336,
      351,
      2176,
      2438,
      21231,
      274
    ],
    "label": "ml_signal",
    "reason": "Pattern matching with specific code prefixes"
  },
  {
    "line": 496,
    "text": "# secid=106.BABA&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on code patterns",
    "confidence": 0.5,
    "tokens": [
      2,
      792,
      312,
      28,
      15801,
      13,
      4339,
      4339,
      5,
      74,
      2528,
      28,
      15377,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 3429,
    "end_token": 3562,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2438,
      7572
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on code patterns"
  },
  {
    "line": 499,
    "text": "# secid=1.512660&klt=101&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\ud83e\udde0 ML Signal: Default case for codes not matching specific patterns",
    "confidence": 0.5,
    "tokens": [
      2,
      792,
      312,
      28,
      16,
      13,
      20,
      19420,
      1899,
      5,
      74,
      2528,
      28,
      8784,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 3562,
    "end_token": 3696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      1339,
      329,
      12416,
      407,
      12336,
      2176,
      7572
    ],
    "label": "ml_signal",
    "reason": "Default case for codes not matching specific patterns"
  },
  {
    "line": 494,
    "text": "# secid=116.01024&klt=102&fqt=1&lmt=66&end=20500000&iscca=1&fields1=f1,f2,f3,f4,f5,f6,f7,f8&fields2=f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64&ut=f057cbcbce2a86e2866ab8877db1d059&forcect=1",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network request failures",
    "confidence": 1.0,
    "tokens": [
      2,
      792,
      312,
      28,
      18298,
      13,
      20943,
      1731,
      5,
      74,
      2528,
      28,
      15377,
      5,
      69,
      39568,
      28,
      16,
      5,
      75,
      16762,
      28,
      2791,
      5,
      437,
      28,
      1238,
      4059,
      830,
      5,
      271,
      13227,
      28,
      16,
      5,
      25747,
      16,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      5,
      25747,
      17,
      28,
      69,
      4349,
      11,
      69,
      4309,
      11,
      69,
      4310,
      11,
      69,
      4051,
      11,
      69,
      2816,
      11,
      69,
      3980,
      11,
      69,
      3553,
      11,
      69,
      3365,
      11,
      69,
      3270,
      11,
      69,
      1899,
      11,
      69,
      5333,
      11,
      69,
      5237,
      11,
      69,
      5066,
      11,
      69,
      2414,
      5,
      315,
      28,
      69,
      43526,
      66,
      15630,
      65,
      344,
      17,
      64,
      4521,
      68,
      2078,
      2791,
      397,
      3459,
      3324,
      9945,
      16,
      67,
      46712,
      5,
      3174,
      310,
      28,
      16
    ],
    "start_token": 3696,
    "end_token": 3829,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network request failures"
  },
  {
    "line": 495,
    "text": "# \u7f8e\u80a1",
    "annotation": "\u2705 Best Practice: Use a constant or configuration for the URL to improve maintainability",
    "confidence": 0.5,
    "tokens": [
      2,
      13328,
      122,
      236,
      164,
      224,
      94
    ],
    "start_token": 3829,
    "end_token": 3836,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      6937,
      393,
      8398,
      329,
      262,
      10289,
      284,
      2987,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use a constant or configuration for the URL to improve maintainability"
  },
  {
    "line": 497,
    "text": "#",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation or sanitization of the response data",
    "confidence": 0.5,
    "tokens": [
      2
    ],
    "start_token": 3836,
    "end_token": 3837,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      393,
      5336,
      270,
      1634,
      286,
      262,
      2882,
      1366
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation or sanitization of the response data"
  },
  {
    "line": 498,
    "text": "# \u4e0a\u6d77",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external API for data retrieval",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      41468,
      38184,
      115
    ],
    "start_token": 3837,
    "end_token": 3842,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      7824,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of external API for data retrieval"
  },
  {
    "line": 500,
    "text": "def get_kdata(entity_id, session=None, level=IntervalLevel.LEVEL_1DAY, adjust_type=AdjustType.qfq, limit=10000):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unhandled HTTP errors",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      74,
      7890,
      7,
      26858,
      62,
      312,
      11,
      6246,
      28,
      14202,
      11,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11,
      4532,
      62,
      4906,
      28,
      39668,
      6030,
      13,
      80,
      69,
      80,
      11,
      4179,
      28,
      49388,
      2599
    ],
    "start_token": 3842,
    "end_token": 3883,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      555,
      38788,
      14626,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unhandled HTTP errors"
  },
  {
    "line": 502,
    "text": "    level = IntervalLevel(level)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Assumes the JSON response structure without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1241,
      796,
      4225,
      2100,
      4971,
      7,
      5715,
      8
    ],
    "start_token": 3883,
    "end_token": 3894,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      2195,
      8139,
      262,
      19449,
      2882,
      4645,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Assumes the JSON response structure without validation"
  },
  {
    "line": 504,
    "text": "    sec_id = to_em_sec_id(entity_id)",
    "annotation": "\u2705 Best Practice: Use a context manager (with statement) for handling resources like network connections",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      792,
      62,
      312,
      796,
      284,
      62,
      368,
      62,
      2363,
      62,
      312,
      7,
      26858,
      62,
      312,
      8
    ],
    "start_token": 3894,
    "end_token": 3913,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4732,
      4706,
      357,
      4480,
      2643,
      8,
      329,
      9041,
      4133,
      588,
      3127,
      8787
    ],
    "label": "best_practice",
    "reason": "Use a context manager (with statement) for handling resources like network connections"
  },
  {
    "line": 506,
    "text": "    level_flag = to_em_level_flag(level)",
    "annotation": "\ud83e\udde0 ML Signal: Function returns data from an external API",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1241,
      62,
      32109,
      796,
      284,
      62,
      368,
      62,
      5715,
      62,
      32109,
      7,
      5715,
      8
    ],
    "start_token": 3913,
    "end_token": 3930,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      5860,
      1366,
      422,
      281,
      7097,
      7824
    ],
    "label": "ml_signal",
    "reason": "Function returns data from an external API"
  },
  {
    "line": 501,
    "text": "    entity_type, exchange, code = decode_entity_id(entity_id)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): URL construction with user-controlled parameters can lead to SSRF or information disclosure if not properly validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      4906,
      11,
      5163,
      11,
      2438,
      796,
      36899,
      62,
      26858,
      62,
      312,
      7,
      26858,
      62,
      312,
      8
    ],
    "start_token": 3930,
    "end_token": 3951,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10289,
      5103,
      351,
      2836,
      12,
      14401,
      10007,
      460,
      1085,
      284,
      6723,
      32754,
      393,
      1321,
      13019,
      611,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "URL construction with user-controlled parameters can lead to SSRF or information disclosure if not properly validated."
  },
  {
    "line": 503,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for the HTTP request, which can lead to hanging requests.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3951,
    "end_token": 3951,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      262,
      14626,
      2581,
      11,
      543,
      460,
      1085,
      284,
      10938,
      7007,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for the HTTP request, which can lead to hanging requests."
  },
  {
    "line": 505,
    "text": "    fq_flag = to_em_fq_flag(adjust_type)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unhandled exceptions if the response does not contain expected JSON structure.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      277,
      80,
      62,
      32109,
      796,
      284,
      62,
      368,
      62,
      69,
      80,
      62,
      32109,
      7,
      23032,
      62,
      4906,
      8
    ],
    "start_token": 3951,
    "end_token": 3972,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      555,
      38788,
      13269,
      611,
      262,
      2882,
      857,
      407,
      3994,
      2938,
      19449,
      4645,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unhandled exceptions if the response does not contain expected JSON structure."
  },
  {
    "line": 507,
    "text": "    # f131 \u7ed3\u7b97\u4ef7",
    "annotation": "\u2705 Best Practice: Ensure the response is closed to free up system resources.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      277,
      22042,
      13328,
      119,
      241,
      163,
      106,
      245,
      20015,
      115
    ],
    "start_token": 3972,
    "end_token": 3986,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      2882,
      318,
      4838,
      284,
      1479,
      510,
      1080,
      4133,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure the response is closed to free up system resources."
  },
  {
    "line": 509,
    "text": "    # \u76ee\u524d\u672a\u83b7\u53d6",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas DataFrame for data manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      13328,
      249,
      106,
      30298,
      235,
      17312,
      103,
      164,
      236,
      115,
      20998,
      244
    ],
    "start_token": 3986,
    "end_token": 4002,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6060,
      19778,
      329,
      1366,
      17512,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas DataFrame for data manipulation."
  },
  {
    "line": 511,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on function parameters.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4002,
    "end_token": 4002,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2163,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on function parameters."
  },
  {
    "line": 511,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame column selection and renaming.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4002,
    "end_token": 4002,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      5721,
      6356,
      290,
      8851,
      3723,
      13
    ],
    "label": "ml_signal",
    "reason": "DataFrame column selection and renaming."
  },
  {
    "line": 529,
    "text": "            # \"2021-08-27,19.39,20.30,20.30,19.25,1688497,3370240912.00,5.48,6.01,1.15,3.98,0,0,0\"",
    "annotation": "\u2705 Best Practice: Dropping NaN values to ensure data integrity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      366,
      1238,
      2481,
      12,
      2919,
      12,
      1983,
      11,
      1129,
      13,
      2670,
      11,
      1238,
      13,
      1270,
      11,
      1238,
      13,
      1270,
      11,
      1129,
      13,
      1495,
      11,
      1433,
      3459,
      38073,
      11,
      2091,
      2154,
      1731,
      2931,
      1065,
      13,
      405,
      11,
      20,
      13,
      2780,
      11,
      21,
      13,
      486,
      11,
      16,
      13,
      1314,
      11,
      18,
      13,
      4089,
      11,
      15,
      11,
      15,
      11,
      15,
      1
    ],
    "start_token": 4002,
    "end_token": 4072,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      11013,
      45,
      3815,
      284,
      4155,
      1366,
      11540,
      13
    ],
    "label": "best_practice",
    "reason": "Dropping NaN values to ensure data integrity."
  },
  {
    "line": 531,
    "text": "            # \"2022-04-13,10708,10664,10790,10638,402712,43124771328,1.43,0.57,60,0.00,4667112399583576064,4690067230254170112,1169270784\"",
    "annotation": "\u2705 Best Practice: Filtering out invalid data entries.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      366,
      1238,
      1828,
      12,
      3023,
      12,
      1485,
      11,
      940,
      32583,
      11,
      15801,
      2414,
      11,
      940,
      37750,
      11,
      15801,
      2548,
      11,
      1821,
      1983,
      1065,
      11,
      3559,
      1065,
      32883,
      1485,
      2078,
      11,
      16,
      13,
      3559,
      11,
      15,
      13,
      3553,
      11,
      1899,
      11,
      15,
      13,
      405,
      11,
      42199,
      4869,
      10163,
      2079,
      3365,
      27277,
      1899,
      2414,
      11,
      42947,
      405,
      3134,
      19214,
      24970,
      1558,
      486,
      1065,
      11,
      1157,
      3388,
      1983,
      2998,
      5705,
      1
    ],
    "start_token": 4072,
    "end_token": 4152,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      503,
      12515,
      1366,
      12784,
      13
    ],
    "label": "best_practice",
    "reason": "Filtering out invalid data entries."
  },
  {
    "line": 535,
    "text": "            the_id = generate_kdata_id(entity_id=entity_id, timestamp=the_timestamp, level=level)",
    "annotation": "\u2705 Best Practice: Explicit type conversion for DataFrame columns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      312,
      796,
      7716,
      62,
      74,
      7890,
      62,
      312,
      7,
      26858,
      62,
      312,
      28,
      26858,
      62,
      312,
      11,
      41033,
      28,
      1169,
      62,
      16514,
      27823,
      11,
      1241,
      28,
      5715,
      8
    ],
    "start_token": 4152,
    "end_token": 4193,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      11315,
      329,
      6060,
      19778,
      15180,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit type conversion for DataFrame columns."
  },
  {
    "line": 537,
    "text": "            open = to_float(fields[1])",
    "annotation": "\ud83e\udde0 ML Signal: Data normalization by scaling values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1280,
      796,
      284,
      62,
      22468,
      7,
      25747,
      58,
      16,
      12962
    ],
    "start_token": 4193,
    "end_token": 4214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      3487,
      1634,
      416,
      20796,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Data normalization by scaling values."
  },
  {
    "line": 541,
    "text": "            volume = to_float(fields[5])",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for row-wise operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      796,
      284,
      62,
      22468,
      7,
      25747,
      58,
      20,
      12962
    ],
    "start_token": 4214,
    "end_token": 4235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      5752,
      12,
      3083,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for row-wise operations."
  },
  {
    "line": 544,
    "text": "            change_pct = value_to_pct(to_float(fields[8]))",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on entity type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      796,
      1988,
      62,
      1462,
      62,
      79,
      310,
      7,
      1462,
      62,
      22468,
      7,
      25747,
      58,
      23,
      60,
      4008
    ],
    "start_token": 4235,
    "end_token": 4267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      9312,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on entity type."
  },
  {
    "line": 548,
    "text": "            kdatas.append(",
    "annotation": "\u2705 Best Practice: Use of to_numeric with error handling for data conversion.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      19608,
      292,
      13,
      33295,
      7
    ],
    "start_token": 4267,
    "end_token": 4284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      284,
      62,
      77,
      39223,
      351,
      4049,
      9041,
      329,
      1366,
      11315,
      13
    ],
    "label": "best_practice",
    "reason": "Use of to_numeric with error handling for data conversion."
  },
  {
    "line": 553,
    "text": "                    provider=\"em\",",
    "annotation": "\ud83e\udde0 ML Signal: Conditional assignment based on function parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      368,
      1600
    ],
    "start_token": 4284,
    "end_token": 4307,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      16237,
      1912,
      319,
      2163,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional assignment based on function parameters."
  },
  {
    "line": 556,
    "text": "                    level=level.value,",
    "annotation": "\ud83e\udde0 ML Signal: Adding new columns to DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      5715,
      13,
      8367,
      11
    ],
    "start_token": 4307,
    "end_token": 4332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      649,
      15180,
      284,
      6060,
      19778,
      13
    ],
    "label": "ml_signal",
    "reason": "Adding new columns to DataFrame."
  },
  {
    "line": 557,
    "text": "                    open=open,",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for row-wise string operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1280,
      28,
      9654,
      11
    ],
    "start_token": 4332,
    "end_token": 4355,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      5752,
      12,
      3083,
      4731,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for row-wise string operations."
  },
  {
    "line": 560,
    "text": "                    low=low,",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame as a function result.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1877,
      28,
      9319,
      11
    ],
    "start_token": 4355,
    "end_token": 4378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      355,
      257,
      2163,
      1255,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame as a function result."
  },
  {
    "line": 549,
    "text": "                dict(",
    "annotation": "\u2705 Best Practice: Use of default parameter value for limit increases function flexibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7
    ],
    "start_token": 4378,
    "end_token": 4395,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      329,
      4179,
      5732,
      2163,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value for limit increases function flexibility."
  },
  {
    "line": 551,
    "text": "                    timestamp=the_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific entity_flag pattern could indicate a common configuration or filter criteria.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      41033,
      28,
      1169,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 4395,
    "end_token": 4421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      9312,
      62,
      32109,
      3912,
      714,
      7603,
      257,
      2219,
      8398,
      393,
      8106,
      9987,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of specific entity_flag pattern could indicate a common configuration or filter criteria."
  },
  {
    "line": 553,
    "text": "                    provider=\"em\",",
    "annotation": "\ud83e\udde0 ML Signal: Specific fields requested could indicate common data attributes of interest.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      368,
      1600
    ],
    "start_token": 4421,
    "end_token": 4444,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      7032,
      9167,
      714,
      7603,
      2219,
      1366,
      12608,
      286,
      1393,
      13
    ],
    "label": "ml_signal",
    "reason": "Specific fields requested could indicate common data attributes of interest."
  },
  {
    "line": 557,
    "text": "                    open=open,",
    "annotation": "\u2705 Best Practice: Explicit parameter naming improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1280,
      28,
      9654,
      11
    ],
    "start_token": 4444,
    "end_token": 4467,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      11507,
      19264,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit parameter naming improves readability and maintainability."
  },
  {
    "line": 554,
    "text": "                    code=code,",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value, indicating common usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      28,
      8189,
      11
    ],
    "start_token": 4467,
    "end_token": 4490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      11,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value, indicating common usage pattern"
  },
  {
    "line": 556,
    "text": "                    level=level.value,",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded string values, indicating specific API usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      5715,
      13,
      8367,
      11
    ],
    "start_token": 4490,
    "end_token": 4515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4731,
      3815,
      11,
      12739,
      2176,
      7824,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Hardcoded string values, indicating specific API usage pattern"
  },
  {
    "line": 557,
    "text": "                    open=open,",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded string values, indicating specific API usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1280,
      28,
      9654,
      11
    ],
    "start_token": 4515,
    "end_token": 4538,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4731,
      3815,
      11,
      12739,
      2176,
      7824,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Hardcoded string values, indicating specific API usage pattern"
  },
  {
    "line": 560,
    "text": "                    low=low,",
    "annotation": "\u2705 Best Practice: Use of named arguments improves readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1877,
      28,
      9319,
      11
    ],
    "start_token": 4538,
    "end_token": 4561,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of named arguments improves readability and maintainability"
  },
  {
    "line": 560,
    "text": "                    low=low,",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific enum value, indicating common usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1877,
      28,
      9319,
      11
    ],
    "start_token": 4561,
    "end_token": 4584,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      33829,
      1988,
      11,
      12739,
      2219,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of specific enum value, indicating common usage pattern"
  },
  {
    "line": 560,
    "text": "                    low=low,",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1877,
      28,
      9319,
      11
    ],
    "start_token": 4584,
    "end_token": 4607,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 568,
    "text": "        df = pd.DataFrame.from_records(kdatas)",
    "annotation": "\u2705 Best Practice: Convert entity_type to TradableType early to ensure consistent type usage throughout the function.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      74,
      19608,
      292,
      8
    ],
    "start_token": 4607,
    "end_token": 4631,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      9312,
      62,
      4906,
      284,
      11974,
      6030,
      1903,
      284,
      4155,
      6414,
      2099,
      8748,
      3690,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Convert entity_type to TradableType early to ensure consistent type usage throughout the function."
  },
  {
    "line": 572,
    "text": "def get_basic_info(entity_id):",
    "annotation": "\u2705 Best Practice: Retrieve exchanges based on entity_type to ensure valid exchange options.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      35487,
      62,
      10951,
      7,
      26858,
      62,
      312,
      2599
    ],
    "start_token": 4631,
    "end_token": 4642,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4990,
      30227,
      14525,
      1912,
      319,
      9312,
      62,
      4906,
      284,
      4155,
      4938,
      5163,
      3689,
      13
    ],
    "label": "best_practice",
    "reason": "Retrieve exchanges based on entity_type to ensure valid exchange options."
  },
  {
    "line": 575,
    "text": "        url = \"https://emh5.eastmoney.com/api/GongSiGaiKuang/GetJiBenZiLiao\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      366,
      5450,
      1378,
      368,
      71,
      20,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      38,
      506,
      42801,
      38,
      1872,
      41733,
      648,
      14,
      3855,
      41,
      72,
      11696,
      57,
      72,
      43,
      13481,
      1
    ],
    "start_token": 4642,
    "end_token": 4682,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 580,
    "text": "    elif entity_type == \"stockhk\":",
    "annotation": "\u2705 Best Practice: Convert exchange to Exchange type to ensure consistent type usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1288,
      361,
      9312,
      62,
      4906,
      6624,
      366,
      13578,
      71,
      74,
      1298
    ],
    "start_token": 4682,
    "end_token": 4696,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      5163,
      284,
      12516,
      2099,
      284,
      4155,
      6414,
      2099,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Convert exchange to Exchange type to ensure consistent type usage."
  },
  {
    "line": 599,
    "text": "    resp.raise_for_status()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1217,
      13,
      40225,
      62,
      1640,
      62,
      13376,
      3419
    ],
    "start_token": 4696,
    "end_token": 4707,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be bypassed if Python is run with optimizations."
  },
  {
    "line": 624,
    "text": "        entity[\"entity_type\"] = \"future\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      366,
      37443,
      1
    ],
    "start_token": 4707,
    "end_token": 4724,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be bypassed if Python is run with optimizations."
  },
  {
    "line": 628,
    "text": "        futures.append(entity)",
    "annotation": "\ud83e\udde0 ML Signal: The function get_top_tradable_list is called with parameters that could be used to learn patterns of tradable entities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25650,
      13,
      33295,
      7,
      26858,
      8
    ],
    "start_token": 4724,
    "end_token": 4737,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      651,
      62,
      4852,
      62,
      2213,
      324,
      540,
      62,
      4868,
      318,
      1444,
      351,
      10007,
      326,
      714,
      307,
      973,
      284,
      2193,
      7572,
      286,
      2083,
      540,
      12066,
      13
    ],
    "label": "ml_signal",
    "reason": "The function get_top_tradable_list is called with parameters that could be used to learn patterns of tradable entities."
  },
  {
    "line": 635,
    "text": "    change_pct = row[\"change_pct\"]",
    "annotation": "\ud83e\udde0 ML Signal: The use of pd.concat to combine dataframes could be a pattern for learning data aggregation techniques.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      796,
      5752,
      14692,
      3803,
      62,
      79,
      310,
      8973
    ],
    "start_token": 4737,
    "end_token": 4752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      1366,
      37805,
      714,
      307,
      257,
      3912,
      329,
      4673,
      1366,
      46500,
      7605,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of pd.concat to combine dataframes could be a pattern for learning data aggregation techniques."
  },
  {
    "line": 629,
    "text": "    df = pd.DataFrame.from_records(data=futures)",
    "annotation": "\ud83e\udde0 ML Signal: Function uses a URL with query parameters, indicating a pattern of API usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      7890,
      28,
      69,
      315,
      942,
      8
    ],
    "start_token": 4752,
    "end_token": 4774,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      257,
      10289,
      351,
      12405,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      7824,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function uses a URL with query parameters, indicating a pattern of API usage."
  },
  {
    "line": 630,
    "text": "    return df",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL contains dynamic query parameters, which could be manipulated if not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 4774,
    "end_token": 4779,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      4909,
      8925,
      12405,
      10007,
      11,
      543,
      714,
      307,
      25036,
      611,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL contains dynamic query parameters, which could be manipulated if not properly validated."
  },
  {
    "line": 632,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL construction with dynamic parameters can lead to injection attacks if inputs are not sanitized.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4779,
    "end_token": 4779,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5103,
      351,
      8925,
      10007,
      460,
      1085,
      284,
      16954,
      3434,
      611,
      17311,
      389,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL construction with dynamic parameters can lead to injection attacks if inputs are not sanitized."
  },
  {
    "line": 635,
    "text": "    change_pct = row[\"change_pct\"]",
    "annotation": "\u2705 Best Practice: Use session object for HTTP requests to leverage connection pooling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1487,
      62,
      79,
      310,
      796,
      5752,
      14692,
      3803,
      62,
      79,
      310,
      8973
    ],
    "start_token": 4779,
    "end_token": 4794,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      6246,
      2134,
      329,
      14626,
      7007,
      284,
      16094,
      4637,
      5933,
      278,
      13
    ],
    "label": "best_practice",
    "reason": "Use session object for HTTP requests to leverage connection pooling."
  },
  {
    "line": 638,
    "text": "    elif code.startswith(\"300\") or code.startswith(\"301\") or code.startswith(\"688\"):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct use of requests.get without session can lead to inefficient network usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1288,
      361,
      2438,
      13,
      9688,
      2032,
      342,
      7203,
      6200,
      4943,
      393,
      2438,
      13,
      9688,
      2032,
      342,
      7203,
      18938,
      4943,
      393,
      2438,
      13,
      9688,
      2032,
      342,
      7203,
      34427,
      1,
      2599
    ],
    "start_token": 4794,
    "end_token": 4826,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      779,
      286,
      7007,
      13,
      1136,
      1231,
      6246,
      460,
      1085,
      284,
      30904,
      3127,
      8748,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct use of requests.get without session can lead to inefficient network usage."
  },
  {
    "line": 640,
    "text": "    else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of JSON injection if the response is not properly validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 4826,
    "end_token": 4831,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      19449,
      16954,
      611,
      262,
      2882,
      318,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of JSON injection if the response is not properly validated."
  },
  {
    "line": 643,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting stock codes to IDs, useful for entity recognition models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4831,
    "end_token": 4831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      4283,
      12416,
      284,
      32373,
      11,
      4465,
      329,
      9312,
      9465,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting stock codes to IDs, useful for entity recognition models."
  },
  {
    "line": 657,
    "text": "    resp = requests.get(url, headers=DEFAULT_HEADER)",
    "annotation": "\u2705 Best Practice: Use of format method for string formatting improves readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      24697,
      28,
      7206,
      38865,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 4831,
    "end_token": 4850,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      5794,
      2446,
      329,
      4731,
      33313,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of format method for string formatting improves readability."
  },
  {
    "line": 659,
    "text": "    resp.raise_for_status()",
    "annotation": "\ud83e\udde0 ML Signal: Use of current date as a timestamp, indicating a pattern of time-based data logging.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1217,
      13,
      40225,
      62,
      1640,
      62,
      13376,
      3419
    ],
    "start_token": 4850,
    "end_token": 4861,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1459,
      3128,
      355,
      257,
      41033,
      11,
      12739,
      257,
      3912,
      286,
      640,
      12,
      3106,
      1366,
      18931,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of current date as a timestamp, indicating a pattern of time-based data logging."
  },
  {
    "line": 659,
    "text": "    resp.raise_for_status()",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on market values indicates a pattern for market-specific processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1217,
      13,
      40225,
      62,
      1640,
      62,
      13376,
      3419
    ],
    "start_token": 4861,
    "end_token": 4872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1910,
      3815,
      9217,
      257,
      3912,
      329,
      1910,
      12,
      11423,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on market values indicates a pattern for market-specific processing."
  },
  {
    "line": 661,
    "text": "    result = json_callback_param(resp.text)",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific market code suggests a pattern for handling Chinese stock codes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      33918,
      62,
      47423,
      62,
      17143,
      7,
      4363,
      13,
      5239,
      8
    ],
    "start_token": 4872,
    "end_token": 4887,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      1910,
      2438,
      5644,
      257,
      3912,
      329,
      9041,
      3999,
      4283,
      12416,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call with specific market code suggests a pattern for handling Chinese stock codes."
  },
  {
    "line": 663,
    "text": "    data = result[\"data\"][\"diff\"]",
    "annotation": "\ud83e\udde0 ML Signal: Specific market codes mapped to formatted strings indicate a pattern for US stock exchanges.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      1255,
      14692,
      7890,
      1,
      7131,
      1,
      26069,
      8973
    ],
    "start_token": 4887,
    "end_token": 4900,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      1910,
      12416,
      27661,
      284,
      39559,
      13042,
      7603,
      257,
      3912,
      329,
      1294,
      4283,
      14525,
      13
    ],
    "label": "ml_signal",
    "reason": "Specific market codes mapped to formatted strings indicate a pattern for US stock exchanges."
  },
  {
    "line": 668,
    "text": "        df.columns = [",
    "annotation": "\ud83e\udde0 ML Signal: Specific market code for Hong Kong stock exchange indicates a pattern for HK market handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      685
    ],
    "start_token": 4900,
    "end_token": 4913,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      1910,
      2438,
      329,
      9764,
      9071,
      4283,
      5163,
      9217,
      257,
      3912,
      329,
      31440,
      1910,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Specific market code for Hong Kong stock exchange indicates a pattern for HK market handling."
  },
  {
    "line": 672,
    "text": "            \"change_pct\",",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over exchange map suggests a pattern for dynamic market handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3803,
      62,
      79,
      310,
      1600
    ],
    "start_token": 4913,
    "end_token": 4930,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5163,
      3975,
      5644,
      257,
      3912,
      329,
      8925,
      1910,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over exchange map suggests a pattern for dynamic market handling."
  },
  {
    "line": 674,
    "text": "            \"turnover_rate\",",
    "annotation": "\ud83e\udde0 ML Signal: Matching market flag to exchange indicates a pattern for exchange-specific processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      15344,
      2502,
      62,
      4873,
      1600
    ],
    "start_token": 4930,
    "end_token": 4947,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13225,
      278,
      1910,
      6056,
      284,
      5163,
      9217,
      257,
      3912,
      329,
      5163,
      12,
      11423,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Matching market flag to exchange indicates a pattern for exchange-specific processing."
  },
  {
    "line": 676,
    "text": "            \"high\",",
    "annotation": "\ud83e\udde0 ML Signal: Nested iteration over tradable types suggests a pattern for entity type mapping.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8929,
      1600
    ],
    "start_token": 4947,
    "end_token": 4961,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      7287,
      24415,
      625,
      2083,
      540,
      3858,
      5644,
      257,
      3912,
      329,
      9312,
      2099,
      16855,
      13
    ],
    "label": "ml_signal",
    "reason": "Nested iteration over tradable types suggests a pattern for entity type mapping."
  },
  {
    "line": 676,
    "text": "            \"high\",",
    "annotation": "\ud83e\udde0 ML Signal: Checking if exchange is in exchanges indicates a pattern for valid exchange filtering.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8929,
      1600
    ],
    "start_token": 4961,
    "end_token": 4975,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      5163,
      318,
      287,
      14525,
      9217,
      257,
      3912,
      329,
      4938,
      5163,
      25431,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking if exchange is in exchanges indicates a pattern for valid exchange filtering."
  },
  {
    "line": 681,
    "text": "        ]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning the code directly if no conditions match may lead to unexpected results.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 4975,
    "end_token": 4983,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      262,
      2438,
      3264,
      611,
      645,
      3403,
      2872,
      743,
      1085,
      284,
      10059,
      2482,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning the code directly if no conditions match may lead to unexpected results."
  },
  {
    "line": 676,
    "text": "            \"high\",",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URL can be used to identify API usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8929,
      1600
    ],
    "start_token": 4983,
    "end_token": 4997,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      10289,
      460,
      307,
      973,
      284,
      5911,
      7824,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URL can be used to identify API usage patterns"
  },
  {
    "line": 682,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage can indicate debugging or monitoring practices",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4997,
    "end_token": 4997,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      460,
      7603,
      28769,
      393,
      9904,
      6593
    ],
    "label": "ml_signal",
    "reason": "Logging usage can indicate debugging or monitoring practices"
  },
  {
    "line": 685,
    "text": "        df = df[df.turnover_rate != \"-\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of session object if not properly validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      58,
      7568,
      13,
      15344,
      2502,
      62,
      4873,
      14512,
      27444,
      8973
    ],
    "start_token": 4997,
    "end_token": 5017,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      6246,
      2134,
      611,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of session object if not properly validated"
  },
  {
    "line": 688,
    "text": "        df = df.astype({\"change_pct\": \"float\", \"turnover_rate\": \"float\", \"turnover\": \"float\", \"volume\": \"float\"})",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No exception handling for network request failures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      459,
      2981,
      7,
      4895,
      3803,
      62,
      79,
      310,
      1298,
      366,
      22468,
      1600,
      366,
      15344,
      2502,
      62,
      4873,
      1298,
      366,
      22468,
      1600,
      366,
      15344,
      2502,
      1298,
      366,
      22468,
      1600,
      366,
      29048,
      1298,
      366,
      22468,
      20662,
      8
    ],
    "start_token": 5017,
    "end_token": 5063,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No exception handling for network request failures"
  },
  {
    "line": 691,
    "text": "        df[\"turnover_rate\"] = df[\"turnover_rate\"] / 100",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes JSON response without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      15344,
      2502,
      62,
      4873,
      8973,
      796,
      47764,
      14692,
      15344,
      2502,
      62,
      4873,
      8973,
      1220,
      1802
    ],
    "start_token": 5063,
    "end_token": 5087,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      19449,
      2882,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes JSON response without validation"
  },
  {
    "line": 697,
    "text": "        if entity_type == TradableType.stock:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list comprehensions can indicate coding style",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      9312,
      62,
      4906,
      6624,
      11974,
      6030,
      13,
      13578,
      25
    ],
    "start_token": 5087,
    "end_token": 5104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      8569,
      507,
      460,
      7603,
      19617,
      3918
    ],
    "label": "ml_signal",
    "reason": "Usage of list comprehensions can indicate coding style"
  },
  {
    "line": 713,
    "text": "def get_top_stocks(limit=100):",
    "annotation": "\u2705 Best Practice: Use of timestamp functions for consistent time handling",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      4852,
      62,
      29522,
      7,
      32374,
      28,
      3064,
      2599
    ],
    "start_token": 5104,
    "end_token": 5115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      41033,
      5499,
      329,
      6414,
      640,
      9041
    ],
    "label": "best_practice",
    "reason": "Use of timestamp functions for consistent time handling"
  },
  {
    "line": 720,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Error logging can be used to identify error handling practices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 5115,
    "end_token": 5119,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13047,
      18931,
      460,
      307,
      973,
      284,
      5911,
      4049,
      9041,
      6593
    ],
    "label": "ml_signal",
    "reason": "Error logging can be used to identify error handling practices"
  },
  {
    "line": 715,
    "text": "    entity_flag = \"fs=m:0+t:6+f:!2,m:0+t:13+f:!2,m:0+t:80+f:!2,m:1+t:2+f:!2,m:1+t:23+f:!2,m:0+t:81+s:2048\"",
    "annotation": "\ud83e\udde0 ML Signal: Function definition and naming pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      366,
      9501,
      28,
      76,
      25,
      15,
      10,
      83,
      25,
      21,
      10,
      69,
      25,
      0,
      17,
      11,
      76,
      25,
      15,
      10,
      83,
      25,
      1485,
      10,
      69,
      25,
      0,
      17,
      11,
      76,
      25,
      15,
      10,
      83,
      25,
      1795,
      10,
      69,
      25,
      0,
      17,
      11,
      76,
      25,
      16,
      10,
      83,
      25,
      17,
      10,
      69,
      25,
      0,
      17,
      11,
      76,
      25,
      16,
      10,
      83,
      25,
      1954,
      10,
      69,
      25,
      0,
      17,
      11,
      76,
      25,
      15,
      10,
      83,
      25,
      6659,
      10,
      82,
      25,
      1238,
      2780,
      1
    ],
    "start_token": 5119,
    "end_token": 5207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      290,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function definition and naming pattern"
  },
  {
    "line": 717,
    "text": "    fields = \"f2,f3,f5,f6,f8,f12,f14,f15,f16,f17,f20,f21\"",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7032,
      796,
      366,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      23,
      11,
      69,
      1065,
      11,
      69,
      1415,
      11,
      69,
      1314,
      11,
      69,
      1433,
      11,
      69,
      1558,
      11,
      69,
      1238,
      11,
      69,
      2481,
      1
    ],
    "start_token": 5207,
    "end_token": 5249,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function call pattern"
  },
  {
    "line": 719,
    "text": "        entity_type=TradableType.stock, fields=fields, limit=limit, entity_flag=entity_flag, return_quote=True",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      4906,
      28,
      2898,
      324,
      540,
      6030,
      13,
      13578,
      11,
      7032,
      28,
      25747,
      11,
      4179,
      28,
      32374,
      11,
      9312,
      62,
      32109,
      28,
      26858,
      62,
      32109,
      11,
      1441,
      62,
      22708,
      28,
      17821
    ],
    "start_token": 5249,
    "end_token": 5288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 722,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame creation from records",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5288,
    "end_token": 5288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      6282,
      422,
      4406
    ],
    "label": "ml_signal",
    "reason": "DataFrame creation from records"
  },
  {
    "line": 724,
    "text": "    entity_flag = \"fs=b:DLMK0144,b:DLMK0146\"",
    "annotation": "\ud83e\udde0 ML Signal: Function call with multiple parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      366,
      9501,
      28,
      65,
      25,
      19260,
      33907,
      486,
      2598,
      11,
      65,
      25,
      19260,
      33907,
      486,
      3510,
      1
    ],
    "start_token": 5288,
    "end_token": 5312,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function call with multiple parameters"
  },
  {
    "line": 725,
    "text": "    fields = \"f2,f3,f5,f6,f8,f12,f14,f15,f16,f17,f20,f21\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if inputs are not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7032,
      796,
      366,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      23,
      11,
      69,
      1065,
      11,
      69,
      1415,
      11,
      69,
      1314,
      11,
      69,
      1433,
      11,
      69,
      1558,
      11,
      69,
      1238,
      11,
      69,
      2481,
      1
    ],
    "start_token": 5312,
    "end_token": 5354,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if inputs are not sanitized"
  },
  {
    "line": 724,
    "text": "    entity_flag = \"fs=b:DLMK0144,b:DLMK0146\"",
    "annotation": "\u2705 Best Practice: Use of a helper function to convert entity_id to sec_id improves code readability and reusability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      366,
      9501,
      28,
      65,
      25,
      19260,
      33907,
      486,
      2598,
      11,
      65,
      25,
      19260,
      33907,
      486,
      3510,
      1
    ],
    "start_token": 5354,
    "end_token": 5378,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      10385,
      9312,
      62,
      312,
      284,
      792,
      62,
      312,
      19575,
      2438,
      1100,
      1799,
      290,
      302,
      385,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to convert entity_id to sec_id improves code readability and reusability."
  },
  {
    "line": 726,
    "text": "    return get_top_tradable_list(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): URL construction with f-strings can lead to injection if inputs are not sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      4852,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7
    ],
    "start_token": 5378,
    "end_token": 5392,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10289,
      5103,
      351,
      277,
      12,
      37336,
      460,
      1085,
      284,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "URL construction with f-strings can lead to injection if inputs are not sanitized."
  },
  {
    "line": 728,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Logging the URL for debugging purposes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 5392,
    "end_token": 5396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      262,
      10289,
      329,
      28769,
      4959,
      13
    ],
    "label": "best_practice",
    "reason": "Logging the URL for debugging purposes."
  },
  {
    "line": 731,
    "text": "def get_tradable_list(",
    "annotation": "\u2705 Best Practice: Use of session for requests can improve performance by reusing connections.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7
    ],
    "start_token": 5396,
    "end_token": 5405,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6246,
      329,
      7007,
      460,
      2987,
      2854,
      416,
      302,
      3500,
      8787,
      13
    ],
    "label": "best_practice",
    "reason": "Use of session for requests can improve performance by reusing connections."
  },
  {
    "line": 736,
    "text": "    block_category=BlockCategory.concept,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly manipulating response text without validation can lead to security issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2512,
      62,
      22872,
      28,
      12235,
      27313,
      13,
      43169,
      11
    ],
    "start_token": 5405,
    "end_token": 5417,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      29349,
      2882,
      2420,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly manipulating response text without validation can lead to security issues."
  },
  {
    "line": 737,
    "text": "):",
    "annotation": "\u2705 Best Practice: Closing the response to free up resources.",
    "confidence": 1.0,
    "tokens": [
      2599
    ],
    "start_token": 5417,
    "end_token": 5418,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47055,
      262,
      2882,
      284,
      1479,
      510,
      4133,
      13
    ],
    "label": "best_practice",
    "reason": "Closing the response to free up resources."
  },
  {
    "line": 737,
    "text": "):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of filtering and transforming data from an API response.",
    "confidence": 0.5,
    "tokens": [
      2599
    ],
    "start_token": 5418,
    "end_token": 5419,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      25431,
      290,
      25449,
      1366,
      422,
      281,
      7824,
      2882,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of filtering and transforming data from an API response."
  },
  {
    "line": 763,
    "text": "            entity_flag = \"fs=i:100.NDX,i:100.DJIA,i:100.SPX,i:100.UDI\"",
    "annotation": "\ud83e\udde0 ML Signal: Recursive function call pattern for pagination.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      366,
      9501,
      28,
      72,
      25,
      3064,
      13,
      8575,
      55,
      11,
      72,
      25,
      3064,
      13,
      35028,
      3539,
      11,
      72,
      25,
      3064,
      13,
      4303,
      55,
      11,
      72,
      25,
      3064,
      13,
      8322,
      40,
      1
    ],
    "start_token": 5419,
    "end_token": 5465,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      2163,
      869,
      3912,
      329,
      42208,
      1883,
      13
    ],
    "label": "ml_signal",
    "reason": "Recursive function call pattern for pagination."
  },
  {
    "line": 771,
    "text": "        # m\u4e3a\u4ea4\u6613\u6240\u4ee3\u7801\uff0ct\u4e3a\u4ea4\u6613\u7c7b\u578b",
    "annotation": "\u2705 Best Practice: Logging errors with detailed information for troubleshooting.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      285,
      10310,
      118,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      47987,
      163,
      254,
      223,
      171,
      120,
      234,
      83,
      10310,
      118,
      12859,
      97,
      23626,
      241,
      163,
      109,
      119,
      161,
      252,
      233
    ],
    "start_token": 5465,
    "end_token": 5502,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      8563,
      351,
      6496,
      1321,
      329,
      14979,
      35486,
      13
    ],
    "label": "best_practice",
    "reason": "Logging errors with detailed information for troubleshooting."
  },
  {
    "line": 765,
    "text": "            if exchange == Exchange.sz:",
    "annotation": "\ud83e\udde0 ML Signal: Function decodes entity_id into components and processes based on type and exchange",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5163,
      6624,
      12516,
      13,
      82,
      89,
      25
    ],
    "start_token": 5502,
    "end_token": 5521,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      875,
      4147,
      9312,
      62,
      312,
      656,
      6805,
      290,
      7767,
      1912,
      319,
      2099,
      290,
      5163
    ],
    "label": "ml_signal",
    "reason": "Function decodes entity_id into components and processes based on type and exchange"
  },
  {
    "line": 778,
    "text": "                # t=6 \u4e3b\u677f",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of exchanges to specific flags, useful for feature extraction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      256,
      28,
      21,
      220,
      10310,
      119,
      30266,
      123
    ],
    "start_token": 5521,
    "end_token": 5545,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      14525,
      284,
      2176,
      9701,
      11,
      4465,
      329,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Mapping of exchanges to specific flags, useful for feature extraction"
  },
  {
    "line": 778,
    "text": "                # t=6 \u4e3b\u677f",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if Exchange is not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      256,
      28,
      21,
      220,
      10310,
      119,
      30266,
      123
    ],
    "start_token": 5545,
    "end_token": 5569,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      12516,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if Exchange is not validated or sanitized"
  },
  {
    "line": 794,
    "text": "                entity_flag = f\"fs=m:105+t:1,m:105+t:3\"",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the return type of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      277,
      1,
      9501,
      28,
      76,
      25,
      13348,
      10,
      83,
      25,
      16,
      11,
      76,
      25,
      13348,
      10,
      83,
      25,
      18,
      1
    ],
    "start_token": 5569,
    "end_token": 5608,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the return type of the function"
  },
  {
    "line": 796,
    "text": "                # t=1",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of input to a specific type (Exchange) indicates a pattern of type normalization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      256,
      28,
      16
    ],
    "start_token": 5608,
    "end_token": 5627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      5128,
      284,
      257,
      2176,
      2099,
      357,
      3109,
      3803,
      8,
      9217,
      257,
      3912,
      286,
      2099,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Conversion of input to a specific type (Exchange) indicates a pattern of type normalization"
  },
  {
    "line": 798,
    "text": "                entity_flag = f\"fs=m:106+t:1,m:105+t:3\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary for mapping suggests a pattern of key-value retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      277,
      1,
      9501,
      28,
      76,
      25,
      15801,
      10,
      83,
      25,
      16,
      11,
      76,
      25,
      13348,
      10,
      83,
      25,
      18,
      1
    ],
    "start_token": 5627,
    "end_token": 5666,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      329,
      16855,
      5644,
      257,
      3912,
      286,
      1994,
      12,
      8367,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary for mapping suggests a pattern of key-value retrieval"
  },
  {
    "line": 797,
    "text": "                # t=3 \u4e2d\u6982\u80a1",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      256,
      28,
      18,
      220,
      40792,
      162,
      99,
      224,
      164,
      224,
      94
    ],
    "start_token": 5666,
    "end_token": 5693,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and parameters."
  },
  {
    "line": 799,
    "text": "            if exchange == Exchange.cn:",
    "annotation": "\u2705 Best Practice: Ensure the input is of the correct type by converting it to AdjustType.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5163,
      6624,
      12516,
      13,
      31522,
      25
    ],
    "start_token": 5693,
    "end_token": 5711,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      5128,
      318,
      286,
      262,
      3376,
      2099,
      416,
      23202,
      340,
      284,
      20292,
      6030,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure the input is of the correct type by converting it to AdjustType."
  },
  {
    "line": 801,
    "text": "                    entity_flag = entity_flag + \"+t:2\"",
    "annotation": "\ud83e\udde0 ML Signal: Using conditional checks to map enum values to integers.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      32109,
      796,
      9312,
      62,
      32109,
      1343,
      43825,
      83,
      25,
      17,
      1
    ],
    "start_token": 5711,
    "end_token": 5743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      26340,
      8794,
      284,
      3975,
      33829,
      3815,
      284,
      37014,
      13
    ],
    "label": "ml_signal",
    "reason": "Using conditional checks to map enum values to integers."
  },
  {
    "line": 805,
    "text": "                    assert False",
    "annotation": "\ud83e\udde0 ML Signal: Function converts interval levels to numeric flags, useful for feature extraction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      10352
    ],
    "start_token": 5743,
    "end_token": 5764,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      26161,
      16654,
      2974,
      284,
      35575,
      9701,
      11,
      4465,
      329,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Function converts interval levels to numeric flags, useful for feature extraction"
  },
  {
    "line": 807,
    "text": "        # f2, f3, f4, f12, f13, f14, f19, f111, f148",
    "annotation": "\u2705 Best Practice: Explicitly converting level to IntervalLevel ensures type consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      277,
      17,
      11,
      277,
      18,
      11,
      277,
      19,
      11,
      277,
      1065,
      11,
      277,
      1485,
      11,
      277,
      1415,
      11,
      277,
      1129,
      11,
      277,
      16243,
      11,
      277,
      18294
    ],
    "start_token": 5764,
    "end_token": 5798,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      23202,
      1241,
      284,
      4225,
      2100,
      4971,
      19047,
      2099,
      15794
    ],
    "label": "best_practice",
    "reason": "Explicitly converting level to IntervalLevel ensures type consistency"
  },
  {
    "line": 809,
    "text": "        if entity_type in (TradableType.stock, TradableType.stockhk):",
    "annotation": "\ud83e\udde0 ML Signal: Mapping specific interval levels to numeric values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      9312,
      62,
      4906,
      287,
      357,
      2898,
      324,
      540,
      6030,
      13,
      13578,
      11,
      11974,
      6030,
      13,
      13578,
      71,
      74,
      2599
    ],
    "start_token": 5798,
    "end_token": 5825,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      2176,
      16654,
      2974,
      284,
      35575,
      3815
    ],
    "label": "ml_signal",
    "reason": "Mapping specific interval levels to numeric values"
  },
  {
    "line": 826,
    "text": "    category_stocks_url = f\"http://48.push2.eastmoney.com/api/qt/clist/get?cb=jQuery11240710111145777397_{now_timestamp() - 1}&pn=1&pz=1000&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&wbp2u=4668014655929990|0|1|0|web&fid=f3&fs=b:{code}+f:!50&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152,f45&_={now_timestamp()}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6536,
      62,
      29522,
      62,
      6371,
      796,
      277,
      1,
      4023,
      1378,
      2780,
      13,
      14689,
      17,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      39568,
      14,
      565,
      396,
      14,
      1136,
      30,
      21101,
      28,
      73,
      20746,
      14686,
      1821,
      4869,
      486,
      1157,
      18781,
      29331,
      33372,
      23330,
      2197,
      62,
      16514,
      27823,
      3419,
      532,
      352,
      92,
      5,
      21999,
      28,
      16,
      5,
      79,
      89,
      28,
      12825,
      5,
      7501,
      28,
      16,
      5,
      37659,
      28,
      16,
      5,
      315,
      28,
      17457,
      16,
      67,
      24,
      1860,
      65,
      36676,
      4531,
      9879,
      12993,
      24,
      66,
      1983,
      69,
      21,
      69,
      4524,
      2075,
      30368,
      5,
      2704,
      926,
      28,
      17,
      5,
      16340,
      83,
      28,
      17,
      5,
      39346,
      79,
      17,
      84,
      28,
      19,
      35809,
      486,
      3510,
      38605,
      1959,
      34155,
      91,
      15,
      91,
      16,
      91,
      15,
      91,
      12384,
      5,
      69,
      312,
      28,
      69,
      18,
      5,
      9501,
      28,
      65,
      29164,
      8189,
      92,
      10,
      69,
      25,
      0,
      1120,
      5,
      25747,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      11,
      69,
      24,
      11,
      69,
      940,
      11,
      69,
      1065,
      11,
      69,
      1485,
      11,
      69,
      1415,
      11,
      69,
      1314,
      11,
      69,
      1433,
      11,
      69,
      1558,
      11,
      69,
      1507,
      11,
      69,
      1238,
      11,
      69,
      2481,
      11,
      69,
      1954,
      11,
      69,
      1731,
      11,
      69,
      1495,
      11,
      69,
      1828,
      11,
      69,
      1157,
      11,
      69,
      5237,
      11,
      69,
      12762,
      11,
      69,
      20809,
      11,
      69,
      15363,
      11,
      69,
      17827,
      11,
      69,
      2231,
      5,
      62,
      34758,
      2197,
      62,
      16514,
      27823,
      3419,
      36786
    ],
    "start_token": 5825,
    "end_token": 6067,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be disabled in production"
  },
  {
    "line": 824,
    "text": "def get_block_stocks(block_id, name=\"\", session=None):",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific naming pattern",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      9967,
      62,
      29522,
      7,
      9967,
      62,
      312,
      11,
      1438,
      2625,
      1600,
      6246,
      28,
      14202,
      2599
    ],
    "start_token": 6067,
    "end_token": 6085,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific naming pattern"
  },
  {
    "line": 826,
    "text": "    category_stocks_url = f\"http://48.push2.eastmoney.com/api/qt/clist/get?cb=jQuery11240710111145777397_{now_timestamp() - 1}&pn=1&pz=1000&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&wbp2u=4668014655929990|0|1|0|web&fid=f3&fs=b:{code}+f:!50&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152,f45&_={now_timestamp()}\"",
    "annotation": "\ud83e\udde0 ML Signal: Unpacking tuple from function return",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6536,
      62,
      29522,
      62,
      6371,
      796,
      277,
      1,
      4023,
      1378,
      2780,
      13,
      14689,
      17,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      39568,
      14,
      565,
      396,
      14,
      1136,
      30,
      21101,
      28,
      73,
      20746,
      14686,
      1821,
      4869,
      486,
      1157,
      18781,
      29331,
      33372,
      23330,
      2197,
      62,
      16514,
      27823,
      3419,
      532,
      352,
      92,
      5,
      21999,
      28,
      16,
      5,
      79,
      89,
      28,
      12825,
      5,
      7501,
      28,
      16,
      5,
      37659,
      28,
      16,
      5,
      315,
      28,
      17457,
      16,
      67,
      24,
      1860,
      65,
      36676,
      4531,
      9879,
      12993,
      24,
      66,
      1983,
      69,
      21,
      69,
      4524,
      2075,
      30368,
      5,
      2704,
      926,
      28,
      17,
      5,
      16340,
      83,
      28,
      17,
      5,
      39346,
      79,
      17,
      84,
      28,
      19,
      35809,
      486,
      3510,
      38605,
      1959,
      34155,
      91,
      15,
      91,
      16,
      91,
      15,
      91,
      12384,
      5,
      69,
      312,
      28,
      69,
      18,
      5,
      9501,
      28,
      65,
      29164,
      8189,
      92,
      10,
      69,
      25,
      0,
      1120,
      5,
      25747,
      28,
      69,
      16,
      11,
      69,
      17,
      11,
      69,
      18,
      11,
      69,
      19,
      11,
      69,
      20,
      11,
      69,
      21,
      11,
      69,
      22,
      11,
      69,
      23,
      11,
      69,
      24,
      11,
      69,
      940,
      11,
      69,
      1065,
      11,
      69,
      1485,
      11,
      69,
      1415,
      11,
      69,
      1314,
      11,
      69,
      1433,
      11,
      69,
      1558,
      11,
      69,
      1507,
      11,
      69,
      1238,
      11,
      69,
      2481,
      11,
      69,
      1954,
      11,
      69,
      1731,
      11,
      69,
      1495,
      11,
      69,
      1828,
      11,
      69,
      1157,
      11,
      69,
      5237,
      11,
      69,
      12762,
      11,
      69,
      20809,
      11,
      69,
      15363,
      11,
      69,
      17827,
      11,
      69,
      2231,
      5,
      62,
      34758,
      2197,
      62,
      16514,
      27823,
      3419,
      36786
    ],
    "start_token": 6085,
    "end_token": 6327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      791,
      41291,
      46545,
      422,
      2163,
      1441
    ],
    "label": "ml_signal",
    "reason": "Unpacking tuple from function return"
  },
  {
    "line": 828,
    "text": "        resp = session.get(category_stocks_url, headers=DEFAULT_HEADER)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on entity type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1217,
      796,
      6246,
      13,
      1136,
      7,
      22872,
      62,
      29522,
      62,
      6371,
      11,
      24697,
      28,
      7206,
      38865,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 6327,
    "end_token": 6354,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      9312,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on entity type"
  },
  {
    "line": 830,
    "text": "        resp = requests.get(category_stocks_url, headers=DEFAULT_HEADER)",
    "annotation": "\u2705 Best Practice: Clear and concise string manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      1136,
      7,
      22872,
      62,
      29522,
      62,
      6371,
      11,
      24697,
      28,
      7206,
      38865,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 6354,
    "end_token": 6381,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      290,
      35327,
      4731,
      17512
    ],
    "label": "best_practice",
    "reason": "Clear and concise string manipulation"
  },
  {
    "line": 832,
    "text": "    data = json_callback_param(resp.text)[\"data\"]",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on entity type and substring check",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      33918,
      62,
      47423,
      62,
      17143,
      7,
      4363,
      13,
      5239,
      8,
      14692,
      7890,
      8973
    ],
    "start_token": 6381,
    "end_token": 6399,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      9312,
      2099,
      290,
      3293,
      1806,
      2198
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on entity type and substring check"
  },
  {
    "line": 834,
    "text": "    if data:",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      1366,
      25
    ],
    "start_token": 6399,
    "end_token": 6405,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting"
  },
  {
    "line": 836,
    "text": "        for result in results:",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1255,
      287,
      2482,
      25
    ],
    "start_token": 6405,
    "end_token": 6417,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting"
  },
  {
    "line": 832,
    "text": "    data = json_callback_param(resp.text)[\"data\"]",
    "annotation": "\ud83e\udde0 ML Signal: Function uses a series of conditional checks to map input codes to specific values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      33918,
      62,
      47423,
      62,
      17143,
      7,
      4363,
      13,
      5239,
      8,
      14692,
      7890,
      8973
    ],
    "start_token": 6417,
    "end_token": 6435,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      257,
      2168,
      286,
      26340,
      8794,
      284,
      3975,
      5128,
      12416,
      284,
      2176,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Function uses a series of conditional checks to map input codes to specific values."
  },
  {
    "line": 847,
    "text": "                    \"code\": code,",
    "annotation": "\u26a0\ufe0f SAST Risk (High): The function get_stock_turnover() is called without being defined or imported, leading to a potential NameError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      2438,
      11
    ],
    "start_token": 6435,
    "end_token": 6459,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      383,
      2163,
      651,
      62,
      13578,
      62,
      15344,
      2502,
      3419,
      318,
      1444,
      1231,
      852,
      5447,
      393,
      17392,
      11,
      3756,
      284,
      257,
      2785,
      6530,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "The function get_stock_turnover() is called without being defined or imported, leading to a potential NameError."
  },
  {
    "line": 847,
    "text": "                    \"code\": code,",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module, which improves code maintainability and readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      2438,
      11
    ],
    "start_token": 6459,
    "end_token": 6483,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      11,
      543,
      19575,
      2438,
      5529,
      1799,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module, which improves code maintainability and readability."
  }
]
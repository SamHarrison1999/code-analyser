[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local can improve readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      460,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local can improve readability."
  },
  {
    "line": 11,
    "text": "from zvt.domain.actor.stock_actor import StockInstitutionalInvestorHolder",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      13,
      11218,
      13,
      13578,
      62,
      11218,
      1330,
      10500,
      6310,
      5677,
      19070,
      273,
      39,
      19892
    ],
    "start_token": 0,
    "end_token": 19,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      5045,
      395,
      9430,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality"
  },
  {
    "line": 12,
    "text": "from zvt.recorders.em.em_api import get_ii_holder_report_dates, get_ii_holder, actor_type_to_org_type",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring to describe its purpose and usage",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      368,
      13,
      368,
      62,
      15042,
      1330,
      651,
      62,
      4178,
      62,
      13829,
      62,
      13116,
      62,
      19581,
      11,
      651,
      62,
      4178,
      62,
      13829,
      11,
      8674,
      62,
      4906,
      62,
      1462,
      62,
      2398,
      62,
      4906
    ],
    "start_token": 19,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring to describe its purpose and usage"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attributes define configuration or metadata, useful for pattern recognition",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 57,
    "end_token": 57,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      12608,
      8160,
      8398,
      393,
      20150,
      11,
      4465,
      329,
      3912,
      9465
    ],
    "label": "ml_signal",
    "reason": "Class attributes define configuration or metadata, useful for pattern recognition"
  },
  {
    "line": 16,
    "text": "# {'END_DATE': '2021-03-31 00:00:00',",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific schema (Stock) indicates a pattern of data handling",
    "confidence": 0.5,
    "tokens": [
      2,
      1391,
      6,
      10619,
      62,
      35,
      6158,
      10354,
      705,
      1238,
      2481,
      12,
      3070,
      12,
      3132,
      3571,
      25,
      405,
      25,
      405,
      3256
    ],
    "start_token": 57,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      32815,
      357,
      26207,
      8,
      9217,
      257,
      3912,
      286,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Association with a specific schema (Stock) indicates a pattern of data handling"
  },
  {
    "line": 18,
    "text": "#   'HOLDER_CODE_OLD': '80010104',",
    "annotation": "\ud83e\udde0 ML Signal: Class attributes define configuration or metadata, useful for pattern recognition",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      220,
      705,
      39,
      3535,
      14418,
      62,
      34,
      16820,
      62,
      15173,
      10354,
      705,
      7410,
      8784,
      3023,
      3256
    ],
    "start_token": 78,
    "end_token": 96,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      12608,
      8160,
      8398,
      393,
      20150,
      11,
      4465,
      329,
      3912,
      9465
    ],
    "label": "ml_signal",
    "reason": "Class attributes define configuration or metadata, useful for pattern recognition"
  },
  {
    "line": 20,
    "text": "#   'HOLDER_RANK': 1,",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific schema (StockInstitutionalInvestorHolder) indicates a pattern of data handling",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      220,
      705,
      39,
      3535,
      14418,
      62,
      49,
      15154,
      10354,
      352,
      11
    ],
    "start_token": 96,
    "end_token": 109,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      32815,
      357,
      26207,
      6310,
      5677,
      19070,
      273,
      39,
      19892,
      8,
      9217,
      257,
      3912,
      286,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Association with a specific schema (StockInstitutionalInvestorHolder) indicates a pattern of data handling"
  },
  {
    "line": 16,
    "text": "# {'END_DATE': '2021-03-31 00:00:00',",
    "annotation": "\u2705 Best Practice: Specify the return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      2,
      1391,
      6,
      10619,
      62,
      35,
      6158,
      10354,
      705,
      1238,
      2481,
      12,
      3070,
      12,
      3132,
      3571,
      25,
      405,
      25,
      405,
      3256
    ],
    "start_token": 109,
    "end_token": 130,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Specify the return type for better readability and maintainability"
  },
  {
    "line": 18,
    "text": "#   'HOLDER_CODE_OLD': '80010104',",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function get_ii_holder_report_dates",
    "confidence": 1.0,
    "tokens": [
      2,
      220,
      220,
      705,
      39,
      3535,
      14418,
      62,
      34,
      16820,
      62,
      15173,
      10354,
      705,
      7410,
      8784,
      3023,
      3256
    ],
    "start_token": 130,
    "end_token": 148,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      651,
      62,
      4178,
      62,
      13829,
      62,
      13116,
      62,
      19581
    ],
    "label": "ml_signal",
    "reason": "Usage of external function get_ii_holder_report_dates"
  },
  {
    "line": 21,
    "text": "#   'HOLD_NUM': 1938664086,",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension pattern",
    "confidence": 1.0,
    "tokens": [
      2,
      220,
      220,
      705,
      39,
      15173,
      62,
      41359,
      10354,
      28017,
      2791,
      1821,
      4521,
      11
    ],
    "start_token": 148,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      3912
    ],
    "label": "ml_signal",
    "reason": "List comprehension pattern"
  },
  {
    "line": 22,
    "text": "#   'HOLD_NUM_RATIO': 24.44,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function to_pd_timestamp",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      220,
      705,
      39,
      15173,
      62,
      41359,
      62,
      49,
      1404,
      9399,
      10354,
      1987,
      13,
      2598,
      11
    ],
    "start_token": 162,
    "end_token": 179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "label": "ml_signal",
    "reason": "Usage of external function to_pd_timestamp"
  },
  {
    "line": 24,
    "text": "#   'IS_HOLDORG': '1',",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a fixed set of types (ActorType) to filter or process data",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      220,
      705,
      1797,
      62,
      39,
      15173,
      1581,
      38,
      10354,
      705,
      16,
      3256
    ],
    "start_token": 179,
    "end_token": 193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      5969,
      900,
      286,
      3858,
      357,
      40277,
      6030,
      8,
      284,
      8106,
      393,
      1429,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over a fixed set of types (ActorType) to filter or process data"
  },
  {
    "line": 27,
    "text": "#  {'END_DATE': '2021-03-31 00:00:00',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data if entity.code or the_date contains sensitive information",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      1391,
      6,
      10619,
      62,
      35,
      6158,
      10354,
      705,
      1238,
      2481,
      12,
      3070,
      12,
      3132,
      3571,
      25,
      405,
      25,
      405,
      3256
    ],
    "start_token": 193,
    "end_token": 215,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      611,
      9312,
      13,
      8189,
      393,
      262,
      62,
      4475,
      4909,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data if entity.code or the_date contains sensitive information"
  },
  {
    "line": 31,
    "text": "#   'HOLDER_CODE_OLD': '161606',",
    "annotation": "\ud83e\udde0 ML Signal: Creating a structured data record from API results",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      220,
      705,
      39,
      3535,
      14418,
      62,
      34,
      16820,
      62,
      15173,
      10354,
      705,
      1433,
      1433,
      3312,
      3256
    ],
    "start_token": 215,
    "end_token": 233,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      20793,
      1366,
      1700,
      422,
      7824,
      2482
    ],
    "label": "ml_signal",
    "reason": "Creating a structured data record from API results"
  },
  {
    "line": 51,
    "text": "    def record(self, entity, start, end, size, timestamps):",
    "annotation": "\u2705 Best Practice: Using pandas DataFrame for structured data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1700,
      7,
      944,
      11,
      9312,
      11,
      923,
      11,
      886,
      11,
      2546,
      11,
      4628,
      395,
      9430,
      2599
    ],
    "start_token": 233,
    "end_token": 253,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Using pandas DataFrame for structured data manipulation"
  },
  {
    "line": 58,
    "text": "                result = get_ii_holder(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df_to_db handles SQL injection and data validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      796,
      651,
      62,
      4178,
      62,
      13829,
      7
    ],
    "start_token": 253,
    "end_token": 276,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      62,
      1462,
      62,
      9945,
      17105,
      16363,
      16954,
      290,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df_to_db handles SQL injection and data validation"
  },
  {
    "line": 58,
    "text": "                result = get_ii_holder(",
    "annotation": "\ud83e\udde0 ML Signal: Creating a structured data record for actors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      796,
      651,
      62,
      4178,
      62,
      13829,
      7
    ],
    "start_token": 276,
    "end_token": 299,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      20793,
      1366,
      1700,
      329,
      10544
    ],
    "label": "ml_signal",
    "reason": "Creating a structured data record for actors"
  },
  {
    "line": 75,
    "text": "                            \"holding_numbers\": item[\"TOTAL_SHARES\"],",
    "annotation": "\u2705 Best Practice: Using pandas DataFrame for structured data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19216,
      62,
      77,
      17024,
      1298,
      2378,
      14692,
      51,
      27510,
      62,
      9693,
      1503,
      1546,
      33116
    ],
    "start_token": 299,
    "end_token": 341,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Using pandas DataFrame for structured data manipulation"
  },
  {
    "line": 75,
    "text": "                            \"holding_numbers\": item[\"TOTAL_SHARES\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df_to_db handles SQL injection and data validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19216,
      62,
      77,
      17024,
      1298,
      2378,
      14692,
      51,
      27510,
      62,
      9693,
      1503,
      1546,
      33116
    ],
    "start_token": 341,
    "end_token": 383,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      62,
      1462,
      62,
      9945,
      17105,
      16363,
      16954,
      290,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df_to_db handles SQL injection and data validation"
  },
  {
    "line": 75,
    "text": "                            \"holding_numbers\": item[\"TOTAL_SHARES\"],",
    "annotation": "\ud83e\udde0 ML Signal: Entry point for running the script with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19216,
      62,
      77,
      17024,
      1298,
      2378,
      14692,
      51,
      27510,
      62,
      9693,
      1503,
      1546,
      33116
    ],
    "start_token": 383,
    "end_token": 425,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21617,
      966,
      329,
      2491,
      262,
      4226,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Entry point for running the script with specific parameters"
  },
  {
    "line": 75,
    "text": "                            \"holding_numbers\": item[\"TOTAL_SHARES\"],",
    "annotation": "\ud83e\udde0 ML Signal: Defining module exports for external use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19216,
      62,
      77,
      17024,
      1298,
      2378,
      14692,
      51,
      27510,
      62,
      9693,
      1503,
      1546,
      33116
    ],
    "start_token": 425,
    "end_token": 467,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2896,
      3191,
      8265,
      15319,
      329,
      7097,
      779
    ],
    "label": "ml_signal",
    "reason": "Defining module exports for external use"
  }
]
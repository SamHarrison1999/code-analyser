[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local sections improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      9004,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local sections improves readability."
  },
  {
    "line": 12,
    "text": "from zvt.recorders.em.em_api import get_holder_report_dates, get_holders",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      368,
      13,
      368,
      62,
      15042,
      1330,
      651,
      62,
      13829,
      62,
      13116,
      62,
      19581,
      11,
      651,
      62,
      10476
    ],
    "start_token": 0,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      5045,
      395,
      9430,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 16,
    "text": "class EMStockTopTenRecorder(TimestampsDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [
      4871,
      17228,
      26207,
      9126,
      24893,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 24,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 18,
    "text": "    entity_schema = Stock",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      10500
    ],
    "start_token": 39,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 20,
    "text": "    provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      368,
      1
    ],
    "start_token": 48,
    "end_token": 56,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 17,
    "text": "    entity_provider = \"em\"",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      368,
      1
    ],
    "start_token": 56,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function get_holder_report_dates with entity_item.code",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 67,
    "end_token": 67,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      651,
      62,
      13829,
      62,
      13116,
      62,
      19581,
      351,
      9312,
      62,
      9186,
      13,
      8189
    ],
    "label": "ml_signal",
    "reason": "Usage of external function get_holder_report_dates with entity_item.code"
  },
  {
    "line": 21,
    "text": "    data_schema = StockTopTenHolder",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension pattern for transforming data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      10500,
      9126,
      24893,
      39,
      19892
    ],
    "start_token": 67,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      3912,
      329,
      25449,
      1366
    ],
    "label": "ml_signal",
    "reason": "List comprehension pattern for transforming data"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of to_pd_timestamp function to convert dates",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 80,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      2163,
      284,
      10385,
      9667
    ],
    "label": "ml_signal",
    "reason": "Usage of to_pd_timestamp function to convert dates"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if to_pd_timestamp does not handle invalid date formats",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 80,
    "end_token": 80,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      857,
      407,
      5412,
      12515,
      3128,
      17519
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if to_pd_timestamp does not handle invalid date formats"
  },
  {
    "line": 28,
    "text": "    def on_finish_entity(self, entity):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      15643,
      680,
      62,
      26858,
      7,
      944,
      11,
      9312,
      2599
    ],
    "start_token": 80,
    "end_token": 95,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if filters are not properly sanitized"
  },
  {
    "line": 40,
    "text": "                    StockInstitutionalInvestorHolder.holding_values > 1,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10500,
      6310,
      5677,
      19070,
      273,
      39,
      19892,
      13,
      19216,
      62,
      27160,
      1875,
      352,
      11
    ],
    "start_token": 95,
    "end_token": 128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if filters are not properly sanitized"
  },
  {
    "line": 43,
    "text": "                ],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by zero risk if ii[0].holding_ratio is zero",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 128,
    "end_token": 144,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      6632,
      2526,
      611,
      21065,
      58,
      15,
      4083,
      19216,
      62,
      10366,
      952,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by zero risk if ii[0].holding_ratio is zero"
  },
  {
    "line": 45,
    "text": "                return_type=\"domain\",",
    "annotation": "\u2705 Best Practice: Ensure session is committed to save changes to the database",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 144,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      6246,
      318,
      5364,
      284,
      3613,
      2458,
      284,
      262,
      6831
    ],
    "label": "best_practice",
    "reason": "Ensure session is committed to save changes to the database"
  },
  {
    "line": 43,
    "text": "                ],",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over timestamps to process data for each timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 165,
    "end_token": 181,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4628,
      395,
      9430,
      284,
      1429,
      1366,
      329,
      1123,
      41033
    ],
    "label": "ml_signal",
    "reason": "Iterating over timestamps to process data for each timestamp"
  },
  {
    "line": 45,
    "text": "                return_type=\"domain\",",
    "annotation": "\ud83e\udde0 ML Signal: Converting timestamp to string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 181,
    "end_token": 202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      41033,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Converting timestamp to string format"
  },
  {
    "line": 47,
    "text": "            if ii:",
    "annotation": "\ud83e\udde0 ML Signal: Fetching data based on entity code and date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      21065,
      25
    ],
    "start_token": 202,
    "end_token": 216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1366,
      1912,
      319,
      9312,
      2438,
      290,
      3128
    ],
    "label": "ml_signal",
    "reason": "Fetching data based on entity code and date"
  },
  {
    "line": 51,
    "text": "    def record(self, entity, start, end, size, timestamps):",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over result items to process each holder",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1700,
      7,
      944,
      11,
      9312,
      11,
      923,
      11,
      886,
      11,
      2546,
      11,
      4628,
      395,
      9430,
      2599
    ],
    "start_token": 216,
    "end_token": 236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1255,
      3709,
      284,
      1429,
      1123,
      15762
    ],
    "label": "ml_signal",
    "reason": "Iterating over result items to process each holder"
  },
  {
    "line": 55,
    "text": "            if result:",
    "annotation": "\ud83e\udde0 ML Signal: Querying data to check for existing domains",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1255,
      25
    ],
    "start_token": 236,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      284,
      2198,
      329,
      4683,
      18209
    ],
    "label": "ml_signal",
    "reason": "Querying data to check for existing domains"
  },
  {
    "line": 56,
    "text": "                holders = []",
    "annotation": "\ud83e\udde0 ML Signal: Creating new ActorMeta object for corporation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16392,
      796,
      17635
    ],
    "start_token": 250,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      649,
      27274,
      48526,
      2134,
      329,
      12017
    ],
    "label": "ml_signal",
    "reason": "Creating new ActorMeta object for corporation"
  },
  {
    "line": 68,
    "text": "                                id=f'{actor_type}_cn_{item[\"HOLDER_CODE\"]}',",
    "annotation": "\ud83e\udde0 ML Signal: Using existing domain data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4686,
      28,
      69,
      6,
      90,
      11218,
      62,
      4906,
      92,
      62,
      31522,
      23330,
      9186,
      14692,
      39,
      3535,
      14418,
      62,
      34,
      16820,
      8973,
      92,
      3256
    ],
    "start_token": 268,
    "end_token": 322,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      4683,
      7386,
      1366
    ],
    "label": "ml_signal",
    "reason": "Using existing domain data"
  },
  {
    "line": 76,
    "text": "                    else:",
    "annotation": "\ud83e\udde0 ML Signal: Creating new ActorMeta object for individual",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 322,
    "end_token": 343,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      649,
      27274,
      48526,
      2134,
      329,
      1981
    ],
    "label": "ml_signal",
    "reason": "Creating new ActorMeta object for individual"
  },
  {
    "line": 77,
    "text": "                        actor_type = ActorType.individual.value",
    "annotation": "\ud83e\udde0 ML Signal: Collecting new actor data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8674,
      62,
      4906,
      796,
      27274,
      6030,
      13,
      43129,
      13,
      8367
    ],
    "start_token": 343,
    "end_token": 376,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      649,
      8674,
      1366
    ],
    "label": "ml_signal",
    "reason": "Collecting new actor data"
  },
  {
    "line": 92,
    "text": "                        \"name\": entity.name,",
    "annotation": "\ud83e\udde0 ML Signal: Constructing holder dictionary with detailed information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      9312,
      13,
      3672,
      11
    ],
    "start_token": 376,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      278,
      15762,
      22155,
      351,
      6496,
      1321
    ],
    "label": "ml_signal",
    "reason": "Constructing holder dictionary with detailed information"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\ud83e\udde0 ML Signal: Appending holder data to list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 406,
    "end_token": 426,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      15762,
      1366,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending holder data to list"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\ud83e\udde0 ML Signal: Converting holders list to DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 426,
    "end_token": 446,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      16392,
      1351,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Converting holders list to DataFrame"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if df_to_db is not properly handling inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 446,
    "end_token": 466,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      318,
      407,
      6105,
      9041,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if df_to_db is not properly handling inputs"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\ud83e\udde0 ML Signal: Converting new actors list to DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 466,
    "end_token": 486,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      649,
      10544,
      1351,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Converting new actors list to DataFrame"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if df_to_db is not properly handling inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 486,
    "end_token": 506,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      318,
      407,
      6105,
      9041,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if df_to_db is not properly handling inputs"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\u2705 Best Practice: Use of __name__ == \"__main__\" to allow or prevent parts of code from being run when the modules are imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 506,
    "end_token": 526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      6624,
      366,
      834,
      12417,
      834,
      1,
      284,
      1249,
      393,
      2948,
      3354,
      286,
      2438,
      422,
      852,
      1057,
      618,
      262,
      13103,
      389,
      17392
    ],
    "label": "best_practice",
    "reason": "Use of __name__ == \"__main__\" to allow or prevent parts of code from being run when the modules are imported"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\ud83e\udde0 ML Signal: Running the recorder with specific codes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 526,
    "end_token": 546,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18162,
      262,
      38156,
      351,
      2176,
      12416
    ],
    "label": "ml_signal",
    "reason": "Running the recorder with specific codes"
  },
  {
    "line": 101,
    "text": "                    }",
    "annotation": "\u2705 Best Practice: Defining __all__ to specify public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 546,
    "end_token": 566,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      11593,
      439,
      834,
      284,
      11986,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Defining __all__ to specify public API of the module"
  }
]
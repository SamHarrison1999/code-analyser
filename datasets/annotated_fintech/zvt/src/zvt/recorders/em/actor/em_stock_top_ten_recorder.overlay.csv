annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports into standard library, third-party, and local sections improves readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 9004, 19575, 1100, 1799, 13]",1.0,0,best_practice,3,"Grouping imports into standard library, third-party, and local sections improves readability.",,0,,[]
üß† ML Signal: Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 5045, 395, 9430, 6601, 6690, 2875, 9217, 257, 3912, 286, 16610, 11244]",1.0,24,ml_signal,12,Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality,,0,"from zvt.recorders.em.em_api import get_holder_report_dates, get_holders","[6738, 1976, 36540, 13, 8344, 6361, 13, 368, 13, 368, 62, 15042, 1330, 651, 62, 13829, 62, 13116, 62, 19581, 11, 651, 62, 10476]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,24,ml_signal,14,Use of class attributes for configuration,,24,,[]
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,39,ml_signal,16,Use of class attributes for configuration,,24,class EMStockTopTenRecorder(TimestampsDataRecorder):,"[4871, 17228, 26207, 9126, 24893, 6690, 2875, 7, 14967, 395, 9430, 6601, 6690, 2875, 2599]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,48,ml_signal,18,Use of class attributes for configuration,,39,    entity_schema = Stock,"[220, 220, 220, 9312, 62, 15952, 2611, 796, 10500]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,56,ml_signal,20,Use of class attributes for configuration,,48,"    provider = ""em""","[220, 220, 220, 10131, 796, 366, 368, 1]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,67,best_practice,17,Consider adding a docstring to describe the function's purpose and parameters,,56,"    entity_provider = ""em""","[220, 220, 220, 9312, 62, 15234, 1304, 796, 366, 368, 1]"
üß† ML Signal: Usage of external function get_holder_report_dates with entity_item.code,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 651, 62, 13829, 62, 13116, 62, 19581, 351, 9312, 62, 9186, 13, 8189]",1.0,67,ml_signal,19,Usage of external function get_holder_report_dates with entity_item.code,,67,,[]
üß† ML Signal: List comprehension pattern for transforming data,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 3912, 329, 25449, 1366]",1.0,80,ml_signal,21,List comprehension pattern for transforming data,,67,    data_schema = StockTopTenHolder,"[220, 220, 220, 1366, 62, 15952, 2611, 796, 10500, 9126, 24893, 39, 19892]"
üß† ML Signal: Usage of to_pd_timestamp function to convert dates,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 284, 62, 30094, 62, 16514, 27823, 2163, 284, 10385, 9667]",0.5,80,ml_signal,22,Usage of to_pd_timestamp function to convert dates,,80,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if to_pd_timestamp does not handle invalid date formats,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 284, 62, 30094, 62, 16514, 27823, 857, 407, 5412, 12515, 3128, 17519]",0.5,80,sast_risk,22,Potential risk if to_pd_timestamp does not handle invalid date formats,Low,80,,[]
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,95,sast_risk,28,Potential SQL injection if filters are not properly sanitized,Low,80,"    def on_finish_entity(self, entity):","[220, 220, 220, 825, 319, 62, 15643, 680, 62, 26858, 7, 944, 11, 9312, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,128,sast_risk,40,Potential SQL injection if filters are not properly sanitized,Low,95,"                    StockInstitutionalInvestorHolder.holding_values > 1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10500, 6310, 5677, 19070, 273, 39, 19892, 13, 19216, 62, 27160, 1875, 352, 11]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if ii[0].holding_ratio is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 21065, 58, 15, 4083, 19216, 62, 10366, 952, 318, 6632]",0.5,144,sast_risk,43,Division by zero risk if ii[0].holding_ratio is zero,Low,128,"                ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
‚úÖ Best Practice: Ensure session is committed to save changes to the database,"[26486, 227, 6705, 19939, 25, 48987, 6246, 318, 5364, 284, 3613, 2458, 284, 262, 6831]",0.5,165,best_practice,45,Ensure session is committed to save changes to the database,,144,"                return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
üß† ML Signal: Iterating over timestamps to process data for each timestamp,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4628, 395, 9430, 284, 1429, 1366, 329, 1123, 41033]",1.0,181,ml_signal,43,Iterating over timestamps to process data for each timestamp,,165,"                ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
üß† ML Signal: Converting timestamp to string format,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 41033, 284, 4731, 5794]",1.0,202,ml_signal,45,Converting timestamp to string format,,181,"                return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
üß† ML Signal: Fetching data based on entity code and date,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1366, 1912, 319, 9312, 2438, 290, 3128]",1.0,216,ml_signal,47,Fetching data based on entity code and date,,202,            if ii:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 21065, 25]"
üß† ML Signal: Iterating over result items to process each holder,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 1255, 3709, 284, 1429, 1123, 15762]",1.0,236,ml_signal,51,Iterating over result items to process each holder,,216,"    def record(self, entity, start, end, size, timestamps):","[220, 220, 220, 825, 1700, 7, 944, 11, 9312, 11, 923, 11, 886, 11, 2546, 11, 4628, 395, 9430, 2599]"
üß† ML Signal: Querying data to check for existing domains,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 284, 2198, 329, 4683, 18209]",0.5,250,ml_signal,55,Querying data to check for existing domains,,236,            if result:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1255, 25]"
üß† ML Signal: Creating new ActorMeta object for corporation,"[8582, 100, 254, 10373, 26484, 25, 30481, 649, 27274, 48526, 2134, 329, 12017]",1.0,268,ml_signal,56,Creating new ActorMeta object for corporation,,250,                holders = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16392, 796, 17635]"
üß† ML Signal: Using existing domain data,"[8582, 100, 254, 10373, 26484, 25, 8554, 4683, 7386, 1366]",1.0,322,ml_signal,68,Using existing domain data,,268,"                                id=f'{actor_type}_cn_{item[""HOLDER_CODE""]}',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4686, 28, 69, 6, 90, 11218, 62, 4906, 92, 62, 31522, 23330, 9186, 14692, 39, 3535, 14418, 62, 34, 16820, 8973, 92, 3256]"
üß† ML Signal: Creating new ActorMeta object for individual,"[8582, 100, 254, 10373, 26484, 25, 30481, 649, 27274, 48526, 2134, 329, 1981]",1.0,343,ml_signal,76,Creating new ActorMeta object for individual,,322,                    else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Collecting new actor data,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 649, 8674, 1366]",1.0,376,ml_signal,77,Collecting new actor data,,343,                        actor_type = ActorType.individual.value,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8674, 62, 4906, 796, 27274, 6030, 13, 43129, 13, 8367]"
üß† ML Signal: Constructing holder dictionary with detailed information,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 15762, 22155, 351, 6496, 1321]",1.0,406,ml_signal,92,Constructing holder dictionary with detailed information,,376,"                        ""name"": entity.name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 9312, 13, 3672, 11]"
üß† ML Signal: Appending holder data to list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 15762, 1366, 284, 1351]",1.0,426,ml_signal,101,Appending holder data to list,,406,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Converting holders list to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 16392, 1351, 284, 6060, 19778]",1.0,446,ml_signal,101,Converting holders list to DataFrame,,426,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if df_to_db is not properly handling inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 318, 407, 6105, 9041, 17311]",1.0,466,sast_risk,101,Potential SQL injection risk if df_to_db is not properly handling inputs,Low,446,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Converting new actors list to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 649, 10544, 1351, 284, 6060, 19778]",1.0,486,ml_signal,101,Converting new actors list to DataFrame,,466,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if df_to_db is not properly handling inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 47764, 62, 1462, 62, 9945, 318, 407, 6105, 9041, 17311]",1.0,506,sast_risk,101,Potential SQL injection risk if df_to_db is not properly handling inputs,Low,486,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
"‚úÖ Best Practice: Use of __name__ == ""__main__"" to allow or prevent parts of code from being run when the modules are imported","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 6624, 366, 834, 12417, 834, 1, 284, 1249, 393, 2948, 3354, 286, 2438, 422, 852, 1057, 618, 262, 13103, 389, 17392]",0.5,526,best_practice,101,"Use of __name__ == ""__main__"" to allow or prevent parts of code from being run when the modules are imported",,506,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Running the recorder with specific codes,"[8582, 100, 254, 10373, 26484, 25, 18162, 262, 38156, 351, 2176, 12416]",1.0,546,ml_signal,101,Running the recorder with specific codes,,526,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚úÖ Best Practice: Defining __all__ to specify public API of the module,"[26486, 227, 6705, 19939, 25, 2896, 3191, 11593, 439, 834, 284, 11986, 1171, 7824, 286, 262, 8265]",0.5,566,best_practice,101,Defining __all__ to specify public API of the module,,546,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports into standard library, third-party, and local can improve readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 460, 2987, 1100, 1799, 13]",1.0,0,best_practice,3,"Grouping imports into standard library, third-party, and local can improve readability.",,0,,[]
üß† ML Signal: Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 5045, 395, 9430, 6601, 6690, 2875, 9217, 257, 3912, 286, 16610, 11244]",0.5,26,ml_signal,12,Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality,,0,"from zvt.recorders.em.em_api import get_holder_report_dates, get_free_holders","[6738, 1976, 36540, 13, 8344, 6361, 13, 368, 13, 368, 62, 15042, 1330, 651, 62, 13829, 62, 13116, 62, 19581, 11, 651, 62, 5787, 62, 10476]"
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,26,ml_signal,14,Use of class-level attributes for configuration,,26,,[]
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,42,ml_signal,16,Use of class-level attributes for configuration,,26,class EMStockTopTenFreeRecorder(TimestampsDataRecorder):,"[4871, 17228, 26207, 9126, 24893, 11146, 6690, 2875, 7, 14967, 395, 9430, 6601, 6690, 2875, 2599]"
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,51,ml_signal,18,Use of class-level attributes for configuration,,42,    entity_schema = Stock,"[220, 220, 220, 9312, 62, 15952, 2611, 796, 10500]"
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,59,ml_signal,20,Use of class-level attributes for configuration,,51,"    provider = ""em""","[220, 220, 220, 10131, 796, 366, 368, 1]"
‚úÖ Best Practice: Consider adding type hints for the entity_item parameter for better code clarity.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 9312, 62, 9186, 11507, 329, 1365, 2438, 16287, 13]",0.5,70,best_practice,17,Consider adding type hints for the entity_item parameter for better code clarity.,,59,"    entity_provider = ""em""","[220, 220, 220, 9312, 62, 15234, 1304, 796, 366, 368, 1]"
üß† ML Signal: Checking if a result is truthy before processing is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 1255, 318, 3872, 88, 878, 7587, 318, 257, 2219, 3912, 13]",0.5,70,ml_signal,19,Checking if a result is truthy before processing is a common pattern.,,70,,[]
üß† ML Signal: List comprehension is a common pattern for transforming lists.,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 318, 257, 2219, 3912, 329, 25449, 8341, 13]",0.5,84,ml_signal,21,List comprehension is a common pattern for transforming lists.,,70,    data_schema = StockTopTenFreeHolder,"[220, 220, 220, 1366, 62, 15952, 2611, 796, 10500, 9126, 24893, 11146, 39, 19892]"
"‚ö†Ô∏è SAST Risk (Low): Ensure that item[""END_DATE""] exists and is of the expected format to avoid runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 2378, 14692, 10619, 62, 35, 6158, 8973, 7160, 290, 318, 286, 262, 2938, 5794, 284, 3368, 19124, 8563, 13]",0.5,84,sast_risk,22,"Ensure that item[""END_DATE""] exists and is of the expected format to avoid runtime errors.",Low,84,,[]
üß† ML Signal: Usage of query_data method to retrieve data based on filters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 284, 19818, 1366, 1912, 319, 16628]",0.5,84,ml_signal,22,Usage of query_data method to retrieve data based on filters,,84,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,84,sast_risk,22,Potential for SQL injection if filters are not properly sanitized,Low,84,,[]
‚ö†Ô∏è SAST Risk (Low): Comparison with None using '==' can lead to unexpected behavior; use 'is None' instead,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 34420, 351, 6045, 1262, 705, 855, 6, 460, 1085, 284, 10059, 4069, 26, 779, 705, 271, 6045, 6, 2427]",0.5,99,sast_risk,28,Comparison with None using '==' can lead to unexpected behavior; use 'is None' instead,Low,84,"    def on_finish_entity(self, entity):","[220, 220, 220, 825, 319, 62, 15643, 680, 62, 26858, 7, 944, 11, 9312, 2599]"
üß† ML Signal: Iterating over database query results,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6831, 12405, 2482]",0.5,117,ml_signal,29,Iterating over database query results,,99,        super().on_finish_entity(entity),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 261, 62, 15643, 680, 62, 26858, 7, 26858, 8]"
üß† ML Signal: Usage of query_data method with multiple filters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 351, 3294, 16628]",0.5,135,ml_signal,29,Usage of query_data method with multiple filters,,117,        super().on_finish_entity(entity),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 261, 62, 15643, 680, 62, 26858, 7, 26858, 8]"
‚úÖ Best Practice: Ensure filters are properly validated to prevent unexpected behavior,"[26486, 227, 6705, 19939, 25, 48987, 16628, 389, 6105, 31031, 284, 2948, 10059, 4069]",0.5,152,best_practice,39,Ensure filters are properly validated to prevent unexpected behavior,,135,                filters=[,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 41888]"
üß† ML Signal: Calculation involving database fields,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 7411, 6831, 7032]",0.5,164,ml_signal,46,Calculation involving database fields,,152,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Committing changes to the database session,"[8582, 100, 254, 10373, 26484, 25, 1520, 2535, 2458, 284, 262, 6831, 6246]",0.5,208,ml_signal,48,Committing changes to the database session,,164,                holder.holding_values = holder.holding_ratio * ii[0].holding_values / ii[0].holding_ratio,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15762, 13, 19216, 62, 27160, 796, 15762, 13, 19216, 62, 10366, 952, 1635, 21065, 58, 15, 4083, 19216, 62, 27160, 1220, 21065, 58, 15, 4083, 19216, 62, 10366, 952]"
‚ö†Ô∏è SAST Risk (Low): Ensure that session commit is properly handled to avoid data inconsistency,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 6246, 4589, 318, 6105, 12118, 284, 3368, 1366, 43831]",0.5,221,sast_risk,49,Ensure that session commit is properly handled to avoid data inconsistency,Low,208,        self.session.commit(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 29891, 13, 41509, 3419]"
üß† ML Signal: Iterating over timestamps to process data for each timestamp,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4628, 395, 9430, 284, 1429, 1366, 329, 1123, 41033]",1.0,237,ml_signal,43,Iterating over timestamps to process data for each timestamp,,221,"                ],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16589]"
üß† ML Signal: Converting timestamp to string format,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 41033, 284, 4731, 5794]",1.0,258,ml_signal,45,Converting timestamp to string format,,237,"                return_type=""domain"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4906, 2625, 27830, 1600]"
üß† ML Signal: Fetching data based on entity code and date,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1366, 1912, 319, 9312, 2438, 290, 3128]",1.0,272,ml_signal,47,Fetching data based on entity code and date,,258,            if ii:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 21065, 25]"
‚úÖ Best Practice: Initialize lists before use,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 878, 779]",1.0,272,best_practice,50,Initialize lists before use,,272,,[]
üß† ML Signal: Checking if the holder is an organization,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 15762, 318, 281, 4009]",1.0,305,ml_signal,54,Checking if the holder is an organization,,272,"            result = get_free_holders(code=entity.code, end_date=the_date)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 796, 651, 62, 5787, 62, 10476, 7, 8189, 28, 26858, 13, 8189, 11, 886, 62, 4475, 28, 1169, 62, 4475, 8]"
üß† ML Signal: Querying data for actor metadata,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 329, 8674, 20150]",0.5,323,ml_signal,56,Querying data for actor metadata,,305,                holders = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16392, 796, 17635]"
üß† ML Signal: Creating a new actor if not found in domains,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 8674, 611, 407, 1043, 287, 18209]",0.5,355,ml_signal,65,Creating a new actor if not found in domains,,323,"                    #   'HOLDER_RANK': 10,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 705, 39, 3535, 14418, 62, 49, 15154, 10354, 838, 11]"
üß† ML Signal: Using existing actor metadata,"[8582, 100, 254, 10373, 26484, 25, 8554, 4683, 8674, 20150]",1.0,390,ml_signal,68,Using existing actor metadata,,355,                    #   'SECUCODE': '000338.SZ'},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 705, 23683, 9598, 16820, 10354, 705, 830, 28460, 13, 50, 57, 6, 92]"
üß† ML Signal: Handling individual actor type,"[8582, 100, 254, 10373, 26484, 25, 49500, 1981, 8674, 2099]",0.5,422,ml_signal,76,Handling individual actor type,,390,                            actor = ActorMeta(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8674, 796, 27274, 48526, 7]"
üß† ML Signal: Collecting new actor data,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 649, 8674, 1366]",1.0,453,ml_signal,92,Collecting new actor data,,422,"                            exchange=""cn"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5163, 2625, 31522, 1600]"
üß† ML Signal: Constructing holder data,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 15762, 1366]",1.0,484,ml_signal,92,Constructing holder data,,453,"                            exchange=""cn"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5163, 2625, 31522, 1600]"
üß† ML Signal: Appending holder data to list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 15762, 1366, 284, 1351]",1.0,514,ml_signal,101,Appending holder data to list,,484,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
üß† ML Signal: Converting holders list to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 16392, 1351, 284, 6060, 19778]",1.0,544,ml_signal,101,Converting holders list to DataFrame,,514,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if df_to_db is not properly handling inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 47764, 62, 1462, 62, 9945, 318, 407, 6105, 9041, 17311]",1.0,574,sast_risk,101,Potential SQL injection if df_to_db is not properly handling inputs,Low,544,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
üß† ML Signal: Converting new actors list to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 649, 10544, 1351, 284, 6060, 19778]",1.0,604,ml_signal,101,Converting new actors list to DataFrame,,574,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if df_to_db is not properly handling inputs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 47764, 62, 1462, 62, 9945, 318, 407, 6105, 9041, 17311]",1.0,634,sast_risk,101,Potential SQL injection if df_to_db is not properly handling inputs,Low,604,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
üß† ML Signal: Main execution entry point,"[8582, 100, 254, 10373, 26484, 25, 8774, 9706, 5726, 966]",1.0,664,ml_signal,101,Main execution entry point,,634,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
üß† ML Signal: Running the recorder with specific codes,"[8582, 100, 254, 10373, 26484, 25, 18162, 262, 38156, 351, 2176, 12416]",1.0,694,ml_signal,101,Running the recorder with specific codes,,664,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"
üß† ML Signal: Defining module exports,"[8582, 100, 254, 10373, 26484, 25, 2896, 3191, 8265, 15319]",1.0,724,ml_signal,101,Defining module exports,,694,"                        ""code"": entity.code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 9312, 13, 8189, 11]"

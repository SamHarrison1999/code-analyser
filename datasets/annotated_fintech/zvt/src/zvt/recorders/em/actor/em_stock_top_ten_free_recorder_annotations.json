[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local can improve readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      460,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local can improve readability."
  },
  {
    "line": 12,
    "text": "from zvt.recorders.em.em_api import get_holder_report_dates, get_free_holders",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      368,
      13,
      368,
      62,
      15042,
      1330,
      651,
      62,
      13829,
      62,
      13116,
      62,
      19581,
      11,
      651,
      62,
      5787,
      62,
      10476
    ],
    "start_token": 0,
    "end_token": 26,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      5045,
      395,
      9430,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes for configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 26,
    "end_token": 26,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes for configuration"
  },
  {
    "line": 16,
    "text": "class EMStockTopTenFreeRecorder(TimestampsDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      4871,
      17228,
      26207,
      9126,
      24893,
      11146,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 26,
    "end_token": 42,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes for configuration"
  },
  {
    "line": 18,
    "text": "    entity_schema = Stock",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      10500
    ],
    "start_token": 42,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes for configuration"
  },
  {
    "line": 20,
    "text": "    provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      368,
      1
    ],
    "start_token": 51,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes for configuration"
  },
  {
    "line": 17,
    "text": "    entity_provider = \"em\"",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the entity_item parameter for better code clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      368,
      1
    ],
    "start_token": 59,
    "end_token": 70,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      9312,
      62,
      9186,
      11507,
      329,
      1365,
      2438,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the entity_item parameter for better code clarity."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a result is truthy before processing is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 70,
    "end_token": 70,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      1255,
      318,
      3872,
      88,
      878,
      7587,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking if a result is truthy before processing is a common pattern."
  },
  {
    "line": 21,
    "text": "    data_schema = StockTopTenFreeHolder",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension is a common pattern for transforming lists.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      10500,
      9126,
      24893,
      11146,
      39,
      19892
    ],
    "start_token": 70,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      318,
      257,
      2219,
      3912,
      329,
      25449,
      8341,
      13
    ],
    "label": "ml_signal",
    "reason": "List comprehension is a common pattern for transforming lists."
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that item[\"END_DATE\"] exists and is of the expected format to avoid runtime errors.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      2378,
      14692,
      10619,
      62,
      35,
      6158,
      8973,
      7160,
      290,
      318,
      286,
      262,
      2938,
      5794,
      284,
      3368,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that item[\"END_DATE\"] exists and is of the expected format to avoid runtime errors."
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method to retrieve data based on filters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      284,
      19818,
      1366,
      1912,
      319,
      16628
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method to retrieve data based on filters"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for SQL injection if filters are not properly sanitized"
  },
  {
    "line": 28,
    "text": "    def on_finish_entity(self, entity):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Comparison with None using '==' can lead to unexpected behavior; use 'is None' instead",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      15643,
      680,
      62,
      26858,
      7,
      944,
      11,
      9312,
      2599
    ],
    "start_token": 84,
    "end_token": 99,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      34420,
      351,
      6045,
      1262,
      705,
      855,
      6,
      460,
      1085,
      284,
      10059,
      4069,
      26,
      779,
      705,
      271,
      6045,
      6,
      2427
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Comparison with None using '==' can lead to unexpected behavior; use 'is None' instead"
  },
  {
    "line": 29,
    "text": "        super().on_finish_entity(entity)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over database query results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      261,
      62,
      15643,
      680,
      62,
      26858,
      7,
      26858,
      8
    ],
    "start_token": 99,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6831,
      12405,
      2482
    ],
    "label": "ml_signal",
    "reason": "Iterating over database query results"
  },
  {
    "line": 29,
    "text": "        super().on_finish_entity(entity)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method with multiple filters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      261,
      62,
      15643,
      680,
      62,
      26858,
      7,
      26858,
      8
    ],
    "start_token": 117,
    "end_token": 135,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      351,
      3294,
      16628
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method with multiple filters"
  },
  {
    "line": 39,
    "text": "                filters=[",
    "annotation": "\u2705 Best Practice: Ensure filters are properly validated to prevent unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888
    ],
    "start_token": 135,
    "end_token": 152,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      16628,
      389,
      6105,
      31031,
      284,
      2948,
      10059,
      4069
    ],
    "label": "best_practice",
    "reason": "Ensure filters are properly validated to prevent unexpected behavior"
  },
  {
    "line": 46,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Calculation involving database fields",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 152,
    "end_token": 164,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      7411,
      6831,
      7032
    ],
    "label": "ml_signal",
    "reason": "Calculation involving database fields"
  },
  {
    "line": 48,
    "text": "                holder.holding_values = holder.holding_ratio * ii[0].holding_values / ii[0].holding_ratio",
    "annotation": "\ud83e\udde0 ML Signal: Committing changes to the database session",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15762,
      13,
      19216,
      62,
      27160,
      796,
      15762,
      13,
      19216,
      62,
      10366,
      952,
      1635,
      21065,
      58,
      15,
      4083,
      19216,
      62,
      27160,
      1220,
      21065,
      58,
      15,
      4083,
      19216,
      62,
      10366,
      952
    ],
    "start_token": 164,
    "end_token": 208,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1520,
      2535,
      2458,
      284,
      262,
      6831,
      6246
    ],
    "label": "ml_signal",
    "reason": "Committing changes to the database session"
  },
  {
    "line": 49,
    "text": "        self.session.commit()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that session commit is properly handled to avoid data inconsistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      29891,
      13,
      41509,
      3419
    ],
    "start_token": 208,
    "end_token": 221,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      6246,
      4589,
      318,
      6105,
      12118,
      284,
      3368,
      1366,
      43831
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that session commit is properly handled to avoid data inconsistency"
  },
  {
    "line": 43,
    "text": "                ],",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over timestamps to process data for each timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 221,
    "end_token": 237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4628,
      395,
      9430,
      284,
      1429,
      1366,
      329,
      1123,
      41033
    ],
    "label": "ml_signal",
    "reason": "Iterating over timestamps to process data for each timestamp"
  },
  {
    "line": 45,
    "text": "                return_type=\"domain\",",
    "annotation": "\ud83e\udde0 ML Signal: Converting timestamp to string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 237,
    "end_token": 258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      41033,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Converting timestamp to string format"
  },
  {
    "line": 47,
    "text": "            if ii:",
    "annotation": "\ud83e\udde0 ML Signal: Fetching data based on entity code and date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      21065,
      25
    ],
    "start_token": 258,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1366,
      1912,
      319,
      9312,
      2438,
      290,
      3128
    ],
    "label": "ml_signal",
    "reason": "Fetching data based on entity code and date"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize lists before use",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Initialize lists before use"
  },
  {
    "line": 54,
    "text": "            result = get_free_holders(code=entity.code, end_date=the_date)",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the holder is an organization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      796,
      651,
      62,
      5787,
      62,
      10476,
      7,
      8189,
      28,
      26858,
      13,
      8189,
      11,
      886,
      62,
      4475,
      28,
      1169,
      62,
      4475,
      8
    ],
    "start_token": 272,
    "end_token": 305,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      15762,
      318,
      281,
      4009
    ],
    "label": "ml_signal",
    "reason": "Checking if the holder is an organization"
  },
  {
    "line": 56,
    "text": "                holders = []",
    "annotation": "\ud83e\udde0 ML Signal: Querying data for actor metadata",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16392,
      796,
      17635
    ],
    "start_token": 305,
    "end_token": 323,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      329,
      8674,
      20150
    ],
    "label": "ml_signal",
    "reason": "Querying data for actor metadata"
  },
  {
    "line": 65,
    "text": "                    #   'HOLDER_RANK': 10,",
    "annotation": "\ud83e\udde0 ML Signal: Creating a new actor if not found in domains",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      705,
      39,
      3535,
      14418,
      62,
      49,
      15154,
      10354,
      838,
      11
    ],
    "start_token": 323,
    "end_token": 355,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      649,
      8674,
      611,
      407,
      1043,
      287,
      18209
    ],
    "label": "ml_signal",
    "reason": "Creating a new actor if not found in domains"
  },
  {
    "line": 68,
    "text": "                    #   'SECUCODE': '000338.SZ'}",
    "annotation": "\ud83e\udde0 ML Signal: Using existing actor metadata",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      705,
      23683,
      9598,
      16820,
      10354,
      705,
      830,
      28460,
      13,
      50,
      57,
      6,
      92
    ],
    "start_token": 355,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      4683,
      8674,
      20150
    ],
    "label": "ml_signal",
    "reason": "Using existing actor metadata"
  },
  {
    "line": 76,
    "text": "                            actor = ActorMeta(",
    "annotation": "\ud83e\udde0 ML Signal: Handling individual actor type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8674,
      796,
      27274,
      48526,
      7
    ],
    "start_token": 390,
    "end_token": 422,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1981,
      8674,
      2099
    ],
    "label": "ml_signal",
    "reason": "Handling individual actor type"
  },
  {
    "line": 92,
    "text": "                            exchange=\"cn\",",
    "annotation": "\ud83e\udde0 ML Signal: Collecting new actor data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      2625,
      31522,
      1600
    ],
    "start_token": 422,
    "end_token": 453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      649,
      8674,
      1366
    ],
    "label": "ml_signal",
    "reason": "Collecting new actor data"
  },
  {
    "line": 92,
    "text": "                            exchange=\"cn\",",
    "annotation": "\ud83e\udde0 ML Signal: Constructing holder data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      2625,
      31522,
      1600
    ],
    "start_token": 453,
    "end_token": 484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      278,
      15762,
      1366
    ],
    "label": "ml_signal",
    "reason": "Constructing holder data"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\ud83e\udde0 ML Signal: Appending holder data to list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 484,
    "end_token": 514,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      15762,
      1366,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending holder data to list"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\ud83e\udde0 ML Signal: Converting holders list to DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 514,
    "end_token": 544,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      16392,
      1351,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Converting holders list to DataFrame"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if df_to_db is not properly handling inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 544,
    "end_token": 574,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      318,
      407,
      6105,
      9041,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if df_to_db is not properly handling inputs"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\ud83e\udde0 ML Signal: Converting new actors list to DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 574,
    "end_token": 604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      649,
      10544,
      1351,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Converting new actors list to DataFrame"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if df_to_db is not properly handling inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 604,
    "end_token": 634,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      318,
      407,
      6105,
      9041,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if df_to_db is not properly handling inputs"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\ud83e\udde0 ML Signal: Main execution entry point",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 634,
    "end_token": 664,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8774,
      9706,
      5726,
      966
    ],
    "label": "ml_signal",
    "reason": "Main execution entry point"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\ud83e\udde0 ML Signal: Running the recorder with specific codes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 664,
    "end_token": 694,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18162,
      262,
      38156,
      351,
      2176,
      12416
    ],
    "label": "ml_signal",
    "reason": "Running the recorder with specific codes"
  },
  {
    "line": 101,
    "text": "                        \"code\": entity.code,",
    "annotation": "\ud83e\udde0 ML Signal: Defining module exports",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      9312,
      13,
      8189,
      11
    ],
    "start_token": 694,
    "end_token": 724,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2896,
      3191,
      8265,
      15319
    ],
    "label": "ml_signal",
    "reason": "Defining module exports"
  }
]
[
  {
    "line": 2,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Import only necessary functions or classes to reduce memory usage and improve readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      691,
      3306,
      5499,
      393,
      6097,
      284,
      4646,
      4088,
      8748,
      290,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Import only necessary functions or classes to reduce memory usage and improve readability."
  },
  {
    "line": 4,
    "text": "from zvt.contract.api import df_to_db",
    "annotation": "\u2705 Best Practice: Group related imports together for better organization and readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      15042,
      1330,
      47764,
      62,
      1462,
      62,
      9945
    ],
    "start_token": 6,
    "end_token": 19,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      3519,
      17944,
      1978,
      329,
      1365,
      4009,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group related imports together for better organization and readability."
  },
  {
    "line": 7,
    "text": "from zvt.recorders.em import em_api",
    "annotation": "\u2705 Best Practice: Use specific imports to avoid importing unnecessary modules and to clarify dependencies.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      368,
      1330,
      795,
      62,
      15042
    ],
    "start_token": 19,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2176,
      17944,
      284,
      3368,
      33332,
      13114,
      13103,
      290,
      284,
      18282,
      20086,
      13
    ],
    "label": "best_practice",
    "reason": "Use specific imports to avoid importing unnecessary modules and to clarify dependencies."
  },
  {
    "line": 7,
    "text": "from zvt.recorders.em import em_api",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating a common pattern for extending functionality",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      368,
      1330,
      795,
      62,
      15042
    ],
    "start_token": 31,
    "end_token": 43,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      257,
      2219,
      3912,
      329,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating a common pattern for extending functionality"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating a constant or configuration value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 43,
    "end_token": 43,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      257,
      6937,
      393,
      8398,
      1988
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating a constant or configuration value"
  },
  {
    "line": 11,
    "text": "    provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a schema or data structure, indicating a pattern for data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      368,
      1
    ],
    "start_token": 43,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      32815,
      393,
      1366,
      4645,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Usage of a schema or data structure, indicating a pattern for data handling"
  },
  {
    "line": 10,
    "text": "class EMBlockRecorder(Recorder):",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a predefined list of categories",
    "confidence": 1.0,
    "tokens": [
      4871,
      17228,
      12235,
      6690,
      2875,
      7,
      6690,
      2875,
      2599
    ],
    "start_token": 51,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2747,
      18156,
      1351,
      286,
      9376
    ],
    "label": "ml_signal",
    "reason": "Iterating over a predefined list of categories"
  },
  {
    "line": 12,
    "text": "    data_schema = Block",
    "annotation": "\ud83e\udde0 ML Signal: API call to fetch data based on category",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      9726
    ],
    "start_token": 60,
    "end_token": 69,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      284,
      21207,
      1366,
      1912,
      319,
      6536
    ],
    "label": "ml_signal",
    "reason": "API call to fetch data based on category"
  },
  {
    "line": 14,
    "text": "    def run(self):",
    "annotation": "\u2705 Best Practice: Logging data for traceability and debugging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 69,
    "end_token": 77,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      1366,
      329,
      12854,
      1799,
      290,
      28769
    ],
    "label": "best_practice",
    "reason": "Logging data for traceability and debugging"
  },
  {
    "line": 16,
    "text": "            df = em_api.get_tradable_list(entity_type=\"block\", block_category=block_category)",
    "annotation": "\ud83e\udde0 ML Signal: Storing data into a database",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7,
      26858,
      62,
      4906,
      2625,
      9967,
      1600,
      2512,
      62,
      22872,
      28,
      9967,
      62,
      22872,
      8
    ],
    "start_token": 77,
    "end_token": 116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      656,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Storing data into a database"
  },
  {
    "line": 17,
    "text": "            self.logger.info(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of SQL injection if df_to_db is not properly handling inputs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      7568,
      8
    ],
    "start_token": 116,
    "end_token": 136,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      16363,
      16954,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      318,
      407,
      6105,
      9041,
      17311
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of SQL injection if df_to_db is not properly handling inputs"
  },
  {
    "line": 14,
    "text": "    def run(self):",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality for time series data handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 136,
    "end_token": 144,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3862,
      27996,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244,
      329,
      640,
      2168,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality for time series data handling"
  },
  {
    "line": 16,
    "text": "            df = em_api.get_tradable_list(entity_type=\"block\", block_category=block_category)",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes to define metadata for the recorder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7,
      26858,
      62,
      4906,
      2625,
      9967,
      1600,
      2512,
      62,
      22872,
      28,
      9967,
      62,
      22872,
      8
    ],
    "start_token": 144,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      284,
      8160,
      20150,
      329,
      262,
      38156
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes to define metadata for the recorder"
  },
  {
    "line": 18,
    "text": "            df_to_db(df=df, data_schema=self.data_schema, provider=self.provider, force_update=self.force_update)",
    "annotation": "\ud83e\udde0 ML Signal: Association of entity_schema with a specific class, indicating a pattern of schema usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7,
      7568,
      28,
      7568,
      11,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11,
      2700,
      62,
      19119,
      28,
      944,
      13,
      3174,
      62,
      19119,
      8
    ],
    "start_token": 183,
    "end_token": 233,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      286,
      9312,
      62,
      15952,
      2611,
      351,
      257,
      2176,
      1398,
      11,
      12739,
      257,
      3912,
      286,
      32815,
      8748
    ],
    "label": "ml_signal",
    "reason": "Association of entity_schema with a specific class, indicating a pattern of schema usage"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes to define metadata for the recorder",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 233,
    "end_token": 233,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      284,
      8160,
      20150,
      329,
      262,
      38156
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes to define metadata for the recorder"
  },
  {
    "line": 22,
    "text": "    entity_provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Association of data_schema with a specific class, indicating a pattern of schema usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      368,
      1
    ],
    "start_token": 233,
    "end_token": 244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      286,
      1366,
      62,
      15952,
      2611,
      351,
      257,
      2176,
      1398,
      11,
      12739,
      257,
      3912,
      286,
      32815,
      8748
    ],
    "label": "ml_signal",
    "reason": "Association of data_schema with a specific class, indicating a pattern of schema usage"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external API to fetch data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 244,
    "end_token": 244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      7824,
      284,
      21207,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of external API to fetch data"
  },
  {
    "line": 23,
    "text": "    entity_schema = Block",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list to DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      9726
    ],
    "start_token": 244,
    "end_token": 253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Conversion of list to DataFrame"
  },
  {
    "line": 25,
    "text": "    provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Data persistence pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      368,
      1
    ],
    "start_token": 253,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      30802,
      3912
    ],
    "label": "ml_signal",
    "reason": "Data persistence pattern"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 261,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging pattern"
  },
  {
    "line": 29,
    "text": "        the_list = em_api.get_block_stocks(entity.id, entity.name)",
    "annotation": "\ud83e\udde0 ML Signal: Sleep pattern in execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      4868,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      9967,
      62,
      29522,
      7,
      26858,
      13,
      312,
      11,
      9312,
      13,
      3672,
      8
    ],
    "start_token": 261,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17376,
      3912,
      287,
      9706
    ],
    "label": "ml_signal",
    "reason": "Sleep pattern in execution"
  },
  {
    "line": 29,
    "text": "        the_list = em_api.get_block_stocks(entity.id, entity.name)",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      4868,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      9967,
      62,
      29522,
      7,
      26858,
      13,
      312,
      11,
      9312,
      13,
      3672,
      8
    ],
    "start_token": 290,
    "end_token": 319,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters"
  },
  {
    "line": 29,
    "text": "        the_list = em_api.get_block_stocks(entity.id, entity.name)",
    "annotation": "\ud83e\udde0 ML Signal: Execution of a method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      4868,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      9967,
      62,
      29522,
      7,
      26858,
      13,
      312,
      11,
      9312,
      13,
      3672,
      8
    ],
    "start_token": 319,
    "end_token": 348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37497,
      286,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Execution of a method"
  },
  {
    "line": 29,
    "text": "        the_list = em_api.get_block_stocks(entity.id, entity.name)",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      4868,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      9967,
      62,
      29522,
      7,
      26858,
      13,
      312,
      11,
      9312,
      13,
      3672,
      8
    ],
    "start_token": 348,
    "end_token": 377,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports by their source or purpose improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 416, 511, 2723, 393, 4007, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,6,best_practice,2,Grouping imports by their source or purpose improves readability and maintainability.,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Inheritance from FixedCycleDataRecorder indicates a design pattern for data recording,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 10832, 20418, 2375, 6601, 6690, 2875, 9217, 257, 1486, 3912, 329, 1366, 8296]",0.5,31,ml_signal,14,Inheritance from FixedCycleDataRecorder indicates a design pattern for data recording,,6,"from zvt.utils.time_utils import current_date, to_time_str, now_time_str","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 1459, 62, 4475, 11, 284, 62, 2435, 62, 2536, 11, 783, 62, 2435, 62, 2536]"
‚úÖ Best Practice: Use of class attributes for default configuration values,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 12608, 329, 4277, 8398, 3815]",0.5,31,best_practice,16,Use of class attributes for default configuration values,,31,,[]
‚úÖ Best Practice: Type hinting for class attributes improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,47,best_practice,17,Type hinting for class attributes improves code readability and maintainability,,31,class BaseQmtKdataRecorder(FixedCycleDataRecorder):,"[4871, 7308, 48, 16762, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
‚úÖ Best Practice: Consistent naming for provider attributes aids in code clarity,"[26486, 227, 6705, 19939, 25, 3515, 7609, 19264, 329, 10131, 12608, 31378, 287, 2438, 16287]",0.5,63,best_practice,17,Consistent naming for provider attributes aids in code clarity,,47,class BaseQmtKdataRecorder(FixedCycleDataRecorder):,"[4871, 7308, 48, 16762, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",0.5,82,ml_signal,39,Use of default parameter values,,63,"        level=IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
‚úÖ Best Practice: Convert level to IntervalLevel to ensure correct type,"[26486, 227, 6705, 19939, 25, 38240, 1241, 284, 4225, 2100, 4971, 284, 4155, 3376, 2099]",1.0,100,best_practice,40,Convert level to IntervalLevel to ensure correct type,,82,"        kdata_use_begin_time=False,","[220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 28, 25101, 11]"
‚úÖ Best Practice: Convert adjust_type to AdjustType to ensure correct type,"[26486, 227, 6705, 19939, 25, 38240, 4532, 62, 4906, 284, 20292, 6030, 284, 4155, 3376, 2099]",1.0,118,best_practice,42,Convert adjust_type to AdjustType to ensure correct type,,100,"        adjust_type=AdjustType.qfq,","[220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 28, 39668, 6030, 13, 80, 69, 80, 11]"
üß† ML Signal: Dynamic attribute assignment based on class schema,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 16237, 1912, 319, 1398, 32815]",0.5,132,ml_signal,43,Dynamic attribute assignment based on class schema,,118,"        return_unfinished=False,","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 28, 25101, 11]"
üß† ML Signal: Use of a function to get schema based on parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 651, 32815, 1912, 319, 10007]",0.5,146,ml_signal,43,Use of a function to get schema based on parameters,,132,"        return_unfinished=False,","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 28, 25101, 11]"
‚úÖ Best Practice: Call to superclass constructor with parameters,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 23772, 351, 10007]",0.5,160,best_practice,43,Call to superclass constructor with parameters,,146,"        return_unfinished=False,","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 28, 25101, 11]"
‚úÖ Best Practice: Use of self to access instance variables and methods,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 1895, 4554, 9633, 290, 5050]",1.0,180,best_practice,67,Use of self to access instance variables and methods,,160,"            kdata_use_begin_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection if provider or data_schema are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 611, 10131, 393, 1366, 62, 15952, 2611, 389, 2836, 12, 14401]",1.0,180,sast_risk,71,Potential SQL Injection if provider or data_schema are user-controlled,Medium,180,,[]
üß† ML Signal: Use of current timestamp for querying data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1459, 41033, 329, 42517, 1112, 1366]",1.0,180,ml_signal,75,Use of current timestamp for querying data,,180,,[]
‚úÖ Best Practice: Check for null data before processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 9242, 1366, 878, 7587]",1.0,200,best_practice,78,Check for null data before processing,,180,            self.entity_session = self.session,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 29891, 796, 2116, 13, 29891]"
üß† ML Signal: Conversion of DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351]",1.0,209,ml_signal,79,Conversion of DataFrame column to list,,200,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of logging for information tracking,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 1321, 9646]",0.5,223,best_practice,82,Use of logging for information tracking,,209,        if self.day_data:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 820, 62, 7890, 25]"
‚úÖ Best Practice: Use of list append method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 24443, 2446]",0.5,237,best_practice,82,Use of list append method,,223,        if self.day_data:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 820, 62, 7890, 25]"
‚úÖ Best Practice: Initialize list with a single element,"[26486, 227, 6705, 19939, 25, 20768, 1096, 1351, 351, 257, 2060, 5002]",0.5,271,best_practice,88,Initialize list with a single element,,237,"                self.logger.info(f""ignore entity_ids:{entity_ids}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 1, 46430, 9312, 62, 2340, 29164, 26858, 62, 2340, 92, 4943]"
üß† ML Signal: Retrieval of entities with specific filters and parameters,"[8582, 100, 254, 10373, 26484, 25, 4990, 380, 18206, 286, 12066, 351, 2176, 16628, 290, 10007]",0.5,317,ml_signal,90,Retrieval of entities with specific filters and parameters,,271,                    self.entity_filters.append(self.entity_schema.entity_id.notin_(entity_ids)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 26858, 62, 10379, 1010, 13, 33295, 7, 944, 13, 26858, 62, 15952, 2611, 13, 26858, 62, 312, 13, 1662, 259, 41052, 26858, 62, 2340, 4008]"
‚úÖ Best Practice: Check if 'start' is not None before using it,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 9688, 6, 318, 407, 6045, 878, 1262, 340]",1.0,317,best_practice,93,Check if 'start' is not None before using it,,317,,[]
‚úÖ Best Practice: Check if 'start' is not None before using it,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 9688, 6, 318, 407, 6045, 878, 1262, 340]",1.0,336,best_practice,96,Check if 'start' is not None before using it,,317,"            session=self.entity_session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 944, 13, 26858, 62, 29891, 11]"
üß† ML Signal: Usage of external API 'qmt_quote.get_kdata',"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 705, 80, 16762, 62, 22708, 13, 1136, 62, 74, 7890, 6]",1.0,355,ml_signal,96,Usage of external API 'qmt_quote.get_kdata',,336,"            session=self.entity_session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 944, 13, 26858, 62, 29891, 11]"
‚úÖ Best Practice: Check if DataFrame is not null before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 6060, 19778, 318, 407, 9242, 878, 18788]",1.0,355,best_practice,105,Check if DataFrame is not null before proceeding,,355,,[]
üß† ML Signal: Usage of external API 'get_kdata',"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 705, 1136, 62, 74, 7890, 6]",1.0,355,ml_signal,105,Usage of external API 'get_kdata',,355,,[]
‚úÖ Best Practice: Check if DataFrame is not null before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 6060, 19778, 318, 407, 9242, 878, 18788]",1.0,367,best_practice,119,Check if DataFrame is not null before proceeding,,355,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of 'round' for floating-point comparison,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 744, 6, 329, 12462, 12, 4122, 7208]",1.0,393,best_practice,123,Use of 'round' for floating-point comparison,,367,"                    provider=self.provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 944, 13, 15234, 1304, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL Injection risk if 'entity.id' is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 554, 29192, 2526, 611, 705, 26858, 13, 312, 6, 318, 407, 5336, 36951]",1.0,419,sast_risk,124,Potential SQL Injection risk if 'entity.id' is not sanitized,Medium,393,"                    start_timestamp=start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 11]"
‚úÖ Best Practice: Default value assignment for 'start',"[26486, 227, 6705, 19939, 25, 15161, 1988, 16237, 329, 705, 9688, 6]",1.0,445,best_practice,124,Default value assignment for 'start',,419,"                    start_timestamp=start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 11]"
‚úÖ Best Practice: Default value assignment for 'end',"[26486, 227, 6705, 19939, 25, 15161, 1988, 16237, 329, 705, 437, 6]",1.0,475,best_practice,132,Default value assignment for 'end',,445,"                    new = check_df[""close""][0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 796, 2198, 62, 7568, 14692, 19836, 1, 7131, 15, 60]"
üß† ML Signal: Usage of external API 'qmt_quote.get_kdata',"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 705, 80, 16762, 62, 22708, 13, 1136, 62, 74, 7890, 6]",1.0,508,ml_signal,134,Usage of external API 'qmt_quote.get_kdata',,475,"                    if round(old, 2) != round(new, 2):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2835, 7, 727, 11, 362, 8, 14512, 2835, 7, 3605, 11, 362, 2599]"
‚úÖ Best Practice: Check if DataFrame is not null before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 6060, 19778, 318, 407, 9242, 878, 18788]",1.0,525,best_practice,142,Check if DataFrame is not null before proceeding,,508,            end = current_date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 796, 1459, 62, 4475, 3419]"
üß† ML Signal: Conversion of index to datetime,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6376, 284, 4818, 8079]",0.5,543,ml_signal,146,Conversion of index to datetime,,525,"            start_timestamp=start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 11]"
üß† ML Signal: Creation of unique ID using lambda,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 3748, 4522, 1262, 37456]",0.5,564,ml_signal,148,Creation of unique ID using lambda,,543,"            adjust_type=self.adjust_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 28, 944, 13, 23032, 62, 4906, 11]"
‚úÖ Best Practice: Use of 'rename' for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 918, 480, 6, 329, 16287]",0.5,581,best_practice,150,Use of 'rename' for clarity,,564,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
‚úÖ Best Practice: Calculation of percentage change,"[26486, 227, 6705, 19939, 25, 2199, 14902, 286, 5873, 1487]",1.0,598,best_practice,150,Calculation of percentage change,,581,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
üß† ML Signal: Usage of external API 'df_to_db',"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 705, 7568, 62, 1462, 62, 9945, 6]",1.0,615,ml_signal,150,Usage of external API 'df_to_db',,598,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
üß† ML Signal: Logging of information,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 1321]",1.0,632,ml_signal,150,Logging of information,,615,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
"üß† ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 24155, 11, 4465, 329, 4547, 1398, 28398, 444, 290, 6958]",0.5,653,ml_signal,148,"Class definition with inheritance, useful for understanding class hierarchies and relationships",,632,"            adjust_type=self.adjust_type,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4532, 62, 4906, 28, 944, 13, 23032, 62, 4906, 11]"
üß† ML Signal: Common pattern for script entry point,"[8582, 100, 254, 10373, 26484, 25, 8070, 3912, 329, 4226, 5726, 966]",0.5,670,ml_signal,150,Common pattern for script entry point,,653,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
"‚ö†Ô∏è SAST Risk (Low): Direct execution of code, ensure safe handling of inputs and environment","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 9706, 286, 2438, 11, 4155, 3338, 9041, 286, 17311, 290, 2858]",0.5,687,sast_risk,150,"Direct execution of code, ensure safe handling of inputs and environment",Low,670,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
"üß† ML Signal: Instantiation and method call pattern, useful for understanding object usage","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 290, 2446, 869, 3912, 11, 4465, 329, 4547, 2134, 8748]",0.5,704,ml_signal,150,"Instantiation and method call pattern, useful for understanding object usage",,687,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded entity_id, consider external configuration for flexibility","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 9312, 62, 312, 11, 2074, 7097, 8398, 329, 13688]",0.5,721,sast_risk,150,"Hardcoded entity_id, consider external configuration for flexibility",Low,704,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
‚úÖ Best Practice: Use of named arguments improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 19575, 1100, 1799]",0.5,738,best_practice,150,Use of named arguments improves readability,,721,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,755,best_practice,150,Use of __all__ to define public API of the module,,738,"            download_history=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4321, 62, 23569, 28, 25101, 11]"

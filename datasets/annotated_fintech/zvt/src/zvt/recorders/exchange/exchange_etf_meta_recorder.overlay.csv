annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,4,best_practice,6,Grouping imports from the same package together improves readability.,,0,import demjson3,"[11748, 1357, 17752, 18]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,15,best_practice,12,Class should have a docstring explaining its purpose and usage,,4,from zvt.contract.recorder import Recorder,"[6738, 1976, 36540, 13, 28484, 13, 8344, 2875, 1330, 3311, 2875]"
‚úÖ Best Practice: Class attributes should be documented or initialized in __init__,"[26486, 227, 6705, 19939, 25, 5016, 12608, 815, 307, 12395, 393, 23224, 287, 11593, 15003, 834]",0.5,36,best_practice,14,Class attributes should be documented or initialized in __init__,,15,from zvt.recorders.consts import DEFAULT_SH_ETF_LIST_HEADER,"[6738, 1976, 36540, 13, 8344, 6361, 13, 1102, 6448, 1330, 5550, 38865, 62, 9693, 62, 22274, 62, 45849, 62, 37682, 1137]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,52,best_practice,15,Use of default parameter values for flexibility and ease of use,,36,from zvt.utils.time_utils import now_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 783, 62, 30094, 62, 16514, 27823]"
‚úÖ Best Practice: Proper use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 45989, 779, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",0.5,52,best_practice,17,Proper use of super() to initialize the parent class,,52,,[]
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URL can lead to security risks if the endpoint changes or is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 10289, 460, 1085, 284, 2324, 7476, 611, 262, 36123, 2458, 393, 318, 19066, 13]",1.0,63,sast_risk,19,Hardcoded URL can lead to security risks if the endpoint changes or is compromised.,Medium,52,    data_schema = EtfStock,"[220, 220, 220, 1366, 62, 15952, 2611, 796, 17906, 69, 26207]"
"‚ö†Ô∏è SAST Risk (Medium): No error handling for the HTTP request, which can lead to unhandled exceptions.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 262, 14626, 2581, 11, 543, 460, 1085, 284, 555, 38788, 13269, 13]",0.5,95,sast_risk,21,"No error handling for the HTTP request, which can lead to unhandled exceptions.",Medium,63,"    def __init__(self, force_update=False, sleeping_time=10.0, provider=""exchange"") -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2700, 62, 19119, 28, 25101, 11, 11029, 62, 2435, 28, 940, 13, 15, 11, 10131, 2625, 1069, 3803, 4943, 4613, 6045, 25]"
"‚ö†Ô∏è SAST Risk (Medium): No validation of the response before decoding, which can lead to security issues.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 286, 262, 2882, 878, 39938, 11, 543, 460, 1085, 284, 2324, 2428, 13]",0.5,116,sast_risk,23,"No validation of the response before decoding, which can lead to security issues.",Medium,95,"        super().__init__(force_update, sleeping_time)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 3174, 62, 19119, 11, 11029, 62, 2435, 8]"
üß† ML Signal: Usage of pandas DataFrame indicates data processing or analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 9217, 1366, 7587, 393, 3781, 13]",0.5,124,ml_signal,25,Usage of pandas DataFrame indicates data processing or analysis.,,116,    def run(self):,"[220, 220, 220, 825, 1057, 7, 944, 2599]"
"üß† ML Signal: Method call with a DataFrame and exchange parameter, indicating data persistence.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 257, 6060, 19778, 290, 5163, 11507, 11, 12739, 1366, 30802, 13]",0.5,172,ml_signal,27,"Method call with a DataFrame and exchange parameter, indicating data persistence.",,124,"        url = ""http://query.sse.com.cn/commonQuery.do?sqlId=COMMON_SSE_ZQPZ_ETFLB_L_NEW""","[220, 220, 220, 220, 220, 220, 220, 19016, 796, 366, 4023, 1378, 22766, 13, 82, 325, 13, 785, 13, 31522, 14, 11321, 20746, 13, 4598, 30, 25410, 7390, 28, 9858, 27857, 62, 50, 5188, 62, 57, 48, 47, 57, 62, 2767, 3697, 33, 62, 43, 62, 13965, 1]"
‚úÖ Best Practice: Logging provides traceability and debugging information.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 12854, 1799, 290, 28769, 1321, 13]",0.5,194,best_practice,29,Logging provides traceability and debugging information.,,172,        response_dict = demjson3.decode(response.text),"[220, 220, 220, 220, 220, 220, 220, 2882, 62, 11600, 796, 1357, 17752, 18, 13, 12501, 1098, 7, 26209, 13, 5239, 8]"
"üß† ML Signal: Method call with a DataFrame, indicating further data processing or downloading.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 257, 6060, 19778, 11, 12739, 2252, 1366, 7587, 393, 22023, 13]",0.5,219,ml_signal,31,"Method call with a DataFrame, indicating further data processing or downloading.",,194,"        df = pd.DataFrame(response_dict.get(""result"", []))","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 26209, 62, 11600, 13, 1136, 7203, 20274, 1600, 17635, 4008]"
‚úÖ Best Practice: Logging provides traceability and debugging information.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 12854, 1799, 290, 28769, 1321, 13]",0.5,255,best_practice,33,Logging provides traceability and debugging information.,,219,"        self.logger.info(""Ê≤™Â∏Ç ETF ÂàóË°®ÊäìÂèñÂÆåÊàê..."")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 162, 110, 103, 30585, 224, 31112, 10263, 230, 245, 26193, 101, 162, 232, 241, 20998, 244, 22522, 234, 22755, 238, 9313, 8]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URL can lead to security risks if the endpoint changes or is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 10289, 460, 1085, 284, 2324, 7476, 611, 262, 36123, 2458, 393, 318, 19066, 13]",1.0,282,sast_risk,35,Hardcoded URL can lead to security risks if the endpoint changes or is compromised.,Medium,255,        # ÊäìÂèñÊ≤™Â∏Ç ETF ÊàêÂàÜËÇ°,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 232, 241, 20998, 244, 162, 110, 103, 30585, 224, 31112, 10545, 230, 238, 26344, 228, 164, 224, 94]"
"‚ö†Ô∏è SAST Risk (Medium): No error handling for the HTTP request, which can lead to unhandled exceptions.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 262, 14626, 2581, 11, 543, 460, 1085, 284, 555, 38788, 13269, 13]",0.5,321,sast_risk,37,"No error handling for the HTTP request, which can lead to unhandled exceptions.",Medium,282,"        self.logger.info(""Ê≤™Â∏Ç ETF ÊàêÂàÜËÇ°ÊäìÂèñÂÆåÊàê..."")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 162, 110, 103, 30585, 224, 31112, 10545, 230, 238, 26344, 228, 164, 224, 94, 162, 232, 241, 20998, 244, 22522, 234, 22755, 238, 9313, 8]"
‚ö†Ô∏è SAST Risk (Medium): No validation of the response content before reading it as an Excel file.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 286, 262, 2882, 2695, 878, 3555, 340, 355, 281, 24134, 2393, 13]",0.5,345,sast_risk,39,No validation of the response content before reading it as an Excel file.,Medium,321,        # ÊäìÂèñÊ∑±Â∏Ç ETF ÂàóË°®,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 232, 241, 20998, 244, 162, 115, 109, 30585, 224, 31112, 10263, 230, 245, 26193, 101]"
üß† ML Signal: Usage of pandas to read Excel files indicates data processing or analysis.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 284, 1100, 24134, 3696, 9217, 1366, 7587, 393, 3781, 13]",0.5,388,ml_signal,40,Usage of pandas to read Excel files indicates data processing or analysis.,,345,"        url = ""http://www.szse.cn/api/report/ShowReport?SHOWTYPE=xlsx&CATALOGID=1945""","[220, 220, 220, 220, 220, 220, 220, 19016, 796, 366, 4023, 1378, 2503, 13, 82, 89, 325, 13, 31522, 14, 15042, 14, 13116, 14, 15307, 19100, 30, 9693, 3913, 25216, 28, 87, 7278, 87, 5, 34, 1404, 1847, 7730, 2389, 28, 41931, 1]"
"üß† ML Signal: Method call with a DataFrame and exchange parameter, indicating data persistence.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 257, 6060, 19778, 290, 5163, 11507, 11, 12739, 1366, 30802, 13]",0.5,388,ml_signal,42,"Method call with a DataFrame and exchange parameter, indicating data persistence.",,388,,[]
‚úÖ Best Practice: Logging provides traceability and debugging information.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 12854, 1799, 290, 28769, 1321, 13]",0.5,412,best_practice,44,Logging provides traceability and debugging information.,,388,"        self.persist_etf_list(df, exchange=""sz"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19276, 396, 62, 316, 69, 62, 4868, 7, 7568, 11, 5163, 2625, 82, 89, 4943]"
"üß† ML Signal: Method call with a DataFrame, indicating further data processing or downloading.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 257, 6060, 19778, 11, 12739, 2252, 1366, 7587, 393, 22023, 13]",0.5,412,ml_signal,46,"Method call with a DataFrame, indicating further data processing or downloading.",,412,,[]
‚úÖ Best Practice: Logging provides traceability and debugging information.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 12854, 1799, 290, 28769, 1321, 13]",0.5,433,best_practice,48,Logging provides traceability and debugging information.,,412,        self.download_sz_etf_component(df),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15002, 62, 82, 89, 62, 316, 69, 62, 42895, 7, 7568, 8]"
‚úÖ Best Practice: Check for None to avoid processing invalid data,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 3368, 7587, 12515, 1366]",1.0,433,best_practice,34,Check for None to avoid processing invalid data,,433,,[]
‚úÖ Best Practice: Use copy to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 4866, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,472,best_practice,37,Use copy to avoid modifying the original DataFrame,,433,"        self.logger.info(""Ê≤™Â∏Ç ETF ÊàêÂàÜËÇ°ÊäìÂèñÂÆåÊàê..."")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 162, 110, 103, 30585, 224, 31112, 10545, 230, 238, 26344, 228, 164, 224, 94, 162, 232, 241, 20998, 244, 22522, 234, 22755, 238, 9313, 8]"
üß† ML Signal: Conditional logic based on exchange type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 5163, 2099]",1.0,496,ml_signal,39,Conditional logic based on exchange type,,472,        # ÊäìÂèñÊ∑±Â∏Ç ETF ÂàóË°®,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 232, 241, 20998, 244, 162, 115, 109, 30585, 224, 31112, 10263, 230, 245, 26193, 101]"
üß† ML Signal: Conditional logic based on exchange type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 5163, 2099]",1.0,496,ml_signal,42,Conditional logic based on exchange type,,496,,[]
‚úÖ Best Practice: Standardize column names for consistency,"[26486, 227, 6705, 19939, 25, 8997, 1096, 5721, 3891, 329, 15794]",1.0,532,best_practice,45,Standardize column names for consistency,,496,"        self.logger.info(""Ê∑±Â∏Ç ETF ÂàóË°®ÊäìÂèñÂÆåÊàê..."")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 162, 115, 109, 30585, 224, 31112, 10263, 230, 245, 26193, 101, 162, 232, 241, 20998, 244, 22522, 234, 22755, 238, 9313, 8]"
üß† ML Signal: Use of lambda function for ID generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 4522, 5270]",1.0,559,ml_signal,47,Use of lambda function for ID generation,,532,        # ÊäìÂèñÊ∑±Â∏Ç ETF ÊàêÂàÜËÇ°,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 232, 241, 20998, 244, 162, 115, 109, 30585, 224, 31112, 10545, 230, 238, 26344, 228, 164, 224, 94]"
‚úÖ Best Practice: Assigning new columns for clarity and future use,"[26486, 227, 6705, 19939, 25, 2195, 38944, 649, 15180, 329, 16287, 290, 2003, 779]",1.0,598,best_practice,49,Assigning new columns for clarity and future use,,559,"        self.logger.info(""Ê∑±Â∏Ç ETF ÊàêÂàÜËÇ°ÊäìÂèñÂÆåÊàê..."")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 162, 115, 109, 30585, 224, 31112, 10545, 230, 238, 26344, 228, 164, 224, 94, 162, 232, 241, 20998, 244, 22522, 234, 22755, 238, 9313, 8]"
‚úÖ Best Practice: Remove rows with any NaN values to ensure data integrity,"[26486, 227, 6705, 19939, 25, 17220, 15274, 351, 597, 11013, 45, 3815, 284, 4155, 1366, 11540]",1.0,598,best_practice,54,Remove rows with any NaN values to ensure data integrity,,598,,[]
‚úÖ Best Practice: Remove duplicate entries to maintain unique records,"[26486, 227, 6705, 19939, 25, 17220, 23418, 12784, 284, 5529, 3748, 4406]",1.0,611,best_practice,56,Remove duplicate entries to maintain unique records,,598,"        if exchange == ""sh"":","[220, 220, 220, 220, 220, 220, 220, 611, 5163, 6624, 366, 1477, 1298]"
‚ö†Ô∏è SAST Risk (Low): Ensure df_to_db handles SQL injection and data validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 47764, 62, 1462, 62, 9945, 17105, 16363, 16954, 290, 1366, 21201]",0.5,626,sast_risk,58,Ensure df_to_db handles SQL injection and data validation,Low,611,"        elif exchange == ""sz"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 5163, 6624, 366, 82, 89, 1298]"
‚úÖ Best Practice: Use parentheses for multi-line strings for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 46672, 329, 5021, 12, 1370, 13042, 329, 1365, 1100, 1799, 13]",0.5,626,best_practice,54,Use parentheses for multi-line strings for better readability.,,626,,[]
üß† ML Signal: Filtering DataFrame based on specific column values.,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 1912, 319, 2176, 5721, 3815, 13]",0.5,639,ml_signal,56,Filtering DataFrame based on specific column values.,,626,"        if exchange == ""sh"":","[220, 220, 220, 220, 220, 220, 220, 611, 5163, 6624, 366, 1477, 1298]"
üß† ML Signal: Method call to populate additional data in DataFrame.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 48040, 3224, 1366, 287, 6060, 19778, 13]",0.5,654,ml_signal,58,Method call to populate additional data in DataFrame.,,639,"        elif exchange == ""sz"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 5163, 6624, 366, 82, 89, 1298]"
üß† ML Signal: Iterating over DataFrame rows.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15274, 13]",0.5,654,ml_signal,60,Iterating over DataFrame rows.,,654,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for URL injection if ETF_TYPE or ETF_CLASS are not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 10289, 16954, 611, 31112, 62, 25216, 393, 31112, 62, 31631, 389, 407, 31031, 13]",0.5,688,sast_risk,62,Potential for URL injection if ETF_TYPE or ETF_CLASS are not validated.,Low,654,"        df[""id""] = df[""code""].apply(lambda code: f""etf_{exchange}_{code}"")","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 312, 8973, 796, 47764, 14692, 8189, 1, 4083, 39014, 7, 50033, 2438, 25, 277, 1, 316, 69, 23330, 1069, 3803, 92, 23330, 8189, 92, 4943]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for network request failures.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2581, 15536, 13]",0.5,702,sast_risk,64,No error handling for network request failures.,Medium,688,"        df[""exchange""] = exchange","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 1069, 3803, 8973, 796, 5163]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for JSON decoding.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 19449, 39938, 13]",0.5,718,sast_risk,66,No error handling for JSON decoding.,Medium,702,"        df[""category""] = ""etf""","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22872, 8973, 796, 366, 316, 69, 1]"
üß† ML Signal: Creating DataFrame from JSON response.,"[8582, 100, 254, 10373, 26484, 25, 30481, 6060, 19778, 422, 19449, 2882, 13]",0.5,740,ml_signal,68,Creating DataFrame from JSON response.,,718,"        df = df.dropna(axis=0, how=""any"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 14781, 2616, 7, 22704, 28, 15, 11, 703, 2625, 1092, 4943]"
üß† ML Signal: String formatting to create unique identifiers.,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 284, 2251, 3748, 42814, 13]",0.5,778,ml_signal,71,String formatting to create unique identifiers.,,740,"        df_to_db(df=df, data_schema=Etf, provider=self.provider, force_update=False)","[220, 220, 220, 220, 220, 220, 220, 47764, 62, 1462, 62, 9945, 7, 7568, 28, 7568, 11, 1366, 62, 15952, 2611, 28, 36, 27110, 11, 10131, 28, 944, 13, 15234, 1304, 11, 2700, 62, 19119, 28, 25101, 8]"
‚úÖ Best Practice: Use .copy() to avoid SettingWithCopyWarning.,"[26486, 227, 6705, 19939, 25, 5765, 764, 30073, 3419, 284, 3368, 25700, 3152, 29881, 20361, 13]",0.5,801,best_practice,73,Use .copy() to avoid SettingWithCopyWarning.,,778,"    def download_sh_etf_component(self, df: pd.DataFrame):","[220, 220, 220, 825, 4321, 62, 1477, 62, 316, 69, 62, 42895, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 2599]"
‚úÖ Best Practice: Use rename with inplace=True for clarity and efficiency.,"[26486, 227, 6705, 19939, 25, 5765, 36265, 351, 287, 5372, 28, 17821, 329, 16287, 290, 9332, 13]",0.5,855,best_practice,75,Use rename with inplace=True for clarity and efficiency.,,801,"            ""http://query.sse.com.cn/infodisplay/queryConstituentStockInfo.do?"" ""isPagination=false&type={}&etfClass={}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 4023, 1378, 22766, 13, 82, 325, 13, 785, 13, 31522, 14, 10745, 375, 271, 1759, 14, 22766, 34184, 34272, 298, 26207, 12360, 13, 4598, 1701, 366, 271, 47, 363, 1883, 28, 9562, 5, 4906, 34758, 92, 5, 316, 69, 9487, 34758, 36786]"
‚ö†Ô∏è SAST Risk (Low): Ensure now_pd_timestamp() is timezone-aware if needed.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 783, 62, 30094, 62, 16514, 27823, 3419, 318, 640, 11340, 12, 9685, 611, 2622, 13]",0.5,889,sast_risk,82,Ensure now_pd_timestamp() is timezone-aware if needed.,Low,855,"            url = query_url.format(etf[""ETF_TYPE""], etf[""ETF_CLASS""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 12405, 62, 6371, 13, 18982, 7, 316, 69, 14692, 22274, 62, 25216, 33116, 2123, 69, 14692, 22274, 62, 31631, 8973, 8]"
üß† ML Signal: Applying function to DataFrame column.,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 2163, 284, 6060, 19778, 5721, 13]",0.5,915,ml_signal,84,Applying function to DataFrame column.,,889,            response_dict = demjson3.decode(response.text),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 11600, 796, 1357, 17752, 18, 13, 12501, 1098, 7, 26209, 13, 5239, 8]"
üß† ML Signal: Generating unique IDs for DataFrame entries.,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 3748, 32373, 329, 6060, 19778, 12784, 13]",0.5,915,ml_signal,86,Generating unique IDs for DataFrame entries.,,915,,[]
‚ö†Ô∏è SAST Risk (Medium): Ensure df_to_db handles SQL injection and data validation.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 47764, 62, 1462, 62, 9945, 17105, 16363, 16954, 290, 1366, 21201, 13]",0.5,943,sast_risk,88,Ensure df_to_db handles SQL injection and data validation.,Medium,915,"            etf_id = f""etf_sh_{etf_code}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2123, 69, 62, 312, 796, 277, 1, 316, 69, 62, 1477, 23330, 316, 69, 62, 8189, 36786]"
üß† ML Signal: Logging information about processed data.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 13686, 1366, 13]",0.5,975,ml_signal,89,Logging information about processed data.,,943,"            response_df = response_df[[""instrumentId"", ""instrumentName""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 796, 2882, 62, 7568, 58, 14692, 259, 43872, 7390, 1600, 366, 259, 43872, 5376, 8973, 4083, 30073, 3419]"
üß† ML Signal: Usage of sleep to manage request rate.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3993, 284, 6687, 2581, 2494, 13]",0.5,999,ml_signal,92,Usage of sleep to manage request rate.,,975,"            response_df[""entity_id""] = etf_id","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 26858, 62, 312, 8973, 796, 2123, 69, 62, 312]"
‚úÖ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1007,best_practice,76,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,999,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Logging usage pattern for information messages.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 1321, 6218, 13]",0.5,1036,ml_signal,79,Logging usage pattern for information messages.,,1007,        etf_df = self.populate_sh_etf_type(etf_df),"[220, 220, 220, 220, 220, 220, 220, 2123, 69, 62, 7568, 796, 2116, 13, 12924, 5039, 62, 1477, 62, 316, 69, 62, 4906, 7, 316, 69, 62, 7568, 8]"
üß† ML Signal: Logging usage pattern for information messages.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 1321, 6218, 13]",0.5,1067,ml_signal,85,Logging usage pattern for information messages.,,1036,"            response_df = pd.DataFrame(response_dict.get(""result"", []))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 796, 279, 67, 13, 6601, 19778, 7, 26209, 62, 11600, 13, 1136, 7203, 20274, 1600, 17635, 4008]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for network request failures.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2581, 15536, 13]",1.0,1099,sast_risk,89,No error handling for network request failures.,Medium,1067,"            response_df = response_df[[""instrumentId"", ""instrumentName""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 796, 2882, 62, 7568, 58, 14692, 259, 43872, 7390, 1600, 366, 259, 43872, 5376, 8973, 4083, 30073, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potentially unsafe HTML parsing without validation.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 21596, 11532, 32096, 1231, 21201, 13]",1.0,1123,sast_risk,93,Potentially unsafe HTML parsing without validation.,Low,1099,"            response_df[""entity_type""] = ""etf""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 26858, 62, 4906, 8973, 796, 366, 316, 69, 1]"
üß† ML Signal: Logging usage pattern for error messages.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 4049, 6218, 13]",0.5,1149,ml_signal,96,Logging usage pattern for error messages.,,1123,"            response_df[""name""] = etf[""FUND_NAME""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 3672, 8973, 796, 2123, 69, 14692, 42296, 35, 62, 20608, 8973]"
‚úÖ Best Practice: Use f-strings for better readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 37336, 329, 1365, 1100, 1799, 290, 2854, 13]",0.5,1205,best_practice,103,Use f-strings for better readability and performance.,,1149,"            self.logger.info(f'{etf[""FUND_NAME""]} - {etf_code} ÊàêÂàÜËÇ°ÊäìÂèñÂÆåÊàê...')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 6, 90, 316, 69, 14692, 42296, 35, 62, 20608, 8973, 92, 532, 1391, 316, 69, 62, 8189, 92, 10545, 230, 238, 26344, 228, 164, 224, 94, 162, 232, 241, 20998, 244, 22522, 234, 22755, 238, 986, 11537]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues if `now_pd_timestamp` is not timezone-aware.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 611, 4600, 2197, 62, 30094, 62, 16514, 27823, 63, 318, 407, 640, 11340, 12, 9685, 13]",0.5,1233,sast_risk,113,Potential timezone issues if `now_pd_timestamp` is not timezone-aware.,Low,1205,"            etf_code = etf[""ËØÅÂà∏‰ª£Á†Å""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2123, 69, 62, 8189, 796, 2123, 69, 14692, 46237, 223, 26344, 116, 47987, 163, 254, 223, 8973]"
‚ö†Ô∏è SAST Risk (Medium): Ensure `df_to_db` handles SQL injection and data validation.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 4600, 7568, 62, 1462, 62, 9945, 63, 17105, 16363, 16954, 290, 1366, 21201, 13]",0.5,1257,sast_risk,119,Ensure `df_to_db` handles SQL injection and data validation.,Medium,1233,            url = query_url.format(underlying_index),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 12405, 62, 6371, 13, 18982, 7, 4625, 3157, 62, 9630, 8]"
üß† ML Signal: Logging usage pattern for information messages.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 1321, 6218, 13]",0.5,1281,ml_signal,119,Logging usage pattern for information messages.,,1257,            url = query_url.format(underlying_index),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 12405, 62, 6371, 13, 18982, 7, 4625, 3157, 62, 9630, 8]"
‚ö†Ô∏è SAST Risk (Low): Ensure `self.sleep()` does not introduce significant delays or blocking.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4600, 944, 13, 42832, 3419, 63, 857, 407, 10400, 2383, 16119, 393, 12013, 13]",0.5,1305,sast_risk,119,Ensure `self.sleep()` does not introduce significant delays or blocking.,Low,1281,            url = query_url.format(underlying_index),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 12405, 62, 6371, 13, 18982, 7, 4625, 3157, 62, 9630, 8]"
üß† ML Signal: Usage of a specific URL pattern for querying data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 10289, 3912, 329, 42517, 1112, 1366]",0.5,1329,ml_signal,119,Usage of a specific URL pattern for querying data,,1305,            url = query_url.format(underlying_index),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 12405, 62, 6371, 13, 18982, 7, 4625, 3157, 62, 9630, 8]"
‚úÖ Best Practice: Initialize an empty DataFrame for concatenation,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 6060, 19778, 329, 1673, 36686, 341]",0.5,1362,best_practice,124,Initialize an empty DataFrame for concatenation,,1329,"                dfs = pd.read_html(response.text, header=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 9501, 796, 279, 67, 13, 961, 62, 6494, 7, 26209, 13, 5239, 11, 13639, 28, 16, 8]"
üß† ML Signal: Iterating over a fixed set of ETF classes,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 5969, 900, 286, 31112, 6097]",0.5,1378,ml_signal,127,Iterating over a fixed set of ETF classes,,1362,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
‚ö†Ô∏è SAST Risk (Low): No error handling for network request,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 3127, 2581]",1.0,1398,sast_risk,129,No error handling for network request,Low,1378,            if len(dfs) < 4:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 604, 25]"
‚ö†Ô∏è SAST Risk (Low): No error handling for JSON decoding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 19449, 39938]",0.5,1398,sast_risk,131,No error handling for JSON decoding,Low,1398,,[]
‚úÖ Best Practice: Use .get() to safely access dictionary keys,"[26486, 227, 6705, 19939, 25, 5765, 764, 1136, 3419, 284, 11512, 1895, 22155, 8251]",0.5,1428,best_practice,133,Use .get() to safely access dictionary keys,,1398,"            response_df = response_df.dropna(axis=1, how=""any"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 796, 2882, 62, 7568, 13, 14781, 2616, 7, 22704, 28, 16, 11, 703, 2625, 1092, 4943]"
‚úÖ Best Practice: Explicitly select relevant columns,"[26486, 227, 6705, 19939, 25, 11884, 306, 2922, 5981, 15180]",0.5,1428,best_practice,135,Explicitly select relevant columns,,1428,,[]
‚úÖ Best Practice: Use pd.concat for DataFrame concatenation,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 329, 6060, 19778, 1673, 36686, 341]",0.5,1475,best_practice,137,Use pd.concat for DataFrame concatenation,,1428,"            response_df = response_df[[""ÂìÅÁßç‰ª£Á†Å"", ""ÂìÅÁßçÂêçÁß∞""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 796, 2882, 62, 7568, 58, 14692, 161, 241, 223, 163, 100, 235, 47987, 163, 254, 223, 1600, 366, 161, 241, 223, 163, 100, 235, 28938, 235, 163, 100, 108, 8973, 4083, 30073, 3419]"
‚úÖ Best Practice: Use .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",0.5,1536,best_practice,138,Use .copy() to avoid modifying the original DataFrame,,1475,"            response_df.rename(columns={""ÂìÅÁßç‰ª£Á†Å"": ""stock_code"", ""ÂìÅÁßçÂêçÁß∞"": ""stock_name""}, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 13, 918, 480, 7, 28665, 82, 28, 4895, 161, 241, 223, 163, 100, 235, 47987, 163, 254, 223, 1298, 366, 13578, 62, 8189, 1600, 366, 161, 241, 223, 163, 100, 235, 28938, 235, 163, 100, 108, 1298, 366, 13578, 62, 3672, 25719, 287, 5372, 28, 17821, 8]"
‚úÖ Best Practice: Sort DataFrame by a specific column,"[26486, 227, 6705, 19939, 25, 33947, 6060, 19778, 416, 257, 2176, 5721]",0.5,1558,best_practice,143,Sort DataFrame by a specific column,,1536,"            response_df[""code""] = etf_code","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 8189, 8973, 796, 2123, 69, 62, 8189]"
‚ö†Ô∏è SAST Risk (Low): Assumes type_df and result_df have the same length,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2099, 62, 7568, 290, 1255, 62, 7568, 423, 262, 976, 4129]",1.0,1590,sast_risk,144,Assumes type_df and result_df have the same length,Low,1558,"            response_df[""name""] = etf[""ËØÅÂà∏ÁÆÄÁß∞""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 3672, 8973, 796, 2123, 69, 14692, 46237, 223, 26344, 116, 163, 106, 222, 163, 100, 108, 8973]"
‚úÖ Best Practice: Consider adding type hints for the return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1612,best_practice,143,Consider adding type hints for the return type for better readability and maintainability.,,1590,"            response_df[""code""] = etf_code","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 8189, 8973, 796, 2123, 69, 62, 8189]"
‚úÖ Best Practice: Check for empty input to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 5128, 284, 3368, 13114, 7587]",1.0,1644,best_practice,144,Check for empty input to avoid unnecessary processing,,1612,"            response_df[""name""] = etf[""ËØÅÂà∏ÁÆÄÁß∞""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 3672, 8973, 796, 2123, 69, 14692, 46237, 223, 26344, 116, 163, 106, 222, 163, 100, 108, 8973]"
‚ö†Ô∏è SAST Risk (Low): Use of regular expressions can lead to ReDoS if not properly constrained,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3218, 14700, 460, 1085, 284, 797, 46498, 611, 407, 6105, 31070]",1.0,1691,sast_risk,147,Use of regular expressions can lead to ReDoS if not properly constrained,Low,1644,"            response_df[""stock_id""] = response_df[""stock_code""].apply(lambda code: china_stock_code_to_id(code))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 62, 7568, 14692, 13578, 62, 312, 8973, 796, 2882, 62, 7568, 14692, 13578, 62, 8189, 1, 4083, 39014, 7, 50033, 2438, 25, 442, 1437, 62, 13578, 62, 8189, 62, 1462, 62, 312, 7, 8189, 4008]"
üß† ML Signal: Extracting numeric patterns from text,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 35575, 7572, 422, 2420]",1.0,1691,ml_signal,152,Extracting numeric patterns from text,,1691,,[]
üß† ML Signal: Applying a function to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 257, 6060, 19778, 5721]",1.0,1691,ml_signal,154,Applying a function to a DataFrame column,,1691,,[]
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,1712,best_practice,156,Use of __all__ to define public API of the module,,1691,    def populate_sh_etf_type(df: pd.DataFrame):,"[220, 220, 220, 825, 48040, 62, 1477, 62, 316, 69, 62, 4906, 7, 7568, 25, 279, 67, 13, 6601, 19778, 2599]"
üß† ML Signal: Instantiating and running a spider class,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 290, 2491, 257, 19230, 1398]",0.5,1733,ml_signal,156,Instantiating and running a spider class,,1712,    def populate_sh_etf_type(df: pd.DataFrame):,"[220, 220, 220, 825, 48040, 62, 1477, 62, 316, 69, 62, 4906, 7, 7568, 25, 279, 67, 13, 6601, 19778, 2599]"
üß† ML Signal: Running a method on a class instance,"[8582, 100, 254, 10373, 26484, 25, 18162, 257, 2446, 319, 257, 1398, 4554]",0.5,1754,ml_signal,156,Running a method on a class instance,,1733,    def populate_sh_etf_type(df: pd.DataFrame):,"[220, 220, 220, 825, 48040, 62, 1477, 62, 316, 69, 62, 4906, 7, 7568, 25, 279, 67, 13, 6601, 19778, 2599]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,1775,best_practice,156,Use of __all__ to define public API of the module,,1754,    def populate_sh_etf_type(df: pd.DataFrame):,"[220, 220, 220, 825, 48040, 62, 1477, 62, 316, 69, 62, 4906, 7, 7568, 25, 279, 67, 13, 6601, 19778, 2599]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Group imports into standard library, third-party, and local imports for better readability","[26486, 227, 6705, 19939, 25, 4912, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 17944, 329, 1365, 1100, 1799]",1.0,0,best_practice,4,"Group imports into standard library, third-party, and local imports for better readability",,0,,[]
üß† ML Signal: Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 5045, 395, 9430, 6601, 6690, 2875, 9217, 257, 3912, 286, 16610, 11244]",0.5,0,ml_signal,11,Inheritance from TimestampsDataRecorder indicates a pattern of extending functionality,,0,,[]
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,14,ml_signal,13,Use of class-level attributes for configuration,,0,class ExchangeStockSummaryRecorder(TimestampsDataRecorder):,"[4871, 12516, 26207, 22093, 6690, 2875, 7, 14967, 395, 9430, 6601, 6690, 2875, 2599]"
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,23,ml_signal,15,Use of class-level attributes for configuration,,14,    entity_schema = Index,"[220, 220, 220, 9312, 62, 15952, 2611, 796, 12901]"
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,32,ml_signal,17,Use of class-level attributes for configuration,,23,"    provider = ""exchange""","[220, 220, 220, 10131, 796, 366, 1069, 3803, 1]"
üß† ML Signal: Use of class-level attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 329, 8398]",0.5,41,ml_signal,17,Use of class-level attributes for configuration,,32,"    provider = ""exchange""","[220, 220, 220, 10131, 796, 366, 1069, 3803, 1]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded URL can lead to inflexibility and potential security risks if the URL changes or is deprecated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 460, 1085, 284, 1167, 2588, 2247, 290, 2785, 2324, 7476, 611, 262, 10289, 2458, 393, 318, 39224]",0.5,50,sast_risk,17,Hardcoded URL can lead to inflexibility and potential security risks if the URL changes or is deprecated,Low,41,"    provider = ""exchange""","[220, 220, 220, 10131, 796, 366, 1069, 3803, 1]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded URL with query parameters can expose sensitive data or be manipulated if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 351, 12405, 10007, 460, 15651, 8564, 1366, 393, 307, 25036, 611, 407, 12118, 6105]",0.5,59,sast_risk,17,Hardcoded URL with query parameters can expose sensitive data or be manipulated if not handled properly,Low,50,"    provider = ""exchange""","[220, 220, 220, 10131, 796, 366, 1069, 3803, 1]"
‚úÖ Best Practice: Use of super() to call the parent class's __init__ method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446]",1.0,73,best_practice,33,Use of super() to call the parent class's __init__ method,,59,"        entity_filters=None,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 28, 14202, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,87,ml_signal,33,Use of default parameters in function signature,,73,"        entity_filters=None,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 28, 14202, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,101,ml_signal,33,Use of default parameters in function signature,,87,"        entity_filters=None,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 28, 14202, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,115,ml_signal,33,Use of default parameters in function signature,,101,"        entity_filters=None,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 28, 14202, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,129,ml_signal,33,Use of default parameters in function signature,,115,"        entity_filters=None,","[220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 28, 14202, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,145,ml_signal,49,Use of default parameters in function signature,,129,"            entity_filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,161,ml_signal,49,Use of default parameters in function signature,,145,"            entity_filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 11]"
üß† ML Signal: Use of hardcoded list in function call,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1327, 40976, 1351, 287, 2163, 869]",1.0,177,ml_signal,49,Use of hardcoded list in function call,,161,"            entity_filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,193,ml_signal,49,Use of default parameters in function signature,,177,"            entity_filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,208,ml_signal,51,Use of default parameters in function signature,,193,"            real_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1103, 62, 2435, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,224,ml_signal,53,Use of default parameters in function signature,,208,"            start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 11]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,232,ml_signal,55,Use of default parameters in function signature,,224,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,246,ml_signal,57,Use of default parameters in function signature,,232,"    def init_timestamps(self, entity):","[220, 220, 220, 825, 2315, 62, 16514, 395, 9430, 7, 944, 11, 9312, 2599]"
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,246,ml_signal,59,Use of default parameters in function signature,,246,,[]
üß† ML Signal: Use of default parameters in function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 287, 2163, 9877]",1.0,258,ml_signal,61,Use of default parameters in function signature,,246,        json_results = [],"[220, 220, 220, 220, 220, 220, 220, 33918, 62, 43420, 796, 17635]"
üß† ML Signal: Use of pandas for date range generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 3128, 2837, 5270]",1.0,274,ml_signal,49,Use of pandas for date range generation,,258,"            entity_filters,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 10379, 1010, 11]"
‚úÖ Best Practice: Use of pd.date_range for generating a list of business days,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 4475, 62, 9521, 329, 15453, 257, 1351, 286, 1597, 1528]",1.0,289,best_practice,50,Use of pd.date_range for generating a list of business days,,274,"            ignore_failed,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 47904, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues with pd.Timestamp.now(),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 279, 67, 13, 14967, 27823, 13, 2197, 3419]",1.0,308,sast_risk,52,Potential timezone issues with pd.Timestamp.now(),Low,289,"            fix_duplicate_way,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 11]"
üß† ML Signal: Iterating over timestamps to fetch and process data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4628, 395, 9430, 284, 21207, 290, 1429, 1366]",1.0,324,ml_signal,54,Iterating over timestamps to fetch and process data,,308,"            end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 11]"
üß† ML Signal: URL formatting with dynamic timestamp,"[8582, 100, 254, 10373, 26484, 25, 10289, 33313, 351, 8925, 41033]",1.0,324,ml_signal,56,URL formatting with dynamic timestamp,,324,,[]
‚ö†Ô∏è SAST Risk (Medium): No error handling for network request,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2581]",1.0,364,sast_risk,58,No error handling for network request,Medium,324,"        return pd.date_range(start=entity.timestamp, end=pd.Timestamp.now(), freq=""B"").tolist()","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 4475, 62, 9521, 7, 9688, 28, 26858, 13, 16514, 27823, 11, 886, 28, 30094, 13, 14967, 27823, 13, 2197, 22784, 2030, 80, 2625, 33, 11074, 83, 349, 396, 3419]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for JSON decoding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 19449, 39938]",1.0,384,sast_risk,60,No error handling for JSON decoding,Medium,364,"    def record(self, entity, start, end, size, timestamps):","[220, 220, 220, 825, 1700, 7, 944, 11, 9312, 11, 923, 11, 886, 11, 2546, 11, 4628, 395, 9430, 2599]"
üß† ML Signal: Filtering results based on productType,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 2482, 1912, 319, 1720, 6030]",1.0,396,ml_signal,61,Filtering results based on productType,,384,        json_results = [],"[220, 220, 220, 220, 220, 220, 220, 33918, 62, 43420, 796, 17635]"
üß† ML Signal: Appending processed data to json_results,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 13686, 1366, 284, 33918, 62, 43420]",1.0,408,ml_signal,61,Appending processed data to json_results,,396,        json_results = [],"[220, 220, 220, 220, 220, 220, 220, 33918, 62, 43420, 796, 17635]"
‚úÖ Best Practice: Use of helper function to convert values,"[26486, 227, 6705, 19939, 25, 5765, 286, 31904, 2163, 284, 10385, 3815]",1.0,439,best_practice,74,Use of helper function to convert values,,408,"                        ""provider"": ""exchange"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 15234, 1304, 1298, 366, 1069, 3803, 1600]"
‚úÖ Best Practice: Early return to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 12556, 1441, 284, 3368, 13114, 7587]",1.0,489,best_practice,81,Early return to avoid unnecessary processing,,439,"                        ""turnover"": to_float(result_json[""trdAmt1""] + ""‰∫ø"", 0.0),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 15344, 2502, 1298, 284, 62, 22468, 7, 20274, 62, 17752, 14692, 2213, 67, 5840, 83, 16, 8973, 1343, 366, 12859, 123, 1600, 657, 13, 15, 828]"
"‚úÖ Best Practice: Use of __name__ == ""__main__"" to allow or prevent parts of code from being run when the modules are imported.","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 6624, 366, 834, 12417, 834, 1, 284, 1249, 393, 2948, 3354, 286, 2438, 422, 852, 1057, 618, 262, 13103, 389, 17392, 13]",0.5,546,best_practice,79,"Use of __name__ == ""__main__"" to allow or prevent parts of code from being run when the modules are imported.",,489,"                        ""total_tradable_vaule"": to_float(result_json[""negotiableValue1""] + ""‰∫ø"", 0.0),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 23350, 62, 2213, 324, 540, 62, 85, 559, 293, 1298, 284, 62, 22468, 7, 20274, 62, 17752, 14692, 12480, 313, 3379, 11395, 16, 8973, 1343, 366, 12859, 123, 1600, 657, 13, 15, 828]"
"‚ö†Ô∏è SAST Risk (High): Potential use of an undefined class 'ExchangeStockSummaryRecorder', which could lead to runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 32480, 779, 286, 281, 28721, 1398, 705, 3109, 3803, 26207, 22093, 6690, 2875, 3256, 543, 714, 1085, 284, 19124, 8563, 13]",1.0,596,sast_risk,81,"Potential use of an undefined class 'ExchangeStockSummaryRecorder', which could lead to runtime errors.",High,546,"                        ""turnover"": to_float(result_json[""trdAmt1""] + ""‰∫ø"", 0.0),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 15344, 2502, 1298, 284, 62, 22468, 7, 20274, 62, 17752, 14692, 2213, 67, 5840, 83, 16, 8973, 1343, 366, 12859, 123, 1600, 657, 13, 15, 828]"
"‚úÖ Best Practice: Use of __all__ to define the public interface of the module, controlling what is exported when import * is used.","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 262, 1171, 7071, 286, 262, 8265, 11, 12755, 644, 318, 29050, 618, 1330, 1635, 318, 973, 13]",0.5,646,best_practice,81,"Use of __all__ to define the public interface of the module, controlling what is exported when import * is used.",,596,"                        ""turnover"": to_float(result_json[""trdAmt1""] + ""‰∫ø"", 0.0),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 15344, 2502, 1298, 284, 62, 22468, 7, 20274, 62, 17752, 14692, 2213, 67, 5840, 83, 16, 8973, 1343, 366, 12859, 123, 1600, 657, 13, 15, 828]"

[
  {
    "line": 9,
    "text": "from zvt.recorders.consts import DEFAULT_HEADER",
    "annotation": "\u2705 Best Practice: Use a logger for consistent and configurable logging throughout the application.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      1102,
      6448,
      1330,
      5550,
      38865,
      62,
      37682,
      1137
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      49706,
      329,
      6414,
      290,
      4566,
      11970,
      18931,
      3690,
      262,
      3586,
      13
    ],
    "label": "best_practice",
    "reason": "Use a logger for consistent and configurable logging throughout the application."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate specific data sources or endpoints used by the application.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 15,
    "end_token": 15,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      2176,
      1366,
      4237,
      393,
      886,
      13033,
      973,
      416,
      262,
      3586,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate specific data sources or endpoints used by the application."
  },
  {
    "line": 17,
    "text": "# \u4e2d\u8bc1\u6307\u6570 \u6293\u53d6 \u98ce\u683c\u6307\u6570 \u884c\u4e1a\u6307\u6570 \u89c4\u6a21\u6307\u6570 \u57fa\u91d1\u6307\u6570",
    "annotation": "\ud83e\udde0 ML Signal: URL patterns can be used to identify API endpoints and their usage in the application.",
    "confidence": 1.0,
    "tokens": [
      2,
      220,
      40792,
      46237,
      223,
      162,
      234,
      229,
      46763,
      108,
      10545,
      232,
      241,
      20998,
      244,
      16268,
      96,
      236,
      43718,
      120,
      162,
      234,
      229,
      46763,
      108,
      5525,
      94,
      234,
      10310,
      248,
      162,
      234,
      229,
      46763,
      108,
      5525,
      100,
      226,
      162,
      101,
      94,
      162,
      234,
      229,
      46763,
      108,
      10263,
      253,
      118,
      34932,
      239,
      162,
      234,
      229,
      46763,
      108
    ],
    "start_token": 15,
    "end_token": 71,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      7572,
      460,
      307,
      973,
      284,
      5911,
      7824,
      886,
      13033,
      290,
      511,
      8748,
      287,
      262,
      3586,
      13
    ],
    "label": "ml_signal",
    "reason": "URL patterns can be used to identify API endpoints and their usage in the application."
  },
  {
    "line": 17,
    "text": "# \u4e2d\u8bc1\u6307\u6570 \u6293\u53d6 \u98ce\u683c\u6307\u6570 \u884c\u4e1a\u6307\u6570 \u89c4\u6a21\u6307\u6570 \u57fa\u91d1\u6307\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Mapping categories to URLs can indicate how different data categories are accessed.",
    "confidence": 0.5,
    "tokens": [
      2,
      220,
      40792,
      46237,
      223,
      162,
      234,
      229,
      46763,
      108,
      10545,
      232,
      241,
      20998,
      244,
      16268,
      96,
      236,
      43718,
      120,
      162,
      234,
      229,
      46763,
      108,
      5525,
      94,
      234,
      10310,
      248,
      162,
      234,
      229,
      46763,
      108,
      5525,
      100,
      226,
      162,
      101,
      94,
      162,
      234,
      229,
      46763,
      108,
      10263,
      253,
      118,
      34932,
      239,
      162,
      234,
      229,
      46763,
      108
    ],
    "start_token": 71,
    "end_token": 127,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      9376,
      284,
      32336,
      460,
      7603,
      703,
      1180,
      1366,
      9376,
      389,
      17535,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping categories to URLs can indicate how different data categories are accessed."
  },
  {
    "line": 26,
    "text": "sz_category_map_url = {",
    "annotation": "\ud83e\udde0 ML Signal: Separate mappings for different categories can indicate different data handling strategies.",
    "confidence": 0.5,
    "tokens": [
      82,
      89,
      62,
      22872,
      62,
      8899,
      62,
      6371,
      796,
      1391
    ],
    "start_token": 127,
    "end_token": 137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8621,
      30748,
      285,
      39242,
      329,
      1180,
      9376,
      460,
      7603,
      1180,
      1366,
      9041,
      10064,
      13
    ],
    "label": "ml_signal",
    "reason": "Separate mappings for different categories can indicate different data handling strategies."
  },
  {
    "line": 20,
    "text": "    IndexCategory.industry: url.format(\"201\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential KeyError if \"data\" key is not present in the JSON response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      12901,
      27313,
      13,
      23213,
      563,
      25,
      19016,
      13,
      18982,
      7203,
      1264,
      12340
    ],
    "start_token": 137,
    "end_token": 152,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      7890,
      1,
      1994,
      318,
      407,
      1944,
      287,
      262,
      19449,
      2882
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential KeyError if \"data\" key is not present in the JSON response"
  },
  {
    "line": 21,
    "text": "    IndexCategory.scope: url.format(\"200\"),",
    "annotation": "\u2705 Best Practice: Consider handling exceptions for robustness, such as KeyError or JSONDecodeError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      12901,
      27313,
      13,
      29982,
      25,
      19016,
      13,
      18982,
      7203,
      2167,
      12340
    ],
    "start_token": 152,
    "end_token": 166,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      9041,
      13269,
      329,
      12373,
      1108,
      11,
      884,
      355,
      7383,
      12331,
      393,
      19449,
      10707,
      1098,
      12331
    ],
    "label": "best_practice",
    "reason": "Consider handling exceptions for robustness, such as KeyError or JSONDecodeError"
  },
  {
    "line": 23,
    "text": "}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): raise_for_status() will raise an HTTPError for bad responses, which should be handled",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 166,
    "end_token": 167,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5298,
      62,
      1640,
      62,
      13376,
      3419,
      481,
      5298,
      281,
      14626,
      12331,
      329,
      2089,
      9109,
      11,
      543,
      815,
      307,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "raise_for_status() will raise an HTTPError for bad responses, which should be handled"
  },
  {
    "line": 25,
    "text": "# \u6df1\u8bc1\u6307\u6570 \u53ea\u53d6\u89c4\u6a21\u6307\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Extracting specific data from a JSON response is a common pattern in API interaction",
    "confidence": 0.5,
    "tokens": [
      2,
      10545,
      115,
      109,
      46237,
      223,
      162,
      234,
      229,
      46763,
      108,
      10263,
      237,
      103,
      20998,
      244,
      164,
      100,
      226,
      162,
      101,
      94,
      162,
      234,
      229,
      46763,
      108
    ],
    "start_token": 167,
    "end_token": 194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      2176,
      1366,
      422,
      257,
      19449,
      2882,
      318,
      257,
      2219,
      3912,
      287,
      7824,
      10375
    ],
    "label": "ml_signal",
    "reason": "Extracting specific data from a JSON response is a common pattern in API interaction"
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter values can indicate common usage patterns.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 194,
    "end_token": 194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      3815,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Default parameter values can indicate common usage patterns."
  },
  {
    "line": 31,
    "text": "def _get_resp_data(resp: requests.Response):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for control flow can be bypassed if Python is run with optimizations.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      4363,
      62,
      7890,
      7,
      4363,
      25,
      7007,
      13,
      31077,
      2599
    ],
    "start_token": 194,
    "end_token": 208,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for control flow can be bypassed if Python is run with optimizations."
  },
  {
    "line": 33,
    "text": "    return resp.json()[\"data\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Creating a new session for each function call can lead to resource exhaustion.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      1217,
      13,
      17752,
      3419,
      14692,
      7890,
      8973
    ],
    "start_token": 208,
    "end_token": 219,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      30481,
      257,
      649,
      6246,
      329,
      1123,
      2163,
      869,
      460,
      1085,
      284,
      8271,
      32493,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Creating a new session for each function call can lead to resource exhaustion."
  },
  {
    "line": 36,
    "text": "def get_cn_index(index_type=\"cni\", category=IndexCategory.style):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for the HTTP request, which can lead to unhandled exceptions.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      31522,
      62,
      9630,
      7,
      9630,
      62,
      4906,
      2625,
      66,
      8461,
      1600,
      6536,
      28,
      15732,
      27313,
      13,
      7635,
      2599
    ],
    "start_token": 219,
    "end_token": 240,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581,
      11,
      543,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for the HTTP request, which can lead to unhandled exceptions."
  },
  {
    "line": 45,
    "text": "    requests_session = requests.Session()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for the HTTP request, which can lead to unhandled exceptions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      7007,
      62,
      29891,
      796,
      7007,
      13,
      36044,
      3419
    ],
    "start_token": 240,
    "end_token": 251,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581,
      11,
      543,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for the HTTP request, which can lead to unhandled exceptions."
  },
  {
    "line": 45,
    "text": "    requests_session = requests.Session()",
    "annotation": "\ud83e\udde0 ML Signal: String formatting for IDs can indicate patterns in ID generation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7007,
      62,
      29891,
      796,
      7007,
      13,
      36044,
      3419
    ],
    "start_token": 251,
    "end_token": 262,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      329,
      32373,
      460,
      7603,
      7572,
      287,
      4522,
      5270,
      13
    ],
    "label": "ml_signal",
    "reason": "String formatting for IDs can indicate patterns in ID generation."
  },
  {
    "line": 66,
    "text": "    # peDynamic: 29.8607",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of time.sleep can lead to performance issues in production environments.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      613,
      44090,
      25,
      2808,
      13,
      23,
      31980
    ],
    "start_token": 262,
    "end_token": 273,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      640,
      13,
      42832,
      460,
      1085,
      284,
      2854,
      2428,
      287,
      3227,
      12493,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of time.sleep can lead to performance issues in production environments."
  },
  {
    "line": 66,
    "text": "    # peDynamic: 29.8607",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for returning None if the_list is empty, which may not be handled by the caller.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      613,
      44090,
      25,
      2808,
      13,
      23,
      31980
    ],
    "start_token": 273,
    "end_token": 284,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      8024,
      6045,
      611,
      262,
      62,
      4868,
      318,
      6565,
      11,
      543,
      743,
      407,
      307,
      12118,
      416,
      262,
      24955,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for returning None if the_list is empty, which may not be handled by the caller."
  },
  {
    "line": 66,
    "text": "    # peDynamic: 29.8607",
    "annotation": "\ud83e\udde0 ML Signal: Direct function call in the main block can indicate common usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      613,
      44090,
      25,
      2808,
      13,
      23,
      31980
    ],
    "start_token": 284,
    "end_token": 295,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      2163,
      869,
      287,
      262,
      1388,
      2512,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Direct function call in the main block can indicate common usage patterns."
  },
  {
    "line": 66,
    "text": "    # peDynamic: 29.8607",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      613,
      44090,
      25,
      2808,
      13,
      23,
      31980
    ],
    "start_token": 295,
    "end_token": 306,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module."
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use a logger for consistent and configurable logging throughout the module.,"[26486, 227, 6705, 19939, 25, 5765, 257, 49706, 329, 6414, 290, 4566, 11970, 18931, 3690, 262, 8265, 13]",1.0,15,best_practice,8,Use a logger for consistent and configurable logging throughout the module.,,0,from zvt.recorders.consts import DEFAULT_HEADER,"[6738, 1976, 36540, 13, 8344, 6361, 13, 1102, 6448, 1330, 5550, 38865, 62, 37682, 1137]"
üß† ML Signal: Hardcoded URLs can indicate a pattern of accessing specific web resources.,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 32336, 460, 7603, 257, 3912, 286, 22534, 2176, 3992, 4133, 13]",0.5,28,ml_signal,11,Hardcoded URLs can indicate a pattern of accessing specific web resources.,,15,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
üß† ML Signal: Hardcoded URLs can indicate a pattern of accessing specific web resources.,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 32336, 460, 7603, 257, 3912, 286, 22534, 2176, 3992, 4133, 13]",0.5,28,ml_signal,14,Hardcoded URLs can indicate a pattern of accessing specific web resources.,,28,,[]
üß† ML Signal: Mapping categories to specific codes can indicate a pattern of data categorization.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 9376, 284, 2176, 12416, 460, 7603, 257, 3912, 286, 1366, 17851, 1634, 13]",0.5,60,ml_signal,17,Mapping categories to specific codes can indicate a pattern of data categorization.,,28,"index_category_map = {IndexCategory.scope: ""17"", IndexCategory.industry: ""18"", IndexCategory.style: ""19""}","[9630, 62, 22872, 62, 8899, 796, 1391, 15732, 27313, 13, 29982, 25, 366, 1558, 1600, 12901, 27313, 13, 23213, 563, 25, 366, 1507, 1600, 12901, 27313, 13, 7635, 25, 366, 1129, 20662]"
"‚ö†Ô∏è SAST Risk (Medium): Potential KeyError if ""data"" key is not present in the JSON response","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7383, 12331, 611, 366, 7890, 1, 1994, 318, 407, 1944, 287, 262, 19449, 2882]",1.0,73,sast_risk,11,"Potential KeyError if ""data"" key is not present in the JSON response",Medium,60,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
‚úÖ Best Practice: Consider handling exceptions for robustness,"[26486, 227, 6705, 19939, 25, 12642, 9041, 13269, 329, 12373, 1108]",1.0,73,best_practice,12,Consider handling exceptions for robustness,,73,,[]
‚ö†Ô∏è SAST Risk (Medium): Raises HTTPError if the HTTP request returned an unsuccessful status code,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 2696, 14626, 12331, 611, 262, 14626, 2581, 4504, 281, 23993, 3722, 2438]",0.5,73,sast_risk,14,Raises HTTPError if the HTTP request returned an unsuccessful status code,Medium,73,,[]
üß† ML Signal: Accessing JSON data from HTTP response,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 19449, 1366, 422, 14626, 2882]",0.5,73,ml_signal,16,Accessing JSON data from HTTP response,,73,,[]
üß† ML Signal: Use of conditional logic to determine index_series based on index_type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5004, 6376, 62, 25076, 1912, 319, 6376, 62, 4906]",0.5,102,ml_signal,15,Use of conditional logic to determine index_series based on index_type,,73,"url = ""https://www.csindex.com.cn/csindex-home/index-list/query-index-item""","[6371, 796, 366, 5450, 1378, 2503, 13, 6359, 9630, 13, 785, 13, 31522, 14, 6359, 9630, 12, 11195, 14, 9630, 12, 4868, 14, 22766, 12, 9630, 12, 9186, 1]"
üß† ML Signal: Use of conditional logic to determine index_series based on index_type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5004, 6376, 62, 25076, 1912, 319, 6376, 62, 4906]",0.5,102,ml_signal,18,Use of conditional logic to determine index_series based on index_type,,102,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for control flow can be disabled in optimized mode,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202, 460, 307, 10058, 287, 23392, 4235]",1.0,113,sast_risk,22,Use of assert for control flow can be disabled in optimized mode,Low,102,"    return resp.json()[""data""]","[220, 220, 220, 1441, 1217, 13, 17752, 3419, 14692, 7890, 8973]"
üß† ML Signal: Use of external mapping to determine index_classify,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 16855, 284, 5004, 6376, 62, 4871, 1958]",1.0,113,ml_signal,23,Use of external mapping to determine index_classify,,113,,[]
‚úÖ Best Practice: Use of descriptive keys for dictionary improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 329, 22155, 19575, 1100, 1799]",1.0,113,best_practice,23,Use of descriptive keys for dictionary improves readability,,113,,[]
‚úÖ Best Practice: Use of descriptive keys for dictionary improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 329, 22155, 19575, 1100, 1799]",1.0,113,best_practice,23,Use of descriptive keys for dictionary improves readability,,113,,[]
‚úÖ Best Practice: Use of descriptive keys for dictionary improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 329, 22155, 19575, 1100, 1799]",1.0,122,best_practice,32,Use of descriptive keys for dictionary improves readability,,113,        assert False,"[220, 220, 220, 220, 220, 220, 220, 6818, 10352]"
üß† ML Signal: Dynamic assignment of indexClassify based on input category,"[8582, 100, 254, 10373, 26484, 25, 26977, 16237, 286, 6376, 9487, 1958, 1912, 319, 5128, 6536]",0.5,140,ml_signal,39,Dynamic assignment of indexClassify based on input category,,122,"            ""ifCustomized"": None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 361, 15022, 1143, 1298, 6045, 11]"
üß† ML Signal: Dynamic assignment of indexSeries based on input index_type,"[8582, 100, 254, 10373, 26484, 25, 26977, 16237, 286, 6376, 27996, 1912, 319, 5128, 6376, 62, 4906]",0.5,157,ml_signal,43,Dynamic assignment of indexSeries based on input index_type,,140,"            ""hotSpot"": None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8940, 32565, 1298, 6045, 11]"
üß† ML Signal: Default parameter usage pattern,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 8748, 3912]",1.0,175,ml_signal,40,Default parameter usage pattern,,157,"            ""ifTracked"": None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 361, 2898, 6021, 1298, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for control flow,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 1630, 5202]",1.0,191,sast_risk,46,Use of assert for control flow,Low,175,"            ""region"": None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 36996, 1298, 6045, 11]"
‚úÖ Best Practice: Use a session object for HTTP requests,"[26486, 227, 6705, 19939, 25, 5765, 257, 6246, 2134, 329, 14626, 7007]",0.5,199,best_practice,49,Use a session object for HTTP requests,,191,"        },","[220, 220, 220, 220, 220, 220, 220, 8964]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for HTTP request,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 14626, 2581]",1.0,211,sast_risk,54,No error handling for HTTP request,Medium,199,"    if index_type == ""csi"":","[220, 220, 220, 611, 6376, 62, 4906, 6624, 366, 6359, 72, 1298]"
üß† ML Signal: URL construction pattern,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912]",1.0,221,ml_signal,64,URL construction pattern,,211,    for category in category_list:,"[220, 220, 220, 329, 6536, 287, 6536, 62, 4868, 25]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for HTTP request,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 14626, 2581]",1.0,231,sast_risk,64,No error handling for HTTP request,Medium,221,    for category in category_list:,"[220, 220, 220, 329, 6536, 287, 6536, 62, 4868, 25]"
üß† ML Signal: Entity ID construction pattern,"[8582, 100, 254, 10373, 26484, 25, 20885, 4522, 5103, 3912]",1.0,241,ml_signal,64,Entity ID construction pattern,,231,    for category in category_list:,"[220, 220, 220, 329, 6536, 287, 6536, 62, 4868, 25]"
üß† ML Signal: Timestamp conversion pattern,"[8582, 100, 254, 10373, 26484, 25, 5045, 27823, 11315, 3912]",0.5,259,ml_signal,77,Timestamp conversion pattern,,241,"            code = result[""indexCode""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 796, 1255, 14692, 9630, 10669, 8973]"
üß† ML Signal: Date conversion pattern,"[8582, 100, 254, 10373, 26484, 25, 7536, 11315, 3912]",1.0,259,ml_signal,81,Date conversion pattern,,259,,[]
‚úÖ Best Practice: Use pandas for structured data handling,"[26486, 227, 6705, 19939, 25, 5765, 19798, 292, 329, 20793, 1366, 9041]",0.5,275,best_practice,84,Use pandas for structured data handling,,259,            index_item = {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 62, 9186, 796, 1391]"
üß† ML Signal: Main execution pattern,"[8582, 100, 254, 10373, 26484, 25, 8774, 9706, 3912]",0.5,291,ml_signal,84,Main execution pattern,,275,            index_item = {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 62, 9186, 796, 1391]"
‚úÖ Best Practice: Define __all__ for module exports,"[26486, 227, 6705, 19939, 25, 2896, 500, 11593, 439, 834, 329, 8265, 15319]",0.5,307,best_practice,84,Define __all__ for module exports,,291,            index_item = {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 62, 9186, 796, 1391]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use a consistent logger naming convention,"[26486, 227, 6705, 19939, 25, 5765, 257, 6414, 49706, 19264, 9831]",1.0,15,best_practice,9,Use a consistent logger naming convention,,0,from zvt.recorders.consts import DEFAULT_HEADER,"[6738, 1976, 36540, 13, 8344, 6361, 13, 1102, 6448, 1330, 5550, 38865, 62, 37682, 1137]"
üß† ML Signal: Hardcoded URLs can indicate a pattern of accessing specific web resources,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 32336, 460, 7603, 257, 3912, 286, 22534, 2176, 3992, 4133]",1.0,28,ml_signal,12,Hardcoded URLs can indicate a pattern of accessing specific web resources,,15,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
üß† ML Signal: Hardcoded URLs can indicate a pattern of accessing specific web resources,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 32336, 460, 7603, 257, 3912, 286, 22534, 2176, 3992, 4133]",1.0,59,ml_signal,15,Hardcoded URLs can indicate a pattern of accessing specific web resources,,28,"url = ""http://www.csindex.com.cn/uploads/file/autofile/cons/{}cons.xls""","[6371, 796, 366, 4023, 1378, 2503, 13, 6359, 9630, 13, 785, 13, 31522, 14, 39920, 14, 7753, 14, 2306, 1659, 576, 14, 5936, 14, 90, 92, 5936, 13, 87, 7278, 1]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of 'code' before using it in a URL,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 705, 8189, 6, 878, 1262, 340, 287, 257, 10289]",1.0,90,sast_risk,15,No validation or sanitization of 'code' before using it in a URL,Medium,59,"url = ""http://www.csindex.com.cn/uploads/file/autofile/cons/{}cons.xls""","[6371, 796, 366, 4023, 1378, 2503, 13, 6359, 9630, 13, 785, 13, 31522, 14, 39920, 14, 7753, 14, 2306, 1659, 576, 14, 5936, 14, 90, 92, 5936, 13, 87, 7278, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled exceptions if the request fails,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 13269, 611, 262, 2581, 10143]",0.5,90,sast_risk,17,Potential for unhandled exceptions if the request fails,Low,90,,[]
‚ö†Ô∏è SAST Risk (Low): Assumes the response content is a valid Excel file without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 2882, 2695, 318, 257, 4938, 24134, 2393, 1231, 21201]",1.0,107,sast_risk,18,Assumes the response content is a valid Excel file without validation,Low,90,"def get_cs_index_stock(code, timestamp, name=None):","[4299, 651, 62, 6359, 62, 9630, 62, 13578, 7, 8189, 11, 41033, 11, 1438, 28, 14202, 2599]"
üß† ML Signal: Usage of lambda function for data transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 1366, 13389]",0.5,170,ml_signal,29,Usage of lambda function for data transformation,,107,"        columns={""Êó•ÊúüDate"": ""timestamp"", ""ÊàêÂàÜÂà∏‰ª£Á†ÅConstituent Code"": ""stock_code"", ""ÊàêÂàÜÂà∏ÂêçÁß∞Constituent Name"": ""stock_name""}","[220, 220, 220, 220, 220, 220, 220, 15180, 28, 4895, 33768, 98, 17312, 253, 10430, 1298, 366, 16514, 27823, 1600, 366, 22755, 238, 26344, 228, 26344, 116, 47987, 163, 254, 223, 34184, 34272, 298, 6127, 1298, 366, 13578, 62, 8189, 1600, 366, 22755, 238, 26344, 228, 26344, 116, 28938, 235, 163, 100, 108, 34184, 34272, 298, 6530, 1298, 366, 13578, 62, 3672, 20662]"
üß† ML Signal: Usage of lambda function for generating unique IDs,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 15453, 3748, 32373]",0.5,170,ml_signal,31,Usage of lambda function for generating unique IDs,,170,,[]
‚úÖ Best Practice: Convert 'timestamp' to datetime for consistency and ease of use,"[26486, 227, 6705, 19939, 25, 38240, 705, 16514, 27823, 6, 284, 4818, 8079, 329, 15794, 290, 10152, 286, 779]",1.0,183,best_practice,33,Convert 'timestamp' to datetime for consistency and ease of use,,170,"    df[""entity_type""] = ""index""","[220, 220, 220, 47764, 14692, 26858, 62, 4906, 8973, 796, 366, 9630, 1]"
üß† ML Signal: Example of function usage with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 17934, 286, 2163, 8748, 351, 2176, 10007]",0.5,196,ml_signal,33,Example of function usage with specific parameters,,183,"    df[""entity_type""] = ""index""","[220, 220, 220, 47764, 14692, 26858, 62, 4906, 8973, 796, 366, 9630, 1]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,209,best_practice,33,Use of __all__ to define public API of the module,,196,"    df[""entity_type""] = ""index""","[220, 220, 220, 47764, 14692, 26858, 62, 4906, 8973, 796, 366, 9630, 1]"

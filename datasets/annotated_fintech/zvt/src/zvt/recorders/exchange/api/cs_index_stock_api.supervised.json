[
  {
    "line": 9,
    "text": "from zvt.recorders.consts import DEFAULT_HEADER",
    "annotation": "\u2705 Best Practice: Use a consistent logger naming convention",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      1102,
      6448,
      1330,
      5550,
      38865,
      62,
      37682,
      1137
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      6414,
      49706,
      19264,
      9831
    ],
    "label": "best_practice",
    "reason": "Use a consistent logger naming convention"
  },
  {
    "line": 12,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate a pattern of accessing specific web resources",
    "confidence": 1.0,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 15,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      257,
      3912,
      286,
      22534,
      2176,
      3992,
      4133
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate a pattern of accessing specific web resources"
  },
  {
    "line": 15,
    "text": "url = \"http://www.csindex.com.cn/uploads/file/autofile/cons/{}cons.xls\"",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate a pattern of accessing specific web resources",
    "confidence": 1.0,
    "tokens": [
      6371,
      796,
      366,
      4023,
      1378,
      2503,
      13,
      6359,
      9630,
      13,
      785,
      13,
      31522,
      14,
      39920,
      14,
      7753,
      14,
      2306,
      1659,
      576,
      14,
      5936,
      14,
      90,
      92,
      5936,
      13,
      87,
      7278,
      1
    ],
    "start_token": 28,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      257,
      3912,
      286,
      22534,
      2176,
      3992,
      4133
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate a pattern of accessing specific web resources"
  },
  {
    "line": 15,
    "text": "url = \"http://www.csindex.com.cn/uploads/file/autofile/cons/{}cons.xls\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation or sanitization of 'code' before using it in a URL",
    "confidence": 1.0,
    "tokens": [
      6371,
      796,
      366,
      4023,
      1378,
      2503,
      13,
      6359,
      9630,
      13,
      785,
      13,
      31522,
      14,
      39920,
      14,
      7753,
      14,
      2306,
      1659,
      576,
      14,
      5936,
      14,
      90,
      92,
      5936,
      13,
      87,
      7278,
      1
    ],
    "start_token": 59,
    "end_token": 90,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      393,
      5336,
      270,
      1634,
      286,
      705,
      8189,
      6,
      878,
      1262,
      340,
      287,
      257,
      10289
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation or sanitization of 'code' before using it in a URL"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unhandled exceptions if the request fails",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 90,
    "end_token": 90,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      555,
      38788,
      13269,
      611,
      262,
      2581,
      10143
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unhandled exceptions if the request fails"
  },
  {
    "line": 18,
    "text": "def get_cs_index_stock(code, timestamp, name=None):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes the response content is a valid Excel file without validation",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      6359,
      62,
      9630,
      62,
      13578,
      7,
      8189,
      11,
      41033,
      11,
      1438,
      28,
      14202,
      2599
    ],
    "start_token": 90,
    "end_token": 107,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      262,
      2882,
      2695,
      318,
      257,
      4938,
      24134,
      2393,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes the response content is a valid Excel file without validation"
  },
  {
    "line": 29,
    "text": "        columns={\"\u65e5\u671fDate\": \"timestamp\", \"\u6210\u5206\u5238\u4ee3\u7801Constituent Code\": \"stock_code\", \"\u6210\u5206\u5238\u540d\u79f0Constituent Name\": \"stock_name\"}",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      4895,
      33768,
      98,
      17312,
      253,
      10430,
      1298,
      366,
      16514,
      27823,
      1600,
      366,
      22755,
      238,
      26344,
      228,
      26344,
      116,
      47987,
      163,
      254,
      223,
      34184,
      34272,
      298,
      6127,
      1298,
      366,
      13578,
      62,
      8189,
      1600,
      366,
      22755,
      238,
      26344,
      228,
      26344,
      116,
      28938,
      235,
      163,
      100,
      108,
      34184,
      34272,
      298,
      6530,
      1298,
      366,
      13578,
      62,
      3672,
      20662
    ],
    "start_token": 107,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for data transformation"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for generating unique IDs",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 170,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      15453,
      3748,
      32373
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for generating unique IDs"
  },
  {
    "line": 33,
    "text": "    df[\"entity_type\"] = \"index\"",
    "annotation": "\u2705 Best Practice: Convert 'timestamp' to datetime for consistency and ease of use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      366,
      9630,
      1
    ],
    "start_token": 170,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      705,
      16514,
      27823,
      6,
      284,
      4818,
      8079,
      329,
      15794,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Convert 'timestamp' to datetime for consistency and ease of use"
  },
  {
    "line": 33,
    "text": "    df[\"entity_type\"] = \"index\"",
    "annotation": "\ud83e\udde0 ML Signal: Example of function usage with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      366,
      9630,
      1
    ],
    "start_token": 183,
    "end_token": 196,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      2163,
      8748,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Example of function usage with specific parameters"
  },
  {
    "line": 33,
    "text": "    df[\"entity_type\"] = \"index\"",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      366,
      9630,
      1
    ],
    "start_token": 196,
    "end_token": 209,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
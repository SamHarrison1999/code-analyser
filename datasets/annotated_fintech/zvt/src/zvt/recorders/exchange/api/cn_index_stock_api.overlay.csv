annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use a logger for handling log messages instead of print statements,"[26486, 227, 6705, 19939, 25, 5765, 257, 49706, 329, 9041, 2604, 6218, 2427, 286, 3601, 6299]",0.5,15,best_practice,8,Use a logger for handling log messages instead of print statements,,0,from zvt.recorders.consts import DEFAULT_HEADER,"[6738, 1976, 36540, 13, 8344, 6361, 13, 1102, 6448, 1330, 5550, 38865, 62, 37682, 1137]"
üß† ML Signal: Hardcoded URLs can indicate fixed data sources or endpoints,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 32336, 460, 7603, 5969, 1366, 4237, 393, 886, 13033]",1.0,28,ml_signal,11,Hardcoded URLs can indicate fixed data sources or endpoints,,15,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
üß† ML Signal: Hardcoded URLs can indicate fixed data sources or endpoints,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 32336, 460, 7603, 5969, 1366, 4237, 393, 886, 13033]",1.0,67,ml_signal,14,Hardcoded URLs can indicate fixed data sources or endpoints,,28,"url = ""http://www.cnindex.com.cn/sample-detail/detail?indexcode={}&dateStr={}&pageNum=1&rows=5000""","[6371, 796, 366, 4023, 1378, 2503, 13, 31522, 9630, 13, 785, 13, 31522, 14, 39873, 12, 49170, 14, 49170, 30, 9630, 8189, 34758, 92, 5, 4475, 13290, 34758, 92, 5, 7700, 33111, 28, 16, 5, 8516, 28, 27641, 1]"
"‚ö†Ô∏è SAST Risk (Medium): Potential KeyError if ""data"" key is not present in the JSON response","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7383, 12331, 611, 366, 7890, 1, 1994, 318, 407, 1944, 287, 262, 19449, 2882]",1.0,67,sast_risk,10,"Potential KeyError if ""data"" key is not present in the JSON response",Medium,67,,[]
"‚úÖ Best Practice: Consider handling exceptions for robustness, such as KeyError or JSONDecodeError","[26486, 227, 6705, 19939, 25, 12642, 9041, 13269, 329, 12373, 1108, 11, 884, 355, 7383, 12331, 393, 19449, 10707, 1098, 12331]",1.0,80,best_practice,11,"Consider handling exceptions for robustness, such as KeyError or JSONDecodeError",,67,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
"‚ö†Ô∏è SAST Risk (Medium): raise_for_status() will raise an HTTPError for bad responses, which should be handled","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5298, 62, 1640, 62, 13376, 3419, 481, 5298, 281, 14626, 12331, 329, 2089, 9109, 11, 543, 815, 307, 12118]",0.5,118,sast_risk,13,"raise_for_status() will raise an HTTPError for bad responses, which should be handled",Medium,80,"original_page_url = ""http://www.cnindex.com.cn/module/index-detail.html?act_menu=1&indexCode=399001""","[14986, 62, 7700, 62, 6371, 796, 366, 4023, 1378, 2503, 13, 31522, 9630, 13, 785, 13, 31522, 14, 21412, 14, 9630, 12, 49170, 13, 6494, 30, 529, 62, 26272, 28, 16, 5, 9630, 10669, 28, 28771, 8298, 1]"
"üß† ML Signal: Accessing JSON data from HTTP response, common in web API interactions","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 19449, 1366, 422, 14626, 2882, 11, 2219, 287, 3992, 7824, 12213]",0.5,118,ml_signal,15,"Accessing JSON data from HTTP response, common in web API interactions",,118,,[]
üß† ML Signal: Usage of a specific time format for data conversion,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 640, 5794, 329, 1366, 11315]",1.0,132,ml_signal,17,Usage of a specific time format for data conversion,,118,def _get_resp_data(resp: requests.Response):,"[4299, 4808, 1136, 62, 4363, 62, 7890, 7, 4363, 25, 7007, 13, 31077, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL injection if `url` is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 16954, 611, 4600, 6371, 63, 318, 407, 6105, 5336, 36951]",1.0,143,sast_risk,19,Potential for URL injection if `url` is not properly sanitized,Medium,132,"    return resp.json()[""data""]","[220, 220, 220, 1441, 1217, 13, 17752, 3419, 14692, 7890, 8973]"
‚ö†Ô∏è SAST Risk (Low): No error handling for network request failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 3127, 2581, 15536]",0.5,143,sast_risk,21,No error handling for network request failures,Low,143,,[]
‚ö†Ô∏è SAST Risk (Low): Assumes 'rows' key exists in response data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 8516, 6, 1994, 7160, 287, 2882, 1366]",0.5,164,sast_risk,25,Assumes 'rows' key exists in response data,Low,143,"    entity_id = f""{entity_type}_{exchange}_{code}""","[220, 220, 220, 9312, 62, 312, 796, 277, 1, 90, 26858, 62, 4906, 92, 23330, 1069, 3803, 92, 23330, 8189, 36786]"
üß† ML Signal: Conversion of stock code to a unique identifier,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 257, 3748, 27421]",1.0,178,ml_signal,28,Conversion of stock code to a unique identifier,,164,    data = _get_resp_data(resp),"[220, 220, 220, 1366, 796, 4808, 1136, 62, 4363, 62, 7890, 7, 4363, 8]"
üß† ML Signal: Construction of a unique ID for each stock entry,"[8582, 100, 254, 10373, 26484, 25, 20395, 286, 257, 3748, 4522, 329, 1123, 4283, 5726]",0.5,192,ml_signal,28,Construction of a unique ID for each stock entry,,178,    data = _get_resp_data(resp),"[220, 220, 220, 1366, 796, 4808, 1136, 62, 4363, 62, 7890, 7, 4363, 8]"
üß† ML Signal: Conversion of date string to timestamp,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3128, 4731, 284, 41033]",0.5,205,ml_signal,44,Conversion of date string to timestamp,,192,        # weight: 10.01,"[220, 220, 220, 220, 220, 220, 220, 1303, 3463, 25, 838, 13, 486]"
üß† ML Signal: Conversion of weight to percentage,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3463, 284, 5873]",0.5,231,ml_signal,47,Conversion of weight to percentage,,205,        stock_id = china_stock_code_to_id(stock_code),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 796, 442, 1437, 62, 13578, 62, 8189, 62, 1462, 62, 312, 7, 13578, 62, 8189, 8]"
üß† ML Signal: Conversion of market value to a standardized unit,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1910, 1988, 284, 257, 25713, 4326]",0.5,244,ml_signal,49,Conversion of market value to a standardized unit,,231,        the_list.append(,"[220, 220, 220, 220, 220, 220, 220, 262, 62, 4868, 13, 33295, 7]"
‚úÖ Best Practice: Use of pandas DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 6060, 19778, 329, 20793, 1366, 9041]",0.5,256,best_practice,50,Use of pandas DataFrame for structured data handling,,244,            {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded timestamp and code, potential for misuse","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 41033, 290, 2438, 11, 2785, 329, 29169]",0.5,268,sast_risk,50,"Hardcoded timestamp and code, potential for misuse",Low,256,            {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,280,best_practice,50,Use of __all__ to define public API of the module,,268,            {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391]"

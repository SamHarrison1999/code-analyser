[
  {
    "line": 8,
    "text": "from zvt.recorders.consts import DEFAULT_HEADER",
    "annotation": "\u2705 Best Practice: Use a logger for handling log messages instead of print statements",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      1102,
      6448,
      1330,
      5550,
      38865,
      62,
      37682,
      1137
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      49706,
      329,
      9041,
      2604,
      6218,
      2427,
      286,
      3601,
      6299
    ],
    "label": "best_practice",
    "reason": "Use a logger for handling log messages instead of print statements"
  },
  {
    "line": 11,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate fixed data sources or endpoints",
    "confidence": 1.0,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 15,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      5969,
      1366,
      4237,
      393,
      886,
      13033
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate fixed data sources or endpoints"
  },
  {
    "line": 14,
    "text": "url = \"http://www.cnindex.com.cn/sample-detail/detail?indexcode={}&dateStr={}&pageNum=1&rows=5000\"",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded URLs can indicate fixed data sources or endpoints",
    "confidence": 1.0,
    "tokens": [
      6371,
      796,
      366,
      4023,
      1378,
      2503,
      13,
      31522,
      9630,
      13,
      785,
      13,
      31522,
      14,
      39873,
      12,
      49170,
      14,
      49170,
      30,
      9630,
      8189,
      34758,
      92,
      5,
      4475,
      13290,
      34758,
      92,
      5,
      7700,
      33111,
      28,
      16,
      5,
      8516,
      28,
      27641,
      1
    ],
    "start_token": 28,
    "end_token": 67,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      32336,
      460,
      7603,
      5969,
      1366,
      4237,
      393,
      886,
      13033
    ],
    "label": "ml_signal",
    "reason": "Hardcoded URLs can indicate fixed data sources or endpoints"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential KeyError if \"data\" key is not present in the JSON response",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 67,
    "end_token": 67,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      7890,
      1,
      1994,
      318,
      407,
      1944,
      287,
      262,
      19449,
      2882
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential KeyError if \"data\" key is not present in the JSON response"
  },
  {
    "line": 11,
    "text": "logger = logging.getLogger(__name__)",
    "annotation": "\u2705 Best Practice: Consider handling exceptions for robustness, such as KeyError or JSONDecodeError",
    "confidence": 1.0,
    "tokens": [
      6404,
      1362,
      796,
      18931,
      13,
      1136,
      11187,
      1362,
      7,
      834,
      3672,
      834,
      8
    ],
    "start_token": 67,
    "end_token": 80,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      9041,
      13269,
      329,
      12373,
      1108,
      11,
      884,
      355,
      7383,
      12331,
      393,
      19449,
      10707,
      1098,
      12331
    ],
    "label": "best_practice",
    "reason": "Consider handling exceptions for robustness, such as KeyError or JSONDecodeError"
  },
  {
    "line": 13,
    "text": "original_page_url = \"http://www.cnindex.com.cn/module/index-detail.html?act_menu=1&indexCode=399001\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): raise_for_status() will raise an HTTPError for bad responses, which should be handled",
    "confidence": 0.5,
    "tokens": [
      14986,
      62,
      7700,
      62,
      6371,
      796,
      366,
      4023,
      1378,
      2503,
      13,
      31522,
      9630,
      13,
      785,
      13,
      31522,
      14,
      21412,
      14,
      9630,
      12,
      49170,
      13,
      6494,
      30,
      529,
      62,
      26272,
      28,
      16,
      5,
      9630,
      10669,
      28,
      28771,
      8298,
      1
    ],
    "start_token": 80,
    "end_token": 118,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5298,
      62,
      1640,
      62,
      13376,
      3419,
      481,
      5298,
      281,
      14626,
      12331,
      329,
      2089,
      9109,
      11,
      543,
      815,
      307,
      12118
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "raise_for_status() will raise an HTTPError for bad responses, which should be handled"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing JSON data from HTTP response, common in web API interactions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 118,
    "end_token": 118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      19449,
      1366,
      422,
      14626,
      2882,
      11,
      2219,
      287,
      3992,
      7824,
      12213
    ],
    "label": "ml_signal",
    "reason": "Accessing JSON data from HTTP response, common in web API interactions"
  },
  {
    "line": 17,
    "text": "def _get_resp_data(resp: requests.Response):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific time format for data conversion",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      4363,
      62,
      7890,
      7,
      4363,
      25,
      7007,
      13,
      31077,
      2599
    ],
    "start_token": 118,
    "end_token": 132,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      640,
      5794,
      329,
      1366,
      11315
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific time format for data conversion"
  },
  {
    "line": 19,
    "text": "    return resp.json()[\"data\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for URL injection if `url` is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1217,
      13,
      17752,
      3419,
      14692,
      7890,
      8973
    ],
    "start_token": 132,
    "end_token": 143,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      10289,
      16954,
      611,
      4600,
      6371,
      63,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for URL injection if `url` is not properly sanitized"
  },
  {
    "line": 21,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for network request failures",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 143,
    "end_token": 143,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for network request failures"
  },
  {
    "line": 25,
    "text": "    entity_id = f\"{entity_type}_{exchange}_{code}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'rows' key exists in response data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      312,
      796,
      277,
      1,
      90,
      26858,
      62,
      4906,
      92,
      23330,
      1069,
      3803,
      92,
      23330,
      8189,
      36786
    ],
    "start_token": 143,
    "end_token": 164,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      8516,
      6,
      1994,
      7160,
      287,
      2882,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'rows' key exists in response data"
  },
  {
    "line": 28,
    "text": "    data = _get_resp_data(resp)",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to a unique identifier",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      4808,
      1136,
      62,
      4363,
      62,
      7890,
      7,
      4363,
      8
    ],
    "start_token": 164,
    "end_token": 178,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      257,
      3748,
      27421
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to a unique identifier"
  },
  {
    "line": 28,
    "text": "    data = _get_resp_data(resp)",
    "annotation": "\ud83e\udde0 ML Signal: Construction of a unique ID for each stock entry",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      4808,
      1136,
      62,
      4363,
      62,
      7890,
      7,
      4363,
      8
    ],
    "start_token": 178,
    "end_token": 192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20395,
      286,
      257,
      3748,
      4522,
      329,
      1123,
      4283,
      5726
    ],
    "label": "ml_signal",
    "reason": "Construction of a unique ID for each stock entry"
  },
  {
    "line": 44,
    "text": "        # weight: 10.01",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date string to timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3463,
      25,
      838,
      13,
      486
    ],
    "start_token": 192,
    "end_token": 205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      4731,
      284,
      41033
    ],
    "label": "ml_signal",
    "reason": "Conversion of date string to timestamp"
  },
  {
    "line": 47,
    "text": "        stock_id = china_stock_code_to_id(stock_code)",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of weight to percentage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      796,
      442,
      1437,
      62,
      13578,
      62,
      8189,
      62,
      1462,
      62,
      312,
      7,
      13578,
      62,
      8189,
      8
    ],
    "start_token": 205,
    "end_token": 231,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3463,
      284,
      5873
    ],
    "label": "ml_signal",
    "reason": "Conversion of weight to percentage"
  },
  {
    "line": 49,
    "text": "        the_list.append(",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of market value to a standardized unit",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      62,
      4868,
      13,
      33295,
      7
    ],
    "start_token": 231,
    "end_token": 244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1910,
      1988,
      284,
      257,
      25713,
      4326
    ],
    "label": "ml_signal",
    "reason": "Conversion of market value to a standardized unit"
  },
  {
    "line": 50,
    "text": "            {",
    "annotation": "\u2705 Best Practice: Use of pandas DataFrame for structured data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 244,
    "end_token": 256,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      9041
    ],
    "label": "best_practice",
    "reason": "Use of pandas DataFrame for structured data handling"
  },
  {
    "line": 50,
    "text": "            {",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded timestamp and code, potential for misuse",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 256,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      41033,
      290,
      2438,
      11,
      2785,
      329,
      29169
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded timestamp and code, potential for misuse"
  },
  {
    "line": 50,
    "text": "            {",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 268,
    "end_token": 280,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
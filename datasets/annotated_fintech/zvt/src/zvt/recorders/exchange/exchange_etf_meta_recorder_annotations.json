[
  {
    "line": 6,
    "text": "import demjson3",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      1357,
      17752,
      18
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 12,
    "text": "from zvt.contract.recorder import Recorder",
    "annotation": "\u2705 Best Practice: Class should have a docstring explaining its purpose and usage",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      8344,
      2875,
      1330,
      3311,
      2875
    ],
    "start_token": 4,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class should have a docstring explaining its purpose and usage"
  },
  {
    "line": 14,
    "text": "from zvt.recorders.consts import DEFAULT_SH_ETF_LIST_HEADER",
    "annotation": "\u2705 Best Practice: Class attributes should be documented or initialized in __init__",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      1102,
      6448,
      1330,
      5550,
      38865,
      62,
      9693,
      62,
      22274,
      62,
      45849,
      62,
      37682,
      1137
    ],
    "start_token": 15,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      393,
      23224,
      287,
      11593,
      15003,
      834
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented or initialized in __init__"
  },
  {
    "line": 15,
    "text": "from zvt.utils.time_utils import now_pd_timestamp",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      783,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 36,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u2705 Best Practice: Proper use of super() to initialize the parent class",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 52,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45989,
      779,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Proper use of super() to initialize the parent class"
  },
  {
    "line": 19,
    "text": "    data_schema = EtfStock",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URL can lead to security risks if the endpoint changes or is compromised.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      17906,
      69,
      26207
    ],
    "start_token": 52,
    "end_token": 63,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      10289,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      262,
      36123,
      2458,
      393,
      318,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URL can lead to security risks if the endpoint changes or is compromised."
  },
  {
    "line": 21,
    "text": "    def __init__(self, force_update=False, sleeping_time=10.0, provider=\"exchange\") -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for the HTTP request, which can lead to unhandled exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2700,
      62,
      19119,
      28,
      25101,
      11,
      11029,
      62,
      2435,
      28,
      940,
      13,
      15,
      11,
      10131,
      2625,
      1069,
      3803,
      4943,
      4613,
      6045,
      25
    ],
    "start_token": 63,
    "end_token": 95,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581,
      11,
      543,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for the HTTP request, which can lead to unhandled exceptions."
  },
  {
    "line": 23,
    "text": "        super().__init__(force_update, sleeping_time)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation of the response before decoding, which can lead to security issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      3174,
      62,
      19119,
      11,
      11029,
      62,
      2435,
      8
    ],
    "start_token": 95,
    "end_token": 116,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      286,
      262,
      2882,
      878,
      39938,
      11,
      543,
      460,
      1085,
      284,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation of the response before decoding, which can lead to security issues."
  },
  {
    "line": 25,
    "text": "    def run(self):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas DataFrame indicates data processing or analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 116,
    "end_token": 124,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6060,
      19778,
      9217,
      1366,
      7587,
      393,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas DataFrame indicates data processing or analysis."
  },
  {
    "line": 27,
    "text": "        url = \"http://query.sse.com.cn/commonQuery.do?sqlId=COMMON_SSE_ZQPZ_ETFLB_L_NEW\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call with a DataFrame and exchange parameter, indicating data persistence.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      366,
      4023,
      1378,
      22766,
      13,
      82,
      325,
      13,
      785,
      13,
      31522,
      14,
      11321,
      20746,
      13,
      4598,
      30,
      25410,
      7390,
      28,
      9858,
      27857,
      62,
      50,
      5188,
      62,
      57,
      48,
      47,
      57,
      62,
      2767,
      3697,
      33,
      62,
      43,
      62,
      13965,
      1
    ],
    "start_token": 124,
    "end_token": 172,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      257,
      6060,
      19778,
      290,
      5163,
      11507,
      11,
      12739,
      1366,
      30802,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with a DataFrame and exchange parameter, indicating data persistence."
  },
  {
    "line": 29,
    "text": "        response_dict = demjson3.decode(response.text)",
    "annotation": "\u2705 Best Practice: Logging provides traceability and debugging information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      11600,
      796,
      1357,
      17752,
      18,
      13,
      12501,
      1098,
      7,
      26209,
      13,
      5239,
      8
    ],
    "start_token": 172,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      3769,
      12854,
      1799,
      290,
      28769,
      1321,
      13
    ],
    "label": "best_practice",
    "reason": "Logging provides traceability and debugging information."
  },
  {
    "line": 31,
    "text": "        df = pd.DataFrame(response_dict.get(\"result\", []))",
    "annotation": "\ud83e\udde0 ML Signal: Method call with a DataFrame, indicating further data processing or downloading.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      26209,
      62,
      11600,
      13,
      1136,
      7203,
      20274,
      1600,
      17635,
      4008
    ],
    "start_token": 194,
    "end_token": 219,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      257,
      6060,
      19778,
      11,
      12739,
      2252,
      1366,
      7587,
      393,
      22023,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with a DataFrame, indicating further data processing or downloading."
  },
  {
    "line": 33,
    "text": "        self.logger.info(\"\u6caa\u5e02 ETF \u5217\u8868\u6293\u53d6\u5b8c\u6210...\")",
    "annotation": "\u2705 Best Practice: Logging provides traceability and debugging information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7203,
      162,
      110,
      103,
      30585,
      224,
      31112,
      10263,
      230,
      245,
      26193,
      101,
      162,
      232,
      241,
      20998,
      244,
      22522,
      234,
      22755,
      238,
      9313,
      8
    ],
    "start_token": 219,
    "end_token": 255,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      3769,
      12854,
      1799,
      290,
      28769,
      1321,
      13
    ],
    "label": "best_practice",
    "reason": "Logging provides traceability and debugging information."
  },
  {
    "line": 35,
    "text": "        # \u6293\u53d6\u6caa\u5e02 ETF \u6210\u5206\u80a1",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URL can lead to security risks if the endpoint changes or is compromised.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      232,
      241,
      20998,
      244,
      162,
      110,
      103,
      30585,
      224,
      31112,
      10545,
      230,
      238,
      26344,
      228,
      164,
      224,
      94
    ],
    "start_token": 255,
    "end_token": 282,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      10289,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      262,
      36123,
      2458,
      393,
      318,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URL can lead to security risks if the endpoint changes or is compromised."
  },
  {
    "line": 37,
    "text": "        self.logger.info(\"\u6caa\u5e02 ETF \u6210\u5206\u80a1\u6293\u53d6\u5b8c\u6210...\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for the HTTP request, which can lead to unhandled exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7203,
      162,
      110,
      103,
      30585,
      224,
      31112,
      10545,
      230,
      238,
      26344,
      228,
      164,
      224,
      94,
      162,
      232,
      241,
      20998,
      244,
      22522,
      234,
      22755,
      238,
      9313,
      8
    ],
    "start_token": 282,
    "end_token": 321,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581,
      11,
      543,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for the HTTP request, which can lead to unhandled exceptions."
  },
  {
    "line": 39,
    "text": "        # \u6293\u53d6\u6df1\u5e02 ETF \u5217\u8868",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation of the response content before reading it as an Excel file.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      232,
      241,
      20998,
      244,
      162,
      115,
      109,
      30585,
      224,
      31112,
      10263,
      230,
      245,
      26193,
      101
    ],
    "start_token": 321,
    "end_token": 345,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      286,
      262,
      2882,
      2695,
      878,
      3555,
      340,
      355,
      281,
      24134,
      2393,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation of the response content before reading it as an Excel file."
  },
  {
    "line": 40,
    "text": "        url = \"http://www.szse.cn/api/report/ShowReport?SHOWTYPE=xlsx&CATALOGID=1945\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas to read Excel files indicates data processing or analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      366,
      4023,
      1378,
      2503,
      13,
      82,
      89,
      325,
      13,
      31522,
      14,
      15042,
      14,
      13116,
      14,
      15307,
      19100,
      30,
      9693,
      3913,
      25216,
      28,
      87,
      7278,
      87,
      5,
      34,
      1404,
      1847,
      7730,
      2389,
      28,
      41931,
      1
    ],
    "start_token": 345,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      284,
      1100,
      24134,
      3696,
      9217,
      1366,
      7587,
      393,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas to read Excel files indicates data processing or analysis."
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with a DataFrame and exchange parameter, indicating data persistence.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 388,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      257,
      6060,
      19778,
      290,
      5163,
      11507,
      11,
      12739,
      1366,
      30802,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with a DataFrame and exchange parameter, indicating data persistence."
  },
  {
    "line": 44,
    "text": "        self.persist_etf_list(df, exchange=\"sz\")",
    "annotation": "\u2705 Best Practice: Logging provides traceability and debugging information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19276,
      396,
      62,
      316,
      69,
      62,
      4868,
      7,
      7568,
      11,
      5163,
      2625,
      82,
      89,
      4943
    ],
    "start_token": 388,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      3769,
      12854,
      1799,
      290,
      28769,
      1321,
      13
    ],
    "label": "best_practice",
    "reason": "Logging provides traceability and debugging information."
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with a DataFrame, indicating further data processing or downloading.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 412,
    "end_token": 412,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      257,
      6060,
      19778,
      11,
      12739,
      2252,
      1366,
      7587,
      393,
      22023,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with a DataFrame, indicating further data processing or downloading."
  },
  {
    "line": 48,
    "text": "        self.download_sz_etf_component(df)",
    "annotation": "\u2705 Best Practice: Logging provides traceability and debugging information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15002,
      62,
      82,
      89,
      62,
      316,
      69,
      62,
      42895,
      7,
      7568,
      8
    ],
    "start_token": 412,
    "end_token": 433,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      3769,
      12854,
      1799,
      290,
      28769,
      1321,
      13
    ],
    "label": "best_practice",
    "reason": "Logging provides traceability and debugging information."
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for None to avoid processing invalid data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 433,
    "end_token": 433,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      3368,
      7587,
      12515,
      1366
    ],
    "label": "best_practice",
    "reason": "Check for None to avoid processing invalid data"
  },
  {
    "line": 37,
    "text": "        self.logger.info(\"\u6caa\u5e02 ETF \u6210\u5206\u80a1\u6293\u53d6\u5b8c\u6210...\")",
    "annotation": "\u2705 Best Practice: Use copy to avoid modifying the original DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7203,
      162,
      110,
      103,
      30585,
      224,
      31112,
      10545,
      230,
      238,
      26344,
      228,
      164,
      224,
      94,
      162,
      232,
      241,
      20998,
      244,
      22522,
      234,
      22755,
      238,
      9313,
      8
    ],
    "start_token": 433,
    "end_token": 472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4866,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use copy to avoid modifying the original DataFrame"
  },
  {
    "line": 39,
    "text": "        # \u6293\u53d6\u6df1\u5e02 ETF \u5217\u8868",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on exchange type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      232,
      241,
      20998,
      244,
      162,
      115,
      109,
      30585,
      224,
      31112,
      10263,
      230,
      245,
      26193,
      101
    ],
    "start_token": 472,
    "end_token": 496,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      5163,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on exchange type"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on exchange type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 496,
    "end_token": 496,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      5163,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on exchange type"
  },
  {
    "line": 45,
    "text": "        self.logger.info(\"\u6df1\u5e02 ETF \u5217\u8868\u6293\u53d6\u5b8c\u6210...\")",
    "annotation": "\u2705 Best Practice: Standardize column names for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7203,
      162,
      115,
      109,
      30585,
      224,
      31112,
      10263,
      230,
      245,
      26193,
      101,
      162,
      232,
      241,
      20998,
      244,
      22522,
      234,
      22755,
      238,
      9313,
      8
    ],
    "start_token": 496,
    "end_token": 532,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8997,
      1096,
      5721,
      3891,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Standardize column names for consistency"
  },
  {
    "line": 47,
    "text": "        # \u6293\u53d6\u6df1\u5e02 ETF \u6210\u5206\u80a1",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for ID generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      232,
      241,
      20998,
      244,
      162,
      115,
      109,
      30585,
      224,
      31112,
      10545,
      230,
      238,
      26344,
      228,
      164,
      224,
      94
    ],
    "start_token": 532,
    "end_token": 559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      4522,
      5270
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for ID generation"
  },
  {
    "line": 49,
    "text": "        self.logger.info(\"\u6df1\u5e02 ETF \u6210\u5206\u80a1\u6293\u53d6\u5b8c\u6210...\")",
    "annotation": "\u2705 Best Practice: Assigning new columns for clarity and future use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7203,
      162,
      115,
      109,
      30585,
      224,
      31112,
      10545,
      230,
      238,
      26344,
      228,
      164,
      224,
      94,
      162,
      232,
      241,
      20998,
      244,
      22522,
      234,
      22755,
      238,
      9313,
      8
    ],
    "start_token": 559,
    "end_token": 598,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      649,
      15180,
      329,
      16287,
      290,
      2003,
      779
    ],
    "label": "best_practice",
    "reason": "Assigning new columns for clarity and future use"
  },
  {
    "line": 54,
    "text": "",
    "annotation": "\u2705 Best Practice: Remove rows with any NaN values to ensure data integrity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 598,
    "end_token": 598,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17220,
      15274,
      351,
      597,
      11013,
      45,
      3815,
      284,
      4155,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Remove rows with any NaN values to ensure data integrity"
  },
  {
    "line": 56,
    "text": "        if exchange == \"sh\":",
    "annotation": "\u2705 Best Practice: Remove duplicate entries to maintain unique records",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5163,
      6624,
      366,
      1477,
      1298
    ],
    "start_token": 598,
    "end_token": 611,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17220,
      23418,
      12784,
      284,
      5529,
      3748,
      4406
    ],
    "label": "best_practice",
    "reason": "Remove duplicate entries to maintain unique records"
  },
  {
    "line": 58,
    "text": "        elif exchange == \"sz\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df_to_db handles SQL injection and data validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      5163,
      6624,
      366,
      82,
      89,
      1298
    ],
    "start_token": 611,
    "end_token": 626,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      62,
      1462,
      62,
      9945,
      17105,
      16363,
      16954,
      290,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df_to_db handles SQL injection and data validation"
  },
  {
    "line": 54,
    "text": "",
    "annotation": "\u2705 Best Practice: Use parentheses for multi-line strings for better readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 626,
    "end_token": 626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      46672,
      329,
      5021,
      12,
      1370,
      13042,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use parentheses for multi-line strings for better readability."
  },
  {
    "line": 56,
    "text": "        if exchange == \"sh\":",
    "annotation": "\ud83e\udde0 ML Signal: Filtering DataFrame based on specific column values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5163,
      6624,
      366,
      1477,
      1298
    ],
    "start_token": 626,
    "end_token": 639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      6060,
      19778,
      1912,
      319,
      2176,
      5721,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering DataFrame based on specific column values."
  },
  {
    "line": 58,
    "text": "        elif exchange == \"sz\":",
    "annotation": "\ud83e\udde0 ML Signal: Method call to populate additional data in DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      5163,
      6624,
      366,
      82,
      89,
      1298
    ],
    "start_token": 639,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      48040,
      3224,
      1366,
      287,
      6060,
      19778,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to populate additional data in DataFrame."
  },
  {
    "line": 60,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 654,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows."
  },
  {
    "line": 62,
    "text": "        df[\"id\"] = df[\"code\"].apply(lambda code: f\"etf_{exchange}_{code}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL injection if ETF_TYPE or ETF_CLASS are not validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      312,
      8973,
      796,
      47764,
      14692,
      8189,
      1,
      4083,
      39014,
      7,
      50033,
      2438,
      25,
      277,
      1,
      316,
      69,
      23330,
      1069,
      3803,
      92,
      23330,
      8189,
      92,
      4943
    ],
    "start_token": 654,
    "end_token": 688,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      16954,
      611,
      31112,
      62,
      25216,
      393,
      31112,
      62,
      31631,
      389,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL injection if ETF_TYPE or ETF_CLASS are not validated."
  },
  {
    "line": 64,
    "text": "        df[\"exchange\"] = exchange",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network request failures.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      1069,
      3803,
      8973,
      796,
      5163
    ],
    "start_token": 688,
    "end_token": 702,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581,
      15536,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network request failures."
  },
  {
    "line": 66,
    "text": "        df[\"category\"] = \"etf\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for JSON decoding.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22872,
      8973,
      796,
      366,
      316,
      69,
      1
    ],
    "start_token": 702,
    "end_token": 718,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      19449,
      39938,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for JSON decoding."
  },
  {
    "line": 68,
    "text": "        df = df.dropna(axis=0, how=\"any\")",
    "annotation": "\ud83e\udde0 ML Signal: Creating DataFrame from JSON response.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      14781,
      2616,
      7,
      22704,
      28,
      15,
      11,
      703,
      2625,
      1092,
      4943
    ],
    "start_token": 718,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      6060,
      19778,
      422,
      19449,
      2882,
      13
    ],
    "label": "ml_signal",
    "reason": "Creating DataFrame from JSON response."
  },
  {
    "line": 71,
    "text": "        df_to_db(df=df, data_schema=Etf, provider=self.provider, force_update=False)",
    "annotation": "\ud83e\udde0 ML Signal: String formatting to create unique identifiers.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7,
      7568,
      28,
      7568,
      11,
      1366,
      62,
      15952,
      2611,
      28,
      36,
      27110,
      11,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11,
      2700,
      62,
      19119,
      28,
      25101,
      8
    ],
    "start_token": 740,
    "end_token": 778,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      284,
      2251,
      3748,
      42814,
      13
    ],
    "label": "ml_signal",
    "reason": "String formatting to create unique identifiers."
  },
  {
    "line": 73,
    "text": "    def download_sh_etf_component(self, df: pd.DataFrame):",
    "annotation": "\u2705 Best Practice: Use .copy() to avoid SettingWithCopyWarning.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4321,
      62,
      1477,
      62,
      316,
      69,
      62,
      42895,
      7,
      944,
      11,
      47764,
      25,
      279,
      67,
      13,
      6601,
      19778,
      2599
    ],
    "start_token": 778,
    "end_token": 801,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      764,
      30073,
      3419,
      284,
      3368,
      25700,
      3152,
      29881,
      20361,
      13
    ],
    "label": "best_practice",
    "reason": "Use .copy() to avoid SettingWithCopyWarning."
  },
  {
    "line": 75,
    "text": "            \"http://query.sse.com.cn/infodisplay/queryConstituentStockInfo.do?\" \"isPagination=false&type={}&etfClass={}\"",
    "annotation": "\u2705 Best Practice: Use rename with inplace=True for clarity and efficiency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4023,
      1378,
      22766,
      13,
      82,
      325,
      13,
      785,
      13,
      31522,
      14,
      10745,
      375,
      271,
      1759,
      14,
      22766,
      34184,
      34272,
      298,
      26207,
      12360,
      13,
      4598,
      1701,
      366,
      271,
      47,
      363,
      1883,
      28,
      9562,
      5,
      4906,
      34758,
      92,
      5,
      316,
      69,
      9487,
      34758,
      36786
    ],
    "start_token": 801,
    "end_token": 855,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      36265,
      351,
      287,
      5372,
      28,
      17821,
      329,
      16287,
      290,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Use rename with inplace=True for clarity and efficiency."
  },
  {
    "line": 82,
    "text": "            url = query_url.format(etf[\"ETF_TYPE\"], etf[\"ETF_CLASS\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure now_pd_timestamp() is timezone-aware if needed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      12405,
      62,
      6371,
      13,
      18982,
      7,
      316,
      69,
      14692,
      22274,
      62,
      25216,
      33116,
      2123,
      69,
      14692,
      22274,
      62,
      31631,
      8973,
      8
    ],
    "start_token": 855,
    "end_token": 889,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      3419,
      318,
      640,
      11340,
      12,
      9685,
      611,
      2622,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure now_pd_timestamp() is timezone-aware if needed."
  },
  {
    "line": 84,
    "text": "            response_dict = demjson3.decode(response.text)",
    "annotation": "\ud83e\udde0 ML Signal: Applying function to DataFrame column.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      11600,
      796,
      1357,
      17752,
      18,
      13,
      12501,
      1098,
      7,
      26209,
      13,
      5239,
      8
    ],
    "start_token": 889,
    "end_token": 915,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      2163,
      284,
      6060,
      19778,
      5721,
      13
    ],
    "label": "ml_signal",
    "reason": "Applying function to DataFrame column."
  },
  {
    "line": 86,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Generating unique IDs for DataFrame entries.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 915,
    "end_token": 915,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2980,
      803,
      3748,
      32373,
      329,
      6060,
      19778,
      12784,
      13
    ],
    "label": "ml_signal",
    "reason": "Generating unique IDs for DataFrame entries."
  },
  {
    "line": 88,
    "text": "            etf_id = f\"etf_sh_{etf_code}\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure df_to_db handles SQL injection and data validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2123,
      69,
      62,
      312,
      796,
      277,
      1,
      316,
      69,
      62,
      1477,
      23330,
      316,
      69,
      62,
      8189,
      36786
    ],
    "start_token": 915,
    "end_token": 943,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      47764,
      62,
      1462,
      62,
      9945,
      17105,
      16363,
      16954,
      290,
      1366,
      21201,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure df_to_db handles SQL injection and data validation."
  },
  {
    "line": 89,
    "text": "            response_df = response_df[[\"instrumentId\", \"instrumentName\"]].copy()",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about processed data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      796,
      2882,
      62,
      7568,
      58,
      14692,
      259,
      43872,
      7390,
      1600,
      366,
      259,
      43872,
      5376,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 943,
    "end_token": 975,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      13686,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging information about processed data."
  },
  {
    "line": 92,
    "text": "            response_df[\"entity_id\"] = etf_id",
    "annotation": "\ud83e\udde0 ML Signal: Usage of sleep to manage request rate.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      2123,
      69,
      62,
      312
    ],
    "start_token": 975,
    "end_token": 999,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3993,
      284,
      6687,
      2581,
      2494,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of sleep to manage request rate."
  },
  {
    "line": 76,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 999,
    "end_token": 1007,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the method parameters and return type for better readability and maintainability."
  },
  {
    "line": 79,
    "text": "        etf_df = self.populate_sh_etf_type(etf_df)",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for information messages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2123,
      69,
      62,
      7568,
      796,
      2116,
      13,
      12924,
      5039,
      62,
      1477,
      62,
      316,
      69,
      62,
      4906,
      7,
      316,
      69,
      62,
      7568,
      8
    ],
    "start_token": 1007,
    "end_token": 1036,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      1321,
      6218,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for information messages."
  },
  {
    "line": 85,
    "text": "            response_df = pd.DataFrame(response_dict.get(\"result\", []))",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for information messages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      26209,
      62,
      11600,
      13,
      1136,
      7203,
      20274,
      1600,
      17635,
      4008
    ],
    "start_token": 1036,
    "end_token": 1067,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      1321,
      6218,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for information messages."
  },
  {
    "line": 89,
    "text": "            response_df = response_df[[\"instrumentId\", \"instrumentName\"]].copy()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network request failures.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      796,
      2882,
      62,
      7568,
      58,
      14692,
      259,
      43872,
      7390,
      1600,
      366,
      259,
      43872,
      5376,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 1067,
    "end_token": 1099,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581,
      15536,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network request failures."
  },
  {
    "line": 93,
    "text": "            response_df[\"entity_type\"] = \"etf\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potentially unsafe HTML parsing without validation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      366,
      316,
      69,
      1
    ],
    "start_token": 1099,
    "end_token": 1123,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6902,
      3746,
      21596,
      11532,
      32096,
      1231,
      21201,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potentially unsafe HTML parsing without validation."
  },
  {
    "line": 96,
    "text": "            response_df[\"name\"] = etf[\"FUND_NAME\"]",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for error messages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      3672,
      8973,
      796,
      2123,
      69,
      14692,
      42296,
      35,
      62,
      20608,
      8973
    ],
    "start_token": 1123,
    "end_token": 1149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      4049,
      6218,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for error messages."
  },
  {
    "line": 103,
    "text": "            self.logger.info(f'{etf[\"FUND_NAME\"]} - {etf_code} \u6210\u5206\u80a1\u6293\u53d6\u5b8c\u6210...')",
    "annotation": "\u2705 Best Practice: Use f-strings for better readability and performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      6,
      90,
      316,
      69,
      14692,
      42296,
      35,
      62,
      20608,
      8973,
      92,
      532,
      1391,
      316,
      69,
      62,
      8189,
      92,
      10545,
      230,
      238,
      26344,
      228,
      164,
      224,
      94,
      162,
      232,
      241,
      20998,
      244,
      22522,
      234,
      22755,
      238,
      986,
      11537
    ],
    "start_token": 1149,
    "end_token": 1205,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      37336,
      329,
      1365,
      1100,
      1799,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use f-strings for better readability and performance."
  },
  {
    "line": 113,
    "text": "            etf_code = etf[\"\u8bc1\u5238\u4ee3\u7801\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential timezone issues if `now_pd_timestamp` is not timezone-aware.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2123,
      69,
      62,
      8189,
      796,
      2123,
      69,
      14692,
      46237,
      223,
      26344,
      116,
      47987,
      163,
      254,
      223,
      8973
    ],
    "start_token": 1205,
    "end_token": 1233,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      11340,
      2428,
      611,
      4600,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      63,
      318,
      407,
      640,
      11340,
      12,
      9685,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential timezone issues if `now_pd_timestamp` is not timezone-aware."
  },
  {
    "line": 119,
    "text": "            url = query_url.format(underlying_index)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure `df_to_db` handles SQL injection and data validation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      12405,
      62,
      6371,
      13,
      18982,
      7,
      4625,
      3157,
      62,
      9630,
      8
    ],
    "start_token": 1233,
    "end_token": 1257,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      4600,
      7568,
      62,
      1462,
      62,
      9945,
      63,
      17105,
      16363,
      16954,
      290,
      1366,
      21201,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure `df_to_db` handles SQL injection and data validation."
  },
  {
    "line": 119,
    "text": "            url = query_url.format(underlying_index)",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for information messages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      12405,
      62,
      6371,
      13,
      18982,
      7,
      4625,
      3157,
      62,
      9630,
      8
    ],
    "start_token": 1257,
    "end_token": 1281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      1321,
      6218,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for information messages."
  },
  {
    "line": 119,
    "text": "            url = query_url.format(underlying_index)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure `self.sleep()` does not introduce significant delays or blocking.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      12405,
      62,
      6371,
      13,
      18982,
      7,
      4625,
      3157,
      62,
      9630,
      8
    ],
    "start_token": 1281,
    "end_token": 1305,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4600,
      944,
      13,
      42832,
      3419,
      63,
      857,
      407,
      10400,
      2383,
      16119,
      393,
      12013,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure `self.sleep()` does not introduce significant delays or blocking."
  },
  {
    "line": 119,
    "text": "            url = query_url.format(underlying_index)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific URL pattern for querying data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      12405,
      62,
      6371,
      13,
      18982,
      7,
      4625,
      3157,
      62,
      9630,
      8
    ],
    "start_token": 1305,
    "end_token": 1329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      10289,
      3912,
      329,
      42517,
      1112,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific URL pattern for querying data"
  },
  {
    "line": 124,
    "text": "                dfs = pd.read_html(response.text, header=1)",
    "annotation": "\u2705 Best Practice: Initialize an empty DataFrame for concatenation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      288,
      9501,
      796,
      279,
      67,
      13,
      961,
      62,
      6494,
      7,
      26209,
      13,
      5239,
      11,
      13639,
      28,
      16,
      8
    ],
    "start_token": 1329,
    "end_token": 1362,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      281,
      6565,
      6060,
      19778,
      329,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Initialize an empty DataFrame for concatenation"
  },
  {
    "line": 127,
    "text": "                continue",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a fixed set of ETF classes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2555
    ],
    "start_token": 1362,
    "end_token": 1378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      5969,
      900,
      286,
      31112,
      6097
    ],
    "label": "ml_signal",
    "reason": "Iterating over a fixed set of ETF classes"
  },
  {
    "line": 129,
    "text": "            if len(dfs) < 4:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for network request",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      7568,
      82,
      8,
      1279,
      604,
      25
    ],
    "start_token": 1378,
    "end_token": 1398,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for network request"
  },
  {
    "line": 131,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for JSON decoding",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1398,
    "end_token": 1398,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      19449,
      39938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for JSON decoding"
  },
  {
    "line": 133,
    "text": "            response_df = response_df.dropna(axis=1, how=\"any\")",
    "annotation": "\u2705 Best Practice: Use .get() to safely access dictionary keys",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      796,
      2882,
      62,
      7568,
      13,
      14781,
      2616,
      7,
      22704,
      28,
      16,
      11,
      703,
      2625,
      1092,
      4943
    ],
    "start_token": 1398,
    "end_token": 1428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      764,
      1136,
      3419,
      284,
      11512,
      1895,
      22155,
      8251
    ],
    "label": "best_practice",
    "reason": "Use .get() to safely access dictionary keys"
  },
  {
    "line": 135,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly select relevant columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1428,
    "end_token": 1428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      2922,
      5981,
      15180
    ],
    "label": "best_practice",
    "reason": "Explicitly select relevant columns"
  },
  {
    "line": 137,
    "text": "            response_df = response_df[[\"\u54c1\u79cd\u4ee3\u7801\", \"\u54c1\u79cd\u540d\u79f0\"]].copy()",
    "annotation": "\u2705 Best Practice: Use pd.concat for DataFrame concatenation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      796,
      2882,
      62,
      7568,
      58,
      14692,
      161,
      241,
      223,
      163,
      100,
      235,
      47987,
      163,
      254,
      223,
      1600,
      366,
      161,
      241,
      223,
      163,
      100,
      235,
      28938,
      235,
      163,
      100,
      108,
      8973,
      4083,
      30073,
      3419
    ],
    "start_token": 1428,
    "end_token": 1475,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      329,
      6060,
      19778,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Use pd.concat for DataFrame concatenation"
  },
  {
    "line": 138,
    "text": "            response_df.rename(columns={\"\u54c1\u79cd\u4ee3\u7801\": \"stock_code\", \"\u54c1\u79cd\u540d\u79f0\": \"stock_name\"}, inplace=True)",
    "annotation": "\u2705 Best Practice: Use .copy() to avoid modifying the original DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      13,
      918,
      480,
      7,
      28665,
      82,
      28,
      4895,
      161,
      241,
      223,
      163,
      100,
      235,
      47987,
      163,
      254,
      223,
      1298,
      366,
      13578,
      62,
      8189,
      1600,
      366,
      161,
      241,
      223,
      163,
      100,
      235,
      28938,
      235,
      163,
      100,
      108,
      1298,
      366,
      13578,
      62,
      3672,
      25719,
      287,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 1475,
    "end_token": 1536,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      764,
      30073,
      3419,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use .copy() to avoid modifying the original DataFrame"
  },
  {
    "line": 143,
    "text": "            response_df[\"code\"] = etf_code",
    "annotation": "\u2705 Best Practice: Sort DataFrame by a specific column",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      8189,
      8973,
      796,
      2123,
      69,
      62,
      8189
    ],
    "start_token": 1536,
    "end_token": 1558,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33947,
      6060,
      19778,
      416,
      257,
      2176,
      5721
    ],
    "label": "best_practice",
    "reason": "Sort DataFrame by a specific column"
  },
  {
    "line": 144,
    "text": "            response_df[\"name\"] = etf[\"\u8bc1\u5238\u7b80\u79f0\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes type_df and result_df have the same length",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      3672,
      8973,
      796,
      2123,
      69,
      14692,
      46237,
      223,
      26344,
      116,
      163,
      106,
      222,
      163,
      100,
      108,
      8973
    ],
    "start_token": 1558,
    "end_token": 1590,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2099,
      62,
      7568,
      290,
      1255,
      62,
      7568,
      423,
      262,
      976,
      4129
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes type_df and result_df have the same length"
  },
  {
    "line": 143,
    "text": "            response_df[\"code\"] = etf_code",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      8189,
      8973,
      796,
      2123,
      69,
      62,
      8189
    ],
    "start_token": 1590,
    "end_token": 1612,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the return type for better readability and maintainability."
  },
  {
    "line": 144,
    "text": "            response_df[\"name\"] = etf[\"\u8bc1\u5238\u7b80\u79f0\"]",
    "annotation": "\u2705 Best Practice: Check for empty input to avoid unnecessary processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      3672,
      8973,
      796,
      2123,
      69,
      14692,
      46237,
      223,
      26344,
      116,
      163,
      106,
      222,
      163,
      100,
      108,
      8973
    ],
    "start_token": 1612,
    "end_token": 1644,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6565,
      5128,
      284,
      3368,
      13114,
      7587
    ],
    "label": "best_practice",
    "reason": "Check for empty input to avoid unnecessary processing"
  },
  {
    "line": 147,
    "text": "            response_df[\"stock_id\"] = response_df[\"stock_code\"].apply(lambda code: china_stock_code_to_id(code))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of regular expressions can lead to ReDoS if not properly constrained",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      13578,
      62,
      312,
      8973,
      796,
      2882,
      62,
      7568,
      14692,
      13578,
      62,
      8189,
      1,
      4083,
      39014,
      7,
      50033,
      2438,
      25,
      442,
      1437,
      62,
      13578,
      62,
      8189,
      62,
      1462,
      62,
      312,
      7,
      8189,
      4008
    ],
    "start_token": 1644,
    "end_token": 1691,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      3218,
      14700,
      460,
      1085,
      284,
      797,
      46498,
      611,
      407,
      6105,
      31070
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of regular expressions can lead to ReDoS if not properly constrained"
  },
  {
    "line": 152,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extracting numeric patterns from text",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1691,
    "end_token": 1691,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      35575,
      7572,
      422,
      2420
    ],
    "label": "ml_signal",
    "reason": "Extracting numeric patterns from text"
  },
  {
    "line": 154,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Applying a function to a DataFrame column",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1691,
    "end_token": 1691,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      2163,
      284,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Applying a function to a DataFrame column"
  },
  {
    "line": 156,
    "text": "    def populate_sh_etf_type(df: pd.DataFrame):",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      48040,
      62,
      1477,
      62,
      316,
      69,
      62,
      4906,
      7,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      2599
    ],
    "start_token": 1691,
    "end_token": 1712,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  },
  {
    "line": 156,
    "text": "    def populate_sh_etf_type(df: pd.DataFrame):",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating and running a spider class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      48040,
      62,
      1477,
      62,
      316,
      69,
      62,
      4906,
      7,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      2599
    ],
    "start_token": 1712,
    "end_token": 1733,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      290,
      2491,
      257,
      19230,
      1398
    ],
    "label": "ml_signal",
    "reason": "Instantiating and running a spider class"
  },
  {
    "line": 156,
    "text": "    def populate_sh_etf_type(df: pd.DataFrame):",
    "annotation": "\ud83e\udde0 ML Signal: Running a method on a class instance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      48040,
      62,
      1477,
      62,
      316,
      69,
      62,
      4906,
      7,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      2599
    ],
    "start_token": 1733,
    "end_token": 1754,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18162,
      257,
      2446,
      319,
      257,
      1398,
      4554
    ],
    "label": "ml_signal",
    "reason": "Running a method on a class instance"
  },
  {
    "line": 156,
    "text": "    def populate_sh_etf_type(df: pd.DataFrame):",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      48040,
      62,
      1477,
      62,
      316,
      69,
      62,
      4906,
      7,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      2599
    ],
    "start_token": 1754,
    "end_token": 1775,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
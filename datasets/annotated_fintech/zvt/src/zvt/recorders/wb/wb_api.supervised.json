[
  {
    "line": 6,
    "text": "import pandas as pd",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing external modules like 'requests' can introduce security risks if not handled properly.",
    "confidence": 1.0,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      7097,
      13103,
      588,
      705,
      8897,
      3558,
      6,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing external modules like 'requests' can introduce security risks if not handled properly."
  },
  {
    "line": 10,
    "text": "from zvt.utils.pd_utils import normal_index_df",
    "annotation": "\ud83e\udde0 ML Signal: Constant URL for API endpoint, useful for identifying API usage patterns.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      3487,
      62,
      9630,
      62,
      7568
    ],
    "start_token": 6,
    "end_token": 21,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20217,
      10289,
      329,
      7824,
      36123,
      11,
      4465,
      329,
      13720,
      7824,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Constant URL for API endpoint, useful for identifying API usage patterns."
  },
  {
    "line": 10,
    "text": "from zvt.utils.pd_utils import normal_index_df",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of economy indicators to codes, useful for understanding data retrieval patterns.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      3487,
      62,
      9630,
      62,
      7568
    ],
    "start_token": 21,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      3773,
      21337,
      284,
      12416,
      11,
      4465,
      329,
      4547,
      1366,
      45069,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping of economy indicators to codes, useful for understanding data retrieval patterns."
  },
  {
    "line": 33,
    "text": "    \"gross_saving\": \"NY.GNS.ICTR.ZS\",",
    "annotation": "\u2705 Best Practice: Check if the input is a string to handle it directly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      47181,
      62,
      29336,
      1298,
      366,
      12805,
      13,
      38,
      8035,
      13,
      2149,
      5446,
      13,
      57,
      50,
      1600
    ],
    "start_token": 36,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      5128,
      318,
      257,
      4731,
      284,
      5412,
      340,
      3264,
      13
    ],
    "label": "best_practice",
    "reason": "Check if the input is a string to handle it directly."
  },
  {
    "line": 36,
    "text": "    \"fdi_of_gdp\": \"BX.KLT.DINV.WD.GD.ZS\",",
    "annotation": "\u2705 Best Practice: Handle None input explicitly to avoid errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      69,
      10989,
      62,
      1659,
      62,
      21287,
      79,
      1298,
      366,
      33,
      55,
      13,
      42,
      27734,
      13,
      35,
      1268,
      53,
      13,
      22332,
      13,
      45113,
      13,
      57,
      50,
      1600
    ],
    "start_token": 56,
    "end_token": 86,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33141,
      6045,
      5128,
      11777,
      284,
      3368,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Handle None input explicitly to avoid errors."
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\u2705 Best Practice: Check if the input is a list to process each element.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 86,
    "end_token": 86,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      5128,
      318,
      257,
      1351,
      284,
      1429,
      1123,
      5002,
      13
    ],
    "label": "best_practice",
    "reason": "Check if the input is a list to process each element."
  },
  {
    "line": 41,
    "text": "    \"\"\"Collapse multiple values to a colon-separated list of values\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Recursive pattern for processing nested lists.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      22667,
      7512,
      3294,
      3815,
      284,
      257,
      7633,
      12,
      25512,
      515,
      1351,
      286,
      3815,
      37811
    ],
    "start_token": 86,
    "end_token": 104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      3912,
      329,
      7587,
      28376,
      8341,
      13
    ],
    "label": "ml_signal",
    "reason": "Recursive pattern for processing nested lists."
  },
  {
    "line": 43,
    "text": "        return values",
    "annotation": "\u2705 Best Practice: Convert other types to string for consistent return type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      3815
    ],
    "start_token": 104,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      584,
      3858,
      284,
      4731,
      329,
      6414,
      1441,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Convert other types to string for consistent return type."
  },
  {
    "line": 42,
    "text": "    if isinstance(values, str):",
    "annotation": "\u2705 Best Practice: Check for falsy value of id_or_value to handle None or empty string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      27160,
      11,
      965,
      2599
    ],
    "start_token": 113,
    "end_token": 124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      27807,
      88,
      1988,
      286,
      4686,
      62,
      273,
      62,
      8367,
      284,
      5412,
      6045,
      393,
      6565,
      4731
    ],
    "label": "best_practice",
    "reason": "Check for falsy value of id_or_value to handle None or empty string"
  },
  {
    "line": 45,
    "text": "        return \"all\"",
    "annotation": "\u2705 Best Practice: Check for falsy value of data to handle None or empty string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      439,
      1
    ],
    "start_token": 124,
    "end_token": 135,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      27807,
      88,
      1988,
      286,
      1366,
      284,
      5412,
      6045,
      393,
      6565,
      4731
    ],
    "label": "best_practice",
    "reason": "Check for falsy value of data to handle None or empty string"
  },
  {
    "line": 48,
    "text": "    return str(values)",
    "annotation": "\u2705 Best Practice: Use isinstance to check for data type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      965,
      7,
      27160,
      8
    ],
    "start_token": 135,
    "end_token": 143,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      284,
      2198,
      329,
      1366,
      2099
    ],
    "label": "best_practice",
    "reason": "Use isinstance to check for data type"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Check if id_or_value is a key in the dictionary",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 143,
    "end_token": 143,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4686,
      62,
      273,
      62,
      8367,
      318,
      257,
      1994,
      287,
      262,
      22155
    ],
    "label": "best_practice",
    "reason": "Check if id_or_value is a key in the dictionary"
  },
  {
    "line": 53,
    "text": "    if not id_or_value:",
    "annotation": "\u2705 Best Practice: Use isinstance to check for data type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      4686,
      62,
      273,
      62,
      8367,
      25
    ],
    "start_token": 143,
    "end_token": 154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      284,
      2198,
      329,
      1366,
      2099
    ],
    "label": "best_practice",
    "reason": "Use isinstance to check for data type"
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Recursive function call pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 154,
    "end_token": 154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      2163,
      869,
      3912
    ],
    "label": "ml_signal",
    "reason": "Recursive function call pattern"
  },
  {
    "line": 52,
    "text": "    \"\"\"In case the preferred representation of data when the latter has multiple representations\"\"\"",
    "annotation": "\u2705 Best Practice: Use of default mutable arguments like dict can lead to unexpected behavior. Consider using None and initializing inside the function.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      818,
      1339,
      262,
      9871,
      10552,
      286,
      1366,
      618,
      262,
      6846,
      468,
      3294,
      24612,
      37811
    ],
    "start_token": 154,
    "end_token": 172,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      4517,
      540,
      7159,
      588,
      8633,
      460,
      1085,
      284,
      10059,
      4069,
      13,
      12642,
      1262,
      6045,
      290,
      4238,
      2890,
      2641,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default mutable arguments like dict can lead to unexpected behavior. Consider using None and initializing inside the function."
  },
  {
    "line": 54,
    "text": "        return data",
    "annotation": "\ud83e\udde0 ML Signal: Use of copy to duplicate kwargs, indicating a pattern of preserving original data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1366
    ],
    "start_token": 172,
    "end_token": 181,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4866,
      284,
      23418,
      479,
      86,
      22046,
      11,
      12739,
      257,
      3912,
      286,
      23934,
      2656,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of copy to duplicate kwargs, indicating a pattern of preserving original data."
  },
  {
    "line": 56,
    "text": "    if not data:",
    "annotation": "\u2705 Best Practice: Use of setdefault to ensure default values for dictionary keys.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      1366,
      25
    ],
    "start_token": 181,
    "end_token": 188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      12286,
      284,
      4155,
      4277,
      3815,
      329,
      22155,
      8251,
      13
    ],
    "label": "best_practice",
    "reason": "Use of setdefault to ensure default values for dictionary keys."
  },
  {
    "line": 59,
    "text": "    if isinstance(data, dict):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for URL injection if paths contains untrusted data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      7890,
      11,
      8633,
      2599
    ],
    "start_token": 188,
    "end_token": 199,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      10289,
      16954,
      611,
      13532,
      4909,
      1418,
      81,
      8459,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for URL injection if paths contains untrusted data."
  },
  {
    "line": 60,
    "text": "        if id_or_value in data:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified in requests.get, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4686,
      62,
      273,
      62,
      8367,
      287,
      1366,
      25
    ],
    "start_token": 199,
    "end_token": 215,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      287,
      7007,
      13,
      1136,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified in requests.get, which can lead to hanging connections."
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): raise_for_status() will raise an HTTPError for bad responses, which is good practice.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 215,
    "end_token": 215,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5298,
      62,
      1640,
      62,
      13376,
      3419,
      481,
      5298,
      281,
      14626,
      12331,
      329,
      2089,
      9109,
      11,
      543,
      318,
      922,
      3357,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "raise_for_status() will raise an HTTPError for bad responses, which is good practice."
  },
  {
    "line": 66,
    "text": "    return data",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): json() can raise a ValueError if the response is not valid JSON.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1366
    ],
    "start_token": 215,
    "end_token": 220,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33918,
      3419,
      460,
      5298,
      257,
      11052,
      12331,
      611,
      262,
      2882,
      318,
      407,
      4938,
      19449,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "json() can raise a ValueError if the response is not valid JSON."
  },
  {
    "line": 69,
    "text": "def _wb_get(paths: dict = None, **kwargs):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure in error message.",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      39346,
      62,
      1136,
      7,
      6978,
      82,
      25,
      8633,
      796,
      6045,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 220,
    "end_token": 237,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      287,
      4049,
      3275,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure in error message."
  },
  {
    "line": 73,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking if data is a list and contains a \"message\" key to handle specific error cases.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 237,
    "end_token": 237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      611,
      1366,
      318,
      257,
      1351,
      290,
      4909,
      257,
      366,
      20500,
      1,
      1994,
      284,
      5412,
      2176,
      4049,
      2663,
      13
    ],
    "label": "best_practice",
    "reason": "Checking if data is a list and contains a \"message\" key to handle specific error cases."
  },
  {
    "line": 79,
    "text": "        data = response.json()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure in error message.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      2882,
      13,
      17752,
      3419
    ],
    "start_token": 237,
    "end_token": 250,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      287,
      4049,
      3275,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure in error message."
  },
  {
    "line": 85,
    "text": "        try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified in requests.get, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 250,
    "end_token": 259,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      287,
      7007,
      13,
      1136,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified in requests.get, which can lead to hanging connections."
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising an error if no data is returned to handle unexpected cases.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 259,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      281,
      4049,
      611,
      645,
      1366,
      318,
      4504,
      284,
      5412,
      10059,
      2663,
      13
    ],
    "label": "best_practice",
    "reason": "Raising an error if no data is returned to handle unexpected cases."
  },
  {
    "line": 84,
    "text": "    if isinstance(data, list) and data and \"message\" in data[0]:",
    "annotation": "\u2705 Best Practice: Function docstring should describe the function's purpose and parameters, not just contain an example.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      7890,
      11,
      1351,
      8,
      290,
      1366,
      290,
      366,
      20500,
      1,
      287,
      1366,
      58,
      15,
      5974
    ],
    "start_token": 259,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      2205,
      8841,
      815,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      11,
      407,
      655,
      3994,
      281,
      1672,
      13
    ],
    "label": "best_practice",
    "reason": "Function docstring should describe the function's purpose and parameters, not just contain an example."
  },
  {
    "line": 85,
    "text": "        try:",
    "annotation": "\ud83e\udde0 ML Signal: Checking for a specific substring in a string is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 281,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      257,
      2176,
      3293,
      1806,
      287,
      257,
      4731,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for a specific substring in a string is a common pattern."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using regular expressions without input validation can lead to ReDoS (Regular Expression Denial of Service) if the input is controlled by an attacker.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 290,
    "end_token": 290,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3218,
      14700,
      1231,
      5128,
      21201,
      460,
      1085,
      284,
      797,
      46498,
      357,
      40164,
      41986,
      5601,
      498,
      286,
      4809,
      8,
      611,
      262,
      5128,
      318,
      6856,
      416,
      281,
      15250,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using regular expressions without input validation can lead to ReDoS (Regular Expression Denial of Service) if the input is controlled by an attacker."
  },
  {
    "line": 90,
    "text": "        raise ValueError(\"{msg}\\nurl={url}\\nparams={params}\".format(msg=msg, url=url, params=params))",
    "annotation": "\u2705 Best Practice: Compile regular expressions outside of the function if they are reused to improve performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      90,
      19662,
      32239,
      77,
      6371,
      34758,
      6371,
      32239,
      77,
      37266,
      34758,
      37266,
      92,
      1911,
      18982,
      7,
      19662,
      28,
      19662,
      11,
      19016,
      28,
      6371,
      11,
      42287,
      28,
      37266,
      4008
    ],
    "start_token": 290,
    "end_token": 329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3082,
      576,
      3218,
      14700,
      2354,
      286,
      262,
      2163,
      611,
      484,
      389,
      46823,
      284,
      2987,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Compile regular expressions outside of the function if they are reused to improve performance."
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider compiling the regex pattern once if used multiple times.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 329,
    "end_token": 329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33393,
      262,
      40364,
      3912,
      1752,
      611,
      973,
      3294,
      1661,
      13
    ],
    "label": "best_practice",
    "reason": "Consider compiling the regex pattern once if used multiple times."
  },
  {
    "line": 96,
    "text": "            current_page = 1",
    "annotation": "\u2705 Best Practice: Use of a helper function to process filters improves code modularity and readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      7700,
      796,
      352
    ],
    "start_token": 329,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      1429,
      16628,
      19575,
      2438,
      26507,
      414,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to process filters improves code modularity and readability."
  },
  {
    "line": 99,
    "text": "                response = requests.get(url=url, params=params)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for a ValueError if 'expected' does not contain 'id_or_value'.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      28,
      6371,
      11,
      42287,
      28,
      37266,
      8
    ],
    "start_token": 345,
    "end_token": 374,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      257,
      11052,
      12331,
      611,
      705,
      40319,
      6,
      857,
      407,
      3994,
      705,
      312,
      62,
      273,
      62,
      8367,
      4458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for a ValueError if 'expected' does not contain 'id_or_value'."
  },
  {
    "line": 102,
    "text": "                data.extend(new_data)",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom function '_wb_get' to fetch data, indicating a pattern for data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      13,
      2302,
      437,
      7,
      3605,
      62,
      7890,
      8
    ],
    "start_token": 374,
    "end_token": 398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      2163,
      705,
      62,
      39346,
      62,
      1136,
      6,
      284,
      21207,
      1366,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a custom function '_wb_get' to fetch data, indicating a pattern for data retrieval."
  },
  {
    "line": 104,
    "text": "    if not data:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the first element's keys to determine column names, a pattern for dynamic data handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      1366,
      25
    ],
    "start_token": 398,
    "end_token": 405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      717,
      5002,
      338,
      8251,
      284,
      5004,
      5721,
      3891,
      11,
      257,
      3912,
      329,
      8925,
      1366,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing the first element's keys to determine column names, a pattern for dynamic data handling."
  },
  {
    "line": 108,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of list comprehension to process data, indicating a pattern for data transformation.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 405,
    "end_token": 405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      35915,
      284,
      1429,
      1366,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of list comprehension to process data, indicating a pattern for data transformation."
  },
  {
    "line": 110,
    "text": "def _extract_message(msg):",
    "annotation": "\u2705 Best Practice: Returning a DataFrame for structured data representation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      2302,
      974,
      62,
      20500,
      7,
      19662,
      2599
    ],
    "start_token": 405,
    "end_token": 414,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      329,
      20793,
      1366,
      10552,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame for structured data representation."
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to retrieve and process country metadata",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 414,
    "end_token": 414,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      19818,
      290,
      1429,
      1499,
      20150
    ],
    "label": "ml_signal",
    "reason": "Function to retrieve and process country metadata"
  },
  {
    "line": 108,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a helper function to fetch metadata",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 414,
    "end_token": 414,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      21207,
      20150
    ],
    "label": "ml_signal",
    "reason": "Use of a helper function to fetch metadata"
  },
  {
    "line": 110,
    "text": "def _extract_message(msg):",
    "annotation": "\u2705 Best Practice: Convert columns to numeric to ensure consistent data types",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      2302,
      974,
      62,
      20500,
      7,
      19662,
      2599
    ],
    "start_token": 414,
    "end_token": 423,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      15180,
      284,
      35575,
      284,
      4155,
      6414,
      1366,
      3858
    ],
    "label": "best_practice",
    "reason": "Convert columns to numeric to ensure consistent data types"
  },
  {
    "line": 110,
    "text": "def _extract_message(msg):",
    "annotation": "\u2705 Best Practice: Use of rename for better readability and consistency in column names",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      2302,
      974,
      62,
      20500,
      7,
      19662,
      2599
    ],
    "start_token": 423,
    "end_token": 432,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      36265,
      329,
      1365,
      1100,
      1799,
      290,
      15794,
      287,
      5721,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of rename for better readability and consistency in column names"
  },
  {
    "line": 123,
    "text": "    \"\"\"Request data and return it in the form of a data frame\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Adding constant columns to the DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      18453,
      1366,
      290,
      1441,
      340,
      287,
      262,
      1296,
      286,
      257,
      1366,
      5739,
      37811
    ],
    "start_token": 432,
    "end_token": 449,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      6937,
      15180,
      284,
      262,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Adding constant columns to the DataFrame"
  },
  {
    "line": 125,
    "text": "    id_or_value = \"value\"",
    "annotation": "\ud83e\udde0 ML Signal: Creation of a unique entity identifier",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4686,
      62,
      273,
      62,
      8367,
      796,
      366,
      8367,
      1
    ],
    "start_token": 449,
    "end_token": 461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      257,
      3748,
      9312,
      27421
    ],
    "label": "ml_signal",
    "reason": "Creation of a unique entity identifier"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\u2705 Best Practice: Assigning a unique identifier to the 'id' column",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 461,
    "end_token": 461,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      257,
      3748,
      27421,
      284,
      262,
      705,
      312,
      6,
      5721
    ],
    "label": "best_practice",
    "reason": "Assigning a unique identifier to the 'id' column"
  },
  {
    "line": 124,
    "text": "    filters = _collapse(filters)",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple optional parameters indicating flexible usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16628,
      796,
      4808,
      26000,
      7512,
      7,
      10379,
      1010,
      8
    ],
    "start_token": 461,
    "end_token": 473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      11902,
      10007,
      12739,
      12846,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with multiple optional parameters indicating flexible usage patterns"
  },
  {
    "line": 130,
    "text": "    data = _wb_get(paths={name: filters}, **params)",
    "annotation": "\u2705 Best Practice: Check for specific string value and reassign for consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      4808,
      39346,
      62,
      1136,
      7,
      6978,
      82,
      34758,
      3672,
      25,
      16628,
      5512,
      12429,
      37266,
      8
    ],
    "start_token": 473,
    "end_token": 493,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      2176,
      4731,
      1988,
      290,
      12719,
      570,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Check for specific string value and reassign for consistency"
  },
  {
    "line": 133,
    "text": "    columns = data[0].keys()",
    "annotation": "\ud83e\udde0 ML Signal: Use of a helper function with dynamic parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15180,
      796,
      1366,
      58,
      15,
      4083,
      13083,
      3419
    ],
    "start_token": 493,
    "end_token": 504,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      351,
      8925,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of a helper function with dynamic parameters"
  },
  {
    "line": 134,
    "text": "    records = {}",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple optional parameters, indicating flexible usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4406,
      796,
      23884
    ],
    "start_token": 504,
    "end_token": 510,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      11902,
      10007,
      11,
      12739,
      12846,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function with multiple optional parameters, indicating flexible usage patterns"
  },
  {
    "line": 136,
    "text": "    for col in columns:",
    "annotation": "\u2705 Best Practice: Use of a helper function to encapsulate API call logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      951,
      287,
      15180,
      25
    ],
    "start_token": 510,
    "end_token": 518,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      32652,
      5039,
      7824,
      869,
      9156
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to encapsulate API call logic"
  },
  {
    "line": 136,
    "text": "    for col in columns:",
    "annotation": "\u2705 Best Practice: List comprehension for concise and readable data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      951,
      287,
      15180,
      25
    ],
    "start_token": 518,
    "end_token": 526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      329,
      35327,
      290,
      31744,
      1366,
      13389
    ],
    "label": "best_practice",
    "reason": "List comprehension for concise and readable data transformation"
  },
  {
    "line": 144,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of a helper function for consistent timestamp conversion",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 526,
    "end_token": 526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      329,
      6414,
      41033,
      11315
    ],
    "label": "best_practice",
    "reason": "Use of a helper function for consistent timestamp conversion"
  },
  {
    "line": 144,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to handle optional parameter",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 526,
    "end_token": 526,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5412,
      11902,
      11507
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to handle optional parameter"
  },
  {
    "line": 148,
    "text": "        columns={",
    "annotation": "\u2705 Best Practice: Use of pandas for structured data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      34758
    ],
    "start_token": 526,
    "end_token": 535,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      329,
      20793,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of pandas for structured data manipulation"
  },
  {
    "line": 151,
    "text": "            \"lendingType\": \"lending_type\",",
    "annotation": "\u2705 Best Practice: Setting a multi-index for better data organization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      75,
      1571,
      6030,
      1298,
      366,
      75,
      1571,
      62,
      4906,
      1600
    ],
    "start_token": 535,
    "end_token": 557,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      257,
      5021,
      12,
      9630,
      329,
      1365,
      1366,
      4009
    ],
    "label": "best_practice",
    "reason": "Setting a multi-index for better data organization"
  },
  {
    "line": 147,
    "text": "    df.rename(",
    "annotation": "\ud83e\udde0 ML Signal: Function with flexible parameters indicating dynamic data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      13,
      918,
      480,
      7
    ],
    "start_token": 557,
    "end_token": 565,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      12846,
      10007,
      12739,
      8925,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function with flexible parameters indicating dynamic data retrieval"
  },
  {
    "line": 148,
    "text": "        columns={",
    "annotation": "\u2705 Best Practice: Docstring provides clear explanation of parameters and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      34758
    ],
    "start_token": 565,
    "end_token": 574,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      7468,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear explanation of parameters and return value"
  },
  {
    "line": 153,
    "text": "        },",
    "annotation": "\ud83e\udde0 ML Signal: Use of a private function to encapsulate data retrieval logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 574,
    "end_token": 582,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2839,
      2163,
      284,
      32652,
      5039,
      1366,
      45069,
      9156
    ],
    "label": "ml_signal",
    "reason": "Use of a private function to encapsulate data retrieval logic"
  },
  {
    "line": 153,
    "text": "        },",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for injection if params are not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 582,
    "end_token": 590,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      16954,
      611,
      42287,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for injection if params are not properly sanitized"
  },
  {
    "line": 152,
    "text": "            \"capitalCity\": \"capital_city\",",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      27544,
      14941,
      1298,
      366,
      27544,
      62,
      19205,
      1600
    ],
    "start_token": 590,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 157,
    "text": "    df[\"exchange\"] = \"galaxy\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function that returns a DataFrame, indicating data processing or analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      1069,
      3803,
      8973,
      796,
      366,
      13528,
      6969,
      1
    ],
    "start_token": 610,
    "end_token": 623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      326,
      5860,
      257,
      6060,
      19778,
      11,
      12739,
      1366,
      7587,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of a function that returns a DataFrame, indicating data processing or analysis"
  },
  {
    "line": 158,
    "text": "    df[\"entity_id\"] = df[[\"entity_type\", \"exchange\", \"code\"]].apply(lambda x: \"_\".join(x.astype(str)), axis=1)",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring explaining the function's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      47764,
      58,
      14692,
      26858,
      62,
      4906,
      1600,
      366,
      1069,
      3803,
      1600,
      366,
      8189,
      8973,
      4083,
      39014,
      7,
      50033,
      2124,
      25,
      45434,
      1911,
      22179,
      7,
      87,
      13,
      459,
      2981,
      7,
      2536,
      36911,
      16488,
      28,
      16,
      8
    ],
    "start_token": 623,
    "end_token": 668,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      11170,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring explaining the function's purpose and parameters."
  },
  {
    "line": 162,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function signature and parameter usage can be used to understand API design patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 668,
    "end_token": 668,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      290,
      11507,
      8748,
      460,
      307,
      973,
      284,
      1833,
      7824,
      1486,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Function signature and parameter usage can be used to understand API design patterns."
  },
  {
    "line": 163,
    "text": "def get_indicators(indicator=None, language=None, id_or_value=None, **params):",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      521,
      44549,
      7,
      521,
      26407,
      28,
      14202,
      11,
      3303,
      28,
      14202,
      11,
      4686,
      62,
      273,
      62,
      8367,
      28,
      14202,
      11,
      12429,
      37266,
      2599
    ],
    "start_token": 668,
    "end_token": 694,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use."
  },
  {
    "line": 166,
    "text": "    :param language: Desired language",
    "annotation": "\ud83e\udde0 ML Signal: Use of **params indicates a pattern of accepting additional optional parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      3303,
      25,
      2935,
      1202,
      3303
    ],
    "start_token": 694,
    "end_token": 704,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12429,
      37266,
      9217,
      257,
      3912,
      286,
      12598,
      3224,
      11902,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of **params indicates a pattern of accepting additional optional parameters."
  },
  {
    "line": 166,
    "text": "    :param language: Desired language",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unexpected behavior if **params contains unexpected keys or values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      3303,
      25,
      2935,
      1202,
      3303
    ],
    "start_token": 704,
    "end_token": 714,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10059,
      4069,
      611,
      12429,
      37266,
      4909,
      10059,
      8251,
      393,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unexpected behavior if **params contains unexpected keys or values."
  },
  {
    "line": 162,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with flexible parameters indicating dynamic data retrieval",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 714,
    "end_token": 714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      12846,
      10007,
      12739,
      8925,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function with flexible parameters indicating dynamic data retrieval"
  },
  {
    "line": 163,
    "text": "def get_indicators(indicator=None, language=None, id_or_value=None, **params):",
    "annotation": "\u2705 Best Practice: Docstring provides clear description and parameter details",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      521,
      44549,
      7,
      521,
      26407,
      28,
      14202,
      11,
      3303,
      28,
      14202,
      11,
      4686,
      62,
      273,
      62,
      8367,
      28,
      14202,
      11,
      12429,
      37266,
      2599
    ],
    "start_token": 714,
    "end_token": 740,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      6764,
      290,
      11507,
      3307
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear description and parameter details"
  },
  {
    "line": 168,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a private function for data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 740,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2839,
      2163,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of a private function for data retrieval"
  },
  {
    "line": 168,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data if _get_meta is not securely implemented",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 740,
    "end_token": 740,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      611,
      4808,
      1136,
      62,
      28961,
      318,
      407,
      30835,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data if _get_meta is not securely implemented"
  },
  {
    "line": 167,
    "text": "    :param id_or_value: Choose either 'id' or 'value' for columns 'source' and 'topics'\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function with flexible parameters indicating dynamic data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      4686,
      62,
      273,
      62,
      8367,
      25,
      17489,
      2035,
      705,
      312,
      6,
      393,
      705,
      8367,
      6,
      329,
      15180,
      705,
      10459,
      6,
      290,
      705,
      4852,
      873,
      6,
      37811
    ],
    "start_token": 740,
    "end_token": 771,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      12846,
      10007,
      12739,
      8925,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function with flexible parameters indicating dynamic data retrieval"
  },
  {
    "line": 168,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides clear description and parameter explanation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 771,
    "end_token": 771,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      6764,
      290,
      11507,
      7468
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear description and parameter explanation"
  },
  {
    "line": 173,
    "text": "        \"indicator\", indicator, language=language, id_or_value=id_or_value, expected=[\"id\", \"value\"], **params",
    "annotation": "\ud83e\udde0 ML Signal: Use of a private function for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      521,
      26407,
      1600,
      16916,
      11,
      3303,
      28,
      16129,
      11,
      4686,
      62,
      273,
      62,
      8367,
      28,
      312,
      62,
      273,
      62,
      8367,
      11,
      2938,
      28,
      14692,
      312,
      1600,
      366,
      8367,
      33116,
      12429,
      37266
    ],
    "start_token": 771,
    "end_token": 810,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2839,
      2163,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of a private function for data retrieval"
  },
  {
    "line": 174,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data if _get_meta is not securely implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 810,
    "end_token": 814,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      611,
      4808,
      1136,
      62,
      28961,
      318,
      407,
      30835,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data if _get_meta is not securely implemented"
  },
  {
    "line": 173,
    "text": "        \"indicator\", indicator, language=language, id_or_value=id_or_value, expected=[\"id\", \"value\"], **params",
    "annotation": "\ud83e\udde0 ML Signal: Function parameter usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      521,
      26407,
      1600,
      16916,
      11,
      3303,
      28,
      16129,
      11,
      4686,
      62,
      273,
      62,
      8367,
      28,
      312,
      62,
      273,
      62,
      8367,
      11,
      2938,
      28,
      14692,
      312,
      1600,
      366,
      8367,
      33116,
      12429,
      37266
    ],
    "start_token": 814,
    "end_token": 853,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      11507,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function parameter usage pattern"
  },
  {
    "line": 176,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default values for function parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 853,
    "end_token": 853,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      2163,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of default values for function parameters"
  },
  {
    "line": 181,
    "text": "            \"code\": item[\"country\"][\"id\"],",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of indicators",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      2378,
      14692,
      19315,
      1,
      7131,
      1,
      312,
      33116
    ],
    "start_token": 853,
    "end_token": 875,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      21337
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of indicators"
  },
  {
    "line": 188,
    "text": "    df = df.set_index([\"code\", \"timestamp\"])",
    "annotation": "\ud83e\udde0 ML Signal: Creation of unique identifiers using multiple columns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      2617,
      62,
      9630,
      7,
      14692,
      8189,
      1600,
      366,
      16514,
      27823,
      8973,
      8
    ],
    "start_token": 875,
    "end_token": 894,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      3748,
      42814,
      1262,
      3294,
      15180
    ],
    "label": "ml_signal",
    "reason": "Creation of unique identifiers using multiple columns"
  },
  {
    "line": 191,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Main entry point pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 894,
    "end_token": 894,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8774,
      5726,
      966,
      3912
    ],
    "label": "ml_signal",
    "reason": "Main entry point pattern"
  },
  {
    "line": 191,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly defining module exports",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 894,
    "end_token": 894,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      8265,
      15319
    ],
    "label": "best_practice",
    "reason": "Explicitly defining module exports"
  }
]
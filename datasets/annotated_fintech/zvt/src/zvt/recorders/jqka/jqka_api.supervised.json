[
  {
    "line": 2,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from a module that may not be well-known or maintained, which could introduce security risks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      257,
      8265,
      326,
      743,
      407,
      307,
      880,
      12,
      4002,
      393,
      9456,
      11,
      543,
      714,
      10400,
      2324,
      7476,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from a module that may not be well-known or maintained, which could introduce security risks."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from a module that may not be well-known or maintained, which could introduce security risks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      257,
      8265,
      326,
      743,
      407,
      307,
      880,
      12,
      4002,
      393,
      9456,
      11,
      543,
      714,
      10400,
      2324,
      7476,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from a module that may not be well-known or maintained, which could introduce security risks."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to convert a multi-line string into a dictionary, indicating a pattern of handling HTTP headers.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      10385,
      257,
      5021,
      12,
      1370,
      4731,
      656,
      257,
      22155,
      11,
      12739,
      257,
      3912,
      286,
      9041,
      14626,
      24697,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to convert a multi-line string into a dictionary, indicating a pattern of handling HTTP headers."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a utility function to convert headers to a dictionary improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      10361,
      2163,
      284,
      10385,
      24697,
      284,
      257,
      22155,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using a utility function to convert headers to a dictionary improves code readability and maintainability."
  },
  {
    "line": 21,
    "text": "Sec-Fetch-Site: same-origin",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific purpose (fetching data from an API)",
    "confidence": 1.0,
    "tokens": [
      6558,
      12,
      37,
      7569,
      12,
      29123,
      25,
      976,
      12,
      47103
    ],
    "start_token": 0,
    "end_token": 10,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      4007,
      357,
      69,
      7569,
      278,
      1366,
      422,
      281,
      7824,
      8
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific purpose (fetching data from an API)"
  },
  {
    "line": 23,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Use of a helper function to format date strings",
    "confidence": 1.0,
    "tokens": [
      37811
    ],
    "start_token": 10,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      5794,
      3128,
      13042
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to format date strings"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: URL construction pattern for API requests",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 11,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      3912,
      329,
      7824,
      7007
    ],
    "label": "ml_signal",
    "reason": "URL construction pattern for API requests"
  },
  {
    "line": 27,
    "text": "def get_continuous_limit_up(date: str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No timeout specified in the requests.get call",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      18487,
      5623,
      62,
      32374,
      62,
      929,
      7,
      4475,
      25,
      965,
      2599
    ],
    "start_token": 11,
    "end_token": 25,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      26827,
      7368,
      287,
      262,
      7007,
      13,
      1136,
      869
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No timeout specified in the requests.get call"
  },
  {
    "line": 29,
    "text": "    url = f\"https://data.10jqka.com.cn/dataapi/limit_up/continuous_limit_up?filter=HS,GEM2STAR&date={date_str}\"",
    "annotation": "\u2705 Best Practice: Checking the response status code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      277,
      1,
      5450,
      1378,
      7890,
      13,
      940,
      73,
      80,
      4914,
      13,
      785,
      13,
      31522,
      14,
      7890,
      15042,
      14,
      32374,
      62,
      929,
      14,
      18487,
      5623,
      62,
      32374,
      62,
      929,
      30,
      24455,
      28,
      7998,
      11,
      38,
      3620,
      17,
      46678,
      5,
      4475,
      34758,
      4475,
      62,
      2536,
      36786
    ],
    "start_token": 25,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      262,
      2882,
      3722,
      2438
    ],
    "label": "best_practice",
    "reason": "Checking the response status code"
  },
  {
    "line": 31,
    "text": "    if resp.status_code == 200:",
    "annotation": "\u2705 Best Practice: Parsing JSON response",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      1217,
      13,
      13376,
      62,
      8189,
      6624,
      939,
      25
    ],
    "start_token": 74,
    "end_token": 86,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      23042,
      278,
      19449,
      2882
    ],
    "label": "best_practice",
    "reason": "Parsing JSON response"
  },
  {
    "line": 34,
    "text": "            return json_result[\"data\"]",
    "annotation": "\ud83e\udde0 ML Signal: Returning specific data from a JSON response",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      33918,
      62,
      20274,
      14692,
      7890,
      8973
    ],
    "start_token": 86,
    "end_token": 104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      2176,
      1366,
      422,
      257,
      19449,
      2882
    ],
    "label": "ml_signal",
    "reason": "Returning specific data from a JSON response"
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure in error message",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 104,
    "end_token": 104,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      287,
      4049,
      3275
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure in error message"
  },
  {
    "line": 30,
    "text": "    resp = requests.get(url, headers=_JKQA_HEADER)",
    "annotation": "\ud83e\udde0 ML Signal: Function with a specific pattern of constructing URLs for API requests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      24697,
      28,
      62,
      41,
      42,
      48,
      32,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 104,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      257,
      2176,
      3912,
      286,
      30580,
      32336,
      329,
      7824,
      7007
    ],
    "label": "ml_signal",
    "reason": "Function with a specific pattern of constructing URLs for API requests"
  },
  {
    "line": 32,
    "text": "        json_result = resp.json()",
    "annotation": "\u2705 Best Practice: Use of a function to convert date to a specific string format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33918,
      62,
      20274,
      796,
      1217,
      13,
      17752,
      3419
    ],
    "start_token": 126,
    "end_token": 141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2163,
      284,
      10385,
      3128,
      284,
      257,
      2176,
      4731,
      5794
    ],
    "label": "best_practice",
    "reason": "Use of a function to convert date to a specific string format"
  },
  {
    "line": 34,
    "text": "            return json_result[\"data\"]",
    "annotation": "\ud83e\udde0 ML Signal: URL construction pattern with query parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      33918,
      62,
      20274,
      14692,
      7890,
      8973
    ],
    "start_token": 141,
    "end_token": 159,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      3912,
      351,
      12405,
      10007
    ],
    "label": "ml_signal",
    "reason": "URL construction pattern with query parameters"
  },
  {
    "line": 35,
    "text": "    raise RuntimeError(f\"request jkqa data code: {resp.status_code}, error: {resp.text}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data in URL if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5298,
      43160,
      12331,
      7,
      69,
      1,
      25927,
      474,
      74,
      20402,
      1366,
      2438,
      25,
      1391,
      4363,
      13,
      13376,
      62,
      8189,
      5512,
      4049,
      25,
      1391,
      4363,
      13,
      5239,
      92,
      4943
    ],
    "start_token": 159,
    "end_token": 190,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      287,
      10289,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data in URL if not handled properly"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network request failures",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 190,
    "end_token": 190,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network request failures"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for successful HTTP response status",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 190,
    "end_token": 190,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      4388,
      14626,
      2882,
      3722
    ],
    "label": "best_practice",
    "reason": "Check for successful HTTP response status"
  },
  {
    "line": 41,
    "text": "    resp = requests.get(url, headers=_JKQA_HEADER)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes the response is always JSON, which may not be the case",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1217,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      24697,
      28,
      62,
      41,
      42,
      48,
      32,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 190,
    "end_token": 212,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      262,
      2882,
      318,
      1464,
      19449,
      11,
      543,
      743,
      407,
      307,
      262,
      1339
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes the response is always JSON, which may not be the case"
  },
  {
    "line": 44,
    "text": "        if json_result:",
    "annotation": "\u2705 Best Practice: Return a dictionary with specific keys",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      33918,
      62,
      20274,
      25
    ],
    "start_token": 212,
    "end_token": 224,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      22155,
      351,
      2176,
      8251
    ],
    "label": "best_practice",
    "reason": "Return a dictionary with specific keys"
  },
  {
    "line": 49,
    "text": "    raise RuntimeError(f\"request jkqa data code: {resp.status_code}, error: {resp.text}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Raises a generic RuntimeError without specific error handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      5298,
      43160,
      12331,
      7,
      69,
      1,
      25927,
      474,
      74,
      20402,
      1366,
      2438,
      25,
      1391,
      4363,
      13,
      13376,
      62,
      8189,
      5512,
      4049,
      25,
      1391,
      4363,
      13,
      5239,
      92,
      4943
    ],
    "start_token": 224,
    "end_token": 255,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7567,
      2696,
      257,
      14276,
      43160,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Raises a generic RuntimeError without specific error handling"
  },
  {
    "line": 42,
    "text": "    if resp.status_code == 200:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific parameter type hint",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      1217,
      13,
      13376,
      62,
      8189,
      6624,
      939,
      25
    ],
    "start_token": 255,
    "end_token": 267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      11507,
      2099,
      9254
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific parameter type hint"
  },
  {
    "line": 44,
    "text": "        if json_result:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date to a specific string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      33918,
      62,
      20274,
      25
    ],
    "start_token": 267,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      284,
      257,
      2176,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of date to a specific string format"
  },
  {
    "line": 46,
    "text": "                \"limit_up_count\": json_result[\"data\"][\"limit_up_count\"],",
    "annotation": "\ud83e\udde0 ML Signal: URL construction with formatted string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      32374,
      62,
      929,
      62,
      9127,
      1298,
      33918,
      62,
      20274,
      14692,
      7890,
      1,
      7131,
      1,
      32374,
      62,
      929,
      62,
      9127,
      33116
    ],
    "start_token": 279,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      351,
      39559,
      4731
    ],
    "label": "ml_signal",
    "reason": "URL construction with formatted string"
  },
  {
    "line": 47,
    "text": "                \"limit_down_count\": json_result[\"data\"][\"limit_down_count\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for URL injection if `date_str` is not properly validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      32374,
      62,
      2902,
      62,
      9127,
      1298,
      33918,
      62,
      20274,
      14692,
      7890,
      1,
      7131,
      1,
      32374,
      62,
      2902,
      62,
      9127,
      33116
    ],
    "start_token": 315,
    "end_token": 351,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      10289,
      16954,
      611,
      4600,
      4475,
      62,
      2536,
      63,
      318,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for URL injection if `date_str` is not properly validated"
  },
  {
    "line": 49,
    "text": "    raise RuntimeError(f\"request jkqa data code: {resp.status_code}, error: {resp.text}\")",
    "annotation": "\ud83e\udde0 ML Signal: Function call with a keyword argument",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5298,
      43160,
      12331,
      7,
      69,
      1,
      25927,
      474,
      74,
      20402,
      1366,
      2438,
      25,
      1391,
      4363,
      13,
      13376,
      62,
      8189,
      5512,
      4049,
      25,
      1391,
      4363,
      13,
      5239,
      92,
      4943
    ],
    "start_token": 351,
    "end_token": 382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      257,
      21179,
      4578
    ],
    "label": "ml_signal",
    "reason": "Function call with a keyword argument"
  },
  {
    "line": 46,
    "text": "                \"limit_up_count\": json_result[\"data\"][\"limit_up_count\"],",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific parameter type hint",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      32374,
      62,
      929,
      62,
      9127,
      1298,
      33918,
      62,
      20274,
      14692,
      7890,
      1,
      7131,
      1,
      32374,
      62,
      929,
      62,
      9127,
      33116
    ],
    "start_token": 382,
    "end_token": 418,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      11507,
      2099,
      9254
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific parameter type hint"
  },
  {
    "line": 48,
    "text": "            }",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date to a specific string format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 418,
    "end_token": 430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      284,
      257,
      2176,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of date to a specific string format"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: URL construction with formatted string",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 430,
    "end_token": 430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      351,
      39559,
      4731
    ],
    "label": "ml_signal",
    "reason": "URL construction with formatted string"
  },
  {
    "line": 52,
    "text": "def get_limit_up(date: str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data in URL",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      32374,
      62,
      929,
      7,
      4475,
      25,
      965,
      2599
    ],
    "start_token": 430,
    "end_token": 441,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      287,
      10289
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data in URL"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: URL construction pattern with pagination and timestamp",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 441,
    "end_token": 441,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      3912,
      351,
      42208,
      1883,
      290,
      41033
    ],
    "label": "ml_signal",
    "reason": "URL construction pattern with pagination and timestamp"
  },
  {
    "line": 53,
    "text": "    date_str = to_time_str(the_time=date, fmt=TIME_FORMAT_DAY1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing URLs can expose sensitive information in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3128,
      62,
      2536,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      1169,
      62,
      2435,
      28,
      4475,
      11,
      46996,
      28,
      34694,
      62,
      21389,
      1404,
      62,
      26442,
      16,
      8
    ],
    "start_token": 441,
    "end_token": 470,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      32336,
      460,
      15651,
      8564,
      1321,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing URLs can expose sensitive information in logs"
  },
  {
    "line": 55,
    "text": "    return get_jkqa_data(url=url)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network request failures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      651,
      62,
      73,
      74,
      20402,
      62,
      7890,
      7,
      6371,
      28,
      6371,
      8
    ],
    "start_token": 470,
    "end_token": 486,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network request failures"
  },
  {
    "line": 58,
    "text": "def get_limit_down(date: str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes JSON response without error handling",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      32374,
      62,
      2902,
      7,
      4475,
      25,
      965,
      2599
    ],
    "start_token": 486,
    "end_token": 497,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      19449,
      2882,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes JSON response without error handling"
  },
  {
    "line": 66,
    "text": "    print(requesting_url)",
    "annotation": "\ud83e\udde0 ML Signal: Recursive pattern for fetching paginated data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3601,
      7,
      25927,
      278,
      62,
      6371,
      8
    ],
    "start_token": 497,
    "end_token": 507,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      3912,
      329,
      21207,
      278,
      42208,
      3898,
      1366
    ],
    "label": "ml_signal",
    "reason": "Recursive pattern for fetching paginated data"
  },
  {
    "line": 72,
    "text": "            if fetch_all:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potentially raises an exception based on data length mismatch",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      21207,
      62,
      439,
      25
    ],
    "start_token": 507,
    "end_token": 523,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6902,
      3746,
      12073,
      281,
      6631,
      1912,
      319,
      1366,
      4129,
      46318
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potentially raises an exception based on data length mismatch"
  },
  {
    "line": 84,
    "text": "                                f\"Assertion failed, the total length of data should be {json_result['data']['page']['total']}, only {len(data)} fetched\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises a generic RuntimeError without specific exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      8021,
      861,
      295,
      4054,
      11,
      262,
      2472,
      4129,
      286,
      1366,
      815,
      307,
      1391,
      17752,
      62,
      20274,
      17816,
      7890,
      6,
      7131,
      6,
      7700,
      6,
      7131,
      6,
      23350,
      20520,
      5512,
      691,
      1391,
      11925,
      7,
      7890,
      38165,
      11351,
      1740,
      1
    ],
    "start_token": 523,
    "end_token": 593,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      257,
      14276,
      43160,
      12331,
      1231,
      2176,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises a generic RuntimeError without specific exception handling"
  },
  {
    "line": 84,
    "text": "                                f\"Assertion failed, the total length of data should be {json_result['data']['page']['total']}, only {len(data)} fetched\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function call without definition in the provided code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      8021,
      861,
      295,
      4054,
      11,
      262,
      2472,
      4129,
      286,
      1366,
      815,
      307,
      1391,
      17752,
      62,
      20274,
      17816,
      7890,
      6,
      7131,
      6,
      7700,
      6,
      7131,
      6,
      23350,
      20520,
      5512,
      691,
      1391,
      11925,
      7,
      7890,
      38165,
      11351,
      1740,
      1
    ],
    "start_token": 593,
    "end_token": 663,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      869,
      1231,
      6770,
      287,
      262,
      2810,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function call without definition in the provided code"
  },
  {
    "line": 84,
    "text": "                                f\"Assertion failed, the total length of data should be {json_result['data']['page']['total']}, only {len(data)} fetched\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing potentially large data structures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      8021,
      861,
      295,
      4054,
      11,
      262,
      2472,
      4129,
      286,
      1366,
      815,
      307,
      1391,
      17752,
      62,
      20274,
      17816,
      7890,
      6,
      7131,
      6,
      7700,
      6,
      7131,
      6,
      23350,
      20520,
      5512,
      691,
      1391,
      11925,
      7,
      7890,
      38165,
      11351,
      1740,
      1
    ],
    "start_token": 663,
    "end_token": 733,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      6196,
      1588,
      1366,
      8573
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing potentially large data structures"
  },
  {
    "line": 84,
    "text": "                                f\"Assertion failed, the total length of data should be {json_result['data']['page']['total']}, only {len(data)} fetched\"",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      8021,
      861,
      295,
      4054,
      11,
      262,
      2472,
      4129,
      286,
      1366,
      815,
      307,
      1391,
      17752,
      62,
      20274,
      17816,
      7890,
      6,
      7131,
      6,
      7700,
      6,
      7131,
      6,
      23350,
      20520,
      5512,
      691,
      1391,
      11925,
      7,
      7890,
      38165,
      11351,
      1740,
      1
    ],
    "start_token": 733,
    "end_token": 803,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
[
  {
    "line": 11,
    "text": "from zvt.domain.emotion.emotion import LimitUpInfo, LimitDownInfo, Emotion",
    "annotation": "\u2705 Best Practice: Function name is prefixed with an underscore, indicating intended private use.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      13,
      368,
      9650,
      13,
      368,
      9650,
      1330,
      27272,
      4933,
      12360,
      11,
      27272,
      8048,
      12360,
      11,
      2295,
      9650
    ],
    "start_token": 0,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      7694,
      2966,
      351,
      281,
      44810,
      11,
      12739,
      5292,
      2839,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Function name is prefixed with an underscore, indicating intended private use."
  },
  {
    "line": 13,
    "text": "from zvt.utils.time_utils import to_time_str, date_time_by_interval, current_date, to_pd_timestamp",
    "annotation": "\u2705 Best Practice: Checks for None or empty string input.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      11,
      1459,
      62,
      4475,
      11,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 22,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47719,
      329,
      6045,
      393,
      6565,
      4731,
      5128,
      13
    ],
    "label": "best_practice",
    "reason": "Checks for None or empty string input."
  },
  {
    "line": 16,
    "text": "def _get_high_days_count(high_days_str: str):",
    "annotation": "\u2705 Best Practice: Use of raw string for regex pattern.",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      8929,
      62,
      12545,
      62,
      9127,
      7,
      8929,
      62,
      12545,
      62,
      2536,
      25,
      965,
      2599
    ],
    "start_token": 57,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      8246,
      4731,
      329,
      40364,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Use of raw string for regex pattern."
  },
  {
    "line": 18,
    "text": "        return 1",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unexpected behavior if input is not validated before regex operation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      352
    ],
    "start_token": 75,
    "end_token": 84,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10059,
      4069,
      611,
      5128,
      318,
      407,
      31031,
      878,
      40364,
      4905,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unexpected behavior if input is not validated before regex operation."
  },
  {
    "line": 20,
    "text": "    result = re.findall(pattern, high_days_str)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes result is non-empty; potential IndexError if assumption is wrong.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      302,
      13,
      19796,
      439,
      7,
      33279,
      11,
      1029,
      62,
      12545,
      62,
      2536,
      8
    ],
    "start_token": 84,
    "end_token": 102,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      1255,
      318,
      1729,
      12,
      28920,
      26,
      2785,
      12901,
      12331,
      611,
      13196,
      318,
      2642,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes result is non-empty; potential IndexError if assumption is wrong."
  },
  {
    "line": 18,
    "text": "        return 1",
    "annotation": "\u2705 Best Practice: Use of class attributes for configuration and metadata",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      352
    ],
    "start_token": 102,
    "end_token": 111,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      290,
      20150
    ],
    "label": "best_practice",
    "reason": "Use of class attributes for configuration and metadata"
  },
  {
    "line": 20,
    "text": "    result = re.findall(pattern, high_days_str)",
    "annotation": "\u2705 Best Practice: Clear association of schema with the entity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1255,
      796,
      302,
      13,
      19796,
      439,
      7,
      33279,
      11,
      1029,
      62,
      12545,
      62,
      2536,
      8
    ],
    "start_token": 111,
    "end_token": 129,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      8112,
      286,
      32815,
      351,
      262,
      9312
    ],
    "label": "best_practice",
    "reason": "Clear association of schema with the entity"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of class attributes for configuration and metadata",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 129,
    "end_token": 129,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      290,
      20150
    ],
    "label": "best_practice",
    "reason": "Use of class attributes for configuration and metadata"
  },
  {
    "line": 24,
    "text": "class JqkaLimitUpRecorder(TimestampsDataRecorder):",
    "annotation": "\u2705 Best Practice: Clear association of schema with the data",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      4914,
      39184,
      4933,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 129,
    "end_token": 145,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      8112,
      286,
      32815,
      351,
      262,
      1366
    ],
    "label": "best_practice",
    "reason": "Clear association of schema with the data"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of a list with a specific object type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 145,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      257,
      1351,
      351,
      257,
      2176,
      2134,
      2099
    ],
    "label": "ml_signal",
    "reason": "Initialization of a list with a specific object type"
  },
  {
    "line": 24,
    "text": "class JqkaLimitUpRecorder(TimestampsDataRecorder):",
    "annotation": "\u2705 Best Practice: Use of a method to initialize or reset class attributes",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      4914,
      39184,
      4933,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 145,
    "end_token": 161,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2446,
      284,
      41216,
      393,
      13259,
      1398,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of a method to initialize or reset class attributes"
  },
  {
    "line": 25,
    "text": "    entity_provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of a hardcoded identifier for an entity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      368,
      1
    ],
    "start_token": 161,
    "end_token": 172,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1327,
      40976,
      27421,
      329,
      281,
      9312
    ],
    "label": "ml_signal",
    "reason": "Use of a hardcoded identifier for an entity"
  },
  {
    "line": 24,
    "text": "class JqkaLimitUpRecorder(TimestampsDataRecorder):",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the method parameters for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      4914,
      39184,
      4933,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 172,
    "end_token": 188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2446,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the method parameters for better readability and maintainability."
  },
  {
    "line": 25,
    "text": "    entity_provider = \"em\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a query method to fetch data from a database.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      368,
      1
    ],
    "start_token": 188,
    "end_token": 199,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      12405,
      2446,
      284,
      21207,
      1366,
      422,
      257,
      6831,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a query method to fetch data from a database."
  },
  {
    "line": 29,
    "text": "    data_schema = LimitUpInfo",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `latest_infos` is not validated before use.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      27272,
      4933,
      12360
    ],
    "start_token": 199,
    "end_token": 210,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      42861,
      62,
      10745,
      418,
      63,
      318,
      407,
      31031,
      878,
      779,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `latest_infos` is not validated before use."
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to calculate a date based on an interval.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      15284,
      257,
      3128,
      1912,
      319,
      281,
      16654,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to calculate a date based on an interval."
  },
  {
    "line": 36,
    "text": "        latest_infos = LimitUpInfo.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas to generate a date range.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3452,
      62,
      10745,
      418,
      796,
      27272,
      4933,
      12360,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 210,
    "end_token": 230,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      284,
      7716,
      257,
      3128,
      2837,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas to generate a date range."
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of timestamps to perform operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 230,
    "end_token": 230,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      4628,
      395,
      9430,
      284,
      1620,
      4560
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of timestamps to perform operations"
  },
  {
    "line": 36,
    "text": "        latest_infos = LimitUpInfo.query_data(",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of timestamp to string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3452,
      62,
      10745,
      418,
      796,
      27272,
      4933,
      12360,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 230,
    "end_token": 250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      41033,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of timestamp to string format"
  },
  {
    "line": 38,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Logging information with dynamic content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 250,
    "end_token": 258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging information with dynamic content"
  },
  {
    "line": 40,
    "text": "            start_date = latest_infos[0].timestamp",
    "annotation": "\ud83e\udde0 ML Signal: API call to fetch data based on a date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      4475,
      796,
      3452,
      62,
      10745,
      418,
      58,
      15,
      4083,
      16514,
      27823
    ],
    "start_token": 258,
    "end_token": 282,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      284,
      21207,
      1366,
      1912,
      319,
      257,
      3128
    ],
    "label": "ml_signal",
    "reason": "API call to fetch data based on a date"
  },
  {
    "line": 42,
    "text": "            # \u6700\u8fd1\u4e00\u5e74\u7684\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Initializing an empty list to store records",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      21410,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 282,
    "end_token": 307,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      281,
      6565,
      1351,
      284,
      3650,
      4406
    ],
    "label": "ml_signal",
    "reason": "Initializing an empty list to store records"
  },
  {
    "line": 42,
    "text": "            # \u6700\u8fd1\u4e00\u5e74\u7684\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over API response data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      21410,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 307,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      7824,
      2882,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over API response data"
  },
  {
    "line": 42,
    "text": "            # \u6700\u8fd1\u4e00\u5e74\u7684\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to entity ID",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      21410,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 332,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      9312,
      4522
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to entity ID"
  },
  {
    "line": 42,
    "text": "            # \u6700\u8fd1\u4e00\u5e74\u7684\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Creating a dictionary to represent a record",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      21410,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 357,
    "end_token": 382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      22155,
      284,
      2380,
      257,
      1700
    ],
    "label": "ml_signal",
    "reason": "Creating a dictionary to represent a record"
  },
  {
    "line": 42,
    "text": "            # \u6700\u8fd1\u4e00\u5e74\u7684\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Use of string formatting to create unique ID",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      42164,
      222,
      32573,
      239,
      31660,
      33176,
      112,
      21410,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 382,
    "end_token": 407,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      33313,
      284,
      2251,
      3748,
      4522
    ],
    "label": "ml_signal",
    "reason": "Use of string formatting to create unique ID"
  },
  {
    "line": 63,
    "text": "                        \"open_count\": data[\"open_num\"] if data[\"open_num\"] else 0,",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date string to timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9654,
      62,
      9127,
      1298,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      611,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      2073,
      657,
      11
    ],
    "start_token": 407,
    "end_token": 451,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      4731,
      284,
      41033
    ],
    "label": "ml_signal",
    "reason": "Conversion of date string to timestamp"
  },
  {
    "line": 63,
    "text": "                        \"open_count\": data[\"open_num\"] if data[\"open_num\"] else 0,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if data[\"open_num\"] is not an integer",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9654,
      62,
      9127,
      1298,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      611,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      2073,
      657,
      11
    ],
    "start_token": 451,
    "end_token": 495,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      318,
      407,
      281,
      18253
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if data[\"open_num\"] is not an integer"
  },
  {
    "line": 63,
    "text": "                        \"open_count\": data[\"open_num\"] if data[\"open_num\"] else 0,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes data[\"first_limit_up_time\"] is a valid integer",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9654,
      62,
      9127,
      1298,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      611,
      1366,
      14692,
      9654,
      62,
      22510,
      8973,
      2073,
      657,
      11
    ],
    "start_token": 495,
    "end_token": 539,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      1366,
      14692,
      11085,
      62,
      32374,
      62,
      929,
      62,
      2435,
      8973,
      318,
      257,
      4938,
      18253
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes data[\"first_limit_up_time\"] is a valid integer"
  },
  {
    "line": 64,
    "text": "                        \"first_limit_up_time\": pd.Timestamp.fromtimestamp(int(data[\"first_limit_up_time\"])),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes data[\"last_limit_up_time\"] is a valid integer",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      11085,
      62,
      32374,
      62,
      929,
      62,
      2435,
      1298,
      279,
      67,
      13,
      14967,
      27823,
      13,
      6738,
      16514,
      27823,
      7,
      600,
      7,
      7890,
      14692,
      11085,
      62,
      32374,
      62,
      929,
      62,
      2435,
      8973,
      36911
    ],
    "start_token": 539,
    "end_token": 594,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      1366,
      14692,
      12957,
      62,
      32374,
      62,
      929,
      62,
      2435,
      8973,
      318,
      257,
      4938,
      18253
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes data[\"last_limit_up_time\"] is a valid integer"
  },
  {
    "line": 70,
    "text": "                        \"change_pct\": data[\"change_rate\"] / 100,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by 100 assumes data[\"change_rate\"] is a valid number",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3803,
      62,
      79,
      310,
      1298,
      1366,
      14692,
      3803,
      62,
      4873,
      8973,
      1220,
      1802,
      11
    ],
    "start_token": 594,
    "end_token": 632,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      1802,
      18533,
      1366,
      14692,
      3803,
      62,
      4873,
      8973,
      318,
      257,
      4938,
      1271
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by 100 assumes data[\"change_rate\"] is a valid number"
  },
  {
    "line": 72,
    "text": "                        \"reason\": data[\"reason_type\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by 100 assumes data[\"turnover_rate\"] is a valid number",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      41181,
      1298,
      1366,
      14692,
      41181,
      62,
      4906,
      33116
    ],
    "start_token": 632,
    "end_token": 664,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      1802,
      18533,
      1366,
      14692,
      15344,
      2502,
      62,
      4873,
      8973,
      318,
      257,
      4938,
      1271
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by 100 assumes data[\"turnover_rate\"] is a valid number"
  },
  {
    "line": 76,
    "text": "                    records.append(record)",
    "annotation": "\ud83e\udde0 ML Signal: Function call to process high_days data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4406,
      13,
      33295,
      7,
      22105,
      8
    ],
    "start_token": 664,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      1429,
      1029,
      62,
      12545,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function call to process high_days data"
  },
  {
    "line": 79,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\ud83e\udde0 ML Signal: Appending processed record to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 689,
    "end_token": 720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      13686,
      1700,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending processed record to a list"
  },
  {
    "line": 80,
    "text": "                    df=df,",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame from a list of records",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      7568,
      11
    ],
    "start_token": 720,
    "end_token": 743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      422,
      257,
      1351,
      286,
      4406
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame from a list of records"
  },
  {
    "line": 83,
    "text": "                    drop_duplicates=True,",
    "annotation": "\ud83e\udde0 ML Signal: Storing DataFrame to a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      646,
      489,
      16856,
      28,
      17821,
      11
    ],
    "start_token": 743,
    "end_token": 770,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      6060,
      19778,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Storing DataFrame to a database"
  },
  {
    "line": 88,
    "text": "    entity_provider = \"em\"",
    "annotation": "\u2705 Best Practice: Explicitly setting force_update to ensure data consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      368,
      1
    ],
    "start_token": 770,
    "end_token": 781,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      2700,
      62,
      19119,
      284,
      4155,
      1366,
      15794
    ],
    "label": "best_practice",
    "reason": "Explicitly setting force_update to ensure data consistency"
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\u2705 Best Practice: Dropping duplicates to maintain data integrity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 781,
    "end_token": 781,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      14184,
      16856,
      284,
      5529,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Dropping duplicates to maintain data integrity"
  },
  {
    "line": 73,
    "text": "                        \"high_days\": data[\"high_days\"],",
    "annotation": "\u2705 Best Practice: Use of class attributes for configuration and metadata",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8929,
      62,
      12545,
      1298,
      1366,
      14692,
      8929,
      62,
      12545,
      33116
    ],
    "start_token": 781,
    "end_token": 815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      290,
      20150
    ],
    "label": "best_practice",
    "reason": "Use of class attributes for configuration and metadata"
  },
  {
    "line": 75,
    "text": "                    }",
    "annotation": "\u2705 Best Practice: Use of class attributes for configuration and metadata",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 815,
    "end_token": 835,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      290,
      20150
    ],
    "label": "best_practice",
    "reason": "Use of class attributes for configuration and metadata"
  },
  {
    "line": 77,
    "text": "                df = pd.DataFrame.from_records(records)",
    "annotation": "\u2705 Best Practice: Use of class attributes for configuration and metadata",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      8344,
      3669,
      8
    ],
    "start_token": 835,
    "end_token": 866,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      290,
      20150
    ],
    "label": "best_practice",
    "reason": "Use of class attributes for configuration and metadata"
  },
  {
    "line": 79,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\u2705 Best Practice: Use of class attributes for configuration and metadata",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 866,
    "end_token": 897,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      290,
      20150
    ],
    "label": "best_practice",
    "reason": "Use of class attributes for configuration and metadata"
  },
  {
    "line": 78,
    "text": "                df_to_db(",
    "annotation": "\ud83e\udde0 ML Signal: Method initializes entities, indicating a setup or configuration pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7
    ],
    "start_token": 897,
    "end_token": 918,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      4238,
      4340,
      12066,
      11,
      12739,
      257,
      9058,
      393,
      8398,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method initializes entities, indicating a setup or configuration pattern"
  },
  {
    "line": 79,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\u2705 Best Practice: Use of a method to initialize class attributes improves readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 918,
    "end_token": 949,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2446,
      284,
      41216,
      1398,
      12608,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of a method to initialize class attributes improves readability and maintainability"
  },
  {
    "line": 80,
    "text": "                    df=df,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a list to store entities suggests a collection or aggregation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      7568,
      11
    ],
    "start_token": 949,
    "end_token": 972,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1351,
      284,
      3650,
      12066,
      5644,
      257,
      4947,
      393,
      46500,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of a list to store entities suggests a collection or aggregation pattern"
  },
  {
    "line": 83,
    "text": "                    drop_duplicates=True,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded stock ID may lead to inflexibility or errors if the ID changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      646,
      489,
      16856,
      28,
      17821,
      11
    ],
    "start_token": 972,
    "end_token": 999,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      4283,
      4522,
      743,
      1085,
      284,
      1167,
      2588,
      2247,
      393,
      8563,
      611,
      262,
      4522,
      2458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded stock ID may lead to inflexibility or errors if the ID changes"
  },
  {
    "line": 79,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the 'entity_item' parameter for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 999,
    "end_token": 1030,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      705,
      26858,
      62,
      9186,
      6,
      11507,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the 'entity_item' parameter for better readability and maintainability."
  },
  {
    "line": 80,
    "text": "                    df=df,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a query method to fetch data from a database.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      7568,
      11
    ],
    "start_token": 1030,
    "end_token": 1053,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      12405,
      2446,
      284,
      21207,
      1366,
      422,
      257,
      6831,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a query method to fetch data from a database."
  },
  {
    "line": 84,
    "text": "                )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'latest_infos' is not validated for expected structure or content.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1053,
    "end_token": 1069,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      42861,
      62,
      10745,
      418,
      6,
      318,
      407,
      31031,
      329,
      2938,
      4645,
      393,
      2695,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'latest_infos' is not validated for expected structure or content."
  },
  {
    "line": 89,
    "text": "    entity_schema = Stock",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a date manipulation function to calculate a past date.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      10500
    ],
    "start_token": 1069,
    "end_token": 1078,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      3128,
      17512,
      2163,
      284,
      15284,
      257,
      1613,
      3128,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a date manipulation function to calculate a past date."
  },
  {
    "line": 91,
    "text": "    provider = \"jqka\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas to generate a date range.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      73,
      80,
      4914,
      1
    ],
    "start_token": 1078,
    "end_token": 1088,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      284,
      7716,
      257,
      3128,
      2837,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas to generate a date range."
  },
  {
    "line": 89,
    "text": "    entity_schema = Stock",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over timestamps to process data for each date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      10500
    ],
    "start_token": 1088,
    "end_token": 1097,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4628,
      395,
      9430,
      284,
      1429,
      1366,
      329,
      1123,
      3128
    ],
    "label": "ml_signal",
    "reason": "Iterating over timestamps to process data for each date"
  },
  {
    "line": 91,
    "text": "    provider = \"jqka\"",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of timestamp to string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      73,
      80,
      4914,
      1
    ],
    "start_token": 1097,
    "end_token": 1107,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      41033,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of timestamp to string format"
  },
  {
    "line": 93,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging information with dynamic content",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1107,
    "end_token": 1107,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging information with dynamic content"
  },
  {
    "line": 95,
    "text": "        # fake entity to for trigger run",
    "annotation": "\ud83e\udde0 ML Signal: API call to fetch data for a specific date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8390,
      9312,
      284,
      329,
      7616,
      1057
    ],
    "start_token": 1107,
    "end_token": 1121,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      284,
      21207,
      1366,
      329,
      257,
      2176,
      3128
    ],
    "label": "ml_signal",
    "reason": "API call to fetch data for a specific date"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing an empty list before appending records",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1121,
    "end_token": 1121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      281,
      6565,
      1351,
      878,
      598,
      1571,
      4406
    ],
    "label": "best_practice",
    "reason": "Initializing an empty list before appending records"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Enumerating over API response data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1121,
    "end_token": 1121,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2039,
      6975,
      803,
      625,
      7824,
      2882,
      1366
    ],
    "label": "ml_signal",
    "reason": "Enumerating over API response data"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to entity ID",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1121,
    "end_token": 1121,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      9312,
      4522
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to entity ID"
  },
  {
    "line": 109,
    "text": "    def record(self, entity, start, end, size, timestamps):",
    "annotation": "\u2705 Best Practice: Using dictionary comprehension for record creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1700,
      7,
      944,
      11,
      9312,
      11,
      923,
      11,
      886,
      11,
      2546,
      11,
      4628,
      395,
      9430,
      2599
    ],
    "start_token": 1121,
    "end_token": 1141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      22155,
      35915,
      329,
      1700,
      6282
    ],
    "label": "best_practice",
    "reason": "Using dictionary comprehension for record creation"
  },
  {
    "line": 109,
    "text": "    def record(self, entity, start, end, size, timestamps):",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date string to timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1700,
      7,
      944,
      11,
      9312,
      11,
      923,
      11,
      886,
      11,
      2546,
      11,
      4628,
      395,
      9430,
      2599
    ],
    "start_token": 1141,
    "end_token": 1161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      4731,
      284,
      41033
    ],
    "label": "ml_signal",
    "reason": "Conversion of date string to timestamp"
  },
  {
    "line": 115,
    "text": "                records = []",
    "annotation": "\u2705 Best Practice: Explicit conversion of percentage values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4406,
      796,
      17635
    ],
    "start_token": 1161,
    "end_token": 1179,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      11315,
      286,
      5873,
      3815
    ],
    "label": "best_practice",
    "reason": "Explicit conversion of percentage values"
  },
  {
    "line": 119,
    "text": "                        \"id\": \"{}_{}\".format(entity_id, the_date),",
    "annotation": "\ud83e\udde0 ML Signal: Appending processed record to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      312,
      1298,
      45144,
      92,
      23330,
      92,
      1911,
      18982,
      7,
      26858,
      62,
      312,
      11,
      262,
      62,
      4475,
      828
    ],
    "start_token": 1179,
    "end_token": 1220,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      13686,
      1700,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending processed record to a list"
  },
  {
    "line": 121,
    "text": "                        \"timestamp\": to_pd_timestamp(the_date),",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame from records",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      16514,
      27823,
      1298,
      284,
      62,
      30094,
      62,
      16514,
      27823,
      7,
      1169,
      62,
      4475,
      828
    ],
    "start_token": 1220,
    "end_token": 1258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      422,
      4406
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame from records"
  },
  {
    "line": 123,
    "text": "                        \"name\": data[\"name\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of SQL injection if data_schema or provider are user-controlled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      1366,
      14692,
      3672,
      33116
    ],
    "start_token": 1258,
    "end_token": 1288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      16363,
      16954,
      611,
      1366,
      62,
      15952,
      2611,
      393,
      10131,
      389,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of SQL injection if data_schema or provider are user-controlled"
  },
  {
    "line": 128,
    "text": "                        \"turnover_rate\": data[\"turnover_rate\"] / 100,",
    "annotation": "\u2705 Best Practice: Enforcing data update and duplicate handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      15344,
      2502,
      62,
      4873,
      1298,
      1366,
      14692,
      15344,
      2502,
      62,
      4873,
      8973,
      1220,
      1802,
      11
    ],
    "start_token": 1288,
    "end_token": 1327,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      18766,
      1366,
      4296,
      290,
      23418,
      9041
    ],
    "label": "best_practice",
    "reason": "Enforcing data update and duplicate handling"
  },
  {
    "line": 118,
    "text": "                    record = {",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return values for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1700,
      796,
      1391
    ],
    "start_token": 1327,
    "end_token": 1349,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      3815,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return values for better readability and maintainability."
  },
  {
    "line": 120,
    "text": "                        \"entity_id\": entity_id,",
    "annotation": "\u2705 Best Practice: Initialize variables before using them in a loop.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      26858,
      62,
      312,
      1298,
      9312,
      62,
      312,
      11
    ],
    "start_token": 1349,
    "end_token": 1381,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      878,
      1262,
      606,
      287,
      257,
      9052,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize variables before using them in a loop."
  },
  {
    "line": 123,
    "text": "                        \"name\": data[\"name\"],",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to calculate aggregate values.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      1366,
      14692,
      3672,
      33116
    ],
    "start_token": 1381,
    "end_token": 1411,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      15284,
      19406,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to calculate aggregate values."
  },
  {
    "line": 125,
    "text": "                        \"is_again_limit\": data[\"is_again_limit\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'height' key exists in every dictionary item, which may lead to KeyError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      271,
      62,
      17776,
      62,
      32374,
      1298,
      1366,
      14692,
      271,
      62,
      17776,
      62,
      32374,
      33116
    ],
    "start_token": 1411,
    "end_token": 1449,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      17015,
      6,
      1994,
      7160,
      287,
      790,
      22155,
      2378,
      11,
      543,
      743,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'height' key exists in every dictionary item, which may lead to KeyError."
  },
  {
    "line": 128,
    "text": "                        \"turnover_rate\": data[\"turnover_rate\"] / 100,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'height' and 'number' keys exist in every dictionary item, which may lead to KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      15344,
      2502,
      62,
      4873,
      1298,
      1366,
      14692,
      15344,
      2502,
      62,
      4873,
      8973,
      1220,
      1802,
      11
    ],
    "start_token": 1449,
    "end_token": 1488,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      17015,
      6,
      290,
      705,
      17618,
      6,
      8251,
      2152,
      287,
      790,
      22155,
      2378,
      11,
      543,
      743,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'height' and 'number' keys exist in every dictionary item, which may lead to KeyError."
  },
  {
    "line": 130,
    "text": "                    records.append(record)",
    "annotation": "\u2705 Best Practice: Returning multiple values as a tuple.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4406,
      13,
      33295,
      7,
      22105,
      8
    ],
    "start_token": 1488,
    "end_token": 1513,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      3294,
      3815,
      355,
      257,
      46545,
      13
    ],
    "label": "best_practice",
    "reason": "Returning multiple values as a tuple."
  },
  {
    "line": 127,
    "text": "                        \"change_pct\": data[\"change_rate\"] / 100,",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating a pattern of extending functionality",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3803,
      62,
      79,
      310,
      1298,
      1366,
      14692,
      3803,
      62,
      4873,
      8973,
      1220,
      1802,
      11
    ],
    "start_token": 1513,
    "end_token": 1551,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating a pattern of extending functionality"
  },
  {
    "line": 129,
    "text": "                    }",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1551,
    "end_token": 1571,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 131,
    "text": "                df = pd.DataFrame.from_records(records)",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      8344,
      3669,
      8
    ],
    "start_token": 1571,
    "end_token": 1602,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 133,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 1602,
    "end_token": 1633,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 134,
    "text": "                    df=df,",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      7568,
      11
    ],
    "start_token": 1633,
    "end_token": 1656,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 131,
    "text": "                df = pd.DataFrame.from_records(records)",
    "annotation": "\u2705 Best Practice: Method name 'init_entities' suggests initialization, which is clear and descriptive.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      13,
      6738,
      62,
      8344,
      3669,
      7,
      8344,
      3669,
      8
    ],
    "start_token": 1656,
    "end_token": 1687,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      705,
      15003,
      62,
      298,
      871,
      6,
      5644,
      37588,
      11,
      543,
      318,
      1598,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Method name 'init_entities' suggests initialization, which is clear and descriptive."
  },
  {
    "line": 133,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a list to store entities, indicating a collection of items.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 1687,
    "end_token": 1718,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1351,
      284,
      3650,
      12066,
      11,
      12739,
      257,
      4947,
      286,
      3709,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a list to store entities, indicating a collection of items."
  },
  {
    "line": 134,
    "text": "                    df=df,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a Stock object with a specific id, indicating a pattern of object creation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      7568,
      11
    ],
    "start_token": 1718,
    "end_token": 1741,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      10500,
      2134,
      351,
      257,
      2176,
      4686,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      6282,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a Stock object with a specific id, indicating a pattern of object creation."
  },
  {
    "line": 133,
    "text": "                    data_schema=self.data_schema,",
    "annotation": "\u2705 Best Practice: Type hinting for the return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      11
    ],
    "start_token": 1741,
    "end_token": 1772,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return type improves code readability and maintainability."
  },
  {
    "line": 134,
    "text": "                    df=df,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a query method to retrieve data from a database.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      28,
      7568,
      11
    ],
    "start_token": 1772,
    "end_token": 1795,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      12405,
      2446,
      284,
      19818,
      1366,
      422,
      257,
      6831,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a query method to retrieve data from a database."
  },
  {
    "line": 137,
    "text": "                    drop_duplicates=True,",
    "annotation": "\ud83e\udde0 ML Signal: Use of provider and ordering parameters in a query.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      646,
      489,
      16856,
      28,
      17821,
      11
    ],
    "start_token": 1795,
    "end_token": 1822,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10131,
      290,
      16216,
      10007,
      287,
      257,
      12405,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of provider and ordering parameters in a query."
  },
  {
    "line": 140,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking for conditions before proceeding with logic is a good practice.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1822,
    "end_token": 1822,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      3403,
      878,
      18788,
      351,
      9156,
      318,
      257,
      922,
      3357,
      13
    ],
    "label": "best_practice",
    "reason": "Checking for conditions before proceeding with logic is a good practice."
  },
  {
    "line": 142,
    "text": "    max_height = 0",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the timestamp attribute of the latest information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3509,
      62,
      17015,
      796,
      657
    ],
    "start_token": 1822,
    "end_token": 1830,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      41033,
      11688,
      286,
      262,
      3452,
      1321,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing the timestamp attribute of the latest information."
  },
  {
    "line": 145,
    "text": "        if max_height < item[\"height\"]:",
    "annotation": "\u2705 Best Practice: Using a utility function to calculate a date based on an interval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3509,
      62,
      17015,
      1279,
      2378,
      14692,
      17015,
      1,
      5974
    ],
    "start_token": 1830,
    "end_token": 1847,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      10361,
      2163,
      284,
      15284,
      257,
      3128,
      1912,
      319,
      281,
      16654,
      13
    ],
    "label": "best_practice",
    "reason": "Using a utility function to calculate a date based on an interval."
  },
  {
    "line": 147,
    "text": "        power = power + item[\"height\"] * item[\"number\"]",
    "annotation": "\u2705 Best Practice: Using pandas date_range for generating a list of dates is efficient and readable.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1176,
      796,
      1176,
      1343,
      2378,
      14692,
      17015,
      8973,
      1635,
      2378,
      14692,
      17618,
      8973
    ],
    "start_token": 1847,
    "end_token": 1867,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      19798,
      292,
      3128,
      62,
      9521,
      329,
      15453,
      257,
      1351,
      286,
      9667,
      318,
      6942,
      290,
      31744,
      13
    ],
    "label": "best_practice",
    "reason": "Using pandas date_range for generating a list of dates is efficient and readable."
  },
  {
    "line": 143,
    "text": "    power = 0",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over timestamps to process data for each date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1176,
      796,
      657
    ],
    "start_token": 1867,
    "end_token": 1873,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4628,
      395,
      9430,
      284,
      1429,
      1366,
      329,
      1123,
      3128
    ],
    "label": "ml_signal",
    "reason": "Iterating over timestamps to process data for each date"
  },
  {
    "line": 145,
    "text": "        if max_height < item[\"height\"]:",
    "annotation": "\u2705 Best Practice: Convert timestamp to string format for logging and API calls",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3509,
      62,
      17015,
      1279,
      2378,
      14692,
      17015,
      1,
      5974
    ],
    "start_token": 1873,
    "end_token": 1890,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      41033,
      284,
      4731,
      5794,
      329,
      18931,
      290,
      7824,
      3848
    ],
    "label": "best_practice",
    "reason": "Convert timestamp to string format for logging and API calls"
  },
  {
    "line": 147,
    "text": "        power = power + item[\"height\"] * item[\"number\"]",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about the recording process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1176,
      796,
      1176,
      1343,
      2378,
      14692,
      17015,
      8973,
      1635,
      2378,
      14692,
      17618,
      8973
    ],
    "start_token": 1890,
    "end_token": 1910,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      262,
      8296,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging information about the recording process"
  },
  {
    "line": 149,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Fetching limit stats for a specific date",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1910,
    "end_token": 1910,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      4179,
      9756,
      329,
      257,
      2176,
      3128
    ],
    "label": "ml_signal",
    "reason": "Fetching limit stats for a specific date"
  },
  {
    "line": 151,
    "text": "class JqkaEmotionRecorder(TimestampsDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Fetching continuous limit up data for a specific date",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      4914,
      10161,
      9650,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 1910,
    "end_token": 1926,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      12948,
      4179,
      510,
      1366,
      329,
      257,
      2176,
      3128
    ],
    "label": "ml_signal",
    "reason": "Fetching continuous limit up data for a specific date"
  },
  {
    "line": 151,
    "text": "class JqkaEmotionRecorder(TimestampsDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Calculating power and max height from continuous limit up data",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      4914,
      10161,
      9650,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 1926,
    "end_token": 1942,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      1176,
      290,
      3509,
      6001,
      422,
      12948,
      4179,
      510,
      1366
    ],
    "label": "ml_signal",
    "reason": "Calculating power and max height from continuous limit up data"
  },
  {
    "line": 151,
    "text": "class JqkaEmotionRecorder(TimestampsDataRecorder):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if limit_stats is None or has unexpected structure",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      4914,
      10161,
      9650,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 1942,
    "end_token": 1958,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      4179,
      62,
      34242,
      318,
      6045,
      393,
      468,
      10059,
      4645
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if limit_stats is None or has unexpected structure"
  },
  {
    "line": 151,
    "text": "class JqkaEmotionRecorder(TimestampsDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded entity_id for stock data",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      4914,
      10161,
      9650,
      6690,
      2875,
      7,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 1958,
    "end_token": 1974,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      9312,
      62,
      312,
      329,
      4283,
      1366
    ],
    "label": "ml_signal",
    "reason": "Hardcoded entity_id for stock data"
  },
  {
    "line": 164,
    "text": "            provider=self.provider, order=Emotion.timestamp.desc(), limit=1, return_type=\"domain\"",
    "annotation": "\ud83e\udde0 ML Signal: Creating a record dictionary with financial statistics",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11,
      1502,
      28,
      10161,
      9650,
      13,
      16514,
      27823,
      13,
      20147,
      22784,
      4179,
      28,
      16,
      11,
      1441,
      62,
      4906,
      2625,
      27830,
      1
    ],
    "start_token": 1974,
    "end_token": 2012,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      1700,
      22155,
      351,
      3176,
      7869
    ],
    "label": "ml_signal",
    "reason": "Creating a record dictionary with financial statistics"
  },
  {
    "line": 164,
    "text": "            provider=self.provider, order=Emotion.timestamp.desc(), limit=1, return_type=\"domain\"",
    "annotation": "\u2705 Best Practice: Convert date string to pandas timestamp for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11,
      1502,
      28,
      10161,
      9650,
      13,
      16514,
      27823,
      13,
      20147,
      22784,
      4179,
      28,
      16,
      11,
      1441,
      62,
      4906,
      2625,
      27830,
      1
    ],
    "start_token": 2012,
    "end_token": 2050,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3128,
      4731,
      284,
      19798,
      292,
      41033,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert date string to pandas timestamp for consistency"
  },
  {
    "line": 174,
    "text": "        for timestamp in timestamps:",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame from the record for database insertion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      41033,
      287,
      4628,
      395,
      9430,
      25
    ],
    "start_token": 2050,
    "end_token": 2064,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      422,
      262,
      1700,
      329,
      6831,
      36075
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame from the record for database insertion"
  },
  {
    "line": 174,
    "text": "        for timestamp in timestamps:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure df_to_db handles SQL injection and data validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      41033,
      287,
      4628,
      395,
      9430,
      25
    ],
    "start_token": 2064,
    "end_token": 2078,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      47764,
      62,
      1462,
      62,
      9945,
      17105,
      16363,
      16954,
      290,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure df_to_db handles SQL injection and data validation"
  },
  {
    "line": 174,
    "text": "        for timestamp in timestamps:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure record_data method handles input validation and error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      41033,
      287,
      4628,
      395,
      9430,
      25
    ],
    "start_token": 2078,
    "end_token": 2092,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      1700,
      62,
      7890,
      2446,
      17105,
      5128,
      21201,
      290,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure record_data method handles input validation and error handling"
  },
  {
    "line": 174,
    "text": "        for timestamp in timestamps:",
    "annotation": "\ud83e\udde0 ML Signal: Example of calling a method with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      41033,
      287,
      4628,
      395,
      9430,
      25
    ],
    "start_token": 2092,
    "end_token": 2106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      4585,
      257,
      2446,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Example of calling a method with specific parameters"
  },
  {
    "line": 174,
    "text": "        for timestamp in timestamps:",
    "annotation": "\ud83e\udde0 ML Signal: Defining module exports for specific recorder classes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      41033,
      287,
      4628,
      395,
      9430,
      25
    ],
    "start_token": 2106,
    "end_token": 2120,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2896,
      3191,
      8265,
      15319,
      329,
      2176,
      38156,
      6097
    ],
    "label": "ml_signal",
    "reason": "Defining module exports for specific recorder classes"
  }
]
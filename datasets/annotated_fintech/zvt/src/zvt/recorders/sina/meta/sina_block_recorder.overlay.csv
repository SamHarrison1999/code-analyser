annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,6,best_practice,5,Grouping imports from the same package together improves readability.,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,6,best_practice,7,Grouping imports from the same package together improves readability.,,6,,[]
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,19,best_practice,9,Grouping imports from the same package together improves readability.,,6,from zvt.contract.api import df_to_db,"[6738, 1976, 36540, 13, 28484, 13, 15042, 1330, 47764, 62, 1462, 62, 9945]"
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,32,best_practice,11,Grouping imports from the same package together improves readability.,,19,"from zvt.domain import BlockStock, BlockCategory, Block","[6738, 1976, 36540, 13, 27830, 1330, 9726, 26207, 11, 9726, 27313, 11, 9726]"
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,32,best_practice,13,Grouping imports from the same package together improves readability.,,32,,[]
"üß† ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 24155, 11, 4465, 329, 4547, 1398, 28398, 444, 290, 6958]",0.5,49,ml_signal,10,"Class definition with inheritance, useful for understanding class hierarchies and relationships",,32,"from zvt.contract.recorder import Recorder, TimeSeriesDataRecorder","[6738, 1976, 36540, 13, 28484, 13, 8344, 2875, 1330, 3311, 2875, 11, 3862, 27996, 6601, 6690, 2875]"
"üß† ML Signal: Class attribute indicating a constant value, useful for understanding class-specific configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 12739, 257, 6937, 1988, 11, 4465, 329, 4547, 1398, 12, 11423, 25412]",1.0,65,ml_signal,12,"Class attribute indicating a constant value, useful for understanding class-specific configurations",,49,from zvt.utils.time_utils import now_pd_timestamp,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 783, 62, 30094, 62, 16514, 27823]"
"üß† ML Signal: Class attribute indicating a schema, useful for understanding data structure expectations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 12739, 257, 32815, 11, 4465, 329, 4547, 1366, 4645, 9027]",1.0,65,ml_signal,13,"Class attribute indicating a schema, useful for understanding data structure expectations",,65,,[]
"üß† ML Signal: Mapping of categories to URLs, useful for understanding data source configurations","[8582, 100, 254, 10373, 26484, 25, 337, 5912, 286, 9376, 284, 32336, 11, 4465, 329, 4547, 1366, 2723, 25412]",0.5,74,ml_signal,17,"Mapping of categories to URLs, useful for understanding data source configurations",,65,    data_schema = Block,"[220, 220, 220, 1366, 62, 15952, 2611, 796, 9726]"
"üß† ML Signal: Enum usage, useful for understanding categorical data handling","[8582, 100, 254, 10373, 26484, 25, 2039, 388, 8748, 11, 4465, 329, 4547, 4253, 12409, 1366, 9041]",0.5,74,ml_signal,18,"Enum usage, useful for understanding categorical data handling",,74,,[]
"‚ö†Ô∏è SAST Risk (Low): Hardcoded URL, potential for misuse if URLs change or are insecure","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 11, 2785, 329, 29169, 611, 32336, 1487, 393, 389, 31955]",0.5,84,sast_risk,20,"Hardcoded URL, potential for misuse if URLs change or are insecure",Low,74,    category_map_url = {,"[220, 220, 220, 6536, 62, 8899, 62, 6371, 796, 1391]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for network request failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2581, 15536]",1.0,118,sast_risk,19,No error handling for network request failures,Medium,84,    # Áî®‰∫éÊäìÂèñË°å‰∏ö/Ê¶ÇÂøµ/Âú∞ÂüüÂàóË°®,"[220, 220, 220, 1303, 13328, 242, 101, 12859, 236, 162, 232, 241, 20998, 244, 26193, 234, 10310, 248, 14, 162, 99, 224, 33232, 113, 14, 28839, 108, 161, 253, 253, 26344, 245, 26193, 101]"
‚úÖ Best Practice: Set encoding explicitly to ensure correct text decoding,"[26486, 227, 6705, 19939, 25, 5345, 21004, 11777, 284, 4155, 3376, 2420, 39938]",0.5,160,best_practice,21,Set encoding explicitly to ensure correct text decoding,,118,"        BlockCategory.industry: ""http://vip.stock.finance.sina.com.cn/q/view/newSinaHy.php"",","[220, 220, 220, 220, 220, 220, 220, 9726, 27313, 13, 23213, 563, 25, 366, 4023, 1378, 85, 541, 13, 13578, 13, 69, 14149, 13, 82, 1437, 13, 785, 13, 31522, 14, 80, 14, 1177, 14, 3605, 50, 1437, 21217, 13, 10121, 1600]"
"‚ö†Ô∏è SAST Risk (High): Potential for ValueError if ""{"" or ""}"" not found in string","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 32480, 329, 11052, 12331, 611, 366, 4895, 393, 366, 36786, 407, 1043, 287, 4731]",1.0,164,sast_risk,24,"Potential for ValueError if ""{"" or ""}"" not found in string",High,160,    },"[220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for JSON decoding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 19449, 39938]",1.0,172,sast_risk,26,No error handling for JSON decoding,Medium,164,    def run(self):,"[220, 220, 220, 825, 1057, 7, 944, 2599]"
üß† ML Signal: Pattern of extracting and processing data from JSON,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 37895, 290, 7587, 1366, 422, 19449]",0.5,194,ml_signal,28,Pattern of extracting and processing data from JSON,,172,"        for category, url in self.category_map_url.items():","[220, 220, 220, 220, 220, 220, 220, 329, 6536, 11, 19016, 287, 2116, 13, 22872, 62, 8899, 62, 6371, 13, 23814, 33529]"
üß† ML Signal: Pattern of constructing unique identifiers,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30580, 3748, 42814]",0.5,216,ml_signal,28,Pattern of constructing unique identifiers,,194,"        for category, url in self.category_map_url.items():","[220, 220, 220, 220, 220, 220, 220, 329, 6536, 11, 19016, 287, 2116, 13, 22872, 62, 8899, 62, 6371, 13, 23814, 33529]"
üß† ML Signal: Pattern of converting list of dicts to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 1351, 286, 8633, 82, 284, 6060, 19778]",0.5,246,ml_signal,46,Pattern of converting list of dicts to DataFrame,,216,"                        ""exchange"": ""cn"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 366, 31522, 1600]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for database operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 6831, 4560]",1.0,274,sast_risk,48,No error handling for database operations,Medium,246,"                        ""name"": name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 1438, 11]"
‚úÖ Best Practice: Use logging for tracking execution flow,"[26486, 227, 6705, 19939, 25, 5765, 18931, 329, 9646, 9706, 5202]",0.5,294,best_practice,50,Use logging for tracking execution flow,,274,                    },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
"üß† ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 24155, 11, 4465, 329, 4547, 1398, 28398, 444, 290, 6958]",1.0,324,ml_signal,43,"Class definition with inheritance, useful for understanding class hierarchies and relationships",,294,"                        ""id"": entity_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 9312, 62, 312, 11]"
"üß† ML Signal: Class attribute definition, useful for understanding default values and configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 3815, 290, 25412]",1.0,355,ml_signal,45,"Class attribute definition, useful for understanding default values and configurations",,324,"                        ""entity_type"": ""block"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 26858, 62, 4906, 1298, 366, 9967, 1600]"
"üß† ML Signal: Class attribute definition, useful for understanding default values and configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 3815, 290, 25412]",1.0,383,ml_signal,47,"Class attribute definition, useful for understanding default values and configurations",,355,"                        ""code"": code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 2438, 11]"
"üß† ML Signal: Class attribute definition, useful for understanding default values and configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 3815, 290, 25412]",1.0,413,ml_signal,49,"Class attribute definition, useful for understanding default values and configurations",,383,"                        ""category"": category.value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 22872, 1298, 6536, 13, 8367, 11]"
"üß† ML Signal: Class attribute definition, useful for understanding default values and configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 3815, 290, 25412]",1.0,429,ml_signal,51,"Class attribute definition, useful for understanding default values and configurations",,413,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded URL, potential for misuse if not validated or sanitized","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 11, 2785, 329, 29169, 611, 407, 31031, 393, 5336, 36951]",0.5,461,sast_risk,53,"Hardcoded URL, potential for misuse if not validated or sanitized",Low,429,                df = pd.DataFrame.from_records(the_list),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 1169, 62, 4868, 8]"
"üß† ML Signal: Class attribute definition, useful for understanding default values and configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 3815, 290, 25412]",1.0,511,ml_signal,54,"Class attribute definition, useful for understanding default values and configurations",,461,"                df_to_db(data_schema=self.data_schema, df=df, provider=self.provider, force_update=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 1462, 62, 9945, 7, 7890, 62, 15952, 2611, 28, 944, 13, 7890, 62, 15952, 2611, 11, 47764, 28, 7568, 11, 10131, 28, 944, 13, 15234, 1304, 11, 2700, 62, 19119, 28, 17821, 8]"
üß† ML Signal: Iterating over a fixed range of pages,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 5969, 2837, 286, 5468]",0.5,527,ml_signal,51,Iterating over a fixed range of pages,,511,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Medium): No timeout specified in requests.get,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 287, 7007, 13, 1136]",0.5,559,sast_risk,53,No timeout specified in requests.get,Medium,527,                df = pd.DataFrame.from_records(the_list),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 13, 6738, 62, 8344, 3669, 7, 1169, 62, 4868, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for demjson3.decode to raise an exception if resp.text is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1357, 17752, 18, 13, 12501, 1098, 284, 5298, 281, 6631, 611, 1217, 13, 5239, 318, 407, 4938, 19449]",0.5,559,sast_risk,57,Potential for demjson3.decode to raise an exception if resp.text is not valid JSON,Low,559,,[]
üß† ML Signal: Conversion of stock code to stock ID,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 4283, 4522]",0.5,568,ml_signal,61,Conversion of stock code to stock ID,,559,    entity_schema = Block,"[220, 220, 220, 9312, 62, 15952, 2611, 796, 9726]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if data_schema or provider are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 1366, 62, 15952, 2611, 393, 10131, 389, 2836, 12, 14401]",0.5,593,sast_risk,81,Potential SQL injection risk if data_schema or provider are user-controlled,Low,568,                    the_list.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 62, 4868, 13, 33295, 7]"
üß† ML Signal: Logging successful recording of data,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4388, 8296, 286, 1366]",0.5,638,ml_signal,83,Logging successful recording of data,,593,"                            ""id"": ""{}_{}"".format(block_id, stock_id),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 312, 1298, 45144, 92, 23330, 92, 1911, 18982, 7, 9967, 62, 312, 11, 4283, 62, 312, 828]"
‚ö†Ô∏è SAST Risk (Low): Broad exception catch without specific handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9765, 6631, 4929, 1231, 2176, 9041]",0.5,674,sast_risk,86,Broad exception catch without specific handling,Low,638,"                            ""exchange"": entity.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 9312, 13, 1069, 3803, 11]"
üß† ML Signal: Use of sleep to manage request rate,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3993, 284, 6687, 2581, 2494]",0.5,710,ml_signal,86,Use of sleep to manage request rate,,674,"                            ""exchange"": entity.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 9312, 13, 1069, 3803, 11]"
üß† ML Signal: Running main function for data recording,"[8582, 100, 254, 10373, 26484, 25, 18162, 1388, 2163, 329, 1366, 8296]",0.5,746,ml_signal,86,Running main function for data recording,,710,"                            ""exchange"": entity.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 9312, 13, 1069, 3803, 11]"
üß† ML Signal: Instantiation and execution of a specific recorder with predefined codes,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 290, 9706, 286, 257, 2176, 38156, 351, 2747, 18156, 12416]",0.5,782,ml_signal,86,Instantiation and execution of a specific recorder with predefined codes,,746,"                            ""exchange"": entity.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 9312, 13, 1069, 3803, 11]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,818,best_practice,86,Use of __all__ to define public API of the module,,782,"                            ""exchange"": entity.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 9312, 13, 1069, 3803, 11]"

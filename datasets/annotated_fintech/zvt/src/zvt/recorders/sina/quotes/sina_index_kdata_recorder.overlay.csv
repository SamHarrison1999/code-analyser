annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"üß† ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 24155, 11, 4465, 329, 4547, 1398, 28398, 444, 290, 6958]",1.0,12,ml_signal,9,"Class definition with inheritance, useful for understanding class hierarchies and relationships",,0,"from zvt.contract import IntervalLevel, AdjustType","[6738, 1976, 36540, 13, 28484, 1330, 4225, 2100, 4971, 11, 20292, 6030]"
"üß† ML Signal: Class attribute definition, useful for understanding default configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 25412]",1.0,24,ml_signal,11,"Class attribute definition, useful for understanding default configurations",,12,"from zvt.domain import Index, IndexKdataCommon","[6738, 1976, 36540, 13, 27830, 1330, 12901, 11, 12901, 42, 7890, 17227]"
"üß† ML Signal: Class attribute definition, useful for understanding default configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 25412]",1.0,24,ml_signal,13,"Class attribute definition, useful for understanding default configurations",,24,,[]
"üß† ML Signal: Class attribute definition, useful for understanding default configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 25412]",1.0,40,ml_signal,15,"Class attribute definition, useful for understanding default configurations",,24,class ChinaIndexDayKdataRecorder(FixedCycleDataRecorder):,"[4871, 2807, 15732, 12393, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
"üß† ML Signal: Class attribute definition, useful for understanding default configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 25412]",1.0,56,ml_signal,15,"Class attribute definition, useful for understanding default configurations",,40,class ChinaIndexDayKdataRecorder(FixedCycleDataRecorder):,"[4871, 2807, 15732, 12393, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded URL, potential for misuse if not validated or sanitized","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 11, 2785, 329, 29169, 611, 407, 31031, 393, 5336, 36951]",1.0,72,sast_risk,15,"Hardcoded URL, potential for misuse if not validated or sanitized",Low,56,class ChinaIndexDayKdataRecorder(FixedCycleDataRecorder):,"[4871, 2807, 15732, 12393, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
"üß† ML Signal: URL pattern, useful for understanding data source endpoints","[8582, 100, 254, 10373, 26484, 25, 10289, 3912, 11, 4465, 329, 4547, 1366, 2723, 886, 13033]",1.0,88,ml_signal,15,"URL pattern, useful for understanding data source endpoints",,72,class ChinaIndexDayKdataRecorder(FixedCycleDataRecorder):,"[4871, 2807, 15732, 12393, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
‚úÖ Best Practice: Convert level to IntervalLevel to ensure type consistency,"[26486, 227, 6705, 19939, 25, 38240, 1241, 284, 4225, 2100, 4971, 284, 4155, 2099, 15794]",1.0,105,best_practice,36,Convert level to IntervalLevel to ensure type consistency,,88,"        fix_duplicate_way=""ignore"",","[220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 2625, 46430, 1600]"
‚úÖ Best Practice: Set default adjust_type for clarity and consistency,"[26486, 227, 6705, 19939, 25, 5345, 4277, 4532, 62, 4906, 329, 16287, 290, 15794]",1.0,119,best_practice,38,Set default adjust_type for clarity and consistency,,105,"        end_timestamp=None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 14202, 11]"
‚úÖ Best Practice: Use of lower() for consistent entity type naming,"[26486, 227, 6705, 19939, 25, 5765, 286, 2793, 3419, 329, 6414, 9312, 2099, 19264]",0.5,137,best_practice,40,Use of lower() for consistent entity type naming,,119,"        kdata_use_begin_time=False,","[220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 28, 25101, 11]"
‚úÖ Best Practice: Use of a function to get schema promotes modularity,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2163, 284, 651, 32815, 21068, 26507, 414]",0.5,155,best_practice,40,Use of a function to get schema promotes modularity,,137,"        kdata_use_begin_time=False,","[220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 28, 25101, 11]"
‚úÖ Best Practice: Use of super() to ensure proper inheritance,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 4155, 1774, 24155]",0.5,173,best_practice,40,Use of super() to ensure proper inheritance,,155,"        kdata_use_begin_time=False,","[220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 28, 25101, 11]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and return value of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 1441, 1988, 286, 262, 2163]",1.0,188,best_practice,60,Consider adding a docstring to describe the purpose and return value of the function,,173,"            ignore_failed,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 47904, 11]"
‚úÖ Best Practice: Returning a dictionary directly is clear and concise,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 3264, 318, 1598, 290, 35327]",1.0,207,best_practice,62,Returning a dictionary directly is clear and concise,,188,"            fix_duplicate_way,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 11]"
üß† ML Signal: Method signature and parameter usage pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 11507, 8748, 3912]",0.5,226,ml_signal,62,Method signature and parameter usage pattern,,207,"            fix_duplicate_way,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 11]"
üß† ML Signal: Usage of external function with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 351, 2176, 10007]",0.5,242,ml_signal,64,Usage of external function with specific parameters,,226,"            end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 11]"
"‚ö†Ô∏è SAST Risk (Low): Potential information exposure if entity.id or original_data[""timestamp""] contains sensitive data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 7111, 611, 9312, 13, 312, 393, 2656, 62, 7890, 14692, 16514, 27823, 8973, 4909, 8564, 1366]",0.5,255,sast_risk,65,"Potential information exposure if entity.id or original_data[""timestamp""] contains sensitive data",Low,242,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe external URL request without timeout,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 7097, 10289, 2581, 1231, 26827]",1.0,289,sast_risk,75,Potentially unsafe external URL request without timeout,Medium,255,"        return generate_kdata_id(entity.id, timestamp=original_data[""timestamp""], level=self.level)","[220, 220, 220, 220, 220, 220, 220, 1441, 7716, 62, 74, 7890, 62, 312, 7, 26858, 13, 312, 11, 41033, 28, 14986, 62, 7890, 14692, 16514, 27823, 33116, 1241, 28, 944, 13, 5715, 8]"
‚ö†Ô∏è SAST Risk (Low): Potentially unsafe HTML parsing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 21596, 11532, 32096]",0.5,308,sast_risk,78,Potentially unsafe HTML parsing,Low,289,        the_quarters = get_year_quarters(start),"[220, 220, 220, 220, 220, 220, 220, 262, 62, 8230, 796, 651, 62, 1941, 62, 8230, 7, 9688, 8]"
‚úÖ Best Practice: Consider using a backoff strategy instead of fixed sleep,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 736, 2364, 4811, 2427, 286, 5969, 3993]",0.5,308,best_practice,83,Consider using a backoff strategy instead of fixed sleep,,308,,[]
‚úÖ Best Practice: Consider using a backoff strategy instead of fixed sleep,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 736, 2364, 4811, 2427, 286, 5969, 3993]",0.5,308,best_practice,87,Consider using a backoff strategy instead of fixed sleep,,308,,[]
üß† ML Signal: Usage of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 1366, 17512]",0.5,337,ml_signal,95,Usage of pandas for data manipulation,,308,                dfs = pd.read_html(response.text),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 9501, 796, 279, 67, 13, 961, 62, 6494, 7, 26209, 13, 5239, 8]"
üß† ML Signal: Usage of pandas for data concatenation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 1366, 1673, 36686, 341]",0.5,360,ml_signal,98,Usage of pandas for data concatenation,,337,                time.sleep(10.0),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 940, 13, 15, 8]"
‚úÖ Best Practice: Consider using a backoff strategy instead of fixed sleep,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 736, 2364, 4811, 2427, 286, 5969, 3993]",0.5,380,best_practice,101,Consider using a backoff strategy instead of fixed sleep,,360,            if len(dfs) < 5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 642, 25]"
üß† ML Signal: Usage of pandas for data sorting,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 1366, 29407]",0.5,400,ml_signal,101,Usage of pandas for data sorting,,380,            if len(dfs) < 5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 642, 25]"
üß† ML Signal: Conversion of DataFrame to dictionary,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 284, 22155]",1.0,420,ml_signal,101,Conversion of DataFrame to dictionary,,400,            if len(dfs) < 5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 642, 25]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,440,best_practice,101,Use of __all__ to define public API of the module,,420,            if len(dfs) < 5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 642, 25]"
üß† ML Signal: Pattern for running a script directly,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 2491, 257, 4226, 3264]",0.5,460,ml_signal,101,Pattern for running a script directly,,440,            if len(dfs) < 5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 642, 25]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,480,best_practice,101,Use of __all__ to define public API of the module,,460,            if len(dfs) < 5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 7568, 82, 8, 1279, 642, 25]"

[
  {
    "line": 11,
    "text": "from zvt.domain import Etf, Etf1dKdata",
    "annotation": "\ud83e\udde0 ML Signal: Class definition for a specific data recorder, indicating a pattern of inheritance and specialization",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      17906,
      69,
      11,
      17906,
      69,
      16,
      67,
      42,
      7890
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      329,
      257,
      2176,
      1366,
      38156,
      11,
      12739,
      257,
      3912,
      286,
      24155,
      290,
      43135
    ],
    "label": "ml_signal",
    "reason": "Class definition for a specific data recorder, indicating a pattern of inheritance and specialization"
  },
  {
    "line": 13,
    "text": "from zvt.utils.time_utils import to_time_str",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating the source of the entity data",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536
    ],
    "start_token": 15,
    "end_token": 30,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      262,
      2723,
      286,
      262,
      9312,
      1366
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating the source of the entity data"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating the schema used for the entity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 30,
    "end_token": 30,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      262,
      32815,
      973,
      329,
      262,
      9312
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating the schema used for the entity"
  },
  {
    "line": 16,
    "text": "class ChinaETFDayKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating the data provider",
    "confidence": 0.5,
    "tokens": [
      4871,
      2807,
      22274,
      12393,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 30,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      262,
      1366,
      10131
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating the data provider"
  },
  {
    "line": 20,
    "text": "    provider = \"sina\"",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute indicating the schema used for the data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      82,
      1437,
      1
    ],
    "start_token": 46,
    "end_token": 55,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      12739,
      262,
      32815,
      973,
      329,
      262,
      1366
    ],
    "label": "ml_signal",
    "reason": "Class attribute indicating the schema used for the data"
  },
  {
    "line": 21,
    "text": "    data_schema = Etf1dKdata",
    "annotation": "\ud83e\udde0 ML Signal: URL pattern for accessing data, indicating a pattern of constructing URLs for API requests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      17906,
      69,
      16,
      67,
      42,
      7890
    ],
    "start_token": 55,
    "end_token": 69,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      3912,
      329,
      22534,
      1366,
      11,
      12739,
      257,
      3912,
      286,
      30580,
      32336,
      329,
      7824,
      7007
    ],
    "label": "ml_signal",
    "reason": "URL pattern for accessing data, indicating a pattern of constructing URLs for API requests"
  },
  {
    "line": 20,
    "text": "    provider = \"sina\"",
    "annotation": "\u2705 Best Practice: Method should have a docstring to describe its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      82,
      1437,
      1
    ],
    "start_token": 69,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring to describe its purpose"
  },
  {
    "line": 22,
    "text": "    url = (",
    "annotation": "\u2705 Best Practice: Consider returning a more descriptive data structure if applicable",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      357
    ],
    "start_token": 78,
    "end_token": 84,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8024,
      257,
      517,
      35644,
      1366,
      4645,
      611,
      9723
    ],
    "label": "best_practice",
    "reason": "Consider returning a more descriptive data structure if applicable"
  },
  {
    "line": 22,
    "text": "    url = (",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for generating domain IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      19016,
      796,
      357
    ],
    "start_token": 84,
    "end_token": 90,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      15453,
      7386,
      32373
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for generating domain IDs"
  },
  {
    "line": 24,
    "text": "        \"symbol={}{}&scale=240&&datalen={}&ma=no\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function call with specific parameters to generate an ID",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1837,
      23650,
      34758,
      18477,
      92,
      5,
      9888,
      28,
      16102,
      25226,
      67,
      10254,
      268,
      34758,
      92,
      5,
      2611,
      28,
      3919,
      1
    ],
    "start_token": 90,
    "end_token": 118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      869,
      351,
      2176,
      10007,
      284,
      7716,
      281,
      4522
    ],
    "label": "ml_signal",
    "reason": "Usage of a function call with specific parameters to generate an ID"
  },
  {
    "line": 25,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `generate_kdata_id` is not properly validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 118,
    "end_token": 122,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      8612,
      378,
      62,
      74,
      7890,
      62,
      312,
      63,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `generate_kdata_id` is not properly validated or sanitized"
  },
  {
    "line": 25,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of named parameters improves readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 122,
    "end_token": 126,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of named parameters improves readability and maintainability"
  },
  {
    "line": 25,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Function processes financial data for an entity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 126,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      7767,
      3176,
      1366,
      329,
      281,
      9312
    ],
    "label": "ml_signal",
    "reason": "Function processes financial data for an entity"
  },
  {
    "line": 34,
    "text": "        kdatas = get_kdata(",
    "annotation": "\u2705 Best Practice: Check if kdatas is not None before accessing its length",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      19608,
      292,
      796,
      651,
      62,
      74,
      7890,
      7
    ],
    "start_token": 130,
    "end_token": 146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      479,
      19608,
      292,
      318,
      407,
      6045,
      878,
      22534,
      663,
      4129
    ],
    "label": "best_practice",
    "reason": "Check if kdatas is not None before accessing its length"
  },
  {
    "line": 38,
    "text": "            return_type=\"domain\",",
    "annotation": "\ud83e\udde0 ML Signal: Fetching cumulative net value for a date range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4906,
      2625,
      27830,
      1600
    ],
    "start_token": 146,
    "end_token": 163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      23818,
      2010,
      1988,
      329,
      257,
      3128,
      2837
    ],
    "label": "ml_signal",
    "reason": "Fetching cumulative net value for a date range"
  },
  {
    "line": 40,
    "text": "            filters=[Etf1dKdata.cumulative_net_value.is_(None)],",
    "annotation": "\u2705 Best Practice: Check if df is not None and not empty before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      36,
      27110,
      16,
      67,
      42,
      7890,
      13,
      36340,
      13628,
      62,
      3262,
      62,
      8367,
      13,
      271,
      41052,
      14202,
      8,
      4357
    ],
    "start_token": 163,
    "end_token": 195,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      47764,
      318,
      407,
      6045,
      290,
      407,
      6565,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check if df is not None and not empty before processing"
  },
  {
    "line": 43,
    "text": "        if kdatas and len(kdatas) > 0:",
    "annotation": "\u2705 Best Practice: Check if timestamp exists in df index before accessing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      479,
      19608,
      292,
      290,
      18896,
      7,
      74,
      19608,
      292,
      8,
      1875,
      657,
      25
    ],
    "start_token": 195,
    "end_token": 216,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      41033,
      7160,
      287,
      47764,
      6376,
      878,
      22534
    ],
    "label": "best_practice",
    "reason": "Check if timestamp exists in df index before accessing"
  },
  {
    "line": 48,
    "text": "            df = self.fetch_cumulative_net_value(entity, start, end)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Committing to the session without exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      69,
      7569,
      62,
      36340,
      13628,
      62,
      3262,
      62,
      8367,
      7,
      26858,
      11,
      923,
      11,
      886,
      8
    ],
    "start_token": 216,
    "end_token": 247,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1520,
      2535,
      284,
      262,
      6246,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Committing to the session without exception handling"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about the update process",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 247,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      262,
      4296,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging information about the update process"
  },
  {
    "line": 48,
    "text": "            df = self.fetch_cumulative_net_value(entity, start, end)",
    "annotation": "\u2705 Best Practice: Initialize variables outside the loop to avoid reinitialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      69,
      7569,
      62,
      36340,
      13628,
      62,
      3262,
      62,
      8367,
      7,
      26858,
      11,
      923,
      11,
      886,
      8
    ],
    "start_token": 247,
    "end_token": 278,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      2354,
      262,
      9052,
      284,
      3368,
      6865,
      6847,
      1634
    ],
    "label": "best_practice",
    "reason": "Initialize variables outside the loop to avoid reinitialization"
  },
  {
    "line": 52,
    "text": "                    if kdata.timestamp in df.index:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for URL injection if security_item.code is not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      479,
      7890,
      13,
      16514,
      27823,
      287,
      47764,
      13,
      9630,
      25
    ],
    "start_token": 278,
    "end_token": 308,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      10289,
      16954,
      611,
      2324,
      62,
      9186,
      13,
      8189,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for URL injection if security_item.code is not validated"
  },
  {
    "line": 54,
    "text": "                        kdata.change_pct = df.loc[kdata.timestamp, \"JZZZL\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network request failures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      7890,
      13,
      3803,
      62,
      79,
      310,
      796,
      47764,
      13,
      17946,
      58,
      74,
      7890,
      13,
      16514,
      27823,
      11,
      366,
      41,
      30148,
      57,
      43,
      8973
    ],
    "start_token": 308,
    "end_token": 355,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581,
      15536
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network request failures"
  },
  {
    "line": 56,
    "text": "                self.logger.info(f\"{entity.code} - {entity.name}\u7d2f\u8ba1\u51c0\u503c\u66f4\u65b0\u5b8c\u6210...\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for JSON decoding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      90,
      26858,
      13,
      8189,
      92,
      532,
      1391,
      26858,
      13,
      3672,
      92,
      163,
      112,
      107,
      164,
      106,
      94,
      49035,
      222,
      161,
      222,
      120,
      162,
      249,
      112,
      23877,
      108,
      22522,
      234,
      22755,
      238,
      9313,
      8
    ],
    "start_token": 355,
    "end_token": 412,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      19449,
      39938
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for JSON decoding"
  },
  {
    "line": 58,
    "text": "    def fetch_cumulative_net_value(self, security_item, start, end) -> pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external API and data fetching patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      21207,
      62,
      36340,
      13628,
      62,
      3262,
      62,
      8367,
      7,
      944,
      11,
      2324,
      62,
      9186,
      11,
      923,
      11,
      886,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 412,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      7824,
      290,
      1366,
      21207,
      278,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of external API and data fetching patterns"
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\u2705 Best Practice: Convert data types explicitly for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 442,
    "end_token": 442,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      1366,
      3858,
      11777,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert data types explicitly for consistency"
  },
  {
    "line": 66,
    "text": "            url = query_url.format(security_item.code, page, to_time_str(start), to_time_str(end))",
    "annotation": "\u2705 Best Practice: Handle missing data to prevent errors in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      12405,
      62,
      6371,
      13,
      18982,
      7,
      12961,
      62,
      9186,
      13,
      8189,
      11,
      2443,
      11,
      284,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      828,
      284,
      62,
      2435,
      62,
      2536,
      7,
      437,
      4008
    ],
    "start_token": 442,
    "end_token": 485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33141,
      4814,
      1366,
      284,
      2948,
      8563,
      287,
      1366,
      7587
    ],
    "label": "best_practice",
    "reason": "Handle missing data to prevent errors in data processing"
  },
  {
    "line": 68,
    "text": "            response = requests.get(url, headers=EASTMONEY_ETF_NET_VALUE_HEADER)",
    "annotation": "\u2705 Best Practice: Set index for DataFrame for efficient data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      24697,
      28,
      36,
      11262,
      44,
      48399,
      62,
      22274,
      62,
      12884,
      62,
      39488,
      62,
      37682,
      1137,
      8
    ],
    "start_token": 485,
    "end_token": 520,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      6376,
      329,
      6060,
      19778,
      329,
      6942,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Set index for DataFrame for efficient data manipulation"
  },
  {
    "line": 70,
    "text": "            response_df = pd.DataFrame(response_json[\"Data\"][\"LSJZList\"])",
    "annotation": "\u2705 Best Practice: Use pd.concat to efficiently append DataFrames",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      26209,
      62,
      17752,
      14692,
      6601,
      1,
      7131,
      1,
      6561,
      41,
      57,
      8053,
      8973,
      8
    ],
    "start_token": 520,
    "end_token": 555,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      284,
      18306,
      24443,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Use pd.concat to efficiently append DataFrames"
  },
  {
    "line": 73,
    "text": "            if response_df.empty:",
    "annotation": "\ud83e\udde0 ML Signal: Custom sleep function usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2882,
      62,
      7568,
      13,
      28920,
      25
    ],
    "start_token": 555,
    "end_token": 573,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      3993,
      2163,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Custom sleep function usage pattern"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on 'entity', 'start', 'end', 'size', and 'timestamps' inputs",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 573,
    "end_token": 573,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      705,
      26858,
      3256,
      705,
      9688,
      3256,
      705,
      437,
      3256,
      705,
      7857,
      3256,
      290,
      705,
      16514,
      395,
      9430,
      6,
      17311
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on 'entity', 'start', 'end', 'size', and 'timestamps' inputs"
  },
  {
    "line": 73,
    "text": "            if response_df.empty:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL formatting with unvalidated 'security_item' could lead to SSRF",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2882,
      62,
      7568,
      13,
      28920,
      25
    ],
    "start_token": 573,
    "end_token": 591,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      33313,
      351,
      555,
      12102,
      515,
      705,
      12961,
      62,
      9186,
      6,
      714,
      1085,
      284,
      6723,
      32754
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL formatting with unvalidated 'security_item' could lead to SSRF"
  },
  {
    "line": 75,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for network request",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 591,
    "end_token": 591,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2581
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for network request"
  },
  {
    "line": 77,
    "text": "            response_df[\"JZZZL\"] = pd.to_numeric(response_df[\"JZZZL\"], errors=\"coerce\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No error handling for JSON decoding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2882,
      62,
      7568,
      14692,
      41,
      30148,
      57,
      43,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      77,
      39223,
      7,
      26209,
      62,
      7568,
      14692,
      41,
      30148,
      57,
      43,
      33116,
      8563,
      2625,
      1073,
      263,
      344,
      4943
    ],
    "start_token": 591,
    "end_token": 635,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      4049,
      9041,
      329,
      19449,
      39938
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No error handling for JSON decoding"
  },
  {
    "line": 81,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of pandas for data manipulation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      329,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of pandas for data manipulation"
  },
  {
    "line": 84,
    "text": "",
    "annotation": "\u2705 Best Practice: Converting string to datetime for 'timestamp'",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      4731,
      284,
      4818,
      8079,
      329,
      705,
      16514,
      27823,
      6
    ],
    "label": "best_practice",
    "reason": "Converting string to datetime for 'timestamp'"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning data as a list of dictionaries",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1366,
      355,
      257,
      1351,
      286,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Returning data as a list of dictionaries"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation or error handling for logging initialization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      393,
      4049,
      9041,
      329,
      18931,
      37588
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation or error handling for logging initialization"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of running a main function in a script",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      2491,
      257,
      1388,
      2163,
      287,
      257,
      4226
    ],
    "label": "ml_signal",
    "reason": "Pattern of running a main function in a script"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 635,
    "end_token": 635,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
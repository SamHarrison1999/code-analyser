[
  {
    "line": 2,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates usage patterns"
  },
  {
    "line": 3,
    "text": "from zvt.contract.recorder import TimeSeriesDataRecorder",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the imported function is from a trusted source to avoid executing malicious code",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      8344,
      2875,
      1330,
      3862,
      27996,
      6601,
      6690,
      2875
    ],
    "start_token": 0,
    "end_token": 14,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      17392,
      2163,
      318,
      422,
      257,
      13467,
      2723,
      284,
      3368,
      23710,
      17412,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the imported function is from a trusted source to avoid executing malicious code"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 14,
    "end_token": 14,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates usage patterns"
  },
  {
    "line": 7,
    "text": "# \u805a\u5bbd\u7f16\u7801",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the imported class is from a trusted source to avoid executing malicious code",
    "confidence": 0.5,
    "tokens": [
      2,
      5525,
      223,
      248,
      22522,
      121,
      163,
      120,
      244,
      163,
      254,
      223
    ],
    "start_token": 14,
    "end_token": 26,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      17392,
      1398,
      318,
      422,
      257,
      13467,
      2723,
      284,
      3368,
      23710,
      17412,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the imported class is from a trusted source to avoid executing malicious code"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 26,
    "end_token": 26,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates usage patterns"
  },
  {
    "line": 11,
    "text": "code_map_jq = {\"000001\": \"XSHG\", \"399106\": \"XSHE\"}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the imported classes are from a trusted source to avoid executing malicious code",
    "confidence": 0.5,
    "tokens": [
      8189,
      62,
      8899,
      62,
      73,
      80,
      796,
      19779,
      2388,
      486,
      1298,
      366,
      55,
      9693,
      38,
      1600,
      366,
      28771,
      15801,
      1298,
      366,
      55,
      9693,
      36,
      20662
    ],
    "start_token": 26,
    "end_token": 51,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      17392,
      6097,
      389,
      422,
      257,
      13467,
      2723,
      284,
      3368,
      23710,
      17412,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the imported classes are from a trusted source to avoid executing malicious code"
  },
  {
    "line": 11,
    "text": "code_map_jq = {\"000001\": \"XSHG\", \"399106\": \"XSHE\"}",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific utility functions indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      8189,
      62,
      8899,
      62,
      73,
      80,
      796,
      19779,
      2388,
      486,
      1298,
      366,
      55,
      9693,
      38,
      1600,
      366,
      28771,
      15801,
      1298,
      366,
      55,
      9693,
      36,
      20662
    ],
    "start_token": 51,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      10361,
      5499,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific utility functions indicates usage patterns"
  },
  {
    "line": 11,
    "text": "code_map_jq = {\"000001\": \"XSHG\", \"399106\": \"XSHE\"}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the imported function is from a trusted source to avoid executing malicious code",
    "confidence": 0.5,
    "tokens": [
      8189,
      62,
      8899,
      62,
      73,
      80,
      796,
      19779,
      2388,
      486,
      1298,
      366,
      55,
      9693,
      38,
      1600,
      366,
      28771,
      15801,
      1298,
      366,
      55,
      9693,
      36,
      20662
    ],
    "start_token": 76,
    "end_token": 101,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      17392,
      2163,
      318,
      422,
      257,
      13467,
      2723,
      284,
      3368,
      23710,
      17412,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the imported function is from a trusted source to avoid executing malicious code"
  },
  {
    "line": 11,
    "text": "code_map_jq = {\"000001\": \"XSHG\", \"399106\": \"XSHE\"}",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a dictionary to map codes indicates a pattern of data transformation or lookup",
    "confidence": 0.5,
    "tokens": [
      8189,
      62,
      8899,
      62,
      73,
      80,
      796,
      19779,
      2388,
      486,
      1298,
      366,
      55,
      9693,
      38,
      1600,
      366,
      28771,
      15801,
      1298,
      366,
      55,
      9693,
      36,
      20662
    ],
    "start_token": 101,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      22155,
      284,
      3975,
      12416,
      9217,
      257,
      3912,
      286,
      1366,
      13389,
      393,
      35847
    ],
    "label": "ml_signal",
    "reason": "Usage of a dictionary to map codes indicates a pattern of data transformation or lookup"
  },
  {
    "line": 19,
    "text": "    data_schema = MarginTradingSummary",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      11899,
      259,
      2898,
      4980,
      22093
    ],
    "start_token": 126,
    "end_token": 139,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability and maintainability"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality for time series data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3862,
      27996,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244,
      329,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality for time series data."
  },
  {
    "line": 8,
    "text": "# XSHG-\u4e0a\u6d77\u8bc1\u5238\u4ea4\u6613\u6240",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes to define metadata for the recorder.",
    "confidence": 0.5,
    "tokens": [
      2,
      1395,
      9693,
      38,
      12,
      41468,
      38184,
      115,
      46237,
      223,
      26344,
      116,
      12859,
      97,
      23626,
      241,
      33699,
      222
    ],
    "start_token": 139,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      284,
      8160,
      20150,
      329,
      262,
      38156,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes to define metadata for the recorder."
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific schema (Index) for data structure.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 157,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      32815,
      357,
      15732,
      8,
      329,
      1366,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Association with a specific schema (Index) for data structure."
  },
  {
    "line": 11,
    "text": "code_map_jq = {\"000001\": \"XSHG\", \"399106\": \"XSHE\"}",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific data provider indicates a pattern of data source selection.",
    "confidence": 0.5,
    "tokens": [
      8189,
      62,
      8899,
      62,
      73,
      80,
      796,
      19779,
      2388,
      486,
      1298,
      366,
      55,
      9693,
      38,
      1600,
      366,
      28771,
      15801,
      1298,
      366,
      55,
      9693,
      36,
      20662
    ],
    "start_token": 157,
    "end_token": 182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      1366,
      10131,
      9217,
      257,
      3912,
      286,
      1366,
      2723,
      6356,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a specific data provider indicates a pattern of data source selection."
  },
  {
    "line": 11,
    "text": "code_map_jq = {\"000001\": \"XSHG\", \"399106\": \"XSHE\"}",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific data schema (MarginTradingSummary) for data structure.",
    "confidence": 0.5,
    "tokens": [
      8189,
      62,
      8899,
      62,
      73,
      80,
      796,
      19779,
      2388,
      486,
      1298,
      366,
      55,
      9693,
      38,
      1600,
      366,
      28771,
      15801,
      1298,
      366,
      55,
      9693,
      36,
      20662
    ],
    "start_token": 182,
    "end_token": 207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      1366,
      32815,
      357,
      24428,
      259,
      2898,
      4980,
      22093,
      8,
      329,
      1366,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Association with a specific data schema (MarginTradingSummary) for data structure."
  },
  {
    "line": 26,
    "text": "        entity_id=None,",
    "annotation": "\u2705 Best Practice: Use of a list to store multiple codes for better organization and potential scalability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      312,
      28,
      14202,
      11
    ],
    "start_token": 207,
    "end_token": 220,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      1351,
      284,
      3650,
      3294,
      12416,
      329,
      1365,
      4009,
      290,
      2785,
      16578,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of a list to store multiple codes for better organization and potential scalability"
  },
  {
    "line": 27,
    "text": "        entity_ids=None,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a superclass constructor with multiple parameters indicates inheritance and polymorphism",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      14202,
      11
    ],
    "start_token": 220,
    "end_token": 233,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2208,
      4871,
      23772,
      351,
      3294,
      10007,
      9217,
      24155,
      290,
      34196,
      1042
    ],
    "label": "ml_signal",
    "reason": "Use of a superclass constructor with multiple parameters indicates inheritance and polymorphism"
  },
  {
    "line": 27,
    "text": "        entity_ids=None,",
    "annotation": "\u2705 Best Practice: Explicitly passing parameters to the superclass constructor improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      14202,
      11
    ],
    "start_token": 233,
    "end_token": 246,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      6427,
      10007,
      284,
      262,
      2208,
      4871,
      23772,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly passing parameters to the superclass constructor improves code readability and maintainability"
  },
  {
    "line": 43,
    "text": "            entity_ids,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a dictionary to map entity codes to jq_code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      11
    ],
    "start_token": 246,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      22155,
      284,
      3975,
      9312,
      12416,
      284,
      474,
      80,
      62,
      8189
    ],
    "label": "ml_signal",
    "reason": "Usage of a dictionary to map entity codes to jq_code"
  },
  {
    "line": 44,
    "text": "            codes=codes,",
    "annotation": "\ud83e\udde0 ML Signal: Querying a database table with specific conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      28,
      40148,
      11
    ],
    "start_token": 261,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      257,
      6831,
      3084,
      351,
      2176,
      3403
    ],
    "label": "ml_signal",
    "reason": "Querying a database table with specific conditions"
  },
  {
    "line": 49,
    "text": "            fix_duplicate_way=fix_duplicate_way,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if conditions are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      28,
      13049,
      62,
      646,
      489,
      5344,
      62,
      1014,
      11
    ],
    "start_token": 276,
    "end_token": 303,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      3403,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if conditions are not properly sanitized"
  },
  {
    "line": 52,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 303,
    "end_token": 311,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 52,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame to a list of dictionaries",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 311,
    "end_token": 319,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      284,
      257,
      1351,
      286,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame to a list of dictionaries"
  },
  {
    "line": 68,
    "text": "                \"provider\": self.provider,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the length of results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      15234,
      1304,
      1298,
      2116,
      13,
      15234,
      1304,
      11
    ],
    "start_token": 319,
    "end_token": 343,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4129,
      286,
      2482
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the length of results"
  },
  {
    "line": 68,
    "text": "                \"provider\": self.provider,",
    "annotation": "\u2705 Best Practice: Use a main guard to ensure code is only executed when the script is run directly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      15234,
      1304,
      1298,
      2116,
      13,
      15234,
      1304,
      11
    ],
    "start_token": 343,
    "end_token": 367,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      1388,
      4860,
      284,
      4155,
      2438,
      318,
      691,
      10945,
      618,
      262,
      4226,
      318,
      1057,
      3264
    ],
    "label": "best_practice",
    "reason": "Use a main guard to ensure code is only executed when the script is run directly"
  },
  {
    "line": 70,
    "text": "                \"name\": entity.name,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NameError if MarginTradingSummaryRecorder is not defined elsewhere",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      9312,
      13,
      3672,
      11
    ],
    "start_token": 367,
    "end_token": 389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6530,
      12331,
      611,
      11899,
      259,
      2898,
      4980,
      22093,
      6690,
      2875,
      318,
      407,
      5447,
      8057
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NameError if MarginTradingSummaryRecorder is not defined elsewhere"
  },
  {
    "line": 70,
    "text": "                \"name\": entity.name,",
    "annotation": "\ud83e\udde0 ML Signal: Indicates the entry point of the script, useful for understanding script execution flow",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      9312,
      13,
      3672,
      11
    ],
    "start_token": 389,
    "end_token": 411,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1423,
      16856,
      262,
      5726,
      966,
      286,
      262,
      4226,
      11,
      4465,
      329,
      4547,
      4226,
      9706,
      5202
    ],
    "label": "ml_signal",
    "reason": "Indicates the entry point of the script, useful for understanding script execution flow"
  },
  {
    "line": 70,
    "text": "                \"name\": entity.name,",
    "annotation": "\u2705 Best Practice: Define __all__ to explicitly declare the public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      9312,
      13,
      3672,
      11
    ],
    "start_token": 411,
    "end_token": 433,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      11593,
      439,
      834,
      284,
      11777,
      13627,
      262,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Define __all__ to explicitly declare the public API of the module"
  }
]
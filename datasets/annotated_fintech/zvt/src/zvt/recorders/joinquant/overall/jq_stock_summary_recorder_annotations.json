[
  {
    "line": 8,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Mapping of stock codes to identifiers, useful for feature extraction in ML models",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      286,
      4283,
      12416,
      284,
      42814,
      11,
      4465,
      329,
      3895,
      22236,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Mapping of stock codes to identifiers, useful for feature extraction in ML models"
  },
  {
    "line": 9,
    "text": "# \u805a\u5bbd\u7f16\u7801",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating a pattern of extending functionality",
    "confidence": 0.5,
    "tokens": [
      2,
      5525,
      223,
      248,
      22522,
      121,
      163,
      120,
      244,
      163,
      254,
      223
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating a pattern of extending functionality"
  },
  {
    "line": 11,
    "text": "# 322002\t\u4e0a\u6d77A\u80a1",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration, common in data processing classes",
    "confidence": 0.5,
    "tokens": [
      2,
      38831,
      21601,
      197,
      41468,
      38184,
      115,
      32,
      164,
      224,
      94
    ],
    "start_token": 12,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      11,
      2219,
      287,
      1366,
      7587,
      6097
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration, common in data processing classes"
  },
  {
    "line": 13,
    "text": "# 322004\t\u6df1\u5733\u5e02\u573a\t\u8be5\u5e02\u573a\u4ea4\u6613\u6240\u672a\u516c\u5e03\u6210\u4ea4\u91cf\u548c\u6210\u4ea4\u7b14\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration, common in data processing classes",
    "confidence": 0.5,
    "tokens": [
      2,
      38831,
      22914,
      197,
      162,
      115,
      109,
      28839,
      111,
      30585,
      224,
      28839,
      118,
      197,
      46237,
      98,
      30585,
      224,
      28839,
      118,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      17312,
      103,
      17739,
      105,
      30585,
      225,
      22755,
      238,
      12859,
      97,
      34932,
      237,
      161,
      240,
      234,
      22755,
      238,
      12859,
      97,
      163,
      105,
      242,
      46763,
      108
    ],
    "start_token": 23,
    "end_token": 73,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      11,
      2219,
      287,
      1366,
      7587,
      6097
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration, common in data processing classes"
  },
  {
    "line": 13,
    "text": "# 322004\t\u6df1\u5733\u5e02\u573a\t\u8be5\u5e02\u573a\u4ea4\u6613\u6240\u672a\u516c\u5e03\u6210\u4ea4\u91cf\u548c\u6210\u4ea4\u7b14\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration, common in data processing classes",
    "confidence": 0.5,
    "tokens": [
      2,
      38831,
      22914,
      197,
      162,
      115,
      109,
      28839,
      111,
      30585,
      224,
      28839,
      118,
      197,
      46237,
      98,
      30585,
      224,
      28839,
      118,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      17312,
      103,
      17739,
      105,
      30585,
      225,
      22755,
      238,
      12859,
      97,
      34932,
      237,
      161,
      240,
      234,
      22755,
      238,
      12859,
      97,
      163,
      105,
      242,
      46763,
      108
    ],
    "start_token": 73,
    "end_token": 123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      11,
      2219,
      287,
      1366,
      7587,
      6097
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration, common in data processing classes"
  },
  {
    "line": 13,
    "text": "# 322004\t\u6df1\u5733\u5e02\u573a\t\u8be5\u5e02\u573a\u4ea4\u6613\u6240\u672a\u516c\u5e03\u6210\u4ea4\u91cf\u548c\u6210\u4ea4\u7b14\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration, common in data processing classes",
    "confidence": 0.5,
    "tokens": [
      2,
      38831,
      22914,
      197,
      162,
      115,
      109,
      28839,
      111,
      30585,
      224,
      28839,
      118,
      197,
      46237,
      98,
      30585,
      224,
      28839,
      118,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      17312,
      103,
      17739,
      105,
      30585,
      225,
      22755,
      238,
      12859,
      97,
      34932,
      237,
      161,
      240,
      234,
      22755,
      238,
      12859,
      97,
      163,
      105,
      242,
      46763,
      108
    ],
    "start_token": 123,
    "end_token": 173,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398,
      11,
      2219,
      287,
      1366,
      7587,
      6097
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration, common in data processing classes"
  },
  {
    "line": 28,
    "text": "    def __init__(",
    "annotation": "\u2705 Best Practice: Use of a list to store multiple codes for better organization and readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 173,
    "end_token": 181,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      1351,
      284,
      3650,
      3294,
      12416,
      329,
      1365,
      4009,
      290,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of a list to store multiple codes for better organization and readability"
  },
  {
    "line": 29,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a superclass constructor with multiple parameters indicates a pattern for inheritance and initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 181,
    "end_token": 190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2208,
      4871,
      23772,
      351,
      3294,
      10007,
      9217,
      257,
      3912,
      329,
      24155,
      290,
      37588
    ],
    "label": "ml_signal",
    "reason": "Use of a superclass constructor with multiple parameters indicates a pattern for inheritance and initialization"
  },
  {
    "line": 44,
    "text": "        codes = [\"000001\", \"399106\", \"399001\", \"399005\", \"399006\"]",
    "annotation": "\u2705 Best Practice: Passing a predefined list of codes to the superclass for better maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      796,
      14631,
      2388,
      486,
      1600,
      366,
      28771,
      15801,
      1600,
      366,
      28771,
      8298,
      1600,
      366,
      28771,
      22544,
      1600,
      366,
      28771,
      28041,
      8973
    ],
    "start_token": 190,
    "end_token": 219,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      46389,
      257,
      2747,
      18156,
      1351,
      286,
      12416,
      284,
      262,
      2208,
      4871,
      329,
      1365,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Passing a predefined list of codes to the superclass for better maintainability"
  },
  {
    "line": 45,
    "text": "        super().__init__(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a mapping dictionary to retrieve values based on entity code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7
    ],
    "start_token": 219,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      16855,
      22155,
      284,
      19818,
      3815,
      1912,
      319,
      9312,
      2438
    ],
    "label": "ml_signal",
    "reason": "Usage of a mapping dictionary to retrieve values based on entity code"
  },
  {
    "line": 46,
    "text": "            force_update,",
    "annotation": "\ud83e\udde0 ML Signal: Querying a database table with specific conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2700,
      62,
      19119,
      11
    ],
    "start_token": 232,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      257,
      6831,
      3084,
      351,
      2176,
      3403
    ],
    "label": "ml_signal",
    "reason": "Querying a database table with specific conditions"
  },
  {
    "line": 46,
    "text": "            force_update,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL injection risk if `to_time_str(start)` is not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2700,
      62,
      19119,
      11
    ],
    "start_token": 247,
    "end_token": 262,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      4600,
      1462,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      8,
      63,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL injection risk if `to_time_str(start)` is not properly sanitized"
  },
  {
    "line": 54,
    "text": "            ignore_failed=ignore_failed,",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      47904,
      28,
      46430,
      62,
      47904,
      11
    ],
    "start_token": 262,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 54,
    "text": "            ignore_failed=ignore_failed,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame records and converting them to a list of dictionaries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      47904,
      28,
      46430,
      62,
      47904,
      11
    ],
    "start_token": 281,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      4406,
      290,
      23202,
      606,
      284,
      257,
      1351,
      286,
      48589,
      3166
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame records and converting them to a list of dictionaries"
  },
  {
    "line": 65,
    "text": "            table=\"finance.STK_EXCHANGE_TRADE_INFO\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a utility function to convert numbers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3084,
      2625,
      69,
      14149,
      13,
      2257,
      42,
      62,
      6369,
      3398,
      27746,
      62,
      5446,
      19266,
      62,
      10778,
      1600
    ],
    "start_token": 300,
    "end_token": 328,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      10361,
      2163,
      284,
      10385,
      3146
    ],
    "label": "ml_signal",
    "reason": "Usage of a utility function to convert numbers"
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the length of a list",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 328,
    "end_token": 328,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4129,
      286,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the length of a list"
  },
  {
    "line": 71,
    "text": "        json_results = []",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose of this method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33918,
      62,
      43420,
      796,
      17635
    ],
    "start_token": 328,
    "end_token": 340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      428,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose of this method."
  },
  {
    "line": 73,
    "text": "        for item in df.to_dict(orient=\"records\"):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that StockSummaryRecorder is defined before use to avoid NameError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2378,
      287,
      47764,
      13,
      1462,
      62,
      11600,
      7,
      13989,
      2625,
      8344,
      3669,
      1,
      2599
    ],
    "start_token": 340,
    "end_token": 362,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      10500,
      22093,
      6690,
      2875,
      318,
      5447,
      878,
      779,
      284,
      3368,
      6530,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that StockSummaryRecorder is defined before use to avoid NameError."
  },
  {
    "line": 73,
    "text": "        for item in df.to_dict(orient=\"records\"):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of the main guard pattern to execute code only when the script is run directly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2378,
      287,
      47764,
      13,
      1462,
      62,
      11600,
      7,
      13989,
      2625,
      8344,
      3669,
      1,
      2599
    ],
    "start_token": 362,
    "end_token": 384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      262,
      1388,
      4860,
      3912,
      284,
      12260,
      2438,
      691,
      618,
      262,
      4226,
      318,
      1057,
      3264,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of the main guard pattern to execute code only when the script is run directly."
  },
  {
    "line": 73,
    "text": "        for item in df.to_dict(orient=\"records\"):",
    "annotation": "\u2705 Best Practice: Use of __all__ to define the public interface of the module.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2378,
      287,
      47764,
      13,
      1462,
      62,
      11600,
      7,
      13989,
      2625,
      8344,
      3669,
      1,
      2599
    ],
    "start_token": 384,
    "end_token": 406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      262,
      1171,
      7071,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define the public interface of the module."
  }
]
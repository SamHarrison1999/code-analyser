annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,0,ml_signal,2,Importing specific functions from a module indicates selective usage patterns,,0,,[]
üß† ML Signal: Importing specific configurations and functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 25412, 290, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,15,ml_signal,4,Importing specific configurations and functions from a module indicates selective usage patterns,,0,"from jqdatapy.api import get_token, get_bars","[6738, 474, 80, 19608, 12826, 13, 15042, 1330, 651, 62, 30001, 11, 651, 62, 34046]"
üß† ML Signal: Inheritance from a specific base class indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2176, 2779, 1398, 9217, 257, 3912, 286, 16610, 11244]",1.0,33,ml_signal,13,Inheritance from a specific base class indicates a pattern of extending functionality,,15,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
üß† ML Signal: Hardcoded provider name could indicate a pattern of data source usage,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 10131, 1438, 714, 7603, 257, 3912, 286, 1366, 2723, 8748]",0.5,33,ml_signal,15,Hardcoded provider name could indicate a pattern of data source usage,,33,,[]
üß† ML Signal: Association with a specific schema suggests a pattern of data structure usage,"[8582, 100, 254, 10373, 26484, 25, 5396, 351, 257, 2176, 32815, 5644, 257, 3912, 286, 1366, 4645, 8748]",0.5,50,ml_signal,17,Association with a specific schema suggests a pattern of data structure usage,,33,class JqChinaStockKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 26207, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
üß† ML Signal: Repeated provider name reinforces the pattern of data source usage,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 10131, 1438, 41125, 262, 3912, 286, 1366, 2723, 8748]",0.5,67,ml_signal,17,Repeated provider name reinforces the pattern of data source usage,,50,class JqChinaStockKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 26207, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
üß† ML Signal: Use of a common data schema indicates a pattern of standardizing data formats,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2219, 1366, 32815, 9217, 257, 3912, 286, 3210, 2890, 1366, 17519]",0.5,84,ml_signal,17,Use of a common data schema indicates a pattern of standardizing data formats,,67,class JqChinaStockKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 26207, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",0.5,97,ml_signal,39,Use of default parameter values,,84,"        real_time=False,","[220, 220, 220, 220, 220, 220, 220, 1103, 62, 2435, 28, 25101, 11]"
‚úÖ Best Practice: Explicitly converting level to IntervalLevel,"[26486, 227, 6705, 19939, 25, 11884, 306, 23202, 1241, 284, 4225, 2100, 4971]",0.5,114,best_practice,40,Explicitly converting level to IntervalLevel,,97,"        fix_duplicate_way=""ignore"",","[220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 2625, 46430, 1600]"
‚úÖ Best Practice: Explicitly converting adjust_type to AdjustType,"[26486, 227, 6705, 19939, 25, 11884, 306, 23202, 4532, 62, 4906, 284, 20292, 6030]",0.5,128,best_practice,42,Explicitly converting adjust_type to AdjustType,,114,"        end_timestamp=None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 14202, 11]"
üß† ML Signal: Use of a function to get a data schema,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 651, 257, 1366, 32815]",0.5,147,ml_signal,43,Use of a function to get a data schema,,128,"        level=IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
üß† ML Signal: Use of a function to convert level to trading level,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 10385, 1241, 284, 7313, 1241]",0.5,166,ml_signal,43,Use of a function to convert level to trading level,,147,"        level=IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
üß† ML Signal: Use of super() to initialize parent class,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2208, 3419, 284, 41216, 2560, 1398]",1.0,185,ml_signal,43,Use of super() to initialize parent class,,166,"        level=IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
‚ö†Ô∏è SAST Risk (Medium): Storing sensitive information like username and password in a config,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 520, 3255, 8564, 1321, 588, 20579, 290, 9206, 287, 257, 4566]",0.5,205,sast_risk,70,Storing sensitive information like username and password in a config,Medium,185,"            kdata_use_begin_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 11]"
üß† ML Signal: Use of a function to get a token,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 651, 257, 11241]",0.5,226,ml_signal,71,Use of a function to get a token,,205,"            one_day_trading_minutes,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 11]"
‚úÖ Best Practice: Call to superclass method ensures proper initialization of inherited attributes or methods.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 37588, 286, 19552, 12608, 393, 5050, 13]",0.5,245,best_practice,66,Call to superclass method ensures proper initialization of inherited attributes or methods.,,226,"            fix_duplicate_way,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 11]"
"üß† ML Signal: Filtering entities based on a condition, indicating a pattern of data validation or cleaning.","[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 12066, 1912, 319, 257, 4006, 11, 12739, 257, 3912, 286, 1366, 21201, 393, 12724, 13]",1.0,261,ml_signal,67,"Filtering entities based on a condition, indicating a pattern of data validation or cleaning.",,245,"            start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 11]"
‚úÖ Best Practice: List comprehension is used for concise and efficient filtering of entities.,"[26486, 227, 6705, 19939, 25, 7343, 35915, 318, 973, 329, 35327, 290, 6942, 25431, 286, 12066, 13]",1.0,274,best_practice,69,List comprehension is used for concise and efficient filtering of entities.,,261,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
"üß† ML Signal: Use of conditional logic to filter entities, which can be a pattern for data processing.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 8106, 12066, 11, 543, 460, 307, 257, 3912, 329, 1366, 7587, 13]",0.5,295,ml_signal,71,"Use of conditional logic to filter entities, which can be a pattern for data processing.",,274,"            one_day_trading_minutes,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `now_pd_timestamp()` is not timezone-aware or consistent.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 2197, 62, 30094, 62, 16514, 27823, 3419, 63, 318, 407, 640, 11340, 12, 9685, 393, 6414, 13]",1.0,311,sast_risk,72,Potential risk if `now_pd_timestamp()` is not timezone-aware or consistent.,Low,295,"            return_unfinished,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 11]"
üß† ML Signal: Function definition with parameters indicating a pattern for generating domain IDs,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 15453, 7386, 32373]",1.0,331,ml_signal,70,Function definition with parameters indicating a pattern for generating domain IDs,,311,"            kdata_use_begin_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 11]"
"üß† ML Signal: Usage of a helper function to generate an ID, indicating a common pattern for ID generation","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 7716, 281, 4522, 11, 12739, 257, 2219, 3912, 329, 4522, 5270]",0.5,347,ml_signal,72,"Usage of a helper function to generate an ID, indicating a common pattern for ID generation",,331,"            return_unfinished,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 11]"
‚úÖ Best Practice: Use of descriptive parameter names improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 11507, 3891, 19575, 2438, 1100, 1799]",0.5,355,best_practice,73,Use of descriptive parameter names improves code readability,,347,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Check for division by zero to prevent runtime errors,"[26486, 227, 6705, 19939, 25, 6822, 329, 7297, 416, 6632, 284, 2948, 19124, 8563]",0.5,363,best_practice,73,Check for division by zero to prevent runtime errors,,355,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of a data retrieval function with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1366, 45069, 2163, 351, 2176, 10007]",1.0,363,ml_signal,74,Usage of a data retrieval function with specific parameters,,363,,[]
üß† ML Signal: Logging information about the process and parameters,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 262, 1429, 290, 10007]",0.5,381,ml_signal,86,Logging information about the process and parameters,,363,"    def generate_domain_id(self, entity, original_data):","[220, 220, 220, 825, 7716, 62, 27830, 62, 312, 7, 944, 11, 9312, 11, 2656, 62, 7890, 2599]"
üß† ML Signal: Pattern of adjusting financial data with a factor,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 22000, 3176, 1366, 351, 257, 5766]",0.5,407,ml_signal,89,Pattern of adjusting financial data with a factor,,381,"    def recompute_qfq(self, entity, qfq_factor, last_timestamp):","[220, 220, 220, 825, 48765, 1133, 62, 80, 69, 80, 7, 944, 11, 9312, 11, 10662, 69, 80, 62, 31412, 11, 938, 62, 16514, 27823, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if kdatas contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 479, 19608, 292, 4909, 1418, 81, 8459, 1366]",0.5,430,sast_risk,94,Potential risk if kdatas contains untrusted data,Low,407,"                entity_id=entity.id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 28, 26858, 13, 312, 11]"
‚ö†Ô∏è SAST Risk (Low): Committing changes to the database without error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1520, 2535, 2458, 284, 262, 6831, 1231, 4049, 9041]",0.5,459,sast_risk,96,Committing changes to the database without error handling,Low,430,"                order=self.data_schema.timestamp.asc(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 28, 944, 13, 7890, 62, 15952, 2611, 13, 16514, 27823, 13, 3372, 22784]"
üß† ML Signal: Use of conditional logic to determine reference date based on adjustment type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5004, 4941, 3128, 1912, 319, 15068, 2099]",0.5,481,ml_signal,93,Use of conditional logic to determine reference date based on adjustment type,,459,"                provider=self.provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 944, 13, 15234, 1304, 11]"
üß† ML Signal: Conditional logic to determine if end_timestamp is used,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5004, 611, 886, 62, 16514, 27823, 318, 973]",0.5,502,ml_signal,98,Conditional logic to determine if end_timestamp is used,,481,"                session=self.session,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6246, 28, 944, 13, 29891, 11]"
üß† ML Signal: Checking if DataFrame is not null before processing,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 6060, 19778, 318, 407, 9242, 878, 7587]",0.5,533,ml_signal,115,Checking if DataFrame is not null before processing,,502,            fq_ref_date = to_time_str(now_pd_timestamp()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 80, 62, 5420, 62, 4475, 796, 284, 62, 2435, 62, 2536, 7, 2197, 62, 30094, 62, 16514, 27823, 28955]"
‚úÖ Best Practice: Use of rename for clarity and consistency in column names,"[26486, 227, 6705, 19939, 25, 5765, 286, 36265, 329, 16287, 290, 15794, 287, 5721, 3891]",1.0,550,best_practice,118,Use of rename for clarity and consistency in column names,,533,            df = get_bars(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 651, 62, 34046, 7]"
‚úÖ Best Practice: Converting timestamp to datetime for consistency,"[26486, 227, 6705, 19939, 25, 35602, 889, 41033, 284, 4818, 8079, 329, 15794]",0.5,577,best_practice,121,Converting timestamp to datetime for consistency,,550,"                unit=self.jq_trading_level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4326, 28, 944, 13, 73, 80, 62, 2213, 4980, 62, 5715, 11]"
üß† ML Signal: Conditional logic based on adjustment type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 15068, 2099]",0.5,589,ml_signal,124,Conditional logic based on adjustment type,,577,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Checking if DataFrame is not null before processing,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 6060, 19778, 318, 407, 9242, 878, 7587]",0.5,610,ml_signal,139,Checking if DataFrame is not null before processing,,589,"            df[""entity_id""] = entity.id","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 26858, 62, 312, 8973, 796, 9312, 13, 312]"
‚ö†Ô∏è SAST Risk (Low): Potential floating-point precision issue with rounding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12462, 12, 4122, 15440, 2071, 351, 38185]",0.5,631,sast_risk,142,Potential floating-point precision issue with rounding,Low,610,"            df[""level""] = self.level.value","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 5715, 8973, 796, 2116, 13, 5715, 13, 8367]"
üß† ML Signal: Recomputing factors based on condition,"[8582, 100, 254, 10373, 26484, 25, 3311, 296, 48074, 5087, 1912, 319, 4006]",1.0,656,ml_signal,147,Recomputing factors based on condition,,631,                check_df = df.head(1),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2198, 62, 7568, 796, 47764, 13, 2256, 7, 16, 8]"
‚úÖ Best Practice: Use of string formatting for constructing IDs,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 33313, 329, 30580, 32373]",1.0,678,best_practice,141,Use of string formatting for constructing IDs,,656,"            df[""provider""] = ""joinquant""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 15234, 1304, 8973, 796, 366, 7639, 18934, 415, 1]"
üß† ML Signal: Use of DataFrame apply method for row-wise operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 4174, 2446, 329, 5752, 12, 3083, 4560]",1.0,703,ml_signal,146,Use of DataFrame apply method for row-wise operations,,678,            if self.adjust_type == AdjustType.qfq:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 23032, 62, 4906, 6624, 20292, 6030, 13, 80, 69, 80, 25]"
üß† ML Signal: Use of drop_duplicates to handle duplicate data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4268, 62, 646, 489, 16856, 284, 5412, 23418, 1366]",0.5,732,ml_signal,148,Use of drop_duplicates to handle duplicate data,,703,"                check_date = check_df[""timestamp""][0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2198, 62, 4475, 796, 2198, 62, 7568, 14692, 16514, 27823, 1, 7131, 15, 60]"
üß† ML Signal: Use of a function to save DataFrame to a database,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 3613, 6060, 19778, 284, 257, 6831]",1.0,759,ml_signal,150,Use of a function to save DataFrame to a database,,732,"                    entity_id=entity.id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9312, 62, 312, 28, 26858, 13, 312, 11]"
üß† ML Signal: Use of a main guard to execute code conditionally,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1388, 4860, 284, 12260, 2438, 4006, 453]",0.5,785,ml_signal,151,Use of a main guard to execute code conditionally,,759,"                    provider=self.provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 944, 13, 15234, 1304, 11]"
üß† ML Signal: Use of __all__ to define public API of the module,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",1.0,811,ml_signal,151,Use of __all__ to define public API of the module,,785,"                    provider=self.provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 944, 13, 15234, 1304, 11]"

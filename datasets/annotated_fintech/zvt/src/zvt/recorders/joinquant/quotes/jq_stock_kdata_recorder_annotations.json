[
  {
    "line": 2,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 4,
    "text": "from jqdatapy.api import get_token, get_bars",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific configurations and functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      474,
      80,
      19608,
      12826,
      13,
      15042,
      1330,
      651,
      62,
      30001,
      11,
      651,
      62,
      34046
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      25412,
      290,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific configurations and functions from a module indicates selective usage patterns"
  },
  {
    "line": 13,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a specific base class indicates a pattern of extending functionality",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 15,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2176,
      2779,
      1398,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a specific base class indicates a pattern of extending functionality"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded provider name could indicate a pattern of data source usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 33,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      10131,
      1438,
      714,
      7603,
      257,
      3912,
      286,
      1366,
      2723,
      8748
    ],
    "label": "ml_signal",
    "reason": "Hardcoded provider name could indicate a pattern of data source usage"
  },
  {
    "line": 17,
    "text": "class JqChinaStockKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific schema suggests a pattern of data structure usage",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 33,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      32815,
      5644,
      257,
      3912,
      286,
      1366,
      4645,
      8748
    ],
    "label": "ml_signal",
    "reason": "Association with a specific schema suggests a pattern of data structure usage"
  },
  {
    "line": 17,
    "text": "class JqChinaStockKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Repeated provider name reinforces the pattern of data source usage",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 50,
    "end_token": 67,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      10131,
      1438,
      41125,
      262,
      3912,
      286,
      1366,
      2723,
      8748
    ],
    "label": "ml_signal",
    "reason": "Repeated provider name reinforces the pattern of data source usage"
  },
  {
    "line": 17,
    "text": "class JqChinaStockKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a common data schema indicates a pattern of standardizing data formats",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 67,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2219,
      1366,
      32815,
      9217,
      257,
      3912,
      286,
      3210,
      2890,
      1366,
      17519
    ],
    "label": "ml_signal",
    "reason": "Use of a common data schema indicates a pattern of standardizing data formats"
  },
  {
    "line": 39,
    "text": "        real_time=False,",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      28,
      25101,
      11
    ],
    "start_token": 84,
    "end_token": 97,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 40,
    "text": "        fix_duplicate_way=\"ignore\",",
    "annotation": "\u2705 Best Practice: Explicitly converting level to IntervalLevel",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      2625,
      46430,
      1600
    ],
    "start_token": 97,
    "end_token": 114,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      23202,
      1241,
      284,
      4225,
      2100,
      4971
    ],
    "label": "best_practice",
    "reason": "Explicitly converting level to IntervalLevel"
  },
  {
    "line": 42,
    "text": "        end_timestamp=None,",
    "annotation": "\u2705 Best Practice: Explicitly converting adjust_type to AdjustType",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      14202,
      11
    ],
    "start_token": 114,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      23202,
      4532,
      62,
      4906,
      284,
      20292,
      6030
    ],
    "label": "best_practice",
    "reason": "Explicitly converting adjust_type to AdjustType"
  },
  {
    "line": 43,
    "text": "        level=IntervalLevel.LEVEL_1DAY,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a function to get a data schema",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11
    ],
    "start_token": 128,
    "end_token": 147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2163,
      284,
      651,
      257,
      1366,
      32815
    ],
    "label": "ml_signal",
    "reason": "Use of a function to get a data schema"
  },
  {
    "line": 43,
    "text": "        level=IntervalLevel.LEVEL_1DAY,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a function to convert level to trading level",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11
    ],
    "start_token": 147,
    "end_token": 166,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2163,
      284,
      10385,
      1241,
      284,
      7313,
      1241
    ],
    "label": "ml_signal",
    "reason": "Use of a function to convert level to trading level"
  },
  {
    "line": 43,
    "text": "        level=IntervalLevel.LEVEL_1DAY,",
    "annotation": "\ud83e\udde0 ML Signal: Use of super() to initialize parent class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      28,
      9492,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      11
    ],
    "start_token": 166,
    "end_token": 185,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      2560,
      1398
    ],
    "label": "ml_signal",
    "reason": "Use of super() to initialize parent class"
  },
  {
    "line": 70,
    "text": "            kdata_use_begin_time,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Storing sensitive information like username and password in a config",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      7890,
      62,
      1904,
      62,
      27471,
      62,
      2435,
      11
    ],
    "start_token": 185,
    "end_token": 205,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      520,
      3255,
      8564,
      1321,
      588,
      20579,
      290,
      9206,
      287,
      257,
      4566
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Storing sensitive information like username and password in a config"
  },
  {
    "line": 71,
    "text": "            one_day_trading_minutes,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a function to get a token",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      11
    ],
    "start_token": 205,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2163,
      284,
      651,
      257,
      11241
    ],
    "label": "ml_signal",
    "reason": "Use of a function to get a token"
  },
  {
    "line": 66,
    "text": "            fix_duplicate_way,",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper initialization of inherited attributes or methods.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      11
    ],
    "start_token": 226,
    "end_token": 245,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      393,
      5050,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper initialization of inherited attributes or methods."
  },
  {
    "line": 67,
    "text": "            start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Filtering entities based on a condition, indicating a pattern of data validation or cleaning.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 245,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      12066,
      1912,
      319,
      257,
      4006,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      21201,
      393,
      12724,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering entities based on a condition, indicating a pattern of data validation or cleaning."
  },
  {
    "line": 69,
    "text": "            level,",
    "annotation": "\u2705 Best Practice: List comprehension is used for concise and efficient filtering of entities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      11
    ],
    "start_token": 261,
    "end_token": 274,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      318,
      973,
      329,
      35327,
      290,
      6942,
      25431,
      286,
      12066,
      13
    ],
    "label": "best_practice",
    "reason": "List comprehension is used for concise and efficient filtering of entities."
  },
  {
    "line": 71,
    "text": "            one_day_trading_minutes,",
    "annotation": "\ud83e\udde0 ML Signal: Use of conditional logic to filter entities, which can be a pattern for data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      11
    ],
    "start_token": 274,
    "end_token": 295,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      26340,
      9156,
      284,
      8106,
      12066,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of conditional logic to filter entities, which can be a pattern for data processing."
  },
  {
    "line": 72,
    "text": "            return_unfinished,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `now_pd_timestamp()` is not timezone-aware or consistent.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      403,
      43952,
      11
    ],
    "start_token": 295,
    "end_token": 311,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      3419,
      63,
      318,
      407,
      640,
      11340,
      12,
      9685,
      393,
      6414,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `now_pd_timestamp()` is not timezone-aware or consistent."
  },
  {
    "line": 70,
    "text": "            kdata_use_begin_time,",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for generating domain IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      7890,
      62,
      1904,
      62,
      27471,
      62,
      2435,
      11
    ],
    "start_token": 311,
    "end_token": 331,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      15453,
      7386,
      32373
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for generating domain IDs"
  },
  {
    "line": 72,
    "text": "            return_unfinished,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper function to generate an ID, indicating a common pattern for ID generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      403,
      43952,
      11
    ],
    "start_token": 331,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      2163,
      284,
      7716,
      281,
      4522,
      11,
      12739,
      257,
      2219,
      3912,
      329,
      4522,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper function to generate an ID, indicating a common pattern for ID generation"
  },
  {
    "line": 73,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of descriptive parameter names improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 347,
    "end_token": 355,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      11507,
      3891,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive parameter names improves code readability"
  },
  {
    "line": 73,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Check for division by zero to prevent runtime errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 355,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      7297,
      416,
      6632,
      284,
      2948,
      19124,
      8563
    ],
    "label": "best_practice",
    "reason": "Check for division by zero to prevent runtime errors"
  },
  {
    "line": 74,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a data retrieval function with specific parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1366,
      45069,
      2163,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of a data retrieval function with specific parameters"
  },
  {
    "line": 86,
    "text": "    def generate_domain_id(self, entity, original_data):",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about the process and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7716,
      62,
      27830,
      62,
      312,
      7,
      944,
      11,
      9312,
      11,
      2656,
      62,
      7890,
      2599
    ],
    "start_token": 363,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      262,
      1429,
      290,
      10007
    ],
    "label": "ml_signal",
    "reason": "Logging information about the process and parameters"
  },
  {
    "line": 89,
    "text": "    def recompute_qfq(self, entity, qfq_factor, last_timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of adjusting financial data with a factor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      48765,
      1133,
      62,
      80,
      69,
      80,
      7,
      944,
      11,
      9312,
      11,
      10662,
      69,
      80,
      62,
      31412,
      11,
      938,
      62,
      16514,
      27823,
      2599
    ],
    "start_token": 381,
    "end_token": 407,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      22000,
      3176,
      1366,
      351,
      257,
      5766
    ],
    "label": "ml_signal",
    "reason": "Pattern of adjusting financial data with a factor"
  },
  {
    "line": 94,
    "text": "                entity_id=entity.id,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if kdatas contains untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      312,
      28,
      26858,
      13,
      312,
      11
    ],
    "start_token": 407,
    "end_token": 430,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      479,
      19608,
      292,
      4909,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if kdatas contains untrusted data"
  },
  {
    "line": 96,
    "text": "                order=self.data_schema.timestamp.asc(),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Committing changes to the database without error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      28,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      13,
      16514,
      27823,
      13,
      3372,
      22784
    ],
    "start_token": 430,
    "end_token": 459,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1520,
      2535,
      2458,
      284,
      262,
      6831,
      1231,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Committing changes to the database without error handling"
  },
  {
    "line": 93,
    "text": "                provider=self.provider,",
    "annotation": "\ud83e\udde0 ML Signal: Use of conditional logic to determine reference date based on adjustment type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11
    ],
    "start_token": 459,
    "end_token": 481,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      26340,
      9156,
      284,
      5004,
      4941,
      3128,
      1912,
      319,
      15068,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of conditional logic to determine reference date based on adjustment type"
  },
  {
    "line": 98,
    "text": "                session=self.session,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine if end_timestamp is used",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      28,
      944,
      13,
      29891,
      11
    ],
    "start_token": 481,
    "end_token": 502,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      611,
      886,
      62,
      16514,
      27823,
      318,
      973
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine if end_timestamp is used"
  },
  {
    "line": 115,
    "text": "            fq_ref_date = to_time_str(now_pd_timestamp())",
    "annotation": "\ud83e\udde0 ML Signal: Checking if DataFrame is not null before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      80,
      62,
      5420,
      62,
      4475,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      28955
    ],
    "start_token": 502,
    "end_token": 533,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      7587
    ],
    "label": "ml_signal",
    "reason": "Checking if DataFrame is not null before processing"
  },
  {
    "line": 118,
    "text": "            df = get_bars(",
    "annotation": "\u2705 Best Practice: Use of rename for clarity and consistency in column names",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      651,
      62,
      34046,
      7
    ],
    "start_token": 533,
    "end_token": 550,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      36265,
      329,
      16287,
      290,
      15794,
      287,
      5721,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of rename for clarity and consistency in column names"
  },
  {
    "line": 121,
    "text": "                unit=self.jq_trading_level,",
    "annotation": "\u2705 Best Practice: Converting timestamp to datetime for consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4326,
      28,
      944,
      13,
      73,
      80,
      62,
      2213,
      4980,
      62,
      5715,
      11
    ],
    "start_token": 550,
    "end_token": 577,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      41033,
      284,
      4818,
      8079,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Converting timestamp to datetime for consistency"
  },
  {
    "line": 124,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on adjustment type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 577,
    "end_token": 589,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      15068,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on adjustment type"
  },
  {
    "line": 139,
    "text": "            df[\"entity_id\"] = entity.id",
    "annotation": "\ud83e\udde0 ML Signal: Checking if DataFrame is not null before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      9312,
      13,
      312
    ],
    "start_token": 589,
    "end_token": 610,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      7587
    ],
    "label": "ml_signal",
    "reason": "Checking if DataFrame is not null before processing"
  },
  {
    "line": 142,
    "text": "            df[\"level\"] = self.level.value",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential floating-point precision issue with rounding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      5715,
      8973,
      796,
      2116,
      13,
      5715,
      13,
      8367
    ],
    "start_token": 610,
    "end_token": 631,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12462,
      12,
      4122,
      15440,
      2071,
      351,
      38185
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential floating-point precision issue with rounding"
  },
  {
    "line": 147,
    "text": "                check_df = df.head(1)",
    "annotation": "\ud83e\udde0 ML Signal: Recomputing factors based on condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2198,
      62,
      7568,
      796,
      47764,
      13,
      2256,
      7,
      16,
      8
    ],
    "start_token": 631,
    "end_token": 656,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      296,
      48074,
      5087,
      1912,
      319,
      4006
    ],
    "label": "ml_signal",
    "reason": "Recomputing factors based on condition"
  },
  {
    "line": 141,
    "text": "            df[\"provider\"] = \"joinquant\"",
    "annotation": "\u2705 Best Practice: Use of string formatting for constructing IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      15234,
      1304,
      8973,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 656,
    "end_token": 678,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4731,
      33313,
      329,
      30580,
      32373
    ],
    "label": "best_practice",
    "reason": "Use of string formatting for constructing IDs"
  },
  {
    "line": 146,
    "text": "            if self.adjust_type == AdjustType.qfq:",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame apply method for row-wise operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      23032,
      62,
      4906,
      6624,
      20292,
      6030,
      13,
      80,
      69,
      80,
      25
    ],
    "start_token": 678,
    "end_token": 703,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      4174,
      2446,
      329,
      5752,
      12,
      3083,
      4560
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame apply method for row-wise operations"
  },
  {
    "line": 148,
    "text": "                check_date = check_df[\"timestamp\"][0]",
    "annotation": "\ud83e\udde0 ML Signal: Use of drop_duplicates to handle duplicate data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2198,
      62,
      4475,
      796,
      2198,
      62,
      7568,
      14692,
      16514,
      27823,
      1,
      7131,
      15,
      60
    ],
    "start_token": 703,
    "end_token": 732,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4268,
      62,
      646,
      489,
      16856,
      284,
      5412,
      23418,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of drop_duplicates to handle duplicate data"
  },
  {
    "line": 150,
    "text": "                    entity_id=entity.id,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a function to save DataFrame to a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      312,
      28,
      26858,
      13,
      312,
      11
    ],
    "start_token": 732,
    "end_token": 759,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2163,
      284,
      3613,
      6060,
      19778,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Use of a function to save DataFrame to a database"
  },
  {
    "line": 151,
    "text": "                    provider=self.provider,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a main guard to execute code conditionally",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11
    ],
    "start_token": 759,
    "end_token": 785,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1388,
      4860,
      284,
      12260,
      2438,
      4006,
      453
    ],
    "label": "ml_signal",
    "reason": "Use of a main guard to execute code conditionally"
  },
  {
    "line": 151,
    "text": "                    provider=self.provider,",
    "annotation": "\ud83e\udde0 ML Signal: Use of __all__ to define public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11
    ],
    "start_token": 785,
    "end_token": 811,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "ml_signal",
    "reason": "Use of __all__ to define public API of the module"
  }
]
[
  {
    "line": 3,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 5,
    "text": "from jqdatapy.api import get_token, get_bars",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      474,
      80,
      19608,
      12826,
      13,
      15042,
      1330,
      651,
      62,
      30001,
      11,
      651,
      62,
      34046
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 7,
    "text": "from zvt import init_log, zvt_config",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      1330,
      2315,
      62,
      6404,
      11,
      1976,
      36540,
      62,
      11250
    ],
    "start_token": 15,
    "end_token": 27,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 9,
    "text": "from zvt.contract import IntervalLevel",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      1330,
      4225,
      2100,
      4971
    ],
    "start_token": 27,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 11,
    "text": "from zvt.contract.recorder import FixedCycleDataRecorder",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      8344,
      2875,
      1330,
      10832,
      20418,
      2375,
      6601,
      6690,
      2875
    ],
    "start_token": 36,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 13,
    "text": "from zvt.recorders.joinquant.common import to_jq_trading_level, to_jq_entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      7639,
      18934,
      415,
      13,
      11321,
      1330,
      284,
      62,
      73,
      80,
      62,
      2213,
      4980,
      62,
      5715,
      11,
      284,
      62,
      73,
      80,
      62,
      26858,
      62,
      312
    ],
    "start_token": 51,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 15,
    "text": "from zvt.utils.time_utils import to_time_str, TIME_FORMAT_DAY, TIME_FORMAT_ISO8601",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      20460,
      62,
      21389,
      1404,
      62,
      26442,
      11,
      20460,
      62,
      21389,
      1404,
      62,
      40734,
      4521,
      486
    ],
    "start_token": 82,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 113,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 18,
    "text": "class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      15732,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 113,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 18,
    "text": "class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      15732,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 130,
    "end_token": 147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 13,
    "text": "from zvt.recorders.joinquant.common import to_jq_trading_level, to_jq_entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      7639,
      18934,
      415,
      13,
      11321,
      1330,
      284,
      62,
      73,
      80,
      62,
      2213,
      4980,
      62,
      5715,
      11,
      284,
      62,
      73,
      80,
      62,
      26858,
      62,
      312
    ],
    "start_token": 147,
    "end_token": 178,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      351,
      24155,
      11,
      4465,
      329,
      4547,
      1398,
      28398,
      444,
      290,
      6958
    ],
    "label": "ml_signal",
    "reason": "Class definition with inheritance, useful for understanding class hierarchies and relationships"
  },
  {
    "line": 15,
    "text": "from zvt.utils.time_utils import to_time_str, TIME_FORMAT_DAY, TIME_FORMAT_ISO8601",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute definition, useful for understanding default configurations",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      20460,
      62,
      21389,
      1404,
      62,
      26442,
      11,
      20460,
      62,
      21389,
      1404,
      62,
      40734,
      4521,
      486
    ],
    "start_token": 178,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      6770,
      11,
      4465,
      329,
      4547,
      4277,
      25412
    ],
    "label": "ml_signal",
    "reason": "Class attribute definition, useful for understanding default configurations"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute definition, useful for understanding schema usage",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 209,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      6770,
      11,
      4465,
      329,
      4547,
      32815,
      8748
    ],
    "label": "ml_signal",
    "reason": "Class attribute definition, useful for understanding schema usage"
  },
  {
    "line": 18,
    "text": "class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute definition, useful for understanding default configurations",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      15732,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 209,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      6770,
      11,
      4465,
      329,
      4547,
      4277,
      25412
    ],
    "label": "ml_signal",
    "reason": "Class attribute definition, useful for understanding default configurations"
  },
  {
    "line": 18,
    "text": "class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute definition, useful for understanding schema usage",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      15732,
      42,
      7890,
      6690,
      2875,
      7,
      13715,
      20418,
      2375,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 226,
    "end_token": 243,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      6770,
      11,
      4465,
      329,
      4547,
      32815,
      8748
    ],
    "label": "ml_signal",
    "reason": "Class attribute definition, useful for understanding schema usage"
  },
  {
    "line": 39,
    "text": "        ignore_failed=True,",
    "annotation": "\u2705 Best Practice: Convert level to IntervalLevel to ensure type consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      47904,
      28,
      17821,
      11
    ],
    "start_token": 243,
    "end_token": 256,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      1241,
      284,
      4225,
      2100,
      4971,
      284,
      4155,
      2099,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert level to IntervalLevel to ensure type consistency"
  },
  {
    "line": 41,
    "text": "        fix_duplicate_way=\"ignore\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of get_kdata_schema indicates data schema retrieval pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      2625,
      46430,
      1600
    ],
    "start_token": 256,
    "end_token": 273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      651,
      62,
      74,
      7890,
      62,
      15952,
      2611,
      9217,
      1366,
      32815,
      45069,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of get_kdata_schema indicates data schema retrieval pattern"
  },
  {
    "line": 43,
    "text": "        end_timestamp=None,",
    "annotation": "\ud83e\udde0 ML Signal: Conversion to trading level suggests a pattern for data granularity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      14202,
      11
    ],
    "start_token": 273,
    "end_token": 287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      284,
      7313,
      1241,
      5644,
      257,
      3912,
      329,
      1366,
      19468,
      33737
    ],
    "label": "ml_signal",
    "reason": "Conversion to trading level suggests a pattern for data granularity"
  },
  {
    "line": 43,
    "text": "        end_timestamp=None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Storing credentials in code can lead to security vulnerabilities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      14202,
      11
    ],
    "start_token": 287,
    "end_token": 301,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      520,
      3255,
      18031,
      287,
      2438,
      460,
      1085,
      284,
      2324,
      23805
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Storing credentials in code can lead to security vulnerabilities"
  },
  {
    "line": 43,
    "text": "        end_timestamp=None,",
    "annotation": "\u2705 Best Practice: Use of super() to ensure proper inheritance and initialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      14202,
      11
    ],
    "start_token": 301,
    "end_token": 315,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      4155,
      1774,
      24155,
      290,
      37588
    ],
    "label": "best_practice",
    "reason": "Use of super() to ensure proper inheritance and initialization"
  },
  {
    "line": 64,
    "text": "            real_time,",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper initialization of inherited attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      11
    ],
    "start_token": 315,
    "end_token": 330,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper initialization of inherited attributes"
  },
  {
    "line": 65,
    "text": "            fix_duplicate_way,",
    "annotation": "\ud83e\udde0 ML Signal: Filtering entities based on specific codes indicates a pattern of exclusion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      11
    ],
    "start_token": 330,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      12066,
      1912,
      319,
      2176,
      12416,
      9217,
      257,
      3912,
      286,
      19328
    ],
    "label": "ml_signal",
    "reason": "Filtering entities based on specific codes indicates a pattern of exclusion"
  },
  {
    "line": 68,
    "text": "            level,",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for filtering, a common pattern in Python",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      11
    ],
    "start_token": 349,
    "end_token": 362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      25431,
      11,
      257,
      2219,
      3912,
      287,
      11361
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for filtering, a common pattern in Python"
  },
  {
    "line": 68,
    "text": "            level,",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for generating domain IDs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      11
    ],
    "start_token": 362,
    "end_token": 375,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      15453,
      7386,
      32373
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for generating domain IDs"
  },
  {
    "line": 70,
    "text": "            one_day_trading_minutes,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper function to generate IDs, indicating a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      530,
      62,
      820,
      62,
      2213,
      4980,
      62,
      1084,
      1769,
      11
    ],
    "start_token": 375,
    "end_token": 396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      2163,
      284,
      7716,
      32373,
      11,
      12739,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper function to generate IDs, indicating a common pattern"
  },
  {
    "line": 71,
    "text": "            return_unfinished,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `generate_kdata_id` is not properly validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      403,
      43952,
      11
    ],
    "start_token": 396,
    "end_token": 412,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      8612,
      378,
      62,
      74,
      7890,
      62,
      312,
      63,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `generate_kdata_id` is not properly validated or sanitized"
  },
  {
    "line": 72,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Directly passing parameters from one function to another improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 412,
    "end_token": 420,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      306,
      6427,
      10007,
      422,
      530,
      2163,
      284,
      1194,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Directly passing parameters from one function to another improves readability"
  },
  {
    "line": 71,
    "text": "            return_unfinished,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType error if self.end_timestamp is not initialized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      403,
      43952,
      11
    ],
    "start_token": 420,
    "end_token": 436,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      4049,
      611,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      318,
      407,
      23224
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType error if self.end_timestamp is not initialized"
  },
  {
    "line": 72,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function get_bars with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 436,
    "end_token": 444,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      651,
      62,
      34046,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of external function get_bars with specific parameters"
  },
  {
    "line": 72,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of entity to a specific ID format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 444,
    "end_token": 452,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      9312,
      284,
      257,
      2176,
      4522,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of entity to a specific ID format"
  },
  {
    "line": 79,
    "text": "        ]",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of timestamp to string format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 452,
    "end_token": 460,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      41033,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of timestamp to string format"
  },
  {
    "line": 85,
    "text": "        if not self.end_timestamp:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function get_bars with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 460,
    "end_token": 476,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      651,
      62,
      34046,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of external function get_bars with specific parameters"
  },
  {
    "line": 85,
    "text": "        if not self.end_timestamp:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of entity to a specific ID format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      437,
      62,
      16514,
      27823,
      25
    ],
    "start_token": 476,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      9312,
      284,
      257,
      2176,
      4522,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of entity to a specific ID format"
  },
  {
    "line": 91,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for handling of null dataframes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 492,
    "end_token": 504,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      9041,
      286,
      9242,
      1366,
      37805
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for handling of null dataframes"
  },
  {
    "line": 93,
    "text": "            end_timestamp = to_time_str(self.end_timestamp)",
    "annotation": "\u2705 Best Practice: Adding metadata to dataframe for better traceability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      796,
      284,
      62,
      2435,
      62,
      2536,
      7,
      944,
      13,
      437,
      62,
      16514,
      27823,
      8
    ],
    "start_token": 504,
    "end_token": 533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      20150,
      284,
      1366,
      14535,
      329,
      1365,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Adding metadata to dataframe for better traceability"
  },
  {
    "line": 95,
    "text": "                to_jq_entity_id(entity),",
    "annotation": "\u2705 Best Practice: Renaming columns for consistency and clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      284,
      62,
      73,
      80,
      62,
      26858,
      62,
      312,
      7,
      26858,
      828
    ],
    "start_token": 533,
    "end_token": 559,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      15794,
      290,
      16287
    ],
    "label": "best_practice",
    "reason": "Renaming columns for consistency and clarity"
  },
  {
    "line": 97,
    "text": "                unit=self.jq_trading_level,",
    "annotation": "\u2705 Best Practice: Adding metadata to dataframe for better traceability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4326,
      28,
      944,
      13,
      73,
      80,
      62,
      2213,
      4980,
      62,
      5715,
      11
    ],
    "start_token": 559,
    "end_token": 586,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      20150,
      284,
      1366,
      14535,
      329,
      1365,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Adding metadata to dataframe for better traceability"
  },
  {
    "line": 99,
    "text": "                end_date=end_timestamp,",
    "annotation": "\u2705 Best Practice: Ensuring timestamp column is in datetime format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      4475,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 586,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      870,
      41033,
      5721,
      318,
      287,
      4818,
      8079,
      5794
    ],
    "label": "best_practice",
    "reason": "Ensuring timestamp column is in datetime format"
  },
  {
    "line": 101,
    "text": "        if pd_is_not_null(df):",
    "annotation": "\u2705 Best Practice: Adding metadata to dataframe for better traceability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 610,
    "end_token": 629,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      20150,
      284,
      1366,
      14535,
      329,
      1365,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Adding metadata to dataframe for better traceability"
  },
  {
    "line": 103,
    "text": "            df.rename(columns={\"money\": \"turnover\", \"date\": \"timestamp\"}, inplace=True)",
    "annotation": "\u2705 Best Practice: Adding metadata to dataframe for better traceability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      918,
      480,
      7,
      28665,
      82,
      28,
      4895,
      26316,
      1298,
      366,
      15344,
      2502,
      1600,
      366,
      4475,
      1298,
      366,
      16514,
      27823,
      25719,
      287,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 629,
    "end_token": 667,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      20150,
      284,
      1366,
      14535,
      329,
      1365,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Adding metadata to dataframe for better traceability"
  },
  {
    "line": 105,
    "text": "            df[\"entity_id\"] = entity.id",
    "annotation": "\u2705 Best Practice: Adding metadata to dataframe for better traceability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      9312,
      13,
      312
    ],
    "start_token": 667,
    "end_token": 688,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      20150,
      284,
      1366,
      14535,
      329,
      1365,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Adding metadata to dataframe for better traceability"
  },
  {
    "line": 98,
    "text": "                # fields=['date', 'open', 'close', 'low', 'high', 'volume', 'money'],",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame apply function with custom function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      7032,
      28,
      17816,
      4475,
      3256,
      705,
      9654,
      3256,
      705,
      19836,
      3256,
      705,
      9319,
      3256,
      705,
      8929,
      3256,
      705,
      29048,
      3256,
      705,
      26316,
      6,
      4357
    ],
    "start_token": 688,
    "end_token": 728,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4174,
      2163,
      351,
      2183,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame apply function with custom function"
  },
  {
    "line": 100,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Dropping duplicates in DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 728,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21045,
      2105,
      14184,
      16856,
      287,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Dropping duplicates in DataFrame"
  },
  {
    "line": 102,
    "text": "            df[\"name\"] = entity.name",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if df_to_db does not handle SQL injection or data validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      3672,
      8973,
      796,
      9312,
      13,
      3672
    ],
    "start_token": 740,
    "end_token": 759,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      47764,
      62,
      1462,
      62,
      9945,
      857,
      407,
      5412,
      16363,
      16954,
      393,
      1366,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if df_to_db does not handle SQL injection or data validation"
  },
  {
    "line": 106,
    "text": "            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])",
    "annotation": "\u2705 Best Practice: Use of argparse for command-line argument parsing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      14692,
      16514,
      27823,
      8973,
      8
    ],
    "start_token": 759,
    "end_token": 790,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1822,
      29572,
      329,
      3141,
      12,
      1370,
      4578,
      32096
    ],
    "label": "best_practice",
    "reason": "Use of argparse for command-line argument parsing"
  },
  {
    "line": 108,
    "text": "            df[\"level\"] = self.level.value",
    "annotation": "\ud83e\udde0 ML Signal: Command-line argument parsing with default values and choices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      5715,
      8973,
      796,
      2116,
      13,
      5715,
      13,
      8367
    ],
    "start_token": 790,
    "end_token": 811,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9455,
      12,
      1370,
      4578,
      32096,
      351,
      4277,
      3815,
      290,
      7747
    ],
    "label": "ml_signal",
    "reason": "Command-line argument parsing with default values and choices"
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Command-line argument parsing with default list and nargs",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 811,
    "end_token": 811,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9455,
      12,
      1370,
      4578,
      32096,
      351,
      4277,
      1351,
      290,
      299,
      22046
    ],
    "label": "ml_signal",
    "reason": "Command-line argument parsing with default list and nargs"
  },
  {
    "line": 112,
    "text": "                if self.level >= IntervalLevel.LEVEL_1DAY:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of command-line argument to specific type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5715,
      18189,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 811,
    "end_token": 841,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3141,
      12,
      1370,
      4578,
      284,
      2176,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conversion of command-line argument to specific type"
  },
  {
    "line": 112,
    "text": "                if self.level >= IntervalLevel.LEVEL_1DAY:",
    "annotation": "\u2705 Best Practice: Logging initialization with dynamic filename",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5715,
      18189,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 841,
    "end_token": 871,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      37588,
      351,
      8925,
      29472
    ],
    "label": "best_practice",
    "reason": "Logging initialization with dynamic filename"
  },
  {
    "line": 112,
    "text": "                if self.level >= IntervalLevel.LEVEL_1DAY:",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation and execution of a class with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5715,
      18189,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 871,
    "end_token": 901,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      290,
      9706,
      286,
      257,
      1398,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation and execution of a class with specific parameters"
  },
  {
    "line": 112,
    "text": "                if self.level >= IntervalLevel.LEVEL_1DAY:",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5715,
      18189,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 901,
    "end_token": 931,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameters"
  },
  {
    "line": 112,
    "text": "                if self.level >= IntervalLevel.LEVEL_1DAY:",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      5715,
      18189,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 931,
    "end_token": 961,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
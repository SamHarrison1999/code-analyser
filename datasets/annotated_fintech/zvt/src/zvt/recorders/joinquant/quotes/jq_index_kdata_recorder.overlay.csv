annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,0,ml_signal,3,Importing specific functions from a module indicates selective usage patterns,,0,,[]
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,15,ml_signal,5,Importing specific functions from a module indicates selective usage patterns,,0,"from jqdatapy.api import get_token, get_bars","[6738, 474, 80, 19608, 12826, 13, 15042, 1330, 651, 62, 30001, 11, 651, 62, 34046]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,27,ml_signal,7,Importing specific functions from a module indicates selective usage patterns,,15,"from zvt import init_log, zvt_config","[6738, 1976, 36540, 1330, 2315, 62, 6404, 11, 1976, 36540, 62, 11250]"
üß† ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,36,ml_signal,9,Importing specific classes from a module indicates selective usage patterns,,27,from zvt.contract import IntervalLevel,"[6738, 1976, 36540, 13, 28484, 1330, 4225, 2100, 4971]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,51,ml_signal,11,Importing specific functions from a module indicates selective usage patterns,,36,from zvt.contract.recorder import FixedCycleDataRecorder,"[6738, 1976, 36540, 13, 28484, 13, 8344, 2875, 1330, 10832, 20418, 2375, 6601, 6690, 2875]"
üß† ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,82,ml_signal,13,Importing specific classes from a module indicates selective usage patterns,,51,"from zvt.recorders.joinquant.common import to_jq_trading_level, to_jq_entity_id","[6738, 1976, 36540, 13, 8344, 6361, 13, 7639, 18934, 415, 13, 11321, 1330, 284, 62, 73, 80, 62, 2213, 4980, 62, 5715, 11, 284, 62, 73, 80, 62, 26858, 62, 312]"
üß† ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,113,ml_signal,15,Importing specific classes from a module indicates selective usage patterns,,82,"from zvt.utils.time_utils import to_time_str, TIME_FORMAT_DAY, TIME_FORMAT_ISO8601","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 2435, 62, 2536, 11, 20460, 62, 21389, 1404, 62, 26442, 11, 20460, 62, 21389, 1404, 62, 40734, 4521, 486]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,113,ml_signal,17,Importing specific functions from a module indicates selective usage patterns,,113,,[]
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,130,ml_signal,18,Importing specific functions from a module indicates selective usage patterns,,113,class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 15732, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,147,ml_signal,18,Importing specific functions from a module indicates selective usage patterns,,130,class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 15732, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
"üß† ML Signal: Class definition with inheritance, useful for understanding class hierarchies and relationships","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 24155, 11, 4465, 329, 4547, 1398, 28398, 444, 290, 6958]",1.0,178,ml_signal,13,"Class definition with inheritance, useful for understanding class hierarchies and relationships",,147,"from zvt.recorders.joinquant.common import to_jq_trading_level, to_jq_entity_id","[6738, 1976, 36540, 13, 8344, 6361, 13, 7639, 18934, 415, 13, 11321, 1330, 284, 62, 73, 80, 62, 2213, 4980, 62, 5715, 11, 284, 62, 73, 80, 62, 26858, 62, 312]"
"üß† ML Signal: Class attribute definition, useful for understanding default configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 25412]",1.0,209,ml_signal,15,"Class attribute definition, useful for understanding default configurations",,178,"from zvt.utils.time_utils import to_time_str, TIME_FORMAT_DAY, TIME_FORMAT_ISO8601","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 2435, 62, 2536, 11, 20460, 62, 21389, 1404, 62, 26442, 11, 20460, 62, 21389, 1404, 62, 40734, 4521, 486]"
"üß† ML Signal: Class attribute definition, useful for understanding schema usage","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 32815, 8748]",1.0,209,ml_signal,17,"Class attribute definition, useful for understanding schema usage",,209,,[]
"üß† ML Signal: Class attribute definition, useful for understanding default configurations","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 4277, 25412]",1.0,226,ml_signal,18,"Class attribute definition, useful for understanding default configurations",,209,class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 15732, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
"üß† ML Signal: Class attribute definition, useful for understanding schema usage","[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 6770, 11, 4465, 329, 4547, 32815, 8748]",1.0,243,ml_signal,18,"Class attribute definition, useful for understanding schema usage",,226,class JqChinaIndexKdataRecorder(FixedCycleDataRecorder):,"[4871, 449, 80, 14581, 15732, 42, 7890, 6690, 2875, 7, 13715, 20418, 2375, 6601, 6690, 2875, 2599]"
‚úÖ Best Practice: Convert level to IntervalLevel to ensure type consistency,"[26486, 227, 6705, 19939, 25, 38240, 1241, 284, 4225, 2100, 4971, 284, 4155, 2099, 15794]",1.0,256,best_practice,39,Convert level to IntervalLevel to ensure type consistency,,243,"        ignore_failed=True,","[220, 220, 220, 220, 220, 220, 220, 8856, 62, 47904, 28, 17821, 11]"
üß† ML Signal: Usage of get_kdata_schema indicates data schema retrieval pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 651, 62, 74, 7890, 62, 15952, 2611, 9217, 1366, 32815, 45069, 3912]",1.0,273,ml_signal,41,Usage of get_kdata_schema indicates data schema retrieval pattern,,256,"        fix_duplicate_way=""ignore"",","[220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 2625, 46430, 1600]"
üß† ML Signal: Conversion to trading level suggests a pattern for data granularity,"[8582, 100, 254, 10373, 26484, 25, 44101, 284, 7313, 1241, 5644, 257, 3912, 329, 1366, 19468, 33737]",0.5,287,ml_signal,43,Conversion to trading level suggests a pattern for data granularity,,273,"        end_timestamp=None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 14202, 11]"
‚ö†Ô∏è SAST Risk (Medium): Storing credentials in code can lead to security vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 520, 3255, 18031, 287, 2438, 460, 1085, 284, 2324, 23805]",1.0,301,sast_risk,43,Storing credentials in code can lead to security vulnerabilities,Medium,287,"        end_timestamp=None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 14202, 11]"
‚úÖ Best Practice: Use of super() to ensure proper inheritance and initialization,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 4155, 1774, 24155, 290, 37588]",1.0,315,best_practice,43,Use of super() to ensure proper inheritance and initialization,,301,"        end_timestamp=None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 28, 14202, 11]"
‚úÖ Best Practice: Call to superclass method ensures proper initialization of inherited attributes,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 37588, 286, 19552, 12608]",1.0,330,best_practice,64,Call to superclass method ensures proper initialization of inherited attributes,,315,"            real_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1103, 62, 2435, 11]"
üß† ML Signal: Filtering entities based on specific codes indicates a pattern of exclusion,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 12066, 1912, 319, 2176, 12416, 9217, 257, 3912, 286, 19328]",1.0,349,ml_signal,65,Filtering entities based on specific codes indicates a pattern of exclusion,,330,"            fix_duplicate_way,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4259, 62, 646, 489, 5344, 62, 1014, 11]"
"üß† ML Signal: List comprehension used for filtering, a common pattern in Python","[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 25431, 11, 257, 2219, 3912, 287, 11361]",1.0,362,ml_signal,68,"List comprehension used for filtering, a common pattern in Python",,349,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
üß† ML Signal: Function definition with parameters indicating a pattern for generating domain IDs,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 15453, 7386, 32373]",0.5,375,ml_signal,68,Function definition with parameters indicating a pattern for generating domain IDs,,362,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
"üß† ML Signal: Usage of a helper function to generate IDs, indicating a common pattern","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 7716, 32373, 11, 12739, 257, 2219, 3912]",0.5,396,ml_signal,70,"Usage of a helper function to generate IDs, indicating a common pattern",,375,"            one_day_trading_minutes,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `generate_kdata_id` is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 8612, 378, 62, 74, 7890, 62, 312, 63, 318, 407, 6105, 31031, 393, 5336, 36951]",0.5,412,sast_risk,71,Potential risk if `generate_kdata_id` is not properly validated or sanitized,Low,396,"            return_unfinished,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 11]"
‚úÖ Best Practice: Directly passing parameters from one function to another improves readability,"[26486, 227, 6705, 19939, 25, 4128, 306, 6427, 10007, 422, 530, 2163, 284, 1194, 19575, 1100, 1799]",0.5,420,best_practice,72,Directly passing parameters from one function to another improves readability,,412,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType error if self.end_timestamp is not initialized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 4049, 611, 2116, 13, 437, 62, 16514, 27823, 318, 407, 23224]",0.5,436,sast_risk,71,Potential for NoneType error if self.end_timestamp is not initialized,Low,420,"            return_unfinished,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 11]"
üß† ML Signal: Usage of external function get_bars with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 651, 62, 34046, 351, 2176, 10007]",0.5,444,ml_signal,72,Usage of external function get_bars with specific parameters,,436,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Conversion of entity to a specific ID format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 9312, 284, 257, 2176, 4522, 5794]",0.5,452,ml_signal,72,Conversion of entity to a specific ID format,,444,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Conversion of timestamp to string format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 41033, 284, 4731, 5794]",0.5,460,ml_signal,79,Conversion of timestamp to string format,,452,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Usage of external function get_bars with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 651, 62, 34046, 351, 2176, 10007]",0.5,476,ml_signal,85,Usage of external function get_bars with specific parameters,,460,        if not self.end_timestamp:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 437, 62, 16514, 27823, 25]"
üß† ML Signal: Conversion of entity to a specific ID format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 9312, 284, 257, 2176, 4522, 5794]",0.5,492,ml_signal,85,Conversion of entity to a specific ID format,,476,        if not self.end_timestamp:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 437, 62, 16514, 27823, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for handling of null dataframes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 9041, 286, 9242, 1366, 37805]",0.5,504,sast_risk,91,Potential for handling of null dataframes,Low,492,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Adding metadata to dataframe for better traceability,"[26486, 227, 6705, 19939, 25, 18247, 20150, 284, 1366, 14535, 329, 1365, 12854, 1799]",0.5,533,best_practice,93,Adding metadata to dataframe for better traceability,,504,            end_timestamp = to_time_str(self.end_timestamp),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 16514, 27823, 796, 284, 62, 2435, 62, 2536, 7, 944, 13, 437, 62, 16514, 27823, 8]"
‚úÖ Best Practice: Renaming columns for consistency and clarity,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 15794, 290, 16287]",0.5,559,best_practice,95,Renaming columns for consistency and clarity,,533,"                to_jq_entity_id(entity),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 284, 62, 73, 80, 62, 26858, 62, 312, 7, 26858, 828]"
‚úÖ Best Practice: Adding metadata to dataframe for better traceability,"[26486, 227, 6705, 19939, 25, 18247, 20150, 284, 1366, 14535, 329, 1365, 12854, 1799]",0.5,586,best_practice,97,Adding metadata to dataframe for better traceability,,559,"                unit=self.jq_trading_level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4326, 28, 944, 13, 73, 80, 62, 2213, 4980, 62, 5715, 11]"
‚úÖ Best Practice: Ensuring timestamp column is in datetime format,"[26486, 227, 6705, 19939, 25, 48221, 870, 41033, 5721, 318, 287, 4818, 8079, 5794]",0.5,610,best_practice,99,Ensuring timestamp column is in datetime format,,586,"                end_date=end_timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 4475, 28, 437, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Adding metadata to dataframe for better traceability,"[26486, 227, 6705, 19939, 25, 18247, 20150, 284, 1366, 14535, 329, 1365, 12854, 1799]",0.5,629,best_practice,101,Adding metadata to dataframe for better traceability,,610,        if pd_is_not_null(df):,"[220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
‚úÖ Best Practice: Adding metadata to dataframe for better traceability,"[26486, 227, 6705, 19939, 25, 18247, 20150, 284, 1366, 14535, 329, 1365, 12854, 1799]",0.5,667,best_practice,103,Adding metadata to dataframe for better traceability,,629,"            df.rename(columns={""money"": ""turnover"", ""date"": ""timestamp""}, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 918, 480, 7, 28665, 82, 28, 4895, 26316, 1298, 366, 15344, 2502, 1600, 366, 4475, 1298, 366, 16514, 27823, 25719, 287, 5372, 28, 17821, 8]"
‚úÖ Best Practice: Adding metadata to dataframe for better traceability,"[26486, 227, 6705, 19939, 25, 18247, 20150, 284, 1366, 14535, 329, 1365, 12854, 1799]",0.5,688,best_practice,105,Adding metadata to dataframe for better traceability,,667,"            df[""entity_id""] = entity.id","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 26858, 62, 312, 8973, 796, 9312, 13, 312]"
üß† ML Signal: Usage of DataFrame apply function with custom function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 4174, 2163, 351, 2183, 2163]",1.0,728,ml_signal,98,Usage of DataFrame apply function with custom function,,688,"                # fields=['date', 'open', 'close', 'low', 'high', 'volume', 'money'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 7032, 28, 17816, 4475, 3256, 705, 9654, 3256, 705, 19836, 3256, 705, 9319, 3256, 705, 8929, 3256, 705, 29048, 3256, 705, 26316, 6, 4357]"
üß† ML Signal: Dropping duplicates in DataFrame,"[8582, 100, 254, 10373, 26484, 25, 21045, 2105, 14184, 16856, 287, 6060, 19778]",1.0,740,ml_signal,100,Dropping duplicates in DataFrame,,728,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if df_to_db does not handle SQL injection or data validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 47764, 62, 1462, 62, 9945, 857, 407, 5412, 16363, 16954, 393, 1366, 21201]",0.5,759,sast_risk,102,Potential risk if df_to_db does not handle SQL injection or data validation,Low,740,"            df[""name""] = entity.name","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 3672, 8973, 796, 9312, 13, 3672]"
‚úÖ Best Practice: Use of argparse for command-line argument parsing,"[26486, 227, 6705, 19939, 25, 5765, 286, 1822, 29572, 329, 3141, 12, 1370, 4578, 32096]",0.5,790,best_practice,106,Use of argparse for command-line argument parsing,,759,"            df[""timestamp""] = pd.to_datetime(df[""timestamp""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 16514, 27823, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 16514, 27823, 8973, 8]"
üß† ML Signal: Command-line argument parsing with default values and choices,"[8582, 100, 254, 10373, 26484, 25, 9455, 12, 1370, 4578, 32096, 351, 4277, 3815, 290, 7747]",0.5,811,ml_signal,108,Command-line argument parsing with default values and choices,,790,"            df[""level""] = self.level.value","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 5715, 8973, 796, 2116, 13, 5715, 13, 8367]"
üß† ML Signal: Command-line argument parsing with default list and nargs,"[8582, 100, 254, 10373, 26484, 25, 9455, 12, 1370, 4578, 32096, 351, 4277, 1351, 290, 299, 22046]",0.5,811,ml_signal,110,Command-line argument parsing with default list and nargs,,811,,[]
üß† ML Signal: Conversion of command-line argument to specific type,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3141, 12, 1370, 4578, 284, 2176, 2099]",1.0,841,ml_signal,112,Conversion of command-line argument to specific type,,811,                if self.level >= IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 5715, 18189, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
‚úÖ Best Practice: Logging initialization with dynamic filename,"[26486, 227, 6705, 19939, 25, 5972, 2667, 37588, 351, 8925, 29472]",1.0,871,best_practice,112,Logging initialization with dynamic filename,,841,                if self.level >= IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 5715, 18189, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
üß† ML Signal: Instantiation and execution of a class with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 290, 9706, 286, 257, 1398, 351, 2176, 10007]",1.0,901,ml_signal,112,Instantiation and execution of a class with specific parameters,,871,                if self.level >= IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 5715, 18189, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
üß† ML Signal: Function call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007]",1.0,931,ml_signal,112,Function call with specific parameters,,901,                if self.level >= IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 5715, 18189, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"
‚úÖ Best Practice: Use of __all__ to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,961,best_practice,112,Use of __all__ to define public API of the module,,931,                if self.level >= IntervalLevel.LEVEL_1DAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 5715, 18189, 4225, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 25]"

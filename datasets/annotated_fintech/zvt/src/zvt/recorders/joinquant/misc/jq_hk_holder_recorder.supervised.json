[
  {
    "line": 2,
    "text": "from jqdatapy.api import run_query",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      474,
      80,
      19608,
      12826,
      13,
      15042,
      1330,
      1057,
      62,
      22766
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 4,
    "text": "from zvt.contract.api import df_to_db, get_data",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      15042,
      1330,
      47764,
      62,
      1462,
      62,
      9945,
      11,
      651,
      62,
      7890
    ],
    "start_token": 11,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 6,
    "text": "from zvt.domain import Index",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      12901
    ],
    "start_token": 28,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 8,
    "text": "from zvt.recorders.joinquant.common import to_entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      7639,
      18934,
      415,
      13,
      11321,
      1330,
      284,
      62,
      26858,
      62,
      312
    ],
    "start_token": 35,
    "end_token": 53,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 10,
    "text": "from zvt.utils.time_utils import to_time_str, TIME_FORMAT_DAY, to_pd_timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      20460,
      62,
      21389,
      1404,
      62,
      26442,
      11,
      284,
      62,
      30094,
      62,
      16514,
      27823
    ],
    "start_token": 53,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 82,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 14,
    "text": "# 1)\u65f6\u95f4\u4e0a\u5c31\u662f\u4ea4\u6613\u65e5\u7684\u5217\u8868,\u8fd9\u4e2a\u662f\u53ef\u77e5\u7684\uff0c\u53ef\u4ee5\u4ee5\u6b64\u4e3a\u589e\u91cf\u8ba1\u7b97\u70b9",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      2,
      352,
      8,
      33768,
      114,
      29785,
      112,
      41468,
      22887,
      109,
      42468,
      12859,
      97,
      23626,
      241,
      33768,
      98,
      21410,
      26344,
      245,
      26193,
      101,
      11,
      32573,
      247,
      10310,
      103,
      42468,
      20998,
      107,
      163,
      253,
      98,
      21410,
      171,
      120,
      234,
      20998,
      107,
      20015,
      98,
      20015,
      98,
      29826,
      97,
      10310,
      118,
      161,
      95,
      252,
      34932,
      237,
      164,
      106,
      94,
      163,
      106,
      245,
      163,
      224,
      117
    ],
    "start_token": 82,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 15,
    "text": "# 2)HkHolder\u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1\uff1a",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      2,
      362,
      8,
      39,
      74,
      39,
      19892,
      46763,
      108,
      162,
      235,
      106,
      163,
      119,
      241,
      162,
      252,
      226,
      21410,
      164,
      106,
      122,
      164,
      106,
      94,
      171,
      120,
      248
    ],
    "start_token": 143,
    "end_token": 171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose and usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 171,
    "end_token": 171,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose and usage."
  },
  {
    "line": 13,
    "text": "# \u8fd9\u91cc\u9009\u62e9\u7ee7\u627fTimestampsDataRecorder\u662f\u56e0\u4e3a",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      2,
      5525,
      123,
      247,
      34932,
      234,
      34460,
      231,
      162,
      233,
      102,
      163,
      119,
      100,
      33699,
      123,
      14967,
      395,
      9430,
      6601,
      6690,
      2875,
      42468,
      32368,
      254,
      10310,
      118
    ],
    "start_token": 171,
    "end_token": 198,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose and usage."
  },
  {
    "line": 15,
    "text": "# 2)HkHolder\u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1\uff1a",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      2,
      362,
      8,
      39,
      74,
      39,
      19892,
      46763,
      108,
      162,
      235,
      106,
      163,
      119,
      241,
      162,
      252,
      226,
      21410,
      164,
      106,
      122,
      164,
      106,
      94,
      171,
      120,
      248
    ],
    "start_token": 198,
    "end_token": 226,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose and usage."
  },
  {
    "line": 15,
    "text": "# 2)HkHolder\u6570\u636e\u7ed3\u6784\u7684\u8bbe\u8ba1\uff1a",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      2,
      362,
      8,
      39,
      74,
      39,
      19892,
      46763,
      108,
      162,
      235,
      106,
      163,
      119,
      241,
      162,
      252,
      226,
      21410,
      164,
      106,
      122,
      164,
      106,
      94,
      171,
      120,
      248
    ],
    "start_token": 226,
    "end_token": 254,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose and usage."
  },
  {
    "line": 24,
    "text": "    provider = \"joinquant\"",
    "annotation": "\u2705 Best Practice: Use of default values for function parameters improves usability and reduces errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 254,
    "end_token": 264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      2163,
      10007,
      19575,
      42863,
      290,
      12850,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default values for function parameters improves usability and reduces errors."
  },
  {
    "line": 25,
    "text": "    data_schema = HkHolder",
    "annotation": "\ud83e\udde0 ML Signal: Use of hardcoded values can indicate specific business logic or domain-specific constants.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      367,
      74,
      39,
      19892
    ],
    "start_token": 264,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1327,
      40976,
      3815,
      460,
      7603,
      2176,
      1597,
      9156,
      393,
      7386,
      12,
      11423,
      38491,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of hardcoded values can indicate specific business logic or domain-specific constants."
  },
  {
    "line": 39,
    "text": "        # 310002\t\u6df1\u80a1\u901a",
    "annotation": "\u2705 Best Practice: Calling the superclass's __init__ method ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      34215,
      197,
      162,
      115,
      109,
      164,
      224,
      94,
      34460,
      248
    ],
    "start_token": 276,
    "end_token": 295,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Calling the superclass's __init__ method ensures proper initialization of the base class."
  },
  {
    "line": 37,
    "text": "        # \u5e02\u573a\u901a\u7f16\u7801\t\u5e02\u573a\u901a\u540d\u79f0",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and parameters of the function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      116,
      224,
      28839,
      118,
      34460,
      248,
      163,
      120,
      244,
      163,
      254,
      223,
      197,
      30585,
      224,
      28839,
      118,
      34460,
      248,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 295,
    "end_token": 328,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      10007,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and parameters of the function"
  },
  {
    "line": 39,
    "text": "        # 310002\t\u6df1\u80a1\u901a",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas date_range to generate a list of business days",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      34215,
      197,
      162,
      115,
      109,
      164,
      224,
      94,
      34460,
      248
    ],
    "start_token": 328,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      3128,
      62,
      9521,
      284,
      7716,
      257,
      1351,
      286,
      1597,
      1528
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas date_range to generate a list of business days"
  },
  {
    "line": 40,
    "text": "        # 310003\t\u6e2f\u80a1\u901a\uff08\u6caa\uff09",
    "annotation": "\u2705 Best Practice: Use a consistent date format for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      830,
      18,
      197,
      162,
      116,
      107,
      164,
      224,
      94,
      34460,
      248,
      171,
      120,
      230,
      162,
      110,
      103,
      171,
      120,
      231
    ],
    "start_token": 347,
    "end_token": 376,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      6414,
      3128,
      5794,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use a consistent date format for better readability and maintainability"
  },
  {
    "line": 39,
    "text": "        # 310002\t\u6df1\u80a1\u901a",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of eval() can lead to code injection vulnerabilities if input is not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      34215,
      197,
      162,
      115,
      109,
      164,
      224,
      94,
      34460,
      248
    ],
    "start_token": 376,
    "end_token": 395,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      5418,
      3419,
      460,
      1085,
      284,
      2438,
      16954,
      23805,
      611,
      5128,
      318,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of eval() can lead to code injection vulnerabilities if input is not properly sanitized."
  },
  {
    "line": 41,
    "text": "        # 310004\t\u6e2f\u80a1\u901a\uff08\u6df1\uff09",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic method invocation using eval() indicates a pattern of flexible code execution.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      830,
      19,
      197,
      162,
      116,
      107,
      164,
      224,
      94,
      34460,
      248,
      171,
      120,
      230,
      162,
      115,
      109,
      171,
      120,
      231
    ],
    "start_token": 395,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2446,
      43219,
      1262,
      5418,
      3419,
      9217,
      257,
      3912,
      286,
      12846,
      2438,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic method invocation using eval() indicates a pattern of flexible code execution."
  },
  {
    "line": 41,
    "text": "        # 310004\t\u6e2f\u80a1\u901a\uff08\u6df1\uff09",
    "annotation": "\ud83e\udde0 ML Signal: Use of external data fetching function with filters and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      830,
      19,
      197,
      162,
      116,
      107,
      164,
      224,
      94,
      34460,
      248,
      171,
      120,
      230,
      162,
      115,
      109,
      171,
      120,
      231
    ],
    "start_token": 424,
    "end_token": 453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      1366,
      21207,
      278,
      2163,
      351,
      16628,
      290,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of external data fetching function with filters and parameters."
  },
  {
    "line": 41,
    "text": "        # 310004\t\u6e2f\u80a1\u901a\uff08\u6df1\uff09",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on entity attributes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3261,
      830,
      19,
      197,
      162,
      116,
      107,
      164,
      224,
      94,
      34460,
      248,
      171,
      120,
      230,
      162,
      115,
      109,
      171,
      120,
      231
    ],
    "start_token": 453,
    "end_token": 482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      9312,
      12608,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on entity attributes."
  },
  {
    "line": 50,
    "text": "            day_data,",
    "annotation": "\ud83e\udde0 ML Signal: Use of provider pattern for data access.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1110,
      62,
      7890,
      11
    ],
    "start_token": 482,
    "end_token": 497,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10131,
      3912,
      329,
      1366,
      1895,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of provider pattern for data access."
  },
  {
    "line": 50,
    "text": "            day_data,",
    "annotation": "\ud83e\udde0 ML Signal: Use of data schema for structured data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1110,
      62,
      7890,
      11
    ],
    "start_token": 497,
    "end_token": 512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1366,
      32815,
      329,
      20793,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of data schema for structured data retrieval."
  },
  {
    "line": 51,
    "text": "            real_time=real_time,",
    "annotation": "\ud83e\udde0 ML Signal: Ordering data dynamically.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      28,
      5305,
      62,
      2435,
      11
    ],
    "start_token": 512,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8284,
      278,
      1366,
      32366,
      13
    ],
    "label": "ml_signal",
    "reason": "Ordering data dynamically."
  },
  {
    "line": 53,
    "text": "            start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Limiting data retrieval to a specific number of records.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 531,
    "end_token": 552,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7576,
      1780,
      1366,
      45069,
      284,
      257,
      2176,
      1271,
      286,
      4406,
      13
    ],
    "label": "ml_signal",
    "reason": "Limiting data retrieval to a specific number of records."
  },
  {
    "line": 55,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Specifying return type for data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 552,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18291,
      4035,
      1441,
      2099,
      329,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Specifying return type for data retrieval."
  },
  {
    "line": 58,
    "text": "        # \u805a\u5bbd\u6570\u636e\u4ece2017\u5e743\u670817\u5f00\u59cb",
    "annotation": "\ud83e\udde0 ML Signal: Use of session for database operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      223,
      248,
      22522,
      121,
      46763,
      108,
      162,
      235,
      106,
      20015,
      236,
      5539,
      33176,
      112,
      18,
      17312,
      230,
      1558,
      28156,
      222,
      34650,
      233
    ],
    "start_token": 560,
    "end_token": 591,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6246,
      329,
      6831,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of session for database operations."
  },
  {
    "line": 60,
    "text": "",
    "annotation": "\u2705 Best Practice: Check if records list is not empty before accessing its elements.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 591,
    "end_token": 591,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4406,
      1351,
      318,
      407,
      6565,
      878,
      22534,
      663,
      4847,
      13
    ],
    "label": "best_practice",
    "reason": "Check if records list is not empty before accessing its elements."
  },
  {
    "line": 54,
    "text": "            end_timestamp=end_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over timestamps to process data for each timestamp",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 591,
    "end_token": 612,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4628,
      395,
      9430,
      284,
      1429,
      1366,
      329,
      1123,
      41033
    ],
    "label": "ml_signal",
    "reason": "Iterating over timestamps to process data for each timestamp"
  },
  {
    "line": 55,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if `entity.code` or `timestamp` are not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 612,
    "end_token": 620,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      4600,
      26858,
      13,
      8189,
      63,
      393,
      4600,
      16514,
      27823,
      63,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if `entity.code` or `timestamp` are not sanitized"
  },
  {
    "line": 60,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 620,
    "end_token": 620,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 63,
    "text": "        order = eval(\"self.data_schema.{}.desc()\".format(self.get_evaluated_time_field()))",
    "annotation": "\ud83e\udde0 ML Signal: Checking if DataFrame is not null before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      796,
      5418,
      7203,
      944,
      13,
      7890,
      62,
      15952,
      2611,
      13,
      90,
      27422,
      20147,
      3419,
      1911,
      18982,
      7,
      944,
      13,
      1136,
      62,
      18206,
      6605,
      62,
      2435,
      62,
      3245,
      3419,
      4008
    ],
    "start_token": 620,
    "end_token": 657,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      6060,
      19778,
      318,
      407,
      9242,
      878,
      7587
    ],
    "label": "ml_signal",
    "reason": "Checking if DataFrame is not null before processing"
  },
  {
    "line": 64,
    "text": "",
    "annotation": "\u2705 Best Practice: Use rename with a dictionary for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 657,
    "end_token": 657,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      36265,
      351,
      257,
      22155,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use rename with a dictionary for clarity and maintainability"
  },
  {
    "line": 66,
    "text": "            filters=[HkHolder.holder_code == entity.code],",
    "annotation": "\u2705 Best Practice: Ensure consistent datetime format for timestamps",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      39,
      74,
      39,
      19892,
      13,
      13829,
      62,
      8189,
      6624,
      9312,
      13,
      8189,
      4357
    ],
    "start_token": 657,
    "end_token": 683,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      6414,
      4818,
      8079,
      5794,
      329,
      4628,
      395,
      9430
    ],
    "label": "best_practice",
    "reason": "Ensure consistent datetime format for timestamps"
  },
  {
    "line": 72,
    "text": "            session=self.session,",
    "annotation": "\ud83e\udde0 ML Signal: Mapping entity codes to entity IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      28,
      944,
      13,
      29891,
      11
    ],
    "start_token": 683,
    "end_token": 700,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      9312,
      12416,
      284,
      9312,
      32373
    ],
    "label": "ml_signal",
    "reason": "Mapping entity codes to entity IDs"
  },
  {
    "line": 72,
    "text": "            session=self.session,",
    "annotation": "\ud83e\udde0 ML Signal: Processing and modifying stock codes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6246,
      28,
      944,
      13,
      29891,
      11
    ],
    "start_token": 700,
    "end_token": 717,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28403,
      290,
      30620,
      4283,
      12416
    ],
    "label": "ml_signal",
    "reason": "Processing and modifying stock codes"
  },
  {
    "line": 74,
    "text": "        if records:",
    "annotation": "\ud83e\udde0 ML Signal: Creating unique IDs for records",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4406,
      25
    ],
    "start_token": 717,
    "end_token": 727,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      3748,
      32373,
      329,
      4406
    ],
    "label": "ml_signal",
    "reason": "Creating unique IDs for records"
  },
  {
    "line": 75,
    "text": "            return records[0]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure `df_to_db` handles data safely to prevent SQL injection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4406,
      58,
      15,
      60
    ],
    "start_token": 727,
    "end_token": 743,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4600,
      7568,
      62,
      1462,
      62,
      9945,
      63,
      17105,
      1366,
      11512,
      284,
      2948,
      16363,
      16954
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure `df_to_db` handles data safely to prevent SQL injection"
  },
  {
    "line": 75,
    "text": "            return records[0]",
    "annotation": "\u2705 Best Practice: Use `if __name__ == \"__main__\":` to ensure code only runs when script is executed directly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4406,
      58,
      15,
      60
    ],
    "start_token": 743,
    "end_token": 759,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4600,
      361,
      11593,
      3672,
      834,
      6624,
      366,
      834,
      12417,
      834,
      1298,
      63,
      284,
      4155,
      2438,
      691,
      4539,
      618,
      4226,
      318,
      10945,
      3264
    ],
    "label": "best_practice",
    "reason": "Use `if __name__ == \"__main__\":` to ensure code only runs when script is executed directly"
  },
  {
    "line": 75,
    "text": "            return records[0]",
    "annotation": "\ud83e\udde0 ML Signal: Running a recorder with a specified sleeping time",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4406,
      58,
      15,
      60
    ],
    "start_token": 759,
    "end_token": 775,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18162,
      257,
      38156,
      351,
      257,
      7368,
      11029,
      640
    ],
    "label": "ml_signal",
    "reason": "Running a recorder with a specified sleeping time"
  },
  {
    "line": 75,
    "text": "            return records[0]",
    "annotation": "\u2705 Best Practice: Use `__all__` to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4406,
      58,
      15,
      60
    ],
    "start_token": 775,
    "end_token": 791,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4600,
      834,
      439,
      834,
      63,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use `__all__` to define public API of the module"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Group related imports together for better readability and organization,"[26486, 227, 6705, 19939, 25, 4912, 3519, 17944, 1978, 329, 1365, 1100, 1799, 290, 4009]",1.0,9,best_practice,7,Group related imports together for better readability and organization,,0,from zvt.contract import IntervalLevel,"[6738, 1976, 36540, 13, 28484, 1330, 4225, 2100, 4971]"
üß† ML Signal: Inheritance from FixedCycleDataRecorder indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 10832, 20418, 2375, 6601, 6690, 2875, 9217, 257, 3912, 286, 16610, 11244]",0.5,31,ml_signal,14,Inheritance from FixedCycleDataRecorder indicates a pattern of extending functionality,,9,"from zvt.utils.time_utils import TIME_FORMAT_DAY, to_time_str","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 20460, 62, 21389, 1404, 62, 26442, 11, 284, 62, 2435, 62, 2536]"
üß† ML Signal: Use of a specific data provider suggests a pattern in data source preference,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 1366, 10131, 5644, 257, 3912, 287, 1366, 2723, 12741]",0.5,31,ml_signal,16,Use of a specific data provider suggests a pattern in data source preference,,31,,[]
üß† ML Signal: Association with a specific schema indicates a pattern in data structure usage,"[8582, 100, 254, 10373, 26484, 25, 5396, 351, 257, 2176, 32815, 9217, 257, 3912, 287, 1366, 4645, 8748]",0.5,44,ml_signal,18,Association with a specific schema indicates a pattern in data structure usage,,31,"    entity_provider = ""joinquant""","[220, 220, 220, 9312, 62, 15234, 1304, 796, 366, 7639, 18934, 415, 1]"
üß† ML Signal: Repeated use of the same provider suggests a strong dependency or preference,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 779, 286, 262, 976, 10131, 5644, 257, 1913, 20203, 393, 12741]",0.5,57,ml_signal,18,Repeated use of the same provider suggests a strong dependency or preference,,44,"    entity_provider = ""joinquant""","[220, 220, 220, 9312, 62, 15234, 1304, 796, 366, 7639, 18934, 415, 1]"
üß† ML Signal: Use of a specific data schema indicates a pattern in data handling and processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 1366, 32815, 9217, 257, 3912, 287, 1366, 9041, 290, 7587]",0.5,70,ml_signal,18,Use of a specific data schema indicates a pattern in data handling and processing,,57,"    entity_provider = ""joinquant""","[220, 220, 220, 9312, 62, 15234, 1304, 796, 366, 7639, 18934, 415, 1]"
‚úÖ Best Practice: Call to superclass constructor ensures proper initialization,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 23772, 19047, 1774, 37588]",0.5,89,best_practice,40,Call to superclass constructor ensures proper initialization,,70,"        level=IntervalLevel.LEVEL_1DAY,","[220, 220, 220, 220, 220, 220, 220, 1241, 28, 9492, 2100, 4971, 13, 2538, 18697, 62, 16, 26442, 11]"
üß† ML Signal: Tracking the use of compute_index_money_flow for feature importance,"[8582, 100, 254, 10373, 26484, 25, 37169, 262, 779, 286, 24061, 62, 9630, 62, 26316, 62, 11125, 329, 3895, 6817]",1.0,102,ml_signal,61,Tracking the use of compute_index_money_flow for feature importance,,89,"            level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 11]"
‚ö†Ô∏è SAST Risk (Medium): Storing sensitive information like username and password in code,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 520, 3255, 8564, 1321, 588, 20579, 290, 9206, 287, 2438]",0.5,123,sast_risk,63,Storing sensitive information like username and password in code,Medium,102,"            one_day_trading_minutes,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 530, 62, 820, 62, 2213, 4980, 62, 1084, 1769, 11]"
üß† ML Signal: Function definition with parameters indicating a pattern of generating IDs,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 286, 15453, 32373]",1.0,143,ml_signal,62,Function definition with parameters indicating a pattern of generating IDs,,123,"            kdata_use_begin_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 7890, 62, 1904, 62, 27471, 62, 2435, 11]"
üß† ML Signal: Usage of a function to generate an ID based on entity and timestamp,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 7716, 281, 4522, 1912, 319, 9312, 290, 41033]",0.5,159,ml_signal,64,Usage of a function to generate an ID based on entity and timestamp,,143,"            return_unfinished,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 403, 43952, 11]"
‚úÖ Best Practice: Using descriptive function and parameter names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 2163, 290, 11507, 3891, 329, 16287]",0.5,167,best_practice,65,Using descriptive function and parameter names for clarity,,159,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Method that triggers actions based on a condition,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 20022, 4028, 1912, 319, 257, 4006]",0.5,175,ml_signal,65,Method that triggers actions based on a condition,,167,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Instantiation and execution of a specific recorder class,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 290, 9706, 286, 257, 2176, 38156, 1398]",0.5,210,ml_signal,67,Instantiation and execution of a specific recorder class,,175,"        get_token(zvt_config[""jq_username""], zvt_config[""jq_password""], force=True)","[220, 220, 220, 220, 220, 220, 220, 651, 62, 30001, 7, 89, 36540, 62, 11250, 14692, 73, 80, 62, 29460, 33116, 1976, 36540, 62, 11250, 14692, 73, 80, 62, 28712, 33116, 2700, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled exceptions during execution,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 13269, 1141, 9706]",0.5,210,sast_risk,68,Potential for unhandled exceptions during execution,Low,210,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if `self.end_timestamp` is not properly validated before use.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 944, 13, 437, 62, 16514, 27823, 63, 318, 407, 6105, 31031, 878, 779, 13]",0.5,210,sast_risk,68,Potential risk if `self.end_timestamp` is not properly validated before use.,Low,210,,[]
üß† ML Signal: Usage of external function `get_money_flow` with specific parameters.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 4600, 1136, 62, 26316, 62, 11125, 63, 351, 2176, 10007, 13]",0.5,228,ml_signal,69,Usage of external function `get_money_flow` with specific parameters.,,210,"    def generate_domain_id(self, entity, original_data):","[220, 220, 220, 825, 7716, 62, 27830, 62, 312, 7, 944, 11, 9312, 11, 2656, 62, 7890, 2599]"
üß† ML Signal: Conditional logic affecting function call parameters.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 13891, 2163, 869, 10007, 13]",0.5,272,ml_signal,73,Conditional logic affecting function call parameters.,,228,        # Ê†πÊçÆ ‰∏™ËÇ°ËµÑÈáëÊµÅ ËÆ°ÁÆó Â§ßÁõòËµÑÈáëÊµÅ,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 254, 117, 162, 235, 106, 220, 10310, 103, 164, 224, 94, 164, 113, 226, 34932, 239, 38184, 223, 5525, 106, 94, 163, 106, 245, 36469, 100, 33566, 246, 164, 113, 226, 34932, 239, 38184, 223]"
‚úÖ Best Practice: Dropping NaN values to ensure data integrity.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 11013, 45, 3815, 284, 4155, 1366, 11540, 13]",1.0,293,best_practice,75,Dropping NaN values to ensure data integrity.,,272,            JoinquantIndexMoneyFlowRecorder().run(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15251, 40972, 15732, 26788, 37535, 6690, 2875, 22446, 5143, 3419]"
‚ö†Ô∏è SAST Risk (Low): Assumes `pd_is_not_null` correctly identifies non-null DataFrames.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 4600, 30094, 62, 271, 62, 1662, 62, 8423, 63, 9380, 21079, 1729, 12, 8423, 6060, 35439, 13]",0.5,314,sast_risk,75,Assumes `pd_is_not_null` correctly identifies non-null DataFrames.,Low,293,            JoinquantIndexMoneyFlowRecorder().run(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15251, 40972, 15732, 26788, 37535, 6690, 2875, 22446, 5143, 3419]"
üß† ML Signal: Adding a new column with a constant value.,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 5721, 351, 257, 6937, 1988, 13]",0.5,335,ml_signal,75,Adding a new column with a constant value.,,314,            JoinquantIndexMoneyFlowRecorder().run(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15251, 40972, 15732, 26788, 37535, 6690, 2875, 22446, 5143, 3419]"
‚úÖ Best Practice: Renaming columns for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 16287, 290, 15794, 13]",0.5,356,best_practice,75,Renaming columns for clarity and consistency.,,335,            JoinquantIndexMoneyFlowRecorder().run(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15251, 40972, 15732, 26788, 37535, 6690, 2875, 22446, 5143, 3419]"
‚úÖ Best Practice: Using a list to manage related column names.,"[26486, 227, 6705, 19939, 25, 8554, 257, 1351, 284, 6687, 3519, 5721, 3891, 13]",0.5,390,best_practice,98,Using a list to manage related column names.,,356,"                    ""net_amount_s"": ""net_small_inflows"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3262, 62, 17287, 62, 82, 1298, 366, 3262, 62, 17470, 62, 259, 44041, 1600]"
‚úÖ Best Practice: Converting data to numeric type with error handling.,"[26486, 227, 6705, 19939, 25, 35602, 889, 1366, 284, 35575, 2099, 351, 4049, 9041, 13]",0.5,415,best_practice,104,Converting data to numeric type with error handling.,,390,            # ËΩ¨Êç¢Âà∞Ê†áÂáÜfloat,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 5525, 121, 105, 162, 235, 95, 26344, 108, 43718, 229, 49035, 228, 22468]"
‚úÖ Best Practice: Dropping NaN values to ensure data integrity.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 11013, 45, 3815, 284, 4155, 1366, 11540, 13]",1.0,427,best_practice,111,Dropping NaN values to ensure data integrity.,,415,            ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
‚ö†Ô∏è SAST Risk (Low): Assumes `pd_is_not_null` correctly identifies non-null DataFrames.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 4600, 30094, 62, 271, 62, 1662, 62, 8423, 63, 9380, 21079, 1729, 12, 8423, 6060, 35439, 13]",0.5,439,sast_risk,111,Assumes `pd_is_not_null` correctly identifies non-null DataFrames.,Low,427,            ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Applying a transformation to a DataFrame column.,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 13389, 284, 257, 6060, 19778, 5721, 13]",0.5,457,ml_signal,114,Applying a transformation to a DataFrame column.,,439,            df = df.dropna(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 14781, 2616, 3419]"
‚úÖ Best Practice: Using a list to manage related column names.,"[26486, 227, 6705, 19939, 25, 8554, 257, 1351, 284, 6687, 3519, 5721, 3891, 13]",0.5,481,best_practice,116,Using a list to manage related column names.,,457,            if not pd_is_not_null(df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
‚úÖ Best Practice: Converting data to numeric type with error handling.,"[26486, 227, 6705, 19939, 25, 35602, 889, 1366, 284, 35575, 2099, 351, 4049, 9041, 13]",0.5,506,best_practice,125,Converting data to numeric type with error handling.,,481,"                ""net_medium_inflow_rate"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3262, 62, 24132, 62, 259, 11125, 62, 4873, 1600]"
‚úÖ Best Practice: Dropping NaN values to ensure data integrity.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 11013, 45, 3815, 284, 4155, 1366, 11540, 13]",1.0,518,best_practice,127,Dropping NaN values to ensure data integrity.,,506,            ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
‚ö†Ô∏è SAST Risk (Low): Assumes `pd_is_not_null` correctly identifies non-null DataFrames.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 4600, 30094, 62, 271, 62, 1662, 62, 8423, 63, 9380, 21079, 1729, 12, 8423, 6060, 35439, 13]",0.5,556,sast_risk,129,Assumes `pd_is_not_null` correctly identifies non-null DataFrames.,Low,518,"                df[col] = pd.to_numeric(df[col], errors=""coerce"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 279, 67, 13, 1462, 62, 77, 39223, 7, 7568, 58, 4033, 4357, 8563, 2625, 1073, 263, 344, 4943]"
üß† ML Signal: Applying a transformation to a DataFrame column.,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 13389, 284, 257, 6060, 19778, 5721, 13]",0.5,573,ml_signal,132,Applying a transformation to a DataFrame column.,,556,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Creating a new column based on arithmetic operations on existing columns.,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 5721, 1912, 319, 34768, 4560, 319, 4683, 15180, 13]",0.5,614,ml_signal,134,Creating a new column based on arithmetic operations on existing columns.,,573,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if `df[""net_main_inflow_rate""]` contains zeros.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 4600, 7568, 14692, 3262, 62, 12417, 62, 259, 11125, 62, 4873, 8973, 63, 4909, 1976, 27498, 13]",1.0,655,sast_risk,134,"Potential division by zero if `df[""net_main_inflow_rate""]` contains zeros.",Low,614,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
üß† ML Signal: Creating a new column based on arithmetic operations on existing columns.,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 5721, 1912, 319, 34768, 4560, 319, 4683, 15180, 13]",0.5,696,ml_signal,134,Creating a new column based on arithmetic operations on existing columns.,,655,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
üß† ML Signal: Adding a new column with a constant value.,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 5721, 351, 257, 6937, 1988, 13]",0.5,737,ml_signal,134,Adding a new column with a constant value.,,696,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
‚úÖ Best Practice: Converting string to datetime for consistency and operations.,"[26486, 227, 6705, 19939, 25, 35602, 889, 4731, 284, 4818, 8079, 329, 15794, 290, 4560, 13]",1.0,778,best_practice,134,Converting string to datetime for consistency and operations.,,737,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
üß† ML Signal: Adding a new column with a constant value.,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 5721, 351, 257, 6937, 1988, 13]",0.5,819,ml_signal,134,Adding a new column with a constant value.,,778,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
üß† ML Signal: Adding a new column with a constant value.,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 5721, 351, 257, 6937, 1988, 13]",0.5,860,ml_signal,134,Adding a new column with a constant value.,,819,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
‚úÖ Best Practice: Use of string formatting for constructing unique identifiers,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 33313, 329, 30580, 3748, 42814]",1.0,872,best_practice,127,Use of string formatting for constructing unique identifiers,,860,            ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Applying a function across DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 1973, 6060, 19778, 15274]",0.5,910,ml_signal,129,Applying a function across DataFrame rows,,872,"                df[col] = pd.to_numeric(df[col], errors=""coerce"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 279, 67, 13, 1462, 62, 77, 39223, 7, 7568, 58, 4033, 4357, 8563, 2625, 1073, 263, 344, 4943]"
üß† ML Signal: Dropping duplicates in a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 21045, 2105, 14184, 16856, 287, 257, 6060, 19778]",1.0,934,ml_signal,131,Dropping duplicates in a DataFrame,,910,            if not pd_is_not_null(df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
üß† ML Signal: Saving DataFrame to a database,"[8582, 100, 254, 10373, 26484, 25, 34689, 6060, 19778, 284, 257, 6831]",1.0,934,ml_signal,133,Saving DataFrame to a database,,934,,[]
üß† ML Signal: Running a specific function or class with a set of parameters,"[8582, 100, 254, 10373, 26484, 25, 18162, 257, 2176, 2163, 393, 1398, 351, 257, 900, 286, 10007]",0.5,975,ml_signal,134,Running a specific function or class with a set of parameters,,934,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"
üß† ML Signal: Defining __all__ for module exports,"[8582, 100, 254, 10373, 26484, 25, 2896, 3191, 11593, 439, 834, 329, 8265, 15319]",0.5,1016,ml_signal,134,Defining __all__ for module exports,,975,            df[inflow_rate_cols] = df[inflow_rate_cols].apply(lambda x: x / 100),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 60, 796, 47764, 58, 259, 11125, 62, 4873, 62, 4033, 82, 4083, 39014, 7, 50033, 2124, 25, 2124, 1220, 1802, 8]"

[
  {
    "line": 2,
    "text": "",
    "annotation": "\u2705 Best Practice: Import only necessary functions or classes to improve readability and performance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      691,
      3306,
      5499,
      393,
      6097,
      284,
      2987,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Import only necessary functions or classes to improve readability and performance"
  },
  {
    "line": 4,
    "text": "from jqdatapy.api import get_fundamentals",
    "annotation": "\u2705 Best Practice: Avoid using private modules or functions as they may change without notice",
    "confidence": 0.5,
    "tokens": [
      6738,
      474,
      80,
      19608,
      12826,
      13,
      15042,
      1330,
      651,
      62,
      10990,
      3263,
      874
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      1262,
      2839,
      13103,
      393,
      5499,
      355,
      484,
      743,
      1487,
      1231,
      4003
    ],
    "label": "best_practice",
    "reason": "Avoid using private modules or functions as they may change without notice"
  },
  {
    "line": 10,
    "text": "from zvt.recorders.joinquant.common import to_jq_entity_id",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern for time series data handling",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      7639,
      18934,
      415,
      13,
      11321,
      1330,
      284,
      62,
      73,
      80,
      62,
      26858,
      62,
      312
    ],
    "start_token": 13,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3862,
      27996,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      329,
      640,
      2168,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimeSeriesDataRecorder indicates a pattern for time series data handling"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific entity provider suggests a pattern for data source selection",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      9312,
      10131,
      5644,
      257,
      3912,
      329,
      1366,
      2723,
      6356
    ],
    "label": "ml_signal",
    "reason": "Use of a specific entity provider suggests a pattern for data source selection"
  },
  {
    "line": 14,
    "text": "class JqChinaStockValuationRecorder(TimeSeriesDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific schema indicates a pattern for data structure",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      7762,
      2288,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 34,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      32815,
      9217,
      257,
      3912,
      329,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Association with a specific schema indicates a pattern for data structure"
  },
  {
    "line": 16,
    "text": "    entity_schema = Stock",
    "annotation": "\ud83e\udde0 ML Signal: Consistent use of provider name suggests a pattern for data source consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15952,
      2611,
      796,
      10500
    ],
    "start_token": 50,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      779,
      286,
      10131,
      1438,
      5644,
      257,
      3912,
      329,
      1366,
      2723,
      15794
    ],
    "label": "ml_signal",
    "reason": "Consistent use of provider name suggests a pattern for data source consistency"
  },
  {
    "line": 18,
    "text": "    # \u6570\u636e\u6765\u81eajq",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific data schema indicates a pattern for data organization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      243,
      108,
      162,
      235,
      106,
      30266,
      98,
      164,
      229,
      103,
      73,
      80
    ],
    "start_token": 59,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      1366,
      32815,
      9217,
      257,
      3912,
      329,
      1366,
      4009
    ],
    "label": "ml_signal",
    "reason": "Use of a specific data schema indicates a pattern for data organization"
  },
  {
    "line": 15,
    "text": "    entity_provider = \"joinquant\"",
    "annotation": "\u2705 Best Practice: Use of max() ensures start date is not before a specific date",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 76,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3509,
      3419,
      19047,
      923,
      3128,
      318,
      407,
      878,
      257,
      2176,
      3128
    ],
    "label": "best_practice",
    "reason": "Use of max() ensures start date is not before a specific date"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of min() ensures end date does not exceed a specific range",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 89,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      949,
      3419,
      19047,
      886,
      3128,
      857,
      407,
      7074,
      257,
      2176,
      2837
    ],
    "label": "best_practice",
    "reason": "Use of min() ensures end date does not exceed a specific range"
  },
  {
    "line": 18,
    "text": "    # \u6570\u636e\u6765\u81eajq",
    "annotation": "\u2705 Best Practice: Type hinting for count variable improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      10545,
      243,
      108,
      162,
      235,
      106,
      30266,
      98,
      164,
      229,
      103,
      73,
      80
    ],
    "start_token": 89,
    "end_token": 106,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      954,
      7885,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for count variable improves code readability"
  },
  {
    "line": 21,
    "text": "    data_schema = StockValuation",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of fetching data from a database or API",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      10500,
      7762,
      2288
    ],
    "start_token": 106,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      21207,
      278,
      1366,
      422,
      257,
      6831,
      393,
      7824
    ],
    "label": "ml_signal",
    "reason": "Pattern of fetching data from a database or API"
  },
  {
    "line": 25,
    "text": "        end = min(now_pd_timestamp(), start + Timedelta(days=500))",
    "annotation": "\ud83e\udde0 ML Signal: Assigning entity attributes to DataFrame columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      796,
      949,
      7,
      2197,
      62,
      30094,
      62,
      16514,
      27823,
      22784,
      923,
      1343,
      5045,
      276,
      12514,
      7,
      12545,
      28,
      4059,
      4008
    ],
    "start_token": 117,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      9312,
      12608,
      284,
      6060,
      19778,
      15180
    ],
    "label": "ml_signal",
    "reason": "Assigning entity attributes to DataFrame columns"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting date strings to datetime objects",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 145,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      3128,
      13042,
      284,
      4818,
      8079,
      5563
    ],
    "label": "ml_signal",
    "reason": "Converting date strings to datetime objects"
  },
  {
    "line": 31,
    "text": "            table=\"valuation\", code=to_jq_entity_id(entity), date=to_time_str(end), count=min(count.days, 500)",
    "annotation": "\ud83e\udde0 ML Signal: Generating unique IDs using a combination of entity ID and timestamp",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3084,
      2625,
      2100,
      2288,
      1600,
      2438,
      28,
      1462,
      62,
      73,
      80,
      62,
      26858,
      62,
      312,
      7,
      26858,
      828,
      3128,
      28,
      1462,
      62,
      2435,
      62,
      2536,
      7,
      437,
      828,
      954,
      28,
      1084,
      7,
      9127,
      13,
      12545,
      11,
      5323,
      8
    ],
    "start_token": 145,
    "end_token": 194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2980,
      803,
      3748,
      32373,
      1262,
      257,
      6087,
      286,
      9312,
      4522,
      290,
      41033
    ],
    "label": "ml_signal",
    "reason": "Generating unique IDs using a combination of entity ID and timestamp"
  },
  {
    "line": 33,
    "text": "        df[\"entity_id\"] = entity.id",
    "annotation": "\u2705 Best Practice: Renaming columns for clarity and consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      9312,
      13,
      312
    ],
    "start_token": 194,
    "end_token": 211,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      16287,
      290,
      15794
    ],
    "label": "best_practice",
    "reason": "Renaming columns for clarity and consistency"
  },
  {
    "line": 38,
    "text": "        df = df.rename(",
    "annotation": "\ud83e\udde0 ML Signal: Data transformation by scaling values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      918,
      480,
      7
    ],
    "start_token": 211,
    "end_token": 225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      13389,
      416,
      20796,
      3815
    ],
    "label": "ml_signal",
    "reason": "Data transformation by scaling values"
  },
  {
    "line": 43,
    "text": "        df[\"market_cap\"] = df[\"market_cap\"] * 100000000",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of saving data to a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      1635,
      1802,
      10535
    ],
    "start_token": 225,
    "end_token": 248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      8914,
      1366,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Pattern of saving data to a database"
  },
  {
    "line": 43,
    "text": "        df[\"market_cap\"] = df[\"market_cap\"] * 100000000",
    "annotation": "\ud83e\udde0 ML Signal: Fetching and processing a list of stock IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      1635,
      1802,
      10535
    ],
    "start_token": 248,
    "end_token": 271,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      290,
      7587,
      257,
      1351,
      286,
      4283,
      32373
    ],
    "label": "ml_signal",
    "reason": "Fetching and processing a list of stock IDs"
  },
  {
    "line": 43,
    "text": "        df[\"market_cap\"] = df[\"market_cap\"] * 100000000",
    "annotation": "\ud83e\udde0 ML Signal: Outputting processed data to console",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      1635,
      1802,
      10535
    ],
    "start_token": 271,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25235,
      889,
      13686,
      1366,
      284,
      8624
    ],
    "label": "ml_signal",
    "reason": "Outputting processed data to console"
  },
  {
    "line": 43,
    "text": "        df[\"market_cap\"] = df[\"market_cap\"] * 100000000",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating and running a data recorder",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      1635,
      1802,
      10535
    ],
    "start_token": 294,
    "end_token": 317,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      290,
      2491,
      257,
      1366,
      38156
    ],
    "label": "ml_signal",
    "reason": "Instantiating and running a data recorder"
  },
  {
    "line": 43,
    "text": "        df[\"market_cap\"] = df[\"market_cap\"] * 100000000",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      796,
      47764,
      14692,
      10728,
      62,
      11128,
      8973,
      1635,
      1802,
      10535
    ],
    "start_token": 317,
    "end_token": 340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module"
  }
]
[
  {
    "line": 3,
    "text": "from zvt.domain import ReportPeriod",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from modules indicates usage patterns and dependencies",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      6358,
      5990,
      2101
    ],
    "start_token": 0,
    "end_token": 9,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      13103,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from modules indicates usage patterns and dependencies"
  },
  {
    "line": 3,
    "text": "from zvt.domain import ReportPeriod",
    "annotation": "\ud83e\udde0 ML Signal: Function uses conditional logic to map input to specific output values",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      6358,
      5990,
      2101
    ],
    "start_token": 9,
    "end_token": 18,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      26340,
      9156,
      284,
      3975,
      5128,
      284,
      2176,
      5072,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function uses conditional logic to map input to specific output values"
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for input value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 18,
    "end_token": 18,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      5128,
      1988
    ],
    "label": "ml_signal",
    "reason": "Conditional check for input value"
  },
  {
    "line": 8,
    "text": "        return trading_level.value",
    "annotation": "\ud83e\udde0 ML Signal: Specific condition and return value mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      7313,
      62,
      5715,
      13,
      8367
    ],
    "start_token": 18,
    "end_token": 31,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      4006,
      290,
      1441,
      1988,
      16855
    ],
    "label": "ml_signal",
    "reason": "Specific condition and return value mapping"
  },
  {
    "line": 11,
    "text": "        return \"60m\"",
    "annotation": "\ud83e\udde0 ML Signal: Specific condition and return value mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      1899,
      76,
      1
    ],
    "start_token": 31,
    "end_token": 43,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      4006,
      290,
      1441,
      1988,
      16855
    ],
    "label": "ml_signal",
    "reason": "Specific condition and return value mapping"
  },
  {
    "line": 14,
    "text": "    if trading_level == IntervalLevel.LEVEL_1DAY:",
    "annotation": "\ud83e\udde0 ML Signal: Specific condition and return value mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      7313,
      62,
      5715,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      26442,
      25
    ],
    "start_token": 43,
    "end_token": 61,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      4006,
      290,
      1441,
      1988,
      16855
    ],
    "label": "ml_signal",
    "reason": "Specific condition and return value mapping"
  },
  {
    "line": 17,
    "text": "        return \"1w\"",
    "annotation": "\ud83e\udde0 ML Signal: Specific condition and return value mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      16,
      86,
      1
    ],
    "start_token": 61,
    "end_token": 73,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      4006,
      290,
      1441,
      1988,
      16855
    ],
    "label": "ml_signal",
    "reason": "Specific condition and return value mapping"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Specific condition and return value mapping",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 73,
    "end_token": 73,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17377,
      4006,
      290,
      1441,
      1988,
      16855
    ],
    "label": "ml_signal",
    "reason": "Specific condition and return value mapping"
  },
  {
    "line": 16,
    "text": "    if trading_level == IntervalLevel.LEVEL_1WEEK:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific input parameter type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      7313,
      62,
      5715,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      54,
      33823,
      25
    ],
    "start_token": 73,
    "end_token": 92,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      5128,
      11507,
      2099
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific input parameter type"
  },
  {
    "line": 18,
    "text": "    if trading_level == IntervalLevel.LEVEL_1MON:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for specific entity types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      7313,
      62,
      5715,
      6624,
      4225,
      2100,
      4971,
      13,
      2538,
      18697,
      62,
      16,
      27857,
      25
    ],
    "start_token": 92,
    "end_token": 110,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      2176,
      9312,
      3858
    ],
    "label": "ml_signal",
    "reason": "Conditional check for specific entity types"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Nested conditional check for exchange type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 110,
    "end_token": 110,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      7287,
      26340,
      2198,
      329,
      5163,
      2099
    ],
    "label": "ml_signal",
    "reason": "Nested conditional check for exchange type"
  },
  {
    "line": 22,
    "text": "def to_jq_entity_id(security_item):",
    "annotation": "\u2705 Best Practice: Use f-string for better readability and performance",
    "confidence": 1.0,
    "tokens": [
      4299,
      284,
      62,
      73,
      80,
      62,
      26858,
      62,
      312,
      7,
      12961,
      62,
      9186,
      2599
    ],
    "start_token": 110,
    "end_token": 124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1365,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use f-string for better readability and performance"
  },
  {
    "line": 24,
    "text": "        if security_item.exchange == \"sh\":",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for another exchange type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2324,
      62,
      9186,
      13,
      1069,
      3803,
      6624,
      366,
      1477,
      1298
    ],
    "start_token": 124,
    "end_token": 142,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      1194,
      5163,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional check for another exchange type"
  },
  {
    "line": 26,
    "text": "        if security_item.exchange == \"sz\":",
    "annotation": "\u2705 Best Practice: Use f-string for better readability and performance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2324,
      62,
      9186,
      13,
      1069,
      3803,
      6624,
      366,
      82,
      89,
      1298
    ],
    "start_token": 142,
    "end_token": 161,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1365,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use f-string for better readability and performance"
  },
  {
    "line": 23,
    "text": "    if security_item.entity_type == \"stock\" or security_item.entity_type == \"index\":",
    "annotation": "\u2705 Best Practice: Use specific exception types instead of a bare except clause",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      2324,
      62,
      9186,
      13,
      26858,
      62,
      4906,
      6624,
      366,
      13578,
      1,
      393,
      2324,
      62,
      9186,
      13,
      26858,
      62,
      4906,
      6624,
      366,
      9630,
      1298
    ],
    "start_token": 161,
    "end_token": 188,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2176,
      6631,
      3858,
      2427,
      286,
      257,
      6247,
      2845,
      13444
    ],
    "label": "best_practice",
    "reason": "Use specific exception types instead of a bare except clause"
  },
  {
    "line": 31,
    "text": "    try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching all exceptions can hide unexpected errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 188,
    "end_token": 193,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      477,
      13269,
      460,
      7808,
      10059,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching all exceptions can hide unexpected errors"
  },
  {
    "line": 34,
    "text": "            exchange = \"sh\"",
    "annotation": "\ud83e\udde0 ML Signal: String formatting pattern for generating entity IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      796,
      366,
      1477,
      1
    ],
    "start_token": 193,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      3912,
      329,
      15453,
      9312,
      32373
    ],
    "label": "ml_signal",
    "reason": "String formatting pattern for generating entity IDs"
  },
  {
    "line": 34,
    "text": "            exchange = \"sh\"",
    "annotation": "\ud83e\udde0 ML Signal: Function uses a series of if statements to map input to output, indicating a pattern of discrete mapping.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      796,
      366,
      1477,
      1
    ],
    "start_token": 209,
    "end_token": 225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3544,
      257,
      2168,
      286,
      611,
      6299,
      284,
      3975,
      5128,
      284,
      5072,
      11,
      12739,
      257,
      3912,
      286,
      28810,
      16855,
      13
    ],
    "label": "ml_signal",
    "reason": "Function uses a series of if statements to map input to output, indicating a pattern of discrete mapping."
  },
  {
    "line": 47,
    "text": "    if jq_report_type == \"\u7b2c\u4e8c\u5b63\u5ea6\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for control flow can be disabled in production, leading to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      474,
      80,
      62,
      13116,
      62,
      4906,
      6624,
      366,
      163,
      105,
      105,
      12859,
      234,
      27764,
      96,
      41753,
      99,
      1298
    ],
    "start_token": 225,
    "end_token": 247,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      287,
      3227,
      11,
      3756,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for control flow can be disabled in production, leading to unexpected behavior."
  },
  {
    "line": 47,
    "text": "    if jq_report_type == \"\u7b2c\u4e8c\u5b63\u5ea6\":",
    "annotation": "\u2705 Best Practice: Use of __all__ to define public API of the module, improving code maintainability and clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      474,
      80,
      62,
      13116,
      62,
      4906,
      6624,
      366,
      163,
      105,
      105,
      12859,
      234,
      27764,
      96,
      41753,
      99,
      1298
    ],
    "start_token": 247,
    "end_token": 269,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      11,
      10068,
      2438,
      5529,
      1799,
      290,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __all__ to define public API of the module, improving code maintainability and clarity."
  }
]
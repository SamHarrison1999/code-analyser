[
  {
    "line": 2,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 6,
    "text": "from zvt.api.utils import china_stock_code_to_id",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      26791,
      1330,
      442,
      1437,
      62,
      13578,
      62,
      8189,
      62,
      1462,
      62,
      312
    ],
    "start_token": 6,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 8,
    "text": "from zvt.contract.recorder import Recorder, TimeSeriesDataRecorder",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      8344,
      2875,
      1330,
      3311,
      2875,
      11,
      3862,
      27996,
      6601,
      6690,
      2875
    ],
    "start_token": 24,
    "end_token": 41,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 10,
    "text": "from zvt.recorders.joinquant.common import to_entity_id, jq_to_report_period",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      7639,
      18934,
      415,
      13,
      11321,
      1330,
      284,
      62,
      26858,
      62,
      312,
      11,
      474,
      80,
      62,
      1462,
      62,
      13116,
      62,
      41007
    ],
    "start_token": 41,
    "end_token": 68,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 12,
    "text": "from zvt.utils.time_utils import to_time_str, date_time_by_interval, now_pd_timestamp, is_same_date",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      11,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      11,
      318,
      62,
      31642,
      62,
      4475
    ],
    "start_token": 68,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 105,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 16,
    "text": "    provider = \"joinquant\"",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 105,
    "end_token": 115,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 115,
    "end_token": 115,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 12,
    "text": "from zvt.utils.time_utils import to_time_str, date_time_by_interval, now_pd_timestamp, is_same_date",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating a common pattern for extending functionality",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536,
      11,
      3128,
      62,
      2435,
      62,
      1525,
      62,
      3849,
      2100,
      11,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      11,
      318,
      62,
      31642,
      62,
      4475
    ],
    "start_token": 115,
    "end_token": 152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      257,
      2219,
      3912,
      329,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating a common pattern for extending functionality"
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Class-level attributes provide clear and consistent configuration for instances",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 152,
    "end_token": 152,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12,
      5715,
      12608,
      2148,
      1598,
      290,
      6414,
      8398,
      329,
      10245
    ],
    "label": "best_practice",
    "reason": "Class-level attributes provide clear and consistent configuration for instances"
  },
  {
    "line": 15,
    "text": "class JqChinaFundRecorder(Recorder):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a data schema, indicating structured data handling",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      24553,
      6690,
      2875,
      7,
      6690,
      2875,
      2599
    ],
    "start_token": 152,
    "end_token": 163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1366,
      32815,
      11,
      12739,
      20793,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of a data schema, indicating structured data handling"
  },
  {
    "line": 34,
    "text": "                    limit=1,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite loop if pd_is_not_null(df) is always False",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      28,
      16,
      11
    ],
    "start_token": 163,
    "end_token": 186,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      9052,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      8,
      318,
      1464,
      10352
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite loop if pd_is_not_null(df) is always False"
  },
  {
    "line": 38,
    "text": "                if latest:",
    "annotation": "\u2705 Best Practice: Use rename with inplace=False for better readability and to avoid side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3452,
      25
    ],
    "start_token": 186,
    "end_token": 204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      36265,
      351,
      287,
      5372,
      28,
      25101,
      329,
      1365,
      1100,
      1799,
      290,
      284,
      3368,
      1735,
      3048
    ],
    "label": "best_practice",
    "reason": "Use rename with inplace=False for better readability and to avoid side effects"
  },
  {
    "line": 44,
    "text": "                    table=\"finance.FUND_MAIN_INFO\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for data transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3084,
      2625,
      69,
      14149,
      13,
      42296,
      35,
      62,
      5673,
      1268,
      62,
      10778,
      1600
    ],
    "start_token": 204,
    "end_token": 236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for data transformation"
  },
  {
    "line": 50,
    "text": "                    year_count = year_count + 1",
    "annotation": "\ud83e\udde0 ML Signal: Data persistence pattern to a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      62,
      9127,
      796,
      614,
      62,
      9127,
      1343,
      352
    ],
    "start_token": 236,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      30802,
      3912,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Data persistence pattern to a database"
  },
  {
    "line": 54,
    "text": "                    df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite loop if end_timestamp never matches now_pd_timestamp()",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      14692,
      16514,
      27823,
      8973,
      8
    ],
    "start_token": 264,
    "end_token": 303,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      9052,
      611,
      886,
      62,
      16514,
      27823,
      1239,
      7466,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      3419
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite loop if end_timestamp never matches now_pd_timestamp()"
  },
  {
    "line": 52,
    "text": "                if pd_is_not_null(df):",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 303,
    "end_token": 330,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3862,
      27996,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality"
  },
  {
    "line": 54,
    "text": "                    df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      14692,
      16514,
      27823,
      8973,
      8
    ],
    "start_token": 330,
    "end_token": 369,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 56,
    "text": "                    df[\"end_date\"] = pd.to_datetime(df[\"end_date\"])",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      437,
      62,
      4475,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      14692,
      437,
      62,
      4475,
      8973,
      8
    ],
    "start_token": 369,
    "end_token": 410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 58,
    "text": "                    df[\"code\"] = df[\"main_code\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      12417,
      62,
      8189,
      8973
    ],
    "start_token": 410,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 58,
    "text": "                    df[\"code\"] = df[\"main_code\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      12417,
      62,
      8189,
      8973
    ],
    "start_token": 440,
    "end_token": 470,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\u2705 Best Practice: Method name 'init_entities' suggests initialization, which is clear and descriptive.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 470,
    "end_token": 470,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      705,
      15003,
      62,
      298,
      871,
      6,
      5644,
      37588,
      11,
      543,
      318,
      1598,
      290,
      35644,
      13
    ],
    "label": "best_practice",
    "reason": "Method name 'init_entities' suggests initialization, which is clear and descriptive."
  },
  {
    "line": 58,
    "text": "                    df[\"code\"] = df[\"main_code\"]",
    "annotation": "\u2705 Best Practice: Using class method 'query_data' suggests a well-structured data access pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      12417,
      62,
      8189,
      8973
    ],
    "start_token": 470,
    "end_token": 500,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1398,
      2446,
      705,
      22766,
      62,
      7890,
      6,
      5644,
      257,
      880,
      12,
      7249,
      1522,
      1366,
      1895,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Using class method 'query_data' suggests a well-structured data access pattern."
  },
  {
    "line": 58,
    "text": "                    df[\"code\"] = df[\"main_code\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of 'query_data' method indicates a pattern for data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      12417,
      62,
      8189,
      8973
    ],
    "start_token": 500,
    "end_token": 530,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      22766,
      62,
      7890,
      6,
      2446,
      9217,
      257,
      3912,
      329,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of 'query_data' method indicates a pattern for data retrieval."
  },
  {
    "line": 62,
    "text": "                    df[\"exchange\"] = \"sz\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'entity_ids' and 'codes' suggests a pattern for filtering or identifying specific data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      1069,
      3803,
      8973,
      796,
      366,
      82,
      89,
      1
    ],
    "start_token": 530,
    "end_token": 559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      26858,
      62,
      2340,
      6,
      290,
      705,
      40148,
      6,
      5644,
      257,
      3912,
      329,
      25431,
      393,
      13720,
      2176,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of 'entity_ids' and 'codes' suggests a pattern for filtering or identifying specific data."
  },
  {
    "line": 65,
    "text": "                        f\"persist fund {operate_mode_id} list success {start_timestamp} to {end_timestamp}\"",
    "annotation": "\u2705 Best Practice: Use of named parameters improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      19276,
      396,
      1814,
      1391,
      3575,
      378,
      62,
      14171,
      62,
      312,
      92,
      1351,
      1943,
      1391,
      9688,
      62,
      16514,
      27823,
      92,
      284,
      1391,
      437,
      62,
      16514,
      27823,
      36786
    ],
    "start_token": 559,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of named parameters improves readability and maintainability."
  },
  {
    "line": 68,
    "text": "                if is_same_date(end_timestamp, now_pd_timestamp()):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'filters' are user-controlled, leading to injection attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      62,
      31642,
      62,
      4475,
      7,
      437,
      62,
      16514,
      27823,
      11,
      783,
      62,
      30094,
      62,
      16514,
      27823,
      3419,
      2599
    ],
    "start_token": 610,
    "end_token": 645,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      10379,
      1010,
      6,
      389,
      2836,
      12,
      14401,
      11,
      3756,
      284,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'filters' are user-controlled, leading to injection attacks."
  },
  {
    "line": 66,
    "text": "                    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for SQL injection if `entity.code` is not properly sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 645,
    "end_token": 665,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      4600,
      26858,
      13,
      8189,
      63,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for SQL injection if `entity.code` is not properly sanitized"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a query function with dynamic conditions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 665,
    "end_token": 665,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      12405,
      2163,
      351,
      8925,
      3403
    ],
    "label": "ml_signal",
    "reason": "Usage of a query function with dynamic conditions"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking for non-null DataFrame",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 665,
    "end_token": 665,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      1729,
      12,
      8423,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Checking for non-null DataFrame"
  },
  {
    "line": 81,
    "text": "        self.entities = Fund.query_data(",
    "annotation": "\u2705 Best Practice: Use of `rename` for clarity and consistency in column names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      298,
      871,
      796,
      7557,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 665,
    "end_token": 683,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4600,
      918,
      480,
      63,
      329,
      16287,
      290,
      15794,
      287,
      5721,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of `rename` for clarity and consistency in column names"
  },
  {
    "line": 85,
    "text": "            provider=self.entity_provider,",
    "annotation": "\ud83e\udde0 ML Signal: Function call to relate stock data to portfolio",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      28,
      944,
      13,
      26858,
      62,
      15234,
      1304,
      11
    ],
    "start_token": 683,
    "end_token": 703,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      15124,
      4283,
      1366,
      284,
      15320
    ],
    "label": "ml_signal",
    "reason": "Function call to relate stock data to portfolio"
  },
  {
    "line": 86,
    "text": "            filters=[Fund.underlying_asset_type.in_((\"\u80a1\u7968\u578b\", \"\u6df7\u5408\u578b\")), Fund.end_date.is_(None)],",
    "annotation": "\ud83e\udde0 ML Signal: Applying a transformation function to a DataFrame column",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      24553,
      13,
      4625,
      3157,
      62,
      562,
      316,
      62,
      4906,
      13,
      259,
      41052,
      7203,
      164,
      224,
      94,
      163,
      98,
      101,
      161,
      252,
      233,
      1600,
      366,
      162,
      115,
      115,
      28938,
      230,
      161,
      252,
      233,
      4943,
      828,
      7557,
      13,
      437,
      62,
      4475,
      13,
      271,
      41052,
      14202,
      8,
      4357
    ],
    "start_token": 703,
    "end_token": 761,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      13389,
      2163,
      284,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Applying a transformation function to a DataFrame column"
  },
  {
    "line": 87,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Creating a unique identifier by combining multiple fields",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 761,
    "end_token": 769,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      3748,
      27421,
      416,
      19771,
      3294,
      7032
    ],
    "label": "ml_signal",
    "reason": "Creating a unique identifier by combining multiple fields"
  },
  {
    "line": 92,
    "text": "            return None",
    "annotation": "\ud83e\udde0 ML Signal: Mapping report types to periods",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 769,
    "end_token": 782,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      989,
      3858,
      284,
      9574
    ],
    "label": "ml_signal",
    "reason": "Mapping report types to periods"
  },
  {
    "line": 95,
    "text": "            df = run_query(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data integrity risk if `df_to_db` does not handle exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      1057,
      62,
      22766,
      7
    ],
    "start_token": 782,
    "end_token": 799,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      11540,
      2526,
      611,
      4600,
      7568,
      62,
      1462,
      62,
      9945,
      63,
      857,
      407,
      5412,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data integrity risk if `df_to_db` does not handle exceptions"
  },
  {
    "line": 101,
    "text": "            if pd_is_not_null(df):",
    "annotation": "\ud83e\udde0 ML Signal: Logging success message with dynamic content",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 799,
    "end_token": 822,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1943,
      3275,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging success message with dynamic content"
  },
  {
    "line": 104,
    "text": "                # 0   8640569  159919   2018-07-01  2018-09-30  2018-10-26          403003        \u7b2c\u4e09\u5b63\u5ea6     1  601318  \u4e2d\u56fd\u5e73\u5b89  19869239.0  1.361043e+09        7.09",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on timestamp comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      657,
      220,
      220,
      9849,
      26598,
      3388,
      220,
      1315,
      2079,
      1129,
      220,
      220,
      2864,
      12,
      2998,
      12,
      486,
      220,
      2864,
      12,
      2931,
      12,
      1270,
      220,
      2864,
      12,
      940,
      12,
      2075,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2319,
      6200,
      18,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      105,
      105,
      49011,
      27764,
      96,
      41753,
      99,
      220,
      220,
      220,
      220,
      352,
      220,
      718,
      30273,
      1507,
      220,
      220,
      40792,
      32368,
      121,
      33176,
      111,
      22522,
      231,
      220,
      2757,
      3388,
      23516,
      13,
      15,
      220,
      352,
      13,
      2623,
      940,
      3559,
      68,
      10,
      2931,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      767,
      13,
      2931
    ],
    "start_token": 822,
    "end_token": 937,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      41033,
      7208
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on timestamp comparison"
  },
  {
    "line": 104,
    "text": "                # 0   8640569  159919   2018-07-01  2018-09-30  2018-10-26          403003        \u7b2c\u4e09\u5b63\u5ea6     1  601318  \u4e2d\u56fd\u5e73\u5b89  19869239.0  1.361043e+09        7.09",
    "annotation": "\ud83e\udde0 ML Signal: Entry point for running the recorder with specific codes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      657,
      220,
      220,
      9849,
      26598,
      3388,
      220,
      1315,
      2079,
      1129,
      220,
      220,
      2864,
      12,
      2998,
      12,
      486,
      220,
      2864,
      12,
      2931,
      12,
      1270,
      220,
      2864,
      12,
      940,
      12,
      2075,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2319,
      6200,
      18,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      105,
      105,
      49011,
      27764,
      96,
      41753,
      99,
      220,
      220,
      220,
      220,
      352,
      220,
      718,
      30273,
      1507,
      220,
      220,
      40792,
      32368,
      121,
      33176,
      111,
      22522,
      231,
      220,
      2757,
      3388,
      23516,
      13,
      15,
      220,
      352,
      13,
      2623,
      940,
      3559,
      68,
      10,
      2931,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      767,
      13,
      2931
    ],
    "start_token": 937,
    "end_token": 1052,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21617,
      966,
      329,
      2491,
      262,
      38156,
      351,
      2176,
      12416
    ],
    "label": "ml_signal",
    "reason": "Entry point for running the recorder with specific codes"
  },
  {
    "line": 104,
    "text": "                # 0   8640569  159919   2018-07-01  2018-09-30  2018-10-26          403003        \u7b2c\u4e09\u5b63\u5ea6     1  601318  \u4e2d\u56fd\u5e73\u5b89  19869239.0  1.361043e+09        7.09",
    "annotation": "\u2705 Best Practice: Use of `__all__` to define public API of the module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      657,
      220,
      220,
      9849,
      26598,
      3388,
      220,
      1315,
      2079,
      1129,
      220,
      220,
      2864,
      12,
      2998,
      12,
      486,
      220,
      2864,
      12,
      2931,
      12,
      1270,
      220,
      2864,
      12,
      940,
      12,
      2075,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2319,
      6200,
      18,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      105,
      105,
      49011,
      27764,
      96,
      41753,
      99,
      220,
      220,
      220,
      220,
      352,
      220,
      718,
      30273,
      1507,
      220,
      220,
      40792,
      32368,
      121,
      33176,
      111,
      22522,
      231,
      220,
      2757,
      3388,
      23516,
      13,
      15,
      220,
      352,
      13,
      2623,
      940,
      3559,
      68,
      10,
      2931,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      767,
      13,
      2931
    ],
    "start_token": 1052,
    "end_token": 1167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4600,
      834,
      439,
      834,
      63,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use of `__all__` to define public API of the module"
  }
]
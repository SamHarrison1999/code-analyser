annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,6,ml_signal,2,Importing specific functions from a module indicates selective usage patterns,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,6,ml_signal,4,Importing specific functions from a module indicates selective usage patterns,,6,,[]
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,24,ml_signal,6,Importing specific functions from a module indicates selective usage patterns,,6,from zvt.api.utils import china_stock_code_to_id,"[6738, 1976, 36540, 13, 15042, 13, 26791, 1330, 442, 1437, 62, 13578, 62, 8189, 62, 1462, 62, 312]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,41,ml_signal,8,Importing specific functions from a module indicates selective usage patterns,,24,"from zvt.contract.recorder import Recorder, TimeSeriesDataRecorder","[6738, 1976, 36540, 13, 28484, 13, 8344, 2875, 1330, 3311, 2875, 11, 3862, 27996, 6601, 6690, 2875]"
🧠 ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,68,ml_signal,10,Importing specific classes from a module indicates selective usage patterns,,41,"from zvt.recorders.joinquant.common import to_entity_id, jq_to_report_period","[6738, 1976, 36540, 13, 8344, 6361, 13, 7639, 18934, 415, 13, 11321, 1330, 284, 62, 26858, 62, 312, 11, 474, 80, 62, 1462, 62, 13116, 62, 41007]"
🧠 ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,83,ml_signal,12,Importing specific classes from a module indicates selective usage patterns,,68,from zvt.utils.time_utils import to_time_str,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 2435, 62, 2536]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,83,ml_signal,14,Importing specific functions from a module indicates selective usage patterns,,83,,[]
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,93,ml_signal,16,Importing specific functions from a module indicates selective usage patterns,,83,"    provider = ""joinquant""","[220, 220, 220, 10131, 796, 366, 7639, 18934, 415, 1]"
🧠 ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,118,ml_signal,18,Importing specific functions from a module indicates selective usage patterns,,93,"    def __init__(self, force_update=True, sleeping_time=10) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2700, 62, 19119, 28, 17821, 11, 11029, 62, 2435, 28, 940, 8, 4613, 6045, 25]"
"🧠 ML Signal: Inheritance from a base class, indicating a common pattern for extending functionality","[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2779, 1398, 11, 12739, 257, 2219, 3912, 329, 16610, 11244]",1.0,133,ml_signal,12,"Inheritance from a base class, indicating a common pattern for extending functionality",,118,from zvt.utils.time_utils import to_time_str,"[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 2435, 62, 2536]"
"🧠 ML Signal: Use of a class attribute to store constant values, indicating a pattern for configuration","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1398, 11688, 284, 3650, 6937, 3815, 11, 12739, 257, 3912, 329, 8398]",1.0,133,ml_signal,14,"Use of a class attribute to store constant values, indicating a pattern for configuration",,133,,[]
✅ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",1.0,133,best_practice,14,Use of default parameter values for flexibility and ease of use,,133,,[]
✅ Best Practice: Proper use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 45989, 779, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",0.5,143,best_practice,16,Proper use of super() to initialize the parent class,,133,"    provider = ""joinquant""","[220, 220, 220, 10131, 796, 366, 7639, 18934, 415, 1]"
✅ Best Practice: Setting the index to a specific column for better data manipulation,"[26486, 227, 6705, 19939, 25, 25700, 262, 6376, 284, 257, 2176, 5721, 329, 1365, 1366, 17512]",1.0,153,best_practice,16,Setting the index to a specific column for better data manipulation,,143,"    provider = ""joinquant""","[220, 220, 220, 10131, 796, 366, 7639, 18934, 415, 1]"
✅ Best Practice: Resetting index to make 'entity_id' a column again,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 284, 787, 705, 26858, 62, 312, 6, 257, 5721, 757]",1.0,174,best_practice,19,Resetting index to make 'entity_id' a column again,,153,"        super().__init__(force_update, sleeping_time)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 3174, 62, 19119, 11, 11029, 62, 2435, 8]"
✅ Best Practice: Renaming columns for consistency and clarity,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 15794, 290, 16287]",1.0,197,best_practice,21,Renaming columns for consistency and clarity,,174,"    def to_zvt_entity(self, df, entity_type, category=None):","[220, 220, 220, 825, 284, 62, 89, 36540, 62, 26858, 7, 944, 11, 47764, 11, 9312, 62, 4906, 11, 6536, 28, 14202, 2599]"
✅ Best Practice: Converting date strings to datetime objects for better date manipulation,"[26486, 227, 6705, 19939, 25, 35602, 889, 3128, 13042, 284, 4818, 8079, 5563, 329, 1365, 3128, 17512]",0.5,215,best_practice,23,Converting date strings to datetime objects for better date manipulation,,197,"        df.index.name = ""entity_id""","[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 13, 3672, 796, 366, 26858, 62, 312, 1]"
✅ Best Practice: Assigning 'timestamp' to 'list_date' for clarity,"[26486, 227, 6705, 19939, 25, 2195, 38944, 705, 16514, 27823, 6, 284, 705, 4868, 62, 4475, 6, 329, 16287]",1.0,231,best_practice,25,Assigning 'timestamp' to 'list_date' for clarity,,215,        # 上市日期,"[220, 220, 220, 220, 220, 220, 220, 1303, 220, 41468, 30585, 224, 33768, 98, 17312, 253]"
✅ Best Practice: Converting date strings to datetime objects for better date manipulation,"[26486, 227, 6705, 19939, 25, 35602, 889, 3128, 13042, 284, 4818, 8079, 5563, 329, 1365, 3128, 17512]",0.5,258,best_practice,27,Converting date strings to datetime objects for better date manipulation,,231,"        df[""timestamp""] = pd.to_datetime(df[""timestamp""])","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 16514, 27823, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 16514, 27823, 8973, 8]"
🧠 ML Signal: Usage of lambda function for transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 13389]",1.0,287,ml_signal,29,Usage of lambda function for transformation,,258,"        df[""end_date""] = pd.to_datetime(df[""end_date""])","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 437, 62, 4475, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 437, 62, 4475, 8973, 8]"
✅ Best Practice: Assigning 'entity_id' to 'id' for clarity,"[26486, 227, 6705, 19939, 25, 2195, 38944, 705, 26858, 62, 312, 6, 284, 705, 312, 6, 329, 16287]",1.0,334,best_practice,31,Assigning 'entity_id' to 'id' for clarity,,287,"        df[""entity_id""] = df[""entity_id""].apply(lambda x: to_entity_id(entity_type=entity_type, jq_code=x))","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 26858, 62, 312, 8973, 796, 47764, 14692, 26858, 62, 312, 1, 4083, 39014, 7, 50033, 2124, 25, 284, 62, 26858, 62, 312, 7, 26858, 62, 4906, 28, 26858, 62, 4906, 11, 474, 80, 62, 8189, 28, 87, 4008]"
✅ Best Practice: Storing 'entity_type' for each row for clarity,"[26486, 227, 6705, 19939, 25, 520, 3255, 705, 26858, 62, 4906, 6, 329, 1123, 5752, 329, 16287]",1.0,351,best_practice,33,Storing 'entity_type' for each row for clarity,,334,"        df[""entity_type""] = entity_type","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 26858, 62, 4906, 8973, 796, 9312, 62, 4906]"
🧠 ML Signal: Usage of lambda function for transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 13389]",1.0,383,ml_signal,35,Usage of lambda function for transformation,,351,"        df[""code""] = df[""entity_id""].apply(lambda x: get_entity_code(x))","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 26858, 62, 312, 1, 4083, 39014, 7, 50033, 2124, 25, 651, 62, 26858, 62, 8189, 7, 87, 4008]"
🧠 ML Signal: Usage of lambda function for transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 13389]",1.0,383,ml_signal,37,Usage of lambda function for transformation,,383,,[]
✅ Best Practice: Assigning 'display_name' to 'name' for clarity,"[26486, 227, 6705, 19939, 25, 2195, 38944, 705, 13812, 62, 3672, 6, 284, 705, 3672, 6, 329, 16287]",1.0,400,best_practice,39,Assigning 'display_name' to 'name' for clarity,,383,"            df[""category""] = category","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22872, 8973, 796, 6536]"
✅ Best Practice: Conditionally adding a column if 'category' is provided,"[26486, 227, 6705, 19939, 25, 9724, 8736, 4375, 257, 5721, 611, 705, 22872, 6, 318, 2810]",0.5,400,best_practice,42,Conditionally adding a column if 'category' is provided,,400,,[]
🧠 ML Signal: Inheritance from a base class indicates a pattern of code reuse and specialization,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2779, 1398, 9217, 257, 3912, 286, 2438, 32349, 290, 43135]",0.5,417,ml_signal,33,Inheritance from a base class indicates a pattern of code reuse and specialization,,400,"        df[""entity_type""] = entity_type","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 26858, 62, 4906, 8973, 796, 9312, 62, 4906]"
🧠 ML Signal: Assignment of a class attribute suggests a pattern of defining schema or structure,"[8582, 100, 254, 10373, 26484, 25, 50144, 286, 257, 1398, 11688, 5644, 257, 3912, 286, 16215, 32815, 393, 4645]",0.5,449,ml_signal,35,Assignment of a class attribute suggests a pattern of defining schema or structure,,417,"        df[""code""] = df[""entity_id""].apply(lambda x: get_entity_code(x))","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 26858, 62, 312, 1, 4083, 39014, 7, 50033, 2124, 25, 651, 62, 26858, 62, 8189, 7, 87, 4008]"
🧠 ML Signal: Method call pattern for converting securities to a specific entity type,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 23202, 16145, 284, 257, 2176, 9312, 2099]",0.5,481,ml_signal,35,Method call pattern for converting securities to a specific entity type,,449,"        df[""code""] = df[""entity_id""].apply(lambda x: get_entity_code(x))","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 26858, 62, 312, 1, 4083, 39014, 7, 50033, 2124, 25, 651, 62, 26858, 62, 8189, 7, 87, 4008]"
🧠 ML Signal: Pattern of persisting data to a database,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 2774, 9665, 1366, 284, 257, 6831]",0.5,481,ml_signal,37,Pattern of persisting data to a database,,481,,[]
⚠️ SAST Risk (Low): Potential risk of SQL injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 16363, 16954, 611, 17311, 389, 407, 5336, 36951]",0.5,491,sast_risk,38,Potential risk of SQL injection if inputs are not sanitized,Low,481,        if category:,"[220, 220, 220, 220, 220, 220, 220, 611, 6536, 25]"
🧠 ML Signal: Repeated pattern of persisting data with different schemas,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 3912, 286, 2774, 9665, 1366, 351, 1180, 3897, 5356]",0.5,491,ml_signal,40,Repeated pattern of persisting data with different schemas,,491,,[]
⚠️ SAST Risk (Low): Potential risk of SQL injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 16363, 16954, 611, 17311, 389, 407, 5336, 36951]",0.5,500,sast_risk,41,Potential risk of SQL injection if inputs are not sanitized,Low,491,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
✅ Best Practice: Logging success messages for better traceability and debugging,"[26486, 227, 6705, 19939, 25, 5972, 2667, 1943, 6218, 329, 1365, 12854, 1799, 290, 28769]",0.5,500,best_practice,43,Logging success messages for better traceability and debugging,,500,,[]
✅ Best Practice: Class definition should follow PEP 8 naming conventions for readability,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 329, 1100, 1799]",1.0,517,best_practice,39,Class definition should follow PEP 8 naming conventions for readability,,500,"            df[""category""] = category","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 22872, 8973, 796, 6536]"
🧠 ML Signal: Usage of class-level attributes for schema definition,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 12, 5715, 12608, 329, 32815, 6770]",0.5,526,ml_signal,41,Usage of class-level attributes for schema definition,,517,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
🧠 ML Signal: Method invocation pattern for running a process,"[8582, 100, 254, 10373, 26484, 25, 11789, 43219, 3912, 329, 2491, 257, 1429]",1.0,535,ml_signal,41,Method invocation pattern for running a process,,526,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
🧠 ML Signal: Data transformation pattern using a method call,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 3912, 1262, 257, 2446, 869]",0.5,535,ml_signal,43,Data transformation pattern using a method call,,535,,[]
🧠 ML Signal: Data persistence pattern to a database,"[8582, 100, 254, 10373, 26484, 25, 6060, 30802, 3912, 284, 257, 6831]",1.0,544,ml_signal,45,Data persistence pattern to a database,,535,    data_schema = Stock,"[220, 220, 220, 1366, 62, 15952, 2611, 796, 10500]"
✅ Best Practice: Logging for success confirmation,"[26486, 227, 6705, 19939, 25, 5972, 2667, 329, 1943, 12641]",0.5,552,best_practice,47,Logging for success confirmation,,544,    def run(self):,"[220, 220, 220, 825, 1057, 7, 944, 2599]"
🧠 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 3862, 27996, 6601, 6690, 2875, 9217, 257, 3912, 286, 16610, 11244]",1.0,552,ml_signal,46,Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality,,552,,[]
🧠 ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,575,ml_signal,48,Use of class attributes for configuration,,552,        # 抓取股票列表,"[220, 220, 220, 220, 220, 220, 220, 1303, 10545, 232, 241, 20998, 244, 164, 224, 94, 163, 98, 101, 26344, 245, 26193, 101]"
🧠 ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,616,ml_signal,50,Use of class attributes for configuration,,575,"        df_to_db(df_stock, data_schema=Stock, provider=self.provider, force_update=self.force_update)","[220, 220, 220, 220, 220, 220, 220, 47764, 62, 1462, 62, 9945, 7, 7568, 62, 13578, 11, 1366, 62, 15952, 2611, 28, 26207, 11, 10131, 28, 944, 13, 15234, 1304, 11, 2700, 62, 19119, 28, 944, 13, 3174, 62, 19119, 8]"
🧠 ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,629,ml_signal,51,Use of class attributes for configuration,,616,        # persist StockDetail too,"[220, 220, 220, 220, 220, 220, 220, 1303, 21160, 10500, 11242, 603, 1165]"
🧠 ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",1.0,629,ml_signal,56,Use of class attributes for configuration,,629,,[]
🧠 ML Signal: Usage of a specific database table and query conditions,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 6831, 3084, 290, 12405, 3403]",1.0,642,ml_signal,51,Usage of a specific database table and query conditions,,629,        # persist StockDetail too,"[220, 220, 220, 220, 220, 220, 220, 1303, 21160, 10500, 11242, 603, 1165]"
⚠️ SAST Risk (Low): Potential SQL injection if `entity.code` is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 4600, 26858, 13, 8189, 63, 318, 407, 5336, 36951]",1.0,642,sast_risk,57,Potential SQL injection if `entity.code` is not sanitized,Low,642,,[]
✅ Best Practice: Convert date strings to datetime objects for consistency,"[26486, 227, 6705, 19939, 25, 38240, 3128, 13042, 284, 4818, 8079, 5563, 329, 15794]",0.5,652,best_practice,59,Convert date strings to datetime objects for consistency,,642,    data_schema = Etf,"[220, 220, 220, 1366, 62, 15952, 2611, 796, 17906, 69]"
✅ Best Practice: Use of `rename` for clarity and consistency in column names,"[26486, 227, 6705, 19939, 25, 5765, 286, 4600, 918, 480, 63, 329, 16287, 290, 15794, 287, 5721, 3891]",0.5,660,best_practice,61,Use of `rename` for clarity and consistency in column names,,652,    def run(self):,"[220, 220, 220, 825, 1057, 7, 944, 2599]"
✅ Best Practice: Adjusting proportions to a standard scale,"[26486, 227, 6705, 19939, 25, 20292, 278, 23250, 284, 257, 3210, 5046]",0.5,704,best_practice,63,Adjusting proportions to a standard scale,,660,"        df_index = self.to_zvt_entity(get_all_securities(code=""etf""), entity_type=""etf"", category=""etf"")","[220, 220, 220, 220, 220, 220, 220, 47764, 62, 9630, 796, 2116, 13, 1462, 62, 89, 36540, 62, 26858, 7, 1136, 62, 439, 62, 2363, 10886, 7, 8189, 2625, 316, 69, 12340, 9312, 62, 4906, 2625, 316, 69, 1600, 6536, 2625, 316, 69, 4943]"
🧠 ML Signal: Transformation of data with a specific function,"[8582, 100, 254, 10373, 26484, 25, 49127, 286, 1366, 351, 257, 2176, 2163]",1.0,704,ml_signal,65,Transformation of data with a specific function,,704,,[]
🧠 ML Signal: Mapping stock codes to IDs,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 4283, 12416, 284, 32373]",0.5,725,ml_signal,67,Mapping stock codes to IDs,,704,"        self.logger.info(""persist etf list success"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7203, 19276, 396, 2123, 69, 1351, 1943, 4943]"
⚠️ SAST Risk (Low): Potential for ID collision if not unique,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4522, 17661, 611, 407, 3748]",1.0,725,sast_risk,69,Potential for ID collision if not unique,Low,725,,[]
✅ Best Practice: Convert date strings to datetime objects for consistency,"[26486, 227, 6705, 19939, 25, 38240, 3128, 13042, 284, 4818, 8079, 5563, 329, 15794]",0.5,743,best_practice,70,Convert date strings to datetime objects for consistency,,725,class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):,"[4871, 449, 80, 14581, 26207, 36, 27110, 13924, 13652, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"
🧠 ML Signal: Mapping report types to periods,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 989, 3858, 284, 9574]",1.0,761,ml_signal,70,Mapping report types to periods,,743,class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):,"[4871, 449, 80, 14581, 26207, 36, 27110, 13924, 13652, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"
🧠 ML Signal: Persisting transformed data to a database,"[8582, 100, 254, 10373, 26484, 25, 9467, 9665, 14434, 1366, 284, 257, 6831]",0.5,779,ml_signal,70,Persisting transformed data to a database,,761,class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):,"[4871, 449, 80, 14581, 26207, 36, 27110, 13924, 13652, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"
🧠 ML Signal: Logging successful operations,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4388, 4560]",1.0,797,ml_signal,70,Logging successful operations,,779,class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):,"[4871, 449, 80, 14581, 26207, 36, 27110, 13924, 13652, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"
🧠 ML Signal: Entry point for running the recorder with specific codes,"[8582, 100, 254, 10373, 26484, 25, 21617, 966, 329, 2491, 262, 38156, 351, 2176, 12416]",0.5,815,ml_signal,70,Entry point for running the recorder with specific codes,,797,class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):,"[4871, 449, 80, 14581, 26207, 36, 27110, 13924, 13652, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"
🧠 ML Signal: Definition of module exports,"[8582, 100, 254, 10373, 26484, 25, 30396, 286, 8265, 15319]",1.0,833,ml_signal,70,Definition of module exports,,815,class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):,"[4871, 449, 80, 14581, 26207, 36, 27110, 13924, 13652, 6690, 2875, 7, 7575, 27996, 6601, 6690, 2875, 2599]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,6,ml_signal,2,Importing specific functions from a module indicates selective usage patterns,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,6,ml_signal,4,Importing specific functions from a module indicates selective usage patterns,,6,,[]
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,24,ml_signal,6,Importing specific functions from a module indicates selective usage patterns,,6,from zvt.api.utils import china_stock_code_to_id,"[6738, 1976, 36540, 13, 15042, 13, 26791, 1330, 442, 1437, 62, 13578, 62, 8189, 62, 1462, 62, 312]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,41,ml_signal,8,Importing specific functions from a module indicates selective usage patterns,,24,"from zvt.contract.recorder import Recorder, TimeSeriesDataRecorder","[6738, 1976, 36540, 13, 28484, 13, 8344, 2875, 1330, 3311, 2875, 11, 3862, 27996, 6601, 6690, 2875]"
üß† ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,68,ml_signal,10,Importing specific classes from a module indicates selective usage patterns,,41,"from zvt.recorders.joinquant.common import to_entity_id, jq_to_report_period","[6738, 1976, 36540, 13, 8344, 6361, 13, 7639, 18934, 415, 13, 11321, 1330, 284, 62, 26858, 62, 312, 11, 474, 80, 62, 1462, 62, 13116, 62, 41007]"
üß† ML Signal: Importing specific classes from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,105,ml_signal,12,Importing specific classes from a module indicates selective usage patterns,,68,"from zvt.utils.time_utils import to_time_str, date_time_by_interval, now_pd_timestamp, is_same_date","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 2435, 62, 2536, 11, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11, 783, 62, 30094, 62, 16514, 27823, 11, 318, 62, 31642, 62, 4475]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,105,ml_signal,14,Importing specific functions from a module indicates selective usage patterns,,105,,[]
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,115,ml_signal,16,Importing specific functions from a module indicates selective usage patterns,,105,"    provider = ""joinquant""","[220, 220, 220, 10131, 796, 366, 7639, 18934, 415, 1]"
üß† ML Signal: Importing specific functions from a module indicates selective usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 21792, 8748, 7572]",1.0,115,ml_signal,18,Importing specific functions from a module indicates selective usage patterns,,115,,[]
"üß† ML Signal: Inheritance from a base class, indicating a common pattern for extending functionality","[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2779, 1398, 11, 12739, 257, 2219, 3912, 329, 16610, 11244]",0.5,152,ml_signal,12,"Inheritance from a base class, indicating a common pattern for extending functionality",,115,"from zvt.utils.time_utils import to_time_str, date_time_by_interval, now_pd_timestamp, is_same_date","[6738, 1976, 36540, 13, 26791, 13, 2435, 62, 26791, 1330, 284, 62, 2435, 62, 2536, 11, 3128, 62, 2435, 62, 1525, 62, 3849, 2100, 11, 783, 62, 30094, 62, 16514, 27823, 11, 318, 62, 31642, 62, 4475]"
‚úÖ Best Practice: Class-level attributes provide clear and consistent configuration for instances,"[26486, 227, 6705, 19939, 25, 5016, 12, 5715, 12608, 2148, 1598, 290, 6414, 8398, 329, 10245]",0.5,152,best_practice,13,Class-level attributes provide clear and consistent configuration for instances,,152,,[]
"üß† ML Signal: Use of a data schema, indicating structured data handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1366, 32815, 11, 12739, 20793, 1366, 9041]",0.5,163,ml_signal,15,"Use of a data schema, indicating structured data handling",,152,class JqChinaFundRecorder(Recorder):,"[4871, 449, 80, 14581, 24553, 6690, 2875, 7, 6690, 2875, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential infinite loop if pd_is_not_null(df) is always False,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 8, 318, 1464, 10352]",1.0,186,sast_risk,34,Potential infinite loop if pd_is_not_null(df) is always False,Low,163,"                    limit=1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 28, 16, 11]"
‚úÖ Best Practice: Use rename with inplace=False for better readability and to avoid side effects,"[26486, 227, 6705, 19939, 25, 5765, 36265, 351, 287, 5372, 28, 25101, 329, 1365, 1100, 1799, 290, 284, 3368, 1735, 3048]",1.0,204,best_practice,38,Use rename with inplace=False for better readability and to avoid side effects,,186,                if latest:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3452, 25]"
üß† ML Signal: Usage of lambda function for data transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 1366, 13389]",1.0,236,ml_signal,44,Usage of lambda function for data transformation,,204,"                    table=""finance.FUND_MAIN_INFO"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3084, 2625, 69, 14149, 13, 42296, 35, 62, 5673, 1268, 62, 10778, 1600]"
üß† ML Signal: Data persistence pattern to a database,"[8582, 100, 254, 10373, 26484, 25, 6060, 30802, 3912, 284, 257, 6831]",1.0,264,ml_signal,50,Data persistence pattern to a database,,236,                    year_count = year_count + 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 614, 62, 9127, 796, 614, 62, 9127, 1343, 352]"
‚ö†Ô∏è SAST Risk (Low): Potential infinite loop if end_timestamp never matches now_pd_timestamp(),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 611, 886, 62, 16514, 27823, 1239, 7466, 783, 62, 30094, 62, 16514, 27823, 3419]",1.0,303,sast_risk,54,Potential infinite loop if end_timestamp never matches now_pd_timestamp(),Low,264,"                    df[""timestamp""] = pd.to_datetime(df[""timestamp""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 16514, 27823, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 16514, 27823, 8973, 8]"
üß† ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 3862, 27996, 6601, 6690, 2875, 9217, 257, 3912, 286, 16610, 11244]",1.0,330,ml_signal,52,Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality,,303,                if pd_is_not_null(df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",0.5,369,ml_signal,54,Use of class attributes for configuration,,330,"                    df[""timestamp""] = pd.to_datetime(df[""timestamp""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 16514, 27823, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 16514, 27823, 8973, 8]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",0.5,410,ml_signal,56,Use of class attributes for configuration,,369,"                    df[""end_date""] = pd.to_datetime(df[""end_date""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 437, 62, 4475, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 437, 62, 4475, 8973, 8]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",0.5,440,ml_signal,58,Use of class attributes for configuration,,410,"                    df[""code""] = df[""main_code""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 12417, 62, 8189, 8973]"
üß† ML Signal: Use of class attributes for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12608, 329, 8398]",0.5,470,ml_signal,58,Use of class attributes for configuration,,440,"                    df[""code""] = df[""main_code""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 12417, 62, 8189, 8973]"
"‚úÖ Best Practice: Method name 'init_entities' suggests initialization, which is clear and descriptive.","[26486, 227, 6705, 19939, 25, 11789, 1438, 705, 15003, 62, 298, 871, 6, 5644, 37588, 11, 543, 318, 1598, 290, 35644, 13]",1.0,470,best_practice,57,"Method name 'init_entities' suggests initialization, which is clear and descriptive.",,470,,[]
‚úÖ Best Practice: Using class method 'query_data' suggests a well-structured data access pattern.,"[26486, 227, 6705, 19939, 25, 8554, 1398, 2446, 705, 22766, 62, 7890, 6, 5644, 257, 880, 12, 7249, 1522, 1366, 1895, 3912, 13]",0.5,500,best_practice,58,Using class method 'query_data' suggests a well-structured data access pattern.,,470,"                    df[""code""] = df[""main_code""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 12417, 62, 8189, 8973]"
üß† ML Signal: Usage of 'query_data' method indicates a pattern for data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 22766, 62, 7890, 6, 2446, 9217, 257, 3912, 329, 1366, 45069, 13]",0.5,530,ml_signal,58,Usage of 'query_data' method indicates a pattern for data retrieval.,,500,"                    df[""code""] = df[""main_code""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 8189, 8973, 796, 47764, 14692, 12417, 62, 8189, 8973]"
üß† ML Signal: Use of 'entity_ids' and 'codes' suggests a pattern for filtering or identifying specific data.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 26858, 62, 2340, 6, 290, 705, 40148, 6, 5644, 257, 3912, 329, 25431, 393, 13720, 2176, 1366, 13]",0.5,559,ml_signal,62,Use of 'entity_ids' and 'codes' suggests a pattern for filtering or identifying specific data.,,530,"                    df[""exchange""] = ""sz""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 1069, 3803, 8973, 796, 366, 82, 89, 1]"
‚úÖ Best Practice: Use of named parameters improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 10007, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,610,best_practice,65,Use of named parameters improves readability and maintainability.,,559,"                        f""persist fund {operate_mode_id} list success {start_timestamp} to {end_timestamp}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 19276, 396, 1814, 1391, 3575, 378, 62, 14171, 62, 312, 92, 1351, 1943, 1391, 9688, 62, 16514, 27823, 92, 284, 1391, 437, 62, 16514, 27823, 36786]"
"‚ö†Ô∏è SAST Risk (Low): Potential risk if 'filters' are user-controlled, leading to injection attacks.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 10379, 1010, 6, 389, 2836, 12, 14401, 11, 3756, 284, 16954, 3434, 13]",0.5,645,sast_risk,68,"Potential risk if 'filters' are user-controlled, leading to injection attacks.",Low,610,"                if is_same_date(end_timestamp, now_pd_timestamp()):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 62, 31642, 62, 4475, 7, 437, 62, 16514, 27823, 11, 783, 62, 30094, 62, 16514, 27823, 3419, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for SQL injection if `entity.code` is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 16363, 16954, 611, 4600, 26858, 13, 8189, 63, 318, 407, 6105, 5336, 36951]",0.5,665,sast_risk,66,Potential for SQL injection if `entity.code` is not properly sanitized,Low,645,                    ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of a query function with dynamic conditions,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 12405, 2163, 351, 8925, 3403]",0.5,665,ml_signal,70,Usage of a query function with dynamic conditions,,665,,[]
üß† ML Signal: Checking for non-null DataFrame,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 1729, 12, 8423, 6060, 19778]",0.5,665,ml_signal,78,Checking for non-null DataFrame,,665,,[]
‚úÖ Best Practice: Use of `rename` for clarity and consistency in column names,"[26486, 227, 6705, 19939, 25, 5765, 286, 4600, 918, 480, 63, 329, 16287, 290, 15794, 287, 5721, 3891]",0.5,683,best_practice,81,Use of `rename` for clarity and consistency in column names,,665,        self.entities = Fund.query_data(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 298, 871, 796, 7557, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Function call to relate stock data to portfolio,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 15124, 4283, 1366, 284, 15320]",0.5,703,ml_signal,85,Function call to relate stock data to portfolio,,683,"            provider=self.entity_provider,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 28, 944, 13, 26858, 62, 15234, 1304, 11]"
üß† ML Signal: Applying a transformation function to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 13389, 2163, 284, 257, 6060, 19778, 5721]",0.5,761,ml_signal,86,Applying a transformation function to a DataFrame column,,703,"            filters=[Fund.underlying_asset_type.in_((""ËÇ°Á•®Âûã"", ""Ê∑∑ÂêàÂûã"")), Fund.end_date.is_(None)],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16628, 41888, 24553, 13, 4625, 3157, 62, 562, 316, 62, 4906, 13, 259, 41052, 7203, 164, 224, 94, 163, 98, 101, 161, 252, 233, 1600, 366, 162, 115, 115, 28938, 230, 161, 252, 233, 4943, 828, 7557, 13, 437, 62, 4475, 13, 271, 41052, 14202, 8, 4357]"
üß† ML Signal: Creating a unique identifier by combining multiple fields,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 3748, 27421, 416, 19771, 3294, 7032]",0.5,769,ml_signal,87,Creating a unique identifier by combining multiple fields,,761,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Mapping report types to periods,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 989, 3858, 284, 9574]",0.5,782,ml_signal,92,Mapping report types to periods,,769,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚ö†Ô∏è SAST Risk (Low): Potential data integrity risk if `df_to_db` does not handle exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 11540, 2526, 611, 4600, 7568, 62, 1462, 62, 9945, 63, 857, 407, 5412, 13269]",0.5,799,sast_risk,95,Potential data integrity risk if `df_to_db` does not handle exceptions,Low,782,            df = run_query(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 1057, 62, 22766, 7]"
üß† ML Signal: Logging success message with dynamic content,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1943, 3275, 351, 8925, 2695]",0.5,822,ml_signal,101,Logging success message with dynamic content,,799,            if pd_is_not_null(df):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
üß† ML Signal: Conditional logic based on timestamp comparison,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 41033, 7208]",0.5,937,ml_signal,104,Conditional logic based on timestamp comparison,,822,                # 0   8640569  159919   2018-07-01  2018-09-30  2018-10-26          403003        Á¨¨‰∏âÂ≠£Â∫¶     1  601318  ‰∏≠ÂõΩÂπ≥ÂÆâ  19869239.0  1.361043e+09        7.09,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 657, 220, 220, 9849, 26598, 3388, 220, 1315, 2079, 1129, 220, 220, 2864, 12, 2998, 12, 486, 220, 2864, 12, 2931, 12, 1270, 220, 2864, 12, 940, 12, 2075, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2319, 6200, 18, 220, 220, 220, 220, 220, 220, 220, 13328, 105, 105, 49011, 27764, 96, 41753, 99, 220, 220, 220, 220, 352, 220, 718, 30273, 1507, 220, 220, 40792, 32368, 121, 33176, 111, 22522, 231, 220, 2757, 3388, 23516, 13, 15, 220, 352, 13, 2623, 940, 3559, 68, 10, 2931, 220, 220, 220, 220, 220, 220, 220, 767, 13, 2931]"
üß† ML Signal: Entry point for running the recorder with specific codes,"[8582, 100, 254, 10373, 26484, 25, 21617, 966, 329, 2491, 262, 38156, 351, 2176, 12416]",0.5,1052,ml_signal,104,Entry point for running the recorder with specific codes,,937,                # 0   8640569  159919   2018-07-01  2018-09-30  2018-10-26          403003        Á¨¨‰∏âÂ≠£Â∫¶     1  601318  ‰∏≠ÂõΩÂπ≥ÂÆâ  19869239.0  1.361043e+09        7.09,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 657, 220, 220, 9849, 26598, 3388, 220, 1315, 2079, 1129, 220, 220, 2864, 12, 2998, 12, 486, 220, 2864, 12, 2931, 12, 1270, 220, 2864, 12, 940, 12, 2075, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2319, 6200, 18, 220, 220, 220, 220, 220, 220, 220, 13328, 105, 105, 49011, 27764, 96, 41753, 99, 220, 220, 220, 220, 352, 220, 718, 30273, 1507, 220, 220, 40792, 32368, 121, 33176, 111, 22522, 231, 220, 2757, 3388, 23516, 13, 15, 220, 352, 13, 2623, 940, 3559, 68, 10, 2931, 220, 220, 220, 220, 220, 220, 220, 767, 13, 2931]"
‚úÖ Best Practice: Use of `__all__` to define public API of the module,"[26486, 227, 6705, 19939, 25, 5765, 286, 4600, 834, 439, 834, 63, 284, 8160, 1171, 7824, 286, 262, 8265]",0.5,1167,best_practice,104,Use of `__all__` to define public API of the module,,1052,                # 0   8640569  159919   2018-07-01  2018-09-30  2018-10-26          403003        Á¨¨‰∏âÂ≠£Â∫¶     1  601318  ‰∏≠ÂõΩÂπ≥ÂÆâ  19869239.0  1.361043e+09        7.09,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 657, 220, 220, 9849, 26598, 3388, 220, 1315, 2079, 1129, 220, 220, 2864, 12, 2998, 12, 486, 220, 2864, 12, 2931, 12, 1270, 220, 2864, 12, 940, 12, 2075, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2319, 6200, 18, 220, 220, 220, 220, 220, 220, 220, 13328, 105, 105, 49011, 27764, 96, 41753, 99, 220, 220, 220, 220, 352, 220, 718, 30273, 1507, 220, 220, 40792, 32368, 121, 33176, 111, 22522, 231, 220, 2757, 3388, 23516, 13, 15, 220, 352, 13, 2623, 940, 3559, 68, 10, 2931, 220, 220, 220, 220, 220, 220, 220, 767, 13, 2931]"

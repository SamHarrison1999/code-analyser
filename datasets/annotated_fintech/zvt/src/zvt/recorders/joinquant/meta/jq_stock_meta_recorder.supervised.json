[
  {
    "line": 2,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 6,
    "text": "from zvt.api.utils import china_stock_code_to_id",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      26791,
      1330,
      442,
      1437,
      62,
      13578,
      62,
      8189,
      62,
      1462,
      62,
      312
    ],
    "start_token": 6,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 8,
    "text": "from zvt.contract.recorder import Recorder, TimeSeriesDataRecorder",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      8344,
      2875,
      1330,
      3311,
      2875,
      11,
      3862,
      27996,
      6601,
      6690,
      2875
    ],
    "start_token": 24,
    "end_token": 41,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 10,
    "text": "from zvt.recorders.joinquant.common import to_entity_id, jq_to_report_period",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      7639,
      18934,
      415,
      13,
      11321,
      1330,
      284,
      62,
      26858,
      62,
      312,
      11,
      474,
      80,
      62,
      1462,
      62,
      13116,
      62,
      41007
    ],
    "start_token": 41,
    "end_token": 68,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 12,
    "text": "from zvt.utils.time_utils import to_time_str",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536
    ],
    "start_token": 68,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module indicates selective usage patterns"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 83,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 16,
    "text": "    provider = \"joinquant\"",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 83,
    "end_token": 93,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 18,
    "text": "    def __init__(self, force_update=True, sleeping_time=10) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions from a module indicates selective usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2700,
      62,
      19119,
      28,
      17821,
      11,
      11029,
      62,
      2435,
      28,
      940,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 93,
    "end_token": 118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      422,
      257,
      8265,
      9217,
      21792,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions from a module indicates selective usage patterns"
  },
  {
    "line": 12,
    "text": "from zvt.utils.time_utils import to_time_str",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating a common pattern for extending functionality",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536
    ],
    "start_token": 118,
    "end_token": 133,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      257,
      2219,
      3912,
      329,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating a common pattern for extending functionality"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a class attribute to store constant values, indicating a pattern for configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 133,
    "end_token": 133,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1398,
      11688,
      284,
      3650,
      6937,
      3815,
      11,
      12739,
      257,
      3912,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of a class attribute to store constant values, indicating a pattern for configuration"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 133,
    "end_token": 133,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 16,
    "text": "    provider = \"joinquant\"",
    "annotation": "\u2705 Best Practice: Proper use of super() to initialize the parent class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 133,
    "end_token": 143,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45989,
      779,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Proper use of super() to initialize the parent class"
  },
  {
    "line": 16,
    "text": "    provider = \"joinquant\"",
    "annotation": "\u2705 Best Practice: Setting the index to a specific column for better data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 143,
    "end_token": 153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      262,
      6376,
      284,
      257,
      2176,
      5721,
      329,
      1365,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Setting the index to a specific column for better data manipulation"
  },
  {
    "line": 19,
    "text": "        super().__init__(force_update, sleeping_time)",
    "annotation": "\u2705 Best Practice: Resetting index to make 'entity_id' a column again",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      3174,
      62,
      19119,
      11,
      11029,
      62,
      2435,
      8
    ],
    "start_token": 153,
    "end_token": 174,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      284,
      787,
      705,
      26858,
      62,
      312,
      6,
      257,
      5721,
      757
    ],
    "label": "best_practice",
    "reason": "Resetting index to make 'entity_id' a column again"
  },
  {
    "line": 21,
    "text": "    def to_zvt_entity(self, df, entity_type, category=None):",
    "annotation": "\u2705 Best Practice: Renaming columns for consistency and clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      284,
      62,
      89,
      36540,
      62,
      26858,
      7,
      944,
      11,
      47764,
      11,
      9312,
      62,
      4906,
      11,
      6536,
      28,
      14202,
      2599
    ],
    "start_token": 174,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      15794,
      290,
      16287
    ],
    "label": "best_practice",
    "reason": "Renaming columns for consistency and clarity"
  },
  {
    "line": 23,
    "text": "        df.index.name = \"entity_id\"",
    "annotation": "\u2705 Best Practice: Converting date strings to datetime objects for better date manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      9630,
      13,
      3672,
      796,
      366,
      26858,
      62,
      312,
      1
    ],
    "start_token": 197,
    "end_token": 215,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      3128,
      13042,
      284,
      4818,
      8079,
      5563,
      329,
      1365,
      3128,
      17512
    ],
    "label": "best_practice",
    "reason": "Converting date strings to datetime objects for better date manipulation"
  },
  {
    "line": 25,
    "text": "        # \u4e0a\u5e02\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Assigning 'timestamp' to 'list_date' for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      41468,
      30585,
      224,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 215,
    "end_token": 231,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      705,
      16514,
      27823,
      6,
      284,
      705,
      4868,
      62,
      4475,
      6,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Assigning 'timestamp' to 'list_date' for clarity"
  },
  {
    "line": 27,
    "text": "        df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])",
    "annotation": "\u2705 Best Practice: Converting date strings to datetime objects for better date manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      14692,
      16514,
      27823,
      8973,
      8
    ],
    "start_token": 231,
    "end_token": 258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      3128,
      13042,
      284,
      4818,
      8079,
      5563,
      329,
      1365,
      3128,
      17512
    ],
    "label": "best_practice",
    "reason": "Converting date strings to datetime objects for better date manipulation"
  },
  {
    "line": 29,
    "text": "        df[\"end_date\"] = pd.to_datetime(df[\"end_date\"])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      437,
      62,
      4475,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      14692,
      437,
      62,
      4475,
      8973,
      8
    ],
    "start_token": 258,
    "end_token": 287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for transformation"
  },
  {
    "line": 31,
    "text": "        df[\"entity_id\"] = df[\"entity_id\"].apply(lambda x: to_entity_id(entity_type=entity_type, jq_code=x))",
    "annotation": "\u2705 Best Practice: Assigning 'entity_id' to 'id' for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      312,
      8973,
      796,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      39014,
      7,
      50033,
      2124,
      25,
      284,
      62,
      26858,
      62,
      312,
      7,
      26858,
      62,
      4906,
      28,
      26858,
      62,
      4906,
      11,
      474,
      80,
      62,
      8189,
      28,
      87,
      4008
    ],
    "start_token": 287,
    "end_token": 334,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      705,
      26858,
      62,
      312,
      6,
      284,
      705,
      312,
      6,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Assigning 'entity_id' to 'id' for clarity"
  },
  {
    "line": 33,
    "text": "        df[\"entity_type\"] = entity_type",
    "annotation": "\u2705 Best Practice: Storing 'entity_type' for each row for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      9312,
      62,
      4906
    ],
    "start_token": 334,
    "end_token": 351,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      705,
      26858,
      62,
      4906,
      6,
      329,
      1123,
      5752,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Storing 'entity_type' for each row for clarity"
  },
  {
    "line": 35,
    "text": "        df[\"code\"] = df[\"entity_id\"].apply(lambda x: get_entity_code(x))",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      39014,
      7,
      50033,
      2124,
      25,
      651,
      62,
      26858,
      62,
      8189,
      7,
      87,
      4008
    ],
    "start_token": 351,
    "end_token": 383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for transformation"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for transformation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 383,
    "end_token": 383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for transformation"
  },
  {
    "line": 39,
    "text": "            df[\"category\"] = category",
    "annotation": "\u2705 Best Practice: Assigning 'display_name' to 'name' for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22872,
      8973,
      796,
      6536
    ],
    "start_token": 383,
    "end_token": 400,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      705,
      13812,
      62,
      3672,
      6,
      284,
      705,
      3672,
      6,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Assigning 'display_name' to 'name' for clarity"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\u2705 Best Practice: Conditionally adding a column if 'category' is provided",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 400,
    "end_token": 400,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      8736,
      4375,
      257,
      5721,
      611,
      705,
      22872,
      6,
      318,
      2810
    ],
    "label": "best_practice",
    "reason": "Conditionally adding a column if 'category' is provided"
  },
  {
    "line": 33,
    "text": "        df[\"entity_type\"] = entity_type",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class indicates a pattern of code reuse and specialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      26858,
      62,
      4906,
      8973,
      796,
      9312,
      62,
      4906
    ],
    "start_token": 400,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      9217,
      257,
      3912,
      286,
      2438,
      32349,
      290,
      43135
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class indicates a pattern of code reuse and specialization"
  },
  {
    "line": 35,
    "text": "        df[\"code\"] = df[\"entity_id\"].apply(lambda x: get_entity_code(x))",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of a class attribute suggests a pattern of defining schema or structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      39014,
      7,
      50033,
      2124,
      25,
      651,
      62,
      26858,
      62,
      8189,
      7,
      87,
      4008
    ],
    "start_token": 417,
    "end_token": 449,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      257,
      1398,
      11688,
      5644,
      257,
      3912,
      286,
      16215,
      32815,
      393,
      4645
    ],
    "label": "ml_signal",
    "reason": "Assignment of a class attribute suggests a pattern of defining schema or structure"
  },
  {
    "line": 35,
    "text": "        df[\"code\"] = df[\"entity_id\"].apply(lambda x: get_entity_code(x))",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for converting securities to a specific entity type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      8189,
      8973,
      796,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      39014,
      7,
      50033,
      2124,
      25,
      651,
      62,
      26858,
      62,
      8189,
      7,
      87,
      4008
    ],
    "start_token": 449,
    "end_token": 481,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      23202,
      16145,
      284,
      257,
      2176,
      9312,
      2099
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for converting securities to a specific entity type"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of persisting data to a database",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 481,
    "end_token": 481,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      2774,
      9665,
      1366,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Pattern of persisting data to a database"
  },
  {
    "line": 38,
    "text": "        if category:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of SQL injection if inputs are not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6536,
      25
    ],
    "start_token": 481,
    "end_token": 491,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      16363,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of SQL injection if inputs are not sanitized"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Repeated pattern of persisting data with different schemas",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 491,
    "end_token": 491,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      3912,
      286,
      2774,
      9665,
      1366,
      351,
      1180,
      3897,
      5356
    ],
    "label": "ml_signal",
    "reason": "Repeated pattern of persisting data with different schemas"
  },
  {
    "line": 41,
    "text": "        return df",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of SQL injection if inputs are not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 491,
    "end_token": 500,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      16363,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of SQL injection if inputs are not sanitized"
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u2705 Best Practice: Logging success messages for better traceability and debugging",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 500,
    "end_token": 500,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      1943,
      6218,
      329,
      1365,
      12854,
      1799,
      290,
      28769
    ],
    "label": "best_practice",
    "reason": "Logging success messages for better traceability and debugging"
  },
  {
    "line": 39,
    "text": "            df[\"category\"] = category",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      22872,
      8973,
      796,
      6536
    ],
    "start_token": 500,
    "end_token": 517,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions for readability"
  },
  {
    "line": 41,
    "text": "        return df",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class-level attributes for schema definition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 517,
    "end_token": 526,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12,
      5715,
      12608,
      329,
      32815,
      6770
    ],
    "label": "ml_signal",
    "reason": "Usage of class-level attributes for schema definition"
  },
  {
    "line": 41,
    "text": "        return df",
    "annotation": "\ud83e\udde0 ML Signal: Method invocation pattern for running a process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 526,
    "end_token": 535,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      43219,
      3912,
      329,
      2491,
      257,
      1429
    ],
    "label": "ml_signal",
    "reason": "Method invocation pattern for running a process"
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Data transformation pattern using a method call",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 535,
    "end_token": 535,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      13389,
      3912,
      1262,
      257,
      2446,
      869
    ],
    "label": "ml_signal",
    "reason": "Data transformation pattern using a method call"
  },
  {
    "line": 45,
    "text": "    data_schema = Stock",
    "annotation": "\ud83e\udde0 ML Signal: Data persistence pattern to a database",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      10500
    ],
    "start_token": 535,
    "end_token": 544,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      30802,
      3912,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Data persistence pattern to a database"
  },
  {
    "line": 47,
    "text": "    def run(self):",
    "annotation": "\u2705 Best Practice: Logging for success confirmation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 544,
    "end_token": 552,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      329,
      1943,
      12641
    ],
    "label": "best_practice",
    "reason": "Logging for success confirmation"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 552,
    "end_token": 552,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3862,
      27996,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality"
  },
  {
    "line": 48,
    "text": "        # \u6293\u53d6\u80a1\u7968\u5217\u8868",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10545,
      232,
      241,
      20998,
      244,
      164,
      224,
      94,
      163,
      98,
      101,
      26344,
      245,
      26193,
      101
    ],
    "start_token": 552,
    "end_token": 575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 50,
    "text": "        df_to_db(df_stock, data_schema=Stock, provider=self.provider, force_update=self.force_update)",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      1462,
      62,
      9945,
      7,
      7568,
      62,
      13578,
      11,
      1366,
      62,
      15952,
      2611,
      28,
      26207,
      11,
      10131,
      28,
      944,
      13,
      15234,
      1304,
      11,
      2700,
      62,
      19119,
      28,
      944,
      13,
      3174,
      62,
      19119,
      8
    ],
    "start_token": 575,
    "end_token": 616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 51,
    "text": "        # persist StockDetail too",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      21160,
      10500,
      11242,
      603,
      1165
    ],
    "start_token": 616,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 56,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class attributes for configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 629,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12608,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class attributes for configuration"
  },
  {
    "line": 51,
    "text": "        # persist StockDetail too",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific database table and query conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      21160,
      10500,
      11242,
      603,
      1165
    ],
    "start_token": 629,
    "end_token": 642,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      6831,
      3084,
      290,
      12405,
      3403
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific database table and query conditions"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if `entity.code` is not sanitized",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 642,
    "end_token": 642,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      4600,
      26858,
      13,
      8189,
      63,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if `entity.code` is not sanitized"
  },
  {
    "line": 59,
    "text": "    data_schema = Etf",
    "annotation": "\u2705 Best Practice: Convert date strings to datetime objects for consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      15952,
      2611,
      796,
      17906,
      69
    ],
    "start_token": 642,
    "end_token": 652,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3128,
      13042,
      284,
      4818,
      8079,
      5563,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert date strings to datetime objects for consistency"
  },
  {
    "line": 61,
    "text": "    def run(self):",
    "annotation": "\u2705 Best Practice: Use of `rename` for clarity and consistency in column names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      2599
    ],
    "start_token": 652,
    "end_token": 660,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4600,
      918,
      480,
      63,
      329,
      16287,
      290,
      15794,
      287,
      5721,
      3891
    ],
    "label": "best_practice",
    "reason": "Use of `rename` for clarity and consistency in column names"
  },
  {
    "line": 63,
    "text": "        df_index = self.to_zvt_entity(get_all_securities(code=\"etf\"), entity_type=\"etf\", category=\"etf\")",
    "annotation": "\u2705 Best Practice: Adjusting proportions to a standard scale",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      9630,
      796,
      2116,
      13,
      1462,
      62,
      89,
      36540,
      62,
      26858,
      7,
      1136,
      62,
      439,
      62,
      2363,
      10886,
      7,
      8189,
      2625,
      316,
      69,
      12340,
      9312,
      62,
      4906,
      2625,
      316,
      69,
      1600,
      6536,
      2625,
      316,
      69,
      4943
    ],
    "start_token": 660,
    "end_token": 704,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20292,
      278,
      23250,
      284,
      257,
      3210,
      5046
    ],
    "label": "best_practice",
    "reason": "Adjusting proportions to a standard scale"
  },
  {
    "line": 65,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Transformation of data with a specific function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 704,
    "end_token": 704,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49127,
      286,
      1366,
      351,
      257,
      2176,
      2163
    ],
    "label": "ml_signal",
    "reason": "Transformation of data with a specific function"
  },
  {
    "line": 67,
    "text": "        self.logger.info(\"persist etf list success\")",
    "annotation": "\ud83e\udde0 ML Signal: Mapping stock codes to IDs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7203,
      19276,
      396,
      2123,
      69,
      1351,
      1943,
      4943
    ],
    "start_token": 704,
    "end_token": 725,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      4283,
      12416,
      284,
      32373
    ],
    "label": "ml_signal",
    "reason": "Mapping stock codes to IDs"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for ID collision if not unique",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 725,
    "end_token": 725,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4522,
      17661,
      611,
      407,
      3748
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for ID collision if not unique"
  },
  {
    "line": 70,
    "text": "class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):",
    "annotation": "\u2705 Best Practice: Convert date strings to datetime objects for consistency",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      36,
      27110,
      13924,
      13652,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 725,
    "end_token": 743,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3128,
      13042,
      284,
      4818,
      8079,
      5563,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert date strings to datetime objects for consistency"
  },
  {
    "line": 70,
    "text": "class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Mapping report types to periods",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      36,
      27110,
      13924,
      13652,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 743,
    "end_token": 761,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      989,
      3858,
      284,
      9574
    ],
    "label": "ml_signal",
    "reason": "Mapping report types to periods"
  },
  {
    "line": 70,
    "text": "class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Persisting transformed data to a database",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      36,
      27110,
      13924,
      13652,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 761,
    "end_token": 779,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9467,
      9665,
      14434,
      1366,
      284,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Persisting transformed data to a database"
  },
  {
    "line": 70,
    "text": "class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Logging successful operations",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      36,
      27110,
      13924,
      13652,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 779,
    "end_token": 797,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      4388,
      4560
    ],
    "label": "ml_signal",
    "reason": "Logging successful operations"
  },
  {
    "line": 70,
    "text": "class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Entry point for running the recorder with specific codes",
    "confidence": 0.5,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      36,
      27110,
      13924,
      13652,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 797,
    "end_token": 815,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21617,
      966,
      329,
      2491,
      262,
      38156,
      351,
      2176,
      12416
    ],
    "label": "ml_signal",
    "reason": "Entry point for running the recorder with specific codes"
  },
  {
    "line": 70,
    "text": "class JqChinaStockEtfPortfolioRecorder(TimeSeriesDataRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Definition of module exports",
    "confidence": 1.0,
    "tokens": [
      4871,
      449,
      80,
      14581,
      26207,
      36,
      27110,
      13924,
      13652,
      6690,
      2875,
      7,
      7575,
      27996,
      6601,
      6690,
      2875,
      2599
    ],
    "start_token": 815,
    "end_token": 833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      8265,
      15319
    ],
    "label": "ml_signal",
    "reason": "Definition of module exports"
  }
]
[
  {
    "line": 2,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 6,
    "text": "from zvt.contract.recorder import TimeSeriesDataRecorder",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      8344,
      2875,
      1330,
      3862,
      27996,
      6601,
      6690,
      2875
    ],
    "start_token": 6,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 8,
    "text": "from zvt.utils.time_utils import to_time_str",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536
    ],
    "start_token": 20,
    "end_token": 35,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 35,
    "end_token": 35,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 8,
    "text": "from zvt.utils.time_utils import to_time_str",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality for time series data.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      2435,
      62,
      26791,
      1330,
      284,
      62,
      2435,
      62,
      2536
    ],
    "start_token": 35,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      3862,
      27996,
      6601,
      6690,
      2875,
      9217,
      257,
      3912,
      286,
      16610,
      11244,
      329,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Inheritance from TimeSeriesDataRecorder indicates a pattern of extending functionality for time series data."
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific data provider can indicate a preference or dependency on certain data sources.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 50,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      1366,
      10131,
      460,
      7603,
      257,
      12741,
      393,
      20203,
      319,
      1728,
      1366,
      4237,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a specific data provider can indicate a preference or dependency on certain data sources."
  },
  {
    "line": 12,
    "text": "    entity_provider = \"joinquant\"",
    "annotation": "\ud83e\udde0 ML Signal: Association with a specific schema suggests a pattern of data organization and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 50,
    "end_token": 63,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5396,
      351,
      257,
      2176,
      32815,
      5644,
      257,
      3912,
      286,
      1366,
      4009,
      290,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Association with a specific schema suggests a pattern of data organization and usage."
  },
  {
    "line": 12,
    "text": "    entity_provider = \"joinquant\"",
    "annotation": "\ud83e\udde0 ML Signal: Repeated use of the same provider name reinforces the dependency pattern on this data source.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 63,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      779,
      286,
      262,
      976,
      10131,
      1438,
      41125,
      262,
      20203,
      3912,
      319,
      428,
      1366,
      2723,
      13
    ],
    "label": "ml_signal",
    "reason": "Repeated use of the same provider name reinforces the dependency pattern on this data source."
  },
  {
    "line": 12,
    "text": "    entity_provider = \"joinquant\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific data schema indicates a pattern of handling and processing stock trade day data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      15234,
      1304,
      796,
      366,
      7639,
      18934,
      415,
      1
    ],
    "start_token": 76,
    "end_token": 89,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      1366,
      32815,
      9217,
      257,
      3912,
      286,
      9041,
      290,
      7587,
      4283,
      3292,
      1110,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a specific data schema indicates a pattern of handling and processing stock trade day data."
  },
  {
    "line": 26,
    "text": "        real_time=False,",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's __init__ method ensures proper initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      28,
      25101,
      11
    ],
    "start_token": 89,
    "end_token": 102,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's __init__ method ensures proper initialization."
  },
  {
    "line": 26,
    "text": "        real_time=False,",
    "annotation": "\ud83e\udde0 ML Signal: The use of a boolean flag for force_update indicates a pattern for conditional behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      28,
      25101,
      11
    ],
    "start_token": 102,
    "end_token": 115,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      25131,
      6056,
      329,
      2700,
      62,
      19119,
      9217,
      257,
      3912,
      329,
      26340,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a boolean flag for force_update indicates a pattern for conditional behavior."
  },
  {
    "line": 26,
    "text": "        real_time=False,",
    "annotation": "\ud83e\udde0 ML Signal: The sleeping_time parameter suggests a pattern for rate limiting or throttling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      28,
      25101,
      11
    ],
    "start_token": 115,
    "end_token": 128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      11029,
      62,
      2435,
      11507,
      5644,
      257,
      3912,
      329,
      2494,
      15637,
      393,
      46692,
      1359,
      13
    ],
    "label": "ml_signal",
    "reason": "The sleeping_time parameter suggests a pattern for rate limiting or throttling."
  },
  {
    "line": 41,
    "text": "            ignore_failed=True,",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded default values like codes=[\"000001\"] can indicate default behavior or settings.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      47904,
      28,
      17821,
      11
    ],
    "start_token": 128,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4277,
      3815,
      588,
      12416,
      28,
      14692,
      2388,
      486,
      8973,
      460,
      7603,
      4277,
      4069,
      393,
      6460,
      13
    ],
    "label": "ml_signal",
    "reason": "Hardcoded default values like codes=[\"000001\"] can indicate default behavior or settings."
  },
  {
    "line": 41,
    "text": "            ignore_failed=True,",
    "annotation": "\ud83e\udde0 ML Signal: The use of a boolean flag for day_data indicates a pattern for conditional behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      47904,
      28,
      17821,
      11
    ],
    "start_token": 145,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      25131,
      6056,
      329,
      1110,
      62,
      7890,
      9217,
      257,
      3912,
      329,
      26340,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a boolean flag for day_data indicates a pattern for conditional behavior."
  },
  {
    "line": 41,
    "text": "            ignore_failed=True,",
    "annotation": "\ud83e\udde0 ML Signal: The use of a boolean flag for ignore_failed indicates a pattern for error handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      47904,
      28,
      17821,
      11
    ],
    "start_token": 162,
    "end_token": 179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      25131,
      6056,
      329,
      8856,
      62,
      47904,
      9217,
      257,
      3912,
      329,
      4049,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a boolean flag for ignore_failed indicates a pattern for error handling."
  },
  {
    "line": 42,
    "text": "            real_time=real_time,",
    "annotation": "\ud83e\udde0 ML Signal: The use of a boolean flag for real_time indicates a pattern for conditional behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      2435,
      28,
      5305,
      62,
      2435,
      11
    ],
    "start_token": 179,
    "end_token": 198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      257,
      25131,
      6056,
      329,
      1103,
      62,
      2435,
      9217,
      257,
      3912,
      329,
      26340,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of a boolean flag for real_time indicates a pattern for conditional behavior."
  },
  {
    "line": 44,
    "text": "            start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: The fix_duplicate_way parameter suggests a pattern for handling duplicate data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 198,
    "end_token": 219,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      11507,
      5644,
      257,
      3912,
      329,
      9041,
      23418,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "The fix_duplicate_way parameter suggests a pattern for handling duplicate data."
  },
  {
    "line": 43,
    "text": "            fix_duplicate_way=fix_duplicate_way,",
    "annotation": "\u2705 Best Practice: Consider checking if 'dates' is empty to avoid potential errors in subsequent operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4259,
      62,
      646,
      489,
      5344,
      62,
      1014,
      28,
      13049,
      62,
      646,
      489,
      5344,
      62,
      1014,
      11
    ],
    "start_token": 219,
    "end_token": 246,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      10627,
      611,
      705,
      19581,
      6,
      318,
      6565,
      284,
      3368,
      2785,
      8563,
      287,
      8840,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Consider checking if 'dates' is empty to avoid potential errors in subsequent operations."
  },
  {
    "line": 46,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about dates can be useful for understanding data processing patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 246,
    "end_token": 254,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      9667,
      460,
      307,
      4465,
      329,
      4547,
      1366,
      7587,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging information about dates can be useful for understanding data processing patterns."
  },
  {
    "line": 48,
    "text": "    def record(self, entity, start, end, size, timestamps):",
    "annotation": "\u2705 Best Practice: Ensure that the 'dates' are valid and correctly formatted before conversion.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1700,
      7,
      944,
      11,
      9312,
      11,
      923,
      11,
      886,
      11,
      2546,
      11,
      4628,
      395,
      9430,
      2599
    ],
    "start_token": 254,
    "end_token": 274,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      705,
      19581,
      6,
      389,
      4938,
      290,
      9380,
      39559,
      878,
      11315,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the 'dates' are valid and correctly formatted before conversion."
  },
  {
    "line": 50,
    "text": "        dates = get_trade_days(date=to_time_str(start))",
    "annotation": "\ud83e\udde0 ML Signal: Using list comprehensions for data transformation is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9667,
      796,
      651,
      62,
      25351,
      62,
      12545,
      7,
      4475,
      28,
      1462,
      62,
      2435,
      62,
      2536,
      7,
      9688,
      4008
    ],
    "start_token": 274,
    "end_token": 299,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      1351,
      8569,
      507,
      329,
      1366,
      13389,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Using list comprehensions for data transformation is a common pattern."
  },
  {
    "line": 52,
    "text": "        self.logger.info(f\"add dates:{dates}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoding 'entity_id' may lead to inflexibility or errors if the entity changes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      10951,
      7,
      69,
      1,
      2860,
      9667,
      29164,
      19581,
      92,
      4943
    ],
    "start_token": 299,
    "end_token": 321,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      66,
      7656,
      705,
      26858,
      62,
      312,
      6,
      743,
      1085,
      284,
      1167,
      2588,
      2247,
      393,
      8563,
      611,
      262,
      9312,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoding 'entity_id' may lead to inflexibility or errors if the entity changes."
  },
  {
    "line": 53,
    "text": "        df[\"timestamp\"] = pd.to_datetime(dates)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure 'df_to_db' handles SQL injection and data validation properly.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      19581,
      8
    ],
    "start_token": 321,
    "end_token": 344,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      705,
      7568,
      62,
      1462,
      62,
      9945,
      6,
      17105,
      16363,
      16954,
      290,
      1366,
      21201,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure 'df_to_db' handles SQL injection and data validation properly."
  },
  {
    "line": 53,
    "text": "        df[\"timestamp\"] = pd.to_datetime(dates)",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating and running a class in the main block is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      19581,
      8
    ],
    "start_token": 344,
    "end_token": 367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      290,
      2491,
      257,
      1398,
      287,
      262,
      1388,
      2512,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiating and running a class in the main block is a common pattern."
  },
  {
    "line": 53,
    "text": "        df[\"timestamp\"] = pd.to_datetime(dates)",
    "annotation": "\u2705 Best Practice: Use '__all__' to explicitly declare the public API of the module.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      14692,
      16514,
      27823,
      8973,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      19581,
      8
    ],
    "start_token": 367,
    "end_token": 390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      834,
      439,
      834,
      6,
      284,
      11777,
      13627,
      262,
      1171,
      7824,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Use '__all__' to explicitly declare the public API of the module."
  }
]
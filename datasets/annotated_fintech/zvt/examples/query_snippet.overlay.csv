annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,6,best_practice,2,Grouping imports from the same module together improves readability.,,0,from sqlalchemy import func,"[6738, 44161, 282, 26599, 1330, 25439]"
‚úÖ Best Practice: Importing specific functions or classes instead of the entire module can improve code clarity and reduce memory usage.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 2427, 286, 262, 2104, 8265, 460, 2987, 2438, 16287, 290, 4646, 4088, 8748, 13]",0.5,16,best_practice,6,Importing specific functions or classes instead of the entire module can improve code clarity and reduce memory usage.,,6,"from zvt.domain import Stock, BlockStock","[6738, 1976, 36540, 13, 27830, 1330, 10500, 11, 9726, 26207]"
‚ö†Ô∏è SAST Risk (Medium): Using json_extract with user-controlled input can lead to SQL injection if not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 33918, 62, 2302, 974, 351, 2836, 12, 14401, 5128, 460, 1085, 284, 16363, 16954, 611, 407, 6105, 5336, 36951, 13]",0.5,28,sast_risk,7,Using json_extract with user-controlled input can lead to SQL injection if not properly sanitized.,Medium,16,from zvt.recorders.em import em_api,"[6738, 1976, 36540, 13, 8344, 6361, 13, 368, 1330, 795, 62, 15042]"
‚úÖ Best Practice: Consider using parameterized queries to prevent SQL injection.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 11507, 1143, 20743, 284, 2948, 16363, 16954, 13]",0.5,42,best_practice,8,Consider using parameterized queries to prevent SQL injection.,,28,from zvt.tag.tag_schemas import StockTags,"[6738, 1976, 36540, 13, 12985, 13, 12985, 62, 1416, 4411, 292, 1330, 10500, 36142]"
üß† ML Signal: Usage of JSON path expressions in queries can indicate complex data structures.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19449, 3108, 14700, 287, 20743, 460, 7603, 3716, 1366, 8573, 13]",0.5,47,ml_signal,11,Usage of JSON path expressions in queries can indicate complex data structures.,,42,def query_json():,"[4299, 12405, 62, 17752, 33529]"
‚úÖ Best Practice: Use logging instead of print statements for better control over output and log levels.,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 6299, 329, 1365, 1630, 625, 5072, 290, 2604, 2974, 13]",1.0,59,best_practice,13,Use logging instead of print statements for better control over output and log levels.,,47,    df = StockTags.query_data(,"[220, 220, 220, 47764, 796, 10500, 36142, 13, 22766, 62, 7890, 7]"
"üß† ML Signal: Function definition with no parameters, indicating a potential pattern for data retrieval functions","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 2785, 3912, 329, 1366, 45069, 5499]",1.0,59,ml_signal,12,"Function definition with no parameters, indicating a potential pattern for data retrieval functions",,59,,[]
üß† ML Signal: Querying a database table with specific filters and columns,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 257, 6831, 3084, 351, 2176, 16628, 290, 15180]",0.5,109,ml_signal,14,Querying a database table with specific filters and columns,,59,"        filters=[func.json_extract(StockTags.sub_tags, '$.""‰ΩéÁ©∫ÁªèÊµé""') != None], columns=[StockTags.sub_tags]","[220, 220, 220, 220, 220, 220, 220, 16628, 41888, 20786, 13, 17752, 62, 2302, 974, 7, 26207, 36142, 13, 7266, 62, 31499, 11, 705, 3, 526, 19526, 236, 163, 102, 118, 163, 119, 237, 38184, 236, 1, 11537, 14512, 6045, 4357, 15180, 41888, 26207, 36142, 13, 7266, 62, 31499, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential for SQL injection if filters or columns are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 16363, 16954, 611, 16628, 393, 15180, 389, 407, 6105, 5336, 36951]",1.0,113,sast_risk,15,Potential for SQL injection if filters or columns are not properly sanitized,Low,109,    ),"[220, 220, 220, 1267]"
"üß† ML Signal: Converting a DataFrame column to a list, indicating a common data transformation pattern","[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 6060, 19778, 5721, 284, 257, 1351, 11, 12739, 257, 2219, 1366, 13389, 3912]",1.0,113,ml_signal,17,"Converting a DataFrame column to a list, indicating a common data transformation pattern",,113,,[]
"üß† ML Signal: Function definition with no parameters, indicating a utility function","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 645, 10007, 11, 12739, 257, 10361, 2163]",1.0,117,ml_signal,15,"Function definition with no parameters, indicating a utility function",,113,    ),"[220, 220, 220, 1267]"
"üß† ML Signal: Function call with specific parameters, indicating usage pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 12739, 8748, 3912]",1.0,117,ml_signal,17,"Function call with specific parameters, indicating usage pattern",,117,,[]
"üß† ML Signal: Function call to retrieve existing tags, indicating a filtering operation","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 19818, 4683, 15940, 11, 12739, 257, 25431, 4905]",0.5,126,ml_signal,19,"Function call to retrieve existing tags, indicating a filtering operation",,117,def get_stocks_has_tag():,"[4299, 651, 62, 29522, 62, 10134, 62, 12985, 33529]"
"‚úÖ Best Practice: Using set operations to find differences, which is efficient for this purpose","[26486, 227, 6705, 19939, 25, 8554, 900, 4560, 284, 1064, 5400, 11, 543, 318, 6942, 329, 428, 4007]",1.0,141,best_practice,21,"Using set operations to find differences, which is efficient for this purpose",,126,"    return df[""entity_id""].tolist()","[220, 220, 220, 1441, 47764, 14692, 26858, 62, 312, 1, 4083, 83, 349, 396, 3419]"
üß† ML Signal: Function definition and naming pattern could be used to identify utility functions in codebases,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 290, 19264, 3912, 714, 307, 973, 284, 5911, 10361, 5499, 287, 2438, 65, 1386]",1.0,150,ml_signal,19,Function definition and naming pattern could be used to identify utility functions in codebases,,141,def get_stocks_has_tag():,"[4299, 651, 62, 29522, 62, 10134, 62, 12985, 33529]"
‚úÖ Best Practice: Initialize variables before use,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 878, 779]",1.0,165,best_practice,21,Initialize variables before use,,150,"    return df[""entity_id""].tolist()","[220, 220, 220, 1441, 47764, 14692, 26858, 62, 312, 1, 4083, 83, 349, 396, 3419]"
üß† ML Signal: API call pattern to external service,"[8582, 100, 254, 10373, 26484, 25, 7824, 869, 3912, 284, 7097, 2139]",1.0,165,ml_signal,23,API call pattern to external service,,165,,[]
üß† ML Signal: Use of list concatenation pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 1673, 36686, 341, 3912]",0.5,208,ml_signal,25,Use of list concatenation pattern,,165,"    entity_ids = get_entity_ids_by_filter(provider=""em"", ignore_delist=True, ignore_st=True, ignore_new_stock=False)","[220, 220, 220, 9312, 62, 2340, 796, 651, 62, 26858, 62, 2340, 62, 1525, 62, 24455, 7, 15234, 1304, 2625, 368, 1600, 8856, 62, 12381, 396, 28, 17821, 11, 8856, 62, 301, 28, 17821, 11, 8856, 62, 3605, 62, 13578, 28, 25101, 8]"
üß† ML Signal: API call pattern to external service,"[8582, 100, 254, 10373, 26484, 25, 7824, 869, 3912, 284, 7097, 2139]",1.0,229,ml_signal,27,API call pattern to external service,,208,    return list(set(entity_ids) - set(stocks_has_tag)),"[220, 220, 220, 1441, 1351, 7, 2617, 7, 26858, 62, 2340, 8, 532, 900, 7, 29522, 62, 10134, 62, 12985, 4008]"
üß† ML Signal: Use of list concatenation pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 1673, 36686, 341, 3912]",0.5,229,ml_signal,29,Use of list concatenation pattern,,229,,[]
üß† ML Signal: API call pattern to external service,"[8582, 100, 254, 10373, 26484, 25, 7824, 869, 3912, 284, 7097, 2139]",1.0,235,ml_signal,31,API call pattern to external service,,229,    stocks = [],"[220, 220, 220, 14420, 796, 17635]"
üß† ML Signal: Use of list concatenation pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 1673, 36686, 341, 3912]",0.5,266,ml_signal,32,Use of list concatenation pattern,,235,"    df1 = em_api.get_tradable_list(entity_type=""stock"", exchange=Exchange.sh)","[220, 220, 220, 47764, 16, 796, 795, 62, 15042, 13, 1136, 62, 2213, 324, 540, 62, 4868, 7, 26858, 62, 4906, 2625, 13578, 1600, 5163, 28, 3109, 3803, 13, 1477, 8]"
‚úÖ Best Practice: Return statement at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 2643, 379, 262, 886, 286, 262, 2163]",0.5,285,best_practice,37,Return statement at the end of the function,,266,"    stocks = stocks + df3[""entity_id""].tolist()","[220, 220, 220, 14420, 796, 14420, 1343, 47764, 18, 14692, 26858, 62, 312, 1, 4083, 83, 349, 396, 3419]"
üß† ML Signal: Function with default parameter value,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988]",0.5,285,ml_signal,28,Function with default parameter value,,285,,[]
üß† ML Signal: Querying data from a database,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831]",1.0,295,ml_signal,30,Querying data from a database,,285,def get_all_delist_stocks():,"[4299, 651, 62, 439, 62, 12381, 396, 62, 29522, 33529]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection if filters are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 611, 16628, 389, 407, 6105, 5336, 36951]",1.0,301,sast_risk,31,Potential SQL injection if filters are not properly sanitized,Low,295,    stocks = [],"[220, 220, 220, 14420, 796, 17635]"
üß† ML Signal: Converting DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6060, 19778, 5721, 284, 1351]",0.5,332,ml_signal,32,Converting DataFrame column to list,,301,"    df1 = em_api.get_tradable_list(entity_type=""stock"", exchange=Exchange.sh)","[220, 220, 220, 47764, 16, 796, 795, 62, 15042, 13, 1136, 62, 2213, 324, 540, 62, 4868, 7, 26858, 62, 4906, 2625, 13578, 1600, 5163, 28, 3109, 3803, 13, 1477, 8]"
üß† ML Signal: Default parameter usage can indicate common or expected use cases.,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 8748, 460, 7603, 2219, 393, 2938, 779, 2663, 13]",1.0,363,ml_signal,32,Default parameter usage can indicate common or expected use cases.,,332,"    df1 = em_api.get_tradable_list(entity_type=""stock"", exchange=Exchange.sh)","[220, 220, 220, 47764, 16, 796, 795, 62, 15042, 13, 1136, 62, 2213, 324, 540, 62, 4868, 7, 26858, 62, 4906, 2625, 13578, 1600, 5163, 28, 3109, 3803, 13, 1477, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential SQL injection risk if `tag` is user-controlled and not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16363, 16954, 2526, 611, 4600, 12985, 63, 318, 2836, 12, 14401, 290, 407, 6105, 5336, 36951, 13]",1.0,382,sast_risk,37,Potential SQL injection risk if `tag` is user-controlled and not properly sanitized.,Low,363,"    stocks = stocks + df3[""entity_id""].tolist()","[220, 220, 220, 14420, 796, 14420, 1343, 47764, 18, 14692, 26858, 62, 312, 1, 4083, 83, 349, 396, 3419]"
‚úÖ Best Practice: Explicitly returning a specific column as a list improves code readability and clarity.,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 257, 2176, 5721, 355, 257, 1351, 19575, 2438, 1100, 1799, 290, 16287, 13]",0.5,382,best_practice,39,Explicitly returning a specific column as a list improves code readability and clarity.,,382,,[]
üß† ML Signal: Usage of `print` for output can indicate debugging or logging behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4600, 4798, 63, 329, 5072, 460, 7603, 28769, 393, 18931, 4069, 13]",0.5,382,ml_signal,39,Usage of `print` for output can indicate debugging or logging behavior.,,382,,[]

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Group imports into standard library, third-party, and local sections for better readability.","[26486, 227, 6705, 19939, 25, 4912, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 9004, 329, 1365, 1100, 1799, 13]",1.0,0,best_practice,6,"Group imports into standard library, third-party, and local sections for better readability.",,0,,[]
‚ö†Ô∏è SAST Risk (Medium): os.path.abspath and os.path.join can be manipulated if __file__ is not properly controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 28686, 13, 6978, 13, 397, 2777, 776, 290, 28686, 13, 6978, 13, 22179, 460, 307, 25036, 611, 11593, 7753, 834, 318, 407, 6105, 6856]",0.5,21,sast_risk,11,os.path.abspath and os.path.join can be manipulated if __file__ is not properly controlled,Medium,0,"from zvt.domain import FinanceFactor, BalanceSheet, IncomeStatement, Stock, StockActorSummary","[6738, 1976, 36540, 13, 27830, 1330, 15007, 41384, 11, 22924, 3347, 316, 11, 19003, 48682, 11, 10500, 11, 10500, 40277, 22093]"
‚ö†Ô∏è SAST Risk (Medium): os.path.dirname(__file__) can be manipulated if __file__ is not properly controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 28686, 13, 6978, 13, 15908, 3672, 7, 834, 7753, 834, 8, 460, 307, 25036, 611, 11593, 7753, 834, 318, 407, 6105, 6856]",0.5,39,sast_risk,12,os.path.dirname(__file__) can be manipulated if __file__ is not properly controlled,Medium,21,from zvt.utils.pd_utils import pd_is_not_null,"[6738, 1976, 36540, 13, 26791, 13, 30094, 62, 26791, 1330, 279, 67, 62, 271, 62, 1662, 62, 8423]"
‚ö†Ô∏è SAST Risk (Medium): Opening files without exception handling can lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25522, 3696, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269]",0.5,39,sast_risk,14,Opening files without exception handling can lead to unhandled exceptions,Medium,39,,[]
‚ö†Ô∏è SAST Risk (Medium): json.load can be exploited if the JSON file contains malicious content,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 33918, 13, 2220, 460, 307, 21514, 611, 262, 19449, 2393, 4909, 17412, 2695]",0.5,49,sast_risk,16,json.load can be exploited if the JSON file contains malicious content,Medium,39,def get_subscriber_emails():,"[4299, 651, 62, 7266, 1416, 24735, 62, 368, 1768, 33529]"
‚úÖ Best Practice: Default argument values should be immutable to avoid unexpected behavior.,"[26486, 227, 6705, 19939, 25, 15161, 4578, 3815, 815, 307, 40139, 284, 3368, 10059, 4069, 13]",1.0,49,best_practice,15,Default argument values should be immutable to avoid unexpected behavior.,,49,,[]
‚úÖ Best Practice: Use descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",1.0,63,best_practice,18,Use descriptive variable names for better readability.,,49,    with open(emails_file) as f:,"[220, 220, 220, 351, 1280, 7, 368, 1768, 62, 7753, 8, 355, 277, 25]"
‚úÖ Best Practice: Use consistent comparison operators for clarity.,"[26486, 227, 6705, 19939, 25, 5765, 6414, 7208, 12879, 329, 16287, 13]",0.5,77,best_practice,18,Use consistent comparison operators for clarity.,,63,    with open(emails_file) as f:,"[220, 220, 220, 351, 1280, 7, 368, 1768, 62, 7753, 8, 355, 277, 25]"
üß† ML Signal: Querying data with specific filters can indicate patterns in data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 460, 7603, 7572, 287, 1366, 45069, 13]",1.0,101,ml_signal,27,Querying data with specific filters can indicate patterns in data retrieval.,,77,"        FinanceFactor.op_income_growth_yoy < income_yoy,","[220, 220, 220, 220, 220, 220, 220, 15007, 41384, 13, 404, 62, 12519, 62, 27922, 62, 88, 726, 1279, 3739, 62, 88, 726, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 9380, 9177, 284, 3368, 3991, 42510, 13]",1.0,113,sast_risk,32,Ensure pd_is_not_null is correctly implemented to avoid false negatives.,Low,101,    df = FinanceFactor.query_data(,"[220, 220, 220, 47764, 796, 15007, 41384, 13, 22766, 62, 7890, 7]"
‚úÖ Best Practice: Use extend() for list concatenation for better performance.,"[26486, 227, 6705, 19939, 25, 5765, 9117, 3419, 329, 1351, 1673, 36686, 341, 329, 1365, 2854, 13]",0.5,125,best_practice,32,Use extend() for list concatenation for better performance.,,113,    df = FinanceFactor.query_data(,"[220, 220, 220, 47764, 796, 15007, 41384, 13, 22766, 62, 7890, 7]"
üß† ML Signal: Querying data with specific filters can indicate patterns in data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 460, 7603, 7572, 287, 1366, 45069, 13]",1.0,125,ml_signal,37,Querying data with specific filters can indicate patterns in data retrieval.,,125,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 9380, 9177, 284, 3368, 3991, 42510, 13]",1.0,138,sast_risk,42,Ensure pd_is_not_null is correctly implemented to avoid false negatives.,Low,125,    df = BalanceSheet.query_data(,"[220, 220, 220, 47764, 796, 22924, 3347, 316, 13, 22766, 62, 7890, 7]"
‚úÖ Best Practice: Use extend() for list concatenation for better performance.,"[26486, 227, 6705, 19939, 25, 5765, 9117, 3419, 329, 1351, 1673, 36686, 341, 329, 1365, 2854, 13]",0.5,142,best_practice,44,Use extend() for list concatenation for better performance.,,138,    ),"[220, 220, 220, 1267]"
üß† ML Signal: Querying data with specific columns can indicate patterns in data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 15180, 460, 7603, 7572, 287, 1366, 45069, 13]",1.0,157,ml_signal,45,Querying data with specific columns can indicate patterns in data retrieval.,,142,    if pd_is_not_null(df):,"[220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 2599]"
‚ö†Ô∏è SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 9380, 9177, 284, 3368, 3991, 42510, 13]",1.0,182,sast_risk,52,Ensure pd_is_not_null is correctly implemented to avoid false negatives.,Low,157,"        columns=[BalanceSheet.code, BalanceSheet.accounts_receivable],","[220, 220, 220, 220, 220, 220, 220, 15180, 41888, 45866, 3347, 316, 13, 8189, 11, 22924, 3347, 316, 13, 23317, 82, 62, 260, 48054, 4357]"
‚úÖ Best Practice: Use inplace=True for operations that modify the DataFrame in place.,"[26486, 227, 6705, 19939, 25, 5765, 287, 5372, 28, 17821, 329, 4560, 326, 13096, 262, 6060, 19778, 287, 1295, 13]",0.5,198,best_practice,54,Use inplace=True for operations that modify the DataFrame in place.,,182,    if pd_is_not_null(df1):,"[220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 16, 2599]"
üß† ML Signal: Querying data with specific columns can indicate patterns in data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 15180, 460, 7603, 7572, 287, 1366, 45069, 13]",1.0,198,ml_signal,57,Querying data with specific columns can indicate patterns in data retrieval.,,198,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 9380, 9177, 284, 3368, 3991, 42510, 13]",1.0,215,sast_risk,60,Ensure pd_is_not_null is correctly implemented to avoid false negatives.,Low,198,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚úÖ Best Practice: Use inplace=True for operations that modify the DataFrame in place.,"[26486, 227, 6705, 19939, 25, 5765, 287, 5372, 28, 17821, 329, 4560, 326, 13096, 262, 6060, 19778, 287, 1295, 13]",0.5,244,best_practice,67,Use inplace=True for operations that modify the DataFrame in place.,,215,    if pd_is_not_null(df1) and pd_is_not_null(df2):,"[220, 220, 220, 611, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 16, 8, 290, 279, 67, 62, 271, 62, 1662, 62, 8423, 7, 7568, 17, 2599]"
‚ö†Ô∏è SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 279, 67, 62, 271, 62, 1662, 62, 8423, 318, 9380, 9177, 284, 3368, 3991, 42510, 13]",1.0,282,sast_risk,68,Ensure pd_is_not_null is correctly implemented to avoid false negatives.,Low,244,        codes = codes + df1[df1.accounts_receivable > df2.net_profit / 2].index.tolist(),"[220, 220, 220, 220, 220, 220, 220, 12416, 796, 12416, 1343, 47764, 16, 58, 7568, 16, 13, 23317, 82, 62, 260, 48054, 1875, 47764, 17, 13, 3262, 62, 9183, 1220, 362, 4083, 9630, 13, 83, 349, 396, 3419]"
‚úÖ Best Practice: Use extend() for list concatenation for better performance.,"[26486, 227, 6705, 19939, 25, 5765, 9117, 3419, 329, 1351, 1673, 36686, 341, 329, 1365, 2854, 13]",0.5,320,best_practice,68,Use extend() for list concatenation for better performance.,,282,        codes = codes + df1[df1.accounts_receivable > df2.net_profit / 2].index.tolist(),"[220, 220, 220, 220, 220, 220, 220, 12416, 796, 12416, 1343, 47764, 16, 58, 7568, 16, 13, 23317, 82, 62, 260, 48054, 1875, 47764, 17, 13, 3262, 62, 9183, 1220, 362, 4083, 9630, 13, 83, 349, 396, 3419]"
‚úÖ Best Practice: Use set to remove duplicates and return a list for consistent output.,"[26486, 227, 6705, 19939, 25, 5765, 900, 284, 4781, 14184, 16856, 290, 1441, 257, 1351, 329, 6414, 5072, 13]",0.5,320,best_practice,72,Use set to remove duplicates and return a list for consistent output.,,320,,[]
‚úÖ Best Practice: Consider importing List and other necessary classes at the beginning of the file for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 7343, 290, 584, 3306, 6097, 379, 262, 3726, 286, 262, 2393, 329, 16287, 13]",1.0,347,best_practice,56,Consider importing List and other necessary classes at the beginning of the file for clarity.,,320,"        df1 = df1.set_index(""code"", drop=True).sort_index()","[220, 220, 220, 220, 220, 220, 220, 47764, 16, 796, 47764, 16, 13, 2617, 62, 9630, 7203, 8189, 1600, 4268, 28, 17821, 737, 30619, 62, 9630, 3419]"
üß† ML Signal: Iterating over a list of objects to extract and format information is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 5563, 284, 7925, 290, 5794, 1321, 318, 257, 2219, 3912, 13]",1.0,364,ml_signal,60,Iterating over a list of objects to extract and format information is a common pattern.,,347,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 10500, 40277, 22093, 13, 22766, 62, 7890, 318, 6861, 1028, 16363, 16954, 611, 340, 34175, 16363, 20743, 13]",1.0,381,sast_risk,60,Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries.,Low,364,"        start_timestamp=start_timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 16514, 27823, 28, 9688, 62, 16514, 27823, 11]"
üß† ML Signal: String formatting with dynamic data is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 351, 8925, 1366, 318, 257, 2219, 3912, 13]",0.5,381,ml_signal,72,String formatting with dynamic data is a common pattern.,,381,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 10500, 40277, 22093, 13, 22766, 62, 7890, 318, 6861, 1028, 16363, 16954, 611, 340, 34175, 16363, 20743, 13]",1.0,403,sast_risk,79,Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries.,Low,381,"            order=StockActorSummary.timestamp.desc(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 28, 26207, 40277, 22093, 13, 16514, 27823, 13, 20147, 22784]"
üß† ML Signal: String formatting with dynamic data is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 351, 8925, 1366, 318, 257, 2219, 3912, 13]",0.5,417,ml_signal,85,String formatting with dynamic data is a common pattern.,,403,            info = (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7508, 796, 357]"
‚ö†Ô∏è SAST Risk (Low): Ensure that get_subscriber_emails() does not expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 651, 62, 7266, 1416, 24735, 62, 368, 1768, 3419, 857, 407, 15651, 8564, 1321, 13]",1.0,520,sast_risk,87,Ensure that get_subscriber_emails() does not expose sensitive information.,Low,417,"                + f""([{summary[0].timestamp}]ÂÖ±{summary[0].actor_count}ÂÆ∂Âü∫ÈáëÊåÅËÇ°Âç†ÊØî:{float_to_pct_str(summary[0].holding_ratio)}, ÂèòÂåñ: {float_to_pct_str(summary[0].change_ratio)})""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1343, 277, 18109, 58, 90, 49736, 58, 15, 4083, 16514, 27823, 92, 60, 17739, 109, 90, 49736, 58, 15, 4083, 11218, 62, 9127, 92, 22522, 114, 161, 253, 118, 34932, 239, 162, 234, 223, 164, 224, 94, 39355, 254, 162, 107, 242, 29164, 22468, 62, 1462, 62, 79, 310, 62, 2536, 7, 49736, 58, 15, 4083, 19216, 62, 10366, 952, 8, 5512, 10263, 237, 246, 44293, 244, 25, 1391, 22468, 62, 1462, 62, 79, 310, 62, 2536, 7, 49736, 58, 15, 4083, 3803, 62, 10366, 952, 38165, 16725]"

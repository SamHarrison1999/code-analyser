[
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Group imports into standard library, third-party, and local sections for better readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      9004,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Group imports into standard library, third-party, and local sections for better readability."
  },
  {
    "line": 11,
    "text": "from zvt.domain import FinanceFactor, BalanceSheet, IncomeStatement, Stock, StockActorSummary",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): os.path.abspath and os.path.join can be manipulated if __file__ is not properly controlled",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      15007,
      41384,
      11,
      22924,
      3347,
      316,
      11,
      19003,
      48682,
      11,
      10500,
      11,
      10500,
      40277,
      22093
    ],
    "start_token": 0,
    "end_token": 21,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      28686,
      13,
      6978,
      13,
      397,
      2777,
      776,
      290,
      28686,
      13,
      6978,
      13,
      22179,
      460,
      307,
      25036,
      611,
      11593,
      7753,
      834,
      318,
      407,
      6105,
      6856
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "os.path.abspath and os.path.join can be manipulated if __file__ is not properly controlled"
  },
  {
    "line": 12,
    "text": "from zvt.utils.pd_utils import pd_is_not_null",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): os.path.dirname(__file__) can be manipulated if __file__ is not properly controlled",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      26791,
      13,
      30094,
      62,
      26791,
      1330,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423
    ],
    "start_token": 21,
    "end_token": 39,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      28686,
      13,
      6978,
      13,
      15908,
      3672,
      7,
      834,
      7753,
      834,
      8,
      460,
      307,
      25036,
      611,
      11593,
      7753,
      834,
      318,
      407,
      6105,
      6856
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "os.path.dirname(__file__) can be manipulated if __file__ is not properly controlled"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Opening files without exception handling can lead to unhandled exceptions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 39,
    "end_token": 39,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25522,
      3696,
      1231,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      13269
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Opening files without exception handling can lead to unhandled exceptions"
  },
  {
    "line": 16,
    "text": "def get_subscriber_emails():",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): json.load can be exploited if the JSON file contains malicious content",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      7266,
      1416,
      24735,
      62,
      368,
      1768,
      33529
    ],
    "start_token": 39,
    "end_token": 49,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      33918,
      13,
      2220,
      460,
      307,
      21514,
      611,
      262,
      19449,
      2393,
      4909,
      17412,
      2695
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "json.load can be exploited if the JSON file contains malicious content"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Default argument values should be immutable to avoid unexpected behavior.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 49,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      4578,
      3815,
      815,
      307,
      40139,
      284,
      3368,
      10059,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Default argument values should be immutable to avoid unexpected behavior."
  },
  {
    "line": 18,
    "text": "    with open(emails_file) as f:",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      351,
      1280,
      7,
      368,
      1768,
      62,
      7753,
      8,
      355,
      277,
      25
    ],
    "start_token": 49,
    "end_token": 63,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability."
  },
  {
    "line": 18,
    "text": "    with open(emails_file) as f:",
    "annotation": "\u2705 Best Practice: Use consistent comparison operators for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      351,
      1280,
      7,
      368,
      1768,
      62,
      7753,
      8,
      355,
      277,
      25
    ],
    "start_token": 63,
    "end_token": 77,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      6414,
      7208,
      12879,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use consistent comparison operators for clarity."
  },
  {
    "line": 27,
    "text": "        FinanceFactor.op_income_growth_yoy < income_yoy,",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters can indicate patterns in data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15007,
      41384,
      13,
      404,
      62,
      12519,
      62,
      27922,
      62,
      88,
      726,
      1279,
      3739,
      62,
      88,
      726,
      11
    ],
    "start_token": 77,
    "end_token": 101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      460,
      7603,
      7572,
      287,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters can indicate patterns in data retrieval."
  },
  {
    "line": 32,
    "text": "    df = FinanceFactor.query_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      15007,
      41384,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 101,
    "end_token": 113,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      9380,
      9177,
      284,
      3368,
      3991,
      42510,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure pd_is_not_null is correctly implemented to avoid false negatives."
  },
  {
    "line": 32,
    "text": "    df = FinanceFactor.query_data(",
    "annotation": "\u2705 Best Practice: Use extend() for list concatenation for better performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      15007,
      41384,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 113,
    "end_token": 125,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      9117,
      3419,
      329,
      1351,
      1673,
      36686,
      341,
      329,
      1365,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use extend() for list concatenation for better performance."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters can indicate patterns in data retrieval.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 125,
    "end_token": 125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      460,
      7603,
      7572,
      287,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters can indicate patterns in data retrieval."
  },
  {
    "line": 42,
    "text": "    df = BalanceSheet.query_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      22924,
      3347,
      316,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 125,
    "end_token": 138,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      9380,
      9177,
      284,
      3368,
      3991,
      42510,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure pd_is_not_null is correctly implemented to avoid false negatives."
  },
  {
    "line": 44,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use extend() for list concatenation for better performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 138,
    "end_token": 142,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      9117,
      3419,
      329,
      1351,
      1673,
      36686,
      341,
      329,
      1365,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use extend() for list concatenation for better performance."
  },
  {
    "line": 45,
    "text": "    if pd_is_not_null(df):",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific columns can indicate patterns in data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      2599
    ],
    "start_token": 142,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      15180,
      460,
      7603,
      7572,
      287,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific columns can indicate patterns in data retrieval."
  },
  {
    "line": 52,
    "text": "        columns=[BalanceSheet.code, BalanceSheet.accounts_receivable],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      41888,
      45866,
      3347,
      316,
      13,
      8189,
      11,
      22924,
      3347,
      316,
      13,
      23317,
      82,
      62,
      260,
      48054,
      4357
    ],
    "start_token": 157,
    "end_token": 182,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      9380,
      9177,
      284,
      3368,
      3991,
      42510,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure pd_is_not_null is correctly implemented to avoid false negatives."
  },
  {
    "line": 54,
    "text": "    if pd_is_not_null(df1):",
    "annotation": "\u2705 Best Practice: Use inplace=True for operations that modify the DataFrame in place.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      16,
      2599
    ],
    "start_token": 182,
    "end_token": 198,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      287,
      5372,
      28,
      17821,
      329,
      4560,
      326,
      13096,
      262,
      6060,
      19778,
      287,
      1295,
      13
    ],
    "label": "best_practice",
    "reason": "Use inplace=True for operations that modify the DataFrame in place."
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific columns can indicate patterns in data retrieval.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 198,
    "end_token": 198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      15180,
      460,
      7603,
      7572,
      287,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific columns can indicate patterns in data retrieval."
  },
  {
    "line": 60,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 198,
    "end_token": 215,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      9380,
      9177,
      284,
      3368,
      3991,
      42510,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure pd_is_not_null is correctly implemented to avoid false negatives."
  },
  {
    "line": 67,
    "text": "    if pd_is_not_null(df1) and pd_is_not_null(df2):",
    "annotation": "\u2705 Best Practice: Use inplace=True for operations that modify the DataFrame in place.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      16,
      8,
      290,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      7,
      7568,
      17,
      2599
    ],
    "start_token": 215,
    "end_token": 244,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      287,
      5372,
      28,
      17821,
      329,
      4560,
      326,
      13096,
      262,
      6060,
      19778,
      287,
      1295,
      13
    ],
    "label": "best_practice",
    "reason": "Use inplace=True for operations that modify the DataFrame in place."
  },
  {
    "line": 68,
    "text": "        codes = codes + df1[df1.accounts_receivable > df2.net_profit / 2].index.tolist()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure pd_is_not_null is correctly implemented to avoid false negatives.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      796,
      12416,
      1343,
      47764,
      16,
      58,
      7568,
      16,
      13,
      23317,
      82,
      62,
      260,
      48054,
      1875,
      47764,
      17,
      13,
      3262,
      62,
      9183,
      1220,
      362,
      4083,
      9630,
      13,
      83,
      349,
      396,
      3419
    ],
    "start_token": 244,
    "end_token": 282,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      279,
      67,
      62,
      271,
      62,
      1662,
      62,
      8423,
      318,
      9380,
      9177,
      284,
      3368,
      3991,
      42510,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure pd_is_not_null is correctly implemented to avoid false negatives."
  },
  {
    "line": 68,
    "text": "        codes = codes + df1[df1.accounts_receivable > df2.net_profit / 2].index.tolist()",
    "annotation": "\u2705 Best Practice: Use extend() for list concatenation for better performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12416,
      796,
      12416,
      1343,
      47764,
      16,
      58,
      7568,
      16,
      13,
      23317,
      82,
      62,
      260,
      48054,
      1875,
      47764,
      17,
      13,
      3262,
      62,
      9183,
      1220,
      362,
      4083,
      9630,
      13,
      83,
      349,
      396,
      3419
    ],
    "start_token": 282,
    "end_token": 320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      9117,
      3419,
      329,
      1351,
      1673,
      36686,
      341,
      329,
      1365,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use extend() for list concatenation for better performance."
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\u2705 Best Practice: Use set to remove duplicates and return a list for consistent output.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 320,
    "end_token": 320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      284,
      4781,
      14184,
      16856,
      290,
      1441,
      257,
      1351,
      329,
      6414,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Use set to remove duplicates and return a list for consistent output."
  },
  {
    "line": 56,
    "text": "        df1 = df1.set_index(\"code\", drop=True).sort_index()",
    "annotation": "\u2705 Best Practice: Consider importing List and other necessary classes at the beginning of the file for clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      16,
      796,
      47764,
      16,
      13,
      2617,
      62,
      9630,
      7203,
      8189,
      1600,
      4268,
      28,
      17821,
      737,
      30619,
      62,
      9630,
      3419
    ],
    "start_token": 320,
    "end_token": 347,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33332,
      7343,
      290,
      584,
      3306,
      6097,
      379,
      262,
      3726,
      286,
      262,
      2393,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Consider importing List and other necessary classes at the beginning of the file for clarity."
  },
  {
    "line": 60,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of objects to extract and format information is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 347,
    "end_token": 364,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      5563,
      284,
      7925,
      290,
      5794,
      1321,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of objects to extract and format information is a common pattern."
  },
  {
    "line": 60,
    "text": "        start_timestamp=start_timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 364,
    "end_token": 381,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      10500,
      40277,
      22093,
      13,
      22766,
      62,
      7890,
      318,
      6861,
      1028,
      16363,
      16954,
      611,
      340,
      34175,
      16363,
      20743,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries."
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: String formatting with dynamic data is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      351,
      8925,
      1366,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "String formatting with dynamic data is a common pattern."
  },
  {
    "line": 79,
    "text": "            order=StockActorSummary.timestamp.desc(),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      28,
      26207,
      40277,
      22093,
      13,
      16514,
      27823,
      13,
      20147,
      22784
    ],
    "start_token": 381,
    "end_token": 403,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      10500,
      40277,
      22093,
      13,
      22766,
      62,
      7890,
      318,
      6861,
      1028,
      16363,
      16954,
      611,
      340,
      34175,
      16363,
      20743,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that StockActorSummary.query_data is protected against SQL injection if it constructs SQL queries."
  },
  {
    "line": 85,
    "text": "            info = (",
    "annotation": "\ud83e\udde0 ML Signal: String formatting with dynamic data is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7508,
      796,
      357
    ],
    "start_token": 403,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      33313,
      351,
      8925,
      1366,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "String formatting with dynamic data is a common pattern."
  },
  {
    "line": 87,
    "text": "                + f\"([{summary[0].timestamp}]\u5171{summary[0].actor_count}\u5bb6\u57fa\u91d1\u6301\u80a1\u5360\u6bd4:{float_to_pct_str(summary[0].holding_ratio)}, \u53d8\u5316: {float_to_pct_str(summary[0].change_ratio)})\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that get_subscriber_emails() does not expose sensitive information.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1343,
      277,
      18109,
      58,
      90,
      49736,
      58,
      15,
      4083,
      16514,
      27823,
      92,
      60,
      17739,
      109,
      90,
      49736,
      58,
      15,
      4083,
      11218,
      62,
      9127,
      92,
      22522,
      114,
      161,
      253,
      118,
      34932,
      239,
      162,
      234,
      223,
      164,
      224,
      94,
      39355,
      254,
      162,
      107,
      242,
      29164,
      22468,
      62,
      1462,
      62,
      79,
      310,
      62,
      2536,
      7,
      49736,
      58,
      15,
      4083,
      19216,
      62,
      10366,
      952,
      8,
      5512,
      10263,
      237,
      246,
      44293,
      244,
      25,
      1391,
      22468,
      62,
      1462,
      62,
      79,
      310,
      62,
      2536,
      7,
      49736,
      58,
      15,
      4083,
      3803,
      62,
      10366,
      952,
      38165,
      16725
    ],
    "start_token": 417,
    "end_token": 520,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      651,
      62,
      7266,
      1416,
      24735,
      62,
      368,
      1768,
      3419,
      857,
      407,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that get_subscriber_emails() does not expose sensitive information."
  }
]
[
  {
    "line": 4,
    "text": "from collections import Counter",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      17268,
      1330,
      15034
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability."
  },
  {
    "line": 7,
    "text": "from zvt.domain import BlockStock, Block, Stock, LimitUpInfo",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using os.environ can expose sensitive environment variables if not handled properly.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      9726,
      26207,
      11,
      9726,
      11,
      10500,
      11,
      27272,
      4933,
      12360
    ],
    "start_token": 4,
    "end_token": 20,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      28686,
      13,
      268,
      2268,
      460,
      15651,
      8564,
      2858,
      9633,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using os.environ can expose sensitive environment variables if not handled properly."
  },
  {
    "line": 10,
    "text": "def get_limit_up_reasons(entity_id):",
    "annotation": "\u2705 Best Practice: Providing a default value for environment variables can prevent runtime errors.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      32374,
      62,
      929,
      62,
      260,
      2812,
      7,
      26858,
      62,
      312,
      2599
    ],
    "start_token": 20,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7518,
      2530,
      257,
      4277,
      1988,
      329,
      2858,
      9633,
      460,
      2948,
      19124,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Providing a default value for environment variables can prevent runtime errors."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Loading JSON from a file without validation can lead to processing untrusted data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12320,
      19449,
      422,
      257,
      2393,
      1231,
      21201,
      460,
      1085,
      284,
      7587,
      1418,
      81,
      8459,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Loading JSON from a file without validation can lead to processing untrusted data."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Saving data to a file without proper permissions can lead to data exposure.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      34689,
      1366,
      284,
      257,
      2393,
      1231,
      1774,
      21627,
      460,
      1085,
      284,
      1366,
      7111,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Saving data to a file without proper permissions can lead to data exposure."
  },
  {
    "line": 24,
    "text": "        concepts = [item for sublist in concept_map.values() for item in sublist]",
    "annotation": "\ud83e\udde0 ML Signal: Counting occurrences of items is a common pattern for frequency analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10838,
      796,
      685,
      9186,
      329,
      850,
      4868,
      287,
      3721,
      62,
      8899,
      13,
      27160,
      3419,
      329,
      2378,
      287,
      850,
      4868,
      60
    ],
    "start_token": 34,
    "end_token": 61,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      40279,
      286,
      3709,
      318,
      257,
      2219,
      3912,
      329,
      8373,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Counting occurrences of items is a common pattern for frequency analysis."
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting stock codes to IDs is a common pattern in financial data processing.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 61,
    "end_token": 61,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      4283,
      12416,
      284,
      32373,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting stock codes to IDs is a common pattern in financial data processing."
  },
  {
    "line": 32,
    "text": "    if industry in [\"\u534a\u5bfc\u4f53\", \"\u7535\u5b50\u5316\u5b66\u54c1\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Mapping stock codes to exchanges is a common pattern in financial applications.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2831,
      287,
      14631,
      39355,
      232,
      43380,
      120,
      19526,
      241,
      1600,
      366,
      18796,
      113,
      36310,
      44293,
      244,
      27764,
      99,
      161,
      241,
      223,
      1,
      5974
    ],
    "start_token": 61,
    "end_token": 88,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      4283,
      12416,
      284,
      14525,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      5479,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping stock codes to exchanges is a common pattern in financial applications."
  },
  {
    "line": 36,
    "text": "    if industry in [\"\u533b\u7597\u5668\u68b0\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving stocks for a given block is a common pattern in stock market analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2831,
      287,
      14631,
      44293,
      119,
      163,
      244,
      245,
      161,
      247,
      101,
      162,
      95,
      108,
      1,
      5974
    ],
    "start_token": 88,
    "end_token": 108,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      14420,
      329,
      257,
      1813,
      2512,
      318,
      257,
      2219,
      3912,
      287,
      4283,
      1910,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Retrieving stocks for a given block is a common pattern in stock market analysis."
  },
  {
    "line": 40,
    "text": "    if industry in [\"\u8d38\u6613\u884c\u4e1a\", \"\u5bb6\u7528\u8f7b\u5de5\", \"\u9020\u7eb8\u5370\u5237\", \"\u917f\u9152\u884c\u4e1a\", \"\u73e0\u5b9d\u9996\u9970\", \"\u7f8e\u5bb9\u62a4\u7406\", \"\u98df\u54c1\u996e\u6599\", \"\u65c5\u6e38\u9152\u5e97\", \"\u5546\u4e1a\u767e\u8d27\", \"\u7eba\u7ec7\u670d\u88c5\", \"\u5bb6\u7535\u884c\u4e1a\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Fetching limit up information is a common pattern in stock trading analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2831,
      287,
      14631,
      164,
      112,
      116,
      23626,
      241,
      26193,
      234,
      10310,
      248,
      1600,
      366,
      22522,
      114,
      18796,
      101,
      164,
      121,
      119,
      32432,
      98,
      1600,
      366,
      34460,
      254,
      163,
      118,
      116,
      39355,
      108,
      26344,
      115,
      1600,
      366,
      165,
      227,
      123,
      165,
      227,
      240,
      26193,
      234,
      10310,
      248,
      1600,
      366,
      163,
      237,
      254,
      22522,
      251,
      165,
      99,
      244,
      165,
      98,
      108,
      1600,
      366,
      163,
      122,
      236,
      22522,
      117,
      162,
      232,
      97,
      49426,
      228,
      1600,
      366,
      45617,
      253,
      161,
      241,
      223,
      165,
      98,
      106,
      23877,
      247,
      1600,
      366,
      33768,
      227,
      162,
      116,
      116,
      165,
      227,
      240,
      41753,
      245,
      1600,
      366,
      161,
      243,
      228,
      10310,
      248,
      163,
      247,
      122,
      164,
      112,
      100,
      1600,
      366,
      163,
      118,
      118,
      163,
      119,
      229,
      17312,
      235,
      35318,
      1600,
      366,
      22522,
      114,
      18796,
      113,
      26193,
      234,
      10310,
      248,
      1,
      5974
    ],
    "start_token": 108,
    "end_token": 243,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      4179,
      510,
      1321,
      318,
      257,
      2219,
      3912,
      287,
      4283,
      7313,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Fetching limit up information is a common pattern in stock trading analysis."
  },
  {
    "line": 6,
    "text": "from zvt.api.utils import china_stock_code_to_id, get_china_exchange",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific purpose, useful for understanding code intent",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      15042,
      13,
      26791,
      1330,
      442,
      1437,
      62,
      13578,
      62,
      8189,
      62,
      1462,
      62,
      312,
      11,
      651,
      62,
      354,
      1437,
      62,
      1069,
      3803
    ],
    "start_token": 243,
    "end_token": 269,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      4007,
      11,
      4465,
      329,
      4547,
      2438,
      6824
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific purpose, useful for understanding code intent"
  },
  {
    "line": 7,
    "text": "from zvt.domain import BlockStock, Block, Stock, LimitUpInfo",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database, indicating a data retrieval pattern",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      9726,
      26207,
      11,
      9726,
      11,
      10500,
      11,
      27272,
      4933,
      12360
    ],
    "start_token": 269,
    "end_token": 285,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831,
      11,
      12739,
      257,
      1366,
      45069,
      3912
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database, indicating a data retrieval pattern"
  },
  {
    "line": 10,
    "text": "def get_limit_up_reasons(entity_id):",
    "annotation": "\u2705 Best Practice: Named arguments improve readability",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      32374,
      62,
      929,
      62,
      260,
      2812,
      7,
      26858,
      62,
      312,
      2599
    ],
    "start_token": 285,
    "end_token": 299,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      34441,
      7159,
      2987,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Named arguments improve readability"
  },
  {
    "line": 13,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Initializing variables before use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 299,
    "end_token": 303,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      9633,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Initializing variables before use"
  },
  {
    "line": 15,
    "text": "    topics = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType access if info is None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10233,
      796,
      17635
    ],
    "start_token": 303,
    "end_token": 309,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      1895,
      611,
      7508,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType access if info is None"
  },
  {
    "line": 17,
    "text": "        topics = topics + info[0].reason.split(\"+\")",
    "annotation": "\u2705 Best Practice: Using list concatenation for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10233,
      796,
      10233,
      1343,
      7508,
      58,
      15,
      4083,
      41181,
      13,
      35312,
      7203,
      10,
      4943
    ],
    "start_token": 309,
    "end_token": 330,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      1673,
      36686,
      341,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using list concatenation for clarity"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a list, indicating a collection of results",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 330,
    "end_token": 330,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1351,
      11,
      12739,
      257,
      4947,
      286,
      2482
    ],
    "label": "ml_signal",
    "reason": "Returning a list, indicating a collection of results"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statement for 'os' module",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 330,
    "end_token": 330,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      2643,
      329,
      705,
      418,
      6,
      8265
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statement for 'os' module"
  },
  {
    "line": 15,
    "text": "    topics = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statement for 'json' module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10233,
      796,
      17635
    ],
    "start_token": 330,
    "end_token": 336,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      2643,
      329,
      705,
      17752,
      6,
      8265
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statement for 'json' module"
  },
  {
    "line": 16,
    "text": "    if info and info[0].reason:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential file path traversal vulnerability if 'concept.json' path is influenced by user input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      7508,
      290,
      7508,
      58,
      15,
      4083,
      41181,
      25
    ],
    "start_token": 336,
    "end_token": 348,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2393,
      3108,
      33038,
      282,
      15131,
      611,
      705,
      43169,
      13,
      17752,
      6,
      3108,
      318,
      12824,
      416,
      2836,
      5128
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential file path traversal vulnerability if 'concept.json' path is influenced by user input"
  },
  {
    "line": 17,
    "text": "        topics = topics + info[0].reason.split(\"+\")",
    "annotation": "\u2705 Best Practice: Use 'with' statement for file operations to ensure proper resource management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10233,
      796,
      10233,
      1343,
      7508,
      58,
      15,
      4083,
      41181,
      13,
      35312,
      7203,
      10,
      4943
    ],
    "start_token": 348,
    "end_token": 369,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      284,
      4155,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use 'with' statement for file operations to ensure proper resource management"
  },
  {
    "line": 18,
    "text": "    return topics",
    "annotation": "\ud83e\udde0 ML Signal: Usage of 'os.path.join' and 'os.path.dirname' indicates file path manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      10233
    ],
    "start_token": 369,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      418,
      13,
      6978,
      13,
      22179,
      6,
      290,
      705,
      418,
      13,
      6978,
      13,
      15908,
      3672,
      6,
      9217,
      2393,
      3108,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of 'os.path.join' and 'os.path.dirname' indicates file path manipulation"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of 'json.load' indicates JSON file parsing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 374,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      17752,
      13,
      2220,
      6,
      9217,
      19449,
      2393,
      32096
    ],
    "label": "ml_signal",
    "reason": "Usage of 'json.load' indicates JSON file parsing"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider handling exceptions for file operations and JSON parsing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 374,
    "end_token": 374,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      9041,
      13269,
      329,
      2393,
      4560,
      290,
      19449,
      32096
    ],
    "label": "best_practice",
    "reason": "Consider handling exceptions for file operations and JSON parsing"
  },
  {
    "line": 22,
    "text": "    with open(os.path.join(os.path.dirname(__file__), \"concept.json\")) as f:",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for flattening nested lists",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      351,
      1280,
      7,
      418,
      13,
      6978,
      13,
      22179,
      7,
      418,
      13,
      6978,
      13,
      15908,
      3672,
      7,
      834,
      7753,
      834,
      828,
      366,
      43169,
      13,
      17752,
      48774,
      355,
      277,
      25
    ],
    "start_token": 374,
    "end_token": 405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      27172,
      3101,
      28376,
      8341
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for flattening nested lists"
  },
  {
    "line": 24,
    "text": "        concepts = [item for sublist in concept_map.values() for item in sublist]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of ORM query pattern with filters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10838,
      796,
      685,
      9186,
      329,
      850,
      4868,
      287,
      3721,
      62,
      8899,
      13,
      27160,
      3419,
      329,
      2378,
      287,
      850,
      4868,
      60
    ],
    "start_token": 405,
    "end_token": 432,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6375,
      44,
      12405,
      3912,
      351,
      16628
    ],
    "label": "ml_signal",
    "reason": "Usage of ORM query pattern with filters"
  },
  {
    "line": 25,
    "text": "        df = BlockStock.query_data(filters=[BlockStock.stock_code == code, BlockStock.name.in_(concepts)])",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential SQL injection risk if 'code' or 'concepts' are influenced by user input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      9726,
      26207,
      13,
      22766,
      62,
      7890,
      7,
      10379,
      1010,
      41888,
      12235,
      26207,
      13,
      13578,
      62,
      8189,
      6624,
      2438,
      11,
      9726,
      26207,
      13,
      3672,
      13,
      259,
      41052,
      43169,
      82,
      8,
      12962
    ],
    "start_token": 432,
    "end_token": 471,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      705,
      8189,
      6,
      393,
      705,
      43169,
      82,
      6,
      389,
      12824,
      416,
      2836,
      5128
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential SQL injection risk if 'code' or 'concepts' are influenced by user input"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 471,
    "end_token": 471,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list"
  },
  {
    "line": 21,
    "text": "def get_concept(code):",
    "annotation": "\ud83e\udde0 ML Signal: Mapping specific industries to tags can be used to train models for industry classification.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      43169,
      7,
      8189,
      2599
    ],
    "start_token": 471,
    "end_token": 478,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      2176,
      11798,
      284,
      15940,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      2831,
      17923,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping specific industries to tags can be used to train models for industry classification."
  },
  {
    "line": 65,
    "text": "        return \"\u4f20\u5a92\"",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      27670,
      254,
      161,
      103,
      240,
      1
    ],
    "start_token": 478,
    "end_token": 493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value"
  },
  {
    "line": 67,
    "text": "        return \"\u519c\u4e1a\"",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database or ORM",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      37863,
      250,
      10310,
      248,
      1
    ],
    "start_token": 493,
    "end_token": 507,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831,
      393,
      6375,
      44
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database or ORM"
  },
  {
    "line": 69,
    "text": "        return \"\u7edf\u4e00\u5927\u5e02\u573a\"",
    "annotation": "\ud83e\udde0 ML Signal: Converting a DataFrame column to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      163,
      119,
      253,
      31660,
      32014,
      30585,
      224,
      28839,
      118,
      1
    ],
    "start_token": 507,
    "end_token": 526,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      6060,
      19778,
      5721,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Converting a DataFrame column to a list"
  },
  {
    "line": 70,
    "text": "    if industry in [\"\u822a\u5929\u822a\u7a7a\", \"\u8239\u8236\u5236\u9020\"]:",
    "annotation": "\u2705 Best Practice: Initialize an empty list before a loop",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2831,
      287,
      14631,
      48958,
      103,
      25465,
      48958,
      103,
      163,
      102,
      118,
      1600,
      366,
      48958,
      117,
      48958,
      114,
      26344,
      114,
      34460,
      254,
      1,
      5974
    ],
    "start_token": 526,
    "end_token": 553,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      281,
      6565,
      1351,
      878,
      257,
      9052
    ],
    "label": "best_practice",
    "reason": "Initialize an empty list before a loop"
  },
  {
    "line": 75,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with filters and specific return type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 553,
    "end_token": 553,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      16628,
      290,
      2176,
      1441,
      2099
    ],
    "label": "ml_signal",
    "reason": "Querying data with filters and specific return type"
  },
  {
    "line": 77,
    "text": "    df_block = Block.query_data(provider=provider, filters=[Block.category == \"industry\"])",
    "annotation": "\u2705 Best Practice: Accessing the first element of a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      62,
      9967,
      796,
      9726,
      13,
      22766,
      62,
      7890,
      7,
      15234,
      1304,
      28,
      15234,
      1304,
      11,
      16628,
      41888,
      12235,
      13,
      22872,
      6624,
      366,
      23213,
      563,
      8973,
      8
    ],
    "start_token": 553,
    "end_token": 583,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8798,
      278,
      262,
      717,
      5002,
      286,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Accessing the first element of a list"
  },
  {
    "line": 86,
    "text": "        if block_stocks:",
    "annotation": "\u2705 Best Practice: Appending a dictionary to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2512,
      62,
      29522,
      25
    ],
    "start_token": 583,
    "end_token": 595,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      1571,
      257,
      22155,
      284,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Appending a dictionary to a list"
  },
  {
    "line": 88,
    "text": "            tags.append(",
    "annotation": "\ud83e\udde0 ML Signal: Mapping function usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      13,
      33295,
      7
    ],
    "start_token": 595,
    "end_token": 610,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      2163,
      8748
    ],
    "label": "ml_signal",
    "reason": "Mapping function usage"
  },
  {
    "line": 94,
    "text": "                }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of print for logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 610,
    "end_token": 626,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      3601,
      329,
      18931
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of print for logging"
  },
  {
    "line": 96,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Return the result of a function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 626,
    "end_token": 635,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      262,
      1255,
      286,
      257,
      2163
    ],
    "label": "best_practice",
    "reason": "Return the result of a function"
  },
  {
    "line": 88,
    "text": "            tags.append(",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statement for 'os' module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      13,
      33295,
      7
    ],
    "start_token": 635,
    "end_token": 650,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      2643,
      329,
      705,
      418,
      6,
      8265
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statement for 'os' module"
  },
  {
    "line": 89,
    "text": "                {",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statement for 'json' module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 650,
    "end_token": 666,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      2643,
      329,
      705,
      17752,
      6,
      8265
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statement for 'json' module"
  },
  {
    "line": 90,
    "text": "                    \"code\": block_stock.stock_code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential file handling issue without exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8189,
      1298,
      2512,
      62,
      13578,
      13,
      13578,
      62,
      8189,
      11
    ],
    "start_token": 666,
    "end_token": 696,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2393,
      9041,
      2071,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential file handling issue without exception handling"
  },
  {
    "line": 91,
    "text": "                    \"name\": block_stock.stock_name,",
    "annotation": "\u2705 Best Practice: Use 'with' statement for file operations to ensure proper resource management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      2512,
      62,
      13578,
      13,
      13578,
      62,
      3672,
      11
    ],
    "start_token": 696,
    "end_token": 726,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      284,
      4155,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use 'with' statement for file operations to ensure proper resource management"
  },
  {
    "line": 92,
    "text": "                    \"tag\": industry_to_tag(block_stock.name),",
    "annotation": "\ud83e\udde0 ML Signal: File path construction using 'os.path.join' and 'os.path.dirname'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      12985,
      1298,
      2831,
      62,
      1462,
      62,
      12985,
      7,
      9967,
      62,
      13578,
      13,
      3672,
      828
    ],
    "start_token": 726,
    "end_token": 760,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9220,
      3108,
      5103,
      1262,
      705,
      418,
      13,
      6978,
      13,
      22179,
      6,
      290,
      705,
      418,
      13,
      6978,
      13,
      15908,
      3672,
      6
    ],
    "label": "ml_signal",
    "reason": "File path construction using 'os.path.join' and 'os.path.dirname'"
  },
  {
    "line": 94,
    "text": "                }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential security risk if 'main_line_tags.json' is modified by an attacker",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 760,
    "end_token": 776,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2324,
      2526,
      611,
      705,
      12417,
      62,
      1370,
      62,
      31499,
      13,
      17752,
      6,
      318,
      9518,
      416,
      281,
      15250
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential security risk if 'main_line_tags.json' is modified by an attacker"
  },
  {
    "line": 96,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Loading JSON data from a file",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 776,
    "end_token": 785,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      12320,
      19449,
      1366,
      422,
      257,
      2393
    ],
    "label": "ml_signal",
    "reason": "Loading JSON data from a file"
  },
  {
    "line": 91,
    "text": "                    \"name\": block_stock.stock_name,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The use of open() without specifying an encoding can lead to issues with non-UTF-8 encoded files.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      3672,
      1298,
      2512,
      62,
      13578,
      13,
      13578,
      62,
      3672,
      11
    ],
    "start_token": 785,
    "end_token": 815,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      779,
      286,
      1280,
      3419,
      1231,
      31577,
      281,
      21004,
      460,
      1085,
      284,
      2428,
      351,
      1729,
      12,
      48504,
      12,
      23,
      30240,
      3696,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The use of open() without specifying an encoding can lead to issues with non-UTF-8 encoded files."
  },
  {
    "line": 92,
    "text": "                    \"tag\": industry_to_tag(block_stock.name),",
    "annotation": "\u2705 Best Practice: Use os.path.join for file paths to ensure cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      12985,
      1298,
      2831,
      62,
      1462,
      62,
      12985,
      7,
      9967,
      62,
      13578,
      13,
      3672,
      828
    ],
    "start_token": 815,
    "end_token": 849,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      28686,
      13,
      6978,
      13,
      22179,
      329,
      2393,
      13532,
      284,
      4155,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use os.path.join for file paths to ensure cross-platform compatibility."
  },
  {
    "line": 93,
    "text": "                    \"reason\": \"\",",
    "annotation": "\u2705 Best Practice: Use os.path.dirname(__file__) to construct file paths relative to the current file's location.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      41181,
      1298,
      366,
      1600
    ],
    "start_token": 849,
    "end_token": 873,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      28686,
      13,
      6978,
      13,
      15908,
      3672,
      7,
      834,
      7753,
      834,
      8,
      284,
      5678,
      2393,
      13532,
      3585,
      284,
      262,
      1459,
      2393,
      338,
      4067,
      13
    ],
    "label": "best_practice",
    "reason": "Use os.path.dirname(__file__) to construct file paths relative to the current file's location."
  },
  {
    "line": 94,
    "text": "                }",
    "annotation": "\ud83e\udde0 ML Signal: The function reads a JSON file, indicating a pattern of configuration or data-driven behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 873,
    "end_token": 889,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      9743,
      257,
      19449,
      2393,
      11,
      12739,
      257,
      3912,
      286,
      8398,
      393,
      1366,
      12,
      15808,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "The function reads a JSON file, indicating a pattern of configuration or data-driven behavior."
  },
  {
    "line": 94,
    "text": "                }",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statements for 'os' and 'json' modules.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 889,
    "end_token": 905,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      6299,
      329,
      705,
      418,
      6,
      290,
      705,
      17752,
      6,
      13103,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statements for 'os' and 'json' modules."
  },
  {
    "line": 96,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential file path manipulation vulnerability if __file__ is not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 905,
    "end_token": 914,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2393,
      3108,
      17512,
      15131,
      611,
      11593,
      7753,
      834,
      318,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential file path manipulation vulnerability if __file__ is not properly validated."
  },
  {
    "line": 98,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Unvalidated external input from file, potential for JSON injection if file contents are not trusted.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 914,
    "end_token": 914,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      791,
      12102,
      515,
      7097,
      5128,
      422,
      2393,
      11,
      2785,
      329,
      19449,
      16954,
      611,
      2393,
      10154,
      389,
      407,
      13467,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Unvalidated external input from file, potential for JSON injection if file contents are not trusted."
  },
  {
    "line": 102,
    "text": "def get_main_line_tags():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of query_data method indicates interaction with a database or data source.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      12417,
      62,
      1370,
      62,
      31499,
      33529
    ],
    "start_token": 914,
    "end_token": 923,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      12405,
      62,
      7890,
      2446,
      9217,
      10375,
      351,
      257,
      6831,
      393,
      1366,
      2723,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of query_data method indicates interaction with a database or data source."
  },
  {
    "line": 104,
    "text": "        return json.load(f)",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of DataFrame column to list, common pattern in data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      33918,
      13,
      2220,
      7,
      69,
      8
    ],
    "start_token": 923,
    "end_token": 937,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6060,
      19778,
      5721,
      284,
      1351,
      11,
      2219,
      3912,
      287,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of DataFrame column to list, common pattern in data processing."
  },
  {
    "line": 107,
    "text": "def get_main_line_hidden_tags():",
    "annotation": "\ud83e\udde0 ML Signal: Function call with keyword argument, useful for understanding function usage patterns.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      12417,
      62,
      1370,
      62,
      30342,
      62,
      31499,
      33529
    ],
    "start_token": 937,
    "end_token": 948,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      21179,
      4578,
      11,
      4465,
      329,
      4547,
      2163,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call with keyword argument, useful for understanding function usage patterns."
  },
  {
    "line": 112,
    "text": "def replace_tags(old_tag=\"\u4eea\u5668\u4eea\u8868\"):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Writing to a file without validation, potential for overwriting important files.",
    "confidence": 0.5,
    "tokens": [
      4299,
      6330,
      62,
      31499,
      7,
      727,
      62,
      12985,
      2625,
      20015,
      103,
      161,
      247,
      101,
      20015,
      103,
      26193,
      101,
      1,
      2599
    ],
    "start_token": 948,
    "end_token": 968,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      22183,
      284,
      257,
      2393,
      1231,
      21201,
      11,
      2785,
      329,
      6993,
      799,
      278,
      1593,
      3696,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Writing to a file without validation, potential for overwriting important files."
  },
  {
    "line": 114,
    "text": "        stock_tags = json.load(f)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure_ascii=False can lead to encoding issues if not handled properly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      31499,
      796,
      33918,
      13,
      2220,
      7,
      69,
      8
    ],
    "start_token": 968,
    "end_token": 985,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      62,
      292,
      979,
      72,
      28,
      25101,
      460,
      1085,
      284,
      21004,
      2428,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure_ascii=False can lead to encoding issues if not handled properly."
  },
  {
    "line": 108,
    "text": "    with open(os.path.join(os.path.dirname(__file__), \"main_line_hidden_tags.json\")) as f:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statements for 'os', 'json', and 'Counter' can lead to runtime errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      351,
      1280,
      7,
      418,
      13,
      6978,
      13,
      22179,
      7,
      418,
      13,
      6978,
      13,
      15908,
      3672,
      7,
      834,
      7753,
      834,
      828,
      366,
      12417,
      62,
      1370,
      62,
      30342,
      62,
      31499,
      13,
      17752,
      48774,
      355,
      277,
      25
    ],
    "start_token": 985,
    "end_token": 1022,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      6299,
      329,
      705,
      418,
      3256,
      705,
      17752,
      3256,
      290,
      705,
      31694,
      6,
      460,
      1085,
      284,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statements for 'os', 'json', and 'Counter' can lead to runtime errors."
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using '__file__' can expose sensitive file path information.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1022,
    "end_token": 1022,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      705,
      834,
      7753,
      834,
      6,
      460,
      15651,
      8564,
      2393,
      3108,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using '__file__' can expose sensitive file path information."
  },
  {
    "line": 112,
    "text": "def replace_tags(old_tag=\"\u4eea\u5668\u4eea\u8868\"):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Loading JSON without validation can lead to potential security risks.",
    "confidence": 1.0,
    "tokens": [
      4299,
      6330,
      62,
      31499,
      7,
      727,
      62,
      12985,
      2625,
      20015,
      103,
      161,
      247,
      101,
      20015,
      103,
      26193,
      101,
      1,
      2599
    ],
    "start_token": 1022,
    "end_token": 1042,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12320,
      19449,
      1231,
      21201,
      460,
      1085,
      284,
      2785,
      2324,
      7476,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Loading JSON without validation can lead to potential security risks."
  },
  {
    "line": 114,
    "text": "        stock_tags = json.load(f)",
    "annotation": "\u2705 Best Practice: Initialize collections outside of loops for clarity and efficiency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      31499,
      796,
      33918,
      13,
      2220,
      7,
      69,
      8
    ],
    "start_token": 1042,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      17268,
      2354,
      286,
      23607,
      329,
      16287,
      290,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize collections outside of loops for clarity and efficiency."
  },
  {
    "line": 121,
    "text": "                    if tag:",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      7621,
      25
    ],
    "start_token": 1059,
    "end_token": 1081,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output."
  },
  {
    "line": 131,
    "text": "        stock_tags = json.load(f)",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      31499,
      796,
      33918,
      13,
      2220,
      7,
      69,
      8
    ],
    "start_token": 1081,
    "end_token": 1098,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output."
  },
  {
    "line": 135,
    "text": "        final_tags = []",
    "annotation": "\ud83e\udde0 ML Signal: Counting duplicates in a list is a common pattern for data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2457,
      62,
      31499,
      796,
      17635
    ],
    "start_token": 1098,
    "end_token": 1110,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      14184,
      16856,
      287,
      257,
      1351,
      318,
      257,
      2219,
      3912,
      329,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Counting duplicates in a list is a common pattern for data analysis."
  },
  {
    "line": 137,
    "text": "            stock_code = stock_tag[\"code\"]",
    "annotation": "\ud83e\udde0 ML Signal: Identifying duplicates in a collection is a common data processing task.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      8189,
      796,
      4283,
      62,
      12985,
      14692,
      8189,
      8973
    ],
    "start_token": 1110,
    "end_token": 1131,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      14184,
      16856,
      287,
      257,
      4947,
      318,
      257,
      2219,
      1366,
      7587,
      4876,
      13
    ],
    "label": "ml_signal",
    "reason": "Identifying duplicates in a collection is a common data processing task."
  },
  {
    "line": 132,
    "text": "        tags = set()",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a single responsibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      796,
      900,
      3419
    ],
    "start_token": 1131,
    "end_token": 1142,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2060,
      5798
    ],
    "label": "ml_signal",
    "reason": "Function definition with a single responsibility"
  },
  {
    "line": 134,
    "text": "        stocks = []",
    "annotation": "\ud83e\udde0 ML Signal: Function call with named argument",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14420,
      796,
      17635
    ],
    "start_token": 1142,
    "end_token": 1152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      3706,
      4578
    ],
    "label": "ml_signal",
    "reason": "Function call with named argument"
  },
  {
    "line": 135,
    "text": "        final_tags = []",
    "annotation": "\u2705 Best Practice: Use of named argument for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2457,
      62,
      31499,
      796,
      17635
    ],
    "start_token": 1152,
    "end_token": 1164,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      4578,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of named argument for clarity"
  },
  {
    "line": 137,
    "text": "            stock_code = stock_tag[\"code\"]",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on function output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      8189,
      796,
      4283,
      62,
      12985,
      14692,
      8189,
      8973
    ],
    "start_token": 1164,
    "end_token": 1185,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2163,
      5072
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on function output"
  },
  {
    "line": 139,
    "text": "                print(stock_code)",
    "annotation": "\ud83e\udde0 ML Signal: Return statement with a specific value based on condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      13578,
      62,
      8189,
      8
    ],
    "start_token": 1185,
    "end_token": 1206,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      2643,
      351,
      257,
      2176,
      1988,
      1912,
      319,
      4006
    ],
    "label": "ml_signal",
    "reason": "Return statement with a specific value based on condition"
  },
  {
    "line": 136,
    "text": "        for stock_tag in stock_tags:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statement for 'os' and 'json' modules.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4283,
      62,
      12985,
      287,
      4283,
      62,
      31499,
      25
    ],
    "start_token": 1206,
    "end_token": 1222,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      2643,
      329,
      705,
      418,
      6,
      290,
      705,
      17752,
      6,
      13103,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statement for 'os' and 'json' modules."
  },
  {
    "line": 139,
    "text": "                print(stock_code)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential file path manipulation vulnerability if 'os.path.join' is used with untrusted input.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      13578,
      62,
      8189,
      8
    ],
    "start_token": 1222,
    "end_token": 1243,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2393,
      3108,
      17512,
      15131,
      611,
      705,
      418,
      13,
      6978,
      13,
      22179,
      6,
      318,
      973,
      351,
      1418,
      81,
      8459,
      5128,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential file path manipulation vulnerability if 'os.path.join' is used with untrusted input."
  },
  {
    "line": 140,
    "text": "            tags.add(stock_tag[\"tag\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Loading JSON data from a file without validation can lead to potential data integrity issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      13,
      2860,
      7,
      13578,
      62,
      12985,
      14692,
      12985,
      8973,
      8
    ],
    "start_token": 1243,
    "end_token": 1265,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12320,
      19449,
      1366,
      422,
      257,
      2393,
      1231,
      21201,
      460,
      1085,
      284,
      2785,
      1366,
      11540,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Loading JSON data from a file without validation can lead to potential data integrity issues."
  },
  {
    "line": 140,
    "text": "            tags.add(stock_tag[\"tag\"])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list comprehension to filter and transform data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15940,
      13,
      2860,
      7,
      13578,
      62,
      12985,
      14692,
      12985,
      8973,
      8
    ],
    "start_token": 1265,
    "end_token": 1287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      35915,
      284,
      8106,
      290,
      6121,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of list comprehension to filter and transform data."
  },
  {
    "line": 149,
    "text": "        #     json.dump(final_tags, json_file, indent=2, ensure_ascii=False)",
    "annotation": "\u2705 Best Practice: Use of 'get' method to safely access dictionary keys.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      220,
      33918,
      13,
      39455,
      7,
      20311,
      62,
      31499,
      11,
      33918,
      62,
      7753,
      11,
      33793,
      28,
      17,
      11,
      4155,
      62,
      292,
      979,
      72,
      28,
      25101,
      8
    ],
    "start_token": 1287,
    "end_token": 1323,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      1136,
      6,
      2446,
      284,
      11512,
      1895,
      22155,
      8251,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'get' method to safely access dictionary keys."
  },
  {
    "line": 152,
    "text": "        print(hidden_tags)",
    "annotation": "\u2705 Best Practice: Filtering data using list comprehension for efficiency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      30342,
      62,
      31499,
      8
    ],
    "start_token": 1323,
    "end_token": 1336,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      1366,
      1262,
      1351,
      35915,
      329,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Filtering data using list comprehension for efficiency."
  },
  {
    "line": 155,
    "text": "        duplicates = [item for item, frequency in count.items() if frequency > 1]",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used to create a list of codes not found in 'code_tag_hidden_tag_list'.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14184,
      16856,
      796,
      685,
      9186,
      329,
      2378,
      11,
      8373,
      287,
      954,
      13,
      23814,
      3419,
      611,
      8373,
      1875,
      352,
      60
    ],
    "start_token": 1336,
    "end_token": 1362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      284,
      2251,
      257,
      1351,
      286,
      12416,
      407,
      1043,
      287,
      705,
      8189,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868,
      4458
    ],
    "label": "ml_signal",
    "reason": "List comprehension used to create a list of codes not found in 'code_tag_hidden_tag_list'."
  },
  {
    "line": 158,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with keyword arguments.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1362,
    "end_token": 1362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      21179,
      7159,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call with keyword arguments."
  },
  {
    "line": 161,
    "text": "    if exchange == \"bj\":",
    "annotation": "\u2705 Best Practice: Appending tuples to a list for structured data storage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      5163,
      6624,
      366,
      50007,
      1298
    ],
    "start_token": 1362,
    "end_token": 1371,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      1571,
      12777,
      2374,
      284,
      257,
      1351,
      329,
      20793,
      1366,
      6143,
      13
    ],
    "label": "best_practice",
    "reason": "Appending tuples to a list for structured data storage."
  },
  {
    "line": 157,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1371,
    "end_token": 1371,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 159,
    "text": "def get_hidden_code(code):",
    "annotation": "\u2705 Best Practice: Use a dictionary comprehension for more concise and readable code.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      30342,
      62,
      8189,
      7,
      8189,
      2599
    ],
    "start_token": 1371,
    "end_token": 1380,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      22155,
      35915,
      329,
      517,
      35327,
      290,
      31744,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Use a dictionary comprehension for more concise and readable code."
  },
  {
    "line": 162,
    "text": "        return \"\u5317\u4ea4\u6240\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to retrieve tags based on entity codes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      44293,
      245,
      12859,
      97,
      33699,
      222,
      1
    ],
    "start_token": 1380,
    "end_token": 1396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      19818,
      15940,
      1912,
      319,
      9312,
      12416,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to retrieve tags based on entity codes."
  },
  {
    "line": 165,
    "text": "def get_core_tag(codes):",
    "annotation": "\u2705 Best Practice: Use 'in' to check for membership in a list or set.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      7295,
      62,
      12985,
      7,
      40148,
      2599
    ],
    "start_token": 1396,
    "end_token": 1405,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      259,
      6,
      284,
      2198,
      329,
      9931,
      287,
      257,
      1351,
      393,
      900,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'in' to check for membership in a list or set."
  },
  {
    "line": 167,
    "text": "    other_codes = []",
    "annotation": "\u2705 Best Practice: Use setdefault to simplify dictionary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      584,
      62,
      40148,
      796,
      17635
    ],
    "start_token": 1405,
    "end_token": 1413,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      12286,
      284,
      30276,
      22155,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use setdefault to simplify dictionary operations."
  },
  {
    "line": 169,
    "text": "        stock_tags = json.load(f)",
    "annotation": "\u2705 Best Practice: Use setdefault to simplify dictionary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      31499,
      796,
      33918,
      13,
      2220,
      7,
      69,
      8
    ],
    "start_token": 1413,
    "end_token": 1430,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      12286,
      284,
      30276,
      22155,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use setdefault to simplify dictionary operations."
  },
  {
    "line": 171,
    "text": "            (",
    "annotation": "\u2705 Best Practice: Use 'in' to check for membership in a list or set.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357
    ],
    "start_token": 1430,
    "end_token": 1442,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      259,
      6,
      284,
      2198,
      329,
      9931,
      287,
      257,
      1351,
      393,
      900,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'in' to check for membership in a list or set."
  },
  {
    "line": 172,
    "text": "                stock_tag[\"code\"],",
    "annotation": "\u2705 Best Practice: Use setdefault to simplify dictionary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      12985,
      14692,
      8189,
      33116
    ],
    "start_token": 1442,
    "end_token": 1463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      12286,
      284,
      30276,
      22155,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use setdefault to simplify dictionary operations."
  },
  {
    "line": 172,
    "text": "                stock_tag[\"code\"],",
    "annotation": "\u2705 Best Practice: Use setdefault to simplify dictionary operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      12985,
      14692,
      8189,
      33116
    ],
    "start_token": 1463,
    "end_token": 1484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      12286,
      284,
      30276,
      22155,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use setdefault to simplify dictionary operations."
  },
  {
    "line": 172,
    "text": "                stock_tag[\"code\"],",
    "annotation": "\ud83e\udde0 ML Signal: Sorting entities by the number of stocks in descending order.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      12985,
      14692,
      8189,
      33116
    ],
    "start_token": 1484,
    "end_token": 1505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      12066,
      416,
      262,
      1271,
      286,
      14420,
      287,
      31491,
      1502,
      13
    ],
    "label": "ml_signal",
    "reason": "Sorting entities by the number of stocks in descending order."
  },
  {
    "line": 170,
    "text": "        code_tag_hidden_tag_list = [",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for processing stock data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868,
      796,
      685
    ],
    "start_token": 1505,
    "end_token": 1523,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      7587,
      4283,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for processing stock data"
  },
  {
    "line": 172,
    "text": "                stock_tag[\"code\"],",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database using filters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      12985,
      14692,
      8189,
      33116
    ],
    "start_token": 1523,
    "end_token": 1544,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831,
      1262,
      16628
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database using filters"
  },
  {
    "line": 172,
    "text": "                stock_tag[\"code\"],",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for data transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      12985,
      14692,
      8189,
      33116
    ],
    "start_token": 1544,
    "end_token": 1565,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for data transformation"
  },
  {
    "line": 185,
    "text": "            code_tag_hidden_tag_list.append((code, \"\u672a\u77e5\", get_hidden_code(code)))",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic file path creation based on input parameter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868,
      13,
      33295,
      19510,
      8189,
      11,
      366,
      17312,
      103,
      163,
      253,
      98,
      1600,
      651,
      62,
      30342,
      62,
      8189,
      7,
      8189,
      22305
    ],
    "start_token": 1565,
    "end_token": 1605,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2393,
      3108,
      6282,
      1912,
      319,
      5128,
      11507
    ],
    "label": "ml_signal",
    "reason": "Dynamic file path creation based on input parameter"
  },
  {
    "line": 187,
    "text": "    return code_tag_hidden_tag_list",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of overwriting existing files",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      2438,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868
    ],
    "start_token": 1605,
    "end_token": 1618,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      6993,
      799,
      278,
      4683,
      3696
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of overwriting existing files"
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for file operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1618,
    "end_token": 1618,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      2393,
      4560
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for file operations"
  },
  {
    "line": 185,
    "text": "            code_tag_hidden_tag_list.append((code, \"\u672a\u77e5\", get_hidden_code(code)))",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a merge operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868,
      13,
      33295,
      19510,
      8189,
      11,
      366,
      17312,
      103,
      163,
      253,
      98,
      1600,
      651,
      62,
      30342,
      62,
      8189,
      7,
      8189,
      22305
    ],
    "start_token": 1618,
    "end_token": 1658,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      20121,
      4905
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a merge operation"
  },
  {
    "line": 187,
    "text": "    return code_tag_hidden_tag_list",
    "annotation": "\u2705 Best Practice: Dictionary comprehension for efficient lookup",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      2438,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868
    ],
    "start_token": 1658,
    "end_token": 1671,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      28261,
      35915,
      329,
      6942,
      35847
    ],
    "label": "best_practice",
    "reason": "Dictionary comprehension for efficient lookup"
  },
  {
    "line": 190,
    "text": "def group_stocks_by_tag(entities, hidden_tags=None):",
    "annotation": "\u2705 Best Practice: Clear variable naming for readability",
    "confidence": 0.5,
    "tokens": [
      4299,
      1448,
      62,
      29522,
      62,
      1525,
      62,
      12985,
      7,
      298,
      871,
      11,
      7104,
      62,
      31499,
      28,
      14202,
      2599
    ],
    "start_token": 1671,
    "end_token": 1689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      7885,
      19264,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Clear variable naming for readability"
  },
  {
    "line": 193,
    "text": "    tag_stocks = {}",
    "annotation": "\u2705 Best Practice: Directly appending to list when condition is met",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7621,
      62,
      29522,
      796,
      23884
    ],
    "start_token": 1689,
    "end_token": 1697,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      306,
      598,
      1571,
      284,
      1351,
      618,
      4006,
      318,
      1138
    ],
    "label": "best_practice",
    "reason": "Directly appending to list when condition is met"
  },
  {
    "line": 196,
    "text": "        if hidden_tags and (hidden_tag in hidden_tags):",
    "annotation": "\u2705 Best Practice: Use of boolean logic for conditional updates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      7104,
      62,
      31499,
      290,
      357,
      30342,
      62,
      12985,
      287,
      7104,
      62,
      31499,
      2599
    ],
    "start_token": 1697,
    "end_token": 1718,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      25131,
      9156,
      329,
      26340,
      5992
    ],
    "label": "best_practice",
    "reason": "Use of boolean logic for conditional updates"
  },
  {
    "line": 198,
    "text": "            tag_stocks.get(hidden_tag).append(code_entities_map.get(code))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"hidden_tag\" is not present in added_tag",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7621,
      62,
      29522,
      13,
      1136,
      7,
      30342,
      62,
      12985,
      737,
      33295,
      7,
      8189,
      62,
      298,
      871,
      62,
      8899,
      13,
      1136,
      7,
      8189,
      4008
    ],
    "start_token": 1718,
    "end_token": 1752,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      30342,
      62,
      12985,
      1,
      318,
      407,
      1944,
      287,
      2087,
      62,
      12985
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"hidden_tag\" is not present in added_tag"
  },
  {
    "line": 200,
    "text": "            tag_stocks.setdefault(tag, [])",
    "annotation": "\u2705 Best Practice: Returning the modified list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7621,
      62,
      29522,
      13,
      2617,
      12286,
      7,
      12985,
      11,
      685,
      12962
    ],
    "start_token": 1752,
    "end_token": 1774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      262,
      9518,
      1351
    ],
    "label": "best_practice",
    "reason": "Returning the modified list"
  },
  {
    "line": 195,
    "text": "    for code, tag, hidden_tag in code_tag_hidden_tag_list:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statements for 'os' and 'json' modules",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      2438,
      11,
      7621,
      11,
      7104,
      62,
      12985,
      287,
      2438,
      62,
      12985,
      62,
      30342,
      62,
      12985,
      62,
      4868,
      25
    ],
    "start_token": 1774,
    "end_token": 1796,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      6299,
      329,
      705,
      418,
      6,
      290,
      705,
      17752,
      6,
      13103
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statements for 'os' and 'json' modules"
  },
  {
    "line": 197,
    "text": "            tag_stocks.setdefault(hidden_tag, [])",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential file path traversal vulnerability if input filenames are not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7621,
      62,
      29522,
      13,
      2617,
      12286,
      7,
      30342,
      62,
      12985,
      11,
      685,
      12962
    ],
    "start_token": 1796,
    "end_token": 1820,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2393,
      3108,
      33038,
      282,
      15131,
      611,
      5128,
      1226,
      268,
      1047,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential file path traversal vulnerability if input filenames are not validated"
  },
  {
    "line": 199,
    "text": "        if (tag != hidden_tag) or (not hidden_tags):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Deserializing JSON data from an untrusted source can lead to security issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      357,
      12985,
      14512,
      7104,
      62,
      12985,
      8,
      393,
      357,
      1662,
      7104,
      62,
      31499,
      2599
    ],
    "start_token": 1820,
    "end_token": 1842,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      2935,
      48499,
      2890,
      19449,
      1366,
      422,
      281,
      1418,
      81,
      8459,
      2723,
      460,
      1085,
      284,
      2324,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Deserializing JSON data from an untrusted source can lead to security issues"
  },
  {
    "line": 201,
    "text": "            tag_stocks.get(tag).append(code_entities_map.get(code))",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential file path traversal vulnerability if input filenames are not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7621,
      62,
      29522,
      13,
      1136,
      7,
      12985,
      737,
      33295,
      7,
      8189,
      62,
      298,
      871,
      62,
      8899,
      13,
      1136,
      7,
      8189,
      4008
    ],
    "start_token": 1842,
    "end_token": 1874,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2393,
      3108,
      33038,
      282,
      15131,
      611,
      5128,
      1226,
      268,
      1047,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential file path traversal vulnerability if input filenames are not validated"
  },
  {
    "line": 203,
    "text": "    sorted_entities = sorted(tag_stocks.items(), key=lambda x: len(x[1]), reverse=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Deserializing JSON data from an untrusted source can lead to security issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      23243,
      62,
      298,
      871,
      796,
      23243,
      7,
      12985,
      62,
      29522,
      13,
      23814,
      22784,
      1994,
      28,
      50033,
      2124,
      25,
      18896,
      7,
      87,
      58,
      16,
      46570,
      9575,
      28,
      17821,
      8
    ],
    "start_token": 1874,
    "end_token": 1905,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      2935,
      48499,
      2890,
      19449,
      1366,
      422,
      281,
      1418,
      81,
      8459,
      2723,
      460,
      1085,
      284,
      2324,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Deserializing JSON data from an untrusted source can lead to security issues"
  },
  {
    "line": 205,
    "text": "    return sorted_entities",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom function 'merge_tags' indicates a pattern for merging data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      23243,
      62,
      298,
      871
    ],
    "start_token": 1905,
    "end_token": 1913,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2163,
      705,
      647,
      469,
      62,
      31499,
      6,
      9217,
      257,
      3912,
      329,
      35981,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom function 'merge_tags' indicates a pattern for merging data"
  },
  {
    "line": 207,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Writing to a file without validating the file path can lead to file overwrite vulnerabilities",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1913,
    "end_token": 1913,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      22183,
      284,
      257,
      2393,
      1231,
      4938,
      803,
      262,
      2393,
      3108,
      460,
      1085,
      284,
      2393,
      49312,
      23805
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Writing to a file without validating the file path can lead to file overwrite vulnerabilities"
  },
  {
    "line": 207,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of 'json.dump' with 'indent' and 'ensure_ascii' parameters indicates a pattern for JSON serialization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1913,
    "end_token": 1913,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      17752,
      13,
      39455,
      6,
      351,
      705,
      521,
      298,
      6,
      290,
      705,
      641,
      495,
      62,
      292,
      979,
      72,
      6,
      10007,
      9217,
      257,
      3912,
      329,
      19449,
      11389,
      1634
    ],
    "label": "ml_signal",
    "reason": "Usage of 'json.dump' with 'indent' and 'ensure_ascii' parameters indicates a pattern for JSON serialization"
  },
  {
    "line": 203,
    "text": "    sorted_entities = sorted(tag_stocks.items(), key=lambda x: len(x[1]), reverse=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statements for 'os' and 'json' modules.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      23243,
      62,
      298,
      871,
      796,
      23243,
      7,
      12985,
      62,
      29522,
      13,
      23814,
      22784,
      1994,
      28,
      50033,
      2124,
      25,
      18896,
      7,
      87,
      58,
      16,
      46570,
      9575,
      28,
      17821,
      8
    ],
    "start_token": 1913,
    "end_token": 1944,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      6299,
      329,
      705,
      418,
      6,
      290,
      705,
      17752,
      6,
      13103,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statements for 'os' and 'json' modules."
  },
  {
    "line": 204,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'with open' ensures the file is properly closed after its suite finishes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1944,
    "end_token": 1944,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      4480,
      1280,
      6,
      19047,
      262,
      2393,
      318,
      6105,
      4838,
      706,
      663,
      18389,
      20271,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'with open' ensures the file is properly closed after its suite finishes."
  },
  {
    "line": 207,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extracting specific fields from a JSON structure.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1944,
    "end_token": 1944,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      2176,
      7032,
      422,
      257,
      19449,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracting specific fields from a JSON structure."
  },
  {
    "line": 207,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Querying data with specific filters.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1944,
    "end_token": 1944,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      351,
      2176,
      16628,
      13
    ],
    "label": "ml_signal",
    "reason": "Querying data with specific filters."
  },
  {
    "line": 217,
    "text": "        }",
    "annotation": "\ud83e\udde0 ML Signal: Converting a DataFrame column to a list.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1944,
    "end_token": 1952,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      6060,
      19778,
      5721,
      284,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting a DataFrame column to a list."
  },
  {
    "line": 219,
    "text": "    ]",
    "annotation": "\u2705 Best Practice: Printing the length of a list for debugging purposes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2361
    ],
    "start_token": 1952,
    "end_token": 1956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44118,
      262,
      4129,
      286,
      257,
      1351,
      329,
      28769,
      4959,
      13
    ],
    "label": "best_practice",
    "reason": "Printing the length of a list for debugging purposes."
  },
  {
    "line": 221,
    "text": "    # Specify the file path where you want to save the JSON data",
    "annotation": "\ud83e\udde0 ML Signal: Building tags based on a list of codes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      18291,
      1958,
      262,
      2393,
      3108,
      810,
      345,
      765,
      284,
      3613,
      262,
      19449,
      1366
    ],
    "start_token": 1956,
    "end_token": 1973,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11819,
      15940,
      1912,
      319,
      257,
      1351,
      286,
      12416,
      13
    ],
    "label": "ml_signal",
    "reason": "Building tags based on a list of codes."
  },
  {
    "line": 223,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'with open' ensures the file is properly closed after its suite finishes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1973,
    "end_token": 1973,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      4480,
      1280,
      6,
      19047,
      262,
      2393,
      318,
      6105,
      4838,
      706,
      663,
      18389,
      20271,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'with open' ensures the file is properly closed after its suite finishes."
  },
  {
    "line": 225,
    "text": "    with open(file_path, \"w\") as json_file:",
    "annotation": "\u2705 Best Practice: Use of 'json.dump' with 'indent' and 'ensure_ascii' for readable JSON output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      351,
      1280,
      7,
      7753,
      62,
      6978,
      11,
      366,
      86,
      4943,
      355,
      33918,
      62,
      7753,
      25
    ],
    "start_token": 1973,
    "end_token": 1991,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      17752,
      13,
      39455,
      6,
      351,
      705,
      521,
      298,
      6,
      290,
      705,
      641,
      495,
      62,
      292,
      979,
      72,
      6,
      329,
      31744,
      19449,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'json.dump' with 'indent' and 'ensure_ascii' for readable JSON output."
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Missing import statements for 'os' and 'json' modules.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1991,
    "end_token": 1991,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25639,
      1330,
      6299,
      329,
      705,
      418,
      6,
      290,
      705,
      17752,
      6,
      13103,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Missing import statements for 'os' and 'json' modules."
  },
  {
    "line": 222,
    "text": "    file_path = f\"{tag}.json\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential file operation error if \"stock_tags.json\" does not exist or is inaccessible.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2393,
      62,
      6978,
      796,
      277,
      1,
      90,
      12985,
      27422,
      17752,
      1
    ],
    "start_token": 1991,
    "end_token": 2005,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2393,
      4905,
      4049,
      611,
      366,
      13578,
      62,
      31499,
      13,
      17752,
      1,
      857,
      407,
      2152,
      393,
      318,
      40604,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential file operation error if \"stock_tags.json\" does not exist or is inaccessible."
  },
  {
    "line": 224,
    "text": "    # Write JSON data to the file",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential error if the JSON structure is not as expected.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      19430,
      19449,
      1366,
      284,
      262,
      2393
    ],
    "start_token": 2005,
    "end_token": 2015,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      4049,
      611,
      262,
      19449,
      4645,
      318,
      407,
      355,
      2938,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential error if the JSON structure is not as expected."
  },
  {
    "line": 226,
    "text": "        json.dump(datas, json_file, indent=2, ensure_ascii=False)",
    "annotation": "\u2705 Best Practice: Use 'get' method to avoid KeyError if \"hidden_tag\" is missing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33918,
      13,
      39455,
      7,
      19608,
      292,
      11,
      33918,
      62,
      7753,
      11,
      33793,
      28,
      17,
      11,
      4155,
      62,
      292,
      979,
      72,
      28,
      25101,
      8
    ],
    "start_token": 2015,
    "end_token": 2045,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      1136,
      6,
      2446,
      284,
      3368,
      7383,
      12331,
      611,
      366,
      30342,
      62,
      12985,
      1,
      318,
      4814,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'get' method to avoid KeyError if \"hidden_tag\" is missing."
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to determine exchange based on stock code.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2045,
    "end_token": 2045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      5004,
      5163,
      1912,
      319,
      4283,
      2438,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to determine exchange based on stock code."
  },
  {
    "line": 230,
    "text": "    code_tags_map = {item[\"code\"]: item for item in current_tags}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data loss if \"result.json\" already exists.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      62,
      31499,
      62,
      8899,
      796,
      1391,
      9186,
      14692,
      8189,
      1,
      5974,
      2378,
      329,
      2378,
      287,
      1459,
      62,
      31499,
      92
    ],
    "start_token": 2045,
    "end_token": 2068,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      2994,
      611,
      366,
      20274,
      13,
      17752,
      1,
      1541,
      7160,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data loss if \"result.json\" already exists."
  },
  {
    "line": 230,
    "text": "    code_tags_map = {item[\"code\"]: item for item in current_tags}",
    "annotation": "\u2705 Best Practice: Use 'indent' and 'ensure_ascii' for better readability and handling of non-ASCII characters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      62,
      31499,
      62,
      8899,
      796,
      1391,
      9186,
      14692,
      8189,
      1,
      5974,
      2378,
      329,
      2378,
      287,
      1459,
      62,
      31499,
      92
    ],
    "start_token": 2068,
    "end_token": 2091,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      521,
      298,
      6,
      290,
      705,
      641,
      495,
      62,
      292,
      979,
      72,
      6,
      329,
      1365,
      1100,
      1799,
      290,
      9041,
      286,
      1729,
      12,
      42643,
      3978,
      3435,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'indent' and 'ensure_ascii' for better readability and handling of non-ASCII characters."
  },
  {
    "line": 230,
    "text": "    code_tags_map = {item[\"code\"]: item for item in current_tags}",
    "annotation": "\ud83e\udde0 ML Signal: Direct function call with a specific stock code.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      62,
      31499,
      62,
      8899,
      796,
      1391,
      9186,
      14692,
      8189,
      1,
      5974,
      2378,
      329,
      2378,
      287,
      1459,
      62,
      31499,
      92
    ],
    "start_token": 2091,
    "end_token": 2114,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      2163,
      869,
      351,
      257,
      2176,
      4283,
      2438,
      13
    ],
    "label": "ml_signal",
    "reason": "Direct function call with a specific stock code."
  }
]
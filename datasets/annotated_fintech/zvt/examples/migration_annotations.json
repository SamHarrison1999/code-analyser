[
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability."
  },
  {
    "line": 7,
    "text": "from sqlalchemy.orm import declarative_base",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      13,
      579,
      1330,
      2377,
      283,
      876,
      62,
      8692
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability."
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\u2705 Best Practice: Naming conventions for constants should be in uppercase.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      399,
      3723,
      21396,
      329,
      38491,
      815,
      307,
      287,
      334,
      39921,
      589,
      13
    ],
    "label": "best_practice",
    "reason": "Naming conventions for constants should be in uppercase."
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of SQLAlchemy's Column to define database table columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      16363,
      2348,
      26599,
      338,
      29201,
      284,
      8160,
      6831,
      3084,
      15180
    ],
    "label": "best_practice",
    "reason": "Use of SQLAlchemy's Column to define database table columns"
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of JSON column type for storing JSON data in SQLAlchemy",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19449,
      5721,
      2099,
      329,
      23069,
      19449,
      1366,
      287,
      16363,
      2348,
      26599
    ],
    "label": "best_practice",
    "reason": "Use of JSON column type for storing JSON data in SQLAlchemy"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of ConfigDict for model configuration enhances flexibility and readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      17056,
      35,
      713,
      329,
      2746,
      8398,
      32479,
      13688,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of ConfigDict for model configuration enhances flexibility and readability."
  },
  {
    "line": 19,
    "text": "    json_col = Column(JSON)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the datetime is properly validated and parsed to prevent errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      33918,
      62,
      4033,
      796,
      29201,
      7,
      40386,
      8
    ],
    "start_token": 12,
    "end_token": 23,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      4818,
      8079,
      318,
      6105,
      31031,
      290,
      44267,
      284,
      2948,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the datetime is properly validated and parsed to prevent errors."
  },
  {
    "line": 22,
    "text": "class UserModel(BaseModel):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the contents of the json_col are validated to prevent injection attacks.",
    "confidence": 0.5,
    "tokens": [
      4871,
      11787,
      17633,
      7,
      14881,
      17633,
      2599
    ],
    "start_token": 23,
    "end_token": 30,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      10154,
      286,
      262,
      33918,
      62,
      4033,
      389,
      31031,
      284,
      2948,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the contents of the json_col are validated to prevent injection attacks."
  },
  {
    "line": 23,
    "text": "    model_config = ConfigDict(from_attributes=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the schema registration does not expose sensitive data or misconfigure the database.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2746,
      62,
      11250,
      796,
      17056,
      35,
      713,
      7,
      6738,
      62,
      1078,
      7657,
      28,
      17821,
      8
    ],
    "start_token": 30,
    "end_token": 48,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      32815,
      9352,
      857,
      407,
      15651,
      8564,
      1366,
      393,
      2984,
      11250,
      495,
      262,
      6831,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the schema registration does not expose sensitive data or misconfigure the database."
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Example of instantiating a model with specific attributes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 48,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      9113,
      26336,
      257,
      2746,
      351,
      2176,
      12608,
      13
    ],
    "label": "ml_signal",
    "reason": "Example of instantiating a model with specific attributes."
  },
  {
    "line": 32,
    "text": "register_schema(providers=[\"zvt\"], db_name=\"test\", schema_base=ZvtInfoBase)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly using string for datetime; consider using a datetime object for accuracy.",
    "confidence": 0.5,
    "tokens": [
      30238,
      62,
      15952,
      2611,
      7,
      15234,
      4157,
      28,
      14692,
      89,
      36540,
      33116,
      20613,
      62,
      3672,
      2625,
      9288,
      1600,
      32815,
      62,
      8692,
      28,
      57,
      36540,
      12360,
      14881,
      8
    ],
    "start_token": 48,
    "end_token": 75,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      1262,
      4731,
      329,
      4818,
      8079,
      26,
      2074,
      1262,
      257,
      4818,
      8079,
      2134,
      329,
      9922,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly using string for datetime; consider using a datetime object for accuracy."
  },
  {
    "line": 32,
    "text": "register_schema(providers=[\"zvt\"], db_name=\"test\", schema_base=ZvtInfoBase)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the dictionary contents are sanitized to prevent security issues.",
    "confidence": 0.5,
    "tokens": [
      30238,
      62,
      15952,
      2611,
      7,
      15234,
      4157,
      28,
      14692,
      89,
      36540,
      33116,
      20613,
      62,
      3672,
      2625,
      9288,
      1600,
      32815,
      62,
      8692,
      28,
      57,
      36540,
      12360,
      14881,
      8
    ],
    "start_token": 75,
    "end_token": 102,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      22155,
      10154,
      389,
      5336,
      36951,
      284,
      2948,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the dictionary contents are sanitized to prevent security issues."
  },
  {
    "line": 32,
    "text": "register_schema(providers=[\"zvt\"], db_name=\"test\", schema_base=ZvtInfoBase)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the database session is securely handled and closed properly.",
    "confidence": 0.5,
    "tokens": [
      30238,
      62,
      15952,
      2611,
      7,
      15234,
      4157,
      28,
      14692,
      89,
      36540,
      33116,
      20613,
      62,
      3672,
      2625,
      9288,
      1600,
      32815,
      62,
      8692,
      28,
      57,
      36540,
      12360,
      14881,
      8
    ],
    "start_token": 102,
    "end_token": 129,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      6831,
      6246,
      318,
      30835,
      12118,
      290,
      4838,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the database session is securely handled and closed properly."
  },
  {
    "line": 32,
    "text": "register_schema(providers=[\"zvt\"], db_name=\"test\", schema_base=ZvtInfoBase)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the query is protected against SQL injection.",
    "confidence": 0.5,
    "tokens": [
      30238,
      62,
      15952,
      2611,
      7,
      15234,
      4157,
      28,
      14692,
      89,
      36540,
      33116,
      20613,
      62,
      3672,
      2625,
      9288,
      1600,
      32815,
      62,
      8692,
      28,
      57,
      36540,
      12360,
      14881,
      8
    ],
    "start_token": 129,
    "end_token": 156,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      12405,
      318,
      6861,
      1028,
      16363,
      16954,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the query is protected against SQL injection."
  },
  {
    "line": 32,
    "text": "register_schema(providers=[\"zvt\"], db_name=\"test\", schema_base=ZvtInfoBase)",
    "annotation": "\ud83e\udde0 ML Signal: Example of model validation usage pattern.",
    "confidence": 0.5,
    "tokens": [
      30238,
      62,
      15952,
      2611,
      7,
      15234,
      4157,
      28,
      14692,
      89,
      36540,
      33116,
      20613,
      62,
      3672,
      2625,
      9288,
      1600,
      32815,
      62,
      8692,
      28,
      57,
      36540,
      12360,
      14881,
      8
    ],
    "start_token": 156,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      286,
      2746,
      21201,
      8748,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Example of model validation usage pattern."
  }
]
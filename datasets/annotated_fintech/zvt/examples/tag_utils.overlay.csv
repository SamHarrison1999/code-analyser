annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping related imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 13]",1.0,4,best_practice,4,Grouping related imports together improves readability.,,0,from collections import Counter,"[6738, 17268, 1330, 15034]"
‚ö†Ô∏è SAST Risk (Low): Using os.environ can expose sensitive environment variables if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 28686, 13, 268, 2268, 460, 15651, 8564, 2858, 9633, 611, 407, 12118, 6105, 13]",0.5,20,sast_risk,7,Using os.environ can expose sensitive environment variables if not handled properly.,Low,4,"from zvt.domain import BlockStock, Block, Stock, LimitUpInfo","[6738, 1976, 36540, 13, 27830, 1330, 9726, 26207, 11, 9726, 11, 10500, 11, 27272, 4933, 12360]"
‚úÖ Best Practice: Providing a default value for environment variables can prevent runtime errors.,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 4277, 1988, 329, 2858, 9633, 460, 2948, 19124, 8563, 13]",0.5,34,best_practice,10,Providing a default value for environment variables can prevent runtime errors.,,20,def get_limit_up_reasons(entity_id):,"[4299, 651, 62, 32374, 62, 929, 62, 260, 2812, 7, 26858, 62, 312, 2599]"
‚ö†Ô∏è SAST Risk (Low): Loading JSON from a file without validation can lead to processing untrusted data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12320, 19449, 422, 257, 2393, 1231, 21201, 460, 1085, 284, 7587, 1418, 81, 8459, 1366, 13]",0.5,34,sast_risk,14,Loading JSON from a file without validation can lead to processing untrusted data.,Low,34,,[]
‚ö†Ô∏è SAST Risk (Low): Saving data to a file without proper permissions can lead to data exposure.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 34689, 1366, 284, 257, 2393, 1231, 1774, 21627, 460, 1085, 284, 1366, 7111, 13]",0.5,34,sast_risk,19,Saving data to a file without proper permissions can lead to data exposure.,Low,34,,[]
üß† ML Signal: Counting occurrences of items is a common pattern for frequency analysis.,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 40279, 286, 3709, 318, 257, 2219, 3912, 329, 8373, 3781, 13]",0.5,61,ml_signal,24,Counting occurrences of items is a common pattern for frequency analysis.,,34,        concepts = [item for sublist in concept_map.values() for item in sublist],"[220, 220, 220, 220, 220, 220, 220, 10838, 796, 685, 9186, 329, 850, 4868, 287, 3721, 62, 8899, 13, 27160, 3419, 329, 2378, 287, 850, 4868, 60]"
üß† ML Signal: Converting stock codes to IDs is a common pattern in financial data processing.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 4283, 12416, 284, 32373, 318, 257, 2219, 3912, 287, 3176, 1366, 7587, 13]",0.5,61,ml_signal,28,Converting stock codes to IDs is a common pattern in financial data processing.,,61,,[]
üß† ML Signal: Mapping stock codes to exchanges is a common pattern in financial applications.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 4283, 12416, 284, 14525, 318, 257, 2219, 3912, 287, 3176, 5479, 13]",0.5,88,ml_signal,32,Mapping stock codes to exchanges is a common pattern in financial applications.,,61,"    if industry in [""ÂçäÂØº‰Ωì"", ""ÁîµÂ≠êÂåñÂ≠¶ÂìÅ""]:","[220, 220, 220, 611, 2831, 287, 14631, 39355, 232, 43380, 120, 19526, 241, 1600, 366, 18796, 113, 36310, 44293, 244, 27764, 99, 161, 241, 223, 1, 5974]"
üß† ML Signal: Retrieving stocks for a given block is a common pattern in stock market analysis.,"[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 14420, 329, 257, 1813, 2512, 318, 257, 2219, 3912, 287, 4283, 1910, 3781, 13]",0.5,108,ml_signal,36,Retrieving stocks for a given block is a common pattern in stock market analysis.,,88,"    if industry in [""ÂåªÁñóÂô®Ê¢∞""]:","[220, 220, 220, 611, 2831, 287, 14631, 44293, 119, 163, 244, 245, 161, 247, 101, 162, 95, 108, 1, 5974]"
üß† ML Signal: Fetching limit up information is a common pattern in stock trading analysis.,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 4179, 510, 1321, 318, 257, 2219, 3912, 287, 4283, 7313, 3781, 13]",0.5,243,ml_signal,40,Fetching limit up information is a common pattern in stock trading analysis.,,108,"    if industry in [""Ë¥∏ÊòìË°å‰∏ö"", ""ÂÆ∂Áî®ËΩªÂ∑•"", ""ÈÄ†Á∫∏Âç∞Âà∑"", ""ÈÖøÈÖíË°å‰∏ö"", ""Áè†ÂÆùÈ¶ñÈ•∞"", ""ÁæéÂÆπÊä§ÁêÜ"", ""È£üÂìÅÈ•ÆÊñô"", ""ÊóÖÊ∏∏ÈÖíÂ∫ó"", ""ÂïÜ‰∏öÁôæË¥ß"", ""Á∫∫ÁªáÊúçË£Ö"", ""ÂÆ∂ÁîµË°å‰∏ö""]:","[220, 220, 220, 611, 2831, 287, 14631, 164, 112, 116, 23626, 241, 26193, 234, 10310, 248, 1600, 366, 22522, 114, 18796, 101, 164, 121, 119, 32432, 98, 1600, 366, 34460, 254, 163, 118, 116, 39355, 108, 26344, 115, 1600, 366, 165, 227, 123, 165, 227, 240, 26193, 234, 10310, 248, 1600, 366, 163, 237, 254, 22522, 251, 165, 99, 244, 165, 98, 108, 1600, 366, 163, 122, 236, 22522, 117, 162, 232, 97, 49426, 228, 1600, 366, 45617, 253, 161, 241, 223, 165, 98, 106, 23877, 247, 1600, 366, 33768, 227, 162, 116, 116, 165, 227, 240, 41753, 245, 1600, 366, 161, 243, 228, 10310, 248, 163, 247, 122, 164, 112, 100, 1600, 366, 163, 118, 118, 163, 119, 229, 17312, 235, 35318, 1600, 366, 22522, 114, 18796, 113, 26193, 234, 10310, 248, 1, 5974]"
"üß† ML Signal: Function definition with a specific purpose, useful for understanding code intent","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4007, 11, 4465, 329, 4547, 2438, 6824]",0.5,269,ml_signal,6,"Function definition with a specific purpose, useful for understanding code intent",,243,"from zvt.api.utils import china_stock_code_to_id, get_china_exchange","[6738, 1976, 36540, 13, 15042, 13, 26791, 1330, 442, 1437, 62, 13578, 62, 8189, 62, 1462, 62, 312, 11, 651, 62, 354, 1437, 62, 1069, 3803]"
"üß† ML Signal: Querying data from a database, indicating a data retrieval pattern","[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 11, 12739, 257, 1366, 45069, 3912]",0.5,285,ml_signal,7,"Querying data from a database, indicating a data retrieval pattern",,269,"from zvt.domain import BlockStock, Block, Stock, LimitUpInfo","[6738, 1976, 36540, 13, 27830, 1330, 9726, 26207, 11, 9726, 11, 10500, 11, 27272, 4933, 12360]"
‚úÖ Best Practice: Named arguments improve readability,"[26486, 227, 6705, 19939, 25, 34441, 7159, 2987, 1100, 1799]",0.5,299,best_practice,10,Named arguments improve readability,,285,def get_limit_up_reasons(entity_id):,"[4299, 651, 62, 32374, 62, 929, 62, 260, 2812, 7, 26858, 62, 312, 2599]"
‚úÖ Best Practice: Initializing variables before use,"[26486, 227, 6705, 19939, 25, 20768, 2890, 9633, 878, 779]",1.0,303,best_practice,13,Initializing variables before use,,299,    ),"[220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType access if info is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 1895, 611, 7508, 318, 6045]",0.5,309,sast_risk,15,Potential for NoneType access if info is None,Low,303,    topics = [],"[220, 220, 220, 10233, 796, 17635]"
‚úÖ Best Practice: Using list concatenation for clarity,"[26486, 227, 6705, 19939, 25, 8554, 1351, 1673, 36686, 341, 329, 16287]",1.0,330,best_practice,17,Using list concatenation for clarity,,309,"        topics = topics + info[0].reason.split(""+"")","[220, 220, 220, 220, 220, 220, 220, 10233, 796, 10233, 1343, 7508, 58, 15, 4083, 41181, 13, 35312, 7203, 10, 4943]"
"üß† ML Signal: Returning a list, indicating a collection of results","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 11, 12739, 257, 4947, 286, 2482]",0.5,330,ml_signal,19,"Returning a list, indicating a collection of results",,330,,[]
‚ö†Ô∏è SAST Risk (Medium): Missing import statement for 'os' module,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 2643, 329, 705, 418, 6, 8265]",1.0,330,sast_risk,14,Missing import statement for 'os' module,Medium,330,,[]
‚ö†Ô∏è SAST Risk (Medium): Missing import statement for 'json' module,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 2643, 329, 705, 17752, 6, 8265]",1.0,336,sast_risk,15,Missing import statement for 'json' module,Medium,330,    topics = [],"[220, 220, 220, 10233, 796, 17635]"
‚ö†Ô∏è SAST Risk (Medium): Potential file path traversal vulnerability if 'concept.json' path is influenced by user input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 33038, 282, 15131, 611, 705, 43169, 13, 17752, 6, 3108, 318, 12824, 416, 2836, 5128]",1.0,348,sast_risk,16,Potential file path traversal vulnerability if 'concept.json' path is influenced by user input,Medium,336,    if info and info[0].reason:,"[220, 220, 220, 611, 7508, 290, 7508, 58, 15, 4083, 41181, 25]"
‚úÖ Best Practice: Use 'with' statement for file operations to ensure proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 705, 4480, 6, 2643, 329, 2393, 4560, 284, 4155, 1774, 8271, 4542]",1.0,369,best_practice,17,Use 'with' statement for file operations to ensure proper resource management,,348,"        topics = topics + info[0].reason.split(""+"")","[220, 220, 220, 220, 220, 220, 220, 10233, 796, 10233, 1343, 7508, 58, 15, 4083, 41181, 13, 35312, 7203, 10, 4943]"
üß† ML Signal: Usage of 'os.path.join' and 'os.path.dirname' indicates file path manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 418, 13, 6978, 13, 22179, 6, 290, 705, 418, 13, 6978, 13, 15908, 3672, 6, 9217, 2393, 3108, 17512]",0.5,374,ml_signal,18,Usage of 'os.path.join' and 'os.path.dirname' indicates file path manipulation,,369,    return topics,"[220, 220, 220, 1441, 10233]"
üß† ML Signal: Usage of 'json.load' indicates JSON file parsing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 17752, 13, 2220, 6, 9217, 19449, 2393, 32096]",0.5,374,ml_signal,19,Usage of 'json.load' indicates JSON file parsing,,374,,[]
‚úÖ Best Practice: Consider handling exceptions for file operations and JSON parsing,"[26486, 227, 6705, 19939, 25, 12642, 9041, 13269, 329, 2393, 4560, 290, 19449, 32096]",0.5,374,best_practice,20,Consider handling exceptions for file operations and JSON parsing,,374,,[]
üß† ML Signal: List comprehension used for flattening nested lists,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 27172, 3101, 28376, 8341]",0.5,405,ml_signal,22,List comprehension used for flattening nested lists,,374,"    with open(os.path.join(os.path.dirname(__file__), ""concept.json"")) as f:","[220, 220, 220, 351, 1280, 7, 418, 13, 6978, 13, 22179, 7, 418, 13, 6978, 13, 15908, 3672, 7, 834, 7753, 834, 828, 366, 43169, 13, 17752, 48774, 355, 277, 25]"
üß† ML Signal: Usage of ORM query pattern with filters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6375, 44, 12405, 3912, 351, 16628]",0.5,432,ml_signal,24,Usage of ORM query pattern with filters,,405,        concepts = [item for sublist in concept_map.values() for item in sublist],"[220, 220, 220, 220, 220, 220, 220, 10838, 796, 685, 9186, 329, 850, 4868, 287, 3721, 62, 8899, 13, 27160, 3419, 329, 2378, 287, 850, 4868, 60]"
‚ö†Ô∏è SAST Risk (Medium): Potential SQL injection risk if 'code' or 'concepts' are influenced by user input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 16363, 16954, 2526, 611, 705, 8189, 6, 393, 705, 43169, 82, 6, 389, 12824, 416, 2836, 5128]",0.5,471,sast_risk,25,Potential SQL injection risk if 'code' or 'concepts' are influenced by user input,Medium,432,"        df = BlockStock.query_data(filters=[BlockStock.stock_code == code, BlockStock.name.in_(concepts)])","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 9726, 26207, 13, 22766, 62, 7890, 7, 10379, 1010, 41888, 12235, 26207, 13, 13578, 62, 8189, 6624, 2438, 11, 9726, 26207, 13, 3672, 13, 259, 41052, 43169, 82, 8, 12962]"
üß† ML Signal: Conversion of DataFrame column to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351]",0.5,471,ml_signal,27,Conversion of DataFrame column to list,,471,,[]
üß† ML Signal: Mapping specific industries to tags can be used to train models for industry classification.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2176, 11798, 284, 15940, 460, 307, 973, 284, 4512, 4981, 329, 2831, 17923, 13]",1.0,478,ml_signal,21,Mapping specific industries to tags can be used to train models for industry classification.,,471,def get_concept(code):,"[4299, 651, 62, 43169, 7, 8189, 2599]"
üß† ML Signal: Function with default parameter value,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988]",1.0,493,ml_signal,65,Function with default parameter value,,478,"        return ""‰º†Â™í""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 27670, 254, 161, 103, 240, 1]"
üß† ML Signal: Querying data from a database or ORM,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 393, 6375, 44]",0.5,507,ml_signal,67,Querying data from a database or ORM,,493,"        return ""ÂÜú‰∏ö""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 37863, 250, 10310, 248, 1]"
üß† ML Signal: Converting a DataFrame column to a list,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 6060, 19778, 5721, 284, 257, 1351]",0.5,526,ml_signal,69,Converting a DataFrame column to a list,,507,"        return ""Áªü‰∏ÄÂ§ßÂ∏ÇÂú∫""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 163, 119, 253, 31660, 32014, 30585, 224, 28839, 118, 1]"
‚úÖ Best Practice: Initialize an empty list before a loop,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 1351, 878, 257, 9052]",0.5,553,best_practice,70,Initialize an empty list before a loop,,526,"    if industry in [""Ëà™Â§©Ëà™Á©∫"", ""ËàπËà∂Âà∂ÈÄ†""]:","[220, 220, 220, 611, 2831, 287, 14631, 48958, 103, 25465, 48958, 103, 163, 102, 118, 1600, 366, 48958, 117, 48958, 114, 26344, 114, 34460, 254, 1, 5974]"
üß† ML Signal: Querying data with filters and specific return type,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 16628, 290, 2176, 1441, 2099]",1.0,553,ml_signal,75,Querying data with filters and specific return type,,553,,[]
‚úÖ Best Practice: Accessing the first element of a list,"[26486, 227, 6705, 19939, 25, 8798, 278, 262, 717, 5002, 286, 257, 1351]",0.5,583,best_practice,77,Accessing the first element of a list,,553,"    df_block = Block.query_data(provider=provider, filters=[Block.category == ""industry""])","[220, 220, 220, 47764, 62, 9967, 796, 9726, 13, 22766, 62, 7890, 7, 15234, 1304, 28, 15234, 1304, 11, 16628, 41888, 12235, 13, 22872, 6624, 366, 23213, 563, 8973, 8]"
‚úÖ Best Practice: Appending a dictionary to a list,"[26486, 227, 6705, 19939, 25, 2034, 1571, 257, 22155, 284, 257, 1351]",0.5,595,best_practice,86,Appending a dictionary to a list,,583,        if block_stocks:,"[220, 220, 220, 220, 220, 220, 220, 611, 2512, 62, 29522, 25]"
üß† ML Signal: Mapping function usage,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2163, 8748]",0.5,610,ml_signal,88,Mapping function usage,,595,            tags.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15940, 13, 33295, 7]"
‚ö†Ô∏è SAST Risk (Low): Use of print for logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 329, 18931]",1.0,626,sast_risk,94,Use of print for logging,Low,610,                },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚úÖ Best Practice: Return the result of a function,"[26486, 227, 6705, 19939, 25, 8229, 262, 1255, 286, 257, 2163]",0.5,635,best_practice,96,Return the result of a function,,626,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): Missing import statement for 'os' module,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 2643, 329, 705, 418, 6, 8265]",0.5,650,sast_risk,88,Missing import statement for 'os' module,Medium,635,            tags.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15940, 13, 33295, 7]"
‚ö†Ô∏è SAST Risk (Medium): Missing import statement for 'json' module,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 2643, 329, 705, 17752, 6, 8265]",0.5,666,sast_risk,89,Missing import statement for 'json' module,Medium,650,                {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391]"
‚ö†Ô∏è SAST Risk (Low): Potential file handling issue without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 9041, 2071, 1231, 6631, 9041]",0.5,696,sast_risk,90,Potential file handling issue without exception handling,Low,666,"                    ""code"": block_stock.stock_code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8189, 1298, 2512, 62, 13578, 13, 13578, 62, 8189, 11]"
‚úÖ Best Practice: Use 'with' statement for file operations to ensure proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 705, 4480, 6, 2643, 329, 2393, 4560, 284, 4155, 1774, 8271, 4542]",1.0,726,best_practice,91,Use 'with' statement for file operations to ensure proper resource management,,696,"                    ""name"": block_stock.stock_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 2512, 62, 13578, 13, 13578, 62, 3672, 11]"
üß† ML Signal: File path construction using 'os.path.join' and 'os.path.dirname',"[8582, 100, 254, 10373, 26484, 25, 9220, 3108, 5103, 1262, 705, 418, 13, 6978, 13, 22179, 6, 290, 705, 418, 13, 6978, 13, 15908, 3672, 6]",0.5,760,ml_signal,92,File path construction using 'os.path.join' and 'os.path.dirname',,726,"                    ""tag"": industry_to_tag(block_stock.name),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12985, 1298, 2831, 62, 1462, 62, 12985, 7, 9967, 62, 13578, 13, 3672, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential security risk if 'main_line_tags.json' is modified by an attacker,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2324, 2526, 611, 705, 12417, 62, 1370, 62, 31499, 13, 17752, 6, 318, 9518, 416, 281, 15250]",0.5,776,sast_risk,94,Potential security risk if 'main_line_tags.json' is modified by an attacker,Low,760,                },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Loading JSON data from a file,"[8582, 100, 254, 10373, 26484, 25, 12320, 19449, 1366, 422, 257, 2393]",0.5,785,ml_signal,96,Loading JSON data from a file,,776,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): The use of open() without specifying an encoding can lead to issues with non-UTF-8 encoded files.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 383, 779, 286, 1280, 3419, 1231, 31577, 281, 21004, 460, 1085, 284, 2428, 351, 1729, 12, 48504, 12, 23, 30240, 3696, 13]",1.0,815,sast_risk,91,The use of open() without specifying an encoding can lead to issues with non-UTF-8 encoded files.,Medium,785,"                    ""name"": block_stock.stock_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 3672, 1298, 2512, 62, 13578, 13, 13578, 62, 3672, 11]"
‚úÖ Best Practice: Use os.path.join for file paths to ensure cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 28686, 13, 6978, 13, 22179, 329, 2393, 13532, 284, 4155, 3272, 12, 24254, 17764, 13]",1.0,849,best_practice,92,Use os.path.join for file paths to ensure cross-platform compatibility.,,815,"                    ""tag"": industry_to_tag(block_stock.name),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12985, 1298, 2831, 62, 1462, 62, 12985, 7, 9967, 62, 13578, 13, 3672, 828]"
‚úÖ Best Practice: Use os.path.dirname(__file__) to construct file paths relative to the current file's location.,"[26486, 227, 6705, 19939, 25, 5765, 28686, 13, 6978, 13, 15908, 3672, 7, 834, 7753, 834, 8, 284, 5678, 2393, 13532, 3585, 284, 262, 1459, 2393, 338, 4067, 13]",1.0,873,best_practice,93,Use os.path.dirname(__file__) to construct file paths relative to the current file's location.,,849,"                    ""reason"": """",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 41181, 1298, 366, 1600]"
"üß† ML Signal: The function reads a JSON file, indicating a pattern of configuration or data-driven behavior.","[8582, 100, 254, 10373, 26484, 25, 383, 2163, 9743, 257, 19449, 2393, 11, 12739, 257, 3912, 286, 8398, 393, 1366, 12, 15808, 4069, 13]",1.0,889,ml_signal,94,"The function reads a JSON file, indicating a pattern of configuration or data-driven behavior.",,873,                },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Medium): Missing import statements for 'os' and 'json' modules.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 6299, 329, 705, 418, 6, 290, 705, 17752, 6, 13103, 13]",1.0,905,sast_risk,94,Missing import statements for 'os' and 'json' modules.,Medium,889,                },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Low): Potential file path manipulation vulnerability if __file__ is not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 17512, 15131, 611, 11593, 7753, 834, 318, 407, 6105, 31031, 13]",1.0,914,sast_risk,96,Potential file path manipulation vulnerability if __file__ is not properly validated.,Low,905,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"‚ö†Ô∏è SAST Risk (Low): Unvalidated external input from file, potential for JSON injection if file contents are not trusted.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 791, 12102, 515, 7097, 5128, 422, 2393, 11, 2785, 329, 19449, 16954, 611, 2393, 10154, 389, 407, 13467, 13]",0.5,914,sast_risk,98,"Unvalidated external input from file, potential for JSON injection if file contents are not trusted.",Low,914,,[]
üß† ML Signal: Usage of query_data method indicates interaction with a database or data source.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12405, 62, 7890, 2446, 9217, 10375, 351, 257, 6831, 393, 1366, 2723, 13]",0.5,923,ml_signal,102,Usage of query_data method indicates interaction with a database or data source.,,914,def get_main_line_tags():,"[4299, 651, 62, 12417, 62, 1370, 62, 31499, 33529]"
"üß† ML Signal: Conversion of DataFrame column to list, common pattern in data processing.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 5721, 284, 1351, 11, 2219, 3912, 287, 1366, 7587, 13]",0.5,937,ml_signal,104,"Conversion of DataFrame column to list, common pattern in data processing.",,923,        return json.load(f),"[220, 220, 220, 220, 220, 220, 220, 1441, 33918, 13, 2220, 7, 69, 8]"
"üß† ML Signal: Function call with keyword argument, useful for understanding function usage patterns.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 21179, 4578, 11, 4465, 329, 4547, 2163, 8748, 7572, 13]",0.5,948,ml_signal,107,"Function call with keyword argument, useful for understanding function usage patterns.",,937,def get_main_line_hidden_tags():,"[4299, 651, 62, 12417, 62, 1370, 62, 30342, 62, 31499, 33529]"
"‚ö†Ô∏è SAST Risk (Low): Writing to a file without validation, potential for overwriting important files.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 22183, 284, 257, 2393, 1231, 21201, 11, 2785, 329, 6993, 799, 278, 1593, 3696, 13]",0.5,968,sast_risk,112,"Writing to a file without validation, potential for overwriting important files.",Low,948,"def replace_tags(old_tag=""‰ª™Âô®‰ª™Ë°®""):","[4299, 6330, 62, 31499, 7, 727, 62, 12985, 2625, 20015, 103, 161, 247, 101, 20015, 103, 26193, 101, 1, 2599]"
‚ö†Ô∏è SAST Risk (Low): Ensure_ascii=False can lead to encoding issues if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 62, 292, 979, 72, 28, 25101, 460, 1085, 284, 21004, 2428, 611, 407, 12118, 6105, 13]",0.5,985,sast_risk,114,Ensure_ascii=False can lead to encoding issues if not handled properly.,Low,968,        stock_tags = json.load(f),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 31499, 796, 33918, 13, 2220, 7, 69, 8]"
"‚ö†Ô∏è SAST Risk (Medium): Missing import statements for 'os', 'json', and 'Counter' can lead to runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 6299, 329, 705, 418, 3256, 705, 17752, 3256, 290, 705, 31694, 6, 460, 1085, 284, 19124, 8563, 13]",1.0,1022,sast_risk,108,"Missing import statements for 'os', 'json', and 'Counter' can lead to runtime errors.",Medium,985,"    with open(os.path.join(os.path.dirname(__file__), ""main_line_hidden_tags.json"")) as f:","[220, 220, 220, 351, 1280, 7, 418, 13, 6978, 13, 22179, 7, 418, 13, 6978, 13, 15908, 3672, 7, 834, 7753, 834, 828, 366, 12417, 62, 1370, 62, 30342, 62, 31499, 13, 17752, 48774, 355, 277, 25]"
‚ö†Ô∏è SAST Risk (Low): Using '__file__' can expose sensitive file path information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 705, 834, 7753, 834, 6, 460, 15651, 8564, 2393, 3108, 1321, 13]",1.0,1022,sast_risk,110,Using '__file__' can expose sensitive file path information.,Low,1022,,[]
‚ö†Ô∏è SAST Risk (Low): Loading JSON without validation can lead to potential security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12320, 19449, 1231, 21201, 460, 1085, 284, 2785, 2324, 7476, 13]",1.0,1042,sast_risk,112,Loading JSON without validation can lead to potential security risks.,Low,1022,"def replace_tags(old_tag=""‰ª™Âô®‰ª™Ë°®""):","[4299, 6330, 62, 31499, 7, 727, 62, 12985, 2625, 20015, 103, 161, 247, 101, 20015, 103, 26193, 101, 1, 2599]"
‚úÖ Best Practice: Initialize collections outside of loops for clarity and efficiency.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 17268, 2354, 286, 23607, 329, 16287, 290, 9332, 13]",0.5,1059,best_practice,114,Initialize collections outside of loops for clarity and efficiency.,,1042,        stock_tags = json.load(f),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 31499, 796, 33918, 13, 2220, 7, 69, 8]"
‚úÖ Best Practice: Consider using logging instead of print for better control over output.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072, 13]",0.5,1081,best_practice,121,Consider using logging instead of print for better control over output.,,1059,                    if tag:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 7621, 25]"
‚úÖ Best Practice: Consider using logging instead of print for better control over output.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072, 13]",0.5,1098,best_practice,131,Consider using logging instead of print for better control over output.,,1081,        stock_tags = json.load(f),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 31499, 796, 33918, 13, 2220, 7, 69, 8]"
üß† ML Signal: Counting duplicates in a list is a common pattern for data analysis.,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 14184, 16856, 287, 257, 1351, 318, 257, 2219, 3912, 329, 1366, 3781, 13]",0.5,1110,ml_signal,135,Counting duplicates in a list is a common pattern for data analysis.,,1098,        final_tags = [],"[220, 220, 220, 220, 220, 220, 220, 2457, 62, 31499, 796, 17635]"
üß† ML Signal: Identifying duplicates in a collection is a common data processing task.,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 14184, 16856, 287, 257, 4947, 318, 257, 2219, 1366, 7587, 4876, 13]",0.5,1131,ml_signal,137,Identifying duplicates in a collection is a common data processing task.,,1110,"            stock_code = stock_tag[""code""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 8189, 796, 4283, 62, 12985, 14692, 8189, 8973]"
üß† ML Signal: Function definition with a single responsibility,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2060, 5798]",1.0,1142,ml_signal,132,Function definition with a single responsibility,,1131,        tags = set(),"[220, 220, 220, 220, 220, 220, 220, 15940, 796, 900, 3419]"
üß† ML Signal: Function call with named argument,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3706, 4578]",1.0,1152,ml_signal,134,Function call with named argument,,1142,        stocks = [],"[220, 220, 220, 220, 220, 220, 220, 14420, 796, 17635]"
‚úÖ Best Practice: Use of named argument for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 4578, 329, 16287]",0.5,1164,best_practice,135,Use of named argument for clarity,,1152,        final_tags = [],"[220, 220, 220, 220, 220, 220, 220, 2457, 62, 31499, 796, 17635]"
üß† ML Signal: Conditional logic based on function output,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2163, 5072]",0.5,1185,ml_signal,137,Conditional logic based on function output,,1164,"            stock_code = stock_tag[""code""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 8189, 796, 4283, 62, 12985, 14692, 8189, 8973]"
üß† ML Signal: Return statement with a specific value based on condition,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 351, 257, 2176, 1988, 1912, 319, 4006]",0.5,1206,ml_signal,139,Return statement with a specific value based on condition,,1185,                print(stock_code),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 13578, 62, 8189, 8]"
‚ö†Ô∏è SAST Risk (Medium): Missing import statement for 'os' and 'json' modules.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 2643, 329, 705, 418, 6, 290, 705, 17752, 6, 13103, 13]",1.0,1222,sast_risk,136,Missing import statement for 'os' and 'json' modules.,Medium,1206,        for stock_tag in stock_tags:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 62, 12985, 287, 4283, 62, 31499, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential file path manipulation vulnerability if 'os.path.join' is used with untrusted input.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 17512, 15131, 611, 705, 418, 13, 6978, 13, 22179, 6, 318, 973, 351, 1418, 81, 8459, 5128, 13]",0.5,1243,sast_risk,139,Potential file path manipulation vulnerability if 'os.path.join' is used with untrusted input.,Low,1222,                print(stock_code),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 13578, 62, 8189, 8]"
‚ö†Ô∏è SAST Risk (Low): Loading JSON data from a file without validation can lead to potential data integrity issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12320, 19449, 1366, 422, 257, 2393, 1231, 21201, 460, 1085, 284, 2785, 1366, 11540, 2428, 13]",0.5,1265,sast_risk,140,Loading JSON data from a file without validation can lead to potential data integrity issues.,Low,1243,"            tags.add(stock_tag[""tag""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15940, 13, 2860, 7, 13578, 62, 12985, 14692, 12985, 8973, 8]"
üß† ML Signal: Usage of list comprehension to filter and transform data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 35915, 284, 8106, 290, 6121, 1366, 13]",1.0,1287,ml_signal,140,Usage of list comprehension to filter and transform data.,,1265,"            tags.add(stock_tag[""tag""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15940, 13, 2860, 7, 13578, 62, 12985, 14692, 12985, 8973, 8]"
‚úÖ Best Practice: Use of 'get' method to safely access dictionary keys.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 1136, 6, 2446, 284, 11512, 1895, 22155, 8251, 13]",1.0,1323,best_practice,149,Use of 'get' method to safely access dictionary keys.,,1287,"        #     json.dump(final_tags, json_file, indent=2, ensure_ascii=False)","[220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 33918, 13, 39455, 7, 20311, 62, 31499, 11, 33918, 62, 7753, 11, 33793, 28, 17, 11, 4155, 62, 292, 979, 72, 28, 25101, 8]"
‚úÖ Best Practice: Filtering data using list comprehension for efficiency.,"[26486, 227, 6705, 19939, 25, 7066, 20212, 1366, 1262, 1351, 35915, 329, 9332, 13]",0.5,1336,best_practice,152,Filtering data using list comprehension for efficiency.,,1323,        print(hidden_tags),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 30342, 62, 31499, 8]"
üß† ML Signal: List comprehension used to create a list of codes not found in 'code_tag_hidden_tag_list'.,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 284, 2251, 257, 1351, 286, 12416, 407, 1043, 287, 705, 8189, 62, 12985, 62, 30342, 62, 12985, 62, 4868, 4458]",0.5,1362,ml_signal,155,List comprehension used to create a list of codes not found in 'code_tag_hidden_tag_list'.,,1336,"        duplicates = [item for item, frequency in count.items() if frequency > 1]","[220, 220, 220, 220, 220, 220, 220, 14184, 16856, 796, 685, 9186, 329, 2378, 11, 8373, 287, 954, 13, 23814, 3419, 611, 8373, 1875, 352, 60]"
üß† ML Signal: Function call with keyword arguments.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 21179, 7159, 13]",1.0,1362,ml_signal,158,Function call with keyword arguments.,,1362,,[]
‚úÖ Best Practice: Appending tuples to a list for structured data storage.,"[26486, 227, 6705, 19939, 25, 2034, 1571, 12777, 2374, 284, 257, 1351, 329, 20793, 1366, 6143, 13]",1.0,1371,best_practice,161,Appending tuples to a list for structured data storage.,,1362,"    if exchange == ""bj"":","[220, 220, 220, 611, 5163, 6624, 366, 50007, 1298]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1371,best_practice,157,Consider adding type hints for function parameters and return type for better readability and maintainability.,,1371,,[]
‚úÖ Best Practice: Use a dictionary comprehension for more concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 257, 22155, 35915, 329, 517, 35327, 290, 31744, 2438, 13]",0.5,1380,best_practice,159,Use a dictionary comprehension for more concise and readable code.,,1371,def get_hidden_code(code):,"[4299, 651, 62, 30342, 62, 8189, 7, 8189, 2599]"
üß† ML Signal: Usage of a function to retrieve tags based on entity codes.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 15940, 1912, 319, 9312, 12416, 13]",0.5,1396,ml_signal,162,Usage of a function to retrieve tags based on entity codes.,,1380,"        return ""Âåó‰∫§ÊâÄ""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 44293, 245, 12859, 97, 33699, 222, 1]"
‚úÖ Best Practice: Use 'in' to check for membership in a list or set.,"[26486, 227, 6705, 19939, 25, 5765, 705, 259, 6, 284, 2198, 329, 9931, 287, 257, 1351, 393, 900, 13]",0.5,1405,best_practice,165,Use 'in' to check for membership in a list or set.,,1396,def get_core_tag(codes):,"[4299, 651, 62, 7295, 62, 12985, 7, 40148, 2599]"
‚úÖ Best Practice: Use setdefault to simplify dictionary operations.,"[26486, 227, 6705, 19939, 25, 5765, 900, 12286, 284, 30276, 22155, 4560, 13]",1.0,1413,best_practice,167,Use setdefault to simplify dictionary operations.,,1405,    other_codes = [],"[220, 220, 220, 584, 62, 40148, 796, 17635]"
‚úÖ Best Practice: Use setdefault to simplify dictionary operations.,"[26486, 227, 6705, 19939, 25, 5765, 900, 12286, 284, 30276, 22155, 4560, 13]",1.0,1430,best_practice,169,Use setdefault to simplify dictionary operations.,,1413,        stock_tags = json.load(f),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 31499, 796, 33918, 13, 2220, 7, 69, 8]"
‚úÖ Best Practice: Use 'in' to check for membership in a list or set.,"[26486, 227, 6705, 19939, 25, 5765, 705, 259, 6, 284, 2198, 329, 9931, 287, 257, 1351, 393, 900, 13]",0.5,1442,best_practice,171,Use 'in' to check for membership in a list or set.,,1430,            (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357]"
‚úÖ Best Practice: Use setdefault to simplify dictionary operations.,"[26486, 227, 6705, 19939, 25, 5765, 900, 12286, 284, 30276, 22155, 4560, 13]",1.0,1463,best_practice,172,Use setdefault to simplify dictionary operations.,,1442,"                stock_tag[""code""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 12985, 14692, 8189, 33116]"
‚úÖ Best Practice: Use setdefault to simplify dictionary operations.,"[26486, 227, 6705, 19939, 25, 5765, 900, 12286, 284, 30276, 22155, 4560, 13]",1.0,1484,best_practice,172,Use setdefault to simplify dictionary operations.,,1463,"                stock_tag[""code""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 12985, 14692, 8189, 33116]"
üß† ML Signal: Sorting entities by the number of stocks in descending order.,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 12066, 416, 262, 1271, 286, 14420, 287, 31491, 1502, 13]",0.5,1505,ml_signal,172,Sorting entities by the number of stocks in descending order.,,1484,"                stock_tag[""code""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 12985, 14692, 8189, 33116]"
üß† ML Signal: Function definition with parameters indicating a pattern for processing stock data,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 7587, 4283, 1366]",1.0,1523,ml_signal,170,Function definition with parameters indicating a pattern for processing stock data,,1505,        code_tag_hidden_tag_list = [,"[220, 220, 220, 220, 220, 220, 220, 2438, 62, 12985, 62, 30342, 62, 12985, 62, 4868, 796, 685]"
üß† ML Signal: Querying data from a database using filters,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 422, 257, 6831, 1262, 16628]",1.0,1544,ml_signal,172,Querying data from a database using filters,,1523,"                stock_tag[""code""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 12985, 14692, 8189, 33116]"
üß† ML Signal: List comprehension used for data transformation,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 1366, 13389]",1.0,1565,ml_signal,172,List comprehension used for data transformation,,1544,"                stock_tag[""code""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 12985, 14692, 8189, 33116]"
üß† ML Signal: Dynamic file path creation based on input parameter,"[8582, 100, 254, 10373, 26484, 25, 26977, 2393, 3108, 6282, 1912, 319, 5128, 11507]",1.0,1605,ml_signal,185,Dynamic file path creation based on input parameter,,1565,"            code_tag_hidden_tag_list.append((code, ""Êú™Áü•"", get_hidden_code(code)))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 62, 12985, 62, 30342, 62, 12985, 62, 4868, 13, 33295, 19510, 8189, 11, 366, 17312, 103, 163, 253, 98, 1600, 651, 62, 30342, 62, 8189, 7, 8189, 22305]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of overwriting existing files,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 6993, 799, 278, 4683, 3696]",1.0,1618,sast_risk,187,Potential risk of overwriting existing files,Low,1605,    return code_tag_hidden_tag_list,"[220, 220, 220, 1441, 2438, 62, 12985, 62, 30342, 62, 12985, 62, 4868]"
‚ö†Ô∏è SAST Risk (Low): No error handling for file operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 4560]",1.0,1618,sast_risk,189,No error handling for file operations,Low,1618,,[]
üß† ML Signal: Function definition with parameters indicating a merge operation,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 20121, 4905]",0.5,1658,ml_signal,185,Function definition with parameters indicating a merge operation,,1618,"            code_tag_hidden_tag_list.append((code, ""Êú™Áü•"", get_hidden_code(code)))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 62, 12985, 62, 30342, 62, 12985, 62, 4868, 13, 33295, 19510, 8189, 11, 366, 17312, 103, 163, 253, 98, 1600, 651, 62, 30342, 62, 8189, 7, 8189, 22305]"
‚úÖ Best Practice: Dictionary comprehension for efficient lookup,"[26486, 227, 6705, 19939, 25, 28261, 35915, 329, 6942, 35847]",1.0,1671,best_practice,187,Dictionary comprehension for efficient lookup,,1658,    return code_tag_hidden_tag_list,"[220, 220, 220, 1441, 2438, 62, 12985, 62, 30342, 62, 12985, 62, 4868]"
‚úÖ Best Practice: Clear variable naming for readability,"[26486, 227, 6705, 19939, 25, 11459, 7885, 19264, 329, 1100, 1799]",0.5,1689,best_practice,190,Clear variable naming for readability,,1671,"def group_stocks_by_tag(entities, hidden_tags=None):","[4299, 1448, 62, 29522, 62, 1525, 62, 12985, 7, 298, 871, 11, 7104, 62, 31499, 28, 14202, 2599]"
‚úÖ Best Practice: Directly appending to list when condition is met,"[26486, 227, 6705, 19939, 25, 4128, 306, 598, 1571, 284, 1351, 618, 4006, 318, 1138]",0.5,1697,best_practice,193,Directly appending to list when condition is met,,1689,    tag_stocks = {},"[220, 220, 220, 7621, 62, 29522, 796, 23884]"
‚úÖ Best Practice: Use of boolean logic for conditional updates,"[26486, 227, 6705, 19939, 25, 5765, 286, 25131, 9156, 329, 26340, 5992]",0.5,1718,best_practice,196,Use of boolean logic for conditional updates,,1697,        if hidden_tags and (hidden_tag in hidden_tags):,"[220, 220, 220, 220, 220, 220, 220, 611, 7104, 62, 31499, 290, 357, 30342, 62, 12985, 287, 7104, 62, 31499, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""hidden_tag"" is not present in added_tag","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 30342, 62, 12985, 1, 318, 407, 1944, 287, 2087, 62, 12985]",1.0,1752,sast_risk,198,"Potential KeyError if ""hidden_tag"" is not present in added_tag",Low,1718,            tag_stocks.get(hidden_tag).append(code_entities_map.get(code)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7621, 62, 29522, 13, 1136, 7, 30342, 62, 12985, 737, 33295, 7, 8189, 62, 298, 871, 62, 8899, 13, 1136, 7, 8189, 4008]"
‚úÖ Best Practice: Returning the modified list,"[26486, 227, 6705, 19939, 25, 42882, 262, 9518, 1351]",0.5,1774,best_practice,200,Returning the modified list,,1752,"            tag_stocks.setdefault(tag, [])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7621, 62, 29522, 13, 2617, 12286, 7, 12985, 11, 685, 12962]"
‚ö†Ô∏è SAST Risk (Medium): Missing import statements for 'os' and 'json' modules,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 6299, 329, 705, 418, 6, 290, 705, 17752, 6, 13103]",1.0,1796,sast_risk,195,Missing import statements for 'os' and 'json' modules,Medium,1774,"    for code, tag, hidden_tag in code_tag_hidden_tag_list:","[220, 220, 220, 329, 2438, 11, 7621, 11, 7104, 62, 12985, 287, 2438, 62, 12985, 62, 30342, 62, 12985, 62, 4868, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential file path traversal vulnerability if input filenames are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 33038, 282, 15131, 611, 5128, 1226, 268, 1047, 389, 407, 31031]",1.0,1820,sast_risk,197,Potential file path traversal vulnerability if input filenames are not validated,Medium,1796,"            tag_stocks.setdefault(hidden_tag, [])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7621, 62, 29522, 13, 2617, 12286, 7, 30342, 62, 12985, 11, 685, 12962]"
‚ö†Ô∏è SAST Risk (Medium): Deserializing JSON data from an untrusted source can lead to security issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 2935, 48499, 2890, 19449, 1366, 422, 281, 1418, 81, 8459, 2723, 460, 1085, 284, 2324, 2428]",1.0,1842,sast_risk,199,Deserializing JSON data from an untrusted source can lead to security issues,Medium,1820,        if (tag != hidden_tag) or (not hidden_tags):,"[220, 220, 220, 220, 220, 220, 220, 611, 357, 12985, 14512, 7104, 62, 12985, 8, 393, 357, 1662, 7104, 62, 31499, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential file path traversal vulnerability if input filenames are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 33038, 282, 15131, 611, 5128, 1226, 268, 1047, 389, 407, 31031]",1.0,1874,sast_risk,201,Potential file path traversal vulnerability if input filenames are not validated,Medium,1842,            tag_stocks.get(tag).append(code_entities_map.get(code)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7621, 62, 29522, 13, 1136, 7, 12985, 737, 33295, 7, 8189, 62, 298, 871, 62, 8899, 13, 1136, 7, 8189, 4008]"
‚ö†Ô∏è SAST Risk (Medium): Deserializing JSON data from an untrusted source can lead to security issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 2935, 48499, 2890, 19449, 1366, 422, 281, 1418, 81, 8459, 2723, 460, 1085, 284, 2324, 2428]",1.0,1905,sast_risk,203,Deserializing JSON data from an untrusted source can lead to security issues,Medium,1874,"    sorted_entities = sorted(tag_stocks.items(), key=lambda x: len(x[1]), reverse=True)","[220, 220, 220, 23243, 62, 298, 871, 796, 23243, 7, 12985, 62, 29522, 13, 23814, 22784, 1994, 28, 50033, 2124, 25, 18896, 7, 87, 58, 16, 46570, 9575, 28, 17821, 8]"
üß† ML Signal: Usage of a custom function 'merge_tags' indicates a pattern for merging data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 705, 647, 469, 62, 31499, 6, 9217, 257, 3912, 329, 35981, 1366]",0.5,1913,ml_signal,205,Usage of a custom function 'merge_tags' indicates a pattern for merging data,,1905,    return sorted_entities,"[220, 220, 220, 1441, 23243, 62, 298, 871]"
‚ö†Ô∏è SAST Risk (Medium): Writing to a file without validating the file path can lead to file overwrite vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 22183, 284, 257, 2393, 1231, 4938, 803, 262, 2393, 3108, 460, 1085, 284, 2393, 49312, 23805]",0.5,1913,sast_risk,207,Writing to a file without validating the file path can lead to file overwrite vulnerabilities,Medium,1913,,[]
üß† ML Signal: Usage of 'json.dump' with 'indent' and 'ensure_ascii' parameters indicates a pattern for JSON serialization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 17752, 13, 39455, 6, 351, 705, 521, 298, 6, 290, 705, 641, 495, 62, 292, 979, 72, 6, 10007, 9217, 257, 3912, 329, 19449, 11389, 1634]",0.5,1913,ml_signal,207,Usage of 'json.dump' with 'indent' and 'ensure_ascii' parameters indicates a pattern for JSON serialization,,1913,,[]
‚ö†Ô∏è SAST Risk (Medium): Missing import statements for 'os' and 'json' modules.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 6299, 329, 705, 418, 6, 290, 705, 17752, 6, 13103, 13]",1.0,1944,sast_risk,203,Missing import statements for 'os' and 'json' modules.,Medium,1913,"    sorted_entities = sorted(tag_stocks.items(), key=lambda x: len(x[1]), reverse=True)","[220, 220, 220, 23243, 62, 298, 871, 796, 23243, 7, 12985, 62, 29522, 13, 23814, 22784, 1994, 28, 50033, 2124, 25, 18896, 7, 87, 58, 16, 46570, 9575, 28, 17821, 8]"
‚úÖ Best Practice: Use of 'with open' ensures the file is properly closed after its suite finishes.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 4480, 1280, 6, 19047, 262, 2393, 318, 6105, 4838, 706, 663, 18389, 20271, 13]",0.5,1944,best_practice,204,Use of 'with open' ensures the file is properly closed after its suite finishes.,,1944,,[]
üß† ML Signal: Extracting specific fields from a JSON structure.,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 2176, 7032, 422, 257, 19449, 4645, 13]",0.5,1944,ml_signal,207,Extracting specific fields from a JSON structure.,,1944,,[]
üß† ML Signal: Querying data with specific filters.,"[8582, 100, 254, 10373, 26484, 25, 2264, 263, 1112, 1366, 351, 2176, 16628, 13]",1.0,1944,ml_signal,207,Querying data with specific filters.,,1944,,[]
üß† ML Signal: Converting a DataFrame column to a list.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 257, 6060, 19778, 5721, 284, 257, 1351, 13]",1.0,1952,ml_signal,217,Converting a DataFrame column to a list.,,1944,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
‚úÖ Best Practice: Printing the length of a list for debugging purposes.,"[26486, 227, 6705, 19939, 25, 44118, 262, 4129, 286, 257, 1351, 329, 28769, 4959, 13]",0.5,1956,best_practice,219,Printing the length of a list for debugging purposes.,,1952,    ],"[220, 220, 220, 2361]"
üß† ML Signal: Building tags based on a list of codes.,"[8582, 100, 254, 10373, 26484, 25, 11819, 15940, 1912, 319, 257, 1351, 286, 12416, 13]",0.5,1973,ml_signal,221,Building tags based on a list of codes.,,1956,    # Specify the file path where you want to save the JSON data,"[220, 220, 220, 1303, 18291, 1958, 262, 2393, 3108, 810, 345, 765, 284, 3613, 262, 19449, 1366]"
‚úÖ Best Practice: Use of 'with open' ensures the file is properly closed after its suite finishes.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 4480, 1280, 6, 19047, 262, 2393, 318, 6105, 4838, 706, 663, 18389, 20271, 13]",0.5,1973,best_practice,223,Use of 'with open' ensures the file is properly closed after its suite finishes.,,1973,,[]
‚úÖ Best Practice: Use of 'json.dump' with 'indent' and 'ensure_ascii' for readable JSON output.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 17752, 13, 39455, 6, 351, 705, 521, 298, 6, 290, 705, 641, 495, 62, 292, 979, 72, 6, 329, 31744, 19449, 5072, 13]",0.5,1991,best_practice,225,Use of 'json.dump' with 'indent' and 'ensure_ascii' for readable JSON output.,,1973,"    with open(file_path, ""w"") as json_file:","[220, 220, 220, 351, 1280, 7, 7753, 62, 6978, 11, 366, 86, 4943, 355, 33918, 62, 7753, 25]"
‚ö†Ô∏è SAST Risk (Medium): Missing import statements for 'os' and 'json' modules.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 6299, 329, 705, 418, 6, 290, 705, 17752, 6, 13103, 13]",1.0,1991,sast_risk,220,Missing import statements for 'os' and 'json' modules.,Medium,1991,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential file operation error if ""stock_tags.json"" does not exist or is inaccessible.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 4905, 4049, 611, 366, 13578, 62, 31499, 13, 17752, 1, 857, 407, 2152, 393, 318, 40604, 13]",0.5,2005,sast_risk,222,"Potential file operation error if ""stock_tags.json"" does not exist or is inaccessible.",Low,1991,"    file_path = f""{tag}.json""","[220, 220, 220, 2393, 62, 6978, 796, 277, 1, 90, 12985, 27422, 17752, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential error if the JSON structure is not as expected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 4049, 611, 262, 19449, 4645, 318, 407, 355, 2938, 13]",0.5,2015,sast_risk,224,Potential error if the JSON structure is not as expected.,Low,2005,    # Write JSON data to the file,"[220, 220, 220, 1303, 19430, 19449, 1366, 284, 262, 2393]"
"‚úÖ Best Practice: Use 'get' method to avoid KeyError if ""hidden_tag"" is missing.","[26486, 227, 6705, 19939, 25, 5765, 705, 1136, 6, 2446, 284, 3368, 7383, 12331, 611, 366, 30342, 62, 12985, 1, 318, 4814, 13]",1.0,2045,best_practice,226,"Use 'get' method to avoid KeyError if ""hidden_tag"" is missing.",,2015,"        json.dump(datas, json_file, indent=2, ensure_ascii=False)","[220, 220, 220, 220, 220, 220, 220, 33918, 13, 39455, 7, 19608, 292, 11, 33918, 62, 7753, 11, 33793, 28, 17, 11, 4155, 62, 292, 979, 72, 28, 25101, 8]"
üß† ML Signal: Usage of a function to determine exchange based on stock code.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 5004, 5163, 1912, 319, 4283, 2438, 13]",1.0,2045,ml_signal,228,Usage of a function to determine exchange based on stock code.,,2045,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential data loss if ""result.json"" already exists.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 2994, 611, 366, 20274, 13, 17752, 1, 1541, 7160, 13]",0.5,2068,sast_risk,230,"Potential data loss if ""result.json"" already exists.",Low,2045,"    code_tags_map = {item[""code""]: item for item in current_tags}","[220, 220, 220, 2438, 62, 31499, 62, 8899, 796, 1391, 9186, 14692, 8189, 1, 5974, 2378, 329, 2378, 287, 1459, 62, 31499, 92]"
‚úÖ Best Practice: Use 'indent' and 'ensure_ascii' for better readability and handling of non-ASCII characters.,"[26486, 227, 6705, 19939, 25, 5765, 705, 521, 298, 6, 290, 705, 641, 495, 62, 292, 979, 72, 6, 329, 1365, 1100, 1799, 290, 9041, 286, 1729, 12, 42643, 3978, 3435, 13]",0.5,2091,best_practice,230,Use 'indent' and 'ensure_ascii' for better readability and handling of non-ASCII characters.,,2068,"    code_tags_map = {item[""code""]: item for item in current_tags}","[220, 220, 220, 2438, 62, 31499, 62, 8899, 796, 1391, 9186, 14692, 8189, 1, 5974, 2378, 329, 2378, 287, 1459, 62, 31499, 92]"
üß† ML Signal: Direct function call with a specific stock code.,"[8582, 100, 254, 10373, 26484, 25, 4128, 2163, 869, 351, 257, 2176, 4283, 2438, 13]",0.5,2114,ml_signal,230,Direct function call with a specific stock code.,,2091,"    code_tags_map = {item[""code""]: item for item in current_tags}","[220, 220, 220, 2438, 62, 31499, 62, 8899, 796, 1391, 9186, 14692, 8189, 1, 5974, 2378, 329, 2378, 287, 1459, 62, 31499, 92]"

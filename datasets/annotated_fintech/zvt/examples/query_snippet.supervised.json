[
  {
    "line": 2,
    "text": "from sqlalchemy import func",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      44161,
      282,
      26599,
      1330,
      25439
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 6,
    "text": "from zvt.domain import Stock, BlockStock",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes instead of the entire module can improve code clarity and reduce memory usage.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500,
      11,
      9726,
      26207
    ],
    "start_token": 6,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      2427,
      286,
      262,
      2104,
      8265,
      460,
      2987,
      2438,
      16287,
      290,
      4646,
      4088,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes instead of the entire module can improve code clarity and reduce memory usage."
  },
  {
    "line": 7,
    "text": "from zvt.recorders.em import em_api",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using json_extract with user-controlled input can lead to SQL injection if not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      8344,
      6361,
      13,
      368,
      1330,
      795,
      62,
      15042
    ],
    "start_token": 16,
    "end_token": 28,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      33918,
      62,
      2302,
      974,
      351,
      2836,
      12,
      14401,
      5128,
      460,
      1085,
      284,
      16363,
      16954,
      611,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using json_extract with user-controlled input can lead to SQL injection if not properly sanitized."
  },
  {
    "line": 8,
    "text": "from zvt.tag.tag_schemas import StockTags",
    "annotation": "\u2705 Best Practice: Consider using parameterized queries to prevent SQL injection.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      12985,
      13,
      12985,
      62,
      1416,
      4411,
      292,
      1330,
      10500,
      36142
    ],
    "start_token": 28,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      11507,
      1143,
      20743,
      284,
      2948,
      16363,
      16954,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using parameterized queries to prevent SQL injection."
  },
  {
    "line": 11,
    "text": "def query_json():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of JSON path expressions in queries can indicate complex data structures.",
    "confidence": 0.5,
    "tokens": [
      4299,
      12405,
      62,
      17752,
      33529
    ],
    "start_token": 42,
    "end_token": 47,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19449,
      3108,
      14700,
      287,
      20743,
      460,
      7603,
      3716,
      1366,
      8573,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of JSON path expressions in queries can indicate complex data structures."
  },
  {
    "line": 13,
    "text": "    df = StockTags.query_data(",
    "annotation": "\u2705 Best Practice: Use logging instead of print statements for better control over output and log levels.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      10500,
      36142,
      13,
      22766,
      62,
      7890,
      7
    ],
    "start_token": 47,
    "end_token": 59,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      6299,
      329,
      1365,
      1630,
      625,
      5072,
      290,
      2604,
      2974,
      13
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print statements for better control over output and log levels."
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a potential pattern for data retrieval functions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 59,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      2785,
      3912,
      329,
      1366,
      45069,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a potential pattern for data retrieval functions"
  },
  {
    "line": 14,
    "text": "        filters=[func.json_extract(StockTags.sub_tags, '$.\"\u4f4e\u7a7a\u7ecf\u6d4e\"') != None], columns=[StockTags.sub_tags]",
    "annotation": "\ud83e\udde0 ML Signal: Querying a database table with specific filters and columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16628,
      41888,
      20786,
      13,
      17752,
      62,
      2302,
      974,
      7,
      26207,
      36142,
      13,
      7266,
      62,
      31499,
      11,
      705,
      3,
      526,
      19526,
      236,
      163,
      102,
      118,
      163,
      119,
      237,
      38184,
      236,
      1,
      11537,
      14512,
      6045,
      4357,
      15180,
      41888,
      26207,
      36142,
      13,
      7266,
      62,
      31499,
      60
    ],
    "start_token": 59,
    "end_token": 109,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      257,
      6831,
      3084,
      351,
      2176,
      16628,
      290,
      15180
    ],
    "label": "ml_signal",
    "reason": "Querying a database table with specific filters and columns"
  },
  {
    "line": 15,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for SQL injection if filters or columns are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 109,
    "end_token": 113,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      16363,
      16954,
      611,
      16628,
      393,
      15180,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for SQL injection if filters or columns are not properly sanitized"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting a DataFrame column to a list, indicating a common data transformation pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 113,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      257,
      6060,
      19778,
      5721,
      284,
      257,
      1351,
      11,
      12739,
      257,
      2219,
      1366,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Converting a DataFrame column to a list, indicating a common data transformation pattern"
  },
  {
    "line": 15,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with no parameters, indicating a utility function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 113,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      645,
      10007,
      11,
      12739,
      257,
      10361,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with no parameters, indicating a utility function"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call with specific parameters, indicating usage pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      2176,
      10007,
      11,
      12739,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function call with specific parameters, indicating usage pattern"
  },
  {
    "line": 19,
    "text": "def get_stocks_has_tag():",
    "annotation": "\ud83e\udde0 ML Signal: Function call to retrieve existing tags, indicating a filtering operation",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      29522,
      62,
      10134,
      62,
      12985,
      33529
    ],
    "start_token": 117,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      19818,
      4683,
      15940,
      11,
      12739,
      257,
      25431,
      4905
    ],
    "label": "ml_signal",
    "reason": "Function call to retrieve existing tags, indicating a filtering operation"
  },
  {
    "line": 21,
    "text": "    return df[\"entity_id\"].tolist()",
    "annotation": "\u2705 Best Practice: Using set operations to find differences, which is efficient for this purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 126,
    "end_token": 141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      4560,
      284,
      1064,
      5400,
      11,
      543,
      318,
      6942,
      329,
      428,
      4007
    ],
    "label": "best_practice",
    "reason": "Using set operations to find differences, which is efficient for this purpose"
  },
  {
    "line": 19,
    "text": "def get_stocks_has_tag():",
    "annotation": "\ud83e\udde0 ML Signal: Function definition and naming pattern could be used to identify utility functions in codebases",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      29522,
      62,
      10134,
      62,
      12985,
      33529
    ],
    "start_token": 141,
    "end_token": 150,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      290,
      19264,
      3912,
      714,
      307,
      973,
      284,
      5911,
      10361,
      5499,
      287,
      2438,
      65,
      1386
    ],
    "label": "ml_signal",
    "reason": "Function definition and naming pattern could be used to identify utility functions in codebases"
  },
  {
    "line": 21,
    "text": "    return df[\"entity_id\"].tolist()",
    "annotation": "\u2705 Best Practice: Initialize variables before use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 150,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Initialize variables before use"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: API call pattern to external service",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 165,
    "end_token": 165,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      3912,
      284,
      7097,
      2139
    ],
    "label": "ml_signal",
    "reason": "API call pattern to external service"
  },
  {
    "line": 25,
    "text": "    entity_ids = get_entity_ids_by_filter(provider=\"em\", ignore_delist=True, ignore_st=True, ignore_new_stock=False)",
    "annotation": "\ud83e\udde0 ML Signal: Use of list concatenation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9312,
      62,
      2340,
      796,
      651,
      62,
      26858,
      62,
      2340,
      62,
      1525,
      62,
      24455,
      7,
      15234,
      1304,
      2625,
      368,
      1600,
      8856,
      62,
      12381,
      396,
      28,
      17821,
      11,
      8856,
      62,
      301,
      28,
      17821,
      11,
      8856,
      62,
      3605,
      62,
      13578,
      28,
      25101,
      8
    ],
    "start_token": 165,
    "end_token": 208,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      1673,
      36686,
      341,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of list concatenation pattern"
  },
  {
    "line": 27,
    "text": "    return list(set(entity_ids) - set(stocks_has_tag))",
    "annotation": "\ud83e\udde0 ML Signal: API call pattern to external service",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      1351,
      7,
      2617,
      7,
      26858,
      62,
      2340,
      8,
      532,
      900,
      7,
      29522,
      62,
      10134,
      62,
      12985,
      4008
    ],
    "start_token": 208,
    "end_token": 229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      3912,
      284,
      7097,
      2139
    ],
    "label": "ml_signal",
    "reason": "API call pattern to external service"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of list concatenation pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 229,
    "end_token": 229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      1673,
      36686,
      341,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of list concatenation pattern"
  },
  {
    "line": 31,
    "text": "    stocks = []",
    "annotation": "\ud83e\udde0 ML Signal: API call pattern to external service",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      14420,
      796,
      17635
    ],
    "start_token": 229,
    "end_token": 235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7824,
      869,
      3912,
      284,
      7097,
      2139
    ],
    "label": "ml_signal",
    "reason": "API call pattern to external service"
  },
  {
    "line": 32,
    "text": "    df1 = em_api.get_tradable_list(entity_type=\"stock\", exchange=Exchange.sh)",
    "annotation": "\ud83e\udde0 ML Signal: Use of list concatenation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      16,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7,
      26858,
      62,
      4906,
      2625,
      13578,
      1600,
      5163,
      28,
      3109,
      3803,
      13,
      1477,
      8
    ],
    "start_token": 235,
    "end_token": 266,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      1673,
      36686,
      341,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of list concatenation pattern"
  },
  {
    "line": 37,
    "text": "    stocks = stocks + df3[\"entity_id\"].tolist()",
    "annotation": "\u2705 Best Practice: Return statement at the end of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      14420,
      796,
      14420,
      1343,
      47764,
      18,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 266,
    "end_token": 285,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      379,
      262,
      886,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Return statement at the end of the function"
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 285,
    "end_token": 285,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value"
  },
  {
    "line": 30,
    "text": "def get_all_delist_stocks():",
    "annotation": "\ud83e\udde0 ML Signal: Querying data from a database",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      439,
      62,
      12381,
      396,
      62,
      29522,
      33529
    ],
    "start_token": 285,
    "end_token": 295,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2264,
      263,
      1112,
      1366,
      422,
      257,
      6831
    ],
    "label": "ml_signal",
    "reason": "Querying data from a database"
  },
  {
    "line": 31,
    "text": "    stocks = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection if filters are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      14420,
      796,
      17635
    ],
    "start_token": 295,
    "end_token": 301,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      611,
      16628,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection if filters are not properly sanitized"
  },
  {
    "line": 32,
    "text": "    df1 = em_api.get_tradable_list(entity_type=\"stock\", exchange=Exchange.sh)",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame column to list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      16,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7,
      26858,
      62,
      4906,
      2625,
      13578,
      1600,
      5163,
      28,
      3109,
      3803,
      13,
      1477,
      8
    ],
    "start_token": 301,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      5721,
      284,
      1351
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame column to list"
  },
  {
    "line": 32,
    "text": "    df1 = em_api.get_tradable_list(entity_type=\"stock\", exchange=Exchange.sh)",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter usage can indicate common or expected use cases.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      16,
      796,
      795,
      62,
      15042,
      13,
      1136,
      62,
      2213,
      324,
      540,
      62,
      4868,
      7,
      26858,
      62,
      4906,
      2625,
      13578,
      1600,
      5163,
      28,
      3109,
      3803,
      13,
      1477,
      8
    ],
    "start_token": 332,
    "end_token": 363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      8748,
      460,
      7603,
      2219,
      393,
      2938,
      779,
      2663,
      13
    ],
    "label": "ml_signal",
    "reason": "Default parameter usage can indicate common or expected use cases."
  },
  {
    "line": 37,
    "text": "    stocks = stocks + df3[\"entity_id\"].tolist()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SQL injection risk if `tag` is user-controlled and not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      14420,
      796,
      14420,
      1343,
      47764,
      18,
      14692,
      26858,
      62,
      312,
      1,
      4083,
      83,
      349,
      396,
      3419
    ],
    "start_token": 363,
    "end_token": 382,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16363,
      16954,
      2526,
      611,
      4600,
      12985,
      63,
      318,
      2836,
      12,
      14401,
      290,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SQL injection risk if `tag` is user-controlled and not properly sanitized."
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly returning a specific column as a list improves code readability and clarity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 382,
    "end_token": 382,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      257,
      2176,
      5721,
      355,
      257,
      1351,
      19575,
      2438,
      1100,
      1799,
      290,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly returning a specific column as a list improves code readability and clarity."
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of `print` for output can indicate debugging or logging behavior.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 382,
    "end_token": 382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4600,
      4798,
      63,
      329,
      5072,
      460,
      7603,
      28769,
      393,
      18931,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of `print` for output can indicate debugging or logging behavior."
  }
]
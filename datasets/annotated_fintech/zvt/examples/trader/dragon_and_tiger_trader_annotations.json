[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 7,
    "text": "from zvt.contract.factor import Factor, Transformer, Accumulator",
    "annotation": "\ud83e\udde0 ML Signal: Class definition for a custom factor, useful for model training on class-based patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      28484,
      13,
      31412,
      1330,
      27929,
      11,
      3602,
      16354,
      11,
      6366,
      388,
      8927
    ],
    "start_token": 0,
    "end_token": 16,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      329,
      257,
      2183,
      5766,
      11,
      4465,
      329,
      2746,
      3047,
      319,
      1398,
      12,
      3106,
      7572
    ],
    "label": "ml_signal",
    "reason": "Class definition for a custom factor, useful for model training on class-based patterns"
  },
  {
    "line": 8,
    "text": "from zvt.domain import Stock, DragonAndTiger",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using mutable default arguments like lists can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      27830,
      1330,
      10500,
      11,
      2851,
      1870,
      51,
      8254
    ],
    "start_token": 16,
    "end_token": 28,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4517,
      540,
      4277,
      7159,
      588,
      8341,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using mutable default arguments like lists can lead to unexpected behavior."
  },
  {
    "line": 36,
    "text": "        only_compute_factor: bool = False,",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      691,
      62,
      5589,
      1133,
      62,
      31412,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 28,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass's __init__ method ensures proper initialization."
  },
  {
    "line": 66,
    "text": "            factor_name,",
    "annotation": "\ud83e\udde0 ML Signal: Method overriding in a class, useful for learning class behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      62,
      3672,
      11
    ],
    "start_token": 46,
    "end_token": 61,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      44987,
      287,
      257,
      1398,
      11,
      4465,
      329,
      4673,
      1398,
      4069
    ],
    "label": "ml_signal",
    "reason": "Method overriding in a class, useful for learning class behavior"
  },
  {
    "line": 68,
    "text": "            only_load_factor,",
    "annotation": "\ud83e\udde0 ML Signal: Setting a DataFrame column to a constant value, indicates data manipulation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      691,
      62,
      2220,
      62,
      31412,
      11
    ],
    "start_token": 61,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      6060,
      19778,
      5721,
      284,
      257,
      6937,
      1988,
      11,
      9217,
      1366,
      17512,
      3912
    ],
    "label": "ml_signal",
    "reason": "Setting a DataFrame column to a constant value, indicates data manipulation pattern"
  },
  {
    "line": 69,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of super() to call a method from a parent class, useful for understanding inheritance patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 78,
    "end_token": 86,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      257,
      2446,
      422,
      257,
      2560,
      1398,
      11,
      4465,
      329,
      4547,
      24155,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of super() to call a method from a parent class, useful for understanding inheritance patterns"
  },
  {
    "line": 69,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from a base class, indicating a pattern of extending functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 86,
    "end_token": 94,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      257,
      2779,
      1398,
      11,
      12739,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from a base class, indicating a pattern of extending functionality"
  },
  {
    "line": 72,
    "text": "        self.factor_df[\"filter_result\"] = True",
    "annotation": "\ud83e\udde0 ML Signal: Function initializes factors with given parameters, indicating a pattern of data preparation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      31412,
      62,
      7568,
      14692,
      24455,
      62,
      20274,
      8973,
      796,
      6407
    ],
    "start_token": 94,
    "end_token": 113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      4238,
      4340,
      5087,
      351,
      1813,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      11824,
      13
    ],
    "label": "ml_signal",
    "reason": "Function initializes factors with given parameters, indicating a pattern of data preparation."
  },
  {
    "line": 82,
    "text": "                entity_ids=entity_ids,",
    "annotation": "\u2705 Best Practice: Use of __name__ == \"__main__\" to ensure code only runs when script is executed directly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 113,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      6624,
      366,
      834,
      12417,
      834,
      1,
      284,
      4155,
      2438,
      691,
      4539,
      618,
      4226,
      318,
      10945,
      3264,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __name__ == \"__main__\" to ensure code only runs when script is executed directly."
  },
  {
    "line": 83,
    "text": "                exchanges=exchanges,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of MyTrader with specific timestamps, indicating a pattern of usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      1069,
      36653,
      11
    ],
    "start_token": 136,
    "end_token": 156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      2011,
      2898,
      5067,
      351,
      2176,
      4628,
      395,
      9430,
      11,
      12739,
      257,
      3912,
      286,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of MyTrader with specific timestamps, indicating a pattern of usage."
  },
  {
    "line": 83,
    "text": "                exchanges=exchanges,",
    "annotation": "\ud83e\udde0 ML Signal: Calling run method on trader object, indicating a pattern of execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      1069,
      36653,
      11
    ],
    "start_token": 156,
    "end_token": 176,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      1057,
      2446,
      319,
      31791,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling run method on trader object, indicating a pattern of execution."
  }
]
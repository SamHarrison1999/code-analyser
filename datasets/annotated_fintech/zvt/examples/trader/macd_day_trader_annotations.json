[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability and maintainability."
  },
  {
    "line": 10,
    "text": "from zvt.trader.trader import StockTrader",
    "annotation": "\u2705 Best Practice: Class should have a docstring explaining its purpose and usage",
    "confidence": 1.0,
    "tokens": [
      6738,
      1976,
      36540,
      13,
      2213,
      5067,
      13,
      2213,
      5067,
      1330,
      10500,
      2898,
      5067
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class should have a docstring explaining its purpose and usage"
  },
  {
    "line": 13,
    "text": "# data_schema: Stock1dHfqKdata",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      2,
      1366,
      62,
      15952,
      2611,
      25,
      10500,
      16,
      67,
      39,
      69,
      80,
      42,
      7890
    ],
    "start_token": 13,
    "end_token": 27,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 14,
    "text": "# provider: joinquant",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific interval adjustment (-50) could indicate a pattern in data preprocessing.",
    "confidence": 1.0,
    "tokens": [
      2,
      10131,
      25,
      4654,
      40972
    ],
    "start_token": 27,
    "end_token": 32,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      16654,
      15068,
      13841,
      1120,
      8,
      714,
      7603,
      257,
      3912,
      287,
      1366,
      662,
      36948,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific interval adjustment (-50) could indicate a pattern in data preprocessing."
  },
  {
    "line": 26,
    "text": "                entity_ids=entity_ids,",
    "annotation": "\u2705 Best Practice: Use of 'super()' to call a method from the parent class ensures proper inheritance and method resolution.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9312,
      62,
      2340,
      28,
      26858,
      62,
      2340,
      11
    ],
    "start_token": 32,
    "end_token": 55,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      16668,
      3419,
      6,
      284,
      869,
      257,
      2446,
      422,
      262,
      2560,
      1398,
      19047,
      1774,
      24155,
      290,
      2446,
      6323,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'super()' to call a method from the parent class ensures proper inheritance and method resolution."
  },
  {
    "line": 28,
    "text": "                exchanges=exchanges,",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters to improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      28,
      1069,
      36653,
      11
    ],
    "start_token": 55,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters to improve code readability and maintainability"
  },
  {
    "line": 30,
    "text": "                start_timestamp=start_timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of super() indicates inheritance and method overriding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      16514,
      27823,
      28,
      9688,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 75,
    "end_token": 100,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2208,
      3419,
      9217,
      24155,
      290,
      2446,
      44987
    ],
    "label": "ml_signal",
    "reason": "Usage of super() indicates inheritance and method overriding"
  },
  {
    "line": 31,
    "text": "                end_timestamp=end_timestamp,",
    "annotation": "\u2705 Best Practice: Ensure the parent class method is called to maintain expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      16514,
      27823,
      28,
      437,
      62,
      16514,
      27823,
      11
    ],
    "start_token": 100,
    "end_token": 125,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      2560,
      1398,
      2446,
      318,
      1444,
      284,
      5529,
      2938,
      4069
    ],
    "label": "best_practice",
    "reason": "Ensure the parent class method is called to maintain expected behavior"
  },
  {
    "line": 32,
    "text": "                provider=\"joinquant\",",
    "annotation": "\u2705 Best Practice: Method definition should have a docstring explaining its purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      2625,
      7639,
      18934,
      415,
      1600
    ],
    "start_token": 125,
    "end_token": 146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      6770,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Method definition should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 34,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper initialization or behavior extension",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 146,
    "end_token": 158,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588,
      393,
      4069,
      7552
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper initialization or behavior extension"
  },
  {
    "line": 35,
    "text": "        ]",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures that the base class functionality is preserved.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 158,
    "end_token": 166,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      326,
      262,
      2779,
      1398,
      11244,
      318,
      17232,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures that the base class functionality is preserved."
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\u2705 Best Practice: Method definition should have a docstring explaining its purpose and parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 166,
    "end_token": 166,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      6770,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Method definition should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 38,
    "text": "        # \u8986\u76d6\u8be5\u51fd\u6570\u505a\u6b62\u76c8 \u6b62\u635f",
    "annotation": "\ud83e\udde0 ML Signal: Use of superclass method call, indicating inheritance and method overriding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      99,
      228,
      33566,
      244,
      46237,
      98,
      49035,
      121,
      46763,
      108,
      161,
      223,
      248,
      29826,
      95,
      33566,
      230,
      10545,
      255,
      95,
      162,
      235,
      253
    ],
    "start_token": 166,
    "end_token": 198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2208,
      4871,
      2446,
      869,
      11,
      12739,
      24155,
      290,
      2446,
      44987
    ],
    "label": "ml_signal",
    "reason": "Use of superclass method call, indicating inheritance and method overriding"
  },
  {
    "line": 38,
    "text": "        # \u8986\u76d6\u8be5\u51fd\u6570\u505a\u6b62\u76c8 \u6b62\u635f",
    "annotation": "\u2705 Best Practice: Method definition should have a docstring explaining its purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5525,
      99,
      228,
      33566,
      244,
      46237,
      98,
      49035,
      121,
      46763,
      108,
      161,
      223,
      248,
      29826,
      95,
      33566,
      230,
      10545,
      255,
      95,
      162,
      235,
      253
    ],
    "start_token": 198,
    "end_token": 230,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      6770,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Method definition should have a docstring explaining its purpose and parameters"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u2705 Best Practice: Calling the superclass method ensures that any existing error handling is preserved",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 230,
    "end_token": 230,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      2446,
      19047,
      326,
      597,
      4683,
      4049,
      9041,
      318,
      17232
    ],
    "label": "best_practice",
    "reason": "Calling the superclass method ensures that any existing error handling is preserved"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'self' indicates this is a method within a class, which is a common OOP pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 230,
    "end_token": 230,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      944,
      6,
      9217,
      428,
      318,
      257,
      2446,
      1626,
      257,
      1398,
      11,
      543,
      318,
      257,
      2219,
      440,
      3185,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'self' indicates this is a method within a class, which is a common OOP pattern."
  },
  {
    "line": 42,
    "text": "        # \u5bf9selectors\u9009\u51fa\u7684\u6807\u7684\u505a\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u6216\u8005\u4e0d\u4f7f\u7528selector\u5b8c\u5168\u81ea\u5df1\u6839\u636e\u65f6\u95f4\u548c\u6570\u636e\u751f\u6210\u4ea4\u6613\u4fe1\u53f7",
    "annotation": "\ud83e\udde0 ML Signal: Calls to superclass methods can indicate inheritance patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      107,
      117,
      19738,
      669,
      34460,
      231,
      49035,
      118,
      21410,
      43718,
      229,
      21410,
      161,
      223,
      248,
      32573,
      249,
      31660,
      29826,
      98,
      13783,
      226,
      49426,
      228,
      171,
      120,
      234,
      22755,
      244,
      38519,
      38834,
      45635,
      18796,
      101,
      19738,
      273,
      22522,
      234,
      17739,
      101,
      164,
      229,
      103,
      32432,
      109,
      43718,
      117,
      162,
      235,
      106,
      33768,
      114,
      29785,
      112,
      161,
      240,
      234,
      46763,
      108,
      162,
      235,
      106,
      37955,
      22755,
      238,
      12859,
      97,
      23626,
      241,
      46479,
      94,
      20998,
      115
    ],
    "start_token": 230,
    "end_token": 312,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27592,
      284,
      2208,
      4871,
      5050,
      460,
      7603,
      24155,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Calls to superclass methods can indicate inheritance patterns."
  },
  {
    "line": 42,
    "text": "        # \u5bf9selectors\u9009\u51fa\u7684\u6807\u7684\u505a\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u6216\u8005\u4e0d\u4f7f\u7528selector\u5b8c\u5168\u81ea\u5df1\u6839\u636e\u65f6\u95f4\u548c\u6570\u636e\u751f\u6210\u4ea4\u6613\u4fe1\u53f7",
    "annotation": "\u2705 Best Practice: Use of 'super()' for calling a method from the parent class ensures proper method resolution order and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      107,
      117,
      19738,
      669,
      34460,
      231,
      49035,
      118,
      21410,
      43718,
      229,
      21410,
      161,
      223,
      248,
      32573,
      249,
      31660,
      29826,
      98,
      13783,
      226,
      49426,
      228,
      171,
      120,
      234,
      22755,
      244,
      38519,
      38834,
      45635,
      18796,
      101,
      19738,
      273,
      22522,
      234,
      17739,
      101,
      164,
      229,
      103,
      32432,
      109,
      43718,
      117,
      162,
      235,
      106,
      33768,
      114,
      29785,
      112,
      161,
      240,
      234,
      46763,
      108,
      162,
      235,
      106,
      37955,
      22755,
      238,
      12859,
      97,
      23626,
      241,
      46479,
      94,
      20998,
      115
    ],
    "start_token": 312,
    "end_token": 394,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      16668,
      3419,
      6,
      329,
      4585,
      257,
      2446,
      422,
      262,
      2560,
      1398,
      19047,
      1774,
      2446,
      6323,
      1502,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of 'super()' for calling a method from the parent class ensures proper method resolution order and maintainability."
  },
  {
    "line": 47,
    "text": "        super().on_trading_signals(trading_signals)",
    "annotation": "\u2705 Best Practice: Use of super() to call a method from the parent class ensures proper inheritance and method resolution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      261,
      62,
      2213,
      4980,
      62,
      12683,
      874,
      7,
      2213,
      4980,
      62,
      12683,
      874,
      8
    ],
    "start_token": 394,
    "end_token": 417,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      257,
      2446,
      422,
      262,
      2560,
      1398,
      19047,
      1774,
      24155,
      290,
      2446,
      6323,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to call a method from the parent class ensures proper inheritance and method resolution."
  },
  {
    "line": 49,
    "text": "    def on_trading_open(self, timestamp):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a main guard to execute code only when the script is run directly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2213,
      4980,
      62,
      9654,
      7,
      944,
      11,
      41033,
      2599
    ],
    "start_token": 417,
    "end_token": 432,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1388,
      4860,
      284,
      12260,
      2438,
      691,
      618,
      262,
      4226,
      318,
      1057,
      3264,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a main guard to execute code only when the script is run directly."
  },
  {
    "line": 50,
    "text": "        # \u5f00\u76d8\u81ea\u5b9a\u4e49\u903b\u8f91",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters, indicating a pattern of usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      120,
      222,
      33566,
      246,
      164,
      229,
      103,
      22522,
      248,
      20046,
      231,
      34460,
      119,
      164,
      122,
      239
    ],
    "start_token": 432,
    "end_token": 457,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007,
      11,
      12739,
      257,
      3912,
      286,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters, indicating a pattern of usage."
  },
  {
    "line": 50,
    "text": "        # \u5f00\u76d8\u81ea\u5b9a\u4e49\u903b\u8f91",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on an object, indicating a pattern of usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10263,
      120,
      222,
      33566,
      246,
      164,
      229,
      103,
      22522,
      248,
      20046,
      231,
      34460,
      119,
      164,
      122,
      239
    ],
    "start_token": 457,
    "end_token": 482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      281,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling a method on an object, indicating a pattern of usage."
  }
]
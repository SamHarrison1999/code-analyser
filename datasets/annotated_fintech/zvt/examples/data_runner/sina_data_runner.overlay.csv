annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports into standard, third-party, and local sections improves readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 11, 2368, 12, 10608, 11, 290, 1957, 9004, 19575, 1100, 1799, 13]",1.0,2,best_practice,2,"Grouping imports into standard, third-party, and local sections improves readability.",,0,import logging,"[11748, 18931]"
‚ö†Ô∏è SAST Risk (Low): Using wildcard imports can lead to namespace collisions and make the code harder to understand.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4295, 9517, 17944, 460, 1085, 284, 25745, 31998, 290, 787, 262, 2438, 7069, 284, 1833, 13]",1.0,9,sast_risk,6,Using wildcard imports can lead to namespace collisions and make the code harder to understand.,Low,2,from zvt import init_log,"[6738, 1976, 36540, 1330, 2315, 62, 6404]"
‚úÖ Best Practice: Using a logger instead of print statements is a best practice for production code.,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 2427, 286, 3601, 6299, 318, 257, 1266, 3357, 329, 3227, 2438, 13]",0.5,9,best_practice,9,Using a logger instead of print statements is a best practice for production code.,,9,,[]
‚úÖ Best Practice: Using a background scheduler allows tasks to run asynchronously without blocking the main thread.,"[26486, 227, 6705, 19939, 25, 8554, 257, 4469, 6038, 18173, 3578, 8861, 284, 1057, 355, 24871, 3481, 1231, 12013, 262, 1388, 4704, 13]",0.5,9,best_practice,11,Using a background scheduler allows tasks to run asynchronously without blocking the main thread.,,9,,[]
üß† ML Signal: Usage of cron jobs can indicate periodic task scheduling patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1067, 261, 3946, 460, 7603, 27458, 4876, 26925, 7572, 13]",0.5,38,ml_signal,15,Usage of cron jobs can indicate periodic task scheduling patterns.,,9,"@sched.scheduled_job(""cron"", hour=15, minute=30, day_of_week=3)","[31, 1416, 704, 13, 1416, 704, 6309, 62, 21858, 7203, 66, 1313, 1600, 1711, 28, 1314, 11, 5664, 28, 1270, 11, 1110, 62, 1659, 62, 10464, 28, 18, 8]"
‚ö†Ô∏è SAST Risk (Low): Hardcoding schedule times can lead to inflexibility and potential issues with time zone changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 66, 7656, 7269, 1661, 460, 1085, 284, 1167, 2588, 2247, 290, 2785, 2428, 351, 640, 6516, 2458, 13]",0.5,43,sast_risk,16,Hardcoding schedule times can lead to inflexibility and potential issues with time zone changes.,Low,38,def record_block():,"[4299, 1700, 62, 9967, 33529]"
üß† ML Signal: Function call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007]",1.0,56,ml_signal,10,Function call with specific parameters,,43,logger = logging.getLogger(__name__),"[6404, 1362, 796, 18931, 13, 1136, 11187, 1362, 7, 834, 3672, 834, 8]"
üß† ML Signal: Function call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007]",1.0,56,ml_signal,11,Function call with specific parameters,,56,,[]
‚ö†Ô∏è SAST Risk (Low): Use of cron jobs can lead to unintended execution if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1067, 261, 3946, 460, 1085, 284, 30261, 9706, 611, 407, 6105, 5257]",1.0,85,sast_risk,15,Use of cron jobs can lead to unintended execution if not properly managed,Low,56,"@sched.scheduled_job(""cron"", hour=15, minute=30, day_of_week=3)","[31, 1416, 704, 13, 1416, 704, 6309, 62, 21858, 7203, 66, 1313, 1600, 1711, 28, 1314, 11, 5664, 28, 1270, 11, 1110, 62, 1659, 62, 10464, 28, 18, 8]"
üß† ML Signal: Function call with specific parameters indicating a pattern of usage,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 12739, 257, 3912, 286, 8748]",1.0,85,ml_signal,14,Function call with specific parameters indicating a pattern of usage,,85,,[]
‚úÖ Best Practice: Initialize logging to capture runtime information and errors,"[26486, 227, 6705, 19939, 25, 20768, 1096, 18931, 284, 8006, 19124, 1321, 290, 8563]",1.0,115,best_practice,18,Initialize logging to capture runtime information and errors,,85,"    run_data_recorder(domain=Block, data_provider=""sina"", entity_provider=""sina"")","[220, 220, 220, 1057, 62, 7890, 62, 8344, 2875, 7, 27830, 28, 12235, 11, 1366, 62, 15234, 1304, 2625, 82, 1437, 1600, 9312, 62, 15234, 1304, 2625, 82, 1437, 4943]"
‚ö†Ô∏è SAST Risk (Medium): Function call without error handling could lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 15553, 869, 1231, 4049, 9041, 714, 1085, 284, 555, 38788, 13269]",0.5,115,sast_risk,20,Function call without error handling could lead to unhandled exceptions,Medium,115,,[]
‚ö†Ô∏è SAST Risk (Medium): Function call without error handling could lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 15553, 869, 1231, 4049, 9041, 714, 1085, 284, 555, 38788, 13269]",0.5,115,sast_risk,20,Function call without error handling could lead to unhandled exceptions,Medium,115,,[]
‚ö†Ô∏è SAST Risk (Low): Starting a scheduler without error handling or shutdown procedure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17962, 257, 6038, 18173, 1231, 4049, 9041, 393, 18325, 8771]",0.5,115,sast_risk,20,Starting a scheduler without error handling or shutdown procedure,Low,115,,[]
‚ö†Ô∏è SAST Risk (Low): Direct access to a protected member of an object,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 257, 6861, 2888, 286, 281, 2134]",0.5,115,sast_risk,20,Direct access to a protected member of an object,Low,115,,[]

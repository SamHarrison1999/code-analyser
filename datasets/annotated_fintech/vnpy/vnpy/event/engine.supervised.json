[
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of a constant for event type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      6937,
      329,
      1785,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a constant for event type improves code readability and maintainability."
  },
  {
    "line": 17,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the purpose and usage of the class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the purpose and usage of the class"
  },
  {
    "line": 19,
    "text": "    by event engine for distributing event, and a data",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      416,
      1785,
      3113,
      329,
      25950,
      1785,
      11,
      290,
      257,
      1366
    ],
    "start_token": 4,
    "end_token": 17,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 21,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 17,
    "end_token": 21,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 23,
    "text": "    def __init__(self, type: str, data: Any = None) -> None:",
    "annotation": "\u2705 Best Practice: Using type aliases improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2099,
      25,
      965,
      11,
      1366,
      25,
      4377,
      796,
      6045,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 21,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      47217,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using type aliases improves code readability and maintainability."
  },
  {
    "line": 34,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 44,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability"
  },
  {
    "line": 36,
    "text": "    to those handlers registered.",
    "annotation": "\u2705 Best Practice: Explicitly defining the type of queue used",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      284,
      883,
      32847,
      6823,
      13
    ],
    "start_token": 48,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      262,
      2099,
      286,
      16834,
      973
    ],
    "label": "best_practice",
    "reason": "Explicitly defining the type of queue used"
  },
  {
    "line": 38,
    "text": "    It also generates timer event by every interval seconds,",
    "annotation": "\u2705 Best Practice: Initializing boolean flags with a clear default state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      632,
      635,
      18616,
      19781,
      1785,
      416,
      790,
      16654,
      4201,
      11
    ],
    "start_token": 56,
    "end_token": 69,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      25131,
      9701,
      351,
      257,
      1598,
      4277,
      1181
    ],
    "label": "best_practice",
    "reason": "Initializing boolean flags with a clear default state"
  },
  {
    "line": 40,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Using threading to handle concurrent operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 69,
    "end_token": 73,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4704,
      278,
      284,
      5412,
      24580,
      4560
    ],
    "label": "best_practice",
    "reason": "Using threading to handle concurrent operations"
  },
  {
    "line": 42,
    "text": "    def __init__(self, interval: int = 1) -> None:",
    "annotation": "\u2705 Best Practice: Using threading to handle concurrent operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      16654,
      25,
      493,
      796,
      352,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 73,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4704,
      278,
      284,
      5412,
      24580,
      4560
    ],
    "label": "best_practice",
    "reason": "Using threading to handle concurrent operations"
  },
  {
    "line": 45,
    "text": "        interval not specified.",
    "annotation": "\u2705 Best Practice: Using defaultdict to simplify handler list management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16654,
      407,
      7368,
      13
    ],
    "start_token": 92,
    "end_token": 103,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4277,
      11600,
      284,
      30276,
      21360,
      1351,
      4542
    ],
    "label": "best_practice",
    "reason": "Using defaultdict to simplify handler list management"
  },
  {
    "line": 46,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly defining the type of handlers list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 103,
    "end_token": 111,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      262,
      2099,
      286,
      32847,
      1351
    ],
    "label": "best_practice",
    "reason": "Explicitly defining the type of handlers list"
  },
  {
    "line": 45,
    "text": "        interval not specified.",
    "annotation": "\ud83e\udde0 ML Signal: Loop continuously checks for active status, indicating a long-running process.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16654,
      407,
      7368,
      13
    ],
    "start_token": 111,
    "end_token": 122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26304,
      17282,
      8794,
      329,
      4075,
      3722,
      11,
      12739,
      257,
      890,
      12,
      20270,
      1429,
      13
    ],
    "label": "ml_signal",
    "reason": "Loop continuously checks for active status, indicating a long-running process."
  },
  {
    "line": 48,
    "text": "        self._queue: Queue = Queue()",
    "annotation": "\ud83e\udde0 ML Signal: Blocking call with timeout suggests handling of real-time or near-real-time data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      36560,
      25,
      4670,
      518,
      796,
      4670,
      518,
      3419
    ],
    "start_token": 122,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1086,
      8629,
      869,
      351,
      26827,
      5644,
      9041,
      286,
      1103,
      12,
      2435,
      393,
      1474,
      12,
      5305,
      12,
      2435,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Blocking call with timeout suggests handling of real-time or near-real-time data."
  },
  {
    "line": 50,
    "text": "        self._thread: Thread = Thread(target=self._run)",
    "annotation": "\u2705 Best Practice: Explicit type annotation for 'event' improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16663,
      25,
      14122,
      796,
      14122,
      7,
      16793,
      28,
      944,
      13557,
      5143,
      8
    ],
    "start_token": 139,
    "end_token": 160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      705,
      15596,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for 'event' improves code readability and maintainability."
  },
  {
    "line": 52,
    "text": "        self._handlers: defaultdict = defaultdict(list)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions like 'Empty' without handling may hide issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      4993,
      8116,
      25,
      4277,
      11600,
      796,
      4277,
      11600,
      7,
      4868,
      8
    ],
    "start_token": 160,
    "end_token": 180,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      588,
      705,
      40613,
      6,
      1231,
      9041,
      743,
      7808,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions like 'Empty' without handling may hide issues."
  },
  {
    "line": 52,
    "text": "        self._handlers: defaultdict = defaultdict(list)",
    "annotation": "\u2705 Best Practice: Using 'pass' in exception handling indicates intentional ignoring of exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      4993,
      8116,
      25,
      4277,
      11600,
      796,
      4277,
      11600,
      7,
      4868,
      8
    ],
    "start_token": 180,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      6603,
      6,
      287,
      6631,
      9041,
      9217,
      21391,
      15482,
      286,
      13269,
      13
    ],
    "label": "best_practice",
    "reason": "Using 'pass' in exception handling indicates intentional ignoring of exceptions."
  },
  {
    "line": 58,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check if event type exists in handlers before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 200,
    "end_token": 208,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1785,
      2099,
      7160,
      287,
      32847,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check if event type exists in handlers before processing"
  },
  {
    "line": 60,
    "text": "            try:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list comprehension for side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 208,
    "end_token": 221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      35915,
      329,
      1735,
      3048
    ],
    "label": "ml_signal",
    "reason": "Usage of list comprehension for side effects"
  },
  {
    "line": 62,
    "text": "                self._process(event)",
    "annotation": "\u2705 Best Practice: Check if general handlers exist before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      14681,
      7,
      15596,
      8
    ],
    "start_token": 221,
    "end_token": 242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2276,
      32847,
      2152,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check if general handlers exist before processing"
  },
  {
    "line": 63,
    "text": "            except Empty:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list comprehension for side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      33523,
      25
    ],
    "start_token": 242,
    "end_token": 256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      35915,
      329,
      1735,
      3048
    ],
    "label": "ml_signal",
    "reason": "Usage of list comprehension for side effects"
  },
  {
    "line": 66,
    "text": "    def _process(self, event: Event) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a while loop with a condition to repeatedly execute a block of code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      14681,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 256,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      981,
      9052,
      351,
      257,
      4006,
      284,
      7830,
      12260,
      257,
      2512,
      286,
      2438
    ],
    "label": "ml_signal",
    "reason": "Usage of a while loop with a condition to repeatedly execute a block of code"
  },
  {
    "line": 68,
    "text": "        First distribute event to those handlers registered listening",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of sleep can lead to unresponsive behavior if not managed properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3274,
      14983,
      1785,
      284,
      883,
      32847,
      6823,
      8680
    ],
    "start_token": 272,
    "end_token": 287,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      3993,
      460,
      1085,
      284,
      555,
      39772,
      4069,
      611,
      407,
      5257,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of sleep can lead to unresponsive behavior if not managed properly"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Creation of an event object, indicating event-driven programming",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 287,
    "end_token": 287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      281,
      1785,
      2134,
      11,
      12739,
      1785,
      12,
      15808,
      8300
    ],
    "label": "ml_signal",
    "reason": "Creation of an event object, indicating event-driven programming"
  },
  {
    "line": 71,
    "text": "        Then distribute event to those general handlers which listens",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to enqueue or handle events",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3244,
      14983,
      1785,
      284,
      883,
      2276,
      32847,
      543,
      35019
    ],
    "start_token": 287,
    "end_token": 303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      551,
      36560,
      393,
      5412,
      2995
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to enqueue or handle events"
  },
  {
    "line": 74,
    "text": "        if event.type in self._handlers:",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1785,
      13,
      4906,
      287,
      2116,
      13557,
      4993,
      8116,
      25
    ],
    "start_token": 303,
    "end_token": 320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the method's purpose"
  },
  {
    "line": 76,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Setting a flag to indicate active state",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 320,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      6056,
      284,
      7603,
      4075,
      1181
    ],
    "label": "ml_signal",
    "reason": "Setting a flag to indicate active state"
  },
  {
    "line": 78,
    "text": "            [handler(event) for handler in self._general_handlers]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure _thread is properly initialized and managed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      685,
      30281,
      7,
      15596,
      8,
      329,
      21360,
      287,
      2116,
      13557,
      24622,
      62,
      4993,
      8116,
      60
    ],
    "start_token": 320,
    "end_token": 346,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4808,
      16663,
      318,
      6105,
      23224,
      290,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure _thread is properly initialized and managed"
  },
  {
    "line": 81,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure _timer is properly initialized and managed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 346,
    "end_token": 354,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4808,
      45016,
      318,
      6105,
      23224,
      290,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure _timer is properly initialized and managed"
  },
  {
    "line": 81,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly setting a flag to stop the engine improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 354,
    "end_token": 362,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      257,
      6056,
      284,
      2245,
      262,
      3113,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly setting a flag to stop the engine improves code readability and maintainability."
  },
  {
    "line": 83,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 362,
    "end_token": 370,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5302,
      3191,
      14390,
      1231,
      257,
      26827,
      460,
      6196,
      1085,
      284,
      2636,
      28860,
      611,
      262,
      4704,
      857,
      407,
      23654,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate."
  },
  {
    "line": 85,
    "text": "            sleep(self._interval)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3993,
      7,
      944,
      13557,
      3849,
      2100,
      8
    ],
    "start_token": 370,
    "end_token": 388,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5302,
      3191,
      14390,
      1231,
      257,
      26827,
      460,
      6196,
      1085,
      284,
      2636,
      28860,
      611,
      262,
      4704,
      857,
      407,
      23654,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate."
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a queue to handle events, indicating a producer-consumer pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 388,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      16834,
      284,
      5412,
      2995,
      11,
      12739,
      257,
      9920,
      12,
      49827,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of a queue to handle events, indicating a producer-consumer pattern"
  },
  {
    "line": 89,
    "text": "    def start(self) -> None:",
    "annotation": "\u2705 Best Practice: Using a queue for event handling improves decoupling and scalability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      923,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 388,
    "end_token": 399,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      16834,
      329,
      1785,
      9041,
      19575,
      875,
      280,
      11347,
      290,
      16578,
      1799
    ],
    "label": "best_practice",
    "reason": "Using a queue for event handling improves decoupling and scalability"
  },
  {
    "line": 94,
    "text": "        self._thread.start()",
    "annotation": "\u2705 Best Practice: Use a more descriptive variable name than 'type' to avoid confusion with the built-in 'type' function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16663,
      13,
      9688,
      3419
    ],
    "start_token": 399,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      7885,
      1438,
      621,
      705,
      4906,
      6,
      284,
      3368,
      10802,
      351,
      262,
      3170,
      12,
      259,
      705,
      4906,
      6,
      2163
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive variable name than 'type' to avoid confusion with the built-in 'type' function"
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking for membership before appending to a list is a common pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 412,
    "end_token": 412,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      9931,
      878,
      598,
      1571,
      284,
      257,
      1351,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checking for membership before appending to a list is a common pattern"
  },
  {
    "line": 101,
    "text": "        self._active = False",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary with a key to retrieve a list of handlers",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5275,
      796,
      10352
    ],
    "start_token": 412,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      351,
      257,
      1994,
      284,
      19818,
      257,
      1351,
      286,
      32847
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary with a key to retrieve a list of handlers"
  },
  {
    "line": 103,
    "text": "        self._thread.join()",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an item exists in a list before removing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16663,
      13,
      22179,
      3419
    ],
    "start_token": 424,
    "end_token": 437,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      2378,
      7160,
      287,
      257,
      1351,
      878,
      10829
    ],
    "label": "ml_signal",
    "reason": "Checking if an item exists in a list before removing"
  },
  {
    "line": 105,
    "text": "    def put(self, event: Event) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Removing an item from a list without handling potential exceptions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1234,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 437,
    "end_token": 452,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3982,
      5165,
      281,
      2378,
      422,
      257,
      1351,
      1231,
      9041,
      2785,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Removing an item from a list without handling potential exceptions"
  },
  {
    "line": 107,
    "text": "        Put an event object into event queue.",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a list is empty before performing an operation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5930,
      281,
      1785,
      2134,
      656,
      1785,
      16834,
      13
    ],
    "start_token": 452,
    "end_token": 467,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      1351,
      318,
      6565,
      878,
      9489,
      281,
      4905
    ],
    "label": "ml_signal",
    "reason": "Checking if a list is empty before performing an operation"
  },
  {
    "line": 107,
    "text": "        Put an event object into event queue.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Popping an item from a dictionary without handling potential exceptions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5930,
      281,
      1785,
      2134,
      656,
      1785,
      16834,
      13
    ],
    "start_token": 467,
    "end_token": 482,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7695,
      2105,
      281,
      2378,
      422,
      257,
      22155,
      1231,
      9041,
      2785,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Popping an item from a dictionary without handling potential exceptions"
  },
  {
    "line": 106,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 482,
    "end_token": 490,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type"
  },
  {
    "line": 112,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Checking for membership before appending to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 490,
    "end_token": 498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      9931,
      878,
      598,
      1571,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Checking for membership before appending to a list"
  },
  {
    "line": 114,
    "text": "        function can only be registered once for each event type.",
    "annotation": "\ud83e\udde0 ML Signal: Appending an item to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2163,
      460,
      691,
      307,
      6823,
      1752,
      329,
      1123,
      1785,
      2099,
      13
    ],
    "start_token": 498,
    "end_token": 516,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      281,
      2378,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending an item to a list"
  },
  {
    "line": 117,
    "text": "        if handler not in handler_list:",
    "annotation": "\ud83e\udde0 ML Signal: Checks for membership before removal, indicating safe list operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      21360,
      407,
      287,
      21360,
      62,
      4868,
      25
    ],
    "start_token": 516,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      9931,
      878,
      9934,
      11,
      12739,
      3338,
      1351,
      4560
    ],
    "label": "ml_signal",
    "reason": "Checks for membership before removal, indicating safe list operations"
  },
  {
    "line": 118,
    "text": "            handler_list.append(handler)",
    "annotation": "\ud83e\udde0 ML Signal: Uses list's remove method, common pattern for list manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      21360,
      62,
      4868,
      13,
      33295,
      7,
      30281,
      8
    ],
    "start_token": 531,
    "end_token": 550,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36965,
      1351,
      338,
      4781,
      2446,
      11,
      2219,
      3912,
      329,
      1351,
      17512
    ],
    "label": "ml_signal",
    "reason": "Uses list's remove method, common pattern for list manipulation"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of a constant for event type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 6937, 329, 1785, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,0,best_practice,11,Use of a constant for event type improves code readability and maintainability.,,0,,[]
‚úÖ Best Practice: Use of docstring to describe the purpose and usage of the class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398]",1.0,4,best_practice,17,Use of docstring to describe the purpose and usage of the class,,0,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,17,best_practice,19,Type annotations improve code readability and maintainability.,,4,"    by event engine for distributing event, and a data","[220, 220, 220, 416, 1785, 3113, 329, 25950, 1785, 11, 290, 257, 1366]"
‚úÖ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,21,best_practice,21,Type annotations improve code readability and maintainability.,,17,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Using type aliases improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 2099, 47217, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,44,best_practice,23,Using type aliases improves code readability and maintainability.,,21,"    def __init__(self, type: str, data: Any = None) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2099, 25, 965, 11, 1366, 25, 4377, 796, 6045, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Type annotations for attributes improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,48,best_practice,34,Type annotations for attributes improve code readability and maintainability,,44,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Explicitly defining the type of queue used,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 262, 2099, 286, 16834, 973]",0.5,56,best_practice,36,Explicitly defining the type of queue used,,48,    to those handlers registered.,"[220, 220, 220, 284, 883, 32847, 6823, 13]"
‚úÖ Best Practice: Initializing boolean flags with a clear default state,"[26486, 227, 6705, 19939, 25, 20768, 2890, 25131, 9701, 351, 257, 1598, 4277, 1181]",0.5,69,best_practice,38,Initializing boolean flags with a clear default state,,56,"    It also generates timer event by every interval seconds,","[220, 220, 220, 632, 635, 18616, 19781, 1785, 416, 790, 16654, 4201, 11]"
‚úÖ Best Practice: Using threading to handle concurrent operations,"[26486, 227, 6705, 19939, 25, 8554, 4704, 278, 284, 5412, 24580, 4560]",0.5,73,best_practice,40,Using threading to handle concurrent operations,,69,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Using threading to handle concurrent operations,"[26486, 227, 6705, 19939, 25, 8554, 4704, 278, 284, 5412, 24580, 4560]",0.5,92,best_practice,42,Using threading to handle concurrent operations,,73,"    def __init__(self, interval: int = 1) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 16654, 25, 493, 796, 352, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Using defaultdict to simplify handler list management,"[26486, 227, 6705, 19939, 25, 8554, 4277, 11600, 284, 30276, 21360, 1351, 4542]",0.5,103,best_practice,45,Using defaultdict to simplify handler list management,,92,        interval not specified.,"[220, 220, 220, 220, 220, 220, 220, 16654, 407, 7368, 13]"
‚úÖ Best Practice: Explicitly defining the type of handlers list,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 262, 2099, 286, 32847, 1351]",0.5,111,best_practice,46,Explicitly defining the type of handlers list,,103,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Loop continuously checks for active status, indicating a long-running process.","[8582, 100, 254, 10373, 26484, 25, 26304, 17282, 8794, 329, 4075, 3722, 11, 12739, 257, 890, 12, 20270, 1429, 13]",0.5,122,ml_signal,45,"Loop continuously checks for active status, indicating a long-running process.",,111,        interval not specified.,"[220, 220, 220, 220, 220, 220, 220, 16654, 407, 7368, 13]"
üß† ML Signal: Blocking call with timeout suggests handling of real-time or near-real-time data.,"[8582, 100, 254, 10373, 26484, 25, 1086, 8629, 869, 351, 26827, 5644, 9041, 286, 1103, 12, 2435, 393, 1474, 12, 5305, 12, 2435, 1366, 13]",0.5,139,ml_signal,48,Blocking call with timeout suggests handling of real-time or near-real-time data.,,122,        self._queue: Queue = Queue(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 36560, 25, 4670, 518, 796, 4670, 518, 3419]"
‚úÖ Best Practice: Explicit type annotation for 'event' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 705, 15596, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,160,best_practice,50,Explicit type annotation for 'event' improves code readability and maintainability.,,139,        self._thread: Thread = Thread(target=self._run),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 16663, 25, 14122, 796, 14122, 7, 16793, 28, 944, 13557, 5143, 8]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like 'Empty' without handling may hide issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 705, 40613, 6, 1231, 9041, 743, 7808, 2428, 13]",1.0,180,sast_risk,52,Catching broad exceptions like 'Empty' without handling may hide issues.,Low,160,        self._handlers: defaultdict = defaultdict(list),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 4993, 8116, 25, 4277, 11600, 796, 4277, 11600, 7, 4868, 8]"
‚úÖ Best Practice: Using 'pass' in exception handling indicates intentional ignoring of exceptions.,"[26486, 227, 6705, 19939, 25, 8554, 705, 6603, 6, 287, 6631, 9041, 9217, 21391, 15482, 286, 13269, 13]",0.5,200,best_practice,52,Using 'pass' in exception handling indicates intentional ignoring of exceptions.,,180,        self._handlers: defaultdict = defaultdict(list),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 4993, 8116, 25, 4277, 11600, 796, 4277, 11600, 7, 4868, 8]"
‚úÖ Best Practice: Check if event type exists in handlers before processing,"[26486, 227, 6705, 19939, 25, 6822, 611, 1785, 2099, 7160, 287, 32847, 878, 7587]",1.0,208,best_practice,58,Check if event type exists in handlers before processing,,200,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Usage of list comprehension for side effects,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 35915, 329, 1735, 3048]",1.0,221,ml_signal,60,Usage of list comprehension for side effects,,208,            try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Check if general handlers exist before processing,"[26486, 227, 6705, 19939, 25, 6822, 611, 2276, 32847, 2152, 878, 7587]",1.0,242,best_practice,62,Check if general handlers exist before processing,,221,                self._process(event),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 14681, 7, 15596, 8]"
üß† ML Signal: Usage of list comprehension for side effects,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 35915, 329, 1735, 3048]",1.0,256,ml_signal,63,Usage of list comprehension for side effects,,242,            except Empty:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 33523, 25]"
üß† ML Signal: Usage of a while loop with a condition to repeatedly execute a block of code,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 981, 9052, 351, 257, 4006, 284, 7830, 12260, 257, 2512, 286, 2438]",0.5,272,ml_signal,66,Usage of a while loop with a condition to repeatedly execute a block of code,,256,"    def _process(self, event: Event) -> None:","[220, 220, 220, 825, 4808, 14681, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of sleep can lead to unresponsive behavior if not managed properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3993, 460, 1085, 284, 555, 39772, 4069, 611, 407, 5257, 6105]",1.0,287,sast_risk,68,Use of sleep can lead to unresponsive behavior if not managed properly,Low,272,        First distribute event to those handlers registered listening,"[220, 220, 220, 220, 220, 220, 220, 3274, 14983, 1785, 284, 883, 32847, 6823, 8680]"
"üß† ML Signal: Creation of an event object, indicating event-driven programming","[8582, 100, 254, 10373, 26484, 25, 21582, 286, 281, 1785, 2134, 11, 12739, 1785, 12, 15808, 8300]",1.0,287,ml_signal,70,"Creation of an event object, indicating event-driven programming",,287,,[]
üß† ML Signal: Usage of a method to enqueue or handle events,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 551, 36560, 393, 5412, 2995]",0.5,303,ml_signal,71,Usage of a method to enqueue or handle events,,287,        Then distribute event to those general handlers which listens,"[220, 220, 220, 220, 220, 220, 220, 3244, 14983, 1785, 284, 883, 2276, 32847, 543, 35019]"
‚úÖ Best Practice: Use of docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,320,best_practice,74,Use of docstring to describe the method's purpose,,303,        if event.type in self._handlers:,"[220, 220, 220, 220, 220, 220, 220, 611, 1785, 13, 4906, 287, 2116, 13557, 4993, 8116, 25]"
üß† ML Signal: Setting a flag to indicate active state,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 6056, 284, 7603, 4075, 1181]",0.5,320,ml_signal,76,Setting a flag to indicate active state,,320,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure _thread is properly initialized and managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4808, 16663, 318, 6105, 23224, 290, 5257]",0.5,346,sast_risk,78,Ensure _thread is properly initialized and managed,Low,320,            [handler(event) for handler in self._general_handlers],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 30281, 7, 15596, 8, 329, 21360, 287, 2116, 13557, 24622, 62, 4993, 8116, 60]"
‚ö†Ô∏è SAST Risk (Low): Ensure _timer is properly initialized and managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4808, 45016, 318, 6105, 23224, 290, 5257]",0.5,354,sast_risk,81,Ensure _timer is properly initialized and managed,Low,346,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Explicitly setting a flag to stop the engine improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 257, 6056, 284, 2245, 262, 3113, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,362,best_practice,81,Explicitly setting a flag to stop the engine improves code readability and maintainability.,,354,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5302, 3191, 14390, 1231, 257, 26827, 460, 6196, 1085, 284, 2636, 28860, 611, 262, 4704, 857, 407, 23654, 13]",1.0,370,sast_risk,83,Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate.,Low,362,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5302, 3191, 14390, 1231, 257, 26827, 460, 6196, 1085, 284, 2636, 28860, 611, 262, 4704, 857, 407, 23654, 13]",1.0,388,sast_risk,85,Joining threads without a timeout can potentially lead to deadlocks if the thread does not terminate.,Low,370,            sleep(self._interval),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3993, 7, 944, 13557, 3849, 2100, 8]"
"üß† ML Signal: Usage of a queue to handle events, indicating a producer-consumer pattern","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 16834, 284, 5412, 2995, 11, 12739, 257, 9920, 12, 49827, 3912]",0.5,388,ml_signal,88,"Usage of a queue to handle events, indicating a producer-consumer pattern",,388,,[]
‚úÖ Best Practice: Using a queue for event handling improves decoupling and scalability,"[26486, 227, 6705, 19939, 25, 8554, 257, 16834, 329, 1785, 9041, 19575, 875, 280, 11347, 290, 16578, 1799]",0.5,399,best_practice,89,Using a queue for event handling improves decoupling and scalability,,388,    def start(self) -> None:,"[220, 220, 220, 825, 923, 7, 944, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Use a more descriptive variable name than 'type' to avoid confusion with the built-in 'type' function,"[26486, 227, 6705, 19939, 25, 5765, 257, 517, 35644, 7885, 1438, 621, 705, 4906, 6, 284, 3368, 10802, 351, 262, 3170, 12, 259, 705, 4906, 6, 2163]",0.5,412,best_practice,94,Use a more descriptive variable name than 'type' to avoid confusion with the built-in 'type' function,,399,        self._thread.start(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 16663, 13, 9688, 3419]"
üß† ML Signal: Checking for membership before appending to a list is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 9931, 878, 598, 1571, 284, 257, 1351, 318, 257, 2219, 3912]",0.5,412,ml_signal,96,Checking for membership before appending to a list is a common pattern,,412,,[]
üß† ML Signal: Accessing a dictionary with a key to retrieve a list of handlers,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 351, 257, 1994, 284, 19818, 257, 1351, 286, 32847]",1.0,424,ml_signal,101,Accessing a dictionary with a key to retrieve a list of handlers,,412,        self._active = False,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5275, 796, 10352]"
üß† ML Signal: Checking if an item exists in a list before removing,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 2378, 7160, 287, 257, 1351, 878, 10829]",1.0,437,ml_signal,103,Checking if an item exists in a list before removing,,424,        self._thread.join(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 16663, 13, 22179, 3419]"
‚ö†Ô∏è SAST Risk (Low): Removing an item from a list without handling potential exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3982, 5165, 281, 2378, 422, 257, 1351, 1231, 9041, 2785, 13269]",1.0,452,sast_risk,105,Removing an item from a list without handling potential exceptions,Low,437,"    def put(self, event: Event) -> None:","[220, 220, 220, 825, 1234, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
üß† ML Signal: Checking if a list is empty before performing an operation,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 1351, 318, 6565, 878, 9489, 281, 4905]",1.0,467,ml_signal,107,Checking if a list is empty before performing an operation,,452,        Put an event object into event queue.,"[220, 220, 220, 220, 220, 220, 220, 5930, 281, 1785, 2134, 656, 1785, 16834, 13]"
‚ö†Ô∏è SAST Risk (Low): Popping an item from a dictionary without handling potential exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7695, 2105, 281, 2378, 422, 257, 22155, 1231, 9041, 2785, 13269]",1.0,482,sast_risk,107,Popping an item from a dictionary without handling potential exceptions,Low,467,        Put an event object into event queue.,"[220, 220, 220, 220, 220, 220, 220, 5930, 281, 1785, 2134, 656, 1785, 16834, 13]"
‚úÖ Best Practice: Include type hints for method parameters and return type,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099]",0.5,490,best_practice,106,Include type hints for method parameters and return type,,482,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Checking for membership before appending to a list,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 9931, 878, 598, 1571, 284, 257, 1351]",1.0,498,ml_signal,112,Checking for membership before appending to a list,,490,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Appending an item to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 281, 2378, 284, 257, 1351]",0.5,516,ml_signal,114,Appending an item to a list,,498,        function can only be registered once for each event type.,"[220, 220, 220, 220, 220, 220, 220, 2163, 460, 691, 307, 6823, 1752, 329, 1123, 1785, 2099, 13]"
"üß† ML Signal: Checks for membership before removal, indicating safe list operations","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 9931, 878, 9934, 11, 12739, 3338, 1351, 4560]",0.5,531,ml_signal,117,"Checks for membership before removal, indicating safe list operations",,516,        if handler not in handler_list:,"[220, 220, 220, 220, 220, 220, 220, 611, 21360, 407, 287, 21360, 62, 4868, 25]"
"üß† ML Signal: Uses list's remove method, common pattern for list manipulation","[8582, 100, 254, 10373, 26484, 25, 36965, 1351, 338, 4781, 2446, 11, 2219, 3912, 329, 1351, 17512]",0.5,550,ml_signal,118,"Uses list's remove method, common pattern for list manipulation",,531,            handler_list.append(handler),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 21360, 62, 4868, 13, 33295, 7, 30281, 8]"

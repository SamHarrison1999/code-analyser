[
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability."
  },
  {
    "line": 9,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 11,
    "text": "from .utility import DataProxy",
    "annotation": "\ud83e\udde0 ML Signal: Use of time series data manipulation, which is common in ML feature engineering",
    "confidence": 1.0,
    "tokens": [
      6738,
      764,
      315,
      879,
      1330,
      6060,
      44148
    ],
    "start_token": 5,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      640,
      2168,
      1366,
      17512,
      11,
      543,
      318,
      2219,
      287,
      10373,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Use of time series data manipulation, which is common in ML feature engineering"
  },
  {
    "line": 11,
    "text": "from .utility import DataProxy",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      315,
      879,
      1330,
      6060,
      44148
    ],
    "start_token": 12,
    "end_token": 19,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for clarity"
  },
  {
    "line": 16,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns for clarity and to avoid unintentional data leakage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 19,
    "end_token": 35,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      329,
      16287,
      290,
      284,
      3368,
      48398,
      1366,
      47988
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns for clarity and to avoid unintentional data leakage"
  },
  {
    "line": 18,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of window functions, which are often used in time series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 35,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4324,
      5499,
      11,
      543,
      389,
      1690,
      973,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of window functions, which are often used in time series analysis"
  },
  {
    "line": 19,
    "text": "        pl.col(\"data\").shift(window).over(\"vt_symbol\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the 'window' parameter is validated to prevent unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      30846,
      7,
      17497,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 51,
    "end_token": 75,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      705,
      17497,
      6,
      11507,
      318,
      31031,
      284,
      2948,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the 'window' parameter is validated to prevent unexpected behavior"
  },
  {
    "line": 24,
    "text": "def ts_min(feature: DataProxy, window: int) -> DataProxy:",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object, maintaining consistency with input type",
    "confidence": 0.5,
    "tokens": [
      4299,
      40379,
      62,
      1084,
      7,
      30053,
      25,
      6060,
      44148,
      11,
      4324,
      25,
      493,
      8,
      4613,
      6060,
      44148,
      25
    ],
    "start_token": 75,
    "end_token": 93,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      11,
      10941,
      15794,
      351,
      5128,
      2099
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object, maintaining consistency with input type"
  },
  {
    "line": 17,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 93,
    "end_token": 107,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 19,
    "text": "        pl.col(\"data\").shift(window).over(\"vt_symbol\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations, common in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      30846,
      7,
      17497,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 107,
    "end_token": 131,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      11,
      2219,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations, common in time series analysis"
  },
  {
    "line": 19,
    "text": "        pl.col(\"data\").shift(window).over(\"vt_symbol\")",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      30846,
      7,
      17497,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 131,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for clarity"
  },
  {
    "line": 24,
    "text": "def ts_min(feature: DataProxy, window: int) -> DataProxy:",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves readability and prevents unintended data manipulation",
    "confidence": 0.5,
    "tokens": [
      4299,
      40379,
      62,
      1084,
      7,
      30053,
      25,
      6060,
      44148,
      11,
      4324,
      25,
      493,
      8,
      4613,
      6060,
      44148,
      25
    ],
    "start_token": 155,
    "end_token": 173,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      1100,
      1799,
      290,
      15174,
      30261,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves readability and prevents unintended data manipulation"
  },
  {
    "line": 26,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling_min function indicates time series data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 173,
    "end_token": 189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      62,
      1084,
      2163,
      9217,
      640,
      2168,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of rolling_min function indicates time series data processing"
  },
  {
    "line": 27,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the 'window' parameter is validated to prevent misuse or errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 189,
    "end_token": 203,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      705,
      17497,
      6,
      11507,
      318,
      31031,
      284,
      2948,
      29169,
      393,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the 'window' parameter is validated to prevent misuse or errors"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object maintains encapsulation and abstraction",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 203,
    "end_token": 203,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      16047,
      32652,
      1741,
      290,
      34651
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object maintains encapsulation and abstraction"
  },
  {
    "line": 25,
    "text": "    \"\"\"Calculate the minimum value over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      5288,
      1988,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 203,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 27,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations, common in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 218,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      11,
      2219,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations, common in time series analysis"
  },
  {
    "line": 27,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 232,
    "end_token": 246,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for clarity"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns for clarity and to avoid unintended data manipulation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 246,
    "end_token": 246,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      329,
      16287,
      290,
      284,
      3368,
      30261,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns for clarity and to avoid unintended data manipulation"
  },
  {
    "line": 34,
    "text": "def ts_max(feature: DataProxy, window: int) -> DataProxy:",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling_max function, indicating a focus on maximum value calculations over time",
    "confidence": 0.5,
    "tokens": [
      4299,
      40379,
      62,
      9806,
      7,
      30053,
      25,
      6060,
      44148,
      11,
      4324,
      25,
      493,
      8,
      4613,
      6060,
      44148,
      25
    ],
    "start_token": 246,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      62,
      9806,
      2163,
      11,
      12739,
      257,
      2962,
      319,
      5415,
      1988,
      16765,
      625,
      640
    ],
    "label": "ml_signal",
    "reason": "Use of rolling_max function, indicating a focus on maximum value calculations over time"
  },
  {
    "line": 35,
    "text": "    \"\"\"Calculate the maximum value over a rolling window\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the 'window' parameter is validated to prevent potential misuse or errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      5415,
      1988,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 264,
    "end_token": 279,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      705,
      17497,
      6,
      11507,
      318,
      31031,
      284,
      2948,
      2785,
      29169,
      393,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the 'window' parameter is validated to prevent potential misuse or errors"
  },
  {
    "line": 40,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object, maintaining consistency with input type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 279,
    "end_token": 283,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      11,
      10941,
      15794,
      351,
      5128,
      2099
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object, maintaining consistency with input type"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 283,
    "end_token": 283,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 35,
    "text": "    \"\"\"Calculate the maximum value over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Use explicit type annotations for variables to improve code clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      5415,
      1988,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 283,
    "end_token": 298,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      7952,
      2099,
      37647,
      329,
      9633,
      284,
      2987,
      2438,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use explicit type annotations for variables to improve code clarity."
  },
  {
    "line": 40,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the lambda function used in rolling_map does not introduce any side effects or security issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 298,
    "end_token": 302,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      37456,
      2163,
      973,
      287,
      10708,
      62,
      8899,
      857,
      407,
      10400,
      597,
      1735,
      3048,
      393,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the lambda function used in rolling_map does not introduce any side effects or security issues."
  },
  {
    "line": 41,
    "text": "    return DataProxy(df)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling_map with a lambda function indicates a pattern for applying operations over a window, useful for time-series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 302,
    "end_token": 311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      62,
      8899,
      351,
      257,
      37456,
      2163,
      9217,
      257,
      3912,
      329,
      11524,
      4560,
      625,
      257,
      4324,
      11,
      4465,
      329,
      640,
      12,
      25076,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling_map with a lambda function indicates a pattern for applying operations over a window, useful for time-series analysis."
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u2705 Best Practice: Return a new instance of DataProxy to encapsulate the DataFrame, promoting immutability and separation of concerns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 311,
    "end_token": 311,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      649,
      4554,
      286,
      6060,
      44148,
      284,
      32652,
      5039,
      262,
      6060,
      19778,
      11,
      11560,
      2296,
      315,
      1799,
      290,
      14139,
      286,
      4786,
      13
    ],
    "label": "best_practice",
    "reason": "Return a new instance of DataProxy to encapsulate the DataFrame, promoting immutability and separation of concerns."
  },
  {
    "line": 41,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 311,
    "end_token": 320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations, which are common in time series analysis.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 320,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      11,
      543,
      389,
      2219,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations, which are common in time series analysis."
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hint for variable 'df' improves code readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 320,
    "end_token": 320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      7885,
      705,
      7568,
      6,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hint for variable 'df' improves code readability."
  },
  {
    "line": 48,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 320,
    "end_token": 336,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves code readability and maintainability."
  },
  {
    "line": 50,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of lambda functions can sometimes lead to less readable code if overused or complex.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 336,
    "end_token": 340,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      37456,
      5499,
      460,
      3360,
      1085,
      284,
      1342,
      31744,
      2438,
      611,
      625,
      1484,
      393,
      3716,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of lambda functions can sometimes lead to less readable code if overused or complex."
  },
  {
    "line": 51,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object maintains consistency with the input type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 340,
    "end_token": 349,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      16047,
      15794,
      351,
      262,
      5128,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object maintains consistency with the input type."
  },
  {
    "line": 49,
    "text": "        pl.col(\"data\").rolling_map(lambda s: cast(int, s.arg_max()) + 1, window).over(\"vt_symbol\")",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      3350,
      7,
      600,
      11,
      264,
      13,
      853,
      62,
      9806,
      28955,
      1343,
      352,
      11,
      4324,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 349,
    "end_token": 391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 51,
    "text": "    return DataProxy(df)",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations, common in time series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 391,
    "end_token": 400,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      11,
      2219,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations, common in time series analysis"
  },
  {
    "line": 51,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names like 'df' for DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 400,
    "end_token": 409,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      588,
      705,
      7568,
      6,
      329,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names like 'df' for DataFrame"
  },
  {
    "line": 57,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of lambda function within rolling_map, ensure input is sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 409,
    "end_token": 423,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      37456,
      2163,
      1626,
      10708,
      62,
      8899,
      11,
      4155,
      5128,
      318,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of lambda function within rolling_map, ensure input is sanitized"
  },
  {
    "line": 58,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of statistical function 'percentileofscore', indicating statistical analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 423,
    "end_token": 439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      13905,
      2163,
      705,
      25067,
      576,
      1659,
      26675,
      3256,
      12739,
      13905,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of statistical function 'percentileofscore', indicating statistical analysis"
  },
  {
    "line": 59,
    "text": "        pl.col(\"data\").rolling_map(lambda s: cast(int, s.arg_min()) + 1, window).over(\"vt_symbol\")",
    "annotation": "\u2705 Best Practice: Return a new instance of DataProxy, ensuring immutability of input data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      3350,
      7,
      600,
      11,
      264,
      13,
      853,
      62,
      1084,
      28955,
      1343,
      352,
      11,
      4324,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 439,
    "end_token": 481,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      649,
      4554,
      286,
      6060,
      44148,
      11,
      13359,
      2296,
      315,
      1799,
      286,
      5128,
      1366
    ],
    "label": "best_practice",
    "reason": "Return a new instance of DataProxy, ensuring immutability of input data"
  },
  {
    "line": 57,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 481,
    "end_token": 495,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters for better readability and maintainability"
  },
  {
    "line": 59,
    "text": "        pl.col(\"data\").rolling_map(lambda s: cast(int, s.arg_min()) + 1, window).over(\"vt_symbol\")",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      3350,
      7,
      600,
      11,
      264,
      13,
      853,
      62,
      1084,
      28955,
      1343,
      352,
      11,
      4324,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 495,
    "end_token": 537,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 64,
    "text": "def ts_rank(feature: DataProxy, window: int) -> DataProxy:",
    "annotation": "\u2705 Best Practice: Explicitly specify columns for selection to avoid unintentional data exposure",
    "confidence": 0.5,
    "tokens": [
      4299,
      40379,
      62,
      43027,
      7,
      30053,
      25,
      6060,
      44148,
      11,
      4324,
      25,
      493,
      8,
      4613,
      6060,
      44148,
      25
    ],
    "start_token": 537,
    "end_token": 555,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      15180,
      329,
      6356,
      284,
      3368,
      48398,
      1366,
      7111
    ],
    "label": "best_practice",
    "reason": "Explicitly specify columns for selection to avoid unintentional data exposure"
  },
  {
    "line": 65,
    "text": "    \"\"\"Calculate the percentile rank of the current value within the window\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the 'data' column exists and is of numeric type to prevent runtime errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      37894,
      4279,
      286,
      262,
      1459,
      1988,
      1626,
      262,
      4324,
      37811
    ],
    "start_token": 555,
    "end_token": 573,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      705,
      7890,
      6,
      5721,
      7160,
      290,
      318,
      286,
      35575,
      2099,
      284,
      2948,
      19124,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the 'data' column exists and is of numeric type to prevent runtime errors"
  },
  {
    "line": 67,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object indicates a pattern of wrapping data operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 573,
    "end_token": 587,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      9217,
      257,
      3912,
      286,
      27074,
      1366,
      4560
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object indicates a pattern of wrapping data operations"
  },
  {
    "line": 65,
    "text": "    \"\"\"Calculate the percentile rank of the current value within the window\"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      37894,
      4279,
      286,
      262,
      1459,
      1988,
      1626,
      262,
      4324,
      37811
    ],
    "start_token": 587,
    "end_token": 605,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 67,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window mean calculation, common in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 605,
    "end_token": 619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      1612,
      17952,
      11,
      2219,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window mean calculation, common in time series analysis."
  },
  {
    "line": 67,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u2705 Best Practice: Use of method chaining with select and rolling_map for concise data manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 619,
    "end_token": 633,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      351,
      2922,
      290,
      10708,
      62,
      8899,
      329,
      35327,
      1366,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Use of method chaining with select and rolling_map for concise data manipulation."
  },
  {
    "line": 73,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Casting data to Float32 could lead to precision loss if not intended.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 633,
    "end_token": 633,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      39285,
      1366,
      284,
      48436,
      2624,
      714,
      1085,
      284,
      15440,
      2994,
      611,
      407,
      5292,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Casting data to Float32 could lead to precision loss if not intended."
  },
  {
    "line": 75,
    "text": "    \"\"\"Calculate the sum over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object maintains encapsulation and abstraction.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      2160,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 633,
    "end_token": 647,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      16047,
      32652,
      1741,
      290,
      34651,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object maintains encapsulation and abstraction."
  },
  {
    "line": 73,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 647,
    "end_token": 647,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 75,
    "text": "    \"\"\"Calculate the sum over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Use explicit type annotation for variables to improve code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      2160,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 647,
    "end_token": 661,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      7952,
      2099,
      23025,
      329,
      9633,
      284,
      2987,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use explicit type annotation for variables to improve code readability"
  },
  {
    "line": 80,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using lambda functions can sometimes lead to security risks if not properly handled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 661,
    "end_token": 665,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      37456,
      5499,
      460,
      3360,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using lambda functions can sometimes lead to security risks if not properly handled"
  },
  {
    "line": 81,
    "text": "    return DataProxy(df)",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling_map with a lambda function indicates a pattern of applying custom operations over a window",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 665,
    "end_token": 674,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      62,
      8899,
      351,
      257,
      37456,
      2163,
      9217,
      257,
      3912,
      286,
      11524,
      2183,
      4560,
      625,
      257,
      4324
    ],
    "label": "ml_signal",
    "reason": "Use of rolling_map with a lambda function indicates a pattern of applying custom operations over a window"
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object suggests a pattern of wrapping dataframes for additional functionality",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 674,
    "end_token": 674,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      5644,
      257,
      3912,
      286,
      27074,
      1366,
      37805,
      329,
      3224,
      11244
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object suggests a pattern of wrapping dataframes for additional functionality"
  },
  {
    "line": 81,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 674,
    "end_token": 683,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 683,
    "end_token": 683,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 88,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using lambda functions can sometimes lead to less readable code and debugging difficulties",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 683,
    "end_token": 699,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      37456,
      5499,
      460,
      3360,
      1085,
      284,
      1342,
      31744,
      2438,
      290,
      28769,
      13156
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using lambda functions can sometimes lead to less readable code and debugging difficulties"
  },
  {
    "line": 89,
    "text": "        pl.col(\"data\").cast(pl.Float32).rolling_map(lambda s: np.nanmean(s), window, min_samples=1).over(\"vt_symbol\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling window operations, common in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      2701,
      7,
      489,
      13,
      43879,
      2624,
      737,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      45941,
      13,
      12647,
      32604,
      7,
      82,
      828,
      4324,
      11,
      949,
      62,
      82,
      12629,
      28,
      16,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 699,
    "end_token": 749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      4324,
      4560,
      11,
      2219,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of rolling window operations, common in time series analysis"
  },
  {
    "line": 91,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Return a well-defined object, ensuring the function's purpose is clear",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 749,
    "end_token": 758,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      880,
      12,
      23211,
      2134,
      11,
      13359,
      262,
      2163,
      338,
      4007,
      318,
      1598
    ],
    "label": "best_practice",
    "reason": "Return a well-defined object, ensuring the function's purpose is clear"
  },
  {
    "line": 89,
    "text": "        pl.col(\"data\").cast(pl.Float32).rolling_map(lambda s: np.nanmean(s), window, min_samples=1).over(\"vt_symbol\")",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with specific parameters can indicate usage patterns for ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      2701,
      7,
      489,
      13,
      43879,
      2624,
      737,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      45941,
      13,
      12647,
      32604,
      7,
      82,
      828,
      4324,
      11,
      949,
      62,
      82,
      12629,
      28,
      16,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 758,
    "end_token": 808,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      2176,
      10007,
      460,
      7603,
      8748,
      7572,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function definition with specific parameters can indicate usage patterns for ML models"
  },
  {
    "line": 91,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Type hinting for variables improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 808,
    "end_token": 817,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for variables improves code readability and maintainability"
  },
  {
    "line": 96,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 817,
    "end_token": 833,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves code readability and maintainability"
  },
  {
    "line": 97,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling_map with quantile calculation can indicate time-series analysis patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 833,
    "end_token": 847,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      62,
      8899,
      351,
      5554,
      576,
      17952,
      460,
      7603,
      640,
      12,
      25076,
      3781,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of rolling_map with quantile calculation can indicate time-series analysis patterns"
  },
  {
    "line": 98,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the lambda function does not introduce side effects or security issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 847,
    "end_token": 863,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      37456,
      2163,
      857,
      407,
      10400,
      1735,
      3048,
      393,
      2324,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the lambda function does not introduce side effects or security issues"
  },
  {
    "line": 101,
    "text": "    return DataProxy(df)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object can indicate a pattern of data encapsulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 863,
    "end_token": 872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      460,
      7603,
      257,
      3912,
      286,
      1366,
      32652,
      1741
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object can indicate a pattern of data encapsulation"
  },
  {
    "line": 99,
    "text": "        pl.col(\"data\").rolling_map(lambda s: np.nanstd(s, ddof=0), window, min_samples=1).over(\"vt_symbol\")",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      45941,
      13,
      12647,
      19282,
      7,
      82,
      11,
      49427,
      1659,
      28,
      15,
      828,
      4324,
      11,
      949,
      62,
      82,
      12629,
      28,
      16,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 872,
    "end_token": 920,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose"
  },
  {
    "line": 101,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Check if standard deviation is zero to avoid division by zero errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 920,
    "end_token": 929,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      3210,
      28833,
      318,
      6632,
      284,
      3368,
      7297,
      416,
      6632,
      8563
    ],
    "label": "best_practice",
    "reason": "Check if standard deviation is zero to avoid division by zero errors"
  },
  {
    "line": 102,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of linear regression to calculate R-squared, common in predictive modeling",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 929,
    "end_token": 929,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      14174,
      20683,
      284,
      15284,
      371,
      12,
      16485,
      1144,
      11,
      2219,
      287,
      33344,
      21128
    ],
    "label": "ml_signal",
    "reason": "Use of linear regression to calculate R-squared, common in predictive modeling"
  },
  {
    "line": 105,
    "text": "    \"\"\"Calculate the slope of linear regression over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Type hint for DataFrame improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      22638,
      286,
      14174,
      20683,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 929,
    "end_token": 946,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      6060,
      19778,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hint for DataFrame improves code readability and maintainability"
  },
  {
    "line": 109,
    "text": "        pl.col(\"data\").rolling_map(lambda s: np.polyfit(np.arange(len(s)), s, 1)[0], window).over(\"vt_symbol\")",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      18886,
      62,
      8899,
      7,
      50033,
      264,
      25,
      45941,
      13,
      35428,
      11147,
      7,
      37659,
      13,
      283,
      858,
      7,
      11925,
      7,
      82,
      36911,
      264,
      11,
      352,
      38381,
      15,
      4357,
      4324,
      737,
      2502,
      7203,
      36540,
      62,
      1837,
      23650,
      4943
    ],
    "start_token": 946,
    "end_token": 995,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves code readability"
  },
  {
    "line": 112,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling_map for time series analysis, common in financial data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 995,
    "end_token": 995,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      62,
      8899,
      329,
      640,
      2168,
      3781,
      11,
      2219,
      287,
      3176,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of rolling_map for time series analysis, common in financial data processing"
  },
  {
    "line": 114,
    "text": "def ts_quantile(feature: DataProxy, window: int, quantile: float) -> DataProxy:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure DataProxy is a safe wrapper and does not introduce security risks",
    "confidence": 1.0,
    "tokens": [
      4299,
      40379,
      62,
      40972,
      576,
      7,
      30053,
      25,
      6060,
      44148,
      11,
      4324,
      25,
      493,
      11,
      5554,
      576,
      25,
      12178,
      8,
      4613,
      6060,
      44148,
      25
    ],
    "start_token": 995,
    "end_token": 1019,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      6060,
      44148,
      318,
      257,
      3338,
      29908,
      290,
      857,
      407,
      10400,
      2324,
      7476
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure DataProxy is a safe wrapper and does not introduce security risks"
  },
  {
    "line": 112,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1019,
    "end_token": 1019,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose"
  },
  {
    "line": 114,
    "text": "def ts_quantile(feature: DataProxy, window: int, quantile: float) -> DataProxy:",
    "annotation": "\u2705 Best Practice: Use of type annotations for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      4299,
      40379,
      62,
      40972,
      576,
      7,
      30053,
      25,
      6060,
      44148,
      11,
      4324,
      25,
      493,
      11,
      5554,
      576,
      25,
      12178,
      8,
      4613,
      6060,
      44148,
      25
    ],
    "start_token": 1019,
    "end_token": 1043,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for variables improves code readability and maintainability."
  },
  {
    "line": 116,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\u2705 Best Practice: Use of type annotations for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 1043,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for variables improves code readability and maintainability."
  },
  {
    "line": 118,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u2705 Best Practice: Use of type annotations for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 1059,
    "end_token": 1075,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for variables improves code readability and maintainability."
  },
  {
    "line": 120,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of type annotations for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1075,
    "end_token": 1079,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for variables improves code readability and maintainability."
  },
  {
    "line": 120,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of type annotations for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1079,
    "end_token": 1083,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for variables improves code readability and maintainability."
  },
  {
    "line": 125,
    "text": "    \"\"\"Calculate the R-squared value of linear regression over a rolling window\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of rolling_map function indicates a pattern of applying a function over a rolling window, common in time series analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      371,
      12,
      16485,
      1144,
      1988,
      286,
      14174,
      20683,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 1083,
    "end_token": 1104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10708,
      62,
      8899,
      2163,
      9217,
      257,
      3912,
      286,
      11524,
      257,
      2163,
      625,
      257,
      10708,
      4324,
      11,
      2219,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of rolling_map function indicates a pattern of applying a function over a rolling window, common in time series analysis."
  },
  {
    "line": 129,
    "text": "            return float(stats.linregress(np.arange(len(s)), s).rvalue ** 2)",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for inline operations is a common pattern in data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      12178,
      7,
      34242,
      13,
      2815,
      2301,
      601,
      7,
      37659,
      13,
      283,
      858,
      7,
      11925,
      7,
      82,
      36911,
      264,
      737,
      81,
      8367,
      12429,
      362,
      8
    ],
    "start_token": 1104,
    "end_token": 1140,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      26098,
      4560,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for inline operations is a common pattern in data processing."
  },
  {
    "line": 129,
    "text": "            return float(stats.linregress(np.arange(len(s)), s).rvalue ** 2)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of lambda can sometimes lead to less readable code if overused or complex.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      12178,
      7,
      34242,
      13,
      2815,
      2301,
      601,
      7,
      37659,
      13,
      283,
      858,
      7,
      11925,
      7,
      82,
      36911,
      264,
      737,
      81,
      8367,
      12429,
      362,
      8
    ],
    "start_token": 1140,
    "end_token": 1176,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      37456,
      460,
      3360,
      1085,
      284,
      1342,
      31744,
      2438,
      611,
      625,
      1484,
      393,
      3716,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of lambda can sometimes lead to less readable code if overused or complex."
  },
  {
    "line": 134,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object suggests a pattern of wrapping or abstracting data operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 1176,
    "end_token": 1190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      5644,
      257,
      3912,
      286,
      27074,
      393,
      12531,
      278,
      1366,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object suggests a pattern of wrapping or abstracting data operations."
  },
  {
    "line": 126,
    "text": "    def rsquare(s: pl.Series) -> float:",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      374,
      23415,
      7,
      82,
      25,
      458,
      13,
      27996,
      8,
      4613,
      12178,
      25
    ],
    "start_token": 1190,
    "end_token": 1206,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 129,
    "text": "            return float(stats.linregress(np.arange(len(s)), s).rvalue ** 2)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame join operation, common in data preprocessing for ML tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      12178,
      7,
      34242,
      13,
      2815,
      2301,
      601,
      7,
      37659,
      13,
      283,
      858,
      7,
      11925,
      7,
      82,
      36911,
      264,
      737,
      81,
      8367,
      12429,
      362,
      8
    ],
    "start_token": 1206,
    "end_token": 1242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4654,
      4905,
      11,
      2219,
      287,
      1366,
      662,
      36948,
      329,
      10373,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame join operation, common in data preprocessing for ML tasks."
  },
  {
    "line": 129,
    "text": "            return float(stats.linregress(np.arange(len(s)), s).rvalue ** 2)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of rolling correlation, a common feature engineering technique in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      12178,
      7,
      34242,
      13,
      2815,
      2301,
      601,
      7,
      37659,
      13,
      283,
      858,
      7,
      11925,
      7,
      82,
      36911,
      264,
      737,
      81,
      8367,
      12429,
      362,
      8
    ],
    "start_token": 1242,
    "end_token": 1278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10708,
      16096,
      11,
      257,
      2219,
      3895,
      8705,
      8173,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of rolling correlation, a common feature engineering technique in time series analysis."
  },
  {
    "line": 137,
    "text": "    return DataProxy(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Handling of infinite values, which could lead to incorrect data processing if not managed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 1278,
    "end_token": 1287,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      49500,
      286,
      15541,
      3815,
      11,
      543,
      714,
      1085,
      284,
      11491,
      1366,
      7587,
      611,
      407,
      5257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Handling of infinite values, which could lead to incorrect data processing if not managed."
  },
  {
    "line": 141,
    "text": "    \"\"\"Calculate the residual of linear regression over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object, maintaining encapsulation and abstraction.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      29598,
      286,
      14174,
      20683,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 1287,
    "end_token": 1304,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      11,
      10941,
      32652,
      1741,
      290,
      34651,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object, maintaining encapsulation and abstraction."
  },
  {
    "line": 138,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1304,
    "end_token": 1304,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 141,
    "text": "    \"\"\"Calculate the residual of linear regression over a rolling window\"\"\"",
    "annotation": "\u2705 Best Practice: Use isinstance to check the type of feature2 for better code clarity and error handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      262,
      29598,
      286,
      14174,
      20683,
      625,
      257,
      10708,
      4324,
      37811
    ],
    "start_token": 1304,
    "end_token": 1321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      3895,
      17,
      329,
      1365,
      2438,
      16287,
      290,
      4049,
      9041,
      13
    ],
    "label": "best_practice",
    "reason": "Use isinstance to check the type of feature2 for better code clarity and error handling."
  },
  {
    "line": 143,
    "text": "        \"\"\"Calculate residual for a series\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the join operation does not expose sensitive data by verifying the columns being joined.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      29598,
      329,
      257,
      2168,
      37811
    ],
    "start_token": 1321,
    "end_token": 1337,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      4654,
      4905,
      857,
      407,
      15651,
      8564,
      1366,
      416,
      45505,
      262,
      15180,
      852,
      5399,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the join operation does not expose sensitive data by verifying the columns being joined."
  },
  {
    "line": 144,
    "text": "        x: np.ndarray = np.arange(len(s))",
    "annotation": "\u2705 Best Practice: Use with_columns to add a new column to the DataFrame, which is clear and concise.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      25,
      45941,
      13,
      358,
      18747,
      796,
      45941,
      13,
      283,
      858,
      7,
      11925,
      7,
      82,
      4008
    ],
    "start_token": 1337,
    "end_token": 1360,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      351,
      62,
      28665,
      82,
      284,
      751,
      257,
      649,
      5721,
      284,
      262,
      6060,
      19778,
      11,
      543,
      318,
      1598,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Use with_columns to add a new column to the DataFrame, which is clear and concise."
  },
  {
    "line": 151,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\u2705 Best Practice: Use min_horizontal for clear and efficient computation of the minimum value across specified columns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 1360,
    "end_token": 1376,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      949,
      62,
      17899,
      38342,
      329,
      1598,
      290,
      6942,
      29964,
      286,
      262,
      5288,
      1988,
      1973,
      7368,
      15180,
      13
    ],
    "label": "best_practice",
    "reason": "Use min_horizontal for clear and efficient computation of the minimum value across specified columns."
  },
  {
    "line": 153,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object could indicate a pattern of data transformation or feature engineering.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 1376,
    "end_token": 1392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      714,
      7603,
      257,
      3912,
      286,
      1366,
      13389,
      393,
      3895,
      8705,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object could indicate a pattern of data transformation or feature engineering."
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\u2705 Best Practice: Add type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1392,
    "end_token": 1392,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Add type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 153,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type, indicating dynamic type handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 1392,
    "end_token": 1408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      11,
      12739,
      8925,
      2099,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type, indicating dynamic type handling"
  },
  {
    "line": 155,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for key errors if \"datetime\" or \"vt_symbol\" columns are missing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1408,
    "end_token": 1412,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      1994,
      8563,
      611,
      366,
      19608,
      8079,
      1,
      393,
      366,
      36540,
      62,
      1837,
      23650,
      1,
      15180,
      389,
      4814
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for key errors if \"datetime\" or \"vt_symbol\" columns are missing"
  },
  {
    "line": 156,
    "text": "    return DataProxy(df)",
    "annotation": "\u2705 Best Practice: Use of with_columns to add a new column, improving code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      6060,
      44148,
      7,
      7568,
      8
    ],
    "start_token": 1412,
    "end_token": 1421,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      351,
      62,
      28665,
      82,
      284,
      751,
      257,
      649,
      5721,
      11,
      10068,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of with_columns to add a new column, improving code readability"
  },
  {
    "line": 161,
    "text": "    df_merged: pl.DataFrame = feature1.df.join(feature2.df, on=[\"datetime\", \"vt_symbol\"])",
    "annotation": "\u2705 Best Practice: Use of select to specify columns, enhancing code clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      62,
      647,
      2004,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      16,
      13,
      7568,
      13,
      22179,
      7,
      30053,
      17,
      13,
      7568,
      11,
      319,
      28,
      14692,
      19608,
      8079,
      1600,
      366,
      36540,
      62,
      1837,
      23650,
      8973,
      8
    ],
    "start_token": 1421,
    "end_token": 1459,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2922,
      284,
      11986,
      15180,
      11,
      27496,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of select to specify columns, enhancing code clarity"
  },
  {
    "line": 164,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes \"data\" and \"data_right\" columns exist, potential for runtime errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 1459,
    "end_token": 1473,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      366,
      7890,
      1,
      290,
      366,
      7890,
      62,
      3506,
      1,
      15180,
      2152,
      11,
      2785,
      329,
      19124,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes \"data\" and \"data_right\" columns exist, potential for runtime errors"
  },
  {
    "line": 169,
    "text": "    df = df.with_columns(",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object, indicating a pattern of wrapping dataframes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      4480,
      62,
      28665,
      82,
      7
    ],
    "start_token": 1473,
    "end_token": 1485,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      27074,
      1366,
      37805
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object, indicating a pattern of wrapping dataframes"
  },
  {
    "line": 162,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1485,
    "end_token": 1485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 164,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of natural logarithm transformation on data, common in feature engineering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 1485,
    "end_token": 1499,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3288,
      2604,
      283,
      342,
      76,
      13389,
      319,
      1366,
      11,
      2219,
      287,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Use of natural logarithm transformation on data, common in feature engineering"
  },
  {
    "line": 164,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u2705 Best Practice: Use of method chaining for concise and readable data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 1499,
    "end_token": 1513,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      329,
      35327,
      290,
      31744,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of method chaining for concise and readable data manipulation"
  },
  {
    "line": 169,
    "text": "    df = df.with_columns(",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves code readability and prevents unintended data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      4480,
      62,
      28665,
      82,
      7
    ],
    "start_token": 1513,
    "end_token": 1525,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      2438,
      1100,
      1799,
      290,
      15174,
      30261,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves code readability and prevents unintended data manipulation"
  },
  {
    "line": 171,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the \"data\" column does not contain non-positive values to avoid math domain errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1525,
    "end_token": 1529,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      366,
      7890,
      1,
      5721,
      857,
      407,
      3994,
      1729,
      12,
      24561,
      3815,
      284,
      3368,
      10688,
      7386,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the \"data\" column does not contain non-positive values to avoid math domain errors"
  },
  {
    "line": 172,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataProxy object, indicating a pattern of wrapping dataframes for additional functionality",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1529,
    "end_token": 1529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      27074,
      1366,
      37805,
      329,
      3224,
      11244
    ],
    "label": "ml_signal",
    "reason": "Returning a DataProxy object, indicating a pattern of wrapping dataframes for additional functionality"
  },
  {
    "line": 170,
    "text": "        pl.when(pl.col(\"data\").is_infinite()).then(None).otherwise(pl.col(\"data\")).alias(\"data\")",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      12518,
      7,
      489,
      13,
      4033,
      7203,
      7890,
      11074,
      271,
      62,
      10745,
      9504,
      3419,
      737,
      8524,
      7,
      14202,
      737,
      847,
      3083,
      7,
      489,
      13,
      4033,
      7203,
      7890,
      4943,
      737,
      26011,
      7203,
      7890,
      4943
    ],
    "start_token": 1529,
    "end_token": 1570,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 172,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1570,
    "end_token": 1570,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 177,
    "text": "    \"\"\"Return the minimum value between two features\"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly specify columns to select for clarity and to avoid unintended data exposure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      13615,
      262,
      5288,
      1988,
      1022,
      734,
      3033,
      37811
    ],
    "start_token": 1570,
    "end_token": 1582,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      15180,
      284,
      2922,
      329,
      16287,
      290,
      284,
      3368,
      30261,
      1366,
      7111
    ],
    "label": "best_practice",
    "reason": "Explicitly specify columns to select for clarity and to avoid unintended data exposure"
  },
  {
    "line": 177,
    "text": "    \"\"\"Return the minimum value between two features\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the \"data\" column exists and contains numeric values to avoid runtime errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      13615,
      262,
      5288,
      1988,
      1022,
      734,
      3033,
      37811
    ],
    "start_token": 1582,
    "end_token": 1594,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      366,
      7890,
      1,
      5721,
      7160,
      290,
      4909,
      35575,
      3815,
      284,
      3368,
      19124,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the \"data\" column exists and contains numeric values to avoid runtime errors"
  },
  {
    "line": 177,
    "text": "    \"\"\"Return the minimum value between two features\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Returns a DataProxy object, indicating a pattern of data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      13615,
      262,
      5288,
      1988,
      1022,
      734,
      3033,
      37811
    ],
    "start_token": 1594,
    "end_token": 1606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      6060,
      44148,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Returns a DataProxy object, indicating a pattern of data transformation"
  }
]
[
  {
    "line": 2,
    "text": "from enum import Enum",
    "annotation": "\u2705 Best Practice: Grouping standard library imports together improves readability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      33829,
      1330,
      2039,
      388
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3210,
      5888,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping standard library imports together improves readability."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping standard library imports together improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3210,
      5888,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping standard library imports together improves readability."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping standard library imports together improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3210,
      5888,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping standard library imports together improves readability."
  },
  {
    "line": 8,
    "text": "class DataProxy:",
    "annotation": "\u2705 Best Practice: Grouping third-party library imports together improves readability.",
    "confidence": 1.0,
    "tokens": [
      4871,
      6060,
      44148,
      25
    ],
    "start_token": 5,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      2368,
      12,
      10608,
      5888,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping third-party library imports together improves readability."
  },
  {
    "line": 9,
    "text": "    \"\"\"Feature data proxy\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Polars DataFrame as a parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      38816,
      1366,
      15741,
      37811
    ],
    "start_token": 9,
    "end_token": 17,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2165,
      945,
      6060,
      19778,
      355,
      257,
      11507
    ],
    "label": "ml_signal",
    "reason": "Usage of Polars DataFrame as a parameter"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for constructor parameters and return type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 17,
    "end_token": 17,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      23772,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type hinting for constructor parameters and return type"
  },
  {
    "line": 12,
    "text": "        \"\"\"Constructor\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the last column of a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      42316,
      273,
      37811
    ],
    "start_token": 17,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      938,
      5721,
      286,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing the last column of a DataFrame"
  },
  {
    "line": 13,
    "text": "        self.name: str = df.columns[-1]",
    "annotation": "\u2705 Best Practice: Type hinting for instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3672,
      25,
      965,
      796,
      47764,
      13,
      28665,
      82,
      58,
      12,
      16,
      60
    ],
    "start_token": 28,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Type hinting for instance variables"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Renaming a DataFrame column",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 49,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7152,
      3723,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Renaming a DataFrame column"
  },
  {
    "line": 11,
    "text": "    def __init__(self, df: pl.DataFrame) -> None:",
    "annotation": "\u2705 Best Practice: Type hinting for the method return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 49,
    "end_token": 69,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      2446,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the method return type improves code readability and maintainability"
  },
  {
    "line": 14,
    "text": "        self.df: pl.DataFrame = df.rename({self.name: \"data\"})",
    "annotation": "\u2705 Best Practice: Type hinting for the variable improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7568,
      25,
      458,
      13,
      6601,
      19778,
      796,
      47764,
      13,
      918,
      480,
      15090,
      944,
      13,
      3672,
      25,
      366,
      7890,
      20662,
      8
    ],
    "start_token": 69,
    "end_token": 98,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the variable improves code readability and maintainability"
  },
  {
    "line": 16,
    "text": "        # Note that for numerical expressions, variables should be placed before numbers. e.g. a * 2",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining with 'with_columns' indicates a pattern of data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5740,
      326,
      329,
      29052,
      14700,
      11,
      9633,
      815,
      307,
      4624,
      878,
      3146,
      13,
      304,
      13,
      70,
      13,
      257,
      1635,
      362
    ],
    "start_token": 98,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      351,
      705,
      4480,
      62,
      28665,
      82,
      6,
      9217,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining with 'with_columns' indicates a pattern of data transformation"
  },
  {
    "line": 18,
    "text": "    def result(self, s: pl.Series) -> \"DataProxy\":",
    "annotation": "\ud83e\udde0 ML Signal: Returning a custom object 'DataProxy' could indicate a pattern of wrapping or encapsulating data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1255,
      7,
      944,
      11,
      264,
      25,
      458,
      13,
      27996,
      8,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 126,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      2183,
      2134,
      705,
      6601,
      44148,
      6,
      714,
      7603,
      257,
      3912,
      286,
      27074,
      393,
      32652,
      8306,
      1366
    ],
    "label": "ml_signal",
    "reason": "Returning a custom object 'DataProxy' could indicate a pattern of wrapping or encapsulating data"
  },
  {
    "line": 16,
    "text": "        # Note that for numerical expressions, variables should be placed before numbers. e.g. a * 2",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5740,
      326,
      329,
      29052,
      14700,
      11,
      9633,
      815,
      307,
      4624,
      878,
      3146,
      13,
      304,
      13,
      70,
      13,
      257,
      1635,
      362
    ],
    "start_token": 145,
    "end_token": 173,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 19,
    "text": "        \"\"\"Convert series data to feature object\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type can indicate dynamic type handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      3103,
      1851,
      2168,
      1366,
      284,
      3895,
      2134,
      37811
    ],
    "start_token": 173,
    "end_token": 189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      460,
      7603,
      8925,
      2099,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type can indicate dynamic type handling"
  },
  {
    "line": 21,
    "text": "        result = result.with_columns(other=s)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Polars library (pl.Series) for data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      796,
      1255,
      13,
      4480,
      62,
      28665,
      82,
      7,
      847,
      28,
      82,
      8
    ],
    "start_token": 189,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2165,
      945,
      5888,
      357,
      489,
      13,
      27996,
      8,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of Polars library (pl.Series) for data manipulation"
  },
  {
    "line": 25,
    "text": "    def __add__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to process and return results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2860,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 209,
    "end_token": 235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      1429,
      290,
      1441,
      2482
    ],
    "label": "ml_signal",
    "reason": "Use of a method to process and return results"
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 235,
    "end_token": 235,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 26,
    "text": "        \"\"\"Addition operation\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type of 'other'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      4550,
      653,
      4905,
      37811
    ],
    "start_token": 235,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      286,
      705,
      847,
      6
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type of 'other'"
  },
  {
    "line": 28,
    "text": "            s: pl.Series = self.df[\"data\"] + other.df[\"data\"]",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a DataFrame column for arithmetic operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      25,
      458,
      13,
      27996,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1343,
      584,
      13,
      7568,
      14692,
      7890,
      8973
    ],
    "start_token": 247,
    "end_token": 277,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      6060,
      19778,
      5721,
      329,
      34768,
      4560
    ],
    "label": "ml_signal",
    "reason": "Accessing a DataFrame column for arithmetic operations"
  },
  {
    "line": 31,
    "text": "        return self.result(s)",
    "annotation": "\ud83e\udde0 ML Signal: Handling different data types for arithmetic operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      20274,
      7,
      82,
      8
    ],
    "start_token": 277,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1180,
      1366,
      3858,
      329,
      34768,
      4560
    ],
    "label": "ml_signal",
    "reason": "Handling different data types for arithmetic operations"
  },
  {
    "line": 33,
    "text": "    def __sub__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to process and return the result",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      7266,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 291,
    "end_token": 317,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      1429,
      290,
      1441,
      262,
      1255
    ],
    "label": "ml_signal",
    "reason": "Use of a method to process and return the result"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type, common pattern in dynamic typing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 317,
    "end_token": 317,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      11,
      2219,
      3912,
      287,
      8925,
      19720
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type, common pattern in dynamic typing"
  },
  {
    "line": 33,
    "text": "    def __sub__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for AttributeError if 'df' or 'data' attributes do not exist",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      7266,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 317,
    "end_token": 343,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3460,
      4163,
      12331,
      611,
      705,
      7568,
      6,
      393,
      705,
      7890,
      6,
      12608,
      466,
      407,
      2152
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for AttributeError if 'df' or 'data' attributes do not exist"
  },
  {
    "line": 37,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for AttributeError if 'df' or 'data' attributes do not exist",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 343,
    "end_token": 352,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3460,
      4163,
      12331,
      611,
      705,
      7568,
      6,
      393,
      705,
      7890,
      6,
      12608,
      466,
      407,
      2152
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for AttributeError if 'df' or 'data' attributes do not exist"
  },
  {
    "line": 39,
    "text": "        return self.result(s)",
    "annotation": "\u2705 Best Practice: Returning the result of an operation, maintains method chaining",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      20274,
      7,
      82,
      8
    ],
    "start_token": 352,
    "end_token": 366,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      262,
      1255,
      286,
      281,
      4905,
      11,
      16047,
      2446,
      442,
      1397
    ],
    "label": "best_practice",
    "reason": "Returning the result of an operation, maintains method chaining"
  },
  {
    "line": 39,
    "text": "        return self.result(s)",
    "annotation": "\u2705 Best Practice: Check for type of 'other' to ensure correct operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      20274,
      7,
      82,
      8
    ],
    "start_token": 366,
    "end_token": 380,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      2099,
      286,
      705,
      847,
      6,
      284,
      4155,
      3376,
      4905
    ],
    "label": "best_practice",
    "reason": "Check for type of 'other' to ensure correct operation"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of multiplication operation with custom class",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 380,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      48473,
      4905,
      351,
      2183,
      1398
    ],
    "label": "ml_signal",
    "reason": "Usage of multiplication operation with custom class"
  },
  {
    "line": 44,
    "text": "            s: pl.Series = self.df[\"data\"] * other.df[\"data\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of multiplication operation with primitive types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      25,
      458,
      13,
      27996,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1635,
      584,
      13,
      7568,
      14692,
      7890,
      8973
    ],
    "start_token": 380,
    "end_token": 410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      48473,
      4905,
      351,
      20049,
      3858
    ],
    "label": "ml_signal",
    "reason": "Usage of multiplication operation with primitive types"
  },
  {
    "line": 46,
    "text": "            s = self.df[\"data\"] * other",
    "annotation": "\u2705 Best Practice: Encapsulate result in a method for consistency and potential future changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1635,
      584
    ],
    "start_token": 410,
    "end_token": 431,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      5039,
      1255,
      287,
      257,
      2446,
      329,
      15794,
      290,
      2785,
      2003,
      2458
    ],
    "label": "best_practice",
    "reason": "Encapsulate result in a method for consistency and potential future changes"
  },
  {
    "line": 46,
    "text": "            s = self.df[\"data\"] * other",
    "annotation": "\u2705 Best Practice: Check if 'other' is an instance of 'DataProxy' to handle different division logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1635,
      584
    ],
    "start_token": 431,
    "end_token": 452,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      847,
      6,
      318,
      281,
      4554,
      286,
      705,
      6601,
      44148,
      6,
      284,
      5412,
      1180,
      7297,
      9156,
      13
    ],
    "label": "best_practice",
    "reason": "Check if 'other' is an instance of 'DataProxy' to handle different division logic."
  },
  {
    "line": 47,
    "text": "        return self.result(s)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of division operation between two 'DataProxy' objects.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      20274,
      7,
      82,
      8
    ],
    "start_token": 452,
    "end_token": 466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7297,
      4905,
      1022,
      734,
      705,
      6601,
      44148,
      6,
      5563,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of division operation between two 'DataProxy' objects."
  },
  {
    "line": 51,
    "text": "        if isinstance(other, DataProxy):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of division operation with a scalar value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      847,
      11,
      6060,
      44148,
      2599
    ],
    "start_token": 466,
    "end_token": 482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7297,
      4905,
      351,
      257,
      16578,
      283,
      1988,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of division operation with a scalar value."
  },
  {
    "line": 53,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Encapsulate the result in a 'DataProxy' object for consistent return type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 482,
    "end_token": 491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      5039,
      262,
      1255,
      287,
      257,
      705,
      6601,
      44148,
      6,
      2134,
      329,
      6414,
      1441,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Encapsulate the result in a 'DataProxy' object for consistent return type."
  },
  {
    "line": 51,
    "text": "        if isinstance(other, DataProxy):",
    "annotation": "\u2705 Best Practice: Type hinting for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      847,
      11,
      6060,
      44148,
      2599
    ],
    "start_token": 491,
    "end_token": 507,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 54,
    "text": "            s = self.df[\"data\"] * other",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific column from a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1635,
      584
    ],
    "start_token": 507,
    "end_token": 528,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      5721,
      422,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific column from a DataFrame"
  },
  {
    "line": 56,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a processed result from a method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 528,
    "end_token": 528,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      13686,
      1255,
      422,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Returning a processed result from a method"
  },
  {
    "line": 57,
    "text": "    def __truediv__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\u2705 Best Practice: Check if 'other' is an instance of 'DataProxy' to handle different types appropriately",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      83,
      21556,
      452,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 528,
    "end_token": 556,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      847,
      6,
      318,
      281,
      4554,
      286,
      705,
      6601,
      44148,
      6,
      284,
      5412,
      1180,
      3858,
      20431
    ],
    "label": "best_practice",
    "reason": "Check if 'other' is an instance of 'DataProxy' to handle different types appropriately"
  },
  {
    "line": 58,
    "text": "        \"\"\"Division operation\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Polars library for data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      24095,
      1166,
      4905,
      37811
    ],
    "start_token": 556,
    "end_token": 568,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2165,
      945,
      5888,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Usage of Polars library for data manipulation"
  },
  {
    "line": 62,
    "text": "            s = self.df[\"data\"] / other",
    "annotation": "\ud83e\udde0 ML Signal: Handling comparison with primitive data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1220,
      584
    ],
    "start_token": 568,
    "end_token": 589,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      7208,
      351,
      20049,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Handling comparison with primitive data types"
  },
  {
    "line": 64,
    "text": "",
    "annotation": "\u2705 Best Practice: Return a consistent type ('DataProxy') for method chaining",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 589,
    "end_token": 589,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      6414,
      2099,
      19203,
      6601,
      44148,
      11537,
      329,
      2446,
      442,
      1397
    ],
    "label": "best_practice",
    "reason": "Return a consistent type ('DataProxy') for method chaining"
  },
  {
    "line": 62,
    "text": "            s = self.df[\"data\"] / other",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1220,
      584
    ],
    "start_token": 589,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 65,
    "text": "    def __abs__(self) -> \"DataProxy\":",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      8937,
      834,
      7,
      944,
      8,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 610,
    "end_token": 625,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type"
  },
  {
    "line": 67,
    "text": "        s: pl.Series = self.df[\"data\"].abs()",
    "annotation": "\ud83e\udde0 ML Signal: Use of Polars library for data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      25,
      458,
      13,
      27996,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      1,
      4083,
      8937,
      3419
    ],
    "start_token": 625,
    "end_token": 647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2165,
      945,
      5888,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of Polars library for data manipulation"
  },
  {
    "line": 70,
    "text": "    def __gt__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\ud83e\udde0 ML Signal: Handling different data types in comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      13655,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 647,
    "end_token": 673,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1180,
      1366,
      3858,
      287,
      7208
    ],
    "label": "ml_signal",
    "reason": "Handling different data types in comparison"
  },
  {
    "line": 72,
    "text": "        if isinstance(other, DataProxy):",
    "annotation": "\u2705 Best Practice: Returning a result from a method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      847,
      11,
      6060,
      44148,
      2599
    ],
    "start_token": 673,
    "end_token": 689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1255,
      422,
      257,
      2446
    ],
    "label": "best_practice",
    "reason": "Returning a result from a method"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 689,
    "end_token": 689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 72,
    "text": "        if isinstance(other, DataProxy):",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      847,
      11,
      6060,
      44148,
      2599
    ],
    "start_token": 689,
    "end_token": 705,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type"
  },
  {
    "line": 74,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas-like operations for data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 705,
    "end_token": 714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      12,
      2339,
      4560,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of pandas-like operations for data manipulation"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling different data types in operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 714,
    "end_token": 714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1180,
      1366,
      3858,
      287,
      4560
    ],
    "label": "ml_signal",
    "reason": "Handling different data types in operations"
  },
  {
    "line": 79,
    "text": "        \"\"\"Greater than or equal comparison\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Returning a result from a method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      13681,
      263,
      621,
      393,
      4961,
      7208,
      37811
    ],
    "start_token": 714,
    "end_token": 729,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1255,
      422,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Returning a result from a method"
  },
  {
    "line": 78,
    "text": "    def __ge__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\u2705 Best Practice: Check if 'other' is an instance of 'DataProxy' to handle different types appropriately.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      469,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 729,
    "end_token": 755,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      847,
      6,
      318,
      281,
      4554,
      286,
      705,
      6601,
      44148,
      6,
      284,
      5412,
      1180,
      3858,
      20431,
      13
    ],
    "label": "best_practice",
    "reason": "Check if 'other' is an instance of 'DataProxy' to handle different types appropriately."
  },
  {
    "line": 79,
    "text": "        \"\"\"Greater than or equal comparison\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas-like operations for data comparison.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      13681,
      263,
      621,
      393,
      4961,
      7208,
      37811
    ],
    "start_token": 755,
    "end_token": 770,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      12,
      2339,
      4560,
      329,
      1366,
      7208,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas-like operations for data comparison."
  },
  {
    "line": 83,
    "text": "            s = self.df[\"data\"] >= other",
    "annotation": "\ud83e\udde0 ML Signal: Handling scalar comparison with data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      18189,
      584
    ],
    "start_token": 770,
    "end_token": 791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      16578,
      283,
      7208,
      351,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Handling scalar comparison with data."
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\u2705 Best Practice: Return the result of the comparison wrapped in a 'DataProxy' object.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 791,
    "end_token": 791,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      262,
      1255,
      286,
      262,
      7208,
      12908,
      287,
      257,
      705,
      6601,
      44148,
      6,
      2134,
      13
    ],
    "label": "best_practice",
    "reason": "Return the result of the comparison wrapped in a 'DataProxy' object."
  },
  {
    "line": 83,
    "text": "            s = self.df[\"data\"] >= other",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      18189,
      584
    ],
    "start_token": 791,
    "end_token": 812,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 86,
    "text": "    def __lt__(self, other: Union[\"DataProxy\", int, float]) -> \"DataProxy\":",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2528,
      834,
      7,
      944,
      11,
      584,
      25,
      4479,
      14692,
      6601,
      44148,
      1600,
      493,
      11,
      12178,
      12962,
      4613,
      366,
      6601,
      44148,
      1298
    ],
    "start_token": 812,
    "end_token": 838,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check type"
  },
  {
    "line": 88,
    "text": "        if isinstance(other, DataProxy):",
    "annotation": "\ud83e\udde0 ML Signal: Accessing attributes of an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      847,
      11,
      6060,
      44148,
      2599
    ],
    "start_token": 838,
    "end_token": 854,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      12608,
      286,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Accessing attributes of an object"
  },
  {
    "line": 91,
    "text": "            s = self.df[\"data\"] < other",
    "annotation": "\ud83e\udde0 ML Signal: Handling different data types in comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      796,
      2116,
      13,
      7568,
      14692,
      7890,
      8973,
      1279,
      584
    ],
    "start_token": 854,
    "end_token": 875,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1180,
      1366,
      3858,
      287,
      7208
    ],
    "label": "ml_signal",
    "reason": "Handling different data types in comparison"
  },
  {
    "line": 92,
    "text": "        return self.result(s)",
    "annotation": "\ud83e\udde0 ML Signal: Returning the result of a comparison operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      20274,
      7,
      82,
      8
    ],
    "start_token": 875,
    "end_token": 889,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      262,
      1255,
      286,
      257,
      7208,
      4905
    ],
    "label": "ml_signal",
    "reason": "Returning the result of a comparison operation"
  },
  {
    "line": 92,
    "text": "        return self.result(s)",
    "annotation": "\u2705 Best Practice: Importing specific functions instead of entire modules for clarity and to avoid namespace pollution.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      20274,
      7,
      82,
      8
    ],
    "start_token": 889,
    "end_token": 903,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      2427,
      286,
      2104,
      13103,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions instead of entire modules for clarity and to avoid namespace pollution."
  },
  {
    "line": 114,
    "text": "    from .ts_function import (              # noqa",
    "annotation": "\u2705 Best Practice: Using type hints for better code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      422,
      764,
      912,
      62,
      8818,
      1330,
      357,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      645,
      20402
    ],
    "start_token": 903,
    "end_token": 929,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using type hints for better code readability and maintainability."
  },
  {
    "line": 119,
    "text": "        ts_mean, ts_std,",
    "annotation": "\u2705 Best Practice: Using descriptive variable names for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      32604,
      11,
      40379,
      62,
      19282,
      11
    ],
    "start_token": 929,
    "end_token": 944,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names for better readability."
  },
  {
    "line": 121,
    "text": "        ts_rsquare, ts_resi,",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic creation of variables based on DataFrame columns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      3808,
      421,
      533,
      11,
      40379,
      62,
      411,
      72,
      11
    ],
    "start_token": 944,
    "end_token": 962,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      6282,
      286,
      9633,
      1912,
      319,
      6060,
      19778,
      15180,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic creation of variables based on DataFrame columns."
  },
  {
    "line": 123,
    "text": "        ts_less, ts_greater,",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of eval() can lead to code injection vulnerabilities if the input is not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      1203,
      11,
      40379,
      62,
      18223,
      263,
      11
    ],
    "start_token": 962,
    "end_token": 978,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      5418,
      3419,
      460,
      1085,
      284,
      2438,
      16954,
      23805,
      611,
      262,
      5128,
      318,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of eval() can lead to code injection vulnerabilities if the input is not properly sanitized."
  },
  {
    "line": 123,
    "text": "        ts_less, ts_greater,",
    "annotation": "\u2705 Best Practice: Returning the DataFrame directly for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      1203,
      11,
      40379,
      62,
      18223,
      263,
      11
    ],
    "start_token": 978,
    "end_token": 994,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      262,
      6060,
      19778,
      3264,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Returning the DataFrame directly for clarity."
  },
  {
    "line": 121,
    "text": "        ts_rsquare, ts_resi,",
    "annotation": "\u2705 Best Practice: Add type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      3808,
      421,
      533,
      11,
      40379,
      62,
      411,
      72,
      11
    ],
    "start_token": 994,
    "end_token": 1012,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Add type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 123,
    "text": "        ts_less, ts_greater,",
    "annotation": "\ud83e\udde0 ML Signal: Use of Polars library for data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      1203,
      11,
      40379,
      62,
      18223,
      263,
      11
    ],
    "start_token": 1012,
    "end_token": 1028,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2165,
      945,
      5888,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of Polars library for data manipulation"
  },
  {
    "line": 123,
    "text": "        ts_less, ts_greater,",
    "annotation": "\u2705 Best Practice: Use of select method for efficient column selection in Polars",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40379,
      62,
      1203,
      11,
      40379,
      62,
      18223,
      263,
      11
    ],
    "start_token": 1028,
    "end_token": 1044,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2922,
      2446,
      329,
      6942,
      5721,
      6356,
      287,
      2165,
      945
    ],
    "label": "best_practice",
    "reason": "Use of select method for efficient column selection in Polars"
  },
  {
    "line": 129,
    "text": "        cs_std",
    "annotation": "\u2705 Best Practice: Use of alias to rename the result of an expression for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      50115,
      62,
      19282
    ],
    "start_token": 1044,
    "end_token": 1054,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      16144,
      284,
      36265,
      262,
      1255,
      286,
      281,
      5408,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of alias to rename the result of an expression for clarity"
  },
  {
    "line": 128,
    "text": "        cs_mean,",
    "annotation": "\u2705 Best Practice: Include type hinting for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      50115,
      62,
      32604,
      11
    ],
    "start_token": 1054,
    "end_token": 1065,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hinting for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 131,
    "text": "    from .ta_function import (              # noqa",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of a variable to determine processing logic.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      422,
      764,
      8326,
      62,
      8818,
      1330,
      357,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      645,
      20402
    ],
    "start_token": 1065,
    "end_token": 1091,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      257,
      7885,
      284,
      5004,
      7587,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of a variable to determine processing logic."
  },
  {
    "line": 132,
    "text": "        ta_rsi,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on string content.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20486,
      62,
      3808,
      72,
      11
    ],
    "start_token": 1091,
    "end_token": 1103,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4731,
      2695,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on string content."
  },
  {
    "line": 138,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if the input string is not a valid date format.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1103,
    "end_token": 1103,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      262,
      5128,
      4731,
      318,
      407,
      257,
      4938,
      3128,
      5794,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if the input string is not a valid date format."
  },
  {
    "line": 138,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Enum for segment values improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1103,
    "end_token": 1103,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      10618,
      3815,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of Enum for segment values improves code readability and maintainability"
  },
  {
    "line": 141,
    "text": "        if column in {\"datetime\", \"vt_symbol\"}:",
    "annotation": "\u2705 Best Practice: Enum members are named in uppercase to follow Python naming conventions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5721,
      287,
      19779,
      19608,
      8079,
      1600,
      366,
      36540,
      62,
      1837,
      23650,
      20662,
      25
    ],
    "start_token": 1103,
    "end_token": 1124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2039,
      388,
      1866,
      389,
      3706,
      287,
      334,
      39921,
      589,
      284,
      1061,
      11361,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Enum members are named in uppercase to follow Python naming conventions"
  }
]
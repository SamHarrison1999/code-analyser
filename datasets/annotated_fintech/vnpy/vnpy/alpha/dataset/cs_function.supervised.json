[
  {
    "line": 1,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Module-level docstring provides a brief description of the module's purpose",
    "confidence": 0.5,
    "tokens": [
      37811
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      19937,
      12,
      5715,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      8265,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Module-level docstring provides a brief description of the module's purpose"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Importing necessary libraries at the beginning of the file",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      3306,
      12782,
      379,
      262,
      3726,
      286,
      262,
      2393
    ],
    "label": "best_practice",
    "reason": "Importing necessary libraries at the beginning of the file"
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\u2705 Best Practice: Relative import for internal module, indicating modular project structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45344,
      1330,
      329,
      5387,
      8265,
      11,
      12739,
      26507,
      1628,
      4645
    ],
    "label": "best_practice",
    "reason": "Relative import for internal module, indicating modular project structure"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame operations for feature engineering",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1,
    "end_token": 1,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      4560,
      329,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame operations for feature engineering"
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of method chaining for concise and readable DataFrame operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      329,
      35327,
      290,
      31744,
      6060,
      19778,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of method chaining for concise and readable DataFrame operations"
  },
  {
    "line": 13,
    "text": "        pl.col(\"datetime\"),",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves readability and prevents unintended data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      19608,
      8079,
      12340
    ],
    "start_token": 1,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      1100,
      1799,
      290,
      15174,
      30261,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves readability and prevents unintended data manipulation"
  },
  {
    "line": 15,
    "text": "        pl.col(\"data\").rank().over(\"datetime\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of ranking function, indicating feature transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      7890,
      11074,
      43027,
      22446,
      2502,
      7203,
      19608,
      8079,
      4943
    ],
    "start_token": 15,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12759,
      2163,
      11,
      12739,
      3895,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of ranking function, indicating feature transformation"
  },
  {
    "line": 16,
    "text": "    )",
    "annotation": "\u2705 Best Practice: Use of window functions for operations over partitions of data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 35,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4324,
      5499,
      329,
      4560,
      625,
      43869,
      286,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of window functions for operations over partitions of data"
  },
  {
    "line": 21,
    "text": "    \"\"\"Calculate cross-sectional mean\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Wrapping DataFrame in a custom class, indicating a design pattern for data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      3272,
      12,
      44330,
      1612,
      37811
    ],
    "start_token": 39,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27323,
      2105,
      6060,
      19778,
      287,
      257,
      2183,
      1398,
      11,
      12739,
      257,
      1486,
      3912,
      329,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Wrapping DataFrame in a custom class, indicating a design pattern for data handling"
  },
  {
    "line": 14,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 51,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 16,
    "text": "    )",
    "annotation": "\ud83e\udde0 ML Signal: Use of Polars library for data manipulation, indicating preference for performance over Pandas",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 67,
    "end_token": 71,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2165,
      945,
      5888,
      329,
      1366,
      17512,
      11,
      12739,
      12741,
      329,
      2854,
      625,
      16492,
      292
    ],
    "label": "ml_signal",
    "reason": "Use of Polars library for data manipulation, indicating preference for performance over Pandas"
  },
  {
    "line": 21,
    "text": "    \"\"\"Calculate cross-sectional mean\"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly selecting columns improves readability and ensures only necessary data is processed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      9771,
      3129,
      378,
      3272,
      12,
      44330,
      1612,
      37811
    ],
    "start_token": 71,
    "end_token": 83,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      17246,
      15180,
      19575,
      1100,
      1799,
      290,
      19047,
      691,
      3306,
      1366,
      318,
      13686
    ],
    "label": "best_practice",
    "reason": "Explicitly selecting columns improves readability and ensures only necessary data is processed"
  },
  {
    "line": 22,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\ud83e\udde0 ML Signal: Use of window functions like 'over' to calculate mean, indicating familiarity with advanced data processing techniques",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 83,
    "end_token": 99,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4324,
      5499,
      588,
      705,
      2502,
      6,
      284,
      15284,
      1612,
      11,
      12739,
      33065,
      351,
      6190,
      1366,
      7587,
      7605
    ],
    "label": "ml_signal",
    "reason": "Use of window functions like 'over' to calculate mean, indicating familiarity with advanced data processing techniques"
  },
  {
    "line": 24,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u2705 Best Practice: Returning a DataProxy object maintains consistency with input type, aiding in code maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 99,
    "end_token": 115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      44148,
      2134,
      16047,
      15794,
      351,
      5128,
      2099,
      11,
      37221,
      287,
      2438,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Returning a DataProxy object maintains consistency with input type, aiding in code maintainability"
  },
  {
    "line": 22,
    "text": "    df: pl.DataFrame = feature.df.select(",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      25,
      458,
      13,
      6601,
      19778,
      796,
      3895,
      13,
      7568,
      13,
      19738,
      7
    ],
    "start_token": 115,
    "end_token": 131,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability"
  },
  {
    "line": 24,
    "text": "        pl.col(\"vt_symbol\"),",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      4033,
      7203,
      36540,
      62,
      1837,
      23650,
      12340
    ],
    "start_token": 131,
    "end_token": 147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly specify columns for selection to avoid unintended data manipulation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 147,
    "end_token": 147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      15180,
      329,
      6356,
      284,
      3368,
      30261,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Explicitly specify columns for selection to avoid unintended data manipulation"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of standard deviation calculation, common in data preprocessing for ML models",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 147,
    "end_token": 147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3210,
      28833,
      17952,
      11,
      2219,
      287,
      1366,
      662,
      36948,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Use of standard deviation calculation, common in data preprocessing for ML models"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the DataProxy class handles data securely to prevent data leaks",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 147,
    "end_token": 147,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      6060,
      44148,
      1398,
      17105,
      1366,
      30835,
      284,
      2948,
      1366,
      17316
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the DataProxy class handles data securely to prevent data leaks"
  }
]
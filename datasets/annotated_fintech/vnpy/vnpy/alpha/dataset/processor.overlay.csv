annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use relative imports for internal modules to maintain package structure,"[26486, 227, 6705, 19939, 25, 5765, 3585, 17944, 329, 5387, 13103, 284, 5529, 5301, 4645]",1.0,5,best_practice,4,Use relative imports for internal modules to maintain package structure,,0,import polars as pl,"[11748, 755, 945, 355, 458]"
‚úÖ Best Practice: Use of default parameter value to handle optional argument,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 284, 5412, 11902, 4578]",1.0,5,best_practice,7,Use of default parameter value to handle optional argument,,5,,[]
‚úÖ Best Practice: Dynamic selection of columns based on DataFrame structure,"[26486, 227, 6705, 19939, 25, 26977, 6356, 286, 15180, 1912, 319, 6060, 19778, 4645]",1.0,36,best_practice,9,Dynamic selection of columns based on DataFrame structure,,5,"def process_drop_na(df: pl.DataFrame, names: list[str] | None = None) -> pl.DataFrame:","[4299, 1429, 62, 14781, 62, 2616, 7, 7568, 25, 458, 13, 6601, 19778, 11, 3891, 25, 1351, 58, 2536, 60, 930, 6045, 796, 6045, 8, 4613, 458, 13, 6601, 19778, 25]"
üß† ML Signal: Iterating over column names to apply transformations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5721, 3891, 284, 4174, 38226]",1.0,36,ml_signal,13,Iterating over column names to apply transformations,,36,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if column names are not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5721, 3891, 389, 407, 31031, 393, 5336, 36951]",0.5,36,sast_risk,13,Potential risk if column names are not validated or sanitized,Low,36,,[]
üß† ML Signal: Use of fill_nan to handle missing values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6070, 62, 12647, 284, 5412, 4814, 3815]",0.5,52,ml_signal,15,Use of fill_nan to handle missing values,,36,        df = df.with_columns(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 4480, 62, 28665, 82, 7]"
üß† ML Signal: Use of drop_nulls to remove rows with missing values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4268, 62, 8423, 82, 284, 4781, 15274, 351, 4814, 3815]",0.5,69,ml_signal,18,Use of drop_nulls to remove rows with missing values,,52,    df = df.drop_nulls(subset=names),"[220, 220, 220, 47764, 796, 47764, 13, 14781, 62, 8423, 82, 7, 7266, 2617, 28, 14933, 8]"
‚úÖ Best Practice: Include type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,85,best_practice,15,Include type hints for function parameters and return type for better readability and maintainability,,69,        df = df.with_columns(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 4480, 62, 28665, 82, 7]"
"üß† ML Signal: Conditional logic based on a boolean flag, indicating different processing paths","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 6056, 11, 12739, 1180, 7587, 13532]",0.5,102,ml_signal,18,"Conditional logic based on a boolean flag, indicating different processing paths",,85,    df = df.drop_nulls(subset=names),"[220, 220, 220, 47764, 796, 47764, 13, 14781, 62, 8423, 82, 7, 7266, 2617, 28, 14933, 8]"
‚úÖ Best Practice: Use method chaining for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 2446, 442, 1397, 329, 35327, 290, 31744, 2438]",0.5,107,best_practice,19,Use method chaining for concise and readable code,,102,    return df,"[220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: List comprehension for concise and efficient column processing,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 35327, 290, 6942, 5721, 7587]",1.0,115,best_practice,24,List comprehension for concise and efficient column processing,,107,    if fill_label:,"[220, 220, 220, 611, 6070, 62, 18242, 25]"
"üß† ML Signal: Iterating over DataFrame columns, indicating column-wise operations","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15180, 11, 12739, 5721, 12, 3083, 4560]",0.5,134,ml_signal,25,"Iterating over DataFrame columns, indicating column-wise operations",,115,        df = df.fill_null(fill_value),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 20797, 62, 8423, 7, 20797, 62, 8367, 8]"
‚úÖ Best Practice: Explicit return of the DataFrame for clarity,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 6060, 19778, 329, 16287]",0.5,142,best_practice,30,Explicit return of the DataFrame for clarity,,134,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,161,best_practice,25,Type hinting for function parameters and return type improves code readability and maintainability.,,142,        df = df.fill_null(fill_value),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 20797, 62, 8423, 7, 20797, 62, 8367, 8]"
‚úÖ Best Practice: Using type hinting for local variables enhances code readability.,"[26486, 227, 6705, 19939, 25, 8554, 2099, 9254, 278, 329, 1957, 9633, 32479, 2438, 1100, 1799, 13]",1.0,161,best_practice,32,Using type hinting for local variables enhances code readability.,,161,,[]
üß† ML Signal: The use of different normalization methods based on a parameter can indicate a pattern for ML model training.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 1180, 3487, 1634, 5050, 1912, 319, 257, 11507, 460, 7603, 257, 3912, 329, 10373, 2746, 3047, 13]",1.0,168,ml_signal,34,The use of different normalization methods based on a parameter can indicate a pattern for ML model training.,,161,def process_cs_norm(,"[4299, 1429, 62, 6359, 62, 27237, 7]"
üß† ML Signal: Iterating over column names to apply transformations is a common pattern in data preprocessing.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5721, 3891, 284, 4174, 38226, 318, 257, 2219, 3912, 287, 1366, 662, 36948, 13]",1.0,178,ml_signal,39,Iterating over column names to apply transformations is a common pattern in data preprocessing.,,168,"    """"""Cross-sectional normalization""""""","[220, 220, 220, 37227, 21544, 12, 44330, 3487, 1634, 37811]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded constants like 1.4826 can lead to maintenance challenges if not documented.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 38491, 588, 352, 13, 2780, 2075, 460, 1085, 284, 9262, 6459, 611, 407, 12395, 13]",1.0,194,sast_risk,48,Hardcoded constants like 1.4826 can lead to maintenance challenges if not documented.,Low,178,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of type hinting for variable _df improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 7885, 4808, 7568, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,230,best_practice,66,Use of type hinting for variable _df improves code readability and maintainability.,,194,"                    pl.col(col).std().over(""datetime"").alias(""std""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 458, 13, 4033, 7, 4033, 737, 19282, 22446, 2502, 7203, 19608, 8079, 11074, 26011, 7203, 19282, 12340]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of incorrect datetime conversion if input is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 11491, 4818, 8079, 11315, 611, 5128, 318, 407, 31031, 13]",0.5,230,sast_risk,69,Potential risk of incorrect datetime conversion if input is not validated.,Low,230,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk of incorrect datetime conversion if input is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 11491, 4818, 8079, 11315, 611, 5128, 318, 407, 31031, 13]",0.5,270,sast_risk,71,Potential risk of incorrect datetime conversion if input is not validated.,Low,230,"                (pl.col(col) - pl.col(""mean"")) / pl.col(""std"").alias(col)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 489, 13, 4033, 7, 4033, 8, 532, 458, 13, 4033, 7203, 32604, 48774, 1220, 458, 13, 4033, 7203, 19282, 11074, 26011, 7, 4033, 8]"
‚úÖ Best Practice: Use of filter method for DataFrame to handle date range filtering.,"[26486, 227, 6705, 19939, 25, 5765, 286, 8106, 2446, 329, 6060, 19778, 284, 5412, 3128, 2837, 25431, 13]",0.5,270,best_practice,73,Use of filter method for DataFrame to handle date range filtering.,,270,,[]
üß† ML Signal: Selecting specific columns for processing indicates feature selection.,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 2176, 15180, 329, 7587, 9217, 3895, 6356, 13]",0.5,270,ml_signal,75,Selecting specific columns for processing indicates feature selection.,,270,,[]
üß† ML Signal: Conversion to numpy array for numerical operations is a common pattern in data preprocessing.,"[8582, 100, 254, 10373, 26484, 25, 44101, 284, 299, 32152, 7177, 329, 29052, 4560, 318, 257, 2219, 3912, 287, 1366, 662, 36948, 13]",1.0,281,ml_signal,77,Conversion to numpy array for numerical operations is a common pattern in data preprocessing.,,270,def process_robust_zscore_norm(,"[4299, 1429, 62, 22609, 436, 62, 89, 26675, 62, 27237, 7]"
üß† ML Signal: Calculation of median and median absolute deviation is a robust statistical method.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 14288, 290, 14288, 4112, 28833, 318, 257, 12373, 13905, 2446, 13]",1.0,291,ml_signal,78,Calculation of median and median absolute deviation is a robust statistical method.,,281,"    df: pl.DataFrame,","[220, 220, 220, 47764, 25, 458, 13, 6601, 19778, 11]"
‚úÖ Best Practice: Adding a small constant to avoid division by zero.,"[26486, 227, 6705, 19939, 25, 18247, 257, 1402, 6937, 284, 3368, 7297, 416, 6632, 13]",1.0,298,best_practice,82,Adding a small constant to avoid division by zero.,,291,) -> pl.DataFrame:,"[8, 4613, 458, 13, 6601, 19778, 25]"
üß† ML Signal: Scaling factor for robust standard deviation is a specific preprocessing technique.,"[8582, 100, 254, 10373, 26484, 25, 1446, 4272, 5766, 329, 12373, 3210, 28833, 318, 257, 2176, 662, 36948, 8173, 13]",0.5,317,ml_signal,84,Scaling factor for robust standard deviation is a specific preprocessing technique.,,298,    _df: pl.DataFrame = df.fill_nan(None),"[220, 220, 220, 4808, 7568, 25, 458, 13, 6601, 19778, 796, 47764, 13, 20797, 62, 12647, 7, 14202, 8]"
üß† ML Signal: Normalization of data is a common preprocessing step in ML pipelines.,"[8582, 100, 254, 10373, 26484, 25, 14435, 1634, 286, 1366, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 31108, 13]",0.5,341,ml_signal,87,Normalization of data is a common preprocessing step in ML pipelines.,,317,        fit_start_time = to_datetime(fit_start_time),"[220, 220, 220, 220, 220, 220, 220, 4197, 62, 9688, 62, 2435, 796, 284, 62, 19608, 8079, 7, 11147, 62, 9688, 62, 2435, 8]"
üß† ML Signal: Clipping outliers is a common data preprocessing technique.,"[8582, 100, 254, 10373, 26484, 25, 1012, 4501, 41528, 3183, 318, 257, 2219, 1366, 662, 36948, 8173, 13]",0.5,359,ml_signal,92,Clipping outliers is a common data preprocessing technique.,,341,    X = _df.select(cols).to_numpy(),"[220, 220, 220, 1395, 796, 4808, 7568, 13, 19738, 7, 4033, 82, 737, 1462, 62, 77, 32152, 3419]"
‚úÖ Best Practice: Use of with_columns method to update DataFrame columns.,"[26486, 227, 6705, 19939, 25, 5765, 286, 351, 62, 28665, 82, 2446, 284, 4296, 6060, 19778, 15180, 13]",0.5,386,best_practice,95,Use of with_columns method to update DataFrame columns.,,359,"    std_train = np.nanmedian(np.abs(X - mean_train), axis=0)","[220, 220, 220, 14367, 62, 27432, 796, 45941, 13, 12647, 1150, 666, 7, 37659, 13, 8937, 7, 55, 532, 1612, 62, 27432, 828, 16488, 28, 15, 8]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",0.5,386,best_practice,85,Add a docstring to describe the function's purpose and parameters.,,386,,[]
‚úÖ Best Practice: Type hinting for _df improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 4808, 7568, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,410,best_practice,88,Type hinting for _df improves code readability and maintainability.,,386,        fit_end_time = to_datetime(fit_end_time),"[220, 220, 220, 220, 220, 220, 220, 4197, 62, 437, 62, 2435, 796, 284, 62, 19608, 8079, 7, 11147, 62, 437, 62, 2435, 8]"
üß† ML Signal: Usage of rank normalization pattern could be a feature for ML models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4279, 3487, 1634, 3912, 714, 307, 257, 3895, 329, 10373, 4981, 13]",0.5,428,ml_signal,92,Usage of rank normalization pattern could be a feature for ML models.,,410,    X = _df.select(cols).to_numpy(),"[220, 220, 220, 1395, 796, 4808, 7568, 13, 19738, 7, 4033, 82, 737, 1462, 62, 77, 32152, 3419]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the rank method and over clause are used correctly to avoid logical errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 4279, 2446, 290, 625, 13444, 389, 973, 9380, 284, 3368, 12219, 8563, 13]",0.5,446,sast_risk,92,Ensure that the rank method and over clause are used correctly to avoid logical errors.,Low,428,    X = _df.select(cols).to_numpy(),"[220, 220, 220, 1395, 796, 4808, 7568, 13, 19738, 7, 4033, 82, 737, 1462, 62, 77, 32152, 3419]"
‚úÖ Best Practice: Using alias to rename columns improves code clarity.,"[26486, 227, 6705, 19939, 25, 8554, 16144, 284, 36265, 15180, 19575, 2438, 16287, 13]",0.5,473,best_practice,95,Using alias to rename columns improves code clarity.,,446,"    std_train = np.nanmedian(np.abs(X - mean_train), axis=0)","[220, 220, 220, 14367, 62, 27432, 796, 45941, 13, 12647, 1150, 666, 7, 37659, 13, 8937, 7, 55, 532, 1612, 62, 27432, 828, 16488, 28, 15, 8]"

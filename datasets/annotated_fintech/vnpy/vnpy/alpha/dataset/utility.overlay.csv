annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping standard library imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3210, 5888, 17944, 1978, 19575, 1100, 1799, 13]",1.0,5,best_practice,2,Grouping standard library imports together improves readability.,,0,from enum import Enum,"[6738, 33829, 1330, 2039, 388]"
‚úÖ Best Practice: Grouping standard library imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3210, 5888, 17944, 1978, 19575, 1100, 1799, 13]",1.0,5,best_practice,4,Grouping standard library imports together improves readability.,,5,,[]
‚úÖ Best Practice: Grouping standard library imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3210, 5888, 17944, 1978, 19575, 1100, 1799, 13]",1.0,5,best_practice,6,Grouping standard library imports together improves readability.,,5,,[]
‚úÖ Best Practice: Grouping third-party library imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 2368, 12, 10608, 5888, 17944, 1978, 19575, 1100, 1799, 13]",1.0,9,best_practice,8,Grouping third-party library imports together improves readability.,,5,class DataProxy:,"[4871, 6060, 44148, 25]"
üß† ML Signal: Usage of Polars DataFrame as a parameter,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2165, 945, 6060, 19778, 355, 257, 11507]",0.5,17,ml_signal,9,Usage of Polars DataFrame as a parameter,,9,"    """"""Feature data proxy""""""","[220, 220, 220, 37227, 38816, 1366, 15741, 37811]"
‚úÖ Best Practice: Type hinting for constructor parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 23772, 10007, 290, 1441, 2099]",1.0,17,best_practice,10,Type hinting for constructor parameters and return type,,17,,[]
üß† ML Signal: Accessing the last column of a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 938, 5721, 286, 257, 6060, 19778]",1.0,28,ml_signal,12,Accessing the last column of a DataFrame,,17,"        """"""Constructor""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 42316, 273, 37811]"
‚úÖ Best Practice: Type hinting for instance variables,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 4554, 9633]",0.5,49,best_practice,13,Type hinting for instance variables,,28,        self.name: str = df.columns[-1],"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 3672, 25, 965, 796, 47764, 13, 28665, 82, 58, 12, 16, 60]"
üß† ML Signal: Renaming a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 7152, 3723, 257, 6060, 19778, 5721]",1.0,49,ml_signal,15,Renaming a DataFrame column,,49,,[]
‚úÖ Best Practice: Type hinting for the method return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 2446, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,69,best_practice,11,Type hinting for the method return type improves code readability and maintainability,,49,"    def __init__(self, df: pl.DataFrame) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 47764, 25, 458, 13, 6601, 19778, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Type hinting for the variable improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,98,best_practice,14,Type hinting for the variable improves code readability and maintainability,,69,"        self.df: pl.DataFrame = df.rename({self.name: ""data""})","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7568, 25, 458, 13, 6601, 19778, 796, 47764, 13, 918, 480, 15090, 944, 13, 3672, 25, 366, 7890, 20662, 8]"
üß† ML Signal: Usage of method chaining with 'with_columns' indicates a pattern of data transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 351, 705, 4480, 62, 28665, 82, 6, 9217, 257, 3912, 286, 1366, 13389]",0.5,126,ml_signal,16,Usage of method chaining with 'with_columns' indicates a pattern of data transformation,,98,"        # Note that for numerical expressions, variables should be placed before numbers. e.g. a * 2","[220, 220, 220, 220, 220, 220, 220, 1303, 5740, 326, 329, 29052, 14700, 11, 9633, 815, 307, 4624, 878, 3146, 13, 304, 13, 70, 13, 257, 1635, 362]"
üß† ML Signal: Returning a custom object 'DataProxy' could indicate a pattern of wrapping or encapsulating data,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 2183, 2134, 705, 6601, 44148, 6, 714, 7603, 257, 3912, 286, 27074, 393, 32652, 8306, 1366]",1.0,145,ml_signal,18,Returning a custom object 'DataProxy' could indicate a pattern of wrapping or encapsulating data,,126,"    def result(self, s: pl.Series) -> ""DataProxy"":","[220, 220, 220, 825, 1255, 7, 944, 11, 264, 25, 458, 13, 27996, 8, 4613, 366, 6601, 44148, 1298]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,173,best_practice,16,Type hinting improves code readability and maintainability,,145,"        # Note that for numerical expressions, variables should be placed before numbers. e.g. a * 2","[220, 220, 220, 220, 220, 220, 220, 1303, 5740, 326, 329, 29052, 14700, 11, 9633, 815, 307, 4624, 878, 3146, 13, 304, 13, 70, 13, 257, 1635, 362]"
üß† ML Signal: Use of isinstance to check type can indicate dynamic type handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 460, 7603, 8925, 2099, 9041]",0.5,189,ml_signal,19,Use of isinstance to check type can indicate dynamic type handling,,173,"        """"""Convert series data to feature object""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 3103, 1851, 2168, 1366, 284, 3895, 2134, 37811]"
üß† ML Signal: Use of Polars library (pl.Series) for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2165, 945, 5888, 357, 489, 13, 27996, 8, 329, 1366, 17512]",0.5,209,ml_signal,21,Use of Polars library (pl.Series) for data manipulation,,189,        result = result.with_columns(other=s),"[220, 220, 220, 220, 220, 220, 220, 1255, 796, 1255, 13, 4480, 62, 28665, 82, 7, 847, 28, 82, 8]"
üß† ML Signal: Use of a method to process and return results,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 1429, 290, 1441, 2482]",0.5,235,ml_signal,25,Use of a method to process and return results,,209,"    def __add__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 2860, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,235,best_practice,24,Include a docstring to describe the method's purpose,,235,,[]
üß† ML Signal: Use of isinstance to check type of 'other',"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 286, 705, 847, 6]",1.0,247,ml_signal,26,Use of isinstance to check type of 'other',,235,"        """"""Addition operation""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 4550, 653, 4905, 37811]"
üß† ML Signal: Accessing a DataFrame column for arithmetic operations,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 6060, 19778, 5721, 329, 34768, 4560]",0.5,277,ml_signal,28,Accessing a DataFrame column for arithmetic operations,,247,"            s: pl.Series = self.df[""data""] + other.df[""data""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 25, 458, 13, 27996, 796, 2116, 13, 7568, 14692, 7890, 8973, 1343, 584, 13, 7568, 14692, 7890, 8973]"
üß† ML Signal: Handling different data types for arithmetic operations,"[8582, 100, 254, 10373, 26484, 25, 49500, 1180, 1366, 3858, 329, 34768, 4560]",0.5,291,ml_signal,31,Handling different data types for arithmetic operations,,277,        return self.result(s),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 20274, 7, 82, 8]"
üß† ML Signal: Use of a method to process and return the result,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 1429, 290, 1441, 262, 1255]",0.5,317,ml_signal,33,Use of a method to process and return the result,,291,"    def __sub__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 7266, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
"üß† ML Signal: Use of isinstance to check type, common pattern in dynamic typing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 11, 2219, 3912, 287, 8925, 19720]",0.5,317,ml_signal,32,"Use of isinstance to check type, common pattern in dynamic typing",,317,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for AttributeError if 'df' or 'data' attributes do not exist,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3460, 4163, 12331, 611, 705, 7568, 6, 393, 705, 7890, 6, 12608, 466, 407, 2152]",0.5,343,sast_risk,33,Potential for AttributeError if 'df' or 'data' attributes do not exist,Low,317,"    def __sub__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 7266, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
‚ö†Ô∏è SAST Risk (Low): Potential for AttributeError if 'df' or 'data' attributes do not exist,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3460, 4163, 12331, 611, 705, 7568, 6, 393, 705, 7890, 6, 12608, 466, 407, 2152]",0.5,352,sast_risk,37,Potential for AttributeError if 'df' or 'data' attributes do not exist,Low,343,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"‚úÖ Best Practice: Returning the result of an operation, maintains method chaining","[26486, 227, 6705, 19939, 25, 42882, 262, 1255, 286, 281, 4905, 11, 16047, 2446, 442, 1397]",0.5,366,best_practice,39,"Returning the result of an operation, maintains method chaining",,352,        return self.result(s),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 20274, 7, 82, 8]"
‚úÖ Best Practice: Check for type of 'other' to ensure correct operation,"[26486, 227, 6705, 19939, 25, 6822, 329, 2099, 286, 705, 847, 6, 284, 4155, 3376, 4905]",0.5,380,best_practice,39,Check for type of 'other' to ensure correct operation,,366,        return self.result(s),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 20274, 7, 82, 8]"
üß† ML Signal: Usage of multiplication operation with custom class,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 48473, 4905, 351, 2183, 1398]",0.5,380,ml_signal,40,Usage of multiplication operation with custom class,,380,,[]
üß† ML Signal: Usage of multiplication operation with primitive types,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 48473, 4905, 351, 20049, 3858]",0.5,410,ml_signal,44,Usage of multiplication operation with primitive types,,380,"            s: pl.Series = self.df[""data""] * other.df[""data""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 25, 458, 13, 27996, 796, 2116, 13, 7568, 14692, 7890, 8973, 1635, 584, 13, 7568, 14692, 7890, 8973]"
‚úÖ Best Practice: Encapsulate result in a method for consistency and potential future changes,"[26486, 227, 6705, 19939, 25, 14711, 1686, 5039, 1255, 287, 257, 2446, 329, 15794, 290, 2785, 2003, 2458]",0.5,431,best_practice,46,Encapsulate result in a method for consistency and potential future changes,,410,"            s = self.df[""data""] * other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 1635, 584]"
‚úÖ Best Practice: Check if 'other' is an instance of 'DataProxy' to handle different division logic.,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 847, 6, 318, 281, 4554, 286, 705, 6601, 44148, 6, 284, 5412, 1180, 7297, 9156, 13]",0.5,452,best_practice,46,Check if 'other' is an instance of 'DataProxy' to handle different division logic.,,431,"            s = self.df[""data""] * other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 1635, 584]"
üß† ML Signal: Usage of division operation between two 'DataProxy' objects.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7297, 4905, 1022, 734, 705, 6601, 44148, 6, 5563, 13]",0.5,466,ml_signal,47,Usage of division operation between two 'DataProxy' objects.,,452,        return self.result(s),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 20274, 7, 82, 8]"
üß† ML Signal: Usage of division operation with a scalar value.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7297, 4905, 351, 257, 16578, 283, 1988, 13]",0.5,482,ml_signal,51,Usage of division operation with a scalar value.,,466,"        if isinstance(other, DataProxy):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 847, 11, 6060, 44148, 2599]"
‚úÖ Best Practice: Encapsulate the result in a 'DataProxy' object for consistent return type.,"[26486, 227, 6705, 19939, 25, 14711, 1686, 5039, 262, 1255, 287, 257, 705, 6601, 44148, 6, 2134, 329, 6414, 1441, 2099, 13]",0.5,491,best_practice,53,Encapsulate the result in a 'DataProxy' object for consistent return type.,,482,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Type hinting for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,507,best_practice,51,Type hinting for return value improves code readability and maintainability,,491,"        if isinstance(other, DataProxy):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 847, 11, 6060, 44148, 2599]"
üß† ML Signal: Accessing a specific column from a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 422, 257, 6060, 19778]",0.5,528,ml_signal,54,Accessing a specific column from a DataFrame,,507,"            s = self.df[""data""] * other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 1635, 584]"
üß† ML Signal: Returning a processed result from a method,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 13686, 1255, 422, 257, 2446]",0.5,528,ml_signal,56,Returning a processed result from a method,,528,,[]
‚úÖ Best Practice: Check if 'other' is an instance of 'DataProxy' to handle different types appropriately,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 847, 6, 318, 281, 4554, 286, 705, 6601, 44148, 6, 284, 5412, 1180, 3858, 20431]",0.5,556,best_practice,57,Check if 'other' is an instance of 'DataProxy' to handle different types appropriately,,528,"    def __truediv__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 83, 21556, 452, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
üß† ML Signal: Usage of Polars library for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2165, 945, 5888, 329, 1366, 17512]",1.0,568,ml_signal,58,Usage of Polars library for data manipulation,,556,"        """"""Division operation""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 24095, 1166, 4905, 37811]"
üß† ML Signal: Handling comparison with primitive data types,"[8582, 100, 254, 10373, 26484, 25, 49500, 7208, 351, 20049, 1366, 3858]",0.5,589,ml_signal,62,Handling comparison with primitive data types,,568,"            s = self.df[""data""] / other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 1220, 584]"
‚úÖ Best Practice: Return a consistent type ('DataProxy') for method chaining,"[26486, 227, 6705, 19939, 25, 8229, 257, 6414, 2099, 19203, 6601, 44148, 11537, 329, 2446, 442, 1397]",0.5,589,best_practice,64,Return a consistent type ('DataProxy') for method chaining,,589,,[]
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,610,best_practice,62,Type hinting improves code readability and maintainability,,589,"            s = self.df[""data""] / other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 1220, 584]"
üß† ML Signal: Use of isinstance to check type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099]",1.0,625,ml_signal,65,Use of isinstance to check type,,610,"    def __abs__(self) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 8937, 834, 7, 944, 8, 4613, 366, 6601, 44148, 1298]"
üß† ML Signal: Use of Polars library for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2165, 945, 5888, 329, 1366, 17512]",1.0,647,ml_signal,67,Use of Polars library for data manipulation,,625,"        s: pl.Series = self.df[""data""].abs()","[220, 220, 220, 220, 220, 220, 220, 264, 25, 458, 13, 27996, 796, 2116, 13, 7568, 14692, 7890, 1, 4083, 8937, 3419]"
üß† ML Signal: Handling different data types in comparison,"[8582, 100, 254, 10373, 26484, 25, 49500, 1180, 1366, 3858, 287, 7208]",1.0,673,ml_signal,70,Handling different data types in comparison,,647,"    def __gt__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 13655, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
‚úÖ Best Practice: Returning a result from a method,"[26486, 227, 6705, 19939, 25, 42882, 257, 1255, 422, 257, 2446]",1.0,689,best_practice,72,Returning a result from a method,,673,"        if isinstance(other, DataProxy):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 847, 11, 6060, 44148, 2599]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,689,best_practice,69,Type hinting improves code readability and maintainability,,689,,[]
üß† ML Signal: Use of isinstance to check type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099]",1.0,705,ml_signal,72,Use of isinstance to check type,,689,"        if isinstance(other, DataProxy):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 847, 11, 6060, 44148, 2599]"
üß† ML Signal: Use of pandas-like operations for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 12, 2339, 4560, 329, 1366, 17512]",1.0,714,ml_signal,74,Use of pandas-like operations for data manipulation,,705,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Handling different data types in operations,"[8582, 100, 254, 10373, 26484, 25, 49500, 1180, 1366, 3858, 287, 4560]",1.0,714,ml_signal,77,Handling different data types in operations,,714,,[]
üß† ML Signal: Returning a result from a method,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1255, 422, 257, 2446]",0.5,729,ml_signal,79,Returning a result from a method,,714,"        """"""Greater than or equal comparison""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 13681, 263, 621, 393, 4961, 7208, 37811]"
‚úÖ Best Practice: Check if 'other' is an instance of 'DataProxy' to handle different types appropriately.,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 847, 6, 318, 281, 4554, 286, 705, 6601, 44148, 6, 284, 5412, 1180, 3858, 20431, 13]",0.5,755,best_practice,78,Check if 'other' is an instance of 'DataProxy' to handle different types appropriately.,,729,"    def __ge__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 469, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
üß† ML Signal: Usage of pandas-like operations for data comparison.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 12, 2339, 4560, 329, 1366, 7208, 13]",0.5,770,ml_signal,79,Usage of pandas-like operations for data comparison.,,755,"        """"""Greater than or equal comparison""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 13681, 263, 621, 393, 4961, 7208, 37811]"
üß† ML Signal: Handling scalar comparison with data.,"[8582, 100, 254, 10373, 26484, 25, 49500, 16578, 283, 7208, 351, 1366, 13]",0.5,791,ml_signal,83,Handling scalar comparison with data.,,770,"            s = self.df[""data""] >= other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 18189, 584]"
‚úÖ Best Practice: Return the result of the comparison wrapped in a 'DataProxy' object.,"[26486, 227, 6705, 19939, 25, 8229, 262, 1255, 286, 262, 7208, 12908, 287, 257, 705, 6601, 44148, 6, 2134, 13]",0.5,791,best_practice,85,Return the result of the comparison wrapped in a 'DataProxy' object.,,791,,[]
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,812,best_practice,83,Type hinting improves code readability and maintainability,,791,"            s = self.df[""data""] >= other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 18189, 584]"
üß† ML Signal: Use of isinstance to check type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099]",0.5,838,ml_signal,86,Use of isinstance to check type,,812,"    def __lt__(self, other: Union[""DataProxy"", int, float]) -> ""DataProxy"":","[220, 220, 220, 825, 11593, 2528, 834, 7, 944, 11, 584, 25, 4479, 14692, 6601, 44148, 1600, 493, 11, 12178, 12962, 4613, 366, 6601, 44148, 1298]"
üß† ML Signal: Accessing attributes of an object,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 12608, 286, 281, 2134]",0.5,854,ml_signal,88,Accessing attributes of an object,,838,"        if isinstance(other, DataProxy):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 847, 11, 6060, 44148, 2599]"
üß† ML Signal: Handling different data types in comparison,"[8582, 100, 254, 10373, 26484, 25, 49500, 1180, 1366, 3858, 287, 7208]",0.5,875,ml_signal,91,Handling different data types in comparison,,854,"            s = self.df[""data""] < other","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 796, 2116, 13, 7568, 14692, 7890, 8973, 1279, 584]"
üß† ML Signal: Returning the result of a comparison operation,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 1255, 286, 257, 7208, 4905]",0.5,889,ml_signal,92,Returning the result of a comparison operation,,875,        return self.result(s),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 20274, 7, 82, 8]"
‚úÖ Best Practice: Importing specific functions instead of entire modules for clarity and to avoid namespace pollution.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 2427, 286, 2104, 13103, 329, 16287, 290, 284, 3368, 25745, 12231, 13]",1.0,903,best_practice,92,Importing specific functions instead of entire modules for clarity and to avoid namespace pollution.,,889,        return self.result(s),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 20274, 7, 82, 8]"
‚úÖ Best Practice: Using type hints for better code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,929,best_practice,114,Using type hints for better code readability and maintainability.,,903,    from .ts_function import (              # noqa,"[220, 220, 220, 422, 764, 912, 62, 8818, 1330, 357, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 645, 20402]"
‚úÖ Best Practice: Using descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",0.5,944,best_practice,119,Using descriptive variable names for better readability.,,929,"        ts_mean, ts_std,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 32604, 11, 40379, 62, 19282, 11]"
üß† ML Signal: Dynamic creation of variables based on DataFrame columns.,"[8582, 100, 254, 10373, 26484, 25, 26977, 6282, 286, 9633, 1912, 319, 6060, 19778, 15180, 13]",1.0,962,ml_signal,121,Dynamic creation of variables based on DataFrame columns.,,944,"        ts_rsquare, ts_resi,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 3808, 421, 533, 11, 40379, 62, 411, 72, 11]"
‚ö†Ô∏è SAST Risk (High): Use of eval() can lead to code injection vulnerabilities if the input is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 5418, 3419, 460, 1085, 284, 2438, 16954, 23805, 611, 262, 5128, 318, 407, 6105, 5336, 36951, 13]",0.5,978,sast_risk,123,Use of eval() can lead to code injection vulnerabilities if the input is not properly sanitized.,High,962,"        ts_less, ts_greater,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 1203, 11, 40379, 62, 18223, 263, 11]"
‚úÖ Best Practice: Returning the DataFrame directly for clarity.,"[26486, 227, 6705, 19939, 25, 42882, 262, 6060, 19778, 3264, 329, 16287, 13]",0.5,994,best_practice,123,Returning the DataFrame directly for clarity.,,978,"        ts_less, ts_greater,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 1203, 11, 40379, 62, 18223, 263, 11]"
‚úÖ Best Practice: Add type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,1012,best_practice,121,Add type hints for function parameters and return type for better readability and maintainability,,994,"        ts_rsquare, ts_resi,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 3808, 421, 533, 11, 40379, 62, 411, 72, 11]"
üß† ML Signal: Use of Polars library for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2165, 945, 5888, 329, 1366, 17512]",1.0,1028,ml_signal,123,Use of Polars library for data manipulation,,1012,"        ts_less, ts_greater,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 1203, 11, 40379, 62, 18223, 263, 11]"
‚úÖ Best Practice: Use of select method for efficient column selection in Polars,"[26486, 227, 6705, 19939, 25, 5765, 286, 2922, 2446, 329, 6942, 5721, 6356, 287, 2165, 945]",0.5,1044,best_practice,123,Use of select method for efficient column selection in Polars,,1028,"        ts_less, ts_greater,","[220, 220, 220, 220, 220, 220, 220, 40379, 62, 1203, 11, 40379, 62, 18223, 263, 11]"
‚úÖ Best Practice: Use of alias to rename the result of an expression for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 16144, 284, 36265, 262, 1255, 286, 281, 5408, 329, 16287]",0.5,1054,best_practice,129,Use of alias to rename the result of an expression for clarity,,1044,        cs_std,"[220, 220, 220, 220, 220, 220, 220, 50115, 62, 19282]"
‚úÖ Best Practice: Include type hinting for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 40348, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1065,best_practice,128,Include type hinting for function parameters and return type for better readability and maintainability.,,1054,"        cs_mean,","[220, 220, 220, 220, 220, 220, 220, 50115, 62, 32604, 11]"
üß† ML Signal: Checking the type of a variable to determine processing logic.,"[8582, 100, 254, 10373, 26484, 25, 39432, 262, 2099, 286, 257, 7885, 284, 5004, 7587, 9156, 13]",1.0,1091,ml_signal,131,Checking the type of a variable to determine processing logic.,,1065,    from .ta_function import (              # noqa,"[220, 220, 220, 422, 764, 8326, 62, 8818, 1330, 357, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 645, 20402]"
üß† ML Signal: Conditional logic based on string content.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4731, 2695, 13]",1.0,1103,ml_signal,132,Conditional logic based on string content.,,1091,"        ta_rsi,","[220, 220, 220, 220, 220, 220, 220, 20486, 62, 3808, 72, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if the input string is not a valid date format.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 262, 5128, 4731, 318, 407, 257, 4938, 3128, 5794, 13]",0.5,1103,sast_risk,138,Potential risk if the input string is not a valid date format.,Low,1103,,[]
‚úÖ Best Practice: Use of Enum for segment values improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 10618, 3815, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1103,best_practice,138,Use of Enum for segment values improves code readability and maintainability,,1103,,[]
‚úÖ Best Practice: Enum members are named in uppercase to follow Python naming conventions,"[26486, 227, 6705, 19939, 25, 2039, 388, 1866, 389, 3706, 287, 334, 39921, 589, 284, 1061, 11361, 19264, 21396]",0.5,1124,best_practice,141,Enum members are named in uppercase to follow Python naming conventions,,1103,"        if column in {""datetime"", ""vt_symbol""}:","[220, 220, 220, 220, 220, 220, 220, 611, 5721, 287, 19779, 19608, 8079, 1600, 366, 36540, 62, 1837, 23650, 20662, 25]"

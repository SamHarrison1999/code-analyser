annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Medium): Using pickle can lead to arbitrary code execution if the data is tampered with.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 2298, 293, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 1366, 318, 21885, 13653, 351, 13]",1.0,5,sast_risk,4,Using pickle can lead to arbitrary code execution if the data is tampered with.,Medium,0,from pathlib import Path,"[6738, 3108, 8019, 1330, 10644]"
üß† ML Signal: Importing specific classes from a module indicates usage patterns and dependencies.,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 8748, 7572, 290, 20086, 13]",0.5,5,ml_signal,10,Importing specific classes from a module indicates usage patterns and dependencies.,,5,,[]
‚úÖ Best Practice: Class docstring provides a brief description of the class,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398]",1.0,11,best_practice,17,Class docstring provides a brief description of the class,,5,from .model import AlphaModel,"[6738, 764, 19849, 1330, 12995, 17633]"
‚úÖ Best Practice: Type hinting for 'lab_path' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 23912, 62, 6978, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,11,best_practice,19,Type hinting for 'lab_path' improves code readability and maintainability.,,11,,[]
‚úÖ Best Practice: Using Path.joinpath for constructing paths is more readable and maintainable.,"[26486, 227, 6705, 19939, 25, 8554, 10644, 13, 22179, 6978, 329, 30580, 13532, 318, 517, 31744, 290, 5529, 540, 13]",0.5,19,best_practice,21,Using Path.joinpath for constructing paths is more readable and maintainable.,,11,"    """"""Alpha Research Laboratory""""""","[220, 220, 220, 37227, 38077, 4992, 18643, 37811]"
‚ö†Ô∏è SAST Risk (Low): Potential race condition if the directory is created between the check and mkdir call.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 611, 262, 8619, 318, 2727, 1022, 262, 2198, 290, 33480, 15908, 869, 13]",1.0,30,sast_risk,39,Potential race condition if the directory is created between the check and mkdir call.,Low,19,        for path in [,"[220, 220, 220, 220, 220, 220, 220, 329, 3108, 287, 685]"
‚úÖ Best Practice: Early return for empty input improves readability and efficiency.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 329, 6565, 5128, 19575, 1100, 1799, 290, 9332, 13]",1.0,47,best_practice,40,Early return for empty input improves readability and efficiency.,,30,"            self.lab_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 23912, 62, 6978, 11]"
‚úÖ Best Practice: Using specific paths based on conditions improves code organization.,"[26486, 227, 6705, 19939, 25, 8554, 2176, 13532, 1912, 319, 3403, 19575, 2438, 4009, 13]",1.0,66,best_practice,44,Using specific paths based on conditions improves code organization.,,47,"            self.dataset_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19608, 292, 316, 62, 6978, 11]"
‚ö†Ô∏è SAST Risk (Low): Logging error messages can expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 4049, 6218, 460, 15651, 8564, 1321, 13]",1.0,66,sast_risk,50,Logging error messages can expose sensitive information.,Low,66,,[]
‚úÖ Best Practice: Removing timezone information ensures consistency in data storage.,"[26486, 227, 6705, 19939, 25, 3982, 5165, 640, 11340, 1321, 19047, 15794, 287, 1366, 6143, 13]",1.0,78,best_practice,52,Removing timezone information ensures consistency in data storage.,,66,"        """"""Save bar data""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 16928, 2318, 1366, 37811]"
üß† ML Signal: Checking for file existence before writing is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2393, 6224, 878, 3597, 318, 257, 2219, 3912, 13]",1.0,90,ml_signal,68,Checking for file existence before writing is a common pattern.,,78,        for bar in bars:,"[220, 220, 220, 220, 220, 220, 220, 329, 2318, 287, 9210, 25]"
üß† ML Signal: Concatenating and deduplicating data is a common data processing pattern.,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 290, 4648, 84, 489, 12364, 1366, 318, 257, 2219, 1366, 7587, 3912, 13]",1.0,121,ml_signal,70,Concatenating and deduplicating data is a common data processing pattern.,,90,"                ""datetime"": bar.datetime.replace(tzinfo=None),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19608, 8079, 1298, 2318, 13, 19608, 8079, 13, 33491, 7, 22877, 10951, 28, 14202, 828]"
‚ö†Ô∏è SAST Risk (Low): Writing to files can lead to data corruption if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 22183, 284, 3696, 460, 1085, 284, 1366, 9253, 611, 407, 12118, 6105, 13]",1.0,143,sast_risk,75,Writing to files can lead to data corruption if not handled properly.,Low,121,"                ""volume"": bar.volume,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 29048, 1298, 2318, 13, 29048, 11]"
üß† ML Signal: Type checking and conversion for 'interval' indicates handling of flexible input types,"[8582, 100, 254, 10373, 26484, 25, 5994, 10627, 290, 11315, 329, 705, 3849, 2100, 6, 9217, 9041, 286, 12846, 5128, 3858]",0.5,155,ml_signal,78,Type checking and conversion for 'interval' indicates handling of flexible input types,,143,            },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Conversion of 'start' and 'end' to datetime objects shows handling of flexible input types,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 705, 9688, 6, 290, 705, 437, 6, 284, 4818, 8079, 5563, 2523, 9041, 286, 12846, 5128, 3858]",0.5,178,ml_signal,81,Conversion of 'start' and 'end' to datetime objects shows handling of flexible input types,,155,        new_df: pl.DataFrame = pl.DataFrame(data),"[220, 220, 220, 220, 220, 220, 220, 649, 62, 7568, 25, 458, 13, 6601, 19778, 796, 458, 13, 6601, 19778, 7, 7890, 8]"
‚ö†Ô∏è SAST Risk (Low): Logging error messages can potentially expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 4049, 6218, 460, 6196, 15651, 8564, 1321]",1.0,207,sast_risk,89,Logging error messages can potentially expose sensitive information,Low,178,"            new_df = new_df.unique(subset=[""datetime""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 7568, 796, 649, 62, 7568, 13, 34642, 7, 7266, 2617, 28, 14692, 19608, 8079, 8973, 8]"
‚ö†Ô∏è SAST Risk (Low): Checking file existence without handling potential race conditions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 39432, 2393, 6224, 1231, 9041, 2785, 3234, 3403]",1.0,218,sast_risk,93,Checking file existence without handling potential race conditions,Low,207,        # Save to file,"[220, 220, 220, 220, 220, 220, 220, 1303, 12793, 284, 2393]"
‚ö†Ô∏è SAST Risk (Low): Logging error messages can potentially expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 4049, 6218, 460, 6196, 15651, 8564, 1321]",1.0,218,sast_risk,95,Logging error messages can potentially expose sensitive information,Low,218,,[]
üß† ML Signal: Use of polars library for reading parquet files indicates preference for performance,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 755, 945, 5888, 329, 3555, 1582, 21108, 3696, 9217, 12741, 329, 2854]",0.5,233,ml_signal,98,Use of polars library for reading parquet files indicates preference for performance,,218,"        vt_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 25, 965, 11]"
üß† ML Signal: Filtering data based on datetime range shows common data processing pattern,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 4818, 8079, 2837, 2523, 2219, 1366, 7587, 3912]",0.5,248,ml_signal,98,Filtering data based on datetime range shows common data processing pattern,,233,"        vt_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 25, 965, 11]"
üß† ML Signal: Extraction of symbol and exchange from vt_symbol indicates common pattern in financial data,"[8582, 100, 254, 10373, 26484, 25, 5683, 7861, 286, 6194, 290, 5163, 422, 410, 83, 62, 1837, 23650, 9217, 2219, 3912, 287, 3176, 1366]",0.5,263,ml_signal,98,Extraction of symbol and exchange from vt_symbol indicates common pattern in financial data,,248,"        vt_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 25, 965, 11]"
‚úÖ Best Practice: Use of named arguments improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 19575, 2438, 1100, 1799]",0.5,279,best_practice,112,Use of named arguments improves code readability,,263,        if interval == Interval.DAILY:,"[220, 220, 220, 220, 220, 220, 220, 611, 16654, 6624, 4225, 2100, 13, 5631, 33340, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if vt_symbols is not validated for malicious input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 410, 83, 62, 1837, 2022, 10220, 318, 407, 31031, 329, 17412, 5128]",0.5,306,sast_risk,123,Potential risk if vt_symbols is not validated for malicious input,Low,279,"            logger.error(f""File {file_path} does not exist"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 18224, 7, 69, 1, 8979, 1391, 7753, 62, 6978, 92, 857, 407, 2152, 4943]"
‚úÖ Best Practice: Check and convert interval to a consistent type,"[26486, 227, 6705, 19939, 25, 6822, 290, 10385, 16654, 284, 257, 6414, 2099]",0.5,316,best_practice,126,Check and convert interval to a consistent type,,306,        # Open file,"[220, 220, 220, 220, 220, 220, 220, 1303, 4946, 2393]"
‚úÖ Best Practice: Convert start and end to datetime and adjust with extended_days,"[26486, 227, 6705, 19939, 25, 38240, 923, 290, 886, 284, 4818, 8079, 290, 4532, 351, 7083, 62, 12545]",0.5,328,best_practice,129,Convert start and end to datetime and adjust with extended_days,,316,        # Filter by date range,"[220, 220, 220, 220, 220, 220, 220, 1303, 25853, 416, 3128, 2837]"
‚úÖ Best Practice: Use clear conditional logic to determine folder_path,"[26486, 227, 6705, 19939, 25, 5765, 1598, 26340, 9156, 284, 5004, 9483, 62, 6978]",0.5,341,best_practice,132,Use clear conditional logic to determine folder_path,,328,        # Convert to BarData objects,"[220, 220, 220, 220, 220, 220, 220, 1303, 38240, 284, 2409, 6601, 5563]"
‚ö†Ô∏è SAST Risk (Low): Logging error messages can expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 4049, 6218, 460, 15651, 8564, 1321]",0.5,357,sast_risk,138,Logging error messages can expose sensitive information,Low,341,            bar = BarData(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2318, 796, 2409, 6601, 7]"
‚úÖ Best Practice: Construct file path using joinpath for better readability,"[26486, 227, 6705, 19939, 25, 28407, 2393, 3108, 1262, 4654, 6978, 329, 1365, 1100, 1799]",0.5,380,best_practice,143,Construct file path using joinpath for better readability,,357,"                open_price=row[""open""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 62, 20888, 28, 808, 14692, 9654, 33116]"
‚ö†Ô∏è SAST Risk (Low): Check if file exists to prevent file not found errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6822, 611, 2393, 7160, 284, 2948, 2393, 407, 1043, 8563]",0.5,403,sast_risk,144,Check if file exists to prevent file not found errors,Low,380,"                high_price=row[""high""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1029, 62, 20888, 28, 808, 14692, 8929, 33116]"
‚úÖ Best Practice: Use pl.read_parquet for efficient file reading,"[26486, 227, 6705, 19939, 25, 5765, 458, 13, 961, 62, 1845, 21108, 329, 6942, 2393, 3555]",0.5,426,best_practice,144,Use pl.read_parquet for efficient file reading,,403,"                high_price=row[""high""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1029, 62, 20888, 28, 808, 14692, 8929, 33116]"
‚úÖ Best Practice: Filter DataFrame rows based on datetime range,"[26486, 227, 6705, 19939, 25, 25853, 6060, 19778, 15274, 1912, 319, 4818, 8079, 2837]",0.5,435,best_practice,154,Filter DataFrame rows based on datetime range,,426,        return bars,"[220, 220, 220, 220, 220, 220, 220, 1441, 9210]"
‚úÖ Best Practice: Cast columns to appropriate data types for consistency,"[26486, 227, 6705, 19939, 25, 5833, 15180, 284, 5035, 1366, 3858, 329, 15794]",0.5,444,best_practice,154,Cast columns to appropriate data types for consistency,,435,        return bars,"[220, 220, 220, 220, 220, 220, 220, 1441, 9210]"
‚úÖ Best Practice: Skip processing if DataFrame is empty,"[26486, 227, 6705, 19939, 25, 32214, 7587, 611, 6060, 19778, 318, 6565]",0.5,459,best_practice,164,Skip processing if DataFrame is empty,,444,"        """"""Load bar data as DataFrame""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 8912, 2318, 1366, 355, 6060, 19778, 37811]"
‚úÖ Best Practice: Calculate close_0 for normalization,"[26486, 227, 6705, 19939, 25, 27131, 378, 1969, 62, 15, 329, 3487, 1634]",0.5,469,best_practice,168,Calculate close_0 for normalization,,459,        # Convert types,"[220, 220, 220, 220, 220, 220, 220, 1303, 38240, 3858]"
‚úÖ Best Practice: Normalize columns by close_0,"[26486, 227, 6705, 19939, 25, 14435, 1096, 15180, 416, 1969, 62, 15]",0.5,485,best_practice,169,Normalize columns by close_0,,469,"        if isinstance(interval, str):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 3849, 2100, 11, 965, 2599]"
‚úÖ Best Practice: Create mask for rows with all zero values,"[26486, 227, 6705, 19939, 25, 13610, 9335, 329, 15274, 351, 477, 6632, 3815]",0.5,507,best_practice,177,Create mask for rows with all zero values,,485,            folder_path: Path = self.daily_path,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9483, 62, 6978, 25, 10644, 796, 2116, 13, 29468, 62, 6978]"
‚úÖ Best Practice: Replace zero rows with NaN for clarity,"[26486, 227, 6705, 19939, 25, 40177, 6632, 15274, 351, 11013, 45, 329, 16287]",0.5,527,best_practice,179,Replace zero rows with NaN for clarity,,507,            folder_path = self.minute_path,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9483, 62, 6978, 796, 2116, 13, 11374, 62, 6978]"
‚úÖ Best Practice: Add vt_symbol column for identification,"[26486, 227, 6705, 19939, 25, 3060, 410, 83, 62, 1837, 23650, 5721, 329, 11795]",0.5,540,best_practice,182,Add vt_symbol column for identification,,527,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Appending DataFrames to a list for later concatenation,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 6060, 35439, 284, 257, 1351, 329, 1568, 1673, 36686, 341]",0.5,553,ml_signal,182,Appending DataFrames to a list for later concatenation,,540,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Concatenate all DataFrames into a single result DataFrame,"[26486, 227, 6705, 19939, 25, 1482, 9246, 268, 378, 477, 6060, 35439, 656, 257, 2060, 1255, 6060, 19778]",0.5,569,best_practice,188,Concatenate all DataFrames into a single result DataFrame,,553,            # Check if file exists,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 6822, 611, 2393, 7160]"
‚úÖ Best Practice: Use of type annotations for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 2163, 10007, 290, 1441, 2099]",1.0,586,best_practice,178,Use of type annotations for function parameters and return type,,569,        elif interval == Interval.MINUTE:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 16654, 6624, 4225, 2100, 13, 23678, 37780, 25]"
‚úÖ Best Practice: Use of Path.joinpath for constructing file paths,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 13, 22179, 6978, 329, 30580, 2393, 13532]",1.0,595,best_practice,180,Use of Path.joinpath for constructing file paths,,586,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of shelve can lead to data corruption if not properly closed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 7497, 303, 460, 1085, 284, 1366, 9253, 611, 407, 6105, 4838]",0.5,608,sast_risk,182,Use of shelve can lead to data corruption if not properly closed,Low,595,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Pattern of updating a shelve database with a dictionary,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 257, 7497, 303, 6831, 351, 257, 22155]",0.5,621,ml_signal,182,Pattern of updating a shelve database with a dictionary,,608,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Use of lru_cache to cache function results for performance optimization,"[26486, 227, 6705, 19939, 25, 5765, 286, 300, 622, 62, 23870, 284, 12940, 2163, 2482, 329, 2854, 23989]",1.0,621,best_practice,186,Use of lru_cache to cache function results for performance optimization,,621,,[]
‚úÖ Best Practice: Use of type hinting for file_path improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2393, 62, 6978, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,656,best_practice,189,Use of type hinting for file_path improves code readability and maintainability.,,621,"            file_path: Path = folder_path.joinpath(f""{vt_symbol}.parquet"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2393, 62, 6978, 25, 10644, 796, 9483, 62, 6978, 13, 22179, 6978, 7, 69, 1, 90, 36540, 62, 1837, 23650, 27422, 1845, 21108, 4943]"
‚úÖ Best Practice: Converting start and end to datetime ensures consistent data type usage.,"[26486, 227, 6705, 19939, 25, 35602, 889, 923, 290, 886, 284, 4818, 8079, 19047, 6414, 1366, 2099, 8748, 13]",1.0,687,best_practice,191,Converting start and end to datetime ensures consistent data type usage.,,656,"                logger.error(f""File {file_path} does not exist"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 18224, 7, 69, 1, 8979, 1391, 7753, 62, 6978, 92, 857, 407, 2152, 4943]"
‚ö†Ô∏è SAST Risk (Low): Using shelve without specifying a protocol can lead to compatibility issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 7497, 303, 1231, 31577, 257, 8435, 460, 1085, 284, 17764, 2428, 13]",0.5,701,sast_risk,194,Using shelve without specifying a protocol can lead to compatibility issues.,Low,687,            # Open file,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4946, 2393]"
‚úÖ Best Practice: Explicitly defining the type of keys improves code readability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 262, 2099, 286, 8251, 19575, 2438, 1100, 1799, 13]",0.5,701,best_practice,196,Explicitly defining the type of keys improves code readability.,,701,,[]
‚úÖ Best Practice: Sorting keys ensures consistent order of processing.,"[26486, 227, 6705, 19939, 25, 311, 24707, 8251, 19047, 6414, 1502, 286, 7587, 13]",0.5,740,best_practice,198,Sorting keys ensures consistent order of processing.,,701,"            df = df.filter((pl.col(""datetime"") >= start) & (pl.col(""datetime"") <= end))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 24455, 19510, 489, 13, 4033, 7203, 19608, 8079, 4943, 18189, 923, 8, 1222, 357, 489, 13, 4033, 7203, 19608, 8079, 4943, 19841, 886, 4008]"
‚úÖ Best Practice: Using a dictionary to store index components provides efficient data retrieval.,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 284, 3650, 6376, 6805, 3769, 6942, 1366, 45069, 13]",0.5,756,best_practice,200,Using a dictionary to store index components provides efficient data retrieval.,,740,            # Specify data types,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 18291, 1958, 1366, 3858]"
‚úÖ Best Practice: Explicitly defining the type of dt improves code readability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 262, 2099, 286, 288, 83, 19575, 2438, 1100, 1799, 13]",0.5,776,best_practice,201,Explicitly defining the type of dt improves code readability.,,756,            df = df.with_columns(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 4480, 62, 28665, 82, 7]"
‚úÖ Best Practice: Using a range check for dates ensures only relevant data is processed.,"[26486, 227, 6705, 19939, 25, 8554, 257, 2837, 2198, 329, 9667, 19047, 691, 5981, 1366, 318, 13686, 13]",0.5,804,best_practice,205,Using a range check for dates ensures only relevant data is processed.,,776,"                pl.col(""close"").cast(pl.Float32),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 458, 13, 4033, 7203, 19836, 11074, 2701, 7, 489, 13, 43879, 2624, 828]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,834,best_practice,208,Type hinting for the return type improves code readability and maintainability.,,804,"                pl.col(""open_interest"").cast(pl.Float32),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 458, 13, 4033, 7203, 9654, 62, 9446, 11074, 2701, 7, 489, 13, 43879, 2624, 828]"
‚úÖ Best Practice: Using a set to collect symbols ensures uniqueness and prevents duplicates.,"[26486, 227, 6705, 19939, 25, 8554, 257, 900, 284, 2824, 14354, 19047, 49650, 290, 15174, 14184, 16856, 13]",1.0,850,best_practice,214,Using a set to collect symbols ensures uniqueness and prevents duplicates.,,834,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
‚úÖ Best Practice: Converting the set back to a list before returning to match the return type hint.,"[26486, 227, 6705, 19939, 25, 35602, 889, 262, 900, 736, 284, 257, 1351, 878, 8024, 284, 2872, 262, 1441, 2099, 9254, 13]",1.0,884,best_practice,217,Converting the set back to a list before returning to match the return type hint.,,850,"            close_0: float = df.select(pl.col(""close"")).item(0, 0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1969, 62, 15, 25, 12178, 796, 47764, 13, 19738, 7, 489, 13, 4033, 7203, 19836, 4943, 737, 9186, 7, 15, 11, 657, 8]"
‚úÖ Best Practice: Type hinting for index_components improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 6376, 62, 5589, 3906, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,896,best_practice,224,Type hinting for index_components improves code readability and maintainability,,884,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Sorting trading_dates ensures consistent processing order,"[26486, 227, 6705, 19939, 25, 311, 24707, 7313, 62, 19581, 19047, 6414, 7587, 1502]",1.0,896,best_practice,230,Sorting trading_dates ensures consistent processing order,,896,,[]
‚úÖ Best Practice: Type hinting for component_filters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 7515, 62, 10379, 1010, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,946,best_practice,232,Type hinting for component_filters improves code readability and maintainability,,896,"                [pl.when(mask).then(float(""nan"")).otherwise(pl.col(col)).alias(col) for col in numeric_columns]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 489, 13, 12518, 7, 27932, 737, 8524, 7, 22468, 7203, 12647, 4943, 737, 847, 3083, 7, 489, 13, 4033, 7, 4033, 29720, 26011, 7, 4033, 8, 329, 951, 287, 35575, 62, 28665, 82, 60]"
‚úÖ Best Practice: Type hinting for all_symbols improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 477, 62, 1837, 2022, 10220, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,946,best_practice,234,Type hinting for all_symbols improves code readability and maintainability,,946,,[]
üß† ML Signal: Usage of update method on set to collect unique symbols,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4296, 2446, 319, 900, 284, 2824, 3748, 14354]",1.0,946,ml_signal,237,Usage of update method on set to collect unique symbols,,946,,[]
‚úÖ Best Practice: Type hinting for period_start and period_end improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2278, 62, 9688, 290, 2278, 62, 437, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,946,best_practice,240,Type hinting for period_start and period_end improves code readability and maintainability,,946,,[]
üß† ML Signal: Appending tuples to lists in a dictionary to track periods,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 12777, 2374, 284, 8341, 287, 257, 22155, 284, 2610, 9574]",1.0,959,ml_signal,250,Appending tuples to lists in a dictionary to track periods,,946,"        """"""Save index component data""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 16928, 6376, 7515, 1366, 37811]"
‚úÖ Best Practice: Initialize contracts as a dictionary to store contract settings.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8592, 355, 257, 22155, 284, 3650, 2775, 6460, 13]",1.0,973,best_practice,259,Initialize contracts as a dictionary to store contract settings.,,959,"        index_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 6376, 62, 1837, 23650, 25, 965, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential file existence check race condition.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 6224, 2198, 3234, 4006, 13]",1.0,986,sast_risk,261,Potential file existence check race condition.,Low,973,        end: datetime | str,"[220, 220, 220, 220, 220, 220, 220, 886, 25, 4818, 8079, 930, 965]"
‚ö†Ô∏è SAST Risk (Low): File is opened without exception handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 318, 4721, 1231, 6631, 9041, 13]",0.5,1002,sast_risk,263,File is opened without exception handling.,Low,986,"        """"""Load index component data as DataFrame""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 8912, 6376, 7515, 1366, 355, 6060, 19778, 37811]"
‚ö†Ô∏è SAST Risk (Low): json.load can raise exceptions if the file content is not valid JSON.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 2220, 460, 5298, 13269, 611, 262, 2393, 2695, 318, 407, 4938, 19449, 13]",0.5,1018,sast_risk,263,json.load can raise exceptions if the file content is not valid JSON.,Low,1002,"        """"""Load index component data as DataFrame""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 8912, 6376, 7515, 1366, 355, 6060, 19778, 37811]"
üß† ML Signal: Pattern of updating a dictionary with new data.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 257, 22155, 351, 649, 1366, 13]",0.5,1040,ml_signal,269,Pattern of updating a dictionary with new data.,,1018,        with shelve.open(str(file_path)) as db:,"[220, 220, 220, 220, 220, 220, 220, 351, 7497, 303, 13, 9654, 7, 2536, 7, 7753, 62, 6978, 4008, 355, 20613, 25]"
‚ö†Ô∏è SAST Risk (Low): File is opened without exception handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 318, 4721, 1231, 6631, 9041, 13]",0.5,1063,sast_risk,276,File is opened without exception handling.,Low,1040,                if start <= dt <= end:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 923, 19841, 288, 83, 19841, 886, 25]"
‚ö†Ô∏è SAST Risk (Low): json.dump can raise exceptions if the data is not serializable.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 39455, 460, 5298, 13269, 611, 262, 1366, 318, 407, 11389, 13821, 13]",0.5,1086,sast_risk,276,json.dump can raise exceptions if the data is not serializable.,Low,1063,                if start <= dt <= end:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 923, 19841, 288, 83, 19841, 886, 25]"
"‚úÖ Best Practice: Method name contains a typo, should be 'load_contract_settings'","[26486, 227, 6705, 19939, 25, 11789, 1438, 4909, 257, 46517, 11, 815, 307, 705, 2220, 62, 28484, 62, 33692, 6]",1.0,1109,best_practice,276,"Method name contains a typo, should be 'load_contract_settings'",,1086,                if start <= dt <= end:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 923, 19841, 288, 83, 19841, 886, 25]"
‚úÖ Best Practice: Check if the path exists before opening the file,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 3108, 7160, 878, 4756, 262, 2393]",0.5,1109,best_practice,280,Check if the path exists before opening the file,,1109,,[]
‚ö†Ô∏è SAST Risk (Low): No error handling for file operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 4560]",0.5,1118,sast_risk,282,No error handling for file operations,Low,1109,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚ö†Ô∏è SAST Risk (Low): No error handling for JSON parsing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 19449, 32096]",1.0,1132,sast_risk,284,No error handling for JSON parsing,Low,1118,"        start: datetime | str,","[220, 220, 220, 220, 220, 220, 220, 923, 25, 4818, 8079, 930, 965, 11]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1146,best_practice,283,Type hinting for function parameters and return type improves code readability and maintainability,,1132,"        index_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 6376, 62, 1837, 23650, 25, 965, 11]"
‚úÖ Best Practice: Using Path.joinpath for file path operations improves code readability and cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 8554, 10644, 13, 22179, 6978, 329, 2393, 3108, 4560, 19575, 2438, 1100, 1799, 290, 3272, 12, 24254, 17764]",0.5,1155,best_practice,286,Using Path.joinpath for file path operations improves code readability and cross-platform compatibility,,1146,    ) -> list[str]:,"[220, 220, 220, 1267, 4613, 1351, 58, 2536, 5974]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the file path is validated or sanitized to prevent path traversal vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 2393, 3108, 318, 31031, 393, 5336, 36951, 284, 2948, 3108, 33038, 282, 23805]",1.0,1185,sast_risk,288,Ensure that the file path is validated or sanitized to prevent path traversal vulnerabilities,Low,1155,"        index_components: dict[datetime, list[str]] = self.load_component_data(","[220, 220, 220, 220, 220, 220, 220, 6376, 62, 5589, 3906, 25, 8633, 58, 19608, 8079, 11, 1351, 58, 2536, 11907, 796, 2116, 13, 2220, 62, 42895, 62, 7890, 7]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the dataset object is trusted or sanitized to prevent pickle injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 27039, 2134, 318, 13467, 393, 5336, 36951, 284, 2948, 2298, 293, 16954, 23805]",0.5,1198,sast_risk,290,Ensure that the dataset object is trusted or sanitized to prevent pickle injection vulnerabilities,Low,1185,"            start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 11]"
‚úÖ Best Practice: Use of type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1211,best_practice,290,Use of type hinting for function parameters and return type improves code readability and maintainability.,,1198,"            start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential path traversal if 'name' is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 705, 3672, 6, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,1219,sast_risk,292,Potential path traversal if 'name' is not properly validated or sanitized.,Low,1211,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Logging error messages can be used to train models to recognize error patterns.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4049, 6218, 460, 307, 973, 284, 4512, 4981, 284, 7564, 4049, 7572, 13]",1.0,1239,ml_signal,294,Logging error messages can be used to train models to recognize error patterns.,,1219,        component_symbols: set[str] = set(),"[220, 220, 220, 220, 220, 220, 220, 7515, 62, 1837, 2022, 10220, 25, 900, 58, 2536, 60, 796, 900, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Unpickling data from a file can lead to arbitrary code execution if the file is tampered with.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 27729, 1359, 1366, 422, 257, 2393, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 2393, 318, 21885, 13653, 351, 13]",1.0,1239,sast_risk,298,Unpickling data from a file can lead to arbitrary code execution if the file is tampered with.,Medium,1239,,[]
‚úÖ Best Practice: Use of type hint for file_path improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 2393, 62, 6978, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1255,best_practice,299,Use of type hint for file_path improves code readability and maintainability,,1239,        return list(component_symbols),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 42895, 62, 1837, 2022, 10220, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for path traversal if 'name' is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3108, 33038, 282, 611, 705, 3672, 6, 318, 407, 6105, 31031]",1.0,1266,sast_risk,301,Potential for path traversal if 'name' is not properly validated,Low,1255,    def load_component_filters(,"[220, 220, 220, 825, 3440, 62, 42895, 62, 10379, 1010, 7]"
üß† ML Signal: Logging error messages can be used to identify common failure points,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4049, 6218, 460, 307, 973, 284, 5911, 2219, 5287, 2173]",0.5,1280,ml_signal,303,Logging error messages can be used to identify common failure points,,1266,"        index_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 6376, 62, 1837, 23650, 25, 965, 11]"
‚ö†Ô∏è SAST Risk (Low): Directly deleting files without backup or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 34817, 3696, 1231, 11559, 393, 12641]",1.0,1301,sast_risk,306,Directly deleting files without backup or confirmation,Low,1280,"    ) -> dict[str, list[tuple[datetime, datetime]]]:","[220, 220, 220, 1267, 4613, 8633, 58, 2536, 11, 1351, 58, 83, 29291, 58, 19608, 8079, 11, 4818, 8079, 11907, 5974]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1314,best_practice,305,Type hinting improves code readability and maintainability,,1301,        end: datetime | str,"[220, 220, 220, 220, 220, 220, 220, 886, 25, 4818, 8079, 930, 965]"
üß† ML Signal: Use of list comprehension to process file paths,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 284, 1429, 2393, 13532]",1.0,1344,ml_signal,308,Use of list comprehension to process file paths,,1314,"        index_components: dict[datetime, list[str]] = self.load_component_data(","[220, 220, 220, 220, 220, 220, 220, 6376, 62, 5589, 3906, 25, 8633, 58, 19608, 8079, 11, 1351, 58, 2536, 11907, 796, 2116, 13, 2220, 62, 42895, 62, 7890, 7]"
üß† ML Signal: Use of pathlib for file operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3108, 8019, 329, 2393, 4560]",1.0,1360,ml_signal,309,Use of pathlib for file operations,,1344,"            index_symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 62, 1837, 23650, 11]"
‚úÖ Best Practice: Use of type annotations for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1373,best_practice,310,Use of type annotations for function parameters and return type improves code readability and maintainability.,,1360,"            start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 11]"
‚úÖ Best Practice: Using Path.joinpath is preferred over string concatenation for file paths.,"[26486, 227, 6705, 19939, 25, 8554, 10644, 13, 22179, 6978, 318, 9871, 625, 4731, 1673, 36686, 341, 329, 2393, 13532, 13]",0.5,1381,best_practice,312,Using Path.joinpath is preferred over string concatenation for file paths.,,1373,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Medium): Pickle is not secure against erroneous or maliciously constructed data. Ensure the source of the model is trusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12346, 293, 318, 407, 5713, 1028, 35366, 393, 17412, 306, 12006, 1366, 13, 48987, 262, 2723, 286, 262, 2746, 318, 13467, 13]",0.5,1395,sast_risk,314,Pickle is not secure against erroneous or maliciously constructed data. Ensure the source of the model is trusted.,Medium,1381,        # Get all trading dates and sort,"[220, 220, 220, 220, 220, 220, 220, 1303, 3497, 477, 7313, 9667, 290, 3297]"
‚úÖ Best Practice: Use of type hinting for the variable 'file_path' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 262, 7885, 705, 7753, 62, 6978, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1421,best_practice,315,Use of type hinting for the variable 'file_path' improves code readability and maintainability.,,1395,        trading_dates: list[datetime] = sorted(index_components.keys()),"[220, 220, 220, 220, 220, 220, 220, 7313, 62, 19581, 25, 1351, 58, 19608, 8079, 60, 796, 23243, 7, 9630, 62, 5589, 3906, 13, 13083, 28955]"
üß† ML Signal: Logging an error when a model file does not exist can be used to track model loading issues.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 281, 4049, 618, 257, 2746, 2393, 857, 407, 2152, 460, 307, 973, 284, 2610, 2746, 11046, 2428, 13]",1.0,1455,ml_signal,318,Logging an error when a model file does not exist can be used to track model loading issues.,,1421,"        component_filters: dict[str, list[tuple[datetime, datetime]]] = defaultdict(list)","[220, 220, 220, 220, 220, 220, 220, 7515, 62, 10379, 1010, 25, 8633, 58, 2536, 11, 1351, 58, 83, 29291, 58, 19608, 8079, 11, 4818, 8079, 11907, 60, 796, 4277, 11600, 7, 4868, 8]"
‚ö†Ô∏è SAST Risk (Medium): Using pickle for loading data can lead to arbitrary code execution if the file is tampered with.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 2298, 293, 329, 11046, 1366, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 2393, 318, 21885, 13653, 351, 13]",1.0,1475,sast_risk,321,Using pickle for loading data can lead to arbitrary code execution if the file is tampered with.,Medium,1455,        all_symbols: set[str] = set(),"[220, 220, 220, 220, 220, 220, 220, 477, 62, 1837, 2022, 10220, 25, 900, 58, 2536, 60, 796, 900, 3419]"
"üß† ML Signal: Function to remove a model file, indicating model lifecycle management","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 4781, 257, 2746, 2393, 11, 12739, 2746, 3868, 47510, 4542]",0.5,1475,ml_signal,324,"Function to remove a model file, indicating model lifecycle management",,1475,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for path traversal if `name` is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3108, 33038, 282, 611, 4600, 3672, 63, 318, 407, 31031]",0.5,1495,sast_risk,326,Potential for path traversal if `name` is not validated,Low,1475,        for vt_symbol in all_symbols:,"[220, 220, 220, 220, 220, 220, 220, 329, 410, 83, 62, 1837, 23650, 287, 477, 62, 1837, 2022, 10220, 25]"
üß† ML Signal: Logging an error when a model file does not exist,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 281, 4049, 618, 257, 2746, 2393, 857, 407, 2152]",0.5,1516,ml_signal,328,Logging an error when a model file does not exist,,1495,            period_end: datetime | None = None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2278, 62, 437, 25, 4818, 8079, 930, 6045, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Deleting a file without backup or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42226, 889, 257, 2393, 1231, 11559, 393, 12641]",0.5,1536,sast_risk,331,Deleting a file without backup or confirmation,Low,1516,            for trading_date in trading_dates:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 7313, 62, 4475, 287, 7313, 62, 19581, 25]"
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1559,best_practice,330,Type hinting for the return value improves code readability and maintainability,,1536,            # Iterate through each trading day to identify continuous holding periods,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 40806, 378, 832, 1123, 7313, 1110, 284, 5911, 12948, 4769, 9574]"
üß† ML Signal: Usage of file extensions like .pkl can indicate model serialization/deserialization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2393, 18366, 588, 764, 79, 41582, 460, 7603, 2746, 11389, 1634, 14, 8906, 48499, 1634]",0.5,1585,ml_signal,333,Usage of file extensions like .pkl can indicate model serialization/deserialization,,1559,                    if period_start is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2278, 62, 9688, 318, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Reliance on file extensions for model identification can be error-prone if files are misnamed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4718, 3610, 319, 2393, 18366, 329, 2746, 11795, 460, 307, 4049, 12, 46330, 611, 3696, 389, 2984, 13190]",0.5,1615,sast_risk,334,Reliance on file extensions for model identification can be error-prone if files are misnamed,Low,1585,                        period_start = trading_date,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2278, 62, 9688, 796, 7313, 62, 4475]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,1641,best_practice,333,Include a docstring to describe the method's purpose,,1615,                    if period_start is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2278, 62, 9688, 318, 6045, 25]"
‚úÖ Best Practice: Use type annotations for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 2099, 37647, 329, 2163, 10007, 290, 1441, 2099]",1.0,1667,best_practice,336,Use type annotations for function parameters and return type,,1641,                    period_end = trading_date,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2278, 62, 437, 796, 7313, 62, 4475]"
üß† ML Signal: Usage of file paths and file operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2393, 13532, 290, 2393, 4560]",0.5,1695,ml_signal,338,Usage of file paths and file operations,,1667,                    if period_start and period_end:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2278, 62, 9688, 290, 2278, 62, 437, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of path traversal if 'name' is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 3108, 33038, 282, 611, 705, 3672, 6, 318, 407, 31031]",0.5,1738,sast_risk,339,Potential risk of path traversal if 'name' is not validated,Low,1695,"                        component_filters[vt_symbol].append((period_start, period_end))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7515, 62, 10379, 1010, 58, 36540, 62, 1837, 23650, 4083, 33295, 19510, 41007, 62, 9688, 11, 2278, 62, 437, 4008]"
üß† ML Signal: Usage of specific file format (parquet) for data storage,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 2393, 5794, 357, 1845, 21108, 8, 329, 1366, 6143]",0.5,1766,ml_signal,341,Usage of specific file format (parquet) for data storage,,1738,                        period_end = None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2278, 62, 437, 796, 6045]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1783,best_practice,337,Type hinting for function parameters and return type improves code readability and maintainability,,1766,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Using Path.joinpath for file path construction is more readable and less error-prone than string concatenation,"[26486, 227, 6705, 19939, 25, 8554, 10644, 13, 22179, 6978, 329, 2393, 3108, 5103, 318, 517, 31744, 290, 1342, 4049, 12, 46330, 621, 4731, 1673, 36686, 341]",0.5,1811,best_practice,340,Using Path.joinpath for file path construction is more readable and less error-prone than string concatenation,,1783,                        period_start = None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2278, 62, 9688, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Logging file paths can expose sensitive information in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 2393, 13532, 460, 15651, 8564, 1321, 287, 17259]",0.5,1811,sast_risk,342,Logging file paths can expose sensitive information in logs,Low,1811,,[]
"üß† ML Signal: Usage of pl.read_parquet indicates interaction with parquet files, which can be a feature for ML models","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 458, 13, 961, 62, 1845, 21108, 9217, 10375, 351, 1582, 21108, 3696, 11, 543, 460, 307, 257, 3895, 329, 10373, 4981]",0.5,1811,ml_signal,346,"Usage of pl.read_parquet indicates interaction with parquet files, which can be a feature for ML models",,1811,,[]
üß† ML Signal: Use of file path operations to manage resources,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2393, 3108, 4560, 284, 6687, 4133]",0.5,1811,ml_signal,346,Use of file path operations to manage resources,,1811,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for path traversal if 'name' is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3108, 33038, 282, 611, 705, 3672, 6, 318, 407, 31031]",1.0,1811,sast_risk,348,Potential for path traversal if 'name' is not validated,Low,1811,,[]
üß† ML Signal: Logging error messages for non-existent files,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4049, 6218, 329, 1729, 12, 32786, 3696]",0.5,1820,ml_signal,350,Logging error messages for non-existent files,,1811,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚ö†Ô∏è SAST Risk (Low): Deleting files without backup or confirmation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42226, 889, 3696, 1231, 11559, 393, 12641]",0.5,1833,sast_risk,353,Deleting files without backup or confirmation,Low,1820,"        short_rate: float,","[220, 220, 220, 220, 220, 220, 220, 1790, 62, 4873, 25, 12178, 11]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1846,best_practice,352,Type hinting for the return type improves code readability and maintainability,,1833,"        long_rate: float,","[220, 220, 220, 220, 220, 220, 220, 890, 62, 4873, 25, 12178, 11]"
üß† ML Signal: Usage of file extensions to filter files can indicate data processing patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2393, 18366, 284, 8106, 3696, 460, 7603, 1366, 7587, 7572]",0.5,1857,ml_signal,354,Usage of file extensions to filter files can indicate data processing patterns,,1846,"        size: float,","[220, 220, 220, 220, 220, 220, 220, 2546, 25, 12178, 11]"

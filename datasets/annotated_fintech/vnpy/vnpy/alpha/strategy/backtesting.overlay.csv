annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007]",0.5,6,best_practice,17,Class docstring provides a brief description of the class purpose,,0,from ..logger import logger,"[6738, 11485, 6404, 1362, 1330, 49706]"
‚úÖ Best Practice: Class attribute with a default value for consistent usage across instances,"[26486, 227, 6705, 19939, 25, 5016, 11688, 351, 257, 4277, 1988, 329, 6414, 8748, 1973, 10245]",0.5,6,best_practice,20,Class attribute with a default value for consistent usage across instances,,6,,[]
‚úÖ Best Practice: Type annotations improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,11,best_practice,22,Type annotations improve code readability and maintainability,,6,class BacktestingEngine:,"[4871, 5157, 33407, 13798, 25]"
‚úÖ Best Practice: Initialize lists and dictionaries to avoid attribute errors,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 290, 48589, 3166, 284, 3368, 11688, 8563]",1.0,11,best_practice,24,Initialize lists and dictionaries to avoid attribute errors,,11,,[]
‚úÖ Best Practice: Declare attributes with expected types for clarity,"[26486, 227, 6705, 19939, 25, 16691, 533, 12608, 351, 2938, 3858, 329, 16287]",0.5,11,best_practice,26,Declare attributes with expected types for clarity,,11,,[]
‚úÖ Best Practice: Use set for unique collection of items,"[26486, 227, 6705, 19939, 25, 5765, 900, 329, 3748, 4947, 286, 3709]",0.5,28,best_practice,42,Use set for unique collection of items,,11,        self.annual_days: int = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1236, 723, 62, 12545, 25, 493, 796, 657]"
‚úÖ Best Practice: Use defaultdict for default values in dictionaries,"[26486, 227, 6705, 19939, 25, 5765, 4277, 11600, 329, 4277, 3815, 287, 48589, 3166]",0.5,48,best_practice,51,Use defaultdict for default values in dictionaries,,28,        self.dts: set[datetime] = set(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 67, 912, 25, 900, 58, 19608, 8079, 60, 796, 900, 3419]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,72,best_practice,62,Use of self to store instance variables for later use,,48,"        self.daily_results: dict[date, PortfolioDailyResult] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 29468, 62, 43420, 25, 8633, 58, 4475, 11, 4347, 13652, 28545, 23004, 60, 796, 23884]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,72,best_practice,64,Use of self to store instance variables for later use,,72,,[]
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,72,best_practice,66,Use of self to store instance variables for later use,,72,,[]
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,90,best_practice,68,Use of self to store instance variables for later use,,72,        self.signal_df: pl.DataFrame,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 12683, 282, 62, 7568, 25, 458, 13, 6601, 19778]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,99,best_practice,70,Use of self to store instance variables for later use,,90,    def set_parameters(,"[220, 220, 220, 825, 900, 62, 17143, 7307, 7]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,117,best_practice,72,Use of self to store instance variables for later use,,99,"        vt_symbols: list[str],","[220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 2022, 10220, 25, 1351, 58, 2536, 4357]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,129,best_practice,74,Use of self to store instance variables for later use,,117,"        start: datetime,","[220, 220, 220, 220, 220, 220, 220, 923, 25, 4818, 8079, 11]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,146,best_practice,76,Use of self to store instance variables for later use,,129,"        capital: int = 1_000_000,","[220, 220, 220, 220, 220, 220, 220, 3139, 25, 493, 796, 352, 62, 830, 62, 830, 11]"
‚úÖ Best Practice: Type hinting for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",0.5,160,best_practice,78,Type hinting for better code readability and maintainability,,146,        annual_days: int = 240,"[220, 220, 220, 220, 220, 220, 220, 5079, 62, 12545, 25, 493, 796, 14956]"
‚úÖ Best Practice: Type hinting for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",0.5,181,best_practice,81,Type hinting for better code readability and maintainability,,160,        self.vt_symbols = vt_symbols,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 36540, 62, 1837, 2022, 10220, 796, 410, 83, 62, 1837, 2022, 10220]"
‚ö†Ô∏è SAST Risk (Low): Potential logging of sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18931, 286, 8564, 1321]",1.0,181,sast_risk,83,Potential logging of sensitive information,Low,181,,[]
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,197,best_practice,87,Use of self to store instance variables for later use,,181,        self.risk_free = risk_free,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19121, 62, 5787, 796, 2526, 62, 5787]"
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,197,best_practice,89,Use of self to store instance variables for later use,,197,,[]
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,197,best_practice,91,Use of self to store instance variables for later use,,197,,[]
‚úÖ Best Practice: Use of self to store instance variables for later use,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 3650, 4554, 9633, 329, 1568, 779]",0.5,218,best_practice,93,Use of self to store instance variables for later use,,197,        for vt_symbol in vt_symbols:,"[220, 220, 220, 220, 220, 220, 220, 329, 410, 83, 62, 1837, 23650, 287, 410, 83, 62, 1837, 2022, 10220, 25]"
‚úÖ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,229,best_practice,80,Include type hints for method parameters and return type for better readability and maintainability,,218,"        """"""Set parameters""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 7248, 10007, 37811]"
üß† ML Signal: Storing a class type in an instance variable can indicate dynamic behavior or plugin patterns,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 1398, 2099, 287, 281, 4554, 7885, 460, 7603, 8925, 4069, 393, 13877, 7572]",0.5,229,ml_signal,83,Storing a class type in an instance variable can indicate dynamic behavior or plugin patterns,,229,,[]
üß† ML Signal: Instantiating a class with dynamic parameters can indicate a factory or strategy pattern,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 257, 1398, 351, 8925, 10007, 460, 7603, 257, 8860, 393, 4811, 3912]",0.5,241,ml_signal,86,Instantiating a class with dynamic parameters can indicate a factory or strategy pattern,,229,        self.capital = capital,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 27544, 796, 3139]"
üß† ML Signal: Storing a DataFrame in an instance variable can indicate data-driven behavior,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 6060, 19778, 287, 281, 4554, 7885, 460, 7603, 1366, 12, 15808, 4069]",0.5,241,ml_signal,89,Storing a DataFrame in an instance variable can indicate data-driven behavior,,241,,[]
üß† ML Signal: Logging usage pattern for tracking execution flow,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 9706, 5202]",1.0,241,ml_signal,89,Logging usage pattern for tracking execution flow,,241,,[]
‚úÖ Best Practice: Defaulting to current time if 'end' is not set,"[26486, 227, 6705, 19939, 25, 15161, 278, 284, 1459, 640, 611, 705, 437, 6, 318, 407, 900]",1.0,266,best_practice,92,Defaulting to current time if 'end' is not set,,241,        contract_settings: dict = self.lab.load_contract_setttings(),"[220, 220, 220, 220, 220, 220, 220, 2775, 62, 33692, 25, 8633, 796, 2116, 13, 23912, 13, 2220, 62, 28484, 62, 2617, 926, 654, 3419]"
üß† ML Signal: Logging usage pattern for error conditions,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 4049, 3403]",1.0,281,ml_signal,95,Logging usage pattern for error conditions,,266,            if not setting:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 4634, 25]"
‚úÖ Best Practice: Clearing data structures before loading new data,"[26486, 227, 6705, 19939, 25, 3779, 1723, 1366, 8573, 878, 11046, 649, 1366]",1.0,281,best_practice,98,Clearing data structures before loading new data,,281,,[]
üß† ML Signal: Usage of tqdm for progress tracking,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 256, 80, 36020, 329, 4371, 9646]",1.0,310,ml_signal,99,Usage of tqdm for progress tracking,,281,"            self.long_rates[vt_symbol] = setting[""long_rate""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 9700, 58, 36540, 62, 1837, 23650, 60, 796, 4634, 14692, 6511, 62, 4873, 8973]"
‚úÖ Best Practice: Using a set to ensure unique datetime entries,"[26486, 227, 6705, 19939, 25, 8554, 257, 900, 284, 4155, 3748, 4818, 8079, 12784]",0.5,310,best_practice,111,Using a set to ensure unique datetime entries,,310,,[]
üß† ML Signal: Logging usage pattern for reporting empty data,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 6447, 6565, 1366]",1.0,310,ml_signal,118,Logging usage pattern for reporting empty data,,310,,[]
üß† ML Signal: Logging usage pattern for successful completion,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 4388, 11939]",1.0,353,ml_signal,120,Logging usage pattern for successful completion,,310,"            logger.info(""Ëµ∑ÂßãÊó•ÊúüÂøÖÈ°ªÂ∞è‰∫éÁªìÊùüÊó•Êúü"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 164, 113, 115, 34650, 233, 33768, 98, 17312, 253, 33232, 227, 165, 94, 119, 22887, 237, 12859, 236, 163, 119, 241, 30266, 253, 33768, 98, 17312, 253, 4943]"
"üß† ML Signal: Method for running backtesting, useful for financial ML models","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 2491, 736, 33407, 11, 4465, 329, 3176, 10373, 4981]",0.5,366,ml_signal,116,"Method for running backtesting, useful for financial ML models",,353,        if not self.end:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 437, 25]"
‚úÖ Best Practice: Use of logging for tracking the initialization process,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 262, 37588, 1429]",0.5,366,best_practice,118,Use of logging for tracking the initialization process,,366,,[]
‚úÖ Best Practice: Sorting data before processing ensures consistent behavior,"[26486, 227, 6705, 19939, 25, 311, 24707, 1366, 878, 7587, 19047, 6414, 4069]",0.5,378,best_practice,121,Sorting data before processing ensures consistent behavior,,366,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚úÖ Best Practice: Use of logging for tracking the start of data replay,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 262, 923, 286, 1366, 24788]",0.5,391,best_practice,123,Use of logging for tracking the start of data replay,,378,        # Clear previously loaded historical data,"[220, 220, 220, 220, 220, 220, 220, 1303, 11459, 4271, 9639, 6754, 1366]"
"üß† ML Signal: Iterating over sorted timestamps, common in time-series analysis","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 23243, 4628, 395, 9430, 11, 2219, 287, 640, 12, 25076, 3781]",0.5,405,ml_signal,127,"Iterating over sorted timestamps, common in time-series analysis",,391,        # Load historical data for each symbol,"[220, 220, 220, 220, 220, 220, 220, 1303, 8778, 6754, 1366, 329, 1123, 6194]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563]",1.0,434,sast_risk,130,Catching broad exceptions can hide specific errors,Low,405,            data: list[BarData] = self.lab.load_bar_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 25, 1351, 58, 10374, 6601, 60, 796, 2116, 13, 23912, 13, 2220, 62, 5657, 62, 7890, 7]"
‚úÖ Best Practice: Logging exceptions helps in debugging,"[26486, 227, 6705, 19939, 25, 5972, 2667, 13269, 5419, 287, 28769]",0.5,455,best_practice,131,Logging exceptions helps in debugging,,434,"                vt_symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 11]"
‚úÖ Best Practice: Use of logging for tracking the end of data replay,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 262, 886, 286, 1366, 24788]",0.5,467,best_practice,135,Use of logging for tracking the end of data replay,,455,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Logging the start of a calculation process,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 923, 286, 257, 17952, 1429]",1.0,488,ml_signal,131,Logging the start of a calculation process,,467,"                vt_symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 11]"
üß† ML Signal: Logging a condition where no trades are present,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 257, 4006, 810, 645, 17674, 389, 1944]",0.5,506,ml_signal,134,Logging a condition where no trades are present,,488,                self.end,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 437]"
üß† ML Signal: Adding a trade to a daily result,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 3292, 284, 257, 4445, 1255]",1.0,523,ml_signal,142,Adding a trade to a daily result,,506,            if not data_count:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 1366, 62, 9127, 25]"
üß† ML Signal: Calculating PnL for a daily result,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 350, 77, 43, 329, 257, 4445, 1255]",1.0,523,ml_signal,144,Calculating PnL for a daily result,,523,,[]
üß† ML Signal: Collecting results for each field,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2482, 329, 1123, 2214]",1.0,564,ml_signal,164,Collecting results for each field,,523,"                logger.info(""Ëß¶ÂèëÂºÇÂ∏∏ÔºåÂõûÊµãÁªàÊ≠¢"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 164, 100, 99, 20998, 239, 28156, 224, 30585, 116, 171, 120, 234, 32368, 252, 38184, 233, 163, 119, 230, 29826, 95, 4943]"
‚úÖ Best Practice: Using a DataFrame for structured data storage,"[26486, 227, 6705, 19939, 25, 8554, 257, 6060, 19778, 329, 20793, 1366, 6143]",1.0,605,best_practice,164,Using a DataFrame for structured data storage,,564,"                logger.info(""Ëß¶ÂèëÂºÇÂ∏∏ÔºåÂõûÊµãÁªàÊ≠¢"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 164, 100, 99, 20998, 239, 28156, 224, 30585, 116, 171, 120, 234, 32368, 252, 38184, 233, 163, 119, 230, 29826, 95, 4943]"
üß† ML Signal: Logging the completion of a calculation process,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 11939, 286, 257, 17952, 1429]",1.0,621,ml_signal,180,Logging the completion of a calculation process,,605,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
üß† ML Signal: Logging the start of a calculation process,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 923, 286, 257, 17952, 1429]",1.0,638,ml_signal,178,Logging the start of a calculation process,,621,        for trade in self.trades.values():,"[220, 220, 220, 220, 220, 220, 220, 329, 3292, 287, 2116, 13, 2213, 2367, 13, 27160, 33529]"
‚úÖ Best Practice: Chaining methods for cleaner and more readable code,"[26486, 227, 6705, 19939, 25, 609, 1397, 5050, 329, 21723, 290, 517, 31744, 2438]",1.0,665,best_practice,205,Chaining methods for cleaner and more readable code,,638,"                ""date"", ""trade_count"", ""turnover"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 4475, 1600, 366, 25351, 62, 9127, 1600, 366, 15344, 2502, 1600]"
üß† ML Signal: Checking for positive balance,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 3967, 5236]",1.0,702,ml_signal,216,Checking for positive balance,,665,"                pl.Series(""trade_count"", results[""trade_count""], dtype=pl.Int64),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 458, 13, 27996, 7203, 25351, 62, 9127, 1600, 2482, 14692, 25351, 62, 9127, 33116, 288, 4906, 28, 489, 13, 5317, 2414, 828]"
üß† ML Signal: Logging a specific condition,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 257, 2176, 4006]",1.0,743,ml_signal,219,Logging a specific condition,,702,"                pl.Series(""trading_pnl"", results[""trading_pnl""], dtype=pl.Float64),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 458, 13, 27996, 7203, 2213, 4980, 62, 79, 21283, 1600, 2482, 14692, 2213, 4980, 62, 79, 21283, 33116, 288, 4906, 28, 489, 13, 43879, 2414, 828]"
üß† ML Signal: Logging the end of a calculation process,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 886, 286, 257, 17952, 1429]",1.0,755,ml_signal,257,Logging the end of a calculation process,,743,        # Check if bankruptcy occurred,"[220, 220, 220, 220, 220, 220, 220, 1303, 6822, 611, 17235, 5091]"
‚ö†Ô∏è SAST Risk (Low): Potential data integrity issue if NaN values are not expected,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 11540, 2071, 611, 11013, 45, 3815, 389, 407, 2938]",0.5,755,sast_risk,312,Potential data integrity issue if NaN values are not expected,Low,755,,[]
üß† ML Signal: Logging the completion of a process,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 11939, 286, 257, 1429]",1.0,779,ml_signal,313,Logging the completion of a process,,755,"            total_commission = df[""commission""].sum()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 785, 3411, 796, 47764, 14692, 785, 3411, 1, 4083, 16345, 3419]"
üß† ML Signal: Usage of a DataFrame suggests data manipulation or analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6060, 19778, 5644, 1366, 17512, 393, 3781]",1.0,779,ml_signal,312,Usage of a DataFrame suggests data manipulation or analysis,,779,,[]
üß† ML Signal: Usage of make_subplots indicates data visualization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 787, 62, 7266, 489, 1747, 9217, 1366, 32704]",1.0,803,ml_signal,313,Usage of make_subplots indicates data visualization,,779,"            total_commission = df[""commission""].sum()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 785, 3411, 796, 47764, 14692, 785, 3411, 1, 4083, 16345, 3419]"
üß† ML Signal: Usage of go.Scatter suggests time series or trend visualization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 467, 13, 3351, 1436, 5644, 640, 2168, 393, 5182, 32704]",1.0,833,ml_signal,319,Usage of go.Scatter suggests time series or trend visualization,,803,"            total_trade_count = cast(int, df[""trade_count""].sum())","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 25351, 62, 9127, 796, 3350, 7, 600, 11, 47764, 14692, 25351, 62, 9127, 1, 4083, 16345, 28955]"
üß† ML Signal: Usage of go.Scatter with fill indicates area chart visualization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 467, 13, 3351, 1436, 351, 6070, 9217, 1989, 8262, 32704]",1.0,861,ml_signal,325,Usage of go.Scatter with fill indicates area chart visualization,,833,"            return_std = cast(float, df[""return""].std()) * 100","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 19282, 796, 3350, 7, 22468, 11, 47764, 14692, 7783, 1, 4083, 19282, 28955, 1635, 1802]"
üß† ML Signal: Usage of go.Bar suggests categorical or distribution visualization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 467, 13, 10374, 5644, 4253, 12409, 393, 6082, 32704]",1.0,895,ml_signal,337,Usage of go.Bar suggests categorical or distribution visualization,,861,"        logger.info(f""È¶ñ‰∏™‰∫§ÊòìÊó•Ôºö  {start_date}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 165, 99, 244, 10310, 103, 12859, 97, 23626, 241, 33768, 98, 171, 120, 248, 220, 1391, 9688, 62, 4475, 92, 4943]"
üß† ML Signal: Usage of go.Histogram suggests distribution analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 467, 13, 13749, 21857, 5644, 6082, 3781]",1.0,895,ml_signal,339,Usage of go.Histogram suggests distribution analysis,,895,,[]
‚úÖ Best Practice: Explicitly specify the subplot location for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 850, 29487, 4067, 329, 16287]",1.0,928,best_practice,341,Explicitly specify the subplot location for clarity,,895,"        logger.info(f""ÁõàÂà©‰∫§ÊòìÊó•Ôºö  {profit_days}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 33566, 230, 26344, 102, 12859, 97, 23626, 241, 33768, 98, 171, 120, 248, 220, 1391, 9183, 62, 12545, 92, 4943]"
‚úÖ Best Practice: Explicitly specify the subplot location for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 850, 29487, 4067, 329, 16287]",1.0,928,best_practice,343,Explicitly specify the subplot location for clarity,,928,,[]
‚úÖ Best Practice: Explicitly specify the subplot location for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 850, 29487, 4067, 329, 16287]",1.0,965,best_practice,345,Explicitly specify the subplot location for clarity,,928,"        logger.info(f""ÁªìÊùüËµÑÈáëÔºö  {end_balance:,.2f}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 163, 119, 241, 30266, 253, 164, 113, 226, 34932, 239, 171, 120, 248, 220, 1391, 437, 62, 20427, 25, 38508, 17, 69, 92, 4943]"
‚úÖ Best Practice: Explicitly specify the subplot location for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 850, 29487, 4067, 329, 16287]",1.0,1003,best_practice,347,Explicitly specify the subplot location for clarity,,965,"        logger.info(f""ÊÄªÊî∂ÁõäÁéáÔºö  {total_return:,.2f}%"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 45250, 119, 162, 242, 114, 33566, 232, 163, 236, 229, 171, 120, 248, 220, 1391, 23350, 62, 7783, 25, 38508, 17, 69, 92, 4, 4943]"
‚úÖ Best Practice: Set layout dimensions for consistent visualization,"[26486, 227, 6705, 19939, 25, 5345, 12461, 15225, 329, 6414, 32704]",1.0,1041,best_practice,347,Set layout dimensions for consistent visualization,,1003,"        logger.info(f""ÊÄªÊî∂ÁõäÁéáÔºö  {total_return:,.2f}%"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 45250, 119, 162, 242, 114, 33566, 232, 163, 236, 229, 171, 120, 248, 220, 1391, 23350, 62, 7783, 25, 38508, 17, 69, 92, 4, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potentially large data visualization could impact performance,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 1588, 1366, 32704, 714, 2928, 2854]",0.5,1079,sast_risk,347,Potentially large data visualization could impact performance,Low,1041,"        logger.info(f""ÊÄªÊî∂ÁõäÁéáÔºö  {total_return:,.2f}%"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 45250, 119, 162, 242, 114, 33566, 232, 163, 236, 229, 171, 120, 248, 220, 1391, 23350, 62, 7783, 25, 38508, 17, 69, 92, 4, 4943]"
üß† ML Signal: Loading and processing financial data for performance analysis,"[8582, 100, 254, 10373, 26484, 25, 12320, 290, 7587, 3176, 1366, 329, 2854, 3781]",1.0,1079,ml_signal,343,Loading and processing financial data for performance analysis,,1079,,[]
‚úÖ Best Practice: Using list comprehension for better readability and performance,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 329, 1365, 1100, 1799, 290, 2854]",0.5,1117,best_practice,347,Using list comprehension for better readability and performance,,1079,"        logger.info(f""ÊÄªÊî∂ÁõäÁéáÔºö  {total_return:,.2f}%"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 45250, 119, 162, 242, 114, 33566, 232, 163, 236, 229, 171, 120, 248, 220, 1391, 23350, 62, 7783, 25, 38508, 17, 69, 92, 4, 4943]"
üß† ML Signal: Creating a DataFrame with financial performance metrics,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 351, 3176, 2854, 20731]",1.0,1155,ml_signal,347,Creating a DataFrame with financial performance metrics,,1117,"        logger.info(f""ÊÄªÊî∂ÁõäÁéáÔºö  {total_return:,.2f}%"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 45250, 119, 162, 242, 114, 33566, 232, 163, 236, 229, 171, 120, 248, 220, 1391, 23350, 62, 7783, 25, 38508, 17, 69, 92, 4, 4943]"
üß† ML Signal: Visualizing financial performance metrics using Plotly,"[8582, 100, 254, 10373, 26484, 25, 15612, 2890, 3176, 2854, 20731, 1262, 28114, 306]",1.0,1194,ml_signal,364,Visualizing financial performance metrics using Plotly,,1155,"        logger.info(f""Êî∂ÁõäÊ†áÂáÜÂ∑ÆÔºö  {return_std:,.2f}%"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 162, 242, 114, 33566, 232, 43718, 229, 49035, 228, 32432, 106, 171, 120, 248, 220, 1391, 7783, 62, 19282, 25, 38508, 17, 69, 92, 4, 4943]"
üß† ML Signal: Creating visual elements for financial data,"[8582, 100, 254, 10373, 26484, 25, 30481, 5874, 4847, 329, 3176, 1366]",0.5,1216,ml_signal,376,Creating visual elements for financial data,,1194,"            ""max_drawdown"": max_drawdown,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9806, 62, 19334, 2902, 1298, 3509, 62, 19334, 2902, 11]"
üß† ML Signal: Adding traces to the Plotly figure for visualization,"[8582, 100, 254, 10373, 26484, 25, 18247, 20675, 284, 262, 28114, 306, 3785, 329, 32704]",0.5,1232,ml_signal,424,Adding traces to the Plotly figure for visualization,,1216,"            fillcolor=""red"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 8043, 2625, 445, 1600]"
‚úÖ Best Practice: Setting layout properties for better visualization,"[26486, 227, 6705, 19939, 25, 25700, 12461, 6608, 329, 1365, 32704]",1.0,1248,best_practice,427,Setting layout properties for better visualization,,1232,"            name=""Drawdown""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 25302, 2902, 1]"
‚úÖ Best Practice: Type hinting for 'd' improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 67, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1262,best_practice,446,Type hinting for 'd' improves code readability and maintainability,,1248,        for bar in benchmark_bars:,"[220, 220, 220, 220, 220, 220, 220, 329, 2318, 287, 18335, 62, 34046, 25]"
‚úÖ Best Practice: Type hinting for 'close_prices' improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 19836, 62, 1050, 1063, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1262,best_practice,448,Type hinting for 'close_prices' improves code readability and maintainability,,1262,,[]
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'bar.vt_symbol' is not in 'self.pre_closes',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 5657, 13, 36540, 62, 1837, 23650, 6, 318, 407, 287, 705, 944, 13, 3866, 62, 565, 4629, 6]",1.0,1279,sast_risk,450,Potential KeyError if 'bar.vt_symbol' is not in 'self.pre_closes',Low,1262,        performance_df: pl.DataFrame = (,"[220, 220, 220, 220, 220, 220, 220, 2854, 62, 7568, 25, 458, 13, 6601, 19778, 796, 357]"
‚úÖ Best Practice: Type hinting for 'daily_result' improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 29468, 62, 20274, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1320,best_practice,455,Type hinting for 'daily_result' improves code readability and maintainability,,1279,"                cumulative_cost=(pl.col(""commission"") / pl.col(""balance"").shift(1)).cum_sum()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 23818, 62, 15805, 16193, 489, 13, 4033, 7203, 785, 3411, 4943, 1220, 458, 13, 4033, 7203, 20427, 11074, 30846, 7, 16, 29720, 36340, 62, 16345, 3419]"
üß† ML Signal: Method call on 'daily_result' could indicate a pattern of updating or processing data,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 705, 29468, 62, 20274, 6, 714, 7603, 257, 3912, 286, 19698, 393, 7587, 1366]",0.5,1337,ml_signal,459,Method call on 'daily_result' could indicate a pattern of updating or processing data,,1320,            ).with_columns(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4480, 62, 28665, 82, 7]"
üß† ML Signal: Storing new 'PortfolioDailyResult' in 'self.daily_results' could indicate a pattern of data accumulation,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 649, 705, 13924, 13652, 28545, 23004, 6, 287, 705, 944, 13, 29468, 62, 43420, 6, 714, 7603, 257, 3912, 286, 1366, 24106]",0.5,1354,ml_signal,462,Storing new 'PortfolioDailyResult' in 'self.daily_results' could indicate a pattern of data accumulation,,1337,            ).with_columns(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4480, 62, 28665, 82, 7]"
‚úÖ Best Practice: Ensure that cross_order is called after updating bars to maintain logical flow.,"[26486, 227, 6705, 19939, 25, 48987, 326, 3272, 62, 2875, 318, 1444, 706, 19698, 9210, 284, 5529, 12219, 5202, 13]",0.5,1376,best_practice,484,Ensure that cross_order is called after updating bars to maintain logical flow.,,1354,        strategy_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 4811, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
‚úÖ Best Practice: Ensure that on_bars is called after updating bars to maintain logical flow.,"[26486, 227, 6705, 19939, 25, 48987, 326, 319, 62, 34046, 318, 1444, 706, 19698, 9210, 284, 5529, 12219, 5202, 13]",0.5,1398,best_practice,486,Ensure that on_bars is called after updating bars to maintain logical flow.,,1376,"            y=performance_df[""cumulative_return""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 28, 26585, 62, 7568, 14692, 36340, 13628, 62, 7783, 33116]"
‚úÖ Best Practice: Ensure that update_daily_close is called after updating bars to maintain logical flow.,"[26486, 227, 6705, 19939, 25, 48987, 326, 4296, 62, 29468, 62, 19836, 318, 1444, 706, 19698, 9210, 284, 5529, 12219, 5202, 13]",0.5,1414,best_practice,488,Ensure that update_daily_close is called after updating bars to maintain logical flow.,,1398,"            name=""Strategy""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 13290, 4338, 1]"
üß† ML Signal: Iterating over active limit orders to match them with market data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4075, 4179, 6266, 284, 2872, 606, 351, 1910, 1366]",1.0,1422,ml_signal,489,Iterating over active limit orders to match them with market data,,1414,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Accessing market data for a specific symbol,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1910, 1366, 329, 257, 2176, 6194]",1.0,1441,ml_signal,491,Accessing market data for a specific symbol,,1422,"            x=performance_df[""date""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2124, 28, 26585, 62, 7568, 14692, 4475, 33116]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying order status without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 1502, 3722, 1231, 21201]",1.0,1460,sast_risk,497,Directly modifying order status without validation,Low,1441,"            x=performance_df[""date""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2124, 28, 26585, 62, 7568, 14692, 4475, 33116]"
üß† ML Signal: Updating order status in strategy,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 1502, 3722, 287, 4811]",1.0,1476,ml_signal,500,Updating order status in strategy,,1460,"            name=""Benchmark""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 2625, 44199, 4102, 1]"
üß† ML Signal: Using price tick information for calculations,"[8582, 100, 254, 10373, 26484, 25, 8554, 2756, 4378, 1321, 329, 16765]",0.5,1498,ml_signal,502,Using price tick information for calculations,,1476,        excess_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 6992, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
üß† ML Signal: Accessing previous close price for limit calculations,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2180, 1969, 2756, 329, 4179, 16765]",0.5,1520,ml_signal,502,Accessing previous close price for limit calculations,,1498,        excess_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 6992, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
‚úÖ Best Practice: Using round_to function for consistent rounding,"[26486, 227, 6705, 19939, 25, 8554, 2835, 62, 1462, 2163, 329, 6414, 38185]",0.5,1545,best_practice,508,Using round_to function for consistent rounding,,1520,        net_excess_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 2010, 62, 1069, 919, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
üß† ML Signal: Determining if a long order can be crossed,"[8582, 100, 254, 10373, 26484, 25, 360, 13221, 278, 611, 257, 890, 1502, 460, 307, 12606]",0.5,1570,ml_signal,508,Determining if a long order can be crossed,,1545,        net_excess_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 2010, 62, 1069, 919, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
üß† ML Signal: Determining if a short order can be crossed,"[8582, 100, 254, 10373, 26484, 25, 360, 13221, 278, 611, 257, 1790, 1502, 460, 307, 12606]",0.5,1606,ml_signal,516,Determining if a short order can be crossed,,1570,"            y=self.daily_df[""turnover""] / self.daily_df[""balance""].shift(1),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 28, 944, 13, 29468, 62, 7568, 14692, 15344, 2502, 8973, 1220, 2116, 13, 29468, 62, 7568, 14692, 20427, 1, 4083, 30846, 7, 16, 828]"
‚ö†Ô∏è SAST Risk (Low): Directly setting order as fully traded,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 4634, 1502, 355, 3938, 14018]",1.0,1614,sast_risk,525,Directly setting order as fully traded,Low,1606,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Updating order status in strategy,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 1502, 3722, 287, 4811]",1.0,1642,ml_signal,526,Updating order status in strategy,,1614,        net_excess_drawdown_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 2010, 62, 1069, 919, 62, 19334, 2902, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
‚ö†Ô∏è SAST Risk (Low): Removing order from active list without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3982, 5165, 1502, 422, 4075, 1351, 1231, 21201]",1.0,1670,sast_risk,526,Removing order from active list without validation,Low,1642,        net_excess_drawdown_curve: go.Scatter = go.Scatter(,"[220, 220, 220, 220, 220, 220, 220, 2010, 62, 1069, 919, 62, 19334, 2902, 62, 22019, 303, 25, 467, 13, 3351, 1436, 796, 467, 13, 3351, 1436, 7]"
üß† ML Signal: Incrementing trade count for unique trade IDs,"[8582, 100, 254, 10373, 26484, 25, 10791, 434, 278, 3292, 954, 329, 3748, 3292, 32373]",1.0,1699,ml_signal,538,Incrementing trade count for unique trade IDs,,1670,"        fig.add_trace(net_excess_curve, row=2, col=1)","[220, 220, 220, 220, 220, 220, 220, 2336, 13, 2860, 62, 40546, 7, 3262, 62, 1069, 919, 62, 22019, 303, 11, 5752, 28, 17, 11, 951, 28, 16, 8]"
üß† ML Signal: Determining trade price based on order direction,"[8582, 100, 254, 10373, 26484, 25, 360, 13221, 278, 3292, 2756, 1912, 319, 1502, 4571]",0.5,1728,ml_signal,538,Determining trade price based on order direction,,1699,"        fig.add_trace(net_excess_curve, row=2, col=1)","[220, 220, 220, 220, 220, 220, 220, 2336, 13, 2860, 62, 40546, 7, 3262, 62, 1069, 919, 62, 22019, 303, 11, 5752, 28, 17, 11, 951, 28, 16, 8]"
üß† ML Signal: Creating a new trade data object,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 649, 3292, 1366, 2134]",1.0,1758,ml_signal,540,Creating a new trade data object,,1728,"        fig.add_trace(excess_drawdown_curve, row=4, col=1)","[220, 220, 220, 220, 220, 220, 220, 2336, 13, 2860, 62, 40546, 7, 1069, 919, 62, 19334, 2902, 62, 22019, 303, 11, 5752, 28, 19, 11, 951, 28, 16, 8]"
üß† ML Signal: Calculating trade turnover based on size,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 3292, 25079, 1912, 319, 2546]",0.5,1790,ml_signal,553,Calculating trade turnover based on size,,1758,"            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 11600, 7, 12860, 25928, 28, 17821, 11, 10706, 10394, 28, 16, 11, 10706, 8043, 11639, 15047, 46130, 33809]"
üß† ML Signal: Calculating commission based on trade direction,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 5810, 1912, 319, 3292, 4571]",0.5,1823,ml_signal,556,Calculating commission based on trade direction,,1790,"            yaxis4=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 19, 28, 11600, 7, 12860, 25928, 28, 17821, 11, 10706, 10394, 28, 16, 11, 10706, 8043, 11639, 15047, 46130, 33809]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying cash balance based on trade,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 5003, 5236, 1912, 319, 3292]",1.0,1853,sast_risk,561,Directly modifying cash balance based on trade,Low,1823,"    def update_daily_close(self, bars: dict[str, BarData], dt: datetime) -> None:","[220, 220, 220, 825, 4296, 62, 29468, 62, 19836, 7, 944, 11, 9210, 25, 8633, 58, 2536, 11, 2409, 6601, 4357, 288, 83, 25, 4818, 8079, 8, 4613, 6045, 25]"
üß† ML Signal: Updating strategy with new trade information,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 4811, 351, 649, 3292, 1321]",1.0,1872,ml_signal,567,Updating strategy with new trade information,,1853,            if not bar.close_price:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2318, 13, 19836, 62, 20888, 25]"
üß† ML Signal: Storing trade data for future reference,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 3292, 1366, 329, 2003, 4941]",0.5,1905,ml_signal,570,Storing trade data for future reference,,1872,                close_prices[bar.vt_symbol] = bar.close_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1969, 62, 1050, 1063, 58, 5657, 13, 36540, 62, 1837, 23650, 60, 796, 2318, 13, 19836, 62, 20888]"
‚úÖ Best Practice: Check for the presence of 'datetime' before proceeding with operations,"[26486, 227, 6705, 19939, 25, 6822, 329, 262, 4931, 286, 705, 19608, 8079, 6, 878, 18788, 351, 4560]",0.5,1937,best_practice,553,Check for the presence of 'datetime' before proceeding with operations,,1905,"            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 28, 11600, 7, 12860, 25928, 28, 17821, 11, 10706, 10394, 28, 16, 11, 10706, 8043, 11639, 15047, 46130, 33809]"
‚úÖ Best Practice: Logging provides insight into the function's execution flow,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 11281, 656, 262, 2163, 338, 9706, 5202]",1.0,1970,best_practice,555,Logging provides insight into the function's execution flow,,1937,"            yaxis3=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 22704, 18, 28, 11600, 7, 12860, 25928, 28, 17821, 11, 10706, 10394, 28, 16, 11, 10706, 8043, 11639, 15047, 46130, 33809]"
‚úÖ Best Practice: Remove timezone information for consistent datetime comparison,"[26486, 227, 6705, 19939, 25, 17220, 640, 11340, 1321, 329, 6414, 4818, 8079, 7208]",1.0,1978,best_practice,558,Remove timezone information for consistent datetime comparison,,1970,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Filtering data based on datetime is a common pattern in time-series analysis,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 1366, 1912, 319, 4818, 8079, 318, 257, 2219, 3912, 287, 640, 12, 25076, 3781]",1.0,1978,ml_signal,560,Filtering data based on datetime is a common pattern in time-series analysis,,1978,,[]
‚úÖ Best Practice: Check if the DataFrame is empty to handle cases where no data matches the filter,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 6060, 19778, 318, 6565, 284, 5412, 2663, 810, 645, 1366, 7466, 262, 8106]",1.0,2008,best_practice,561,Check if the DataFrame is empty to handle cases where no data matches the filter,,1978,"    def update_daily_close(self, bars: dict[str, BarData], dt: datetime) -> None:","[220, 220, 220, 825, 4296, 62, 29468, 62, 19836, 7, 944, 11, 9210, 25, 8633, 58, 2536, 11, 2409, 6601, 4357, 288, 83, 25, 4818, 8079, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Logging when no data is found helps in debugging and understanding data flow,"[26486, 227, 6705, 19939, 25, 5972, 2667, 618, 645, 1366, 318, 1043, 5419, 287, 28769, 290, 4547, 1366, 5202]",1.0,2038,best_practice,561,Logging when no data is found helps in debugging and understanding data flow,,2008,"    def update_daily_close(self, bars: dict[str, BarData], dt: datetime) -> None:","[220, 220, 220, 825, 4296, 62, 29468, 62, 19836, 7, 944, 11, 9210, 25, 8633, 58, 2536, 11, 2409, 6601, 4357, 288, 83, 25, 4818, 8079, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Use of round_to function suggests precision handling for price,"[26486, 227, 6705, 19939, 25, 5765, 286, 2835, 62, 1462, 2163, 5644, 15440, 9041, 329, 2756]",0.5,2038,best_practice,571,Use of round_to function suggests precision handling for price,,2038,,[]
üß† ML Signal: Extracting symbol and exchange from vt_symbol indicates a pattern of symbol management,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 6194, 290, 5163, 422, 410, 83, 62, 1837, 23650, 9217, 257, 3912, 286, 6194, 4542]",0.5,2038,ml_signal,573,Extracting symbol and exchange from vt_symbol indicates a pattern of symbol management,,2038,,[]
üß† ML Signal: Incrementing order count is a common pattern in order management systems,"[8582, 100, 254, 10373, 26484, 25, 10791, 434, 278, 1502, 954, 318, 257, 2219, 3912, 287, 1502, 4542, 3341]",1.0,2050,ml_signal,574,Incrementing order count is a common pattern in order management systems,,2038,        if daily_result:,"[220, 220, 220, 220, 220, 220, 220, 611, 4445, 62, 20274, 25]"
‚úÖ Best Practice: Type hinting for order variable improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1502, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2062,best_practice,574,Type hinting for order variable improves code readability and maintainability,,2050,        if daily_result:,"[220, 220, 220, 220, 220, 220, 220, 611, 4445, 62, 20274, 25]"
üß† ML Signal: Storing active limit orders in a dictionary is a common pattern for tracking orders,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 4075, 4179, 6266, 287, 257, 22155, 318, 257, 2219, 3912, 329, 9646, 6266]",1.0,2098,ml_signal,590,Storing active limit orders in a dictionary is a common pattern for tracking orders,,2062,"            bar: BarData | None = self.history_data.get((dt, vt_symbol), None)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2318, 25, 2409, 6601, 930, 6045, 796, 2116, 13, 23569, 62, 7890, 13, 1136, 19510, 28664, 11, 410, 83, 62, 1837, 23650, 828, 6045, 8]"
üß† ML Signal: Storing all limit orders in a dictionary is a common pattern for order management,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 477, 4179, 6266, 287, 257, 22155, 318, 257, 2219, 3912, 329, 1502, 4542]",1.0,2123,ml_signal,592,Storing all limit orders in a dictionary is a common pattern for order management,,2098,            # Check if historical data for the specified time of the contract is obtained,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 6822, 611, 6754, 1366, 329, 262, 7368, 640, 286, 262, 2775, 318, 6492]"
‚úÖ Best Practice: Returning a list of order IDs allows for easy tracking of multiple orders,"[26486, 227, 6705, 19939, 25, 42882, 257, 1351, 286, 1502, 32373, 3578, 329, 2562, 9646, 286, 3294, 6266]",0.5,2146,best_practice,594,Returning a list of order IDs allows for easy tracking of multiple orders,,2123,                # Update K-line for order matching,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 10133, 509, 12, 1370, 329, 1502, 12336]"
"üß† ML Signal: Checks for existence of order before proceeding, indicating a pattern of validation.","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 6224, 286, 1502, 878, 18788, 11, 12739, 257, 3912, 286, 21201, 13]",0.5,2146,ml_signal,591,"Checks for existence of order before proceeding, indicating a pattern of validation.",,2146,,[]
üß† ML Signal: Use of pop to remove and return an item from a dictionary.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1461, 284, 4781, 290, 1441, 281, 2378, 422, 257, 22155, 13]",1.0,2169,ml_signal,594,Use of pop to remove and return an item from a dictionary.,,2146,                # Update K-line for order matching,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 10133, 509, 12, 1370, 329, 1502, 12336]"
"üß† ML Signal: Directly modifying object attributes, indicating a pattern of state change.","[8582, 100, 254, 10373, 26484, 25, 4128, 306, 30620, 2134, 12608, 11, 12739, 257, 3912, 286, 1181, 1487, 13]",0.5,2197,ml_signal,596,"Directly modifying object attributes, indicating a pattern of state change.",,2169,                # Cache K-line data for strategy.on_bars update,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 34088, 509, 12, 1370, 1366, 329, 4811, 13, 261, 62, 34046, 4296]"
‚ö†Ô∏è SAST Risk (Low): Assumes strategy has an update_order method; potential for AttributeError if not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 4811, 468, 281, 4296, 62, 2875, 2446, 26, 2785, 329, 3460, 4163, 12331, 611, 407, 31031, 13]",0.5,2231,sast_risk,598,Assumes strategy has an update_order method; potential for AttributeError if not validated.,Low,2197,"            # If not available, but there is contract data cached in the self.bars dictionary, use previous data to fill","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1002, 407, 1695, 11, 475, 612, 318, 2775, 1366, 39986, 287, 262, 2116, 13, 34046, 22155, 11, 779, 2180, 1366, 284, 6070]"
‚úÖ Best Practice: Type hinting for function parameters and return value improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2259,best_practice,596,Type hinting for function parameters and return value improves code readability and maintainability.,,2231,                # Cache K-line data for strategy.on_bars update,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 34088, 509, 12, 1370, 1366, 329, 4811, 13, 261, 62, 34046, 4296]"
üß† ML Signal: Usage of f-string for string formatting.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 277, 12, 8841, 329, 4731, 33313, 13]",1.0,2282,ml_signal,599,Usage of f-string for string formatting.,,2259,            elif vt_symbol in self.bars:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 410, 83, 62, 1837, 23650, 287, 2116, 13, 34046, 25]"
"üß† ML Signal: Appending to a list, indicating a pattern of collecting or storing data.","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 257, 1351, 11, 12739, 257, 3912, 286, 13157, 393, 23069, 1366, 13]",1.0,2282,ml_signal,601,"Appending to a list, indicating a pattern of collecting or storing data.",,2282,,[]
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",1.0,2313,best_practice,600,Include a docstring to describe the method's purpose,,2282,                old_bar: BarData = self.bars[vt_symbol],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1468, 62, 5657, 25, 2409, 6601, 796, 2116, 13, 34046, 58, 36540, 62, 1837, 23650, 60]"
üß† ML Signal: Accessing and returning data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 290, 8024, 1366, 422, 257, 22155]",0.5,2341,ml_signal,603,Accessing and returning data from a dictionary,,2313,"                    symbol=old_bar.symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 28, 727, 62, 5657, 13, 1837, 23650, 11]"
üß† ML Signal: Method signature and return type hint can be used to infer method behavior and expected output,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 1441, 2099, 9254, 460, 307, 973, 284, 13249, 2446, 4069, 290, 2938, 5072]",0.5,2369,ml_signal,603,Method signature and return type hint can be used to infer method behavior and expected output,,2341,"                    symbol=old_bar.symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 28, 727, 62, 5657, 13, 1837, 23650, 11]"
‚úÖ Best Practice: Using list() to explicitly convert values to a list ensures compatibility with different Python versions,"[26486, 227, 6705, 19939, 25, 8554, 1351, 3419, 284, 11777, 10385, 3815, 284, 257, 1351, 19047, 17764, 351, 1180, 11361, 6300]",0.5,2400,best_practice,606,Using list() to explicitly convert values to a list ensures compatibility with different Python versions,,2369,"                    open_price=old_bar.close_price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 62, 20888, 28, 727, 62, 5657, 13, 19836, 62, 20888, 11]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2431,best_practice,606,Type hinting for the return type improves code readability and maintainability,,2400,"                    open_price=old_bar.close_price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 62, 20888, 28, 727, 62, 5657, 13, 19836, 62, 20888, 11]"
üß† ML Signal: Usage of dictionary values to retrieve all items,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 3815, 284, 19818, 477, 3709]",0.5,2462,ml_signal,609,Usage of dictionary values to retrieve all items,,2431,"                    close_price=old_bar.close_price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1969, 62, 20888, 28, 727, 62, 5657, 13, 19836, 62, 20888, 11]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2478,best_practice,611,Use of type hint for return value improves code readability and maintainability,,2462,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Accessing an attribute of an object, indicating a common pattern of object-oriented programming","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 281, 11688, 286, 281, 2134, 11, 12739, 257, 2219, 3912, 286, 2134, 12, 17107, 8300]",0.5,2478,ml_signal,613,"Accessing an attribute of an object, indicating a common pattern of object-oriented programming",,2478,,[]
üß† ML Signal: Iterating over a dictionary to calculate a cumulative value,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 15284, 257, 23818, 1988]",1.0,2496,ml_signal,615,Iterating over a dictionary to calculate a cumulative value,,2478,        self.strategy.on_bars(bars),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2536, 4338, 13, 261, 62, 34046, 7, 34046, 8]"
üß† ML Signal: Accessing elements from a dictionary using a key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 4847, 422, 257, 22155, 1262, 257, 1994]",1.0,2518,ml_signal,617,Accessing elements from a dictionary using a key,,2496,"        self.update_daily_close(self.bars, dt)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19119, 62, 29468, 62, 19836, 7, 944, 13, 34046, 11, 288, 83, 8]"
üß† ML Signal: Accessing elements from a dictionary using a key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 4847, 422, 257, 22155, 1262, 257, 1994]",1.0,2531,ml_signal,619,Accessing elements from a dictionary using a key,,2518,    def cross_order(self) -> None:,"[220, 220, 220, 825, 3272, 62, 2875, 7, 944, 8, 4613, 6045, 25]"
üß† ML Signal: Performing arithmetic operations to calculate a value,"[8582, 100, 254, 10373, 26484, 25, 2448, 15464, 34768, 4560, 284, 15284, 257, 1988]",1.0,2554,ml_signal,621,Performing arithmetic operations to calculate a value,,2531,        for order in list(self.active_limit_orders.values()):,"[220, 220, 220, 220, 220, 220, 220, 329, 1502, 287, 1351, 7, 944, 13, 5275, 62, 32374, 62, 6361, 13, 27160, 3419, 2599]"
‚úÖ Best Practice: Returning a calculated value from a function,"[26486, 227, 6705, 19939, 25, 42882, 257, 10488, 1988, 422, 257, 2163]",0.5,2554,best_practice,623,Returning a calculated value from a function,,2554,,[]
‚úÖ Best Practice: Use of type annotations for constructor parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 23772, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2578,best_practice,624,Use of type annotations for constructor parameters improves code readability and maintainability.,,2554,            long_cross_price: float = bar.low_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 890, 62, 19692, 62, 20888, 25, 12178, 796, 2318, 13, 9319, 62, 20888]"
‚úÖ Best Practice: Initializing lists and variables in the constructor is a good practice for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 8341, 290, 9633, 287, 262, 23772, 318, 257, 922, 3357, 329, 16287, 290, 5529, 1799, 13]",1.0,2578,best_practice,628,Initializing lists and variables in the constructor is a good practice for clarity and maintainability.,,2578,,[]
"üß† ML Signal: Method for adding data to a collection, indicating a pattern of data accumulation","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4375, 1366, 284, 257, 4947, 11, 12739, 257, 3912, 286, 1366, 24106]",1.0,2578,ml_signal,637,"Method for adding data to a collection, indicating a pattern of data accumulation",,2578,,[]
‚úÖ Best Practice: Using type annotations for method parameters and return type,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 2446, 10007, 290, 1441, 2099]",1.0,2578,best_practice,640,Using type annotations for method parameters and return type,,2578,,[]
‚úÖ Best Practice: Check if pre_close is not None before assignment,"[26486, 227, 6705, 19939, 25, 6822, 611, 662, 62, 19836, 318, 407, 6045, 878, 16237]",1.0,2596,best_practice,649,Check if pre_close is not None before assignment,,2578,            short_cross: bool = (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1790, 62, 19692, 25, 20512, 796, 357]"
üß† ML Signal: Calculation of holding PnL based on position and price difference,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 4769, 350, 77, 43, 1912, 319, 2292, 290, 2756, 3580]",1.0,2608,ml_signal,654,Calculation of holding PnL based on position and price difference,,2596,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Tracking the number of trades,"[8582, 100, 254, 10373, 26484, 25, 37169, 262, 1271, 286, 17674]",1.0,2630,ml_signal,656,Tracking the number of trades,,2608,            if not long_cross and not short_cross:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 890, 62, 19692, 290, 407, 1790, 62, 19692, 25]"
üß† ML Signal: Differentiating logic based on trade direction,"[8582, 100, 254, 10373, 26484, 25, 20615, 26336, 9156, 1912, 319, 3292, 4571]",1.0,2630,ml_signal,658,Differentiating logic based on trade direction,,2630,,[]
üß† ML Signal: Calculation of turnover based on trade volume and price,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 25079, 1912, 319, 3292, 6115, 290, 2756]",1.0,2646,ml_signal,667,Calculation of turnover based on trade volume and price,,2630,            # Generate trade information,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2980, 378, 3292, 1321]"
üß† ML Signal: Calculation of trading PnL based on position change and price difference,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 7313, 350, 77, 43, 1912, 319, 2292, 1487, 290, 2756, 3580]",1.0,2646,ml_signal,669,Calculation of trading PnL based on position change and price difference,,2646,,[]
üß† ML Signal: Accumulating turnover for all trades,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 25079, 329, 477, 17674]",1.0,2677,ml_signal,671,Accumulating turnover for all trades,,2646,"                trade_price = min(order.price, long_best_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 20888, 796, 949, 7, 2875, 13, 20888, 11, 890, 62, 13466, 62, 20888, 8]"
üß† ML Signal: Calculation of commission based on turnover and rate,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 5810, 1912, 319, 25079, 290, 2494]",1.0,2708,ml_signal,673,Calculation of commission based on turnover and rate,,2677,"                trade_price = max(order.price, short_best_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 20888, 796, 3509, 7, 2875, 13, 20888, 11, 1790, 62, 13466, 62, 20888, 8]"
üß† ML Signal: Calculation of total PnL as sum of trading and holding PnL,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2472, 350, 77, 43, 355, 2160, 286, 7313, 290, 4769, 350, 77, 43]",1.0,2727,ml_signal,675,Calculation of total PnL as sum of trading and holding PnL,,2708,            trade: TradeData = TradeData(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 25, 9601, 6601, 796, 9601, 6601, 7]"
üß† ML Signal: Calculation of net PnL after deducting commission,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2010, 350, 77, 43, 706, 18777, 278, 5810]",1.0,2749,ml_signal,677,Calculation of net PnL after deducting commission,,2727,"                exchange=order.exchange,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5163, 28, 2875, 13, 1069, 3803, 11]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2780,best_practice,671,Use of type hints for function parameters and return type improves code readability and maintainability.,,2749,"                trade_price = min(order.price, long_best_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 20888, 796, 949, 7, 2875, 13, 20888, 11, 890, 62, 13466, 62, 20888, 8]"
üß† ML Signal: Tracking changes to object attributes can be useful for understanding object state changes over time.,"[8582, 100, 254, 10373, 26484, 25, 37169, 2458, 284, 2134, 12608, 460, 307, 4465, 329, 4547, 2134, 1181, 2458, 625, 640, 13]",0.5,2811,ml_signal,673,Tracking changes to object attributes can be useful for understanding object state changes over time.,,2780,"                trade_price = max(order.price, short_best_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 20888, 796, 3509, 7, 2875, 13, 20888, 11, 1790, 62, 13466, 62, 20888, 8]"
‚úÖ Best Practice: Type annotations for parameters and return value improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2833,best_practice,676,Type annotations for parameters and return value improve code readability and maintainability.,,2811,"                symbol=order.symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 28, 2875, 13, 1837, 23650, 11]"
‚úÖ Best Practice: Type annotations for attributes improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2856,best_practice,678,Type annotations for attributes improve code readability and maintainability.,,2833,"                orderid=order.orderid,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 312, 28, 2875, 13, 2875, 312, 11]"
üß† ML Signal: Iterating over dictionary items is a common pattern that can be used to train ML models.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 318, 257, 2219, 3912, 326, 460, 307, 973, 284, 4512, 10373, 4981, 13]",1.0,2882,ml_signal,685,Iterating over dictionary items is a common pattern that can be used to train ML models.,,2856,"                gateway_name=self.gateway_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24308, 62, 3672, 28, 944, 13, 10494, 1014, 62, 3672, 11]"
"üß† ML Signal: Method for adding trade data, useful for learning trade patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4375, 3292, 1366, 11, 4465, 329, 4673, 3292, 7572]",1.0,2903,ml_signal,693,"Method for adding trade data, useful for learning trade patterns",,2882,            if trade.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3292, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
‚úÖ Best Practice: Type hinting for 'trade' and return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 25351, 6, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2943,best_practice,694,Type hinting for 'trade' and return type improves code readability and maintainability,,2903,                trade_commission: float = trade_turnover * self.long_rates[trade.vt_symbol],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 785, 3411, 25, 12178, 796, 3292, 62, 15344, 2502, 1635, 2116, 13, 6511, 62, 9700, 58, 25351, 13, 36540, 62, 1837, 23650, 60]"
"üß† ML Signal: Accessing contract results by trade symbol, indicating a pattern of data organization","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2775, 2482, 416, 3292, 6194, 11, 12739, 257, 3912, 286, 1366, 4009]",1.0,2956,ml_signal,695,"Accessing contract results by trade symbol, indicating a pattern of data organization",,2943,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Type hinting for 'contract_result' improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 28484, 62, 20274, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2969,best_practice,695,Type hinting for 'contract_result' improves code readability and maintainability,,2956,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"üß† ML Signal: Method call to add trade to contract result, useful for learning trade processing patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 751, 3292, 284, 2775, 1255, 11, 4465, 329, 4673, 3292, 7587, 7572]",1.0,2982,ml_signal,695,"Method call to add trade to contract result, useful for learning trade processing patterns",,2969,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Storing input parameters as instance variables can improve code organization and access.,"[26486, 227, 6705, 19939, 25, 520, 3255, 5128, 10007, 355, 4554, 9633, 460, 2987, 2438, 4009, 290, 1895, 13]",0.5,2982,best_practice,704,Storing input parameters as instance variables can improve code organization and access.,,2982,,[]
‚úÖ Best Practice: Storing input parameters as instance variables can improve code organization and access.,"[26486, 227, 6705, 19939, 25, 520, 3255, 5128, 10007, 355, 4554, 9633, 460, 2987, 2438, 4009, 290, 1895, 13]",0.5,3004,best_practice,706,Storing input parameters as instance variables can improve code organization and access.,,2982,            self.strategy.update_trade(trade),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2536, 4338, 13, 19119, 62, 25351, 7, 25351, 8]"
üß† ML Signal: Iterating over items in a dictionary is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3709, 287, 257, 22155, 318, 257, 2219, 3912, 13]",0.5,3029,ml_signal,707,Iterating over items in a dictionary is a common pattern.,,3004,            self.trades[trade.vt_tradeid] = trade,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2213, 2367, 58, 25351, 13, 36540, 62, 25351, 312, 60, 796, 3292]"
üß† ML Signal: Method calls with multiple parameters can indicate complex operations.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 351, 3294, 10007, 460, 7603, 3716, 4560, 13]",0.5,3054,ml_signal,707,Method calls with multiple parameters can indicate complex operations.,,3029,            self.trades[trade.vt_tradeid] = trade,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2213, 2367, 58, 25351, 13, 36540, 62, 25351, 312, 60, 796, 3292]"
üß† ML Signal: Using dictionary get method with default values is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8554, 22155, 651, 2446, 351, 4277, 3815, 318, 257, 2219, 3912, 13]",0.5,3054,ml_signal,714,Using dictionary get method with default values is a common pattern.,,3054,,[]
üß† ML Signal: Using dictionary get method with default values is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8554, 22155, 651, 2446, 351, 4277, 3815, 318, 257, 2219, 3912, 13]",0.5,3054,ml_signal,714,Using dictionary get method with default values is a common pattern.,,3054,,[]
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if vt_symbol is not in sizes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 410, 83, 62, 1837, 23650, 318, 407, 287, 10620, 13]",0.5,3088,sast_risk,716,Potential KeyError if vt_symbol is not in sizes.,Low,3054,"        signal: pl.DataFrame = self.signal_df.filter(pl.col(""datetime"") == dt)","[220, 220, 220, 220, 220, 220, 220, 6737, 25, 458, 13, 6601, 19778, 796, 2116, 13, 12683, 282, 62, 7568, 13, 24455, 7, 489, 13, 4033, 7203, 19608, 8079, 4943, 6624, 288, 83, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if vt_symbol is not in long_rates.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 410, 83, 62, 1837, 23650, 318, 407, 287, 890, 62, 9700, 13]",0.5,3102,sast_risk,718,Potential KeyError if vt_symbol is not in long_rates.,Low,3088,        if signal.is_empty():,"[220, 220, 220, 220, 220, 220, 220, 611, 6737, 13, 271, 62, 28920, 33529]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if vt_symbol is not in short_rates.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 410, 83, 62, 1837, 23650, 318, 407, 287, 1790, 62, 9700, 13]",0.5,3102,sast_risk,720,Potential KeyError if vt_symbol is not in short_rates.,Low,3102,,[]
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3110,ml_signal,723,Accumulating values in a loop is a common pattern.,,3102,    def send_order(,"[220, 220, 220, 825, 3758, 62, 2875, 7]"
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3123,ml_signal,725,Accumulating values in a loop is a common pattern.,,3110,"        strategy: AlphaStrategy,","[220, 220, 220, 220, 220, 220, 220, 4811, 25, 12995, 13290, 4338, 11]"
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3134,ml_signal,727,Accumulating values in a loop is a common pattern.,,3123,"        direction: Direction,","[220, 220, 220, 220, 220, 220, 220, 4571, 25, 41837, 11]"
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3146,ml_signal,728,Accumulating values in a loop is a common pattern.,,3134,"        offset: Offset,","[220, 220, 220, 220, 220, 220, 220, 11677, 25, 3242, 2617, 11]"
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3157,ml_signal,730,Accumulating values in a loop is a common pattern.,,3146,"        volume: float,","[220, 220, 220, 220, 220, 220, 220, 6115, 25, 12178, 11]"
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3168,ml_signal,730,Accumulating values in a loop is a common pattern.,,3157,"        volume: float,","[220, 220, 220, 220, 220, 220, 220, 6115, 25, 12178, 11]"
üß† ML Signal: Accumulating values in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 6366, 388, 8306, 3815, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,3179,ml_signal,730,Accumulating values in a loop is a common pattern.,,3168,"        volume: float,","[220, 220, 220, 220, 220, 220, 220, 6115, 25, 12178, 11]"
‚úÖ Best Practice: Storing results in a dictionary for easy access and modification.,"[26486, 227, 6705, 19939, 25, 520, 3255, 2482, 287, 257, 22155, 329, 2562, 1895, 290, 17613, 13]",0.5,3190,best_practice,730,Storing results in a dictionary for easy access and modification.,,3179,"        volume: float,","[220, 220, 220, 220, 220, 220, 220, 6115, 25, 12178, 11]"
‚úÖ Best Practice: Use of dictionary update method for merging dictionaries,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 4296, 2446, 329, 35981, 48589, 3166]",0.5,3199,best_practice,724,Use of dictionary update method for merging dictionaries,,3190,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Iterating over dictionary items to process key-value pairs,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 284, 1429, 1994, 12, 8367, 14729]",1.0,3214,ml_signal,726,Iterating over dictionary items to process key-value pairs,,3199,"        vt_symbol: str,","[220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 25, 965, 11]"
üß† ML Signal: Use of type hinting for variable assignment,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 9254, 278, 329, 7885, 16237]",0.5,3226,ml_signal,728,Use of type hinting for variable assignment,,3214,"        offset: Offset,","[220, 220, 220, 220, 220, 220, 220, 11677, 25, 3242, 2617, 11]"
üß† ML Signal: Conditional logic to handle existing and new entries,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 4683, 290, 649, 12784]",0.5,3237,ml_signal,730,Conditional logic to handle existing and new entries,,3226,"        volume: float,","[220, 220, 220, 220, 220, 220, 220, 6115, 25, 12178, 11]"
üß† ML Signal: Creating new instances when a condition is not met,"[8582, 100, 254, 10373, 26484, 25, 30481, 649, 10245, 618, 257, 4006, 318, 407, 1138]",0.5,3248,ml_signal,730,Creating new instances when a condition is not met,,3237,"        volume: float,","[220, 220, 220, 220, 220, 220, 220, 6115, 25, 12178, 11]"

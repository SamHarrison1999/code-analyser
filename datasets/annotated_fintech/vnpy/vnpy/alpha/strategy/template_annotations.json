[
  {
    "line": 3,
    "text": "from typing import TYPE_CHECKING",
    "annotation": "\u2705 Best Practice: Importing specific classes or functions is preferred for clarity and to avoid namespace pollution.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      41876,
      62,
      50084,
      2751
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      393,
      5499,
      318,
      9871,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific classes or functions is preferred for clarity and to avoid namespace pollution."
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability."
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: TYPE_CHECKING is used to avoid circular imports and improve performance during runtime.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      41876,
      62,
      50084,
      2751,
      318,
      973,
      284,
      3368,
      18620,
      17944,
      290,
      2987,
      2854,
      1141,
      19124,
      13
    ],
    "label": "best_practice",
    "reason": "TYPE_CHECKING is used to avoid circular imports and improve performance during runtime."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of ABCMeta indicates this is an abstract base class, which is a good design for defining interfaces.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      9738,
      48526,
      9217,
      428,
      318,
      281,
      12531,
      2779,
      1398,
      11,
      543,
      318,
      257,
      922,
      1486,
      329,
      16215,
      20314,
      13
    ],
    "label": "best_practice",
    "reason": "Use of ABCMeta indicates this is an abstract base class, which is a good design for defining interfaces."
  },
  {
    "line": 19,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 7,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 21,
    "text": "        strategy_name: str,",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4811,
      62,
      3672,
      25,
      965,
      11
    ],
    "start_token": 16,
    "end_token": 29,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 23,
    "text": "        setting: dict",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4634,
      25,
      8633
    ],
    "start_token": 29,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 25,
    "text": "        \"\"\"Constructor\"\"\"",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      42316,
      273,
      37811
    ],
    "start_token": 39,
    "end_token": 50,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 27,
    "text": "        self.strategy_name: str = strategy_name",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2536,
      4338,
      62,
      3672,
      25,
      965,
      796,
      4811,
      62,
      3672
    ],
    "start_token": 50,
    "end_token": 69,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 28,
    "text": "        self.vt_symbols: list[str] = vt_symbols",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      36540,
      62,
      1837,
      2022,
      10220,
      25,
      1351,
      58,
      2536,
      60,
      796,
      410,
      83,
      62,
      1837,
      2022,
      10220
    ],
    "start_token": 69,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 31,
    "text": "        self.pos_data: dict[str, float] = defaultdict(float)        # Actual positions",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1930,
      62,
      7890,
      25,
      8633,
      58,
      2536,
      11,
      12178,
      60,
      796,
      4277,
      11600,
      7,
      22468,
      8,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      33520,
      6116
    ],
    "start_token": 95,
    "end_token": 130,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 32,
    "text": "        self.target_data: dict[str, float] = defaultdict(float)     # Target positions",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic attribute setting based on configuration.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      16793,
      62,
      7890,
      25,
      8633,
      58,
      2536,
      11,
      12178,
      60,
      796,
      4277,
      11600,
      7,
      22468,
      8,
      220,
      220,
      220,
      220,
      1303,
      12744,
      6116
    ],
    "start_token": 130,
    "end_token": 162,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      11688,
      4634,
      1912,
      319,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic attribute setting based on configuration."
  },
  {
    "line": 35,
    "text": "        self.orders: dict[str, OrderData] = {}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using hasattr and setattr can lead to security risks if not controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6361,
      25,
      8633,
      58,
      2536,
      11,
      8284,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 162,
    "end_token": 182,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      468,
      35226,
      290,
      900,
      35226,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6856,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using hasattr and setattr can lead to security risks if not controlled."
  },
  {
    "line": 32,
    "text": "        self.target_data: dict[str, float] = defaultdict(float)     # Target positions",
    "annotation": "\u2705 Best Practice: Use of abstractmethod decorator indicates this method should be overridden in subclasses",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      16793,
      62,
      7890,
      25,
      8633,
      58,
      2536,
      11,
      12178,
      60,
      796,
      4277,
      11600,
      7,
      22468,
      8,
      220,
      220,
      220,
      220,
      1303,
      12744,
      6116
    ],
    "start_token": 182,
    "end_token": 214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12531,
      24396,
      11705,
      1352,
      9217,
      428,
      2446,
      815,
      307,
      23170,
      4651,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of abstractmethod decorator indicates this method should be overridden in subclasses"
  },
  {
    "line": 36,
    "text": "        self.active_orderids: set[str] = set()",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      2875,
      2340,
      25,
      900,
      58,
      2536,
      60,
      796,
      900,
      3419
    ],
    "start_token": 214,
    "end_token": 235,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 39,
    "text": "        for k, v in setting.items():",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod decorator indicates that this method should be implemented by subclasses, enforcing a contract for subclass implementations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      479,
      11,
      410,
      287,
      4634,
      13,
      23814,
      33529
    ],
    "start_token": 235,
    "end_token": 251,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      11705,
      1352,
      9217,
      326,
      428,
      2446,
      815,
      307,
      9177,
      416,
      850,
      37724,
      11,
      26587,
      257,
      2775,
      329,
      47611,
      25504,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod decorator indicates that this method should be implemented by subclasses, enforcing a contract for subclass implementations."
  },
  {
    "line": 38,
    "text": "        # Set strategy parameters",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5345,
      4811,
      10007
    ],
    "start_token": 251,
    "end_token": 262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the method"
  },
  {
    "line": 40,
    "text": "            if hasattr(self, k):",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      468,
      35226,
      7,
      944,
      11,
      479,
      2599
    ],
    "start_token": 262,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the method"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\u2705 Best Practice: Implement the method or raise NotImplementedError if it's meant to be overridden",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 281,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      262,
      2446,
      393,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      611,
      340,
      338,
      4001,
      284,
      307,
      23170,
      4651
    ],
    "label": "best_practice",
    "reason": "Implement the method or raise NotImplementedError if it's meant to be overridden"
  },
  {
    "line": 43,
    "text": "    @abstractmethod",
    "annotation": "\ud83e\udde0 ML Signal: Method updates internal state based on trade direction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      397,
      8709,
      24396
    ],
    "start_token": 281,
    "end_token": 288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      5387,
      1181,
      1912,
      319,
      3292,
      4571
    ],
    "label": "ml_signal",
    "reason": "Method updates internal state based on trade direction"
  },
  {
    "line": 44,
    "text": "    def on_init(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if trade.vt_symbol not in pos_data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      15003,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 288,
    "end_token": 301,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      3292,
      13,
      36540,
      62,
      1837,
      23650,
      407,
      287,
      1426,
      62,
      7890
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if trade.vt_symbol not in pos_data"
  },
  {
    "line": 48,
    "text": "    @abstractmethod",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if trade.vt_symbol not in pos_data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      397,
      8709,
      24396
    ],
    "start_token": 301,
    "end_token": 308,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      3292,
      13,
      36540,
      62,
      1837,
      23650,
      407,
      287,
      1426,
      62,
      7890
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if trade.vt_symbol not in pos_data"
  },
  {
    "line": 50,
    "text": "        \"\"\"Bar slice callback\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method triggers an event after updating state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      10374,
      16416,
      23838,
      37811
    ],
    "start_token": 308,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      20022,
      281,
      1785,
      706,
      19698,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method triggers an event after updating state"
  },
  {
    "line": 50,
    "text": "        \"\"\"Bar slice callback\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method updates an order, indicating a pattern of modifying state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      10374,
      16416,
      23838,
      37811
    ],
    "start_token": 320,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      281,
      1502,
      11,
      12739,
      257,
      3912,
      286,
      30620,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method updates an order, indicating a pattern of modifying state"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checks if an order is active, indicating a pattern of conditional logic",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 332,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      611,
      281,
      1502,
      318,
      4075,
      11,
      12739,
      257,
      3912,
      286,
      26340,
      9156
    ],
    "label": "ml_signal",
    "reason": "Checks if an order is active, indicating a pattern of conditional logic"
  },
  {
    "line": 54,
    "text": "    def on_trade(self, trade: TradeData) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Removes an order from active list, indicating a pattern of state management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      25351,
      7,
      944,
      11,
      3292,
      25,
      9601,
      6601,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 332,
    "end_token": 350,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3982,
      5241,
      281,
      1502,
      422,
      4075,
      1351,
      11,
      12739,
      257,
      3912,
      286,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Removes an order from active list, indicating a pattern of state management"
  },
  {
    "line": 53,
    "text": "    @abstractmethod",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and return type can be used to infer method behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      397,
      8709,
      24396
    ],
    "start_token": 350,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      1441,
      2099,
      460,
      307,
      973,
      284,
      13249,
      2446,
      4069
    ],
    "label": "ml_signal",
    "reason": "Method signature and return type can be used to infer method behavior"
  },
  {
    "line": 56,
    "text": "        pass",
    "annotation": "\ud83e\udde0 ML Signal: Docstring provides insight into method purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1208
    ],
    "start_token": 357,
    "end_token": 365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14432,
      8841,
      3769,
      11281,
      656,
      2446,
      4007
    ],
    "label": "ml_signal",
    "reason": "Docstring provides insight into method purpose"
  },
  {
    "line": 58,
    "text": "    def update_trade(self, trade: TradeData) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining and delegation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4296,
      62,
      25351,
      7,
      944,
      11,
      3292,
      25,
      9601,
      6601,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 365,
    "end_token": 383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      290,
      22635,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method chaining and delegation pattern"
  },
  {
    "line": 56,
    "text": "        pass",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with type hints indicating expected input and output types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1208
    ],
    "start_token": 383,
    "end_token": 391,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      2099,
      20269,
      12739,
      2938,
      5128,
      290,
      5072,
      3858
    ],
    "label": "ml_signal",
    "reason": "Method signature with type hints indicating expected input and output types"
  },
  {
    "line": 59,
    "text": "        \"\"\"Update trade data\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      10260,
      3292,
      1366,
      37811
    ],
    "start_token": 391,
    "end_token": 403,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call pattern with specific parameters"
  },
  {
    "line": 59,
    "text": "        \"\"\"Update trade data\"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters and return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      10260,
      3292,
      1366,
      37811
    ],
    "start_token": 403,
    "end_token": 415,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters and return type improves code readability and maintainability"
  },
  {
    "line": 62,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Method name 'sell' indicates a financial transaction, useful for identifying domain-specific actions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 415,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      705,
      7255,
      6,
      9217,
      257,
      3176,
      8611,
      11,
      4465,
      329,
      13720,
      7386,
      12,
      11423,
      4028
    ],
    "label": "ml_signal",
    "reason": "Method name 'sell' indicates a financial transaction, useful for identifying domain-specific actions"
  },
  {
    "line": 63,
    "text": "            self.pos_data[trade.vt_symbol] -= trade.volume",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'self' suggests this is a method within a class, indicating object-oriented design patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1930,
      62,
      7890,
      58,
      25351,
      13,
      36540,
      62,
      1837,
      23650,
      60,
      48185,
      3292,
      13,
      29048
    ],
    "start_token": 424,
    "end_token": 452,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      944,
      6,
      5644,
      428,
      318,
      257,
      2446,
      1626,
      257,
      1398,
      11,
      12739,
      2134,
      12,
      17107,
      1486,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of 'self' suggests this is a method within a class, indicating object-oriented design patterns"
  },
  {
    "line": 64,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calling 'send_order' with specific parameters can indicate a pattern of trading operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 452,
    "end_token": 452,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      705,
      21280,
      62,
      2875,
      6,
      351,
      2176,
      10007,
      460,
      7603,
      257,
      3912,
      286,
      7313,
      4560
    ],
    "label": "ml_signal",
    "reason": "Calling 'send_order' with specific parameters can indicate a pattern of trading operations"
  },
  {
    "line": 62,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Type hints for parameters and return value improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 452,
    "end_token": 461,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      329,
      10007,
      290,
      1441,
      1988,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hints for parameters and return value improve code readability and maintainability"
  },
  {
    "line": 65,
    "text": "        self.on_trade(trade)",
    "annotation": "\ud83e\udde0 ML Signal: Method name and docstring indicate a trading action, useful for behavior modeling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      261,
      62,
      25351,
      7,
      25351,
      8
    ],
    "start_token": 461,
    "end_token": 476,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      290,
      2205,
      8841,
      7603,
      257,
      7313,
      2223,
      11,
      4465,
      329,
      4069,
      21128
    ],
    "label": "ml_signal",
    "reason": "Method name and docstring indicate a trading action, useful for behavior modeling"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self.send_order suggests a pattern of order execution in trading systems",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 476,
    "end_token": 476,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      13,
      21280,
      62,
      2875,
      5644,
      257,
      3912,
      286,
      1502,
      9706,
      287,
      7313,
      3341
    ],
    "label": "ml_signal",
    "reason": "Usage of self.send_order suggests a pattern of order execution in trading systems"
  },
  {
    "line": 65,
    "text": "        self.on_trade(trade)",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters and return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      261,
      62,
      25351,
      7,
      25351,
      8
    ],
    "start_token": 476,
    "end_token": 491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters and return type improves code readability and maintainability"
  },
  {
    "line": 68,
    "text": "        \"\"\"Update order data\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method name and docstring indicate a financial trading operation, useful for domain-specific ML models",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      10260,
      1502,
      1366,
      37811
    ],
    "start_token": 491,
    "end_token": 503,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      290,
      2205,
      8841,
      7603,
      257,
      3176,
      7313,
      4905,
      11,
      4465,
      329,
      7386,
      12,
      11423,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Method name and docstring indicate a financial trading operation, useful for domain-specific ML models"
  },
  {
    "line": 68,
    "text": "        \"\"\"Update order data\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self.send_order suggests a pattern of delegating tasks to other methods, useful for understanding code structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      10260,
      1502,
      1366,
      37811
    ],
    "start_token": 503,
    "end_token": 515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      13,
      21280,
      62,
      2875,
      5644,
      257,
      3912,
      286,
      8570,
      803,
      8861,
      284,
      584,
      5050,
      11,
      4465,
      329,
      4547,
      2438,
      4645
    ],
    "label": "ml_signal",
    "reason": "Usage of self.send_order suggests a pattern of delegating tasks to other methods, useful for understanding code structure"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\u2705 Best Practice: Specify the type for the list to improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 515,
    "end_token": 515,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      2099,
      329,
      262,
      1351,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Specify the type for the list to improve code readability and maintainability"
  },
  {
    "line": 81,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over order IDs to track active orders",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 515,
    "end_token": 515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1502,
      32373,
      284,
      2610,
      4075,
      6266
    ],
    "label": "ml_signal",
    "reason": "Iterating over order IDs to track active orders"
  },
  {
    "line": 83,
    "text": "        \"\"\"Sell to close position\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Adding order IDs to a set for tracking active orders",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      50,
      695,
      284,
      1969,
      2292,
      37811
    ],
    "start_token": 515,
    "end_token": 529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      1502,
      32373,
      284,
      257,
      900,
      329,
      9646,
      4075,
      6266
    ],
    "label": "ml_signal",
    "reason": "Adding order IDs to a set for tracking active orders"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning a list of order IDs after sending orders",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 529,
    "end_token": 529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1351,
      286,
      1502,
      32373,
      706,
      7216,
      6266
    ],
    "label": "ml_signal",
    "reason": "Returning a list of order IDs after sending orders"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method for canceling orders, useful for learning order management patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 529,
    "end_token": 529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      10450,
      1359,
      6266,
      11,
      4465,
      329,
      4673,
      1502,
      4542,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method for canceling orders, useful for learning order management patterns"
  },
  {
    "line": 86,
    "text": "    def short(self, vt_symbol: str, price: float, volume: float) -> list[str]:",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1790,
      7,
      944,
      11,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      11,
      2756,
      25,
      12178,
      11,
      6115,
      25,
      12178,
      8,
      4613,
      1351,
      58,
      2536,
      5974
    ],
    "start_token": 529,
    "end_token": 558,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose"
  },
  {
    "line": 88,
    "text": "        return self.send_order(vt_symbol, Direction.SHORT, Offset.OPEN, price, volume)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for misuse if `vt_orderid` is not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      21280,
      62,
      2875,
      7,
      36540,
      62,
      1837,
      23650,
      11,
      41837,
      13,
      9693,
      9863,
      11,
      3242,
      2617,
      13,
      3185,
      1677,
      11,
      2756,
      11,
      6115,
      8
    ],
    "start_token": 558,
    "end_token": 592,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      29169,
      611,
      4600,
      36540,
      62,
      2875,
      312,
      63,
      318,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for misuse if `vt_orderid` is not validated or sanitized"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of strategy engine to cancel orders, indicating a pattern of delegation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 592,
    "end_token": 592,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4811,
      3113,
      284,
      14241,
      6266,
      11,
      12739,
      257,
      3912,
      286,
      22635
    ],
    "label": "ml_signal",
    "reason": "Usage of strategy engine to cancel orders, indicating a pattern of delegation"
  },
  {
    "line": 88,
    "text": "        return self.send_order(vt_symbol, Direction.SHORT, Offset.OPEN, price, volume)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of active order IDs to cancel them",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      21280,
      62,
      2875,
      7,
      36540,
      62,
      1837,
      23650,
      11,
      41837,
      13,
      9693,
      9863,
      11,
      3242,
      2617,
      13,
      3185,
      1677,
      11,
      2756,
      11,
      6115,
      8
    ],
    "start_token": 592,
    "end_token": 626,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      4075,
      1502,
      32373,
      284,
      14241,
      606
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of active order IDs to cancel them"
  },
  {
    "line": 90,
    "text": "    def cover(self, vt_symbol: str, price: float, volume: float) -> list[str]:",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method to cancel an order by its ID",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3002,
      7,
      944,
      11,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      11,
      2756,
      25,
      12178,
      11,
      6115,
      25,
      12178,
      8,
      4613,
      1351,
      58,
      2536,
      5974
    ],
    "start_token": 626,
    "end_token": 655,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      284,
      14241,
      281,
      1502,
      416,
      663,
      4522
    ],
    "label": "ml_signal",
    "reason": "Calling a method to cancel an order by its ID"
  },
  {
    "line": 90,
    "text": "    def cover(self, vt_symbol: str, price: float, volume: float) -> list[str]:",
    "annotation": "\u2705 Best Practice: Include type hints for the return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3002,
      7,
      944,
      11,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      11,
      2756,
      25,
      12178,
      11,
      6115,
      25,
      12178,
      8,
      4613,
      1351,
      58,
      2536,
      5974
    ],
    "start_token": 655,
    "end_token": 684,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for the return type for better readability and maintainability"
  },
  {
    "line": 93,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary elements using a key",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 684,
    "end_token": 684,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      4847,
      1262,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary elements using a key"
  },
  {
    "line": 93,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for the return type and parameters for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 684,
    "end_token": 684,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      290,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for the return type and parameters for better readability and maintainability"
  },
  {
    "line": 96,
    "text": "        vt_symbol: str,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary elements by key, which could be used to infer data access patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      11
    ],
    "start_token": 684,
    "end_token": 699,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      4847,
      416,
      1994,
      11,
      543,
      714,
      307,
      973,
      284,
      13249,
      1366,
      1895,
      7572
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary elements by key, which could be used to infer data access patterns"
  },
  {
    "line": 97,
    "text": "        direction: Direction,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if vt_symbol is not present in target_data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      25,
      41837,
      11
    ],
    "start_token": 699,
    "end_token": 710,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      410,
      83,
      62,
      1837,
      23650,
      318,
      407,
      1944,
      287,
      2496,
      62,
      7890
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if vt_symbol is not present in target_data"
  },
  {
    "line": 97,
    "text": "        direction: Direction,",
    "annotation": "\u2705 Best Practice: Type hints are used for function parameters and return type, improving code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      25,
      41837,
      11
    ],
    "start_token": 710,
    "end_token": 721,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      389,
      973,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      11,
      10068,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hints are used for function parameters and return type, improving code readability and maintainability."
  },
  {
    "line": 99,
    "text": "        price: float,",
    "annotation": "\ud83e\udde0 ML Signal: Method updates a dictionary with a key-value pair, indicating a pattern of storing or updating state.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2756,
      25,
      12178,
      11
    ],
    "start_token": 721,
    "end_token": 732,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      257,
      22155,
      351,
      257,
      1994,
      12,
      8367,
      5166,
      11,
      12739,
      257,
      3912,
      286,
      23069,
      393,
      19698,
      1181,
      13
    ],
    "label": "ml_signal",
    "reason": "Method updates a dictionary with a key-value pair, indicating a pattern of storing or updating state."
  },
  {
    "line": 101,
    "text": "    ) -> list[str]:",
    "annotation": "\u2705 Best Practice: Clear method name and docstring for understanding the function's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      1351,
      58,
      2536,
      5974
    ],
    "start_token": 732,
    "end_token": 741,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      2446,
      1438,
      290,
      2205,
      8841,
      329,
      4547,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Clear method name and docstring for understanding the function's purpose"
  },
  {
    "line": 103,
    "text": "        vt_orderids: list = self.strategy_engine.send_order(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure cancel_all() handles exceptions and edge cases",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      2875,
      2340,
      25,
      1351,
      796,
      2116,
      13,
      2536,
      4338,
      62,
      18392,
      13,
      21280,
      62,
      2875,
      7
    ],
    "start_token": 741,
    "end_token": 767,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      14241,
      62,
      439,
      3419,
      17105,
      13269,
      290,
      5743,
      2663
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure cancel_all() handles exceptions and edge cases"
  },
  {
    "line": 105,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary of bars, common in trading algorithms",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 767,
    "end_token": 775,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      286,
      9210,
      11,
      2219,
      287,
      7313,
      16113
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary of bars, common in trading algorithms"
  },
  {
    "line": 107,
    "text": "        for vt_orderid in vt_orderids:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of get_target method to determine trading targets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      410,
      83,
      62,
      2875,
      312,
      287,
      410,
      83,
      62,
      2875,
      2340,
      25
    ],
    "start_token": 775,
    "end_token": 795,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      651,
      62,
      16793,
      2446,
      284,
      5004,
      7313,
      6670
    ],
    "label": "ml_signal",
    "reason": "Usage of get_target method to determine trading targets"
  },
  {
    "line": 109,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of get_pos method to determine current positions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 795,
    "end_token": 795,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      651,
      62,
      1930,
      2446,
      284,
      5004,
      1459,
      6116
    ],
    "label": "ml_signal",
    "reason": "Usage of get_pos method to determine current positions"
  },
  {
    "line": 111,
    "text": "",
    "annotation": "\u2705 Best Practice: Calculating difference between target and position for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 795,
    "end_token": 795,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      803,
      3580,
      1022,
      2496,
      290,
      2292,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Calculating difference between target and position for clarity"
  },
  {
    "line": 114,
    "text": "        self.strategy_engine.cancel_order(self, vt_orderid)",
    "annotation": "\ud83e\udde0 ML Signal: Adjusting order price based on market data and price_add",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2536,
      4338,
      62,
      18392,
      13,
      66,
      21130,
      62,
      2875,
      7,
      944,
      11,
      410,
      83,
      62,
      2875,
      312,
      8
    ],
    "start_token": 795,
    "end_token": 822,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      278,
      1502,
      2756,
      1912,
      319,
      1910,
      1366,
      290,
      2756,
      62,
      2860
    ],
    "label": "ml_signal",
    "reason": "Adjusting order price based on market data and price_add"
  },
  {
    "line": 124,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure cover() handles exceptions and order execution issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 822,
    "end_token": 822,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      3002,
      3419,
      17105,
      13269,
      290,
      1502,
      9706,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure cover() handles exceptions and order execution issues"
  },
  {
    "line": 127,
    "text": "        return self.target_data[vt_symbol]",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure buy() handles exceptions and order execution issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      16793,
      62,
      7890,
      58,
      36540,
      62,
      1837,
      23650,
      60
    ],
    "start_token": 822,
    "end_token": 841,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      2822,
      3419,
      17105,
      13269,
      290,
      1502,
      9706,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure buy() handles exceptions and order execution issues"
  },
  {
    "line": 130,
    "text": "        \"\"\"Set target position\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Adjusting order price for selling/shorting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      7248,
      2496,
      2292,
      37811
    ],
    "start_token": 841,
    "end_token": 853,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      278,
      1502,
      2756,
      329,
      6301,
      14,
      19509,
      278
    ],
    "label": "ml_signal",
    "reason": "Adjusting order price for selling/shorting"
  },
  {
    "line": 140,
    "text": "            target: float = self.get_target(vt_symbol)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure sell() handles exceptions and order execution issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2496,
      25,
      12178,
      796,
      2116,
      13,
      1136,
      62,
      16793,
      7,
      36540,
      62,
      1837,
      23650,
      8
    ],
    "start_token": 853,
    "end_token": 879,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      3677,
      3419,
      17105,
      13269,
      290,
      1502,
      9706,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure sell() handles exceptions and order execution issues"
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure short() handles exceptions and order execution issues",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 879,
    "end_token": 879,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      1790,
      3419,
      17105,
      13269,
      290,
      1502,
      9706,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure short() handles exceptions and order execution issues"
  },
  {
    "line": 134,
    "text": "        \"\"\"Execute position adjustment based on targets\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method for logging messages, useful for tracking application behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      23002,
      1133,
      2292,
      15068,
      1912,
      319,
      6670,
      37811
    ],
    "start_token": 879,
    "end_token": 895,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      18931,
      6218,
      11,
      4465,
      329,
      9646,
      3586,
      4069
    ],
    "label": "ml_signal",
    "reason": "Method for logging messages, useful for tracking application behavior"
  },
  {
    "line": 135,
    "text": "        self.cancel_all()",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      66,
      21130,
      62,
      439,
      3419
    ],
    "start_token": 895,
    "end_token": 909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 137,
    "text": "        # Only send orders for contracts with current bar data",
    "annotation": "\ud83e\udde0 ML Signal: Logging through a strategy engine, indicating a design pattern usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5514,
      3758,
      6266,
      329,
      8592,
      351,
      1459,
      2318,
      1366
    ],
    "start_token": 909,
    "end_token": 926,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      832,
      257,
      4811,
      3113,
      11,
      12739,
      257,
      1486,
      3912,
      8748
    ],
    "label": "ml_signal",
    "reason": "Logging through a strategy engine, indicating a design pattern usage"
  },
  {
    "line": 138,
    "text": "        for vt_symbol, bar in bars.items():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive information through logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      410,
      83,
      62,
      1837,
      23650,
      11,
      2318,
      287,
      9210,
      13,
      23814,
      33529
    ],
    "start_token": 926,
    "end_token": 946,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      832,
      18931
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive information through logging"
  },
  {
    "line": 135,
    "text": "        self.cancel_all()",
    "annotation": "\u2705 Best Practice: Method has a clear and concise docstring",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      66,
      21130,
      62,
      439,
      3419
    ],
    "start_token": 946,
    "end_token": 960,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      468,
      257,
      1598,
      290,
      35327,
      2205,
      8841
    ],
    "label": "best_practice",
    "reason": "Method has a clear and concise docstring"
  },
  {
    "line": 138,
    "text": "        for vt_symbol, bar in bars.items():",
    "annotation": "\ud83e\udde0 ML Signal: Method delegates functionality to another component",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      410,
      83,
      62,
      1837,
      23650,
      11,
      2318,
      287,
      9210,
      13,
      23814,
      33529
    ],
    "start_token": 960,
    "end_token": 980,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      15265,
      11244,
      284,
      1194,
      7515
    ],
    "label": "ml_signal",
    "reason": "Method delegates functionality to another component"
  },
  {
    "line": 138,
    "text": "        for vt_symbol, bar in bars.items():",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      410,
      83,
      62,
      1837,
      23650,
      11,
      2318,
      287,
      9210,
      13,
      23814,
      33529
    ],
    "start_token": 980,
    "end_token": 1000,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 141,
    "text": "            pos: float = self.get_pos(vt_symbol)",
    "annotation": "\ud83e\udde0 ML Signal: Method delegation to another object's method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1426,
      25,
      12178,
      796,
      2116,
      13,
      1136,
      62,
      1930,
      7,
      36540,
      62,
      1837,
      23650,
      8
    ],
    "start_token": 1000,
    "end_token": 1026,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22635,
      284,
      1194,
      2134,
      338,
      2446
    ],
    "label": "ml_signal",
    "reason": "Method delegation to another object's method"
  },
  {
    "line": 141,
    "text": "            pos: float = self.get_pos(vt_symbol)",
    "annotation": "\u2705 Best Practice: Method docstring provides a brief description of the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1426,
      25,
      12178,
      796,
      2116,
      13,
      1136,
      62,
      1930,
      7,
      36540,
      62,
      1837,
      23650,
      8
    ],
    "start_token": 1026,
    "end_token": 1052,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Method docstring provides a brief description of the method's purpose"
  },
  {
    "line": 144,
    "text": "            # Long position",
    "annotation": "\ud83e\udde0 ML Signal: Method calls other methods, indicating a pattern of composition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5882,
      2292
    ],
    "start_token": 1052,
    "end_token": 1066,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      584,
      5050,
      11,
      12739,
      257,
      3912,
      286,
      11742
    ],
    "label": "ml_signal",
    "reason": "Method calls other methods, indicating a pattern of composition"
  },
  {
    "line": 146,
    "text": "                # Calculate long order price",
    "annotation": "\u2705 Best Practice: Use of a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      27131,
      378,
      890,
      1502,
      2756
    ],
    "start_token": 1066,
    "end_token": 1087,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of a docstring to describe the method's purpose"
  },
  {
    "line": 146,
    "text": "                # Calculate long order price",
    "annotation": "\ud83e\udde0 ML Signal: Method delegation pattern, indicating a possible wrapper or adapter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      27131,
      378,
      890,
      1502,
      2756
    ],
    "start_token": 1087,
    "end_token": 1108,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22635,
      3912,
      11,
      12739,
      257,
      1744,
      29908,
      393,
      21302
    ],
    "label": "ml_signal",
    "reason": "Method delegation pattern, indicating a possible wrapper or adapter"
  }
]
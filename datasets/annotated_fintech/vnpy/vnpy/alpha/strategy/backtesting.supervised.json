[
  {
    "line": 17,
    "text": "from ..logger import logger",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 0.5,
    "tokens": [
      6738,
      11485,
      6404,
      1362,
      1330,
      49706
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Class attribute with a default value for consistent usage across instances",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      11688,
      351,
      257,
      4277,
      1988,
      329,
      6414,
      8748,
      1973,
      10245
    ],
    "label": "best_practice",
    "reason": "Class attribute with a default value for consistent usage across instances"
  },
  {
    "line": 22,
    "text": "class BacktestingEngine:",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      4871,
      5157,
      33407,
      13798,
      25
    ],
    "start_token": 6,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability"
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize lists and dictionaries to avoid attribute errors",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 11,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      290,
      48589,
      3166,
      284,
      3368,
      11688,
      8563
    ],
    "label": "best_practice",
    "reason": "Initialize lists and dictionaries to avoid attribute errors"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u2705 Best Practice: Declare attributes with expected types for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 11,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16691,
      533,
      12608,
      351,
      2938,
      3858,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Declare attributes with expected types for clarity"
  },
  {
    "line": 42,
    "text": "        self.annual_days: int = 0",
    "annotation": "\u2705 Best Practice: Use set for unique collection of items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1236,
      723,
      62,
      12545,
      25,
      493,
      796,
      657
    ],
    "start_token": 11,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      900,
      329,
      3748,
      4947,
      286,
      3709
    ],
    "label": "best_practice",
    "reason": "Use set for unique collection of items"
  },
  {
    "line": 51,
    "text": "        self.dts: set[datetime] = set()",
    "annotation": "\u2705 Best Practice: Use defaultdict for default values in dictionaries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      67,
      912,
      25,
      900,
      58,
      19608,
      8079,
      60,
      796,
      900,
      3419
    ],
    "start_token": 28,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4277,
      11600,
      329,
      4277,
      3815,
      287,
      48589,
      3166
    ],
    "label": "best_practice",
    "reason": "Use defaultdict for default values in dictionaries"
  },
  {
    "line": 62,
    "text": "        self.daily_results: dict[date, PortfolioDailyResult] = {}",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      29468,
      62,
      43420,
      25,
      8633,
      58,
      4475,
      11,
      4347,
      13652,
      28545,
      23004,
      60,
      796,
      23884
    ],
    "start_token": 48,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 64,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 72,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 72,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 68,
    "text": "        self.signal_df: pl.DataFrame",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      12683,
      282,
      62,
      7568,
      25,
      458,
      13,
      6601,
      19778
    ],
    "start_token": 72,
    "end_token": 90,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 70,
    "text": "    def set_parameters(",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      17143,
      7307,
      7
    ],
    "start_token": 90,
    "end_token": 99,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 72,
    "text": "        vt_symbols: list[str],",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      1837,
      2022,
      10220,
      25,
      1351,
      58,
      2536,
      4357
    ],
    "start_token": 99,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 74,
    "text": "        start: datetime,",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      25,
      4818,
      8079,
      11
    ],
    "start_token": 117,
    "end_token": 129,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 76,
    "text": "        capital: int = 1_000_000,",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3139,
      25,
      493,
      796,
      352,
      62,
      830,
      62,
      830,
      11
    ],
    "start_token": 129,
    "end_token": 146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 78,
    "text": "        annual_days: int = 240",
    "annotation": "\u2705 Best Practice: Type hinting for better code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5079,
      62,
      12545,
      25,
      493,
      796,
      14956
    ],
    "start_token": 146,
    "end_token": 160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for better code readability and maintainability"
  },
  {
    "line": 81,
    "text": "        self.vt_symbols = vt_symbols",
    "annotation": "\u2705 Best Practice: Type hinting for better code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      36540,
      62,
      1837,
      2022,
      10220,
      796,
      410,
      83,
      62,
      1837,
      2022,
      10220
    ],
    "start_token": 160,
    "end_token": 181,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for better code readability and maintainability"
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging of sensitive information",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 181,
    "end_token": 181,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      286,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging of sensitive information"
  },
  {
    "line": 87,
    "text": "        self.risk_free = risk_free",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19121,
      62,
      5787,
      796,
      2526,
      62,
      5787
    ],
    "start_token": 181,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 93,
    "text": "        for vt_symbol in vt_symbols:",
    "annotation": "\u2705 Best Practice: Use of self to store instance variables for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      410,
      83,
      62,
      1837,
      23650,
      287,
      410,
      83,
      62,
      1837,
      2022,
      10220,
      25
    ],
    "start_token": 197,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      3650,
      4554,
      9633,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Use of self to store instance variables for later use"
  },
  {
    "line": 80,
    "text": "        \"\"\"Set parameters\"\"\"",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      7248,
      10007,
      37811
    ],
    "start_token": 218,
    "end_token": 229,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type for better readability and maintainability"
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing a class type in an instance variable can indicate dynamic behavior or plugin patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 229,
    "end_token": 229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      1398,
      2099,
      287,
      281,
      4554,
      7885,
      460,
      7603,
      8925,
      4069,
      393,
      13877,
      7572
    ],
    "label": "ml_signal",
    "reason": "Storing a class type in an instance variable can indicate dynamic behavior or plugin patterns"
  },
  {
    "line": 86,
    "text": "        self.capital = capital",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating a class with dynamic parameters can indicate a factory or strategy pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      27544,
      796,
      3139
    ],
    "start_token": 229,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      257,
      1398,
      351,
      8925,
      10007,
      460,
      7603,
      257,
      8860,
      393,
      4811,
      3912
    ],
    "label": "ml_signal",
    "reason": "Instantiating a class with dynamic parameters can indicate a factory or strategy pattern"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing a DataFrame in an instance variable can indicate data-driven behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 241,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      6060,
      19778,
      287,
      281,
      4554,
      7885,
      460,
      7603,
      1366,
      12,
      15808,
      4069
    ],
    "label": "ml_signal",
    "reason": "Storing a DataFrame in an instance variable can indicate data-driven behavior"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking execution flow",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 241,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      9706,
      5202
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking execution flow"
  },
  {
    "line": 92,
    "text": "        contract_settings: dict = self.lab.load_contract_setttings()",
    "annotation": "\u2705 Best Practice: Defaulting to current time if 'end' is not set",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2775,
      62,
      33692,
      25,
      8633,
      796,
      2116,
      13,
      23912,
      13,
      2220,
      62,
      28484,
      62,
      2617,
      926,
      654,
      3419
    ],
    "start_token": 241,
    "end_token": 266,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      278,
      284,
      1459,
      640,
      611,
      705,
      437,
      6,
      318,
      407,
      900
    ],
    "label": "best_practice",
    "reason": "Defaulting to current time if 'end' is not set"
  },
  {
    "line": 95,
    "text": "            if not setting:",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for error conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      4634,
      25
    ],
    "start_token": 266,
    "end_token": 281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      4049,
      3403
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for error conditions"
  },
  {
    "line": 98,
    "text": "",
    "annotation": "\u2705 Best Practice: Clearing data structures before loading new data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 281,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3779,
      1723,
      1366,
      8573,
      878,
      11046,
      649,
      1366
    ],
    "label": "best_practice",
    "reason": "Clearing data structures before loading new data"
  },
  {
    "line": 99,
    "text": "            self.long_rates[vt_symbol] = setting[\"long_rate\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of tqdm for progress tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6511,
      62,
      9700,
      58,
      36540,
      62,
      1837,
      23650,
      60,
      796,
      4634,
      14692,
      6511,
      62,
      4873,
      8973
    ],
    "start_token": 281,
    "end_token": 310,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646
    ],
    "label": "ml_signal",
    "reason": "Usage of tqdm for progress tracking"
  },
  {
    "line": 111,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a set to ensure unique datetime entries",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 310,
    "end_token": 310,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      900,
      284,
      4155,
      3748,
      4818,
      8079,
      12784
    ],
    "label": "best_practice",
    "reason": "Using a set to ensure unique datetime entries"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for reporting empty data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 310,
    "end_token": 310,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      6447,
      6565,
      1366
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for reporting empty data"
  },
  {
    "line": 120,
    "text": "            logger.info(\"\u8d77\u59cb\u65e5\u671f\u5fc5\u987b\u5c0f\u4e8e\u7ed3\u675f\u65e5\u671f\")",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for successful completion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      164,
      113,
      115,
      34650,
      233,
      33768,
      98,
      17312,
      253,
      33232,
      227,
      165,
      94,
      119,
      22887,
      237,
      12859,
      236,
      163,
      119,
      241,
      30266,
      253,
      33768,
      98,
      17312,
      253,
      4943
    ],
    "start_token": 310,
    "end_token": 353,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      4388,
      11939
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for successful completion"
  },
  {
    "line": 116,
    "text": "        if not self.end:",
    "annotation": "\ud83e\udde0 ML Signal: Method for running backtesting, useful for financial ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      437,
      25
    ],
    "start_token": 353,
    "end_token": 366,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      2491,
      736,
      33407,
      11,
      4465,
      329,
      3176,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Method for running backtesting, useful for financial ML models"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of logging for tracking the initialization process",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 366,
    "end_token": 366,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      262,
      37588,
      1429
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking the initialization process"
  },
  {
    "line": 121,
    "text": "            return",
    "annotation": "\u2705 Best Practice: Sorting data before processing ensures consistent behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 366,
    "end_token": 378,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      1366,
      878,
      7587,
      19047,
      6414,
      4069
    ],
    "label": "best_practice",
    "reason": "Sorting data before processing ensures consistent behavior"
  },
  {
    "line": 123,
    "text": "        # Clear previously loaded historical data",
    "annotation": "\u2705 Best Practice: Use of logging for tracking the start of data replay",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      11459,
      4271,
      9639,
      6754,
      1366
    ],
    "start_token": 378,
    "end_token": 391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      262,
      923,
      286,
      1366,
      24788
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking the start of data replay"
  },
  {
    "line": 127,
    "text": "        # Load historical data for each symbol",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over sorted timestamps, common in time-series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8778,
      6754,
      1366,
      329,
      1123,
      6194
    ],
    "start_token": 391,
    "end_token": 405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      23243,
      4628,
      395,
      9430,
      11,
      2219,
      287,
      640,
      12,
      25076,
      3781
    ],
    "label": "ml_signal",
    "reason": "Iterating over sorted timestamps, common in time-series analysis"
  },
  {
    "line": 130,
    "text": "            data: list[BarData] = self.lab.load_bar_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      1351,
      58,
      10374,
      6601,
      60,
      796,
      2116,
      13,
      23912,
      13,
      2220,
      62,
      5657,
      62,
      7890,
      7
    ],
    "start_token": 405,
    "end_token": 434,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors"
  },
  {
    "line": 131,
    "text": "                vt_symbol,",
    "annotation": "\u2705 Best Practice: Logging exceptions helps in debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      1837,
      23650,
      11
    ],
    "start_token": 434,
    "end_token": 455,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      13269,
      5419,
      287,
      28769
    ],
    "label": "best_practice",
    "reason": "Logging exceptions helps in debugging"
  },
  {
    "line": 135,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Use of logging for tracking the end of data replay",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 455,
    "end_token": 467,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      262,
      886,
      286,
      1366,
      24788
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking the end of data replay"
  },
  {
    "line": 131,
    "text": "                vt_symbol,",
    "annotation": "\ud83e\udde0 ML Signal: Logging the start of a calculation process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      1837,
      23650,
      11
    ],
    "start_token": 467,
    "end_token": 488,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      923,
      286,
      257,
      17952,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging the start of a calculation process"
  },
  {
    "line": 134,
    "text": "                self.end",
    "annotation": "\ud83e\udde0 ML Signal: Logging a condition where no trades are present",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437
    ],
    "start_token": 488,
    "end_token": 506,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      257,
      4006,
      810,
      645,
      17674,
      389,
      1944
    ],
    "label": "ml_signal",
    "reason": "Logging a condition where no trades are present"
  },
  {
    "line": 142,
    "text": "            if not data_count:",
    "annotation": "\ud83e\udde0 ML Signal: Adding a trade to a daily result",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      1366,
      62,
      9127,
      25
    ],
    "start_token": 506,
    "end_token": 523,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      257,
      3292,
      284,
      257,
      4445,
      1255
    ],
    "label": "ml_signal",
    "reason": "Adding a trade to a daily result"
  },
  {
    "line": 144,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating PnL for a daily result",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 523,
    "end_token": 523,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      350,
      77,
      43,
      329,
      257,
      4445,
      1255
    ],
    "label": "ml_signal",
    "reason": "Calculating PnL for a daily result"
  },
  {
    "line": 164,
    "text": "                logger.info(\"\u89e6\u53d1\u5f02\u5e38\uff0c\u56de\u6d4b\u7ec8\u6b62\")",
    "annotation": "\ud83e\udde0 ML Signal: Collecting results for each field",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      164,
      100,
      99,
      20998,
      239,
      28156,
      224,
      30585,
      116,
      171,
      120,
      234,
      32368,
      252,
      38184,
      233,
      163,
      119,
      230,
      29826,
      95,
      4943
    ],
    "start_token": 523,
    "end_token": 564,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2482,
      329,
      1123,
      2214
    ],
    "label": "ml_signal",
    "reason": "Collecting results for each field"
  },
  {
    "line": 164,
    "text": "                logger.info(\"\u89e6\u53d1\u5f02\u5e38\uff0c\u56de\u6d4b\u7ec8\u6b62\")",
    "annotation": "\u2705 Best Practice: Using a DataFrame for structured data storage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      164,
      100,
      99,
      20998,
      239,
      28156,
      224,
      30585,
      116,
      171,
      120,
      234,
      32368,
      252,
      38184,
      233,
      163,
      119,
      230,
      29826,
      95,
      4943
    ],
    "start_token": 564,
    "end_token": 605,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      6060,
      19778,
      329,
      20793,
      1366,
      6143
    ],
    "label": "best_practice",
    "reason": "Using a DataFrame for structured data storage"
  },
  {
    "line": 180,
    "text": "                continue",
    "annotation": "\ud83e\udde0 ML Signal: Logging the completion of a calculation process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2555
    ],
    "start_token": 605,
    "end_token": 621,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      11939,
      286,
      257,
      17952,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging the completion of a calculation process"
  },
  {
    "line": 178,
    "text": "        for trade in self.trades.values():",
    "annotation": "\ud83e\udde0 ML Signal: Logging the start of a calculation process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      3292,
      287,
      2116,
      13,
      2213,
      2367,
      13,
      27160,
      33529
    ],
    "start_token": 621,
    "end_token": 638,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      923,
      286,
      257,
      17952,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging the start of a calculation process"
  },
  {
    "line": 205,
    "text": "                \"date\", \"trade_count\", \"turnover\",",
    "annotation": "\u2705 Best Practice: Chaining methods for cleaner and more readable code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4475,
      1600,
      366,
      25351,
      62,
      9127,
      1600,
      366,
      15344,
      2502,
      1600
    ],
    "start_token": 638,
    "end_token": 665,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1397,
      5050,
      329,
      21723,
      290,
      517,
      31744,
      2438
    ],
    "label": "best_practice",
    "reason": "Chaining methods for cleaner and more readable code"
  },
  {
    "line": 216,
    "text": "                pl.Series(\"trade_count\", results[\"trade_count\"], dtype=pl.Int64),",
    "annotation": "\ud83e\udde0 ML Signal: Checking for positive balance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      27996,
      7203,
      25351,
      62,
      9127,
      1600,
      2482,
      14692,
      25351,
      62,
      9127,
      33116,
      288,
      4906,
      28,
      489,
      13,
      5317,
      2414,
      828
    ],
    "start_token": 665,
    "end_token": 702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      3967,
      5236
    ],
    "label": "ml_signal",
    "reason": "Checking for positive balance"
  },
  {
    "line": 219,
    "text": "                pl.Series(\"trading_pnl\", results[\"trading_pnl\"], dtype=pl.Float64),",
    "annotation": "\ud83e\udde0 ML Signal: Logging a specific condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      458,
      13,
      27996,
      7203,
      2213,
      4980,
      62,
      79,
      21283,
      1600,
      2482,
      14692,
      2213,
      4980,
      62,
      79,
      21283,
      33116,
      288,
      4906,
      28,
      489,
      13,
      43879,
      2414,
      828
    ],
    "start_token": 702,
    "end_token": 743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      257,
      2176,
      4006
    ],
    "label": "ml_signal",
    "reason": "Logging a specific condition"
  },
  {
    "line": 257,
    "text": "        # Check if bankruptcy occurred",
    "annotation": "\ud83e\udde0 ML Signal: Logging the end of a calculation process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6822,
      611,
      17235,
      5091
    ],
    "start_token": 743,
    "end_token": 755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      886,
      286,
      257,
      17952,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging the end of a calculation process"
  },
  {
    "line": 312,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data integrity issue if NaN values are not expected",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 755,
    "end_token": 755,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      11540,
      2071,
      611,
      11013,
      45,
      3815,
      389,
      407,
      2938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data integrity issue if NaN values are not expected"
  },
  {
    "line": 313,
    "text": "            total_commission = df[\"commission\"].sum()",
    "annotation": "\ud83e\udde0 ML Signal: Logging the completion of a process",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2472,
      62,
      785,
      3411,
      796,
      47764,
      14692,
      785,
      3411,
      1,
      4083,
      16345,
      3419
    ],
    "start_token": 755,
    "end_token": 779,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      11939,
      286,
      257,
      1429
    ],
    "label": "ml_signal",
    "reason": "Logging the completion of a process"
  },
  {
    "line": 312,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a DataFrame suggests data manipulation or analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 779,
    "end_token": 779,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      6060,
      19778,
      5644,
      1366,
      17512,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of a DataFrame suggests data manipulation or analysis"
  },
  {
    "line": 313,
    "text": "            total_commission = df[\"commission\"].sum()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of make_subplots indicates data visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2472,
      62,
      785,
      3411,
      796,
      47764,
      14692,
      785,
      3411,
      1,
      4083,
      16345,
      3419
    ],
    "start_token": 779,
    "end_token": 803,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      787,
      62,
      7266,
      489,
      1747,
      9217,
      1366,
      32704
    ],
    "label": "ml_signal",
    "reason": "Usage of make_subplots indicates data visualization"
  },
  {
    "line": 319,
    "text": "            total_trade_count = cast(int, df[\"trade_count\"].sum())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of go.Scatter suggests time series or trend visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2472,
      62,
      25351,
      62,
      9127,
      796,
      3350,
      7,
      600,
      11,
      47764,
      14692,
      25351,
      62,
      9127,
      1,
      4083,
      16345,
      28955
    ],
    "start_token": 803,
    "end_token": 833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      467,
      13,
      3351,
      1436,
      5644,
      640,
      2168,
      393,
      5182,
      32704
    ],
    "label": "ml_signal",
    "reason": "Usage of go.Scatter suggests time series or trend visualization"
  },
  {
    "line": 325,
    "text": "            return_std = cast(float, df[\"return\"].std()) * 100",
    "annotation": "\ud83e\udde0 ML Signal: Usage of go.Scatter with fill indicates area chart visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      19282,
      796,
      3350,
      7,
      22468,
      11,
      47764,
      14692,
      7783,
      1,
      4083,
      19282,
      28955,
      1635,
      1802
    ],
    "start_token": 833,
    "end_token": 861,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      467,
      13,
      3351,
      1436,
      351,
      6070,
      9217,
      1989,
      8262,
      32704
    ],
    "label": "ml_signal",
    "reason": "Usage of go.Scatter with fill indicates area chart visualization"
  },
  {
    "line": 337,
    "text": "        logger.info(f\"\u9996\u4e2a\u4ea4\u6613\u65e5\uff1a  {start_date}\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of go.Bar suggests categorical or distribution visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      165,
      99,
      244,
      10310,
      103,
      12859,
      97,
      23626,
      241,
      33768,
      98,
      171,
      120,
      248,
      220,
      1391,
      9688,
      62,
      4475,
      92,
      4943
    ],
    "start_token": 861,
    "end_token": 895,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      467,
      13,
      10374,
      5644,
      4253,
      12409,
      393,
      6082,
      32704
    ],
    "label": "ml_signal",
    "reason": "Usage of go.Bar suggests categorical or distribution visualization"
  },
  {
    "line": 339,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of go.Histogram suggests distribution analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 895,
    "end_token": 895,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      467,
      13,
      13749,
      21857,
      5644,
      6082,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of go.Histogram suggests distribution analysis"
  },
  {
    "line": 341,
    "text": "        logger.info(f\"\u76c8\u5229\u4ea4\u6613\u65e5\uff1a  {profit_days}\")",
    "annotation": "\u2705 Best Practice: Explicitly specify the subplot location for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      33566,
      230,
      26344,
      102,
      12859,
      97,
      23626,
      241,
      33768,
      98,
      171,
      120,
      248,
      220,
      1391,
      9183,
      62,
      12545,
      92,
      4943
    ],
    "start_token": 895,
    "end_token": 928,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      262,
      850,
      29487,
      4067,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly specify the subplot location for clarity"
  },
  {
    "line": 343,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly specify the subplot location for clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 928,
    "end_token": 928,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      262,
      850,
      29487,
      4067,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly specify the subplot location for clarity"
  },
  {
    "line": 345,
    "text": "        logger.info(f\"\u7ed3\u675f\u8d44\u91d1\uff1a  {end_balance:,.2f}\")",
    "annotation": "\u2705 Best Practice: Explicitly specify the subplot location for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      163,
      119,
      241,
      30266,
      253,
      164,
      113,
      226,
      34932,
      239,
      171,
      120,
      248,
      220,
      1391,
      437,
      62,
      20427,
      25,
      38508,
      17,
      69,
      92,
      4943
    ],
    "start_token": 928,
    "end_token": 965,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      262,
      850,
      29487,
      4067,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly specify the subplot location for clarity"
  },
  {
    "line": 347,
    "text": "        logger.info(f\"\u603b\u6536\u76ca\u7387\uff1a  {total_return:,.2f}%\")",
    "annotation": "\u2705 Best Practice: Explicitly specify the subplot location for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      45250,
      119,
      162,
      242,
      114,
      33566,
      232,
      163,
      236,
      229,
      171,
      120,
      248,
      220,
      1391,
      23350,
      62,
      7783,
      25,
      38508,
      17,
      69,
      92,
      4,
      4943
    ],
    "start_token": 965,
    "end_token": 1003,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      11986,
      262,
      850,
      29487,
      4067,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly specify the subplot location for clarity"
  },
  {
    "line": 347,
    "text": "        logger.info(f\"\u603b\u6536\u76ca\u7387\uff1a  {total_return:,.2f}%\")",
    "annotation": "\u2705 Best Practice: Set layout dimensions for consistent visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      45250,
      119,
      162,
      242,
      114,
      33566,
      232,
      163,
      236,
      229,
      171,
      120,
      248,
      220,
      1391,
      23350,
      62,
      7783,
      25,
      38508,
      17,
      69,
      92,
      4,
      4943
    ],
    "start_token": 1003,
    "end_token": 1041,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      12461,
      15225,
      329,
      6414,
      32704
    ],
    "label": "best_practice",
    "reason": "Set layout dimensions for consistent visualization"
  },
  {
    "line": 347,
    "text": "        logger.info(f\"\u603b\u6536\u76ca\u7387\uff1a  {total_return:,.2f}%\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potentially large data visualization could impact performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      45250,
      119,
      162,
      242,
      114,
      33566,
      232,
      163,
      236,
      229,
      171,
      120,
      248,
      220,
      1391,
      23350,
      62,
      7783,
      25,
      38508,
      17,
      69,
      92,
      4,
      4943
    ],
    "start_token": 1041,
    "end_token": 1079,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6902,
      3746,
      1588,
      1366,
      32704,
      714,
      2928,
      2854
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potentially large data visualization could impact performance"
  },
  {
    "line": 343,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Loading and processing financial data for performance analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1079,
    "end_token": 1079,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      12320,
      290,
      7587,
      3176,
      1366,
      329,
      2854,
      3781
    ],
    "label": "ml_signal",
    "reason": "Loading and processing financial data for performance analysis"
  },
  {
    "line": 347,
    "text": "        logger.info(f\"\u603b\u6536\u76ca\u7387\uff1a  {total_return:,.2f}%\")",
    "annotation": "\u2705 Best Practice: Using list comprehension for better readability and performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      45250,
      119,
      162,
      242,
      114,
      33566,
      232,
      163,
      236,
      229,
      171,
      120,
      248,
      220,
      1391,
      23350,
      62,
      7783,
      25,
      38508,
      17,
      69,
      92,
      4,
      4943
    ],
    "start_token": 1079,
    "end_token": 1117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      35915,
      329,
      1365,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Using list comprehension for better readability and performance"
  },
  {
    "line": 347,
    "text": "        logger.info(f\"\u603b\u6536\u76ca\u7387\uff1a  {total_return:,.2f}%\")",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame with financial performance metrics",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      45250,
      119,
      162,
      242,
      114,
      33566,
      232,
      163,
      236,
      229,
      171,
      120,
      248,
      220,
      1391,
      23350,
      62,
      7783,
      25,
      38508,
      17,
      69,
      92,
      4,
      4943
    ],
    "start_token": 1117,
    "end_token": 1155,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      351,
      3176,
      2854,
      20731
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame with financial performance metrics"
  },
  {
    "line": 364,
    "text": "        logger.info(f\"\u6536\u76ca\u6807\u51c6\u5dee\uff1a  {return_std:,.2f}%\")",
    "annotation": "\ud83e\udde0 ML Signal: Visualizing financial performance metrics using Plotly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      162,
      242,
      114,
      33566,
      232,
      43718,
      229,
      49035,
      228,
      32432,
      106,
      171,
      120,
      248,
      220,
      1391,
      7783,
      62,
      19282,
      25,
      38508,
      17,
      69,
      92,
      4,
      4943
    ],
    "start_token": 1155,
    "end_token": 1194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15612,
      2890,
      3176,
      2854,
      20731,
      1262,
      28114,
      306
    ],
    "label": "ml_signal",
    "reason": "Visualizing financial performance metrics using Plotly"
  },
  {
    "line": 376,
    "text": "            \"max_drawdown\": max_drawdown,",
    "annotation": "\ud83e\udde0 ML Signal: Creating visual elements for financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9806,
      62,
      19334,
      2902,
      1298,
      3509,
      62,
      19334,
      2902,
      11
    ],
    "start_token": 1194,
    "end_token": 1216,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      5874,
      4847,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Creating visual elements for financial data"
  },
  {
    "line": 424,
    "text": "            fillcolor=\"red\",",
    "annotation": "\ud83e\udde0 ML Signal: Adding traces to the Plotly figure for visualization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6070,
      8043,
      2625,
      445,
      1600
    ],
    "start_token": 1216,
    "end_token": 1232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      20675,
      284,
      262,
      28114,
      306,
      3785,
      329,
      32704
    ],
    "label": "ml_signal",
    "reason": "Adding traces to the Plotly figure for visualization"
  },
  {
    "line": 427,
    "text": "            name=\"Drawdown\"",
    "annotation": "\u2705 Best Practice: Setting layout properties for better visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      25302,
      2902,
      1
    ],
    "start_token": 1232,
    "end_token": 1248,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      12461,
      6608,
      329,
      1365,
      32704
    ],
    "label": "best_practice",
    "reason": "Setting layout properties for better visualization"
  },
  {
    "line": 446,
    "text": "        for bar in benchmark_bars:",
    "annotation": "\u2705 Best Practice: Type hinting for 'd' improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2318,
      287,
      18335,
      62,
      34046,
      25
    ],
    "start_token": 1248,
    "end_token": 1262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      67,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'd' improves code readability and maintainability"
  },
  {
    "line": 448,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for 'close_prices' improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1262,
    "end_token": 1262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      19836,
      62,
      1050,
      1063,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'close_prices' improves code readability and maintainability"
  },
  {
    "line": 450,
    "text": "        performance_df: pl.DataFrame = (",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'bar.vt_symbol' is not in 'self.pre_closes'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2854,
      62,
      7568,
      25,
      458,
      13,
      6601,
      19778,
      796,
      357
    ],
    "start_token": 1262,
    "end_token": 1279,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      5657,
      13,
      36540,
      62,
      1837,
      23650,
      6,
      318,
      407,
      287,
      705,
      944,
      13,
      3866,
      62,
      565,
      4629,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'bar.vt_symbol' is not in 'self.pre_closes'"
  },
  {
    "line": 455,
    "text": "                cumulative_cost=(pl.col(\"commission\") / pl.col(\"balance\").shift(1)).cum_sum()",
    "annotation": "\u2705 Best Practice: Type hinting for 'daily_result' improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23818,
      62,
      15805,
      16193,
      489,
      13,
      4033,
      7203,
      785,
      3411,
      4943,
      1220,
      458,
      13,
      4033,
      7203,
      20427,
      11074,
      30846,
      7,
      16,
      29720,
      36340,
      62,
      16345,
      3419
    ],
    "start_token": 1279,
    "end_token": 1320,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      29468,
      62,
      20274,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'daily_result' improves code readability and maintainability"
  },
  {
    "line": 459,
    "text": "            ).with_columns(",
    "annotation": "\ud83e\udde0 ML Signal: Method call on 'daily_result' could indicate a pattern of updating or processing data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6739,
      4480,
      62,
      28665,
      82,
      7
    ],
    "start_token": 1320,
    "end_token": 1337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      705,
      29468,
      62,
      20274,
      6,
      714,
      7603,
      257,
      3912,
      286,
      19698,
      393,
      7587,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method call on 'daily_result' could indicate a pattern of updating or processing data"
  },
  {
    "line": 462,
    "text": "            ).with_columns(",
    "annotation": "\ud83e\udde0 ML Signal: Storing new 'PortfolioDailyResult' in 'self.daily_results' could indicate a pattern of data accumulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6739,
      4480,
      62,
      28665,
      82,
      7
    ],
    "start_token": 1337,
    "end_token": 1354,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      649,
      705,
      13924,
      13652,
      28545,
      23004,
      6,
      287,
      705,
      944,
      13,
      29468,
      62,
      43420,
      6,
      714,
      7603,
      257,
      3912,
      286,
      1366,
      24106
    ],
    "label": "ml_signal",
    "reason": "Storing new 'PortfolioDailyResult' in 'self.daily_results' could indicate a pattern of data accumulation"
  },
  {
    "line": 484,
    "text": "        strategy_curve: go.Scatter = go.Scatter(",
    "annotation": "\u2705 Best Practice: Ensure that cross_order is called after updating bars to maintain logical flow.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4811,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1354,
    "end_token": 1376,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      3272,
      62,
      2875,
      318,
      1444,
      706,
      19698,
      9210,
      284,
      5529,
      12219,
      5202,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that cross_order is called after updating bars to maintain logical flow."
  },
  {
    "line": 486,
    "text": "            y=performance_df[\"cumulative_return\"],",
    "annotation": "\u2705 Best Practice: Ensure that on_bars is called after updating bars to maintain logical flow.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      28,
      26585,
      62,
      7568,
      14692,
      36340,
      13628,
      62,
      7783,
      33116
    ],
    "start_token": 1376,
    "end_token": 1398,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      319,
      62,
      34046,
      318,
      1444,
      706,
      19698,
      9210,
      284,
      5529,
      12219,
      5202,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that on_bars is called after updating bars to maintain logical flow."
  },
  {
    "line": 488,
    "text": "            name=\"Strategy\"",
    "annotation": "\u2705 Best Practice: Ensure that update_daily_close is called after updating bars to maintain logical flow.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      13290,
      4338,
      1
    ],
    "start_token": 1398,
    "end_token": 1414,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      4296,
      62,
      29468,
      62,
      19836,
      318,
      1444,
      706,
      19698,
      9210,
      284,
      5529,
      12219,
      5202,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that update_daily_close is called after updating bars to maintain logical flow."
  },
  {
    "line": 489,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over active limit orders to match them with market data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1414,
    "end_token": 1422,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4075,
      4179,
      6266,
      284,
      2872,
      606,
      351,
      1910,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over active limit orders to match them with market data"
  },
  {
    "line": 491,
    "text": "            x=performance_df[\"date\"],",
    "annotation": "\ud83e\udde0 ML Signal: Accessing market data for a specific symbol",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      28,
      26585,
      62,
      7568,
      14692,
      4475,
      33116
    ],
    "start_token": 1422,
    "end_token": 1441,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1910,
      1366,
      329,
      257,
      2176,
      6194
    ],
    "label": "ml_signal",
    "reason": "Accessing market data for a specific symbol"
  },
  {
    "line": 497,
    "text": "            x=performance_df[\"date\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying order status without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      28,
      26585,
      62,
      7568,
      14692,
      4475,
      33116
    ],
    "start_token": 1441,
    "end_token": 1460,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      1502,
      3722,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying order status without validation"
  },
  {
    "line": 500,
    "text": "            name=\"Benchmark\"",
    "annotation": "\ud83e\udde0 ML Signal: Updating order status in strategy",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      2625,
      44199,
      4102,
      1
    ],
    "start_token": 1460,
    "end_token": 1476,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      1502,
      3722,
      287,
      4811
    ],
    "label": "ml_signal",
    "reason": "Updating order status in strategy"
  },
  {
    "line": 502,
    "text": "        excess_curve: go.Scatter = go.Scatter(",
    "annotation": "\ud83e\udde0 ML Signal: Using price tick information for calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6992,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1476,
    "end_token": 1498,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      2756,
      4378,
      1321,
      329,
      16765
    ],
    "label": "ml_signal",
    "reason": "Using price tick information for calculations"
  },
  {
    "line": 502,
    "text": "        excess_curve: go.Scatter = go.Scatter(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing previous close price for limit calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6992,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1498,
    "end_token": 1520,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2180,
      1969,
      2756,
      329,
      4179,
      16765
    ],
    "label": "ml_signal",
    "reason": "Accessing previous close price for limit calculations"
  },
  {
    "line": 508,
    "text": "        net_excess_curve: go.Scatter = go.Scatter(",
    "annotation": "\u2705 Best Practice: Using round_to function for consistent rounding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2010,
      62,
      1069,
      919,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1520,
    "end_token": 1545,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2835,
      62,
      1462,
      2163,
      329,
      6414,
      38185
    ],
    "label": "best_practice",
    "reason": "Using round_to function for consistent rounding"
  },
  {
    "line": 508,
    "text": "        net_excess_curve: go.Scatter = go.Scatter(",
    "annotation": "\ud83e\udde0 ML Signal: Determining if a long order can be crossed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2010,
      62,
      1069,
      919,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1545,
    "end_token": 1570,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      13221,
      278,
      611,
      257,
      890,
      1502,
      460,
      307,
      12606
    ],
    "label": "ml_signal",
    "reason": "Determining if a long order can be crossed"
  },
  {
    "line": 516,
    "text": "            y=self.daily_df[\"turnover\"] / self.daily_df[\"balance\"].shift(1),",
    "annotation": "\ud83e\udde0 ML Signal: Determining if a short order can be crossed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      28,
      944,
      13,
      29468,
      62,
      7568,
      14692,
      15344,
      2502,
      8973,
      1220,
      2116,
      13,
      29468,
      62,
      7568,
      14692,
      20427,
      1,
      4083,
      30846,
      7,
      16,
      828
    ],
    "start_token": 1570,
    "end_token": 1606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      13221,
      278,
      611,
      257,
      1790,
      1502,
      460,
      307,
      12606
    ],
    "label": "ml_signal",
    "reason": "Determining if a short order can be crossed"
  },
  {
    "line": 525,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly setting order as fully traded",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1606,
    "end_token": 1614,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      4634,
      1502,
      355,
      3938,
      14018
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly setting order as fully traded"
  },
  {
    "line": 526,
    "text": "        net_excess_drawdown_curve: go.Scatter = go.Scatter(",
    "annotation": "\ud83e\udde0 ML Signal: Updating order status in strategy",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2010,
      62,
      1069,
      919,
      62,
      19334,
      2902,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1614,
    "end_token": 1642,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      1502,
      3722,
      287,
      4811
    ],
    "label": "ml_signal",
    "reason": "Updating order status in strategy"
  },
  {
    "line": 526,
    "text": "        net_excess_drawdown_curve: go.Scatter = go.Scatter(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Removing order from active list without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2010,
      62,
      1069,
      919,
      62,
      19334,
      2902,
      62,
      22019,
      303,
      25,
      467,
      13,
      3351,
      1436,
      796,
      467,
      13,
      3351,
      1436,
      7
    ],
    "start_token": 1642,
    "end_token": 1670,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3982,
      5165,
      1502,
      422,
      4075,
      1351,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Removing order from active list without validation"
  },
  {
    "line": 538,
    "text": "        fig.add_trace(net_excess_curve, row=2, col=1)",
    "annotation": "\ud83e\udde0 ML Signal: Incrementing trade count for unique trade IDs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2336,
      13,
      2860,
      62,
      40546,
      7,
      3262,
      62,
      1069,
      919,
      62,
      22019,
      303,
      11,
      5752,
      28,
      17,
      11,
      951,
      28,
      16,
      8
    ],
    "start_token": 1670,
    "end_token": 1699,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10791,
      434,
      278,
      3292,
      954,
      329,
      3748,
      3292,
      32373
    ],
    "label": "ml_signal",
    "reason": "Incrementing trade count for unique trade IDs"
  },
  {
    "line": 538,
    "text": "        fig.add_trace(net_excess_curve, row=2, col=1)",
    "annotation": "\ud83e\udde0 ML Signal: Determining trade price based on order direction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2336,
      13,
      2860,
      62,
      40546,
      7,
      3262,
      62,
      1069,
      919,
      62,
      22019,
      303,
      11,
      5752,
      28,
      17,
      11,
      951,
      28,
      16,
      8
    ],
    "start_token": 1699,
    "end_token": 1728,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      13221,
      278,
      3292,
      2756,
      1912,
      319,
      1502,
      4571
    ],
    "label": "ml_signal",
    "reason": "Determining trade price based on order direction"
  },
  {
    "line": 540,
    "text": "        fig.add_trace(excess_drawdown_curve, row=4, col=1)",
    "annotation": "\ud83e\udde0 ML Signal: Creating a new trade data object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2336,
      13,
      2860,
      62,
      40546,
      7,
      1069,
      919,
      62,
      19334,
      2902,
      62,
      22019,
      303,
      11,
      5752,
      28,
      19,
      11,
      951,
      28,
      16,
      8
    ],
    "start_token": 1728,
    "end_token": 1758,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      649,
      3292,
      1366,
      2134
    ],
    "label": "ml_signal",
    "reason": "Creating a new trade data object"
  },
  {
    "line": 553,
    "text": "            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),",
    "annotation": "\ud83e\udde0 ML Signal: Calculating trade turnover based on size",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      11600,
      7,
      12860,
      25928,
      28,
      17821,
      11,
      10706,
      10394,
      28,
      16,
      11,
      10706,
      8043,
      11639,
      15047,
      46130,
      33809
    ],
    "start_token": 1758,
    "end_token": 1790,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      3292,
      25079,
      1912,
      319,
      2546
    ],
    "label": "ml_signal",
    "reason": "Calculating trade turnover based on size"
  },
  {
    "line": 556,
    "text": "            yaxis4=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),",
    "annotation": "\ud83e\udde0 ML Signal: Calculating commission based on trade direction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      19,
      28,
      11600,
      7,
      12860,
      25928,
      28,
      17821,
      11,
      10706,
      10394,
      28,
      16,
      11,
      10706,
      8043,
      11639,
      15047,
      46130,
      33809
    ],
    "start_token": 1790,
    "end_token": 1823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      5810,
      1912,
      319,
      3292,
      4571
    ],
    "label": "ml_signal",
    "reason": "Calculating commission based on trade direction"
  },
  {
    "line": 561,
    "text": "    def update_daily_close(self, bars: dict[str, BarData], dt: datetime) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying cash balance based on trade",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4296,
      62,
      29468,
      62,
      19836,
      7,
      944,
      11,
      9210,
      25,
      8633,
      58,
      2536,
      11,
      2409,
      6601,
      4357,
      288,
      83,
      25,
      4818,
      8079,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1823,
    "end_token": 1853,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      5003,
      5236,
      1912,
      319,
      3292
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying cash balance based on trade"
  },
  {
    "line": 567,
    "text": "            if not bar.close_price:",
    "annotation": "\ud83e\udde0 ML Signal: Updating strategy with new trade information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2318,
      13,
      19836,
      62,
      20888,
      25
    ],
    "start_token": 1853,
    "end_token": 1872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      4811,
      351,
      649,
      3292,
      1321
    ],
    "label": "ml_signal",
    "reason": "Updating strategy with new trade information"
  },
  {
    "line": 570,
    "text": "                close_prices[bar.vt_symbol] = bar.close_price",
    "annotation": "\ud83e\udde0 ML Signal: Storing trade data for future reference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1969,
      62,
      1050,
      1063,
      58,
      5657,
      13,
      36540,
      62,
      1837,
      23650,
      60,
      796,
      2318,
      13,
      19836,
      62,
      20888
    ],
    "start_token": 1872,
    "end_token": 1905,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      3292,
      1366,
      329,
      2003,
      4941
    ],
    "label": "ml_signal",
    "reason": "Storing trade data for future reference"
  },
  {
    "line": 553,
    "text": "            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),",
    "annotation": "\u2705 Best Practice: Check for the presence of 'datetime' before proceeding with operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      28,
      11600,
      7,
      12860,
      25928,
      28,
      17821,
      11,
      10706,
      10394,
      28,
      16,
      11,
      10706,
      8043,
      11639,
      15047,
      46130,
      33809
    ],
    "start_token": 1905,
    "end_token": 1937,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      262,
      4931,
      286,
      705,
      19608,
      8079,
      6,
      878,
      18788,
      351,
      4560
    ],
    "label": "best_practice",
    "reason": "Check for the presence of 'datetime' before proceeding with operations"
  },
  {
    "line": 555,
    "text": "            yaxis3=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),",
    "annotation": "\u2705 Best Practice: Logging provides insight into the function's execution flow",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      22704,
      18,
      28,
      11600,
      7,
      12860,
      25928,
      28,
      17821,
      11,
      10706,
      10394,
      28,
      16,
      11,
      10706,
      8043,
      11639,
      15047,
      46130,
      33809
    ],
    "start_token": 1937,
    "end_token": 1970,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      3769,
      11281,
      656,
      262,
      2163,
      338,
      9706,
      5202
    ],
    "label": "best_practice",
    "reason": "Logging provides insight into the function's execution flow"
  },
  {
    "line": 558,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Remove timezone information for consistent datetime comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1970,
    "end_token": 1978,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17220,
      640,
      11340,
      1321,
      329,
      6414,
      4818,
      8079,
      7208
    ],
    "label": "best_practice",
    "reason": "Remove timezone information for consistent datetime comparison"
  },
  {
    "line": 560,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering data based on datetime is a common pattern in time-series analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1978,
    "end_token": 1978,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      1366,
      1912,
      319,
      4818,
      8079,
      318,
      257,
      2219,
      3912,
      287,
      640,
      12,
      25076,
      3781
    ],
    "label": "ml_signal",
    "reason": "Filtering data based on datetime is a common pattern in time-series analysis"
  },
  {
    "line": 561,
    "text": "    def update_daily_close(self, bars: dict[str, BarData], dt: datetime) -> None:",
    "annotation": "\u2705 Best Practice: Check if the DataFrame is empty to handle cases where no data matches the filter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4296,
      62,
      29468,
      62,
      19836,
      7,
      944,
      11,
      9210,
      25,
      8633,
      58,
      2536,
      11,
      2409,
      6601,
      4357,
      288,
      83,
      25,
      4818,
      8079,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1978,
    "end_token": 2008,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      6060,
      19778,
      318,
      6565,
      284,
      5412,
      2663,
      810,
      645,
      1366,
      7466,
      262,
      8106
    ],
    "label": "best_practice",
    "reason": "Check if the DataFrame is empty to handle cases where no data matches the filter"
  },
  {
    "line": 561,
    "text": "    def update_daily_close(self, bars: dict[str, BarData], dt: datetime) -> None:",
    "annotation": "\u2705 Best Practice: Logging when no data is found helps in debugging and understanding data flow",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4296,
      62,
      29468,
      62,
      19836,
      7,
      944,
      11,
      9210,
      25,
      8633,
      58,
      2536,
      11,
      2409,
      6601,
      4357,
      288,
      83,
      25,
      4818,
      8079,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2008,
    "end_token": 2038,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      618,
      645,
      1366,
      318,
      1043,
      5419,
      287,
      28769,
      290,
      4547,
      1366,
      5202
    ],
    "label": "best_practice",
    "reason": "Logging when no data is found helps in debugging and understanding data flow"
  },
  {
    "line": 571,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of round_to function suggests precision handling for price",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2038,
    "end_token": 2038,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2835,
      62,
      1462,
      2163,
      5644,
      15440,
      9041,
      329,
      2756
    ],
    "label": "best_practice",
    "reason": "Use of round_to function suggests precision handling for price"
  },
  {
    "line": 573,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extracting symbol and exchange from vt_symbol indicates a pattern of symbol management",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2038,
    "end_token": 2038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      6194,
      290,
      5163,
      422,
      410,
      83,
      62,
      1837,
      23650,
      9217,
      257,
      3912,
      286,
      6194,
      4542
    ],
    "label": "ml_signal",
    "reason": "Extracting symbol and exchange from vt_symbol indicates a pattern of symbol management"
  },
  {
    "line": 574,
    "text": "        if daily_result:",
    "annotation": "\ud83e\udde0 ML Signal: Incrementing order count is a common pattern in order management systems",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4445,
      62,
      20274,
      25
    ],
    "start_token": 2038,
    "end_token": 2050,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10791,
      434,
      278,
      1502,
      954,
      318,
      257,
      2219,
      3912,
      287,
      1502,
      4542,
      3341
    ],
    "label": "ml_signal",
    "reason": "Incrementing order count is a common pattern in order management systems"
  },
  {
    "line": 574,
    "text": "        if daily_result:",
    "annotation": "\u2705 Best Practice: Type hinting for order variable improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4445,
      62,
      20274,
      25
    ],
    "start_token": 2050,
    "end_token": 2062,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1502,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for order variable improves code readability and maintainability"
  },
  {
    "line": 590,
    "text": "            bar: BarData | None = self.history_data.get((dt, vt_symbol), None)",
    "annotation": "\ud83e\udde0 ML Signal: Storing active limit orders in a dictionary is a common pattern for tracking orders",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2318,
      25,
      2409,
      6601,
      930,
      6045,
      796,
      2116,
      13,
      23569,
      62,
      7890,
      13,
      1136,
      19510,
      28664,
      11,
      410,
      83,
      62,
      1837,
      23650,
      828,
      6045,
      8
    ],
    "start_token": 2062,
    "end_token": 2098,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4075,
      4179,
      6266,
      287,
      257,
      22155,
      318,
      257,
      2219,
      3912,
      329,
      9646,
      6266
    ],
    "label": "ml_signal",
    "reason": "Storing active limit orders in a dictionary is a common pattern for tracking orders"
  },
  {
    "line": 592,
    "text": "            # Check if historical data for the specified time of the contract is obtained",
    "annotation": "\ud83e\udde0 ML Signal: Storing all limit orders in a dictionary is a common pattern for order management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6822,
      611,
      6754,
      1366,
      329,
      262,
      7368,
      640,
      286,
      262,
      2775,
      318,
      6492
    ],
    "start_token": 2098,
    "end_token": 2123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      477,
      4179,
      6266,
      287,
      257,
      22155,
      318,
      257,
      2219,
      3912,
      329,
      1502,
      4542
    ],
    "label": "ml_signal",
    "reason": "Storing all limit orders in a dictionary is a common pattern for order management"
  },
  {
    "line": 594,
    "text": "                # Update K-line for order matching",
    "annotation": "\u2705 Best Practice: Returning a list of order IDs allows for easy tracking of multiple orders",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      509,
      12,
      1370,
      329,
      1502,
      12336
    ],
    "start_token": 2123,
    "end_token": 2146,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1351,
      286,
      1502,
      32373,
      3578,
      329,
      2562,
      9646,
      286,
      3294,
      6266
    ],
    "label": "best_practice",
    "reason": "Returning a list of order IDs allows for easy tracking of multiple orders"
  },
  {
    "line": 591,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checks for existence of order before proceeding, indicating a pattern of validation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2146,
    "end_token": 2146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      6224,
      286,
      1502,
      878,
      18788,
      11,
      12739,
      257,
      3912,
      286,
      21201,
      13
    ],
    "label": "ml_signal",
    "reason": "Checks for existence of order before proceeding, indicating a pattern of validation."
  },
  {
    "line": 594,
    "text": "                # Update K-line for order matching",
    "annotation": "\ud83e\udde0 ML Signal: Use of pop to remove and return an item from a dictionary.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      509,
      12,
      1370,
      329,
      1502,
      12336
    ],
    "start_token": 2146,
    "end_token": 2169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1461,
      284,
      4781,
      290,
      1441,
      281,
      2378,
      422,
      257,
      22155,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pop to remove and return an item from a dictionary."
  },
  {
    "line": 596,
    "text": "                # Cache K-line data for strategy.on_bars update",
    "annotation": "\ud83e\udde0 ML Signal: Directly modifying object attributes, indicating a pattern of state change.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      34088,
      509,
      12,
      1370,
      1366,
      329,
      4811,
      13,
      261,
      62,
      34046,
      4296
    ],
    "start_token": 2169,
    "end_token": 2197,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      306,
      30620,
      2134,
      12608,
      11,
      12739,
      257,
      3912,
      286,
      1181,
      1487,
      13
    ],
    "label": "ml_signal",
    "reason": "Directly modifying object attributes, indicating a pattern of state change."
  },
  {
    "line": 598,
    "text": "            # If not available, but there is contract data cached in the self.bars dictionary, use previous data to fill",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes strategy has an update_order method; potential for AttributeError if not validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1002,
      407,
      1695,
      11,
      475,
      612,
      318,
      2775,
      1366,
      39986,
      287,
      262,
      2116,
      13,
      34046,
      22155,
      11,
      779,
      2180,
      1366,
      284,
      6070
    ],
    "start_token": 2197,
    "end_token": 2231,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      4811,
      468,
      281,
      4296,
      62,
      2875,
      2446,
      26,
      2785,
      329,
      3460,
      4163,
      12331,
      611,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes strategy has an update_order method; potential for AttributeError if not validated."
  },
  {
    "line": 596,
    "text": "                # Cache K-line data for strategy.on_bars update",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters and return value improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      34088,
      509,
      12,
      1370,
      1366,
      329,
      4811,
      13,
      261,
      62,
      34046,
      4296
    ],
    "start_token": 2231,
    "end_token": 2259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters and return value improves code readability and maintainability."
  },
  {
    "line": 599,
    "text": "            elif vt_symbol in self.bars:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of f-string for string formatting.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      410,
      83,
      62,
      1837,
      23650,
      287,
      2116,
      13,
      34046,
      25
    ],
    "start_token": 2259,
    "end_token": 2282,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of f-string for string formatting."
  },
  {
    "line": 601,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list, indicating a pattern of collecting or storing data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2282,
    "end_token": 2282,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      11,
      12739,
      257,
      3912,
      286,
      13157,
      393,
      23069,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to a list, indicating a pattern of collecting or storing data."
  },
  {
    "line": 600,
    "text": "                old_bar: BarData = self.bars[vt_symbol]",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1468,
      62,
      5657,
      25,
      2409,
      6601,
      796,
      2116,
      13,
      34046,
      58,
      36540,
      62,
      1837,
      23650,
      60
    ],
    "start_token": 2282,
    "end_token": 2313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 603,
    "text": "                    symbol=old_bar.symbol,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing and returning data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      28,
      727,
      62,
      5657,
      13,
      1837,
      23650,
      11
    ],
    "start_token": 2313,
    "end_token": 2341,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      290,
      8024,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Accessing and returning data from a dictionary"
  },
  {
    "line": 603,
    "text": "                    symbol=old_bar.symbol,",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and return type hint can be used to infer method behavior and expected output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      28,
      727,
      62,
      5657,
      13,
      1837,
      23650,
      11
    ],
    "start_token": 2341,
    "end_token": 2369,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      1441,
      2099,
      9254,
      460,
      307,
      973,
      284,
      13249,
      2446,
      4069,
      290,
      2938,
      5072
    ],
    "label": "ml_signal",
    "reason": "Method signature and return type hint can be used to infer method behavior and expected output"
  },
  {
    "line": 606,
    "text": "                    open_price=old_bar.close_price,",
    "annotation": "\u2705 Best Practice: Using list() to explicitly convert values to a list ensures compatibility with different Python versions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1280,
      62,
      20888,
      28,
      727,
      62,
      5657,
      13,
      19836,
      62,
      20888,
      11
    ],
    "start_token": 2369,
    "end_token": 2400,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      3419,
      284,
      11777,
      10385,
      3815,
      284,
      257,
      1351,
      19047,
      17764,
      351,
      1180,
      11361,
      6300
    ],
    "label": "best_practice",
    "reason": "Using list() to explicitly convert values to a list ensures compatibility with different Python versions"
  },
  {
    "line": 606,
    "text": "                    open_price=old_bar.close_price,",
    "annotation": "\u2705 Best Practice: Type hinting for the return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1280,
      62,
      20888,
      28,
      727,
      62,
      5657,
      13,
      19836,
      62,
      20888,
      11
    ],
    "start_token": 2400,
    "end_token": 2431,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return type improves code readability and maintainability"
  },
  {
    "line": 609,
    "text": "                    close_price=old_bar.close_price,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary values to retrieve all items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1969,
      62,
      20888,
      28,
      727,
      62,
      5657,
      13,
      19836,
      62,
      20888,
      11
    ],
    "start_token": 2431,
    "end_token": 2462,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      3815,
      284,
      19818,
      477,
      3709
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary values to retrieve all items"
  },
  {
    "line": 611,
    "text": "                )",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2462,
    "end_token": 2478,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 613,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing an attribute of an object, indicating a common pattern of object-oriented programming",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2478,
    "end_token": 2478,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      281,
      11688,
      286,
      281,
      2134,
      11,
      12739,
      257,
      2219,
      3912,
      286,
      2134,
      12,
      17107,
      8300
    ],
    "label": "ml_signal",
    "reason": "Accessing an attribute of an object, indicating a common pattern of object-oriented programming"
  },
  {
    "line": 615,
    "text": "        self.strategy.on_bars(bars)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to calculate a cumulative value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2536,
      4338,
      13,
      261,
      62,
      34046,
      7,
      34046,
      8
    ],
    "start_token": 2478,
    "end_token": 2496,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      15284,
      257,
      23818,
      1988
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to calculate a cumulative value"
  },
  {
    "line": 617,
    "text": "        self.update_daily_close(self.bars, dt)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing elements from a dictionary using a key",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19119,
      62,
      29468,
      62,
      19836,
      7,
      944,
      13,
      34046,
      11,
      288,
      83,
      8
    ],
    "start_token": 2496,
    "end_token": 2518,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      4847,
      422,
      257,
      22155,
      1262,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing elements from a dictionary using a key"
  },
  {
    "line": 619,
    "text": "    def cross_order(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing elements from a dictionary using a key",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3272,
      62,
      2875,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2518,
    "end_token": 2531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      4847,
      422,
      257,
      22155,
      1262,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing elements from a dictionary using a key"
  },
  {
    "line": 621,
    "text": "        for order in list(self.active_limit_orders.values()):",
    "annotation": "\ud83e\udde0 ML Signal: Performing arithmetic operations to calculate a value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1502,
      287,
      1351,
      7,
      944,
      13,
      5275,
      62,
      32374,
      62,
      6361,
      13,
      27160,
      3419,
      2599
    ],
    "start_token": 2531,
    "end_token": 2554,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2448,
      15464,
      34768,
      4560,
      284,
      15284,
      257,
      1988
    ],
    "label": "ml_signal",
    "reason": "Performing arithmetic operations to calculate a value"
  },
  {
    "line": 623,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a calculated value from a function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2554,
    "end_token": 2554,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      10488,
      1988,
      422,
      257,
      2163
    ],
    "label": "best_practice",
    "reason": "Returning a calculated value from a function"
  },
  {
    "line": 624,
    "text": "            long_cross_price: float = bar.low_price",
    "annotation": "\u2705 Best Practice: Use of type annotations for constructor parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      890,
      62,
      19692,
      62,
      20888,
      25,
      12178,
      796,
      2318,
      13,
      9319,
      62,
      20888
    ],
    "start_token": 2554,
    "end_token": 2578,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      23772,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for constructor parameters improves code readability and maintainability."
  },
  {
    "line": 628,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing lists and variables in the constructor is a good practice for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2578,
    "end_token": 2578,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      8341,
      290,
      9633,
      287,
      262,
      23772,
      318,
      257,
      922,
      3357,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing lists and variables in the constructor is a good practice for clarity and maintainability."
  },
  {
    "line": 637,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method for adding data to a collection, indicating a pattern of data accumulation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2578,
    "end_token": 2578,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      4375,
      1366,
      284,
      257,
      4947,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      24106
    ],
    "label": "ml_signal",
    "reason": "Method for adding data to a collection, indicating a pattern of data accumulation"
  },
  {
    "line": 640,
    "text": "",
    "annotation": "\u2705 Best Practice: Using type annotations for method parameters and return type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2578,
    "end_token": 2578,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      2446,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Using type annotations for method parameters and return type"
  },
  {
    "line": 649,
    "text": "            short_cross: bool = (",
    "annotation": "\u2705 Best Practice: Check if pre_close is not None before assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1790,
      62,
      19692,
      25,
      20512,
      796,
      357
    ],
    "start_token": 2578,
    "end_token": 2596,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      662,
      62,
      19836,
      318,
      407,
      6045,
      878,
      16237
    ],
    "label": "best_practice",
    "reason": "Check if pre_close is not None before assignment"
  },
  {
    "line": 654,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of holding PnL based on position and price difference",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2596,
    "end_token": 2608,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      4769,
      350,
      77,
      43,
      1912,
      319,
      2292,
      290,
      2756,
      3580
    ],
    "label": "ml_signal",
    "reason": "Calculation of holding PnL based on position and price difference"
  },
  {
    "line": 656,
    "text": "            if not long_cross and not short_cross:",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the number of trades",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      890,
      62,
      19692,
      290,
      407,
      1790,
      62,
      19692,
      25
    ],
    "start_token": 2608,
    "end_token": 2630,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      1271,
      286,
      17674
    ],
    "label": "ml_signal",
    "reason": "Tracking the number of trades"
  },
  {
    "line": 658,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Differentiating logic based on trade direction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2630,
    "end_token": 2630,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      26336,
      9156,
      1912,
      319,
      3292,
      4571
    ],
    "label": "ml_signal",
    "reason": "Differentiating logic based on trade direction"
  },
  {
    "line": 667,
    "text": "            # Generate trade information",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of turnover based on trade volume and price",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2980,
      378,
      3292,
      1321
    ],
    "start_token": 2630,
    "end_token": 2646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      25079,
      1912,
      319,
      3292,
      6115,
      290,
      2756
    ],
    "label": "ml_signal",
    "reason": "Calculation of turnover based on trade volume and price"
  },
  {
    "line": 669,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of trading PnL based on position change and price difference",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2646,
    "end_token": 2646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      7313,
      350,
      77,
      43,
      1912,
      319,
      2292,
      1487,
      290,
      2756,
      3580
    ],
    "label": "ml_signal",
    "reason": "Calculation of trading PnL based on position change and price difference"
  },
  {
    "line": 671,
    "text": "                trade_price = min(order.price, long_best_price)",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating turnover for all trades",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      796,
      949,
      7,
      2875,
      13,
      20888,
      11,
      890,
      62,
      13466,
      62,
      20888,
      8
    ],
    "start_token": 2646,
    "end_token": 2677,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      25079,
      329,
      477,
      17674
    ],
    "label": "ml_signal",
    "reason": "Accumulating turnover for all trades"
  },
  {
    "line": 673,
    "text": "                trade_price = max(order.price, short_best_price)",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of commission based on turnover and rate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      796,
      3509,
      7,
      2875,
      13,
      20888,
      11,
      1790,
      62,
      13466,
      62,
      20888,
      8
    ],
    "start_token": 2677,
    "end_token": 2708,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      5810,
      1912,
      319,
      25079,
      290,
      2494
    ],
    "label": "ml_signal",
    "reason": "Calculation of commission based on turnover and rate"
  },
  {
    "line": 675,
    "text": "            trade: TradeData = TradeData(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of total PnL as sum of trading and holding PnL",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      25,
      9601,
      6601,
      796,
      9601,
      6601,
      7
    ],
    "start_token": 2708,
    "end_token": 2727,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2472,
      350,
      77,
      43,
      355,
      2160,
      286,
      7313,
      290,
      4769,
      350,
      77,
      43
    ],
    "label": "ml_signal",
    "reason": "Calculation of total PnL as sum of trading and holding PnL"
  },
  {
    "line": 677,
    "text": "                exchange=order.exchange,",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of net PnL after deducting commission",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      28,
      2875,
      13,
      1069,
      3803,
      11
    ],
    "start_token": 2727,
    "end_token": 2749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2010,
      350,
      77,
      43,
      706,
      18777,
      278,
      5810
    ],
    "label": "ml_signal",
    "reason": "Calculation of net PnL after deducting commission"
  },
  {
    "line": 671,
    "text": "                trade_price = min(order.price, long_best_price)",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      796,
      949,
      7,
      2875,
      13,
      20888,
      11,
      890,
      62,
      13466,
      62,
      20888,
      8
    ],
    "start_token": 2749,
    "end_token": 2780,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 673,
    "text": "                trade_price = max(order.price, short_best_price)",
    "annotation": "\ud83e\udde0 ML Signal: Tracking changes to object attributes can be useful for understanding object state changes over time.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      796,
      3509,
      7,
      2875,
      13,
      20888,
      11,
      1790,
      62,
      13466,
      62,
      20888,
      8
    ],
    "start_token": 2780,
    "end_token": 2811,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      2458,
      284,
      2134,
      12608,
      460,
      307,
      4465,
      329,
      4547,
      2134,
      1181,
      2458,
      625,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "Tracking changes to object attributes can be useful for understanding object state changes over time."
  },
  {
    "line": 676,
    "text": "                symbol=order.symbol,",
    "annotation": "\u2705 Best Practice: Type annotations for parameters and return value improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      28,
      2875,
      13,
      1837,
      23650,
      11
    ],
    "start_token": 2811,
    "end_token": 2833,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      10007,
      290,
      1441,
      1988,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for parameters and return value improve code readability and maintainability."
  },
  {
    "line": 678,
    "text": "                orderid=order.orderid,",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      312,
      28,
      2875,
      13,
      2875,
      312,
      11
    ],
    "start_token": 2833,
    "end_token": 2856,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability."
  },
  {
    "line": 685,
    "text": "                gateway_name=self.gateway_name,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items is a common pattern that can be used to train ML models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      62,
      3672,
      28,
      944,
      13,
      10494,
      1014,
      62,
      3672,
      11
    ],
    "start_token": 2856,
    "end_token": 2882,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      318,
      257,
      2219,
      3912,
      326,
      460,
      307,
      973,
      284,
      4512,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items is a common pattern that can be used to train ML models."
  },
  {
    "line": 693,
    "text": "            if trade.direction == Direction.LONG:",
    "annotation": "\ud83e\udde0 ML Signal: Method for adding trade data, useful for learning trade patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3292,
      13,
      37295,
      6624,
      41837,
      13,
      43,
      18494,
      25
    ],
    "start_token": 2882,
    "end_token": 2903,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      4375,
      3292,
      1366,
      11,
      4465,
      329,
      4673,
      3292,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method for adding trade data, useful for learning trade patterns"
  },
  {
    "line": 694,
    "text": "                trade_commission: float = trade_turnover * self.long_rates[trade.vt_symbol]",
    "annotation": "\u2705 Best Practice: Type hinting for 'trade' and return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      785,
      3411,
      25,
      12178,
      796,
      3292,
      62,
      15344,
      2502,
      1635,
      2116,
      13,
      6511,
      62,
      9700,
      58,
      25351,
      13,
      36540,
      62,
      1837,
      23650,
      60
    ],
    "start_token": 2903,
    "end_token": 2943,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      25351,
      6,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'trade' and return type improves code readability and maintainability"
  },
  {
    "line": 695,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing contract results by trade symbol, indicating a pattern of data organization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2943,
    "end_token": 2956,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2775,
      2482,
      416,
      3292,
      6194,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4009
    ],
    "label": "ml_signal",
    "reason": "Accessing contract results by trade symbol, indicating a pattern of data organization"
  },
  {
    "line": 695,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Type hinting for 'contract_result' improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2956,
    "end_token": 2969,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      28484,
      62,
      20274,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'contract_result' improves code readability and maintainability"
  },
  {
    "line": 695,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Method call to add trade to contract result, useful for learning trade processing patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2969,
    "end_token": 2982,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      751,
      3292,
      284,
      2775,
      1255,
      11,
      4465,
      329,
      4673,
      3292,
      7587,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method call to add trade to contract result, useful for learning trade processing patterns"
  },
  {
    "line": 704,
    "text": "",
    "annotation": "\u2705 Best Practice: Storing input parameters as instance variables can improve code organization and access.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2982,
    "end_token": 2982,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      5128,
      10007,
      355,
      4554,
      9633,
      460,
      2987,
      2438,
      4009,
      290,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Storing input parameters as instance variables can improve code organization and access."
  },
  {
    "line": 706,
    "text": "            self.strategy.update_trade(trade)",
    "annotation": "\u2705 Best Practice: Storing input parameters as instance variables can improve code organization and access.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2536,
      4338,
      13,
      19119,
      62,
      25351,
      7,
      25351,
      8
    ],
    "start_token": 2982,
    "end_token": 3004,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      5128,
      10007,
      355,
      4554,
      9633,
      460,
      2987,
      2438,
      4009,
      290,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Storing input parameters as instance variables can improve code organization and access."
  },
  {
    "line": 707,
    "text": "            self.trades[trade.vt_tradeid] = trade",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over items in a dictionary is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      2367,
      58,
      25351,
      13,
      36540,
      62,
      25351,
      312,
      60,
      796,
      3292
    ],
    "start_token": 3004,
    "end_token": 3029,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3709,
      287,
      257,
      22155,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over items in a dictionary is a common pattern."
  },
  {
    "line": 707,
    "text": "            self.trades[trade.vt_tradeid] = trade",
    "annotation": "\ud83e\udde0 ML Signal: Method calls with multiple parameters can indicate complex operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      2367,
      58,
      25351,
      13,
      36540,
      62,
      25351,
      312,
      60,
      796,
      3292
    ],
    "start_token": 3029,
    "end_token": 3054,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      351,
      3294,
      10007,
      460,
      7603,
      3716,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls with multiple parameters can indicate complex operations."
  },
  {
    "line": 714,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Using dictionary get method with default values is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3054,
    "end_token": 3054,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      22155,
      651,
      2446,
      351,
      4277,
      3815,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Using dictionary get method with default values is a common pattern."
  },
  {
    "line": 714,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Using dictionary get method with default values is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3054,
    "end_token": 3054,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      22155,
      651,
      2446,
      351,
      4277,
      3815,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Using dictionary get method with default values is a common pattern."
  },
  {
    "line": 716,
    "text": "        signal: pl.DataFrame = self.signal_df.filter(pl.col(\"datetime\") == dt)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if vt_symbol is not in sizes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6737,
      25,
      458,
      13,
      6601,
      19778,
      796,
      2116,
      13,
      12683,
      282,
      62,
      7568,
      13,
      24455,
      7,
      489,
      13,
      4033,
      7203,
      19608,
      8079,
      4943,
      6624,
      288,
      83,
      8
    ],
    "start_token": 3054,
    "end_token": 3088,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      410,
      83,
      62,
      1837,
      23650,
      318,
      407,
      287,
      10620,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if vt_symbol is not in sizes."
  },
  {
    "line": 718,
    "text": "        if signal.is_empty():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if vt_symbol is not in long_rates.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6737,
      13,
      271,
      62,
      28920,
      33529
    ],
    "start_token": 3088,
    "end_token": 3102,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      410,
      83,
      62,
      1837,
      23650,
      318,
      407,
      287,
      890,
      62,
      9700,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if vt_symbol is not in long_rates."
  },
  {
    "line": 720,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if vt_symbol is not in short_rates.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3102,
    "end_token": 3102,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      410,
      83,
      62,
      1837,
      23650,
      318,
      407,
      287,
      1790,
      62,
      9700,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if vt_symbol is not in short_rates."
  },
  {
    "line": 723,
    "text": "    def send_order(",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3758,
      62,
      2875,
      7
    ],
    "start_token": 3102,
    "end_token": 3110,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 725,
    "text": "        strategy: AlphaStrategy,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4811,
      25,
      12995,
      13290,
      4338,
      11
    ],
    "start_token": 3110,
    "end_token": 3123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 727,
    "text": "        direction: Direction,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      25,
      41837,
      11
    ],
    "start_token": 3123,
    "end_token": 3134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 728,
    "text": "        offset: Offset,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11677,
      25,
      3242,
      2617,
      11
    ],
    "start_token": 3134,
    "end_token": 3146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 730,
    "text": "        volume: float,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      25,
      12178,
      11
    ],
    "start_token": 3146,
    "end_token": 3157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 730,
    "text": "        volume: float,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      25,
      12178,
      11
    ],
    "start_token": 3157,
    "end_token": 3168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 730,
    "text": "        volume: float,",
    "annotation": "\ud83e\udde0 ML Signal: Accumulating values in a loop is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      25,
      12178,
      11
    ],
    "start_token": 3168,
    "end_token": 3179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6366,
      388,
      8306,
      3815,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accumulating values in a loop is a common pattern."
  },
  {
    "line": 730,
    "text": "        volume: float,",
    "annotation": "\u2705 Best Practice: Storing results in a dictionary for easy access and modification.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      25,
      12178,
      11
    ],
    "start_token": 3179,
    "end_token": 3190,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      2482,
      287,
      257,
      22155,
      329,
      2562,
      1895,
      290,
      17613,
      13
    ],
    "label": "best_practice",
    "reason": "Storing results in a dictionary for easy access and modification."
  },
  {
    "line": 724,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Use of dictionary update method for merging dictionaries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 3190,
    "end_token": 3199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      4296,
      2446,
      329,
      35981,
      48589,
      3166
    ],
    "label": "best_practice",
    "reason": "Use of dictionary update method for merging dictionaries"
  },
  {
    "line": 726,
    "text": "        vt_symbol: str,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items to process key-value pairs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      11
    ],
    "start_token": 3199,
    "end_token": 3214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      284,
      1429,
      1994,
      12,
      8367,
      14729
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items to process key-value pairs"
  },
  {
    "line": 728,
    "text": "        offset: Offset,",
    "annotation": "\ud83e\udde0 ML Signal: Use of type hinting for variable assignment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11677,
      25,
      3242,
      2617,
      11
    ],
    "start_token": 3214,
    "end_token": 3226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      16237
    ],
    "label": "ml_signal",
    "reason": "Use of type hinting for variable assignment"
  },
  {
    "line": 730,
    "text": "        volume: float,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to handle existing and new entries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      25,
      12178,
      11
    ],
    "start_token": 3226,
    "end_token": 3237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5412,
      4683,
      290,
      649,
      12784
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to handle existing and new entries"
  },
  {
    "line": 730,
    "text": "        volume: float,",
    "annotation": "\ud83e\udde0 ML Signal: Creating new instances when a condition is not met",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      25,
      12178,
      11
    ],
    "start_token": 3237,
    "end_token": 3248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      649,
      10245,
      618,
      257,
      4006,
      318,
      407,
      1138
    ],
    "label": "ml_signal",
    "reason": "Creating new instances when a condition is not met"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Grouping related imports together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 13]",1.0,16,best_practice,3,Grouping related imports together improves readability.,,0,import pyqtgraph as pg      # type: ignore,"[11748, 12972, 80, 25297, 1470, 355, 23241, 220, 220, 220, 220, 220, 1303, 2099, 25, 8856]"
✅ Best Practice: Setting configuration options at the start of the script is a good practice for clarity.,"[26486, 227, 6705, 19939, 25, 25700, 8398, 3689, 379, 262, 923, 286, 262, 4226, 318, 257, 922, 3357, 329, 16287, 13]",1.0,24,best_practice,13,Setting configuration options at the start of the script is a good practice for clarity.,,16,from .axis import DatetimeAxis,"[6738, 764, 22704, 1330, 16092, 8079, 31554, 271]"
✅ Best Practice: Class docstring is empty; consider providing a description of the class.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 318, 6565, 26, 2074, 4955, 257, 6764, 286, 262, 1398, 13]",0.5,32,best_practice,13,Class docstring is empty; consider providing a description of the class.,,24,from .axis import DatetimeAxis,"[6738, 764, 22704, 1330, 16092, 8079, 31554, 271]"
✅ Best Practice: Constants should be documented or named descriptively to convey their purpose.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 12395, 393, 3706, 12145, 2280, 284, 13878, 511, 4007, 13]",0.5,32,best_practice,16,Constants should be documented or named descriptively to convey their purpose.,,32,,[]
✅ Best Practice: Initialize all instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 477, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",0.5,32,best_practice,19,Initialize all instance variables in the constructor for clarity and maintainability,,32,,[]
✅ Best Practice: Use type annotations for instance variables for better readability and type checking,"[26486, 227, 6705, 19939, 25, 5765, 2099, 37647, 329, 4554, 9633, 329, 1365, 1100, 1799, 290, 2099, 10627]",0.5,38,best_practice,21,Use type annotations for instance variables for better readability and type checking,,32,"    """"""""""""","[220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Encapsulate UI initialization in a separate method for better organization,"[26486, 227, 6705, 19939, 25, 14711, 1686, 5039, 12454, 37588, 287, 257, 4553, 2446, 329, 1365, 4009]",0.5,38,best_practice,29,Encapsulate UI initialization in a separate method for better organization,,38,,[]
✅ Best Practice: Set a descriptive window title for better user experience,"[26486, 227, 6705, 19939, 25, 5345, 257, 35644, 4324, 3670, 329, 1365, 2836, 1998]",0.5,61,best_practice,30,Set a descriptive window title for better user experience,,38,"        self._plots: dict[str, pg.PlotItem] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 489, 1747, 25, 8633, 58, 2536, 11, 23241, 13, 43328, 7449, 60, 796, 23884]"
🧠 ML Signal: Usage of a specific graphics layout library (pg.GraphicsLayout),"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 9382, 12461, 5888, 357, 6024, 13, 18172, 32517, 8]",0.5,88,ml_signal,32,Usage of a specific graphics layout library (pg.GraphicsLayout),,61,"        self._item_plot_map: dict[ChartItem, pg.PlotItem] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9186, 62, 29487, 62, 8899, 25, 8633, 58, 45488, 7449, 11, 23241, 13, 43328, 7449, 60, 796, 23884]"
✅ Best Practice: Set consistent margins for layout aesthetics,"[26486, 227, 6705, 19939, 25, 5345, 6414, 20241, 329, 12461, 35431]",0.5,109,best_practice,34,Set consistent margins for layout aesthetics,,88,        self._first_plot: pg.PlotItem | None = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 11085, 62, 29487, 25, 23241, 13, 43328, 7449, 930, 6045, 796, 6045]"
✅ Best Practice: Set spacing to 0 for a compact layout,"[26486, 227, 6705, 19939, 25, 5345, 31050, 284, 657, 329, 257, 16001, 12461]",0.5,109,best_practice,36,Set spacing to 0 for a compact layout,,109,,[]
✅ Best Practice: Set border color and width for visual clarity,"[26486, 227, 6705, 19939, 25, 5345, 4865, 3124, 290, 9647, 329, 5874, 16287]",0.5,141,best_practice,38,Set border color and width for visual clarity,,109,        self._bar_count: int = self.MIN_BAR_COUNT   # Total bar visible in chart,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5657, 62, 9127, 25, 493, 796, 2116, 13, 23678, 62, 33, 1503, 62, 34, 28270, 220, 220, 1303, 7472, 2318, 7424, 287, 8262]"
✅ Best Practice: Set Z value to control stacking order of items,"[26486, 227, 6705, 19939, 25, 5345, 1168, 1988, 284, 1630, 41228, 1502, 286, 3709]",0.5,154,best_practice,40,Set Z value to control stacking order of items,,141,        self._init_ui(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 15003, 62, 9019, 3419]"
✅ Best Practice: Set central item to ensure layout is displayed,"[26486, 227, 6705, 19939, 25, 5345, 4318, 2378, 284, 4155, 12461, 318, 9066]",0.5,168,best_practice,42,Set central item to ensure layout is displayed,,154,    def _init_ui(self) -> None:,"[220, 220, 220, 825, 4808, 15003, 62, 9019, 7, 944, 8, 4613, 6045, 25]"
✅ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,210,best_practice,37,Use of type hint for return value improves code readability and maintainability,,168,        self._right_ix: int = 0                     # Index of most right data,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 3506, 62, 844, 25, 493, 796, 657, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 12901, 286, 749, 826, 1366]"
"🧠 ML Signal: Method returns a new instance of a class, indicating a factory or builder pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 257, 649, 4554, 286, 257, 1398, 11, 12739, 257, 8860, 393, 27098, 3912]",0.5,210,ml_signal,39,"Method returns a new instance of a class, indicating a factory or builder pattern",,210,,[]
🧠 ML Signal: Checks for the existence of an attribute before assignment,"[8582, 100, 254, 10373, 26484, 25, 47719, 329, 262, 6224, 286, 281, 11688, 878, 16237]",1.0,210,ml_signal,41,Checks for the existence of an attribute before assignment,,210,,[]
🧠 ML Signal: Instantiation of an object with multiple dependencies,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 281, 2134, 351, 3294, 20086]",1.0,224,ml_signal,42,Instantiation of an object with multiple dependencies,,210,    def _init_ui(self) -> None:,"[220, 220, 220, 825, 4808, 15003, 62, 9019, 7, 944, 8, 4613, 6045, 25]"
✅ Best Practice: Type hinting for plot variable improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 7110, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,245,best_practice,54,Type hinting for plot variable improves code readability and maintainability,,224,"        return DatetimeAxis(self._manager, orientation=""bottom"")","[220, 220, 220, 220, 220, 220, 220, 1441, 16092, 8079, 31554, 271, 7, 944, 13557, 37153, 11, 12852, 2625, 22487, 4943]"
✅ Best Practice: Type hinting for view variable improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1570, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,256,best_practice,70,Type hinting for view variable improves code readability and maintainability,,245,        Add plot area.,"[220, 220, 220, 220, 220, 220, 220, 3060, 7110, 1989, 13]"
🧠 ML Signal: Usage of signal-slot connection pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6737, 12, 43384, 4637, 3912]",1.0,267,ml_signal,72,Usage of signal-slot connection pattern,,256,        # Create plot object,"[220, 220, 220, 220, 220, 220, 220, 1303, 13610, 7110, 2134]"
✅ Best Practice: Type hinting for right_axis variable improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 826, 62, 22704, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,284,best_practice,75,Type hinting for right_axis variable improves code readability and maintainability,,267,        plot.setClipToView(True),"[220, 220, 220, 220, 220, 220, 220, 7110, 13, 2617, 2601, 541, 2514, 7680, 7, 17821, 8]"
✅ Best Practice: Type hinting for first_plot variable improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 717, 62, 29487, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,297,best_practice,80,Type hinting for first_plot variable improves code readability and maintainability,,284,        plot.hideButtons(),"[220, 220, 220, 220, 220, 220, 220, 7110, 13, 24717, 1537, 27288, 3419]"
🧠 ML Signal: Usage of dictionary to store plot objects,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 7110, 5563]",0.5,314,ml_signal,81,Usage of dictionary to store plot objects,,297,        plot.setMinimumHeight(minimum_height),"[220, 220, 220, 220, 220, 220, 220, 7110, 13, 2617, 44046, 23106, 7, 39504, 62, 17015, 8]"
🧠 ML Signal: Instantiating objects using a class passed as a parameter,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 5563, 1262, 257, 1398, 3804, 355, 257, 11507]",0.5,332,ml_signal,90,Instantiating objects using a class passed as a parameter,,314,            self._first_plot = plot,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 11085, 62, 29487, 796, 7110]"
✅ Best Practice: Using type annotations for dictionary keys and values,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 22155, 8251, 290, 3815]",0.5,349,best_practice,92,Using type annotations for dictionary keys and values,,332,        # Connect view change signal to update y range function,"[220, 220, 220, 220, 220, 220, 220, 1303, 8113, 1570, 1487, 6737, 284, 4296, 331, 2837, 2163]"
⚠️ SAST Risk (Low): Potential NoneType error if plot_name is not found in self._plots,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 4049, 611, 7110, 62, 3672, 318, 407, 1043, 287, 2116, 13557, 489, 1747]",1.0,374,sast_risk,94,Potential NoneType error if plot_name is not found in self._plots,Low,349,        view.sigXRangeChanged.connect(self._update_y_range),"[220, 220, 220, 220, 220, 220, 220, 1570, 13, 82, 328, 55, 17257, 31813, 13, 8443, 7, 944, 13557, 19119, 62, 88, 62, 9521, 8]"
⚠️ SAST Risk (Low): Possible AttributeError if plot is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33671, 3460, 4163, 12331, 611, 7110, 318, 6045]",0.5,374,sast_risk,96,Possible AttributeError if plot is None,Low,374,,[]
✅ Best Practice: Maintaining a mapping between items and plots for easy reference,"[26486, 227, 6705, 19939, 25, 337, 2913, 1397, 257, 16855, 1022, 3709, 290, 21528, 329, 2562, 4941]",0.5,390,best_practice,99,Maintaining a mapping between items and plots for easy reference,,374,        right_axis.setWidth(60),"[220, 220, 220, 220, 220, 220, 220, 826, 62, 22704, 13, 2617, 30916, 7, 1899, 8]"
✅ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,411,best_practice,95,Include type hints for method parameters and return type for better readability and maintainability,,390,"        view.setMouseEnabled(x=True, y=False)","[220, 220, 220, 220, 220, 220, 220, 1570, 13, 2617, 39643, 20491, 7, 87, 28, 17821, 11, 331, 28, 25101, 8]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,430,ml_signal,100,Usage of dictionary get method with default value,,411,        right_axis.tickFont = NORMAL_FONT,"[220, 220, 220, 220, 220, 220, 220, 826, 62, 22704, 13, 42298, 23252, 796, 25273, 42126, 62, 37, 35830]"
✅ Best Practice: Type hinting for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,449,best_practice,100,Type hinting for return value improves code readability and maintainability,,430,        right_axis.tickFont = NORMAL_FONT,"[220, 220, 220, 220, 220, 220, 220, 826, 62, 22704, 13, 42298, 23252, 796, 25273, 42126, 62, 37, 35830]"
🧠 ML Signal: Accessing instance variables like self._plots can indicate object-oriented design patterns,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 4554, 9633, 588, 2116, 13557, 489, 1747, 460, 7603, 2134, 12, 17107, 1486, 7572]",1.0,470,ml_signal,105,Accessing instance variables like self._plots can indicate object-oriented design patterns,,449,            plot.setXLink(first_plot),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7110, 13, 2617, 55, 11280, 7, 11085, 62, 29487, 8]"
✅ Best Practice: Clear and concise docstring explaining the method's purpose.,"[26486, 227, 6705, 19939, 25, 11459, 290, 35327, 2205, 8841, 11170, 262, 2446, 338, 4007, 13]",0.5,470,best_practice,109,Clear and concise docstring explaining the method's purpose.,,470,,[]
"🧠 ML Signal: Method chaining pattern, indicating a sequence of operations.","[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 11, 12739, 257, 8379, 286, 4560, 13]",0.5,484,ml_signal,111,"Method chaining pattern, indicating a sequence of operations.",,470,        self._layout.nextRow(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 39786, 13, 19545, 25166, 3419]"
🧠 ML Signal: Iterating over a collection to perform an operation on each item.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 284, 1620, 281, 4905, 319, 1123, 2378, 13]",0.5,484,ml_signal,113,Iterating over a collection to perform an operation on each item.,,484,,[]
🧠 ML Signal: Recursively calling a method on items in a collection.,"[8582, 100, 254, 10373, 26484, 25, 3311, 1834, 2280, 4585, 257, 2446, 319, 3709, 287, 257, 4947, 13]",0.5,493,ml_signal,115,Recursively calling a method on items in a collection.,,484,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
⚠️ SAST Risk (Low): Potential for NoneType error if _cursor is not properly checked.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 4049, 611, 4808, 66, 21471, 318, 407, 6105, 10667, 13]",0.5,505,sast_risk,118,Potential for NoneType error if _cursor is not properly checked.,Low,493,        plot_name: str,"[220, 220, 220, 220, 220, 220, 220, 7110, 62, 3672, 25, 965]"
🧠 ML Signal: Conditional operation based on the presence of an attribute.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 4905, 1912, 319, 262, 4931, 286, 281, 11688, 13]",0.5,512,ml_signal,119,Conditional operation based on the presence of an attribute.,,505,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,524,best_practice,118,Use of type hints for function parameters and return type improves code readability and maintainability.,,512,        plot_name: str,"[220, 220, 220, 220, 220, 220, 220, 7110, 62, 3672, 25, 965]"
🧠 ML Signal: Iterating over a dictionary's values to perform an operation on each item.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 338, 3815, 284, 1620, 281, 4905, 319, 1123, 2378, 13]",0.5,532,ml_signal,120,Iterating over a dictionary's values to perform an operation on each item.,,524,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"🧠 ML Signal: Calling a method on each item in a collection, indicating a pattern of updating or processing multiple objects.","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2446, 319, 1123, 2378, 287, 257, 4947, 11, 12739, 257, 3912, 286, 19698, 393, 7587, 3294, 5563, 13]",0.5,540,ml_signal,122,"Calling a method on each item in a collection, indicating a pattern of updating or processing multiple objects.",,532,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"🧠 ML Signal: Method call to update plot limits, indicating a pattern of visual data representation.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 7110, 7095, 11, 12739, 257, 3912, 286, 5874, 1366, 10552, 13]",0.5,557,ml_signal,124,"Method call to update plot limits, indicating a pattern of visual data representation.",,540,        self._items[item_name] = item,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 23814, 58, 9186, 62, 3672, 60, 796, 2378]"
"🧠 ML Signal: Method call to adjust view or position, indicating a pattern of user interface or visualization adjustment.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4532, 1570, 393, 2292, 11, 12739, 257, 3912, 286, 2836, 7071, 393, 32704, 15068, 13]",0.5,571,ml_signal,127,"Method call to adjust view or position, indicating a pattern of user interface or visualization adjustment.",,557,        plot.addItem(item),"[220, 220, 220, 220, 220, 220, 220, 7110, 13, 2860, 7449, 7, 9186, 8]"
🧠 ML Signal: Method updates internal state based on input data,"[8582, 100, 254, 10373, 26484, 25, 11789, 5992, 5387, 1181, 1912, 319, 5128, 1366]",1.0,585,ml_signal,127,Method updates internal state based on input data,,571,        plot.addItem(item),"[220, 220, 220, 220, 220, 220, 220, 7110, 13, 2860, 7449, 7, 9186, 8]"
🧠 ML Signal: Iterating over a collection to update each item,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 284, 4296, 1123, 2378]",1.0,604,ml_signal,129,Iterating over a collection to update each item,,585,        self._item_plot_map[item] = plot,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9186, 62, 29487, 62, 8899, 58, 9186, 60, 796, 7110]"
🧠 ML Signal: Method updates internal state based on input data,"[8582, 100, 254, 10373, 26484, 25, 11789, 5992, 5387, 1181, 1912, 319, 5128, 1366]",1.0,626,ml_signal,131,Method updates internal state based on input data,,604,"    def get_plot(self, plot_name: str) -> pg.PlotItem:","[220, 220, 220, 825, 651, 62, 29487, 7, 944, 11, 7110, 62, 3672, 25, 965, 8, 4613, 23241, 13, 43328, 7449, 25]"
🧠 ML Signal: Method updates internal state based on input data,"[8582, 100, 254, 10373, 26484, 25, 11789, 5992, 5387, 1181, 1912, 319, 5128, 1366]",1.0,640,ml_signal,133,Method updates internal state based on input data,,626,        Get specific plot with its name.,"[220, 220, 220, 220, 220, 220, 220, 3497, 2176, 7110, 351, 663, 1438, 13]"
✅ Best Practice: Use parentheses for clarity in complex conditions,"[26486, 227, 6705, 19939, 25, 5765, 46672, 329, 16287, 287, 3716, 3403]",1.0,648,best_practice,134,Use parentheses for clarity in complex conditions,,640,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Conditional logic triggers a state change,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 20022, 257, 1181, 1487]",1.0,669,ml_signal,137,Conditional logic triggers a state change,,648,    def get_all_plots(self) -> list[pg.PlotItem]:,"[220, 220, 220, 825, 651, 62, 439, 62, 489, 1747, 7, 944, 8, 4613, 1351, 58, 6024, 13, 43328, 7449, 5974]"
🧠 ML Signal: Iterating over a dictionary to update associated values,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 4296, 3917, 3815]",1.0,690,ml_signal,137,Iterating over a dictionary to update associated values,,669,    def get_all_plots(self) -> list[pg.PlotItem]:,"[220, 220, 220, 825, 651, 62, 439, 62, 489, 1747, 7, 944, 8, 4613, 1351, 58, 6024, 13, 43328, 7449, 5974]"
🧠 ML Signal: Method call to retrieve a range of values,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 19818, 257, 2837, 286, 3815]",1.0,702,ml_signal,139,Method call to retrieve a range of values,,690,        Get all plot objects.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 7110, 5563, 13]"
🧠 ML Signal: Method call to set limits on a plot,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 900, 7095, 319, 257, 7110]",0.5,714,ml_signal,139,Method call to set limits on a plot,,702,        Get all plot objects.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 7110, 5563, 13]"
✅ Best Practice: Use of named parameters for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 10007, 329, 16287]",0.5,726,best_practice,139,Use of named parameters for clarity,,714,        Get all plot objects.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 7110, 5563, 13]"
⚠️ SAST Risk (Low): Potential risk if get_count() returns unexpected values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 651, 62, 9127, 3419, 5860, 10059, 3815]",0.5,737,sast_risk,145,Potential risk if get_count() returns unexpected values,Low,726,        Clear all data.,"[220, 220, 220, 220, 220, 220, 220, 11459, 477, 1366, 13]"
✅ Best Practice: Type hinting for variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,753,best_practice,149,Type hinting for variables improves code readability and maintainability.,,737,        for item in self._items.values():,"[220, 220, 220, 220, 220, 220, 220, 329, 2378, 287, 2116, 13557, 23814, 13, 27160, 33529]"
✅ Best Practice: Type hinting for variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,753,best_practice,151,Type hinting for variables improves code readability and maintainability.,,753,,[]
🧠 ML Signal: Iterating over a collection of plots to update their properties.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 286, 21528, 284, 4296, 511, 6608, 13]",0.5,773,ml_signal,153,Iterating over a collection of plots to update their properties.,,753,            self._cursor.clear_all(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 66, 21471, 13, 20063, 62, 439, 3419]"
"🧠 ML Signal: Method call to set a specific range on a plot, indicating usage of a plotting library.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 900, 257, 2176, 2837, 319, 257, 7110, 11, 12739, 8748, 286, 257, 29353, 5888, 13]",0.5,773,ml_signal,154,"Method call to set a specific range on a plot, indicating usage of a plotting library.",,773,,[]
✅ Best Practice: Early return pattern improves readability by reducing nested code.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 1100, 1799, 416, 8868, 28376, 2438, 13]",1.0,787,best_practice,157,Early return pattern improves readability by reducing nested code.,,773,        Update a list of bar data.,"[220, 220, 220, 220, 220, 220, 220, 10133, 257, 1351, 286, 2318, 1366, 13]"
🧠 ML Signal: Usage of type hinting for variable 'view' indicates a pattern for type-aware programming.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 1177, 6, 9217, 257, 3912, 329, 2099, 12, 9685, 8300, 13]",1.0,787,ml_signal,160,Usage of type hinting for variable 'view' indicates a pattern for type-aware programming.,,787,,[]
🧠 ML Signal: Usage of type hinting for variable 'view_range' indicates a pattern for type-aware programming.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 1177, 62, 9521, 6, 9217, 257, 3912, 329, 2099, 12, 9685, 8300, 13]",1.0,806,ml_signal,162,Usage of type hinting for variable 'view_range' indicates a pattern for type-aware programming.,,787,            item.update_history(history),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2378, 13, 19119, 62, 23569, 7, 23569, 8]"
"✅ Best Practice: Use of max function ensures 'min_ix' is non-negative, preventing potential index errors.","[26486, 227, 6705, 19939, 25, 5765, 286, 3509, 2163, 19047, 705, 1084, 62, 844, 6, 318, 1729, 12, 31591, 11, 12174, 2785, 6376, 8563, 13]",1.0,821,best_practice,164,"Use of max function ensures 'min_ix' is non-negative, preventing potential index errors.",,806,        self._update_plot_limits(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 29487, 62, 49196, 3419]"
⚠️ SAST Risk (Low): Potential risk if 'view_range[0][1]' is not within expected bounds of 'self._manager.get_count()'.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 1177, 62, 9521, 58, 15, 7131, 16, 49946, 318, 407, 1626, 2938, 22303, 286, 705, 944, 13557, 37153, 13, 1136, 62, 9127, 3419, 4458]",0.5,836,sast_risk,166,Potential risk if 'view_range[0][1]' is not within expected bounds of 'self._manager.get_count()'.,Low,821,        self.move_to_right(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 21084, 62, 1462, 62, 3506, 3419]"
🧠 ML Signal: Iterating over dictionary items is a common pattern for processing key-value pairs.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 318, 257, 2219, 3912, 329, 7587, 1994, 12, 8367, 14729, 13]",1.0,836,ml_signal,167,Iterating over dictionary items is a common pattern for processing key-value pairs.,,836,,[]
🧠 ML Signal: Usage of type hinting for variable 'y_range' indicates a pattern for type-aware programming.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 88, 62, 9521, 6, 9217, 257, 3912, 329, 2099, 12, 9685, 8300, 13]",1.0,848,ml_signal,170,Usage of type hinting for variable 'y_range' indicates a pattern for type-aware programming.,,836,        Update single bar data.,"[220, 220, 220, 220, 220, 220, 220, 10133, 2060, 2318, 1366, 13]"
✅ Best Practice: Explicitly naming the parameter 'yRange' improves code readability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 19264, 262, 11507, 705, 88, 17257, 6, 19575, 2438, 1100, 1799, 13]",0.5,865,best_practice,172,Explicitly naming the parameter 'yRange' improves code readability.,,848,        self._manager.update_bar(bar),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 37153, 13, 19119, 62, 5657, 7, 5657, 8]"
✅ Best Practice: Early return pattern improves readability by handling base cases first.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 1100, 1799, 416, 9041, 2779, 2663, 717, 13]",0.5,877,best_practice,170,Early return pattern improves readability by handling base cases first.,,865,        Update single bar data.,"[220, 220, 220, 220, 220, 220, 220, 10133, 2060, 2318, 1366, 13]"
🧠 ML Signal: Type hinting for variables can be used to infer expected data types.,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 9633, 460, 307, 973, 284, 13249, 2938, 1366, 3858, 13]",1.0,877,ml_signal,173,Type hinting for variables can be used to infer expected data types.,,877,,[]
🧠 ML Signal: Usage of list to store view range values.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 284, 3650, 1570, 2837, 3815, 13]",0.5,896,ml_signal,175,Usage of list to store view range values.,,877,            item.update_bar(bar),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2378, 13, 19119, 62, 5657, 7, 5657, 8]"
⚠️ SAST Risk (Low): Potential risk if view_range[0][1] is not a number or is None.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 1570, 62, 9521, 58, 15, 7131, 16, 60, 318, 407, 257, 1271, 393, 318, 6045, 13]",0.5,911,sast_risk,177,Potential risk if view_range[0][1] is not a number or is None.,Low,896,        self._update_plot_limits(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 29487, 62, 49196, 3419]"
✅ Best Practice: Calling the superclass method ensures that the base functionality is preserved.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 2446, 19047, 326, 262, 2779, 11244, 318, 17232, 13]",0.5,930,best_practice,180,Calling the superclass method ensures that the base functionality is preserved.,,911,            self.move_to_right(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 21084, 62, 1462, 62, 3506, 3419]"
✅ Best Practice: Use of QtCore.Qt.Key for readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 33734, 14055, 13, 48, 83, 13, 9218, 329, 1100, 1799, 290, 5529, 1799]",1.0,949,best_practice,180,Use of QtCore.Qt.Key for readability and maintainability,,930,            self.move_to_right(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 21084, 62, 1462, 62, 3506, 3419]"
🧠 ML Signal: Pattern of handling key press events,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 1994, 1803, 2995]",1.0,965,ml_signal,182,Pattern of handling key press events,,949,    def _update_plot_limits(self) -> None:,"[220, 220, 220, 825, 4808, 19119, 62, 29487, 62, 49196, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Custom handling for left key press,"[8582, 100, 254, 10373, 26484, 25, 8562, 9041, 329, 1364, 1994, 1803]",0.5,978,ml_signal,184,Custom handling for left key press,,965,        Update the limit of plots.,"[220, 220, 220, 220, 220, 220, 220, 10133, 262, 4179, 286, 21528, 13]"
🧠 ML Signal: Pattern of handling key press events,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 1994, 1803, 2995]",1.0,1000,ml_signal,186,Pattern of handling key press events,,978,"        for item, plot in self._item_plot_map.items():","[220, 220, 220, 220, 220, 220, 220, 329, 2378, 11, 7110, 287, 2116, 13557, 9186, 62, 29487, 62, 8899, 13, 23814, 33529]"
🧠 ML Signal: Custom handling for right key press,"[8582, 100, 254, 10373, 26484, 25, 8562, 9041, 329, 826, 1994, 1803]",0.5,1000,ml_signal,188,Custom handling for right key press,,1000,,[]
🧠 ML Signal: Pattern of handling key press events,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 1994, 1803, 2995]",1.0,1020,ml_signal,190,Pattern of handling key press events,,1000,"                xMin=-1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2124, 9452, 10779, 16, 11]"
🧠 ML Signal: Custom handling for up key press,"[8582, 100, 254, 10373, 26484, 25, 8562, 9041, 329, 510, 1994, 1803]",0.5,1041,ml_signal,193,Custom handling for up key press,,1020,                yMax=max_value,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 11518, 28, 9806, 62, 8367]"
🧠 ML Signal: Pattern of handling key press events,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 1994, 1803, 2995]",1.0,1053,ml_signal,194,Pattern of handling key press events,,1041,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Custom handling for down key press,"[8582, 100, 254, 10373, 26484, 25, 8562, 9041, 329, 866, 1994, 1803]",0.5,1069,ml_signal,196,Custom handling for down key press,,1053,    def _update_x_range(self) -> None:,"[220, 220, 220, 825, 4808, 19119, 62, 87, 62, 9521, 7, 944, 8, 4613, 6045, 25]"
✅ Best Practice: Use of type annotation for variable 'delta' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 23025, 329, 7885, 705, 67, 12514, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1090,best_practice,193,Use of type annotation for variable 'delta' improves code readability and maintainability.,,1069,                yMax=max_value,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 11518, 28, 9806, 62, 8367]"
🧠 ML Signal: Conditional logic based on event data can indicate user interaction patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1785, 1366, 460, 7603, 2836, 10375, 7572, 13]",1.0,1090,ml_signal,195,Conditional logic based on event data can indicate user interaction patterns.,,1090,,[]
🧠 ML Signal: Method calls based on user input can be used to understand feature usage.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 1912, 319, 2836, 5128, 460, 307, 973, 284, 1833, 3895, 8748, 13]",1.0,1098,ml_signal,197,Method calls based on user input can be used to understand feature usage.,,1090,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Conditional logic based on event data can indicate user interaction patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1785, 1366, 460, 7603, 2836, 10375, 7572, 13]",1.0,1106,ml_signal,199,Conditional logic based on event data can indicate user interaction patterns.,,1098,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method calls based on user input can be used to understand feature usage.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 1912, 319, 2836, 5128, 460, 307, 973, 284, 1833, 3895, 8748, 13]",1.0,1106,ml_signal,202,Method calls based on user input can be used to understand feature usage.,,1106,,[]
✅ Best Practice: Use of descriptive method name and docstring for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 2446, 1438, 290, 2205, 8841, 329, 16287]",0.5,1106,best_practice,202,Use of descriptive method name and docstring for clarity,,1106,,[]
✅ Best Practice: Use of max function to ensure _right_ix does not go below _bar_count,"[26486, 227, 6705, 19939, 25, 5765, 286, 3509, 2163, 284, 4155, 4808, 3506, 62, 844, 857, 407, 467, 2174, 4808, 5657, 62, 9127]",1.0,1137,best_practice,204,Use of max function to ensure _right_ix does not go below _bar_count,,1106,"            plot.setRange(xRange=(min_ix, max_ix), padding=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7110, 13, 2617, 17257, 7, 87, 17257, 16193, 1084, 62, 844, 11, 3509, 62, 844, 828, 24511, 28, 15, 8]"
🧠 ML Signal: Method call pattern for updating UI components,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 19698, 12454, 6805]",0.5,1153,ml_signal,206,Method call pattern for updating UI components,,1137,    def _update_y_range(self) -> None:,"[220, 220, 220, 825, 4808, 19119, 62, 88, 62, 9521, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Conditional logic pattern for object manipulation,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 3912, 329, 2134, 17512]",1.0,1161,ml_signal,209,Conditional logic pattern for object manipulation,,1153,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method call pattern for updating UI components,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 19698, 12454, 6805]",0.5,1161,ml_signal,212,Method call pattern for updating UI components,,1161,,[]
🧠 ML Signal: Method that modifies internal state based on user input,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 953, 6945, 5387, 1181, 1912, 319, 2836, 5128]",0.5,1161,ml_signal,212,Method that modifies internal state based on user input,,1161,,[]
✅ Best Practice: Use of min function to ensure _right_ix does not exceed a certain limit,"[26486, 227, 6705, 19939, 25, 5765, 286, 949, 2163, 284, 4155, 4808, 3506, 62, 844, 857, 407, 7074, 257, 1728, 4179]",0.5,1179,best_practice,214,Use of min function to ensure _right_ix does not exceed a certain limit,,1161,        view_range: list = view.viewRange(),"[220, 220, 220, 220, 220, 220, 220, 1570, 62, 9521, 25, 1351, 796, 1570, 13, 1177, 17257, 3419]"
🧠 ML Signal: Method call that updates the display or state,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 326, 5992, 262, 3359, 393, 1181]",1.0,1207,ml_signal,216,Method call that updates the display or state,,1179,"        min_ix: int = max(0, int(view_range[0][0]))","[220, 220, 220, 220, 220, 220, 220, 949, 62, 844, 25, 493, 796, 3509, 7, 15, 11, 493, 7, 1177, 62, 9521, 58, 15, 7131, 15, 60, 4008]"
✅ Best Practice: Check if _cursor is not None before accessing its methods,"[26486, 227, 6705, 19939, 25, 6822, 611, 4808, 66, 21471, 318, 407, 6045, 878, 22534, 663, 5050]",1.0,1207,best_practice,218,Check if _cursor is not None before accessing its methods,,1207,,[]
🧠 ML Signal: Method that modifies cursor position,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 953, 6945, 23493, 2292]",1.0,1221,ml_signal,219,Method that modifies cursor position,,1207,        # Update limit for y-axis,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 4179, 329, 331, 12, 22704]"
🧠 ML Signal: Method that updates cursor information,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5992, 23493, 1321]",1.0,1244,ml_signal,222,Method that updates cursor information,,1221,            plot.setRange(yRange=y_range),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7110, 13, 2617, 17257, 7, 88, 17257, 28, 88, 62, 9521, 8]"
🧠 ML Signal: Method modifies internal state based on user interaction (key down event).,"[8582, 100, 254, 10373, 26484, 25, 11789, 953, 6945, 5387, 1181, 1912, 319, 2836, 10375, 357, 2539, 866, 1785, 737]",1.0,1267,ml_signal,222,Method modifies internal state based on user interaction (key down event).,,1244,            plot.setRange(yRange=y_range),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7110, 13, 2617, 17257, 7, 88, 17257, 28, 88, 62, 9521, 8]"
✅ Best Practice: Use of min function to ensure _bar_count does not exceed a certain limit.,"[26486, 227, 6705, 19939, 25, 5765, 286, 949, 2163, 284, 4155, 4808, 5657, 62, 9127, 857, 407, 7074, 257, 1728, 4179, 13]",0.5,1290,best_practice,224,Use of min function to ensure _bar_count does not exceed a certain limit.,,1267,"    def paintEvent(self, event: QtGui.QPaintEvent) -> None:","[220, 220, 220, 825, 7521, 9237, 7, 944, 11, 1785, 25, 33734, 8205, 72, 13, 48, 47, 2913, 9237, 8, 4613, 6045, 25]"
🧠 ML Signal: Calls a method to update the display or state after modifying internal data.,"[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2446, 284, 4296, 262, 3359, 393, 1181, 706, 30620, 5387, 1366, 13]",0.5,1312,ml_signal,226,Calls a method to update the display or state after modifying internal data.,,1290,        Reimplement this method of parent to update current max_ix value.,"[220, 220, 220, 220, 220, 220, 220, 797, 320, 26908, 428, 2446, 286, 2560, 284, 4296, 1459, 3509, 62, 844, 1988, 13]"
🧠 ML Signal: Conditional logic based on the presence of an attribute (self._cursor).,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 281, 11688, 357, 944, 13557, 66, 21471, 737]",1.0,1327,ml_signal,228,Conditional logic based on the presence of an attribute (self._cursor).,,1312,        if not self._first_plot:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13557, 11085, 62, 29487, 25]"
🧠 ML Signal: Method updates UI or state based on user interaction.,"[8582, 100, 254, 10373, 26484, 25, 11789, 5992, 12454, 393, 1181, 1912, 319, 2836, 10375, 13]",1.0,1351,ml_signal,231,Method updates UI or state based on user interaction.,,1327,        view: pg.ViewBox = self._first_plot.getViewBox(),"[220, 220, 220, 220, 220, 220, 220, 1570, 25, 23241, 13, 7680, 14253, 796, 2116, 13557, 11085, 62, 29487, 13, 1136, 7680, 14253, 3419]"
"🧠 ML Signal: Method for handling key up events, indicating user interaction pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 9041, 1994, 510, 2995, 11, 12739, 2836, 10375, 3912]",1.0,1375,ml_signal,231,"Method for handling key up events, indicating user interaction pattern",,1351,        view: pg.ViewBox = self._first_plot.getViewBox(),"[220, 220, 220, 220, 220, 220, 220, 1570, 25, 23241, 13, 7680, 14253, 796, 2116, 13557, 11085, 62, 29487, 13, 1136, 7680, 14253, 3419]"
✅ Best Practice: Use of max function to ensure _bar_count does not go below MIN_BAR_COUNT,"[26486, 227, 6705, 19939, 25, 5765, 286, 3509, 2163, 284, 4155, 4808, 5657, 62, 9127, 857, 407, 467, 2174, 20625, 62, 33, 1503, 62, 34, 28270]",0.5,1400,best_practice,233,Use of max function to ensure _bar_count does not go below MIN_BAR_COUNT,,1375,"        self._right_ix = max(0, view_range[0][1])","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 3506, 62, 844, 796, 3509, 7, 15, 11, 1570, 62, 9521, 58, 15, 7131, 16, 12962]"
"🧠 ML Signal: Method call to update the x-axis range, indicating a pattern of UI update","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 262, 2124, 12, 22704, 2837, 11, 12739, 257, 3912, 286, 12454, 4296]",1.0,1415,ml_signal,235,"Method call to update the x-axis range, indicating a pattern of UI update",,1400,        super().paintEvent(event),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 79, 2913, 9237, 7, 15596, 8]"
"🧠 ML Signal: Conditional check for cursor presence, indicating dynamic UI component handling","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 23493, 4931, 11, 12739, 8925, 12454, 7515, 9041]",0.5,1438,ml_signal,237,"Conditional check for cursor presence, indicating dynamic UI component handling",,1415,"    def keyPressEvent(self, event: QtGui.QKeyEvent) -> None:","[220, 220, 220, 825, 1994, 13800, 9237, 7, 944, 11, 1785, 25, 33734, 8205, 72, 13, 48, 9218, 9237, 8, 4613, 6045, 25]"
"🧠 ML Signal: Method call to update cursor information, indicating a pattern of UI update","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 23493, 1321, 11, 12739, 257, 3912, 286, 12454, 4296]",1.0,1446,ml_signal,240,"Method call to update cursor information, indicating a pattern of UI update",,1438,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,1454,best_practice,240,Use of a docstring to describe the method's purpose,,1446,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method call pattern on an object attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 281, 2134, 11688]",0.5,1454,ml_signal,242,Method call pattern on an object attribute,,1454,,[]
⚠️ SAST Risk (Low): Potential risk if get_count() returns unexpected values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 651, 62, 9127, 3419, 5860, 10059, 3815]",0.5,1473,sast_risk,243,Potential risk if get_count() returns unexpected values,Low,1454,        if event.key() == Key.Key_Left:,"[220, 220, 220, 220, 220, 220, 220, 611, 1785, 13, 2539, 3419, 6624, 7383, 13, 9218, 62, 18819, 25]"
🧠 ML Signal: Method call pattern on an object attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 281, 2134, 11688]",0.5,1493,ml_signal,245,Method call pattern on an object attribute,,1473,        elif event.key() == Key.Key_Right:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 1785, 13, 2539, 3419, 6624, 7383, 13, 9218, 62, 11028, 25]"
🧠 ML Signal: Conditional check for attribute existence,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 11688, 6224]",0.5,1512,ml_signal,246,Conditional check for attribute existence,,1493,            self._on_key_right(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 261, 62, 2539, 62, 3506, 3419]"
🧠 ML Signal: Method call pattern on an object attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 281, 2134, 11688]",0.5,1531,ml_signal,246,Method call pattern on an object attribute,,1512,            self._on_key_right(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 261, 62, 2539, 62, 3506, 3419]"
✅ Best Practice: Consider adding a class docstring to describe the purpose and usage of the class.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 1398, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398, 13]",0.5,1550,best_practice,246,Consider adding a class docstring to describe the purpose and usage of the class.,,1531,            self._on_key_right(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 261, 62, 2539, 62, 3506, 3419]"
✅ Best Practice: Call to superclass initializer ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,1570,best_practice,254,Call to superclass initializer ensures proper initialization of the base class.,,1550,        Reimplement this method of parent to zoom in/out.,"[220, 220, 220, 220, 220, 220, 220, 797, 320, 26908, 428, 2446, 286, 2560, 284, 19792, 287, 14, 448, 13]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1590,best_practice,256,Type annotations improve code readability and maintainability.,,1570,        delta: QtCore.QPoint = event.angleDelta(),"[220, 220, 220, 220, 220, 220, 220, 25979, 25, 33734, 14055, 13, 48, 12727, 796, 1785, 13, 9248, 42430, 3419]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1605,best_practice,258,Type annotations improve code readability and maintainability.,,1590,        if delta.y() > 0:,"[220, 220, 220, 220, 220, 220, 220, 611, 25979, 13, 88, 3419, 1875, 657, 25]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1621,best_practice,260,Type annotations improve code readability and maintainability.,,1605,        elif delta.y() < 0:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 25979, 13, 88, 3419, 1279, 657, 25]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1621,best_practice,262,Type annotations improve code readability and maintainability.,,1621,,[]
✅ Best Practice: Initialize instance variables with default values.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 351, 4277, 3815, 13]",0.5,1629,best_practice,264,Initialize instance variables with default values.,,1621,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Initialize instance variables with default values.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 351, 4277, 3815, 13]",0.5,1637,best_practice,266,Initialize instance variables with default values.,,1629,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Initialize instance variables with default values.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 351, 4277, 3815, 13]",0.5,1664,best_practice,268,Initialize instance variables with default values.,,1637,"        self._right_ix = max(self._right_ix, self._bar_count)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 3506, 62, 844, 796, 3509, 7, 944, 13557, 3506, 62, 844, 11, 2116, 13557, 5657, 62, 9127, 8]"
🧠 ML Signal: Method calls in initialization can indicate component setup patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 287, 37588, 460, 7603, 7515, 9058, 7572, 13]",1.0,1679,ml_signal,270,Method calls in initialization can indicate component setup patterns.,,1664,        self._update_x_range(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 87, 62, 9521, 3419]"
🧠 ML Signal: Method calls in initialization can indicate component setup patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 287, 37588, 460, 7603, 7515, 9058, 7572, 13]",1.0,1699,ml_signal,273,Method calls in initialization can indicate component setup patterns.,,1679,            self._cursor.move_left(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 66, 21471, 13, 21084, 62, 9464, 3419]"
✅ Best Practice: Consider adding a docstring to describe the purpose of the method,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 2446]",0.5,1707,best_practice,266,Consider adding a docstring to describe the purpose of the method,,1699,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method call pattern indicating UI component initialization,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 12739, 12454, 7515, 37588]",0.5,1734,ml_signal,268,Method call pattern indicating UI component initialization,,1707,"        self._right_ix = max(self._right_ix, self._bar_count)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 3506, 62, 844, 796, 3509, 7, 944, 13557, 3506, 62, 844, 11, 2116, 13557, 5657, 62, 9127, 8]"
🧠 ML Signal: Method call pattern indicating UI component initialization,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 12739, 12454, 7515, 37588]",0.5,1749,ml_signal,270,Method call pattern indicating UI component initialization,,1734,        self._update_x_range(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 87, 62, 9521, 3419]"
🧠 ML Signal: Method call pattern indicating UI component initialization,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 12739, 12454, 7515, 37588]",0.5,1769,ml_signal,273,Method call pattern indicating UI component initialization,,1749,            self._cursor.move_left(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 66, 21471, 13, 21084, 62, 9464, 3419]"
✅ Best Practice: Use of type annotations for dictionaries improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 48589, 3166, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1789,best_practice,273,Use of type annotations for dictionaries improves code readability and maintainability.,,1769,            self._cursor.move_left(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 66, 21471, 13, 21084, 62, 9464, 3419]"
✅ Best Practice: Use of type annotation for the pen variable improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 23025, 329, 262, 3112, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1797,best_practice,277,Use of type annotation for the pen variable improves code readability and maintainability.,,1789,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Iterating over items in a dictionary is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3709, 287, 257, 22155, 318, 257, 2219, 3912, 13]",1.0,1805,ml_signal,279,Iterating over items in a dictionary is a common pattern.,,1797,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of type annotations for line variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1627, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1834,best_practice,281,Use of type annotations for line variables improves code readability and maintainability.,,1805,"        self._right_ix = min(self._right_ix, self._manager.get_count())","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 3506, 62, 844, 796, 949, 7, 944, 13557, 3506, 62, 844, 11, 2116, 13557, 37153, 13, 1136, 62, 9127, 28955]"
✅ Best Practice: Use of type annotation for the view variable improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 23025, 329, 262, 1570, 7885, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1834,best_practice,284,Use of type annotation for the view variable improves code readability and maintainability.,,1834,,[]
🧠 ML Signal: Iterating over a list of objects to apply the same operations is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 5563, 284, 4174, 262, 976, 4560, 318, 257, 2219, 3912, 13]",1.0,1854,ml_signal,286,Iterating over a list of objects to apply the same operations is a common pattern.,,1834,            self._cursor.move_right(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 66, 21471, 13, 21084, 62, 3506, 3419]"
🧠 ML Signal: Storing objects in a dictionary with a key is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 5563, 287, 257, 22155, 351, 257, 1994, 318, 257, 2219, 3912, 13]",1.0,1862,ml_signal,292,Storing objects in a dictionary with a key is a common pattern.,,1854,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of type hinting for dictionary keys and values improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 22155, 8251, 290, 3815, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1870,best_practice,292,Use of type hinting for dictionary keys and values improves code readability and maintainability.,,1862,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Iterating over dictionary items is a common pattern that can be used to train ML models.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 318, 257, 2219, 3912, 326, 460, 307, 973, 284, 4512, 10373, 4981, 13]",1.0,1901,ml_signal,294,Iterating over dictionary items is a common pattern that can be used to train ML models.,,1870,"        self._bar_count = min(int(self._bar_count), self._manager.get_count())","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5657, 62, 9127, 796, 949, 7, 600, 7, 944, 13557, 5657, 62, 9127, 828, 2116, 13557, 37153, 13, 1136, 62, 9127, 28955]"
✅ Best Practice: Type hinting for variables enhances code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 9633, 32479, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1916,best_practice,296,Type hinting for variables enhances code readability and maintainability.,,1901,        self._update_x_range(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 87, 62, 9521, 3419]"
✅ Best Practice: Setting Z-value for graphical items is a good practice for managing rendering order.,"[26486, 227, 6705, 19939, 25, 25700, 1168, 12, 8367, 329, 27831, 3709, 318, 257, 922, 3357, 329, 11149, 14837, 1502, 13]",0.5,1916,best_practice,300,Setting Z-value for graphical items is a good practice for managing rendering order.,,1916,,[]
⚠️ SAST Risk (Low): Ensure that `plot.addItem` does not introduce any side effects or security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 4600, 29487, 13, 2860, 7449, 63, 857, 407, 10400, 597, 1735, 3048, 393, 2324, 2428, 13]",0.5,1928,sast_risk,303,Ensure that `plot.addItem` does not introduce any side effects or security issues.,Low,1916,        Zoom in the chart.,"[220, 220, 220, 220, 220, 220, 220, 40305, 287, 262, 8262, 13]"
✅ Best Practice: Type hinting for variables enhances code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 9633, 32479, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1961,best_practice,306,Type hinting for variables enhances code readability and maintainability.,,1928,"        self._bar_count = max(int(self._bar_count), self.MIN_BAR_COUNT)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5657, 62, 9127, 796, 3509, 7, 600, 7, 944, 13557, 5657, 62, 9127, 828, 2116, 13, 23678, 62, 33, 1503, 62, 34, 28270, 8]"
✅ Best Practice: Setting Z-value for graphical items is a good practice for managing rendering order.,"[26486, 227, 6705, 19939, 25, 25700, 1168, 12, 8367, 329, 27831, 3709, 318, 257, 922, 3357, 329, 11149, 14837, 1502, 13]",0.5,1974,best_practice,310,Setting Z-value for graphical items is a good practice for managing rendering order.,,1961,        if self._cursor:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 66, 21471, 25]"
⚠️ SAST Risk (Low): Ensure that `plot.addItem` does not introduce any side effects or security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 4600, 29487, 13, 2860, 7449, 63, 857, 407, 10400, 597, 1735, 3048, 393, 2324, 2428, 13]",0.5,1974,sast_risk,312,Ensure that `plot.addItem` does not introduce any side effects or security issues.,Low,1974,,[]
✅ Best Practice: Use of type hinting for dictionary keys and values improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 22155, 8251, 290, 3815, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1987,best_practice,310,Use of type hinting for dictionary keys and values improves code readability and maintainability.,,1974,        if self._cursor:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 66, 21471, 25]"
🧠 ML Signal: Iterating over dictionary items is a common pattern that can be used to understand data structures.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 318, 257, 2219, 3912, 326, 460, 307, 973, 284, 1833, 1366, 8573, 13]",0.5,1987,ml_signal,312,Iterating over dictionary items is a common pattern that can be used to understand data structures.,,1987,,[]
✅ Best Practice: Type hinting for the variable 'info' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 7885, 705, 10951, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1987,best_practice,312,Type hinting for the variable 'info' improves code readability and maintainability.,,1987,,[]
🧠 ML Signal: Use of constants for colors indicates a pattern for managing UI themes.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 329, 7577, 9217, 257, 3912, 329, 11149, 12454, 13460, 13]",0.5,2002,ml_signal,318,Use of constants for colors indicates a pattern for managing UI themes.,,1987,        self._update_x_range(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 87, 62, 9521, 3419]"
🧠 ML Signal: Hiding UI elements initially is a common pattern in UI programming.,"[8582, 100, 254, 10373, 26484, 25, 367, 2530, 12454, 4847, 7317, 318, 257, 2219, 3912, 287, 12454, 8300, 13]",1.0,2002,ml_signal,322,Hiding UI elements initially is a common pattern in UI programming.,,2002,,[]
🧠 ML Signal: Setting Z-value is a pattern for managing UI element layering.,"[8582, 100, 254, 10373, 26484, 25, 25700, 1168, 12, 8367, 318, 257, 3912, 329, 11149, 12454, 5002, 3830, 1586, 13]",0.5,2014,ml_signal,324,Setting Z-value is a pattern for managing UI element layering.,,2002,class ChartCursor(QtCore.QObject):,"[4871, 22086, 34, 21471, 7, 48, 83, 14055, 13, 48, 10267, 2599]"
🧠 ML Signal: Setting font is a common pattern in UI customization.,"[8582, 100, 254, 10373, 26484, 25, 25700, 10369, 318, 257, 2219, 3912, 287, 12454, 31344, 13]",1.0,2022,ml_signal,327,Setting font is a common pattern in UI customization.,,2014,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
🧠 ML Signal: Adding items to a plot is a common pattern in data visualization.,"[8582, 100, 254, 10373, 26484, 25, 18247, 3709, 284, 257, 7110, 318, 257, 2219, 3912, 287, 1366, 32704, 13]",1.0,2031,ml_signal,328,Adding items to a plot is a common pattern in data visualization.,,2022,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
🧠 ML Signal: Storing UI elements in a dictionary for later access is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 12454, 4847, 287, 257, 22155, 329, 1568, 1895, 318, 257, 2219, 3912, 13]",1.0,2043,ml_signal,329,Storing UI elements in a dictionary for later access is a common pattern.,,2031,"        widget: ChartWidget,","[220, 220, 220, 220, 220, 220, 220, 26295, 25, 22086, 38300, 11]"
✅ Best Practice: Use of docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,2051,best_practice,327,Use of docstring to describe the method's purpose,,2043,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
🧠 ML Signal: Method name and docstring indicate a pattern of connecting signals to slots,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 290, 2205, 8841, 7603, 257, 3912, 286, 14320, 10425, 284, 17314]",0.5,2060,ml_signal,328,Method name and docstring indicate a pattern of connecting signals to slots,,2051,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
🧠 ML Signal: Usage of signal-slot connection pattern in PyQt or PySide,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6737, 12, 43384, 4637, 3912, 287, 9485, 48, 83, 393, 9485, 24819]",0.5,2072,ml_signal,329,Usage of signal-slot connection pattern in PyQt or PySide,,2060,"        widget: ChartWidget,","[220, 220, 220, 220, 220, 220, 220, 26295, 25, 22086, 38300, 11]"
✅ Best Practice: Check if the manager has any count before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 4706, 468, 597, 954, 878, 18788]",1.0,2095,best_practice,332,Check if the manager has any count before proceeding,,2072,"        item_plot_map: dict[ChartItem, pg.GraphicsObject]","[220, 220, 220, 220, 220, 220, 220, 2378, 62, 29487, 62, 8899, 25, 8633, 58, 45488, 7449, 11, 23241, 13, 18172, 10267, 60]"
✅ Best Practice: Explicitly type the variable for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 2099, 262, 7885, 329, 16287]",0.5,2108,best_practice,335,Explicitly type the variable for clarity,,2095,        super().__init__(),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 3419]"
🧠 ML Signal: Iterating over a dictionary to access its items,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 1895, 663, 3709]",1.0,2123,ml_signal,337,Iterating over a dictionary to access its items,,2108,        self._widget: ChartWidget = widget,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 42655, 25, 22086, 38300, 796, 26295]"
🧠 ML Signal: Using a method to get the bounding rectangle of a scene,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2446, 284, 651, 262, 5421, 278, 35991, 286, 257, 3715]",0.5,2146,ml_signal,339,Using a method to get the bounding rectangle of a scene,,2123,"        self._plots: dict[str, pg.GraphicsObject] = plots","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 489, 1747, 25, 8633, 58, 2536, 11, 23241, 13, 18172, 10267, 60, 796, 21528]"
🧠 ML Signal: Checking if a point is within a rectangle,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 966, 318, 1626, 257, 35991]",1.0,2146,ml_signal,341,Checking if a point is within a rectangle,,2146,,[]
🧠 ML Signal: Mapping a scene position to a view position,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 257, 3715, 2292, 284, 257, 1570, 2292]",1.0,2160,ml_signal,343,Mapping a scene position to a view position,,2146,        self._y: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 88, 25, 12178, 796, 657]"
✅ Best Practice: Convert float to int explicitly,"[26486, 227, 6705, 19939, 25, 38240, 12178, 284, 493, 11777]",0.5,2160,best_practice,345,Convert float to int explicitly,,2160,,[]
🧠 ML Signal: Accessing x and y coordinates of a point,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2124, 290, 331, 22715, 286, 257, 966]",0.5,2174,ml_signal,347,Accessing x and y coordinates of a point,,2160,        self._connect_signal(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 8443, 62, 12683, 282, 3419]"
🧠 ML Signal: Storing the plot name where the mouse is located,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 262, 7110, 1438, 810, 262, 10211, 318, 5140]",0.5,2188,ml_signal,349,Storing the plot name where the mouse is located,,2174,    def _init_ui(self) -> None:,"[220, 220, 220, 825, 4808, 15003, 62, 9019, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Calling update methods after processing input,"[8582, 100, 254, 10373, 26484, 25, 32677, 4296, 5050, 706, 7587, 5128]",1.0,2201,ml_signal,352,Calling update methods after processing input,,2188,        self._init_label(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 15003, 62, 18242, 3419]"
"🧠 ML Signal: Iterating over dictionary values, common pattern for ML feature extraction","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3815, 11, 2219, 3912, 329, 10373, 3895, 22236]",1.0,2201,ml_signal,348,"Iterating over dictionary values, common pattern for ML feature extraction",,2201,,[]
"🧠 ML Signal: Method call on object, useful for dynamic behavior analysis","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 2134, 11, 4465, 329, 8925, 4069, 3781]",1.0,2211,ml_signal,350,"Method call on object, useful for dynamic behavior analysis",,2201,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
"🧠 ML Signal: Method call on object, useful for dynamic behavior analysis","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 2134, 11, 4465, 329, 8925, 4069, 3781]",1.0,2224,ml_signal,352,"Method call on object, useful for dynamic behavior analysis",,2211,        self._init_label(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 15003, 62, 18242, 3419]"
"🧠 ML Signal: Iterating over dictionary items, common pattern for ML feature extraction","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 11, 2219, 3912, 329, 10373, 3895, 22236]",1.0,2224,ml_signal,354,"Iterating over dictionary items, common pattern for ML feature extraction",,2224,,[]
"🧠 ML Signal: Conditional logic, useful for control flow analysis","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 11, 4465, 329, 1630, 5202, 3781]",0.5,2232,ml_signal,356,"Conditional logic, useful for control flow analysis",,2224,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"🧠 ML Signal: Method call on object, useful for dynamic behavior analysis","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 2134, 11, 4465, 329, 8925, 4069, 3781]",1.0,2240,ml_signal,358,"Method call on object, useful for dynamic behavior analysis",,2232,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"🧠 ML Signal: Method call on object, useful for dynamic behavior analysis","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 2134, 11, 4465, 329, 8925, 4069, 3781]",1.0,2265,ml_signal,360,"Method call on object, useful for dynamic behavior analysis",,2240,"        self._h_lines: dict[str, pg.InfiniteLine] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 71, 62, 6615, 25, 8633, 58, 2536, 11, 23241, 13, 18943, 9504, 13949, 60, 796, 23884]"
"🧠 ML Signal: Method call on object, useful for dynamic behavior analysis","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 2134, 11, 4465, 329, 8925, 4069, 3781]",1.0,2291,ml_signal,363,"Method call on object, useful for dynamic behavior analysis",,2265,        pen: QtGui.QPen = pg.mkPen(WHITE_COLOR),"[220, 220, 220, 220, 220, 220, 220, 3112, 25, 33734, 8205, 72, 13, 48, 25553, 796, 23241, 13, 28015, 25553, 7, 12418, 12709, 62, 46786, 8]"
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2316,best_practice,359,Type hinting improves code readability and maintainability.,,2291,"        self._v_lines: dict[str, pg.InfiniteLine] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 85, 62, 6615, 25, 8633, 58, 2536, 11, 23241, 13, 18943, 9504, 13949, 60, 796, 23884]"
🧠 ML Signal: Usage of external library method to get axis width.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 2446, 284, 651, 16488, 9647, 13]",0.5,2338,ml_signal,361,Usage of external library method to get axis width.,,2316,"        self._views: dict[str, pg.ViewBox] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 33571, 25, 8633, 58, 2536, 11, 23241, 13, 7680, 14253, 60, 796, 23884]"
🧠 ML Signal: Usage of external library method to get axis height.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 2446, 284, 651, 16488, 6001, 13]",0.5,2364,ml_signal,363,Usage of external library method to get axis height.,,2338,        pen: QtGui.QPen = pg.mkPen(WHITE_COLOR),"[220, 220, 220, 220, 220, 220, 220, 3112, 25, 33734, 8205, 72, 13, 48, 25553, 796, 23241, 13, 28015, 25553, 7, 12418, 12709, 62, 46786, 8]"
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2364,best_practice,364,Type hinting improves code readability and maintainability.,,2364,,[]
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2404,best_practice,367,Type hinting improves code readability and maintainability.,,2364,"            h_line: pg.InfiniteLine = pg.InfiniteLine(angle=0, movable=False, pen=pen)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 289, 62, 1370, 25, 23241, 13, 18943, 9504, 13949, 796, 23241, 13, 18943, 9504, 13949, 7, 9248, 28, 15, 11, 1409, 540, 28, 25101, 11, 3112, 28, 3617, 8]"
🧠 ML Signal: Mapping scene coordinates to view coordinates.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 3715, 22715, 284, 1570, 22715, 13]",0.5,2404,ml_signal,369,Mapping scene coordinates to view coordinates.,,2404,,[]
🧠 ML Signal: Dynamic label text setting based on condition.,"[8582, 100, 254, 10373, 26484, 25, 26977, 6167, 2420, 4634, 1912, 319, 4006, 13]",0.5,2429,ml_signal,375,Dynamic label text setting based on condition.,,2404,            self._v_lines[plot_name] = v_line,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 85, 62, 6615, 58, 29487, 62, 3672, 60, 796, 410, 62, 1370]"
🧠 ML Signal: Setting position of a label in a plot.,"[8582, 100, 254, 10373, 26484, 25, 25700, 2292, 286, 257, 6167, 287, 257, 7110, 13]",0.5,2429,ml_signal,378,Setting position of a label in a plot.,,2429,,[]
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2437,best_practice,382,Type hinting improves code readability and maintainability.,,2429,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Formatting datetime for display.,"[8582, 100, 254, 10373, 26484, 25, 18980, 889, 4818, 8079, 329, 3359, 13]",0.5,2460,ml_signal,385,Formatting datetime for display.,,2437,            label: pg.TextItem = pg.TextItem(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6167, 25, 23241, 13, 8206, 7449, 796, 23241, 13, 8206, 7449, 7]"
🧠 ML Signal: Setting position of a label in a plot.,"[8582, 100, 254, 10373, 26484, 25, 25700, 2292, 286, 257, 6167, 287, 257, 7110, 13]",0.5,2479,ml_signal,388,Setting position of a label in a plot.,,2460,            label.setZValue(2),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6167, 13, 2617, 57, 11395, 7, 17, 8]"
🧠 ML Signal: Setting anchor point for label positioning.,"[8582, 100, 254, 10373, 26484, 25, 25700, 18021, 966, 329, 6167, 22097, 13]",0.5,2503,ml_signal,390,Setting anchor point for label positioning.,,2479,"            plot.addItem(label, ignoreBounds=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7110, 13, 2860, 7449, 7, 18242, 11, 8856, 33, 3733, 28, 17821, 8]"
🧠 ML Signal: Iterating over a mapping of items to plots,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 16855, 286, 3709, 284, 21528]",1.0,2524,ml_signal,384,Iterating over a mapping of items to plots,,2503,"        for plot_name, plot in self._plots.items():","[220, 220, 220, 220, 220, 220, 220, 329, 7110, 62, 3672, 11, 7110, 287, 2116, 13557, 489, 1747, 13, 23814, 33529]"
🧠 ML Signal: Iterating over plots to update information,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 21528, 284, 4296, 1321]",0.5,2524,ml_signal,392,Iterating over plots to update information,,2524,,[]
⚠️ SAST Risk (Low): Potential KeyError if plot_name is not in self._infos,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 7110, 62, 3672, 318, 407, 287, 2116, 13557, 10745, 418]",1.0,2539,sast_risk,395,Potential KeyError if plot_name is not in self._infos,Low,2524,        self._x_label.hide(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 87, 62, 18242, 13, 24717, 3419]"
⚠️ SAST Risk (Low): Potential KeyError if plot_name is not in self._views,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 7110, 62, 3672, 318, 407, 287, 2116, 13557, 33571]",1.0,2539,sast_risk,399,Potential KeyError if plot_name is not in self._views,Low,2539,,[]
✅ Best Practice: Check boundary condition to prevent index out of range,"[26486, 227, 6705, 19939, 25, 6822, 18645, 4006, 284, 2948, 6376, 503, 286, 2837]",1.0,2547,best_practice,402,Check boundary condition to prevent index out of range,,2539,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Incrementing a counter or index is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 10791, 434, 278, 257, 3753, 393, 6376, 318, 257, 2219, 3912]",1.0,2570,ml_signal,405,Incrementing a counter or index is a common pattern,,2547,            info: pg.TextItem = pg.TextItem(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7508, 25, 23241, 13, 8206, 7449, 796, 23241, 13, 8206, 7449, 7]"
🧠 ML Signal: Method call after state change indicates dependency on updated state,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 706, 1181, 1487, 9217, 20203, 319, 6153, 1181]",0.5,2594,ml_signal,407,Method call after state change indicates dependency on updated state,,2570,"                color=CURSOR_COLOR,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3124, 28, 34, 4261, 50, 1581, 62, 46786, 11]"
✅ Best Practice: Early return to handle edge case when cursor is at the start,"[26486, 227, 6705, 19939, 25, 12556, 1441, 284, 5412, 5743, 1339, 618, 23493, 318, 379, 262, 923]",1.0,2606,best_practice,410,Early return to handle edge case when cursor is at the start,,2594,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"🧠 ML Signal: Decrement operation on a variable, common in cursor or index manipulation","[8582, 100, 254, 10373, 26484, 25, 36400, 434, 4905, 319, 257, 7885, 11, 2219, 287, 23493, 393, 6376, 17512]",0.5,2628,ml_signal,413,"Decrement operation on a variable, common in cursor or index manipulation",,2606,            info.setFont(NORMAL_FONT),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7508, 13, 2617, 23252, 7, 35510, 42126, 62, 37, 35830, 8]"
"🧠 ML Signal: Method call after state change, indicating a pattern of updating state","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 706, 1181, 1487, 11, 12739, 257, 3912, 286, 19698, 1181]",1.0,2650,ml_signal,415,"Method call after state change, indicating a pattern of updating state",,2628,            self._infos[plot_name] = info,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 10745, 418, 58, 29487, 62, 3672, 60, 796, 7508]"
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2658,best_practice,418,Type hinting improves code readability and maintainability.,,2650,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of object attributes to store state.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2134, 12608, 284, 3650, 1181, 13]",1.0,2658,ml_signal,422,Usage of object attributes to store state.,,2658,,[]
🧠 ML Signal: Method calls that update the state or UI.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 326, 4296, 262, 1181, 393, 12454, 13]",0.5,2666,ml_signal,424,Method calls that update the state or UI.,,2658,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method calls that update the state or UI.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 326, 4296, 262, 1181, 393, 12454, 13]",0.5,2681,ml_signal,425,Method calls that update the state or UI.,,2666,        Callback function when mouse is moved.,"[220, 220, 220, 220, 220, 220, 220, 4889, 1891, 2163, 618, 10211, 318, 3888, 13]"
✅ Best Practice: Initialize variables to default values to ensure a clean state.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 284, 4277, 3815, 284, 4155, 257, 3424, 1181, 13]",0.5,2693,best_practice,428,Initialize variables to default values to ensure a clean state.,,2681,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
✅ Best Practice: Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 3419, 284, 2251, 257, 4866, 286, 262, 22155, 3815, 284, 3368, 19124, 8563, 611, 262, 22155, 318, 9518, 1141, 24415, 13]",1.0,2693,best_practice,432,Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration.,,2693,,[]
🧠 ML Signal: Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 290, 11816, 12454, 4847, 9217, 257, 3912, 286, 13259, 889, 393, 17304, 257, 5874, 1181, 13]",1.0,2713,ml_signal,434,Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state.,,2693,            rect = view.sceneBoundingRect(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13621, 796, 1570, 13, 29734, 33, 9969, 45474, 3419]"
✅ Best Practice: Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 3419, 284, 2251, 257, 4866, 286, 262, 22155, 3815, 284, 3368, 19124, 8563, 611, 262, 22155, 318, 9518, 1141, 24415, 13]",1.0,2733,best_practice,434,Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration.,,2713,            rect = view.sceneBoundingRect(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13621, 796, 1570, 13, 29734, 33, 9969, 45474, 3419]"
🧠 ML Signal: Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 290, 11816, 12454, 4847, 9217, 257, 3912, 286, 13259, 889, 393, 17304, 257, 5874, 1181, 13]",1.0,2753,ml_signal,434,Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state.,,2733,            rect = view.sceneBoundingRect(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13621, 796, 1570, 13, 29734, 33, 9969, 45474, 3419]"

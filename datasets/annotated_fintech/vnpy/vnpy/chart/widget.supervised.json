[
  {
    "line": 3,
    "text": "import pyqtgraph as pg      # type: ignore",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves readability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      12972,
      80,
      25297,
      1470,
      355,
      23241,
      220,
      220,
      220,
      220,
      220,
      1303,
      2099,
      25,
      8856
    ],
    "start_token": 0,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves readability."
  },
  {
    "line": 13,
    "text": "from .axis import DatetimeAxis",
    "annotation": "\u2705 Best Practice: Setting configuration options at the start of the script is a good practice for clarity.",
    "confidence": 1.0,
    "tokens": [
      6738,
      764,
      22704,
      1330,
      16092,
      8079,
      31554,
      271
    ],
    "start_token": 16,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      8398,
      3689,
      379,
      262,
      923,
      286,
      262,
      4226,
      318,
      257,
      922,
      3357,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Setting configuration options at the start of the script is a good practice for clarity."
  },
  {
    "line": 13,
    "text": "from .axis import DatetimeAxis",
    "annotation": "\u2705 Best Practice: Class docstring is empty; consider providing a description of the class.",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      22704,
      1330,
      16092,
      8079,
      31554,
      271
    ],
    "start_token": 24,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      318,
      6565,
      26,
      2074,
      4955,
      257,
      6764,
      286,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring is empty; consider providing a description of the class."
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u2705 Best Practice: Constants should be documented or named descriptively to convey their purpose.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      12395,
      393,
      3706,
      12145,
      2280,
      284,
      13878,
      511,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Constants should be documented or named descriptively to convey their purpose."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize all instance variables in the constructor for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      477,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize all instance variables in the constructor for clarity and maintainability"
  },
  {
    "line": 21,
    "text": "    \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Use type annotations for instance variables for better readability and type checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 32,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      37647,
      329,
      4554,
      9633,
      329,
      1365,
      1100,
      1799,
      290,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use type annotations for instance variables for better readability and type checking"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Encapsulate UI initialization in a separate method for better organization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 38,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      5039,
      12454,
      37588,
      287,
      257,
      4553,
      2446,
      329,
      1365,
      4009
    ],
    "label": "best_practice",
    "reason": "Encapsulate UI initialization in a separate method for better organization"
  },
  {
    "line": 30,
    "text": "        self._plots: dict[str, pg.PlotItem] = {}",
    "annotation": "\u2705 Best Practice: Set a descriptive window title for better user experience",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      489,
      1747,
      25,
      8633,
      58,
      2536,
      11,
      23241,
      13,
      43328,
      7449,
      60,
      796,
      23884
    ],
    "start_token": 38,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      257,
      35644,
      4324,
      3670,
      329,
      1365,
      2836,
      1998
    ],
    "label": "best_practice",
    "reason": "Set a descriptive window title for better user experience"
  },
  {
    "line": 32,
    "text": "        self._item_plot_map: dict[ChartItem, pg.PlotItem] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific graphics layout library (pg.GraphicsLayout)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      9186,
      62,
      29487,
      62,
      8899,
      25,
      8633,
      58,
      45488,
      7449,
      11,
      23241,
      13,
      43328,
      7449,
      60,
      796,
      23884
    ],
    "start_token": 61,
    "end_token": 88,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      9382,
      12461,
      5888,
      357,
      6024,
      13,
      18172,
      32517,
      8
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific graphics layout library (pg.GraphicsLayout)"
  },
  {
    "line": 34,
    "text": "        self._first_plot: pg.PlotItem | None = None",
    "annotation": "\u2705 Best Practice: Set consistent margins for layout aesthetics",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      11085,
      62,
      29487,
      25,
      23241,
      13,
      43328,
      7449,
      930,
      6045,
      796,
      6045
    ],
    "start_token": 88,
    "end_token": 109,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      6414,
      20241,
      329,
      12461,
      35431
    ],
    "label": "best_practice",
    "reason": "Set consistent margins for layout aesthetics"
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\u2705 Best Practice: Set spacing to 0 for a compact layout",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 109,
    "end_token": 109,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      31050,
      284,
      657,
      329,
      257,
      16001,
      12461
    ],
    "label": "best_practice",
    "reason": "Set spacing to 0 for a compact layout"
  },
  {
    "line": 38,
    "text": "        self._bar_count: int = self.MIN_BAR_COUNT   # Total bar visible in chart",
    "annotation": "\u2705 Best Practice: Set border color and width for visual clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5657,
      62,
      9127,
      25,
      493,
      796,
      2116,
      13,
      23678,
      62,
      33,
      1503,
      62,
      34,
      28270,
      220,
      220,
      1303,
      7472,
      2318,
      7424,
      287,
      8262
    ],
    "start_token": 109,
    "end_token": 141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      4865,
      3124,
      290,
      9647,
      329,
      5874,
      16287
    ],
    "label": "best_practice",
    "reason": "Set border color and width for visual clarity"
  },
  {
    "line": 40,
    "text": "        self._init_ui()",
    "annotation": "\u2705 Best Practice: Set Z value to control stacking order of items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      15003,
      62,
      9019,
      3419
    ],
    "start_token": 141,
    "end_token": 154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      1168,
      1988,
      284,
      1630,
      41228,
      1502,
      286,
      3709
    ],
    "label": "best_practice",
    "reason": "Set Z value to control stacking order of items"
  },
  {
    "line": 42,
    "text": "    def _init_ui(self) -> None:",
    "annotation": "\u2705 Best Practice: Set central item to ensure layout is displayed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      15003,
      62,
      9019,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 154,
    "end_token": 168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      4318,
      2378,
      284,
      4155,
      12461,
      318,
      9066
    ],
    "label": "best_practice",
    "reason": "Set central item to ensure layout is displayed"
  },
  {
    "line": 37,
    "text": "        self._right_ix: int = 0                     # Index of most right data",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3506,
      62,
      844,
      25,
      493,
      796,
      657,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      12901,
      286,
      749,
      826,
      1366
    ],
    "start_token": 168,
    "end_token": 210,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returns a new instance of a class, indicating a factory or builder pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5860,
      257,
      649,
      4554,
      286,
      257,
      1398,
      11,
      12739,
      257,
      8860,
      393,
      27098,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returns a new instance of a class, indicating a factory or builder pattern"
  },
  {
    "line": 41,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checks for the existence of an attribute before assignment",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 210,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      262,
      6224,
      286,
      281,
      11688,
      878,
      16237
    ],
    "label": "ml_signal",
    "reason": "Checks for the existence of an attribute before assignment"
  },
  {
    "line": 42,
    "text": "    def _init_ui(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of an object with multiple dependencies",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      15003,
      62,
      9019,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 210,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      281,
      2134,
      351,
      3294,
      20086
    ],
    "label": "ml_signal",
    "reason": "Instantiation of an object with multiple dependencies"
  },
  {
    "line": 54,
    "text": "        return DatetimeAxis(self._manager, orientation=\"bottom\")",
    "annotation": "\u2705 Best Practice: Type hinting for plot variable improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      16092,
      8079,
      31554,
      271,
      7,
      944,
      13557,
      37153,
      11,
      12852,
      2625,
      22487,
      4943
    ],
    "start_token": 224,
    "end_token": 245,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      7110,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for plot variable improves code readability and maintainability"
  },
  {
    "line": 70,
    "text": "        Add plot area.",
    "annotation": "\u2705 Best Practice: Type hinting for view variable improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3060,
      7110,
      1989,
      13
    ],
    "start_token": 245,
    "end_token": 256,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1570,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for view variable improves code readability and maintainability"
  },
  {
    "line": 72,
    "text": "        # Create plot object",
    "annotation": "\ud83e\udde0 ML Signal: Usage of signal-slot connection pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      13610,
      7110,
      2134
    ],
    "start_token": 256,
    "end_token": 267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6737,
      12,
      43384,
      4637,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of signal-slot connection pattern"
  },
  {
    "line": 75,
    "text": "        plot.setClipToView(True)",
    "annotation": "\u2705 Best Practice: Type hinting for right_axis variable improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2617,
      2601,
      541,
      2514,
      7680,
      7,
      17821,
      8
    ],
    "start_token": 267,
    "end_token": 284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      826,
      62,
      22704,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for right_axis variable improves code readability and maintainability"
  },
  {
    "line": 80,
    "text": "        plot.hideButtons()",
    "annotation": "\u2705 Best Practice: Type hinting for first_plot variable improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      24717,
      1537,
      27288,
      3419
    ],
    "start_token": 284,
    "end_token": 297,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      717,
      62,
      29487,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for first_plot variable improves code readability and maintainability"
  },
  {
    "line": 81,
    "text": "        plot.setMinimumHeight(minimum_height)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store plot objects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2617,
      44046,
      23106,
      7,
      39504,
      62,
      17015,
      8
    ],
    "start_token": 297,
    "end_token": 314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      7110,
      5563
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store plot objects"
  },
  {
    "line": 90,
    "text": "            self._first_plot = plot",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating objects using a class passed as a parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      11085,
      62,
      29487,
      796,
      7110
    ],
    "start_token": 314,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      5563,
      1262,
      257,
      1398,
      3804,
      355,
      257,
      11507
    ],
    "label": "ml_signal",
    "reason": "Instantiating objects using a class passed as a parameter"
  },
  {
    "line": 92,
    "text": "        # Connect view change signal to update y range function",
    "annotation": "\u2705 Best Practice: Using type annotations for dictionary keys and values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8113,
      1570,
      1487,
      6737,
      284,
      4296,
      331,
      2837,
      2163
    ],
    "start_token": 332,
    "end_token": 349,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      22155,
      8251,
      290,
      3815
    ],
    "label": "best_practice",
    "reason": "Using type annotations for dictionary keys and values"
  },
  {
    "line": 94,
    "text": "        view.sigXRangeChanged.connect(self._update_y_range)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType error if plot_name is not found in self._plots",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1570,
      13,
      82,
      328,
      55,
      17257,
      31813,
      13,
      8443,
      7,
      944,
      13557,
      19119,
      62,
      88,
      62,
      9521,
      8
    ],
    "start_token": 349,
    "end_token": 374,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      4049,
      611,
      7110,
      62,
      3672,
      318,
      407,
      1043,
      287,
      2116,
      13557,
      489,
      1747
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType error if plot_name is not found in self._plots"
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Possible AttributeError if plot is None",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 374,
    "end_token": 374,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33671,
      3460,
      4163,
      12331,
      611,
      7110,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Possible AttributeError if plot is None"
  },
  {
    "line": 99,
    "text": "        right_axis.setWidth(60)",
    "annotation": "\u2705 Best Practice: Maintaining a mapping between items and plots for easy reference",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      826,
      62,
      22704,
      13,
      2617,
      30916,
      7,
      1899,
      8
    ],
    "start_token": 374,
    "end_token": 390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      337,
      2913,
      1397,
      257,
      16855,
      1022,
      3709,
      290,
      21528,
      329,
      2562,
      4941
    ],
    "label": "best_practice",
    "reason": "Maintaining a mapping between items and plots for easy reference"
  },
  {
    "line": 95,
    "text": "        view.setMouseEnabled(x=True, y=False)",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1570,
      13,
      2617,
      39643,
      20491,
      7,
      87,
      28,
      17821,
      11,
      331,
      28,
      25101,
      8
    ],
    "start_token": 390,
    "end_token": 411,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type for better readability and maintainability"
  },
  {
    "line": 100,
    "text": "        right_axis.tickFont = NORMAL_FONT",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      826,
      62,
      22704,
      13,
      42298,
      23252,
      796,
      25273,
      42126,
      62,
      37,
      35830
    ],
    "start_token": 411,
    "end_token": 430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 100,
    "text": "        right_axis.tickFont = NORMAL_FONT",
    "annotation": "\u2705 Best Practice: Type hinting for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      826,
      62,
      22704,
      13,
      42298,
      23252,
      796,
      25273,
      42126,
      62,
      37,
      35830
    ],
    "start_token": 430,
    "end_token": 449,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 105,
    "text": "            plot.setXLink(first_plot)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing instance variables like self._plots can indicate object-oriented design patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2617,
      55,
      11280,
      7,
      11085,
      62,
      29487,
      8
    ],
    "start_token": 449,
    "end_token": 470,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      4554,
      9633,
      588,
      2116,
      13557,
      489,
      1747,
      460,
      7603,
      2134,
      12,
      17107,
      1486,
      7572
    ],
    "label": "ml_signal",
    "reason": "Accessing instance variables like self._plots can indicate object-oriented design patterns"
  },
  {
    "line": 109,
    "text": "",
    "annotation": "\u2705 Best Practice: Clear and concise docstring explaining the method's purpose.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 470,
    "end_token": 470,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      290,
      35327,
      2205,
      8841,
      11170,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Clear and concise docstring explaining the method's purpose."
  },
  {
    "line": 111,
    "text": "        self._layout.nextRow()",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern, indicating a sequence of operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      39786,
      13,
      19545,
      25166,
      3419
    ],
    "start_token": 470,
    "end_token": 484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      11,
      12739,
      257,
      8379,
      286,
      4560,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern, indicating a sequence of operations."
  },
  {
    "line": 113,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection to perform an operation on each item.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 484,
    "end_token": 484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      1620,
      281,
      4905,
      319,
      1123,
      2378,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection to perform an operation on each item."
  },
  {
    "line": 115,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Recursively calling a method on items in a collection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 484,
    "end_token": 493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      1834,
      2280,
      4585,
      257,
      2446,
      319,
      3709,
      287,
      257,
      4947,
      13
    ],
    "label": "ml_signal",
    "reason": "Recursively calling a method on items in a collection."
  },
  {
    "line": 118,
    "text": "        plot_name: str",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType error if _cursor is not properly checked.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      62,
      3672,
      25,
      965
    ],
    "start_token": 493,
    "end_token": 505,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      4049,
      611,
      4808,
      66,
      21471,
      318,
      407,
      6105,
      10667,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType error if _cursor is not properly checked."
  },
  {
    "line": 119,
    "text": "    ) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional operation based on the presence of an attribute.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 505,
    "end_token": 512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      4905,
      1912,
      319,
      262,
      4931,
      286,
      281,
      11688,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional operation based on the presence of an attribute."
  },
  {
    "line": 118,
    "text": "        plot_name: str",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      62,
      3672,
      25,
      965
    ],
    "start_token": 512,
    "end_token": 524,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 120,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary's values to perform an operation on each item.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 524,
    "end_token": 532,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      338,
      3815,
      284,
      1620,
      281,
      4905,
      319,
      1123,
      2378,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary's values to perform an operation on each item."
  },
  {
    "line": 122,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on each item in a collection, indicating a pattern of updating or processing multiple objects.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 532,
    "end_token": 540,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      1123,
      2378,
      287,
      257,
      4947,
      11,
      12739,
      257,
      3912,
      286,
      19698,
      393,
      7587,
      3294,
      5563,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling a method on each item in a collection, indicating a pattern of updating or processing multiple objects."
  },
  {
    "line": 124,
    "text": "        self._items[item_name] = item",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update plot limits, indicating a pattern of visual data representation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      23814,
      58,
      9186,
      62,
      3672,
      60,
      796,
      2378
    ],
    "start_token": 540,
    "end_token": 557,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      7110,
      7095,
      11,
      12739,
      257,
      3912,
      286,
      5874,
      1366,
      10552,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to update plot limits, indicating a pattern of visual data representation."
  },
  {
    "line": 127,
    "text": "        plot.addItem(item)",
    "annotation": "\ud83e\udde0 ML Signal: Method call to adjust view or position, indicating a pattern of user interface or visualization adjustment.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2860,
      7449,
      7,
      9186,
      8
    ],
    "start_token": 557,
    "end_token": 571,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4532,
      1570,
      393,
      2292,
      11,
      12739,
      257,
      3912,
      286,
      2836,
      7071,
      393,
      32704,
      15068,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to adjust view or position, indicating a pattern of user interface or visualization adjustment."
  },
  {
    "line": 127,
    "text": "        plot.addItem(item)",
    "annotation": "\ud83e\udde0 ML Signal: Method updates internal state based on input data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2860,
      7449,
      7,
      9186,
      8
    ],
    "start_token": 571,
    "end_token": 585,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      5387,
      1181,
      1912,
      319,
      5128,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method updates internal state based on input data"
  },
  {
    "line": 129,
    "text": "        self._item_plot_map[item] = plot",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection to update each item",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      9186,
      62,
      29487,
      62,
      8899,
      58,
      9186,
      60,
      796,
      7110
    ],
    "start_token": 585,
    "end_token": 604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      4296,
      1123,
      2378
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection to update each item"
  },
  {
    "line": 131,
    "text": "    def get_plot(self, plot_name: str) -> pg.PlotItem:",
    "annotation": "\ud83e\udde0 ML Signal: Method updates internal state based on input data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29487,
      7,
      944,
      11,
      7110,
      62,
      3672,
      25,
      965,
      8,
      4613,
      23241,
      13,
      43328,
      7449,
      25
    ],
    "start_token": 604,
    "end_token": 626,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      5387,
      1181,
      1912,
      319,
      5128,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method updates internal state based on input data"
  },
  {
    "line": 133,
    "text": "        Get specific plot with its name.",
    "annotation": "\ud83e\udde0 ML Signal: Method updates internal state based on input data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      2176,
      7110,
      351,
      663,
      1438,
      13
    ],
    "start_token": 626,
    "end_token": 640,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      5387,
      1181,
      1912,
      319,
      5128,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method updates internal state based on input data"
  },
  {
    "line": 134,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use parentheses for clarity in complex conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 640,
    "end_token": 648,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      46672,
      329,
      16287,
      287,
      3716,
      3403
    ],
    "label": "best_practice",
    "reason": "Use parentheses for clarity in complex conditions"
  },
  {
    "line": 137,
    "text": "    def get_all_plots(self) -> list[pg.PlotItem]:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic triggers a state change",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      489,
      1747,
      7,
      944,
      8,
      4613,
      1351,
      58,
      6024,
      13,
      43328,
      7449,
      5974
    ],
    "start_token": 648,
    "end_token": 669,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      20022,
      257,
      1181,
      1487
    ],
    "label": "ml_signal",
    "reason": "Conditional logic triggers a state change"
  },
  {
    "line": 137,
    "text": "    def get_all_plots(self) -> list[pg.PlotItem]:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to update associated values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      489,
      1747,
      7,
      944,
      8,
      4613,
      1351,
      58,
      6024,
      13,
      43328,
      7449,
      5974
    ],
    "start_token": 669,
    "end_token": 690,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      4296,
      3917,
      3815
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to update associated values"
  },
  {
    "line": 139,
    "text": "        Get all plot objects.",
    "annotation": "\ud83e\udde0 ML Signal: Method call to retrieve a range of values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      7110,
      5563,
      13
    ],
    "start_token": 690,
    "end_token": 702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      19818,
      257,
      2837,
      286,
      3815
    ],
    "label": "ml_signal",
    "reason": "Method call to retrieve a range of values"
  },
  {
    "line": 139,
    "text": "        Get all plot objects.",
    "annotation": "\ud83e\udde0 ML Signal: Method call to set limits on a plot",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      7110,
      5563,
      13
    ],
    "start_token": 702,
    "end_token": 714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      900,
      7095,
      319,
      257,
      7110
    ],
    "label": "ml_signal",
    "reason": "Method call to set limits on a plot"
  },
  {
    "line": 139,
    "text": "        Get all plot objects.",
    "annotation": "\u2705 Best Practice: Use of named parameters for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      7110,
      5563,
      13
    ],
    "start_token": 714,
    "end_token": 726,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      10007,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of named parameters for clarity"
  },
  {
    "line": 145,
    "text": "        Clear all data.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if get_count() returns unexpected values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11459,
      477,
      1366,
      13
    ],
    "start_token": 726,
    "end_token": 737,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      651,
      62,
      9127,
      3419,
      5860,
      10059,
      3815
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if get_count() returns unexpected values"
  },
  {
    "line": 149,
    "text": "        for item in self._items.values():",
    "annotation": "\u2705 Best Practice: Type hinting for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2378,
      287,
      2116,
      13557,
      23814,
      13,
      27160,
      33529
    ],
    "start_token": 737,
    "end_token": 753,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for variables improves code readability and maintainability."
  },
  {
    "line": 151,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 753,
    "end_token": 753,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for variables improves code readability and maintainability."
  },
  {
    "line": 153,
    "text": "            self._cursor.clear_all()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection of plots to update their properties.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      66,
      21471,
      13,
      20063,
      62,
      439,
      3419
    ],
    "start_token": 753,
    "end_token": 773,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      286,
      21528,
      284,
      4296,
      511,
      6608,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection of plots to update their properties."
  },
  {
    "line": 154,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call to set a specific range on a plot, indicating usage of a plotting library.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 773,
    "end_token": 773,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      900,
      257,
      2176,
      2837,
      319,
      257,
      7110,
      11,
      12739,
      8748,
      286,
      257,
      29353,
      5888,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to set a specific range on a plot, indicating usage of a plotting library."
  },
  {
    "line": 157,
    "text": "        Update a list of bar data.",
    "annotation": "\u2705 Best Practice: Early return pattern improves readability by reducing nested code.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10133,
      257,
      1351,
      286,
      2318,
      1366,
      13
    ],
    "start_token": 773,
    "end_token": 787,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12556,
      1441,
      3912,
      19575,
      1100,
      1799,
      416,
      8868,
      28376,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Early return pattern improves readability by reducing nested code."
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'view' indicates a pattern for type-aware programming.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 787,
    "end_token": 787,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      1177,
      6,
      9217,
      257,
      3912,
      329,
      2099,
      12,
      9685,
      8300,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'view' indicates a pattern for type-aware programming."
  },
  {
    "line": 162,
    "text": "            item.update_history(history)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'view_range' indicates a pattern for type-aware programming.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2378,
      13,
      19119,
      62,
      23569,
      7,
      23569,
      8
    ],
    "start_token": 787,
    "end_token": 806,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      1177,
      62,
      9521,
      6,
      9217,
      257,
      3912,
      329,
      2099,
      12,
      9685,
      8300,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'view_range' indicates a pattern for type-aware programming."
  },
  {
    "line": 164,
    "text": "        self._update_plot_limits()",
    "annotation": "\u2705 Best Practice: Use of max function ensures 'min_ix' is non-negative, preventing potential index errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      29487,
      62,
      49196,
      3419
    ],
    "start_token": 806,
    "end_token": 821,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3509,
      2163,
      19047,
      705,
      1084,
      62,
      844,
      6,
      318,
      1729,
      12,
      31591,
      11,
      12174,
      2785,
      6376,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Use of max function ensures 'min_ix' is non-negative, preventing potential index errors."
  },
  {
    "line": 166,
    "text": "        self.move_to_right()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'view_range[0][1]' is not within expected bounds of 'self._manager.get_count()'.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21084,
      62,
      1462,
      62,
      3506,
      3419
    ],
    "start_token": 821,
    "end_token": 836,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      1177,
      62,
      9521,
      58,
      15,
      7131,
      16,
      49946,
      318,
      407,
      1626,
      2938,
      22303,
      286,
      705,
      944,
      13557,
      37153,
      13,
      1136,
      62,
      9127,
      3419,
      4458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'view_range[0][1]' is not within expected bounds of 'self._manager.get_count()'."
  },
  {
    "line": 167,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items is a common pattern for processing key-value pairs.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 836,
    "end_token": 836,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      318,
      257,
      2219,
      3912,
      329,
      7587,
      1994,
      12,
      8367,
      14729,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items is a common pattern for processing key-value pairs."
  },
  {
    "line": 170,
    "text": "        Update single bar data.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'y_range' indicates a pattern for type-aware programming.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10133,
      2060,
      2318,
      1366,
      13
    ],
    "start_token": 836,
    "end_token": 848,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      88,
      62,
      9521,
      6,
      9217,
      257,
      3912,
      329,
      2099,
      12,
      9685,
      8300,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'y_range' indicates a pattern for type-aware programming."
  },
  {
    "line": 172,
    "text": "        self._manager.update_bar(bar)",
    "annotation": "\u2705 Best Practice: Explicitly naming the parameter 'yRange' improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      37153,
      13,
      19119,
      62,
      5657,
      7,
      5657,
      8
    ],
    "start_token": 848,
    "end_token": 865,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      19264,
      262,
      11507,
      705,
      88,
      17257,
      6,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly naming the parameter 'yRange' improves code readability."
  },
  {
    "line": 170,
    "text": "        Update single bar data.",
    "annotation": "\u2705 Best Practice: Early return pattern improves readability by handling base cases first.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10133,
      2060,
      2318,
      1366,
      13
    ],
    "start_token": 865,
    "end_token": 877,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12556,
      1441,
      3912,
      19575,
      1100,
      1799,
      416,
      9041,
      2779,
      2663,
      717,
      13
    ],
    "label": "best_practice",
    "reason": "Early return pattern improves readability by handling base cases first."
  },
  {
    "line": 173,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for variables can be used to infer expected data types.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 877,
    "end_token": 877,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      9633,
      460,
      307,
      973,
      284,
      13249,
      2938,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting for variables can be used to infer expected data types."
  },
  {
    "line": 175,
    "text": "            item.update_bar(bar)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list to store view range values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2378,
      13,
      19119,
      62,
      5657,
      7,
      5657,
      8
    ],
    "start_token": 877,
    "end_token": 896,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      284,
      3650,
      1570,
      2837,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of list to store view range values."
  },
  {
    "line": 177,
    "text": "        self._update_plot_limits()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if view_range[0][1] is not a number or is None.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      29487,
      62,
      49196,
      3419
    ],
    "start_token": 896,
    "end_token": 911,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      1570,
      62,
      9521,
      58,
      15,
      7131,
      16,
      60,
      318,
      407,
      257,
      1271,
      393,
      318,
      6045,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if view_range[0][1] is not a number or is None."
  },
  {
    "line": 180,
    "text": "            self.move_to_right()",
    "annotation": "\u2705 Best Practice: Calling the superclass method ensures that the base functionality is preserved.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21084,
      62,
      1462,
      62,
      3506,
      3419
    ],
    "start_token": 911,
    "end_token": 930,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      2446,
      19047,
      326,
      262,
      2779,
      11244,
      318,
      17232,
      13
    ],
    "label": "best_practice",
    "reason": "Calling the superclass method ensures that the base functionality is preserved."
  },
  {
    "line": 180,
    "text": "            self.move_to_right()",
    "annotation": "\u2705 Best Practice: Use of QtCore.Qt.Key for readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21084,
      62,
      1462,
      62,
      3506,
      3419
    ],
    "start_token": 930,
    "end_token": 949,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33734,
      14055,
      13,
      48,
      83,
      13,
      9218,
      329,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of QtCore.Qt.Key for readability and maintainability"
  },
  {
    "line": 182,
    "text": "    def _update_plot_limits(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of handling key press events",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      19119,
      62,
      29487,
      62,
      49196,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 949,
    "end_token": 965,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      9041,
      1994,
      1803,
      2995
    ],
    "label": "ml_signal",
    "reason": "Pattern of handling key press events"
  },
  {
    "line": 184,
    "text": "        Update the limit of plots.",
    "annotation": "\ud83e\udde0 ML Signal: Custom handling for left key press",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10133,
      262,
      4179,
      286,
      21528,
      13
    ],
    "start_token": 965,
    "end_token": 978,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      9041,
      329,
      1364,
      1994,
      1803
    ],
    "label": "ml_signal",
    "reason": "Custom handling for left key press"
  },
  {
    "line": 186,
    "text": "        for item, plot in self._item_plot_map.items():",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of handling key press events",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      2378,
      11,
      7110,
      287,
      2116,
      13557,
      9186,
      62,
      29487,
      62,
      8899,
      13,
      23814,
      33529
    ],
    "start_token": 978,
    "end_token": 1000,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      9041,
      1994,
      1803,
      2995
    ],
    "label": "ml_signal",
    "reason": "Pattern of handling key press events"
  },
  {
    "line": 188,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Custom handling for right key press",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1000,
    "end_token": 1000,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      9041,
      329,
      826,
      1994,
      1803
    ],
    "label": "ml_signal",
    "reason": "Custom handling for right key press"
  },
  {
    "line": 190,
    "text": "                xMin=-1,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of handling key press events",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      9452,
      10779,
      16,
      11
    ],
    "start_token": 1000,
    "end_token": 1020,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      9041,
      1994,
      1803,
      2995
    ],
    "label": "ml_signal",
    "reason": "Pattern of handling key press events"
  },
  {
    "line": 193,
    "text": "                yMax=max_value",
    "annotation": "\ud83e\udde0 ML Signal: Custom handling for up key press",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      11518,
      28,
      9806,
      62,
      8367
    ],
    "start_token": 1020,
    "end_token": 1041,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      9041,
      329,
      510,
      1994,
      1803
    ],
    "label": "ml_signal",
    "reason": "Custom handling for up key press"
  },
  {
    "line": 194,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of handling key press events",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1041,
    "end_token": 1053,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      9041,
      1994,
      1803,
      2995
    ],
    "label": "ml_signal",
    "reason": "Pattern of handling key press events"
  },
  {
    "line": 196,
    "text": "    def _update_x_range(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Custom handling for down key press",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      19119,
      62,
      87,
      62,
      9521,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1053,
    "end_token": 1069,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      9041,
      329,
      866,
      1994,
      1803
    ],
    "label": "ml_signal",
    "reason": "Custom handling for down key press"
  },
  {
    "line": 193,
    "text": "                yMax=max_value",
    "annotation": "\u2705 Best Practice: Use of type annotation for variable 'delta' improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      331,
      11518,
      28,
      9806,
      62,
      8367
    ],
    "start_token": 1069,
    "end_token": 1090,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      23025,
      329,
      7885,
      705,
      67,
      12514,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotation for variable 'delta' improves code readability and maintainability."
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on event data can indicate user interaction patterns.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1090,
    "end_token": 1090,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1785,
      1366,
      460,
      7603,
      2836,
      10375,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on event data can indicate user interaction patterns."
  },
  {
    "line": 197,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method calls based on user input can be used to understand feature usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1090,
    "end_token": 1098,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      1912,
      319,
      2836,
      5128,
      460,
      307,
      973,
      284,
      1833,
      3895,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls based on user input can be used to understand feature usage."
  },
  {
    "line": 199,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on event data can indicate user interaction patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1098,
    "end_token": 1106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1785,
      1366,
      460,
      7603,
      2836,
      10375,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on event data can indicate user interaction patterns."
  },
  {
    "line": 202,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method calls based on user input can be used to understand feature usage.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1106,
    "end_token": 1106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      1912,
      319,
      2836,
      5128,
      460,
      307,
      973,
      284,
      1833,
      3895,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls based on user input can be used to understand feature usage."
  },
  {
    "line": 202,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive method name and docstring for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1106,
    "end_token": 1106,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2446,
      1438,
      290,
      2205,
      8841,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive method name and docstring for clarity"
  },
  {
    "line": 204,
    "text": "            plot.setRange(xRange=(min_ix, max_ix), padding=0)",
    "annotation": "\u2705 Best Practice: Use of max function to ensure _right_ix does not go below _bar_count",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2617,
      17257,
      7,
      87,
      17257,
      16193,
      1084,
      62,
      844,
      11,
      3509,
      62,
      844,
      828,
      24511,
      28,
      15,
      8
    ],
    "start_token": 1106,
    "end_token": 1137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3509,
      2163,
      284,
      4155,
      4808,
      3506,
      62,
      844,
      857,
      407,
      467,
      2174,
      4808,
      5657,
      62,
      9127
    ],
    "label": "best_practice",
    "reason": "Use of max function to ensure _right_ix does not go below _bar_count"
  },
  {
    "line": 206,
    "text": "    def _update_y_range(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for updating UI components",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      19119,
      62,
      88,
      62,
      9521,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1137,
    "end_token": 1153,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      19698,
      12454,
      6805
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for updating UI components"
  },
  {
    "line": 209,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic pattern for object manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1153,
    "end_token": 1161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      3912,
      329,
      2134,
      17512
    ],
    "label": "ml_signal",
    "reason": "Conditional logic pattern for object manipulation"
  },
  {
    "line": 212,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for updating UI components",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1161,
    "end_token": 1161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      19698,
      12454,
      6805
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for updating UI components"
  },
  {
    "line": 212,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method that modifies internal state based on user input",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1161,
    "end_token": 1161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      953,
      6945,
      5387,
      1181,
      1912,
      319,
      2836,
      5128
    ],
    "label": "ml_signal",
    "reason": "Method that modifies internal state based on user input"
  },
  {
    "line": 214,
    "text": "        view_range: list = view.viewRange()",
    "annotation": "\u2705 Best Practice: Use of min function to ensure _right_ix does not exceed a certain limit",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1570,
      62,
      9521,
      25,
      1351,
      796,
      1570,
      13,
      1177,
      17257,
      3419
    ],
    "start_token": 1161,
    "end_token": 1179,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      949,
      2163,
      284,
      4155,
      4808,
      3506,
      62,
      844,
      857,
      407,
      7074,
      257,
      1728,
      4179
    ],
    "label": "best_practice",
    "reason": "Use of min function to ensure _right_ix does not exceed a certain limit"
  },
  {
    "line": 216,
    "text": "        min_ix: int = max(0, int(view_range[0][0]))",
    "annotation": "\ud83e\udde0 ML Signal: Method call that updates the display or state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      949,
      62,
      844,
      25,
      493,
      796,
      3509,
      7,
      15,
      11,
      493,
      7,
      1177,
      62,
      9521,
      58,
      15,
      7131,
      15,
      60,
      4008
    ],
    "start_token": 1179,
    "end_token": 1207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      326,
      5992,
      262,
      3359,
      393,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method call that updates the display or state"
  },
  {
    "line": 218,
    "text": "",
    "annotation": "\u2705 Best Practice: Check if _cursor is not None before accessing its methods",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1207,
    "end_token": 1207,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4808,
      66,
      21471,
      318,
      407,
      6045,
      878,
      22534,
      663,
      5050
    ],
    "label": "best_practice",
    "reason": "Check if _cursor is not None before accessing its methods"
  },
  {
    "line": 219,
    "text": "        # Update limit for y-axis",
    "annotation": "\ud83e\udde0 ML Signal: Method that modifies cursor position",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      4179,
      329,
      331,
      12,
      22704
    ],
    "start_token": 1207,
    "end_token": 1221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      953,
      6945,
      23493,
      2292
    ],
    "label": "ml_signal",
    "reason": "Method that modifies cursor position"
  },
  {
    "line": 222,
    "text": "            plot.setRange(yRange=y_range)",
    "annotation": "\ud83e\udde0 ML Signal: Method that updates cursor information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2617,
      17257,
      7,
      88,
      17257,
      28,
      88,
      62,
      9521,
      8
    ],
    "start_token": 1221,
    "end_token": 1244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      5992,
      23493,
      1321
    ],
    "label": "ml_signal",
    "reason": "Method that updates cursor information"
  },
  {
    "line": 222,
    "text": "            plot.setRange(yRange=y_range)",
    "annotation": "\ud83e\udde0 ML Signal: Method modifies internal state based on user interaction (key down event).",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2617,
      17257,
      7,
      88,
      17257,
      28,
      88,
      62,
      9521,
      8
    ],
    "start_token": 1244,
    "end_token": 1267,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      953,
      6945,
      5387,
      1181,
      1912,
      319,
      2836,
      10375,
      357,
      2539,
      866,
      1785,
      737
    ],
    "label": "ml_signal",
    "reason": "Method modifies internal state based on user interaction (key down event)."
  },
  {
    "line": 224,
    "text": "    def paintEvent(self, event: QtGui.QPaintEvent) -> None:",
    "annotation": "\u2705 Best Practice: Use of min function to ensure _bar_count does not exceed a certain limit.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7521,
      9237,
      7,
      944,
      11,
      1785,
      25,
      33734,
      8205,
      72,
      13,
      48,
      47,
      2913,
      9237,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1267,
    "end_token": 1290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      949,
      2163,
      284,
      4155,
      4808,
      5657,
      62,
      9127,
      857,
      407,
      7074,
      257,
      1728,
      4179,
      13
    ],
    "label": "best_practice",
    "reason": "Use of min function to ensure _bar_count does not exceed a certain limit."
  },
  {
    "line": 226,
    "text": "        Reimplement this method of parent to update current max_ix value.",
    "annotation": "\ud83e\udde0 ML Signal: Calls a method to update the display or state after modifying internal data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      797,
      320,
      26908,
      428,
      2446,
      286,
      2560,
      284,
      4296,
      1459,
      3509,
      62,
      844,
      1988,
      13
    ],
    "start_token": 1290,
    "end_token": 1312,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27592,
      257,
      2446,
      284,
      4296,
      262,
      3359,
      393,
      1181,
      706,
      30620,
      5387,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Calls a method to update the display or state after modifying internal data."
  },
  {
    "line": 228,
    "text": "        if not self._first_plot:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of an attribute (self._cursor).",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13557,
      11085,
      62,
      29487,
      25
    ],
    "start_token": 1312,
    "end_token": 1327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      281,
      11688,
      357,
      944,
      13557,
      66,
      21471,
      737
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of an attribute (self._cursor)."
  },
  {
    "line": 231,
    "text": "        view: pg.ViewBox = self._first_plot.getViewBox()",
    "annotation": "\ud83e\udde0 ML Signal: Method updates UI or state based on user interaction.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1570,
      25,
      23241,
      13,
      7680,
      14253,
      796,
      2116,
      13557,
      11085,
      62,
      29487,
      13,
      1136,
      7680,
      14253,
      3419
    ],
    "start_token": 1327,
    "end_token": 1351,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      12454,
      393,
      1181,
      1912,
      319,
      2836,
      10375,
      13
    ],
    "label": "ml_signal",
    "reason": "Method updates UI or state based on user interaction."
  },
  {
    "line": 231,
    "text": "        view: pg.ViewBox = self._first_plot.getViewBox()",
    "annotation": "\ud83e\udde0 ML Signal: Method for handling key up events, indicating user interaction pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1570,
      25,
      23241,
      13,
      7680,
      14253,
      796,
      2116,
      13557,
      11085,
      62,
      29487,
      13,
      1136,
      7680,
      14253,
      3419
    ],
    "start_token": 1351,
    "end_token": 1375,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      9041,
      1994,
      510,
      2995,
      11,
      12739,
      2836,
      10375,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method for handling key up events, indicating user interaction pattern"
  },
  {
    "line": 233,
    "text": "        self._right_ix = max(0, view_range[0][1])",
    "annotation": "\u2705 Best Practice: Use of max function to ensure _bar_count does not go below MIN_BAR_COUNT",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3506,
      62,
      844,
      796,
      3509,
      7,
      15,
      11,
      1570,
      62,
      9521,
      58,
      15,
      7131,
      16,
      12962
    ],
    "start_token": 1375,
    "end_token": 1400,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3509,
      2163,
      284,
      4155,
      4808,
      5657,
      62,
      9127,
      857,
      407,
      467,
      2174,
      20625,
      62,
      33,
      1503,
      62,
      34,
      28270
    ],
    "label": "best_practice",
    "reason": "Use of max function to ensure _bar_count does not go below MIN_BAR_COUNT"
  },
  {
    "line": 235,
    "text": "        super().paintEvent(event)",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update the x-axis range, indicating a pattern of UI update",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      79,
      2913,
      9237,
      7,
      15596,
      8
    ],
    "start_token": 1400,
    "end_token": 1415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      262,
      2124,
      12,
      22704,
      2837,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      4296
    ],
    "label": "ml_signal",
    "reason": "Method call to update the x-axis range, indicating a pattern of UI update"
  },
  {
    "line": 237,
    "text": "    def keyPressEvent(self, event: QtGui.QKeyEvent) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for cursor presence, indicating dynamic UI component handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1994,
      13800,
      9237,
      7,
      944,
      11,
      1785,
      25,
      33734,
      8205,
      72,
      13,
      48,
      9218,
      9237,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1415,
    "end_token": 1438,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      23493,
      4931,
      11,
      12739,
      8925,
      12454,
      7515,
      9041
    ],
    "label": "ml_signal",
    "reason": "Conditional check for cursor presence, indicating dynamic UI component handling"
  },
  {
    "line": 240,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update cursor information, indicating a pattern of UI update",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1438,
    "end_token": 1446,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      23493,
      1321,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      4296
    ],
    "label": "ml_signal",
    "reason": "Method call to update cursor information, indicating a pattern of UI update"
  },
  {
    "line": 240,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1446,
    "end_token": 1454,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of a docstring to describe the method's purpose"
  },
  {
    "line": 242,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on an object attribute",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1454,
    "end_token": 1454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      281,
      2134,
      11688
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on an object attribute"
  },
  {
    "line": 243,
    "text": "        if event.key() == Key.Key_Left:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if get_count() returns unexpected values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1785,
      13,
      2539,
      3419,
      6624,
      7383,
      13,
      9218,
      62,
      18819,
      25
    ],
    "start_token": 1454,
    "end_token": 1473,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      651,
      62,
      9127,
      3419,
      5860,
      10059,
      3815
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if get_count() returns unexpected values"
  },
  {
    "line": 245,
    "text": "        elif event.key() == Key.Key_Right:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on an object attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      1785,
      13,
      2539,
      3419,
      6624,
      7383,
      13,
      9218,
      62,
      11028,
      25
    ],
    "start_token": 1473,
    "end_token": 1493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      281,
      2134,
      11688
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on an object attribute"
  },
  {
    "line": 246,
    "text": "            self._on_key_right()",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for attribute existence",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      261,
      62,
      2539,
      62,
      3506,
      3419
    ],
    "start_token": 1493,
    "end_token": 1512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      11688,
      6224
    ],
    "label": "ml_signal",
    "reason": "Conditional check for attribute existence"
  },
  {
    "line": 246,
    "text": "            self._on_key_right()",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on an object attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      261,
      62,
      2539,
      62,
      3506,
      3419
    ],
    "start_token": 1512,
    "end_token": 1531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      281,
      2134,
      11688
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on an object attribute"
  },
  {
    "line": 246,
    "text": "            self._on_key_right()",
    "annotation": "\u2705 Best Practice: Consider adding a class docstring to describe the purpose and usage of the class.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      261,
      62,
      2539,
      62,
      3506,
      3419
    ],
    "start_token": 1531,
    "end_token": 1550,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      1398,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a class docstring to describe the purpose and usage of the class."
  },
  {
    "line": 254,
    "text": "        Reimplement this method of parent to zoom in/out.",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      797,
      320,
      26908,
      428,
      2446,
      286,
      2560,
      284,
      19792,
      287,
      14,
      448,
      13
    ],
    "start_token": 1550,
    "end_token": 1570,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper initialization of the base class."
  },
  {
    "line": 256,
    "text": "        delta: QtCore.QPoint = event.angleDelta()",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25979,
      25,
      33734,
      14055,
      13,
      48,
      12727,
      796,
      1785,
      13,
      9248,
      42430,
      3419
    ],
    "start_token": 1570,
    "end_token": 1590,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 258,
    "text": "        if delta.y() > 0:",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      25979,
      13,
      88,
      3419,
      1875,
      657,
      25
    ],
    "start_token": 1590,
    "end_token": 1605,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 260,
    "text": "        elif delta.y() < 0:",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      25979,
      13,
      88,
      3419,
      1279,
      657,
      25
    ],
    "start_token": 1605,
    "end_token": 1621,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 262,
    "text": "",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1621,
    "end_token": 1621,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 264,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Initialize instance variables with default values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1621,
    "end_token": 1629,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      351,
      4277,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables with default values."
  },
  {
    "line": 266,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Initialize instance variables with default values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1629,
    "end_token": 1637,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      351,
      4277,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables with default values."
  },
  {
    "line": 268,
    "text": "        self._right_ix = max(self._right_ix, self._bar_count)",
    "annotation": "\u2705 Best Practice: Initialize instance variables with default values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3506,
      62,
      844,
      796,
      3509,
      7,
      944,
      13557,
      3506,
      62,
      844,
      11,
      2116,
      13557,
      5657,
      62,
      9127,
      8
    ],
    "start_token": 1637,
    "end_token": 1664,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      351,
      4277,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables with default values."
  },
  {
    "line": 270,
    "text": "        self._update_x_range()",
    "annotation": "\ud83e\udde0 ML Signal: Method calls in initialization can indicate component setup patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      87,
      62,
      9521,
      3419
    ],
    "start_token": 1664,
    "end_token": 1679,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      287,
      37588,
      460,
      7603,
      7515,
      9058,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls in initialization can indicate component setup patterns."
  },
  {
    "line": 273,
    "text": "            self._cursor.move_left()",
    "annotation": "\ud83e\udde0 ML Signal: Method calls in initialization can indicate component setup patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      66,
      21471,
      13,
      21084,
      62,
      9464,
      3419
    ],
    "start_token": 1679,
    "end_token": 1699,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      287,
      37588,
      460,
      7603,
      7515,
      9058,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls in initialization can indicate component setup patterns."
  },
  {
    "line": 266,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose of the method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1699,
    "end_token": 1707,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose of the method"
  },
  {
    "line": 268,
    "text": "        self._right_ix = max(self._right_ix, self._bar_count)",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern indicating UI component initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3506,
      62,
      844,
      796,
      3509,
      7,
      944,
      13557,
      3506,
      62,
      844,
      11,
      2116,
      13557,
      5657,
      62,
      9127,
      8
    ],
    "start_token": 1707,
    "end_token": 1734,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      12739,
      12454,
      7515,
      37588
    ],
    "label": "ml_signal",
    "reason": "Method call pattern indicating UI component initialization"
  },
  {
    "line": 270,
    "text": "        self._update_x_range()",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern indicating UI component initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      87,
      62,
      9521,
      3419
    ],
    "start_token": 1734,
    "end_token": 1749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      12739,
      12454,
      7515,
      37588
    ],
    "label": "ml_signal",
    "reason": "Method call pattern indicating UI component initialization"
  },
  {
    "line": 273,
    "text": "            self._cursor.move_left()",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern indicating UI component initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      66,
      21471,
      13,
      21084,
      62,
      9464,
      3419
    ],
    "start_token": 1749,
    "end_token": 1769,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      12739,
      12454,
      7515,
      37588
    ],
    "label": "ml_signal",
    "reason": "Method call pattern indicating UI component initialization"
  },
  {
    "line": 273,
    "text": "            self._cursor.move_left()",
    "annotation": "\u2705 Best Practice: Use of type annotations for dictionaries improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      66,
      21471,
      13,
      21084,
      62,
      9464,
      3419
    ],
    "start_token": 1769,
    "end_token": 1789,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      48589,
      3166,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for dictionaries improves code readability and maintainability."
  },
  {
    "line": 277,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type annotation for the pen variable improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1789,
    "end_token": 1797,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      23025,
      329,
      262,
      3112,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotation for the pen variable improves code readability and maintainability."
  },
  {
    "line": 279,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over items in a dictionary is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1797,
    "end_token": 1805,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3709,
      287,
      257,
      22155,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over items in a dictionary is a common pattern."
  },
  {
    "line": 281,
    "text": "        self._right_ix = min(self._right_ix, self._manager.get_count())",
    "annotation": "\u2705 Best Practice: Use of type annotations for line variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3506,
      62,
      844,
      796,
      949,
      7,
      944,
      13557,
      3506,
      62,
      844,
      11,
      2116,
      13557,
      37153,
      13,
      1136,
      62,
      9127,
      28955
    ],
    "start_token": 1805,
    "end_token": 1834,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1627,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for line variables improves code readability and maintainability."
  },
  {
    "line": 284,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotation for the view variable improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1834,
    "end_token": 1834,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      23025,
      329,
      262,
      1570,
      7885,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotation for the view variable improves code readability and maintainability."
  },
  {
    "line": 286,
    "text": "            self._cursor.move_right()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of objects to apply the same operations is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      66,
      21471,
      13,
      21084,
      62,
      3506,
      3419
    ],
    "start_token": 1834,
    "end_token": 1854,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      5563,
      284,
      4174,
      262,
      976,
      4560,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of objects to apply the same operations is a common pattern."
  },
  {
    "line": 292,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Storing objects in a dictionary with a key is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1854,
    "end_token": 1862,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      5563,
      287,
      257,
      22155,
      351,
      257,
      1994,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing objects in a dictionary with a key is a common pattern."
  },
  {
    "line": 292,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hinting for dictionary keys and values improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1862,
    "end_token": 1870,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      22155,
      8251,
      290,
      3815,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for dictionary keys and values improves code readability and maintainability."
  },
  {
    "line": 294,
    "text": "        self._bar_count = min(int(self._bar_count), self._manager.get_count())",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items is a common pattern that can be used to train ML models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5657,
      62,
      9127,
      796,
      949,
      7,
      600,
      7,
      944,
      13557,
      5657,
      62,
      9127,
      828,
      2116,
      13557,
      37153,
      13,
      1136,
      62,
      9127,
      28955
    ],
    "start_token": 1870,
    "end_token": 1901,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      318,
      257,
      2219,
      3912,
      326,
      460,
      307,
      973,
      284,
      4512,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items is a common pattern that can be used to train ML models."
  },
  {
    "line": 296,
    "text": "        self._update_x_range()",
    "annotation": "\u2705 Best Practice: Type hinting for variables enhances code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      87,
      62,
      9521,
      3419
    ],
    "start_token": 1901,
    "end_token": 1916,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      9633,
      32479,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for variables enhances code readability and maintainability."
  },
  {
    "line": 300,
    "text": "",
    "annotation": "\u2705 Best Practice: Setting Z-value for graphical items is a good practice for managing rendering order.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1916,
    "end_token": 1916,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      1168,
      12,
      8367,
      329,
      27831,
      3709,
      318,
      257,
      922,
      3357,
      329,
      11149,
      14837,
      1502,
      13
    ],
    "label": "best_practice",
    "reason": "Setting Z-value for graphical items is a good practice for managing rendering order."
  },
  {
    "line": 303,
    "text": "        Zoom in the chart.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that `plot.addItem` does not introduce any side effects or security issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40305,
      287,
      262,
      8262,
      13
    ],
    "start_token": 1916,
    "end_token": 1928,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      4600,
      29487,
      13,
      2860,
      7449,
      63,
      857,
      407,
      10400,
      597,
      1735,
      3048,
      393,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that `plot.addItem` does not introduce any side effects or security issues."
  },
  {
    "line": 306,
    "text": "        self._bar_count = max(int(self._bar_count), self.MIN_BAR_COUNT)",
    "annotation": "\u2705 Best Practice: Type hinting for variables enhances code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5657,
      62,
      9127,
      796,
      3509,
      7,
      600,
      7,
      944,
      13557,
      5657,
      62,
      9127,
      828,
      2116,
      13,
      23678,
      62,
      33,
      1503,
      62,
      34,
      28270,
      8
    ],
    "start_token": 1928,
    "end_token": 1961,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      9633,
      32479,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for variables enhances code readability and maintainability."
  },
  {
    "line": 310,
    "text": "        if self._cursor:",
    "annotation": "\u2705 Best Practice: Setting Z-value for graphical items is a good practice for managing rendering order.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13557,
      66,
      21471,
      25
    ],
    "start_token": 1961,
    "end_token": 1974,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      1168,
      12,
      8367,
      329,
      27831,
      3709,
      318,
      257,
      922,
      3357,
      329,
      11149,
      14837,
      1502,
      13
    ],
    "label": "best_practice",
    "reason": "Setting Z-value for graphical items is a good practice for managing rendering order."
  },
  {
    "line": 312,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that `plot.addItem` does not introduce any side effects or security issues.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1974,
    "end_token": 1974,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      4600,
      29487,
      13,
      2860,
      7449,
      63,
      857,
      407,
      10400,
      597,
      1735,
      3048,
      393,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that `plot.addItem` does not introduce any side effects or security issues."
  },
  {
    "line": 310,
    "text": "        if self._cursor:",
    "annotation": "\u2705 Best Practice: Use of type hinting for dictionary keys and values improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13557,
      66,
      21471,
      25
    ],
    "start_token": 1974,
    "end_token": 1987,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      22155,
      8251,
      290,
      3815,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for dictionary keys and values improves code readability and maintainability."
  },
  {
    "line": 312,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items is a common pattern that can be used to understand data structures.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1987,
    "end_token": 1987,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      318,
      257,
      2219,
      3912,
      326,
      460,
      307,
      973,
      284,
      1833,
      1366,
      8573,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items is a common pattern that can be used to understand data structures."
  },
  {
    "line": 312,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for the variable 'info' improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1987,
    "end_token": 1987,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      7885,
      705,
      10951,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for the variable 'info' improves code readability and maintainability."
  },
  {
    "line": 318,
    "text": "        self._update_x_range()",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants for colors indicates a pattern for managing UI themes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      87,
      62,
      9521,
      3419
    ],
    "start_token": 1987,
    "end_token": 2002,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      329,
      7577,
      9217,
      257,
      3912,
      329,
      11149,
      12454,
      13460,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of constants for colors indicates a pattern for managing UI themes."
  },
  {
    "line": 322,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Hiding UI elements initially is a common pattern in UI programming.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2002,
    "end_token": 2002,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      367,
      2530,
      12454,
      4847,
      7317,
      318,
      257,
      2219,
      3912,
      287,
      12454,
      8300,
      13
    ],
    "label": "ml_signal",
    "reason": "Hiding UI elements initially is a common pattern in UI programming."
  },
  {
    "line": 324,
    "text": "class ChartCursor(QtCore.QObject):",
    "annotation": "\ud83e\udde0 ML Signal: Setting Z-value is a pattern for managing UI element layering.",
    "confidence": 0.5,
    "tokens": [
      4871,
      22086,
      34,
      21471,
      7,
      48,
      83,
      14055,
      13,
      48,
      10267,
      2599
    ],
    "start_token": 2002,
    "end_token": 2014,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      1168,
      12,
      8367,
      318,
      257,
      3912,
      329,
      11149,
      12454,
      5002,
      3830,
      1586,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting Z-value is a pattern for managing UI element layering."
  },
  {
    "line": 327,
    "text": "    def __init__(",
    "annotation": "\ud83e\udde0 ML Signal: Setting font is a common pattern in UI customization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 2014,
    "end_token": 2022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      10369,
      318,
      257,
      2219,
      3912,
      287,
      12454,
      31344,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting font is a common pattern in UI customization."
  },
  {
    "line": 328,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Adding items to a plot is a common pattern in data visualization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 2022,
    "end_token": 2031,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      3709,
      284,
      257,
      7110,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      32704,
      13
    ],
    "label": "ml_signal",
    "reason": "Adding items to a plot is a common pattern in data visualization."
  },
  {
    "line": 329,
    "text": "        widget: ChartWidget,",
    "annotation": "\ud83e\udde0 ML Signal: Storing UI elements in a dictionary for later access is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26295,
      25,
      22086,
      38300,
      11
    ],
    "start_token": 2031,
    "end_token": 2043,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      12454,
      4847,
      287,
      257,
      22155,
      329,
      1568,
      1895,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing UI elements in a dictionary for later access is a common pattern."
  },
  {
    "line": 327,
    "text": "    def __init__(",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 2043,
    "end_token": 2051,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the method's purpose"
  },
  {
    "line": 328,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Method name and docstring indicate a pattern of connecting signals to slots",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 2051,
    "end_token": 2060,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      290,
      2205,
      8841,
      7603,
      257,
      3912,
      286,
      14320,
      10425,
      284,
      17314
    ],
    "label": "ml_signal",
    "reason": "Method name and docstring indicate a pattern of connecting signals to slots"
  },
  {
    "line": 329,
    "text": "        widget: ChartWidget,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of signal-slot connection pattern in PyQt or PySide",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26295,
      25,
      22086,
      38300,
      11
    ],
    "start_token": 2060,
    "end_token": 2072,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6737,
      12,
      43384,
      4637,
      3912,
      287,
      9485,
      48,
      83,
      393,
      9485,
      24819
    ],
    "label": "ml_signal",
    "reason": "Usage of signal-slot connection pattern in PyQt or PySide"
  },
  {
    "line": 332,
    "text": "        item_plot_map: dict[ChartItem, pg.GraphicsObject]",
    "annotation": "\u2705 Best Practice: Check if the manager has any count before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2378,
      62,
      29487,
      62,
      8899,
      25,
      8633,
      58,
      45488,
      7449,
      11,
      23241,
      13,
      18172,
      10267,
      60
    ],
    "start_token": 2072,
    "end_token": 2095,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      4706,
      468,
      597,
      954,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if the manager has any count before proceeding"
  },
  {
    "line": 335,
    "text": "        super().__init__()",
    "annotation": "\u2705 Best Practice: Explicitly type the variable for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      3419
    ],
    "start_token": 2095,
    "end_token": 2108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      2099,
      262,
      7885,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly type the variable for clarity"
  },
  {
    "line": 337,
    "text": "        self._widget: ChartWidget = widget",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to access its items",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      42655,
      25,
      22086,
      38300,
      796,
      26295
    ],
    "start_token": 2108,
    "end_token": 2123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1895,
      663,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to access its items"
  },
  {
    "line": 339,
    "text": "        self._plots: dict[str, pg.GraphicsObject] = plots",
    "annotation": "\ud83e\udde0 ML Signal: Using a method to get the bounding rectangle of a scene",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      489,
      1747,
      25,
      8633,
      58,
      2536,
      11,
      23241,
      13,
      18172,
      10267,
      60,
      796,
      21528
    ],
    "start_token": 2123,
    "end_token": 2146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      2446,
      284,
      651,
      262,
      5421,
      278,
      35991,
      286,
      257,
      3715
    ],
    "label": "ml_signal",
    "reason": "Using a method to get the bounding rectangle of a scene"
  },
  {
    "line": 341,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a point is within a rectangle",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2146,
    "end_token": 2146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      966,
      318,
      1626,
      257,
      35991
    ],
    "label": "ml_signal",
    "reason": "Checking if a point is within a rectangle"
  },
  {
    "line": 343,
    "text": "        self._y: float = 0",
    "annotation": "\ud83e\udde0 ML Signal: Mapping a scene position to a view position",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      88,
      25,
      12178,
      796,
      657
    ],
    "start_token": 2146,
    "end_token": 2160,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      257,
      3715,
      2292,
      284,
      257,
      1570,
      2292
    ],
    "label": "ml_signal",
    "reason": "Mapping a scene position to a view position"
  },
  {
    "line": 345,
    "text": "",
    "annotation": "\u2705 Best Practice: Convert float to int explicitly",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2160,
    "end_token": 2160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      12178,
      284,
      493,
      11777
    ],
    "label": "best_practice",
    "reason": "Convert float to int explicitly"
  },
  {
    "line": 347,
    "text": "        self._connect_signal()",
    "annotation": "\ud83e\udde0 ML Signal: Accessing x and y coordinates of a point",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      8443,
      62,
      12683,
      282,
      3419
    ],
    "start_token": 2160,
    "end_token": 2174,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2124,
      290,
      331,
      22715,
      286,
      257,
      966
    ],
    "label": "ml_signal",
    "reason": "Accessing x and y coordinates of a point"
  },
  {
    "line": 349,
    "text": "    def _init_ui(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Storing the plot name where the mouse is located",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      15003,
      62,
      9019,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2174,
    "end_token": 2188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      262,
      7110,
      1438,
      810,
      262,
      10211,
      318,
      5140
    ],
    "label": "ml_signal",
    "reason": "Storing the plot name where the mouse is located"
  },
  {
    "line": 352,
    "text": "        self._init_label()",
    "annotation": "\ud83e\udde0 ML Signal: Calling update methods after processing input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      15003,
      62,
      18242,
      3419
    ],
    "start_token": 2188,
    "end_token": 2201,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      4296,
      5050,
      706,
      7587,
      5128
    ],
    "label": "ml_signal",
    "reason": "Calling update methods after processing input"
  },
  {
    "line": 348,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary values, common pattern for ML feature extraction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2201,
    "end_token": 2201,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3815,
      11,
      2219,
      3912,
      329,
      10373,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary values, common pattern for ML feature extraction"
  },
  {
    "line": 350,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call on object, useful for dynamic behavior analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 2201,
    "end_token": 2211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      2134,
      11,
      4465,
      329,
      8925,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Method call on object, useful for dynamic behavior analysis"
  },
  {
    "line": 352,
    "text": "        self._init_label()",
    "annotation": "\ud83e\udde0 ML Signal: Method call on object, useful for dynamic behavior analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      15003,
      62,
      18242,
      3419
    ],
    "start_token": 2211,
    "end_token": 2224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      2134,
      11,
      4465,
      329,
      8925,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Method call on object, useful for dynamic behavior analysis"
  },
  {
    "line": 354,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items, common pattern for ML feature extraction",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2224,
    "end_token": 2224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      11,
      2219,
      3912,
      329,
      10373,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items, common pattern for ML feature extraction"
  },
  {
    "line": 356,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic, useful for control flow analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2224,
    "end_token": 2232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      11,
      4465,
      329,
      1630,
      5202,
      3781
    ],
    "label": "ml_signal",
    "reason": "Conditional logic, useful for control flow analysis"
  },
  {
    "line": 358,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call on object, useful for dynamic behavior analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2232,
    "end_token": 2240,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      2134,
      11,
      4465,
      329,
      8925,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Method call on object, useful for dynamic behavior analysis"
  },
  {
    "line": 360,
    "text": "        self._h_lines: dict[str, pg.InfiniteLine] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Method call on object, useful for dynamic behavior analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      71,
      62,
      6615,
      25,
      8633,
      58,
      2536,
      11,
      23241,
      13,
      18943,
      9504,
      13949,
      60,
      796,
      23884
    ],
    "start_token": 2240,
    "end_token": 2265,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      2134,
      11,
      4465,
      329,
      8925,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Method call on object, useful for dynamic behavior analysis"
  },
  {
    "line": 363,
    "text": "        pen: QtGui.QPen = pg.mkPen(WHITE_COLOR)",
    "annotation": "\ud83e\udde0 ML Signal: Method call on object, useful for dynamic behavior analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3112,
      25,
      33734,
      8205,
      72,
      13,
      48,
      25553,
      796,
      23241,
      13,
      28015,
      25553,
      7,
      12418,
      12709,
      62,
      46786,
      8
    ],
    "start_token": 2265,
    "end_token": 2291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      2134,
      11,
      4465,
      329,
      8925,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Method call on object, useful for dynamic behavior analysis"
  },
  {
    "line": 359,
    "text": "        self._v_lines: dict[str, pg.InfiniteLine] = {}",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      85,
      62,
      6615,
      25,
      8633,
      58,
      2536,
      11,
      23241,
      13,
      18943,
      9504,
      13949,
      60,
      796,
      23884
    ],
    "start_token": 2291,
    "end_token": 2316,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 361,
    "text": "        self._views: dict[str, pg.ViewBox] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external library method to get axis width.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      33571,
      25,
      8633,
      58,
      2536,
      11,
      23241,
      13,
      7680,
      14253,
      60,
      796,
      23884
    ],
    "start_token": 2316,
    "end_token": 2338,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      5888,
      2446,
      284,
      651,
      16488,
      9647,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of external library method to get axis width."
  },
  {
    "line": 363,
    "text": "        pen: QtGui.QPen = pg.mkPen(WHITE_COLOR)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external library method to get axis height.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3112,
      25,
      33734,
      8205,
      72,
      13,
      48,
      25553,
      796,
      23241,
      13,
      28015,
      25553,
      7,
      12418,
      12709,
      62,
      46786,
      8
    ],
    "start_token": 2338,
    "end_token": 2364,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      5888,
      2446,
      284,
      651,
      16488,
      6001,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of external library method to get axis height."
  },
  {
    "line": 364,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2364,
    "end_token": 2364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 367,
    "text": "            h_line: pg.InfiniteLine = pg.InfiniteLine(angle=0, movable=False, pen=pen)",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      289,
      62,
      1370,
      25,
      23241,
      13,
      18943,
      9504,
      13949,
      796,
      23241,
      13,
      18943,
      9504,
      13949,
      7,
      9248,
      28,
      15,
      11,
      1409,
      540,
      28,
      25101,
      11,
      3112,
      28,
      3617,
      8
    ],
    "start_token": 2364,
    "end_token": 2404,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 369,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Mapping scene coordinates to view coordinates.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2404,
    "end_token": 2404,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      3715,
      22715,
      284,
      1570,
      22715,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping scene coordinates to view coordinates."
  },
  {
    "line": 375,
    "text": "            self._v_lines[plot_name] = v_line",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic label text setting based on condition.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      85,
      62,
      6615,
      58,
      29487,
      62,
      3672,
      60,
      796,
      410,
      62,
      1370
    ],
    "start_token": 2404,
    "end_token": 2429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      6167,
      2420,
      4634,
      1912,
      319,
      4006,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic label text setting based on condition."
  },
  {
    "line": 378,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Setting position of a label in a plot.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2429,
    "end_token": 2429,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      2292,
      286,
      257,
      6167,
      287,
      257,
      7110,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting position of a label in a plot."
  },
  {
    "line": 382,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2429,
    "end_token": 2437,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 385,
    "text": "            label: pg.TextItem = pg.TextItem(",
    "annotation": "\ud83e\udde0 ML Signal: Formatting datetime for display.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6167,
      25,
      23241,
      13,
      8206,
      7449,
      796,
      23241,
      13,
      8206,
      7449,
      7
    ],
    "start_token": 2437,
    "end_token": 2460,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18980,
      889,
      4818,
      8079,
      329,
      3359,
      13
    ],
    "label": "ml_signal",
    "reason": "Formatting datetime for display."
  },
  {
    "line": 388,
    "text": "            label.setZValue(2)",
    "annotation": "\ud83e\udde0 ML Signal: Setting position of a label in a plot.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6167,
      13,
      2617,
      57,
      11395,
      7,
      17,
      8
    ],
    "start_token": 2460,
    "end_token": 2479,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      2292,
      286,
      257,
      6167,
      287,
      257,
      7110,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting position of a label in a plot."
  },
  {
    "line": 390,
    "text": "            plot.addItem(label, ignoreBounds=True)",
    "annotation": "\ud83e\udde0 ML Signal: Setting anchor point for label positioning.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7110,
      13,
      2860,
      7449,
      7,
      18242,
      11,
      8856,
      33,
      3733,
      28,
      17821,
      8
    ],
    "start_token": 2479,
    "end_token": 2503,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      18021,
      966,
      329,
      6167,
      22097,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting anchor point for label positioning."
  },
  {
    "line": 384,
    "text": "        for plot_name, plot in self._plots.items():",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a mapping of items to plots",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      7110,
      62,
      3672,
      11,
      7110,
      287,
      2116,
      13557,
      489,
      1747,
      13,
      23814,
      33529
    ],
    "start_token": 2503,
    "end_token": 2524,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      16855,
      286,
      3709,
      284,
      21528
    ],
    "label": "ml_signal",
    "reason": "Iterating over a mapping of items to plots"
  },
  {
    "line": 392,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over plots to update information",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2524,
    "end_token": 2524,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      21528,
      284,
      4296,
      1321
    ],
    "label": "ml_signal",
    "reason": "Iterating over plots to update information"
  },
  {
    "line": 395,
    "text": "        self._x_label.hide()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if plot_name is not in self._infos",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      87,
      62,
      18242,
      13,
      24717,
      3419
    ],
    "start_token": 2524,
    "end_token": 2539,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      7110,
      62,
      3672,
      318,
      407,
      287,
      2116,
      13557,
      10745,
      418
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if plot_name is not in self._infos"
  },
  {
    "line": 399,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if plot_name is not in self._views",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2539,
    "end_token": 2539,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      7110,
      62,
      3672,
      318,
      407,
      287,
      2116,
      13557,
      33571
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if plot_name is not in self._views"
  },
  {
    "line": 402,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check boundary condition to prevent index out of range",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2539,
    "end_token": 2547,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      18645,
      4006,
      284,
      2948,
      6376,
      503,
      286,
      2837
    ],
    "label": "best_practice",
    "reason": "Check boundary condition to prevent index out of range"
  },
  {
    "line": 405,
    "text": "            info: pg.TextItem = pg.TextItem(",
    "annotation": "\ud83e\udde0 ML Signal: Incrementing a counter or index is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7508,
      25,
      23241,
      13,
      8206,
      7449,
      796,
      23241,
      13,
      8206,
      7449,
      7
    ],
    "start_token": 2547,
    "end_token": 2570,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10791,
      434,
      278,
      257,
      3753,
      393,
      6376,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Incrementing a counter or index is a common pattern"
  },
  {
    "line": 407,
    "text": "                color=CURSOR_COLOR,",
    "annotation": "\ud83e\udde0 ML Signal: Method call after state change indicates dependency on updated state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3124,
      28,
      34,
      4261,
      50,
      1581,
      62,
      46786,
      11
    ],
    "start_token": 2570,
    "end_token": 2594,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      706,
      1181,
      1487,
      9217,
      20203,
      319,
      6153,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method call after state change indicates dependency on updated state"
  },
  {
    "line": 410,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Early return to handle edge case when cursor is at the start",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2594,
    "end_token": 2606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12556,
      1441,
      284,
      5412,
      5743,
      1339,
      618,
      23493,
      318,
      379,
      262,
      923
    ],
    "label": "best_practice",
    "reason": "Early return to handle edge case when cursor is at the start"
  },
  {
    "line": 413,
    "text": "            info.setFont(NORMAL_FONT)",
    "annotation": "\ud83e\udde0 ML Signal: Decrement operation on a variable, common in cursor or index manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7508,
      13,
      2617,
      23252,
      7,
      35510,
      42126,
      62,
      37,
      35830,
      8
    ],
    "start_token": 2606,
    "end_token": 2628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36400,
      434,
      4905,
      319,
      257,
      7885,
      11,
      2219,
      287,
      23493,
      393,
      6376,
      17512
    ],
    "label": "ml_signal",
    "reason": "Decrement operation on a variable, common in cursor or index manipulation"
  },
  {
    "line": 415,
    "text": "            self._infos[plot_name] = info",
    "annotation": "\ud83e\udde0 ML Signal: Method call after state change, indicating a pattern of updating state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      10745,
      418,
      58,
      29487,
      62,
      3672,
      60,
      796,
      7508
    ],
    "start_token": 2628,
    "end_token": 2650,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      706,
      1181,
      1487,
      11,
      12739,
      257,
      3912,
      286,
      19698,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method call after state change, indicating a pattern of updating state"
  },
  {
    "line": 418,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2650,
    "end_token": 2658,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 422,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of object attributes to store state.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2658,
    "end_token": 2658,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2134,
      12608,
      284,
      3650,
      1181,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of object attributes to store state."
  },
  {
    "line": 424,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method calls that update the state or UI.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2658,
    "end_token": 2666,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      326,
      4296,
      262,
      1181,
      393,
      12454,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls that update the state or UI."
  },
  {
    "line": 425,
    "text": "        Callback function when mouse is moved.",
    "annotation": "\ud83e\udde0 ML Signal: Method calls that update the state or UI.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4889,
      1891,
      2163,
      618,
      10211,
      318,
      3888,
      13
    ],
    "start_token": 2666,
    "end_token": 2681,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      326,
      4296,
      262,
      1181,
      393,
      12454,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls that update the state or UI."
  },
  {
    "line": 428,
    "text": "            return",
    "annotation": "\u2705 Best Practice: Initialize variables to default values to ensure a clean state.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 2681,
    "end_token": 2693,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      284,
      4277,
      3815,
      284,
      4155,
      257,
      3424,
      1181,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize variables to default values to ensure a clean state."
  },
  {
    "line": 432,
    "text": "",
    "annotation": "\u2705 Best Practice: Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2693,
    "end_token": 2693,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      3419,
      284,
      2251,
      257,
      4866,
      286,
      262,
      22155,
      3815,
      284,
      3368,
      19124,
      8563,
      611,
      262,
      22155,
      318,
      9518,
      1141,
      24415,
      13
    ],
    "label": "best_practice",
    "reason": "Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration."
  },
  {
    "line": 434,
    "text": "            rect = view.sceneBoundingRect()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13621,
      796,
      1570,
      13,
      29734,
      33,
      9969,
      45474,
      3419
    ],
    "start_token": 2693,
    "end_token": 2713,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      290,
      11816,
      12454,
      4847,
      9217,
      257,
      3912,
      286,
      13259,
      889,
      393,
      17304,
      257,
      5874,
      1181,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state."
  },
  {
    "line": 434,
    "text": "            rect = view.sceneBoundingRect()",
    "annotation": "\u2705 Best Practice: Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13621,
      796,
      1570,
      13,
      29734,
      33,
      9969,
      45474,
      3419
    ],
    "start_token": 2713,
    "end_token": 2733,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      3419,
      284,
      2251,
      257,
      4866,
      286,
      262,
      22155,
      3815,
      284,
      3368,
      19124,
      8563,
      611,
      262,
      22155,
      318,
      9518,
      1141,
      24415,
      13
    ],
    "label": "best_practice",
    "reason": "Use list() to create a copy of the dictionary values to avoid runtime errors if the dictionary is modified during iteration."
  },
  {
    "line": 434,
    "text": "            rect = view.sceneBoundingRect()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13621,
      796,
      1570,
      13,
      29734,
      33,
      9969,
      45474,
      3419
    ],
    "start_token": 2733,
    "end_token": 2753,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      290,
      11816,
      12454,
      4847,
      9217,
      257,
      3912,
      286,
      13259,
      889,
      393,
      17304,
      257,
      5874,
      1181,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over and hiding UI elements indicates a pattern of resetting or clearing a visual state."
  }
]
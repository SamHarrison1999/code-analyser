annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of threading for concurrent execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 4704, 278, 329, 24580, 9706]",0.5,21,best_practice,8,Use of threading for concurrent execution,,0,"from .common import HEARTBEAT_TOPIC, HEARTBEAT_TOLERANCE","[6738, 764, 11321, 1330, 11179, 7227, 12473, 1404, 62, 35222, 2149, 11, 11179, 7227, 12473, 1404, 62, 51, 3535, 1137, 19240]"
üß† ML Signal: Use of threading indicates concurrent execution patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4704, 278, 9217, 24580, 9706, 7572]",0.5,42,ml_signal,8,Use of threading indicates concurrent execution patterns,,21,"from .common import HEARTBEAT_TOPIC, HEARTBEAT_TOLERANCE","[6738, 764, 11321, 1330, 11179, 7227, 12473, 1404, 62, 35222, 2149, 11, 11179, 7227, 12473, 1404, 62, 51, 3535, 1137, 19240]"
‚úÖ Best Practice: Type hinting for function parameters,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007]",1.0,46,best_practice,12,Type hinting for function parameters,,42,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of ZeroMQ for messaging patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12169, 49215, 329, 19925, 7572]",0.5,46,ml_signal,15,Use of ZeroMQ for messaging patterns,,46,,[]
‚úÖ Best Practice: Use of threading for concurrent execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 4704, 278, 329, 24580, 9706]",0.5,60,best_practice,20,Use of threading for concurrent execution,,46,        self._value: Any = value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 8367, 25, 4377, 796, 1988]"
‚ö†Ô∏è SAST Risk (Low): Potential infinite loop without exit condition,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 1231, 8420, 4006]",0.5,60,sast_risk,28,Potential infinite loop without exit condition,Low,60,,[]
‚ö†Ô∏è SAST Risk (Low): Broad exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9765, 6631, 9041]",0.5,73,sast_risk,34,Broad exception handling,Low,60,        # zmq port related,"[220, 220, 220, 220, 220, 220, 220, 1303, 1976, 76, 80, 2493, 3519]"
‚úÖ Best Practice: Use of constants for configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 38491, 329, 8398]",0.5,89,best_practice,37,Use of constants for configuration,,73,        # Request socket (Request‚Äìreply pattern),"[220, 220, 220, 220, 220, 220, 220, 1303, 19390, 17802, 357, 18453, 1906, 47768, 3912, 8]"
‚úÖ Best Practice: Use of lru_cache to optimize repeated function calls,"[26486, 227, 6705, 19939, 25, 5765, 286, 300, 622, 62, 23870, 284, 27183, 5100, 2163, 3848]",1.0,121,best_practice,41,Use of lru_cache to optimize repeated function calls,,89,        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 44971, 62, 7266, 25, 1976, 76, 80, 13, 39105, 796, 2116, 13557, 22866, 13, 44971, 7, 89, 76, 80, 13, 50, 10526, 8]"
‚úÖ Best Practice: Type hinting for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099]",1.0,144,best_practice,44,Type hinting for function parameters and return type,,121,"        for socket in [self._socket_req, self._socket_sub]:","[220, 220, 220, 220, 220, 220, 220, 329, 17802, 287, 685, 944, 13557, 44971, 62, 42180, 11, 2116, 13557, 44971, 62, 7266, 5974]"
üß† ML Signal: Use of caching to optimize data retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 40918, 284, 27183, 1366, 45069]",0.5,175,ml_signal,45,Use of caching to optimize data retrieval,,144,"            socket.setsockopt(zmq.TCP_KEEPALIVE, 1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17802, 13, 28709, 735, 8738, 7, 89, 76, 80, 13, 4825, 47, 62, 42, 35238, 1847, 9306, 11, 352, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential cache poisoning if input is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12940, 22475, 611, 5128, 318, 407, 5336, 36951]",0.5,209,sast_risk,46,Potential cache poisoning if input is not sanitized,Low,175,"            socket.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17802, 13, 28709, 735, 8738, 7, 89, 76, 80, 13, 4825, 47, 62, 42, 35238, 1847, 9306, 62, 2389, 2538, 11, 3126, 8]"
Simulate data retrieval,"[8890, 5039, 1366, 45069]",0.5,209,unknown,47,Simulate data retrieval,,209,,[]
‚úÖ Best Practice: Custom exception class for specific error handling,"[26486, 227, 6705, 19939, 25, 8562, 6631, 1398, 329, 2176, 4049, 9041]",1.0,215,best_practice,11,Custom exception class for specific error handling,,209,class RemoteException(Exception):,"[4871, 21520, 16922, 7, 16922, 2599]"
‚úÖ Best Practice: Use of type hinting for constructor parameter,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 23772, 11507]",1.0,221,best_practice,11,Use of type hinting for constructor parameter,,215,class RemoteException(Exception):,"[4871, 21520, 16922, 7, 16922, 2599]"
‚úÖ Best Practice: Use of type hinting for instance variable,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 4554, 7885]",0.5,238,best_practice,16,Use of type hinting for instance variable,,221,"    def __init__(self, value: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1988, 25, 4377, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",1.0,255,best_practice,16,Include a docstring to describe the method's purpose,,238,"    def __init__(self, value: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1988, 25, 4377, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Docstring provides a brief description of the method,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446]",0.5,263,best_practice,17,Docstring provides a brief description of the method,,255,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Conversion of an object to a string representation,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 281, 2134, 284, 257, 4731, 10552]",1.0,276,ml_signal,22,Conversion of an object to a string representation,,263,    def __str__(self) -> str:,"[220, 220, 220, 825, 11593, 2536, 834, 7, 944, 8, 4613, 965, 25]"
‚úÖ Best Practice: Consider adding a class docstring to describe the purpose and usage of the RpcClient class.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 1398, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 371, 14751, 11792, 1398, 13]",1.0,284,best_practice,23,Consider adding a class docstring to describe the purpose and usage of the RpcClient class.,,276,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Using lru_cache to cache results of expensive function calls,"[26486, 227, 6705, 19939, 25, 8554, 300, 622, 62, 23870, 284, 12940, 2482, 286, 5789, 2163, 3848]",0.5,284,best_practice,36,Using lru_cache to cache results of expensive function calls,,284,,[]
‚úÖ Best Practice: Include a docstring to describe the purpose and behavior of the method,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 2446]",1.0,300,best_practice,37,Include a docstring to describe the purpose and behavior of the method,,284,        # Request socket (Request‚Äìreply pattern),"[220, 220, 220, 220, 220, 220, 220, 1303, 19390, 17802, 357, 18453, 1906, 47768, 3912, 8]"
"üß† ML Signal: Use of __getattr__ indicates dynamic attribute access, which can be a pattern for certain design choices","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11593, 1136, 35226, 834, 9217, 8925, 11688, 1895, 11, 543, 460, 307, 257, 3912, 329, 1728, 1486, 7747]",0.5,332,ml_signal,41,"Use of __getattr__ indicates dynamic attribute access, which can be a pattern for certain design choices",,300,        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 44971, 62, 7266, 25, 1976, 76, 80, 13, 39105, 796, 2116, 13557, 22866, 13, 44971, 7, 89, 76, 80, 13, 50, 10526, 8]"
‚úÖ Best Practice: Use of default timeout value for robustness,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 26827, 1988, 329, 12373, 1108]",1.0,364,best_practice,41,Use of default timeout value for robustness,,332,        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 44971, 62, 7266, 25, 1976, 76, 80, 13, 39105, 796, 2116, 13557, 22866, 13, 44971, 7, 89, 76, 80, 13, 50, 10526, 8]"
"üß† ML Signal: Collecting function name, arguments, and keyword arguments for RPC","[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2163, 1438, 11, 7159, 11, 290, 21179, 7159, 329, 39400]",1.0,379,ml_signal,43,"Collecting function name, arguments, and keyword arguments for RPC",,364,        # Set socket option to keepalive,"[220, 220, 220, 220, 220, 220, 220, 1303, 5345, 17802, 3038, 284, 1394, 282, 425]"
‚ö†Ô∏è SAST Risk (Medium): Potential for blocking if _socket_req is not responsive,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 12013, 611, 4808, 44971, 62, 42180, 318, 407, 21802]",1.0,413,sast_risk,46,Potential for blocking if _socket_req is not responsive,Medium,379,"            socket.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17802, 13, 28709, 735, 8738, 7, 89, 76, 80, 13, 4825, 47, 62, 42, 35238, 1847, 9306, 62, 2389, 2538, 11, 3126, 8]"
‚ö†Ô∏è SAST Risk (Medium): Polling with a timeout can lead to denial of service if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12868, 278, 351, 257, 26827, 460, 1085, 284, 14425, 286, 2139, 611, 407, 12118, 6105]",1.0,432,sast_risk,48,Polling with a timeout can lead to denial of service if not handled properly,Medium,413,"        # Worker thread relate, used to process data pushed from server","[220, 220, 220, 220, 220, 220, 220, 1303, 35412, 4704, 15124, 11, 973, 284, 1429, 1366, 7121, 422, 4382]"
üß† ML Signal: Logging timeout events for monitoring and analysis,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 26827, 2995, 329, 9904, 290, 3781]",1.0,453,ml_signal,51,Logging timeout events for monitoring and analysis,,432,        self._lock: threading.Lock = threading.Lock(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5354, 25, 4704, 278, 13, 25392, 796, 4704, 278, 13, 25392, 3419]"
‚ö†Ô∏è SAST Risk (Low): Raising exceptions with potentially sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 13269, 351, 6196, 8564, 1321]",0.5,472,sast_risk,53,Raising exceptions with potentially sensitive information,Low,453,        self._last_received_ping: float = time(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12957, 62, 47844, 62, 13886, 25, 12178, 796, 640, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Receiving untrusted data from a socket,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 19520, 1412, 1418, 81, 8459, 1366, 422, 257, 17802]",0.5,487,sast_risk,55,Receiving untrusted data from a socket,Medium,472,    @lru_cache(100)  # noqa,"[220, 220, 220, 2488, 75, 622, 62, 23870, 7, 3064, 8, 220, 1303, 645, 20402]"
‚ö†Ô∏è SAST Risk (Low): Raising exceptions with potentially sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 13269, 351, 6196, 8564, 1321]",0.5,499,sast_risk,60,Raising exceptions with potentially sensitive information,Low,487,        # Perform remote call task,"[220, 220, 220, 220, 220, 220, 220, 1303, 35006, 6569, 869, 4876]"
‚úÖ Best Practice: Check if the client is already active to prevent redundant operations,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 5456, 318, 1541, 4075, 284, 2948, 30806, 4560]",1.0,525,best_practice,63,Check if the client is already active to prevent redundant operations,,499,"            timeout: int = kwargs.pop(""timeout"", 30000)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26827, 25, 493, 796, 479, 86, 22046, 13, 12924, 7203, 48678, 1600, 513, 2388, 8]"
‚ö†Ô∏è SAST Risk (Low): Ensure that req_address is validated to prevent injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 43089, 62, 21975, 318, 31031, 284, 2948, 16954, 3434]",0.5,549,sast_risk,66,Ensure that req_address is validated to prevent injection attacks,Low,525,"            req: list = [name, args, kwargs]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 25, 1351, 796, 685, 3672, 11, 26498, 11, 479, 86, 22046, 60]"
‚ö†Ô∏è SAST Risk (Low): Ensure that sub_address is validated to prevent injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 850, 62, 21975, 318, 31031, 284, 2948, 16954, 3434]",0.5,567,sast_risk,68,Ensure that sub_address is validated to prevent injection attacks,Low,549,            # Send request and wait for response,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 16290, 2581, 290, 4043, 329, 2882]"
‚úÖ Best Practice: Use threading to avoid blocking the main thread,"[26486, 227, 6705, 19939, 25, 5765, 4704, 278, 284, 3368, 12013, 262, 1388, 4704]",1.0,567,best_practice,71,Use threading to avoid blocking the main thread,,567,,[]
üß† ML Signal: Starting a new thread for asynchronous operations,"[8582, 100, 254, 10373, 26484, 25, 17962, 257, 649, 4704, 329, 39354, 4560]",0.5,589,ml_signal,72,Starting a new thread for asynchronous operations,,567,                # Timeout reached without any data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3862, 448, 4251, 1231, 597, 1366]"
‚úÖ Best Practice: Initialize last received ping time to track connection health,"[26486, 227, 6705, 19939, 25, 20768, 1096, 938, 2722, 29400, 640, 284, 2610, 4637, 1535]",0.5,625,best_practice,75,Initialize last received ping time to track connection health,,589,"                    msg: str = f""Timeout of {timeout}ms reached for {req}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 31456, 25, 965, 796, 277, 1, 48031, 286, 1391, 48678, 92, 907, 4251, 329, 1391, 42180, 36786]"
üß† ML Signal: Checks for a condition before proceeding with the method logic,"[8582, 100, 254, 10373, 26484, 25, 47719, 329, 257, 4006, 878, 18788, 351, 262, 2446, 9156]",0.5,661,ml_signal,75,Checks for a condition before proceeding with the method logic,,625,"                    msg: str = f""Timeout of {timeout}ms reached for {req}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 31456, 25, 965, 796, 277, 1, 48031, 286, 1391, 48678, 92, 907, 4251, 329, 1391, 42180, 36786]"
‚úÖ Best Practice: Explicitly setting the state to inactive,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 262, 1181, 284, 28621]",0.5,690,best_practice,78,Explicitly setting the state to inactive,,661,                rep = self._socket_req.recv_pyobj(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1128, 796, 2116, 13557, 44971, 62, 42180, 13, 8344, 85, 62, 9078, 26801, 3419]"
‚úÖ Best Practice: Type hinting the return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,690,best_practice,79,Type hinting the return type improves code readability and maintainability.,,690,,[]
üß† ML Signal: Checking if a thread is alive before joining is a common pattern in multithreading.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 4704, 318, 6776, 878, 9679, 318, 257, 2219, 3912, 287, 1963, 342, 25782, 13]",0.5,706,ml_signal,81,Checking if a thread is alive before joining is a common pattern in multithreading.,,690,            if rep[0]:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1128, 58, 15, 5974]"
‚úÖ Best Practice: Resetting the thread attribute to None after joining helps prevent reuse of the same thread object.,"[26486, 227, 6705, 19939, 25, 30027, 889, 262, 4704, 11688, 284, 6045, 706, 9679, 5419, 2948, 32349, 286, 262, 976, 4704, 2134, 13]",1.0,719,best_practice,83,Resetting the thread attribute to None after joining helps prevent reuse of the same thread object.,,706,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of a while loop with a condition based on an instance variable,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 981, 9052, 351, 257, 4006, 1912, 319, 281, 4554, 7885]",0.5,719,ml_signal,87,Usage of a while loop with a condition based on an instance variable,,719,,[]
‚ö†Ô∏è SAST Risk (Low): Potential infinite loop if self._active is never set to False,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 611, 2116, 13557, 5275, 318, 1239, 900, 284, 10352]",1.0,728,sast_risk,89,Potential infinite loop if self._active is never set to False,Low,719,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Handling of disconnection events,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 22837, 295, 2995]",1.0,740,ml_signal,91,Handling of disconnection events,,728,        sub_address: str,"[220, 220, 220, 220, 220, 220, 220, 850, 62, 21975, 25, 965]"
"‚ö†Ô∏è SAST Risk (Low): Assumes recv_pyobj will always return a tuple of (topic, data)","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 664, 85, 62, 9078, 26801, 481, 1464, 1441, 257, 46545, 286, 357, 26652, 11, 1366, 8]",1.0,748,sast_risk,93,"Assumes recv_pyobj will always return a tuple of (topic, data)",Low,740,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Tracking the last received heartbeat,"[8582, 100, 254, 10373, 26484, 25, 37169, 262, 938, 2722, 36051]",0.5,760,ml_signal,97,Tracking the last received heartbeat,,748,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
üß† ML Signal: Callback pattern usage,"[8582, 100, 254, 10373, 26484, 25, 4889, 1891, 3912, 8748]",0.5,773,ml_signal,99,Callback pattern usage,,760,        # Connect zmq port,"[220, 220, 220, 220, 220, 220, 220, 1303, 8113, 1976, 76, 80, 2493]"
‚úÖ Best Practice: Ensure resources are closed after use,"[26486, 227, 6705, 19939, 25, 48987, 4133, 389, 4838, 706, 779]",1.0,773,best_practice,102,Ensure resources are closed after use,,773,,[]
‚úÖ Best Practice: Ensure resources are closed after use,"[26486, 227, 6705, 19939, 25, 48987, 4133, 389, 4838, 706, 779]",1.0,785,best_practice,104,Ensure resources are closed after use,,773,        self._active = True,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5275, 796, 6407]"
‚úÖ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",0.5,798,best_practice,99,Use of type hints for function parameters and return type,,785,        # Connect zmq port,"[220, 220, 220, 220, 220, 220, 220, 1303, 8113, 1976, 76, 80, 2493]"
‚úÖ Best Practice: Use of NotImplementedError to indicate an abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446]",0.5,810,best_practice,104,Use of NotImplementedError to indicate an abstract method,,798,        self._active = True,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5275, 796, 6407]"
‚úÖ Best Practice: Consider adding error handling for the socket operation,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 262, 17802, 4905]",1.0,832,best_practice,107,Consider adding error handling for the socket operation,,810,        self._thread = threading.Thread(target=self.run),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 16663, 796, 4704, 278, 13, 16818, 7, 16793, 28, 944, 13, 5143, 8]"
üß† ML Signal: Use of f-string for message formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 3275, 33313]",0.5,843,ml_signal,112,Use of f-string for message formatting,,832,    def stop(self) -> None:,"[220, 220, 220, 825, 2245, 7, 944, 8, 4613, 6045, 25]"
"‚ö†Ô∏è SAST Risk (Low): Direct use of print for logging, consider using a logging framework","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 779, 286, 3601, 329, 18931, 11, 2074, 1262, 257, 18931, 9355]",0.5,851,sast_risk,113,"Direct use of print for logging, consider using a logging framework",Low,843,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"

[
  {
    "line": 8,
    "text": "from .common import HEARTBEAT_TOPIC, HEARTBEAT_TOLERANCE",
    "annotation": "\u2705 Best Practice: Use of threading for concurrent execution",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      11321,
      1330,
      11179,
      7227,
      12473,
      1404,
      62,
      35222,
      2149,
      11,
      11179,
      7227,
      12473,
      1404,
      62,
      51,
      3535,
      1137,
      19240
    ],
    "start_token": 0,
    "end_token": 21,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4704,
      278,
      329,
      24580,
      9706
    ],
    "label": "best_practice",
    "reason": "Use of threading for concurrent execution"
  },
  {
    "line": 8,
    "text": "from .common import HEARTBEAT_TOPIC, HEARTBEAT_TOLERANCE",
    "annotation": "\ud83e\udde0 ML Signal: Use of threading indicates concurrent execution patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      11321,
      1330,
      11179,
      7227,
      12473,
      1404,
      62,
      35222,
      2149,
      11,
      11179,
      7227,
      12473,
      1404,
      62,
      51,
      3535,
      1137,
      19240
    ],
    "start_token": 21,
    "end_token": 42,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4704,
      278,
      9217,
      24580,
      9706,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of threading indicates concurrent execution patterns"
  },
  {
    "line": 12,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 42,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of ZeroMQ for messaging patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 46,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12169,
      49215,
      329,
      19925,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of ZeroMQ for messaging patterns"
  },
  {
    "line": 20,
    "text": "        self._value: Any = value",
    "annotation": "\u2705 Best Practice: Use of threading for concurrent execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      8367,
      25,
      4377,
      796,
      1988
    ],
    "start_token": 46,
    "end_token": 60,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4704,
      278,
      329,
      24580,
      9706
    ],
    "label": "best_practice",
    "reason": "Use of threading for concurrent execution"
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite loop without exit condition",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 60,
    "end_token": 60,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      9052,
      1231,
      8420,
      4006
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite loop without exit condition"
  },
  {
    "line": 34,
    "text": "        # zmq port related",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Broad exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1976,
      76,
      80,
      2493,
      3519
    ],
    "start_token": 60,
    "end_token": 73,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9765,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Broad exception handling"
  },
  {
    "line": 37,
    "text": "        # Request socket (Request\u2013reply pattern)",
    "annotation": "\u2705 Best Practice: Use of constants for configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      19390,
      17802,
      357,
      18453,
      1906,
      47768,
      3912,
      8
    ],
    "start_token": 73,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      38491,
      329,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of constants for configuration"
  },
  {
    "line": 41,
    "text": "        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)",
    "annotation": "\u2705 Best Practice: Use of lru_cache to optimize repeated function calls",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      44971,
      62,
      7266,
      25,
      1976,
      76,
      80,
      13,
      39105,
      796,
      2116,
      13557,
      22866,
      13,
      44971,
      7,
      89,
      76,
      80,
      13,
      50,
      10526,
      8
    ],
    "start_token": 89,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      300,
      622,
      62,
      23870,
      284,
      27183,
      5100,
      2163,
      3848
    ],
    "label": "best_practice",
    "reason": "Use of lru_cache to optimize repeated function calls"
  },
  {
    "line": 44,
    "text": "        for socket in [self._socket_req, self._socket_sub]:",
    "annotation": "\u2705 Best Practice: Type hinting for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      17802,
      287,
      685,
      944,
      13557,
      44971,
      62,
      42180,
      11,
      2116,
      13557,
      44971,
      62,
      7266,
      5974
    ],
    "start_token": 121,
    "end_token": 144,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type hinting for function parameters and return type"
  },
  {
    "line": 45,
    "text": "            socket.setsockopt(zmq.TCP_KEEPALIVE, 1)",
    "annotation": "\ud83e\udde0 ML Signal: Use of caching to optimize data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17802,
      13,
      28709,
      735,
      8738,
      7,
      89,
      76,
      80,
      13,
      4825,
      47,
      62,
      42,
      35238,
      1847,
      9306,
      11,
      352,
      8
    ],
    "start_token": 144,
    "end_token": 175,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      40918,
      284,
      27183,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of caching to optimize data retrieval"
  },
  {
    "line": 46,
    "text": "            socket.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential cache poisoning if input is not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17802,
      13,
      28709,
      735,
      8738,
      7,
      89,
      76,
      80,
      13,
      4825,
      47,
      62,
      42,
      35238,
      1847,
      9306,
      62,
      2389,
      2538,
      11,
      3126,
      8
    ],
    "start_token": 175,
    "end_token": 209,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12940,
      22475,
      611,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential cache poisoning if input is not sanitized"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "Simulate data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 209,
    "end_token": 209,
    "annotation_tokens": [
      8890,
      5039,
      1366,
      45069
    ],
    "label": "unknown",
    "reason": "Simulate data retrieval"
  },
  {
    "line": 11,
    "text": "class RemoteException(Exception):",
    "annotation": "\u2705 Best Practice: Custom exception class for specific error handling",
    "confidence": 1.0,
    "tokens": [
      4871,
      21520,
      16922,
      7,
      16922,
      2599
    ],
    "start_token": 209,
    "end_token": 215,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8562,
      6631,
      1398,
      329,
      2176,
      4049,
      9041
    ],
    "label": "best_practice",
    "reason": "Custom exception class for specific error handling"
  },
  {
    "line": 11,
    "text": "class RemoteException(Exception):",
    "annotation": "\u2705 Best Practice: Use of type hinting for constructor parameter",
    "confidence": 1.0,
    "tokens": [
      4871,
      21520,
      16922,
      7,
      16922,
      2599
    ],
    "start_token": 215,
    "end_token": 221,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      23772,
      11507
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for constructor parameter"
  },
  {
    "line": 16,
    "text": "    def __init__(self, value: Any) -> None:",
    "annotation": "\u2705 Best Practice: Use of type hinting for instance variable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1988,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 221,
    "end_token": 238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      4554,
      7885
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for instance variable"
  },
  {
    "line": 16,
    "text": "    def __init__(self, value: Any) -> None:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1988,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 238,
    "end_token": 255,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 17,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 255,
    "end_token": 263,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method"
  },
  {
    "line": 22,
    "text": "    def __str__(self) -> str:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of an object to a string representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2536,
      834,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 263,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      281,
      2134,
      284,
      257,
      4731,
      10552
    ],
    "label": "ml_signal",
    "reason": "Conversion of an object to a string representation"
  },
  {
    "line": 23,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Consider adding a class docstring to describe the purpose and usage of the RpcClient class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 276,
    "end_token": 284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      1398,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      371,
      14751,
      11792,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a class docstring to describe the purpose and usage of the RpcClient class."
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\u2705 Best Practice: Using lru_cache to cache results of expensive function calls",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 284,
    "end_token": 284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      300,
      622,
      62,
      23870,
      284,
      12940,
      2482,
      286,
      5789,
      2163,
      3848
    ],
    "label": "best_practice",
    "reason": "Using lru_cache to cache results of expensive function calls"
  },
  {
    "line": 37,
    "text": "        # Request socket (Request\u2013reply pattern)",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and behavior of the method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      19390,
      17802,
      357,
      18453,
      1906,
      47768,
      3912,
      8
    ],
    "start_token": 284,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and behavior of the method"
  },
  {
    "line": 41,
    "text": "        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)",
    "annotation": "\ud83e\udde0 ML Signal: Use of __getattr__ indicates dynamic attribute access, which can be a pattern for certain design choices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      44971,
      62,
      7266,
      25,
      1976,
      76,
      80,
      13,
      39105,
      796,
      2116,
      13557,
      22866,
      13,
      44971,
      7,
      89,
      76,
      80,
      13,
      50,
      10526,
      8
    ],
    "start_token": 300,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      1136,
      35226,
      834,
      9217,
      8925,
      11688,
      1895,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      1728,
      1486,
      7747
    ],
    "label": "ml_signal",
    "reason": "Use of __getattr__ indicates dynamic attribute access, which can be a pattern for certain design choices"
  },
  {
    "line": 41,
    "text": "        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)",
    "annotation": "\u2705 Best Practice: Use of default timeout value for robustness",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      44971,
      62,
      7266,
      25,
      1976,
      76,
      80,
      13,
      39105,
      796,
      2116,
      13557,
      22866,
      13,
      44971,
      7,
      89,
      76,
      80,
      13,
      50,
      10526,
      8
    ],
    "start_token": 332,
    "end_token": 364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      26827,
      1988,
      329,
      12373,
      1108
    ],
    "label": "best_practice",
    "reason": "Use of default timeout value for robustness"
  },
  {
    "line": 43,
    "text": "        # Set socket option to keepalive",
    "annotation": "\ud83e\udde0 ML Signal: Collecting function name, arguments, and keyword arguments for RPC",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5345,
      17802,
      3038,
      284,
      1394,
      282,
      425
    ],
    "start_token": 364,
    "end_token": 379,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2163,
      1438,
      11,
      7159,
      11,
      290,
      21179,
      7159,
      329,
      39400
    ],
    "label": "ml_signal",
    "reason": "Collecting function name, arguments, and keyword arguments for RPC"
  },
  {
    "line": 46,
    "text": "            socket.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for blocking if _socket_req is not responsive",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17802,
      13,
      28709,
      735,
      8738,
      7,
      89,
      76,
      80,
      13,
      4825,
      47,
      62,
      42,
      35238,
      1847,
      9306,
      62,
      2389,
      2538,
      11,
      3126,
      8
    ],
    "start_token": 379,
    "end_token": 413,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      12013,
      611,
      4808,
      44971,
      62,
      42180,
      318,
      407,
      21802
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for blocking if _socket_req is not responsive"
  },
  {
    "line": 48,
    "text": "        # Worker thread relate, used to process data pushed from server",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Polling with a timeout can lead to denial of service if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      35412,
      4704,
      15124,
      11,
      973,
      284,
      1429,
      1366,
      7121,
      422,
      4382
    ],
    "start_token": 413,
    "end_token": 432,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      12868,
      278,
      351,
      257,
      26827,
      460,
      1085,
      284,
      14425,
      286,
      2139,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Polling with a timeout can lead to denial of service if not handled properly"
  },
  {
    "line": 51,
    "text": "        self._lock: threading.Lock = threading.Lock()",
    "annotation": "\ud83e\udde0 ML Signal: Logging timeout events for monitoring and analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5354,
      25,
      4704,
      278,
      13,
      25392,
      796,
      4704,
      278,
      13,
      25392,
      3419
    ],
    "start_token": 432,
    "end_token": 453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      26827,
      2995,
      329,
      9904,
      290,
      3781
    ],
    "label": "ml_signal",
    "reason": "Logging timeout events for monitoring and analysis"
  },
  {
    "line": 53,
    "text": "        self._last_received_ping: float = time()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising exceptions with potentially sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      12957,
      62,
      47844,
      62,
      13886,
      25,
      12178,
      796,
      640,
      3419
    ],
    "start_token": 453,
    "end_token": 472,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      13269,
      351,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising exceptions with potentially sensitive information"
  },
  {
    "line": 55,
    "text": "    @lru_cache(100)  # noqa",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Receiving untrusted data from a socket",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      75,
      622,
      62,
      23870,
      7,
      3064,
      8,
      220,
      1303,
      645,
      20402
    ],
    "start_token": 472,
    "end_token": 487,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      19520,
      1412,
      1418,
      81,
      8459,
      1366,
      422,
      257,
      17802
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Receiving untrusted data from a socket"
  },
  {
    "line": 60,
    "text": "        # Perform remote call task",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising exceptions with potentially sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      35006,
      6569,
      869,
      4876
    ],
    "start_token": 487,
    "end_token": 499,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      13269,
      351,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising exceptions with potentially sensitive information"
  },
  {
    "line": 63,
    "text": "            timeout: int = kwargs.pop(\"timeout\", 30000)",
    "annotation": "\u2705 Best Practice: Check if the client is already active to prevent redundant operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26827,
      25,
      493,
      796,
      479,
      86,
      22046,
      13,
      12924,
      7203,
      48678,
      1600,
      513,
      2388,
      8
    ],
    "start_token": 499,
    "end_token": 525,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      5456,
      318,
      1541,
      4075,
      284,
      2948,
      30806,
      4560
    ],
    "label": "best_practice",
    "reason": "Check if the client is already active to prevent redundant operations"
  },
  {
    "line": 66,
    "text": "            req: list = [name, args, kwargs]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that req_address is validated to prevent injection attacks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      43089,
      25,
      1351,
      796,
      685,
      3672,
      11,
      26498,
      11,
      479,
      86,
      22046,
      60
    ],
    "start_token": 525,
    "end_token": 549,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      43089,
      62,
      21975,
      318,
      31031,
      284,
      2948,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that req_address is validated to prevent injection attacks"
  },
  {
    "line": 68,
    "text": "            # Send request and wait for response",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that sub_address is validated to prevent injection attacks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      16290,
      2581,
      290,
      4043,
      329,
      2882
    ],
    "start_token": 549,
    "end_token": 567,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      850,
      62,
      21975,
      318,
      31031,
      284,
      2948,
      16954,
      3434
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that sub_address is validated to prevent injection attacks"
  },
  {
    "line": 71,
    "text": "",
    "annotation": "\u2705 Best Practice: Use threading to avoid blocking the main thread",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 567,
    "end_token": 567,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4704,
      278,
      284,
      3368,
      12013,
      262,
      1388,
      4704
    ],
    "label": "best_practice",
    "reason": "Use threading to avoid blocking the main thread"
  },
  {
    "line": 72,
    "text": "                # Timeout reached without any data",
    "annotation": "\ud83e\udde0 ML Signal: Starting a new thread for asynchronous operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3862,
      448,
      4251,
      1231,
      597,
      1366
    ],
    "start_token": 567,
    "end_token": 589,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17962,
      257,
      649,
      4704,
      329,
      39354,
      4560
    ],
    "label": "ml_signal",
    "reason": "Starting a new thread for asynchronous operations"
  },
  {
    "line": 75,
    "text": "                    msg: str = f\"Timeout of {timeout}ms reached for {req}\"",
    "annotation": "\u2705 Best Practice: Initialize last received ping time to track connection health",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31456,
      25,
      965,
      796,
      277,
      1,
      48031,
      286,
      1391,
      48678,
      92,
      907,
      4251,
      329,
      1391,
      42180,
      36786
    ],
    "start_token": 589,
    "end_token": 625,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      938,
      2722,
      29400,
      640,
      284,
      2610,
      4637,
      1535
    ],
    "label": "best_practice",
    "reason": "Initialize last received ping time to track connection health"
  },
  {
    "line": 75,
    "text": "                    msg: str = f\"Timeout of {timeout}ms reached for {req}\"",
    "annotation": "\ud83e\udde0 ML Signal: Checks for a condition before proceeding with the method logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      31456,
      25,
      965,
      796,
      277,
      1,
      48031,
      286,
      1391,
      48678,
      92,
      907,
      4251,
      329,
      1391,
      42180,
      36786
    ],
    "start_token": 625,
    "end_token": 661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      257,
      4006,
      878,
      18788,
      351,
      262,
      2446,
      9156
    ],
    "label": "ml_signal",
    "reason": "Checks for a condition before proceeding with the method logic"
  },
  {
    "line": 78,
    "text": "                rep = self._socket_req.recv_pyobj()",
    "annotation": "\u2705 Best Practice: Explicitly setting the state to inactive",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1128,
      796,
      2116,
      13557,
      44971,
      62,
      42180,
      13,
      8344,
      85,
      62,
      9078,
      26801,
      3419
    ],
    "start_token": 661,
    "end_token": 690,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      262,
      1181,
      284,
      28621
    ],
    "label": "best_practice",
    "reason": "Explicitly setting the state to inactive"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting the return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 690,
    "end_token": 690,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting the return type improves code readability and maintainability."
  },
  {
    "line": 81,
    "text": "            if rep[0]:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a thread is alive before joining is a common pattern in multithreading.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1128,
      58,
      15,
      5974
    ],
    "start_token": 690,
    "end_token": 706,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      4704,
      318,
      6776,
      878,
      9679,
      318,
      257,
      2219,
      3912,
      287,
      1963,
      342,
      25782,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking if a thread is alive before joining is a common pattern in multithreading."
  },
  {
    "line": 83,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Resetting the thread attribute to None after joining helps prevent reuse of the same thread object.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 706,
    "end_token": 719,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      262,
      4704,
      11688,
      284,
      6045,
      706,
      9679,
      5419,
      2948,
      32349,
      286,
      262,
      976,
      4704,
      2134,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting the thread attribute to None after joining helps prevent reuse of the same thread object."
  },
  {
    "line": 87,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a while loop with a condition based on an instance variable",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 719,
    "end_token": 719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      981,
      9052,
      351,
      257,
      4006,
      1912,
      319,
      281,
      4554,
      7885
    ],
    "label": "ml_signal",
    "reason": "Usage of a while loop with a condition based on an instance variable"
  },
  {
    "line": 89,
    "text": "        self,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite loop if self._active is never set to False",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 719,
    "end_token": 728,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      9052,
      611,
      2116,
      13557,
      5275,
      318,
      1239,
      900,
      284,
      10352
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite loop if self._active is never set to False"
  },
  {
    "line": 91,
    "text": "        sub_address: str",
    "annotation": "\ud83e\udde0 ML Signal: Handling of disconnection events",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      21975,
      25,
      965
    ],
    "start_token": 728,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      286,
      22837,
      295,
      2995
    ],
    "label": "ml_signal",
    "reason": "Handling of disconnection events"
  },
  {
    "line": 93,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes recv_pyobj will always return a tuple of (topic, data)",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 740,
    "end_token": 748,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      664,
      85,
      62,
      9078,
      26801,
      481,
      1464,
      1441,
      257,
      46545,
      286,
      357,
      26652,
      11,
      1366,
      8
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes recv_pyobj will always return a tuple of (topic, data)"
  },
  {
    "line": 97,
    "text": "            return",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the last received heartbeat",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 748,
    "end_token": 760,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      938,
      2722,
      36051
    ],
    "label": "ml_signal",
    "reason": "Tracking the last received heartbeat"
  },
  {
    "line": 99,
    "text": "        # Connect zmq port",
    "annotation": "\ud83e\udde0 ML Signal: Callback pattern usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8113,
      1976,
      76,
      80,
      2493
    ],
    "start_token": 760,
    "end_token": 773,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4889,
      1891,
      3912,
      8748
    ],
    "label": "ml_signal",
    "reason": "Callback pattern usage"
  },
  {
    "line": 102,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensure resources are closed after use",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 773,
    "end_token": 773,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      4133,
      389,
      4838,
      706,
      779
    ],
    "label": "best_practice",
    "reason": "Ensure resources are closed after use"
  },
  {
    "line": 104,
    "text": "        self._active = True",
    "annotation": "\u2705 Best Practice: Ensure resources are closed after use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5275,
      796,
      6407
    ],
    "start_token": 773,
    "end_token": 785,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      4133,
      389,
      4838,
      706,
      779
    ],
    "label": "best_practice",
    "reason": "Ensure resources are closed after use"
  },
  {
    "line": 99,
    "text": "        # Connect zmq port",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8113,
      1976,
      76,
      80,
      2493
    ],
    "start_token": 785,
    "end_token": 798,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 104,
    "text": "        self._active = True",
    "annotation": "\u2705 Best Practice: Use of NotImplementedError to indicate an abstract method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5275,
      796,
      6407
    ],
    "start_token": 798,
    "end_token": 810,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      281,
      12531,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of NotImplementedError to indicate an abstract method"
  },
  {
    "line": 107,
    "text": "        self._thread = threading.Thread(target=self.run)",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the socket operation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16663,
      796,
      4704,
      278,
      13,
      16818,
      7,
      16793,
      28,
      944,
      13,
      5143,
      8
    ],
    "start_token": 810,
    "end_token": 832,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      17802,
      4905
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the socket operation"
  },
  {
    "line": 112,
    "text": "    def stop(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for message formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2245,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 832,
    "end_token": 843,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      3275,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for message formatting"
  },
  {
    "line": 113,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct use of print for logging, consider using a logging framework",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 843,
    "end_token": 851,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      779,
      286,
      3601,
      329,
      18931,
      11,
      2074,
      1262,
      257,
      18931,
      9355
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct use of print for logging, consider using a logging framework"
  }
]
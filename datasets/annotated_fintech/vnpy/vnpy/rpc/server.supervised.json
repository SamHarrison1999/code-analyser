[
  {
    "line": 4,
    "text": "from collections.abc import Callable",
    "annotation": "\u2705 Best Practice: Use of collections.abc.Callable for type hinting improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      17268,
      13,
      39305,
      1330,
      4889,
      540
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      17268,
      13,
      39305,
      13,
      14134,
      540,
      329,
      2099,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of collections.abc.Callable for type hinting improves code readability and maintainability."
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific constants from a module indicates usage patterns and dependencies.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      38491,
      422,
      257,
      8265,
      9217,
      8748,
      7572,
      290,
      20086,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing specific constants from a module indicates usage patterns and dependencies."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a class docstring to describe the purpose and usage of the RpcServer class.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      1398,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      371,
      14751,
      10697,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a class docstring to describe the purpose and usage of the RpcServer class."
  },
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 15,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 7,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 17,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 15,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 19,
    "text": "        self._functions: dict[str, Callable] = {}",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      12543,
      2733,
      25,
      8633,
      58,
      2536,
      11,
      4889,
      540,
      60,
      796,
      23884
    ],
    "start_token": 23,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 21,
    "text": "        # Zmq port related",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1168,
      76,
      80,
      2493,
      3519
    ],
    "start_token": 44,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 57,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 24,
    "text": "        # Reply socket (Request\u2013reply pattern)",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      14883,
      17802,
      357,
      18453,
      1906,
      47768,
      3912,
      8
    ],
    "start_token": 57,
    "end_token": 73,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 27,
    "text": "        # Publish socket (Publish\u2013subscribe pattern)",
    "annotation": "\u2705 Best Practice: Use of type annotations for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8525,
      1836,
      17802,
      357,
      14876,
      1836,
      1906,
      7266,
      12522,
      3912,
      8
    ],
    "start_token": 73,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for better code readability and maintainability"
  },
  {
    "line": 21,
    "text": "        # Zmq port related",
    "annotation": "\u2705 Best Practice: Method should have a descriptive docstring explaining its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1168,
      76,
      80,
      2493,
      3519
    ],
    "start_token": 92,
    "end_token": 105,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      35644,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a descriptive docstring explaining its purpose"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a boolean value indicating state",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 105,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      25131,
      1988,
      12739,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method returning a boolean value indicating state"
  },
  {
    "line": 32,
    "text": "        self._thread: threading.Thread | None = None        # RpcServer thread",
    "annotation": "\u2705 Best Practice: Check if the server is already active to prevent redundant operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16663,
      25,
      4704,
      278,
      13,
      16818,
      930,
      6045,
      796,
      6045,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      371,
      14751,
      10697,
      4704
    ],
    "start_token": 105,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      4382,
      318,
      1541,
      4075,
      284,
      2948,
      30806,
      4560
    ],
    "label": "best_practice",
    "reason": "Check if the server is already active to prevent redundant operations"
  },
  {
    "line": 35,
    "text": "        # Heartbeat related",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Binding to addresses without validation can lead to security vulnerabilities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8894,
      12945,
      3519
    ],
    "start_token": 136,
    "end_token": 147,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      38904,
      284,
      9405,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      23805
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Binding to addresses without validation can lead to security vulnerabilities"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Binding to addresses without validation can lead to security vulnerabilities",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 147,
    "end_token": 147,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      38904,
      284,
      9405,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      23805
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Binding to addresses without validation can lead to security vulnerabilities"
  },
  {
    "line": 40,
    "text": "        return self._active",
    "annotation": "\u2705 Best Practice: Using a separate thread to run the server allows for non-blocking operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      5275
    ],
    "start_token": 147,
    "end_token": 158,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      4553,
      4704,
      284,
      1057,
      262,
      4382,
      3578,
      329,
      1729,
      12,
      41938,
      4560
    ],
    "label": "best_practice",
    "reason": "Using a separate thread to run the server allows for non-blocking operations"
  },
  {
    "line": 41,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Starting a thread is a common pattern for asynchronous operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 158,
    "end_token": 158,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17962,
      257,
      4704,
      318,
      257,
      2219,
      3912,
      329,
      39354,
      4560
    ],
    "label": "ml_signal",
    "reason": "Starting a thread is a common pattern for asynchronous operations"
  },
  {
    "line": 44,
    "text": "        rep_address: str,",
    "annotation": "\ud83e\udde0 ML Signal: Setting a heartbeat interval is a common pattern for maintaining server health",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1128,
      62,
      21975,
      25,
      965,
      11
    ],
    "start_token": 158,
    "end_token": 171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      36051,
      16654,
      318,
      257,
      2219,
      3912,
      329,
      10941,
      4382,
      1535
    ],
    "label": "ml_signal",
    "reason": "Setting a heartbeat interval is a common pattern for maintaining server health"
  },
  {
    "line": 44,
    "text": "        rep_address: str,",
    "annotation": "\u2705 Best Practice: Check if the server is active before attempting to stop it",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1128,
      62,
      21975,
      25,
      965,
      11
    ],
    "start_token": 171,
    "end_token": 184,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      4382,
      318,
      4075,
      878,
      9361,
      284,
      2245,
      340
    ],
    "label": "best_practice",
    "reason": "Check if the server is active before attempting to stop it"
  },
  {
    "line": 47,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Changing the state of an object, indicating a state transition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 184,
    "end_token": 192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      33680,
      262,
      1181,
      286,
      281,
      2134,
      11,
      12739,
      257,
      1181,
      6801
    ],
    "label": "ml_signal",
    "reason": "Changing the state of an object, indicating a state transition"
  },
  {
    "line": 49,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check if the thread is alive before joining to avoid unnecessary blocking.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 192,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      4704,
      318,
      6776,
      878,
      9679,
      284,
      3368,
      13114,
      12013,
      13
    ],
    "label": "best_practice",
    "reason": "Check if the thread is alive before joining to avoid unnecessary blocking."
  },
  {
    "line": 51,
    "text": "            return",
    "annotation": "\u2705 Best Practice: Resetting the thread reference to None after joining to prevent reuse.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 200,
    "end_token": 212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      262,
      4704,
      4941,
      284,
      6045,
      706,
      9679,
      284,
      2948,
      32349,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting the thread reference to None after joining to prevent reuse."
  },
  {
    "line": 57,
    "text": "        # Start RpcServer status",
    "annotation": "\u2705 Best Practice: Regularly checking for a heartbeat ensures the server is responsive and can detect failures.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      7253,
      371,
      14751,
      10697,
      3722
    ],
    "start_token": 212,
    "end_token": 225,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      23603,
      306,
      10627,
      329,
      257,
      36051,
      19047,
      262,
      4382,
      318,
      21802,
      290,
      460,
      4886,
      15536,
      13
    ],
    "label": "best_practice",
    "reason": "Regularly checking for a heartbeat ensures the server is responsive and can detect failures."
  },
  {
    "line": 61,
    "text": "        self._thread = threading.Thread(target=self.run)",
    "annotation": "\ud83e\udde0 ML Signal: Receiving and processing objects from a socket can indicate a pattern of network communication.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16663,
      796,
      4704,
      278,
      13,
      16818,
      7,
      16793,
      28,
      944,
      13,
      5143,
      8
    ],
    "start_token": 225,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19520,
      1412,
      290,
      7587,
      5563,
      422,
      257,
      17802,
      460,
      7603,
      257,
      3912,
      286,
      3127,
      6946,
      13
    ],
    "label": "ml_signal",
    "reason": "Receiving and processing objects from a socket can indicate a pattern of network communication."
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Unpacking received data into specific variables can indicate expected data structure.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 247,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      791,
      41291,
      2722,
      1366,
      656,
      2176,
      9633,
      460,
      7603,
      2938,
      1366,
      4645,
      13
    ],
    "label": "ml_signal",
    "reason": "Unpacking received data into specific variables can indicate expected data structure."
  },
  {
    "line": 65,
    "text": "        self._heartbeat_at = time() + HEARTBEAT_INTERVAL",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Accessing a function by name from a dictionary can lead to code execution risks if not properly validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      11499,
      12945,
      62,
      265,
      796,
      640,
      3419,
      1343,
      11179,
      7227,
      12473,
      1404,
      62,
      41358,
      23428
    ],
    "start_token": 247,
    "end_token": 271,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8798,
      278,
      257,
      2163,
      416,
      1438,
      422,
      257,
      22155,
      460,
      1085,
      284,
      2438,
      9706,
      7476,
      611,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Accessing a function by name from a dictionary can lead to code execution risks if not properly validated."
  },
  {
    "line": 68,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic function invocation with arguments can indicate a pattern of flexible execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 271,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2163,
      43219,
      351,
      7159,
      460,
      7603,
      257,
      3912,
      286,
      12846,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic function invocation with arguments can indicate a pattern of flexible execution."
  },
  {
    "line": 72,
    "text": "            return",
    "annotation": "\u2705 Best Practice: Catching exceptions and formatting traceback helps in debugging and error reporting.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 279,
    "end_token": 291,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      327,
      19775,
      13269,
      290,
      33313,
      12854,
      1891,
      5419,
      287,
      28769,
      290,
      4049,
      6447,
      13
    ],
    "label": "best_practice",
    "reason": "Catching exceptions and formatting traceback helps in debugging and error reporting."
  },
  {
    "line": 75,
    "text": "        self._active = False",
    "annotation": "\ud83e\udde0 ML Signal: Sending objects over a socket can indicate a pattern of network communication.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5275,
      796,
      10352
    ],
    "start_token": 291,
    "end_token": 303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32038,
      5563,
      625,
      257,
      17802,
      460,
      7603,
      257,
      3912,
      286,
      3127,
      6946,
      13
    ],
    "label": "ml_signal",
    "reason": "Sending objects over a socket can indicate a pattern of network communication."
  },
  {
    "line": 76,
    "text": "",
    "annotation": "\u2705 Best Practice: Closing sockets when done to release resources and avoid potential leaks.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 303,
    "end_token": 303,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47055,
      37037,
      618,
      1760,
      284,
      2650,
      4133,
      290,
      3368,
      2785,
      17316,
      13
    ],
    "label": "best_practice",
    "reason": "Closing sockets when done to release resources and avoid potential leaks."
  },
  {
    "line": 75,
    "text": "        self._active = False",
    "annotation": "\u2705 Best Practice: Use of a lock to ensure thread safety when accessing shared resources",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5275,
      796,
      10352
    ],
    "start_token": 303,
    "end_token": 315,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      5793,
      284,
      4155,
      4704,
      3747,
      618,
      22534,
      4888,
      4133
    ],
    "label": "best_practice",
    "reason": "Use of a lock to ensure thread safety when accessing shared resources"
  },
  {
    "line": 77,
    "text": "    def join(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of socket communication for data transmission",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4654,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 315,
    "end_token": 326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      17802,
      6946,
      329,
      1366,
      11478
    ],
    "label": "ml_signal",
    "reason": "Usage of socket communication for data transmission"
  },
  {
    "line": 78,
    "text": "        # Wait for RpcServer thread to exit",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data leakage if sensitive information is sent over an insecure channel",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      16314,
      329,
      371,
      14751,
      10697,
      4704,
      284,
      8420
    ],
    "start_token": 326,
    "end_token": 342,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      47988,
      611,
      8564,
      1321,
      318,
      1908,
      625,
      281,
      31955,
      6518
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data leakage if sensitive information is sent over an insecure channel"
  },
  {
    "line": 77,
    "text": "    def join(self) -> None:",
    "annotation": "\u2705 Best Practice: Add type hint for the return type of the function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4654,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 342,
    "end_token": 353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      9254,
      329,
      262,
      1441,
      2099,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Add type hint for the return type of the function"
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of function registration pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 353,
    "end_token": 353,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2163,
      9352,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of function registration pattern"
  },
  {
    "line": 83,
    "text": "    def run(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of overwriting existing functions with the same name",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1057,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 353,
    "end_token": 364,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      6993,
      799,
      278,
      4683,
      5499,
      351,
      262,
      976,
      1438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of overwriting existing functions with the same name"
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for function return type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 364,
    "end_token": 364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Include type hints for function return type"
  },
  {
    "line": 87,
    "text": "        while self._active:",
    "annotation": "\u2705 Best Practice: Use descriptive variable names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      981,
      2116,
      13557,
      5275,
      25
    ],
    "start_token": 364,
    "end_token": 376,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names"
  },
  {
    "line": 89,
    "text": "            n: int = self._socket_rep.poll(1000)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential time-based logic flaw if time is manipulated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      25,
      493,
      796,
      2116,
      13557,
      44971,
      62,
      7856,
      13,
      30393,
      7,
      12825,
      8
    ],
    "start_token": 376,
    "end_token": 401,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      12,
      3106,
      9156,
      11804,
      611,
      640,
      318,
      25036
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential time-based logic flaw if time is manipulated"
  },
  {
    "line": 89,
    "text": "            n: int = self._socket_rep.poll(1000)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of publish-subscribe pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      25,
      493,
      796,
      2116,
      13557,
      44971,
      62,
      7856,
      13,
      30393,
      7,
      12825,
      8
    ],
    "start_token": 401,
    "end_token": 426,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7715,
      12,
      7266,
      12522,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of publish-subscribe pattern"
  },
  {
    "line": 89,
    "text": "            n: int = self._socket_rep.poll(1000)",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of updating state with time-based logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      25,
      493,
      796,
      2116,
      13557,
      44971,
      62,
      7856,
      13,
      30393,
      7,
      12825,
      8
    ],
    "start_token": 426,
    "end_token": 451,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      19698,
      1181,
      351,
      640,
      12,
      3106,
      9156
    ],
    "label": "ml_signal",
    "reason": "Pattern of updating state with time-based logic"
  }
]
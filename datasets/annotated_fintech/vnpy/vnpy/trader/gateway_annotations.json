[
  {
    "line": 2,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of abstract base class pattern, indicating a design choice for extensibility",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12531,
      2779,
      1398,
      3912,
      11,
      12739,
      257,
      1486,
      3572,
      329,
      1070,
      641,
      2247
    ],
    "label": "ml_signal",
    "reason": "Use of abstract base class pattern, indicating a design choice for extensibility"
  },
  {
    "line": 3,
    "text": "from vnpy.event import Event, EventEngine",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module, indicating selective usage",
    "confidence": 0.5,
    "tokens": [
      6738,
      410,
      77,
      9078,
      13,
      15596,
      1330,
      8558,
      11,
      8558,
      13798
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      11,
      12739,
      21792,
      8748
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module, indicating selective usage"
  },
  {
    "line": 13,
    "text": ")",
    "annotation": "\ud83e\udde0 ML Signal: Importing constants, indicating event-driven architecture",
    "confidence": 0.5,
    "tokens": [
      8
    ],
    "start_token": 11,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      38491,
      11,
      12739,
      1785,
      12,
      15808,
      10959
    ],
    "label": "ml_signal",
    "reason": "Importing constants, indicating event-driven architecture"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing multiple data structures and request types, indicating a complex system",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      3294,
      1366,
      8573,
      290,
      2581,
      3858,
      11,
      12739,
      257,
      3716,
      1080
    ],
    "label": "ml_signal",
    "reason": "Importing multiple data structures and request types, indicating a complex system"
  },
  {
    "line": 56,
    "text": "    * on_tick",
    "annotation": "\u2705 Best Practice: Use of type hints for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1635,
      319,
      62,
      42298
    ],
    "start_token": 12,
    "end_token": 19,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for class attributes improves code readability and maintainability."
  },
  {
    "line": 58,
    "text": "    * on_order",
    "annotation": "\u2705 Best Practice: Use of type hints for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1635,
      319,
      62,
      2875
    ],
    "start_token": 19,
    "end_token": 26,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for class attributes improves code readability and maintainability."
  },
  {
    "line": 60,
    "text": "    * on_account",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default value for class attribute can lead to unexpected behavior if modified.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1635,
      319,
      62,
      23317
    ],
    "start_token": 26,
    "end_token": 33,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      1988,
      329,
      1398,
      11688,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      9518,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default value for class attribute can lead to unexpected behavior if modified."
  },
  {
    "line": 61,
    "text": "    * on_contract",
    "annotation": "\u2705 Best Practice: Type annotations for constructor parameters improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1635,
      319,
      62,
      28484
    ],
    "start_token": 33,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      23772,
      10007,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for constructor parameters improve code readability and maintainability."
  },
  {
    "line": 63,
    "text": "    All the XxxData passed to callback should be constant, which means that",
    "annotation": "\u2705 Best Practice: Type annotations for instance variables improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1439,
      262,
      1395,
      5324,
      6601,
      3804,
      284,
      23838,
      815,
      307,
      6937,
      11,
      543,
      1724,
      326
    ],
    "start_token": 40,
    "end_token": 58,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      4554,
      9633,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for instance variables improve code readability and maintainability."
  },
  {
    "line": 64,
    "text": "        the object should not be modified after passing to on_xxxx.",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      2134,
      815,
      407,
      307,
      9518,
      706,
      6427,
      284,
      319,
      62,
      12343,
      13
    ],
    "start_token": 58,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of an Event object with type and data parameters could indicate a pattern of event-driven architecture.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 78,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      281,
      8558,
      2134,
      351,
      2099,
      290,
      1366,
      10007,
      714,
      7603,
      257,
      3912,
      286,
      1785,
      12,
      15808,
      10959,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of an Event object with type and data parameters could indicate a pattern of event-driven architecture."
  },
  {
    "line": 70,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of an event engine to handle events suggests a pattern of decoupled system components.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 78,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      281,
      1785,
      3113,
      284,
      5412,
      2995,
      5644,
      257,
      3912,
      286,
      875,
      280,
      10137,
      1080,
      6805,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of an event engine to handle events suggests a pattern of decoupled system components."
  },
  {
    "line": 74,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method handling tick data, useful for learning event-driven patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 82,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      4378,
      1366,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method handling tick data, useful for learning event-driven patterns"
  },
  {
    "line": 75,
    "text": "    # Fields required in setting dict for connect function.",
    "annotation": "\u2705 Best Practice: Use of descriptive method name and type hints for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      23948,
      2672,
      287,
      4634,
      8633,
      329,
      2018,
      2163,
      13
    ],
    "start_token": 82,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2446,
      1438,
      290,
      2099,
      20269,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive method name and type hints for clarity"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of event-driven architecture with dynamic event identifiers",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 95,
    "end_token": 95,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1785,
      12,
      15808,
      10959,
      351,
      8925,
      1785,
      42814
    ],
    "label": "ml_signal",
    "reason": "Usage of event-driven architecture with dynamic event identifiers"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EVENT_TICK or tick.vt_symbol are user-controlled and not validated",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 95,
    "end_token": 95,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      49261,
      62,
      51,
      11860,
      393,
      4378,
      13,
      36540,
      62,
      1837,
      23650,
      389,
      2836,
      12,
      14401,
      290,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EVENT_TICK or tick.vt_symbol are user-controlled and not validated"
  },
  {
    "line": 81,
    "text": "    def __init__(self, event_engine: EventEngine, gateway_name: str) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Handling events with specific identifiers, useful for learning event handling patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      11,
      24308,
      62,
      3672,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 95,
    "end_token": 121,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      2995,
      351,
      2176,
      42814,
      11,
      4465,
      329,
      4673,
      1785,
      9041,
      7572
    ],
    "label": "ml_signal",
    "reason": "Handling events with specific identifiers, useful for learning event handling patterns"
  },
  {
    "line": 81,
    "text": "    def __init__(self, event_engine: EventEngine, gateway_name: str) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if tick.vt_symbol is user-controlled and not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      11,
      24308,
      62,
      3672,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 121,
    "end_token": 147,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4378,
      13,
      36540,
      62,
      1837,
      23650,
      318,
      2836,
      12,
      14401,
      290,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if tick.vt_symbol is user-controlled and not validated"
  },
  {
    "line": 81,
    "text": "    def __init__(self, event_engine: EventEngine, gateway_name: str) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method handling trade events, useful for learning event-driven patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      11,
      24308,
      62,
      3672,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 147,
    "end_token": 173,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      3292,
      2995,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method handling trade events, useful for learning event-driven patterns"
  },
  {
    "line": 82,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Use of descriptive method name and type hinting for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 173,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2446,
      1438,
      290,
      2099,
      9254,
      278,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive method name and type hinting for clarity"
  },
  {
    "line": 84,
    "text": "        self.gateway_name: str = gateway_name",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of event handling with dynamic event identifiers",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      10494,
      1014,
      62,
      3672,
      25,
      965,
      796,
      24308,
      62,
      3672
    ],
    "start_token": 183,
    "end_token": 202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      1785,
      9041,
      351,
      8925,
      1785,
      42814
    ],
    "label": "ml_signal",
    "reason": "Pattern of event handling with dynamic event identifiers"
  },
  {
    "line": 84,
    "text": "        self.gateway_name: str = gateway_name",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EVENT_TRADE or trade.vt_symbol are not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      10494,
      1014,
      62,
      3672,
      25,
      965,
      796,
      24308,
      62,
      3672
    ],
    "start_token": 202,
    "end_token": 221,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      49261,
      62,
      5446,
      19266,
      393,
      3292,
      13,
      36540,
      62,
      1837,
      23650,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EVENT_TRADE or trade.vt_symbol are not validated"
  },
  {
    "line": 88,
    "text": "        General event push.",
    "annotation": "\ud83e\udde0 ML Signal: Handling events with specific identifiers, useful for learning event-driven patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3611,
      1785,
      4574,
      13
    ],
    "start_token": 221,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      2995,
      351,
      2176,
      42814,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Handling events with specific identifiers, useful for learning event-driven patterns"
  },
  {
    "line": 88,
    "text": "        General event push.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EVENT_TRADE or trade.vt_symbol are not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3611,
      1785,
      4574,
      13
    ],
    "start_token": 232,
    "end_token": 243,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      49261,
      62,
      5446,
      19266,
      393,
      3292,
      13,
      36540,
      62,
      1837,
      23650,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EVENT_TRADE or trade.vt_symbol are not validated"
  },
  {
    "line": 88,
    "text": "        General event push.",
    "annotation": "\ud83e\udde0 ML Signal: Method handling order events, useful for learning event-driven patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3611,
      1785,
      4574,
      13
    ],
    "start_token": 243,
    "end_token": 254,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      1502,
      2995,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Method handling order events, useful for learning event-driven patterns."
  },
  {
    "line": 89,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of descriptive method name and docstring for clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 254,
    "end_token": 262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2446,
      1438,
      290,
      2205,
      8841,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive method name and docstring for clarity."
  },
  {
    "line": 91,
    "text": "        self.event_engine.put(event)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of event-driven architecture, useful for learning event handling patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      1996,
      7,
      15596,
      8
    ],
    "start_token": 262,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1785,
      12,
      15808,
      10959,
      11,
      4465,
      329,
      4673,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of event-driven architecture, useful for learning event handling patterns."
  },
  {
    "line": 91,
    "text": "        self.event_engine.put(event)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EVENT_ORDER or order.vt_orderid are not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      1996,
      7,
      15596,
      8
    ],
    "start_token": 279,
    "end_token": 296,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      49261,
      62,
      12532,
      1137,
      393,
      1502,
      13,
      36540,
      62,
      2875,
      312,
      389,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EVENT_ORDER or order.vt_orderid are not properly validated."
  },
  {
    "line": 95,
    "text": "        Tick event push.",
    "annotation": "\ud83e\udde0 ML Signal: Handling specific order events, useful for learning event-specific processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      46093,
      1785,
      4574,
      13
    ],
    "start_token": 296,
    "end_token": 307,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      2176,
      1502,
      2995,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      11423,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Handling specific order events, useful for learning event-specific processing."
  },
  {
    "line": 95,
    "text": "        Tick event push.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if concatenation of EVENT_ORDER and order.vt_orderid is not handled safely.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      46093,
      1785,
      4574,
      13
    ],
    "start_token": 307,
    "end_token": 318,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      1673,
      36686,
      341,
      286,
      49261,
      62,
      12532,
      1137,
      290,
      1502,
      13,
      36540,
      62,
      2875,
      312,
      318,
      407,
      12118,
      11512,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if concatenation of EVENT_ORDER and order.vt_orderid is not handled safely."
  },
  {
    "line": 95,
    "text": "        Tick event push.",
    "annotation": "\ud83e\udde0 ML Signal: Method handling position events, useful for learning event-driven patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      46093,
      1785,
      4574,
      13
    ],
    "start_token": 318,
    "end_token": 329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      2292,
      2995,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method handling position events, useful for learning event-driven patterns"
  },
  {
    "line": 96,
    "text": "        Tick event of a specific vt_symbol is also pushed.",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      46093,
      1785,
      286,
      257,
      2176,
      410,
      83,
      62,
      1837,
      23650,
      318,
      635,
      7121,
      13
    ],
    "start_token": 329,
    "end_token": 350,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the method's purpose"
  },
  {
    "line": 98,
    "text": "        self.on_event(EVENT_TICK, tick)",
    "annotation": "\ud83e\udde0 ML Signal: Event-driven architecture pattern, useful for ML models to learn from",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      261,
      62,
      15596,
      7,
      20114,
      3525,
      62,
      51,
      11860,
      11,
      4378,
      8
    ],
    "start_token": 350,
    "end_token": 371,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8558,
      12,
      15808,
      10959,
      3912,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      2193,
      422
    ],
    "label": "ml_signal",
    "reason": "Event-driven architecture pattern, useful for ML models to learn from"
  },
  {
    "line": 98,
    "text": "        self.on_event(EVENT_TICK, tick)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EVENT_POSITION is user-controlled and not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      261,
      62,
      15596,
      7,
      20114,
      3525,
      62,
      51,
      11860,
      11,
      4378,
      8
    ],
    "start_token": 371,
    "end_token": 392,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      49261,
      62,
      37997,
      17941,
      318,
      2836,
      12,
      14401,
      290,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EVENT_POSITION is user-controlled and not validated"
  },
  {
    "line": 102,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Handling events with dynamic identifiers, useful for learning dynamic event handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 392,
    "end_token": 400,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      2995,
      351,
      8925,
      42814,
      11,
      4465,
      329,
      4673,
      8925,
      1785,
      9041
    ],
    "label": "ml_signal",
    "reason": "Handling events with dynamic identifiers, useful for learning dynamic event handling"
  },
  {
    "line": 102,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if position.vt_symbol is user-controlled and not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 400,
    "end_token": 408,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      2292,
      13,
      36540,
      62,
      1837,
      23650,
      318,
      2836,
      12,
      14401,
      290,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if position.vt_symbol is user-controlled and not validated"
  },
  {
    "line": 102,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method handling account events, useful for learning event-driven patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 408,
    "end_token": 416,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      1848,
      2995,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method handling account events, useful for learning event-driven patterns"
  },
  {
    "line": 103,
    "text": "        Trade event push.",
    "annotation": "\u2705 Best Practice: Use of descriptive method name and docstring for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9601,
      1785,
      4574,
      13
    ],
    "start_token": 416,
    "end_token": 427,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2446,
      1438,
      290,
      2205,
      8841,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive method name and docstring for clarity"
  },
  {
    "line": 105,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Event handling with specific account ID, useful for learning event-driven patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 427,
    "end_token": 435,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8558,
      9041,
      351,
      2176,
      1848,
      4522,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Event handling with specific account ID, useful for learning event-driven patterns"
  },
  {
    "line": 105,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Concatenating strings for event types, indicating dynamic event handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 435,
    "end_token": 443,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1482,
      9246,
      268,
      803,
      13042,
      329,
      1785,
      3858,
      11,
      12739,
      8925,
      1785,
      9041
    ],
    "label": "best_practice",
    "reason": "Concatenating strings for event types, indicating dynamic event handling"
  },
  {
    "line": 109,
    "text": "    def on_order(self, order: OrderData) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method handling event-driven architecture",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      2875,
      7,
      944,
      11,
      1502,
      25,
      8284,
      6601,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 443,
    "end_token": 461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      1785,
      12,
      15808,
      10959
    ],
    "label": "ml_signal",
    "reason": "Method handling event-driven architecture"
  },
  {
    "line": 110,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of descriptive method name for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 461,
    "end_token": 469,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      2446,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive method name for clarity"
  },
  {
    "line": 112,
    "text": "        Order event of a specific vt_orderid is also pushed.",
    "annotation": "\ud83e\udde0 ML Signal: Event handling with dynamic event types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8284,
      1785,
      286,
      257,
      2176,
      410,
      83,
      62,
      2875,
      312,
      318,
      635,
      7121,
      13
    ],
    "start_token": 469,
    "end_token": 490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8558,
      9041,
      351,
      8925,
      1785,
      3858
    ],
    "label": "ml_signal",
    "reason": "Event handling with dynamic event types"
  },
  {
    "line": 112,
    "text": "        Order event of a specific vt_orderid is also pushed.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EVENT_QUOTE or vt_symbol are user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8284,
      1785,
      286,
      257,
      2176,
      410,
      83,
      62,
      2875,
      312,
      318,
      635,
      7121,
      13
    ],
    "start_token": 490,
    "end_token": 511,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      49261,
      62,
      10917,
      23051,
      393,
      410,
      83,
      62,
      1837,
      23650,
      389,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EVENT_QUOTE or vt_symbol are user-controlled"
  },
  {
    "line": 115,
    "text": "        self.on_event(EVENT_ORDER + order.vt_orderid, order)",
    "annotation": "\ud83e\udde0 ML Signal: Method for handling log events, useful for understanding event-driven patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      261,
      62,
      15596,
      7,
      20114,
      3525,
      62,
      12532,
      1137,
      1343,
      1502,
      13,
      36540,
      62,
      2875,
      312,
      11,
      1502,
      8
    ],
    "start_token": 511,
    "end_token": 539,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      9041,
      2604,
      2995,
      11,
      4465,
      329,
      4547,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method for handling log events, useful for understanding event-driven patterns"
  },
  {
    "line": 116,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for method parameters and return type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 539,
    "end_token": 539,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2446,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for method parameters and return type"
  },
  {
    "line": 120,
    "text": "        Position event of a specific vt_symbol is also pushed.",
    "annotation": "\ud83e\udde0 ML Signal: Method handling event-driven architecture",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23158,
      1785,
      286,
      257,
      2176,
      410,
      83,
      62,
      1837,
      23650,
      318,
      635,
      7121,
      13
    ],
    "start_token": 539,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9041,
      1785,
      12,
      15808,
      10959
    ],
    "label": "ml_signal",
    "reason": "Method handling event-driven architecture"
  },
  {
    "line": 121,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hinting for method parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 560,
    "end_token": 568,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2446,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for method parameters and return type"
  },
  {
    "line": 125,
    "text": "    def on_account(self, account: AccountData) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a logging function which could indicate logging patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      319,
      62,
      23317,
      7,
      944,
      11,
      1848,
      25,
      10781,
      6601,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 568,
    "end_token": 586,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      18931,
      2163,
      543,
      714,
      7603,
      18931,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of a logging function which could indicate logging patterns"
  },
  {
    "line": 126,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Invocation of a method with a specific object, indicating event handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 586,
    "end_token": 594,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10001,
      5040,
      286,
      257,
      2446,
      351,
      257,
      2176,
      2134,
      11,
      12739,
      1785,
      9041
    ],
    "label": "ml_signal",
    "reason": "Invocation of a method with a specific object, indicating event handling"
  },
  {
    "line": 129,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of abstractmethod decorator to enforce implementation in subclasses",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 594,
    "end_token": 602,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12531,
      24396,
      11705,
      1352,
      284,
      4605,
      7822,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of abstractmethod decorator to enforce implementation in subclasses"
  },
  {
    "line": 146,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod indicates this method should be overridden in subclasses.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 602,
    "end_token": 602,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      9217,
      428,
      2446,
      815,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod indicates this method should be overridden in subclasses."
  },
  {
    "line": 150,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod indicates this method should be implemented by subclasses",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 602,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      9217,
      428,
      2446,
      815,
      307,
      9177,
      416,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod indicates this method should be implemented by subclasses"
  },
  {
    "line": 153,
    "text": "    def write_log(self, msg: str) -> None:",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3551,
      62,
      6404,
      7,
      944,
      11,
      31456,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 610,
    "end_token": 627,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type for better readability and maintainability."
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u2705 Best Practice: Use @abstractmethod to enforce implementation of this method in subclasses.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 627,
    "end_token": 627,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2488,
      397,
      8709,
      24396,
      284,
      4605,
      7822,
      286,
      428,
      2446,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Use @abstractmethod to enforce implementation of this method in subclasses."
  },
  {
    "line": 171,
    "text": "            * account holding: on_position",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod indicates this method should be implemented by subclasses",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      1848,
      4769,
      25,
      319,
      62,
      9150
    ],
    "start_token": 627,
    "end_token": 645,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      9217,
      428,
      2446,
      815,
      307,
      9177,
      416,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod indicates this method should be implemented by subclasses"
  },
  {
    "line": 173,
    "text": "            * trades of account: on_trade",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and tasks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      17674,
      286,
      1848,
      25,
      319,
      62,
      25351
    ],
    "start_token": 645,
    "end_token": 664,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      8861
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and tasks"
  },
  {
    "line": 180,
    "text": "        pass",
    "annotation": "\u2705 Best Practice: Use 'pass' as a placeholder for future implementation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1208
    ],
    "start_token": 664,
    "end_token": 672,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      6603,
      6,
      355,
      257,
      46076,
      329,
      2003,
      7822
    ],
    "label": "best_practice",
    "reason": "Use 'pass' as a placeholder for future implementation"
  },
  {
    "line": 193,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Return a meaningful value or raise NotImplementedError if the method is not yet implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 672,
    "end_token": 680,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      11570,
      1988,
      393,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      611,
      262,
      2446,
      318,
      407,
      1865,
      9177
    ],
    "label": "best_practice",
    "reason": "Return a meaningful value or raise NotImplementedError if the method is not yet implemented"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 680,
    "end_token": 680,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and behavior"
  },
  {
    "line": 202,
    "text": "        * create an OrderData from req using OrderRequest.create_order_data",
    "annotation": "\u2705 Best Practice: Use decorators like @abstractmethod to enforce method implementation in subclasses",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      2251,
      281,
      8284,
      6601,
      422,
      43089,
      1262,
      8284,
      18453,
      13,
      17953,
      62,
      2875,
      62,
      7890
    ],
    "start_token": 680,
    "end_token": 703,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11705,
      2024,
      588,
      2488,
      397,
      8709,
      24396,
      284,
      4605,
      2446,
      7822,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use decorators like @abstractmethod to enforce method implementation in subclasses"
  },
  {
    "line": 209,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 703,
    "end_token": 703,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability."
  },
  {
    "line": 214,
    "text": "    @abstractmethod",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      397,
      8709,
      24396
    ],
    "start_token": 703,
    "end_token": 710,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 218,
    "text": "        implementation should finish the tasks blow:",
    "annotation": "\u2705 Best Practice: Return an empty list as a default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7822,
      815,
      5461,
      262,
      8861,
      6611,
      25
    ],
    "start_token": 710,
    "end_token": 724,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      281,
      6565,
      1351,
      355,
      257,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Return an empty list as a default value"
  },
  {
    "line": 219,
    "text": "        * send request to server",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      3758,
      2581,
      284,
      4382
    ],
    "start_token": 724,
    "end_token": 736,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 222,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing an instance attribute, indicating a pattern of object-oriented design",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 736,
    "end_token": 736,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      281,
      4554,
      11688,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      1486
    ],
    "label": "ml_signal",
    "reason": "Accessing an instance attribute, indicating a pattern of object-oriented design"
  }
]
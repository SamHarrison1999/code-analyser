annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Consider using deepcopy if nested objects are involved to ensure all levels are copied.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 2769, 30073, 611, 28376, 5563, 389, 2950, 284, 4155, 477, 2974, 389, 18984, 13]",0.5,7,best_practice,2,Consider using deepcopy if nested objects are involved to ensure all levels are copied.,,0,from typing import TYPE_CHECKING,"[6738, 19720, 1330, 41876, 62, 50084, 2751]"
✅ Best Practice: TYPE_CHECKING is used to avoid circular imports and improve performance during runtime.,"[26486, 227, 6705, 19939, 25, 41876, 62, 50084, 2751, 318, 973, 284, 3368, 18620, 17944, 290, 2987, 2854, 1141, 19124, 13]",1.0,7,best_practice,3,TYPE_CHECKING is used to avoid circular imports and improve performance during runtime.,,7,,[]
✅ Best Practice: Grouping related imports together improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,7,best_practice,12,Grouping related imports together improves readability and maintainability.,,7,,[]
✅ Best Practice: Grouping related imports together improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 3519, 17944, 1978, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,17,best_practice,14,Grouping related imports together improves readability and maintainability.,,7,    from .engine import OmsEngine,"[220, 220, 220, 422, 764, 18392, 1330, 440, 907, 13798]"
✅ Best Practice: TYPE_CHECKING is used to avoid circular imports and improve performance during runtime.,"[26486, 227, 6705, 19939, 25, 41876, 62, 50084, 2751, 318, 973, 284, 3368, 18620, 17944, 290, 2987, 2854, 1141, 19124, 13]",1.0,22,best_practice,17,TYPE_CHECKING is used to avoid circular imports and improve performance during runtime.,,17,class PositionHolding:,"[4871, 23158, 26807, 278, 25]"
✅ Best Practice: Consider adding a class docstring to describe the purpose and usage of the class.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 1398, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398, 13]",1.0,22,best_practice,15,Consider adding a class docstring to describe the purpose and usage of the class.,,22,,[]
🧠 ML Signal: Initialization of object attributes from a data structure,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2134, 12608, 422, 257, 1366, 4645]",1.0,27,ml_signal,17,Initialization of object attributes from a data structure,,22,class PositionHolding:,"[4871, 23158, 26807, 278, 25]"
🧠 ML Signal: Initialization of object attributes from a data structure,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2134, 12608, 422, 257, 1366, 4645]",1.0,27,ml_signal,19,Initialization of object attributes from a data structure,,27,,[]
🧠 ML Signal: Initialization of a dictionary to store orders,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 22155, 284, 3650, 6266]",1.0,37,ml_signal,21,Initialization of a dictionary to store orders,,27,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Initialization of position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2292, 12, 5363, 12608]",1.0,55,ml_signal,23,Initialization of position-related attributes,,37,        self.exchange: Exchange = contract.exchange,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1069, 3803, 25, 12516, 796, 2775, 13, 1069, 3803]"
🧠 ML Signal: Initialization of position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2292, 12, 5363, 12608]",1.0,77,ml_signal,25,Initialization of position-related attributes,,55,"        self.active_orders: dict[str, OrderData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 6361, 25, 8633, 58, 2536, 11, 8284, 6601, 60, 796, 23884]"
🧠 ML Signal: Initialization of position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2292, 12, 5363, 12608]",1.0,93,ml_signal,27,Initialization of position-related attributes,,77,        self.long_pos: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 1930, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2292, 12, 5363, 12608]",1.0,109,ml_signal,29,Initialization of position-related attributes,,93,        self.long_td: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 8671, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2292, 12, 5363, 12608]",1.0,125,ml_signal,31,Initialization of position-related attributes,,109,        self.short_pos: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 1930, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2292, 12, 5363, 12608]",1.0,141,ml_signal,33,Initialization of position-related attributes,,125,        self.short_td: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of frozen position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 12912, 2292, 12, 5363, 12608]",1.0,160,ml_signal,35,Initialization of frozen position-related attributes,,141,        self.long_pos_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 1930, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of frozen position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 12912, 2292, 12, 5363, 12608]",1.0,179,ml_signal,37,Initialization of frozen position-related attributes,,160,        self.long_td_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 8671, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of frozen position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 12912, 2292, 12, 5363, 12608]",1.0,198,ml_signal,39,Initialization of frozen position-related attributes,,179,        self.short_pos_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 1930, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of frozen position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 12912, 2292, 12, 5363, 12608]",1.0,217,ml_signal,41,Initialization of frozen position-related attributes,,198,        self.short_td_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Initialization of frozen position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 12912, 2292, 12, 5363, 12608]",1.0,235,ml_signal,43,Initialization of frozen position-related attributes,,217,"    def update_position(self, position: PositionData) -> None:","[220, 220, 220, 825, 4296, 62, 9150, 7, 944, 11, 2292, 25, 23158, 6601, 8, 4613, 6045, 25]"
🧠 ML Signal: Initialization of frozen position-related attributes,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 12912, 2292, 12, 5363, 12608]",1.0,252,ml_signal,45,Initialization of frozen position-related attributes,,235,        if position.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 611, 2292, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
🧠 ML Signal: Conditional logic based on attribute values,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11688, 3815]",1.0,252,ml_signal,34,Conditional logic based on attribute values,,252,,[]
🧠 ML Signal: Attribute assignment based on condition,"[8582, 100, 254, 10373, 26484, 25, 3460, 4163, 16237, 1912, 319, 4006]",1.0,271,ml_signal,36,Attribute assignment based on condition,,252,        self.long_yd_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 5173, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Attribute assignment based on condition,"[8582, 100, 254, 10373, 26484, 25, 3460, 4163, 16237, 1912, 319, 4006]",1.0,290,ml_signal,37,Attribute assignment based on condition,,271,        self.long_td_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 8671, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Calculation and assignment based on attributes,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 290, 16237, 1912, 319, 12608]",1.0,309,ml_signal,40,Calculation and assignment based on attributes,,290,        self.short_yd_frozen: float = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 5173, 62, 69, 42005, 25, 12178, 796, 657]"
🧠 ML Signal: Attribute assignment based on condition,"[8582, 100, 254, 10373, 26484, 25, 3460, 4163, 16237, 1912, 319, 4006]",1.0,327,ml_signal,43,Attribute assignment based on condition,,309,"    def update_position(self, position: PositionData) -> None:","[220, 220, 220, 825, 4296, 62, 9150, 7, 944, 11, 2292, 25, 23158, 6601, 8, 4613, 6045, 25]"
🧠 ML Signal: Attribute assignment based on condition,"[8582, 100, 254, 10373, 26484, 25, 3460, 4163, 16237, 1912, 319, 4006]",1.0,344,ml_signal,45,Attribute assignment based on condition,,327,        if position.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 611, 2292, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
🧠 ML Signal: Calculation and assignment based on attributes,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 290, 16237, 1912, 319, 12608]",1.0,366,ml_signal,47,Calculation and assignment based on attributes,,344,            self.long_yd = position.yd_volume,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 5173, 796, 2292, 13, 5173, 62, 29048]"
"🧠 ML Signal: Checks if an order is active, indicating a pattern of managing order states.","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 281, 1502, 318, 4075, 11, 12739, 257, 3912, 286, 11149, 1502, 2585, 13]",1.0,376,ml_signal,44,"Checks if an order is active, indicating a pattern of managing order states.",,366,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
"🧠 ML Signal: Updates active orders, showing a pattern of maintaining a collection of active items.","[8582, 100, 254, 10373, 26484, 25, 28090, 4075, 6266, 11, 4478, 257, 3912, 286, 10941, 257, 4947, 286, 4075, 3709, 13]",1.0,393,ml_signal,45,"Updates active orders, showing a pattern of maintaining a collection of active items.",,376,        if position.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 611, 2292, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
"🧠 ML Signal: Checks for order existence before removal, indicating a pattern of safe deletion.","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 1502, 6224, 878, 9934, 11, 12739, 257, 3912, 286, 3338, 39948, 13]",1.0,402,ml_signal,49,"Checks for order existence before removal, indicating a pattern of safe deletion.",,393,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"🧠 ML Signal: Removes inactive orders, showing a pattern of cleaning up resources.","[8582, 100, 254, 10373, 26484, 25, 3982, 5241, 28621, 6266, 11, 4478, 257, 3912, 286, 12724, 510, 4133, 13]",1.0,424,ml_signal,51,"Removes inactive orders, showing a pattern of cleaning up resources.",,402,            self.short_yd = position.yd_volume,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 5173, 796, 2292, 13, 5173, 62, 29048]"
"🧠 ML Signal: Calls a method to recalculate resources, indicating a pattern of resource management.","[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2446, 284, 42653, 3129, 378, 4133, 11, 12739, 257, 3912, 286, 8271, 4542, 13]",1.0,424,ml_signal,53,"Calls a method to recalculate resources, indicating a pattern of resource management.",,424,,[]
✅ Best Practice: Consider adding a docstring to describe the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007, 13]",0.5,452,best_practice,52,Consider adding a docstring to describe the method's purpose and parameters.,,424,            self.short_td = self.short_pos - self.short_yd,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 796, 2116, 13, 19509, 62, 1930, 532, 2116, 13, 19509, 62, 5173]"
⚠️ SAST Risk (Low): Assumes vt_orderid is always in the correct format and does not handle potential exceptions from split.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 410, 83, 62, 2875, 312, 318, 1464, 287, 262, 3376, 5794, 290, 857, 407, 5412, 2785, 13269, 422, 6626, 13]",0.5,470,sast_risk,54,Assumes vt_orderid is always in the correct format and does not handle potential exceptions from split.,Low,452,"    def update_order(self, order: OrderData) -> None:","[220, 220, 220, 825, 4296, 62, 2875, 7, 944, 11, 1502, 25, 8284, 6601, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of method chaining to create an order object.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 284, 2251, 281, 1502, 2134, 13]",0.5,484,ml_signal,56,Usage of method chaining to create an order object.,,470,        if order.is_active():,"[220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 271, 62, 5275, 33529]"
🧠 ML Signal: Pattern of updating an order using a method call.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 281, 1502, 1262, 257, 2446, 869, 13]",0.5,493,ml_signal,58,Pattern of updating an order using a method call.,,484,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Conditional logic based on trade direction and offset,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 3292, 4571, 290, 11677]",1.0,519,ml_signal,57,Conditional logic based on trade direction and offset,,493,            self.active_orders[order.vt_orderid] = order,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 6361, 58, 2875, 13, 36540, 62, 2875, 312, 60, 796, 1502]"
🧠 ML Signal: Pattern of updating long and short positions based on trade offset,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 890, 290, 1790, 6116, 1912, 319, 3292, 11677]",1.0,544,ml_signal,59,Pattern of updating long and short positions based on trade offset,,519,            if order.vt_orderid in self.active_orders:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 36540, 62, 2875, 312, 287, 2116, 13, 5275, 62, 6361, 25]"
🧠 ML Signal: Special handling for specific exchanges,"[8582, 100, 254, 10373, 26484, 25, 6093, 9041, 329, 2176, 14525]",1.0,567,ml_signal,66,Special handling for specific exchanges,,544,"        gateway_name, orderid = vt_orderid.split(""."")","[220, 220, 220, 220, 220, 220, 220, 24308, 62, 3672, 11, 1502, 312, 796, 410, 83, 62, 2875, 312, 13, 35312, 7203, 19570]"
⚠️ SAST Risk (Low): Potential negative value adjustment,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 4633, 1988, 15068]",1.0,585,sast_risk,71,Potential negative value adjustment,Low,567,"    def update_trade(self, trade: TradeData) -> None:","[220, 220, 220, 825, 4296, 62, 25351, 7, 944, 11, 3292, 25, 9601, 6601, 8, 4613, 6045, 25]"
⚠️ SAST Risk (Low): Potential negative value adjustment,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 4633, 1988, 15068]",1.0,615,sast_risk,88,Potential negative value adjustment,Low,585,                        self.short_td = 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 796, 657]"
✅ Best Practice: Clear calculation of long and short positions,"[26486, 227, 6705, 19939, 25, 11459, 17952, 286, 890, 290, 1790, 6116]",1.0,641,best_practice,92,Clear calculation of long and short positions,,615,            elif trade.offset == Offset.CLOSETODAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 3292, 13, 28968, 6624, 3242, 2617, 13, 5097, 2640, 2767, 3727, 4792, 25]"
🧠 ML Signal: Method call to update frozen positions,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 12912, 6116]",1.0,665,ml_signal,95,Method call to update frozen positions,,641,                self.long_yd -= trade.volume,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 5173, 48185, 3292, 13, 29048]"
✅ Best Practice: Initialize variables at the start of the function for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287, 290, 5529, 1799]",1.0,691,best_practice,92,Initialize variables at the start of the function for clarity and maintainability,,665,            elif trade.offset == Offset.CLOSETODAY:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 3292, 13, 28968, 6624, 3242, 2617, 13, 5097, 2640, 2767, 3727, 4792, 25]"
"🧠 ML Signal: Iterating over a collection of objects, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 286, 5563, 11, 2219, 3912, 287, 1366, 7587]",1.0,708,ml_signal,99,"Iterating over a collection of objects, common pattern in data processing",,691,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Use of continue to skip unnecessary iterations,"[26486, 227, 6705, 19939, 25, 5765, 286, 2555, 284, 14267, 13114, 34820]",0.5,708,best_practice,101,Use of continue to skip unnecessary iterations,,708,,[]
✅ Best Practice: Type hinting for variable 'frozen' improves code readability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 7885, 705, 69, 42005, 6, 19575, 2438, 1100, 1799]",1.0,738,best_practice,104,Type hinting for variable 'frozen' improves code readability,,708,                        self.long_td = 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 8671, 796, 657]"
✅ Best Practice: Use of conditional logic to handle different cases,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 2663]",0.5,748,best_practice,113,Use of conditional logic to handle different cases,,738,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Encapsulation of functionality in a separate method call,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 11244, 287, 257, 4553, 2446, 869]",0.5,769,best_practice,129,Encapsulation of functionality in a separate method call,,748,            if order.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
✅ Best Practice: Use of min function ensures that the frozen values do not exceed current values,"[26486, 227, 6705, 19939, 25, 5765, 286, 949, 2163, 19047, 326, 262, 12912, 3815, 466, 407, 7074, 1459, 3815]",1.0,792,best_practice,127,Use of min function ensures that the frozen values do not exceed current values,,769,            frozen: float = order.volume - order.traded,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12912, 25, 12178, 796, 1502, 13, 29048, 532, 1502, 13, 2213, 5286]"
✅ Best Practice: Use of min function ensures that the frozen values do not exceed current values,"[26486, 227, 6705, 19939, 25, 5765, 286, 949, 2163, 19047, 326, 262, 12912, 3815, 466, 407, 7074, 1459, 3815]",1.0,813,best_practice,129,Use of min function ensures that the frozen values do not exceed current values,,792,            if order.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
✅ Best Practice: Use of min function ensures that the frozen values do not exceed current values,"[26486, 227, 6705, 19939, 25, 5765, 286, 949, 2163, 19047, 326, 262, 12912, 3815, 466, 407, 7074, 1459, 3815]",1.0,842,best_practice,131,Use of min function ensures that the frozen values do not exceed current values,,813,                    self.short_td_frozen += frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 62, 69, 42005, 15853, 12912]"
✅ Best Practice: Use of min function ensures that the frozen values do not exceed current values,"[26486, 227, 6705, 19939, 25, 5765, 286, 949, 2163, 19047, 326, 262, 12912, 3815, 466, 407, 7074, 1459, 3815]",1.0,871,best_practice,133,Use of min function ensures that the frozen values do not exceed current values,,842,                    self.short_yd_frozen += frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 5173, 62, 69, 42005, 15853, 12912]"
🧠 ML Signal: Calculation of frozen positions could indicate a pattern of interest for ML models,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 12912, 6116, 714, 7603, 257, 3912, 286, 1393, 329, 10373, 4981]",1.0,900,ml_signal,135,Calculation of frozen positions could indicate a pattern of interest for ML models,,871,                    self.short_td_frozen += frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 62, 69, 42005, 15853, 12912]"
🧠 ML Signal: Calculation of frozen positions could indicate a pattern of interest for ML models,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 12912, 6116, 714, 7603, 257, 3912, 286, 1393, 329, 10373, 4981]",1.0,935,ml_signal,137,Calculation of frozen positions could indicate a pattern of interest for ML models,,900,                    if self.short_td_frozen > self.short_td:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 19509, 62, 8671, 62, 69, 42005, 1875, 2116, 13, 19509, 62, 8671, 25]"
"🧠 ML Signal: Checks for specific offset value, indicating a pattern in order processing","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 2176, 11677, 1988, 11, 12739, 257, 3912, 287, 1502, 7587]",1.0,964,ml_signal,135,"Checks for specific offset value, indicating a pattern in order processing",,935,                    self.short_td_frozen += frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 8671, 62, 69, 42005, 15853, 12912]"
"🧠 ML Signal: Differentiates behavior based on direction, useful for learning trading strategies","[8582, 100, 254, 10373, 26484, 25, 20615, 32820, 4069, 1912, 319, 4571, 11, 4465, 329, 4673, 7313, 10064]",0.5,1005,ml_signal,138,"Differentiates behavior based on direction, useful for learning trading strategies",,964,                        self.short_yd_frozen += (self.short_td_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 5173, 62, 69, 42005, 15853, 357, 944, 13, 19509, 62, 8671, 62, 69, 42005]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1060,best_practice,139,Type hinting improves code readability and maintainability,,1005,                                                 - self.short_td),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 2116, 13, 19509, 62, 8671, 8]"
⚠️ SAST Risk (Low): Potential for incorrect logic if pos_available is negative,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 9156, 611, 1426, 62, 15182, 318, 4633]",0.5,1086,sast_risk,146,Potential for incorrect logic if pos_available is negative,Low,1060,                elif order.offset == Offset.CLOSE:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 1502, 13, 28968, 6624, 3242, 2617, 13, 32737, 25]"
✅ Best Practice: Copying objects to avoid unintended side effects,"[26486, 227, 6705, 19939, 25, 6955, 1112, 5563, 284, 3368, 30261, 1735, 3048]",0.5,1127,best_practice,150,Copying objects to avoid unintended side effects,,1086,                        self.long_yd_frozen += (self.long_td_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6511, 62, 5173, 62, 69, 42005, 15853, 357, 944, 13, 6511, 62, 8671, 62, 69, 42005]"
✅ Best Practice: Initializing lists before use,"[26486, 227, 6705, 19939, 25, 20768, 2890, 8341, 878, 779]",0.5,1127,best_practice,155,Initializing lists before use,,1127,,[]
🧠 ML Signal: Conditional logic based on 'req.direction' can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 42180, 13, 37295, 6, 460, 7603, 7313, 4811, 7572, 13]",1.0,1160,ml_signal,163,Conditional logic based on 'req.direction' can indicate trading strategy patterns.,,1127,"        self.short_yd_frozen = min(self.short_yd_frozen, self.short_yd)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19509, 62, 5173, 62, 69, 42005, 796, 949, 7, 944, 13, 19509, 62, 5173, 62, 69, 42005, 11, 2116, 13, 19509, 62, 5173, 8]"
🧠 ML Signal: Use of specific exchanges can indicate market preferences or restrictions.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 14525, 460, 7603, 1910, 15387, 393, 8733, 13]",1.0,1178,ml_signal,170,Use of specific exchanges can indicate market preferences or restrictions.,,1160,        if req.offset == Offset.OPEN:,"[220, 220, 220, 220, 220, 220, 220, 611, 43089, 13, 28968, 6624, 3242, 2617, 13, 3185, 1677, 25]"
🧠 ML Signal: Conditional logic based on 'td_volume' and 'self.exchange' can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 8671, 62, 29048, 6, 290, 705, 944, 13, 1069, 3803, 6, 460, 7603, 7313, 4811, 7572, 13]",1.0,1178,ml_signal,172,Conditional logic based on 'td_volume' and 'self.exchange' can indicate trading strategy patterns.,,1178,,[]
✅ Best Practice: Use of 'copy' to avoid modifying the original request object.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 30073, 6, 284, 3368, 30620, 262, 2656, 2581, 2134, 13]",1.0,1195,best_practice,173,Use of 'copy' to avoid modifying the original request object.,,1178,        if req.direction == Direction.LONG:,"[220, 220, 220, 220, 220, 220, 220, 611, 43089, 13, 37295, 6624, 41837, 13, 43, 18494, 25]"
🧠 ML Signal: Calculation of 'close_volume' and 'open_volume' can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 705, 19836, 62, 29048, 6, 290, 705, 9654, 62, 29048, 6, 460, 7603, 7313, 4811, 7572, 13]",1.0,1195,ml_signal,179,Calculation of 'close_volume' and 'open_volume' can indicate trading strategy patterns.,,1195,,[]
🧠 ML Signal: Conditional logic based on 'yd_available' can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 5173, 62, 15182, 6, 460, 7603, 7313, 4811, 7572, 13]",1.0,1217,ml_signal,183,Conditional logic based on 'yd_available' can indicate trading strategy patterns.,,1195,            req_td: OrderRequest = copy(req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 62, 8671, 25, 8284, 18453, 796, 4866, 7, 42180, 8]"
✅ Best Practice: Use of 'copy' to avoid modifying the original request object.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 30073, 6, 284, 3368, 30620, 262, 2656, 2581, 2134, 13]",1.0,1234,best_practice,185,Use of 'copy' to avoid modifying the original request object.,,1217,            return [req_td],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 685, 42180, 62, 8671, 60]"
🧠 ML Signal: Conditional logic based on 'self.exchange' can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 944, 13, 1069, 3803, 6, 460, 7603, 7313, 4811, 7572, 13]",1.0,1256,ml_signal,187,Conditional logic based on 'self.exchange' can indicate trading strategy patterns.,,1234,            req_list: list[OrderRequest] = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 62, 4868, 25, 1351, 58, 18743, 18453, 60, 796, 17635]"
🧠 ML Signal: Conditional logic based on 'open_volume' can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 9654, 62, 29048, 6, 460, 7603, 7313, 4811, 7572, 13]",1.0,1256,ml_signal,194,Conditional logic based on 'open_volume' can indicate trading strategy patterns.,,1256,,[]
✅ Best Practice: Use of 'copy' to avoid modifying the original request object.,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 30073, 6, 284, 3368, 30620, 262, 2656, 2581, 2134, 13]",1.0,1280,best_practice,196,Use of 'copy' to avoid modifying the original request object.,,1256,            req_yd.offset = Offset.CLOSEYESTERDAY,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 62, 5173, 13, 28968, 796, 3242, 2617, 13, 32737, 43335, 5781, 26442]"
🧠 ML Signal: Conditional logic based on 'req.direction' indicates a pattern of handling different order directions.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 42180, 13, 37295, 6, 9217, 257, 3912, 286, 9041, 1180, 1502, 11678, 13]",1.0,1280,ml_signal,194,Conditional logic based on 'req.direction' indicates a pattern of handling different order directions.,,1280,,[]
🧠 ML Signal: Use of specific exchanges indicates a pattern of handling different market rules.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 14525, 9217, 257, 3912, 286, 9041, 1180, 1910, 3173, 13]",1.0,1290,ml_signal,203,Use of specific exchanges indicates a pattern of handling different market rules.,,1280,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Using 'copy' to duplicate 'req' ensures the original request is not modified.,"[26486, 227, 6705, 19939, 25, 8554, 705, 30073, 6, 284, 23418, 705, 42180, 6, 19047, 262, 2656, 2581, 318, 407, 9518, 13]",1.0,1290,best_practice,210,Using 'copy' to duplicate 'req' ensures the original request is not modified.,,1290,,[]
"⚠️ SAST Risk (Low): Incorrect volume deduction, should be 'volume_left -= close_volume'.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3457, 47315, 6115, 24374, 11, 815, 307, 705, 29048, 62, 9464, 48185, 1969, 62, 29048, 4458]",0.5,1306,sast_risk,234,"Incorrect volume deduction, should be 'volume_left -= close_volume'.",Low,1290,            if open_volume:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1280, 62, 29048, 25]"
✅ Best Practice: Consider adding a class docstring to describe the purpose and usage of the class.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 1398, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398, 13]",1.0,1337,best_practice,245,Consider adding a class docstring to describe the purpose and usage of the class.,,1306,            pos_available: float = self.short_pos - self.short_pos_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1426, 62, 15182, 25, 12178, 796, 2116, 13, 19509, 62, 1930, 532, 2116, 13, 19509, 62, 1930, 62, 69, 42005]"
✅ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,1369,best_practice,247,Initialize instance variables in the constructor for clarity and maintainability,,1337,            yd_available: float = self.short_yd - self.short_yd_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 67, 62, 15182, 25, 12178, 796, 2116, 13, 19509, 62, 5173, 532, 2116, 13, 19509, 62, 5173, 62, 69, 42005]"
🧠 ML Signal: Usage of dependency injection pattern with oms_engine,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 20203, 16954, 3912, 351, 267, 907, 62, 18392]",0.5,1398,ml_signal,249,Usage of dependency injection pattern with oms_engine,,1369,            pos_available = self.long_pos - self.long_pos_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1426, 62, 15182, 796, 2116, 13, 6511, 62, 1930, 532, 2116, 13, 6511, 62, 1930, 62, 69, 42005]"
🧠 ML Signal: Storing a method reference from another object,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 2446, 4941, 422, 1194, 2134]",0.5,1427,ml_signal,250,Storing a method reference from another object,,1398,            td_available = self.long_td - self.long_td_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41560, 62, 15182, 796, 2116, 13, 6511, 62, 8671, 532, 2116, 13, 6511, 62, 8671, 62, 69, 42005]"
✅ Best Practice: Check if conversion is required before proceeding with the update,"[26486, 227, 6705, 19939, 25, 6822, 611, 11315, 318, 2672, 878, 18788, 351, 262, 4296]",1.0,1457,best_practice,251,Check if conversion is required before proceeding with the update,,1427,            yd_available = self.long_yd - self.long_yd_frozen,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 67, 62, 15182, 796, 2116, 13, 6511, 62, 5173, 532, 2116, 13, 6511, 62, 5173, 62, 69, 42005]"
🧠 ML Signal: Use of type hinting for variable declaration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 9254, 278, 329, 7885, 14305]",0.5,1481,ml_signal,254,Use of type hinting for variable declaration,,1457,"        if req.exchange in {Exchange.SHFE, Exchange.INE}:","[220, 220, 220, 220, 220, 220, 220, 611, 43089, 13, 1069, 3803, 287, 1391, 3109, 3803, 13, 9693, 15112, 11, 12516, 13, 8881, 38362]"
✅ Best Practice: Update existing holding only if it exists,"[26486, 227, 6705, 19939, 25, 10133, 4683, 4769, 691, 611, 340, 7160]",0.5,1481,best_practice,257,Update existing holding only if it exists,,1481,,[]
"🧠 ML Signal: Checks for a condition before proceeding, indicating a decision point in the code.","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 257, 4006, 878, 18788, 11, 12739, 257, 2551, 966, 287, 262, 2438, 13]",1.0,1497,ml_signal,258,"Checks for a condition before proceeding, indicating a decision point in the code.",,1481,            if td_available:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 41560, 62, 15182, 25]"
"🧠 ML Signal: Type hinting for variable, useful for understanding data flow and types.","[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 7885, 11, 4465, 329, 4547, 1366, 5202, 290, 3858, 13]",1.0,1497,ml_signal,261,"Type hinting for variable, useful for understanding data flow and types.",,1497,,[]
"🧠 ML Signal: Conditional logic to handle optional data, indicating a pattern of handling None values.","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 11902, 1366, 11, 12739, 257, 3912, 286, 9041, 6045, 3815, 13]",1.0,1526,ml_signal,263,"Conditional logic to handle optional data, indicating a pattern of handling None values.",,1497,                td_req.offset = Offset.CLOSETODAY,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41560, 62, 42180, 13, 28968, 796, 3242, 2617, 13, 5097, 2640, 2767, 3727, 4792]"
"🧠 ML Signal: Method call on an object, indicating object-oriented design and behavior.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11, 12739, 2134, 12, 17107, 1486, 290, 4069, 13]",1.0,1550,ml_signal,265,"Method call on an object, indicating object-oriented design and behavior.",,1526,                reqs.append(td_req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 82, 13, 33295, 7, 8671, 62, 42180, 8]"
✅ Best Practice: Check if conversion is required before proceeding with the update,"[26486, 227, 6705, 19939, 25, 6822, 611, 11315, 318, 2672, 878, 18788, 351, 262, 4296]",0.5,1574,best_practice,265,Check if conversion is required before proceeding with the update,,1550,                reqs.append(td_req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 82, 13, 33295, 7, 8671, 62, 42180, 8]"
🧠 ML Signal: Usage of type hinting for variable 'holding',"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 19216, 6]",0.5,1606,ml_signal,268,Usage of type hinting for variable 'holding',,1574,"                yd_volume: float = min(yd_available, volume_left)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 67, 62, 29048, 25, 12178, 796, 949, 7, 5173, 62, 15182, 11, 6115, 62, 9464, 8]"
✅ Best Practice: Check if 'holding' is not None before calling update_order,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 19216, 6, 318, 407, 6045, 878, 4585, 4296, 62, 2875]",0.5,1606,best_practice,270,Check if 'holding' is not None before calling update_order,,1606,,[]
✅ Best Practice: Check if conversion is required before proceeding with the update,"[26486, 227, 6705, 19939, 25, 6822, 611, 11315, 318, 2672, 878, 18788, 351, 262, 4296]",0.5,1635,best_practice,272,Check if conversion is required before proceeding with the update,,1606,                yd_req.offset = Offset.CLOSEYESTERDAY,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 67, 62, 42180, 13, 28968, 796, 3242, 2617, 13, 32737, 43335, 5781, 26442]"
🧠 ML Signal: Usage of type hinting for variable 'holding',"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 19216, 6]",0.5,1635,ml_signal,275,Usage of type hinting for variable 'holding',,1635,,[]
🧠 ML Signal: Method call on an object if it exists,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 611, 340, 7160]",0.5,1635,ml_signal,278,Method call on an object if it exists,,1635,,[]
🧠 ML Signal: Accessing a dictionary with a default value pattern,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 351, 257, 4277, 1988, 3912]",0.5,1661,ml_signal,279,Accessing a dictionary with a default value pattern,,1635,                open_req: OrderRequest = copy(req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 62, 42180, 25, 8284, 18453, 796, 4866, 7, 42180, 8]"
🧠 ML Signal: Conditional logic to handle missing data,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 4814, 1366]",1.0,1685,ml_signal,282,Conditional logic to handle missing data,,1661,                reqs.append(open_req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 82, 13, 33295, 7, 9654, 62, 42180, 8]"
🧠 ML Signal: Object instantiation based on condition,"[8582, 100, 254, 10373, 26484, 25, 9515, 9113, 3920, 1912, 319, 4006]",1.0,1699,ml_signal,285,Object instantiation based on condition,,1685,        # Just use close for other exchanges,"[220, 220, 220, 220, 220, 220, 220, 1303, 2329, 779, 1969, 329, 584, 14525]"
🧠 ML Signal: Updating a dictionary with new data,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 257, 22155, 351, 649, 1366]",0.5,1708,ml_signal,286,Updating a dictionary with new data,,1699,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Check if conversion is required before proceeding with further logic,"[26486, 227, 6705, 19939, 25, 6822, 611, 11315, 318, 2672, 878, 18788, 351, 2252, 9156]",1.0,1708,best_practice,293,Check if conversion is required before proceeding with further logic,,1708,,[]
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1732,best_practice,296,Type hinting improves code readability and maintainability,,1708,                close_req.volume = close_volume,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1969, 62, 42180, 13, 29048, 796, 1969, 62, 29048]"
✅ Best Practice: Use of elif for mutually exclusive conditions improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1288, 361, 329, 26519, 8568, 3403, 19575, 1100, 1799]",1.0,1754,best_practice,300,Use of elif for mutually exclusive conditions improves readability,,1732,                open_volume = volume_left,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1280, 62, 29048, 796, 6115, 62, 9464]"
✅ Best Practice: Use of set for membership test is efficient,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 329, 9931, 1332, 318, 6942]",1.0,1778,best_practice,305,Use of set for membership test is efficient,,1754,                reqs.append(open_req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 43089, 82, 13, 33295, 7, 9654, 62, 42180, 8]"
🧠 ML Signal: Usage of type hinting for function return and parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 2163, 1441, 290, 10007]",0.5,1785,ml_signal,310,Usage of type hinting for function return and parameters,,1778,class OffsetConverter:,"[4871, 3242, 2617, 3103, 332, 353, 25]"
⚠️ SAST Risk (Low): Potential None dereference if get_contract returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 390, 35790, 611, 651, 62, 28484, 5860, 6045]",0.5,1785,sast_risk,312,Potential None dereference if get_contract returns None,Low,1785,,[]

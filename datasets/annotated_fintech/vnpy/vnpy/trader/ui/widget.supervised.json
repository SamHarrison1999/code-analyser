[
  {
    "line": 37,
    "text": "from ..setting import SETTING_FILENAME, SETTINGS",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QColor for UI element coloring",
    "confidence": 0.5,
    "tokens": [
      6738,
      11485,
      33990,
      1330,
      25823,
      48996,
      62,
      46700,
      1677,
      10067,
      11,
      25823,
      51,
      20754
    ],
    "start_token": 0,
    "end_token": 14,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1195,
      10258,
      329,
      12454,
      5002,
      33988
    ],
    "label": "ml_signal",
    "reason": "Usage of QColor for UI element coloring"
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QColor for UI element coloring",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 14,
    "end_token": 14,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1195,
      10258,
      329,
      12454,
      5002,
      33988
    ],
    "label": "ml_signal",
    "reason": "Usage of QColor for UI element coloring"
  },
  {
    "line": 41,
    "text": "COLOR_LONG = QtGui.QColor(\"red\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QColor for UI element coloring",
    "confidence": 0.5,
    "tokens": [
      46786,
      62,
      43,
      18494,
      796,
      33734,
      8205,
      72,
      13,
      48,
      10258,
      7203,
      445,
      4943
    ],
    "start_token": 14,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1195,
      10258,
      329,
      12454,
      5002,
      33988
    ],
    "label": "ml_signal",
    "reason": "Usage of QColor for UI element coloring"
  },
  {
    "line": 43,
    "text": "COLOR_BID = QtGui.QColor(255, 174, 201)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QColor for UI element coloring",
    "confidence": 0.5,
    "tokens": [
      46786,
      62,
      33,
      2389,
      796,
      33734,
      8205,
      72,
      13,
      48,
      10258,
      7,
      13381,
      11,
      27621,
      11,
      580,
      8
    ],
    "start_token": 28,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1195,
      10258,
      329,
      12454,
      5002,
      33988
    ],
    "label": "ml_signal",
    "reason": "Usage of QColor for UI element coloring"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QColor for UI element coloring",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 46,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1195,
      10258,
      329,
      12454,
      5002,
      33988
    ],
    "label": "ml_signal",
    "reason": "Usage of QColor for UI element coloring"
  },
  {
    "line": 43,
    "text": "COLOR_BID = QtGui.QColor(255, 174, 201)",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the class",
    "confidence": 0.5,
    "tokens": [
      46786,
      62,
      33,
      2389,
      796,
      33734,
      8205,
      72,
      13,
      48,
      10258,
      7,
      13381,
      11,
      27621,
      11,
      580,
      8
    ],
    "start_token": 46,
    "end_token": 64,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the class"
  },
  {
    "line": 49,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Initialize instance variables with default values for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 64,
    "end_token": 68,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      351,
      4277,
      3815,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables with default values for clarity and maintainability."
  },
  {
    "line": 51,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hinting improves code readability and helps with static analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 68,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5419,
      351,
      9037,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting improves code readability and helps with static analysis."
  },
  {
    "line": 53,
    "text": "    def __init__(self, content: Any, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Use of QtCore.Qt.AlignmentFlag.AlignCenter improves readability by using descriptive constants.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      4377,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 72,
    "end_token": 93,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33734,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      23656,
      19575,
      1100,
      1799,
      416,
      1262,
      35644,
      38491,
      13
    ],
    "label": "best_practice",
    "reason": "Use of QtCore.Qt.AlignmentFlag.AlignCenter improves readability by using descriptive constants."
  },
  {
    "line": 54,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern with specific parameters can be used to identify usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 93,
    "end_token": 103,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      351,
      2176,
      10007,
      460,
      307,
      973,
      284,
      5911,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call pattern with specific parameters can be used to identify usage patterns."
  },
  {
    "line": 57,
    "text": "        self._text: str = \"\"",
    "annotation": "\u2705 Best Practice: Convert content to string to ensure consistent text handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5239,
      25,
      965,
      796,
      13538
    ],
    "start_token": 103,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      2695,
      284,
      4731,
      284,
      4155,
      6414,
      2420,
      9041
    ],
    "label": "best_practice",
    "reason": "Convert content to string to ensure consistent text handling"
  },
  {
    "line": 59,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing data in an instance variable for later use",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      287,
      281,
      4554,
      7885,
      329,
      1568,
      779
    ],
    "label": "ml_signal",
    "reason": "Storing data in an instance variable for later use"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update UI or internal state with new text",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      12454,
      393,
      5387,
      1181,
      351,
      649,
      2420
    ],
    "label": "ml_signal",
    "reason": "Method call to update UI or internal state with new text"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 66,
    "text": "        Set text content.",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a private attribute, which may indicate a pattern of encapsulation or data hiding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5345,
      2420,
      2695,
      13
    ],
    "start_token": 117,
    "end_token": 128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2839,
      11688,
      11,
      543,
      743,
      7603,
      257,
      3912,
      286,
      32652,
      1741,
      393,
      1366,
      11816
    ],
    "label": "ml_signal",
    "reason": "Accessing a private attribute, which may indicate a pattern of encapsulation or data hiding"
  },
  {
    "line": 65,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 128,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type for better readability and maintainability"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of comparison magic method to define custom sorting behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 136,
    "end_token": 136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7208,
      5536,
      2446,
      284,
      8160,
      2183,
      29407,
      4069
    ],
    "label": "ml_signal",
    "reason": "Usage of comparison magic method to define custom sorting behavior"
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a temporary variable for clarity and debugging purposes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 136,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      8584,
      7885,
      329,
      16287,
      290,
      28769,
      4959
    ],
    "label": "best_practice",
    "reason": "Use a temporary variable for clarity and debugging purposes"
  },
  {
    "line": 75,
    "text": "        Get data object.",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      1366,
      2134,
      13
    ],
    "start_token": 136,
    "end_token": 147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's __init__ method",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 147,
    "end_token": 147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's __init__ method"
  },
  {
    "line": 79,
    "text": "    def __lt__(self, other: \"BaseCell\") -> bool:        # type: ignore",
    "annotation": "\u2705 Best Practice: Type hints are used for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2528,
      834,
      7,
      944,
      11,
      584,
      25,
      366,
      14881,
      28780,
      4943,
      4613,
      20512,
      25,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2099,
      25,
      8856
    ],
    "start_token": 147,
    "end_token": 177,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      389,
      973,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type hints are used for function parameters and return type"
  },
  {
    "line": 84,
    "text": "        return result",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential AttributeError if 'content' does not have 'value' attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1255
    ],
    "start_token": 177,
    "end_token": 186,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3460,
      4163,
      12331,
      611,
      705,
      11299,
      6,
      857,
      407,
      423,
      705,
      8367,
      6,
      11688
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential AttributeError if 'content' does not have 'value' attribute"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of superclass method with modified parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 186,
    "end_token": 186,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2208,
      4871,
      2446,
      351,
      9518,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of superclass method with modified parameters"
  },
  {
    "line": 88,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 186,
    "end_token": 190,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose."
  },
  {
    "line": 90,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 190,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Constructor method with parameters, indicating object initialization pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 194,
    "end_token": 194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      273,
      2446,
      351,
      10007,
      11,
      12739,
      2134,
      37588,
      3912
    ],
    "label": "ml_signal",
    "reason": "Constructor method with parameters, indicating object initialization pattern"
  },
  {
    "line": 92,
    "text": "    def __init__(self, content: Enum, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's constructor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      2039,
      388,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 194,
    "end_token": 216,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      23772
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's constructor"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper initialization or behavior extension",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 216,
    "end_token": 216,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588,
      393,
      4069,
      7552
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper initialization or behavior extension"
  },
  {
    "line": 97,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on 'content' value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 216,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      705,
      11299,
      6,
      1988
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on 'content' value"
  },
  {
    "line": 99,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific color for a particular condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 224,
    "end_token": 232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      3124,
      329,
      257,
      1948,
      4006
    ],
    "label": "ml_signal",
    "reason": "Usage of specific color for a particular condition"
  },
  {
    "line": 101,
    "text": "            super().set_content(content.value, data)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific color for a different condition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      2617,
      62,
      11299,
      7,
      11299,
      13,
      8367,
      11,
      1366,
      8
    ],
    "start_token": 232,
    "end_token": 255,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      3124,
      329,
      257,
      1180,
      4006
    ],
    "label": "ml_signal",
    "reason": "Usage of specific color for a different condition"
  },
  {
    "line": 101,
    "text": "            super().set_content(content.value, data)",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      2617,
      62,
      11299,
      7,
      11299,
      13,
      8367,
      11,
      1366,
      8
    ],
    "start_token": 255,
    "end_token": 278,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose."
  },
  {
    "line": 106,
    "text": "    Cell used for showing direction data.",
    "annotation": "\u2705 Best Practice: Call to super() ensures proper initialization of the base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12440,
      973,
      329,
      4478,
      4571,
      1366,
      13
    ],
    "start_token": 278,
    "end_token": 288,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Call to super() ensures proper initialization of the base class"
  },
  {
    "line": 108,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setForeground method indicates UI customization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 288,
    "end_token": 288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      16351,
      2833,
      2446,
      9217,
      12454,
      31344
    ],
    "label": "ml_signal",
    "reason": "Usage of setForeground method indicates UI customization"
  },
  {
    "line": 109,
    "text": "    def __init__(self, content: Enum, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      2039,
      388,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 288,
    "end_token": 310,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the class"
  },
  {
    "line": 114,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Call to super() ensures proper initialization of the base class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 310,
    "end_token": 318,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Call to super() ensures proper initialization of the base class"
  },
  {
    "line": 116,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self to set instance attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 318,
    "end_token": 326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      284,
      900,
      4554,
      12608
    ],
    "label": "ml_signal",
    "reason": "Usage of self to set instance attributes"
  },
  {
    "line": 120,
    "text": "            self.setForeground(COLOR_SHORT)",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      16351,
      2833,
      7,
      46786,
      62,
      9693,
      9863,
      8
    ],
    "start_token": 326,
    "end_token": 348,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 121,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Type hints for parameters and return value improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 348,
    "end_token": 357,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      329,
      10007,
      290,
      1441,
      1988,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hints for parameters and return value improve code readability and maintainability."
  },
  {
    "line": 123,
    "text": "",
    "annotation": "\u2705 Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 357,
    "end_token": 357,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Calling the superclass's __init__ method ensures proper initialization of inherited attributes."
  },
  {
    "line": 128,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures base functionality is preserved",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 357,
    "end_token": 361,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      2779,
      11244,
      318,
      17232
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures base functionality is preserved"
  },
  {
    "line": 130,
    "text": "    def __init__(self, content: Any, data: Any) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a string starts with a specific character",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      4377,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 361,
    "end_token": 382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      4731,
      4940,
      351,
      257,
      2176,
      2095
    ],
    "label": "ml_signal",
    "reason": "Checking if a string starts with a specific character"
  },
  {
    "line": 132,
    "text": "        super().__init__(content, data)",
    "annotation": "\ud83e\udde0 ML Signal: Setting a color based on a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      11299,
      11,
      1366,
      8
    ],
    "start_token": 382,
    "end_token": 399,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      3124,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Setting a color based on a condition"
  },
  {
    "line": 134,
    "text": "        self.setForeground(COLOR_BID)",
    "annotation": "\ud83e\udde0 ML Signal: Setting a color based on a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      16351,
      2833,
      7,
      46786,
      62,
      33,
      2389,
      8
    ],
    "start_token": 399,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      3124,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Setting a color based on a condition"
  },
  {
    "line": 133,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class definition indicating a custom cell for time display",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 417,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      12739,
      257,
      2183,
      2685,
      329,
      640,
      3359
    ],
    "label": "ml_signal",
    "reason": "Class definition indicating a custom cell for time display"
  },
  {
    "line": 138,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of timezone information for localization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 417,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      640,
      11340,
      1321,
      329,
      42842
    ],
    "label": "ml_signal",
    "reason": "Use of timezone information for localization"
  },
  {
    "line": 139,
    "text": "    Cell used for showing ask price and volume.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential timezone-related issues if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12440,
      973,
      329,
      4478,
      1265,
      2756,
      290,
      6115,
      13
    ],
    "start_token": 421,
    "end_token": 433,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      11340,
      12,
      5363,
      2428,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential timezone-related issues if not handled properly"
  },
  {
    "line": 139,
    "text": "    Cell used for showing ask price and volume.",
    "annotation": "\u2705 Best Practice: Type hints for parameters and return value improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12440,
      973,
      329,
      4478,
      1265,
      2756,
      290,
      6115,
      13
    ],
    "start_token": 433,
    "end_token": 445,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      329,
      10007,
      290,
      1441,
      1988,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hints for parameters and return value improve code readability and maintainability."
  },
  {
    "line": 141,
    "text": "",
    "annotation": "\u2705 Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 445,
    "end_token": 445,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Calling the superclass's __init__ method ensures proper initialization of inherited attributes."
  },
  {
    "line": 143,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Check for None to handle optional content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 445,
    "end_token": 455,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      5412,
      11902,
      2695
    ],
    "label": "best_practice",
    "reason": "Check for None to handle optional content"
  },
  {
    "line": 146,
    "text": "        self.setForeground(COLOR_ASK)",
    "annotation": "\u2705 Best Practice: Convert datetime to local timezone for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      16351,
      2833,
      7,
      46786,
      62,
      1921,
      42,
      8
    ],
    "start_token": 455,
    "end_token": 473,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4818,
      8079,
      284,
      1957,
      640,
      11340,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Convert datetime to local timezone for consistency"
  },
  {
    "line": 148,
    "text": "",
    "annotation": "\u2705 Best Practice: Use type annotation for clarity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 473,
    "end_token": 473,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      23025,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use type annotation for clarity"
  },
  {
    "line": 149,
    "text": "class PnlCell(BaseCell):",
    "annotation": "\u2705 Best Practice: Use type annotation for clarity",
    "confidence": 0.5,
    "tokens": [
      4871,
      350,
      21283,
      28780,
      7,
      14881,
      28780,
      2599
    ],
    "start_token": 473,
    "end_token": 481,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      23025,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use type annotation for clarity"
  },
  {
    "line": 153,
    "text": "",
    "annotation": "\u2705 Best Practice: Use f-string for readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 481,
    "end_token": 481,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use f-string for readability"
  },
  {
    "line": 155,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Use f-string for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 481,
    "end_token": 491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use f-string for readability"
  },
  {
    "line": 158,
    "text": "    def set_content(self, content: Any, data: Any) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on self object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      11299,
      7,
      944,
      11,
      2695,
      25,
      4377,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 491,
    "end_token": 512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      2116,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on self object"
  },
  {
    "line": 160,
    "text": "        Cell color is set based on whether pnl is",
    "annotation": "\ud83e\udde0 ML Signal: Attribute assignment pattern on self object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12440,
      3124,
      318,
      900,
      1912,
      319,
      1771,
      279,
      21283,
      318
    ],
    "start_token": 512,
    "end_token": 529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3460,
      4163,
      16237,
      3912,
      319,
      2116,
      2134
    ],
    "label": "ml_signal",
    "reason": "Attribute assignment pattern on self object"
  },
  {
    "line": 155,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 529,
    "end_token": 539,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose."
  },
  {
    "line": 158,
    "text": "    def set_content(self, content: Any, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      11299,
      7,
      944,
      11,
      2695,
      25,
      4377,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 539,
    "end_token": 560,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability"
  },
  {
    "line": 161,
    "text": "        positive or negative.",
    "annotation": "\u2705 Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3967,
      393,
      4633,
      13
    ],
    "start_token": 560,
    "end_token": 571,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608
    ],
    "label": "best_practice",
    "reason": "Calling the superclass's __init__ method ensures proper initialization of inherited attributes"
  },
  {
    "line": 163,
    "text": "        super().set_content(content, data)",
    "annotation": "\u2705 Best Practice: Check for None to avoid processing invalid content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      2617,
      62,
      11299,
      7,
      11299,
      11,
      1366,
      8
    ],
    "start_token": 571,
    "end_token": 588,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      3368,
      7587,
      12515,
      2695
    ],
    "label": "best_practice",
    "reason": "Check for None to avoid processing invalid content"
  },
  {
    "line": 166,
    "text": "            self.setForeground(COLOR_SHORT)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes content has a strftime method, which may not be true for all types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      16351,
      2833,
      7,
      46786,
      62,
      9693,
      9863,
      8
    ],
    "start_token": 588,
    "end_token": 610,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2695,
      468,
      257,
      965,
      31387,
      2446,
      11,
      543,
      743,
      407,
      307,
      2081,
      329,
      477,
      3858
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes content has a strftime method, which may not be true for all types"
  },
  {
    "line": 168,
    "text": "            self.setForeground(COLOR_LONG)",
    "annotation": "\ud83e\udde0 ML Signal: Storing data in an instance variable, indicating stateful behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      16351,
      2833,
      7,
      46786,
      62,
      43,
      18494,
      8
    ],
    "start_token": 610,
    "end_token": 632,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      287,
      281,
      4554,
      7885,
      11,
      12739,
      1181,
      913,
      4069
    ],
    "label": "ml_signal",
    "reason": "Storing data in an instance variable, indicating stateful behavior"
  },
  {
    "line": 171,
    "text": "class TimeCell(BaseCell):",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      4871,
      3862,
      28780,
      7,
      14881,
      28780,
      2599
    ],
    "start_token": 632,
    "end_token": 639,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 173,
    "text": "    Cell used for showing time string from datetime object.",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12440,
      973,
      329,
      4478,
      640,
      4731,
      422,
      4818,
      8079,
      2134,
      13
    ],
    "start_token": 639,
    "end_token": 653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      37588,
      286,
      19552,
      12608
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper initialization of inherited attributes"
  },
  {
    "line": 175,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QtCore.Qt.AlignmentFlag for setting text alignment",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 653,
    "end_token": 653,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      33734,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      329,
      4634,
      2420,
      19114
    ],
    "label": "ml_signal",
    "reason": "Usage of QtCore.Qt.AlignmentFlag for setting text alignment"
  },
  {
    "line": 175,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 653,
    "end_token": 653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 180,
    "text": "        super().__init__(content, data)",
    "annotation": "\u2705 Best Practice: Type annotations for class attributes improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      11299,
      11,
      1366,
      8
    ],
    "start_token": 653,
    "end_token": 670,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      1398,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type annotations for class attributes improve code readability and maintainability"
  },
  {
    "line": 184,
    "text": "        if content is None:",
    "annotation": "\u2705 Best Practice: Using a dictionary for headers allows for flexible key-value storage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2695,
      318,
      6045,
      25
    ],
    "start_token": 670,
    "end_token": 682,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      22155,
      329,
      24697,
      3578,
      329,
      12846,
      1994,
      12,
      8367,
      6143
    ],
    "label": "best_practice",
    "reason": "Using a dictionary for headers allows for flexible key-value storage"
  },
  {
    "line": 186,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly initializing a signal with a potentially mutable event type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 682,
    "end_token": 682,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      4238,
      2890,
      257,
      6737,
      351,
      257,
      6196,
      4517,
      540,
      1785,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly initializing a signal with a potentially mutable event type"
  },
  {
    "line": 187,
    "text": "        content = content.astimezone(self.local_tz)",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2695,
      796,
      2695,
      13,
      459,
      524,
      11340,
      7,
      944,
      13,
      12001,
      62,
      22877,
      8
    ],
    "start_token": 682,
    "end_token": 703,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability"
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 703,
    "end_token": 703,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability"
  },
  {
    "line": 191,
    "text": "        if millisecond:",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      33606,
      623,
      25
    ],
    "start_token": 703,
    "end_token": 714,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability"
  },
  {
    "line": 193,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Method calls in the constructor can indicate initialization patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 714,
    "end_token": 723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      287,
      262,
      23772,
      460,
      7603,
      37588,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method calls in the constructor can indicate initialization patterns"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method calls in the constructor can indicate initialization patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 723,
    "end_token": 723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      287,
      262,
      23772,
      460,
      7603,
      37588,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method calls in the constructor can indicate initialization patterns"
  },
  {
    "line": 197,
    "text": "        self._data = data",
    "annotation": "\ud83e\udde0 ML Signal: Method calls in the constructor can indicate initialization patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      1366
    ],
    "start_token": 723,
    "end_token": 735,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      287,
      262,
      23772,
      460,
      7603,
      37588,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method calls in the constructor can indicate initialization patterns"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose of the method.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 735,
    "end_token": 735,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose of the method."
  },
  {
    "line": 197,
    "text": "        self._data = data",
    "annotation": "\u2705 Best Practice: Ensure init_table is defined elsewhere in the class.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      1366
    ],
    "start_token": 735,
    "end_token": 747,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      2315,
      62,
      11487,
      318,
      5447,
      8057,
      287,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure init_table is defined elsewhere in the class."
  },
  {
    "line": 198,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensure init_menu is defined elsewhere in the class.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 747,
    "end_token": 747,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      2315,
      62,
      26272,
      318,
      5447,
      8057,
      287,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure init_menu is defined elsewhere in the class."
  },
  {
    "line": 201,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method for initializing UI components",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 747,
    "end_token": 751,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      4238,
      2890,
      12454,
      6805
    ],
    "label": "ml_signal",
    "reason": "Method for initializing UI components"
  },
  {
    "line": 203,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Extracting display labels from a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 751,
    "end_token": 755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      3359,
      14722,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Extracting display labels from a dictionary"
  },
  {
    "line": 205,
    "text": "    def __init__(self, content: Any, data: Any) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Setting UI component labels",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      4377,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 755,
    "end_token": 776,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      12454,
      7515,
      14722
    ],
    "label": "ml_signal",
    "reason": "Setting UI component labels"
  },
  {
    "line": 207,
    "text": "        super().__init__(content, data)",
    "annotation": "\ud83e\udde0 ML Signal: Customizing UI component visibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      11299,
      11,
      1366,
      8
    ],
    "start_token": 776,
    "end_token": 793,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      2890,
      12454,
      7515,
      20742
    ],
    "label": "ml_signal",
    "reason": "Customizing UI component visibility"
  },
  {
    "line": 209,
    "text": "    def set_content(self, content: Any, data: Any) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Configuring UI component editability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      11299,
      7,
      944,
      11,
      2695,
      25,
      4377,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 793,
    "end_token": 814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17056,
      870,
      12454,
      7515,
      4370,
      1799
    ],
    "label": "ml_signal",
    "reason": "Configuring UI component editability"
  },
  {
    "line": 212,
    "text": "            return",
    "annotation": "\ud83e\udde0 ML Signal: Enabling alternating row colors in UI",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 814,
    "end_token": 826,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2039,
      11716,
      39623,
      5752,
      7577,
      287,
      12454
    ],
    "label": "ml_signal",
    "reason": "Enabling alternating row colors in UI"
  },
  {
    "line": 213,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Enabling sorting in UI component",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 826,
    "end_token": 826,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2039,
      11716,
      29407,
      287,
      12454,
      7515
    ],
    "label": "ml_signal",
    "reason": "Enabling sorting in UI component"
  },
  {
    "line": 212,
    "text": "            return",
    "annotation": "\u2705 Best Practice: Type hinting for self.menu improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 826,
    "end_token": 838,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2116,
      13,
      26272,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for self.menu improves code readability and maintainability"
  },
  {
    "line": 214,
    "text": "        self.setText(content.strftime(\"%Y-%m-%d\"))",
    "annotation": "\u2705 Best Practice: Type hinting for resize_action improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      8206,
      7,
      11299,
      13,
      2536,
      31387,
      7203,
      4,
      56,
      12,
      4,
      76,
      12,
      4,
      67,
      48774
    ],
    "start_token": 838,
    "end_token": 864,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      47558,
      62,
      2673,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for resize_action improves code readability and maintainability"
  },
  {
    "line": 216,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of signal-slot connection pattern in PyQt",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 864,
    "end_token": 864,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6737,
      12,
      43384,
      4637,
      3912,
      287,
      9485,
      48,
      83
    ],
    "label": "ml_signal",
    "reason": "Usage of signal-slot connection pattern in PyQt"
  },
  {
    "line": 218,
    "text": "class MsgCell(BaseCell):",
    "annotation": "\ud83e\udde0 ML Signal: Adding actions to a menu, common GUI pattern",
    "confidence": 1.0,
    "tokens": [
      4871,
      6997,
      70,
      28780,
      7,
      14881,
      28780,
      2599
    ],
    "start_token": 864,
    "end_token": 872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      4028,
      284,
      257,
      6859,
      11,
      2219,
      25757,
      3912
    ],
    "label": "ml_signal",
    "reason": "Adding actions to a menu, common GUI pattern"
  },
  {
    "line": 220,
    "text": "    Cell used for showing msg data.",
    "annotation": "\u2705 Best Practice: Type hinting for save_action improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      12440,
      973,
      329,
      4478,
      31456,
      1366,
      13
    ],
    "start_token": 872,
    "end_token": 882,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      3613,
      62,
      2673,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for save_action improves code readability and maintainability"
  },
  {
    "line": 223,
    "text": "    def __init__(self, content: str, data: Any) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of signal-slot connection pattern in PyQt",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      965,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 882,
    "end_token": 903,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6737,
      12,
      43384,
      4637,
      3912,
      287,
      9485,
      48,
      83
    ],
    "label": "ml_signal",
    "reason": "Usage of signal-slot connection pattern in PyQt"
  },
  {
    "line": 224,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Adding actions to a menu, common GUI pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 903,
    "end_token": 913,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      4028,
      284,
      257,
      6859,
      11,
      2219,
      25757,
      3912
    ],
    "label": "ml_signal",
    "reason": "Adding actions to a menu, common GUI pattern"
  },
  {
    "line": 223,
    "text": "    def __init__(self, content: str, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Check if self.event_type is not None before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2695,
      25,
      965,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 913,
    "end_token": 934,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2116,
      13,
      15596,
      62,
      4906,
      318,
      407,
      6045,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if self.event_type is not None before proceeding"
  },
  {
    "line": 225,
    "text": "        super().__init__(content, data)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of signal-slot pattern for event handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      11299,
      11,
      1366,
      8
    ],
    "start_token": 934,
    "end_token": 951,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6737,
      12,
      43384,
      3912,
      329,
      1785,
      9041
    ],
    "label": "ml_signal",
    "reason": "Usage of signal-slot pattern for event handling"
  },
  {
    "line": 227,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Registering an event type with a callback function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 951,
    "end_token": 951,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      281,
      1785,
      2099,
      351,
      257,
      23838,
      2163
    ],
    "label": "ml_signal",
    "reason": "Registering an event type with a callback function"
  },
  {
    "line": 230,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Check if sorting is enabled before disabling it to avoid unnecessary operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 951,
    "end_token": 955,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      29407,
      318,
      9343,
      878,
      34909,
      340,
      284,
      3368,
      13114,
      4560
    ],
    "label": "best_practice",
    "reason": "Check if sorting is enabled before disabling it to avoid unnecessary operations"
  },
  {
    "line": 234,
    "text": "    event_type: str = \"\"",
    "annotation": "\u2705 Best Practice: Use of a clear conditional structure to handle different cases of data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1785,
      62,
      4906,
      25,
      965,
      796,
      13538
    ],
    "start_token": 955,
    "end_token": 965,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      1598,
      26340,
      4645,
      284,
      5412,
      1180,
      2663,
      286,
      1366,
      7587
    ],
    "label": "best_practice",
    "reason": "Use of a clear conditional structure to handle different cases of data processing"
  },
  {
    "line": 238,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of dynamic attribute access with __getattribute__",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 965,
    "end_token": 965,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8925,
      11688,
      1895,
      351,
      11593,
      1136,
      42348,
      834
    ],
    "label": "ml_signal",
    "reason": "Use of dynamic attribute access with __getattribute__"
  },
  {
    "line": 240,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking for existence of a key in a collection",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 965,
    "end_token": 965,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      6224,
      286,
      257,
      1994,
      287,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Checking for existence of a key in a collection"
  },
  {
    "line": 244,
    "text": "",
    "annotation": "\u2705 Best Practice: Re-enable sorting if it was initially enabled",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 965,
    "end_token": 965,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      797,
      12,
      21633,
      29407,
      611,
      340,
      373,
      7317,
      9343
    ],
    "label": "best_practice",
    "reason": "Re-enable sorting if it was initially enabled"
  },
  {
    "line": 247,
    "text": "        self.cells: dict[str, dict] = {}",
    "annotation": "\u2705 Best Practice: Use of self.insertRow to add a new row at a specific position",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46342,
      25,
      8633,
      58,
      2536,
      11,
      8633,
      60,
      796,
      23884
    ],
    "start_token": 965,
    "end_token": 984,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      13,
      28463,
      25166,
      284,
      751,
      257,
      649,
      5752,
      379,
      257,
      2176,
      2292
    ],
    "label": "best_practice",
    "reason": "Use of self.insertRow to add a new row at a specific position"
  },
  {
    "line": 250,
    "text": "        self.load_setting()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over headers to dynamically process data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2220,
      62,
      33990,
      3419
    ],
    "start_token": 984,
    "end_token": 997,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      24697,
      284,
      32366,
      1429,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over headers to dynamically process data"
  },
  {
    "line": 253,
    "text": "    def init_ui(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of __getattribute__ can lead to security risks if not controlled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      9019,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 997,
    "end_token": 1010,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      11593,
      1136,
      42348,
      834,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6856
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of __getattribute__ can lead to security risks if not controlled"
  },
  {
    "line": 255,
    "text": "        self.init_table()",
    "annotation": "\u2705 Best Practice: Use of QtWidgets.QTableWidgetItem to create table items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15003,
      62,
      11487,
      3419
    ],
    "start_token": 1010,
    "end_token": 1023,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33734,
      54,
      312,
      11407,
      13,
      48,
      10962,
      38300,
      7449,
      284,
      2251,
      3084,
      3709
    ],
    "label": "best_practice",
    "reason": "Use of QtWidgets.QTableWidgetItem to create table items"
  },
  {
    "line": 257,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of self.setItem to set a cell in the table",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1023,
    "end_token": 1023,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      13,
      2617,
      7449,
      284,
      900,
      257,
      2685,
      287,
      262,
      3084
    ],
    "label": "best_practice",
    "reason": "Use of self.setItem to set a cell in the table"
  },
  {
    "line": 263,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of __getattribute__ can lead to security risks if not controlled",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1023,
    "end_token": 1023,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      11593,
      1136,
      42348,
      834,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6856
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of __getattribute__ can lead to security risks if not controlled"
  },
  {
    "line": 264,
    "text": "        labels: list = [d[\"display\"] for d in self.headers.values()]",
    "annotation": "\u2705 Best Practice: Storing cell references for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14722,
      25,
      1351,
      796,
      685,
      67,
      14692,
      13812,
      8973,
      329,
      288,
      287,
      2116,
      13,
      50145,
      13,
      27160,
      3419,
      60
    ],
    "start_token": 1023,
    "end_token": 1049,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      2685,
      10288,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Storing cell references for later use"
  },
  {
    "line": 263,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic attribute access with __getattribute__",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1049,
    "end_token": 1049,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      11688,
      1895,
      351,
      11593,
      1136,
      42348,
      834
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic attribute access with __getattribute__"
  },
  {
    "line": 264,
    "text": "        labels: list = [d[\"display\"] for d in self.headers.values()]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for AttributeError if data_key is not a valid attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14722,
      25,
      1351,
      796,
      685,
      67,
      14692,
      13812,
      8973,
      329,
      288,
      287,
      2116,
      13,
      50145,
      13,
      27160,
      3419,
      60
    ],
    "start_token": 1049,
    "end_token": 1075,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3460,
      4163,
      12331,
      611,
      1366,
      62,
      2539,
      318,
      407,
      257,
      4938,
      11688
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for AttributeError if data_key is not a valid attribute"
  },
  {
    "line": 266,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary elements using a key",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1075,
    "end_token": 1075,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      4847,
      1262,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary elements using a key"
  },
  {
    "line": 269,
    "text": "        self.setAlternatingRowColors(True)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic attribute access with __getattribute__",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      23081,
      803,
      25166,
      5216,
      669,
      7,
      17821,
      8
    ],
    "start_token": 1075,
    "end_token": 1093,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      11688,
      1895,
      351,
      11593,
      1136,
      42348,
      834
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic attribute access with __getattribute__"
  },
  {
    "line": 269,
    "text": "        self.setAlternatingRowColors(True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for AttributeError if header is not a valid attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      23081,
      803,
      25166,
      5216,
      669,
      7,
      17821,
      8
    ],
    "start_token": 1093,
    "end_token": 1111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3460,
      4163,
      12331,
      611,
      13639,
      318,
      407,
      257,
      4938,
      11688
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for AttributeError if header is not a valid attribute"
  },
  {
    "line": 272,
    "text": "    def init_menu(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      26272,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1111,
    "end_token": 1124,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method call on an object"
  },
  {
    "line": 272,
    "text": "    def init_menu(self) -> None:",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      26272,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1124,
    "end_token": 1137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the method's purpose"
  },
  {
    "line": 274,
    "text": "        Create right click menu.",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining and API usage pattern with QtWidgets",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13610,
      826,
      3904,
      6859,
      13
    ],
    "start_token": 1137,
    "end_token": 1149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      290,
      7824,
      8748,
      3912,
      351,
      33734,
      54,
      312,
      11407
    ],
    "label": "ml_signal",
    "reason": "Method chaining and API usage pattern with QtWidgets"
  },
  {
    "line": 277,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of QtWidgets for file dialog operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1149,
    "end_token": 1149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      33734,
      54,
      312,
      11407,
      329,
      2393,
      17310,
      4560
    ],
    "label": "ml_signal",
    "reason": "Use of QtWidgets for file dialog operations"
  },
  {
    "line": 282,
    "text": "        save_action: QtGui.QAction = QtGui.QAction(_(\"\u4fdd\u5b58\u6570\u636e\"), self)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for file operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3613,
      62,
      2673,
      25,
      33734,
      8205,
      72,
      13,
      48,
      12502,
      796,
      33734,
      8205,
      72,
      13,
      48,
      12502,
      28264,
      7203,
      46479,
      251,
      27764,
      246,
      46763,
      108,
      162,
      235,
      106,
      12340,
      2116,
      8
    ],
    "start_token": 1149,
    "end_token": 1187,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      2393,
      4560
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for file operations"
  },
  {
    "line": 284,
    "text": "        self.menu.addAction(save_action)",
    "annotation": "\ud83e\udde0 ML Signal: Use of csv.writer for writing CSV files",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26272,
      13,
      2860,
      12502,
      7,
      21928,
      62,
      2673,
      8
    ],
    "start_token": 1187,
    "end_token": 1205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      269,
      21370,
      13,
      16002,
      329,
      3597,
      44189,
      3696
    ],
    "label": "ml_signal",
    "reason": "Use of csv.writer for writing CSV files"
  },
  {
    "line": 286,
    "text": "    def register_event(self) -> None:",
    "annotation": "\u2705 Best Practice: Type hinting for headers list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7881,
      62,
      15596,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1205,
    "end_token": 1218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      24697,
      1351
    ],
    "label": "best_practice",
    "reason": "Type hinting for headers list"
  },
  {
    "line": 290,
    "text": "        if self.event_type:",
    "annotation": "\ud83e\udde0 ML Signal: Checking for hidden rows in a table",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      15596,
      62,
      4906,
      25
    ],
    "start_token": 1218,
    "end_token": 1232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      7104,
      15274,
      287,
      257,
      3084
    ],
    "label": "ml_signal",
    "reason": "Checking for hidden rows in a table"
  },
  {
    "line": 292,
    "text": "            self.event_engine.register(self.event_type, self.signal.emit)",
    "annotation": "\u2705 Best Practice: Type hinting for row_data list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      30238,
      7,
      944,
      13,
      15596,
      62,
      4906,
      11,
      2116,
      13,
      12683,
      282,
      13,
      368,
      270,
      8
    ],
    "start_token": 1232,
    "end_token": 1265,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      5752,
      62,
      7890,
      1351
    ],
    "label": "best_practice",
    "reason": "Type hinting for row_data list"
  },
  {
    "line": 296,
    "text": "        Process new data from event and update into table.",
    "annotation": "\u2705 Best Practice: Type hinting for item with union type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10854,
      649,
      1366,
      422,
      1785,
      290,
      4296,
      656,
      3084,
      13
    ],
    "start_token": 1265,
    "end_token": 1282,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      2378,
      351,
      6441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type hinting for item with union type"
  },
  {
    "line": 300,
    "text": "            self.setSortingEnabled(False)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of context menu event handling in a GUI application",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      50,
      24707,
      20491,
      7,
      25101,
      8
    ],
    "start_token": 1282,
    "end_token": 1302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4732,
      6859,
      1785,
      9041,
      287,
      257,
      25757,
      3586
    ],
    "label": "ml_signal",
    "reason": "Usage of context menu event handling in a GUI application"
  },
  {
    "line": 301,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for misuse if menu actions are not properly validated",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1302,
    "end_token": 1302,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      29169,
      611,
      6859,
      4028,
      389,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for misuse if menu actions are not properly validated"
  },
  {
    "line": 301,
    "text": "",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1302,
    "end_token": 1302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose"
  },
  {
    "line": 304,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QtCore.QSettings indicates interaction with application settings",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1302,
    "end_token": 1302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      33734,
      14055,
      13,
      48,
      26232,
      9217,
      10375,
      351,
      3586,
      6460
    ],
    "label": "ml_signal",
    "reason": "Usage of QtCore.QSettings indicates interaction with application settings"
  },
  {
    "line": 305,
    "text": "        if not self.data_key:",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      7890,
      62,
      2539,
      25
    ],
    "start_token": 1302,
    "end_token": 1317,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 307,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Storing UI state information, useful for user behavior analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1317,
    "end_token": 1326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      12454,
      1181,
      1321,
      11,
      4465,
      329,
      2836,
      4069,
      3781
    ],
    "label": "ml_signal",
    "reason": "Storing UI state information, useful for user behavior analysis"
  },
  {
    "line": 308,
    "text": "            key: str = data.__getattribute__(self.data_key)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the saved state does not include sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1994,
      25,
      965,
      796,
      1366,
      13,
      834,
      1136,
      42348,
      834,
      7,
      944,
      13,
      7890,
      62,
      2539,
      8
    ],
    "start_token": 1326,
    "end_token": 1354,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      7448,
      1181,
      857,
      407,
      2291,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the saved state does not include sensitive information"
  },
  {
    "line": 307,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Use of QtCore.QSettings indicates interaction with application settings storage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1354,
    "end_token": 1363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      33734,
      14055,
      13,
      48,
      26232,
      9217,
      10375,
      351,
      3586,
      6460,
      6143
    ],
    "label": "ml_signal",
    "reason": "Use of QtCore.QSettings indicates interaction with application settings storage"
  },
  {
    "line": 309,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking type of 'column_state' suggests dynamic or uncertain data types",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1363,
    "end_token": 1363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2099,
      286,
      705,
      28665,
      62,
      5219,
      6,
      5644,
      8925,
      393,
      8627,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Checking type of 'column_state' suggests dynamic or uncertain data types"
  },
  {
    "line": 312,
    "text": "            else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'column_state' is manipulated externally",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1363,
    "end_token": 1376,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      28665,
      62,
      5219,
      6,
      318,
      25036,
      45107
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'column_state' is manipulated externally"
  },
  {
    "line": 313,
    "text": "                self.insert_new_row(data)",
    "annotation": "\u2705 Best Practice: Explicitly setting sort indicator improves UI consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      28463,
      62,
      3605,
      62,
      808,
      7,
      7890,
      8
    ],
    "start_token": 1376,
    "end_token": 1401,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      3297,
      16916,
      19575,
      12454,
      15794
    ],
    "label": "best_practice",
    "reason": "Explicitly setting sort indicator improves UI consistency"
  },
  {
    "line": 312,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1401,
    "end_token": 1414,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose."
  },
  {
    "line": 317,
    "text": "            self.setSortingEnabled(True)",
    "annotation": "\u2705 Best Practice: Type annotations for class variables improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      50,
      24707,
      20491,
      7,
      17821,
      8
    ],
    "start_token": 1414,
    "end_token": 1434,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      1398,
      9633,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for class variables improve code readability and maintainability."
  },
  {
    "line": 319,
    "text": "    def insert_new_row(self, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Using a dictionary to define headers allows for easy updates and maintenance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      7550,
      62,
      3605,
      62,
      808,
      7,
      944,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1434,
    "end_token": 1453,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      22155,
      284,
      8160,
      24697,
      3578,
      329,
      2562,
      5992,
      290,
      9262,
      13
    ],
    "label": "best_practice",
    "reason": "Using a dictionary to define headers allows for easy updates and maintenance."
  },
  {
    "line": 319,
    "text": "    def insert_new_row(self, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Use of internationalization function _() for display strings.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7550,
      62,
      3605,
      62,
      808,
      7,
      944,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1453,
    "end_token": 1472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3230,
      1634,
      2163,
      4808,
      3419,
      329,
      3359,
      13042,
      13
    ],
    "label": "best_practice",
    "reason": "Use of internationalization function _() for display strings."
  },
  {
    "line": 335,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1472,
    "end_token": 1472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 340,
    "text": "    def update_old_row(self, data: Any) -> None:",
    "annotation": "\u2705 Best Practice: Type annotations for class variables improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4296,
      62,
      727,
      62,
      808,
      7,
      944,
      11,
      1366,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1472,
    "end_token": 1491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      1398,
      9633,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for class variables improve code readability and maintainability."
  },
  {
    "line": 342,
    "text": "        Update an old row in table.",
    "annotation": "\u2705 Best Practice: Type annotations for class variables improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10133,
      281,
      1468,
      5752,
      287,
      3084,
      13
    ],
    "start_token": 1491,
    "end_token": 1505,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      1398,
      9633,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for class variables improve code readability and maintainability."
  },
  {
    "line": 342,
    "text": "        Update an old row in table.",
    "annotation": "\u2705 Best Practice: Type annotations for class variables improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10133,
      281,
      1468,
      5752,
      287,
      3084,
      13
    ],
    "start_token": 1505,
    "end_token": 1519,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      1398,
      9633,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for class variables improve code readability and maintainability."
  },
  {
    "line": 346,
    "text": "",
    "annotation": "\u2705 Best Practice: Type annotations for class variables improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1519,
    "end_token": 1519,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      1398,
      9633,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for class variables improve code readability and maintainability."
  },
  {
    "line": 348,
    "text": "            content = data.__getattribute__(header)",
    "annotation": "\ud83e\udde0 ML Signal: Use of localization function _() indicates internationalization support.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2695,
      796,
      1366,
      13,
      834,
      1136,
      42348,
      834,
      7,
      25677,
      8
    ],
    "start_token": 1519,
    "end_token": 1541,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      42842,
      2163,
      4808,
      3419,
      9217,
      3230,
      1634,
      1104,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of localization function _() indicates internationalization support."
  },
  {
    "line": 351,
    "text": "    def resize_columns(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of localization function _() indicates internationalization support.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      47558,
      62,
      28665,
      82,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1541,
    "end_token": 1555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      42842,
      2163,
      4808,
      3419,
      9217,
      3230,
      1634,
      1104,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of localization function _() indicates internationalization support."
  },
  {
    "line": 352,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of localization function _() indicates internationalization support.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1555,
    "end_token": 1563,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      42842,
      2163,
      4808,
      3419,
      9217,
      3230,
      1634,
      1104,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of localization function _() indicates internationalization support."
  },
  {
    "line": 351,
    "text": "    def resize_columns(self) -> None:",
    "annotation": "\u2705 Best Practice: Use of type annotations for class variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      47558,
      62,
      28665,
      82,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1563,
    "end_token": 1577,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class variables improves code readability and maintainability."
  },
  {
    "line": 353,
    "text": "        Resize all columns according to contents.",
    "annotation": "\u2705 Best Practice: Use of type annotations for class variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1874,
      1096,
      477,
      15180,
      1864,
      284,
      10154,
      13
    ],
    "start_token": 1577,
    "end_token": 1592,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class variables improves code readability and maintainability."
  },
  {
    "line": 354,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type annotations for class variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1592,
    "end_token": 1600,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class variables improves code readability and maintainability."
  },
  {
    "line": 354,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type annotations for class variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1600,
    "end_token": 1608,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class variables improves code readability and maintainability."
  },
  {
    "line": 354,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1608,
    "end_token": 1616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 361,
    "text": "        path, __ = QtWidgets.QFileDialog.getSaveFileName(",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3108,
      11,
      11593,
      796,
      33734,
      54,
      312,
      11407,
      13,
      48,
      8979,
      44204,
      13,
      1136,
      16928,
      8979,
      5376,
      7
    ],
    "start_token": 1616,
    "end_token": 1641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 363,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1641,
    "end_token": 1641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 365,
    "text": "            return",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 1641,
    "end_token": 1653,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 367,
    "text": "        with open(path, \"w\") as f:",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      1280,
      7,
      6978,
      11,
      366,
      86,
      4943,
      355,
      277,
      25
    ],
    "start_token": 1653,
    "end_token": 1671,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 370,
    "text": "            headers: list = [d[\"display\"] for d in self.headers.values()]",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24697,
      25,
      1351,
      796,
      685,
      67,
      14692,
      13812,
      8973,
      329,
      288,
      287,
      2116,
      13,
      50145,
      13,
      27160,
      3419,
      60
    ],
    "start_token": 1671,
    "end_token": 1701,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 371,
    "text": "            writer.writerow(headers)",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6260,
      13,
      16002,
      322,
      7,
      50145,
      8
    ],
    "start_token": 1701,
    "end_token": 1719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 373,
    "text": "            for row in range(self.rowCount()):",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5752,
      287,
      2837,
      7,
      944,
      13,
      808,
      12332,
      3419,
      2599
    ],
    "start_token": 1719,
    "end_token": 1741,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 373,
    "text": "            for row in range(self.rowCount()):",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5752,
      287,
      2837,
      7,
      944,
      13,
      808,
      12332,
      3419,
      2599
    ],
    "start_token": 1741,
    "end_token": 1763,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 373,
    "text": "            for row in range(self.rowCount()):",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5752,
      287,
      2837,
      7,
      944,
      13,
      808,
      12332,
      3419,
      2599
    ],
    "start_token": 1763,
    "end_token": 1785,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      3292,
      12608,
      284,
      3359,
      6608,
      290,
      2685,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to map trade attributes to display properties and cell types."
  },
  {
    "line": 370,
    "text": "            headers: list = [d[\"display\"] for d in self.headers.values()]",
    "annotation": "\u2705 Best Practice: Use of class variables for shared configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24697,
      25,
      1351,
      796,
      685,
      67,
      14692,
      13812,
      8973,
      329,
      288,
      287,
      2116,
      13,
      50145,
      13,
      27160,
      3419,
      60
    ],
    "start_token": 1785,
    "end_token": 1815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4888,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of class variables for shared configuration"
  },
  {
    "line": 372,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of class variables for shared configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1815,
    "end_token": 1815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4888,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of class variables for shared configuration"
  },
  {
    "line": 373,
    "text": "            for row in range(self.rowCount()):",
    "annotation": "\u2705 Best Practice: Use of class variables for shared configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5752,
      287,
      2837,
      7,
      944,
      13,
      808,
      12332,
      3419,
      2599
    ],
    "start_token": 1815,
    "end_token": 1837,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4888,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of class variables for shared configuration"
  },
  {
    "line": 373,
    "text": "            for row in range(self.rowCount()):",
    "annotation": "\u2705 Best Practice: Use of class variables for shared configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5752,
      287,
      2837,
      7,
      944,
      13,
      808,
      12332,
      3419,
      2599
    ],
    "start_token": 1837,
    "end_token": 1859,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4888,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of class variables for shared configuration"
  },
  {
    "line": 373,
    "text": "            for row in range(self.rowCount()):",
    "annotation": "\u2705 Best Practice: Use of dictionary for structured data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5752,
      287,
      2837,
      7,
      944,
      13,
      808,
      12332,
      3419,
      2599
    ],
    "start_token": 1859,
    "end_token": 1881,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      329,
      20793,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of dictionary for structured data"
  },
  {
    "line": 392,
    "text": "    def save_setting(self) -> None:",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper initialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3613,
      62,
      33990,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1881,
    "end_token": 1894,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper initialization"
  },
  {
    "line": 394,
    "text": "        settings: QtCore.QSettings = QtCore.QSettings(self.__class__.__name__, \"custom\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of setToolTip for UI elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6460,
      25,
      33734,
      14055,
      13,
      48,
      26232,
      796,
      33734,
      14055,
      13,
      48,
      26232,
      7,
      944,
      13,
      834,
      4871,
      834,
      13,
      834,
      3672,
      834,
      11,
      366,
      23144,
      4943
    ],
    "start_token": 1894,
    "end_token": 1928,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      25391,
      28434,
      329,
      12454,
      4847
    ],
    "label": "ml_signal",
    "reason": "Use of setToolTip for UI elements"
  },
  {
    "line": 396,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Signal-slot connection pattern in PyQt",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1928,
    "end_token": 1928,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26484,
      12,
      43384,
      4637,
      3912,
      287,
      9485,
      48,
      83
    ],
    "label": "ml_signal",
    "reason": "Signal-slot connection pattern in PyQt"
  },
  {
    "line": 396,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unintended behavior if cancel_order is not properly defined",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1928,
    "end_token": 1928,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      30261,
      4069,
      611,
      14241,
      62,
      2875,
      318,
      407,
      6105,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unintended behavior if cancel_order is not properly defined"
  },
  {
    "line": 399,
    "text": "        settings: QtCore.QSettings = QtCore.QSettings(self.__class__.__name__, \"custom\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'order' indicates a pattern for static type checking.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6460,
      25,
      33734,
      14055,
      13,
      48,
      26232,
      796,
      33734,
      14055,
      13,
      48,
      26232,
      7,
      944,
      13,
      834,
      4871,
      834,
      13,
      834,
      3672,
      834,
      11,
      366,
      23144,
      4943
    ],
    "start_token": 1928,
    "end_token": 1962,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      2875,
      6,
      9217,
      257,
      3912,
      329,
      9037,
      2099,
      10627,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'order' indicates a pattern for static type checking."
  },
  {
    "line": 401,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'req' indicates a pattern for static type checking.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1962,
    "end_token": 1962,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      42180,
      6,
      9217,
      257,
      3912,
      329,
      9037,
      2099,
      10627,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'req' indicates a pattern for static type checking."
  },
  {
    "line": 403,
    "text": "            self.horizontalHeader().restoreState(column_state)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'cancel_order' method does not handle exceptions from 'main_engine'.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17899,
      38342,
      39681,
      22446,
      2118,
      382,
      9012,
      7,
      28665,
      62,
      5219,
      8
    ],
    "start_token": 1962,
    "end_token": 1987,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      66,
      21130,
      62,
      2875,
      6,
      2446,
      857,
      407,
      5412,
      13269,
      422,
      705,
      12417,
      62,
      18392,
      4458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'cancel_order' method does not handle exceptions from 'main_engine'."
  },
  {
    "line": 403,
    "text": "            self.horizontalHeader().restoreState(column_state)",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on 'main_engine' could be used to identify common API usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17899,
      38342,
      39681,
      22446,
      2118,
      382,
      9012,
      7,
      28665,
      62,
      5219,
      8
    ],
    "start_token": 1987,
    "end_token": 2012,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      705,
      12417,
      62,
      18392,
      6,
      714,
      307,
      973,
      284,
      5911,
      2219,
      7824,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on 'main_engine' could be used to identify common API usage."
  },
  {
    "line": 406,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of class variables for configuration allows easy modification and access.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2012,
    "end_token": 2012,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398,
      3578,
      2562,
      17613,
      290,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Use of class variables for configuration allows easy modification and access."
  },
  {
    "line": 408,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of class variables for configuration allows easy modification and access.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 2012,
    "end_token": 2016,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398,
      3578,
      2562,
      17613,
      290,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Use of class variables for configuration allows easy modification and access."
  },
  {
    "line": 409,
    "text": "    Monitor for tick data.",
    "annotation": "\u2705 Best Practice: Use of class variables for configuration allows easy modification and access.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      18289,
      329,
      4378,
      1366,
      13
    ],
    "start_token": 2016,
    "end_token": 2024,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398,
      3578,
      2562,
      17613,
      290,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Use of class variables for configuration allows easy modification and access."
  },
  {
    "line": 409,
    "text": "    Monitor for tick data.",
    "annotation": "\u2705 Best Practice: Use of a dictionary for headers allows for easy extension and modification.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      18289,
      329,
      4378,
      1366,
      13
    ],
    "start_token": 2024,
    "end_token": 2032,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      329,
      24697,
      3578,
      329,
      2562,
      7552,
      290,
      17613,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary for headers allows for easy extension and modification."
  },
  {
    "line": 409,
    "text": "    Monitor for tick data.",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      18289,
      329,
      4378,
      1366,
      13
    ],
    "start_token": 2032,
    "end_token": 2040,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 416,
    "text": "    headers: dict = {",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      24697,
      25,
      8633,
      796,
      1391
    ],
    "start_token": 2040,
    "end_token": 2048,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 418,
    "text": "        \"exchange\": {\"display\": _(\"\u4ea4\u6613\u6240\"), \"cell\": EnumCell, \"update\": False},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      12340,
      366,
      3846,
      1298,
      2039,
      388,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2048,
    "end_token": 2083,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 420,
    "text": "        \"last_price\": {\"display\": _(\"\u6700\u65b0\u4ef7\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      12957,
      62,
      20888,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      17312,
      222,
      23877,
      108,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2083,
    "end_token": 2118,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 421,
    "text": "        \"volume\": {\"display\": _(\"\u6210\u4ea4\u91cf\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      29048,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      22755,
      238,
      12859,
      97,
      34932,
      237,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2118,
    "end_token": 2151,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 424,
    "text": "        \"low_price\": {\"display\": _(\"\u6700\u4f4e\u4ef7\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9319,
      62,
      20888,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      17312,
      222,
      19526,
      236,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2151,
    "end_token": 2186,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 426,
    "text": "        \"bid_volume_1\": {\"display\": _(\"\u4e701\u91cf\"), \"cell\": BidCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      14065,
      62,
      29048,
      62,
      16,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      20046,
      108,
      16,
      34932,
      237,
      12340,
      366,
      3846,
      1298,
      43484,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2186,
    "end_token": 2222,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 427,
    "text": "        \"ask_price_1\": {\"display\": _(\"\u53561\u4ef7\"), \"cell\": AskCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2093,
      62,
      20888,
      62,
      16,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      39355,
      244,
      16,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      16981,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2222,
    "end_token": 2258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 427,
    "text": "        \"ask_price_1\": {\"display\": _(\"\u53561\u4ef7\"), \"cell\": AskCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of descriptive keys and values improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2093,
      62,
      20888,
      62,
      16,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      39355,
      244,
      16,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      16981,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2258,
    "end_token": 2294,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      290,
      3815,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys and values improves readability and maintainability."
  },
  {
    "line": 424,
    "text": "        \"low_price\": {\"display\": _(\"\u6700\u4f4e\u4ef7\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9319,
      62,
      20888,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      17312,
      222,
      19526,
      236,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2294,
    "end_token": 2329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 426,
    "text": "        \"bid_volume_1\": {\"display\": _(\"\u4e701\u91cf\"), \"cell\": BidCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      14065,
      62,
      29048,
      62,
      16,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      20046,
      108,
      16,
      34932,
      237,
      12340,
      366,
      3846,
      1298,
      43484,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2329,
    "end_token": 2365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 427,
    "text": "        \"ask_price_1\": {\"display\": _(\"\u53561\u4ef7\"), \"cell\": AskCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2093,
      62,
      20888,
      62,
      16,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      39355,
      244,
      16,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      16981,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2365,
    "end_token": 2401,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 427,
    "text": "        \"ask_price_1\": {\"display\": _(\"\u53561\u4ef7\"), \"cell\": AskCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2093,
      62,
      20888,
      62,
      16,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      39355,
      244,
      16,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      16981,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2401,
    "end_token": 2437,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 432,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to define configuration or settings.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2437,
    "end_token": 2437,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      8160,
      8398,
      393,
      6460,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to define configuration or settings."
  },
  {
    "line": 434,
    "text": "class LogMonitor(BaseMonitor):",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to define configuration or settings.",
    "confidence": 0.5,
    "tokens": [
      4871,
      5972,
      35479,
      7,
      14881,
      35479,
      2599
    ],
    "start_token": 2437,
    "end_token": 2444,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      8160,
      8398,
      393,
      6460,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to define configuration or settings."
  },
  {
    "line": 435,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to define configuration or settings.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 2444,
    "end_token": 2448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      8160,
      8398,
      393,
      6460,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to define configuration or settings."
  },
  {
    "line": 438,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to define configuration or settings.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2448,
    "end_token": 2448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      8160,
      8398,
      393,
      6460,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to define configuration or settings."
  },
  {
    "line": 440,
    "text": "    data_key: str = \"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to define configuration or settings.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      2539,
      25,
      965,
      796,
      13538
    ],
    "start_token": 2448,
    "end_token": 2458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      8160,
      8398,
      393,
      6460,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to define configuration or settings."
  },
  {
    "line": 438,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes to define constants and configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2458,
    "end_token": 2458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      284,
      8160,
      38491,
      290,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes to define constants and configuration"
  },
  {
    "line": 440,
    "text": "    data_key: str = \"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes to define constants and configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      2539,
      25,
      965,
      796,
      13538
    ],
    "start_token": 2458,
    "end_token": 2468,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      284,
      8160,
      38491,
      290,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes to define constants and configuration"
  },
  {
    "line": 441,
    "text": "    sorting: bool = False",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes to define constants and configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      29407,
      25,
      20512,
      796,
      10352
    ],
    "start_token": 2468,
    "end_token": 2476,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      284,
      8160,
      38491,
      290,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes to define constants and configuration"
  },
  {
    "line": 441,
    "text": "    sorting: bool = False",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level attributes to define constants and configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      29407,
      25,
      20512,
      796,
      10352
    ],
    "start_token": 2476,
    "end_token": 2484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      12608,
      284,
      8160,
      38491,
      290,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level attributes to define constants and configuration"
  },
  {
    "line": 441,
    "text": "    sorting: bool = False",
    "annotation": "\u2705 Best Practice: Use of dictionary to map keys to display properties and cell types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      29407,
      25,
      20512,
      796,
      10352
    ],
    "start_token": 2484,
    "end_token": 2492,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      284,
      3975,
      8251,
      284,
      3359,
      6608,
      290,
      2685,
      3858
    ],
    "label": "best_practice",
    "reason": "Use of dictionary to map keys to display properties and cell types"
  },
  {
    "line": 460,
    "text": "        \"tradeid\": {\"display\": _(\"\u6210\u4ea4\u53f7\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper initialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      25351,
      312,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      22755,
      238,
      12859,
      97,
      20998,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2492,
    "end_token": 2526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper initialization"
  },
  {
    "line": 462,
    "text": "        \"symbol\": {\"display\": _(\"\u4ee3\u7801\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Use of setToolTip with localization function indicates internationalization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1837,
      23650,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      47987,
      163,
      254,
      223,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2526,
    "end_token": 2558,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      25391,
      28434,
      351,
      42842,
      2163,
      9217,
      3230,
      1634
    ],
    "label": "ml_signal",
    "reason": "Use of setToolTip with localization function indicates internationalization"
  },
  {
    "line": 464,
    "text": "        \"direction\": {\"display\": _(\"\u65b9\u5411\"), \"cell\": DirectionCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Connecting a signal to a slot is a common pattern in event-driven programming",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      37295,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      43095,
      28938,
      239,
      12340,
      366,
      3846,
      1298,
      41837,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2558,
    "end_token": 2588,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8113,
      278,
      257,
      6737,
      284,
      257,
      10852,
      318,
      257,
      2219,
      3912,
      287,
      1785,
      12,
      15808,
      8300
    ],
    "label": "ml_signal",
    "reason": "Connecting a signal to a slot is a common pattern in event-driven programming"
  },
  {
    "line": 464,
    "text": "        \"direction\": {\"display\": _(\"\u65b9\u5411\"), \"cell\": DirectionCell, \"update\": False},",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      37295,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      43095,
      28938,
      239,
      12340,
      366,
      3846,
      1298,
      41837,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2588,
    "end_token": 2618,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method's purpose."
  },
  {
    "line": 468,
    "text": "        \"datetime\": {\"display\": _(\"\u65f6\u95f4\"), \"cell\": TimeCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for variable 'quote' indicates expected data type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19608,
      8079,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      33768,
      114,
      29785,
      112,
      12340,
      366,
      3846,
      1298,
      3862,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2618,
    "end_token": 2650,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      7885,
      705,
      22708,
      6,
      9217,
      2938,
      1366,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting for variable 'quote' indicates expected data type."
  },
  {
    "line": 470,
    "text": "    }",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for variable 'req' indicates expected data type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 2650,
    "end_token": 2654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      7885,
      705,
      42180,
      6,
      9217,
      2938,
      1366,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting for variable 'req' indicates expected data type."
  },
  {
    "line": 471,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on 'self.main_engine' could indicate a common operation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2654,
    "end_token": 2654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      705,
      944,
      13,
      12417,
      62,
      18392,
      6,
      714,
      7603,
      257,
      2219,
      4905,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on 'self.main_engine' could indicate a common operation."
  },
  {
    "line": 476,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Call to super().__init__() ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 2654,
    "end_token": 2658,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      22446,
      834,
      15003,
      834,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Call to super().__init__() ensures proper initialization of the base class."
  },
  {
    "line": 478,
    "text": "    event_type: str = EVENT_ORDER",
    "annotation": "\ud83e\udde0 ML Signal: Type annotations for attributes can be used to infer expected data types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1785,
      62,
      4906,
      25,
      965,
      796,
      49261,
      62,
      12532,
      1137
    ],
    "start_token": 2658,
    "end_token": 2671,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      37647,
      329,
      12608,
      460,
      307,
      973,
      284,
      13249,
      2938,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Type annotations for attributes can be used to infer expected data types."
  },
  {
    "line": 480,
    "text": "    sorting: bool = True",
    "annotation": "\ud83e\udde0 ML Signal: Type annotations for attributes can be used to infer expected data types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      29407,
      25,
      20512,
      796,
      6407
    ],
    "start_token": 2671,
    "end_token": 2679,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      37647,
      329,
      12608,
      460,
      307,
      973,
      284,
      13249,
      2938,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Type annotations for attributes can be used to infer expected data types."
  },
  {
    "line": 482,
    "text": "    headers: dict = {",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for filename generation indicates dynamic file naming.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      24697,
      25,
      8633,
      796,
      1391
    ],
    "start_token": 2679,
    "end_token": 2687,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      29472,
      5270,
      9217,
      8925,
      2393,
      19264,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for filename generation indicates dynamic file naming."
  },
  {
    "line": 484,
    "text": "        \"reference\": {\"display\": _(\"\u6765\u6e90\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Use of type annotations for dictionary with complex types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      35790,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      30266,
      98,
      162,
      118,
      238,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2687,
    "end_token": 2719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      22155,
      351,
      3716,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of type annotations for dictionary with complex types."
  },
  {
    "line": 486,
    "text": "        \"exchange\": {\"display\": _(\"\u4ea4\u6613\u6240\"), \"cell\": EnumCell, \"update\": False},",
    "annotation": "\u2705 Best Practice: Separate method for UI initialization improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      12340,
      366,
      3846,
      1298,
      2039,
      388,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2719,
    "end_token": 2754,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8621,
      30748,
      2446,
      329,
      12454,
      37588,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Separate method for UI initialization improves readability and maintainability."
  },
  {
    "line": 484,
    "text": "        \"reference\": {\"display\": _(\"\u6765\u6e90\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Usage of internationalization with _() function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      35790,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      30266,
      98,
      162,
      118,
      238,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2754,
    "end_token": 2786,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3230,
      1634,
      351,
      4808,
      3419,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of internationalization with _() function"
  },
  {
    "line": 486,
    "text": "        \"exchange\": {\"display\": _(\"\u4ea4\u6613\u6240\"), \"cell\": EnumCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Usage pattern of getting default settings",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      12340,
      366,
      3846,
      1298,
      2039,
      388,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2786,
    "end_token": 2821,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      3912,
      286,
      1972,
      4277,
      6460
    ],
    "label": "ml_signal",
    "reason": "Usage pattern of getting default settings"
  },
  {
    "line": 488,
    "text": "        \"direction\": {\"display\": _(\"\u65b9\u5411\"), \"cell\": DirectionCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Usage pattern of loading settings from a JSON file",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      37295,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      43095,
      28938,
      239,
      12340,
      366,
      3846,
      1298,
      41837,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2821,
    "end_token": 2851,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      3912,
      286,
      11046,
      6460,
      422,
      257,
      19449,
      2393
    ],
    "label": "ml_signal",
    "reason": "Usage pattern of loading settings from a JSON file"
  },
  {
    "line": 490,
    "text": "        \"price\": {\"display\": _(\"\u4ef7\u683c\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\u2705 Best Practice: Explicit type annotation for form layout",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      20888,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      20015,
      115,
      43718,
      120,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2851,
    "end_token": 2882,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      1296,
      12461
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for form layout"
  },
  {
    "line": 494,
    "text": "        \"datetime\": {\"display\": _(\"\u65f6\u95f4\"), \"cell\": TimeCell, \"update\": True},",
    "annotation": "\u2705 Best Practice: Explicit type annotation for field_type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19608,
      8079,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      33768,
      114,
      29785,
      112,
      12340,
      366,
      3846,
      1298,
      3862,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2882,
    "end_token": 2914,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      2214,
      62,
      4906
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for field_type"
  },
  {
    "line": 497,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicit type annotation for combo box",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2914,
    "end_token": 2914,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      14831,
      3091
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for combo box"
  },
  {
    "line": 499,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of populating combo box with items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2914,
    "end_token": 2922,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      1461,
      8306,
      14831,
      3091,
      351,
      3709
    ],
    "label": "ml_signal",
    "reason": "Pattern of populating combo box with items"
  },
  {
    "line": 503,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicit type annotation for index",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2922,
    "end_token": 2922,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      6376
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for index"
  },
  {
    "line": 506,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of adding widgets to form layout",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2922,
    "end_token": 2922,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4375,
      40803,
      284,
      1296,
      12461
    ],
    "label": "ml_signal",
    "reason": "Pattern of adding widgets to form layout"
  },
  {
    "line": 508,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of storing widget references",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2922,
    "end_token": 2930,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23069,
      26295,
      10288
    ],
    "label": "ml_signal",
    "reason": "Pattern of storing widget references"
  },
  {
    "line": 511,
    "text": "        order: OrderData = cell.get_data()",
    "annotation": "\u2705 Best Practice: Explicit type annotation for line edit",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      25,
      8284,
      6601,
      796,
      2685,
      13,
      1136,
      62,
      7890,
      3419
    ],
    "start_token": 2930,
    "end_token": 2948,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      1627,
      4370
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for line edit"
  },
  {
    "line": 516,
    "text": "class PositionMonitor(BaseMonitor):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive information if not handled properly",
    "confidence": 1.0,
    "tokens": [
      4871,
      23158,
      35479,
      7,
      14881,
      35479,
      2599
    ],
    "start_token": 2948,
    "end_token": 2955,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive information if not handled properly"
  },
  {
    "line": 520,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicit type annotation for validator",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2955,
    "end_token": 2955,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      4938,
      1352
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for validator"
  },
  {
    "line": 525,
    "text": "    headers: dict = {",
    "annotation": "\u2705 Best Practice: Explicit type annotation for button",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24697,
      25,
      8633,
      796,
      1391
    ],
    "start_token": 2955,
    "end_token": 2963,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      4936
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for button"
  },
  {
    "line": 527,
    "text": "        \"exchange\": {\"display\": _(\"\u4ea4\u6613\u6240\"), \"cell\": EnumCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of connecting button click to a function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      12340,
      366,
      3846,
      1298,
      2039,
      388,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 2963,
    "end_token": 2998,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      14320,
      4936,
      3904,
      284,
      257,
      2163
    ],
    "label": "ml_signal",
    "reason": "Pattern of connecting button click to a function"
  },
  {
    "line": 529,
    "text": "        \"volume\": {\"display\": _(\"\u6570\u91cf\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of setting layout for a widget",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      29048,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      46763,
      108,
      34932,
      237,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 2998,
    "end_token": 3029,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4634,
      12461,
      329,
      257,
      26295
    ],
    "label": "ml_signal",
    "reason": "Pattern of setting layout for a widget"
  },
  {
    "line": 521,
    "text": "    event_type: str = EVENT_POSITION",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to process UI widget data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1785,
      62,
      4906,
      25,
      965,
      796,
      49261,
      62,
      37997,
      17941
    ],
    "start_token": 3029,
    "end_token": 3042,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1429,
      12454,
      26295,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to process UI widget data"
  },
  {
    "line": 524,
    "text": "",
    "annotation": "\u2705 Best Practice: Use 'is' for comparing types with singletons like 'list'",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3042,
    "end_token": 3042,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      271,
      6,
      329,
      14176,
      3858,
      351,
      1702,
      1616,
      684,
      588,
      705,
      4868,
      6
    ],
    "label": "best_practice",
    "reason": "Use 'is' for comparing types with singletons like 'list'"
  },
  {
    "line": 527,
    "text": "        \"exchange\": {\"display\": _(\"\u4ea4\u6613\u6240\"), \"cell\": EnumCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving current text from a QComboBox",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1069,
      3803,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      12859,
      97,
      23626,
      241,
      33699,
      222,
      12340,
      366,
      3846,
      1298,
      2039,
      388,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 3042,
    "end_token": 3077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      1459,
      2420,
      422,
      257,
      1195,
      5377,
      2127,
      14253
    ],
    "label": "ml_signal",
    "reason": "Retrieving current text from a QComboBox"
  },
  {
    "line": 532,
    "text": "        \"price\": {\"display\": _(\"\u5747\u4ef7\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\ud83e\udde0 ML Signal: Converting text input to a specific field type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      20888,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      161,
      251,
      229,
      20015,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 3077,
    "end_token": 3109,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      2420,
      5128,
      284,
      257,
      2176,
      2214,
      2099
    ],
    "label": "ml_signal",
    "reason": "Converting text input to a specific field type"
  },
  {
    "line": 535,
    "text": "    }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Defaulting to a type's constructor without handling specific cases",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 3109,
    "end_token": 3113,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15161,
      278,
      284,
      257,
      2099,
      338,
      23772,
      1231,
      9041,
      2176,
      2663
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Defaulting to a type's constructor without handling specific cases"
  },
  {
    "line": 537,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing processed widget data in a dictionary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3113,
    "end_token": 3113,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      13686,
      26295,
      1366,
      287,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Storing processed widget data in a dictionary"
  },
  {
    "line": 540,
    "text": "    Monitor for account data.",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of saving sensitive data in JSON format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      18289,
      329,
      1848,
      1366,
      13
    ],
    "start_token": 3113,
    "end_token": 3121,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      8914,
      8564,
      1366,
      287,
      19449,
      5794
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of saving sensitive data in JSON format"
  },
  {
    "line": 541,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Using a main engine to connect with settings and a gateway name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3121,
    "end_token": 3125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      1388,
      3113,
      284,
      2018,
      351,
      6460,
      290,
      257,
      24308,
      1438
    ],
    "label": "ml_signal",
    "reason": "Using a main engine to connect with settings and a gateway name"
  },
  {
    "line": 543,
    "text": "    event_type: str = EVENT_ACCOUNT",
    "annotation": "\ud83e\udde0 ML Signal: Invoking a method to accept or finalize an operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1785,
      62,
      4906,
      25,
      965,
      796,
      49261,
      62,
      26861,
      28270
    ],
    "start_token": 3125,
    "end_token": 3138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10001,
      5730,
      257,
      2446,
      284,
      2453,
      393,
      2457,
      1096,
      281,
      4905
    ],
    "label": "ml_signal",
    "reason": "Invoking a method to accept or finalize an operation"
  },
  {
    "line": 536,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Definition of a class, useful for understanding object-oriented patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3138,
    "end_token": 3138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30396,
      286,
      257,
      1398,
      11,
      4465,
      329,
      4547,
      2134,
      12,
      17107,
      7572
    ],
    "label": "ml_signal",
    "reason": "Definition of a class, useful for understanding object-oriented patterns"
  },
  {
    "line": 541,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of type annotations, useful for type inference models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3138,
    "end_token": 3142,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2099,
      37647,
      11,
      4465,
      329,
      2099,
      32278,
      4981
    ],
    "label": "ml_signal",
    "reason": "Use of type annotations, useful for type inference models"
  },
  {
    "line": 542,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3142,
    "end_token": 3142,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes"
  },
  {
    "line": 544,
    "text": "    data_key: str = \"vt_accountid\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type annotations for constructor parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      2539,
      25,
      965,
      796,
      366,
      36540,
      62,
      23317,
      312,
      1
    ],
    "start_token": 3142,
    "end_token": 3157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      37647,
      329,
      23772,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of type annotations for constructor parameters"
  },
  {
    "line": 546,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type annotations for instance variables",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3157,
    "end_token": 3157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      37647,
      329,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of type annotations for instance variables"
  },
  {
    "line": 548,
    "text": "        \"accountid\": {\"display\": _(\"\u8d26\u53f7\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type annotations for instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      23317,
      312,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      164,
      112,
      99,
      20998,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 3157,
    "end_token": 3190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      37647,
      329,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of type annotations for instance variables"
  },
  {
    "line": 550,
    "text": "        \"frozen\": {\"display\": _(\"\u51bb\u7ed3\"), \"cell\": BaseCell, \"update\": True},",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type annotations for instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      69,
      42005,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      37863,
      119,
      163,
      119,
      241,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      6407,
      5512
    ],
    "start_token": 3190,
    "end_token": 3223,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      37647,
      329,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of type annotations for instance variables"
  },
  {
    "line": 552,
    "text": "        \"gateway_name\": {\"display\": _(\"\u63a5\u53e3\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\u2705 Best Practice: Initializing UI components in a separate method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      10494,
      1014,
      62,
      3672,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      162,
      236,
      98,
      20998,
      96,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 3223,
    "end_token": 3258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      12454,
      6805,
      287,
      257,
      4553,
      2446
    ],
    "label": "best_practice",
    "reason": "Initializing UI components in a separate method"
  },
  {
    "line": 554,
    "text": "",
    "annotation": "\u2705 Best Practice: Registering events in a separate method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3258,
    "end_token": 3258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17296,
      278,
      2995,
      287,
      257,
      4553,
      2446
    ],
    "label": "best_practice",
    "reason": "Registering events in a separate method"
  },
  {
    "line": 552,
    "text": "        \"gateway_name\": {\"display\": _(\"\u63a5\u53e3\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Fixed UI width might indicate a specific design choice or constraint",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      10494,
      1014,
      62,
      3672,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      162,
      236,
      98,
      20998,
      96,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 3258,
    "end_token": 3293,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10832,
      12454,
      9647,
      1244,
      7603,
      257,
      2176,
      1486,
      3572,
      393,
      32315
    ],
    "label": "ml_signal",
    "reason": "Fixed UI width might indicate a specific design choice or constraint"
  },
  {
    "line": 554,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hints for list of custom objects",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3293,
    "end_token": 3293,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      20269,
      329,
      1351,
      286,
      2183,
      5563
    ],
    "label": "ml_signal",
    "reason": "Usage of type hints for list of custom objects"
  },
  {
    "line": 556,
    "text": "class QuoteMonitor(BaseMonitor):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QtWidgets for UI components",
    "confidence": 1.0,
    "tokens": [
      4871,
      19879,
      35479,
      7,
      14881,
      35479,
      2599
    ],
    "start_token": 3293,
    "end_token": 3300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      33734,
      54,
      312,
      11407,
      329,
      12454,
      6805
    ],
    "label": "ml_signal",
    "reason": "Usage of QtWidgets for UI components"
  },
  {
    "line": 558,
    "text": "    Monitor for quote data.",
    "annotation": "\ud83e\udde0 ML Signal: Populating combo box with dynamic data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      18289,
      329,
      9577,
      1366,
      13
    ],
    "start_token": 3300,
    "end_token": 3308,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8099,
      8306,
      14831,
      3091,
      351,
      8925,
      1366
    ],
    "label": "ml_signal",
    "reason": "Populating combo box with dynamic data"
  },
  {
    "line": 561,
    "text": "    event_type: str = EVENT_QUOTE",
    "annotation": "\ud83e\udde0 ML Signal: Connecting signal to slot for event handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1785,
      62,
      4906,
      25,
      965,
      796,
      49261,
      62,
      10917,
      23051
    ],
    "start_token": 3308,
    "end_token": 3321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8113,
      278,
      6737,
      284,
      10852,
      329,
      1785,
      9041
    ],
    "label": "ml_signal",
    "reason": "Connecting signal to slot for event handling"
  },
  {
    "line": 564,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Setting a QLineEdit to read-only",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3321,
    "end_token": 3321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      1195,
      13949,
      18378,
      284,
      1100,
      12,
      8807
    ],
    "label": "ml_signal",
    "reason": "Setting a QLineEdit to read-only"
  },
  {
    "line": 566,
    "text": "        \"quoteid\": {\"display\": _(\"\u62a5\u4ef7\u53f7\"), \"cell\": BaseCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Adding items to combo box from enum values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      22708,
      312,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      162,
      232,
      98,
      20015,
      115,
      20998,
      115,
      12340,
      366,
      3846,
      1298,
      7308,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 3321,
    "end_token": 3356,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      3709,
      284,
      14831,
      3091,
      422,
      33829,
      3815
    ],
    "label": "ml_signal",
    "reason": "Adding items to combo box from enum values"
  },
  {
    "line": 575,
    "text": "        \"ask_offset\": {\"display\": _(\"\u5356\u5f00\u5e73\"), \"cell\": EnumCell, \"update\": False},",
    "annotation": "\ud83e\udde0 ML Signal: Usage of validators for input fields",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2093,
      62,
      28968,
      1298,
      19779,
      13812,
      1298,
      4808,
      7203,
      39355,
      244,
      28156,
      222,
      33176,
      111,
      12340,
      366,
      3846,
      1298,
      2039,
      388,
      28780,
      11,
      366,
      19119,
      1298,
      10352,
      5512
    ],
    "start_token": 3356,
    "end_token": 3392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4938,
      2024,
      329,
      5128,
      7032
    ],
    "label": "ml_signal",
    "reason": "Usage of validators for input fields"
  },
  {
    "line": 583,
    "text": "        Connect signal.",
    "annotation": "\ud83e\udde0 ML Signal: Populating combo box with dynamic data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8113,
      6737,
      13
    ],
    "start_token": 3392,
    "end_token": 3402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8099,
      8306,
      14831,
      3091,
      351,
      8925,
      1366
    ],
    "label": "ml_signal",
    "reason": "Populating combo box with dynamic data"
  },
  {
    "line": 586,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Setting tooltip for UI element",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3402,
    "end_token": 3402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      49472,
      329,
      12454,
      5002
    ],
    "label": "ml_signal",
    "reason": "Setting tooltip for UI element"
  },
  {
    "line": 589,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Connecting signal to slot for event handling",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3402,
    "end_token": 3402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8113,
      278,
      6737,
      284,
      10852,
      329,
      1785,
      9041
    ],
    "label": "ml_signal",
    "reason": "Connecting signal to slot for event handling"
  },
  {
    "line": 592,
    "text": "        Cancel quote if cell double clicked.",
    "annotation": "\ud83e\udde0 ML Signal: Connecting signal to slot for event handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27910,
      9577,
      611,
      2685,
      4274,
      28384,
      13
    ],
    "start_token": 3402,
    "end_token": 3416,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8113,
      278,
      6737,
      284,
      10852,
      329,
      1785,
      9041
    ],
    "label": "ml_signal",
    "reason": "Connecting signal to slot for event handling"
  },
  {
    "line": 595,
    "text": "        req: CancelRequest = quote.create_cancel_request()",
    "annotation": "\ud83e\udde0 ML Signal: Adding widgets to grid layout",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      43089,
      25,
      27910,
      18453,
      796,
      9577,
      13,
      17953,
      62,
      66,
      21130,
      62,
      25927,
      3419
    ],
    "start_token": 3416,
    "end_token": 3437,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      40803,
      284,
      10706,
      12461
    ],
    "label": "ml_signal",
    "reason": "Adding widgets to grid layout"
  },
  {
    "line": 617,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of color codes for UI elements",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 3437,
    "end_token": 3447,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3124,
      12416,
      329,
      12454,
      4847
    ],
    "label": "ml_signal",
    "reason": "Usage of color codes for UI elements"
  },
  {
    "line": 619,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Creating labels with specific colors",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3447,
    "end_token": 3447,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      14722,
      351,
      2176,
      7577
    ],
    "label": "ml_signal",
    "reason": "Creating labels with specific colors"
  },
  {
    "line": 654,
    "text": "                    if field_type is int:",
    "annotation": "\ud83e\udde0 ML Signal: Adding rows to form layout",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2214,
      62,
      4906,
      318,
      493,
      25
    ],
    "start_token": 3447,
    "end_token": 3473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      15274,
      284,
      1296,
      12461
    ],
    "label": "ml_signal",
    "reason": "Adding rows to form layout"
  },
  {
    "line": 667,
    "text": "    def connect_gateway(self) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Combining layouts into a vertical box layout",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2018,
      62,
      10494,
      1014,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 3473,
    "end_token": 3487,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14336,
      3191,
      38489,
      656,
      257,
      11723,
      3091,
      12461
    ],
    "label": "ml_signal",
    "reason": "Combining layouts into a vertical box layout"
  },
  {
    "line": 670,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Setting the main layout for the UI",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3487,
    "end_token": 3495,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      262,
      1388,
      12461,
      329,
      262,
      12454
    ],
    "label": "ml_signal",
    "reason": "Setting the main layout for the UI"
  },
  {
    "line": 662,
    "text": "        button.clicked.connect(self.connect_gateway)",
    "annotation": "\u2705 Best Practice: Initialize the QLabel object outside of any conditionals for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4936,
      13,
      565,
      9484,
      13,
      8443,
      7,
      944,
      13,
      8443,
      62,
      10494,
      1014,
      8
    ],
    "start_token": 3495,
    "end_token": 3516,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      262,
      1195,
      33986,
      2134,
      2354,
      286,
      597,
      4006,
      874,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize the QLabel object outside of any conditionals for clarity."
  },
  {
    "line": 665,
    "text": "        self.setLayout(form)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for code injection if 'color' is derived from untrusted input.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      32517,
      7,
      687,
      8
    ],
    "start_token": 3516,
    "end_token": 3530,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      2438,
      16954,
      611,
      705,
      8043,
      6,
      318,
      10944,
      422,
      1418,
      81,
      8459,
      5128,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for code injection if 'color' is derived from untrusted input."
  },
  {
    "line": 667,
    "text": "    def connect_gateway(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'alignment' is a valid Qt.AlignmentFlag to prevent unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2018,
      62,
      10494,
      1014,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 3530,
    "end_token": 3544,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      282,
      16747,
      6,
      318,
      257,
      4938,
      33734,
      13,
      2348,
      16747,
      34227,
      284,
      2948,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'alignment' is a valid Qt.AlignmentFlag to prevent unexpected behavior."
  },
  {
    "line": 669,
    "text": "        Get setting value from line edits and connect the gateway.",
    "annotation": "\ud83e\udde0 ML Signal: Method connects a signal to a slot, indicating an event-driven pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      4634,
      1988,
      422,
      1627,
      31671,
      290,
      2018,
      262,
      24308,
      13
    ],
    "start_token": 3544,
    "end_token": 3562,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      20417,
      257,
      6737,
      284,
      257,
      10852,
      11,
      12739,
      281,
      1785,
      12,
      15808,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method connects a signal to a slot, indicating an event-driven pattern"
  },
  {
    "line": 671,
    "text": "        setting: dict = {}",
    "annotation": "\ud83e\udde0 ML Signal: Registers an event with a callback, indicating usage of an event-driven architecture",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4634,
      25,
      8633,
      796,
      23884
    ],
    "start_token": 3562,
    "end_token": 3574,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3310,
      6223,
      281,
      1785,
      351,
      257,
      23838,
      11,
      12739,
      8748,
      286,
      281,
      1785,
      12,
      15808,
      10959
    ],
    "label": "ml_signal",
    "reason": "Registers an event with a callback, indicating usage of an event-driven architecture"
  },
  {
    "line": 674,
    "text": "            widget, field_type = tp",
    "annotation": "\u2705 Best Practice: Early return pattern improves readability by reducing nesting.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26295,
      11,
      2214,
      62,
      4906,
      796,
      256,
      79
    ],
    "start_token": 3574,
    "end_token": 3593,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12556,
      1441,
      3912,
      19575,
      1100,
      1799,
      416,
      8868,
      46282,
      13
    ],
    "label": "best_practice",
    "reason": "Early return pattern improves readability by reducing nesting."
  },
  {
    "line": 678,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 3593,
    "end_token": 3606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 680,
    "text": "                try:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 3606,
    "end_token": 3623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 682,
    "text": "                except ValueError:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      11052,
      12331,
      25
    ],
    "start_token": 3623,
    "end_token": 3642,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 684,
    "text": "            setting[field_name] = field_value",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4634,
      58,
      3245,
      62,
      3672,
      60,
      796,
      2214,
      62,
      8367
    ],
    "start_token": 3642,
    "end_token": 3663,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 686,
    "text": "        save_json(self.filename, setting)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3613,
      62,
      17752,
      7,
      944,
      13,
      34345,
      11,
      4634,
      8
    ],
    "start_token": 3663,
    "end_token": 3680,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 690,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3680,
    "end_token": 3680,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 693,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3680,
    "end_token": 3684,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 695,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3684,
    "end_token": 3688,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 697,
    "text": "    signal_tick: QtCore.Signal = QtCore.Signal(Event)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6737,
      62,
      42298,
      25,
      33734,
      14055,
      13,
      11712,
      282,
      796,
      33734,
      14055,
      13,
      11712,
      282,
      7,
      9237,
      8
    ],
    "start_token": 3688,
    "end_token": 3709,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 699,
    "text": "    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1388,
      62,
      18392,
      25,
      8774,
      13798,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 3709,
    "end_token": 3736,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 701,
    "text": "        super().__init__()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      3419
    ],
    "start_token": 3736,
    "end_token": 3749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 703,
    "text": "        self.main_engine: MainEngine = main_engine",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      12417,
      62,
      18392,
      25,
      8774,
      13798,
      796,
      1388,
      62,
      18392
    ],
    "start_token": 3749,
    "end_token": 3768,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 705,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3768,
    "end_token": 3768,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 708,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3768,
    "end_token": 3768,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 709,
    "text": "        self.init_ui()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15003,
      62,
      9019,
      3419
    ],
    "start_token": 3768,
    "end_token": 3781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 711,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3781,
    "end_token": 3781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 713,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 3781,
    "end_token": 3791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 715,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3791,
    "end_token": 3791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 717,
    "text": "        exchanges: list[Exchange] = self.main_engine.get_all_exchanges()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14525,
      25,
      1351,
      58,
      3109,
      3803,
      60,
      796,
      2116,
      13,
      12417,
      62,
      18392,
      13,
      1136,
      62,
      439,
      62,
      1069,
      36653,
      3419
    ],
    "start_token": 3791,
    "end_token": 3819,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 719,
    "text": "        self.exchange_combo.addItems([exchange.value for exchange in exchanges])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1069,
      3803,
      62,
      785,
      2127,
      13,
      2860,
      23022,
      26933,
      1069,
      3803,
      13,
      8367,
      329,
      5163,
      287,
      14525,
      12962
    ],
    "start_token": 3819,
    "end_token": 3846,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 721,
    "text": "        self.symbol_line: QtWidgets.QLineEdit = QtWidgets.QLineEdit()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1837,
      23650,
      62,
      1370,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      500,
      18378,
      796,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      500,
      18378,
      3419
    ],
    "start_token": 3846,
    "end_token": 3878,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 723,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3878,
    "end_token": 3878,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 726,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of setText method on UI elements indicates UI update pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3878,
    "end_token": 3878,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      900,
      8206,
      2446,
      319,
      12454,
      4847,
      9217,
      12454,
      4296,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of setText method on UI elements indicates UI update pattern."
  },
  {
    "line": 709,
    "text": "        self.init_ui()",
    "annotation": "\ud83e\udde0 ML Signal: Checks for empty input, a common pattern for input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15003,
      62,
      9019,
      3419
    ],
    "start_token": 3878,
    "end_token": 3891,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      6565,
      5128,
      11,
      257,
      2219,
      3912,
      329,
      5128,
      21201
    ],
    "label": "ml_signal",
    "reason": "Checks for empty input, a common pattern for input validation"
  },
  {
    "line": 713,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Constructs a unique identifier using multiple fields",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 3891,
    "end_token": 3901,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      82,
      257,
      3748,
      27421,
      1262,
      3294,
      7032
    ],
    "label": "ml_signal",
    "reason": "Constructs a unique identifier using multiple fields"
  },
  {
    "line": 715,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Compares current and new state to avoid unnecessary updates",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3901,
    "end_token": 3901,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3082,
      3565,
      1459,
      290,
      649,
      1181,
      284,
      3368,
      13114,
      5992
    ],
    "label": "ml_signal",
    "reason": "Compares current and new state to avoid unnecessary updates"
  },
  {
    "line": 719,
    "text": "        self.exchange_combo.addItems([exchange.value for exchange in exchanges])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType if get_contract returns None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1069,
      3803,
      62,
      785,
      2127,
      13,
      2860,
      23022,
      26933,
      1069,
      3803,
      13,
      8367,
      329,
      5163,
      287,
      14525,
      12962
    ],
    "start_token": 3901,
    "end_token": 3928,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      611,
      651,
      62,
      28484,
      5860,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType if get_contract returns None"
  },
  {
    "line": 721,
    "text": "        self.symbol_line: QtWidgets.QLineEdit = QtWidgets.QLineEdit()",
    "annotation": "\ud83e\udde0 ML Signal: Checks for None, a common pattern for handling optional values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1837,
      23650,
      62,
      1370,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      500,
      18378,
      796,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      500,
      18378,
      3419
    ],
    "start_token": 3928,
    "end_token": 3960,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      6045,
      11,
      257,
      2219,
      3912,
      329,
      9041,
      11902,
      3815
    ],
    "label": "ml_signal",
    "reason": "Checks for None, a common pattern for handling optional values"
  },
  {
    "line": 728,
    "text": "        self.direction_combo.addItems(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes gateway_name is always found in the combo box",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      37295,
      62,
      785,
      2127,
      13,
      2860,
      23022,
      7
    ],
    "start_token": 3960,
    "end_token": 3977,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      24308,
      62,
      3672,
      318,
      1464,
      1043,
      287,
      262,
      14831,
      3091
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes gateway_name is always found in the combo box"
  },
  {
    "line": 732,
    "text": "        self.offset_combo.addItems([offset.value for offset in Offset])",
    "annotation": "\u2705 Best Practice: Encapsulates logic for extracting digits",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      28968,
      62,
      785,
      2127,
      13,
      2860,
      23022,
      26933,
      28968,
      13,
      8367,
      329,
      11677,
      287,
      3242,
      2617,
      12962
    ],
    "start_token": 3977,
    "end_token": 4003,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      15968,
      9156,
      329,
      37895,
      19561
    ],
    "label": "best_practice",
    "reason": "Encapsulates logic for extracting digits"
  },
  {
    "line": 737,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Uses a request object to encapsulate parameters for an operation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4003,
    "end_token": 4003,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36965,
      257,
      2581,
      2134,
      284,
      32652,
      5039,
      10007,
      329,
      281,
      4905
    ],
    "label": "ml_signal",
    "reason": "Uses a request object to encapsulate parameters for an operation"
  },
  {
    "line": 740,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes gateway_name is valid and correctly set",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4003,
    "end_token": 4003,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      24308,
      62,
      3672,
      318,
      4938,
      290,
      9380,
      900
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes gateway_name is valid and correctly set"
  },
  {
    "line": 737,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a loop or list to manage repetitive tasks for better maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4003,
    "end_token": 4003,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      9052,
      393,
      1351,
      284,
      6687,
      28585,
      8861,
      329,
      1365,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a loop or list to manage repetitive tasks for better maintainability."
  },
  {
    "line": 764,
    "text": "        grid.addWidget(QtWidgets.QLabel(_(\"\u5f00\u5e73\")), 4, 0)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of input validation for 'symbol' could lead to unexpected behavior or errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10706,
      13,
      2860,
      38300,
      7,
      48,
      83,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      28264,
      7203,
      28156,
      222,
      33176,
      111,
      4943,
      828,
      604,
      11,
      657,
      8
    ],
    "start_token": 4003,
    "end_token": 4035,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      5128,
      21201,
      329,
      705,
      1837,
      23650,
      6,
      714,
      1085,
      284,
      10059,
      4069,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of input validation for 'symbol' could lead to unexpected behavior or errors."
  },
  {
    "line": 769,
    "text": "        grid.addWidget(self.exchange_combo, 0, 1, 1, 2)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of input validation for 'volume_text' could lead to unexpected behavior or errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10706,
      13,
      2860,
      38300,
      7,
      944,
      13,
      1069,
      3803,
      62,
      785,
      2127,
      11,
      657,
      11,
      352,
      11,
      352,
      11,
      362,
      8
    ],
    "start_token": 4035,
    "end_token": 4063,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      5128,
      21201,
      329,
      705,
      29048,
      62,
      5239,
      6,
      714,
      1085,
      284,
      10059,
      4069,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of input validation for 'volume_text' could lead to unexpected behavior or errors."
  },
  {
    "line": 774,
    "text": "        grid.addWidget(self.order_type_combo, 5, 1, 1, 2)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential ValueError if 'volume_text' is not a valid float.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10706,
      13,
      2860,
      38300,
      7,
      944,
      13,
      2875,
      62,
      4906,
      62,
      785,
      2127,
      11,
      642,
      11,
      352,
      11,
      352,
      11,
      362,
      8
    ],
    "start_token": 4063,
    "end_token": 4092,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      11052,
      12331,
      611,
      705,
      29048,
      62,
      5239,
      6,
      318,
      407,
      257,
      4938,
      12178,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential ValueError if 'volume_text' is not a valid float."
  },
  {
    "line": 776,
    "text": "        grid.addWidget(self.price_check, 6, 2, 1, 1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of input validation for 'price_text' could lead to unexpected behavior or errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10706,
      13,
      2860,
      38300,
      7,
      944,
      13,
      20888,
      62,
      9122,
      11,
      718,
      11,
      362,
      11,
      352,
      11,
      352,
      8
    ],
    "start_token": 4092,
    "end_token": 4118,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      5128,
      21201,
      329,
      705,
      20888,
      62,
      5239,
      6,
      714,
      1085,
      284,
      10059,
      4069,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of input validation for 'price_text' could lead to unexpected behavior or errors."
  },
  {
    "line": 777,
    "text": "        grid.addWidget(self.volume_line, 7, 1, 1, 2)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential ValueError if 'price_text' is not a valid float.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10706,
      13,
      2860,
      38300,
      7,
      944,
      13,
      29048,
      62,
      1370,
      11,
      767,
      11,
      352,
      11,
      352,
      11,
      362,
      8
    ],
    "start_token": 4118,
    "end_token": 4144,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      11052,
      12331,
      611,
      705,
      20888,
      62,
      5239,
      6,
      318,
      407,
      257,
      4938,
      12178,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential ValueError if 'price_text' is not a valid float."
  },
  {
    "line": 787,
    "text": "        self.bp2_label: QtWidgets.QLabel = self.create_label(bid_color)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of validation for 'exchange' could lead to invalid exchange values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46583,
      17,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7,
      14065,
      62,
      8043,
      8
    ],
    "start_token": 4144,
    "end_token": 4176,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      21201,
      329,
      705,
      1069,
      3803,
      6,
      714,
      1085,
      284,
      12515,
      5163,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of validation for 'exchange' could lead to invalid exchange values."
  },
  {
    "line": 787,
    "text": "        self.bp2_label: QtWidgets.QLabel = self.create_label(bid_color)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of validation for 'direction' could lead to invalid direction values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46583,
      17,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7,
      14065,
      62,
      8043,
      8
    ],
    "start_token": 4176,
    "end_token": 4208,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      21201,
      329,
      705,
      37295,
      6,
      714,
      1085,
      284,
      12515,
      4571,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of validation for 'direction' could lead to invalid direction values."
  },
  {
    "line": 789,
    "text": "        self.bp4_label: QtWidgets.QLabel = self.create_label(bid_color)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of validation for 'type' could lead to invalid order type values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46583,
      19,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7,
      14065,
      62,
      8043,
      8
    ],
    "start_token": 4208,
    "end_token": 4240,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      21201,
      329,
      705,
      4906,
      6,
      714,
      1085,
      284,
      12515,
      1502,
      2099,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of validation for 'type' could lead to invalid order type values."
  },
  {
    "line": 793,
    "text": "            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of validation for 'offset' could lead to invalid offset values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8406,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4240,
    "end_token": 4272,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      21201,
      329,
      705,
      28968,
      6,
      714,
      1085,
      284,
      12515,
      11677,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of validation for 'offset' could lead to invalid offset values."
  },
  {
    "line": 797,
    "text": "            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lack of validation for 'gateway_name' could lead to invalid gateway values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8406,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4272,
    "end_token": 4304,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      38289,
      286,
      21201,
      329,
      705,
      10494,
      1014,
      62,
      3672,
      6,
      714,
      1085,
      284,
      12515,
      24308,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lack of validation for 'gateway_name' could lead to invalid gateway values."
  },
  {
    "line": 799,
    "text": "            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of 'send_order' method could indicate user behavior patterns in trading applications.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8406,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4304,
    "end_token": 4336,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      21280,
      62,
      2875,
      6,
      2446,
      714,
      7603,
      2836,
      4069,
      7572,
      287,
      7313,
      5479,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of 'send_order' method could indicate user behavior patterns in trading applications."
  },
  {
    "line": 793,
    "text": "            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to retrieve all active orders",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8406,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4336,
    "end_token": 4368,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      19818,
      477,
      4075,
      6266
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to retrieve all active orders"
  },
  {
    "line": 796,
    "text": "        self.bv3_label: QtWidgets.QLabel = self.create_label(",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of creating a cancel request from an order",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      18,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7
    ],
    "start_token": 4368,
    "end_token": 4397,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4441,
      257,
      14241,
      2581,
      422,
      281,
      1502
    ],
    "label": "ml_signal",
    "reason": "Pattern of creating a cancel request from an order"
  },
  {
    "line": 798,
    "text": "        self.bv4_label: QtWidgets.QLabel = self.create_label(",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of cancelling an order using a request and gateway name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      19,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7
    ],
    "start_token": 4397,
    "end_token": 4426,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      10450,
      2680,
      281,
      1502,
      1262,
      257,
      2581,
      290,
      24308,
      1438
    ],
    "label": "ml_signal",
    "reason": "Pattern of cancelling an order using a request and gateway name"
  },
  {
    "line": 799,
    "text": "            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\ud83e\udde0 ML Signal: Method accessing data from a cell object, indicating a pattern of data extraction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8406,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4426,
    "end_token": 4458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22534,
      1366,
      422,
      257,
      2685,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      22236
    ],
    "label": "ml_signal",
    "reason": "Method accessing data from a cell object, indicating a pattern of data extraction"
  },
  {
    "line": 801,
    "text": "            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\ud83e\udde0 ML Signal: Setting text in a UI component, indicating a pattern of UI updates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8406,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4458,
    "end_token": 4490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      2420,
      287,
      257,
      12454,
      7515,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      5992
    ],
    "label": "ml_signal",
    "reason": "Setting text in a UI component, indicating a pattern of UI updates"
  },
  {
    "line": 804,
    "text": "        self.ap2_label: QtWidgets.QLabel = self.create_label(ask_color)",
    "annotation": "\ud83e\udde0 ML Signal: Setting current index in a combo box, indicating a pattern of UI interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      17,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7,
      2093,
      62,
      8043,
      8
    ],
    "start_token": 4490,
    "end_token": 4522,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      1459,
      6376,
      287,
      257,
      14831,
      3091,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      10375
    ],
    "label": "ml_signal",
    "reason": "Setting current index in a combo box, indicating a pattern of UI interaction"
  },
  {
    "line": 807,
    "text": "        self.ap5_label: QtWidgets.QLabel = self.create_label(ask_color)",
    "annotation": "\u2705 Best Practice: Encapsulation of functionality in a separate method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      20,
      62,
      18242,
      25,
      33734,
      54,
      312,
      11407,
      13,
      9711,
      9608,
      796,
      2116,
      13,
      17953,
      62,
      18242,
      7,
      2093,
      62,
      8043,
      8
    ],
    "start_token": 4522,
    "end_token": 4554,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      11244,
      287,
      257,
      4553,
      2446
    ],
    "label": "best_practice",
    "reason": "Encapsulation of functionality in a separate method"
  },
  {
    "line": 818,
    "text": "            ask_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)",
    "annotation": "\ud83e\udde0 ML Signal: Setting current index in a combo box, indicating a pattern of UI interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1265,
      62,
      8043,
      11,
      19114,
      28,
      48,
      83,
      14055,
      13,
      48,
      83,
      13,
      2348,
      16747,
      34227,
      13,
      2348,
      570,
      11028,
      8
    ],
    "start_token": 4554,
    "end_token": 4586,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      1459,
      6376,
      287,
      257,
      14831,
      3091,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      10375
    ],
    "label": "ml_signal",
    "reason": "Setting current index in a combo box, indicating a pattern of UI interaction"
  },
  {
    "line": 823,
    "text": "        form: QtWidgets.QFormLayout = QtWidgets.QFormLayout()",
    "annotation": "\ud83e\udde0 ML Signal: Setting current index in a combo box, indicating a pattern of UI interaction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1296,
      25,
      33734,
      54,
      312,
      11407,
      13,
      48,
      8479,
      32517,
      796,
      33734,
      54,
      312,
      11407,
      13,
      48,
      8479,
      32517,
      3419
    ],
    "start_token": 4586,
    "end_token": 4613,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      1459,
      6376,
      287,
      257,
      14831,
      3091,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      10375
    ],
    "label": "ml_signal",
    "reason": "Setting current index in a combo box, indicating a pattern of UI interaction"
  },
  {
    "line": 827,
    "text": "        form.addRow(self.ap2_label, self.av2_label)",
    "annotation": "\ud83e\udde0 ML Signal: Setting text in a UI component, indicating a pattern of UI updates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1296,
      13,
      2860,
      25166,
      7,
      944,
      13,
      499,
      17,
      62,
      18242,
      11,
      2116,
      13,
      615,
      17,
      62,
      18242,
      8
    ],
    "start_token": 4613,
    "end_token": 4639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      2420,
      287,
      257,
      12454,
      7515,
      11,
      12739,
      257,
      3912,
      286,
      12454,
      5992
    ],
    "label": "ml_signal",
    "reason": "Setting text in a UI component, indicating a pattern of UI updates"
  },
  {
    "line": 823,
    "text": "        form: QtWidgets.QFormLayout = QtWidgets.QFormLayout()",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1296,
      25,
      33734,
      54,
      312,
      11407,
      13,
      48,
      8479,
      32517,
      796,
      33734,
      54,
      312,
      11407,
      13,
      48,
      8479,
      32517,
      3419
    ],
    "start_token": 4639,
    "end_token": 4666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 830,
    "text": "        form.addRow(self.bp1_label, self.bv1_label)",
    "annotation": "\u2705 Best Practice: Call to superclass method ensures proper inheritance behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1296,
      13,
      2860,
      25166,
      7,
      944,
      13,
      46583,
      16,
      62,
      18242,
      11,
      2116,
      13,
      65,
      85,
      16,
      62,
      18242,
      8
    ],
    "start_token": 4666,
    "end_token": 4693,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      2446,
      19047,
      1774,
      24155,
      4069
    ],
    "label": "best_practice",
    "reason": "Call to superclass method ensures proper inheritance behavior"
  },
  {
    "line": 832,
    "text": "        form.addRow(self.bp3_label, self.bv3_label)",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for 'order' can be used to infer data structure usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1296,
      13,
      2860,
      25166,
      7,
      944,
      13,
      46583,
      18,
      62,
      18242,
      11,
      2116,
      13,
      65,
      85,
      18,
      62,
      18242,
      8
    ],
    "start_token": 4693,
    "end_token": 4720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      705,
      2875,
      6,
      460,
      307,
      973,
      284,
      13249,
      1366,
      4645,
      8748
    ],
    "label": "ml_signal",
    "reason": "Type hinting for 'order' can be used to infer data structure usage"
  },
  {
    "line": 834,
    "text": "        form.addRow(self.bp5_label, self.bv5_label)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary with dynamic keys indicates flexible data handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1296,
      13,
      2860,
      25166,
      7,
      944,
      13,
      46583,
      20,
      62,
      18242,
      11,
      2116,
      13,
      65,
      85,
      20,
      62,
      18242,
      8
    ],
    "start_token": 4720,
    "end_token": 4747,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      351,
      8925,
      8251,
      9217,
      12846,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary with dynamic keys indicates flexible data handling"
  },
  {
    "line": 835,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic row calculation based on data attributes",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4747,
    "end_token": 4747,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      5752,
      17952,
      1912,
      319,
      1366,
      12608
    ],
    "label": "ml_signal",
    "reason": "Dynamic row calculation based on data attributes"
  },
  {
    "line": 838,
    "text": "        vbox.addLayout(grid)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on object state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      3524,
      13,
      2860,
      32517,
      7,
      25928,
      8
    ],
    "start_token": 4747,
    "end_token": 4762,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2134,
      1181
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on object state"
  },
  {
    "line": 839,
    "text": "        vbox.addLayout(form)",
    "annotation": "\u2705 Best Practice: Explicit method call for showing UI component",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      3524,
      13,
      2860,
      32517,
      7,
      687,
      8
    ],
    "start_token": 4762,
    "end_token": 4777,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2446,
      869,
      329,
      4478,
      12454,
      7515
    ],
    "label": "best_practice",
    "reason": "Explicit method call for showing UI component"
  },
  {
    "line": 842,
    "text": "    def create_label(",
    "annotation": "\u2705 Best Practice: Explicit method call for hiding UI component",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2251,
      62,
      18242,
      7
    ],
    "start_token": 4777,
    "end_token": 4785,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2446,
      869,
      329,
      11816,
      12454,
      7515
    ],
    "label": "best_practice",
    "reason": "Explicit method call for hiding UI component"
  },
  {
    "line": 842,
    "text": "    def create_label(",
    "annotation": "\u2705 Best Practice: Use of type hints for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2251,
      62,
      18242,
      7
    ],
    "start_token": 4785,
    "end_token": 4793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for class attributes improves code readability and maintainability."
  },
  {
    "line": 842,
    "text": "    def create_label(",
    "annotation": "\ud83e\udde0 ML Signal: Use of internationalization/localization with the _() function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2251,
      62,
      18242,
      7
    ],
    "start_token": 4793,
    "end_token": 4801,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3230,
      1634,
      14,
      12001,
      1634,
      351,
      262,
      4808,
      3419,
      2163,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of internationalization/localization with the _() function."
  },
  {
    "line": 858,
    "text": "        self.signal_tick.connect(self.process_tick_event)",
    "annotation": "\u2705 Best Practice: Call to super() in __init__ ensures proper initialization of the base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      12683,
      282,
      62,
      42298,
      13,
      8443,
      7,
      944,
      13,
      14681,
      62,
      42298,
      62,
      15596,
      8
    ],
    "start_token": 4801,
    "end_token": 4825,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      3419,
      287,
      11593,
      15003,
      834,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Call to super() in __init__ ensures proper initialization of the base class"
  },
  {
    "line": 860,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type annotations for attributes can be used to infer expected data types",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4825,
    "end_token": 4825,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      37647,
      329,
      12608,
      460,
      307,
      973,
      284,
      13249,
      2938,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Type annotations for attributes can be used to infer expected data types"
  },
  {
    "line": 862,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Type annotations for attributes can be used to infer expected data types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 4825,
    "end_token": 4835,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      37647,
      329,
      12608,
      460,
      307,
      973,
      284,
      13249,
      2938,
      1366,
      3858
    ],
    "label": "ml_signal",
    "reason": "Type annotations for attributes can be used to infer expected data types"
  },
  {
    "line": 864,
    "text": "        if tick.vt_symbol != self.vt_symbol:",
    "annotation": "\u2705 Best Practice: Separate method for UI initialization improves readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4378,
      13,
      36540,
      62,
      1837,
      23650,
      14512,
      2116,
      13,
      36540,
      62,
      1837,
      23650,
      25
    ],
    "start_token": 4835,
    "end_token": 4857,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8621,
      30748,
      2446,
      329,
      12454,
      37588,
      19575,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Separate method for UI initialization improves readability and maintainability"
  },
  {
    "line": 864,
    "text": "        if tick.vt_symbol != self.vt_symbol:",
    "annotation": "\ud83e\udde0 ML Signal: Setting window title with localization support",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4378,
      13,
      36540,
      62,
      1837,
      23650,
      14512,
      2116,
      13,
      36540,
      62,
      1837,
      23650,
      25
    ],
    "start_token": 4857,
    "end_token": 4879,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      4324,
      3670,
      351,
      42842,
      1104
    ],
    "label": "ml_signal",
    "reason": "Setting window title with localization support"
  },
  {
    "line": 866,
    "text": "",
    "annotation": "\u2705 Best Practice: Setting a fixed window size for consistent UI layout",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4879,
    "end_token": 4879,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      257,
      5969,
      4324,
      2546,
      329,
      6414,
      12454,
      12461
    ],
    "label": "best_practice",
    "reason": "Setting a fixed window size for consistent UI layout"
  },
  {
    "line": 868,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for better code readability and maintenance",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4879,
    "end_token": 4879,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      9262
    ],
    "label": "best_practice",
    "reason": "Type hinting for better code readability and maintenance"
  },
  {
    "line": 870,
    "text": "        self.bp1_label.setText(f\"{tick.bid_price_1:.{price_digits}f}\")",
    "annotation": "\ud83e\udde0 ML Signal: Using placeholder text with localization support",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46583,
      16,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      69,
      1,
      90,
      42298,
      13,
      14065,
      62,
      20888,
      62,
      16,
      25,
      13,
      90,
      20888,
      62,
      12894,
      896,
      92,
      69,
      92,
      4943
    ],
    "start_token": 4879,
    "end_token": 4917,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      46076,
      2420,
      351,
      42842,
      1104
    ],
    "label": "ml_signal",
    "reason": "Using placeholder text with localization support"
  },
  {
    "line": 872,
    "text": "        self.ap1_label.setText(f\"{tick.ask_price_1:.{price_digits}f}\")",
    "annotation": "\u2705 Best Practice: Type hinting for better code readability and maintenance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      16,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      69,
      1,
      90,
      42298,
      13,
      2093,
      62,
      20888,
      62,
      16,
      25,
      13,
      90,
      20888,
      62,
      12894,
      896,
      92,
      69,
      92,
      4943
    ],
    "start_token": 4917,
    "end_token": 4955,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      9262
    ],
    "label": "best_practice",
    "reason": "Type hinting for better code readability and maintenance"
  },
  {
    "line": 874,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Connecting button click to a method",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 4955,
    "end_token": 4955,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8113,
      278,
      4936,
      3904,
      284,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Connecting button click to a method"
  },
  {
    "line": 876,
    "text": "            r: float = (tick.last_price / tick.pre_close - 1) * 100",
    "annotation": "\u2705 Best Practice: Using list comprehension for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      25,
      12178,
      796,
      357,
      42298,
      13,
      12957,
      62,
      20888,
      1220,
      4378,
      13,
      3866,
      62,
      19836,
      532,
      352,
      8,
      1635,
      1802
    ],
    "start_token": 4955,
    "end_token": 4987,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      35915,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using list comprehension for better readability"
  },
  {
    "line": 879,
    "text": "        if tick.bid_price_2:",
    "annotation": "\u2705 Best Practice: Using f-string for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4378,
      13,
      14065,
      62,
      20888,
      62,
      17,
      25
    ],
    "start_token": 4987,
    "end_token": 5003,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      277,
      12,
      8841,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using f-string for better readability"
  },
  {
    "line": 882,
    "text": "            self.ap2_label.setText(f\"{tick.ask_price_2:.{price_digits}f}\")",
    "annotation": "\u2705 Best Practice: Type hinting for better code readability and maintenance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      17,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      69,
      1,
      90,
      42298,
      13,
      2093,
      62,
      20888,
      62,
      17,
      25,
      13,
      90,
      20888,
      62,
      12894,
      896,
      92,
      69,
      92,
      4943
    ],
    "start_token": 5003,
    "end_token": 5045,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      9262
    ],
    "label": "best_practice",
    "reason": "Type hinting for better code readability and maintenance"
  },
  {
    "line": 884,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Setting the number of columns based on headers",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5045,
    "end_token": 5045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      262,
      1271,
      286,
      15180,
      1912,
      319,
      24697
    ],
    "label": "ml_signal",
    "reason": "Setting the number of columns based on headers"
  },
  {
    "line": 886,
    "text": "            self.bv3_label.setText(str(tick.bid_volume_3))",
    "annotation": "\ud83e\udde0 ML Signal: Setting table headers with localization support",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      18,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      2536,
      7,
      42298,
      13,
      14065,
      62,
      29048,
      62,
      18,
      4008
    ],
    "start_token": 5045,
    "end_token": 5077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      3084,
      24697,
      351,
      42842,
      1104
    ],
    "label": "ml_signal",
    "reason": "Setting table headers with localization support"
  },
  {
    "line": 888,
    "text": "            self.av3_label.setText(str(tick.ask_volume_3))",
    "annotation": "\u2705 Best Practice: Hiding vertical headers for cleaner UI",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      615,
      18,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      2536,
      7,
      42298,
      13,
      2093,
      62,
      29048,
      62,
      18,
      4008
    ],
    "start_token": 5077,
    "end_token": 5108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      367,
      2530,
      11723,
      24697,
      329,
      21723,
      12454
    ],
    "label": "best_practice",
    "reason": "Hiding vertical headers for cleaner UI"
  },
  {
    "line": 891,
    "text": "            self.bv4_label.setText(str(tick.bid_volume_4))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Disabling edit triggers to prevent unwanted data modification",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      2536,
      7,
      42298,
      13,
      14065,
      62,
      29048,
      62,
      19,
      4008
    ],
    "start_token": 5108,
    "end_token": 5140,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3167,
      11716,
      4370,
      20022,
      284,
      2948,
      19125,
      1366,
      17613
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Disabling edit triggers to prevent unwanted data modification"
  },
  {
    "line": 892,
    "text": "            self.ap4_label.setText(f\"{tick.ask_price_4:.{price_digits}f}\")",
    "annotation": "\u2705 Best Practice: Using alternating row colors for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      69,
      1,
      90,
      42298,
      13,
      2093,
      62,
      20888,
      62,
      19,
      25,
      13,
      90,
      20888,
      62,
      12894,
      896,
      92,
      69,
      92,
      4943
    ],
    "start_token": 5140,
    "end_token": 5182,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      39623,
      5752,
      7577,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using alternating row colors for better readability"
  },
  {
    "line": 894,
    "text": "",
    "annotation": "\u2705 Best Practice: Using layout managers for better UI organization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5182,
    "end_token": 5182,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      12461,
      11663,
      329,
      1365,
      12454,
      4009
    ],
    "label": "best_practice",
    "reason": "Using layout managers for better UI organization"
  },
  {
    "line": 898,
    "text": "            self.av5_label.setText(str(tick.ask_volume_5))",
    "annotation": "\u2705 Best Practice: Using layout managers for better UI organization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      615,
      20,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      2536,
      7,
      42298,
      13,
      2093,
      62,
      29048,
      62,
      20,
      4008
    ],
    "start_token": 5182,
    "end_token": 5213,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      12461,
      11663,
      329,
      1365,
      12454,
      4009
    ],
    "label": "best_practice",
    "reason": "Using layout managers for better UI organization"
  },
  {
    "line": 902,
    "text": "",
    "annotation": "\u2705 Best Practice: Setting the main layout for the widget",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5213,
    "end_token": 5213,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      262,
      1388,
      12461,
      329,
      262,
      26295
    ],
    "label": "best_practice",
    "reason": "Setting the main layout for the widget"
  },
  {
    "line": 891,
    "text": "            self.bv4_label.setText(str(tick.bid_volume_4))",
    "annotation": "\u2705 Best Practice: Explicitly typing the variable for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      2536,
      7,
      42298,
      13,
      14065,
      62,
      29048,
      62,
      19,
      4008
    ],
    "start_token": 5213,
    "end_token": 5245,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      19720,
      262,
      7885,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly typing the variable for clarity and maintainability"
  },
  {
    "line": 893,
    "text": "            self.av4_label.setText(str(tick.ask_volume_4))",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to retrieve all contracts",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      615,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7,
      2536,
      7,
      42298,
      13,
      2093,
      62,
      29048,
      62,
      19,
      4008
    ],
    "start_token": 5245,
    "end_token": 5276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      19818,
      477,
      8592
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to retrieve all contracts"
  },
  {
    "line": 894,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering pattern based on user input",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5276,
    "end_token": 5276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      3912,
      1912,
      319,
      2836,
      5128
    ],
    "label": "ml_signal",
    "reason": "Filtering pattern based on user input"
  },
  {
    "line": 902,
    "text": "",
    "annotation": "\u2705 Best Practice: Clearing table contents before populating it",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5276,
    "end_token": 5276,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3779,
      1723,
      3084,
      10154,
      878,
      1461,
      8306,
      340
    ],
    "label": "best_practice",
    "reason": "Clearing table contents before populating it"
  },
  {
    "line": 904,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Setting row count to match the number of items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5276,
    "end_token": 5284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      5752,
      954,
      284,
      2872,
      262,
      1271,
      286,
      3709
    ],
    "label": "best_practice",
    "reason": "Setting row count to match the number of items"
  },
  {
    "line": 908,
    "text": "        if not symbol:",
    "annotation": "\u2705 Best Practice: Using getattr to dynamically access attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      6194,
      25
    ],
    "start_token": 5284,
    "end_token": 5295,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      651,
      35226,
      284,
      32366,
      1895,
      12608
    ],
    "label": "best_practice",
    "reason": "Using getattr to dynamically access attributes"
  },
  {
    "line": 913,
    "text": "        vt_symbol: str = f\"{symbol}.{exchange_value}\"",
    "annotation": "\u2705 Best Practice: Using isinstance to handle different data types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      796,
      277,
      1,
      90,
      1837,
      23650,
      27422,
      90,
      1069,
      3803,
      62,
      8367,
      36786
    ],
    "start_token": 5295,
    "end_token": 5322,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      5412,
      1180,
      1366,
      3858
    ],
    "label": "best_practice",
    "reason": "Using isinstance to handle different data types"
  },
  {
    "line": 920,
    "text": "        contract: ContractData | None = self.main_engine.get_contract(vt_symbol)",
    "annotation": "\ud83e\udde0 ML Signal: Populating a table with dynamic data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2775,
      25,
      17453,
      6601,
      930,
      6045,
      796,
      2116,
      13,
      12417,
      62,
      18392,
      13,
      1136,
      62,
      28484,
      7,
      36540,
      62,
      1837,
      23650,
      8
    ],
    "start_token": 5322,
    "end_token": 5351,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8099,
      8306,
      257,
      3084,
      351,
      8925,
      1366
    ],
    "label": "ml_signal",
    "reason": "Populating a table with dynamic data"
  },
  {
    "line": 922,
    "text": "            self.name_line.setText(\"\")",
    "annotation": "\u2705 Best Practice: Adjusting column sizes to fit content",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3672,
      62,
      1370,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5351,
    "end_token": 5372,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20292,
      278,
      5721,
      10620,
      284,
      4197,
      2695
    ],
    "label": "best_practice",
    "reason": "Adjusting column sizes to fit content"
  },
  {
    "line": 919,
    "text": "        # Update name line widget and clear all labels",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      1438,
      1627,
      26295,
      290,
      1598,
      477,
      14722
    ],
    "start_token": 5372,
    "end_token": 5388,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 921,
    "text": "        if not contract:",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2775,
      25
    ],
    "start_token": 5388,
    "end_token": 5399,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper initialization of the base class."
  },
  {
    "line": 923,
    "text": "            gateway_name: str = self.gateway_combo.currentText()",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      62,
      3672,
      25,
      965,
      796,
      2116,
      13,
      10494,
      1014,
      62,
      785,
      2127,
      13,
      14421,
      8206,
      3419
    ],
    "start_token": 5399,
    "end_token": 5427,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability."
  },
  {
    "line": 925,
    "text": "            self.name_line.setText(contract.name)",
    "annotation": "\u2705 Best Practice: Type annotations for attributes improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3672,
      62,
      1370,
      13,
      2617,
      8206,
      7,
      28484,
      13,
      3672,
      8
    ],
    "start_token": 5427,
    "end_token": 5451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      329,
      12608,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations for attributes improve code readability and maintainability."
  },
  {
    "line": 927,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call during initialization indicates a setup or configuration pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5451,
    "end_token": 5451,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      1141,
      37588,
      9217,
      257,
      9058,
      393,
      8398,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call during initialization indicates a setup or configuration pattern."
  },
  {
    "line": 927,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the method's purpose.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5451,
    "end_token": 5451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the method's purpose."
  },
  {
    "line": 929,
    "text": "            ix: int = self.gateway_combo.findText(gateway_name)",
    "annotation": "\u2705 Best Practice: Importing within a function is generally discouraged; consider moving the import to the top of the file.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      844,
      25,
      493,
      796,
      2116,
      13,
      10494,
      1014,
      62,
      785,
      2127,
      13,
      19796,
      8206,
      7,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 5451,
    "end_token": 5483,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      1626,
      257,
      2163,
      318,
      4143,
      30170,
      26,
      2074,
      3867,
      262,
      1330,
      284,
      262,
      1353,
      286,
      262,
      2393,
      13
    ],
    "label": "best_practice",
    "reason": "Importing within a function is generally discouraged; consider moving the import to the top of the file."
  },
  {
    "line": 943,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of f-strings for string formatting.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5483,
    "end_token": 5483,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      277,
      12,
      37336,
      329,
      4731,
      33313,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of f-strings for string formatting."
  },
  {
    "line": 947,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Consider making the minimum width a constant or configurable parameter.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 5483,
    "end_token": 5491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1642,
      262,
      5288,
      9647,
      257,
      6937,
      393,
      4566,
      11970,
      11507,
      13
    ],
    "label": "best_practice",
    "reason": "Consider making the minimum width a constant or configurable parameter."
  },
  {
    "line": 948,
    "text": "        Clear text on all labels.",
    "annotation": "\u2705 Best Practice: Class docstring should describe the purpose and functionality of the class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11459,
      2420,
      319,
      477,
      14722,
      13
    ],
    "start_token": 5491,
    "end_token": 5504,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      815,
      6901,
      262,
      4007,
      290,
      11244,
      286,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring should describe the purpose and functionality of the class."
  },
  {
    "line": 954,
    "text": "        self.bv2_label.setText(\"\")",
    "annotation": "\u2705 Best Practice: Use of type hints for the dictionary improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      17,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5504,
    "end_token": 5523,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      262,
      22155,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for the dictionary improves code readability and maintainability."
  },
  {
    "line": 956,
    "text": "        self.bv4_label.setText(\"\")",
    "annotation": "\ud83e\udde0 ML Signal: Calling an initialization method is a common pattern in class constructors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      65,
      85,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5523,
    "end_token": 5542,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      281,
      37588,
      2446,
      318,
      257,
      2219,
      3912,
      287,
      1398,
      5678,
      669,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling an initialization method is a common pattern in class constructors."
  },
  {
    "line": 958,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of setWindowTitle with internationalization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5542,
    "end_token": 5542,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      27703,
      19160,
      351,
      3230,
      1634
    ],
    "label": "ml_signal",
    "reason": "Use of setWindowTitle with internationalization"
  },
  {
    "line": 960,
    "text": "        self.av2_label.setText(\"\")",
    "annotation": "\u2705 Best Practice: Setting a minimum width for the window",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      615,
      17,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5542,
    "end_token": 5560,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      257,
      5288,
      9647,
      329,
      262,
      4324
    ],
    "label": "best_practice",
    "reason": "Setting a minimum width for the window"
  },
  {
    "line": 962,
    "text": "        self.av4_label.setText(\"\")",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      615,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5560,
    "end_token": 5578,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 964,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if load_json is not properly handling JSON parsing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 5578,
    "end_token": 5578,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      3440,
      62,
      17752,
      318,
      407,
      6105,
      9041,
      19449,
      32096
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if load_json is not properly handling JSON parsing"
  },
  {
    "line": 966,
    "text": "        self.bp2_label.setText(\"\")",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46583,
      17,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5578,
    "end_token": 5596,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 968,
    "text": "        self.bp4_label.setText(\"\")",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over settings to dynamically create UI elements",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      46583,
      19,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5596,
    "end_token": 5614,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6460,
      284,
      32366,
      2251,
      12454,
      4847
    ],
    "label": "ml_signal",
    "reason": "Iterating over settings to dynamically create UI elements"
  },
  {
    "line": 970,
    "text": "",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5614,
    "end_token": 5614,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 972,
    "text": "        self.ap2_label.setText(\"\")",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      17,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5614,
    "end_token": 5632,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 975,
    "text": "        self.ap5_label.setText(\"\")",
    "annotation": "\ud83e\udde0 ML Signal: Storing widget references for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      499,
      20,
      62,
      18242,
      13,
      2617,
      8206,
      7203,
      4943
    ],
    "start_token": 5632,
    "end_token": 5650,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      26295,
      10288,
      329,
      1568,
      779
    ],
    "label": "ml_signal",
    "reason": "Storing widget references for later use"
  },
  {
    "line": 977,
    "text": "    def send_order(self) -> None:",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3758,
      62,
      2875,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 5650,
    "end_token": 5663,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 979,
    "text": "        Send new order manually.",
    "annotation": "\ud83e\udde0 ML Signal: Connecting button click to a method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16290,
      649,
      1502,
      14500,
      13
    ],
    "start_token": 5663,
    "end_token": 5675,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8113,
      278,
      4936,
      3904,
      284,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Connecting button click to a method"
  },
  {
    "line": 983,
    "text": "            QtWidgets.QMessageBox.critical(self, _(\"\u59d4\u6258\u5931\u8d25\"), _(\"\u8bf7\u8f93\u5165\u5408\u7ea6\u4ee3\u7801\"))",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33734,
      54,
      312,
      11407,
      13,
      48,
      12837,
      14253,
      13,
      34666,
      7,
      944,
      11,
      4808,
      7203,
      34650,
      242,
      33699,
      246,
      13783,
      109,
      164,
      112,
      98,
      12340,
      4808,
      7203,
      46237,
      115,
      164,
      122,
      241,
      17739,
      98,
      28938,
      230,
      163,
      118,
      99,
      47987,
      163,
      254,
      223,
      48774
    ],
    "start_token": 5675,
    "end_token": 5730,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 985,
    "text": "",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 5730,
    "end_token": 5730,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 989,
    "text": "            return",
    "annotation": "\u2705 Best Practice: Using type annotations for better code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 5730,
    "end_token": 5742,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      37647,
      329,
      1365,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using type annotations for better code readability"
  },
  {
    "line": 984,
    "text": "            return",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to process items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 5742,
    "end_token": 5754,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1429,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to process items"
  },
  {
    "line": 987,
    "text": "        if not volume_text:",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving text from a widget",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      6115,
      62,
      5239,
      25
    ],
    "start_token": 5754,
    "end_token": 5767,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      2420,
      422,
      257,
      26295
    ],
    "label": "ml_signal",
    "reason": "Retrieving text from a widget"
  },
  {
    "line": 995,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of type conversion without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 5767,
    "end_token": 5776,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      2099,
      11315,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of type conversion without validation"
  },
  {
    "line": 995,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Storing processed values in a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 5776,
    "end_token": 5785,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      13686,
      3815,
      287,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Storing processed values in a dictionary"
  },
  {
    "line": 1001,
    "text": "            direction=Direction(str(self.direction_combo.currentText())),",
    "annotation": "\u2705 Best Practice: Informing users about the need to restart for changes to take effect",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      28,
      35,
      4154,
      7,
      2536,
      7,
      944,
      13,
      37295,
      62,
      785,
      2127,
      13,
      14421,
      8206,
      28955,
      828
    ],
    "start_token": 5785,
    "end_token": 5814,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      554,
      15464,
      2985,
      546,
      262,
      761,
      284,
      15765,
      329,
      2458,
      284,
      1011,
      1245
    ],
    "label": "best_practice",
    "reason": "Informing users about the need to restart for changes to take effect"
  },
  {
    "line": 1002,
    "text": "            type=OrderType(str(self.order_type_combo.currentText())),",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Saving settings to a file without validation or error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099,
      28,
      18743,
      6030,
      7,
      2536,
      7,
      944,
      13,
      2875,
      62,
      4906,
      62,
      785,
      2127,
      13,
      14421,
      8206,
      28955,
      828
    ],
    "start_token": 5814,
    "end_token": 5845,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      34689,
      6460,
      284,
      257,
      2393,
      1231,
      21201,
      393,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Saving settings to a file without validation or error handling"
  },
  {
    "line": 1002,
    "text": "            type=OrderType(str(self.order_type_combo.currentText())),",
    "annotation": "\ud83e\udde0 ML Signal: Using a method to close or accept a dialog",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099,
      28,
      18743,
      6030,
      7,
      2536,
      7,
      944,
      13,
      2875,
      62,
      4906,
      62,
      785,
      2127,
      13,
      14421,
      8206,
      28955,
      828
    ],
    "start_token": 5845,
    "end_token": 5876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      2446,
      284,
      1969,
      393,
      2453,
      257,
      17310
    ],
    "label": "ml_signal",
    "reason": "Using a method to close or accept a dialog"
  }
]
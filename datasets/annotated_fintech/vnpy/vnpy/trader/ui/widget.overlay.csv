annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Usage of QColor for UI element coloring,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1195, 10258, 329, 12454, 5002, 33988]",0.5,14,ml_signal,37,Usage of QColor for UI element coloring,,0,"from ..setting import SETTING_FILENAME, SETTINGS","[6738, 11485, 33990, 1330, 25823, 48996, 62, 46700, 1677, 10067, 11, 25823, 51, 20754]"
🧠 ML Signal: Usage of QColor for UI element coloring,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1195, 10258, 329, 12454, 5002, 33988]",0.5,14,ml_signal,39,Usage of QColor for UI element coloring,,14,,[]
🧠 ML Signal: Usage of QColor for UI element coloring,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1195, 10258, 329, 12454, 5002, 33988]",0.5,28,ml_signal,41,Usage of QColor for UI element coloring,,14,"COLOR_LONG = QtGui.QColor(""red"")","[46786, 62, 43, 18494, 796, 33734, 8205, 72, 13, 48, 10258, 7203, 445, 4943]"
🧠 ML Signal: Usage of QColor for UI element coloring,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1195, 10258, 329, 12454, 5002, 33988]",0.5,46,ml_signal,43,Usage of QColor for UI element coloring,,28,"COLOR_BID = QtGui.QColor(255, 174, 201)","[46786, 62, 33, 2389, 796, 33734, 8205, 72, 13, 48, 10258, 7, 13381, 11, 27621, 11, 580, 8]"
🧠 ML Signal: Usage of QColor for UI element coloring,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1195, 10258, 329, 12454, 5002, 33988]",0.5,46,ml_signal,46,Usage of QColor for UI element coloring,,46,,[]
✅ Best Practice: Include a docstring to describe the purpose of the class,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 1398]",0.5,64,best_practice,43,Include a docstring to describe the purpose of the class,,46,"COLOR_BID = QtGui.QColor(255, 174, 201)","[46786, 62, 33, 2389, 796, 33734, 8205, 72, 13, 48, 10258, 7, 13381, 11, 27621, 11, 580, 8]"
✅ Best Practice: Initialize instance variables with default values for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 351, 4277, 3815, 329, 16287, 290, 5529, 1799, 13]",1.0,68,best_practice,49,Initialize instance variables with default values for clarity and maintainability.,,64,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of type hinting improves code readability and helps with static analysis.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 19575, 2438, 1100, 1799, 290, 5419, 351, 9037, 3781, 13]",0.5,72,best_practice,51,Use of type hinting improves code readability and helps with static analysis.,,68,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of QtCore.Qt.AlignmentFlag.AlignCenter improves readability by using descriptive constants.,"[26486, 227, 6705, 19939, 25, 5765, 286, 33734, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 23656, 19575, 1100, 1799, 416, 1262, 35644, 38491, 13]",0.5,93,best_practice,53,Use of QtCore.Qt.AlignmentFlag.AlignCenter improves readability by using descriptive constants.,,72,"    def __init__(self, content: Any, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 4377, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
🧠 ML Signal: Method call pattern with specific parameters can be used to identify usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 351, 2176, 10007, 460, 307, 973, 284, 5911, 8748, 7572, 13]",0.5,103,ml_signal,54,Method call pattern with specific parameters can be used to identify usage patterns.,,93,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Convert content to string to ensure consistent text handling,"[26486, 227, 6705, 19939, 25, 38240, 2695, 284, 4731, 284, 4155, 6414, 2420, 9041]",1.0,117,best_practice,57,Convert content to string to ensure consistent text handling,,103,"        self._text: str = """"","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5239, 25, 965, 796, 13538]"
🧠 ML Signal: Storing data in an instance variable for later use,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1366, 287, 281, 4554, 7885, 329, 1568, 779]",1.0,117,ml_signal,59,Storing data in an instance variable for later use,,117,,[]
🧠 ML Signal: Method call to update UI or internal state with new text,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 12454, 393, 5387, 1181, 351, 649, 2420]",1.0,117,ml_signal,61,Method call to update UI or internal state with new text,,117,,[]
✅ Best Practice: Use of type hinting for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,117,best_practice,61,Use of type hinting for return value improves code readability and maintainability,,117,,[]
"🧠 ML Signal: Accessing a private attribute, which may indicate a pattern of encapsulation or data hiding","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2839, 11688, 11, 543, 743, 7603, 257, 3912, 286, 32652, 1741, 393, 1366, 11816]",1.0,128,ml_signal,66,"Accessing a private attribute, which may indicate a pattern of encapsulation or data hiding",,117,        Set text content.,"[220, 220, 220, 220, 220, 220, 220, 5345, 2420, 2695, 13]"
✅ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,136,best_practice,65,Include type hints for method parameters and return type for better readability and maintainability,,128,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of comparison magic method to define custom sorting behavior,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7208, 5536, 2446, 284, 8160, 2183, 29407, 4069]",0.5,136,ml_signal,70,Usage of comparison magic method to define custom sorting behavior,,136,,[]
✅ Best Practice: Use a temporary variable for clarity and debugging purposes,"[26486, 227, 6705, 19939, 25, 5765, 257, 8584, 7885, 329, 16287, 290, 28769, 4959]",0.5,136,best_practice,72,Use a temporary variable for clarity and debugging purposes,,136,,[]
✅ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",0.5,147,best_practice,75,Use of type hints for function parameters and return type,,136,        Get data object.,"[220, 220, 220, 220, 220, 220, 220, 3497, 1366, 2134, 13]"
✅ Best Practice: Use of super() to call the parent class's __init__ method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446]",1.0,147,best_practice,78,Use of super() to call the parent class's __init__ method,,147,,[]
✅ Best Practice: Type hints are used for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 20269, 389, 973, 329, 2163, 10007, 290, 1441, 2099]",1.0,177,best_practice,79,Type hints are used for function parameters and return type,,147,"    def __lt__(self, other: ""BaseCell"") -> bool:        # type: ignore","[220, 220, 220, 825, 11593, 2528, 834, 7, 944, 11, 584, 25, 366, 14881, 28780, 4943, 4613, 20512, 25, 220, 220, 220, 220, 220, 220, 220, 1303, 2099, 25, 8856]"
⚠️ SAST Risk (Low): Potential AttributeError if 'content' does not have 'value' attribute,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 705, 11299, 6, 857, 407, 423, 705, 8367, 6, 11688]",0.5,186,sast_risk,84,Potential AttributeError if 'content' does not have 'value' attribute,Low,177,        return result,"[220, 220, 220, 220, 220, 220, 220, 1441, 1255]"
🧠 ML Signal: Usage of superclass method with modified parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2208, 4871, 2446, 351, 9518, 10007]",0.5,186,ml_signal,85,Usage of superclass method with modified parameters,,186,,[]
✅ Best Practice: Class docstring provides a clear description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 13]",1.0,190,best_practice,88,Class docstring provides a clear description of the class purpose.,,186,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",1.0,194,best_practice,90,Use of type hints for function parameters and return type,,190,"    """"""","[220, 220, 220, 37227]"
"🧠 ML Signal: Constructor method with parameters, indicating object initialization pattern","[8582, 100, 254, 10373, 26484, 25, 28407, 273, 2446, 351, 10007, 11, 12739, 2134, 37588, 3912]",0.5,194,ml_signal,91,"Constructor method with parameters, indicating object initialization pattern",,194,,[]
✅ Best Practice: Use of super() to call the parent class's constructor,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 23772]",0.5,216,best_practice,92,Use of super() to call the parent class's constructor,,194,"    def __init__(self, content: Enum, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 2039, 388, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
✅ Best Practice: Call to superclass method ensures proper initialization or behavior extension,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 37588, 393, 4069, 7552]",1.0,216,best_practice,95,Call to superclass method ensures proper initialization or behavior extension,,216,,[]
🧠 ML Signal: Conditional logic based on 'content' value,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 11299, 6, 1988]",0.5,224,ml_signal,97,Conditional logic based on 'content' value,,216,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of specific color for a particular condition,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 3124, 329, 257, 1948, 4006]",0.5,232,ml_signal,99,Usage of specific color for a particular condition,,224,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of specific color for a different condition,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 3124, 329, 257, 1180, 4006]",0.5,255,ml_signal,101,Usage of specific color for a different condition,,232,"            super().set_content(content.value, data)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 62, 11299, 7, 11299, 13, 8367, 11, 1366, 8]"
✅ Best Practice: Class docstring provides a clear description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 13]",0.5,278,best_practice,101,Class docstring provides a clear description of the class purpose.,,255,"            super().set_content(content.value, data)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 62, 11299, 7, 11299, 13, 8367, 11, 1366, 8]"
✅ Best Practice: Call to super() ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398]",1.0,288,best_practice,106,Call to super() ensures proper initialization of the base class,,278,    Cell used for showing direction data.,"[220, 220, 220, 12440, 973, 329, 4478, 4571, 1366, 13]"
🧠 ML Signal: Usage of setForeground method indicates UI customization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 16351, 2833, 2446, 9217, 12454, 31344]",1.0,288,ml_signal,108,Usage of setForeground method indicates UI customization,,288,,[]
✅ Best Practice: Include a docstring to describe the purpose of the class,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 1398]",0.5,310,best_practice,109,Include a docstring to describe the purpose of the class,,288,"    def __init__(self, content: Enum, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 2039, 388, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
✅ Best Practice: Call to super() ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398]",0.5,318,best_practice,114,Call to super() ensures proper initialization of the base class,,310,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of self to set instance attributes,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 284, 900, 4554, 12608]",0.5,326,ml_signal,116,Usage of self to set instance attributes,,318,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,348,best_practice,120,Class docstring provides a brief description of the class purpose.,,326,            self.setForeground(COLOR_SHORT),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 16351, 2833, 7, 46786, 62, 9693, 9863, 8]"
✅ Best Practice: Type hints for parameters and return value improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,357,best_practice,121,Type hints for parameters and return value improve code readability and maintainability.,,348,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 286, 19552, 12608, 13]",0.5,357,best_practice,123,Calling the superclass's __init__ method ensures proper initialization of inherited attributes.,,357,,[]
✅ Best Practice: Call to superclass method ensures base functionality is preserved,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 2779, 11244, 318, 17232]",1.0,361,best_practice,128,Call to superclass method ensures base functionality is preserved,,357,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Checking if a string starts with a specific character,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 4731, 4940, 351, 257, 2176, 2095]",0.5,382,ml_signal,130,Checking if a string starts with a specific character,,361,"    def __init__(self, content: Any, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 4377, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
🧠 ML Signal: Setting a color based on a condition,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 3124, 1912, 319, 257, 4006]",1.0,399,ml_signal,132,Setting a color based on a condition,,382,"        super().__init__(content, data)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 11299, 11, 1366, 8]"
🧠 ML Signal: Setting a color based on a condition,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 3124, 1912, 319, 257, 4006]",1.0,417,ml_signal,134,Setting a color based on a condition,,399,        self.setForeground(COLOR_BID),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 16351, 2833, 7, 46786, 62, 33, 2389, 8]"
🧠 ML Signal: Class definition indicating a custom cell for time display,"[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 12739, 257, 2183, 2685, 329, 640, 3359]",0.5,417,ml_signal,133,Class definition indicating a custom cell for time display,,417,,[]
🧠 ML Signal: Use of timezone information for localization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 640, 11340, 1321, 329, 42842]",1.0,421,ml_signal,138,Use of timezone information for localization,,417,"    """"""","[220, 220, 220, 37227]"
⚠️ SAST Risk (Low): Potential timezone-related issues if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 12, 5363, 2428, 611, 407, 12118, 6105]",1.0,433,sast_risk,139,Potential timezone-related issues if not handled properly,Low,421,    Cell used for showing ask price and volume.,"[220, 220, 220, 12440, 973, 329, 4478, 1265, 2756, 290, 6115, 13]"
✅ Best Practice: Type hints for parameters and return value improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,445,best_practice,139,Type hints for parameters and return value improve code readability and maintainability.,,433,    Cell used for showing ask price and volume.,"[220, 220, 220, 12440, 973, 329, 4478, 1265, 2756, 290, 6115, 13]"
✅ Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 286, 19552, 12608, 13]",1.0,445,best_practice,141,Calling the superclass's __init__ method ensures proper initialization of inherited attributes.,,445,,[]
✅ Best Practice: Check for None to handle optional content,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 5412, 11902, 2695]",1.0,455,best_practice,143,Check for None to handle optional content,,445,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Convert datetime to local timezone for consistency,"[26486, 227, 6705, 19939, 25, 38240, 4818, 8079, 284, 1957, 640, 11340, 329, 15794]",1.0,473,best_practice,146,Convert datetime to local timezone for consistency,,455,        self.setForeground(COLOR_ASK),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 16351, 2833, 7, 46786, 62, 1921, 42, 8]"
✅ Best Practice: Use type annotation for clarity,"[26486, 227, 6705, 19939, 25, 5765, 2099, 23025, 329, 16287]",0.5,473,best_practice,148,Use type annotation for clarity,,473,,[]
✅ Best Practice: Use type annotation for clarity,"[26486, 227, 6705, 19939, 25, 5765, 2099, 23025, 329, 16287]",0.5,481,best_practice,149,Use type annotation for clarity,,473,class PnlCell(BaseCell):,"[4871, 350, 21283, 28780, 7, 14881, 28780, 2599]"
✅ Best Practice: Use f-string for readability,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1100, 1799]",0.5,481,best_practice,153,Use f-string for readability,,481,,[]
✅ Best Practice: Use f-string for readability,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1100, 1799]",0.5,491,best_practice,155,Use f-string for readability,,481,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Method call pattern on self object,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 2116, 2134]",0.5,512,ml_signal,158,Method call pattern on self object,,491,"    def set_content(self, content: Any, data: Any) -> None:","[220, 220, 220, 825, 900, 62, 11299, 7, 944, 11, 2695, 25, 4377, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
🧠 ML Signal: Attribute assignment pattern on self object,"[8582, 100, 254, 10373, 26484, 25, 3460, 4163, 16237, 3912, 319, 2116, 2134]",0.5,529,ml_signal,160,Attribute assignment pattern on self object,,512,        Cell color is set based on whether pnl is,"[220, 220, 220, 220, 220, 220, 220, 12440, 3124, 318, 900, 1912, 319, 1771, 279, 21283, 318]"
✅ Best Practice: Class docstring provides a clear description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 13]",1.0,539,best_practice,155,Class docstring provides a clear description of the class purpose.,,529,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Use of type hints for function parameters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,560,best_practice,158,Use of type hints for function parameters improves code readability and maintainability,,539,"    def set_content(self, content: Any, data: Any) -> None:","[220, 220, 220, 825, 900, 62, 11299, 7, 944, 11, 2695, 25, 4377, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
✅ Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 286, 19552, 12608]",0.5,571,best_practice,161,Calling the superclass's __init__ method ensures proper initialization of inherited attributes,,560,        positive or negative.,"[220, 220, 220, 220, 220, 220, 220, 3967, 393, 4633, 13]"
✅ Best Practice: Check for None to avoid processing invalid content,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 3368, 7587, 12515, 2695]",1.0,588,best_practice,163,Check for None to avoid processing invalid content,,571,"        super().set_content(content, data)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 62, 11299, 7, 11299, 11, 1366, 8]"
"⚠️ SAST Risk (Low): Assumes content has a strftime method, which may not be true for all types","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2695, 468, 257, 965, 31387, 2446, 11, 543, 743, 407, 307, 2081, 329, 477, 3858]",1.0,610,sast_risk,166,"Assumes content has a strftime method, which may not be true for all types",Low,588,            self.setForeground(COLOR_SHORT),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 16351, 2833, 7, 46786, 62, 9693, 9863, 8]"
"🧠 ML Signal: Storing data in an instance variable, indicating stateful behavior","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1366, 287, 281, 4554, 7885, 11, 12739, 1181, 913, 4069]",1.0,632,ml_signal,168,"Storing data in an instance variable, indicating stateful behavior",,610,            self.setForeground(COLOR_LONG),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 16351, 2833, 7, 46786, 62, 43, 18494, 8]"
✅ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,639,best_practice,171,Class docstring provides a brief description of the class purpose.,,632,class TimeCell(BaseCell):,"[4871, 3862, 28780, 7, 14881, 28780, 2599]"
✅ Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 19552, 12608]",1.0,653,best_practice,173,Call to superclass initializer ensures proper initialization of inherited attributes,,639,    Cell used for showing time string from datetime object.,"[220, 220, 220, 12440, 973, 329, 4478, 640, 4731, 422, 4818, 8079, 2134, 13]"
🧠 ML Signal: Usage of QtCore.Qt.AlignmentFlag for setting text alignment,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 33734, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 329, 4634, 2420, 19114]",1.0,653,ml_signal,175,Usage of QtCore.Qt.AlignmentFlag for setting text alignment,,653,,[]
✅ Best Practice: Class docstring provides a brief description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007]",1.0,653,best_practice,175,Class docstring provides a brief description of the class purpose,,653,,[]
✅ Best Practice: Type annotations for class attributes improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,670,best_practice,180,Type annotations for class attributes improve code readability and maintainability,,653,"        super().__init__(content, data)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 11299, 11, 1366, 8]"
✅ Best Practice: Using a dictionary for headers allows for flexible key-value storage,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 329, 24697, 3578, 329, 12846, 1994, 12, 8367, 6143]",1.0,682,best_practice,184,Using a dictionary for headers allows for flexible key-value storage,,670,        if content is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2695, 318, 6045, 25]"
⚠️ SAST Risk (Low): Directly initializing a signal with a potentially mutable event type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 4238, 2890, 257, 6737, 351, 257, 6196, 4517, 540, 1785, 2099]",0.5,682,sast_risk,186,Directly initializing a signal with a potentially mutable event type,Low,682,,[]
✅ Best Practice: Type annotations for attributes improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,703,best_practice,187,Type annotations for attributes improve code readability and maintainability,,682,        content = content.astimezone(self.local_tz),"[220, 220, 220, 220, 220, 220, 220, 2695, 796, 2695, 13, 459, 524, 11340, 7, 944, 13, 12001, 62, 22877, 8]"
✅ Best Practice: Type annotations for attributes improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,703,best_practice,189,Type annotations for attributes improve code readability and maintainability,,703,,[]
✅ Best Practice: Type annotations for attributes improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,714,best_practice,191,Type annotations for attributes improve code readability and maintainability,,703,        if millisecond:,"[220, 220, 220, 220, 220, 220, 220, 611, 33606, 623, 25]"
🧠 ML Signal: Method calls in the constructor can indicate initialization patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 287, 262, 23772, 460, 7603, 37588, 7572]",0.5,723,ml_signal,193,Method calls in the constructor can indicate initialization patterns,,714,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Method calls in the constructor can indicate initialization patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 287, 262, 23772, 460, 7603, 37588, 7572]",0.5,723,ml_signal,195,Method calls in the constructor can indicate initialization patterns,,723,,[]
🧠 ML Signal: Method calls in the constructor can indicate initialization patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 287, 262, 23772, 460, 7603, 37588, 7572]",0.5,735,ml_signal,197,Method calls in the constructor can indicate initialization patterns,,723,        self._data = data,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 1366]"
✅ Best Practice: Consider adding a docstring to describe the purpose of the method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 2446, 13]",1.0,735,best_practice,195,Consider adding a docstring to describe the purpose of the method.,,735,,[]
✅ Best Practice: Ensure init_table is defined elsewhere in the class.,"[26486, 227, 6705, 19939, 25, 48987, 2315, 62, 11487, 318, 5447, 8057, 287, 262, 1398, 13]",0.5,747,best_practice,197,Ensure init_table is defined elsewhere in the class.,,735,        self._data = data,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 1366]"
✅ Best Practice: Ensure init_menu is defined elsewhere in the class.,"[26486, 227, 6705, 19939, 25, 48987, 2315, 62, 26272, 318, 5447, 8057, 287, 262, 1398, 13]",0.5,747,best_practice,198,Ensure init_menu is defined elsewhere in the class.,,747,,[]
🧠 ML Signal: Method for initializing UI components,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4238, 2890, 12454, 6805]",0.5,751,ml_signal,201,Method for initializing UI components,,747,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Extracting display labels from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 3359, 14722, 422, 257, 22155]",1.0,755,ml_signal,203,Extracting display labels from a dictionary,,751,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Setting UI component labels,"[8582, 100, 254, 10373, 26484, 25, 25700, 12454, 7515, 14722]",0.5,776,ml_signal,205,Setting UI component labels,,755,"    def __init__(self, content: Any, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 4377, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
🧠 ML Signal: Customizing UI component visibility,"[8582, 100, 254, 10373, 26484, 25, 8562, 2890, 12454, 7515, 20742]",0.5,793,ml_signal,207,Customizing UI component visibility,,776,"        super().__init__(content, data)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 11299, 11, 1366, 8]"
🧠 ML Signal: Configuring UI component editability,"[8582, 100, 254, 10373, 26484, 25, 17056, 870, 12454, 7515, 4370, 1799]",0.5,814,ml_signal,209,Configuring UI component editability,,793,"    def set_content(self, content: Any, data: Any) -> None:","[220, 220, 220, 825, 900, 62, 11299, 7, 944, 11, 2695, 25, 4377, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
🧠 ML Signal: Enabling alternating row colors in UI,"[8582, 100, 254, 10373, 26484, 25, 2039, 11716, 39623, 5752, 7577, 287, 12454]",0.5,826,ml_signal,212,Enabling alternating row colors in UI,,814,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Enabling sorting in UI component,"[8582, 100, 254, 10373, 26484, 25, 2039, 11716, 29407, 287, 12454, 7515]",0.5,826,ml_signal,213,Enabling sorting in UI component,,826,,[]
✅ Best Practice: Type hinting for self.menu improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2116, 13, 26272, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,838,best_practice,212,Type hinting for self.menu improves code readability and maintainability,,826,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
✅ Best Practice: Type hinting for resize_action improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 47558, 62, 2673, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,864,best_practice,214,Type hinting for resize_action improves code readability and maintainability,,838,"        self.setText(content.strftime(""%Y-%m-%d""))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 8206, 7, 11299, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 48774]"
🧠 ML Signal: Usage of signal-slot connection pattern in PyQt,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6737, 12, 43384, 4637, 3912, 287, 9485, 48, 83]",1.0,864,ml_signal,216,Usage of signal-slot connection pattern in PyQt,,864,,[]
"🧠 ML Signal: Adding actions to a menu, common GUI pattern","[8582, 100, 254, 10373, 26484, 25, 18247, 4028, 284, 257, 6859, 11, 2219, 25757, 3912]",1.0,872,ml_signal,218,"Adding actions to a menu, common GUI pattern",,864,class MsgCell(BaseCell):,"[4871, 6997, 70, 28780, 7, 14881, 28780, 2599]"
✅ Best Practice: Type hinting for save_action improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 3613, 62, 2673, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,882,best_practice,220,Type hinting for save_action improves code readability and maintainability,,872,    Cell used for showing msg data.,"[220, 220, 220, 12440, 973, 329, 4478, 31456, 1366, 13]"
🧠 ML Signal: Usage of signal-slot connection pattern in PyQt,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6737, 12, 43384, 4637, 3912, 287, 9485, 48, 83]",1.0,903,ml_signal,223,Usage of signal-slot connection pattern in PyQt,,882,"    def __init__(self, content: str, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 965, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
"🧠 ML Signal: Adding actions to a menu, common GUI pattern","[8582, 100, 254, 10373, 26484, 25, 18247, 4028, 284, 257, 6859, 11, 2219, 25757, 3912]",1.0,913,ml_signal,224,"Adding actions to a menu, common GUI pattern",,903,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Check if self.event_type is not None before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 2116, 13, 15596, 62, 4906, 318, 407, 6045, 878, 18788]",1.0,934,best_practice,223,Check if self.event_type is not None before proceeding,,913,"    def __init__(self, content: str, data: Any) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2695, 25, 965, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of signal-slot pattern for event handling,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6737, 12, 43384, 3912, 329, 1785, 9041]",1.0,951,ml_signal,225,Usage of signal-slot pattern for event handling,,934,"        super().__init__(content, data)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 11299, 11, 1366, 8]"
🧠 ML Signal: Registering an event type with a callback function,"[8582, 100, 254, 10373, 26484, 25, 17296, 278, 281, 1785, 2099, 351, 257, 23838, 2163]",1.0,951,ml_signal,227,Registering an event type with a callback function,,951,,[]
✅ Best Practice: Check if sorting is enabled before disabling it to avoid unnecessary operations,"[26486, 227, 6705, 19939, 25, 6822, 611, 29407, 318, 9343, 878, 34909, 340, 284, 3368, 13114, 4560]",1.0,955,best_practice,230,Check if sorting is enabled before disabling it to avoid unnecessary operations,,951,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of a clear conditional structure to handle different cases of data processing,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 1598, 26340, 4645, 284, 5412, 1180, 2663, 286, 1366, 7587]",1.0,965,best_practice,234,Use of a clear conditional structure to handle different cases of data processing,,955,"    event_type: str = """"","[220, 220, 220, 1785, 62, 4906, 25, 965, 796, 13538]"
🧠 ML Signal: Use of dynamic attribute access with __getattribute__,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8925, 11688, 1895, 351, 11593, 1136, 42348, 834]",0.5,965,ml_signal,238,Use of dynamic attribute access with __getattribute__,,965,,[]
🧠 ML Signal: Checking for existence of a key in a collection,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 6224, 286, 257, 1994, 287, 257, 4947]",0.5,965,ml_signal,240,Checking for existence of a key in a collection,,965,,[]
✅ Best Practice: Re-enable sorting if it was initially enabled,"[26486, 227, 6705, 19939, 25, 797, 12, 21633, 29407, 611, 340, 373, 7317, 9343]",1.0,965,best_practice,244,Re-enable sorting if it was initially enabled,,965,,[]
✅ Best Practice: Use of self.insertRow to add a new row at a specific position,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 13, 28463, 25166, 284, 751, 257, 649, 5752, 379, 257, 2176, 2292]",0.5,984,best_practice,247,Use of self.insertRow to add a new row at a specific position,,965,"        self.cells: dict[str, dict] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46342, 25, 8633, 58, 2536, 11, 8633, 60, 796, 23884]"
🧠 ML Signal: Iterating over headers to dynamically process data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 24697, 284, 32366, 1429, 1366]",0.5,997,ml_signal,250,Iterating over headers to dynamically process data,,984,        self.load_setting(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2220, 62, 33990, 3419]"
⚠️ SAST Risk (Low): Use of __getattribute__ can lead to security risks if not controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 11593, 1136, 42348, 834, 460, 1085, 284, 2324, 7476, 611, 407, 6856]",1.0,1010,sast_risk,253,Use of __getattribute__ can lead to security risks if not controlled,Low,997,    def init_ui(self) -> None:,"[220, 220, 220, 825, 2315, 62, 9019, 7, 944, 8, 4613, 6045, 25]"
✅ Best Practice: Use of QtWidgets.QTableWidgetItem to create table items,"[26486, 227, 6705, 19939, 25, 5765, 286, 33734, 54, 312, 11407, 13, 48, 10962, 38300, 7449, 284, 2251, 3084, 3709]",0.5,1023,best_practice,255,Use of QtWidgets.QTableWidgetItem to create table items,,1010,        self.init_table(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 11487, 3419]"
✅ Best Practice: Use of self.setItem to set a cell in the table,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 13, 2617, 7449, 284, 900, 257, 2685, 287, 262, 3084]",0.5,1023,best_practice,257,Use of self.setItem to set a cell in the table,,1023,,[]
⚠️ SAST Risk (Low): Use of __getattribute__ can lead to security risks if not controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 11593, 1136, 42348, 834, 460, 1085, 284, 2324, 7476, 611, 407, 6856]",1.0,1023,sast_risk,263,Use of __getattribute__ can lead to security risks if not controlled,Low,1023,,[]
✅ Best Practice: Storing cell references for later use,"[26486, 227, 6705, 19939, 25, 520, 3255, 2685, 10288, 329, 1568, 779]",0.5,1049,best_practice,264,Storing cell references for later use,,1023,"        labels: list = [d[""display""] for d in self.headers.values()]","[220, 220, 220, 220, 220, 220, 220, 14722, 25, 1351, 796, 685, 67, 14692, 13812, 8973, 329, 288, 287, 2116, 13, 50145, 13, 27160, 3419, 60]"
🧠 ML Signal: Usage of dynamic attribute access with __getattribute__,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 11688, 1895, 351, 11593, 1136, 42348, 834]",1.0,1049,ml_signal,263,Usage of dynamic attribute access with __getattribute__,,1049,,[]
⚠️ SAST Risk (Low): Potential for AttributeError if data_key is not a valid attribute,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3460, 4163, 12331, 611, 1366, 62, 2539, 318, 407, 257, 4938, 11688]",1.0,1075,sast_risk,264,Potential for AttributeError if data_key is not a valid attribute,Low,1049,"        labels: list = [d[""display""] for d in self.headers.values()]","[220, 220, 220, 220, 220, 220, 220, 14722, 25, 1351, 796, 685, 67, 14692, 13812, 8973, 329, 288, 287, 2116, 13, 50145, 13, 27160, 3419, 60]"
🧠 ML Signal: Accessing dictionary elements using a key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 4847, 1262, 257, 1994]",1.0,1075,ml_signal,266,Accessing dictionary elements using a key,,1075,,[]
🧠 ML Signal: Usage of dynamic attribute access with __getattribute__,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 11688, 1895, 351, 11593, 1136, 42348, 834]",1.0,1093,ml_signal,269,Usage of dynamic attribute access with __getattribute__,,1075,        self.setAlternatingRowColors(True),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 23081, 803, 25166, 5216, 669, 7, 17821, 8]"
⚠️ SAST Risk (Low): Potential for AttributeError if header is not a valid attribute,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3460, 4163, 12331, 611, 13639, 318, 407, 257, 4938, 11688]",1.0,1111,sast_risk,269,Potential for AttributeError if header is not a valid attribute,Low,1093,        self.setAlternatingRowColors(True),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 23081, 803, 25166, 5216, 669, 7, 17821, 8]"
🧠 ML Signal: Method call on an object,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134]",1.0,1124,ml_signal,272,Method call on an object,,1111,    def init_menu(self) -> None:,"[220, 220, 220, 825, 2315, 62, 26272, 7, 944, 8, 4613, 6045, 25]"
✅ Best Practice: Use of docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",1.0,1137,best_practice,272,Use of docstring to describe the method's purpose,,1124,    def init_menu(self) -> None:,"[220, 220, 220, 825, 2315, 62, 26272, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Method chaining and API usage pattern with QtWidgets,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 290, 7824, 8748, 3912, 351, 33734, 54, 312, 11407]",0.5,1149,ml_signal,274,Method chaining and API usage pattern with QtWidgets,,1137,        Create right click menu.,"[220, 220, 220, 220, 220, 220, 220, 13610, 826, 3904, 6859, 13]"
🧠 ML Signal: Use of QtWidgets for file dialog operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 33734, 54, 312, 11407, 329, 2393, 17310, 4560]",0.5,1149,ml_signal,277,Use of QtWidgets for file dialog operations,,1149,,[]
⚠️ SAST Risk (Low): No error handling for file operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 4560]",0.5,1187,sast_risk,282,No error handling for file operations,Low,1149,"        save_action: QtGui.QAction = QtGui.QAction(_(""保存数据""), self)","[220, 220, 220, 220, 220, 220, 220, 3613, 62, 2673, 25, 33734, 8205, 72, 13, 48, 12502, 796, 33734, 8205, 72, 13, 48, 12502, 28264, 7203, 46479, 251, 27764, 246, 46763, 108, 162, 235, 106, 12340, 2116, 8]"
🧠 ML Signal: Use of csv.writer for writing CSV files,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 269, 21370, 13, 16002, 329, 3597, 44189, 3696]",0.5,1205,ml_signal,284,Use of csv.writer for writing CSV files,,1187,        self.menu.addAction(save_action),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 26272, 13, 2860, 12502, 7, 21928, 62, 2673, 8]"
✅ Best Practice: Type hinting for headers list,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 24697, 1351]",0.5,1218,best_practice,286,Type hinting for headers list,,1205,    def register_event(self) -> None:,"[220, 220, 220, 825, 7881, 62, 15596, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Checking for hidden rows in a table,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 7104, 15274, 287, 257, 3084]",0.5,1232,ml_signal,290,Checking for hidden rows in a table,,1218,        if self.event_type:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 15596, 62, 4906, 25]"
✅ Best Practice: Type hinting for row_data list,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 5752, 62, 7890, 1351]",0.5,1265,best_practice,292,Type hinting for row_data list,,1232,"            self.event_engine.register(self.event_type, self.signal.emit)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 13, 30238, 7, 944, 13, 15596, 62, 4906, 11, 2116, 13, 12683, 282, 13, 368, 270, 8]"
✅ Best Practice: Type hinting for item with union type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2378, 351, 6441, 2099]",0.5,1282,best_practice,296,Type hinting for item with union type,,1265,        Process new data from event and update into table.,"[220, 220, 220, 220, 220, 220, 220, 10854, 649, 1366, 422, 1785, 290, 4296, 656, 3084, 13]"
🧠 ML Signal: Usage of context menu event handling in a GUI application,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4732, 6859, 1785, 9041, 287, 257, 25757, 3586]",1.0,1302,ml_signal,300,Usage of context menu event handling in a GUI application,,1282,            self.setSortingEnabled(False),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 50, 24707, 20491, 7, 25101, 8]"
⚠️ SAST Risk (Low): Potential for misuse if menu actions are not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 29169, 611, 6859, 4028, 389, 407, 6105, 31031]",1.0,1302,sast_risk,301,Potential for misuse if menu actions are not properly validated,Low,1302,,[]
✅ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",1.0,1302,best_practice,301,Method should have a docstring explaining its purpose,,1302,,[]
🧠 ML Signal: Usage of QtCore.QSettings indicates interaction with application settings,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 33734, 14055, 13, 48, 26232, 9217, 10375, 351, 3586, 6460]",1.0,1302,ml_signal,304,Usage of QtCore.QSettings indicates interaction with application settings,,1302,,[]
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1317,best_practice,305,Type hinting improves code readability and maintainability,,1302,        if not self.data_key:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 7890, 62, 2539, 25]"
"🧠 ML Signal: Storing UI state information, useful for user behavior analysis","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 12454, 1181, 1321, 11, 4465, 329, 2836, 4069, 3781]",1.0,1326,ml_signal,307,"Storing UI state information, useful for user behavior analysis",,1317,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Low): Ensure that the saved state does not include sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 7448, 1181, 857, 407, 2291, 8564, 1321]",0.5,1354,sast_risk,308,Ensure that the saved state does not include sensitive information,Low,1326,            key: str = data.__getattribute__(self.data_key),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1994, 25, 965, 796, 1366, 13, 834, 1136, 42348, 834, 7, 944, 13, 7890, 62, 2539, 8]"
🧠 ML Signal: Use of QtCore.QSettings indicates interaction with application settings storage,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 33734, 14055, 13, 48, 26232, 9217, 10375, 351, 3586, 6460, 6143]",0.5,1363,ml_signal,307,Use of QtCore.QSettings indicates interaction with application settings storage,,1354,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Checking type of 'column_state' suggests dynamic or uncertain data types,"[8582, 100, 254, 10373, 26484, 25, 39432, 2099, 286, 705, 28665, 62, 5219, 6, 5644, 8925, 393, 8627, 1366, 3858]",0.5,1363,ml_signal,309,Checking type of 'column_state' suggests dynamic or uncertain data types,,1363,,[]
⚠️ SAST Risk (Low): Potential risk if 'column_state' is manipulated externally,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 28665, 62, 5219, 6, 318, 25036, 45107]",0.5,1376,sast_risk,312,Potential risk if 'column_state' is manipulated externally,Low,1363,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Explicitly setting sort indicator improves UI consistency,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 3297, 16916, 19575, 12454, 15794]",0.5,1401,best_practice,313,Explicitly setting sort indicator improves UI consistency,,1376,                self.insert_new_row(data),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 28463, 62, 3605, 62, 808, 7, 7890, 8]"
✅ Best Practice: Class docstring provides a clear description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 13]",1.0,1414,best_practice,312,Class docstring provides a clear description of the class purpose.,,1401,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Type annotations for class variables improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 9633, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1434,best_practice,317,Type annotations for class variables improve code readability and maintainability.,,1414,            self.setSortingEnabled(True),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 50, 24707, 20491, 7, 17821, 8]"
✅ Best Practice: Using a dictionary to define headers allows for easy updates and maintenance.,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 284, 8160, 24697, 3578, 329, 2562, 5992, 290, 9262, 13]",1.0,1453,best_practice,319,Using a dictionary to define headers allows for easy updates and maintenance.,,1434,"    def insert_new_row(self, data: Any) -> None:","[220, 220, 220, 825, 7550, 62, 3605, 62, 808, 7, 944, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
✅ Best Practice: Use of internationalization function _() for display strings.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3230, 1634, 2163, 4808, 3419, 329, 3359, 13042, 13]",0.5,1472,best_practice,319,Use of internationalization function _() for display strings.,,1453,"    def insert_new_row(self, data: Any) -> None:","[220, 220, 220, 825, 7550, 62, 3605, 62, 808, 7, 944, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
✅ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,1472,best_practice,335,Class docstring provides a brief description of the class purpose.,,1472,,[]
✅ Best Practice: Type annotations for class variables improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 9633, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1491,best_practice,340,Type annotations for class variables improve code readability and maintainability.,,1472,"    def update_old_row(self, data: Any) -> None:","[220, 220, 220, 825, 4296, 62, 727, 62, 808, 7, 944, 11, 1366, 25, 4377, 8, 4613, 6045, 25]"
✅ Best Practice: Type annotations for class variables improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 9633, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1505,best_practice,342,Type annotations for class variables improve code readability and maintainability.,,1491,        Update an old row in table.,"[220, 220, 220, 220, 220, 220, 220, 10133, 281, 1468, 5752, 287, 3084, 13]"
✅ Best Practice: Type annotations for class variables improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 9633, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1519,best_practice,342,Type annotations for class variables improve code readability and maintainability.,,1505,        Update an old row in table.,"[220, 220, 220, 220, 220, 220, 220, 10133, 281, 1468, 5752, 287, 3084, 13]"
✅ Best Practice: Type annotations for class variables improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 9633, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1519,best_practice,346,Type annotations for class variables improve code readability and maintainability.,,1519,,[]
🧠 ML Signal: Use of localization function _() indicates internationalization support.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 42842, 2163, 4808, 3419, 9217, 3230, 1634, 1104, 13]",0.5,1541,ml_signal,348,Use of localization function _() indicates internationalization support.,,1519,            content = data.__getattribute__(header),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2695, 796, 1366, 13, 834, 1136, 42348, 834, 7, 25677, 8]"
🧠 ML Signal: Use of localization function _() indicates internationalization support.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 42842, 2163, 4808, 3419, 9217, 3230, 1634, 1104, 13]",0.5,1555,ml_signal,351,Use of localization function _() indicates internationalization support.,,1541,    def resize_columns(self) -> None:,"[220, 220, 220, 825, 47558, 62, 28665, 82, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Use of localization function _() indicates internationalization support.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 42842, 2163, 4808, 3419, 9217, 3230, 1634, 1104, 13]",0.5,1563,ml_signal,352,Use of localization function _() indicates internationalization support.,,1555,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of type annotations for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1577,best_practice,351,Use of type annotations for class variables improves code readability and maintainability.,,1563,    def resize_columns(self) -> None:,"[220, 220, 220, 825, 47558, 62, 28665, 82, 7, 944, 8, 4613, 6045, 25]"
✅ Best Practice: Use of type annotations for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1592,best_practice,353,Use of type annotations for class variables improves code readability and maintainability.,,1577,        Resize all columns according to contents.,"[220, 220, 220, 220, 220, 220, 220, 1874, 1096, 477, 15180, 1864, 284, 10154, 13]"
✅ Best Practice: Use of type annotations for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1600,best_practice,354,Use of type annotations for class variables improves code readability and maintainability.,,1592,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of type annotations for class variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1608,best_practice,354,Use of type annotations for class variables improves code readability and maintainability.,,1600,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1616,ml_signal,354,Use of dictionary to map trade attributes to display properties and cell types.,,1608,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1641,ml_signal,361,Use of dictionary to map trade attributes to display properties and cell types.,,1616,"        path, __ = QtWidgets.QFileDialog.getSaveFileName(","[220, 220, 220, 220, 220, 220, 220, 3108, 11, 11593, 796, 33734, 54, 312, 11407, 13, 48, 8979, 44204, 13, 1136, 16928, 8979, 5376, 7]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1641,ml_signal,363,Use of dictionary to map trade attributes to display properties and cell types.,,1641,,[]
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1653,ml_signal,365,Use of dictionary to map trade attributes to display properties and cell types.,,1641,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1671,ml_signal,367,Use of dictionary to map trade attributes to display properties and cell types.,,1653,"        with open(path, ""w"") as f:","[220, 220, 220, 220, 220, 220, 220, 351, 1280, 7, 6978, 11, 366, 86, 4943, 355, 277, 25]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1701,ml_signal,370,Use of dictionary to map trade attributes to display properties and cell types.,,1671,"            headers: list = [d[""display""] for d in self.headers.values()]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24697, 25, 1351, 796, 685, 67, 14692, 13812, 8973, 329, 288, 287, 2116, 13, 50145, 13, 27160, 3419, 60]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1719,ml_signal,371,Use of dictionary to map trade attributes to display properties and cell types.,,1701,            writer.writerow(headers),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6260, 13, 16002, 322, 7, 50145, 8]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1741,ml_signal,373,Use of dictionary to map trade attributes to display properties and cell types.,,1719,            for row in range(self.rowCount()):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 2837, 7, 944, 13, 808, 12332, 3419, 2599]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1763,ml_signal,373,Use of dictionary to map trade attributes to display properties and cell types.,,1741,            for row in range(self.rowCount()):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 2837, 7, 944, 13, 808, 12332, 3419, 2599]"
🧠 ML Signal: Use of dictionary to map trade attributes to display properties and cell types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3975, 3292, 12608, 284, 3359, 6608, 290, 2685, 3858, 13]",1.0,1785,ml_signal,373,Use of dictionary to map trade attributes to display properties and cell types.,,1763,            for row in range(self.rowCount()):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 2837, 7, 944, 13, 808, 12332, 3419, 2599]"
✅ Best Practice: Use of class variables for shared configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4888, 8398]",0.5,1815,best_practice,370,Use of class variables for shared configuration,,1785,"            headers: list = [d[""display""] for d in self.headers.values()]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24697, 25, 1351, 796, 685, 67, 14692, 13812, 8973, 329, 288, 287, 2116, 13, 50145, 13, 27160, 3419, 60]"
✅ Best Practice: Use of class variables for shared configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4888, 8398]",0.5,1815,best_practice,372,Use of class variables for shared configuration,,1815,,[]
✅ Best Practice: Use of class variables for shared configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4888, 8398]",0.5,1837,best_practice,373,Use of class variables for shared configuration,,1815,            for row in range(self.rowCount()):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 2837, 7, 944, 13, 808, 12332, 3419, 2599]"
✅ Best Practice: Use of class variables for shared configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4888, 8398]",0.5,1859,best_practice,373,Use of class variables for shared configuration,,1837,            for row in range(self.rowCount()):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 2837, 7, 944, 13, 808, 12332, 3419, 2599]"
✅ Best Practice: Use of dictionary for structured data,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 329, 20793, 1366]",0.5,1881,best_practice,373,Use of dictionary for structured data,,1859,            for row in range(self.rowCount()):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 2837, 7, 944, 13, 808, 12332, 3419, 2599]"
✅ Best Practice: Call to superclass method ensures proper initialization,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 37588]",1.0,1894,best_practice,392,Call to superclass method ensures proper initialization,,1881,    def save_setting(self) -> None:,"[220, 220, 220, 825, 3613, 62, 33990, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Use of setToolTip for UI elements,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 25391, 28434, 329, 12454, 4847]",0.5,1928,ml_signal,394,Use of setToolTip for UI elements,,1894,"        settings: QtCore.QSettings = QtCore.QSettings(self.__class__.__name__, ""custom"")","[220, 220, 220, 220, 220, 220, 220, 6460, 25, 33734, 14055, 13, 48, 26232, 796, 33734, 14055, 13, 48, 26232, 7, 944, 13, 834, 4871, 834, 13, 834, 3672, 834, 11, 366, 23144, 4943]"
🧠 ML Signal: Signal-slot connection pattern in PyQt,"[8582, 100, 254, 10373, 26484, 25, 26484, 12, 43384, 4637, 3912, 287, 9485, 48, 83]",1.0,1928,ml_signal,396,Signal-slot connection pattern in PyQt,,1928,,[]
⚠️ SAST Risk (Low): Potential for unintended behavior if cancel_order is not properly defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 30261, 4069, 611, 14241, 62, 2875, 318, 407, 6105, 5447]",0.5,1928,sast_risk,396,Potential for unintended behavior if cancel_order is not properly defined,Low,1928,,[]
🧠 ML Signal: Usage of type hinting for variable 'order' indicates a pattern for static type checking.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 2875, 6, 9217, 257, 3912, 329, 9037, 2099, 10627, 13]",0.5,1962,ml_signal,399,Usage of type hinting for variable 'order' indicates a pattern for static type checking.,,1928,"        settings: QtCore.QSettings = QtCore.QSettings(self.__class__.__name__, ""custom"")","[220, 220, 220, 220, 220, 220, 220, 6460, 25, 33734, 14055, 13, 48, 26232, 796, 33734, 14055, 13, 48, 26232, 7, 944, 13, 834, 4871, 834, 13, 834, 3672, 834, 11, 366, 23144, 4943]"
🧠 ML Signal: Usage of type hinting for variable 'req' indicates a pattern for static type checking.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 42180, 6, 9217, 257, 3912, 329, 9037, 2099, 10627, 13]",0.5,1962,ml_signal,401,Usage of type hinting for variable 'req' indicates a pattern for static type checking.,,1962,,[]
⚠️ SAST Risk (Low): Potential risk if 'cancel_order' method does not handle exceptions from 'main_engine'.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 66, 21130, 62, 2875, 6, 2446, 857, 407, 5412, 13269, 422, 705, 12417, 62, 18392, 4458]",1.0,1987,sast_risk,403,Potential risk if 'cancel_order' method does not handle exceptions from 'main_engine'.,Low,1962,            self.horizontalHeader().restoreState(column_state),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 17899, 38342, 39681, 22446, 2118, 382, 9012, 7, 28665, 62, 5219, 8]"
🧠 ML Signal: Method call pattern on 'main_engine' could be used to identify common API usage.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 705, 12417, 62, 18392, 6, 714, 307, 973, 284, 5911, 2219, 7824, 8748, 13]",0.5,2012,ml_signal,403,Method call pattern on 'main_engine' could be used to identify common API usage.,,1987,            self.horizontalHeader().restoreState(column_state),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 17899, 38342, 39681, 22446, 2118, 382, 9012, 7, 28665, 62, 5219, 8]"
✅ Best Practice: Use of class variables for configuration allows easy modification and access.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 8398, 3578, 2562, 17613, 290, 1895, 13]",1.0,2012,best_practice,406,Use of class variables for configuration allows easy modification and access.,,2012,,[]
✅ Best Practice: Use of class variables for configuration allows easy modification and access.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 8398, 3578, 2562, 17613, 290, 1895, 13]",1.0,2016,best_practice,408,Use of class variables for configuration allows easy modification and access.,,2012,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of class variables for configuration allows easy modification and access.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 8398, 3578, 2562, 17613, 290, 1895, 13]",1.0,2024,best_practice,409,Use of class variables for configuration allows easy modification and access.,,2016,    Monitor for tick data.,"[220, 220, 220, 18289, 329, 4378, 1366, 13]"
✅ Best Practice: Use of a dictionary for headers allows for easy extension and modification.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 329, 24697, 3578, 329, 2562, 7552, 290, 17613, 13]",1.0,2032,best_practice,409,Use of a dictionary for headers allows for easy extension and modification.,,2024,    Monitor for tick data.,"[220, 220, 220, 18289, 329, 4378, 1366, 13]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2040,best_practice,409,Use of descriptive keys and values improves readability and maintainability.,,2032,    Monitor for tick data.,"[220, 220, 220, 18289, 329, 4378, 1366, 13]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2048,best_practice,416,Use of descriptive keys and values improves readability and maintainability.,,2040,    headers: dict = {,"[220, 220, 220, 24697, 25, 8633, 796, 1391]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2083,best_practice,418,Use of descriptive keys and values improves readability and maintainability.,,2048,"        ""exchange"": {""display"": _(""交易所""), ""cell"": EnumCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 19779, 13812, 1298, 4808, 7203, 12859, 97, 23626, 241, 33699, 222, 12340, 366, 3846, 1298, 2039, 388, 28780, 11, 366, 19119, 1298, 10352, 5512]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2118,best_practice,420,Use of descriptive keys and values improves readability and maintainability.,,2083,"        ""last_price"": {""display"": _(""最新价""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 12957, 62, 20888, 1298, 19779, 13812, 1298, 4808, 7203, 17312, 222, 23877, 108, 20015, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2151,best_practice,421,Use of descriptive keys and values improves readability and maintainability.,,2118,"        ""volume"": {""display"": _(""成交量""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 29048, 1298, 19779, 13812, 1298, 4808, 7203, 22755, 238, 12859, 97, 34932, 237, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2186,best_practice,424,Use of descriptive keys and values improves readability and maintainability.,,2151,"        ""low_price"": {""display"": _(""最低价""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 9319, 62, 20888, 1298, 19779, 13812, 1298, 4808, 7203, 17312, 222, 19526, 236, 20015, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2222,best_practice,426,Use of descriptive keys and values improves readability and maintainability.,,2186,"        ""bid_volume_1"": {""display"": _(""买1量""), ""cell"": BidCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 14065, 62, 29048, 62, 16, 1298, 19779, 13812, 1298, 4808, 7203, 20046, 108, 16, 34932, 237, 12340, 366, 3846, 1298, 43484, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2258,best_practice,427,Use of descriptive keys and values improves readability and maintainability.,,2222,"        ""ask_price_1"": {""display"": _(""卖1价""), ""cell"": AskCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 2093, 62, 20888, 62, 16, 1298, 19779, 13812, 1298, 4808, 7203, 39355, 244, 16, 20015, 115, 12340, 366, 3846, 1298, 16981, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of descriptive keys and values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 290, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2294,best_practice,427,Use of descriptive keys and values improves readability and maintainability.,,2258,"        ""ask_price_1"": {""display"": _(""卖1价""), ""cell"": AskCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 2093, 62, 20888, 62, 16, 1298, 19779, 13812, 1298, 4808, 7203, 39355, 244, 16, 20015, 115, 12340, 366, 3846, 1298, 16981, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2329,best_practice,424,Use of type annotations for class attributes improves code readability and maintainability.,,2294,"        ""low_price"": {""display"": _(""最低价""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 9319, 62, 20888, 1298, 19779, 13812, 1298, 4808, 7203, 17312, 222, 19526, 236, 20015, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2365,best_practice,426,Use of type annotations for class attributes improves code readability and maintainability.,,2329,"        ""bid_volume_1"": {""display"": _(""买1量""), ""cell"": BidCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 14065, 62, 29048, 62, 16, 1298, 19779, 13812, 1298, 4808, 7203, 20046, 108, 16, 34932, 237, 12340, 366, 3846, 1298, 43484, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2401,best_practice,427,Use of type annotations for class attributes improves code readability and maintainability.,,2365,"        ""ask_price_1"": {""display"": _(""卖1价""), ""cell"": AskCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 2093, 62, 20888, 62, 16, 1298, 19779, 13812, 1298, 4808, 7203, 39355, 244, 16, 20015, 115, 12340, 366, 3846, 1298, 16981, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2437,best_practice,427,Use of type annotations for class attributes improves code readability and maintainability.,,2401,"        ""ask_price_1"": {""display"": _(""卖1价""), ""cell"": AskCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 2093, 62, 20888, 62, 16, 1298, 19779, 13812, 1298, 4808, 7203, 39355, 244, 16, 20015, 115, 12340, 366, 3846, 1298, 16981, 28780, 11, 366, 19119, 1298, 6407, 5512]"
🧠 ML Signal: Use of dictionary to define configuration or settings.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 8160, 8398, 393, 6460, 13]",0.5,2437,ml_signal,432,Use of dictionary to define configuration or settings.,,2437,,[]
🧠 ML Signal: Use of dictionary to define configuration or settings.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 8160, 8398, 393, 6460, 13]",0.5,2444,ml_signal,434,Use of dictionary to define configuration or settings.,,2437,class LogMonitor(BaseMonitor):,"[4871, 5972, 35479, 7, 14881, 35479, 2599]"
🧠 ML Signal: Use of dictionary to define configuration or settings.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 8160, 8398, 393, 6460, 13]",0.5,2448,ml_signal,435,Use of dictionary to define configuration or settings.,,2444,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Use of dictionary to define configuration or settings.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 8160, 8398, 393, 6460, 13]",0.5,2448,ml_signal,438,Use of dictionary to define configuration or settings.,,2448,,[]
🧠 ML Signal: Use of dictionary to define configuration or settings.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 8160, 8398, 393, 6460, 13]",0.5,2458,ml_signal,440,Use of dictionary to define configuration or settings.,,2448,"    data_key: str = """"","[220, 220, 220, 1366, 62, 2539, 25, 965, 796, 13538]"
🧠 ML Signal: Use of class-level attributes to define constants and configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 284, 8160, 38491, 290, 8398]",1.0,2458,ml_signal,438,Use of class-level attributes to define constants and configuration,,2458,,[]
🧠 ML Signal: Use of class-level attributes to define constants and configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 284, 8160, 38491, 290, 8398]",1.0,2468,ml_signal,440,Use of class-level attributes to define constants and configuration,,2458,"    data_key: str = """"","[220, 220, 220, 1366, 62, 2539, 25, 965, 796, 13538]"
🧠 ML Signal: Use of class-level attributes to define constants and configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 284, 8160, 38491, 290, 8398]",1.0,2476,ml_signal,441,Use of class-level attributes to define constants and configuration,,2468,    sorting: bool = False,"[220, 220, 220, 29407, 25, 20512, 796, 10352]"
🧠 ML Signal: Use of class-level attributes to define constants and configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 12608, 284, 8160, 38491, 290, 8398]",1.0,2484,ml_signal,441,Use of class-level attributes to define constants and configuration,,2476,    sorting: bool = False,"[220, 220, 220, 29407, 25, 20512, 796, 10352]"
✅ Best Practice: Use of dictionary to map keys to display properties and cell types,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 284, 3975, 8251, 284, 3359, 6608, 290, 2685, 3858]",0.5,2492,best_practice,441,Use of dictionary to map keys to display properties and cell types,,2484,    sorting: bool = False,"[220, 220, 220, 29407, 25, 20512, 796, 10352]"
✅ Best Practice: Call to superclass method ensures proper initialization,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 37588]",1.0,2526,best_practice,460,Call to superclass method ensures proper initialization,,2492,"        ""tradeid"": {""display"": _(""成交号""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 25351, 312, 1298, 19779, 13812, 1298, 4808, 7203, 22755, 238, 12859, 97, 20998, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Use of setToolTip with localization function indicates internationalization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 25391, 28434, 351, 42842, 2163, 9217, 3230, 1634]",0.5,2558,ml_signal,462,Use of setToolTip with localization function indicates internationalization,,2526,"        ""symbol"": {""display"": _(""代码""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 1837, 23650, 1298, 19779, 13812, 1298, 4808, 7203, 47987, 163, 254, 223, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Connecting a signal to a slot is a common pattern in event-driven programming,"[8582, 100, 254, 10373, 26484, 25, 8113, 278, 257, 6737, 284, 257, 10852, 318, 257, 2219, 3912, 287, 1785, 12, 15808, 8300]",0.5,2588,ml_signal,464,Connecting a signal to a slot is a common pattern in event-driven programming,,2558,"        ""direction"": {""display"": _(""方向""), ""cell"": DirectionCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 37295, 1298, 19779, 13812, 1298, 4808, 7203, 43095, 28938, 239, 12340, 366, 3846, 1298, 41837, 28780, 11, 366, 19119, 1298, 10352, 5512]"
✅ Best Practice: Docstring provides a clear description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 13]",1.0,2618,best_practice,464,Docstring provides a clear description of the method's purpose.,,2588,"        ""direction"": {""display"": _(""方向""), ""cell"": DirectionCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 37295, 1298, 19779, 13812, 1298, 4808, 7203, 43095, 28938, 239, 12340, 366, 3846, 1298, 41837, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Type hinting for variable 'quote' indicates expected data type.,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 7885, 705, 22708, 6, 9217, 2938, 1366, 2099, 13]",1.0,2650,ml_signal,468,Type hinting for variable 'quote' indicates expected data type.,,2618,"        ""datetime"": {""display"": _(""时间""), ""cell"": TimeCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 19608, 8079, 1298, 19779, 13812, 1298, 4808, 7203, 33768, 114, 29785, 112, 12340, 366, 3846, 1298, 3862, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Type hinting for variable 'req' indicates expected data type.,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 7885, 705, 42180, 6, 9217, 2938, 1366, 2099, 13]",1.0,2654,ml_signal,470,Type hinting for variable 'req' indicates expected data type.,,2650,    },"[220, 220, 220, 1782]"
🧠 ML Signal: Method call pattern on 'self.main_engine' could indicate a common operation.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 705, 944, 13, 12417, 62, 18392, 6, 714, 7603, 257, 2219, 4905, 13]",0.5,2654,ml_signal,471,Method call pattern on 'self.main_engine' could indicate a common operation.,,2654,,[]
✅ Best Practice: Call to super().__init__() ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 22446, 834, 15003, 834, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,2658,best_practice,476,Call to super().__init__() ensures proper initialization of the base class.,,2654,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Type annotations for attributes can be used to infer expected data types.,"[8582, 100, 254, 10373, 26484, 25, 5994, 37647, 329, 12608, 460, 307, 973, 284, 13249, 2938, 1366, 3858, 13]",1.0,2671,ml_signal,478,Type annotations for attributes can be used to infer expected data types.,,2658,    event_type: str = EVENT_ORDER,"[220, 220, 220, 1785, 62, 4906, 25, 965, 796, 49261, 62, 12532, 1137]"
🧠 ML Signal: Type annotations for attributes can be used to infer expected data types.,"[8582, 100, 254, 10373, 26484, 25, 5994, 37647, 329, 12608, 460, 307, 973, 284, 13249, 2938, 1366, 3858, 13]",1.0,2679,ml_signal,480,Type annotations for attributes can be used to infer expected data types.,,2671,    sorting: bool = True,"[220, 220, 220, 29407, 25, 20512, 796, 6407]"
🧠 ML Signal: Use of f-string for filename generation indicates dynamic file naming.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 29472, 5270, 9217, 8925, 2393, 19264, 13]",0.5,2687,ml_signal,482,Use of f-string for filename generation indicates dynamic file naming.,,2679,    headers: dict = {,"[220, 220, 220, 24697, 25, 8633, 796, 1391]"
🧠 ML Signal: Use of type annotations for dictionary with complex types.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 37647, 329, 22155, 351, 3716, 3858, 13]",0.5,2719,ml_signal,484,Use of type annotations for dictionary with complex types.,,2687,"        ""reference"": {""display"": _(""来源""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 35790, 1298, 19779, 13812, 1298, 4808, 7203, 30266, 98, 162, 118, 238, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
✅ Best Practice: Separate method for UI initialization improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8621, 30748, 2446, 329, 12454, 37588, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,2754,best_practice,486,Separate method for UI initialization improves readability and maintainability.,,2719,"        ""exchange"": {""display"": _(""交易所""), ""cell"": EnumCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 19779, 13812, 1298, 4808, 7203, 12859, 97, 23626, 241, 33699, 222, 12340, 366, 3846, 1298, 2039, 388, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Usage of internationalization with _() function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3230, 1634, 351, 4808, 3419, 2163]",1.0,2786,ml_signal,484,Usage of internationalization with _() function,,2754,"        ""reference"": {""display"": _(""来源""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 35790, 1298, 19779, 13812, 1298, 4808, 7203, 30266, 98, 162, 118, 238, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Usage pattern of getting default settings,"[8582, 100, 254, 10373, 26484, 25, 29566, 3912, 286, 1972, 4277, 6460]",0.5,2821,ml_signal,486,Usage pattern of getting default settings,,2786,"        ""exchange"": {""display"": _(""交易所""), ""cell"": EnumCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 19779, 13812, 1298, 4808, 7203, 12859, 97, 23626, 241, 33699, 222, 12340, 366, 3846, 1298, 2039, 388, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Usage pattern of loading settings from a JSON file,"[8582, 100, 254, 10373, 26484, 25, 29566, 3912, 286, 11046, 6460, 422, 257, 19449, 2393]",1.0,2851,ml_signal,488,Usage pattern of loading settings from a JSON file,,2821,"        ""direction"": {""display"": _(""方向""), ""cell"": DirectionCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 37295, 1298, 19779, 13812, 1298, 4808, 7203, 43095, 28938, 239, 12340, 366, 3846, 1298, 41837, 28780, 11, 366, 19119, 1298, 10352, 5512]"
✅ Best Practice: Explicit type annotation for form layout,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 1296, 12461]",1.0,2882,best_practice,490,Explicit type annotation for form layout,,2851,"        ""price"": {""display"": _(""价格""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 20888, 1298, 19779, 13812, 1298, 4808, 7203, 20015, 115, 43718, 120, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
✅ Best Practice: Explicit type annotation for field_type,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 2214, 62, 4906]",1.0,2914,best_practice,494,Explicit type annotation for field_type,,2882,"        ""datetime"": {""display"": _(""时间""), ""cell"": TimeCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 19608, 8079, 1298, 19779, 13812, 1298, 4808, 7203, 33768, 114, 29785, 112, 12340, 366, 3846, 1298, 3862, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Explicit type annotation for combo box,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 14831, 3091]",1.0,2914,best_practice,497,Explicit type annotation for combo box,,2914,,[]
🧠 ML Signal: Pattern of populating combo box with items,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 1461, 8306, 14831, 3091, 351, 3709]",0.5,2922,ml_signal,499,Pattern of populating combo box with items,,2914,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Explicit type annotation for index,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 6376]",1.0,2922,best_practice,503,Explicit type annotation for index,,2922,,[]
🧠 ML Signal: Pattern of adding widgets to form layout,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4375, 40803, 284, 1296, 12461]",0.5,2922,ml_signal,506,Pattern of adding widgets to form layout,,2922,,[]
🧠 ML Signal: Pattern of storing widget references,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 26295, 10288]",0.5,2930,ml_signal,508,Pattern of storing widget references,,2922,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Explicit type annotation for line edit,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 1627, 4370]",1.0,2948,best_practice,511,Explicit type annotation for line edit,,2930,        order: OrderData = cell.get_data(),"[220, 220, 220, 220, 220, 220, 220, 1502, 25, 8284, 6601, 796, 2685, 13, 1136, 62, 7890, 3419]"
⚠️ SAST Risk (Low): Potential exposure of sensitive information if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1321, 611, 407, 12118, 6105]",1.0,2955,sast_risk,516,Potential exposure of sensitive information if not handled properly,Low,2948,class PositionMonitor(BaseMonitor):,"[4871, 23158, 35479, 7, 14881, 35479, 2599]"
✅ Best Practice: Explicit type annotation for validator,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 4938, 1352]",1.0,2955,best_practice,520,Explicit type annotation for validator,,2955,,[]
✅ Best Practice: Explicit type annotation for button,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 4936]",1.0,2963,best_practice,525,Explicit type annotation for button,,2955,    headers: dict = {,"[220, 220, 220, 24697, 25, 8633, 796, 1391]"
🧠 ML Signal: Pattern of connecting button click to a function,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 14320, 4936, 3904, 284, 257, 2163]",1.0,2998,ml_signal,527,Pattern of connecting button click to a function,,2963,"        ""exchange"": {""display"": _(""交易所""), ""cell"": EnumCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 19779, 13812, 1298, 4808, 7203, 12859, 97, 23626, 241, 33699, 222, 12340, 366, 3846, 1298, 2039, 388, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Pattern of setting layout for a widget,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4634, 12461, 329, 257, 26295]",0.5,3029,ml_signal,529,Pattern of setting layout for a widget,,2998,"        ""volume"": {""display"": _(""数量""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 29048, 1298, 19779, 13812, 1298, 4808, 7203, 46763, 108, 34932, 237, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
🧠 ML Signal: Iterating over a dictionary to process UI widget data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 1429, 12454, 26295, 1366]",0.5,3042,ml_signal,521,Iterating over a dictionary to process UI widget data,,3029,    event_type: str = EVENT_POSITION,"[220, 220, 220, 1785, 62, 4906, 25, 965, 796, 49261, 62, 37997, 17941]"
✅ Best Practice: Use 'is' for comparing types with singletons like 'list',"[26486, 227, 6705, 19939, 25, 5765, 705, 271, 6, 329, 14176, 3858, 351, 1702, 1616, 684, 588, 705, 4868, 6]",0.5,3042,best_practice,524,Use 'is' for comparing types with singletons like 'list',,3042,,[]
🧠 ML Signal: Retrieving current text from a QComboBox,"[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 1459, 2420, 422, 257, 1195, 5377, 2127, 14253]",0.5,3077,ml_signal,527,Retrieving current text from a QComboBox,,3042,"        ""exchange"": {""display"": _(""交易所""), ""cell"": EnumCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 1069, 3803, 1298, 19779, 13812, 1298, 4808, 7203, 12859, 97, 23626, 241, 33699, 222, 12340, 366, 3846, 1298, 2039, 388, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Converting text input to a specific field type,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 2420, 5128, 284, 257, 2176, 2214, 2099]",0.5,3109,ml_signal,532,Converting text input to a specific field type,,3077,"        ""price"": {""display"": _(""均价""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 20888, 1298, 19779, 13812, 1298, 4808, 7203, 161, 251, 229, 20015, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
⚠️ SAST Risk (Low): Defaulting to a type's constructor without handling specific cases,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15161, 278, 284, 257, 2099, 338, 23772, 1231, 9041, 2176, 2663]",0.5,3113,sast_risk,535,Defaulting to a type's constructor without handling specific cases,Low,3109,    },"[220, 220, 220, 1782]"
🧠 ML Signal: Storing processed widget data in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 13686, 26295, 1366, 287, 257, 22155]",0.5,3113,ml_signal,537,Storing processed widget data in a dictionary,,3113,,[]
⚠️ SAST Risk (Medium): Potential risk of saving sensitive data in JSON format,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 8914, 8564, 1366, 287, 19449, 5794]",0.5,3121,sast_risk,540,Potential risk of saving sensitive data in JSON format,Medium,3113,    Monitor for account data.,"[220, 220, 220, 18289, 329, 1848, 1366, 13]"
🧠 ML Signal: Using a main engine to connect with settings and a gateway name,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 1388, 3113, 284, 2018, 351, 6460, 290, 257, 24308, 1438]",0.5,3125,ml_signal,541,Using a main engine to connect with settings and a gateway name,,3121,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Invoking a method to accept or finalize an operation,"[8582, 100, 254, 10373, 26484, 25, 10001, 5730, 257, 2446, 284, 2453, 393, 2457, 1096, 281, 4905]",0.5,3138,ml_signal,543,Invoking a method to accept or finalize an operation,,3125,    event_type: str = EVENT_ACCOUNT,"[220, 220, 220, 1785, 62, 4906, 25, 965, 796, 49261, 62, 26861, 28270]"
"🧠 ML Signal: Definition of a class, useful for understanding object-oriented patterns","[8582, 100, 254, 10373, 26484, 25, 30396, 286, 257, 1398, 11, 4465, 329, 4547, 2134, 12, 17107, 7572]",0.5,3138,ml_signal,536,"Definition of a class, useful for understanding object-oriented patterns",,3138,,[]
"🧠 ML Signal: Use of type annotations, useful for type inference models","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 37647, 11, 4465, 329, 2099, 32278, 4981]",0.5,3142,ml_signal,541,"Use of type annotations, useful for type inference models",,3138,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of type annotations for class attributes,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608]",0.5,3142,best_practice,542,Use of type annotations for class attributes,,3142,,[]
🧠 ML Signal: Usage of type annotations for constructor parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 37647, 329, 23772, 10007]",0.5,3157,ml_signal,544,Usage of type annotations for constructor parameters,,3142,"    data_key: str = ""vt_accountid""","[220, 220, 220, 1366, 62, 2539, 25, 965, 796, 366, 36540, 62, 23317, 312, 1]"
🧠 ML Signal: Usage of type annotations for instance variables,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 37647, 329, 4554, 9633]",0.5,3157,ml_signal,546,Usage of type annotations for instance variables,,3157,,[]
🧠 ML Signal: Usage of type annotations for instance variables,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 37647, 329, 4554, 9633]",0.5,3190,ml_signal,548,Usage of type annotations for instance variables,,3157,"        ""accountid"": {""display"": _(""账号""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 23317, 312, 1298, 19779, 13812, 1298, 4808, 7203, 164, 112, 99, 20998, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Usage of type annotations for instance variables,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 37647, 329, 4554, 9633]",0.5,3223,ml_signal,550,Usage of type annotations for instance variables,,3190,"        ""frozen"": {""display"": _(""冻结""), ""cell"": BaseCell, ""update"": True},","[220, 220, 220, 220, 220, 220, 220, 366, 69, 42005, 1298, 19779, 13812, 1298, 4808, 7203, 37863, 119, 163, 119, 241, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 6407, 5512]"
✅ Best Practice: Initializing UI components in a separate method,"[26486, 227, 6705, 19939, 25, 20768, 2890, 12454, 6805, 287, 257, 4553, 2446]",0.5,3258,best_practice,552,Initializing UI components in a separate method,,3223,"        ""gateway_name"": {""display"": _(""接口""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 10494, 1014, 62, 3672, 1298, 19779, 13812, 1298, 4808, 7203, 162, 236, 98, 20998, 96, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
✅ Best Practice: Registering events in a separate method,"[26486, 227, 6705, 19939, 25, 17296, 278, 2995, 287, 257, 4553, 2446]",0.5,3258,best_practice,554,Registering events in a separate method,,3258,,[]
🧠 ML Signal: Fixed UI width might indicate a specific design choice or constraint,"[8582, 100, 254, 10373, 26484, 25, 10832, 12454, 9647, 1244, 7603, 257, 2176, 1486, 3572, 393, 32315]",1.0,3293,ml_signal,552,Fixed UI width might indicate a specific design choice or constraint,,3258,"        ""gateway_name"": {""display"": _(""接口""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 10494, 1014, 62, 3672, 1298, 19779, 13812, 1298, 4808, 7203, 162, 236, 98, 20998, 96, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Usage of type hints for list of custom objects,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 20269, 329, 1351, 286, 2183, 5563]",1.0,3293,ml_signal,554,Usage of type hints for list of custom objects,,3293,,[]
🧠 ML Signal: Usage of QtWidgets for UI components,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 33734, 54, 312, 11407, 329, 12454, 6805]",1.0,3300,ml_signal,556,Usage of QtWidgets for UI components,,3293,class QuoteMonitor(BaseMonitor):,"[4871, 19879, 35479, 7, 14881, 35479, 2599]"
🧠 ML Signal: Populating combo box with dynamic data,"[8582, 100, 254, 10373, 26484, 25, 8099, 8306, 14831, 3091, 351, 8925, 1366]",1.0,3308,ml_signal,558,Populating combo box with dynamic data,,3300,    Monitor for quote data.,"[220, 220, 220, 18289, 329, 9577, 1366, 13]"
🧠 ML Signal: Connecting signal to slot for event handling,"[8582, 100, 254, 10373, 26484, 25, 8113, 278, 6737, 284, 10852, 329, 1785, 9041]",1.0,3321,ml_signal,561,Connecting signal to slot for event handling,,3308,    event_type: str = EVENT_QUOTE,"[220, 220, 220, 1785, 62, 4906, 25, 965, 796, 49261, 62, 10917, 23051]"
🧠 ML Signal: Setting a QLineEdit to read-only,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 1195, 13949, 18378, 284, 1100, 12, 8807]",1.0,3321,ml_signal,564,Setting a QLineEdit to read-only,,3321,,[]
🧠 ML Signal: Adding items to combo box from enum values,"[8582, 100, 254, 10373, 26484, 25, 18247, 3709, 284, 14831, 3091, 422, 33829, 3815]",1.0,3356,ml_signal,566,Adding items to combo box from enum values,,3321,"        ""quoteid"": {""display"": _(""报价号""), ""cell"": BaseCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 22708, 312, 1298, 19779, 13812, 1298, 4808, 7203, 162, 232, 98, 20015, 115, 20998, 115, 12340, 366, 3846, 1298, 7308, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Usage of validators for input fields,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4938, 2024, 329, 5128, 7032]",1.0,3392,ml_signal,575,Usage of validators for input fields,,3356,"        ""ask_offset"": {""display"": _(""卖开平""), ""cell"": EnumCell, ""update"": False},","[220, 220, 220, 220, 220, 220, 220, 366, 2093, 62, 28968, 1298, 19779, 13812, 1298, 4808, 7203, 39355, 244, 28156, 222, 33176, 111, 12340, 366, 3846, 1298, 2039, 388, 28780, 11, 366, 19119, 1298, 10352, 5512]"
🧠 ML Signal: Populating combo box with dynamic data,"[8582, 100, 254, 10373, 26484, 25, 8099, 8306, 14831, 3091, 351, 8925, 1366]",1.0,3402,ml_signal,583,Populating combo box with dynamic data,,3392,        Connect signal.,"[220, 220, 220, 220, 220, 220, 220, 8113, 6737, 13]"
🧠 ML Signal: Setting tooltip for UI element,"[8582, 100, 254, 10373, 26484, 25, 25700, 49472, 329, 12454, 5002]",1.0,3402,ml_signal,586,Setting tooltip for UI element,,3402,,[]
🧠 ML Signal: Connecting signal to slot for event handling,"[8582, 100, 254, 10373, 26484, 25, 8113, 278, 6737, 284, 10852, 329, 1785, 9041]",1.0,3402,ml_signal,589,Connecting signal to slot for event handling,,3402,,[]
🧠 ML Signal: Connecting signal to slot for event handling,"[8582, 100, 254, 10373, 26484, 25, 8113, 278, 6737, 284, 10852, 329, 1785, 9041]",1.0,3416,ml_signal,592,Connecting signal to slot for event handling,,3402,        Cancel quote if cell double clicked.,"[220, 220, 220, 220, 220, 220, 220, 27910, 9577, 611, 2685, 4274, 28384, 13]"
🧠 ML Signal: Adding widgets to grid layout,"[8582, 100, 254, 10373, 26484, 25, 18247, 40803, 284, 10706, 12461]",1.0,3437,ml_signal,595,Adding widgets to grid layout,,3416,        req: CancelRequest = quote.create_cancel_request(),"[220, 220, 220, 220, 220, 220, 220, 43089, 25, 27910, 18453, 796, 9577, 13, 17953, 62, 66, 21130, 62, 25927, 3419]"
🧠 ML Signal: Usage of color codes for UI elements,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3124, 12416, 329, 12454, 4847]",1.0,3447,ml_signal,617,Usage of color codes for UI elements,,3437,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Creating labels with specific colors,"[8582, 100, 254, 10373, 26484, 25, 30481, 14722, 351, 2176, 7577]",1.0,3447,ml_signal,619,Creating labels with specific colors,,3447,,[]
🧠 ML Signal: Adding rows to form layout,"[8582, 100, 254, 10373, 26484, 25, 18247, 15274, 284, 1296, 12461]",1.0,3473,ml_signal,654,Adding rows to form layout,,3447,                    if field_type is int:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2214, 62, 4906, 318, 493, 25]"
🧠 ML Signal: Combining layouts into a vertical box layout,"[8582, 100, 254, 10373, 26484, 25, 14336, 3191, 38489, 656, 257, 11723, 3091, 12461]",1.0,3487,ml_signal,667,Combining layouts into a vertical box layout,,3473,    def connect_gateway(self) -> None:,"[220, 220, 220, 825, 2018, 62, 10494, 1014, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Setting the main layout for the UI,"[8582, 100, 254, 10373, 26484, 25, 25700, 262, 1388, 12461, 329, 262, 12454]",1.0,3495,ml_signal,670,Setting the main layout for the UI,,3487,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Initialize the QLabel object outside of any conditionals for clarity.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 262, 1195, 33986, 2134, 2354, 286, 597, 4006, 874, 329, 16287, 13]",0.5,3516,best_practice,662,Initialize the QLabel object outside of any conditionals for clarity.,,3495,        button.clicked.connect(self.connect_gateway),"[220, 220, 220, 220, 220, 220, 220, 4936, 13, 565, 9484, 13, 8443, 7, 944, 13, 8443, 62, 10494, 1014, 8]"
⚠️ SAST Risk (Low): Potential for code injection if 'color' is derived from untrusted input.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 2438, 16954, 611, 705, 8043, 6, 318, 10944, 422, 1418, 81, 8459, 5128, 13]",1.0,3530,sast_risk,665,Potential for code injection if 'color' is derived from untrusted input.,Low,3516,        self.setLayout(form),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 32517, 7, 687, 8]"
⚠️ SAST Risk (Low): Ensure 'alignment' is a valid Qt.AlignmentFlag to prevent unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 282, 16747, 6, 318, 257, 4938, 33734, 13, 2348, 16747, 34227, 284, 2948, 10059, 4069, 13]",1.0,3544,sast_risk,667,Ensure 'alignment' is a valid Qt.AlignmentFlag to prevent unexpected behavior.,Low,3530,    def connect_gateway(self) -> None:,"[220, 220, 220, 825, 2018, 62, 10494, 1014, 7, 944, 8, 4613, 6045, 25]"
"🧠 ML Signal: Method connects a signal to a slot, indicating an event-driven pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 20417, 257, 6737, 284, 257, 10852, 11, 12739, 281, 1785, 12, 15808, 3912]",1.0,3562,ml_signal,669,"Method connects a signal to a slot, indicating an event-driven pattern",,3544,        Get setting value from line edits and connect the gateway.,"[220, 220, 220, 220, 220, 220, 220, 3497, 4634, 1988, 422, 1627, 31671, 290, 2018, 262, 24308, 13]"
"🧠 ML Signal: Registers an event with a callback, indicating usage of an event-driven architecture","[8582, 100, 254, 10373, 26484, 25, 3310, 6223, 281, 1785, 351, 257, 23838, 11, 12739, 8748, 286, 281, 1785, 12, 15808, 10959]",1.0,3574,ml_signal,671,"Registers an event with a callback, indicating usage of an event-driven architecture",,3562,        setting: dict = {},"[220, 220, 220, 220, 220, 220, 220, 4634, 25, 8633, 796, 23884]"
✅ Best Practice: Early return pattern improves readability by reducing nesting.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 1100, 1799, 416, 8868, 46282, 13]",0.5,3593,best_practice,674,Early return pattern improves readability by reducing nesting.,,3574,"            widget, field_type = tp","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26295, 11, 2214, 62, 4906, 796, 256, 79]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3606,ml_signal,678,Usage of setText method on UI elements indicates UI update pattern.,,3593,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3623,ml_signal,680,Usage of setText method on UI elements indicates UI update pattern.,,3606,                try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3642,ml_signal,682,Usage of setText method on UI elements indicates UI update pattern.,,3623,                except ValueError:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 11052, 12331, 25]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3663,ml_signal,684,Usage of setText method on UI elements indicates UI update pattern.,,3642,            setting[field_name] = field_value,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4634, 58, 3245, 62, 3672, 60, 796, 2214, 62, 8367]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3680,ml_signal,686,Usage of setText method on UI elements indicates UI update pattern.,,3663,"        save_json(self.filename, setting)","[220, 220, 220, 220, 220, 220, 220, 3613, 62, 17752, 7, 944, 13, 34345, 11, 4634, 8]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3680,ml_signal,690,Usage of setText method on UI elements indicates UI update pattern.,,3680,,[]
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3684,ml_signal,693,Usage of setText method on UI elements indicates UI update pattern.,,3680,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3688,ml_signal,695,Usage of setText method on UI elements indicates UI update pattern.,,3684,"    """"""","[220, 220, 220, 37227]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3709,ml_signal,697,Usage of setText method on UI elements indicates UI update pattern.,,3688,    signal_tick: QtCore.Signal = QtCore.Signal(Event),"[220, 220, 220, 6737, 62, 42298, 25, 33734, 14055, 13, 11712, 282, 796, 33734, 14055, 13, 11712, 282, 7, 9237, 8]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3736,ml_signal,699,Usage of setText method on UI elements indicates UI update pattern.,,3709,"    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1388, 62, 18392, 25, 8774, 13798, 11, 1785, 62, 18392, 25, 8558, 13798, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3749,ml_signal,701,Usage of setText method on UI elements indicates UI update pattern.,,3736,        super().__init__(),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 3419]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3768,ml_signal,703,Usage of setText method on UI elements indicates UI update pattern.,,3749,        self.main_engine: MainEngine = main_engine,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 12417, 62, 18392, 25, 8774, 13798, 796, 1388, 62, 18392]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3768,ml_signal,705,Usage of setText method on UI elements indicates UI update pattern.,,3768,,[]
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3768,ml_signal,708,Usage of setText method on UI elements indicates UI update pattern.,,3768,,[]
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3781,ml_signal,709,Usage of setText method on UI elements indicates UI update pattern.,,3768,        self.init_ui(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 9019, 3419]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3781,ml_signal,711,Usage of setText method on UI elements indicates UI update pattern.,,3781,,[]
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3791,ml_signal,713,Usage of setText method on UI elements indicates UI update pattern.,,3781,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3791,ml_signal,715,Usage of setText method on UI elements indicates UI update pattern.,,3791,,[]
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3819,ml_signal,717,Usage of setText method on UI elements indicates UI update pattern.,,3791,        exchanges: list[Exchange] = self.main_engine.get_all_exchanges(),"[220, 220, 220, 220, 220, 220, 220, 14525, 25, 1351, 58, 3109, 3803, 60, 796, 2116, 13, 12417, 62, 18392, 13, 1136, 62, 439, 62, 1069, 36653, 3419]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3846,ml_signal,719,Usage of setText method on UI elements indicates UI update pattern.,,3819,        self.exchange_combo.addItems([exchange.value for exchange in exchanges]),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1069, 3803, 62, 785, 2127, 13, 2860, 23022, 26933, 1069, 3803, 13, 8367, 329, 5163, 287, 14525, 12962]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3878,ml_signal,721,Usage of setText method on UI elements indicates UI update pattern.,,3846,        self.symbol_line: QtWidgets.QLineEdit = QtWidgets.QLineEdit(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1837, 23650, 62, 1370, 25, 33734, 54, 312, 11407, 13, 9711, 500, 18378, 796, 33734, 54, 312, 11407, 13, 9711, 500, 18378, 3419]"
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3878,ml_signal,723,Usage of setText method on UI elements indicates UI update pattern.,,3878,,[]
🧠 ML Signal: Usage of setText method on UI elements indicates UI update pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 8206, 2446, 319, 12454, 4847, 9217, 12454, 4296, 3912, 13]",0.5,3878,ml_signal,726,Usage of setText method on UI elements indicates UI update pattern.,,3878,,[]
"🧠 ML Signal: Checks for empty input, a common pattern for input validation","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 6565, 5128, 11, 257, 2219, 3912, 329, 5128, 21201]",0.5,3891,ml_signal,709,"Checks for empty input, a common pattern for input validation",,3878,        self.init_ui(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 9019, 3419]"
🧠 ML Signal: Constructs a unique identifier using multiple fields,"[8582, 100, 254, 10373, 26484, 25, 28407, 82, 257, 3748, 27421, 1262, 3294, 7032]",0.5,3901,ml_signal,713,Constructs a unique identifier using multiple fields,,3891,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Compares current and new state to avoid unnecessary updates,"[8582, 100, 254, 10373, 26484, 25, 3082, 3565, 1459, 290, 649, 1181, 284, 3368, 13114, 5992]",0.5,3901,ml_signal,715,Compares current and new state to avoid unnecessary updates,,3901,,[]
⚠️ SAST Risk (Low): Potential NoneType if get_contract returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 611, 651, 62, 28484, 5860, 6045]",0.5,3928,sast_risk,719,Potential NoneType if get_contract returns None,Low,3901,        self.exchange_combo.addItems([exchange.value for exchange in exchanges]),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1069, 3803, 62, 785, 2127, 13, 2860, 23022, 26933, 1069, 3803, 13, 8367, 329, 5163, 287, 14525, 12962]"
"🧠 ML Signal: Checks for None, a common pattern for handling optional values","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 6045, 11, 257, 2219, 3912, 329, 9041, 11902, 3815]",0.5,3960,ml_signal,721,"Checks for None, a common pattern for handling optional values",,3928,        self.symbol_line: QtWidgets.QLineEdit = QtWidgets.QLineEdit(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1837, 23650, 62, 1370, 25, 33734, 54, 312, 11407, 13, 9711, 500, 18378, 796, 33734, 54, 312, 11407, 13, 9711, 500, 18378, 3419]"
⚠️ SAST Risk (Low): Assumes gateway_name is always found in the combo box,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 24308, 62, 3672, 318, 1464, 1043, 287, 262, 14831, 3091]",0.5,3977,sast_risk,728,Assumes gateway_name is always found in the combo box,Low,3960,        self.direction_combo.addItems(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37295, 62, 785, 2127, 13, 2860, 23022, 7]"
✅ Best Practice: Encapsulates logic for extracting digits,"[26486, 227, 6705, 19939, 25, 14711, 1686, 15968, 9156, 329, 37895, 19561]",0.5,4003,best_practice,732,Encapsulates logic for extracting digits,,3977,        self.offset_combo.addItems([offset.value for offset in Offset]),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28968, 62, 785, 2127, 13, 2860, 23022, 26933, 28968, 13, 8367, 329, 11677, 287, 3242, 2617, 12962]"
🧠 ML Signal: Uses a request object to encapsulate parameters for an operation,"[8582, 100, 254, 10373, 26484, 25, 36965, 257, 2581, 2134, 284, 32652, 5039, 10007, 329, 281, 4905]",0.5,4003,ml_signal,737,Uses a request object to encapsulate parameters for an operation,,4003,,[]
⚠️ SAST Risk (Low): Assumes gateway_name is valid and correctly set,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 24308, 62, 3672, 318, 4938, 290, 9380, 900]",0.5,4003,sast_risk,740,Assumes gateway_name is valid and correctly set,Low,4003,,[]
✅ Best Practice: Use a loop or list to manage repetitive tasks for better maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 257, 9052, 393, 1351, 284, 6687, 28585, 8861, 329, 1365, 5529, 1799, 13]",0.5,4003,best_practice,737,Use a loop or list to manage repetitive tasks for better maintainability.,,4003,,[]
⚠️ SAST Risk (Low): Lack of input validation for 'symbol' could lead to unexpected behavior or errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 5128, 21201, 329, 705, 1837, 23650, 6, 714, 1085, 284, 10059, 4069, 393, 8563, 13]",0.5,4035,sast_risk,764,Lack of input validation for 'symbol' could lead to unexpected behavior or errors.,Low,4003,"        grid.addWidget(QtWidgets.QLabel(_(""开平"")), 4, 0)","[220, 220, 220, 220, 220, 220, 220, 10706, 13, 2860, 38300, 7, 48, 83, 54, 312, 11407, 13, 9711, 9608, 28264, 7203, 28156, 222, 33176, 111, 4943, 828, 604, 11, 657, 8]"
⚠️ SAST Risk (Low): Lack of input validation for 'volume_text' could lead to unexpected behavior or errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 5128, 21201, 329, 705, 29048, 62, 5239, 6, 714, 1085, 284, 10059, 4069, 393, 8563, 13]",0.5,4063,sast_risk,769,Lack of input validation for 'volume_text' could lead to unexpected behavior or errors.,Low,4035,"        grid.addWidget(self.exchange_combo, 0, 1, 1, 2)","[220, 220, 220, 220, 220, 220, 220, 10706, 13, 2860, 38300, 7, 944, 13, 1069, 3803, 62, 785, 2127, 11, 657, 11, 352, 11, 352, 11, 362, 8]"
⚠️ SAST Risk (Low): Potential ValueError if 'volume_text' is not a valid float.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 11052, 12331, 611, 705, 29048, 62, 5239, 6, 318, 407, 257, 4938, 12178, 13]",1.0,4092,sast_risk,774,Potential ValueError if 'volume_text' is not a valid float.,Low,4063,"        grid.addWidget(self.order_type_combo, 5, 1, 1, 2)","[220, 220, 220, 220, 220, 220, 220, 10706, 13, 2860, 38300, 7, 944, 13, 2875, 62, 4906, 62, 785, 2127, 11, 642, 11, 352, 11, 352, 11, 362, 8]"
⚠️ SAST Risk (Low): Lack of input validation for 'price_text' could lead to unexpected behavior or errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 5128, 21201, 329, 705, 20888, 62, 5239, 6, 714, 1085, 284, 10059, 4069, 393, 8563, 13]",0.5,4118,sast_risk,776,Lack of input validation for 'price_text' could lead to unexpected behavior or errors.,Low,4092,"        grid.addWidget(self.price_check, 6, 2, 1, 1)","[220, 220, 220, 220, 220, 220, 220, 10706, 13, 2860, 38300, 7, 944, 13, 20888, 62, 9122, 11, 718, 11, 362, 11, 352, 11, 352, 8]"
⚠️ SAST Risk (Low): Potential ValueError if 'price_text' is not a valid float.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 11052, 12331, 611, 705, 20888, 62, 5239, 6, 318, 407, 257, 4938, 12178, 13]",1.0,4144,sast_risk,777,Potential ValueError if 'price_text' is not a valid float.,Low,4118,"        grid.addWidget(self.volume_line, 7, 1, 1, 2)","[220, 220, 220, 220, 220, 220, 220, 10706, 13, 2860, 38300, 7, 944, 13, 29048, 62, 1370, 11, 767, 11, 352, 11, 352, 11, 362, 8]"
⚠️ SAST Risk (Low): Lack of validation for 'exchange' could lead to invalid exchange values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 21201, 329, 705, 1069, 3803, 6, 714, 1085, 284, 12515, 5163, 3815, 13]",0.5,4176,sast_risk,787,Lack of validation for 'exchange' could lead to invalid exchange values.,Low,4144,        self.bp2_label: QtWidgets.QLabel = self.create_label(bid_color),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46583, 17, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7, 14065, 62, 8043, 8]"
⚠️ SAST Risk (Low): Lack of validation for 'direction' could lead to invalid direction values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 21201, 329, 705, 37295, 6, 714, 1085, 284, 12515, 4571, 3815, 13]",0.5,4208,sast_risk,787,Lack of validation for 'direction' could lead to invalid direction values.,Low,4176,        self.bp2_label: QtWidgets.QLabel = self.create_label(bid_color),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46583, 17, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7, 14065, 62, 8043, 8]"
⚠️ SAST Risk (Low): Lack of validation for 'type' could lead to invalid order type values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 21201, 329, 705, 4906, 6, 714, 1085, 284, 12515, 1502, 2099, 3815, 13]",0.5,4240,sast_risk,789,Lack of validation for 'type' could lead to invalid order type values.,Low,4208,        self.bp4_label: QtWidgets.QLabel = self.create_label(bid_color),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46583, 19, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7, 14065, 62, 8043, 8]"
⚠️ SAST Risk (Low): Lack of validation for 'offset' could lead to invalid offset values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 21201, 329, 705, 28968, 6, 714, 1085, 284, 12515, 11677, 3815, 13]",0.5,4272,sast_risk,793,Lack of validation for 'offset' could lead to invalid offset values.,Low,4240,"            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8406, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
⚠️ SAST Risk (Low): Lack of validation for 'gateway_name' could lead to invalid gateway values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 21201, 329, 705, 10494, 1014, 62, 3672, 6, 714, 1085, 284, 12515, 24308, 3815, 13]",0.5,4304,sast_risk,797,Lack of validation for 'gateway_name' could lead to invalid gateway values.,Low,4272,"            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8406, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
🧠 ML Signal: Usage of 'send_order' method could indicate user behavior patterns in trading applications.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 21280, 62, 2875, 6, 2446, 714, 7603, 2836, 4069, 7572, 287, 7313, 5479, 13]",0.5,4336,ml_signal,799,Usage of 'send_order' method could indicate user behavior patterns in trading applications.,,4304,"            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8406, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
🧠 ML Signal: Usage of a method to retrieve all active orders,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 19818, 477, 4075, 6266]",0.5,4368,ml_signal,793,Usage of a method to retrieve all active orders,,4336,"            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8406, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
🧠 ML Signal: Pattern of creating a cancel request from an order,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 257, 14241, 2581, 422, 281, 1502]",0.5,4397,ml_signal,796,Pattern of creating a cancel request from an order,,4368,        self.bv3_label: QtWidgets.QLabel = self.create_label(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 18, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7]"
🧠 ML Signal: Pattern of cancelling an order using a request and gateway name,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10450, 2680, 281, 1502, 1262, 257, 2581, 290, 24308, 1438]",0.5,4426,ml_signal,798,Pattern of cancelling an order using a request and gateway name,,4397,        self.bv4_label: QtWidgets.QLabel = self.create_label(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 19, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7]"
"🧠 ML Signal: Method accessing data from a cell object, indicating a pattern of data extraction","[8582, 100, 254, 10373, 26484, 25, 11789, 22534, 1366, 422, 257, 2685, 2134, 11, 12739, 257, 3912, 286, 1366, 22236]",1.0,4458,ml_signal,799,"Method accessing data from a cell object, indicating a pattern of data extraction",,4426,"            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8406, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
"🧠 ML Signal: Setting text in a UI component, indicating a pattern of UI updates","[8582, 100, 254, 10373, 26484, 25, 25700, 2420, 287, 257, 12454, 7515, 11, 12739, 257, 3912, 286, 12454, 5992]",0.5,4490,ml_signal,801,"Setting text in a UI component, indicating a pattern of UI updates",,4458,"            bid_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8406, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
"🧠 ML Signal: Setting current index in a combo box, indicating a pattern of UI interaction","[8582, 100, 254, 10373, 26484, 25, 25700, 1459, 6376, 287, 257, 14831, 3091, 11, 12739, 257, 3912, 286, 12454, 10375]",0.5,4522,ml_signal,804,"Setting current index in a combo box, indicating a pattern of UI interaction",,4490,        self.ap2_label: QtWidgets.QLabel = self.create_label(ask_color),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 17, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7, 2093, 62, 8043, 8]"
✅ Best Practice: Encapsulation of functionality in a separate method,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 11244, 287, 257, 4553, 2446]",0.5,4554,best_practice,807,Encapsulation of functionality in a separate method,,4522,        self.ap5_label: QtWidgets.QLabel = self.create_label(ask_color),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 20, 62, 18242, 25, 33734, 54, 312, 11407, 13, 9711, 9608, 796, 2116, 13, 17953, 62, 18242, 7, 2093, 62, 8043, 8]"
"🧠 ML Signal: Setting current index in a combo box, indicating a pattern of UI interaction","[8582, 100, 254, 10373, 26484, 25, 25700, 1459, 6376, 287, 257, 14831, 3091, 11, 12739, 257, 3912, 286, 12454, 10375]",0.5,4586,ml_signal,818,"Setting current index in a combo box, indicating a pattern of UI interaction",,4554,"            ask_color, alignment=QtCore.Qt.AlignmentFlag.AlignRight)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1265, 62, 8043, 11, 19114, 28, 48, 83, 14055, 13, 48, 83, 13, 2348, 16747, 34227, 13, 2348, 570, 11028, 8]"
"🧠 ML Signal: Setting current index in a combo box, indicating a pattern of UI interaction","[8582, 100, 254, 10373, 26484, 25, 25700, 1459, 6376, 287, 257, 14831, 3091, 11, 12739, 257, 3912, 286, 12454, 10375]",0.5,4613,ml_signal,823,"Setting current index in a combo box, indicating a pattern of UI interaction",,4586,        form: QtWidgets.QFormLayout = QtWidgets.QFormLayout(),"[220, 220, 220, 220, 220, 220, 220, 1296, 25, 33734, 54, 312, 11407, 13, 48, 8479, 32517, 796, 33734, 54, 312, 11407, 13, 48, 8479, 32517, 3419]"
"🧠 ML Signal: Setting text in a UI component, indicating a pattern of UI updates","[8582, 100, 254, 10373, 26484, 25, 25700, 2420, 287, 257, 12454, 7515, 11, 12739, 257, 3912, 286, 12454, 5992]",0.5,4639,ml_signal,827,"Setting text in a UI component, indicating a pattern of UI updates",,4613,"        form.addRow(self.ap2_label, self.av2_label)","[220, 220, 220, 220, 220, 220, 220, 1296, 13, 2860, 25166, 7, 944, 13, 499, 17, 62, 18242, 11, 2116, 13, 615, 17, 62, 18242, 8]"
✅ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,4666,best_practice,823,Class docstring provides a brief description of the class purpose.,,4639,        form: QtWidgets.QFormLayout = QtWidgets.QFormLayout(),"[220, 220, 220, 220, 220, 220, 220, 1296, 25, 33734, 54, 312, 11407, 13, 48, 8479, 32517, 796, 33734, 54, 312, 11407, 13, 48, 8479, 32517, 3419]"
✅ Best Practice: Call to superclass method ensures proper inheritance behavior,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 24155, 4069]",1.0,4693,best_practice,830,Call to superclass method ensures proper inheritance behavior,,4666,"        form.addRow(self.bp1_label, self.bv1_label)","[220, 220, 220, 220, 220, 220, 220, 1296, 13, 2860, 25166, 7, 944, 13, 46583, 16, 62, 18242, 11, 2116, 13, 65, 85, 16, 62, 18242, 8]"
🧠 ML Signal: Type hinting for 'order' can be used to infer data structure usage,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 705, 2875, 6, 460, 307, 973, 284, 13249, 1366, 4645, 8748]",1.0,4720,ml_signal,832,Type hinting for 'order' can be used to infer data structure usage,,4693,"        form.addRow(self.bp3_label, self.bv3_label)","[220, 220, 220, 220, 220, 220, 220, 1296, 13, 2860, 25166, 7, 944, 13, 46583, 18, 62, 18242, 11, 2116, 13, 65, 85, 18, 62, 18242, 8]"
🧠 ML Signal: Accessing dictionary with dynamic keys indicates flexible data handling,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 8925, 8251, 9217, 12846, 1366, 9041]",1.0,4747,ml_signal,834,Accessing dictionary with dynamic keys indicates flexible data handling,,4720,"        form.addRow(self.bp5_label, self.bv5_label)","[220, 220, 220, 220, 220, 220, 220, 1296, 13, 2860, 25166, 7, 944, 13, 46583, 20, 62, 18242, 11, 2116, 13, 65, 85, 20, 62, 18242, 8]"
🧠 ML Signal: Dynamic row calculation based on data attributes,"[8582, 100, 254, 10373, 26484, 25, 26977, 5752, 17952, 1912, 319, 1366, 12608]",1.0,4747,ml_signal,835,Dynamic row calculation based on data attributes,,4747,,[]
🧠 ML Signal: Conditional logic based on object state,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 1181]",1.0,4762,ml_signal,838,Conditional logic based on object state,,4747,        vbox.addLayout(grid),"[220, 220, 220, 220, 220, 220, 220, 410, 3524, 13, 2860, 32517, 7, 25928, 8]"
✅ Best Practice: Explicit method call for showing UI component,"[26486, 227, 6705, 19939, 25, 11884, 2446, 869, 329, 4478, 12454, 7515]",1.0,4777,best_practice,839,Explicit method call for showing UI component,,4762,        vbox.addLayout(form),"[220, 220, 220, 220, 220, 220, 220, 410, 3524, 13, 2860, 32517, 7, 687, 8]"
✅ Best Practice: Explicit method call for hiding UI component,"[26486, 227, 6705, 19939, 25, 11884, 2446, 869, 329, 11816, 12454, 7515]",1.0,4785,best_practice,842,Explicit method call for hiding UI component,,4777,    def create_label(,"[220, 220, 220, 825, 2251, 62, 18242, 7]"
✅ Best Practice: Use of type hints for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,4793,best_practice,842,Use of type hints for class attributes improves code readability and maintainability.,,4785,    def create_label(,"[220, 220, 220, 825, 2251, 62, 18242, 7]"
🧠 ML Signal: Use of internationalization/localization with the _() function.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3230, 1634, 14, 12001, 1634, 351, 262, 4808, 3419, 2163, 13]",0.5,4801,ml_signal,842,Use of internationalization/localization with the _() function.,,4793,    def create_label(,"[220, 220, 220, 825, 2251, 62, 18242, 7]"
✅ Best Practice: Call to super() in __init__ ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 3419, 287, 11593, 15003, 834, 19047, 1774, 37588, 286, 262, 2779, 1398]",1.0,4825,best_practice,858,Call to super() in __init__ ensures proper initialization of the base class,,4801,        self.signal_tick.connect(self.process_tick_event),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 12683, 282, 62, 42298, 13, 8443, 7, 944, 13, 14681, 62, 42298, 62, 15596, 8]"
🧠 ML Signal: Type annotations for attributes can be used to infer expected data types,"[8582, 100, 254, 10373, 26484, 25, 5994, 37647, 329, 12608, 460, 307, 973, 284, 13249, 2938, 1366, 3858]",1.0,4825,ml_signal,860,Type annotations for attributes can be used to infer expected data types,,4825,,[]
🧠 ML Signal: Type annotations for attributes can be used to infer expected data types,"[8582, 100, 254, 10373, 26484, 25, 5994, 37647, 329, 12608, 460, 307, 973, 284, 13249, 2938, 1366, 3858]",1.0,4835,ml_signal,862,Type annotations for attributes can be used to infer expected data types,,4825,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Separate method for UI initialization improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 8621, 30748, 2446, 329, 12454, 37588, 19575, 1100, 1799, 290, 5529, 1799]",1.0,4857,best_practice,864,Separate method for UI initialization improves readability and maintainability,,4835,        if tick.vt_symbol != self.vt_symbol:,"[220, 220, 220, 220, 220, 220, 220, 611, 4378, 13, 36540, 62, 1837, 23650, 14512, 2116, 13, 36540, 62, 1837, 23650, 25]"
🧠 ML Signal: Setting window title with localization support,"[8582, 100, 254, 10373, 26484, 25, 25700, 4324, 3670, 351, 42842, 1104]",1.0,4879,ml_signal,864,Setting window title with localization support,,4857,        if tick.vt_symbol != self.vt_symbol:,"[220, 220, 220, 220, 220, 220, 220, 611, 4378, 13, 36540, 62, 1837, 23650, 14512, 2116, 13, 36540, 62, 1837, 23650, 25]"
✅ Best Practice: Setting a fixed window size for consistent UI layout,"[26486, 227, 6705, 19939, 25, 25700, 257, 5969, 4324, 2546, 329, 6414, 12454, 12461]",1.0,4879,best_practice,866,Setting a fixed window size for consistent UI layout,,4879,,[]
✅ Best Practice: Type hinting for better code readability and maintenance,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 9262]",1.0,4879,best_practice,868,Type hinting for better code readability and maintenance,,4879,,[]
🧠 ML Signal: Using placeholder text with localization support,"[8582, 100, 254, 10373, 26484, 25, 8554, 46076, 2420, 351, 42842, 1104]",1.0,4917,ml_signal,870,Using placeholder text with localization support,,4879,"        self.bp1_label.setText(f""{tick.bid_price_1:.{price_digits}f}"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46583, 16, 62, 18242, 13, 2617, 8206, 7, 69, 1, 90, 42298, 13, 14065, 62, 20888, 62, 16, 25, 13, 90, 20888, 62, 12894, 896, 92, 69, 92, 4943]"
✅ Best Practice: Type hinting for better code readability and maintenance,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 9262]",1.0,4955,best_practice,872,Type hinting for better code readability and maintenance,,4917,"        self.ap1_label.setText(f""{tick.ask_price_1:.{price_digits}f}"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 16, 62, 18242, 13, 2617, 8206, 7, 69, 1, 90, 42298, 13, 2093, 62, 20888, 62, 16, 25, 13, 90, 20888, 62, 12894, 896, 92, 69, 92, 4943]"
🧠 ML Signal: Connecting button click to a method,"[8582, 100, 254, 10373, 26484, 25, 8113, 278, 4936, 3904, 284, 257, 2446]",1.0,4955,ml_signal,874,Connecting button click to a method,,4955,,[]
✅ Best Practice: Using list comprehension for better readability,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 329, 1365, 1100, 1799]",1.0,4987,best_practice,876,Using list comprehension for better readability,,4955,            r: float = (tick.last_price / tick.pre_close - 1) * 100,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 374, 25, 12178, 796, 357, 42298, 13, 12957, 62, 20888, 1220, 4378, 13, 3866, 62, 19836, 532, 352, 8, 1635, 1802]"
✅ Best Practice: Using f-string for better readability,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 8841, 329, 1365, 1100, 1799]",1.0,5003,best_practice,879,Using f-string for better readability,,4987,        if tick.bid_price_2:,"[220, 220, 220, 220, 220, 220, 220, 611, 4378, 13, 14065, 62, 20888, 62, 17, 25]"
✅ Best Practice: Type hinting for better code readability and maintenance,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1365, 2438, 1100, 1799, 290, 9262]",1.0,5045,best_practice,882,Type hinting for better code readability and maintenance,,5003,"            self.ap2_label.setText(f""{tick.ask_price_2:.{price_digits}f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 17, 62, 18242, 13, 2617, 8206, 7, 69, 1, 90, 42298, 13, 2093, 62, 20888, 62, 17, 25, 13, 90, 20888, 62, 12894, 896, 92, 69, 92, 4943]"
🧠 ML Signal: Setting the number of columns based on headers,"[8582, 100, 254, 10373, 26484, 25, 25700, 262, 1271, 286, 15180, 1912, 319, 24697]",1.0,5045,ml_signal,884,Setting the number of columns based on headers,,5045,,[]
🧠 ML Signal: Setting table headers with localization support,"[8582, 100, 254, 10373, 26484, 25, 25700, 3084, 24697, 351, 42842, 1104]",1.0,5077,ml_signal,886,Setting table headers with localization support,,5045,            self.bv3_label.setText(str(tick.bid_volume_3)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 18, 62, 18242, 13, 2617, 8206, 7, 2536, 7, 42298, 13, 14065, 62, 29048, 62, 18, 4008]"
✅ Best Practice: Hiding vertical headers for cleaner UI,"[26486, 227, 6705, 19939, 25, 367, 2530, 11723, 24697, 329, 21723, 12454]",1.0,5108,best_practice,888,Hiding vertical headers for cleaner UI,,5077,            self.av3_label.setText(str(tick.ask_volume_3)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 615, 18, 62, 18242, 13, 2617, 8206, 7, 2536, 7, 42298, 13, 2093, 62, 29048, 62, 18, 4008]"
⚠️ SAST Risk (Low): Disabling edit triggers to prevent unwanted data modification,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3167, 11716, 4370, 20022, 284, 2948, 19125, 1366, 17613]",1.0,5140,sast_risk,891,Disabling edit triggers to prevent unwanted data modification,Low,5108,            self.bv4_label.setText(str(tick.bid_volume_4)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 19, 62, 18242, 13, 2617, 8206, 7, 2536, 7, 42298, 13, 14065, 62, 29048, 62, 19, 4008]"
✅ Best Practice: Using alternating row colors for better readability,"[26486, 227, 6705, 19939, 25, 8554, 39623, 5752, 7577, 329, 1365, 1100, 1799]",1.0,5182,best_practice,892,Using alternating row colors for better readability,,5140,"            self.ap4_label.setText(f""{tick.ask_price_4:.{price_digits}f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 19, 62, 18242, 13, 2617, 8206, 7, 69, 1, 90, 42298, 13, 2093, 62, 20888, 62, 19, 25, 13, 90, 20888, 62, 12894, 896, 92, 69, 92, 4943]"
✅ Best Practice: Using layout managers for better UI organization,"[26486, 227, 6705, 19939, 25, 8554, 12461, 11663, 329, 1365, 12454, 4009]",1.0,5182,best_practice,894,Using layout managers for better UI organization,,5182,,[]
✅ Best Practice: Using layout managers for better UI organization,"[26486, 227, 6705, 19939, 25, 8554, 12461, 11663, 329, 1365, 12454, 4009]",1.0,5213,best_practice,898,Using layout managers for better UI organization,,5182,            self.av5_label.setText(str(tick.ask_volume_5)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 615, 20, 62, 18242, 13, 2617, 8206, 7, 2536, 7, 42298, 13, 2093, 62, 29048, 62, 20, 4008]"
✅ Best Practice: Setting the main layout for the widget,"[26486, 227, 6705, 19939, 25, 25700, 262, 1388, 12461, 329, 262, 26295]",1.0,5213,best_practice,902,Setting the main layout for the widget,,5213,,[]
✅ Best Practice: Explicitly typing the variable for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 11884, 306, 19720, 262, 7885, 329, 16287, 290, 5529, 1799]",0.5,5245,best_practice,891,Explicitly typing the variable for clarity and maintainability,,5213,            self.bv4_label.setText(str(tick.bid_volume_4)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 19, 62, 18242, 13, 2617, 8206, 7, 2536, 7, 42298, 13, 14065, 62, 29048, 62, 19, 4008]"
🧠 ML Signal: Usage of a method to retrieve all contracts,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 19818, 477, 8592]",0.5,5276,ml_signal,893,Usage of a method to retrieve all contracts,,5245,            self.av4_label.setText(str(tick.ask_volume_4)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 615, 19, 62, 18242, 13, 2617, 8206, 7, 2536, 7, 42298, 13, 2093, 62, 29048, 62, 19, 4008]"
🧠 ML Signal: Filtering pattern based on user input,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 3912, 1912, 319, 2836, 5128]",1.0,5276,ml_signal,894,Filtering pattern based on user input,,5276,,[]
✅ Best Practice: Clearing table contents before populating it,"[26486, 227, 6705, 19939, 25, 3779, 1723, 3084, 10154, 878, 1461, 8306, 340]",0.5,5276,best_practice,902,Clearing table contents before populating it,,5276,,[]
✅ Best Practice: Setting row count to match the number of items,"[26486, 227, 6705, 19939, 25, 25700, 5752, 954, 284, 2872, 262, 1271, 286, 3709]",0.5,5284,best_practice,904,Setting row count to match the number of items,,5276,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Using getattr to dynamically access attributes,"[26486, 227, 6705, 19939, 25, 8554, 651, 35226, 284, 32366, 1895, 12608]",0.5,5295,best_practice,908,Using getattr to dynamically access attributes,,5284,        if not symbol:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 6194, 25]"
✅ Best Practice: Using isinstance to handle different data types,"[26486, 227, 6705, 19939, 25, 8554, 318, 39098, 284, 5412, 1180, 1366, 3858]",0.5,5322,best_practice,913,Using isinstance to handle different data types,,5295,"        vt_symbol: str = f""{symbol}.{exchange_value}""","[220, 220, 220, 220, 220, 220, 220, 410, 83, 62, 1837, 23650, 25, 965, 796, 277, 1, 90, 1837, 23650, 27422, 90, 1069, 3803, 62, 8367, 36786]"
🧠 ML Signal: Populating a table with dynamic data,"[8582, 100, 254, 10373, 26484, 25, 8099, 8306, 257, 3084, 351, 8925, 1366]",0.5,5351,ml_signal,920,Populating a table with dynamic data,,5322,        contract: ContractData | None = self.main_engine.get_contract(vt_symbol),"[220, 220, 220, 220, 220, 220, 220, 2775, 25, 17453, 6601, 930, 6045, 796, 2116, 13, 12417, 62, 18392, 13, 1136, 62, 28484, 7, 36540, 62, 1837, 23650, 8]"
✅ Best Practice: Adjusting column sizes to fit content,"[26486, 227, 6705, 19939, 25, 20292, 278, 5721, 10620, 284, 4197, 2695]",0.5,5372,best_practice,922,Adjusting column sizes to fit content,,5351,"            self.name_line.setText("""")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 3672, 62, 1370, 13, 2617, 8206, 7203, 4943]"
✅ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,5388,best_practice,919,Class docstring provides a brief description of the class purpose.,,5372,        # Update name line widget and clear all labels,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 1438, 1627, 26295, 290, 1598, 477, 14722]"
✅ Best Practice: Call to superclass initializer ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,5399,best_practice,921,Call to superclass initializer ensures proper initialization of the base class.,,5388,        if not contract:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2775, 25]"
✅ Best Practice: Type annotations for attributes improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,5427,best_practice,923,Type annotations for attributes improve code readability and maintainability.,,5399,            gateway_name: str = self.gateway_combo.currentText(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24308, 62, 3672, 25, 965, 796, 2116, 13, 10494, 1014, 62, 785, 2127, 13, 14421, 8206, 3419]"
✅ Best Practice: Type annotations for attributes improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,5451,best_practice,925,Type annotations for attributes improve code readability and maintainability.,,5427,            self.name_line.setText(contract.name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 3672, 62, 1370, 13, 2617, 8206, 7, 28484, 13, 3672, 8]"
🧠 ML Signal: Method call during initialization indicates a setup or configuration pattern.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 1141, 37588, 9217, 257, 9058, 393, 8398, 3912, 13]",0.5,5451,ml_signal,927,Method call during initialization indicates a setup or configuration pattern.,,5451,,[]
✅ Best Practice: Consider adding a docstring to describe the method's purpose.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 13]",0.5,5451,best_practice,927,Consider adding a docstring to describe the method's purpose.,,5451,,[]
✅ Best Practice: Importing within a function is generally discouraged; consider moving the import to the top of the file.,"[26486, 227, 6705, 19939, 25, 17267, 278, 1626, 257, 2163, 318, 4143, 30170, 26, 2074, 3867, 262, 1330, 284, 262, 1353, 286, 262, 2393, 13]",0.5,5483,best_practice,929,Importing within a function is generally discouraged; consider moving the import to the top of the file.,,5451,            ix: int = self.gateway_combo.findText(gateway_name),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 844, 25, 493, 796, 2116, 13, 10494, 1014, 62, 785, 2127, 13, 19796, 8206, 7, 10494, 1014, 62, 3672, 8]"
🧠 ML Signal: Usage of f-strings for string formatting.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 277, 12, 37336, 329, 4731, 33313, 13]",1.0,5483,ml_signal,943,Usage of f-strings for string formatting.,,5483,,[]
✅ Best Practice: Consider making the minimum width a constant or configurable parameter.,"[26486, 227, 6705, 19939, 25, 12642, 1642, 262, 5288, 9647, 257, 6937, 393, 4566, 11970, 11507, 13]",0.5,5491,best_practice,947,Consider making the minimum width a constant or configurable parameter.,,5483,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Class docstring should describe the purpose and functionality of the class.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 815, 6901, 262, 4007, 290, 11244, 286, 262, 1398, 13]",1.0,5504,best_practice,948,Class docstring should describe the purpose and functionality of the class.,,5491,        Clear text on all labels.,"[220, 220, 220, 220, 220, 220, 220, 11459, 2420, 319, 477, 14722, 13]"
✅ Best Practice: Use of type hints for the dictionary improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 262, 22155, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,5523,best_practice,954,Use of type hints for the dictionary improves code readability and maintainability.,,5504,"        self.bv2_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 17, 62, 18242, 13, 2617, 8206, 7203, 4943]"
🧠 ML Signal: Calling an initialization method is a common pattern in class constructors.,"[8582, 100, 254, 10373, 26484, 25, 32677, 281, 37588, 2446, 318, 257, 2219, 3912, 287, 1398, 5678, 669, 13]",1.0,5542,ml_signal,956,Calling an initialization method is a common pattern in class constructors.,,5523,"        self.bv4_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 65, 85, 19, 62, 18242, 13, 2617, 8206, 7203, 4943]"
🧠 ML Signal: Use of setWindowTitle with internationalization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 27703, 19160, 351, 3230, 1634]",0.5,5542,ml_signal,958,Use of setWindowTitle with internationalization,,5542,,[]
✅ Best Practice: Setting a minimum width for the window,"[26486, 227, 6705, 19939, 25, 25700, 257, 5288, 9647, 329, 262, 4324]",1.0,5560,best_practice,960,Setting a minimum width for the window,,5542,"        self.av2_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 615, 17, 62, 18242, 13, 2617, 8206, 7203, 4943]"
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5578,best_practice,962,Using type annotations for better code readability,,5560,"        self.av4_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 615, 19, 62, 18242, 13, 2617, 8206, 7203, 4943]"
⚠️ SAST Risk (Low): Potential risk if load_json is not properly handling JSON parsing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 3440, 62, 17752, 318, 407, 6105, 9041, 19449, 32096]",0.5,5578,sast_risk,964,Potential risk if load_json is not properly handling JSON parsing,Low,5578,,[]
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5596,best_practice,966,Using type annotations for better code readability,,5578,"        self.bp2_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46583, 17, 62, 18242, 13, 2617, 8206, 7203, 4943]"
🧠 ML Signal: Iterating over settings to dynamically create UI elements,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6460, 284, 32366, 2251, 12454, 4847]",1.0,5614,ml_signal,968,Iterating over settings to dynamically create UI elements,,5596,"        self.bp4_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46583, 19, 62, 18242, 13, 2617, 8206, 7203, 4943]"
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5614,best_practice,970,Using type annotations for better code readability,,5614,,[]
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5632,best_practice,972,Using type annotations for better code readability,,5614,"        self.ap2_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 17, 62, 18242, 13, 2617, 8206, 7203, 4943]"
🧠 ML Signal: Storing widget references for later use,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 26295, 10288, 329, 1568, 779]",0.5,5650,ml_signal,975,Storing widget references for later use,,5632,"        self.ap5_label.setText("""")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 499, 20, 62, 18242, 13, 2617, 8206, 7203, 4943]"
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5663,best_practice,977,Using type annotations for better code readability,,5650,    def send_order(self) -> None:,"[220, 220, 220, 825, 3758, 62, 2875, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Connecting button click to a method,"[8582, 100, 254, 10373, 26484, 25, 8113, 278, 4936, 3904, 284, 257, 2446]",1.0,5675,ml_signal,979,Connecting button click to a method,,5663,        Send new order manually.,"[220, 220, 220, 220, 220, 220, 220, 16290, 649, 1502, 14500, 13]"
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5730,best_practice,983,Using type annotations for better code readability,,5675,"            QtWidgets.QMessageBox.critical(self, _(""委托失败""), _(""请输入合约代码""))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 33734, 54, 312, 11407, 13, 48, 12837, 14253, 13, 34666, 7, 944, 11, 4808, 7203, 34650, 242, 33699, 246, 13783, 109, 164, 112, 98, 12340, 4808, 7203, 46237, 115, 164, 122, 241, 17739, 98, 28938, 230, 163, 118, 99, 47987, 163, 254, 223, 48774]"
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5730,best_practice,985,Using type annotations for better code readability,,5730,,[]
✅ Best Practice: Using type annotations for better code readability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 37647, 329, 1365, 2438, 1100, 1799]",1.0,5742,best_practice,989,Using type annotations for better code readability,,5730,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Iterating over a dictionary to process items,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 1429, 3709]",0.5,5754,ml_signal,984,Iterating over a dictionary to process items,,5742,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Retrieving text from a widget,"[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 2420, 422, 257, 26295]",1.0,5767,ml_signal,987,Retrieving text from a widget,,5754,        if not volume_text:,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 6115, 62, 5239, 25]"
⚠️ SAST Risk (Medium): Potential risk of type conversion without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 2099, 11315, 1231, 21201]",1.0,5776,sast_risk,995,Potential risk of type conversion without validation,Medium,5767,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Storing processed values in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 13686, 3815, 287, 257, 22155]",1.0,5785,ml_signal,995,Storing processed values in a dictionary,,5776,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Informing users about the need to restart for changes to take effect,"[26486, 227, 6705, 19939, 25, 554, 15464, 2985, 546, 262, 761, 284, 15765, 329, 2458, 284, 1011, 1245]",1.0,5814,best_practice,1001,Informing users about the need to restart for changes to take effect,,5785,"            direction=Direction(str(self.direction_combo.currentText())),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4571, 28, 35, 4154, 7, 2536, 7, 944, 13, 37295, 62, 785, 2127, 13, 14421, 8206, 28955, 828]"
⚠️ SAST Risk (Medium): Saving settings to a file without validation or error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 34689, 6460, 284, 257, 2393, 1231, 21201, 393, 4049, 9041]",0.5,5845,sast_risk,1002,Saving settings to a file without validation or error handling,Medium,5814,"            type=OrderType(str(self.order_type_combo.currentText())),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 28, 18743, 6030, 7, 2536, 7, 944, 13, 2875, 62, 4906, 62, 785, 2127, 13, 14421, 8206, 28955, 828]"
🧠 ML Signal: Using a method to close or accept a dialog,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2446, 284, 1969, 393, 2453, 257, 17310]",0.5,5876,ml_signal,1002,Using a method to close or accept a dialog,,5845,"            type=OrderType(str(self.order_type_combo.currentText())),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 28, 18743, 6030, 7, 2536, 7, 944, 13, 2875, 62, 4906, 62, 785, 2127, 13, 14421, 8206, 28955, 828]"

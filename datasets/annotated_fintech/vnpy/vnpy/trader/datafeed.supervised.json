[
  {
    "line": 1,
    "text": "from types import ModuleType",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability",
    "confidence": 0.5,
    "tokens": [
      6738,
      3858,
      1330,
      19937,
      6030
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability"
  },
  {
    "line": 3,
    "text": "from importlib import import_module",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability",
    "confidence": 0.5,
    "tokens": [
      6738,
      1330,
      8019,
      1330,
      1330,
      62,
      21412
    ],
    "start_token": 5,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability"
  },
  {
    "line": 5,
    "text": "from .object import HistoryRequest, TickData, BarData",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      15252,
      1330,
      7443,
      18453,
      11,
      46093,
      6601,
      11,
      2409,
      6601
    ],
    "start_token": 12,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability"
  },
  {
    "line": 7,
    "text": "from .locale import _",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      17946,
      1000,
      1330,
      4808
    ],
    "start_token": 24,
    "end_token": 30,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability"
  },
  {
    "line": 8,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 30,
    "end_token": 30,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability"
  },
  {
    "line": 11,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Grouping imports by standard, third-party, and local modules improves readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 30,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard, third-party, and local modules improves readability"
  },
  {
    "line": 11,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive method name than 'init' to avoid confusion with '__init__'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 34,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      2446,
      1438,
      621,
      705,
      15003,
      6,
      284,
      3368,
      10802,
      351,
      705,
      834,
      15003,
      834,
      6
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive method name than 'init' to avoid confusion with '__init__'"
  },
  {
    "line": 12,
    "text": "    Abstract datafeed class for connecting to different datafeed.",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and behavior of the method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      27741,
      1366,
      12363,
      1398,
      329,
      14320,
      284,
      1180,
      1366,
      12363,
      13
    ],
    "start_token": 38,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and behavior of the method"
  },
  {
    "line": 17,
    "text": "        Initialize datafeed service connection.",
    "annotation": "\ud83e\udde0 ML Signal: The method always returns False, which could indicate a placeholder or incomplete implementation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20768,
      1096,
      1366,
      12363,
      2139,
      4637,
      13
    ],
    "start_token": 52,
    "end_token": 66,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2446,
      1464,
      5860,
      10352,
      11,
      543,
      714,
      7603,
      257,
      46076,
      393,
      17503,
      7822
    ],
    "label": "ml_signal",
    "reason": "The method always returns False, which could indicate a placeholder or incomplete implementation"
  },
  {
    "line": 16,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the 'self' parameter for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 66,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      705,
      944,
      6,
      11507,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the 'self' parameter for better readability."
  },
  {
    "line": 21,
    "text": "    def query_bar_history(self, req: HistoryRequest, output: Callable = print) -> list[BarData]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using 'print' as a default for 'output' could lead to information disclosure in production environments.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      12405,
      62,
      5657,
      62,
      23569,
      7,
      944,
      11,
      43089,
      25,
      7443,
      18453,
      11,
      5072,
      25,
      4889,
      540,
      796,
      3601,
      8,
      4613,
      1351,
      58,
      10374,
      6601,
      5974
    ],
    "start_token": 74,
    "end_token": 104,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      705,
      4798,
      6,
      355,
      257,
      4277,
      329,
      705,
      22915,
      6,
      714,
      1085,
      284,
      1321,
      13019,
      287,
      3227,
      12493,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using 'print' as a default for 'output' could lead to information disclosure in production environments."
  },
  {
    "line": 22,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output and to avoid side effects in production.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 104,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072,
      290,
      284,
      3368,
      1735,
      3048,
      287,
      3227,
      13
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output and to avoid side effects in production."
  },
  {
    "line": 23,
    "text": "        Query history bar data.",
    "annotation": "\u2705 Best Practice: Consider logging the failure or raising an exception to handle the error more explicitly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      43301,
      2106,
      2318,
      1366,
      13
    ],
    "start_token": 112,
    "end_token": 124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      18931,
      262,
      5287,
      393,
      8620,
      281,
      6631,
      284,
      5412,
      262,
      4049,
      517,
      11777,
      13
    ],
    "label": "best_practice",
    "reason": "Consider logging the failure or raising an exception to handle the error more explicitly."
  },
  {
    "line": 23,
    "text": "        Query history bar data.",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      43301,
      2106,
      2318,
      1366,
      13
    ],
    "start_token": 124,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and usage."
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a callable parameter with a default function (print) indicates flexibility in output handling.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 136,
    "end_token": 136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      869,
      540,
      11507,
      351,
      257,
      4277,
      2163,
      357,
      4798,
      8,
      9217,
      13688,
      287,
      5072,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a callable parameter with a default function (print) indicates flexibility in output handling."
  },
  {
    "line": 29,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using a default output function like print may expose sensitive information if not handled properly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 136,
    "end_token": 144,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      257,
      4277,
      5072,
      2163,
      588,
      3601,
      743,
      15651,
      8564,
      1321,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using a default output function like print may expose sensitive information if not handled properly."
  },
  {
    "line": 31,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for the variable 'datafeed' improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 144,
    "end_token": 152,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      7885,
      705,
      7890,
      12363,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for the variable 'datafeed' improves code readability and maintainability."
  },
  {
    "line": 32,
    "text": "        output(_(\"\u67e5\u8be2Tick\u6570\u636e\u5931\u8d25\uff1a\u6ca1\u6709\u6b63\u786e\u914d\u7f6e\u6570\u636e\u670d\u52a1\"))",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of global variables can lead to unexpected behavior and is generally discouraged.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5072,
      28264,
      7203,
      162,
      253,
      98,
      46237,
      95,
      51,
      624,
      46763,
      108,
      162,
      235,
      106,
      13783,
      109,
      164,
      112,
      98,
      171,
      120,
      248,
      162,
      110,
      94,
      17312,
      231,
      29826,
      96,
      163,
      94,
      106,
      165,
      227,
      235,
      163,
      121,
      106,
      46763,
      108,
      162,
      235,
      106,
      17312,
      235,
      27950,
      94,
      48774
    ],
    "start_token": 152,
    "end_token": 208,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      3298,
      9633,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      318,
      4143,
      30170,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of global variables can lead to unexpected behavior and is generally discouraged."
  },
  {
    "line": 36,
    "text": "datafeed: BaseDatafeed | None = None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing global configuration settings directly can lead to security issues if not handled properly.",
    "confidence": 0.5,
    "tokens": [
      7890,
      12363,
      25,
      7308,
      6601,
      12363,
      930,
      6045,
      796,
      6045
    ],
    "start_token": 208,
    "end_token": 218,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      3298,
      8398,
      6460,
      3264,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing global configuration settings directly can lead to security issues if not handled properly."
  },
  {
    "line": 39,
    "text": "def get_datafeed() -> BaseDatafeed:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using print statements for error messages can expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      7890,
      12363,
      3419,
      4613,
      7308,
      6601,
      12363,
      25
    ],
    "start_token": 218,
    "end_token": 229,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3601,
      6299,
      329,
      4049,
      6218,
      460,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using print statements for error messages can expose sensitive information."
  },
  {
    "line": 42,
    "text": "    global datafeed",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic module import pattern can be used to identify plugin or extension loading behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3298,
      1366,
      12363
    ],
    "start_token": 229,
    "end_token": 235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      8265,
      1330,
      3912,
      460,
      307,
      973,
      284,
      5911,
      13877,
      393,
      7552,
      11046,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic module import pattern can be used to identify plugin or extension loading behavior."
  },
  {
    "line": 46,
    "text": "    # Read datafeed related global setting",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Dynamic imports can lead to code execution vulnerabilities if module names are not validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      4149,
      1366,
      12363,
      3519,
      3298,
      4634
    ],
    "start_token": 235,
    "end_token": 245,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      26977,
      17944,
      460,
      1085,
      284,
      2438,
      9706,
      23805,
      611,
      8265,
      3891,
      389,
      407,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Dynamic imports can lead to code execution vulnerabilities if module names are not validated."
  },
  {
    "line": 46,
    "text": "    # Read datafeed related global setting",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using print statements for error messages can expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      4149,
      1366,
      12363,
      3519,
      3298,
      4634
    ],
    "start_token": 245,
    "end_token": 255,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3601,
      6299,
      329,
      4049,
      6218,
      460,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using print statements for error messages can expose sensitive information."
  }
]
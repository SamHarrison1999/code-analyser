annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Using DEAP's creator to define custom classes for genetic algorithm components,"[26486, 227, 6705, 19939, 25, 8554, 5550, 2969, 338, 13172, 284, 8160, 2183, 6097, 329, 8513, 11862, 6805]",0.5,14,best_practice,16,Using DEAP's creator to define custom classes for genetic algorithm components,,0,"OUTPUT_FUNC = Callable[[str], None]","[2606, 7250, 3843, 62, 42296, 34, 796, 4889, 540, 30109, 2536, 4357, 6045, 60]"
✅ Best Practice: Using DEAP's creator to define custom classes for genetic algorithm components,"[26486, 227, 6705, 19939, 25, 8554, 5550, 2969, 338, 13172, 284, 8160, 2183, 6097, 329, 8513, 11862, 6805]",0.5,27,best_practice,18,Using DEAP's creator to define custom classes for genetic algorithm components,,14,"KEY_FUNC = Callable[[tuple], float]","[20373, 62, 42296, 34, 796, 4889, 540, 30109, 83, 29291, 4357, 12178, 60]"
✅ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",0.5,27,best_practice,24,Initialize instance variables in the constructor for clarity and maintainability,,27,,[]
✅ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",0.5,32,best_practice,26,Initialize instance variables in the constructor for clarity and maintainability,,27,class OptimizationSetting:,"[4871, 30011, 1634, 34149, 25]"
⚠️ SAST Risk (Low): No validation on 'name' could lead to unexpected behavior if it contains special characters or is empty.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 705, 3672, 6, 714, 1085, 284, 10059, 4069, 611, 340, 4909, 2041, 3435, 393, 318, 6565, 13]",0.5,48,sast_risk,34,No validation on 'name' could lead to unexpected behavior if it contains special characters or is empty.,Low,32,"        self.target_name: str = """"","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 16793, 62, 3672, 25, 965, 796, 13538]"
🧠 ML Signal: Pattern of setting default values when optional parameters are not provided.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4634, 4277, 3815, 618, 11902, 10007, 389, 407, 2810, 13]",0.5,57,ml_signal,36,Pattern of setting default values when optional parameters are not provided.,,48,    def add_parameter(,"[220, 220, 220, 825, 751, 62, 17143, 2357, 7]"
"⚠️ SAST Risk (Low): No validation on 'start', 'end', and 'step' could lead to unexpected behavior if they are not numbers.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 705, 9688, 3256, 705, 437, 3256, 290, 705, 9662, 6, 714, 1085, 284, 10059, 4069, 611, 484, 389, 407, 3146, 13]",0.5,68,sast_risk,39,"No validation on 'start', 'end', and 'step' could lead to unexpected behavior if they are not numbers.",Low,57,"        start: float,","[220, 220, 220, 220, 220, 220, 220, 923, 25, 12178, 11]"
🧠 ML Signal: Loop pattern for generating a sequence of numbers with a specific step.,"[8582, 100, 254, 10373, 26484, 25, 26304, 3912, 329, 15453, 257, 8379, 286, 3146, 351, 257, 2176, 2239, 13]",0.5,102,ml_signal,46,Loop pattern for generating a sequence of numbers with a specific step.,,68,"            return True, _(""固定参数添加成功"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407, 11, 4808, 7203, 32368, 118, 22522, 248, 20998, 224, 46763, 108, 162, 115, 119, 27950, 254, 22755, 238, 27950, 253, 4943]"
🧠 ML Signal: Pattern of storing generated sequences in a dictionary.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 7560, 16311, 287, 257, 22155, 13]",0.5,102,ml_signal,50,Pattern of storing generated sequences in a dictionary.,,102,,[]
✅ Best Practice: Consider adding a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",0.5,102,best_practice,50,Consider adding a docstring to describe the method's purpose and parameters,,102,,[]
"🧠 ML Signal: Method that sets an attribute, indicating a setter pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5621, 281, 11688, 11, 12739, 257, 900, 353, 3912]",0.5,140,ml_signal,52,"Method that sets an attribute, indicating a setter pattern",,102,"            return False, _(""参数优化步进必须大于0"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 10352, 11, 4808, 7203, 20998, 224, 46763, 108, 27670, 246, 44293, 244, 29826, 98, 32573, 249, 33232, 227, 165, 94, 119, 32014, 12859, 236, 15, 4943]"
🧠 ML Signal: Function signature with type hints can be used to infer expected input and output types,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 2099, 20269, 460, 307, 973, 284, 13249, 2938, 5128, 290, 5072, 3858]",1.0,140,ml_signal,53,Function signature with type hints can be used to infer expected input and output types,,140,,[]
🧠 ML Signal: Usage of dictionary keys and values can indicate data structure patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 8251, 290, 3815, 460, 7603, 1366, 4645, 7572]",0.5,157,ml_signal,55,Usage of dictionary keys and values can indicate data structure patterns,,140,        value_list: list[float] = [],"[220, 220, 220, 220, 220, 220, 220, 1988, 62, 4868, 25, 1351, 58, 22468, 60, 796, 17635]"
🧠 ML Signal: Use of itertools.product suggests combinatorial generation pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 340, 861, 10141, 13, 11167, 5644, 1974, 20900, 498, 5270, 3912]",0.5,169,ml_signal,57,Use of itertools.product suggests combinatorial generation pattern,,157,        while value <= end:,"[220, 220, 220, 220, 220, 220, 220, 981, 1988, 19841, 886, 25]"
⚠️ SAST Risk (Low): Use of zip with strict=False can lead to unexpected behavior if lengths differ,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 19974, 351, 7646, 28, 25101, 460, 1085, 284, 10059, 4069, 611, 20428, 13238]",0.5,186,sast_risk,61,Use of zip with strict=False can lead to unexpected behavior if lengths differ,Low,169,        self.params[name] = value_list,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37266, 58, 3672, 60, 796, 1988, 62, 4868]"
✅ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,203,best_practice,61,Type hinting for function parameters and return type improves code readability and maintainability.,,186,        self.params[name] = value_list,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37266, 58, 3672, 60, 796, 1988, 62, 4868]"
✅ Best Practice: Docstring is present but should describe the function's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 318, 1944, 475, 815, 6901, 262, 2163, 338, 4007, 290, 4069, 13]",0.5,213,best_practice,66,Docstring is present but should describe the function's purpose and behavior.,,203,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Checking if a method returns a truthy value is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 2446, 5860, 257, 3872, 88, 1988, 318, 257, 2219, 3912, 13]",1.0,213,ml_signal,68,Checking if a method returns a truthy value is a common pattern.,,213,,[]
🧠 ML Signal: Using a function to output messages is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2163, 284, 5072, 6218, 318, 257, 2219, 3912, 13]",0.5,223,ml_signal,70,Using a function to output messages is a common pattern.,,213,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Checking if an attribute is set is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 11688, 318, 900, 318, 257, 2219, 3912, 13]",1.0,240,ml_signal,73,Checking if an attribute is set is a common pattern.,,223,        products: list = list(product(*values)),"[220, 220, 220, 220, 220, 220, 220, 3186, 25, 1351, 796, 1351, 7, 11167, 46491, 27160, 4008]"
🧠 ML Signal: Usage of a function to generate settings for optimization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 7716, 6460, 329, 23989]",1.0,240,ml_signal,81,Usage of a function to generate settings for optimization,,240,,[]
🧠 ML Signal: Usage of an output function to log messages,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 281, 5072, 2163, 284, 2604, 6218]",1.0,248,ml_signal,83,Usage of an output function to log messages,,240,def check_optimization_setting(,"[4299, 2198, 62, 40085, 1634, 62, 33990, 7]"
🧠 ML Signal: Logging the size of the optimization space,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 2546, 286, 262, 23989, 2272]",1.0,260,ml_signal,85,Logging the size of the optimization space,,248,    output: OUTPUT_FUNC = print,"[220, 220, 220, 5072, 25, 16289, 30076, 62, 42296, 34, 796, 3601]"
🧠 ML Signal: Measuring performance time,"[8582, 100, 254, 10373, 26484, 25, 2185, 45925, 2854, 640]",0.5,272,ml_signal,85,Measuring performance time,,260,    output: OUTPUT_FUNC = print,"[220, 220, 220, 5072, 25, 16289, 30076, 62, 42296, 34, 796, 3601]"
"⚠️ SAST Risk (Low): Using 'spawn' context for multiprocessing, which is safer than 'fork' but still requires careful handling","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 705, 48183, 6, 4732, 329, 18540, 305, 919, 278, 11, 543, 318, 14178, 621, 705, 32523, 6, 475, 991, 4433, 8161, 9041]",1.0,312,sast_risk,89,"Using 'spawn' context for multiprocessing, which is safer than 'fork' but still requires careful handling",Low,272,"        output(_(""优化参数组合为空，请检查""))","[220, 220, 220, 220, 220, 220, 220, 5072, 28264, 7203, 27670, 246, 44293, 244, 20998, 224, 46763, 108, 163, 119, 226, 28938, 230, 10310, 118, 163, 102, 118, 171, 120, 234, 46237, 115, 162, 96, 222, 162, 253, 98, 48774]"
🧠 ML Signal: Usage of tqdm for progress tracking,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 256, 80, 36020, 329, 4371, 9646]",0.5,321,ml_signal,94,Usage of tqdm for progress tracking,,312,        return False,"[220, 220, 220, 220, 220, 220, 220, 1441, 10352]"
⚠️ SAST Risk (Low): Potential for high resource consumption with executor.map,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1029, 8271, 7327, 351, 3121, 273, 13, 8899]",0.5,326,sast_risk,96,Potential for high resource consumption with executor.map,Low,321,    return True,"[220, 220, 220, 1441, 6407]"
🧠 ML Signal: Collecting and sorting results,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 290, 29407, 2482]",1.0,334,ml_signal,99,Collecting and sorting results,,326,def run_bf_optimization(,"[4299, 1057, 62, 19881, 62, 40085, 1634, 7]"
✅ Best Practice: Sorting results with a key function for better organization,"[26486, 227, 6705, 19939, 25, 311, 24707, 2482, 351, 257, 1994, 2163, 329, 1365, 4009]",0.5,342,best_practice,99,Sorting results with a key function for better organization,,334,def run_bf_optimization(,"[4299, 1057, 62, 19881, 62, 40085, 1634, 7]"
🧠 ML Signal: Measuring end time for performance,"[8582, 100, 254, 10373, 26484, 25, 2185, 45925, 886, 640, 329, 2854]",1.0,350,ml_signal,99,Measuring end time for performance,,342,def run_bf_optimization(,"[4299, 1057, 62, 19881, 62, 40085, 1634, 7]"
🧠 ML Signal: Calculating and logging the cost time,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 290, 18931, 262, 1575, 640]",0.5,358,ml_signal,99,Calculating and logging the cost time,,350,def run_bf_optimization(,"[4299, 1057, 62, 19881, 62, 40085, 1634, 7]"
🧠 ML Signal: Logging completion message with time cost,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 11939, 3275, 351, 640, 1575]",1.0,358,ml_signal,108,Logging completion message with time cost,,358,,[]
🧠 ML Signal: Use of genetic algorithm for optimization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8513, 11862, 329, 23989]",1.0,366,ml_signal,99,Use of genetic algorithm for optimization,,358,def run_bf_optimization(,"[4299, 1057, 62, 19881, 62, 40085, 1634, 7]"
✅ Best Practice: Type hinting for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099]",1.0,374,best_practice,99,Type hinting for function parameters and return type,,366,def run_bf_optimization(,"[4299, 1057, 62, 19881, 62, 40085, 1634, 7]"
✅ Best Practice: Descriptive variable naming,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 7885, 19264]",1.0,391,best_practice,116,Descriptive variable naming,,374,"        mp_context=get_context(""spawn"")","[220, 220, 220, 220, 220, 220, 220, 29034, 62, 22866, 28, 1136, 62, 22866, 7203, 48183, 4943]"
✅ Best Practice: List comprehension for readability,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 1100, 1799]",1.0,407,best_practice,118,List comprehension for readability,,391,        it: Iterable = tqdm(,"[220, 220, 220, 220, 220, 220, 220, 340, 25, 40806, 540, 796, 256, 80, 36020, 7]"
"⚠️ SAST Risk (High): The function uses 'choice' without importing it, which can lead to NameError or unintended behavior if 'choice' is not defined.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 383, 2163, 3544, 705, 25541, 6, 1231, 33332, 340, 11, 543, 460, 1085, 284, 6530, 12331, 393, 30261, 4069, 611, 705, 25541, 6, 318, 407, 5447, 13]",0.5,424,sast_risk,116,"The function uses 'choice' without importing it, which can lead to NameError or unintended behavior if 'choice' is not defined.",High,407,"        mp_context=get_context(""spawn"")","[220, 220, 220, 220, 220, 220, 220, 29034, 62, 22866, 28, 1136, 62, 22866, 7203, 48183, 4943]"
"✅ Best Practice: The function lacks a docstring description, which reduces code readability and maintainability.","[26486, 227, 6705, 19939, 25, 383, 2163, 16523, 257, 2205, 8841, 6764, 11, 543, 12850, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,432,best_practice,117,"The function lacks a docstring description, which reduces code readability and maintainability.",,424,    ) as executor:,"[220, 220, 220, 1267, 355, 3121, 273, 25]"
"⚠️ SAST Risk (High): 'choice' is used without being imported or defined, which can lead to security risks if 'choice' is not controlled.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 705, 25541, 6, 318, 973, 1231, 852, 17392, 393, 5447, 11, 543, 460, 1085, 284, 2324, 7476, 611, 705, 25541, 6, 318, 407, 6856, 13]",0.5,449,sast_risk,120,"'choice' is used without being imported or defined, which can lead to security risks if 'choice' is not controlled.",High,432,            total=len(settings),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 28, 11925, 7, 33692, 8]"
"🧠 ML Signal: The use of 'choice' indicates a random selection pattern, which can be a feature for ML models analyzing randomness in code.","[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 705, 25541, 6, 9217, 257, 4738, 6356, 3912, 11, 543, 460, 307, 257, 3895, 329, 10373, 4981, 22712, 4738, 1108, 287, 2438, 13]",1.0,457,ml_signal,121,"The use of 'choice' indicates a random selection pattern, which can be a feature for ML models analyzing randomness in code.",,449,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Usage of a custom parameter generation function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 11507, 5270, 2163]",0.5,476,ml_signal,122,Usage of a custom parameter generation function,,457,        results: list[tuple] = list(it),"[220, 220, 220, 220, 220, 220, 220, 2482, 25, 1351, 58, 83, 29291, 60, 796, 1351, 7, 270, 8]"
🧠 ML Signal: Random mutation based on probability,"[8582, 100, 254, 10373, 26484, 25, 14534, 15148, 1912, 319, 12867]",0.5,491,ml_signal,125,Random mutation based on probability,,476,        end: float = perf_counter(),"[220, 220, 220, 220, 220, 220, 220, 886, 25, 12178, 796, 23035, 62, 24588, 3419]"
⚠️ SAST Risk (Low): Potential for race conditions with multiprocessing context,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3234, 3403, 351, 18540, 305, 919, 278, 4732]",0.5,500,sast_risk,129,Potential for race conditions with multiprocessing context,Low,491,        return results,"[220, 220, 220, 220, 220, 220, 220, 1441, 2482]"
⚠️ SAST Risk (Medium): Shared state across processes can lead to data corruption,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 39403, 1181, 1973, 7767, 460, 1085, 284, 1366, 9253]",1.0,508,sast_risk,132,Shared state across processes can lead to data corruption,Medium,500,def run_ga_optimization(,"[4299, 1057, 62, 4908, 62, 40085, 1634, 7]"
🧠 ML Signal: Registration of genetic algorithm components,"[8582, 100, 254, 10373, 26484, 25, 24610, 286, 8513, 11862, 6805]",0.5,520,ml_signal,135,Registration of genetic algorithm components,,508,"    key_func: KEY_FUNC,","[220, 220, 220, 1994, 62, 20786, 25, 35374, 62, 42296, 34, 11]"
✅ Best Practice: Default values for parameters should be set explicitly,"[26486, 227, 6705, 19939, 25, 15161, 3815, 329, 10007, 815, 307, 900, 11777]",1.0,548,best_practice,149,Default values for parameters should be set explicitly,,520,    parameter_tuples: list[list[tuple]] = [list(d.items()) for d in settings],"[220, 220, 220, 11507, 62, 28047, 2374, 25, 1351, 58, 4868, 58, 83, 29291, 11907, 796, 685, 4868, 7, 67, 13, 23814, 28955, 329, 288, 287, 6460, 60]"
🧠 ML Signal: Initialization of a population for genetic algorithms,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 3265, 329, 8513, 16113]",1.0,563,ml_signal,157,Initialization of a population for genetic algorithms,,548,        size: int = len(individual),"[220, 220, 220, 220, 220, 220, 220, 2546, 25, 493, 796, 18896, 7, 43129, 8]"
🧠 ML Signal: Logging of genetic algorithm parameters,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 8513, 11862, 10007]",0.5,577,ml_signal,159,Logging of genetic algorithm parameters,,563,        for i in range(size):,"[220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 7857, 2599]"
🧠 ML Signal: Execution of a genetic algorithm,"[8582, 100, 254, 10373, 26484, 25, 37497, 286, 257, 8513, 11862]",0.5,597,ml_signal,171,Execution of a genetic algorithm,,577,        toolbox: base.Toolbox = base.Toolbox(),"[220, 220, 220, 220, 220, 220, 220, 2891, 3524, 25, 2779, 13, 25391, 3524, 796, 2779, 13, 25391, 3524, 3419]"
🧠 ML Signal: Sorting results based on a key function,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 2482, 1912, 319, 257, 1994, 2163]",1.0,611,ml_signal,183,Sorting results based on a key function,,597,            key_func,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1994, 62, 20786]"
✅ Best Practice: Convert list to tuple for immutability and use as a cache key,"[26486, 227, 6705, 19939, 25, 38240, 1351, 284, 46545, 329, 2296, 315, 1799, 290, 779, 355, 257, 12940, 1994]",0.5,629,best_practice,186,Convert list to tuple for immutability and use as a cache key,,611,        # Set default values for DEAP parameters if not specified,"[220, 220, 220, 220, 220, 220, 220, 1303, 5345, 4277, 3815, 329, 5550, 2969, 10007, 611, 407, 7368]"
✅ Best Practice: Use cache to avoid redundant computations,"[26486, 227, 6705, 19939, 25, 5765, 12940, 284, 3368, 30806, 2653, 602]",1.0,652,best_practice,188,Use cache to avoid redundant computations,,629,            mu = int(pop_size * 0.8),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 38779, 796, 493, 7, 12924, 62, 7857, 1635, 657, 13, 23, 8]"
✅ Best Practice: Convert list to dict for named access in evaluate_func,"[26486, 227, 6705, 19939, 25, 38240, 1351, 284, 8633, 329, 3706, 1895, 287, 13446, 62, 20786]",0.5,652,best_practice,192,Convert list to dict for named access in evaluate_func,,652,,[]
🧠 ML Signal: Usage of evaluate_func suggests a pattern for function evaluation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 13446, 62, 20786, 5644, 257, 3912, 329, 2163, 12660]",0.5,672,ml_signal,194,Usage of evaluate_func suggests a pattern for function evaluation,,652,            mutpb = 1.0 - cxpb,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4517, 40842, 796, 352, 13, 15, 532, 43213, 40842]"
✅ Best Practice: Store result in cache to optimize future evaluations,"[26486, 227, 6705, 19939, 25, 9363, 1255, 287, 12940, 284, 27183, 2003, 34109]",0.5,692,best_practice,194,Store result in cache to optimize future evaluations,,672,            mutpb = 1.0 - cxpb,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4517, 40842, 796, 352, 13, 15, 532, 43213, 40842]"
🧠 ML Signal: Usage of key_func suggests a pattern for extracting key metrics,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1994, 62, 20786, 5644, 257, 3912, 329, 37895, 1994, 20731]",0.5,712,ml_signal,194,Usage of key_func suggests a pattern for extracting key metrics,,692,            mutpb = 1.0 - cxpb,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4517, 40842, 796, 352, 13, 15, 532, 43213, 40842]"
✅ Best Practice: Return a tuple for consistency with function signature,"[26486, 227, 6705, 19939, 25, 8229, 257, 46545, 329, 15794, 351, 2163, 9877]",1.0,732,best_practice,194,Return a tuple for consistency with function signature,,712,            mutpb = 1.0 - cxpb,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4517, 40842, 796, 352, 13, 15, 532, 43213, 40842]"

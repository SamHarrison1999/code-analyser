annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,0,ml_signal,10,Importing specific modules from a package,,0,,[]
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,6,ml_signal,12,Importing specific modules from a package,,0,from .app import BaseApp,"[6738, 764, 1324, 1330, 7308, 4677]"
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,12,ml_signal,12,Importing specific modules from a package,,6,from .app import BaseApp,"[6738, 764, 1324, 1330, 7308, 4677]"
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,20,ml_signal,23,Importing specific modules from a package,,12,from .gateway import BaseGateway,"[6738, 764, 10494, 1014, 1330, 7308, 22628, 1014]"
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,28,ml_signal,23,Importing specific modules from a package,,20,from .gateway import BaseGateway,"[6738, 764, 10494, 1014, 1330, 7308, 22628, 1014]"
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,34,ml_signal,45,Importing specific modules from a package,,28,from .locale import _,"[6738, 764, 17946, 1000, 1330, 4808]"
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,34,ml_signal,47,Importing specific modules from a package,,34,,[]
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,34,ml_signal,47,Importing specific modules from a package,,34,,[]
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,40,ml_signal,51,Importing specific modules from a package,,34,class BaseEngine(ABC):,"[4871, 7308, 13798, 7, 24694, 2599]"
🧠 ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,46,ml_signal,51,Importing specific modules from a package,,40,class BaseEngine(ABC):,"[4871, 7308, 13798, 7, 24694, 2599]"
🧠 ML Signal: Usage of TypeVar for generic programming,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5994, 19852, 329, 14276, 8300]",0.5,46,ml_signal,55,Usage of TypeVar for generic programming,,46,,[]
✅ Best Practice: Use of abstractmethod enforces implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 24396, 551, 27087, 7822, 287, 850, 37724]",0.5,52,best_practice,51,Use of abstractmethod enforces implementation in subclasses,,46,class BaseEngine(ABC):,"[4871, 7308, 13798, 7, 24694, 2599]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,61,best_practice,58,Type annotations improve code readability and maintainability.,,52,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,75,best_practice,60,Type annotations improve code readability and maintainability.,,61,"        event_engine: EventEngine,","[220, 220, 220, 220, 220, 220, 220, 1785, 62, 18392, 25, 8558, 13798, 11]"
✅ Best Practice: Type annotations improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,82,best_practice,62,Type annotations improve code readability and maintainability.,,75,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
✅ Best Practice: Include a docstring to describe the purpose and behavior of the method,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 2446]",0.5,89,best_practice,62,Include a docstring to describe the purpose and behavior of the method,,82,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
✅ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",0.5,100,best_practice,68,Class docstring provides a brief description of the class purpose.,,89,    def close(self) -> None:,"[220, 220, 220, 825, 1969, 7, 944, 8, 4613, 6045, 25]"
"🧠 ML Signal: Usage of dictionaries to store gateway, engine, and app instances","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 48589, 3166, 284, 3650, 24308, 11, 3113, 11, 290, 598, 10245]",0.5,112,ml_signal,75,"Usage of dictionaries to store gateway, engine, and app instances",,100,    Acts as the core of the trading platform.,"[220, 220, 220, 25528, 355, 262, 4755, 286, 262, 7313, 3859, 13]"
"🧠 ML Signal: Usage of dictionaries to store gateway, engine, and app instances","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 48589, 3166, 284, 3650, 24308, 11, 3113, 11, 290, 598, 10245]",0.5,112,ml_signal,77,"Usage of dictionaries to store gateway, engine, and app instances",,112,,[]
"🧠 ML Signal: Usage of dictionaries to store gateway, engine, and app instances","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 48589, 3166, 284, 3650, 24308, 11, 3113, 11, 290, 598, 10245]",0.5,122,ml_signal,79,"Usage of dictionaries to store gateway, engine, and app instances",,112,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Usage of list to store exchange instances,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 284, 3650, 5163, 10245]",0.5,145,ml_signal,81,Usage of list to store exchange instances,,122,            self.event_engine: EventEngine = event_engine,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 25, 8558, 13798, 796, 1785, 62, 18392]"
⚠️ SAST Risk (Low): Changing the current working directory can have unintended side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33680, 262, 1459, 1762, 8619, 460, 423, 30261, 1735, 3048]",1.0,154,sast_risk,82,Changing the current working directory can have unintended side effects,Low,145,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Initialize engines in a separate method for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 11874, 287, 257, 4553, 2446, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,154,best_practice,85,Initialize engines in a separate method for better readability and maintainability,,154,,[]
✅ Best Practice: Include type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",1.0,177,best_practice,81,Include type hints for better code readability and maintainability,,154,            self.event_engine: EventEngine = event_engine,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 25, 8558, 13798, 796, 1785, 62, 18392]"
✅ Best Practice: Use of type hinting for local variable,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1957, 7885]",0.5,199,best_practice,86,Use of type hinting for local variable,,177,"        self.gateways: dict[str, BaseGateway] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 10494, 1322, 25, 8633, 58, 2536, 11, 7308, 22628, 1014, 60, 796, 23884]"
🧠 ML Signal: Pattern of adding an object to a dictionary using a key from the object,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4375, 281, 2134, 284, 257, 22155, 1262, 257, 1994, 422, 262, 2134]",0.5,219,ml_signal,88,Pattern of adding an object to a dictionary using a key from the object,,199,"        self.apps: dict[str, BaseApp] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 18211, 25, 8633, 58, 2536, 11, 7308, 4677, 60, 796, 23884]"
🧠 ML Signal: Returning an object after adding it to a collection,"[8582, 100, 254, 10373, 26484, 25, 42882, 281, 2134, 706, 4375, 340, 284, 257, 4947]",0.5,238,ml_signal,89,Returning an object after adding it to a collection,,219,        self.exchanges: list[Exchange] = [],"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1069, 36653, 25, 1351, 58, 3109, 3803, 60, 796, 17635]"
✅ Best Practice: Docstring provides a brief description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007, 13]",1.0,257,best_practice,89,Docstring provides a brief description of the method's purpose.,,238,        self.exchanges: list[Exchange] = [],"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1069, 36653, 25, 1351, 58, 3109, 3803, 60, 796, 17635]"
✅ Best Practice: Use of default attribute value if no gateway_name is provided.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11688, 1988, 611, 645, 24308, 62, 3672, 318, 2810, 13]",0.5,280,best_practice,94,Use of default attribute value if no gateway_name is provided.,,257,"    def add_engine(self, engine_class: type[EngineType]) -> EngineType:","[220, 220, 220, 825, 751, 62, 18392, 7, 944, 11, 3113, 62, 4871, 25, 2099, 58, 13798, 6030, 12962, 4613, 7117, 6030, 25]"
🧠 ML Signal: Instantiation of a class with specific parameters.,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 1398, 351, 2176, 10007, 13]",0.5,291,ml_signal,96,Instantiation of a class with specific parameters.,,280,        Add function engine.,"[220, 220, 220, 220, 220, 220, 220, 3060, 2163, 3113, 13]"
🧠 ML Signal: Storing an object in a dictionary with a dynamic key.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 281, 2134, 287, 257, 22155, 351, 257, 8925, 1994, 13]",1.0,324,ml_signal,98,Storing an object in a dictionary with a dynamic key.,,291,"        engine: EngineType = engine_class(self, self.event_engine)      # type: ignore","[220, 220, 220, 220, 220, 220, 220, 3113, 25, 7117, 6030, 796, 3113, 62, 4871, 7, 944, 11, 2116, 13, 15596, 62, 18392, 8, 220, 220, 220, 220, 220, 1303, 2099, 25, 8856]"
🧠 ML Signal: Checking for membership in a list before appending.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 9931, 287, 257, 1351, 878, 598, 1571, 13]",0.5,324,ml_signal,101,Checking for membership in a list before appending.,,324,,[]
🧠 ML Signal: Appending unique items to a list.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 3748, 3709, 284, 257, 1351, 13]",0.5,334,ml_signal,104,Appending unique items to a list.,,324,        Add gateway.,"[220, 220, 220, 220, 220, 220, 220, 3060, 24308, 13]"
🧠 ML Signal: Returning an instance of a class.,"[8582, 100, 254, 10373, 26484, 25, 42882, 281, 4554, 286, 257, 1398, 13]",0.5,342,ml_signal,105,Returning an instance of a class.,,334,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Docstring provides a brief description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007, 13]",0.5,342,best_practice,101,Docstring provides a brief description of the method's purpose.,,342,,[]
"🧠 ML Signal: Instantiating objects from a class, useful for understanding object-oriented patterns.","[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 5563, 422, 257, 1398, 11, 4465, 329, 4547, 2134, 12, 17107, 7572, 13]",0.5,359,ml_signal,106,"Instantiating objects from a class, useful for understanding object-oriented patterns.",,342,        # Use default name if gateway_name not passed,"[220, 220, 220, 220, 220, 220, 220, 1303, 5765, 4277, 1438, 611, 24308, 62, 3672, 407, 3804]"
"🧠 ML Signal: Storing objects in a dictionary, useful for understanding data structures and access patterns.","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 5563, 287, 257, 22155, 11, 4465, 329, 4547, 1366, 8573, 290, 1895, 7572, 13]",0.5,381,ml_signal,108,"Storing objects in a dictionary, useful for understanding data structures and access patterns.",,359,            gateway_name = gateway_class.default_name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24308, 62, 3672, 796, 24308, 62, 4871, 13, 12286, 62, 3672]"
🧠 ML Signal: Method chaining and object interaction patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 290, 2134, 10375, 7572, 13]",0.5,381,ml_signal,109,Method chaining and object interaction patterns.,,381,,[]
🧠 ML Signal: Return statement indicating the end of a function and its output.,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 12739, 262, 886, 286, 257, 2163, 290, 663, 5072, 13]",0.5,381,ml_signal,112,Return statement indicating the end of a function and its output.,,381,,[]
✅ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,381,best_practice,112,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,381,,[]
🧠 ML Signal: Usage of a specific engine class can indicate the type of application or system being developed.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 3113, 1398, 460, 7603, 262, 2099, 286, 3586, 393, 1080, 852, 4166, 13]",0.5,396,ml_signal,114,Usage of a specific engine class can indicate the type of application or system being developed.,,381,        for exchange in gateway.exchanges:,"[220, 220, 220, 220, 220, 220, 220, 329, 5163, 287, 24308, 13, 1069, 36653, 25]"
🧠 ML Signal: Assigning methods from an engine to instance variables can indicate a pattern of engine usage.,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 5050, 422, 281, 3113, 284, 4554, 9633, 460, 7603, 257, 3912, 286, 3113, 8748, 13]",1.0,421,ml_signal,116,Assigning methods from an engine to instance variables can indicate a pattern of engine usage.,,396,                self.exchanges.append(exchange),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1069, 36653, 13, 33295, 7, 1069, 3803, 8]"
🧠 ML Signal: Usage of a specific engine class can indicate the type of application or system being developed.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 3113, 1398, 460, 7603, 262, 2099, 286, 3586, 393, 1080, 852, 4166, 13]",0.5,447,ml_signal,136,Usage of a specific engine class can indicate the type of application or system being developed.,,421,        oms_engine: OmsEngine = self.add_engine(OmsEngine),"[220, 220, 220, 220, 220, 220, 220, 267, 907, 62, 18392, 25, 440, 907, 13798, 796, 2116, 13, 2860, 62, 18392, 7, 46, 907, 13798, 8]"
🧠 ML Signal: Assigning methods from an engine to instance variables can indicate a pattern of engine usage.,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 5050, 422, 281, 3113, 284, 4554, 9633, 460, 7603, 257, 3912, 286, 3113, 8748, 13]",1.0,479,ml_signal,139,Assigning methods from an engine to instance variables can indicate a pattern of engine usage.,,447,"        self.get_trade: Callable[[str], TradeData | None] = oms_engine.get_trade","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 25351, 25, 4889, 540, 30109, 2536, 4357, 9601, 6601, 930, 6045, 60, 796, 267, 907, 62, 18392, 13, 1136, 62, 25351]"
✅ Best Practice: Docstring provides a clear description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 13]",0.5,505,best_practice,136,Docstring provides a clear description of the method's purpose.,,479,        oms_engine: OmsEngine = self.add_engine(OmsEngine),"[220, 220, 220, 220, 220, 220, 220, 267, 907, 62, 18392, 25, 440, 907, 13798, 796, 2116, 13, 2860, 62, 18392, 7, 46, 907, 13798, 8]"
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,537,best_practice,140,Type hinting improves code readability and maintainability.,,505,"        self.get_position: Callable[[str], PositionData | None] = oms_engine.get_position","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 9150, 25, 4889, 540, 30109, 2536, 4357, 23158, 6601, 930, 6045, 60, 796, 267, 907, 62, 18392, 13, 1136, 62, 9150]"
🧠 ML Signal: Usage of custom data structures like LogData can indicate logging patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 1366, 8573, 588, 5972, 6601, 460, 7603, 18931, 7572, 13]",0.5,569,ml_signal,142,Usage of custom data structures like LogData can indicate logging patterns.,,537,"        self.get_contract: Callable[[str], ContractData | None] = oms_engine.get_contract","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 28484, 25, 4889, 540, 30109, 2536, 4357, 17453, 6601, 930, 6045, 60, 796, 267, 907, 62, 18392, 13, 1136, 62, 28484]"
🧠 ML Signal: Usage of custom event systems can indicate event-driven architecture patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 1785, 3341, 460, 7603, 1785, 12, 15808, 10959, 7572, 13]",0.5,601,ml_signal,143,Usage of custom event systems can indicate event-driven architecture patterns.,,569,"        self.get_quote: Callable[[str], QuoteData | None] = oms_engine.get_quote","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 22708, 25, 4889, 540, 30109, 2536, 4357, 19879, 6601, 930, 6045, 60, 796, 267, 907, 62, 18392, 13, 1136, 62, 22708]"
🧠 ML Signal: Interaction with an event engine can indicate asynchronous or decoupled system design.,"[8582, 100, 254, 10373, 26484, 25, 4225, 2673, 351, 281, 1785, 3113, 460, 7603, 39354, 393, 875, 280, 10137, 1080, 1486, 13]",0.5,638,ml_signal,146,Interaction with an event engine can indicate asynchronous or decoupled system design.,,601,"        self.get_all_trades: Callable[[], list[TradeData]] = oms_engine.get_all_trades","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 439, 62, 2213, 2367, 25, 4889, 540, 30109, 4357, 1351, 58, 35965, 6601, 11907, 796, 267, 907, 62, 18392, 13, 1136, 62, 439, 62, 2213, 2367]"
✅ Best Practice: Type hinting improves code readability and helps with static analysis.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5419, 351, 9037, 3781, 13]",0.5,670,best_practice,143,Type hinting improves code readability and helps with static analysis.,,638,"        self.get_quote: Callable[[str], QuoteData | None] = oms_engine.get_quote","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 22708, 25, 4889, 540, 30109, 2536, 4357, 19879, 6601, 930, 6045, 60, 796, 267, 907, 62, 18392, 13, 1136, 62, 22708]"
🧠 ML Signal: Usage of dictionary get method with default value.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988, 13]",0.5,707,ml_signal,147,Usage of dictionary get method with default value.,,670,"        self.get_all_positions: Callable[[], list[PositionData]] = oms_engine.get_all_positions","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 439, 62, 1930, 1756, 25, 4889, 540, 30109, 4357, 1351, 58, 26545, 6601, 11907, 796, 267, 907, 62, 18392, 13, 1136, 62, 439, 62, 1930, 1756]"
⚠️ SAST Risk (Low): Potential information disclosure if log message is exposed to users.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 611, 2604, 3275, 318, 7362, 284, 2985, 13]",0.5,744,sast_risk,150,Potential information disclosure if log message is exposed to users.,Low,707,"        self.get_all_quotes: Callable[[], list[QuoteData]] = oms_engine.get_all_quotes","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 439, 62, 421, 6421, 25, 4889, 540, 30109, 4357, 1351, 58, 25178, 6601, 11907, 796, 267, 907, 62, 18392, 13, 1136, 62, 439, 62, 421, 6421]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,789,ml_signal,154,Usage of dictionary get method with default value,,744,"        self.convert_order_request: Callable[[OrderRequest, str, bool, bool], list[OrderRequest]] = oms_engine.convert_order_request","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1102, 1851, 62, 2875, 62, 25927, 25, 4889, 540, 30109, 18743, 18453, 11, 965, 11, 20512, 11, 20512, 4357, 1351, 58, 18743, 18453, 11907, 796, 267, 907, 62, 18392, 13, 1102, 1851, 62, 2875, 62, 25927]"
⚠️ SAST Risk (Low): Potential information disclosure if engine_name is sensitive,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 611, 3113, 62, 3672, 318, 8564]",1.0,789,sast_risk,156,Potential information disclosure if engine_name is sensitive,Low,789,,[]
✅ Best Practice: Use of logging for error or status messages,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 4049, 393, 3722, 6218]",0.5,823,best_practice,158,Use of logging for error or status messages,,789,"        self.send_email: Callable[[str, str, str | None], None] = email_engine.send_email","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 21280, 62, 12888, 25, 4889, 540, 30109, 2536, 11, 965, 11, 965, 930, 6045, 4357, 6045, 60, 796, 3053, 62, 18392, 13, 21280, 62, 12888]"
✅ Best Practice: Type hinting improves code readability and helps with static analysis.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5419, 351, 9037, 3781, 13]",0.5,823,best_practice,159,Type hinting improves code readability and helps with static analysis.,,823,,[]
✅ Best Practice: Using type hints for variables improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 2099, 20269, 329, 9633, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,848,best_practice,164,Using type hints for variables improves code readability and maintainability.,,823,"        log: LogData = LogData(msg=msg, gateway_name=source)","[220, 220, 220, 220, 220, 220, 220, 2604, 25, 5972, 6601, 796, 5972, 6601, 7, 19662, 28, 19662, 11, 24308, 62, 3672, 28, 10459, 8]"
🧠 ML Signal: Checking for None before proceeding is a common pattern for handling optional values.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 6045, 878, 18788, 318, 257, 2219, 3912, 329, 9041, 11902, 3815, 13]",0.5,865,ml_signal,166,Checking for None before proceeding is a common pattern for handling optional values.,,848,        self.event_engine.put(event),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 13, 1996, 7, 15596, 8]"
🧠 ML Signal: Method calls on objects can indicate usage patterns and dependencies.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 319, 5563, 460, 7603, 8748, 7572, 290, 20086, 13]",0.5,865,ml_signal,167,Method calls on objects can indicate usage patterns and dependencies.,,865,,[]
🧠 ML Signal: Returning None explicitly is a common pattern for functions that may not have a value to return.,"[8582, 100, 254, 10373, 26484, 25, 42882, 6045, 11777, 318, 257, 2219, 3912, 329, 5499, 326, 743, 407, 423, 257, 1988, 284, 1441, 13]",0.5,878,ml_signal,170,Returning None explicitly is a common pattern for functions that may not have a value to return.,,865,        Return gateway object by name.,"[220, 220, 220, 220, 220, 220, 220, 8229, 24308, 2134, 416, 1438, 13]"
✅ Best Practice: Docstring provides a clear description of the function's purpose,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 338, 4007]",0.5,878,best_practice,167,Docstring provides a clear description of the function's purpose,,878,,[]
🧠 ML Signal: Usage of list conversion to obtain keys from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 284, 7330, 8251, 422, 257, 22155]",0.5,886,ml_signal,171,Usage of list conversion to obtain keys from a dictionary,,878,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,894,best_practice,171,Type hinting improves code readability and maintainability,,886,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of list conversion from dictionary values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 422, 22155, 3815]",0.5,894,ml_signal,176,Usage of list conversion from dictionary values,,894,,[]
✅ Best Practice: Include a docstring to describe the method's purpose.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 13]",0.5,916,best_practice,177,Include a docstring to describe the method's purpose.,,894,"    def get_engine(self, engine_name: str) -> BaseEngine | None:","[220, 220, 220, 825, 651, 62, 18392, 7, 944, 11, 3113, 62, 3672, 25, 965, 8, 4613, 7308, 13798, 930, 6045, 25]"
"🧠 ML Signal: Method returning a list of objects, indicating a common pattern of data retrieval.","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1351, 286, 5563, 11, 12739, 257, 2219, 3912, 286, 1366, 45069, 13]",1.0,943,ml_signal,181,"Method returning a list of objects, indicating a common pattern of data retrieval.",,916,"        engine: BaseEngine | None = self.engines.get(engine_name, None)","[220, 220, 220, 220, 220, 220, 220, 3113, 25, 7308, 13798, 930, 6045, 796, 2116, 13, 1516, 1127, 13, 1136, 7, 18392, 62, 3672, 11, 6045, 8]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,943,best_practice,185,Type hinting improves code readability and maintainability,,943,,[]
🧠 ML Signal: Checking if an object is None before using it is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 2134, 318, 6045, 878, 1262, 340, 318, 257, 2219, 3912]",0.5,951,ml_signal,187,Checking if an object is None before using it is a common pattern,,943,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method invocation on an object is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 43219, 319, 281, 2134, 318, 257, 2219, 3912]",0.5,959,ml_signal,189,Method invocation on an object is a common pattern,,951,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of type hinting for variable 'gateway' with union type,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 10494, 1014, 6, 351, 6441, 2099]",1.0,979,ml_signal,192,Usage of type hinting for variable 'gateway' with union type,,959,            return gateway.get_default_setting(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 24308, 13, 1136, 62, 12286, 62, 33990, 3419]"
⚠️ SAST Risk (Low): Potential NoneType dereference if 'gateway' is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 705, 10494, 1014, 6, 318, 6045]",1.0,979,sast_risk,194,Potential NoneType dereference if 'gateway' is None,Low,979,,[]
🧠 ML Signal: Method call pattern on 'gateway' object,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 705, 10494, 1014, 6, 2134]",0.5,987,ml_signal,196,Method call pattern on 'gateway' object,,979,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of type hinting for function parameters and return type,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099]",1.0,1004,ml_signal,199,Usage of type hinting for function parameters and return type,,987,        return list(self.gateways.keys()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 10494, 1322, 13, 13083, 28955]"
✅ Best Practice: Check if the gateway is not None before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 24308, 318, 407, 6045, 878, 18788]",1.0,1022,best_practice,201,Check if the gateway is not None before proceeding,,1004,    def get_all_apps(self) -> list[BaseApp]:,"[220, 220, 220, 825, 651, 62, 439, 62, 18211, 7, 944, 8, 4613, 1351, 58, 14881, 4677, 5974]"
🧠 ML Signal: Method delegation pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 22635, 3912]",0.5,1034,ml_signal,203,Method delegation pattern,,1022,        Get all app objects.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 598, 5563, 13]"
✅ Best Practice: Return a consistent type (str) even when the gateway is not found,"[26486, 227, 6705, 19939, 25, 8229, 257, 6414, 2099, 357, 2536, 8, 772, 618, 262, 24308, 318, 407, 1043]",0.5,1050,best_practice,205,Return a consistent type (str) even when the gateway is not found,,1034,        return list(self.apps.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 18211, 13, 27160, 28955]"
🧠 ML Signal: Usage of type hinting for variable 'gateway' can be used to train models on type inference.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 7885, 705, 10494, 1014, 6, 460, 307, 973, 284, 4512, 4981, 319, 2099, 32278, 13]",0.5,1058,ml_signal,208,Usage of type hinting for variable 'gateway' can be used to train models on type inference.,,1050,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
⚠️ SAST Risk (Low): Potential NoneType dereference if 'gateway' is None and not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 705, 10494, 1014, 6, 318, 6045, 290, 407, 12118, 6105, 13]",0.5,1066,sast_risk,210,Potential NoneType dereference if 'gateway' is None and not handled properly.,Low,1058,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Method call pattern 'gateway.cancel_order(req)' can be used to train models on API usage.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 705, 10494, 1014, 13, 66, 21130, 62, 2875, 7, 42180, 33047, 460, 307, 973, 284, 4512, 4981, 319, 7824, 8748, 13]",0.5,1066,ml_signal,212,Method call pattern 'gateway.cancel_order(req)' can be used to train models on API usage.,,1066,,[]
🧠 ML Signal: Usage of type hinting for variables,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 9633]",0.5,1080,ml_signal,215,Usage of type hinting for variables,,1066,        Start connection of a specific gateway.,"[220, 220, 220, 220, 220, 220, 220, 7253, 4637, 286, 257, 2176, 24308, 13]"
🧠 ML Signal: Conditional logic based on object existence,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 6224]",0.5,1107,ml_signal,217,Conditional logic based on object existence,,1080,        gateway: BaseGateway | None = self.get_gateway(gateway_name),"[220, 220, 220, 220, 220, 220, 220, 24308, 25, 7308, 22628, 1014, 930, 6045, 796, 2116, 13, 1136, 62, 10494, 1014, 7, 10494, 1014, 62, 3672, 8]"
✅ Best Practice: Explicitly handling the case where the gateway is None,"[26486, 227, 6705, 19939, 25, 11884, 306, 9041, 262, 1339, 810, 262, 24308, 318, 6045]",0.5,1129,best_practice,221,Explicitly handling the case where the gateway is None,,1107,"    def subscribe(self, req: SubscribeRequest, gateway_name: str) -> None:","[220, 220, 220, 825, 12383, 7, 944, 11, 43089, 25, 19808, 18453, 11, 24308, 62, 3672, 25, 965, 8, 4613, 6045, 25]"
✅ Best Practice: Type hinting for 'gateway' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 10494, 1014, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1137,best_practice,224,Type hinting for 'gateway' improves code readability and maintainability.,,1129,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Checking if 'gateway' is not None before proceeding is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 705, 10494, 1014, 6, 318, 407, 6045, 878, 18788, 318, 257, 2219, 3912, 13]",0.5,1147,ml_signal,226,Checking if 'gateway' is not None before proceeding is a common pattern.,,1137,        if gateway:,"[220, 220, 220, 220, 220, 220, 220, 611, 24308, 25]"
"🧠 ML Signal: Method call on an object, useful for understanding object interactions.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11, 4465, 329, 4547, 2134, 12213, 13]",0.5,1147,ml_signal,228,"Method call on an object, useful for understanding object interactions.",,1147,,[]
✅ Best Practice: Docstring provides a clear description of the function's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 338, 4007, 13]",0.5,1147,best_practice,228,Docstring provides a clear description of the function's purpose.,,1147,,[]
✅ Best Practice: Type hinting for 'gateway' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 10494, 1014, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1155,best_practice,232,Type hinting for 'gateway' improves code readability and maintainability.,,1147,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Conditional logic based on the presence of a gateway.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 257, 24308, 13]",0.5,1175,ml_signal,235,Conditional logic based on the presence of a gateway.,,1155,            return gateway.send_order(req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 24308, 13, 21280, 62, 2875, 7, 42180, 8]"
"🧠 ML Signal: Return an empty list when no gateway is found, indicating a fallback behavior.","[8582, 100, 254, 10373, 26484, 25, 8229, 281, 6565, 1351, 618, 645, 24308, 318, 1043, 11, 12739, 257, 2121, 1891, 4069, 13]",0.5,1188,ml_signal,237,"Return an empty list when no gateway is found, indicating a fallback behavior.",,1175,"            return """"","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 13538]"
✅ Best Practice: Ensure the event engine is stopped before closing engines and gateways,"[26486, 227, 6705, 19939, 25, 48987, 262, 1785, 3113, 318, 5025, 878, 9605, 11874, 290, 8946, 1322]",0.5,1204,best_practice,241,Ensure the event engine is stopped before closing engines and gateways,,1188,        Send cancel order request to a specific gateway.,"[220, 220, 220, 220, 220, 220, 220, 16290, 14241, 1502, 2581, 284, 257, 2176, 24308, 13]"
🧠 ML Signal: Iterating over engines to close them indicates a pattern of resource management,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 11874, 284, 1969, 606, 9217, 257, 3912, 286, 8271, 4542]",1.0,1231,ml_signal,243,Iterating over engines to close them indicates a pattern of resource management,,1204,        gateway: BaseGateway | None = self.get_gateway(gateway_name),"[220, 220, 220, 220, 220, 220, 220, 24308, 25, 7308, 22628, 1014, 930, 6045, 796, 2116, 13, 1136, 62, 10494, 1014, 7, 10494, 1014, 62, 3672, 8]"
✅ Best Practice: Closing each engine to release resources,"[26486, 227, 6705, 19939, 25, 47055, 1123, 3113, 284, 2650, 4133]",0.5,1251,best_practice,245,Closing each engine to release resources,,1231,            gateway.cancel_order(req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24308, 13, 66, 21130, 62, 2875, 7, 42180, 8]"
🧠 ML Signal: Iterating over gateways to close them indicates a pattern of resource management,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 8946, 1322, 284, 1969, 606, 9217, 257, 3912, 286, 8271, 4542]",1.0,1275,ml_signal,247,Iterating over gateways to close them indicates a pattern of resource management,,1251,"    def send_quote(self, req: QuoteRequest, gateway_name: str) -> str:","[220, 220, 220, 825, 3758, 62, 22708, 7, 944, 11, 43089, 25, 19879, 18453, 11, 24308, 62, 3672, 25, 965, 8, 4613, 965, 25]"
✅ Best Practice: Closing each gateway to release resources,"[26486, 227, 6705, 19939, 25, 47055, 1123, 24308, 284, 2650, 4133]",0.5,1283,best_practice,250,Closing each gateway to release resources,,1275,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of type hints for the dictionary improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 262, 22155, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1291,best_practice,250,Use of type hints for the dictionary improves code readability and maintainability.,,1283,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 19552, 12608]",1.0,1307,best_practice,259,Call to superclass initializer ensures proper initialization of inherited attributes,,1291,        Send cancel quote request to a specific gateway.,"[220, 220, 220, 220, 220, 220, 220, 16290, 14241, 9577, 2581, 284, 257, 2176, 24308, 13]"
🧠 ML Signal: Usage of configuration settings to control behavior,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 6460, 284, 1630, 4069]",1.0,1334,ml_signal,261,Usage of configuration settings to control behavior,,1307,        gateway: BaseGateway | None = self.get_gateway(gateway_name),"[220, 220, 220, 220, 220, 220, 220, 24308, 25, 7308, 22628, 1014, 930, 6045, 796, 2116, 13, 1136, 62, 10494, 1014, 7, 10494, 1014, 62, 3672, 8]"
🧠 ML Signal: Registration of event handlers or listeners,"[8582, 100, 254, 10373, 26484, 25, 24610, 286, 1785, 32847, 393, 22054]",0.5,1354,ml_signal,263,Registration of event handlers or listeners,,1334,            gateway.cancel_quote(req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24308, 13, 66, 21130, 62, 22708, 7, 42180, 8]"
✅ Best Practice: Early return pattern improves readability by reducing nested code,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 1100, 1799, 416, 8868, 28376, 2438]",1.0,1354,best_practice,264,Early return pattern improves readability by reducing nested code,,1354,,[]
🧠 ML Signal: Type hinting for variable 'log' indicates expected data structure,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 7885, 705, 6404, 6, 9217, 2938, 1366, 4645]",1.0,1370,ml_signal,267,Type hinting for variable 'log' indicates expected data structure,,1354,        Query bar history data from a specific gateway.,"[220, 220, 220, 220, 220, 220, 220, 43301, 2318, 2106, 1366, 422, 257, 2176, 24308, 13]"
🧠 ML Signal: Use of type hinting for 'level' with union type,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 9254, 278, 329, 705, 5715, 6, 351, 6441, 2099]",0.5,1397,ml_signal,269,Use of type hinting for 'level' with union type,,1370,        gateway: BaseGateway | None = self.get_gateway(gateway_name),"[220, 220, 220, 220, 220, 220, 220, 24308, 25, 7308, 22628, 1014, 930, 6045, 796, 2116, 13, 1136, 62, 10494, 1014, 7, 10494, 1014, 62, 3672, 8]"
✅ Best Practice: Use of 'get' method with default value prevents KeyError,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 1136, 6, 2446, 351, 4277, 1988, 15174, 7383, 12331]",1.0,1407,best_practice,270,Use of 'get' method with default value prevents KeyError,,1397,        if gateway:,"[220, 220, 220, 220, 220, 220, 220, 611, 24308, 25]"
⚠️ SAST Risk (Low): Potential logging of sensitive information if 'log.msg' contains sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18931, 286, 8564, 1321, 611, 705, 6404, 13, 19662, 6, 4909, 8564, 1366]",1.0,1416,sast_risk,272,Potential logging of sensitive information if 'log.msg' contains sensitive data,Low,1407,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"🧠 ML Signal: Method for registering event handlers, useful for learning event-driven patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 28336, 1785, 32847, 11, 4465, 329, 4673, 1785, 12, 15808, 7572]",0.5,1436,ml_signal,271,"Method for registering event handlers, useful for learning event-driven patterns",,1416,            return gateway.query_history(req),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 24308, 13, 22766, 62, 23569, 7, 42180, 8]"
✅ Best Practice: Docstring provides a brief description of the method's purpose,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007]",0.5,1445,best_practice,272,Docstring provides a brief description of the method's purpose,,1436,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"🧠 ML Signal: Usage of event-driven architecture, useful for learning system design patterns","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1785, 12, 15808, 10959, 11, 4465, 329, 4673, 1080, 1486, 7572]",0.5,1458,ml_signal,273,"Usage of event-driven architecture, useful for learning system design patterns",,1445,            return [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 17635]"
"⚠️ SAST Risk (Low): Potential risk if event_type is not validated, could lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 1785, 62, 4906, 318, 407, 31031, 11, 714, 1085, 284, 10059, 4069]",0.5,1466,sast_risk,276,"Potential risk if event_type is not validated, could lead to unexpected behavior",Low,1458,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Class docstring provides a clear description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 13]",1.0,1479,best_practice,273,Class docstring provides a clear description of the class purpose.,,1466,            return [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 17635]"
✅ Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 19552, 12608, 13]",1.0,1489,best_practice,278,Call to superclass initializer ensures proper initialization of inherited attributes.,,1479,        programme exit.,"[220, 220, 220, 220, 220, 220, 220, 11383, 8420, 13]"
"🧠 ML Signal: Usage of dictionary to store TickData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 46093, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1507,ml_signal,280,"Usage of dictionary to store TickData objects, indicating a pattern of data management.",,1489,        # Stop event engine first to prevent new timer event.,"[220, 220, 220, 220, 220, 220, 220, 1303, 13707, 1785, 3113, 717, 284, 2948, 649, 19781, 1785, 13]"
"🧠 ML Signal: Usage of dictionary to store OrderData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 8284, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1507,ml_signal,282,"Usage of dictionary to store OrderData objects, indicating a pattern of data management.",,1507,,[]
"🧠 ML Signal: Usage of dictionary to store TradeData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 9601, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1522,ml_signal,284,"Usage of dictionary to store TradeData objects, indicating a pattern of data management.",,1507,            engine.close(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3113, 13, 19836, 3419]"
"🧠 ML Signal: Usage of dictionary to store PositionData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 23158, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1539,ml_signal,286,"Usage of dictionary to store PositionData objects, indicating a pattern of data management.",,1522,        for gateway in self.gateways.values():,"[220, 220, 220, 220, 220, 220, 220, 329, 24308, 287, 2116, 13, 10494, 1322, 13, 27160, 33529]"
"🧠 ML Signal: Usage of dictionary to store AccountData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 10781, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1539,ml_signal,288,"Usage of dictionary to store AccountData objects, indicating a pattern of data management.",,1539,,[]
"🧠 ML Signal: Usage of dictionary to store ContractData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 17453, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1546,ml_signal,290,"Usage of dictionary to store ContractData objects, indicating a pattern of data management.",,1539,class LogEngine(BaseEngine):,"[4871, 5972, 13798, 7, 14881, 13798, 2599]"
"🧠 ML Signal: Usage of dictionary to store QuoteData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 19879, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1555,ml_signal,292,"Usage of dictionary to store QuoteData objects, indicating a pattern of data management.",,1546,    Provides log event output function.,"[220, 220, 220, 47081, 2604, 1785, 5072, 2163, 13]"
"🧠 ML Signal: Usage of dictionary to store active OrderData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 4075, 8284, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1555,ml_signal,294,"Usage of dictionary to store active OrderData objects, indicating a pattern of data management.",,1555,,[]
"🧠 ML Signal: Usage of dictionary to store active QuoteData objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 4075, 19879, 6601, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1567,ml_signal,296,"Usage of dictionary to store active QuoteData objects, indicating a pattern of data management.",,1555,"        DEBUG: ""DEBUG"",","[220, 220, 220, 220, 220, 220, 220, 16959, 25, 366, 30531, 1600]"
"🧠 ML Signal: Usage of dictionary to store OffsetConverter objects, indicating a pattern of data management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 3242, 2617, 3103, 332, 353, 5563, 11, 12739, 257, 3912, 286, 1366, 4542, 13]",1.0,1579,ml_signal,298,"Usage of dictionary to store OffsetConverter objects, indicating a pattern of data management.",,1567,"        WARNING: ""WARNING"",","[220, 220, 220, 220, 220, 220, 220, 39410, 25, 366, 31502, 1600]"
"✅ Best Practice: Method call to register events, indicating a pattern of event-driven architecture.","[26486, 227, 6705, 19939, 25, 11789, 869, 284, 7881, 2995, 11, 12739, 257, 3912, 286, 1785, 12, 15808, 10959, 13]",1.0,1595,best_practice,300,"Method call to register events, indicating a pattern of event-driven architecture.",,1579,"        CRITICAL: ""CRITICAL"",","[220, 220, 220, 220, 220, 220, 220, 8740, 2043, 20151, 25, 366, 9419, 2043, 20151, 1600]"
"🧠 ML Signal: Method registering multiple event handlers, indicating a pattern of event-driven architecture.","[8582, 100, 254, 10373, 26484, 25, 11789, 28336, 3294, 1785, 32847, 11, 12739, 257, 3912, 286, 1785, 12, 15808, 10959, 13]",1.0,1604,ml_signal,292,"Method registering multiple event handlers, indicating a pattern of event-driven architecture.",,1595,    Provides log event output function.,"[220, 220, 220, 47081, 2604, 1785, 5072, 2163, 13]"
"🧠 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 2176, 1785, 32847, 11, 4465, 329, 4547, 1785, 9041, 7572, 13]",0.5,1604,ml_signal,294,"Registering specific event handlers, useful for understanding event handling patterns.",,1604,,[]
"🧠 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 2176, 1785, 32847, 11, 4465, 329, 4547, 1785, 9041, 7572, 13]",0.5,1616,ml_signal,296,"Registering specific event handlers, useful for understanding event handling patterns.",,1604,"        DEBUG: ""DEBUG"",","[220, 220, 220, 220, 220, 220, 220, 16959, 25, 366, 30531, 1600]"
"🧠 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 2176, 1785, 32847, 11, 4465, 329, 4547, 1785, 9041, 7572, 13]",0.5,1628,ml_signal,298,"Registering specific event handlers, useful for understanding event handling patterns.",,1616,"        WARNING: ""WARNING"",","[220, 220, 220, 220, 220, 220, 220, 39410, 25, 366, 31502, 1600]"
"🧠 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 2176, 1785, 32847, 11, 4465, 329, 4547, 1785, 9041, 7572, 13]",0.5,1644,ml_signal,300,"Registering specific event handlers, useful for understanding event handling patterns.",,1628,"        CRITICAL: ""CRITICAL"",","[220, 220, 220, 220, 220, 220, 220, 8740, 2043, 20151, 25, 366, 9419, 2043, 20151, 1600]"
"🧠 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 2176, 1785, 32847, 11, 4465, 329, 4547, 1785, 9041, 7572, 13]",0.5,1644,ml_signal,302,"Registering specific event handlers, useful for understanding event handling patterns.",,1644,,[]
"🧠 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.","[8582, 100, 254, 10373, 26484, 25, 17296, 278, 2176, 1785, 32847, 11, 4465, 329, 4547, 1785, 9041, 7572, 13]",0.5,1654,ml_signal,304,"Registering specific event handlers, useful for understanding event handling patterns.",,1644,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Method docstring is empty; consider adding a description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 6565, 26, 2074, 4375, 257, 6764, 286, 262, 2446, 338, 4007, 13]",0.5,1666,best_practice,299,Method docstring is empty; consider adding a description of the method's purpose.,,1654,"        ERROR: ""ERROR"",","[220, 220, 220, 220, 220, 220, 220, 33854, 25, 366, 24908, 1600]"
"🧠 ML Signal: Type hinting is used, which is a good practice for ML models to learn about data types.","[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 318, 973, 11, 543, 318, 257, 922, 3357, 329, 10373, 4981, 284, 2193, 546, 1366, 3858, 13]",0.5,1670,ml_signal,301,"Type hinting is used, which is a good practice for ML models to learn about data types.",,1666,    },"[220, 220, 220, 1782]"
🧠 ML Signal: Type hinting for variable 'tick' helps in understanding the expected data type.,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 7885, 705, 42298, 6, 5419, 287, 4547, 262, 2938, 1366, 2099, 13]",0.5,1697,ml_signal,303,Type hinting for variable 'tick' helps in understanding the expected data type.,,1670,"    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1388, 62, 18392, 25, 8774, 13798, 11, 1785, 62, 18392, 25, 8558, 13798, 8, 4613, 6045, 25]"
⚠️ SAST Risk (Low): Direct assignment from event data without validation could lead to unexpected behavior if event data is malformed.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 16237, 422, 1785, 1366, 1231, 21201, 714, 1085, 284, 10059, 4069, 611, 1785, 1366, 318, 6428, 12214, 13]",0.5,1721,sast_risk,305,Direct assignment from event data without validation could lead to unexpected behavior if event data is malformed.,Low,1697,"        super().__init__(main_engine, event_engine, ""log"")","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 12417, 62, 18392, 11, 1785, 62, 18392, 11, 366, 6404, 4943]"
"🧠 ML Signal: Usage of dictionary to store tick data, indicating a pattern of data storage.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 4378, 1366, 11, 12739, 257, 3912, 286, 1366, 6143, 13]",0.5,1721,ml_signal,306,"Usage of dictionary to store tick data, indicating a pattern of data storage.",,1721,,[]
"🧠 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.","[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 318, 973, 11, 12739, 257, 3912, 286, 7952, 2099, 8748, 13]",1.0,1745,ml_signal,305,"Type hinting is used, indicating a pattern of explicit type usage.",,1721,"        super().__init__(main_engine, event_engine, ""log"")","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 12417, 62, 18392, 11, 1785, 62, 18392, 11, 366, 6404, 4943]"
🧠 ML Signal: Usage of dictionary to store orders by unique identifier.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 6266, 416, 3748, 27421, 13]",0.5,1764,ml_signal,307,Usage of dictionary to store orders by unique identifier.,,1745,"        self.active = SETTINGS[""log.active""]","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 796, 25823, 51, 20754, 14692, 6404, 13, 5275, 8973]"
🧠 ML Signal: Conditional logic to manage active orders.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 6687, 4075, 6266, 13]",0.5,1782,ml_signal,309,Conditional logic to manage active orders.,,1764,        self.register_log(EVENT_LOG),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30238, 62, 6404, 7, 20114, 3525, 62, 25294, 8]"
🧠 ML Signal: Storing active orders separately.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 4075, 6266, 13869, 13]",0.5,1801,ml_signal,311,Storing active orders separately.,,1782,"    def process_log_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 6404, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
🧠 ML Signal: Removing inactive orders from active orders list.,"[8582, 100, 254, 10373, 26484, 25, 3982, 5165, 28621, 6266, 422, 4075, 6266, 1351, 13]",0.5,1813,ml_signal,314,Removing inactive orders from active orders list.,,1801,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
🧠 ML Signal: Use of optional chaining with dictionary get method.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11902, 442, 1397, 351, 22155, 651, 2446, 13]",1.0,1828,ml_signal,316,Use of optional chaining with dictionary get method.,,1813,        log: LogData = event.data,"[220, 220, 220, 220, 220, 220, 220, 2604, 25, 5972, 6601, 796, 1785, 13, 7890]"
✅ Best Practice: Checking for None before using the converter.,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 878, 1262, 262, 38394, 13]",0.5,1856,best_practice,318,Checking for None before using the converter.,,1828,"        logger.log(level, log.msg, gateway_name=log.gateway_name)","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 6404, 7, 5715, 11, 2604, 13, 19662, 11, 24308, 62, 3672, 28, 6404, 13, 10494, 1014, 62, 3672, 8]"
🧠 ML Signal: Pattern of updating order state through a converter.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 19698, 1502, 1181, 832, 257, 38394, 13]",0.5,1875,ml_signal,320,Pattern of updating order state through a converter.,,1856,"    def register_log(self, event_type: str) -> None:","[220, 220, 220, 825, 7881, 62, 6404, 7, 944, 11, 1785, 62, 4906, 25, 965, 8, 4613, 6045, 25]"
🧠 ML Signal: Type hinting for 'trade' indicates expected data structure,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 329, 705, 25351, 6, 9217, 2938, 1366, 4645]",0.5,1890,ml_signal,316,Type hinting for 'trade' indicates expected data structure,,1875,        log: LogData = event.data,"[220, 220, 220, 220, 220, 220, 220, 2604, 25, 5972, 6601, 796, 1785, 13, 7890]"
🧠 ML Signal: Usage of dictionary to store trades by unique identifier,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 17674, 416, 3748, 27421]",0.5,1918,ml_signal,318,Usage of dictionary to store trades by unique identifier,,1890,"        logger.log(level, log.msg, gateway_name=log.gateway_name)","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 6404, 7, 5715, 11, 2604, 13, 19662, 11, 24308, 62, 3672, 28, 6404, 13, 10494, 1014, 62, 3672, 8]"
🧠 ML Signal: Use of optional chaining pattern with dictionary get method,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11902, 442, 1397, 3912, 351, 22155, 651, 2446]",0.5,1937,ml_signal,320,Use of optional chaining pattern with dictionary get method,,1918,"    def register_log(self, event_type: str) -> None:","[220, 220, 220, 825, 7881, 62, 6404, 7, 944, 11, 1785, 62, 4906, 25, 965, 8, 4613, 6045, 25]"
🧠 ML Signal: Conditional logic to handle optional objects,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 11902, 5563]",0.5,1937,ml_signal,323,Conditional logic to handle optional objects,,1937,,[]
"🧠 ML Signal: Method processes events, indicating an event-driven architecture.","[8582, 100, 254, 10373, 26484, 25, 11789, 7767, 2995, 11, 12739, 281, 1785, 12, 15808, 10959, 13]",0.5,1937,ml_signal,323,"Method processes events, indicating an event-driven architecture.",,1937,,[]
"🧠 ML Signal: Storing position data in a dictionary, useful for state management patterns.","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2292, 1366, 287, 257, 22155, 11, 4465, 329, 1181, 4542, 7572, 13]",0.5,1945,ml_signal,325,"Storing position data in a dictionary, useful for state management patterns.",,1937,class OmsEngine(BaseEngine):,"[4871, 440, 907, 13798, 7, 14881, 13798, 2599]"
🧠 ML Signal: Use of optional chaining pattern with dictionary get method.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11902, 442, 1397, 3912, 351, 22155, 651, 2446, 13]",0.5,1954,ml_signal,327,Use of optional chaining pattern with dictionary get method.,,1945,    Provides order management system function.,"[220, 220, 220, 47081, 1502, 4542, 1080, 2163, 13]"
🧠 ML Signal: Conditional logic to handle optional objects.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 11902, 5563, 13]",0.5,1981,ml_signal,330,Conditional logic to handle optional objects.,,1954,"    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1388, 62, 18392, 25, 8774, 13798, 11, 1785, 62, 18392, 25, 8558, 13798, 8, 4613, 6045, 25]"
"🧠 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.","[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 318, 973, 11, 12739, 257, 3912, 286, 7952, 2099, 8748, 13]",1.0,2008,ml_signal,330,"Type hinting is used, indicating a pattern of explicit type usage.",,1981,"    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1388, 62, 18392, 25, 8774, 13798, 11, 1785, 62, 18392, 25, 8558, 13798, 8, 4613, 6045, 25]"
✅ Best Practice: Type hinting improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2018,best_practice,331,Type hinting improves code readability and maintainability.,,2008,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
"🧠 ML Signal: Accessing and modifying a dictionary, indicating a pattern of data storage and retrieval.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 290, 30620, 257, 22155, 11, 12739, 257, 3912, 286, 1366, 6143, 290, 45069, 13]",1.0,2018,ml_signal,333,"Accessing and modifying a dictionary, indicating a pattern of data storage and retrieval.",,2018,,[]
⚠️ SAST Risk (Low): Directly using event data without validation could lead to unexpected behavior if the data is malformed.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 1262, 1785, 1366, 1231, 21201, 714, 1085, 284, 10059, 4069, 611, 262, 1366, 318, 6428, 12214, 13]",0.5,2039,sast_risk,334,Directly using event data without validation could lead to unexpected behavior if the data is malformed.,Low,2018,"        self.ticks: dict[str, TickData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 83, 3378, 25, 8633, 58, 2536, 11, 46093, 6601, 60, 796, 23884]"
"🧠 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.","[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 318, 973, 11, 12739, 257, 3912, 286, 7952, 2099, 8748, 13]",1.0,2060,ml_signal,334,"Type hinting is used, indicating a pattern of explicit type usage.",,2039,"        self.ticks: dict[str, TickData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 83, 3378, 25, 8633, 58, 2536, 11, 46093, 6601, 60, 796, 23884]"
🧠 ML Signal: Storing data in a dictionary with a key suggests a caching or lookup pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1366, 287, 257, 22155, 351, 257, 1994, 5644, 257, 40918, 393, 35847, 3912, 13]",1.0,2081,ml_signal,336,Storing data in a dictionary with a key suggests a caching or lookup pattern.,,2060,"        self.trades: dict[str, TradeData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2213, 2367, 25, 8633, 58, 2536, 11, 9601, 6601, 60, 796, 23884]"
🧠 ML Signal: Conditional logic to check for existence in a dictionary.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 2198, 329, 6224, 287, 257, 22155, 13]",1.0,2102,ml_signal,338,Conditional logic to check for existence in a dictionary.,,2081,"        self.accounts: dict[str, AccountData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 82, 25, 8633, 58, 2536, 11, 10781, 6601, 60, 796, 23884]"
🧠 ML Signal: Lazy initialization pattern for dictionary values.,"[8582, 100, 254, 10373, 26484, 25, 406, 12582, 37588, 3912, 329, 22155, 3815, 13]",1.0,2123,ml_signal,340,Lazy initialization pattern for dictionary values.,,2102,"        self.quotes: dict[str, QuoteData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 421, 6421, 25, 8633, 58, 2536, 11, 19879, 6601, 60, 796, 23884]"
✅ Best Practice: Using a dictionary to manage and access contract data efficiently.,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 284, 6687, 290, 1895, 2775, 1366, 18306, 13]",0.5,2145,best_practice,342,Using a dictionary to manage and access contract data efficiently.,,2123,"        self.active_orders: dict[str, OrderData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 6361, 25, 8633, 58, 2536, 11, 8284, 6601, 60, 796, 23884]"
"🧠 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.","[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 318, 973, 11, 12739, 257, 3912, 286, 7952, 2099, 8748, 13]",1.0,2166,ml_signal,340,"Type hinting is used, indicating a pattern of explicit type usage.",,2145,"        self.quotes: dict[str, QuoteData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 421, 6421, 25, 8633, 58, 2536, 11, 19879, 6601, 60, 796, 23884]"
"🧠 ML Signal: Storing data in a dictionary, indicating a pattern of key-value data management.","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1366, 287, 257, 22155, 11, 12739, 257, 3912, 286, 1994, 12, 8367, 1366, 4542, 13]",1.0,2188,ml_signal,342,"Storing data in a dictionary, indicating a pattern of key-value data management.",,2166,"        self.active_orders: dict[str, OrderData] = {}","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 6361, 25, 8633, 58, 2536, 11, 8284, 6601, 60, 796, 23884]"
"🧠 ML Signal: Conditional logic based on object state, indicating a pattern of state management.","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2134, 1181, 11, 12739, 257, 3912, 286, 1181, 4542, 13]",1.0,2188,ml_signal,344,"Conditional logic based on object state, indicating a pattern of state management.",,2188,,[]
"🧠 ML Signal: Managing active items in a separate dictionary, indicating a pattern of active/inactive state tracking.","[8582, 100, 254, 10373, 26484, 25, 37108, 4075, 3709, 287, 257, 4553, 22155, 11, 12739, 257, 3912, 286, 4075, 14, 259, 5275, 1181, 9646, 13]",0.5,2188,ml_signal,346,"Managing active items in a separate dictionary, indicating a pattern of active/inactive state tracking.",,2188,,[]
"⚠️ SAST Risk (Low): Potential KeyError if vt_quoteid is not in active_quotes, though handled by the condition.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 410, 83, 62, 22708, 312, 318, 407, 287, 4075, 62, 421, 6421, 11, 996, 12118, 416, 262, 4006, 13]",0.5,2201,sast_risk,347,"Potential KeyError if vt_quoteid is not in active_quotes, though handled by the condition.",Low,2188,        self.register_event(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30238, 62, 15596, 3419]"
"🧠 ML Signal: Removing inactive items from a dictionary, indicating a pattern of cleanup or state transition.","[8582, 100, 254, 10373, 26484, 25, 3982, 5165, 28621, 3709, 422, 257, 22155, 11, 12739, 257, 3912, 286, 27425, 393, 1181, 6801, 13]",1.0,2211,ml_signal,350,"Removing inactive items from a dictionary, indicating a pattern of cleanup or state transition.",,2201,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2211,best_practice,346,Type hinting improves code readability and maintainability,,2211,,[]
🧠 ML Signal: Accessing dictionary with a key to retrieve data,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 257, 1994, 284, 19818, 1366]",1.0,2240,ml_signal,351,Accessing dictionary with a key to retrieve data,,2211,"        self.event_engine.register(EVENT_TICK, self.process_tick_event)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 13, 30238, 7, 20114, 3525, 62, 51, 11860, 11, 2116, 13, 14681, 62, 42298, 62, 15596, 8]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2269,best_practice,351,Type hinting improves code readability and maintainability,,2240,"        self.event_engine.register(EVENT_TICK, self.process_tick_event)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 13, 30238, 7, 20114, 3525, 62, 51, 11860, 11, 2116, 13, 14681, 62, 42298, 62, 15596, 8]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,2299,ml_signal,356,Usage of dictionary get method with default value,,2269,"        self.event_engine.register(EVENT_CONTRACT, self.process_contract_event)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 13, 30238, 7, 20114, 3525, 62, 10943, 5446, 10659, 11, 2116, 13, 14681, 62, 28484, 62, 15596, 8]"
✅ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,2329,best_practice,356,Include type hints for method parameters and return type for better readability and maintainability,,2299,"        self.event_engine.register(EVENT_CONTRACT, self.process_contract_event)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15596, 62, 18392, 13, 30238, 7, 20114, 3525, 62, 10943, 5446, 10659, 11, 2116, 13, 14681, 62, 28484, 62, 15596, 8]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,2344,ml_signal,361,Usage of dictionary get method with default value,,2329,        tick: TickData = event.data,"[220, 220, 220, 220, 220, 220, 220, 4378, 25, 46093, 6601, 796, 1785, 13, 7890]"
✅ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2359,best_practice,361,Type hinting for the return type improves code readability and maintainability,,2344,        tick: TickData = event.data,"[220, 220, 220, 220, 220, 220, 220, 4378, 25, 46093, 6601, 796, 1785, 13, 7890]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,2374,ml_signal,366,Usage of dictionary get method with default value,,2359,        order: OrderData = event.data,"[220, 220, 220, 220, 220, 220, 220, 1502, 25, 8284, 6601, 796, 1785, 13, 7890]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2389,best_practice,366,Type hinting improves code readability and maintainability,,2374,        order: OrderData = event.data,"[220, 220, 220, 220, 220, 220, 220, 1502, 25, 8284, 6601, 796, 1785, 13, 7890]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,2415,ml_signal,371,Usage of dictionary get method with default value,,2389,            self.active_orders[order.vt_orderid] = order,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 6361, 58, 2875, 13, 36540, 62, 2875, 312, 60, 796, 1502]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2441,best_practice,371,Type hinting improves code readability and maintainability,,2415,            self.active_orders[order.vt_orderid] = order,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 6361, 58, 2875, 13, 36540, 62, 2875, 312, 60, 796, 1502]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",0.5,2453,ml_signal,376,Usage of dictionary get method with default value,,2441,        # Update to offset converter,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 284, 11677, 38394]"
✅ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2465,best_practice,376,Use of type hinting for return type improves code readability and maintainability,,2453,        # Update to offset converter,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 284, 11677, 38394]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,2484,ml_signal,381,Usage of dictionary get method with default value,,2465,"    def process_trade_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 25351, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
✅ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,2503,best_practice,381,Include a docstring to describe the method's purpose,,2484,"    def process_trade_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 25351, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of list conversion to return a list of values from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 284, 1441, 257, 1351, 286, 3815, 422, 257, 22155]",0.5,2515,ml_signal,386,Usage of list conversion to return a list of values from a dictionary,,2503,        # Update to offset converter,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 284, 11677, 38394]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2527,best_practice,386,Type hinting improves code readability and maintainability,,2515,        # Update to offset converter,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 284, 11677, 38394]"
🧠 ML Signal: Usage of list conversion on dictionary values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 319, 22155, 3815]",1.0,2546,ml_signal,391,Usage of list conversion on dictionary values,,2527,"    def process_position_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 9150, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
✅ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2565,best_practice,391,Type hinting for the return type improves code readability and maintainability,,2546,"    def process_position_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 9150, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of instance variable 'self.trades' indicates a pattern of accessing class attributes,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4554, 7885, 705, 944, 13, 2213, 2367, 6, 9217, 257, 3912, 286, 22534, 1398, 12608]",0.5,2577,ml_signal,396,Usage of instance variable 'self.trades' indicates a pattern of accessing class attributes,,2565,        # Update to offset converter,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 284, 11677, 38394]"
✅ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,2589,best_practice,396,Include a docstring to describe the method's purpose,,2577,        # Update to offset converter,"[220, 220, 220, 220, 220, 220, 220, 1303, 10133, 284, 11677, 38394]"
🧠 ML Signal: Accessing and returning data from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 290, 8024, 1366, 422, 257, 22155]",0.5,2608,ml_signal,401,Accessing and returning data from a dictionary,,2589,"    def process_account_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 23317, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2627,best_practice,401,Type hinting improves code readability and maintainability,,2608,"    def process_account_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 23317, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of dictionary values to retrieve all items,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 3815, 284, 19818, 477, 3709]",0.5,2646,ml_signal,406,Usage of dictionary values to retrieve all items,,2627,"    def process_contract_event(self, event: Event) -> None:","[220, 220, 220, 825, 1429, 62, 28484, 62, 15596, 7, 944, 11, 1785, 25, 8558, 8, 4613, 6045, 25]"
✅ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,2656,best_practice,407,Include a docstring to describe the method's purpose,,2646,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Usage of list conversion on dictionary values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 319, 22155, 3815]",0.5,2671,ml_signal,411,Usage of list conversion on dictionary values,,2656,        # Initialize offset converter for each gateway,"[220, 220, 220, 220, 220, 220, 220, 1303, 20768, 1096, 11677, 38394, 329, 1123, 24308]"
✅ Best Practice: Include a docstring to describe the method's purpose.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 13]",0.5,2695,best_practice,412,Include a docstring to describe the method's purpose.,,2671,        if contract.gateway_name not in self.offset_converters:,"[220, 220, 220, 220, 220, 220, 220, 611, 2775, 13, 10494, 1014, 62, 3672, 407, 287, 2116, 13, 28968, 62, 1102, 332, 1010, 25]"
🧠 ML Signal: Usage of list conversion to collect dictionary values.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 284, 2824, 22155, 3815, 13]",0.5,2705,ml_signal,416,Usage of list conversion to collect dictionary values.,,2695,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
✅ Best Practice: Include type hint for return value for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 9254, 329, 1441, 1988, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,2715,best_practice,416,Include type hint for return value for better readability and maintainability,,2705,"        """"""""""""","[220, 220, 220, 220, 220, 220, 220, 13538, 15931, 15931]"
🧠 ML Signal: Accessing a dictionary's values to retrieve a list of items,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 22155, 338, 3815, 284, 19818, 257, 1351, 286, 3709]",0.5,2729,ml_signal,421,Accessing a dictionary's values to retrieve a list of items,,2715,        if quote.is_active():,"[220, 220, 220, 220, 220, 220, 220, 611, 9577, 13, 271, 62, 5275, 33529]"
✅ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,2743,best_practice,421,Include a docstring to describe the method's purpose,,2729,        if quote.is_active():,"[220, 220, 220, 220, 220, 220, 220, 611, 9577, 13, 271, 62, 5275, 33529]"
✅ Best Practice: Docstring provides a clear description of the method,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446]",0.5,2770,best_practice,422,Docstring provides a clear description of the method,,2743,            self.active_quotes[quote.vt_quoteid] = quote,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 421, 6421, 58, 22708, 13, 36540, 62, 22708, 312, 60, 796, 9577]"
🧠 ML Signal: Usage of list conversion to return a list from a dictionary's values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 11315, 284, 1441, 257, 1351, 422, 257, 22155, 338, 3815]",0.5,2794,ml_signal,427,Usage of list conversion to return a list from a dictionary's values,,2770,"    def get_tick(self, vt_symbol: str) -> TickData | None:","[220, 220, 220, 825, 651, 62, 42298, 7, 944, 11, 410, 83, 62, 1837, 23650, 25, 965, 8, 4613, 46093, 6601, 930, 6045, 25]"
✅ Best Practice: Docstring provides a brief description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007, 13]",1.0,2818,best_practice,427,Docstring provides a brief description of the method's purpose.,,2794,"    def get_tick(self, vt_symbol: str) -> TickData | None:","[220, 220, 220, 825, 651, 62, 42298, 7, 944, 11, 410, 83, 62, 1837, 23650, 25, 965, 8, 4613, 46093, 6601, 930, 6045, 25]"
🧠 ML Signal: Usage of type hinting for variables and return types.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 9254, 278, 329, 9633, 290, 1441, 3858, 13]",1.0,2840,ml_signal,431,Usage of type hinting for variables and return types.,,2818,"        return self.ticks.get(vt_symbol, None)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 83, 3378, 13, 1136, 7, 36540, 62, 1837, 23650, 11, 6045, 8]"
🧠 ML Signal: Pattern of checking for None before proceeding with an operation.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 329, 6045, 878, 18788, 351, 281, 4905, 13]",1.0,2864,ml_signal,433,Pattern of checking for None before proceeding with an operation.,,2840,"    def get_order(self, vt_orderid: str) -> OrderData | None:","[220, 220, 220, 825, 651, 62, 2875, 7, 944, 11, 410, 83, 62, 2875, 312, 25, 965, 8, 4613, 8284, 6601, 930, 6045, 25]"
🧠 ML Signal: Usage of a dictionary to retrieve an object based on a key,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 22155, 284, 19818, 281, 2134, 1912, 319, 257, 1994]",1.0,2886,ml_signal,443,Usage of a dictionary to retrieve an object based on a key,,2864,"        return self.trades.get(vt_tradeid, None)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 2213, 2367, 13, 1136, 7, 36540, 62, 25351, 312, 11, 6045, 8]"
⚠️ SAST Risk (Low): Potential KeyError if gateway_name is not in offset_converters,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 24308, 62, 3672, 318, 407, 287, 11677, 62, 1102, 332, 1010]",0.5,2886,sast_risk,444,Potential KeyError if gateway_name is not in offset_converters,Low,2886,,[]
🧠 ML Signal: Method call on an object retrieved from a dictionary,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 29517, 422, 257, 22155]",1.0,2894,ml_signal,448,Method call on an object retrieved from a dictionary,,2886,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Include type hints for method return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,2902,best_practice,448,Include type hints for method return type for better readability and maintainability,,2894,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of dictionary get method with default value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 651, 2446, 351, 4277, 1988]",1.0,2920,ml_signal,453,Usage of dictionary get method with default value,,2902,        Get latest account data by vt_accountid.,"[220, 220, 220, 220, 220, 220, 220, 3497, 3452, 1848, 1366, 416, 410, 83, 62, 23317, 312, 13]"
✅ Best Practice: Class docstring provides a brief description of the class functionality.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 11244, 13]",1.0,2928,best_practice,454,Class docstring provides a brief description of the class functionality.,,2920,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 19552, 12608, 13]",1.0,2945,best_practice,459,Call to superclass initializer ensures proper initialization of inherited attributes.,,2928,        Get contract data by vt_symbol.,"[220, 220, 220, 220, 220, 220, 220, 3497, 2775, 1366, 416, 410, 83, 62, 1837, 23650, 13]"
✅ Best Practice: Explicit type annotation for thread improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 4704, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2967,best_practice,461,Explicit type annotation for thread improves code readability and maintainability.,,2945,"        return self.contracts.get(vt_symbol, None)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 28484, 82, 13, 1136, 7, 36540, 62, 1837, 23650, 11, 6045, 8]"
✅ Best Practice: Explicit type annotation for queue improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 16834, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2991,best_practice,463,Explicit type annotation for queue improves code readability and maintainability.,,2967,"    def get_quote(self, vt_quoteid: str) -> QuoteData | None:","[220, 220, 220, 825, 651, 62, 22708, 7, 944, 11, 410, 83, 62, 22708, 312, 25, 965, 8, 4613, 19879, 6601, 930, 6045, 25]"
✅ Best Practice: Explicit type annotation for active improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 2099, 23025, 329, 4075, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,3009,best_practice,465,Explicit type annotation for active improves code readability and maintainability.,,2991,        Get latest quote data by vt_orderid.,"[220, 220, 220, 220, 220, 220, 220, 3497, 3452, 9577, 1366, 416, 410, 83, 62, 2875, 312, 13]"
🧠 ML Signal: Checks for active state before proceeding,"[8582, 100, 254, 10373, 26484, 25, 47719, 329, 4075, 1181, 878, 18788]",0.5,3027,ml_signal,465,Checks for active state before proceeding,,3009,        Get latest quote data by vt_orderid.,"[220, 220, 220, 220, 220, 220, 220, 3497, 3452, 9577, 1366, 416, 410, 83, 62, 2875, 312, 13]"
🧠 ML Signal: Default value assignment for receiver,"[8582, 100, 254, 10373, 26484, 25, 15161, 1988, 16237, 329, 9733]",0.5,3027,ml_signal,468,Default value assignment for receiver,,3027,,[]
✅ Best Practice: Type hinting for variable 'msg',"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 7885, 705, 19662, 6]",0.5,3039,best_practice,471,Type hinting for variable 'msg',,3027,        Get all tick data.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 4378, 1366, 13]"
⚠️ SAST Risk (Low): Potential exposure of email sender information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 3053, 29788, 1321]",1.0,3056,sast_risk,473,Potential exposure of email sender information,Low,3039,        return list(self.ticks.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 83, 3378, 13, 27160, 28955]"
⚠️ SAST Risk (Low): Potential exposure of email receiver information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 3053, 9733, 1321]",1.0,3074,sast_risk,475,Potential exposure of email receiver information,Low,3056,    def get_all_orders(self) -> list[OrderData]:,"[220, 220, 220, 825, 651, 62, 439, 62, 6361, 7, 944, 8, 4613, 1351, 58, 18743, 6601, 5974]"
🧠 ML Signal: Usage of a queue to handle email messages,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 16834, 284, 5412, 3053, 6218]",0.5,3090,ml_signal,479,Usage of a queue to handle email messages,,3074,        return list(self.orders.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 6361, 13, 27160, 28955]"
🧠 ML Signal: Usage of configuration settings for email server,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 6460, 329, 3053, 4382]",0.5,3102,ml_signal,477,Usage of configuration settings for email server,,3090,        Get all order data.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 1502, 1366, 13]"
🧠 ML Signal: Usage of configuration settings for email port,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 6460, 329, 3053, 2493]",0.5,3118,ml_signal,479,Usage of configuration settings for email port,,3102,        return list(self.orders.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 6361, 13, 27160, 28955]"
🧠 ML Signal: Usage of configuration settings for email username,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 6460, 329, 3053, 20579]",0.5,3137,ml_signal,481,Usage of configuration settings for email username,,3118,    def get_all_trades(self) -> list[TradeData]:,"[220, 220, 220, 825, 651, 62, 439, 62, 2213, 2367, 7, 944, 8, 4613, 1351, 58, 35965, 6601, 5974]"
⚠️ SAST Risk (High): Storing and using plaintext passwords,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 520, 3255, 290, 1262, 8631, 5239, 21442]",0.5,3149,sast_risk,483,Storing and using plaintext passwords,High,3137,        Get all trade data.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 3292, 1366, 13]"
🧠 ML Signal: Usage of a queue to retrieve email messages,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 16834, 284, 19818, 3053, 6218]",1.0,3168,ml_signal,487,Usage of a queue to retrieve email messages,,3149,    def get_all_positions(self) -> list[PositionData]:,"[220, 220, 220, 825, 651, 62, 439, 62, 1930, 1756, 7, 944, 8, 4613, 1351, 58, 26545, 6601, 5974]"
⚠️ SAST Risk (Medium): Potentially insecure email server connection,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 31955, 3053, 4382, 4637]",0.5,3176,sast_risk,490,Potentially insecure email server connection,Medium,3168,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
⚠️ SAST Risk (High): Using plaintext credentials for login,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 8631, 5239, 18031, 329, 17594]",1.0,3193,sast_risk,491,Using plaintext credentials for login,High,3176,        return list(self.positions.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 1930, 1756, 13, 27160, 28955]"
🧠 ML Signal: Sending an email message,"[8582, 100, 254, 10373, 26484, 25, 32038, 281, 3053, 3275]",0.5,3201,ml_signal,494,Sending an email message,,3193,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Explicitly closing the SMTP connection,"[26486, 227, 6705, 19939, 25, 11884, 306, 9605, 262, 9447, 7250, 4637]",0.5,3209,best_practice,496,Explicitly closing the SMTP connection,,3201,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Logging of exceptions with traceback,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 13269, 351, 12854, 1891]",0.5,3228,ml_signal,499,Logging of exceptions with traceback,,3209,    def get_all_contracts(self) -> list[ContractData]:,"[220, 220, 220, 825, 651, 62, 439, 62, 28484, 82, 7, 944, 8, 4613, 1351, 58, 45845, 6601, 5974]"
🧠 ML Signal: Logging mechanism for email failures,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 9030, 329, 3053, 15536]",0.5,3240,ml_signal,501,Logging mechanism for email failures,,3228,        Get all contract data.,"[220, 220, 220, 220, 220, 220, 220, 3497, 477, 2775, 1366, 13]"
🧠 ML Signal: Method that changes the state of an object,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 2458, 262, 1181, 286, 281, 2134]",1.0,3248,ml_signal,496,Method that changes the state of an object,,3240,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"🧠 ML Signal: Starting a thread, indicating concurrent execution","[8582, 100, 254, 10373, 26484, 25, 17962, 257, 4704, 11, 12739, 24580, 9706]",1.0,3248,ml_signal,498,"Starting a thread, indicating concurrent execution",,3248,,[]
⚠️ SAST Risk (Low): Potential race condition if not managed properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 611, 407, 5257, 6105]",0.5,3267,sast_risk,499,Potential race condition if not managed properly,Low,3248,    def get_all_contracts(self) -> list[ContractData]:,"[220, 220, 220, 825, 651, 62, 439, 62, 28484, 82, 7, 944, 8, 4613, 1351, 58, 45845, 6601, 5974]"
"🧠 ML Signal: Method to close or clean up resources, common in resource management patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 284, 1969, 393, 3424, 510, 4133, 11, 2219, 287, 8271, 4542, 7572]",0.5,3275,ml_signal,500,"Method to close or clean up resources, common in resource management patterns",,3267,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Explicitly setting the active flag to False to indicate closure,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 262, 4075, 6056, 284, 10352, 284, 7603, 16512]",0.5,3292,best_practice,503,Explicitly setting the active flag to False to indicate closure,,3275,        return list(self.contracts.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 28484, 82, 13, 27160, 28955]"
⚠️ SAST Risk (Low): Potential for blocking if the thread does not terminate,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12013, 611, 262, 4704, 857, 407, 23654]",1.0,3309,sast_risk,503,Potential for blocking if the thread does not terminate,Low,3292,        return list(self.contracts.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 28484, 82, 13, 27160, 28955]"
"🧠 ML Signal: Use of threading, indicating concurrent execution patterns","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4704, 278, 11, 12739, 24580, 9706, 7572]",0.5,3326,ml_signal,503,"Use of threading, indicating concurrent execution patterns",,3309,        return list(self.contracts.values()),"[220, 220, 220, 220, 220, 220, 220, 1441, 1351, 7, 944, 13, 28484, 82, 13, 27160, 28955]"

[
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 12,
    "text": "from .app import BaseApp",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      1324,
      1330,
      7308,
      4677
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 12,
    "text": "from .app import BaseApp",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      1324,
      1330,
      7308,
      4677
    ],
    "start_token": 6,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 23,
    "text": "from .gateway import BaseGateway",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      10494,
      1014,
      1330,
      7308,
      22628,
      1014
    ],
    "start_token": 12,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 23,
    "text": "from .gateway import BaseGateway",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      10494,
      1014,
      1330,
      7308,
      22628,
      1014
    ],
    "start_token": 20,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 45,
    "text": "from .locale import _",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      6738,
      764,
      17946,
      1000,
      1330,
      4808
    ],
    "start_token": 28,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 51,
    "text": "class BaseEngine(ABC):",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      4871,
      7308,
      13798,
      7,
      24694,
      2599
    ],
    "start_token": 34,
    "end_token": 40,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 51,
    "text": "class BaseEngine(ABC):",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package",
    "confidence": 0.5,
    "tokens": [
      4871,
      7308,
      13798,
      7,
      24694,
      2599
    ],
    "start_token": 40,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package"
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of TypeVar for generic programming",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 46,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      5994,
      19852,
      329,
      14276,
      8300
    ],
    "label": "ml_signal",
    "reason": "Usage of TypeVar for generic programming"
  },
  {
    "line": 51,
    "text": "class BaseEngine(ABC):",
    "annotation": "\u2705 Best Practice: Use of abstractmethod enforces implementation in subclasses",
    "confidence": 0.5,
    "tokens": [
      4871,
      7308,
      13798,
      7,
      24694,
      2599
    ],
    "start_token": 46,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12531,
      24396,
      551,
      27087,
      7822,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of abstractmethod enforces implementation in subclasses"
  },
  {
    "line": 58,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 52,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 60,
    "text": "        event_engine: EventEngine,",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      11
    ],
    "start_token": 61,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 62,
    "text": "    ) -> None:",
    "annotation": "\u2705 Best Practice: Type annotations improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 75,
    "end_token": 82,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type annotations improve code readability and maintainability."
  },
  {
    "line": 62,
    "text": "    ) -> None:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and behavior of the method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 82,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and behavior of the method"
  },
  {
    "line": 68,
    "text": "    def close(self) -> None:",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1969,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 89,
    "end_token": 100,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 75,
    "text": "    Acts as the core of the trading platform.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionaries to store gateway, engine, and app instances",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25528,
      355,
      262,
      4755,
      286,
      262,
      7313,
      3859,
      13
    ],
    "start_token": 100,
    "end_token": 112,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      48589,
      3166,
      284,
      3650,
      24308,
      11,
      3113,
      11,
      290,
      598,
      10245
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionaries to store gateway, engine, and app instances"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionaries to store gateway, engine, and app instances",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      48589,
      3166,
      284,
      3650,
      24308,
      11,
      3113,
      11,
      290,
      598,
      10245
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionaries to store gateway, engine, and app instances"
  },
  {
    "line": 79,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionaries to store gateway, engine, and app instances",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 112,
    "end_token": 122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      48589,
      3166,
      284,
      3650,
      24308,
      11,
      3113,
      11,
      290,
      598,
      10245
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionaries to store gateway, engine, and app instances"
  },
  {
    "line": 81,
    "text": "            self.event_engine: EventEngine = event_engine",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list to store exchange instances",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      25,
      8558,
      13798,
      796,
      1785,
      62,
      18392
    ],
    "start_token": 122,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      284,
      3650,
      5163,
      10245
    ],
    "label": "ml_signal",
    "reason": "Usage of list to store exchange instances"
  },
  {
    "line": 82,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Changing the current working directory can have unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 145,
    "end_token": 154,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33680,
      262,
      1459,
      1762,
      8619,
      460,
      423,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Changing the current working directory can have unintended side effects"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize engines in a separate method for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 154,
    "end_token": 154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      11874,
      287,
      257,
      4553,
      2446,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize engines in a separate method for better readability and maintainability"
  },
  {
    "line": 81,
    "text": "            self.event_engine: EventEngine = event_engine",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      25,
      8558,
      13798,
      796,
      1785,
      62,
      18392
    ],
    "start_token": 154,
    "end_token": 177,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 86,
    "text": "        self.gateways: dict[str, BaseGateway] = {}",
    "annotation": "\u2705 Best Practice: Use of type hinting for local variable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      10494,
      1322,
      25,
      8633,
      58,
      2536,
      11,
      7308,
      22628,
      1014,
      60,
      796,
      23884
    ],
    "start_token": 177,
    "end_token": 199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1957,
      7885
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for local variable"
  },
  {
    "line": 88,
    "text": "        self.apps: dict[str, BaseApp] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of adding an object to a dictionary using a key from the object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      18211,
      25,
      8633,
      58,
      2536,
      11,
      7308,
      4677,
      60,
      796,
      23884
    ],
    "start_token": 199,
    "end_token": 219,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4375,
      281,
      2134,
      284,
      257,
      22155,
      1262,
      257,
      1994,
      422,
      262,
      2134
    ],
    "label": "ml_signal",
    "reason": "Pattern of adding an object to a dictionary using a key from the object"
  },
  {
    "line": 89,
    "text": "        self.exchanges: list[Exchange] = []",
    "annotation": "\ud83e\udde0 ML Signal: Returning an object after adding it to a collection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1069,
      36653,
      25,
      1351,
      58,
      3109,
      3803,
      60,
      796,
      17635
    ],
    "start_token": 219,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      281,
      2134,
      706,
      4375,
      340,
      284,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Returning an object after adding it to a collection"
  },
  {
    "line": 89,
    "text": "        self.exchanges: list[Exchange] = []",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1069,
      36653,
      25,
      1351,
      58,
      3109,
      3803,
      60,
      796,
      17635
    ],
    "start_token": 238,
    "end_token": 257,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose."
  },
  {
    "line": 94,
    "text": "    def add_engine(self, engine_class: type[EngineType]) -> EngineType:",
    "annotation": "\u2705 Best Practice: Use of default attribute value if no gateway_name is provided.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      751,
      62,
      18392,
      7,
      944,
      11,
      3113,
      62,
      4871,
      25,
      2099,
      58,
      13798,
      6030,
      12962,
      4613,
      7117,
      6030,
      25
    ],
    "start_token": 257,
    "end_token": 280,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11688,
      1988,
      611,
      645,
      24308,
      62,
      3672,
      318,
      2810,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default attribute value if no gateway_name is provided."
  },
  {
    "line": 96,
    "text": "        Add function engine.",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a class with specific parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3060,
      2163,
      3113,
      13
    ],
    "start_token": 280,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1398,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a class with specific parameters."
  },
  {
    "line": 98,
    "text": "        engine: EngineType = engine_class(self, self.event_engine)      # type: ignore",
    "annotation": "\ud83e\udde0 ML Signal: Storing an object in a dictionary with a dynamic key.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3113,
      25,
      7117,
      6030,
      796,
      3113,
      62,
      4871,
      7,
      944,
      11,
      2116,
      13,
      15596,
      62,
      18392,
      8,
      220,
      220,
      220,
      220,
      220,
      1303,
      2099,
      25,
      8856
    ],
    "start_token": 291,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      281,
      2134,
      287,
      257,
      22155,
      351,
      257,
      8925,
      1994,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing an object in a dictionary with a dynamic key."
  },
  {
    "line": 101,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking for membership in a list before appending.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 324,
    "end_token": 324,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      9931,
      287,
      257,
      1351,
      878,
      598,
      1571,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for membership in a list before appending."
  },
  {
    "line": 104,
    "text": "        Add gateway.",
    "annotation": "\ud83e\udde0 ML Signal: Appending unique items to a list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3060,
      24308,
      13
    ],
    "start_token": 324,
    "end_token": 334,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      3748,
      3709,
      284,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending unique items to a list."
  },
  {
    "line": 105,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Returning an instance of a class.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 334,
    "end_token": 342,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      281,
      4554,
      286,
      257,
      1398,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning an instance of a class."
  },
  {
    "line": 101,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 342,
    "end_token": 342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose."
  },
  {
    "line": 106,
    "text": "        # Use default name if gateway_name not passed",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating objects from a class, useful for understanding object-oriented patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5765,
      4277,
      1438,
      611,
      24308,
      62,
      3672,
      407,
      3804
    ],
    "start_token": 342,
    "end_token": 359,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      5563,
      422,
      257,
      1398,
      11,
      4465,
      329,
      4547,
      2134,
      12,
      17107,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiating objects from a class, useful for understanding object-oriented patterns."
  },
  {
    "line": 108,
    "text": "            gateway_name = gateway_class.default_name",
    "annotation": "\ud83e\udde0 ML Signal: Storing objects in a dictionary, useful for understanding data structures and access patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      62,
      3672,
      796,
      24308,
      62,
      4871,
      13,
      12286,
      62,
      3672
    ],
    "start_token": 359,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      5563,
      287,
      257,
      22155,
      11,
      4465,
      329,
      4547,
      1366,
      8573,
      290,
      1895,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing objects in a dictionary, useful for understanding data structures and access patterns."
  },
  {
    "line": 109,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining and object interaction patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      290,
      2134,
      10375,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining and object interaction patterns."
  },
  {
    "line": 112,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Return statement indicating the end of a function and its output.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      2643,
      12739,
      262,
      886,
      286,
      257,
      2163,
      290,
      663,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Return statement indicating the end of a function and its output."
  },
  {
    "line": 112,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the method parameters and return type for better readability and maintainability."
  },
  {
    "line": 114,
    "text": "        for exchange in gateway.exchanges:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific engine class can indicate the type of application or system being developed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5163,
      287,
      24308,
      13,
      1069,
      36653,
      25
    ],
    "start_token": 381,
    "end_token": 396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      3113,
      1398,
      460,
      7603,
      262,
      2099,
      286,
      3586,
      393,
      1080,
      852,
      4166,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific engine class can indicate the type of application or system being developed."
  },
  {
    "line": 116,
    "text": "                self.exchanges.append(exchange)",
    "annotation": "\ud83e\udde0 ML Signal: Assigning methods from an engine to instance variables can indicate a pattern of engine usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1069,
      36653,
      13,
      33295,
      7,
      1069,
      3803,
      8
    ],
    "start_token": 396,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      5050,
      422,
      281,
      3113,
      284,
      4554,
      9633,
      460,
      7603,
      257,
      3912,
      286,
      3113,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Assigning methods from an engine to instance variables can indicate a pattern of engine usage."
  },
  {
    "line": 136,
    "text": "        oms_engine: OmsEngine = self.add_engine(OmsEngine)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific engine class can indicate the type of application or system being developed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      267,
      907,
      62,
      18392,
      25,
      440,
      907,
      13798,
      796,
      2116,
      13,
      2860,
      62,
      18392,
      7,
      46,
      907,
      13798,
      8
    ],
    "start_token": 421,
    "end_token": 447,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      3113,
      1398,
      460,
      7603,
      262,
      2099,
      286,
      3586,
      393,
      1080,
      852,
      4166,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific engine class can indicate the type of application or system being developed."
  },
  {
    "line": 139,
    "text": "        self.get_trade: Callable[[str], TradeData | None] = oms_engine.get_trade",
    "annotation": "\ud83e\udde0 ML Signal: Assigning methods from an engine to instance variables can indicate a pattern of engine usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      25351,
      25,
      4889,
      540,
      30109,
      2536,
      4357,
      9601,
      6601,
      930,
      6045,
      60,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      25351
    ],
    "start_token": 447,
    "end_token": 479,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      5050,
      422,
      281,
      3113,
      284,
      4554,
      9633,
      460,
      7603,
      257,
      3912,
      286,
      3113,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Assigning methods from an engine to instance variables can indicate a pattern of engine usage."
  },
  {
    "line": 136,
    "text": "        oms_engine: OmsEngine = self.add_engine(OmsEngine)",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      267,
      907,
      62,
      18392,
      25,
      440,
      907,
      13798,
      796,
      2116,
      13,
      2860,
      62,
      18392,
      7,
      46,
      907,
      13798,
      8
    ],
    "start_token": 479,
    "end_token": 505,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method's purpose."
  },
  {
    "line": 140,
    "text": "        self.get_position: Callable[[str], PositionData | None] = oms_engine.get_position",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      9150,
      25,
      4889,
      540,
      30109,
      2536,
      4357,
      23158,
      6601,
      930,
      6045,
      60,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      9150
    ],
    "start_token": 505,
    "end_token": 537,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 142,
    "text": "        self.get_contract: Callable[[str], ContractData | None] = oms_engine.get_contract",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom data structures like LogData can indicate logging patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      28484,
      25,
      4889,
      540,
      30109,
      2536,
      4357,
      17453,
      6601,
      930,
      6045,
      60,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      28484
    ],
    "start_token": 537,
    "end_token": 569,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      1366,
      8573,
      588,
      5972,
      6601,
      460,
      7603,
      18931,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of custom data structures like LogData can indicate logging patterns."
  },
  {
    "line": 143,
    "text": "        self.get_quote: Callable[[str], QuoteData | None] = oms_engine.get_quote",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom event systems can indicate event-driven architecture patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      22708,
      25,
      4889,
      540,
      30109,
      2536,
      4357,
      19879,
      6601,
      930,
      6045,
      60,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      22708
    ],
    "start_token": 569,
    "end_token": 601,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      1785,
      3341,
      460,
      7603,
      1785,
      12,
      15808,
      10959,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of custom event systems can indicate event-driven architecture patterns."
  },
  {
    "line": 146,
    "text": "        self.get_all_trades: Callable[[], list[TradeData]] = oms_engine.get_all_trades",
    "annotation": "\ud83e\udde0 ML Signal: Interaction with an event engine can indicate asynchronous or decoupled system design.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      439,
      62,
      2213,
      2367,
      25,
      4889,
      540,
      30109,
      4357,
      1351,
      58,
      35965,
      6601,
      11907,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      439,
      62,
      2213,
      2367
    ],
    "start_token": 601,
    "end_token": 638,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4225,
      2673,
      351,
      281,
      1785,
      3113,
      460,
      7603,
      39354,
      393,
      875,
      280,
      10137,
      1080,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Interaction with an event engine can indicate asynchronous or decoupled system design."
  },
  {
    "line": 143,
    "text": "        self.get_quote: Callable[[str], QuoteData | None] = oms_engine.get_quote",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and helps with static analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      22708,
      25,
      4889,
      540,
      30109,
      2536,
      4357,
      19879,
      6601,
      930,
      6045,
      60,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      22708
    ],
    "start_token": 638,
    "end_token": 670,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5419,
      351,
      9037,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and helps with static analysis."
  },
  {
    "line": 147,
    "text": "        self.get_all_positions: Callable[[], list[PositionData]] = oms_engine.get_all_positions",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      439,
      62,
      1930,
      1756,
      25,
      4889,
      540,
      30109,
      4357,
      1351,
      58,
      26545,
      6601,
      11907,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      439,
      62,
      1930,
      1756
    ],
    "start_token": 670,
    "end_token": 707,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value."
  },
  {
    "line": 150,
    "text": "        self.get_all_quotes: Callable[[], list[QuoteData]] = oms_engine.get_all_quotes",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure if log message is exposed to users.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      439,
      62,
      421,
      6421,
      25,
      4889,
      540,
      30109,
      4357,
      1351,
      58,
      25178,
      6601,
      11907,
      796,
      267,
      907,
      62,
      18392,
      13,
      1136,
      62,
      439,
      62,
      421,
      6421
    ],
    "start_token": 707,
    "end_token": 744,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      611,
      2604,
      3275,
      318,
      7362,
      284,
      2985,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure if log message is exposed to users."
  },
  {
    "line": 154,
    "text": "        self.convert_order_request: Callable[[OrderRequest, str, bool, bool], list[OrderRequest]] = oms_engine.convert_order_request",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1102,
      1851,
      62,
      2875,
      62,
      25927,
      25,
      4889,
      540,
      30109,
      18743,
      18453,
      11,
      965,
      11,
      20512,
      11,
      20512,
      4357,
      1351,
      58,
      18743,
      18453,
      11907,
      796,
      267,
      907,
      62,
      18392,
      13,
      1102,
      1851,
      62,
      2875,
      62,
      25927
    ],
    "start_token": 744,
    "end_token": 789,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 156,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure if engine_name is sensitive",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 789,
    "end_token": 789,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      611,
      3113,
      62,
      3672,
      318,
      8564
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure if engine_name is sensitive"
  },
  {
    "line": 158,
    "text": "        self.send_email: Callable[[str, str, str | None], None] = email_engine.send_email",
    "annotation": "\u2705 Best Practice: Use of logging for error or status messages",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21280,
      62,
      12888,
      25,
      4889,
      540,
      30109,
      2536,
      11,
      965,
      11,
      965,
      930,
      6045,
      4357,
      6045,
      60,
      796,
      3053,
      62,
      18392,
      13,
      21280,
      62,
      12888
    ],
    "start_token": 789,
    "end_token": 823,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      4049,
      393,
      3722,
      6218
    ],
    "label": "best_practice",
    "reason": "Use of logging for error or status messages"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and helps with static analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 823,
    "end_token": 823,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5419,
      351,
      9037,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and helps with static analysis."
  },
  {
    "line": 164,
    "text": "        log: LogData = LogData(msg=msg, gateway_name=source)",
    "annotation": "\u2705 Best Practice: Using type hints for variables improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2604,
      25,
      5972,
      6601,
      796,
      5972,
      6601,
      7,
      19662,
      28,
      19662,
      11,
      24308,
      62,
      3672,
      28,
      10459,
      8
    ],
    "start_token": 823,
    "end_token": 848,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      20269,
      329,
      9633,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using type hints for variables improves code readability and maintainability."
  },
  {
    "line": 166,
    "text": "        self.event_engine.put(event)",
    "annotation": "\ud83e\udde0 ML Signal: Checking for None before proceeding is a common pattern for handling optional values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      1996,
      7,
      15596,
      8
    ],
    "start_token": 848,
    "end_token": 865,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      6045,
      878,
      18788,
      318,
      257,
      2219,
      3912,
      329,
      9041,
      11902,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for None before proceeding is a common pattern for handling optional values."
  },
  {
    "line": 167,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method calls on objects can indicate usage patterns and dependencies.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 865,
    "end_token": 865,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      319,
      5563,
      460,
      7603,
      8748,
      7572,
      290,
      20086,
      13
    ],
    "label": "ml_signal",
    "reason": "Method calls on objects can indicate usage patterns and dependencies."
  },
  {
    "line": 170,
    "text": "        Return gateway object by name.",
    "annotation": "\ud83e\udde0 ML Signal: Returning None explicitly is a common pattern for functions that may not have a value to return.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8229,
      24308,
      2134,
      416,
      1438,
      13
    ],
    "start_token": 865,
    "end_token": 878,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      6045,
      11777,
      318,
      257,
      2219,
      3912,
      329,
      5499,
      326,
      743,
      407,
      423,
      257,
      1988,
      284,
      1441,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning None explicitly is a common pattern for functions that may not have a value to return."
  },
  {
    "line": 167,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 878,
    "end_token": 878,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose"
  },
  {
    "line": 171,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion to obtain keys from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 878,
    "end_token": 886,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      284,
      7330,
      8251,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion to obtain keys from a dictionary"
  },
  {
    "line": 171,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 886,
    "end_token": 894,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 176,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion from dictionary values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 894,
    "end_token": 894,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      422,
      22155,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion from dictionary values"
  },
  {
    "line": 177,
    "text": "    def get_engine(self, engine_name: str) -> BaseEngine | None:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      18392,
      7,
      944,
      11,
      3113,
      62,
      3672,
      25,
      965,
      8,
      4613,
      7308,
      13798,
      930,
      6045,
      25
    ],
    "start_token": 894,
    "end_token": 916,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose."
  },
  {
    "line": 181,
    "text": "        engine: BaseEngine | None = self.engines.get(engine_name, None)",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a list of objects, indicating a common pattern of data retrieval.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3113,
      25,
      7308,
      13798,
      930,
      6045,
      796,
      2116,
      13,
      1516,
      1127,
      13,
      1136,
      7,
      18392,
      62,
      3672,
      11,
      6045,
      8
    ],
    "start_token": 916,
    "end_token": 943,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1351,
      286,
      5563,
      11,
      12739,
      257,
      2219,
      3912,
      286,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Method returning a list of objects, indicating a common pattern of data retrieval."
  },
  {
    "line": 185,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 943,
    "end_token": 943,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 187,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an object is None before using it is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 943,
    "end_token": 951,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      2134,
      318,
      6045,
      878,
      1262,
      340,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checking if an object is None before using it is a common pattern"
  },
  {
    "line": 189,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method invocation on an object is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 951,
    "end_token": 959,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      43219,
      319,
      281,
      2134,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method invocation on an object is a common pattern"
  },
  {
    "line": 192,
    "text": "            return gateway.get_default_setting()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'gateway' with union type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      24308,
      13,
      1136,
      62,
      12286,
      62,
      33990,
      3419
    ],
    "start_token": 959,
    "end_token": 979,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      10494,
      1014,
      6,
      351,
      6441,
      2099
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'gateway' with union type"
  },
  {
    "line": 194,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType dereference if 'gateway' is None",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 979,
    "end_token": 979,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      390,
      35790,
      611,
      705,
      10494,
      1014,
      6,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType dereference if 'gateway' is None"
  },
  {
    "line": 196,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern on 'gateway' object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 979,
    "end_token": 987,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      319,
      705,
      10494,
      1014,
      6,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method call pattern on 'gateway' object"
  },
  {
    "line": 199,
    "text": "        return list(self.gateways.keys())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      10494,
      1322,
      13,
      13083,
      28955
    ],
    "start_token": 987,
    "end_token": 1004,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for function parameters and return type"
  },
  {
    "line": 201,
    "text": "    def get_all_apps(self) -> list[BaseApp]:",
    "annotation": "\u2705 Best Practice: Check if the gateway is not None before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      18211,
      7,
      944,
      8,
      4613,
      1351,
      58,
      14881,
      4677,
      5974
    ],
    "start_token": 1004,
    "end_token": 1022,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      24308,
      318,
      407,
      6045,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if the gateway is not None before proceeding"
  },
  {
    "line": 203,
    "text": "        Get all app objects.",
    "annotation": "\ud83e\udde0 ML Signal: Method delegation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      598,
      5563,
      13
    ],
    "start_token": 1022,
    "end_token": 1034,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22635,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method delegation pattern"
  },
  {
    "line": 205,
    "text": "        return list(self.apps.values())",
    "annotation": "\u2705 Best Practice: Return a consistent type (str) even when the gateway is not found",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      18211,
      13,
      27160,
      28955
    ],
    "start_token": 1034,
    "end_token": 1050,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      257,
      6414,
      2099,
      357,
      2536,
      8,
      772,
      618,
      262,
      24308,
      318,
      407,
      1043
    ],
    "label": "best_practice",
    "reason": "Return a consistent type (str) even when the gateway is not found"
  },
  {
    "line": 208,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variable 'gateway' can be used to train models on type inference.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1050,
    "end_token": 1058,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      7885,
      705,
      10494,
      1014,
      6,
      460,
      307,
      973,
      284,
      4512,
      4981,
      319,
      2099,
      32278,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variable 'gateway' can be used to train models on type inference."
  },
  {
    "line": 210,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType dereference if 'gateway' is None and not handled properly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1058,
    "end_token": 1066,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      390,
      35790,
      611,
      705,
      10494,
      1014,
      6,
      318,
      6045,
      290,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType dereference if 'gateway' is None and not handled properly."
  },
  {
    "line": 212,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern 'gateway.cancel_order(req)' can be used to train models on API usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1066,
    "end_token": 1066,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      705,
      10494,
      1014,
      13,
      66,
      21130,
      62,
      2875,
      7,
      42180,
      33047,
      460,
      307,
      973,
      284,
      4512,
      4981,
      319,
      7824,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call pattern 'gateway.cancel_order(req)' can be used to train models on API usage."
  },
  {
    "line": 215,
    "text": "        Start connection of a specific gateway.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7253,
      4637,
      286,
      257,
      2176,
      24308,
      13
    ],
    "start_token": 1066,
    "end_token": 1080,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variables"
  },
  {
    "line": 217,
    "text": "        gateway: BaseGateway | None = self.get_gateway(gateway_name)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on object existence",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      25,
      7308,
      22628,
      1014,
      930,
      6045,
      796,
      2116,
      13,
      1136,
      62,
      10494,
      1014,
      7,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 1080,
    "end_token": 1107,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2134,
      6224
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on object existence"
  },
  {
    "line": 221,
    "text": "    def subscribe(self, req: SubscribeRequest, gateway_name: str) -> None:",
    "annotation": "\u2705 Best Practice: Explicitly handling the case where the gateway is None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      12383,
      7,
      944,
      11,
      43089,
      25,
      19808,
      18453,
      11,
      24308,
      62,
      3672,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1107,
    "end_token": 1129,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      9041,
      262,
      1339,
      810,
      262,
      24308,
      318,
      6045
    ],
    "label": "best_practice",
    "reason": "Explicitly handling the case where the gateway is None"
  },
  {
    "line": 224,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for 'gateway' improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1129,
    "end_token": 1137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      10494,
      1014,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'gateway' improves code readability and maintainability."
  },
  {
    "line": 226,
    "text": "        if gateway:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if 'gateway' is not None before proceeding is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      24308,
      25
    ],
    "start_token": 1137,
    "end_token": 1147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      705,
      10494,
      1014,
      6,
      318,
      407,
      6045,
      878,
      18788,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking if 'gateway' is not None before proceeding is a common pattern."
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object, useful for understanding object interactions.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1147,
    "end_token": 1147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134,
      11,
      4465,
      329,
      4547,
      2134,
      12213,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call on an object, useful for understanding object interactions."
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1147,
    "end_token": 1147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose."
  },
  {
    "line": 232,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for 'gateway' improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1147,
    "end_token": 1155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      10494,
      1014,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'gateway' improves code readability and maintainability."
  },
  {
    "line": 235,
    "text": "            return gateway.send_order(req)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of a gateway.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      24308,
      13,
      21280,
      62,
      2875,
      7,
      42180,
      8
    ],
    "start_token": 1155,
    "end_token": 1175,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      257,
      24308,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of a gateway."
  },
  {
    "line": 237,
    "text": "            return \"\"",
    "annotation": "\ud83e\udde0 ML Signal: Return an empty list when no gateway is found, indicating a fallback behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      13538
    ],
    "start_token": 1175,
    "end_token": 1188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      281,
      6565,
      1351,
      618,
      645,
      24308,
      318,
      1043,
      11,
      12739,
      257,
      2121,
      1891,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Return an empty list when no gateway is found, indicating a fallback behavior."
  },
  {
    "line": 241,
    "text": "        Send cancel order request to a specific gateway.",
    "annotation": "\u2705 Best Practice: Ensure the event engine is stopped before closing engines and gateways",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16290,
      14241,
      1502,
      2581,
      284,
      257,
      2176,
      24308,
      13
    ],
    "start_token": 1188,
    "end_token": 1204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      1785,
      3113,
      318,
      5025,
      878,
      9605,
      11874,
      290,
      8946,
      1322
    ],
    "label": "best_practice",
    "reason": "Ensure the event engine is stopped before closing engines and gateways"
  },
  {
    "line": 243,
    "text": "        gateway: BaseGateway | None = self.get_gateway(gateway_name)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over engines to close them indicates a pattern of resource management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      25,
      7308,
      22628,
      1014,
      930,
      6045,
      796,
      2116,
      13,
      1136,
      62,
      10494,
      1014,
      7,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 1204,
    "end_token": 1231,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      11874,
      284,
      1969,
      606,
      9217,
      257,
      3912,
      286,
      8271,
      4542
    ],
    "label": "ml_signal",
    "reason": "Iterating over engines to close them indicates a pattern of resource management"
  },
  {
    "line": 245,
    "text": "            gateway.cancel_order(req)",
    "annotation": "\u2705 Best Practice: Closing each engine to release resources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      13,
      66,
      21130,
      62,
      2875,
      7,
      42180,
      8
    ],
    "start_token": 1231,
    "end_token": 1251,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47055,
      1123,
      3113,
      284,
      2650,
      4133
    ],
    "label": "best_practice",
    "reason": "Closing each engine to release resources"
  },
  {
    "line": 247,
    "text": "    def send_quote(self, req: QuoteRequest, gateway_name: str) -> str:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over gateways to close them indicates a pattern of resource management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3758,
      62,
      22708,
      7,
      944,
      11,
      43089,
      25,
      19879,
      18453,
      11,
      24308,
      62,
      3672,
      25,
      965,
      8,
      4613,
      965,
      25
    ],
    "start_token": 1251,
    "end_token": 1275,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      8946,
      1322,
      284,
      1969,
      606,
      9217,
      257,
      3912,
      286,
      8271,
      4542
    ],
    "label": "ml_signal",
    "reason": "Iterating over gateways to close them indicates a pattern of resource management"
  },
  {
    "line": 250,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Closing each gateway to release resources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1275,
    "end_token": 1283,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47055,
      1123,
      24308,
      284,
      2650,
      4133
    ],
    "label": "best_practice",
    "reason": "Closing each gateway to release resources"
  },
  {
    "line": 250,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hints for the dictionary improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1283,
    "end_token": 1291,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      262,
      22155,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for the dictionary improves code readability and maintainability."
  },
  {
    "line": 259,
    "text": "        Send cancel quote request to a specific gateway.",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16290,
      14241,
      9577,
      2581,
      284,
      257,
      2176,
      24308,
      13
    ],
    "start_token": 1291,
    "end_token": 1307,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      37588,
      286,
      19552,
      12608
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper initialization of inherited attributes"
  },
  {
    "line": 261,
    "text": "        gateway: BaseGateway | None = self.get_gateway(gateway_name)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of configuration settings to control behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      25,
      7308,
      22628,
      1014,
      930,
      6045,
      796,
      2116,
      13,
      1136,
      62,
      10494,
      1014,
      7,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 1307,
    "end_token": 1334,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8398,
      6460,
      284,
      1630,
      4069
    ],
    "label": "ml_signal",
    "reason": "Usage of configuration settings to control behavior"
  },
  {
    "line": 263,
    "text": "            gateway.cancel_quote(req)",
    "annotation": "\ud83e\udde0 ML Signal: Registration of event handlers or listeners",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      13,
      66,
      21130,
      62,
      22708,
      7,
      42180,
      8
    ],
    "start_token": 1334,
    "end_token": 1354,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24610,
      286,
      1785,
      32847,
      393,
      22054
    ],
    "label": "ml_signal",
    "reason": "Registration of event handlers or listeners"
  },
  {
    "line": 264,
    "text": "",
    "annotation": "\u2705 Best Practice: Early return pattern improves readability by reducing nested code",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1354,
    "end_token": 1354,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12556,
      1441,
      3912,
      19575,
      1100,
      1799,
      416,
      8868,
      28376,
      2438
    ],
    "label": "best_practice",
    "reason": "Early return pattern improves readability by reducing nested code"
  },
  {
    "line": 267,
    "text": "        Query bar history data from a specific gateway.",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for variable 'log' indicates expected data structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      43301,
      2318,
      2106,
      1366,
      422,
      257,
      2176,
      24308,
      13
    ],
    "start_token": 1354,
    "end_token": 1370,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      7885,
      705,
      6404,
      6,
      9217,
      2938,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Type hinting for variable 'log' indicates expected data structure"
  },
  {
    "line": 269,
    "text": "        gateway: BaseGateway | None = self.get_gateway(gateway_name)",
    "annotation": "\ud83e\udde0 ML Signal: Use of type hinting for 'level' with union type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24308,
      25,
      7308,
      22628,
      1014,
      930,
      6045,
      796,
      2116,
      13,
      1136,
      62,
      10494,
      1014,
      7,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 1370,
    "end_token": 1397,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      705,
      5715,
      6,
      351,
      6441,
      2099
    ],
    "label": "ml_signal",
    "reason": "Use of type hinting for 'level' with union type"
  },
  {
    "line": 270,
    "text": "        if gateway:",
    "annotation": "\u2705 Best Practice: Use of 'get' method with default value prevents KeyError",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      24308,
      25
    ],
    "start_token": 1397,
    "end_token": 1407,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      1136,
      6,
      2446,
      351,
      4277,
      1988,
      15174,
      7383,
      12331
    ],
    "label": "best_practice",
    "reason": "Use of 'get' method with default value prevents KeyError"
  },
  {
    "line": 272,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging of sensitive information if 'log.msg' contains sensitive data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1407,
    "end_token": 1416,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      286,
      8564,
      1321,
      611,
      705,
      6404,
      13,
      19662,
      6,
      4909,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging of sensitive information if 'log.msg' contains sensitive data"
  },
  {
    "line": 271,
    "text": "            return gateway.query_history(req)",
    "annotation": "\ud83e\udde0 ML Signal: Method for registering event handlers, useful for learning event-driven patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      24308,
      13,
      22766,
      62,
      23569,
      7,
      42180,
      8
    ],
    "start_token": 1416,
    "end_token": 1436,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      28336,
      1785,
      32847,
      11,
      4465,
      329,
      4673,
      1785,
      12,
      15808,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method for registering event handlers, useful for learning event-driven patterns"
  },
  {
    "line": 272,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1436,
    "end_token": 1445,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose"
  },
  {
    "line": 273,
    "text": "            return []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of event-driven architecture, useful for learning system design patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      17635
    ],
    "start_token": 1445,
    "end_token": 1458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1785,
      12,
      15808,
      10959,
      11,
      4465,
      329,
      4673,
      1080,
      1486,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of event-driven architecture, useful for learning system design patterns"
  },
  {
    "line": 276,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if event_type is not validated, could lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1458,
    "end_token": 1466,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      1785,
      62,
      4906,
      318,
      407,
      31031,
      11,
      714,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if event_type is not validated, could lead to unexpected behavior"
  },
  {
    "line": 273,
    "text": "            return []",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      17635
    ],
    "start_token": 1466,
    "end_token": 1479,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose."
  },
  {
    "line": 278,
    "text": "        programme exit.",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11383,
      8420,
      13
    ],
    "start_token": 1479,
    "end_token": 1489,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper initialization of inherited attributes."
  },
  {
    "line": 280,
    "text": "        # Stop event engine first to prevent new timer event.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store TickData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      13707,
      1785,
      3113,
      717,
      284,
      2948,
      649,
      19781,
      1785,
      13
    ],
    "start_token": 1489,
    "end_token": 1507,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      46093,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store TickData objects, indicating a pattern of data management."
  },
  {
    "line": 282,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store OrderData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1507,
    "end_token": 1507,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      8284,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store OrderData objects, indicating a pattern of data management."
  },
  {
    "line": 284,
    "text": "            engine.close()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store TradeData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3113,
      13,
      19836,
      3419
    ],
    "start_token": 1507,
    "end_token": 1522,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      9601,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store TradeData objects, indicating a pattern of data management."
  },
  {
    "line": 286,
    "text": "        for gateway in self.gateways.values():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store PositionData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      24308,
      287,
      2116,
      13,
      10494,
      1322,
      13,
      27160,
      33529
    ],
    "start_token": 1522,
    "end_token": 1539,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      23158,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store PositionData objects, indicating a pattern of data management."
  },
  {
    "line": 288,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store AccountData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1539,
    "end_token": 1539,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      10781,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store AccountData objects, indicating a pattern of data management."
  },
  {
    "line": 290,
    "text": "class LogEngine(BaseEngine):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store ContractData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      4871,
      5972,
      13798,
      7,
      14881,
      13798,
      2599
    ],
    "start_token": 1539,
    "end_token": 1546,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      17453,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store ContractData objects, indicating a pattern of data management."
  },
  {
    "line": 292,
    "text": "    Provides log event output function.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store QuoteData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47081,
      2604,
      1785,
      5072,
      2163,
      13
    ],
    "start_token": 1546,
    "end_token": 1555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      19879,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store QuoteData objects, indicating a pattern of data management."
  },
  {
    "line": 294,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store active OrderData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1555,
    "end_token": 1555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      4075,
      8284,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store active OrderData objects, indicating a pattern of data management."
  },
  {
    "line": 296,
    "text": "        DEBUG: \"DEBUG\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store active QuoteData objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16959,
      25,
      366,
      30531,
      1600
    ],
    "start_token": 1555,
    "end_token": 1567,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      4075,
      19879,
      6601,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store active QuoteData objects, indicating a pattern of data management."
  },
  {
    "line": 298,
    "text": "        WARNING: \"WARNING\",",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store OffsetConverter objects, indicating a pattern of data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      39410,
      25,
      366,
      31502,
      1600
    ],
    "start_token": 1567,
    "end_token": 1579,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      3242,
      2617,
      3103,
      332,
      353,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store OffsetConverter objects, indicating a pattern of data management."
  },
  {
    "line": 300,
    "text": "        CRITICAL: \"CRITICAL\",",
    "annotation": "\u2705 Best Practice: Method call to register events, indicating a pattern of event-driven architecture.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8740,
      2043,
      20151,
      25,
      366,
      9419,
      2043,
      20151,
      1600
    ],
    "start_token": 1579,
    "end_token": 1595,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      869,
      284,
      7881,
      2995,
      11,
      12739,
      257,
      3912,
      286,
      1785,
      12,
      15808,
      10959,
      13
    ],
    "label": "best_practice",
    "reason": "Method call to register events, indicating a pattern of event-driven architecture."
  },
  {
    "line": 292,
    "text": "    Provides log event output function.",
    "annotation": "\ud83e\udde0 ML Signal: Method registering multiple event handlers, indicating a pattern of event-driven architecture.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47081,
      2604,
      1785,
      5072,
      2163,
      13
    ],
    "start_token": 1595,
    "end_token": 1604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      28336,
      3294,
      1785,
      32847,
      11,
      12739,
      257,
      3912,
      286,
      1785,
      12,
      15808,
      10959,
      13
    ],
    "label": "ml_signal",
    "reason": "Method registering multiple event handlers, indicating a pattern of event-driven architecture."
  },
  {
    "line": 294,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1604,
    "end_token": 1604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      2176,
      1785,
      32847,
      11,
      4465,
      329,
      4547,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering specific event handlers, useful for understanding event handling patterns."
  },
  {
    "line": 296,
    "text": "        DEBUG: \"DEBUG\",",
    "annotation": "\ud83e\udde0 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16959,
      25,
      366,
      30531,
      1600
    ],
    "start_token": 1604,
    "end_token": 1616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      2176,
      1785,
      32847,
      11,
      4465,
      329,
      4547,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering specific event handlers, useful for understanding event handling patterns."
  },
  {
    "line": 298,
    "text": "        WARNING: \"WARNING\",",
    "annotation": "\ud83e\udde0 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      39410,
      25,
      366,
      31502,
      1600
    ],
    "start_token": 1616,
    "end_token": 1628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      2176,
      1785,
      32847,
      11,
      4465,
      329,
      4547,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering specific event handlers, useful for understanding event handling patterns."
  },
  {
    "line": 300,
    "text": "        CRITICAL: \"CRITICAL\",",
    "annotation": "\ud83e\udde0 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8740,
      2043,
      20151,
      25,
      366,
      9419,
      2043,
      20151,
      1600
    ],
    "start_token": 1628,
    "end_token": 1644,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      2176,
      1785,
      32847,
      11,
      4465,
      329,
      4547,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering specific event handlers, useful for understanding event handling patterns."
  },
  {
    "line": 302,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1644,
    "end_token": 1644,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      2176,
      1785,
      32847,
      11,
      4465,
      329,
      4547,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering specific event handlers, useful for understanding event handling patterns."
  },
  {
    "line": 304,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Registering specific event handlers, useful for understanding event handling patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 1644,
    "end_token": 1654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17296,
      278,
      2176,
      1785,
      32847,
      11,
      4465,
      329,
      4547,
      1785,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Registering specific event handlers, useful for understanding event handling patterns."
  },
  {
    "line": 299,
    "text": "        ERROR: \"ERROR\",",
    "annotation": "\u2705 Best Practice: Method docstring is empty; consider adding a description of the method's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33854,
      25,
      366,
      24908,
      1600
    ],
    "start_token": 1654,
    "end_token": 1666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      2205,
      8841,
      318,
      6565,
      26,
      2074,
      4375,
      257,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Method docstring is empty; consider adding a description of the method's purpose."
  },
  {
    "line": 301,
    "text": "    }",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting is used, which is a good practice for ML models to learn about data types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 1666,
    "end_token": 1670,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      318,
      973,
      11,
      543,
      318,
      257,
      922,
      3357,
      329,
      10373,
      4981,
      284,
      2193,
      546,
      1366,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting is used, which is a good practice for ML models to learn about data types."
  },
  {
    "line": 303,
    "text": "    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for variable 'tick' helps in understanding the expected data type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1388,
      62,
      18392,
      25,
      8774,
      13798,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1670,
    "end_token": 1697,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      7885,
      705,
      42298,
      6,
      5419,
      287,
      4547,
      262,
      2938,
      1366,
      2099,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting for variable 'tick' helps in understanding the expected data type."
  },
  {
    "line": 305,
    "text": "        super().__init__(main_engine, event_engine, \"log\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct assignment from event data without validation could lead to unexpected behavior if event data is malformed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      12417,
      62,
      18392,
      11,
      1785,
      62,
      18392,
      11,
      366,
      6404,
      4943
    ],
    "start_token": 1697,
    "end_token": 1721,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      16237,
      422,
      1785,
      1366,
      1231,
      21201,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      1785,
      1366,
      318,
      6428,
      12214,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct assignment from event data without validation could lead to unexpected behavior if event data is malformed."
  },
  {
    "line": 306,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store tick data, indicating a pattern of data storage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1721,
    "end_token": 1721,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      4378,
      1366,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      6143,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store tick data, indicating a pattern of data storage."
  },
  {
    "line": 305,
    "text": "        super().__init__(main_engine, event_engine, \"log\")",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      12417,
      62,
      18392,
      11,
      1785,
      62,
      18392,
      11,
      366,
      6404,
      4943
    ],
    "start_token": 1721,
    "end_token": 1745,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      318,
      973,
      11,
      12739,
      257,
      3912,
      286,
      7952,
      2099,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting is used, indicating a pattern of explicit type usage."
  },
  {
    "line": 307,
    "text": "        self.active = SETTINGS[\"log.active\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store orders by unique identifier.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      796,
      25823,
      51,
      20754,
      14692,
      6404,
      13,
      5275,
      8973
    ],
    "start_token": 1745,
    "end_token": 1764,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      6266,
      416,
      3748,
      27421,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store orders by unique identifier."
  },
  {
    "line": 309,
    "text": "        self.register_log(EVENT_LOG)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to manage active orders.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30238,
      62,
      6404,
      7,
      20114,
      3525,
      62,
      25294,
      8
    ],
    "start_token": 1764,
    "end_token": 1782,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      6687,
      4075,
      6266,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to manage active orders."
  },
  {
    "line": 311,
    "text": "    def process_log_event(self, event: Event) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Storing active orders separately.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      6404,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1782,
    "end_token": 1801,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4075,
      6266,
      13869,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing active orders separately."
  },
  {
    "line": 314,
    "text": "            return",
    "annotation": "\ud83e\udde0 ML Signal: Removing inactive orders from active orders list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 1801,
    "end_token": 1813,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3982,
      5165,
      28621,
      6266,
      422,
      4075,
      6266,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Removing inactive orders from active orders list."
  },
  {
    "line": 316,
    "text": "        log: LogData = event.data",
    "annotation": "\ud83e\udde0 ML Signal: Use of optional chaining with dictionary get method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2604,
      25,
      5972,
      6601,
      796,
      1785,
      13,
      7890
    ],
    "start_token": 1813,
    "end_token": 1828,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11902,
      442,
      1397,
      351,
      22155,
      651,
      2446,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of optional chaining with dictionary get method."
  },
  {
    "line": 318,
    "text": "        logger.log(level, log.msg, gateway_name=log.gateway_name)",
    "annotation": "\u2705 Best Practice: Checking for None before using the converter.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      6404,
      7,
      5715,
      11,
      2604,
      13,
      19662,
      11,
      24308,
      62,
      3672,
      28,
      6404,
      13,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 1828,
    "end_token": 1856,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      878,
      1262,
      262,
      38394,
      13
    ],
    "label": "best_practice",
    "reason": "Checking for None before using the converter."
  },
  {
    "line": 320,
    "text": "    def register_log(self, event_type: str) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of updating order state through a converter.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7881,
      62,
      6404,
      7,
      944,
      11,
      1785,
      62,
      4906,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1856,
    "end_token": 1875,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      19698,
      1502,
      1181,
      832,
      257,
      38394,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of updating order state through a converter."
  },
  {
    "line": 316,
    "text": "        log: LogData = event.data",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting for 'trade' indicates expected data structure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2604,
      25,
      5972,
      6601,
      796,
      1785,
      13,
      7890
    ],
    "start_token": 1875,
    "end_token": 1890,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      329,
      705,
      25351,
      6,
      9217,
      2938,
      1366,
      4645
    ],
    "label": "ml_signal",
    "reason": "Type hinting for 'trade' indicates expected data structure"
  },
  {
    "line": 318,
    "text": "        logger.log(level, log.msg, gateway_name=log.gateway_name)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary to store trades by unique identifier",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      6404,
      7,
      5715,
      11,
      2604,
      13,
      19662,
      11,
      24308,
      62,
      3672,
      28,
      6404,
      13,
      10494,
      1014,
      62,
      3672,
      8
    ],
    "start_token": 1890,
    "end_token": 1918,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      284,
      3650,
      17674,
      416,
      3748,
      27421
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary to store trades by unique identifier"
  },
  {
    "line": 320,
    "text": "    def register_log(self, event_type: str) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of optional chaining pattern with dictionary get method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7881,
      62,
      6404,
      7,
      944,
      11,
      1785,
      62,
      4906,
      25,
      965,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1918,
    "end_token": 1937,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11902,
      442,
      1397,
      3912,
      351,
      22155,
      651,
      2446
    ],
    "label": "ml_signal",
    "reason": "Use of optional chaining pattern with dictionary get method"
  },
  {
    "line": 323,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to handle optional objects",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1937,
    "end_token": 1937,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5412,
      11902,
      5563
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to handle optional objects"
  },
  {
    "line": 323,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method processes events, indicating an event-driven architecture.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1937,
    "end_token": 1937,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      7767,
      2995,
      11,
      12739,
      281,
      1785,
      12,
      15808,
      10959,
      13
    ],
    "label": "ml_signal",
    "reason": "Method processes events, indicating an event-driven architecture."
  },
  {
    "line": 325,
    "text": "class OmsEngine(BaseEngine):",
    "annotation": "\ud83e\udde0 ML Signal: Storing position data in a dictionary, useful for state management patterns.",
    "confidence": 0.5,
    "tokens": [
      4871,
      440,
      907,
      13798,
      7,
      14881,
      13798,
      2599
    ],
    "start_token": 1937,
    "end_token": 1945,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2292,
      1366,
      287,
      257,
      22155,
      11,
      4465,
      329,
      1181,
      4542,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing position data in a dictionary, useful for state management patterns."
  },
  {
    "line": 327,
    "text": "    Provides order management system function.",
    "annotation": "\ud83e\udde0 ML Signal: Use of optional chaining pattern with dictionary get method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47081,
      1502,
      4542,
      1080,
      2163,
      13
    ],
    "start_token": 1945,
    "end_token": 1954,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11902,
      442,
      1397,
      3912,
      351,
      22155,
      651,
      2446,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of optional chaining pattern with dictionary get method."
  },
  {
    "line": 330,
    "text": "    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to handle optional objects.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1388,
      62,
      18392,
      25,
      8774,
      13798,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1954,
    "end_token": 1981,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5412,
      11902,
      5563,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to handle optional objects."
  },
  {
    "line": 330,
    "text": "    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1388,
      62,
      18392,
      25,
      8774,
      13798,
      11,
      1785,
      62,
      18392,
      25,
      8558,
      13798,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1981,
    "end_token": 2008,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      318,
      973,
      11,
      12739,
      257,
      3912,
      286,
      7952,
      2099,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting is used, indicating a pattern of explicit type usage."
  },
  {
    "line": 331,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 2008,
    "end_token": 2018,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability."
  },
  {
    "line": 333,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing and modifying a dictionary, indicating a pattern of data storage and retrieval.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2018,
    "end_token": 2018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      290,
      30620,
      257,
      22155,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      6143,
      290,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing and modifying a dictionary, indicating a pattern of data storage and retrieval."
  },
  {
    "line": 334,
    "text": "        self.ticks: dict[str, TickData] = {}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly using event data without validation could lead to unexpected behavior if the data is malformed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      83,
      3378,
      25,
      8633,
      58,
      2536,
      11,
      46093,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2018,
    "end_token": 2039,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      1262,
      1785,
      1366,
      1231,
      21201,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      262,
      1366,
      318,
      6428,
      12214,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly using event data without validation could lead to unexpected behavior if the data is malformed."
  },
  {
    "line": 334,
    "text": "        self.ticks: dict[str, TickData] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      83,
      3378,
      25,
      8633,
      58,
      2536,
      11,
      46093,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2039,
    "end_token": 2060,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      318,
      973,
      11,
      12739,
      257,
      3912,
      286,
      7952,
      2099,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting is used, indicating a pattern of explicit type usage."
  },
  {
    "line": 336,
    "text": "        self.trades: dict[str, TradeData] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Storing data in a dictionary with a key suggests a caching or lookup pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2213,
      2367,
      25,
      8633,
      58,
      2536,
      11,
      9601,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2060,
    "end_token": 2081,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      287,
      257,
      22155,
      351,
      257,
      1994,
      5644,
      257,
      40918,
      393,
      35847,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing data in a dictionary with a key suggests a caching or lookup pattern."
  },
  {
    "line": 338,
    "text": "        self.accounts: dict[str, AccountData] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to check for existence in a dictionary.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23317,
      82,
      25,
      8633,
      58,
      2536,
      11,
      10781,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2081,
    "end_token": 2102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      2198,
      329,
      6224,
      287,
      257,
      22155,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to check for existence in a dictionary."
  },
  {
    "line": 340,
    "text": "        self.quotes: dict[str, QuoteData] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Lazy initialization pattern for dictionary values.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      421,
      6421,
      25,
      8633,
      58,
      2536,
      11,
      19879,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2102,
    "end_token": 2123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      406,
      12582,
      37588,
      3912,
      329,
      22155,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Lazy initialization pattern for dictionary values."
  },
  {
    "line": 342,
    "text": "        self.active_orders: dict[str, OrderData] = {}",
    "annotation": "\u2705 Best Practice: Using a dictionary to manage and access contract data efficiently.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      6361,
      25,
      8633,
      58,
      2536,
      11,
      8284,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2123,
    "end_token": 2145,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      22155,
      284,
      6687,
      290,
      1895,
      2775,
      1366,
      18306,
      13
    ],
    "label": "best_practice",
    "reason": "Using a dictionary to manage and access contract data efficiently."
  },
  {
    "line": 340,
    "text": "        self.quotes: dict[str, QuoteData] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting is used, indicating a pattern of explicit type usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      421,
      6421,
      25,
      8633,
      58,
      2536,
      11,
      19879,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2145,
    "end_token": 2166,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      318,
      973,
      11,
      12739,
      257,
      3912,
      286,
      7952,
      2099,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting is used, indicating a pattern of explicit type usage."
  },
  {
    "line": 342,
    "text": "        self.active_orders: dict[str, OrderData] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Storing data in a dictionary, indicating a pattern of key-value data management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      6361,
      25,
      8633,
      58,
      2536,
      11,
      8284,
      6601,
      60,
      796,
      23884
    ],
    "start_token": 2166,
    "end_token": 2188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      287,
      257,
      22155,
      11,
      12739,
      257,
      3912,
      286,
      1994,
      12,
      8367,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing data in a dictionary, indicating a pattern of key-value data management."
  },
  {
    "line": 344,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on object state, indicating a pattern of state management.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2188,
    "end_token": 2188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2134,
      1181,
      11,
      12739,
      257,
      3912,
      286,
      1181,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on object state, indicating a pattern of state management."
  },
  {
    "line": 346,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Managing active items in a separate dictionary, indicating a pattern of active/inactive state tracking.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2188,
    "end_token": 2188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37108,
      4075,
      3709,
      287,
      257,
      4553,
      22155,
      11,
      12739,
      257,
      3912,
      286,
      4075,
      14,
      259,
      5275,
      1181,
      9646,
      13
    ],
    "label": "ml_signal",
    "reason": "Managing active items in a separate dictionary, indicating a pattern of active/inactive state tracking."
  },
  {
    "line": 347,
    "text": "        self.register_event()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if vt_quoteid is not in active_quotes, though handled by the condition.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30238,
      62,
      15596,
      3419
    ],
    "start_token": 2188,
    "end_token": 2201,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      410,
      83,
      62,
      22708,
      312,
      318,
      407,
      287,
      4075,
      62,
      421,
      6421,
      11,
      996,
      12118,
      416,
      262,
      4006,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if vt_quoteid is not in active_quotes, though handled by the condition."
  },
  {
    "line": 350,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Removing inactive items from a dictionary, indicating a pattern of cleanup or state transition.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 2201,
    "end_token": 2211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3982,
      5165,
      28621,
      3709,
      422,
      257,
      22155,
      11,
      12739,
      257,
      3912,
      286,
      27425,
      393,
      1181,
      6801,
      13
    ],
    "label": "ml_signal",
    "reason": "Removing inactive items from a dictionary, indicating a pattern of cleanup or state transition."
  },
  {
    "line": 346,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2211,
    "end_token": 2211,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 351,
    "text": "        self.event_engine.register(EVENT_TICK, self.process_tick_event)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary with a key to retrieve data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      30238,
      7,
      20114,
      3525,
      62,
      51,
      11860,
      11,
      2116,
      13,
      14681,
      62,
      42298,
      62,
      15596,
      8
    ],
    "start_token": 2211,
    "end_token": 2240,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      351,
      257,
      1994,
      284,
      19818,
      1366
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary with a key to retrieve data"
  },
  {
    "line": 351,
    "text": "        self.event_engine.register(EVENT_TICK, self.process_tick_event)",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      30238,
      7,
      20114,
      3525,
      62,
      51,
      11860,
      11,
      2116,
      13,
      14681,
      62,
      42298,
      62,
      15596,
      8
    ],
    "start_token": 2240,
    "end_token": 2269,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 356,
    "text": "        self.event_engine.register(EVENT_CONTRACT, self.process_contract_event)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      30238,
      7,
      20114,
      3525,
      62,
      10943,
      5446,
      10659,
      11,
      2116,
      13,
      14681,
      62,
      28484,
      62,
      15596,
      8
    ],
    "start_token": 2269,
    "end_token": 2299,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 356,
    "text": "        self.event_engine.register(EVENT_CONTRACT, self.process_contract_event)",
    "annotation": "\u2705 Best Practice: Include type hints for method parameters and return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15596,
      62,
      18392,
      13,
      30238,
      7,
      20114,
      3525,
      62,
      10943,
      5446,
      10659,
      11,
      2116,
      13,
      14681,
      62,
      28484,
      62,
      15596,
      8
    ],
    "start_token": 2299,
    "end_token": 2329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method parameters and return type for better readability and maintainability"
  },
  {
    "line": 361,
    "text": "        tick: TickData = event.data",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4378,
      25,
      46093,
      6601,
      796,
      1785,
      13,
      7890
    ],
    "start_token": 2329,
    "end_token": 2344,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 361,
    "text": "        tick: TickData = event.data",
    "annotation": "\u2705 Best Practice: Type hinting for the return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4378,
      25,
      46093,
      6601,
      796,
      1785,
      13,
      7890
    ],
    "start_token": 2344,
    "end_token": 2359,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return type improves code readability and maintainability"
  },
  {
    "line": 366,
    "text": "        order: OrderData = event.data",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      25,
      8284,
      6601,
      796,
      1785,
      13,
      7890
    ],
    "start_token": 2359,
    "end_token": 2374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 366,
    "text": "        order: OrderData = event.data",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      25,
      8284,
      6601,
      796,
      1785,
      13,
      7890
    ],
    "start_token": 2374,
    "end_token": 2389,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 371,
    "text": "            self.active_orders[order.vt_orderid] = order",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      6361,
      58,
      2875,
      13,
      36540,
      62,
      2875,
      312,
      60,
      796,
      1502
    ],
    "start_token": 2389,
    "end_token": 2415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 371,
    "text": "            self.active_orders[order.vt_orderid] = order",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      6361,
      58,
      2875,
      13,
      36540,
      62,
      2875,
      312,
      60,
      796,
      1502
    ],
    "start_token": 2415,
    "end_token": 2441,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 376,
    "text": "        # Update to offset converter",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      284,
      11677,
      38394
    ],
    "start_token": 2441,
    "end_token": 2453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 376,
    "text": "        # Update to offset converter",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      284,
      11677,
      38394
    ],
    "start_token": 2453,
    "end_token": 2465,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 381,
    "text": "    def process_trade_event(self, event: Event) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      25351,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2465,
    "end_token": 2484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 381,
    "text": "    def process_trade_event(self, event: Event) -> None:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      25351,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2484,
    "end_token": 2503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 386,
    "text": "        # Update to offset converter",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion to return a list of values from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      284,
      11677,
      38394
    ],
    "start_token": 2503,
    "end_token": 2515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      284,
      1441,
      257,
      1351,
      286,
      3815,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion to return a list of values from a dictionary"
  },
  {
    "line": 386,
    "text": "        # Update to offset converter",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      284,
      11677,
      38394
    ],
    "start_token": 2515,
    "end_token": 2527,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 391,
    "text": "    def process_position_event(self, event: Event) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion on dictionary values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      9150,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2527,
    "end_token": 2546,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      319,
      22155,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion on dictionary values"
  },
  {
    "line": 391,
    "text": "    def process_position_event(self, event: Event) -> None:",
    "annotation": "\u2705 Best Practice: Type hinting for the return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      9150,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2546,
    "end_token": 2565,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return type improves code readability and maintainability"
  },
  {
    "line": 396,
    "text": "        # Update to offset converter",
    "annotation": "\ud83e\udde0 ML Signal: Usage of instance variable 'self.trades' indicates a pattern of accessing class attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      284,
      11677,
      38394
    ],
    "start_token": 2565,
    "end_token": 2577,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4554,
      7885,
      705,
      944,
      13,
      2213,
      2367,
      6,
      9217,
      257,
      3912,
      286,
      22534,
      1398,
      12608
    ],
    "label": "ml_signal",
    "reason": "Usage of instance variable 'self.trades' indicates a pattern of accessing class attributes"
  },
  {
    "line": 396,
    "text": "        # Update to offset converter",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      10133,
      284,
      11677,
      38394
    ],
    "start_token": 2577,
    "end_token": 2589,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 401,
    "text": "    def process_account_event(self, event: Event) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing and returning data from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      23317,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2589,
    "end_token": 2608,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      290,
      8024,
      1366,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Accessing and returning data from a dictionary"
  },
  {
    "line": 401,
    "text": "    def process_account_event(self, event: Event) -> None:",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      23317,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2608,
    "end_token": 2627,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 406,
    "text": "    def process_contract_event(self, event: Event) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary values to retrieve all items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1429,
      62,
      28484,
      62,
      15596,
      7,
      944,
      11,
      1785,
      25,
      8558,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2627,
    "end_token": 2646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      3815,
      284,
      19818,
      477,
      3709
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary values to retrieve all items"
  },
  {
    "line": 407,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 2646,
    "end_token": 2656,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 411,
    "text": "        # Initialize offset converter for each gateway",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion on dictionary values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      20768,
      1096,
      11677,
      38394,
      329,
      1123,
      24308
    ],
    "start_token": 2656,
    "end_token": 2671,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      319,
      22155,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion on dictionary values"
  },
  {
    "line": 412,
    "text": "        if contract.gateway_name not in self.offset_converters:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2775,
      13,
      10494,
      1014,
      62,
      3672,
      407,
      287,
      2116,
      13,
      28968,
      62,
      1102,
      332,
      1010,
      25
    ],
    "start_token": 2671,
    "end_token": 2695,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose."
  },
  {
    "line": 416,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion to collect dictionary values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 2695,
    "end_token": 2705,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      284,
      2824,
      22155,
      3815,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion to collect dictionary values."
  },
  {
    "line": 416,
    "text": "        \"\"\"\"\"\"",
    "annotation": "\u2705 Best Practice: Include type hint for return value for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13538,
      15931,
      15931
    ],
    "start_token": 2705,
    "end_token": 2715,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      9254,
      329,
      1441,
      1988,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hint for return value for better readability and maintainability"
  },
  {
    "line": 421,
    "text": "        if quote.is_active():",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary's values to retrieve a list of items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      9577,
      13,
      271,
      62,
      5275,
      33529
    ],
    "start_token": 2715,
    "end_token": 2729,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      338,
      3815,
      284,
      19818,
      257,
      1351,
      286,
      3709
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary's values to retrieve a list of items"
  },
  {
    "line": 421,
    "text": "        if quote.is_active():",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      9577,
      13,
      271,
      62,
      5275,
      33529
    ],
    "start_token": 2729,
    "end_token": 2743,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 422,
    "text": "            self.active_quotes[quote.vt_quoteid] = quote",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      421,
      6421,
      58,
      22708,
      13,
      36540,
      62,
      22708,
      312,
      60,
      796,
      9577
    ],
    "start_token": 2743,
    "end_token": 2770,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method"
  },
  {
    "line": 427,
    "text": "    def get_tick(self, vt_symbol: str) -> TickData | None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list conversion to return a list from a dictionary's values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      42298,
      7,
      944,
      11,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      8,
      4613,
      46093,
      6601,
      930,
      6045,
      25
    ],
    "start_token": 2770,
    "end_token": 2794,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      11315,
      284,
      1441,
      257,
      1351,
      422,
      257,
      22155,
      338,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of list conversion to return a list from a dictionary's values"
  },
  {
    "line": 427,
    "text": "    def get_tick(self, vt_symbol: str) -> TickData | None:",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      42298,
      7,
      944,
      11,
      410,
      83,
      62,
      1837,
      23650,
      25,
      965,
      8,
      4613,
      46093,
      6601,
      930,
      6045,
      25
    ],
    "start_token": 2794,
    "end_token": 2818,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose."
  },
  {
    "line": 431,
    "text": "        return self.ticks.get(vt_symbol, None)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type hinting for variables and return types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      83,
      3378,
      13,
      1136,
      7,
      36540,
      62,
      1837,
      23650,
      11,
      6045,
      8
    ],
    "start_token": 2818,
    "end_token": 2840,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      9254,
      278,
      329,
      9633,
      290,
      1441,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of type hinting for variables and return types."
  },
  {
    "line": 433,
    "text": "    def get_order(self, vt_orderid: str) -> OrderData | None:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of checking for None before proceeding with an operation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      2875,
      7,
      944,
      11,
      410,
      83,
      62,
      2875,
      312,
      25,
      965,
      8,
      4613,
      8284,
      6601,
      930,
      6045,
      25
    ],
    "start_token": 2840,
    "end_token": 2864,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      10627,
      329,
      6045,
      878,
      18788,
      351,
      281,
      4905,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of checking for None before proceeding with an operation."
  },
  {
    "line": 443,
    "text": "        return self.trades.get(vt_tradeid, None)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a dictionary to retrieve an object based on a key",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      2213,
      2367,
      13,
      1136,
      7,
      36540,
      62,
      25351,
      312,
      11,
      6045,
      8
    ],
    "start_token": 2864,
    "end_token": 2886,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      22155,
      284,
      19818,
      281,
      2134,
      1912,
      319,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Usage of a dictionary to retrieve an object based on a key"
  },
  {
    "line": 444,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if gateway_name is not in offset_converters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2886,
    "end_token": 2886,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      24308,
      62,
      3672,
      318,
      407,
      287,
      11677,
      62,
      1102,
      332,
      1010
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if gateway_name is not in offset_converters"
  },
  {
    "line": 448,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object retrieved from a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2886,
    "end_token": 2894,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134,
      29517,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Method call on an object retrieved from a dictionary"
  },
  {
    "line": 448,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Include type hints for method return type for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2894,
    "end_token": 2902,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method return type for better readability and maintainability"
  },
  {
    "line": 453,
    "text": "        Get latest account data by vt_accountid.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary get method with default value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      3452,
      1848,
      1366,
      416,
      410,
      83,
      62,
      23317,
      312,
      13
    ],
    "start_token": 2902,
    "end_token": 2920,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary get method with default value"
  },
  {
    "line": 454,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class functionality.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2920,
    "end_token": 2928,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      11244,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class functionality."
  },
  {
    "line": 459,
    "text": "        Get contract data by vt_symbol.",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      2775,
      1366,
      416,
      410,
      83,
      62,
      1837,
      23650,
      13
    ],
    "start_token": 2928,
    "end_token": 2945,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper initialization of inherited attributes."
  },
  {
    "line": 461,
    "text": "        return self.contracts.get(vt_symbol, None)",
    "annotation": "\u2705 Best Practice: Explicit type annotation for thread improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      28484,
      82,
      13,
      1136,
      7,
      36540,
      62,
      1837,
      23650,
      11,
      6045,
      8
    ],
    "start_token": 2945,
    "end_token": 2967,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      4704,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for thread improves code readability and maintainability."
  },
  {
    "line": 463,
    "text": "    def get_quote(self, vt_quoteid: str) -> QuoteData | None:",
    "annotation": "\u2705 Best Practice: Explicit type annotation for queue improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      22708,
      7,
      944,
      11,
      410,
      83,
      62,
      22708,
      312,
      25,
      965,
      8,
      4613,
      19879,
      6601,
      930,
      6045,
      25
    ],
    "start_token": 2967,
    "end_token": 2991,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      16834,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for queue improves code readability and maintainability."
  },
  {
    "line": 465,
    "text": "        Get latest quote data by vt_orderid.",
    "annotation": "\u2705 Best Practice: Explicit type annotation for active improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      3452,
      9577,
      1366,
      416,
      410,
      83,
      62,
      2875,
      312,
      13
    ],
    "start_token": 2991,
    "end_token": 3009,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      23025,
      329,
      4075,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit type annotation for active improves code readability and maintainability."
  },
  {
    "line": 465,
    "text": "        Get latest quote data by vt_orderid.",
    "annotation": "\ud83e\udde0 ML Signal: Checks for active state before proceeding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      3452,
      9577,
      1366,
      416,
      410,
      83,
      62,
      2875,
      312,
      13
    ],
    "start_token": 3009,
    "end_token": 3027,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      4075,
      1181,
      878,
      18788
    ],
    "label": "ml_signal",
    "reason": "Checks for active state before proceeding"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Default value assignment for receiver",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3027,
    "end_token": 3027,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      1988,
      16237,
      329,
      9733
    ],
    "label": "ml_signal",
    "reason": "Default value assignment for receiver"
  },
  {
    "line": 471,
    "text": "        Get all tick data.",
    "annotation": "\u2705 Best Practice: Type hinting for variable 'msg'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      4378,
      1366,
      13
    ],
    "start_token": 3027,
    "end_token": 3039,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      7885,
      705,
      19662,
      6
    ],
    "label": "best_practice",
    "reason": "Type hinting for variable 'msg'"
  },
  {
    "line": 473,
    "text": "        return list(self.ticks.values())",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of email sender information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      83,
      3378,
      13,
      27160,
      28955
    ],
    "start_token": 3039,
    "end_token": 3056,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      3053,
      29788,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of email sender information"
  },
  {
    "line": 475,
    "text": "    def get_all_orders(self) -> list[OrderData]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of email receiver information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      6361,
      7,
      944,
      8,
      4613,
      1351,
      58,
      18743,
      6601,
      5974
    ],
    "start_token": 3056,
    "end_token": 3074,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      3053,
      9733,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of email receiver information"
  },
  {
    "line": 479,
    "text": "        return list(self.orders.values())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a queue to handle email messages",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      6361,
      13,
      27160,
      28955
    ],
    "start_token": 3074,
    "end_token": 3090,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      16834,
      284,
      5412,
      3053,
      6218
    ],
    "label": "ml_signal",
    "reason": "Usage of a queue to handle email messages"
  },
  {
    "line": 477,
    "text": "        Get all order data.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of configuration settings for email server",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      1502,
      1366,
      13
    ],
    "start_token": 3090,
    "end_token": 3102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8398,
      6460,
      329,
      3053,
      4382
    ],
    "label": "ml_signal",
    "reason": "Usage of configuration settings for email server"
  },
  {
    "line": 479,
    "text": "        return list(self.orders.values())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of configuration settings for email port",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      6361,
      13,
      27160,
      28955
    ],
    "start_token": 3102,
    "end_token": 3118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8398,
      6460,
      329,
      3053,
      2493
    ],
    "label": "ml_signal",
    "reason": "Usage of configuration settings for email port"
  },
  {
    "line": 481,
    "text": "    def get_all_trades(self) -> list[TradeData]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of configuration settings for email username",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      2213,
      2367,
      7,
      944,
      8,
      4613,
      1351,
      58,
      35965,
      6601,
      5974
    ],
    "start_token": 3118,
    "end_token": 3137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8398,
      6460,
      329,
      3053,
      20579
    ],
    "label": "ml_signal",
    "reason": "Usage of configuration settings for email username"
  },
  {
    "line": 483,
    "text": "        Get all trade data.",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Storing and using plaintext passwords",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      3292,
      1366,
      13
    ],
    "start_token": 3137,
    "end_token": 3149,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      520,
      3255,
      290,
      1262,
      8631,
      5239,
      21442
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Storing and using plaintext passwords"
  },
  {
    "line": 487,
    "text": "    def get_all_positions(self) -> list[PositionData]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a queue to retrieve email messages",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      1930,
      1756,
      7,
      944,
      8,
      4613,
      1351,
      58,
      26545,
      6601,
      5974
    ],
    "start_token": 3149,
    "end_token": 3168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      16834,
      284,
      19818,
      3053,
      6218
    ],
    "label": "ml_signal",
    "reason": "Usage of a queue to retrieve email messages"
  },
  {
    "line": 490,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potentially insecure email server connection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3168,
    "end_token": 3176,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6902,
      3746,
      31955,
      3053,
      4382,
      4637
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potentially insecure email server connection"
  },
  {
    "line": 491,
    "text": "        return list(self.positions.values())",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using plaintext credentials for login",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      1930,
      1756,
      13,
      27160,
      28955
    ],
    "start_token": 3176,
    "end_token": 3193,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      8631,
      5239,
      18031,
      329,
      17594
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using plaintext credentials for login"
  },
  {
    "line": 494,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Sending an email message",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3193,
    "end_token": 3201,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32038,
      281,
      3053,
      3275
    ],
    "label": "ml_signal",
    "reason": "Sending an email message"
  },
  {
    "line": 496,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly closing the SMTP connection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3201,
    "end_token": 3209,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      9605,
      262,
      9447,
      7250,
      4637
    ],
    "label": "best_practice",
    "reason": "Explicitly closing the SMTP connection"
  },
  {
    "line": 499,
    "text": "    def get_all_contracts(self) -> list[ContractData]:",
    "annotation": "\ud83e\udde0 ML Signal: Logging of exceptions with traceback",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      28484,
      82,
      7,
      944,
      8,
      4613,
      1351,
      58,
      45845,
      6601,
      5974
    ],
    "start_token": 3209,
    "end_token": 3228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      286,
      13269,
      351,
      12854,
      1891
    ],
    "label": "ml_signal",
    "reason": "Logging of exceptions with traceback"
  },
  {
    "line": 501,
    "text": "        Get all contract data.",
    "annotation": "\ud83e\udde0 ML Signal: Logging mechanism for email failures",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      477,
      2775,
      1366,
      13
    ],
    "start_token": 3228,
    "end_token": 3240,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      9030,
      329,
      3053,
      15536
    ],
    "label": "ml_signal",
    "reason": "Logging mechanism for email failures"
  },
  {
    "line": 496,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method that changes the state of an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3240,
    "end_token": 3248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      2458,
      262,
      1181,
      286,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method that changes the state of an object"
  },
  {
    "line": 498,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Starting a thread, indicating concurrent execution",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3248,
    "end_token": 3248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17962,
      257,
      4704,
      11,
      12739,
      24580,
      9706
    ],
    "label": "ml_signal",
    "reason": "Starting a thread, indicating concurrent execution"
  },
  {
    "line": 499,
    "text": "    def get_all_contracts(self) -> list[ContractData]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential race condition if not managed properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      439,
      62,
      28484,
      82,
      7,
      944,
      8,
      4613,
      1351,
      58,
      45845,
      6601,
      5974
    ],
    "start_token": 3248,
    "end_token": 3267,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3234,
      4006,
      611,
      407,
      5257,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential race condition if not managed properly"
  },
  {
    "line": 500,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method to close or clean up resources, common in resource management patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 3267,
    "end_token": 3275,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      284,
      1969,
      393,
      3424,
      510,
      4133,
      11,
      2219,
      287,
      8271,
      4542,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method to close or clean up resources, common in resource management patterns"
  },
  {
    "line": 503,
    "text": "        return list(self.contracts.values())",
    "annotation": "\u2705 Best Practice: Explicitly setting the active flag to False to indicate closure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      28484,
      82,
      13,
      27160,
      28955
    ],
    "start_token": 3275,
    "end_token": 3292,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      262,
      4075,
      6056,
      284,
      10352,
      284,
      7603,
      16512
    ],
    "label": "best_practice",
    "reason": "Explicitly setting the active flag to False to indicate closure"
  },
  {
    "line": 503,
    "text": "        return list(self.contracts.values())",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for blocking if the thread does not terminate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      28484,
      82,
      13,
      27160,
      28955
    ],
    "start_token": 3292,
    "end_token": 3309,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      12013,
      611,
      262,
      4704,
      857,
      407,
      23654
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for blocking if the thread does not terminate"
  },
  {
    "line": 503,
    "text": "        return list(self.contracts.values())",
    "annotation": "\ud83e\udde0 ML Signal: Use of threading, indicating concurrent execution patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1351,
      7,
      944,
      13,
      28484,
      82,
      13,
      27160,
      28955
    ],
    "start_token": 3309,
    "end_token": 3326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4704,
      278,
      11,
      12739,
      24580,
      9706,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of threading, indicating concurrent execution patterns"
  }
]
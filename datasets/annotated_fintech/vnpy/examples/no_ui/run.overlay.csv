annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific modules from a package,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301]",0.5,0,ml_signal,5,Importing specific modules from a package,,0,,[]
üß† ML Signal: Accessing settings from a configuration module,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6460, 422, 257, 8398, 8265]",0.5,13,ml_signal,7,Accessing settings from a configuration module,,0,from vnpy.trader.setting import SETTINGS,"[6738, 410, 77, 9078, 13, 2213, 5067, 13, 33990, 1330, 25823, 51, 20754]"
üß† ML Signal: Modifying configuration settings,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 8398, 6460]",0.5,13,ml_signal,15,Modifying configuration settings,,13,,[]
‚ö†Ô∏è SAST Risk (Low): Storing sensitive information in plain text,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 520, 3255, 8564, 1321, 287, 8631, 2420]",0.5,13,sast_risk,15,Storing sensitive information in plain text,Low,13,,[]
üß† ML Signal: Defining constants for time intervals,"[8582, 100, 254, 10373, 26484, 25, 2896, 3191, 38491, 329, 640, 20016]",0.5,13,ml_signal,32,Defining constants for time intervals,,13,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,29,best_practice,29,Consider adding a docstring to describe the function's purpose and parameters,,13,"    ""‰∫ßÂìÅ‰ø°ÊÅØ"": """"","[220, 220, 220, 366, 12859, 100, 161, 241, 223, 46479, 94, 162, 223, 107, 1298, 13538]"
"‚ö†Ô∏è SAST Risk (Low): Ensure DAY_START, DAY_END, NIGHT_START, and NIGHT_END are properly validated and defined","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 24644, 62, 2257, 7227, 11, 24644, 62, 10619, 11, 37707, 62, 2257, 7227, 11, 290, 37707, 62, 10619, 389, 6105, 31031, 290, 5447]",0.5,30,sast_risk,30,"Ensure DAY_START, DAY_END, NIGHT_START, and NIGHT_END are properly validated and defined",Low,29,},[92]
"‚úÖ Best Practice: Use consistent comparison operators (e.g., <= and >=) for clarity","[26486, 227, 6705, 19939, 25, 5765, 6414, 7208, 12879, 357, 68, 13, 70, 1539, 19841, 290, 18189, 8, 329, 16287]",0.5,41,best_practice,33,"Use consistent comparison operators (e.g., <= and >=) for clarity",,30,# Chinese futures market trading period (day/night),"[2, 3999, 25650, 1910, 7313, 2278, 357, 820, 14, 3847, 8]"
üß† ML Signal: Modifying global settings,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 3298, 6460]",1.0,41,ml_signal,44,Modifying global settings,,41,,[]
üß† ML Signal: Event-driven architecture,"[8582, 100, 254, 10373, 26484, 25, 8558, 12, 15808, 10959]",1.0,46,ml_signal,46,Event-driven architecture,,41,    if (,"[220, 220, 220, 611, 357]"
üß† ML Signal: Dependency injection pattern,"[8582, 100, 254, 10373, 26484, 25, 37947, 1387, 16954, 3912]",1.0,64,ml_signal,48,Dependency injection pattern,,46,        or (current_time >= NIGHT_START),"[220, 220, 220, 220, 220, 220, 220, 393, 357, 14421, 62, 2435, 18189, 37707, 62, 2257, 7227, 8]"
üß† ML Signal: Plugin or extension pattern,"[8582, 100, 254, 10373, 26484, 25, 42636, 393, 7552, 3912]",0.5,68,ml_signal,50,Plugin or extension pattern,,64,    ):,"[220, 220, 220, 15179]"
üß† ML Signal: Plugin or extension pattern,"[8582, 100, 254, 10373, 26484, 25, 42636, 393, 7552, 3912]",0.5,68,ml_signal,52,Plugin or extension pattern,,68,,[]
üß† ML Signal: Logging usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748]",1.0,68,ml_signal,54,Logging usage,,68,,[]
üß† ML Signal: Dependency retrieval pattern,"[8582, 100, 254, 10373, 26484, 25, 37947, 1387, 45069, 3912]",1.0,76,ml_signal,56,Dependency retrieval pattern,,68,def run_child() -> None:,"[4299, 1057, 62, 9410, 3419, 4613, 6045, 25]"
üß† ML Signal: Event registration pattern,"[8582, 100, 254, 10373, 26484, 25, 8558, 9352, 3912]",1.0,85,ml_signal,58,Event registration pattern,,76,    Running in the child process.,"[220, 220, 220, 18162, 287, 262, 1200, 1429, 13]"
üß† ML Signal: Logging usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748]",1.0,98,ml_signal,60,Logging usage,,85,"    SETTINGS[""log.file""] = True","[220, 220, 220, 25823, 51, 20754, 14692, 6404, 13, 7753, 8973, 796, 6407]"
‚ö†Ô∏è SAST Risk (Medium): Potentially insecure connection setup,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 31955, 4637, 9058]",1.0,111,sast_risk,62,Potentially insecure connection setup,Medium,98,    event_engine: EventEngine = EventEngine(),"[220, 220, 220, 1785, 62, 18392, 25, 8558, 13798, 796, 8558, 13798, 3419]"
üß† ML Signal: Logging usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748]",1.0,128,ml_signal,64,Logging usage,,111,    main_engine.add_gateway(CtpGateway),"[220, 220, 220, 1388, 62, 18392, 13, 2860, 62, 10494, 1014, 7, 33707, 79, 22628, 1014, 8]"
‚ö†Ô∏è SAST Risk (Low): Arbitrary sleep can lead to performance issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33619, 11619, 3993, 460, 1085, 284, 2854, 2428]",1.0,156,sast_risk,66,Arbitrary sleep can lead to performance issues,Low,128,"    main_engine.write_log(""‰∏ªÂºïÊìéÂàõÂª∫ÊàêÂäü"")","[220, 220, 220, 1388, 62, 18392, 13, 13564, 62, 6404, 7203, 10310, 119, 28156, 243, 162, 241, 236, 26344, 249, 161, 119, 118, 22755, 238, 27950, 253, 4943]"
üß† ML Signal: Initialization pattern,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 3912]",1.0,186,ml_signal,68,Initialization pattern,,156,"    log_engine: LogEngine = main_engine.get_engine(""log"")       # type: ignore","[220, 220, 220, 2604, 62, 18392, 25, 5972, 13798, 796, 1388, 62, 18392, 13, 1136, 62, 18392, 7203, 6404, 4943, 220, 220, 220, 220, 220, 220, 1303, 2099, 25, 8856]"
üß† ML Signal: Logging usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748]",1.0,214,ml_signal,70,Logging usage,,186,"    main_engine.write_log(""Ê≥®ÂÜåÊó•Âøó‰∫ã‰ª∂ÁõëÂê¨"")","[220, 220, 220, 1388, 62, 18392, 13, 13564, 62, 6404, 7203, 37345, 101, 37863, 234, 33768, 98, 33232, 245, 12859, 233, 20015, 114, 33566, 239, 28938, 105, 4943]"
üß† ML Signal: Initialization pattern,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 3912]",1.0,214,ml_signal,71,Initialization pattern,,214,,[]
‚ö†Ô∏è SAST Risk (Low): Arbitrary sleep can lead to performance issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33619, 11619, 3993, 460, 1085, 284, 2854, 2428]",1.0,214,sast_risk,74,Arbitrary sleep can lead to performance issues,Low,214,,[]
üß† ML Signal: Logging usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748]",1.0,214,ml_signal,76,Logging usage,,214,,[]
üß† ML Signal: Start or activation pattern,"[8582, 100, 254, 10373, 26484, 25, 7253, 393, 14916, 3912]",1.0,243,ml_signal,78,Start or activation pattern,,214,"    main_engine.write_log(""CTAÁ≠ñÁï•ÂàùÂßãÂåñÂÆåÊàê"")","[220, 220, 220, 1388, 62, 18392, 13, 13564, 62, 6404, 7203, 4177, 32, 163, 255, 244, 45911, 98, 26344, 251, 34650, 233, 44293, 244, 22522, 234, 22755, 238, 4943]"
üß† ML Signal: Logging usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748]",1.0,259,ml_signal,80,Logging usage,,243,    cta_engine.init_all_strategies(),"[220, 220, 220, 269, 8326, 62, 18392, 13, 15003, 62, 439, 62, 2536, 2397, 444, 3419]"
‚ö†Ô∏è SAST Risk (Low): Arbitrary sleep can lead to performance issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33619, 11619, 3993, 460, 1085, 284, 2854, 2428]",1.0,259,sast_risk,83,Arbitrary sleep can lead to performance issues,Low,259,,[]
üß† ML Signal: Trading period check,"[8582, 100, 254, 10373, 26484, 25, 25469, 2278, 2198]",1.0,286,ml_signal,85,Trading period check,,259,"    main_engine.write_log(""CTAÁ≠ñÁï•ÂÖ®ÈÉ®ÂêØÂä®"")","[220, 220, 220, 1388, 62, 18392, 13, 13564, 62, 6404, 7203, 4177, 32, 163, 255, 244, 45911, 98, 17739, 101, 32849, 101, 28938, 107, 27950, 101, 4943]"
üß† ML Signal: Process termination pattern,"[8582, 100, 254, 10373, 26484, 25, 10854, 19883, 3912]",1.0,297,ml_signal,88,Process termination pattern,,286,        sleep(10),"[220, 220, 220, 220, 220, 220, 220, 3993, 7, 940, 8]"
üß† ML Signal: Resource cleanup,"[8582, 100, 254, 10373, 26484, 25, 20857, 27425]",0.5,297,ml_signal,89,Resource cleanup,,297,,[]
‚ö†Ô∏è SAST Risk (Low): Use of sys.exit can be unsafe in some contexts,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 25064, 13, 37023, 460, 307, 21596, 287, 617, 26307]",0.5,297,sast_risk,89,Use of sys.exit can be unsafe in some contexts,Low,297,,[]
‚úÖ Best Practice: Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3601, 6299, 329, 18931, 460, 307, 6928, 351, 257, 18931, 9355, 329, 1365, 1630, 625, 2604, 2974, 290, 23862, 13]",0.5,297,best_practice,74,Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,,297,,[]
üß† ML Signal: Monitoring trading periods can indicate patterns in trading activity.,"[8582, 100, 254, 10373, 26484, 25, 37484, 7313, 9574, 460, 7603, 7572, 287, 7313, 3842, 13]",0.5,326,ml_signal,78,Monitoring trading periods can indicate patterns in trading activity.,,297,"    main_engine.write_log(""CTAÁ≠ñÁï•ÂàùÂßãÂåñÂÆåÊàê"")","[220, 220, 220, 1388, 62, 18392, 13, 13564, 62, 6404, 7203, 4177, 32, 163, 255, 244, 45911, 98, 26344, 251, 34650, 233, 44293, 244, 22522, 234, 22755, 238, 4943]"
‚úÖ Best Practice: Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3601, 6299, 329, 18931, 460, 307, 6928, 351, 257, 18931, 9355, 329, 1365, 1630, 625, 2604, 2974, 290, 23862, 13]",0.5,343,best_practice,81,Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,,326,    sleep(60)   # Leave enough time to complete strategy initialization,"[220, 220, 220, 3993, 7, 1899, 8, 220, 220, 1303, 17446, 1576, 640, 284, 1844, 4811, 37588]"
‚ö†Ô∏è SAST Risk (Medium): Starting a new process without proper exception handling can lead to resource leaks or unhandled errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 17962, 257, 649, 1429, 1231, 1774, 6631, 9041, 460, 1085, 284, 8271, 17316, 393, 555, 38788, 8563, 13]",1.0,343,sast_risk,83,Starting a new process without proper exception handling can lead to resource leaks or unhandled errors.,Medium,343,,[]
‚úÖ Best Practice: Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3601, 6299, 329, 18931, 460, 307, 6928, 351, 257, 18931, 9355, 329, 1365, 1630, 625, 2604, 2974, 290, 23862, 13]",0.5,343,best_practice,86,Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,,343,,[]
‚ö†Ô∏è SAST Risk (Low): Checking if a process is alive without handling potential exceptions can lead to unhandled errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 39432, 611, 257, 1429, 318, 6776, 1231, 9041, 2785, 13269, 460, 1085, 284, 555, 38788, 8563, 13]",1.0,343,sast_risk,89,Checking if a process is alive without handling potential exceptions can lead to unhandled errors.,Low,343,,[]
‚úÖ Best Practice: Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3601, 6299, 329, 18931, 460, 307, 6928, 351, 257, 18931, 9355, 329, 1365, 1630, 625, 2604, 2974, 290, 23862, 13]",0.5,343,best_practice,89,Use of print statements for logging can be replaced with a logging framework for better control over log levels and outputs.,,343,,[]
"‚ö†Ô∏è SAST Risk (Low): Using sleep in a loop without a break condition can lead to an infinite loop, which may not be the intended behavior.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3993, 287, 257, 9052, 1231, 257, 2270, 4006, 460, 1085, 284, 281, 15541, 9052, 11, 543, 743, 407, 307, 262, 5292, 4069, 13]",0.5,343,sast_risk,89,"Using sleep in a loop without a break condition can lead to an infinite loop, which may not be the intended behavior.",Low,343,,[]
"üß† ML Signal: Entry point for the script, indicating the main function to be executed.","[8582, 100, 254, 10373, 26484, 25, 21617, 966, 329, 262, 4226, 11, 12739, 262, 1388, 2163, 284, 307, 10945, 13]",0.5,343,ml_signal,89,"Entry point for the script, indicating the main function to be executed.",,343,,[]

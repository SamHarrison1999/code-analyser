[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Using __future__ import for annotations to support forward references in type hints",
    "confidence": 0.5,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      37443,
      834,
      1330,
      329,
      37647,
      284,
      1104,
      2651,
      10288,
      287,
      2099,
      20269
    ],
    "label": "best_practice",
    "reason": "Using __future__ import for annotations to support forward references in type hints"
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Importing defaultdict for convenient dictionary initialization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      4277,
      11600,
      329,
      11282,
      22155,
      37588
    ],
    "label": "best_practice",
    "reason": "Importing defaultdict for convenient dictionary initialization"
  },
  {
    "line": 6,
    "text": "from typing import TYPE_CHECKING, Any, Dict, List, Optional, Tuple, Type, Union, cast",
    "annotation": "\u2705 Best Practice: Importing TYPE_CHECKING to avoid circular imports during type checking",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      41876,
      62,
      50084,
      2751,
      11,
      4377,
      11,
      360,
      713,
      11,
      7343,
      11,
      32233,
      11,
      309,
      29291,
      11,
      5994,
      11,
      4479,
      11,
      3350
    ],
    "start_token": 7,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      41876,
      62,
      50084,
      2751,
      284,
      3368,
      18620,
      17944,
      1141,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Importing TYPE_CHECKING to avoid circular imports during type checking"
  },
  {
    "line": 7,
    "text": "",
    "annotation": "\u2705 Best Practice: Importing standard typing utilities for type annotations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      3210,
      19720,
      20081,
      329,
      2099,
      37647
    ],
    "label": "best_practice",
    "reason": "Importing standard typing utilities for type annotations"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing random without seeding can lead to non-deterministic behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      4738,
      1231,
      384,
      8228,
      460,
      1085,
      284,
      1729,
      12,
      67,
      2357,
      49228,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing random without seeding can lead to non-deterministic behavior"
  },
  {
    "line": 15,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Importing numpy and pandas for numerical and data manipulation operations",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 32,
    "end_token": 37,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      299,
      32152,
      290,
      19798,
      292,
      329,
      29052,
      290,
      1366,
      17512,
      4560
    ],
    "label": "best_practice",
    "reason": "Importing numpy and pandas for numerical and data manipulation operations"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a logger for module-specific logging",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 37,
    "end_token": 37,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      329,
      8265,
      12,
      11423,
      18931
    ],
    "label": "best_practice",
    "reason": "Using a logger for module-specific logging"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Missing import statement for 'pd', which could lead to runtime errors if 'pd' is not defined elsewhere.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 37,
    "end_token": 37,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25639,
      1330,
      2643,
      329,
      705,
      30094,
      3256,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      705,
      30094,
      6,
      318,
      407,
      5447,
      8057,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Missing import statement for 'pd', which could lead to runtime errors if 'pd' is not defined elsewhere."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Type hinting with 'pd.DataFrame' suggests usage of pandas for data manipulation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 37,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      9254,
      278,
      351,
      705,
      30094,
      13,
      6601,
      19778,
      6,
      5644,
      8748,
      286,
      19798,
      292,
      329,
      1366,
      17512,
      13
    ],
    "label": "ml_signal",
    "reason": "Type hinting with 'pd.DataFrame' suggests usage of pandas for data manipulation."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides detailed parameter descriptions, improving code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 37,
    "end_token": 37,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      11507,
      16969,
      11,
      10068,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed parameter descriptions, improving code readability and maintainability."
  },
  {
    "line": 113,
    "text": "        :param min_cost:         min cost, default 5",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of class attributes with default values can indicate typical usage patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      949,
      62,
      15805,
      25,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      949,
      1575,
      11,
      4277,
      642
    ],
    "start_token": 37,
    "end_token": 63,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      1398,
      12608,
      351,
      4277,
      3815,
      460,
      7603,
      7226,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Initialization of class attributes with default values can indicate typical usage patterns."
  },
  {
    "line": 117,
    "text": "                                            The limit indicates that the etf is tradable on a specific day.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using pop with a default value from kwargs can lead to unexpected behavior if the key is not present.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      4179,
      9217,
      326,
      262,
      2123,
      69,
      318,
      2083,
      540,
      319,
      257,
      2176,
      1110,
      13
    ],
    "start_token": 63,
    "end_token": 121,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      1461,
      351,
      257,
      4277,
      1988,
      422,
      479,
      86,
      22046,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      262,
      1994,
      318,
      407,
      1944,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using pop with a default value from kwargs can lead to unexpected behavior if the key is not present."
  },
  {
    "line": 119,
    "text": "                                                $close is for calculating the total value at end of each day.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a ValueError with user-provided input can expose internal logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      720,
      19836,
      318,
      329,
      26019,
      262,
      2472,
      1988,
      379,
      886,
      286,
      1123,
      1110,
      13
    ],
    "start_token": 121,
    "end_token": 182,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      11052,
      12331,
      351,
      2836,
      12,
      41279,
      5128,
      460,
      15651,
      5387,
      9156,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a ValueError with user-provided input can expose internal logic."
  },
  {
    "line": 126,
    "text": "                                                this target on this day).",
    "annotation": "\ud83e\udde0 ML Signal: Use of logging can indicate common debugging or information patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2496,
      319,
      428,
      1110,
      737
    ],
    "start_token": 182,
    "end_token": 235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      18931,
      460,
      7603,
      2219,
      28769,
      393,
      1321,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of logging can indicate common debugging or information patterns."
  },
  {
    "line": 142,
    "text": "            deal_price = C.deal_price",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising NotImplementedError can expose unhandled cases to the user.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1730,
      62,
      20888,
      796,
      327,
      13,
      31769,
      62,
      20888
    ],
    "start_token": 235,
    "end_token": 255,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      460,
      15651,
      555,
      38788,
      2663,
      284,
      262,
      2836,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising NotImplementedError can expose unhandled cases to the user."
  },
  {
    "line": 162,
    "text": "            self.buy_price, self.sell_price = cast(Tuple[str, str], deal_price)",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of objects with specific parameters can indicate common usage patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17846,
      62,
      20888,
      11,
      2116,
      13,
      7255,
      62,
      20888,
      796,
      3350,
      7,
      51,
      29291,
      58,
      2536,
      11,
      965,
      4357,
      1730,
      62,
      20888,
      8
    ],
    "start_token": 255,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      5563,
      351,
      2176,
      10007,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Instantiation of objects with specific parameters can indicate common usage patterns."
  },
  {
    "line": 160,
    "text": "            self.buy_price = self.sell_price = deal_price",
    "annotation": "\u2705 Best Practice: Check for empty list before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17846,
      62,
      20888,
      796,
      2116,
      13,
      7255,
      62,
      20888,
      796,
      1730,
      62,
      20888
    ],
    "start_token": 291,
    "end_token": 317,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6565,
      1351,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check for empty list before processing"
  },
  {
    "line": 162,
    "text": "            self.buy_price, self.sell_price = cast(Tuple[str, str], deal_price)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external library function D.features",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17846,
      62,
      20888,
      11,
      2116,
      13,
      7255,
      62,
      20888,
      796,
      3350,
      7,
      51,
      29291,
      58,
      2536,
      11,
      965,
      4357,
      1730,
      62,
      20888,
      8
    ],
    "start_token": 317,
    "end_token": 353,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      5888,
      2163,
      360,
      13,
      40890
    ],
    "label": "ml_signal",
    "reason": "Usage of external library function D.features"
  },
  {
    "line": 172,
    "text": "        # $factor is for rounding to the trading unit",
    "annotation": "\u2705 Best Practice: Explicitly setting DataFrame columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      720,
      31412,
      318,
      329,
      38185,
      284,
      262,
      7313,
      4326
    ],
    "start_token": 353,
    "end_token": 370,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      6060,
      19778,
      15180
    ],
    "label": "best_practice",
    "reason": "Explicitly setting DataFrame columns"
  },
  {
    "line": 176,
    "text": "        self.buy_vol_limit, self.sell_vol_limit, vol_lt_fields = self._get_vol_limit(volume_threshold)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17846,
      62,
      10396,
      62,
      32374,
      11,
      2116,
      13,
      7255,
      62,
      10396,
      62,
      32374,
      11,
      2322,
      62,
      2528,
      62,
      25747,
      796,
      2116,
      13557,
      1136,
      62,
      10396,
      62,
      32374,
      7,
      29048,
      62,
      400,
      10126,
      8
    ],
    "start_token": 370,
    "end_token": 412,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      1366,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing data handling"
  },
  {
    "line": 179,
    "text": "        if self.limit_type == self.LT_TP_EXP:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      32374,
      62,
      4906,
      6624,
      2116,
      13,
      27734,
      62,
      7250,
      62,
      49864,
      25
    ],
    "start_token": 412,
    "end_token": 434,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      1366,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing data handling"
  },
  {
    "line": 182,
    "text": "                necessary_fields.add(exp)",
    "annotation": "\u2705 Best Practice: Informative logging for missing data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3306,
      62,
      25747,
      13,
      2860,
      7,
      11201,
      8
    ],
    "start_token": 434,
    "end_token": 457,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      4814,
      1366
    ],
    "label": "best_practice",
    "reason": "Informative logging for missing data"
  },
  {
    "line": 185,
    "text": "        self.all_fields = all_fields",
    "annotation": "\u2705 Best Practice: Informative logging for unsupported feature",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      439,
      62,
      25747,
      796,
      477,
      62,
      25747
    ],
    "start_token": 457,
    "end_token": 473,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      24222,
      3895
    ],
    "label": "best_practice",
    "reason": "Informative logging for unsupported feature"
  },
  {
    "line": 189,
    "text": "        self.min_cost = min_cost",
    "annotation": "\ud83e\udde0 ML Signal: Custom method call for updating limits",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1084,
      62,
      15805,
      796,
      949,
      62,
      15805
    ],
    "start_token": 473,
    "end_token": 489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      2446,
      869,
      329,
      19698,
      7095
    ],
    "label": "ml_signal",
    "reason": "Custom method call for updating limits"
  },
  {
    "line": 192,
    "text": "        self.limit_threshold: Union[Tuple[str, str], float, None] = limit_threshold",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for missing critical data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      32374,
      62,
      400,
      10126,
      25,
      4479,
      58,
      51,
      29291,
      58,
      2536,
      11,
      965,
      4357,
      12178,
      11,
      6045,
      60,
      796,
      4179,
      62,
      400,
      10126
    ],
    "start_token": 489,
    "end_token": 521,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      4814,
      4688,
      1366
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for missing critical data"
  },
  {
    "line": 197,
    "text": "        # init quote by quote_df",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2315,
      9577,
      416,
      9577,
      62,
      7568
    ],
    "start_token": 521,
    "end_token": 535,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      1366,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing data handling"
  },
  {
    "line": 200,
    "text": "",
    "annotation": "\u2705 Best Practice: Informative logging for default value usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 535,
    "end_token": 535,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      4277,
      1988,
      8748
    ],
    "label": "best_practice",
    "reason": "Informative logging for default value usage"
  },
  {
    "line": 202,
    "text": "        # get stock data from qlib",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      651,
      4283,
      1366,
      422,
      10662,
      8019
    ],
    "start_token": 535,
    "end_token": 549,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      1366,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing data handling"
  },
  {
    "line": 205,
    "text": "        self.quote_df = D.features(",
    "annotation": "\u2705 Best Practice: Informative logging for default value usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      22708,
      62,
      7568,
      796,
      360,
      13,
      40890,
      7
    ],
    "start_token": 549,
    "end_token": 566,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      4277,
      1988,
      8748
    ],
    "label": "best_practice",
    "reason": "Informative logging for default value usage"
  },
  {
    "line": 207,
    "text": "            self.all_fields,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      439,
      62,
      25747,
      11
    ],
    "start_token": 566,
    "end_token": 583,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      1366,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing data handling"
  },
  {
    "line": 210,
    "text": "            freq=self.freq,",
    "annotation": "\u2705 Best Practice: Informative logging for default value usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      28,
      944,
      13,
      19503,
      80,
      11
    ],
    "start_token": 583,
    "end_token": 602,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      4277,
      1988,
      8748
    ],
    "label": "best_practice",
    "reason": "Informative logging for default value usage"
  },
  {
    "line": 212,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for missing data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 602,
    "end_token": 610,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4814,
      1366,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for missing data handling"
  },
  {
    "line": 215,
    "text": "        # check buy_price data and sell_price data",
    "annotation": "\u2705 Best Practice: Informative logging for default value usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2198,
      2822,
      62,
      20888,
      1366,
      290,
      3677,
      62,
      20888,
      1366
    ],
    "start_token": 610,
    "end_token": 628,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45255,
      876,
      18931,
      329,
      4277,
      1988,
      8748
    ],
    "label": "best_practice",
    "reason": "Informative logging for default value usage"
  },
  {
    "line": 217,
    "text": "            pstr = getattr(self, attr)  # price string",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      2536,
      796,
      651,
      35226,
      7,
      944,
      11,
      708,
      81,
      8,
      220,
      1303,
      2756,
      4731
    ],
    "start_token": 628,
    "end_token": 654,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks"
  },
  {
    "line": 219,
    "text": "                self.logger.warning(\"{} field data contains nan.\".format(pstr))",
    "annotation": "\ud83e\udde0 ML Signal: Concatenation of DataFrames",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      1362,
      13,
      43917,
      7203,
      90,
      92,
      2214,
      1366,
      4909,
      15709,
      526,
      13,
      18982,
      7,
      79,
      2536,
      4008
    ],
    "start_token": 654,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      341,
      286,
      6060,
      35439
    ],
    "label": "ml_signal",
    "reason": "Concatenation of DataFrames"
  },
  {
    "line": 205,
    "text": "        self.quote_df = D.features(",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      22708,
      62,
      7568,
      796,
      360,
      13,
      40890,
      7
    ],
    "start_token": 689,
    "end_token": 706,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 208,
    "text": "            self.start_time,",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check types is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      2435,
      11
    ],
    "start_token": 706,
    "end_token": 723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      3858,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check types is a common pattern"
  },
  {
    "line": 211,
    "text": "            disk_cache=True,",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to check types is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11898,
      62,
      23870,
      28,
      17821,
      11
    ],
    "start_token": 723,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      3858,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to check types is a common pattern"
  },
  {
    "line": 214,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Checking for None is a common pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 740,
    "end_token": 740,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      6045,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checking for None is a common pattern"
  },
  {
    "line": 218,
    "text": "            if self.quote_df[pstr].isna().any():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): NotImplementedError could expose internal logic if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      22708,
      62,
      7568,
      58,
      79,
      2536,
      4083,
      271,
      2616,
      22446,
      1092,
      33529
    ],
    "start_token": 740,
    "end_token": 766,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1892,
      3546,
      1154,
      12061,
      12331,
      714,
      15651,
      5387,
      9156,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "NotImplementedError could expose internal logic if not handled properly"
  },
  {
    "line": 216,
    "text": "        for attr in (\"buy_price\", \"sell_price\"):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of DataFrame operations, which can be a pattern for data manipulation tasks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      708,
      81,
      287,
      5855,
      17846,
      62,
      20888,
      1600,
      366,
      7255,
      62,
      20888,
      1,
      2599
    ],
    "start_token": 766,
    "end_token": 788,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6060,
      19778,
      4560,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      1366,
      17512,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of DataFrame operations, which can be a pattern for data manipulation tasks."
  },
  {
    "line": 218,
    "text": "            if self.quote_df[pstr].isna().any():",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a method call, indicating decision-making patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      22708,
      62,
      7568,
      58,
      79,
      2536,
      4083,
      271,
      2616,
      22446,
      1092,
      33529
    ],
    "start_token": 788,
    "end_token": 814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      2446,
      869,
      11,
      12739,
      2551,
      12,
      8601,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a method call, indicating decision-making patterns."
  },
  {
    "line": 221,
    "text": "        # update trade_w_adj_price",
    "annotation": "\ud83e\udde0 ML Signal: Assigning boolean values to DataFrame columns, a common data processing pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      3292,
      62,
      86,
      62,
      41255,
      62,
      20888
    ],
    "start_token": 814,
    "end_token": 830,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      25131,
      3815,
      284,
      6060,
      19778,
      15180,
      11,
      257,
      2219,
      1366,
      7587,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Assigning boolean values to DataFrame columns, a common data processing pattern."
  },
  {
    "line": 225,
    "text": "            self.trade_w_adj_price = True",
    "annotation": "\u2705 Best Practice: Use of type casting to ensure correct data type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      25351,
      62,
      86,
      62,
      41255,
      62,
      20888,
      796,
      6407
    ],
    "start_token": 830,
    "end_token": 852,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      13092,
      284,
      4155,
      3376,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type casting to ensure correct data type."
  },
  {
    "line": 227,
    "text": "            if self.trade_unit is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Logical operations on DataFrame columns, indicating data filtering or transformation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      25351,
      62,
      20850,
      318,
      407,
      6045,
      25
    ],
    "start_token": 852,
    "end_token": 873,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      605,
      4560,
      319,
      6060,
      19778,
      15180,
      11,
      12739,
      1366,
      25431,
      393,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Logical operations on DataFrame columns, indicating data filtering or transformation."
  },
  {
    "line": 232,
    "text": "            self.trade_w_adj_price = False",
    "annotation": "\u2705 Best Practice: Use of type casting to ensure correct data type.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      25351,
      62,
      86,
      62,
      41255,
      62,
      20888,
      796,
      10352
    ],
    "start_token": 873,
    "end_token": 895,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      13092,
      284,
      4155,
      3376,
      1366,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type casting to ensure correct data type."
  },
  {
    "line": 233,
    "text": "        # update limit",
    "annotation": "\ud83e\udde0 ML Signal: Use of comparison operations on DataFrame columns, a pattern for threshold-based filtering.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      4179
    ],
    "start_token": 895,
    "end_token": 905,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7208,
      4560,
      319,
      6060,
      19778,
      15180,
      11,
      257,
      3912,
      329,
      11387,
      12,
      3106,
      25431,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of comparison operations on DataFrame columns, a pattern for threshold-based filtering."
  },
  {
    "line": 262,
    "text": "    def _get_limit_type(self, limit_threshold: Union[tuple, float, None]) -> str:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      32374,
      62,
      4906,
      7,
      944,
      11,
      4179,
      62,
      400,
      10126,
      25,
      4479,
      58,
      83,
      29291,
      11,
      12178,
      11,
      6045,
      12962,
      4613,
      965,
      25
    ],
    "start_token": 905,
    "end_token": 935,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 265,
    "text": "            return self.LT_TP_EXP",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      27734,
      62,
      7250,
      62,
      49864
    ],
    "start_token": 935,
    "end_token": 954,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 277,
    "text": "        limit_type = self._get_limit_type(limit_threshold)",
    "annotation": "\u2705 Best Practice: Docstring provides clear parameter and return value descriptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4179,
      62,
      4906,
      796,
      2116,
      13557,
      1136,
      62,
      32374,
      62,
      4906,
      7,
      32374,
      62,
      400,
      10126,
      8
    ],
    "start_token": 954,
    "end_token": 978,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      11507,
      290,
      1441,
      1988,
      16969
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear parameter and return value descriptions"
  },
  {
    "line": 295,
    "text": "    def _get_vol_limit(volume_threshold: Union[tuple, dict, None]) -> Tuple[Optional[list], Optional[list], set]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining to access data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      10396,
      62,
      32374,
      7,
      29048,
      62,
      400,
      10126,
      25,
      4479,
      58,
      83,
      29291,
      11,
      8633,
      11,
      6045,
      12962,
      4613,
      309,
      29291,
      58,
      30719,
      58,
      4868,
      4357,
      32233,
      58,
      4868,
      4357,
      900,
      5974
    ],
    "start_token": 978,
    "end_token": 1017,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      284,
      1895,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining to access data"
  },
  {
    "line": 297,
    "text": "        preprocess the volume limit.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining to access data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      662,
      14681,
      262,
      6115,
      4179,
      13
    ],
    "start_token": 1017,
    "end_token": 1030,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      284,
      1895,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining to access data"
  },
  {
    "line": 300,
    "text": "        Parameters",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining to access data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 1030,
    "end_token": 1038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      284,
      1895,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining to access data"
  },
  {
    "line": 303,
    "text": "            please refer to the doc of exchange.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining to access data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3387,
      3522,
      284,
      262,
      2205,
      286,
      5163,
      13
    ],
    "start_token": 1038,
    "end_token": 1057,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      284,
      1895,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining to access data"
  },
  {
    "line": 307,
    "text": "            the fields need to get from qlib.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for ValueError if direction is not recognized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      7032,
      761,
      284,
      651,
      422,
      10662,
      8019,
      13
    ],
    "start_token": 1057,
    "end_token": 1077,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11052,
      12331,
      611,
      4571,
      318,
      407,
      8018
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for ValueError if direction is not recognized"
  },
  {
    "line": 310,
    "text": "        sell_vol_limit: List[Tuple[str]]",
    "annotation": "\ud83e\udde0 ML Signal: Checks if a stock is in the list of all stocks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3677,
      62,
      10396,
      62,
      32374,
      25,
      7343,
      58,
      51,
      29291,
      58,
      2536,
      11907
    ],
    "start_token": 1077,
    "end_token": 1097,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      611,
      257,
      4283,
      318,
      287,
      262,
      1351,
      286,
      477,
      14420
    ],
    "label": "ml_signal",
    "reason": "Checks if a stock is in the list of all stocks"
  },
  {
    "line": 312,
    "text": "        Raises",
    "annotation": "\ud83e\udde0 ML Signal: Retrieves stock data for a given time range",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7567,
      2696
    ],
    "start_token": 1097,
    "end_token": 1106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      5034,
      1158,
      4283,
      1366,
      329,
      257,
      1813,
      640,
      2837
    ],
    "label": "ml_signal",
    "reason": "Retrieves stock data for a given time range"
  },
  {
    "line": 314,
    "text": "        ValueError",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType dereference if close is None",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11052,
      12331
    ],
    "start_token": 1106,
    "end_token": 1115,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      390,
      35790,
      611,
      1969,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType dereference if close is None"
  },
  {
    "line": 317,
    "text": "        if volume_threshold is None:",
    "annotation": "\u2705 Best Practice: Use isinstance to check type before casting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6115,
      62,
      400,
      10126,
      318,
      6045,
      25
    ],
    "start_token": 1115,
    "end_token": 1130,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      284,
      2198,
      2099,
      878,
      13092
    ],
    "label": "best_practice",
    "reason": "Use isinstance to check type before casting"
  },
  {
    "line": 319,
    "text": "",
    "annotation": "\u2705 Best Practice: Use cast for type hinting and clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1130,
    "end_token": 1130,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      3350,
      329,
      2099,
      9254,
      278,
      290,
      16287
    ],
    "label": "best_practice",
    "reason": "Use cast for type hinting and clarity"
  },
  {
    "line": 320,
    "text": "        fields = set()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): np.isnan can raise TypeError if close is not a float",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      796,
      900,
      3419
    ],
    "start_token": 1130,
    "end_token": 1141,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      45941,
      13,
      271,
      12647,
      460,
      5298,
      5994,
      12331,
      611,
      1969,
      318,
      407,
      257,
      12178
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "np.isnan can raise TypeError if close is not a float"
  },
  {
    "line": 320,
    "text": "        fields = set()",
    "annotation": "\u2705 Best Practice: Type hints improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      796,
      900,
      3419
    ],
    "start_token": 1141,
    "end_token": 1152,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hints improve code readability and maintainability"
  },
  {
    "line": 327,
    "text": "        for key, vol_limit in volume_threshold.items():",
    "annotation": "\ud83e\udde0 ML Signal: Function usage pattern for determining stock tradability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1994,
      11,
      2322,
      62,
      32374,
      287,
      6115,
      62,
      400,
      10126,
      13,
      23814,
      33529
    ],
    "start_token": 1152,
    "end_token": 1173,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8748,
      3912,
      329,
      13213,
      4283,
      2083,
      1799
    ],
    "label": "ml_signal",
    "reason": "Function usage pattern for determining stock tradability"
  },
  {
    "line": 331,
    "text": "            if key in (\"buy\", \"all\"):",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for checking stock suspension",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1994,
      287,
      5855,
      17846,
      1600,
      366,
      439,
      1,
      2599
    ],
    "start_token": 1173,
    "end_token": 1194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      10627,
      4283,
      11461
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for checking stock suspension"
  },
  {
    "line": 332,
    "text": "                buy_vol_limit.append(vol_limit)",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for checking stock limit",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2822,
      62,
      10396,
      62,
      32374,
      13,
      33295,
      7,
      10396,
      62,
      32374,
      8
    ],
    "start_token": 1194,
    "end_token": 1221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      10627,
      4283,
      4179
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for checking stock limit"
  },
  {
    "line": 331,
    "text": "            if key in (\"buy\", \"all\"):",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and parameter types can be used to infer method behavior and usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1994,
      287,
      5855,
      17846,
      1600,
      366,
      439,
      1,
      2599
    ],
    "start_token": 1221,
    "end_token": 1242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      11507,
      3858,
      460,
      307,
      973,
      284,
      13249,
      2446,
      4069,
      290,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Method signature and parameter types can be used to infer method behavior and usage patterns"
  },
  {
    "line": 333,
    "text": "            if key in (\"sell\", \"all\"):",
    "annotation": "\ud83e\udde0 ML Signal: Return statement with method call indicates delegation of responsibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1994,
      287,
      5855,
      7255,
      1600,
      366,
      439,
      1,
      2599
    ],
    "start_token": 1242,
    "end_token": 1263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      2643,
      351,
      2446,
      869,
      9217,
      22635,
      286,
      5798
    ],
    "label": "ml_signal",
    "reason": "Return statement with method call indicates delegation of responsibility"
  },
  {
    "line": 349,
    "text": "        start_time: pd.Timestamp",
    "annotation": "\u2705 Best Practice: Check for order validity before proceeding with processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 1263,
    "end_token": 1279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      1502,
      19648,
      878,
      18788,
      351,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Check for order validity before proceeding with processing."
  },
  {
    "line": 352,
    "text": "            trade direction, by default None",
    "annotation": "\ud83e\udde0 ML Signal: Logging failure reasons can be useful for training models to predict order failures.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      4571,
      11,
      416,
      4277,
      6045
    ],
    "start_token": 1279,
    "end_token": 1296,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      5287,
      3840,
      460,
      307,
      4465,
      329,
      3047,
      4981,
      284,
      4331,
      1502,
      15536,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging failure reasons can be useful for training models to predict order failures."
  },
  {
    "line": 355,
    "text": "            - if direction == Order.SELL, check the sell limit for selling.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logic error if both trade_account and position are provided.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      611,
      4571,
      6624,
      8284,
      13,
      5188,
      3069,
      11,
      2198,
      262,
      3677,
      4179,
      329,
      6301,
      13
    ],
    "start_token": 1296,
    "end_token": 1323,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      9156,
      4049,
      611,
      1111,
      3292,
      62,
      23317,
      290,
      2292,
      389,
      2810,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logic error if both trade_account and position are provided."
  },
  {
    "line": 363,
    "text": "        # **all** is used when checking limitation.",
    "annotation": "\u2705 Best Practice: Check if trade_val is significant before updating accounts or positions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      12429,
      439,
      1174,
      318,
      973,
      618,
      10627,
      17385,
      13
    ],
    "start_token": 1323,
    "end_token": 1340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      3292,
      62,
      2100,
      318,
      2383,
      878,
      19698,
      5504,
      393,
      6116,
      13
    ],
    "label": "best_practice",
    "reason": "Check if trade_val is significant before updating accounts or positions."
  },
  {
    "line": 366,
    "text": "            # The trading limitation is related to the trading direction",
    "annotation": "\ud83e\udde0 ML Signal: Updating trade accounts can be a key feature for financial models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      7313,
      17385,
      318,
      3519,
      284,
      262,
      7313,
      4571
    ],
    "start_token": 1340,
    "end_token": 1361,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      3292,
      5504,
      460,
      307,
      257,
      1994,
      3895,
      329,
      3176,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Updating trade accounts can be a key feature for financial models."
  },
  {
    "line": 366,
    "text": "            # The trading limitation is related to the trading direction",
    "annotation": "\ud83e\udde0 ML Signal: Updating positions can be a key feature for financial models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      7313,
      17385,
      318,
      3519,
      284,
      262,
      7313,
      4571
    ],
    "start_token": 1361,
    "end_token": 1382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      6116,
      460,
      307,
      257,
      1994,
      3895,
      329,
      3176,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Updating positions can be a key feature for financial models."
  },
  {
    "line": 366,
    "text": "            # The trading limitation is related to the trading direction",
    "annotation": "\u2705 Best Practice: Type hints improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      7313,
      17385,
      318,
      3519,
      284,
      262,
      7313,
      4571
    ],
    "start_token": 1382,
    "end_token": 1403,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hints improve code readability and maintainability"
  },
  {
    "line": 375,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1403,
    "end_token": 1412,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call pattern with specific parameters"
  },
  {
    "line": 375,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Type hinting for parameters and return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1412,
    "end_token": 1421,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for parameters and return type improves code readability and maintainability"
  },
  {
    "line": 383,
    "text": "    ) -> bool:",
    "annotation": "\ud83e\udde0 ML Signal: Method usage pattern for fetching stock data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      20512,
      25
    ],
    "start_token": 1421,
    "end_token": 1428,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8748,
      3912,
      329,
      21207,
      278,
      4283,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method usage pattern for fetching stock data"
  },
  {
    "line": 390,
    "text": "            if close is None:",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1969,
      318,
      6045,
      25
    ],
    "start_token": 1428,
    "end_token": 1444,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose and parameters"
  },
  {
    "line": 392,
    "text": "                return True",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method parameter to determine aggregation method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6407
    ],
    "start_token": 1444,
    "end_token": 1461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      11507,
      284,
      5004,
      46500,
      2446
    ],
    "label": "ml_signal",
    "reason": "Usage of method parameter to determine aggregation method"
  },
  {
    "line": 392,
    "text": "                return True",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `method` is not validated against expected values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6407
    ],
    "start_token": 1461,
    "end_token": 1478,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      24396,
      63,
      318,
      407,
      31031,
      1028,
      2938,
      3815
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `method` is not validated against expected values"
  },
  {
    "line": 400,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Use of Enum for direction improves code readability and reduces errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1478,
    "end_token": 1487,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2039,
      388,
      329,
      4571,
      19575,
      2438,
      1100,
      1799,
      290,
      12850,
      8563
    ],
    "label": "best_practice",
    "reason": "Use of Enum for direction improves code readability and reduces errors"
  },
  {
    "line": 406,
    "text": "        stock_id: str,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): NotImplementedError could expose internal logic if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      25,
      965,
      11
    ],
    "start_token": 1487,
    "end_token": 1500,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1892,
      3546,
      1154,
      12061,
      12331,
      714,
      15651,
      5387,
      9156,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "NotImplementedError could expose internal logic if not handled properly"
  },
  {
    "line": 408,
    "text": "        end_time: pd.Timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of fetching data based on dynamic parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1500,
    "end_token": 1517,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      21207,
      278,
      1366,
      1912,
      319,
      8925,
      10007
    ],
    "label": "ml_signal",
    "reason": "Pattern of fetching data based on dynamic parameters"
  },
  {
    "line": 410,
    "text": "    ) -> bool:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if deal_price is None or NaN, handled by logging and fallback",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      20512,
      25
    ],
    "start_token": 1517,
    "end_token": 1524,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      1730,
      62,
      20888,
      318,
      6045,
      393,
      11013,
      45,
      11,
      12118,
      416,
      18931,
      290,
      2121,
      1891
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if deal_price is None or NaN, handled by logging and fallback"
  },
  {
    "line": 412,
    "text": "        return not (",
    "annotation": "\ud83e\udde0 ML Signal: Logging patterns for unexpected or edge-case values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      407,
      357
    ],
    "start_token": 1524,
    "end_token": 1534,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      7572,
      329,
      10059,
      393,
      5743,
      12,
      7442,
      3815
    ],
    "label": "ml_signal",
    "reason": "Logging patterns for unexpected or edge-case values"
  },
  {
    "line": 412,
    "text": "        return not (",
    "annotation": "\ud83e\udde0 ML Signal: Fallback mechanism for handling invalid data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      407,
      357
    ],
    "start_token": 1534,
    "end_token": 1544,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7218,
      1891,
      9030,
      329,
      9041,
      12515,
      1366
    ],
    "label": "ml_signal",
    "reason": "Fallback mechanism for handling invalid data"
  },
  {
    "line": 425,
    "text": "        position: BasePosition | None = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2292,
      25,
      7308,
      26545,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 1544,
    "end_token": 1560,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 427,
    "text": "    ) -> Tuple[float, float, float]:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an item exists in a collection before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      309,
      29291,
      58,
      22468,
      11,
      12178,
      11,
      12178,
      5974
    ],
    "start_token": 1560,
    "end_token": 1574,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      2378,
      7160,
      287,
      257,
      4947,
      878,
      18788
    ],
    "label": "ml_signal",
    "reason": "Checking if an item exists in a collection before proceeding"
  },
  {
    "line": 429,
    "text": "        Deal order when the actual transaction",
    "annotation": "\ud83e\udde0 ML Signal: Returning data based on a method call with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15138,
      1502,
      618,
      262,
      4036,
      8611
    ],
    "start_token": 1574,
    "end_token": 1587,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1366,
      1912,
      319,
      257,
      2446,
      869,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Returning data based on a method call with specific parameters"
  },
  {
    "line": 450,
    "text": "            trade_account.current_position if trade_account else position,",
    "annotation": "\u2705 Best Practice: Check if stock is tradable before proceeding with calculations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      23317,
      13,
      14421,
      62,
      9150,
      611,
      3292,
      62,
      23317,
      2073,
      2292,
      11
    ],
    "start_token": 1587,
    "end_token": 1612,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4283,
      318,
      2083,
      540,
      878,
      18788,
      351,
      16765
    ],
    "label": "best_practice",
    "reason": "Check if stock is tradable before proceeding with calculations"
  },
  {
    "line": 452,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Validate weight to ensure it's within the expected range",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1612,
    "end_token": 1620,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3254,
      20540,
      3463,
      284,
      4155,
      340,
      338,
      1626,
      262,
      2938,
      2837
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Validate weight to ensure it's within the expected range"
  },
  {
    "line": 458,
    "text": "            if trade_account:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Validate total tradable weight to prevent logical errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3292,
      62,
      23317,
      25
    ],
    "start_token": 1620,
    "end_token": 1636,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3254,
      20540,
      2472,
      2083,
      540,
      3463,
      284,
      2948,
      12219,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Validate total tradable weight to prevent logical errors"
  },
  {
    "line": 465,
    "text": "    def get_quote_info(",
    "annotation": "\u2705 Best Practice: Check if stock is tradable before calculating amount",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      22708,
      62,
      10951,
      7
    ],
    "start_token": 1636,
    "end_token": 1646,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4283,
      318,
      2083,
      540,
      878,
      26019,
      2033
    ],
    "label": "best_practice",
    "reason": "Check if stock is tradable before calculating amount"
  },
  {
    "line": 476,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of division and floor division for financial calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1646,
    "end_token": 1655,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7297,
      290,
      4314,
      7297,
      329,
      3176,
      16765
    ],
    "label": "ml_signal",
    "reason": "Usage of division and floor division for financial calculations"
  },
  {
    "line": 478,
    "text": "        start_time: pd.Timestamp,",
    "annotation": "\u2705 Best Practice: Type hints improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1655,
    "end_token": 1672,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hints improve code readability and maintainability."
  },
  {
    "line": 490,
    "text": "    ) -> Union[None, int, float, bool, IndexData]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom rounding function could indicate domain-specific logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      4479,
      58,
      14202,
      11,
      493,
      11,
      12178,
      11,
      20512,
      11,
      12901,
      6601,
      5974
    ],
    "start_token": 1672,
    "end_token": 1690,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      38185,
      2163,
      714,
      7603,
      7386,
      12,
      11423,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom rounding function could indicate domain-specific logic."
  },
  {
    "line": 498,
    "text": "        end_time: pd.Timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom rounding function could indicate domain-specific logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1690,
    "end_token": 1707,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      38185,
      2163,
      714,
      7603,
      7386,
      12,
      11423,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom rounding function could indicate domain-specific logic."
  },
  {
    "line": 517,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Seeding the random number generator ensures reproducibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1707,
    "end_token": 1716,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1001,
      8228,
      262,
      4738,
      1271,
      17301,
      19047,
      8186,
      66,
      2247
    ],
    "label": "best_practice",
    "reason": "Seeding the random number generator ensures reproducibility"
  },
  {
    "line": 519,
    "text": "        start_time: pd.Timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using random.shuffle can lead to non-deterministic behavior if not seeded",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1716,
    "end_token": 1733,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4738,
      13,
      1477,
      18137,
      460,
      1085,
      284,
      1729,
      12,
      67,
      2357,
      49228,
      4069,
      611,
      407,
      48453
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using random.shuffle can lead to non-deterministic behavior if not seeded"
  },
  {
    "line": 526,
    "text": "            `None`: if the stock is suspended `None` may be returned",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a factor in calculations could indicate a pattern for ML models",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4600,
      14202,
      63,
      25,
      611,
      262,
      4283,
      318,
      9951,
      4600,
      14202,
      63,
      743,
      307,
      4504
    ],
    "start_token": 1733,
    "end_token": 1759,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      5766,
      287,
      16765,
      714,
      7603,
      257,
      3912,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Usage of a factor in calculations could indicate a pattern for ML models"
  },
  {
    "line": 528,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Calculating real deal amount based on current and target positions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1759,
    "end_token": 1767,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      1103,
      1730,
      2033,
      1912,
      319,
      1459,
      290,
      2496,
      6116
    ],
    "label": "ml_signal",
    "reason": "Calculating real deal amount based on current and target positions"
  },
  {
    "line": 551,
    "text": "        direction : the direction of the deal price for estimating the amount",
    "annotation": "\ud83e\udde0 ML Signal: Returning a combined list of sell and buy orders",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      1058,
      262,
      4571,
      286,
      262,
      1730,
      2756,
      329,
      39539,
      262,
      2033
    ],
    "start_token": 1767,
    "end_token": 1786,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      5929,
      1351,
      286,
      3677,
      290,
      2822,
      6266
    ],
    "label": "ml_signal",
    "reason": "Returning a combined list of sell and buy orders"
  },
  {
    "line": 559,
    "text": "                # weight_position must be greater than 0 and less than 1",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of parameters and function purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3463,
      62,
      9150,
      1276,
      307,
      3744,
      621,
      657,
      290,
      1342,
      621,
      352
    ],
    "start_token": 1786,
    "end_token": 1814,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      10007,
      290,
      2163,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of parameters and function purpose"
  },
  {
    "line": 568,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to perform calculations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1814,
    "end_token": 1814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1620,
      16765
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to perform calculations"
  },
  {
    "line": 572,
    "text": "                stock_id=stock_id,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect logic if check functions do not handle edge cases",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      28,
      13578,
      62,
      312,
      11
    ],
    "start_token": 1814,
    "end_token": 1837,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      9156,
      611,
      2198,
      5499,
      466,
      407,
      5412,
      5743,
      2663
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect logic if check functions do not handle edge cases"
  },
  {
    "line": 582,
    "text": "                        start_time=start_time,",
    "annotation": "\ud83e\udde0 ML Signal: Multiplying deal price by amount to calculate value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11
    ],
    "start_token": 1837,
    "end_token": 1868,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7854,
      541,
      3157,
      1730,
      2756,
      416,
      2033,
      284,
      15284,
      1988
    ],
    "label": "ml_signal",
    "reason": "Multiplying deal price by amount to calculate value"
  },
  {
    "line": 590,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check for None to handle default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1868,
    "end_token": 1876,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      5412,
      4277,
      11507,
      3815
    ],
    "label": "best_practice",
    "reason": "Check for None to handle default parameter values"
  },
  {
    "line": 592,
    "text": "        :param current_amount:",
    "annotation": "\u2705 Best Practice: Check for None to ensure required parameters are provided",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      1459,
      62,
      17287,
      25
    ],
    "start_token": 1876,
    "end_token": 1889,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      4155,
      2672,
      10007,
      389,
      2810
    ],
    "label": "best_practice",
    "reason": "Check for None to ensure required parameters are provided"
  },
  {
    "line": 594,
    "text": "        :param factor:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to retrieve a factor based on multiple parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      5766,
      25
    ],
    "start_token": 1889,
    "end_token": 1900,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      19818,
      257,
      5766,
      1912,
      319,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to retrieve a factor based on multiple parameters"
  },
  {
    "line": 597,
    "text": "        if current_amount == target_amount:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for ValueError if inputs are not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1459,
      62,
      17287,
      6624,
      2496,
      62,
      17287,
      25
    ],
    "start_token": 1900,
    "end_token": 1916,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11052,
      12331,
      611,
      17311,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for ValueError if inputs are not validated"
  },
  {
    "line": 597,
    "text": "        if current_amount == target_amount:",
    "annotation": "\u2705 Best Practice: Use of assert to ensure factor is not None before returning",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1459,
      62,
      17287,
      6624,
      2496,
      62,
      17287,
      25
    ],
    "start_token": 1916,
    "end_token": 1932,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      4155,
      5766,
      318,
      407,
      6045,
      878,
      8024
    ],
    "label": "best_practice",
    "reason": "Use of assert to ensure factor is not None before returning"
  },
  {
    "line": 604,
    "text": "            if target_amount == 0:",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2496,
      62,
      17287,
      6624,
      657,
      25
    ],
    "start_token": 1932,
    "end_token": 1950,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters"
  },
  {
    "line": 620,
    "text": "        Parameter:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on instance attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25139,
      2357,
      25
    ],
    "start_token": 1950,
    "end_token": 1960,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4554,
      12608
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on instance attributes"
  },
  {
    "line": 628,
    "text": "        buy_order_list = []",
    "annotation": "\ud83e\udde0 ML Signal: Return value based on calculated factor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2822,
      62,
      2875,
      62,
      4868,
      796,
      17635
    ],
    "start_token": 1960,
    "end_token": 1974,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      1988,
      1912,
      319,
      10488,
      5766
    ],
    "label": "ml_signal",
    "reason": "Return value based on calculated factor"
  },
  {
    "line": 629,
    "text": "        sell_order_list = []",
    "annotation": "\ud83e\udde0 ML Signal: Return None when conditions are not met",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3677,
      62,
      2875,
      62,
      4868,
      796,
      17635
    ],
    "start_token": 1974,
    "end_token": 1988,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      6045,
      618,
      3403,
      389,
      407,
      1138
    ],
    "label": "ml_signal",
    "reason": "Return None when conditions are not met"
  },
  {
    "line": 637,
    "text": "        sorted_ids = sorted(set(list(current_position.keys()) + list(target_position.keys())))",
    "annotation": "\u2705 Best Practice: Docstring provides a brief explanation of parameters and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23243,
      62,
      2340,
      796,
      23243,
      7,
      2617,
      7,
      4868,
      7,
      14421,
      62,
      9150,
      13,
      13083,
      28955,
      1343,
      1351,
      7,
      16793,
      62,
      9150,
      13,
      13083,
      3419,
      22305
    ],
    "start_token": 1988,
    "end_token": 2021,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      7468,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief explanation of parameters and return value"
  },
  {
    "line": 644,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for conditions before proceeding with calculations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2021,
    "end_token": 2021,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      3403,
      878,
      18788,
      351,
      16765
    ],
    "label": "best_practice",
    "reason": "Check for conditions before proceeding with calculations"
  },
  {
    "line": 644,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of using a helper function to get or validate a value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2021,
    "end_token": 2021,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      1262,
      257,
      31904,
      2163,
      284,
      651,
      393,
      26571,
      257,
      1988
    ],
    "label": "ml_signal",
    "reason": "Pattern of using a helper function to get or validate a value"
  },
  {
    "line": 653,
    "text": "                # buy stock",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential floating-point arithmetic issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2822,
      4283
    ],
    "start_token": 2021,
    "end_token": 2039,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12462,
      12,
      4122,
      34768,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential floating-point arithmetic issues"
  },
  {
    "line": 664,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on order direction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2039,
    "end_token": 2052,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1502,
      4571
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on order direction"
  },
  {
    "line": 671,
    "text": "                        start_time=start_time,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for type checking can be bypassed in production",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11
    ],
    "start_token": 2052,
    "end_token": 2083,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      2099,
      10627,
      460,
      307,
      17286,
      276,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for type checking can be bypassed in production"
  },
  {
    "line": 680,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Data retrieval pattern for current limit",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 2083,
    "end_token": 2092,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      45069,
      3912,
      329,
      1459,
      4179
    ],
    "label": "ml_signal",
    "reason": "Data retrieval pattern for current limit"
  },
  {
    "line": 690,
    "text": "        direction : the direction of the deal price for estimating the amount",
    "annotation": "\ud83e\udde0 ML Signal: Data retrieval pattern for cumulative limit",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      1058,
      262,
      4571,
      286,
      262,
      1730,
      2756,
      329,
      39539,
      262,
      2033
    ],
    "start_token": 2092,
    "end_token": 2111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      45069,
      3912,
      329,
      23818,
      4179
    ],
    "label": "ml_signal",
    "reason": "Data retrieval pattern for cumulative limit"
  },
  {
    "line": 696,
    "text": "        for stock_id in amount_dict:",
    "annotation": "\u2705 Best Practice: Use of max and min to ensure deal_amount is within valid range",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4283,
      62,
      312,
      287,
      2033,
      62,
      11600,
      25
    ],
    "start_token": 2111,
    "end_token": 2127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3509,
      290,
      949,
      284,
      4155,
      1730,
      62,
      17287,
      318,
      1626,
      4938,
      2837
    ],
    "label": "best_practice",
    "reason": "Use of max and min to ensure deal_amount is within valid range"
  },
  {
    "line": 697,
    "text": "            if not only_tradable or (",
    "annotation": "\ud83e\udde0 ML Signal: Logging pattern for clipped orders",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      691,
      62,
      2213,
      324,
      540,
      393,
      357
    ],
    "start_token": 2127,
    "end_token": 2147,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      3912,
      329,
      49305,
      6266
    ],
    "label": "ml_signal",
    "reason": "Logging pattern for clipped orders"
  },
  {
    "line": 697,
    "text": "            if not only_tradable or (",
    "annotation": "\u2705 Best Practice: Docstring provides clear explanation of parameters and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      691,
      62,
      2213,
      324,
      540,
      393,
      357
    ],
    "start_token": 2147,
    "end_token": 2167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      7468,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear explanation of parameters and return value"
  },
  {
    "line": 711,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names like 'critical_price' improves readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2167,
    "end_token": 2167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      588,
      705,
      34666,
      62,
      20888,
      6,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names like 'critical_price' improves readability"
  },
  {
    "line": 714,
    "text": "        factor: float | None = None,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calculating maximum trade amount based on cash and cost ratio",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      25,
      12178,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 2167,
    "end_token": 2182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      26019,
      5415,
      3292,
      2033,
      1912,
      319,
      5003,
      290,
      1575,
      8064
    ],
    "label": "ml_signal",
    "reason": "Pattern of calculating maximum trade amount based on cash and cost ratio"
  },
  {
    "line": 716,
    "text": "        start_time: pd.Timestamp = None,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calculating trade amount when cash is less than critical price",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      796,
      6045,
      11
    ],
    "start_token": 2182,
    "end_token": 2201,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      26019,
      3292,
      2033,
      618,
      5003,
      318,
      1342,
      621,
      4688,
      2756
    ],
    "label": "ml_signal",
    "reason": "Pattern of calculating trade amount when cash is less than critical price"
  },
  {
    "line": 730,
    "text": "        factor: float | None = None,",
    "annotation": "\u2705 Best Practice: Use of type casting to ensure trade_price is a float",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      25,
      12178,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 2201,
    "end_token": 2216,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      13092,
      284,
      4155,
      3292,
      62,
      20888,
      318,
      257,
      12178
    ],
    "label": "best_practice",
    "reason": "Use of type casting to ensure trade_price is a float"
  },
  {
    "line": 735,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type casting to ensure total_trade_val is a float",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2216,
    "end_token": 2224,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      13092,
      284,
      4155,
      2472,
      62,
      25351,
      62,
      2100,
      318,
      257,
      12178
    ],
    "label": "best_practice",
    "reason": "Use of type casting to ensure total_trade_val is a float"
  },
  {
    "line": 739,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Encapsulation of logic in a helper function for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 2224,
    "end_token": 2232,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      9156,
      287,
      257,
      31904,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Encapsulation of logic in a helper function for clarity"
  },
  {
    "line": 742,
    "text": "            the adjusted factor",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if total_trade_val is zero",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      12328,
      5766
    ],
    "start_token": 2232,
    "end_token": 2246,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      2472,
      62,
      25351,
      62,
      2100,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if total_trade_val is zero"
  },
  {
    "line": 754,
    "text": "                start_time=start_time,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential floating-point precision issues with np.isclose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11
    ],
    "start_token": 2246,
    "end_token": 2269,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12462,
      12,
      4122,
      15440,
      2428,
      351,
      45941,
      13,
      271,
      19836
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential floating-point precision issues with np.isclose"
  },
  {
    "line": 754,
    "text": "                start_time=start_time,",
    "annotation": "\u2705 Best Practice: Encapsulation of logic in a helper function for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11
    ],
    "start_token": 2269,
    "end_token": 2292,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      9156,
      287,
      257,
      31904,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Encapsulation of logic in a helper function for clarity"
  },
  {
    "line": 760,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logic error if cash is insufficient",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2292,
    "end_token": 2292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      9156,
      4049,
      611,
      5003,
      318,
      19022
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logic error if cash is insufficient"
  },
  {
    "line": 766,
    "text": "        start_time: pd.Timestamp = None,",
    "annotation": "\ud83e\udde0 ML Signal: Logging of specific events for debugging or analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      796,
      6045,
      11
    ],
    "start_token": 2292,
    "end_token": 2311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      286,
      2176,
      2995,
      329,
      28769,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Logging of specific events for debugging or analysis"
  },
  {
    "line": 774,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logic error if cash is insufficient",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2311,
    "end_token": 2319,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      9156,
      4049,
      611,
      5003,
      318,
      19022
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logic error if cash is insufficient"
  },
  {
    "line": 776,
    "text": "            # the minimal amount is 1. Add 0.1 for solving precision problem.",
    "annotation": "\ud83e\udde0 ML Signal: Logging of specific events for debugging or analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      262,
      10926,
      2033,
      318,
      352,
      13,
      3060,
      657,
      13,
      16,
      329,
      18120,
      15440,
      1917,
      13
    ],
    "start_token": 2319,
    "end_token": 2346,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      286,
      2176,
      2995,
      329,
      28769,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Logging of specific events for debugging or analysis"
  },
  {
    "line": 778,
    "text": "                factor=factor,",
    "annotation": "\u2705 Best Practice: Encapsulation of logic in a helper function for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5766,
      28,
      31412,
      11
    ],
    "start_token": 2346,
    "end_token": 2365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      9156,
      287,
      257,
      31904,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Encapsulation of logic in a helper function for clarity"
  },
  {
    "line": 785,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging of specific events for debugging or analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2365,
    "end_token": 2365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      286,
      2176,
      2995,
      329,
      28769,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Logging of specific events for debugging or analysis"
  },
  {
    "line": 788,
    "text": "        NOTE:",
    "annotation": "\u2705 Best Practice: Encapsulation of logic in a helper function for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24550,
      25
    ],
    "start_token": 2365,
    "end_token": 2374,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      9156,
      287,
      257,
      31904,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Encapsulation of logic in a helper function for clarity"
  },
  {
    "line": 789,
    "text": "            this function will change the order.deal_amount **inplace**",
    "annotation": "\u2705 Best Practice: Encapsulation of logic in a helper function for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2163,
      481,
      1487,
      262,
      1502,
      13,
      31769,
      62,
      17287,
      12429,
      259,
      5372,
      1174
    ],
    "start_token": 2374,
    "end_token": 2399,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      9156,
      287,
      257,
      31904,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Encapsulation of logic in a helper function for clarity"
  },
  {
    "line": 789,
    "text": "            this function will change the order.deal_amount **inplace**",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of NotImplementedError for unsupported order directions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2163,
      481,
      1487,
      262,
      1502,
      13,
      31769,
      62,
      17287,
      12429,
      259,
      5372,
      1174
    ],
    "start_token": 2399,
    "end_token": 2424,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      329,
      24222,
      1502,
      11678
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of NotImplementedError for unsupported order directions"
  },
  {
    "line": 789,
    "text": "            this function will change the order.deal_amount **inplace**",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logic error if trade_val is too small",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2163,
      481,
      1487,
      262,
      1502,
      13,
      31769,
      62,
      17287,
      12429,
      259,
      5372,
      1174
    ],
    "start_token": 2424,
    "end_token": 2449,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      9156,
      4049,
      611,
      3292,
      62,
      2100,
      318,
      1165,
      1402
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logic error if trade_val is too small"
  },
  {
    "line": 786,
    "text": "    def _clip_amount_by_volume(self, order: Order, dealt_order_amount: dict) -> Optional[float]:",
    "annotation": "\u2705 Best Practice: Use of a helper method to encapsulate the logic for retrieving or creating an instance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      15036,
      62,
      17287,
      62,
      1525,
      62,
      29048,
      7,
      944,
      11,
      1502,
      25,
      8284,
      11,
      11829,
      62,
      2875,
      62,
      17287,
      25,
      8633,
      8,
      4613,
      32233,
      58,
      22468,
      5974
    ],
    "start_token": 2449,
    "end_token": 2481,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2446,
      284,
      32652,
      5039,
      262,
      9156,
      329,
      50122,
      393,
      4441,
      281,
      4554
    ],
    "label": "best_practice",
    "reason": "Use of a helper method to encapsulate the logic for retrieving or creating an instance"
  },
  {
    "line": 788,
    "text": "        NOTE:",
    "annotation": "\u2705 Best Practice: Checking for attribute existence before accessing it",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24550,
      25
    ],
    "start_token": 2481,
    "end_token": 2490,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      11688,
      6224,
      878,
      22534,
      340
    ],
    "label": "best_practice",
    "reason": "Checking for attribute existence before accessing it"
  },
  {
    "line": 789,
    "text": "            this function will change the order.deal_amount **inplace**",
    "annotation": "\ud83e\udde0 ML Signal: Lazy initialization pattern for object creation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2163,
      481,
      1487,
      262,
      1502,
      13,
      31769,
      62,
      17287,
      12429,
      259,
      5372,
      1174
    ],
    "start_token": 2490,
    "end_token": 2515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      406,
      12582,
      37588,
      3912,
      329,
      2134,
      6282
    ],
    "label": "ml_signal",
    "reason": "Lazy initialization pattern for object creation"
  },
  {
    "line": 789,
    "text": "            this function will change the order.deal_amount **inplace**",
    "annotation": "\ud83e\udde0 ML Signal: Caching pattern by storing the instance for future use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      428,
      2163,
      481,
      1487,
      262,
      1502,
      13,
      31769,
      62,
      17287,
      12429,
      259,
      5372,
      1174
    ],
    "start_token": 2515,
    "end_token": 2540,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      8103,
      3912,
      416,
      23069,
      262,
      4554,
      329,
      2003,
      779
    ],
    "label": "ml_signal",
    "reason": "Caching pattern by storing the instance for future use"
  }
]
[
  {
    "line": 3,
    "text": "from __future__ import annotations",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      11593,
      37443,
      834,
      1330,
      37647
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 6,
    "text": "from typing import Dict, List, Optional, Tuple, cast",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific functions or classes from a module can indicate which functionalities are frequently used.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      360,
      713,
      11,
      7343,
      11,
      32233,
      11,
      309,
      29291,
      11,
      3350
    ],
    "start_token": 6,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      460,
      7603,
      543,
      10345,
      871,
      389,
      6777,
      973,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing specific functions or classes from a module can indicate which functionalities are frequently used."
  },
  {
    "line": 8,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific classes from a module can indicate which functionalities are frequently used.",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 20,
    "end_token": 26,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      6097,
      422,
      257,
      8265,
      460,
      7603,
      543,
      10345,
      871,
      389,
      6777,
      973,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing specific classes from a module can indicate which functionalities are frequently used."
  },
  {
    "line": 30,
    "text": "        in the specific accomplishment for rtn, it does not consider cost, in other words, rtn - cost = earning",
    "annotation": "\u2705 Best Practice: Consider adding an __init__ method to initialize class attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      287,
      262,
      2176,
      29340,
      329,
      374,
      34106,
      11,
      340,
      857,
      407,
      2074,
      1575,
      11,
      287,
      584,
      2456,
      11,
      374,
      34106,
      532,
      1575,
      796,
      13748
    ],
    "start_token": 26,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      281,
      11593,
      15003,
      834,
      2446,
      284,
      41216,
      1398,
      12608
    ],
    "label": "best_practice",
    "reason": "Consider adding an __init__ method to initialize class attributes"
  },
  {
    "line": 30,
    "text": "        in the specific accomplishment for rtn, it does not consider cost, in other words, rtn - cost = earning",
    "annotation": "\u2705 Best Practice: Use of __init__ method for initializing class instances",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      287,
      262,
      2176,
      29340,
      329,
      374,
      34106,
      11,
      340,
      857,
      407,
      2074,
      1575,
      11,
      287,
      584,
      2456,
      11,
      374,
      34106,
      532,
      1575,
      796,
      13748
    ],
    "start_token": 57,
    "end_token": 88,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      15003,
      834,
      2446,
      329,
      4238,
      2890,
      1398,
      10245
    ],
    "label": "best_practice",
    "reason": "Use of __init__ method for initializing class instances"
  },
  {
    "line": 32,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Encapsulating initialization logic in a separate method",
    "confidence": 1.0,
    "tokens": [
      37811
    ],
    "start_token": 88,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      8306,
      37588,
      9156,
      287,
      257,
      4553,
      2446
    ],
    "label": "best_practice",
    "reason": "Encapsulating initialization logic in a separate method"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize instance variables in a reset method to ensure consistent state",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 89,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      257,
      13259,
      2446,
      284,
      4155,
      6414,
      1181
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in a reset method to ensure consistent state"
  },
  {
    "line": 35,
    "text": "class AccumulatedInfo:",
    "annotation": "\u2705 Best Practice: Initialize instance variables in a reset method to ensure consistent state",
    "confidence": 0.5,
    "tokens": [
      4871,
      6366,
      388,
      4817,
      12360,
      25
    ],
    "start_token": 89,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      257,
      13259,
      2446,
      284,
      4155,
      6414,
      1181
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in a reset method to ensure consistent state"
  },
  {
    "line": 37,
    "text": "    accumulated trading info, including accumulated return/cost/turnover",
    "annotation": "\u2705 Best Practice: Initialize instance variables in a reset method to ensure consistent state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      22425,
      7313,
      7508,
      11,
      1390,
      22425,
      1441,
      14,
      15805,
      14,
      15344,
      2502
    ],
    "start_token": 95,
    "end_token": 110,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      257,
      13259,
      2446,
      284,
      4155,
      6414,
      1181
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in a reset method to ensure consistent state"
  },
  {
    "line": 36,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and usage of the method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 110,
    "end_token": 114,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and usage of the method"
  },
  {
    "line": 38,
    "text": "    AccumulatedInfo should be shared across different levels",
    "annotation": "\u2705 Best Practice: Ensure 'self.rtn' is initialized in the class constructor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6366,
      388,
      4817,
      12360,
      815,
      307,
      4888,
      1973,
      1180,
      2974
    ],
    "start_token": 114,
    "end_token": 127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      705,
      944,
      13,
      17034,
      77,
      6,
      318,
      23224,
      287,
      262,
      1398,
      23772
    ],
    "label": "best_practice",
    "reason": "Ensure 'self.rtn' is initialized in the class constructor"
  },
  {
    "line": 39,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of '+=' operator indicates accumulation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 127,
    "end_token": 131,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      10,
      11639,
      10088,
      9217,
      24106,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of '+=' operator indicates accumulation pattern"
  },
  {
    "line": 38,
    "text": "    AccumulatedInfo should be shared across different levels",
    "annotation": "\u2705 Best Practice: Type hint for 'value' improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6366,
      388,
      4817,
      12360,
      815,
      307,
      4888,
      1973,
      1180,
      2974
    ],
    "start_token": 131,
    "end_token": 144,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      705,
      8367,
      6,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hint for 'value' improves code readability and maintainability"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method modifies an instance attribute, indicating a state change",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 144,
    "end_token": 144,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      953,
      6945,
      281,
      4554,
      11688,
      11,
      12739,
      257,
      1181,
      1487
    ],
    "label": "ml_signal",
    "reason": "Method modifies an instance attribute, indicating a state change"
  },
  {
    "line": 41,
    "text": "    def __init__(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for floating-point precision issues when adding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 144,
    "end_token": 157,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      12462,
      12,
      4122,
      15440,
      2428,
      618,
      4375
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for floating-point precision issues when adding"
  },
  {
    "line": 41,
    "text": "    def __init__(self) -> None:",
    "annotation": "\u2705 Best Practice: Type hinting for 'value' and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 157,
    "end_token": 170,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      705,
      8367,
      6,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for 'value' and return type improves code readability and maintainability."
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying 'self.to' without validation could lead to unexpected behavior if 'value' is not as expected.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 170,
    "end_token": 170,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      705,
      944,
      13,
      1462,
      6,
      1231,
      21201,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      705,
      8367,
      6,
      318,
      407,
      355,
      2938,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying 'self.to' without validation could lead to unexpected behavior if 'value' is not as expected."
  },
  {
    "line": 44,
    "text": "    def reset(self) -> None:",
    "annotation": "\u2705 Best Practice: Using @property decorator for getter methods enhances encapsulation and provides a cleaner interface.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      13259,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 170,
    "end_token": 181,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      5050,
      32479,
      32652,
      1741,
      290,
      3769,
      257,
      21723,
      7071,
      13
    ],
    "label": "best_practice",
    "reason": "Using @property decorator for getter methods enhances encapsulation and provides a cleaner interface."
  },
  {
    "line": 44,
    "text": "    def reset(self) -> None:",
    "annotation": "\u2705 Best Practice: Consider renaming the method to follow Python's naming conventions, such as `get_return_value`.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      13259,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 181,
    "end_token": 192,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8851,
      3723,
      262,
      2446,
      284,
      1061,
      11361,
      338,
      19264,
      21396,
      11,
      884,
      355,
      4600,
      1136,
      62,
      7783,
      62,
      8367,
      44646
    ],
    "label": "best_practice",
    "reason": "Consider renaming the method to follow Python's naming conventions, such as `get_return_value`."
  },
  {
    "line": 47,
    "text": "        self.to: float = 0.0  # accumulated turnover",
    "annotation": "\u2705 Best Practice: Using @property decorator is a good practice for creating read-only attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1462,
      25,
      12178,
      796,
      657,
      13,
      15,
      220,
      1303,
      22425,
      25079
    ],
    "start_token": 192,
    "end_token": 212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      318,
      257,
      922,
      3357,
      329,
      4441,
      1100,
      12,
      8807,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Using @property decorator is a good practice for creating read-only attributes."
  },
  {
    "line": 47,
    "text": "        self.to: float = 0.0  # accumulated turnover",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1462,
      25,
      12178,
      796,
      657,
      13,
      15,
      220,
      1303,
      22425,
      25079
    ],
    "start_token": 212,
    "end_token": 232,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 50,
    "text": "        self.rtn += value",
    "annotation": "\u2705 Best Practice: Use of @property decorator for getter method is a Pythonic way to access attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17034,
      77,
      15853,
      1988
    ],
    "start_token": 232,
    "end_token": 245,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      2446,
      318,
      257,
      11361,
      291,
      835,
      284,
      1895,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for getter method is a Pythonic way to access attributes"
  },
  {
    "line": 50,
    "text": "        self.rtn += value",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the method's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      17034,
      77,
      15853,
      1988
    ],
    "start_token": 245,
    "end_token": 258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the method's purpose and behavior."
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'self.to' is not properly validated or sanitized.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 258,
    "end_token": 258,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      944,
      13,
      1462,
      6,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'self.to' is not properly validated or sanitized."
  },
  {
    "line": 52,
    "text": "    def add_cost(self, value: float) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes in methods can indicate object-oriented design patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      751,
      62,
      15805,
      7,
      944,
      11,
      1988,
      25,
      12178,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 258,
    "end_token": 275,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      287,
      5050,
      460,
      7603,
      2134,
      12,
      17107,
      1486,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes in methods can indicate object-oriented design patterns."
  },
  {
    "line": 58,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Class docstring provides context and explanation for the class usage and behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 275,
    "end_token": 280,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      4732,
      290,
      7468,
      329,
      262,
      1398,
      8748,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides context and explanation for the class usage and behavior."
  },
  {
    "line": 67,
    "text": "    def get_turnover(self) -> float:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using mutable default arguments like {} can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      15344,
      2502,
      7,
      944,
      8,
      4613,
      12178,
      25
    ],
    "start_token": 280,
    "end_token": 294,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4517,
      540,
      4277,
      7159,
      588,
      23884,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using mutable default arguments like {} can lead to unexpected behavior."
  },
  {
    "line": 84,
    "text": "        benchmark_config: dict = {},",
    "annotation": "\u2705 Best Practice: Use explicit type annotations for class attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      18335,
      62,
      11250,
      25,
      8633,
      796,
      1391,
      5512
    ],
    "start_token": 294,
    "end_token": 309,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      7952,
      2099,
      37647,
      329,
      1398,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Use explicit type annotations for class attributes."
  },
  {
    "line": 87,
    "text": "    ) -> None:",
    "annotation": "\u2705 Best Practice: Use explicit type annotations for class attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 309,
    "end_token": 316,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      7952,
      2099,
      37647,
      329,
      1398,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Use explicit type annotations for class attributes."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with multiple parameters, indicating a complex initialization pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 316,
    "end_token": 316,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      3294,
      10007,
      11,
      12739,
      257,
      3716,
      37588,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with multiple parameters, indicating a complex initialization pattern."
  },
  {
    "line": 88,
    "text": "        \"\"\"the trade account of backtest.",
    "annotation": "\u2705 Best Practice: Use of type annotations for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1169,
      3292,
      1848,
      286,
      736,
      9288,
      13
    ],
    "start_token": 316,
    "end_token": 331,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for function parameters and return type"
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of a class attribute with a parameter value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 331,
    "end_token": 331,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      257,
      1398,
      11688,
      351,
      257,
      11507,
      1988
    ],
    "label": "ml_signal",
    "reason": "Initialization of a class attribute with a parameter value"
  },
  {
    "line": 101,
    "text": "            initial stocks with parameters amount and price,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a factory function to initialize an instance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4238,
      14420,
      351,
      10007,
      2033,
      290,
      2756,
      11
    ],
    "start_token": 331,
    "end_token": 350,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      8860,
      2163,
      284,
      41216,
      281,
      4554
    ],
    "label": "ml_signal",
    "reason": "Use of a factory function to initialize an instance"
  },
  {
    "line": 103,
    "text": "            by default {}.",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of a class attribute with a new instance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      4277,
      23884,
      13
    ],
    "start_token": 350,
    "end_token": 365,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      257,
      1398,
      11688,
      351,
      257,
      649,
      4554
    ],
    "label": "ml_signal",
    "reason": "Initialization of a class attribute with a new instance"
  },
  {
    "line": 104,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of Optional for attributes that can be None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 365,
    "end_token": 373,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      32233,
      329,
      12608,
      326,
      460,
      307,
      6045
    ],
    "label": "best_practice",
    "reason": "Use of Optional for attributes that can be None"
  },
  {
    "line": 107,
    "text": "        self._port_metr_enabled = port_metr_enabled",
    "annotation": "\u2705 Best Practice: Use of Dict with specific key and value types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      634,
      62,
      4164,
      81,
      62,
      25616,
      796,
      2493,
      62,
      4164,
      81,
      62,
      25616
    ],
    "start_token": 373,
    "end_token": 395,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      360,
      713,
      351,
      2176,
      1994,
      290,
      1988,
      3858
    ],
    "label": "best_practice",
    "reason": "Use of Dict with specific key and value types"
  },
  {
    "line": 109,
    "text": "        self.init_vars(init_cash, position_dict, freq, benchmark_config)",
    "annotation": "\ud83e\udde0 ML Signal: Method call with keyword arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15003,
      62,
      85,
      945,
      7,
      15003,
      62,
      30350,
      11,
      2292,
      62,
      11600,
      11,
      2030,
      80,
      11,
      18335,
      62,
      11250,
      8
    ],
    "start_token": 395,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      21179,
      7159
    ],
    "label": "ml_signal",
    "reason": "Method call with keyword arguments"
  },
  {
    "line": 103,
    "text": "            by default {}.",
    "annotation": "\u2705 Best Practice: Method name is descriptive and follows naming conventions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      4277,
      23884,
      13
    ],
    "start_token": 424,
    "end_token": 439,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      318,
      35644,
      290,
      5679,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Method name is descriptive and follows naming conventions"
  },
  {
    "line": 108,
    "text": "        self.benchmark_config: dict = {}  # avoid no attribute error",
    "annotation": "\ud83e\udde0 ML Signal: Returns a boolean indicating a feature flag or configuration state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      26968,
      4102,
      62,
      11250,
      25,
      8633,
      796,
      23884,
      220,
      1303,
      3368,
      645,
      11688,
      4049
    ],
    "start_token": 439,
    "end_token": 462,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      25131,
      12739,
      257,
      3895,
      6056,
      393,
      8398,
      1181
    ],
    "label": "ml_signal",
    "reason": "Returns a boolean indicating a feature flag or configuration state"
  },
  {
    "line": 109,
    "text": "        self.init_vars(init_cash, position_dict, freq, benchmark_config)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType if self._port_metr_enabled is not initialized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15003,
      62,
      85,
      945,
      7,
      15003,
      62,
      30350,
      11,
      2292,
      62,
      11600,
      11,
      2030,
      80,
      11,
      18335,
      62,
      11250,
      8
    ],
    "start_token": 462,
    "end_token": 491,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      611,
      2116,
      13557,
      634,
      62,
      4164,
      81,
      62,
      25616,
      318,
      407,
      23224
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType if self._port_metr_enabled is not initialized"
  },
  {
    "line": 109,
    "text": "        self.init_vars(init_cash, position_dict, freq, benchmark_config)",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests a reset operation, which is a common pattern in stateful systems.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      15003,
      62,
      85,
      945,
      7,
      15003,
      62,
      30350,
      11,
      2292,
      62,
      11600,
      11,
      2030,
      80,
      11,
      18335,
      62,
      11250,
      8
    ],
    "start_token": 491,
    "end_token": 520,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      257,
      13259,
      4905,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      1181,
      913,
      3341,
      13
    ],
    "label": "ml_signal",
    "reason": "Method name suggests a reset operation, which is a common pattern in stateful systems."
  },
  {
    "line": 111,
    "text": "    def init_vars(self, init_cash: float, position_dict: dict, freq: str, benchmark_config: dict) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a feature flag or configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      62,
      85,
      945,
      7,
      944,
      11,
      2315,
      62,
      30350,
      25,
      12178,
      11,
      2292,
      62,
      11600,
      25,
      8633,
      11,
      2030,
      80,
      25,
      965,
      11,
      18335,
      62,
      11250,
      25,
      8633,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 520,
    "end_token": 557,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      3895,
      6056,
      393,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a feature flag or configuration."
  },
  {
    "line": 113,
    "text": "        # - you will see a shallow copy instead of deepcopy in the NestedExecutor;",
    "annotation": "\u2705 Best Practice: Initializing or resetting a dictionary to clear previous state.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      532,
      345,
      481,
      766,
      257,
      19337,
      4866,
      2427,
      286,
      2769,
      30073,
      287,
      262,
      399,
      7287,
      23002,
      38409,
      26
    ],
    "start_token": 557,
    "end_token": 583,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      393,
      13259,
      889,
      257,
      22155,
      284,
      1598,
      2180,
      1181,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing or resetting a dictionary to clear previous state."
  },
  {
    "line": 115,
    "text": "        self.current_position: BasePosition = init_instance_by_config(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if \"start_time\" is not in benchmark_config.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      14421,
      62,
      9150,
      25,
      7308,
      26545,
      796,
      2315,
      62,
      39098,
      62,
      1525,
      62,
      11250,
      7
    ],
    "start_token": 583,
    "end_token": 607,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      366,
      9688,
      62,
      2435,
      1,
      318,
      407,
      287,
      18335,
      62,
      11250,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if \"start_time\" is not in benchmark_config."
  },
  {
    "line": 118,
    "text": "                \"kwargs\": {",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to fill or update stock values, indicating data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      46265,
      22046,
      1298,
      1391
    ],
    "start_token": 607,
    "end_token": 627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      6070,
      393,
      4296,
      4283,
      3815,
      11,
      12739,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a method to fill or update stock values, indicating data processing."
  },
  {
    "line": 118,
    "text": "                \"kwargs\": {",
    "annotation": "\u2705 Best Practice: Reinitializing an object to ensure a fresh state.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      46265,
      22046,
      1298,
      1391
    ],
    "start_token": 627,
    "end_token": 647,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      22299,
      6847,
      2890,
      281,
      2134,
      284,
      4155,
      257,
      4713,
      1181,
      13
    ],
    "label": "best_practice",
    "reason": "Reinitializing an object to ensure a fresh state."
  },
  {
    "line": 127,
    "text": "        # 2) following variables are not shared between layers",
    "annotation": "\u2705 Best Practice: Check if 'freq' is not None before assignment to avoid unnecessary operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      362,
      8,
      1708,
      9633,
      389,
      407,
      4888,
      1022,
      11685
    ],
    "start_token": 647,
    "end_token": 664,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      19503,
      80,
      6,
      318,
      407,
      6045,
      878,
      16237,
      284,
      3368,
      13114,
      4560
    ],
    "label": "best_practice",
    "reason": "Check if 'freq' is not None before assignment to avoid unnecessary operations"
  },
  {
    "line": 130,
    "text": "        self.reset(freq=freq, benchmark_config=benchmark_config)",
    "annotation": "\u2705 Best Practice: Check if 'benchmark_config' is not None before assignment to avoid unnecessary operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      42503,
      7,
      19503,
      80,
      28,
      19503,
      80,
      11,
      18335,
      62,
      11250,
      28,
      26968,
      4102,
      62,
      11250,
      8
    ],
    "start_token": 664,
    "end_token": 690,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      26968,
      4102,
      62,
      11250,
      6,
      318,
      407,
      6045,
      878,
      16237,
      284,
      3368,
      13114,
      4560
    ],
    "label": "best_practice",
    "reason": "Check if 'benchmark_config' is not None before assignment to avoid unnecessary operations"
  },
  {
    "line": 133,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check if 'port_metr_enabled' is not None before assignment to avoid unnecessary operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 690,
    "end_token": 698,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      634,
      62,
      4164,
      81,
      62,
      25616,
      6,
      318,
      407,
      6045,
      878,
      16237,
      284,
      3368,
      13114,
      4560
    ],
    "label": "best_practice",
    "reason": "Check if 'port_metr_enabled' is not None before assignment to avoid unnecessary operations"
  },
  {
    "line": 136,
    "text": "        return self._port_metr_enabled and not self.current_position.skip_update()",
    "annotation": "\ud83e\udde0 ML Signal: Method call with instance variables, indicating a pattern of resetting or reinitializing state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      634,
      62,
      4164,
      81,
      62,
      25616,
      290,
      407,
      2116,
      13,
      14421,
      62,
      9150,
      13,
      48267,
      62,
      19119,
      3419
    ],
    "start_token": 698,
    "end_token": 726,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      4554,
      9633,
      11,
      12739,
      257,
      3912,
      286,
      13259,
      889,
      393,
      6865,
      6847,
      2890,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method call with instance variables, indicating a pattern of resetting or reinitializing state"
  },
  {
    "line": 134,
    "text": "        Is portfolio-based metrics enabled.",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1148,
      15320,
      12,
      3106,
      20731,
      9343,
      13
    ],
    "start_token": 726,
    "end_token": 740,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 136,
    "text": "        return self._port_metr_enabled and not self.current_position.skip_update()",
    "annotation": "\u2705 Best Practice: Consider using type hints for instance variables like `hist_positions`",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      634,
      62,
      4164,
      81,
      62,
      25616,
      290,
      407,
      2116,
      13,
      14421,
      62,
      9150,
      13,
      48267,
      62,
      19119,
      3419
    ],
    "start_token": 740,
    "end_token": 768,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      2099,
      20269,
      329,
      4554,
      9633,
      588,
      4600,
      10034,
      62,
      1930,
      1756,
      63
    ],
    "label": "best_practice",
    "reason": "Consider using type hints for instance variables like `hist_positions`"
  },
  {
    "line": 136,
    "text": "        return self._port_metr_enabled and not self.current_position.skip_update()",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      634,
      62,
      4164,
      81,
      62,
      25616,
      290,
      407,
      2116,
      13,
      14421,
      62,
      9150,
      13,
      48267,
      62,
      19119,
      3419
    ],
    "start_token": 768,
    "end_token": 796,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 138,
    "text": "    def reset_report(self, freq: str, benchmark_config: dict) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object attribute, indicating object-oriented design",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      13259,
      62,
      13116,
      7,
      944,
      11,
      2030,
      80,
      25,
      965,
      11,
      18335,
      62,
      11250,
      25,
      8633,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 796,
    "end_token": 820,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134,
      11688,
      11,
      12739,
      2134,
      12,
      17107,
      1486
    ],
    "label": "ml_signal",
    "reason": "Method call on an object attribute, indicating object-oriented design"
  },
  {
    "line": 139,
    "text": "        # portfolio related metrics",
    "annotation": "\ud83e\udde0 ML Signal: Method updates internal state based on order details, useful for learning trading behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      15320,
      3519,
      20731
    ],
    "start_token": 820,
    "end_token": 831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      5387,
      1181,
      1912,
      319,
      1502,
      3307,
      11,
      4465,
      329,
      4673,
      7313,
      4069
    ],
    "label": "ml_signal",
    "reason": "Method updates internal state based on order details, useful for learning trading behavior"
  },
  {
    "line": 141,
    "text": "            # NOTE:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a feature flag, indicating feature usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25
    ],
    "start_token": 831,
    "end_token": 845,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      3895,
      6056,
      11,
      12739,
      3895,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a feature flag, indicating feature usage patterns"
  },
  {
    "line": 143,
    "text": "            self.portfolio_metrics = PortfolioMetrics(freq, benchmark_config)",
    "annotation": "\ud83e\udde0 ML Signal: Tracking turnover, indicative of trading volume behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      634,
      13652,
      62,
      4164,
      10466,
      796,
      4347,
      13652,
      9171,
      10466,
      7,
      19503,
      80,
      11,
      18335,
      62,
      11250,
      8
    ],
    "start_token": 845,
    "end_token": 876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      25079,
      11,
      29105,
      286,
      7313,
      6115,
      4069
    ],
    "label": "ml_signal",
    "reason": "Tracking turnover, indicative of trading volume behavior"
  },
  {
    "line": 145,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Tracking cost, indicative of transaction cost behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 876,
    "end_token": 876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      1575,
      11,
      29105,
      286,
      8611,
      1575,
      4069
    ],
    "label": "ml_signal",
    "reason": "Tracking cost, indicative of transaction cost behavior"
  },
  {
    "line": 147,
    "text": "            # The frequency of account may not align with the trading frequency.",
    "annotation": "\u2705 Best Practice: Calculate trade_amount once to avoid repeated calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      8373,
      286,
      1848,
      743,
      407,
      10548,
      351,
      262,
      7313,
      8373,
      13
    ],
    "start_token": 876,
    "end_token": 900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      378,
      3292,
      62,
      17287,
      1752,
      284,
      3368,
      5100,
      16765
    ],
    "label": "best_practice",
    "reason": "Calculate trade_amount once to avoid repeated calculations"
  },
  {
    "line": 149,
    "text": "            if isinstance(self.benchmark_config, dict) and \"start_time\" in self.benchmark_config:",
    "annotation": "\ud83e\udde0 ML Signal: Different logic paths for buy/sell orders, useful for learning trading strategies",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      944,
      13,
      26968,
      4102,
      62,
      11250,
      11,
      8633,
      8,
      290,
      366,
      9688,
      62,
      2435,
      1,
      287,
      2116,
      13,
      26968,
      4102,
      62,
      11250,
      25
    ],
    "start_token": 900,
    "end_token": 938,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      9156,
      13532,
      329,
      2822,
      14,
      7255,
      6266,
      11,
      4465,
      329,
      4673,
      7313,
      10064
    ],
    "label": "ml_signal",
    "reason": "Different logic paths for buy/sell orders, useful for learning trading strategies"
  },
  {
    "line": 151,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if trade_price is zero",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 938,
    "end_token": 938,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      3292,
      62,
      20888,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if trade_price is zero"
  },
  {
    "line": 153,
    "text": "        self.indicator = Indicator()",
    "annotation": "\ud83e\udde0 ML Signal: Tracking profit for sell orders, indicative of trading outcome",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      521,
      26407,
      796,
      1423,
      26407,
      3419
    ],
    "start_token": 938,
    "end_token": 953,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      7630,
      329,
      3677,
      6266,
      11,
      29105,
      286,
      7313,
      8055
    ],
    "label": "ml_signal",
    "reason": "Tracking profit for sell orders, indicative of trading outcome"
  },
  {
    "line": 154,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Different logic paths for buy/sell orders, useful for learning trading strategies",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 953,
    "end_token": 953,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      9156,
      13532,
      329,
      2822,
      14,
      7255,
      6266,
      11,
      4465,
      329,
      4673,
      7313,
      10064
    ],
    "label": "ml_signal",
    "reason": "Different logic paths for buy/sell orders, useful for learning trading strategies"
  },
  {
    "line": 157,
    "text": "    ) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if trade_price is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 953,
    "end_token": 960,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      3292,
      62,
      20888,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if trade_price is zero"
  },
  {
    "line": 158,
    "text": "        \"\"\"reset freq and report of account",
    "annotation": "\ud83e\udde0 ML Signal: Tracking profit for buy orders, indicative of trading outcome",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      42503,
      2030,
      80,
      290,
      989,
      286,
      1848
    ],
    "start_token": 960,
    "end_token": 975,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      7630,
      329,
      2822,
      6266,
      11,
      29105,
      286,
      7313,
      8055
    ],
    "label": "ml_signal",
    "reason": "Tracking profit for buy orders, indicative of trading outcome"
  },
  {
    "line": 150,
    "text": "                self.current_position.fill_stock_value(self.benchmark_config[\"start_time\"], self.freq)",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with specific types and return type can be used to infer method behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      14421,
      62,
      9150,
      13,
      20797,
      62,
      13578,
      62,
      8367,
      7,
      944,
      13,
      26968,
      4102,
      62,
      11250,
      14692,
      9688,
      62,
      2435,
      33116,
      2116,
      13,
      19503,
      80,
      8
    ],
    "start_token": 975,
    "end_token": 1018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      2176,
      3858,
      290,
      1441,
      2099,
      460,
      307,
      973,
      284,
      13249,
      2446,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Method signature with specific types and return type can be used to infer method behavior."
  },
  {
    "line": 154,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on order direction can indicate trading strategy patterns.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1018,
    "end_token": 1018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1502,
      4571,
      460,
      7603,
      7313,
      4811,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on order direction can indicate trading strategy patterns."
  },
  {
    "line": 156,
    "text": "        self, freq: str | None = None, benchmark_config: dict | None = None, port_metr_enabled: bool | None = None",
    "annotation": "\ud83e\udde0 ML Signal: Method call sequence can indicate order of operations in trading logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11,
      2030,
      80,
      25,
      965,
      930,
      6045,
      796,
      6045,
      11,
      18335,
      62,
      11250,
      25,
      8633,
      930,
      6045,
      796,
      6045,
      11,
      2493,
      62,
      4164,
      81,
      62,
      25616,
      25,
      20512,
      930,
      6045,
      796,
      6045
    ],
    "start_token": 1018,
    "end_token": 1058,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      8379,
      460,
      7603,
      1502,
      286,
      4560,
      287,
      7313,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call sequence can indicate order of operations in trading logic."
  },
  {
    "line": 158,
    "text": "        \"\"\"reset freq and report of account",
    "annotation": "\ud83e\udde0 ML Signal: Different method call sequence for different order directions can indicate strategy variations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      42503,
      2030,
      80,
      290,
      989,
      286,
      1848
    ],
    "start_token": 1058,
    "end_token": 1073,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      2446,
      869,
      8379,
      329,
      1180,
      1502,
      11678,
      460,
      7603,
      4811,
      13991,
      13
    ],
    "label": "ml_signal",
    "reason": "Different method call sequence for different order directions can indicate strategy variations."
  },
  {
    "line": 167,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1073,
    "end_token": 1081,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 170,
    "text": "        if benchmark_config is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of stocks to update their positions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18335,
      62,
      11250,
      318,
      407,
      6045,
      25
    ],
    "start_token": 1081,
    "end_token": 1096,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      14420,
      284,
      4296,
      511,
      6116
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of stocks to update their positions"
  },
  {
    "line": 173,
    "text": "            self._port_metr_enabled = port_metr_enabled",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a stock is suspended during a trade period",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      634,
      62,
      4164,
      81,
      62,
      25616,
      796,
      2493,
      62,
      4164,
      81,
      62,
      25616
    ],
    "start_token": 1096,
    "end_token": 1122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      4283,
      318,
      9951,
      1141,
      257,
      3292,
      2278
    ],
    "label": "ml_signal",
    "reason": "Checking if a stock is suspended during a trade period"
  },
  {
    "line": 176,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Fetching and casting the closing price of a stock",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1122,
    "end_token": 1122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      290,
      13092,
      262,
      9605,
      2756,
      286,
      257,
      4283
    ],
    "label": "ml_signal",
    "reason": "Fetching and casting the closing price of a stock"
  },
  {
    "line": 178,
    "text": "        return self.hist_positions",
    "annotation": "\ud83e\udde0 ML Signal: Updating stock price in the current position",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      10034,
      62,
      1930,
      1756
    ],
    "start_token": 1122,
    "end_token": 1136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      4283,
      2756,
      287,
      262,
      1459,
      2292
    ],
    "label": "ml_signal",
    "reason": "Updating stock price in the current position"
  },
  {
    "line": 180,
    "text": "    def get_cash(self) -> float:",
    "annotation": "\ud83e\udde0 ML Signal: Updating the count of all stocks in the current position",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      30350,
      7,
      944,
      8,
      4613,
      12178,
      25
    ],
    "start_token": 1136,
    "end_token": 1149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      262,
      954,
      286,
      477,
      14420,
      287,
      262,
      1459,
      2292
    ],
    "label": "ml_signal",
    "reason": "Updating the count of all stocks in the current position"
  },
  {
    "line": 178,
    "text": "        return self.hist_positions",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      10034,
      62,
      1930,
      1756
    ],
    "start_token": 1149,
    "end_token": 1163,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 185,
    "text": "            # update turnover",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining to retrieve latest values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      25079
    ],
    "start_token": 1163,
    "end_token": 1177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      284,
      19818,
      3452,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining to retrieve latest values"
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of current position value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1177,
    "end_token": 1177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1459,
      2292,
      1988
    ],
    "label": "ml_signal",
    "reason": "Calculation of current position value"
  },
  {
    "line": 191,
    "text": "            trade_amount = trade_val / trade_price",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of current stock value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      17287,
      796,
      3292,
      62,
      2100,
      1220,
      3292,
      62,
      20888
    ],
    "start_token": 1177,
    "end_token": 1199,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1459,
      4283,
      1988
    ],
    "label": "ml_signal",
    "reason": "Calculation of current stock value"
  },
  {
    "line": 192,
    "text": "            if order.direction == Order.SELL:  # 0 for sell",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of earnings based on account value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1502,
      13,
      37295,
      6624,
      8284,
      13,
      5188,
      3069,
      25,
      220,
      1303,
      657,
      329,
      3677
    ],
    "start_token": 1199,
    "end_token": 1225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      12042,
      1912,
      319,
      1848,
      1988
    ],
    "label": "ml_signal",
    "reason": "Calculation of earnings based on account value"
  },
  {
    "line": 192,
    "text": "            if order.direction == Order.SELL:  # 0 for sell",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of cost difference",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1502,
      13,
      37295,
      6624,
      8284,
      13,
      5188,
      3069,
      25,
      220,
      1303,
      657,
      329,
      3677
    ],
    "start_token": 1225,
    "end_token": 1251,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1575,
      3580
    ],
    "label": "ml_signal",
    "reason": "Calculation of cost difference"
  },
  {
    "line": 192,
    "text": "            if order.direction == Order.SELL:  # 0 for sell",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of turnover difference",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1502,
      13,
      37295,
      6624,
      8284,
      13,
      5188,
      3069,
      25,
      220,
      1303,
      657,
      329,
      3677
    ],
    "start_token": 1251,
    "end_token": 1277,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      25079,
      3580
    ],
    "label": "ml_signal",
    "reason": "Calculation of turnover difference"
  },
  {
    "line": 199,
    "text": "                # profit in buy order is to make rtn is consistent with earning at the end of bar",
    "annotation": "\ud83e\udde0 ML Signal: Update of portfolio metrics with calculated values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      7630,
      287,
      2822,
      1502,
      318,
      284,
      787,
      374,
      34106,
      318,
      6414,
      351,
      13748,
      379,
      262,
      886,
      286,
      2318
    ],
    "start_token": 1277,
    "end_token": 1311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10133,
      286,
      15320,
      20731,
      351,
      10488,
      3815
    ],
    "label": "ml_signal",
    "reason": "Update of portfolio metrics with calculated values"
  },
  {
    "line": 204,
    "text": "        if self.current_position.skip_update():",
    "annotation": "\ud83e\udde0 ML Signal: Accessing cash position",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      14421,
      62,
      9150,
      13,
      48267,
      62,
      19119,
      33529
    ],
    "start_token": 1311,
    "end_token": 1329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      5003,
      2292
    ],
    "label": "ml_signal",
    "reason": "Accessing cash position"
  },
  {
    "line": 206,
    "text": "            # updating order for infinite position is meaningless",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of return rate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      19698,
      1502,
      329,
      15541,
      2292,
      318,
      24513
    ],
    "start_token": 1329,
    "end_token": 1348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1441,
      2494
    ],
    "label": "ml_signal",
    "reason": "Calculation of return rate"
  },
  {
    "line": 208,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of total turnover in metrics update",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1348,
    "end_token": 1348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2472,
      25079,
      287,
      20731,
      4296
    ],
    "label": "ml_signal",
    "reason": "Use of total turnover in metrics update"
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of turnover rate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1348,
    "end_token": 1360,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      25079,
      2494
    ],
    "label": "ml_signal",
    "reason": "Calculation of turnover rate"
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\ud83e\udde0 ML Signal: Use of total cost in metrics update",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1360,
    "end_token": 1372,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2472,
      1575,
      287,
      20731,
      4296
    ],
    "label": "ml_signal",
    "reason": "Use of total cost in metrics update"
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of cost rate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1372,
    "end_token": 1384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1575,
      2494
    ],
    "label": "ml_signal",
    "reason": "Calculation of cost rate"
  },
  {
    "line": 216,
    "text": "            # update current position",
    "annotation": "\ud83e\udde0 ML Signal: Use of stock value in metrics update",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      1459,
      2292
    ],
    "start_token": 1384,
    "end_token": 1399,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4283,
      1988,
      287,
      20731,
      4296
    ],
    "label": "ml_signal",
    "reason": "Use of stock value in metrics update"
  },
  {
    "line": 206,
    "text": "            # updating order for infinite position is meaningless",
    "annotation": "\ud83e\udde0 ML Signal: Method updates historical positions, indicating a pattern of tracking changes over time.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      19698,
      1502,
      329,
      15541,
      2292,
      318,
      24513
    ],
    "start_token": 1399,
    "end_token": 1418,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5992,
      6754,
      6116,
      11,
      12739,
      257,
      3912,
      286,
      9646,
      2458,
      625,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "Method updates historical positions, indicating a pattern of tracking changes over time."
  },
  {
    "line": 208,
    "text": "",
    "annotation": "\u2705 Best Practice: Storing calculated value in a variable for reuse improves readability and efficiency.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1418,
    "end_token": 1418,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      10488,
      1988,
      287,
      257,
      7885,
      329,
      32349,
      19575,
      1100,
      1799,
      290,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Storing calculated value in a variable for reuse improves readability and efficiency."
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\ud83e\udde0 ML Signal: Updating a dictionary with calculated values shows a pattern of dynamic data management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1418,
    "end_token": 1430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      257,
      22155,
      351,
      10488,
      3815,
      2523,
      257,
      3912,
      286,
      8925,
      1366,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Updating a dictionary with calculated values shows a pattern of dynamic data management."
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update weights suggests a pattern of maintaining balanced positions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1430,
    "end_token": 1442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      19590,
      5644,
      257,
      3912,
      286,
      10941,
      12974,
      6116,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to update weights suggests a pattern of maintaining balanced positions."
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using deepcopy can be resource-intensive; ensure it's necessary for the use case.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1442,
    "end_token": 1454,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      2769,
      30073,
      460,
      307,
      8271,
      12,
      38096,
      26,
      4155,
      340,
      338,
      3306,
      329,
      262,
      779,
      1339,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using deepcopy can be resource-intensive; ensure it's necessary for the use case."
  },
  {
    "line": 210,
    "text": "        # then update current position",
    "annotation": "\ud83e\udde0 ML Signal: Storing deep copies of positions indicates a pattern of preserving state over time.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      788,
      4296,
      1459,
      2292
    ],
    "start_token": 1454,
    "end_token": 1466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2769,
      9088,
      286,
      6116,
      9217,
      257,
      3912,
      286,
      23934,
      1181,
      625,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing deep copies of positions indicates a pattern of preserving state over time."
  },
  {
    "line": 221,
    "text": "            # deal order, then update state",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1730,
      1502,
      11,
      788,
      4296,
      1181
    ],
    "start_token": 1466,
    "end_token": 1484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose"
  },
  {
    "line": 223,
    "text": "            self._update_state_from_order(order, trade_val, cost, trade_price)",
    "annotation": "\u2705 Best Practice: Resetting state before processing ensures a clean slate",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      19119,
      62,
      5219,
      62,
      6738,
      62,
      2875,
      7,
      2875,
      11,
      3292,
      62,
      2100,
      11,
      1575,
      11,
      3292,
      62,
      20888,
      8
    ],
    "start_token": 1484,
    "end_token": 1517,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      1181,
      878,
      7587,
      19047,
      257,
      3424,
      27589
    ],
    "label": "best_practice",
    "reason": "Resetting state before processing ensures a clean slate"
  },
  {
    "line": 226,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on 'atomic' flag indicates different processing paths",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1517,
    "end_token": 1526,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      705,
      47116,
      6,
      6056,
      9217,
      1180,
      7587,
      13532
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on 'atomic' flag indicates different processing paths"
  },
  {
    "line": 226,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Use of multiple parameters in method call indicates complex decision-making",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1526,
    "end_token": 1535,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3294,
      10007,
      287,
      2446,
      869,
      9217,
      3716,
      2551,
      12,
      8601
    ],
    "label": "ml_signal",
    "reason": "Use of multiple parameters in method call indicates complex decision-making"
  },
  {
    "line": 235,
    "text": "        # NOTE: updating position does not only serve portfolio metrics, it also serve the strategy",
    "annotation": "\ud83e\udde0 ML Signal: Method call with multiple parameters suggests importance of these variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      19698,
      2292,
      857,
      407,
      691,
      4691,
      15320,
      20731,
      11,
      340,
      635,
      4691,
      262,
      4811
    ],
    "start_token": 1535,
    "end_token": 1559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      3294,
      10007,
      5644,
      6817,
      286,
      777,
      9633
    ],
    "label": "ml_signal",
    "reason": "Method call with multiple parameters suggests importance of these variables"
  },
  {
    "line": 235,
    "text": "        # NOTE: updating position does not only serve portfolio metrics, it also serve the strategy",
    "annotation": "\u2705 Best Practice: Recording state or results at the end of processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      19698,
      2292,
      857,
      407,
      691,
      4691,
      15320,
      20731,
      11,
      340,
      635,
      4691,
      262,
      4811
    ],
    "start_token": 1559,
    "end_token": 1583,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      43905,
      1181,
      393,
      2482,
      379,
      262,
      886,
      286,
      7587
    ],
    "label": "best_practice",
    "reason": "Recording state or results at the end of processing"
  },
  {
    "line": 247,
    "text": "            # NOTE: updating bar_count does not only serve portfolio metrics, it also serve the strategy",
    "annotation": "\u2705 Best Practice: Docstring provides detailed parameter descriptions and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      19698,
      2318,
      62,
      9127,
      857,
      407,
      691,
      4691,
      15320,
      20731,
      11,
      340,
      635,
      4691,
      262,
      4811
    ],
    "start_token": 1583,
    "end_token": 1613,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      11507,
      16969,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed parameter descriptions and usage."
  },
  {
    "line": 277,
    "text": "        # and don't add init account state into portfolio_metrics, due to we don't have excess return in those days.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for None comparison issues with mutable default arguments.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      290,
      836,
      470,
      751,
      2315,
      1848,
      1181,
      656,
      15320,
      62,
      4164,
      10466,
      11,
      2233,
      284,
      356,
      836,
      470,
      423,
      6992,
      1441,
      287,
      883,
      1528,
      13
    ],
    "start_token": 1613,
    "end_token": 1646,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      7208,
      2428,
      351,
      4517,
      540,
      4277,
      7159,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for None comparison issues with mutable default arguments."
  },
  {
    "line": 280,
    "text": "            trade_end_time=trade_end_time,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for None comparison issues with mutable default arguments.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      437,
      62,
      2435,
      28,
      25351,
      62,
      437,
      62,
      2435,
      11
    ],
    "start_token": 1646,
    "end_token": 1669,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      7208,
      2428,
      351,
      4517,
      540,
      4277,
      7159,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for None comparison issues with mutable default arguments."
  },
  {
    "line": 283,
    "text": "            return_rate=(now_earning + now_cost) / last_account_value,",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update current position, indicating a state change.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      4873,
      16193,
      2197,
      62,
      451,
      768,
      1343,
      783,
      62,
      15805,
      8,
      1220,
      938,
      62,
      23317,
      62,
      8367,
      11
    ],
    "start_token": 1669,
    "end_token": 1700,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      1459,
      2292,
      11,
      12739,
      257,
      1181,
      1487,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to update current position, indicating a state change."
  },
  {
    "line": 284,
    "text": "            # here use earning to calculate return, position's view, earning consider cost, true return",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for enabling portfolio metrics, indicating feature usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      994,
      779,
      13748,
      284,
      15284,
      1441,
      11,
      2292,
      338,
      1570,
      11,
      13748,
      2074,
      1575,
      11,
      2081,
      1441
    ],
    "start_token": 1700,
    "end_token": 1729,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      15882,
      15320,
      20731,
      11,
      12739,
      3895,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional check for enabling portfolio metrics, indicating feature usage."
  },
  {
    "line": 284,
    "text": "            # here use earning to calculate return, position's view, earning consider cost, true return",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update portfolio metrics, indicating a state change.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      994,
      779,
      13748,
      284,
      15284,
      1441,
      11,
      2292,
      338,
      1570,
      11,
      13748,
      2074,
      1575,
      11,
      2081,
      1441
    ],
    "start_token": 1729,
    "end_token": 1758,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      15320,
      20731,
      11,
      12739,
      257,
      1181,
      1487,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to update portfolio metrics, indicating a state change."
  },
  {
    "line": 284,
    "text": "            # here use earning to calculate return, position's view, earning consider cost, true return",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update historical positions, indicating a state change.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      994,
      779,
      13748,
      284,
      15284,
      1441,
      11,
      2292,
      338,
      1570,
      11,
      13748,
      2074,
      1575,
      11,
      2081,
      1441
    ],
    "start_token": 1758,
    "end_token": 1787,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      6754,
      6116,
      11,
      12739,
      257,
      1181,
      1487,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to update historical positions, indicating a state change."
  },
  {
    "line": 294,
    "text": "        \"\"\"update history position\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call to update indicators, indicating a state change.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      19119,
      2106,
      2292,
      37811
    ],
    "start_token": 1787,
    "end_token": 1799,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      4296,
      21337,
      11,
      12739,
      257,
      1181,
      1487,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call to update indicators, indicating a state change."
  },
  {
    "line": 296,
    "text": "        # set now_account_value to position",
    "annotation": "\u2705 Best Practice: Check if the feature is enabled before proceeding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      900,
      783,
      62,
      23317,
      62,
      8367,
      284,
      2292
    ],
    "start_token": 1799,
    "end_token": 1815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      3895,
      318,
      9343,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if the feature is enabled before proceeding"
  },
  {
    "line": 298,
    "text": "        self.current_position.update_weight_all()",
    "annotation": "\u2705 Best Practice: Use assertions to ensure critical assumptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      14421,
      62,
      9150,
      13,
      19119,
      62,
      6551,
      62,
      439,
      3419
    ],
    "start_token": 1815,
    "end_token": 1834,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      29965,
      284,
      4155,
      4688,
      14895
    ],
    "label": "best_practice",
    "reason": "Use assertions to ensure critical assumptions"
  },
  {
    "line": 300,
    "text": "        # note use deepcopy",
    "annotation": "\ud83e\udde0 ML Signal: Method call to generate a DataFrame, indicating data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3465,
      779,
      2769,
      30073
    ],
    "start_token": 1834,
    "end_token": 1846,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      7716,
      257,
      6060,
      19778,
      11,
      12739,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Method call to generate a DataFrame, indicating data processing"
  },
  {
    "line": 302,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call to retrieve historical positions, indicating data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1846,
    "end_token": 1846,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      284,
      19818,
      6754,
      6116,
      11,
      12739,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Method call to retrieve historical positions, indicating data retrieval"
  },
  {
    "line": 305,
    "text": "        trade_start_time: pd.Timestamp,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without additional context",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      9688,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1846,
    "end_token": 1865,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      3224,
      4732
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without additional context"
  },
  {
    "line": 303,
    "text": "    def update_indicator(",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4296,
      62,
      521,
      26407,
      7
    ],
    "start_token": 1865,
    "end_token": 1874,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and behavior"
  },
  {
    "line": 305,
    "text": "        trade_start_time: pd.Timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Method returning an object attribute, indicating a getter pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      9688,
      62,
      2435,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1874,
    "end_token": 1893,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      281,
      2134,
      11688,
      11,
      12739,
      257,
      651,
      353,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning an object attribute, indicating a getter pattern"
  }
]
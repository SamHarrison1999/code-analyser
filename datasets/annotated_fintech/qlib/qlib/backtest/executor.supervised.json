[
  {
    "line": 5,
    "text": "from collections import defaultdict",
    "annotation": "\u2705 Best Practice: Importing specific classes or functions from a module can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      17268,
      1330,
      4277,
      11600
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      393,
      5499,
      422,
      257,
      8265,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific classes or functions from a module can improve code readability and maintainability."
  },
  {
    "line": 7,
    "text": "from typing import Any, Dict, Generator, List, Tuple, Union, cast",
    "annotation": "\u2705 Best Practice: Using type hints improves code readability and helps with static analysis.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      4377,
      11,
      360,
      713,
      11,
      35986,
      11,
      7343,
      11,
      309,
      29291,
      11,
      4479,
      11,
      3350
    ],
    "start_token": 5,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      20269,
      19575,
      2438,
      1100,
      1799,
      290,
      5419,
      351,
      9037,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Using type hints improves code readability and helps with static analysis."
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing pandas suggests data manipulation or analysis, which is common in ML workflows.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 23,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      19798,
      292,
      5644,
      1366,
      17512,
      393,
      3781,
      11,
      543,
      318,
      2219,
      287,
      10373,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing pandas suggests data manipulation or analysis, which is common in ML workflows."
  },
  {
    "line": 13,
    "text": "from qlib.log import get_module_logger",
    "annotation": "\ud83e\udde0 ML Signal: Importing from qlib indicates usage of a quantitative trading library, relevant for financial ML models.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      6404,
      1330,
      651,
      62,
      21412,
      62,
      6404,
      1362
    ],
    "start_token": 23,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      422,
      10662,
      8019,
      9217,
      8748,
      286,
      257,
      26610,
      7313,
      5888,
      11,
      5981,
      329,
      3176,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing from qlib indicates usage of a quantitative trading library, relevant for financial ML models."
  },
  {
    "line": 15,
    "text": "from ..strategy.base import BaseStrategy",
    "annotation": "\u2705 Best Practice: Using a logger is a best practice for tracking and debugging application behavior.",
    "confidence": 0.5,
    "tokens": [
      6738,
      11485,
      2536,
      4338,
      13,
      8692,
      1330,
      7308,
      13290,
      4338
    ],
    "start_token": 35,
    "end_token": 45,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      318,
      257,
      1266,
      3357,
      329,
      9646,
      290,
      28769,
      3586,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Using a logger is a best practice for tracking and debugging application behavior."
  },
  {
    "line": 32,
    "text": "        verbose: bool = False,",
    "annotation": "\u2705 Best Practice: Docstring provides detailed parameter descriptions and examples",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15942,
      577,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 45,
    "end_token": 59,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      11507,
      16969,
      290,
      6096
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed parameter descriptions and examples"
  },
  {
    "line": 101,
    "text": "            common infrastructure for backtesting, may including:",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of class attributes with parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      6884,
      329,
      736,
      33407,
      11,
      743,
      1390,
      25
    ],
    "start_token": 59,
    "end_token": 79,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      1398,
      12608,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Initialization of class attributes with parameters"
  },
  {
    "line": 103,
    "text": "                trade account for trading",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default argument for `indicator_config`",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      1848,
      329,
      7313
    ],
    "start_token": 79,
    "end_token": 98,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      4578,
      329,
      4600,
      521,
      26407,
      62,
      11250,
      63
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default argument for `indicator_config`"
  },
  {
    "line": 105,
    "text": "                exchange that provides market info",
    "annotation": "\ud83e\udde0 ML Signal: Boolean flags for feature toggles",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      326,
      3769,
      1910,
      7508
    ],
    "start_token": 98,
    "end_token": 118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      9701,
      329,
      3895,
      284,
      32723
    ],
    "label": "ml_signal",
    "reason": "Boolean flags for feature toggles"
  },
  {
    "line": 107,
    "text": "        settle_type : str",
    "annotation": "\ud83e\udde0 ML Signal: Boolean flags for feature toggles",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12259,
      62,
      4906,
      1058,
      965
    ],
    "start_token": 118,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      9701,
      329,
      3895,
      284,
      32723
    ],
    "label": "ml_signal",
    "reason": "Boolean flags for feature toggles"
  },
  {
    "line": 109,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Boolean flags for feature toggles",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 130,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      9701,
      329,
      3895,
      284,
      32723
    ],
    "label": "ml_signal",
    "reason": "Boolean flags for feature toggles"
  },
  {
    "line": 113,
    "text": "        self.verbose = verbose",
    "annotation": "\ud83e\udde0 ML Signal: Method call with parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19011,
      577,
      796,
      15942,
      577
    ],
    "start_token": 138,
    "end_token": 152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call with parameters"
  },
  {
    "line": 115,
    "text": "        self._trade_exchange = trade_exchange",
    "annotation": "\ud83e\udde0 ML Signal: Method call with parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      25351,
      62,
      1069,
      3803,
      796,
      3292,
      62,
      1069,
      3803
    ],
    "start_token": 152,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call with parameters"
  },
  {
    "line": 119,
    "text": "        self.reset(start_time=start_time, end_time=end_time, common_infra=common_infra)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging of sensitive information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      42503,
      7,
      9688,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      11,
      2219,
      62,
      10745,
      430,
      28,
      11321,
      62,
      10745,
      430,
      8
    ],
    "start_token": 170,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      286,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging of sensitive information"
  },
  {
    "line": 120,
    "text": "        if common_infra is None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of defaultdict for automatic dictionary value initialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2219,
      62,
      10745,
      430,
      318,
      6045,
      25
    ],
    "start_token": 207,
    "end_token": 222,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11600,
      329,
      11353,
      22155,
      1988,
      37588
    ],
    "label": "ml_signal",
    "reason": "Use of defaultdict for automatic dictionary value initialization"
  },
  {
    "line": 119,
    "text": "        self.reset(start_time=start_time, end_time=end_time, common_infra=common_infra)",
    "annotation": "\u2705 Best Practice: Check if the object has an attribute before accessing it",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      42503,
      7,
      9688,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      11,
      2219,
      62,
      10745,
      430,
      28,
      11321,
      62,
      10745,
      430,
      8
    ],
    "start_token": 222,
    "end_token": 259,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      2134,
      468,
      281,
      11688,
      878,
      22534,
      340
    ],
    "label": "best_practice",
    "reason": "Check if the object has an attribute before accessing it"
  },
  {
    "line": 123,
    "text": "        # record deal order amount in one day",
    "annotation": "\u2705 Best Practice: Use update method for merging or updating objects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1700,
      1730,
      1502,
      2033,
      287,
      530,
      1110
    ],
    "start_token": 259,
    "end_token": 274,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4296,
      2446,
      329,
      35981,
      393,
      19698,
      5563
    ],
    "label": "best_practice",
    "reason": "Use update method for merging or updating objects"
  },
  {
    "line": 125,
    "text": "        self.deal_day = None",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for resetting infrastructure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      31769,
      62,
      820,
      796,
      6045
    ],
    "start_token": 274,
    "end_token": 288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      13259,
      889,
      6884
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for resetting infrastructure"
  },
  {
    "line": 125,
    "text": "        self.deal_day = None",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of a key",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      31769,
      62,
      820,
      796,
      6045
    ],
    "start_token": 288,
    "end_token": 302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      257,
      1994
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of a key"
  },
  {
    "line": 130,
    "text": "            - reset trade_account",
    "annotation": "\ud83e\udde0 ML Signal: Use of copy.copy for conditional object copying",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      13259,
      3292,
      62,
      23317
    ],
    "start_token": 302,
    "end_token": 318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4866,
      13,
      30073,
      329,
      26340,
      2134,
      23345
    ],
    "label": "ml_signal",
    "reason": "Use of copy.copy for conditional object copying"
  },
  {
    "line": 134,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for resetting account with parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 318,
    "end_token": 327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      13259,
      889,
      1848,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for resetting account with parameters"
  },
  {
    "line": 133,
    "text": "            self.common_infra = common_infra",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      11321,
      62,
      10745,
      430,
      796,
      2219,
      62,
      10745,
      430
    ],
    "start_token": 327,
    "end_token": 349,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose."
  },
  {
    "line": 134,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Use of getattr with a default value to avoid AttributeError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 349,
    "end_token": 358,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      651,
      35226,
      351,
      257,
      4277,
      1988,
      284,
      3368,
      3460,
      4163,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Use of getattr with a default value to avoid AttributeError."
  },
  {
    "line": 136,
    "text": "",
    "annotation": "\u2705 Best Practice: Method docstring provides a clear explanation of the method's purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 358,
    "end_token": 358,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      2205,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Method docstring provides a clear explanation of the method's purpose"
  },
  {
    "line": 142,
    "text": "            # 1. So positions are shared",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a centralized resource, indicating a pattern of resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      352,
      13,
      1406,
      6116,
      389,
      4888
    ],
    "start_token": 358,
    "end_token": 376,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      29024,
      8271,
      11,
      12739,
      257,
      3912,
      286,
      8271,
      4542
    ],
    "label": "ml_signal",
    "reason": "Accessing a centralized resource, indicating a pattern of resource management"
  },
  {
    "line": 143,
    "text": "            # 2. Others are not shared, so each level has it own metrics (portfolio and trading metrics)",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      362,
      13,
      12691,
      389,
      407,
      4888,
      11,
      523,
      1123,
      1241,
      468,
      340,
      898,
      20731,
      357,
      634,
      13652,
      290,
      7313,
      20731,
      8
    ],
    "start_token": 376,
    "end_token": 409,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 149,
    "text": "            self.trade_account.reset(freq=self.time_per_step, port_metr_enabled=self.generate_portfolio_metrics)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on presence of specific keys in kwargs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      25351,
      62,
      23317,
      13,
      42503,
      7,
      19503,
      80,
      28,
      944,
      13,
      2435,
      62,
      525,
      62,
      9662,
      11,
      2493,
      62,
      4164,
      81,
      62,
      25616,
      28,
      944,
      13,
      8612,
      378,
      62,
      634,
      13652,
      62,
      4164,
      10466,
      8
    ],
    "start_token": 409,
    "end_token": 457,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4931,
      286,
      2176,
      8251,
      287,
      479,
      86,
      22046
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on presence of specific keys in kwargs"
  },
  {
    "line": 152,
    "text": "    def trade_exchange(self) -> Exchange:",
    "annotation": "\ud83e\udde0 ML Signal: Use of method chaining and parameter passing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3292,
      62,
      1069,
      3803,
      7,
      944,
      8,
      4613,
      12516,
      25
    ],
    "start_token": 457,
    "end_token": 471,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      442,
      1397,
      290,
      11507,
      6427
    ],
    "label": "ml_signal",
    "reason": "Use of method chaining and parameter passing"
  },
  {
    "line": 155,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on parameter presence",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 471,
    "end_token": 471,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11507,
      4931
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on parameter presence"
  },
  {
    "line": 153,
    "text": "        \"\"\"get trade exchange in a prioritized order\"\"\"",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1136,
      3292,
      5163,
      287,
      257,
      19086,
      1143,
      1502,
      37811
    ],
    "start_token": 471,
    "end_token": 488,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 155,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 488,
    "end_token": 488,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 155,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 488,
    "end_token": 488,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 157,
    "text": "    def trade_calendar(self) -> TradeCalendarManager:",
    "annotation": "\ud83e\udde0 ML Signal: Method delegation pattern, where a method calls another method on a different object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3292,
      62,
      9948,
      9239,
      7,
      944,
      8,
      4613,
      9601,
      9771,
      9239,
      13511,
      25
    ],
    "start_token": 488,
    "end_token": 505,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22635,
      3912,
      11,
      810,
      257,
      2446,
      3848,
      1194,
      2446,
      319,
      257,
      1180,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method delegation pattern, where a method calls another method on a different object"
  },
  {
    "line": 158,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 505,
    "end_token": 513,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 172,
    "text": "            end_time = kwargs.get(\"end_time\")",
    "annotation": "\u2705 Best Practice: Using a dictionary to store return values allows for flexible data handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      796,
      479,
      86,
      22046,
      13,
      1136,
      7203,
      437,
      62,
      2435,
      4943
    ],
    "start_token": 513,
    "end_token": 538,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      22155,
      284,
      3650,
      1441,
      3815,
      3578,
      329,
      12846,
      1366,
      9041
    ],
    "label": "best_practice",
    "reason": "Using a dictionary to store return values allows for flexible data handling"
  },
  {
    "line": 175,
    "text": "            self.reset_common_infra(common_infra)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'execute_result' key is not present in 'return_value'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      42503,
      62,
      11321,
      62,
      10745,
      430,
      7,
      11321,
      62,
      10745,
      430,
      8
    ],
    "start_token": 538,
    "end_token": 563,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      41049,
      62,
      20274,
      6,
      1994,
      318,
      407,
      1944,
      287,
      705,
      7783,
      62,
      8367,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'execute_result' key is not present in 'return_value'"
  },
  {
    "line": 180,
    "text": "    def finished(self) -> bool:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      5201,
      7,
      944,
      8,
      4613,
      20512,
      25
    ],
    "start_token": 563,
    "end_token": 574,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and usage."
  },
  {
    "line": 223,
    "text": "        Tuple[List[object], dict]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for ValueError if `range_limit` is specified for atomic executor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      309,
      29291,
      58,
      8053,
      58,
      15252,
      4357,
      8633,
      5974
    ],
    "start_token": 574,
    "end_token": 590,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11052,
      12331,
      611,
      4600,
      9521,
      62,
      32374,
      63,
      318,
      7368,
      329,
      17226,
      3121,
      273
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for ValueError if `range_limit` is specified for atomic executor"
  },
  {
    "line": 231,
    "text": "        level: int = 0,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): AssertionError risk if `yield_res` is not a tuple of length 2",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      25,
      493,
      796,
      657,
      11
    ],
    "start_token": 590,
    "end_token": 603,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      12331,
      2526,
      611,
      4600,
      88,
      1164,
      62,
      411,
      63,
      318,
      407,
      257,
      46545,
      286,
      4129,
      362
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "AssertionError risk if `yield_res` is not a tuple of length 2"
  },
  {
    "line": 235,
    "text": "        his function will make a step forward",
    "annotation": "\ud83e\udde0 ML Signal: Updates to trade account and calendar could be used to model trading behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      465,
      2163,
      481,
      787,
      257,
      2239,
      2651
    ],
    "start_token": 603,
    "end_token": 617,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28090,
      284,
      3292,
      1848,
      290,
      11845,
      714,
      307,
      973,
      284,
      2746,
      7313,
      4069
    ],
    "label": "ml_signal",
    "reason": "Updates to trade account and calendar could be used to model trading behavior"
  },
  {
    "line": 250,
    "text": "        execute_result : List[object]",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12260,
      62,
      20274,
      1058,
      7343,
      58,
      15252,
      60
    ],
    "start_token": 617,
    "end_token": 632,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 253,
    "text": "            1) This is necessary,  The return value of generator will be used in NestedExecutor",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a list of objects, indicating a pattern of object collection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      352,
      8,
      770,
      318,
      3306,
      11,
      220,
      383,
      1441,
      1988,
      286,
      17301,
      481,
      307,
      973,
      287,
      399,
      7287,
      23002,
      38409
    ],
    "start_token": 632,
    "end_token": 663,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1351,
      286,
      5563,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      4947
    ],
    "label": "ml_signal",
    "reason": "Method returning a list of objects, indicating a pattern of object collection"
  },
  {
    "line": 275,
    "text": "        if isinstance(obj, GeneratorType):",
    "annotation": "\u2705 Best Practice: Docstring provides clear parameter descriptions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      26801,
      11,
      35986,
      6030,
      2599
    ],
    "start_token": 663,
    "end_token": 679,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      11507,
      16969
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear parameter descriptions"
  },
  {
    "line": 291,
    "text": "            indicator_config=self.indicator_config,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using mutable default argument 'indicator_config' can lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16916,
      62,
      11250,
      28,
      944,
      13,
      521,
      26407,
      62,
      11250,
      11
    ],
    "start_token": 679,
    "end_token": 701,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4517,
      540,
      4277,
      4578,
      705,
      521,
      26407,
      62,
      11250,
      6,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using mutable default argument 'indicator_config' can lead to unexpected behavior"
  },
  {
    "line": 303,
    "text": "        return res",
    "annotation": "\ud83e\udde0 ML Signal: Use of boolean flags to control behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      581
    ],
    "start_token": 701,
    "end_token": 710,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      25131,
      9701,
      284,
      1630,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of boolean flags to control behavior"
  },
  {
    "line": 303,
    "text": "        return res",
    "annotation": "\ud83e\udde0 ML Signal: Use of boolean flags to control behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      581
    ],
    "start_token": 710,
    "end_token": 719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      25131,
      9701,
      284,
      1630,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of boolean flags to control behavior"
  },
  {
    "line": 303,
    "text": "        return res",
    "annotation": "\u2705 Best Practice: Explicitly calling superclass constructor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      581
    ],
    "start_token": 719,
    "end_token": 728,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      2208,
      4871,
      23772
    ],
    "label": "best_practice",
    "reason": "Explicitly calling superclass constructor"
  },
  {
    "line": 315,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a brief description of the method's purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 728,
    "end_token": 732,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a brief description of the method's purpose."
  },
  {
    "line": 320,
    "text": "        inner_executor: Union[BaseExecutor, dict],",
    "annotation": "\ud83e\udde0 ML Signal: Use of inheritance and method overriding.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8434,
      62,
      18558,
      38409,
      25,
      4479,
      58,
      14881,
      23002,
      38409,
      11,
      8633,
      4357
    ],
    "start_token": 732,
    "end_token": 752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      24155,
      290,
      2446,
      44987,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of inheritance and method overriding."
  },
  {
    "line": 322,
    "text": "        start_time: Union[str, pd.Timestamp] = None,",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for resetting infrastructure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      4479,
      58,
      2536,
      11,
      279,
      67,
      13,
      14967,
      27823,
      60,
      796,
      6045,
      11
    ],
    "start_token": 752,
    "end_token": 776,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      13259,
      889,
      6884,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for resetting infrastructure."
  },
  {
    "line": 324,
    "text": "        indicator_config: dict = {},",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern for resetting infrastructure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16916,
      62,
      11250,
      25,
      8633,
      796,
      1391,
      5512
    ],
    "start_token": 776,
    "end_token": 791,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      329,
      13259,
      889,
      6884,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern for resetting infrastructure."
  },
  {
    "line": 323,
    "text": "        end_time: Union[str, pd.Timestamp] = None,",
    "annotation": "\ud83e\udde0 ML Signal: Method initializes trading with a decision, indicating a pattern of decision-based initialization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      4479,
      58,
      2536,
      11,
      279,
      67,
      13,
      14967,
      27823,
      60,
      796,
      6045,
      11
    ],
    "start_token": 791,
    "end_token": 815,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      4238,
      4340,
      7313,
      351,
      257,
      2551,
      11,
      12739,
      257,
      3912,
      286,
      2551,
      12,
      3106,
      37588,
      13
    ],
    "label": "ml_signal",
    "reason": "Method initializes trading with a decision, indicating a pattern of decision-based initialization."
  },
  {
    "line": 325,
    "text": "        generate_portfolio_metrics: bool = False,",
    "annotation": "\u2705 Best Practice: Resetting executor with specific start and end times ensures clear state management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7716,
      62,
      634,
      13652,
      62,
      4164,
      10466,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 815,
    "end_token": 834,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      3121,
      273,
      351,
      2176,
      923,
      290,
      886,
      1661,
      19047,
      1598,
      1181,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting executor with specific start and end times ensures clear state management."
  },
  {
    "line": 327,
    "text": "        track_data: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: Fetching infrastructure level details, indicating a pattern of hierarchical infrastructure management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2610,
      62,
      7890,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 834,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      6884,
      1241,
      3307,
      11,
      12739,
      257,
      3912,
      286,
      38958,
      6884,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Fetching infrastructure level details, indicating a pattern of hierarchical infrastructure management."
  },
  {
    "line": 329,
    "text": "        align_range_limit: bool = True,",
    "annotation": "\u2705 Best Practice: Setting sub-level infrastructure promotes modular and maintainable code.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10548,
      62,
      9521,
      62,
      32374,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 849,
    "end_token": 866,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      850,
      12,
      5715,
      6884,
      21068,
      26507,
      290,
      5529,
      540,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Setting sub-level infrastructure promotes modular and maintainable code."
  },
  {
    "line": 331,
    "text": "        **kwargs: Any,",
    "annotation": "\ud83e\udde0 ML Signal: Resetting strategy with infrastructure and decision, indicating a pattern of strategy configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      25,
      4377,
      11
    ],
    "start_token": 866,
    "end_token": 879,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30027,
      889,
      4811,
      351,
      6884,
      290,
      2551,
      11,
      12739,
      257,
      3912,
      286,
      4811,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Resetting strategy with infrastructure and decision, indicating a pattern of strategy configuration."
  },
  {
    "line": 329,
    "text": "        align_range_limit: bool = True,",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10548,
      62,
      9521,
      62,
      32374,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 879,
    "end_token": 896,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 331,
    "text": "        **kwargs: Any,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType error if `trade_decision.update` returns None unexpectedly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      25,
      4377,
      11
    ],
    "start_token": 896,
    "end_token": 909,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      4049,
      611,
      4600,
      25351,
      62,
      12501,
      1166,
      13,
      19119,
      63,
      5860,
      6045,
      25884,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType error if `trade_decision.update` returns None unexpectedly."
  },
  {
    "line": 334,
    "text": "        Parameters",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of altering a decision object could be used to train models on decision-making processes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 909,
    "end_token": 917,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      29057,
      257,
      2551,
      2134,
      714,
      307,
      973,
      284,
      4512,
      4981,
      319,
      2551,
      12,
      8601,
      7767,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of altering a decision object could be used to train models on decision-making processes."
  },
  {
    "line": 334,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Explicit return of the trade_decision enhances clarity of function output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 917,
    "end_token": 925,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      262,
      3292,
      62,
      12501,
      1166,
      32479,
      16287,
      286,
      2163,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit return of the trade_decision enhances clarity of function output."
  },
  {
    "line": 362,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statement can be disabled with optimization flags, consider using explicit error handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 925,
    "end_token": 925,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      2643,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      11,
      2074,
      1262,
      7952,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statement can be disabled with optimization flags, consider using explicit error handling"
  },
  {
    "line": 372,
    "text": "            **kwargs,",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      11
    ],
    "start_token": 925,
    "end_token": 940,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters"
  },
  {
    "line": 380,
    "text": "        # NOTE: please refer to the docs of BaseExecutor.reset_common_infra for the meaning of `copy_trade_account`",
    "annotation": "\ud83e\udde0 ML Signal: Method calls another method on an object, indicating a pattern of delegation or composition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      3387,
      3522,
      284,
      262,
      34165,
      286,
      7308,
      23002,
      38409,
      13,
      42503,
      62,
      11321,
      62,
      10745,
      430,
      329,
      262,
      3616,
      286,
      4600,
      30073,
      62,
      25351,
      62,
      23317,
      63
    ],
    "start_token": 940,
    "end_token": 977,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3848,
      1194,
      2446,
      319,
      281,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      22635,
      393,
      11742
    ],
    "label": "ml_signal",
    "reason": "Method calls another method on an object, indicating a pattern of delegation or composition"
  },
  {
    "line": 380,
    "text": "        # NOTE: please refer to the docs of BaseExecutor.reset_common_infra for the meaning of `copy_trade_account`",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      3387,
      3522,
      284,
      262,
      34165,
      286,
      7308,
      23002,
      38409,
      13,
      42503,
      62,
      11321,
      62,
      10745,
      430,
      329,
      262,
      3616,
      286,
      4600,
      30073,
      62,
      25351,
      62,
      23317,
      63
    ],
    "start_token": 977,
    "end_token": 1014,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 382,
    "text": "        # The first level follow the `copy_trade_account` from the upper level",
    "annotation": "\u2705 Best Practice: Docstring provides clarity on what the method returns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      717,
      1241,
      1061,
      262,
      4600,
      30073,
      62,
      25351,
      62,
      23317,
      63,
      422,
      262,
      6727,
      1241
    ],
    "start_token": 1014,
    "end_token": 1038,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      16287,
      319,
      644,
      262,
      2446,
      5860
    ],
    "label": "best_practice",
    "reason": "Docstring provides clarity on what the method returns"
  },
  {
    "line": 384,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of list unpacking to combine lists",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1038,
    "end_token": 1038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      8593,
      5430,
      284,
      12082,
      8341
    ],
    "label": "ml_signal",
    "reason": "Use of list unpacking to combine lists"
  },
  {
    "line": 387,
    "text": "        self.inner_strategy.reset_common_infra(common_infra)",
    "annotation": "\ud83e\udde0 ML Signal: Use of method calls on objects to retrieve data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5083,
      62,
      2536,
      4338,
      13,
      42503,
      62,
      11321,
      62,
      10745,
      430,
      7,
      11321,
      62,
      10745,
      430,
      8
    ],
    "start_token": 1038,
    "end_token": 1064,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      3848,
      319,
      5563,
      284,
      19818,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of method calls on objects to retrieve data"
  },
  {
    "line": 389,
    "text": "    def _init_sub_trading(self, trade_decision: BaseTradeDecision) -> None:",
    "annotation": "\u2705 Best Practice: Type hinting for list initialization improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      15003,
      62,
      7266,
      62,
      2213,
      4980,
      7,
      944,
      11,
      3292,
      62,
      12501,
      1166,
      25,
      7308,
      35965,
      10707,
      1166,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1064,
    "end_token": 1091,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1351,
      37588,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for list initialization improves code readability and maintainability"
  },
  {
    "line": 392,
    "text": "        sub_level_infra = self.inner_executor.get_level_infra()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for type checking can be bypassed; consider using explicit type checks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      5715,
      62,
      10745,
      430,
      796,
      2116,
      13,
      5083,
      62,
      18558,
      38409,
      13,
      1136,
      62,
      5715,
      62,
      10745,
      430,
      3419
    ],
    "start_token": 1091,
    "end_token": 1119,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      2099,
      10627,
      460,
      307,
      17286,
      276,
      26,
      2074,
      1262,
      7952,
      2099,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for type checking can be bypassed; consider using explicit type checks"
  },
  {
    "line": 393,
    "text": "        self.level_infra.set_sub_level_infra(sub_level_infra)",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5715,
      62,
      10745,
      430,
      13,
      2617,
      62,
      7266,
      62,
      5715,
      62,
      10745,
      430,
      7,
      7266,
      62,
      5715,
      62,
      10745,
      430,
      8
    ],
    "start_token": 1119,
    "end_token": 1149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 396,
    "text": "    def _update_trade_decision(self, trade_decision: BaseTradeDecision) -> BaseTradeDecision:",
    "annotation": "\u2705 Best Practice: Constants are defined with clear and descriptive names",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      19119,
      62,
      25351,
      62,
      12501,
      1166,
      7,
      944,
      11,
      3292,
      62,
      12501,
      1166,
      25,
      7308,
      35965,
      10707,
      1166,
      8,
      4613,
      7308,
      35965,
      10707,
      1166,
      25
    ],
    "start_token": 1149,
    "end_token": 1179,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      351,
      1598,
      290,
      35644,
      3891
    ],
    "label": "best_practice",
    "reason": "Constants are defined with clear and descriptive names"
  },
  {
    "line": 397,
    "text": "        # outer strategy have chance to update decision each iterator",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using a mutable default value for `indicator_config` can lead to unexpected behavior if the dictionary is modified.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      12076,
      4811,
      423,
      2863,
      284,
      4296,
      2551,
      1123,
      41313
    ],
    "start_token": 1179,
    "end_token": 1196,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      257,
      4517,
      540,
      4277,
      1988,
      329,
      4600,
      521,
      26407,
      62,
      11250,
      63,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      262,
      22155,
      318,
      9518,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using a mutable default value for `indicator_config` can lead to unexpected behavior if the dictionary is modified."
  },
  {
    "line": 416,
    "text": "        # - more detailed information will be set into trade decision",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization of inherited attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      532,
      517,
      6496,
      1321,
      481,
      307,
      900,
      656,
      3292,
      2551
    ],
    "start_token": 1196,
    "end_token": 1214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass's __init__ method ensures proper initialization of inherited attributes."
  },
  {
    "line": 429,
    "text": "            sub_cal: TradeCalendarManager = self.inner_executor.trade_calendar",
    "annotation": "\ud83e\udde0 ML Signal: The use of `trade_type` indicates a configuration or mode that could influence the behavior of the simulator, useful for ML models to understand different operational modes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      62,
      9948,
      25,
      9601,
      9771,
      9239,
      13511,
      796,
      2116,
      13,
      5083,
      62,
      18558,
      38409,
      13,
      25351,
      62,
      9948,
      9239
    ],
    "start_token": 1214,
    "end_token": 1245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      4600,
      25351,
      62,
      4906,
      63,
      9217,
      257,
      8398,
      393,
      4235,
      326,
      714,
      4588,
      262,
      4069,
      286,
      262,
      35375,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      1833,
      1180,
      13919,
      12881,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of `trade_type` indicates a configuration or mode that could influence the behavior of the simulator, useful for ML models to understand different operational modes."
  },
  {
    "line": 439,
    "text": "                # the two lines below is for a special case in RL",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper function to retrieve orders based on a decision",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      262,
      734,
      3951,
      2174,
      318,
      329,
      257,
      2041,
      1339,
      287,
      45715
    ],
    "start_token": 1245,
    "end_token": 1272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      2163,
      284,
      19818,
      6266,
      1912,
      319,
      257,
      2551
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper function to retrieve orders based on a decision"
  },
  {
    "line": 443,
    "text": "                #   (inner Qlib Executor)])",
    "annotation": "\ud83e\udde0 ML Signal: Sorting orders based on a specific attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      357,
      5083,
      1195,
      8019,
      8393,
      38409,
      8,
      12962
    ],
    "start_token": 1272,
    "end_token": 1298,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      6266,
      1912,
      319,
      257,
      2176,
      11688
    ],
    "label": "ml_signal",
    "reason": "Sorting orders based on a specific attribute"
  },
  {
    "line": 447,
    "text": "                # below is proposed",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of NotImplementedError for unsupported types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2174,
      318,
      5150
    ],
    "start_token": 1298,
    "end_token": 1317,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      329,
      24222,
      3858
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of NotImplementedError for unsupported types"
  },
  {
    "line": 449,
    "text": "                #   RL Framework",
    "annotation": "\u2705 Best Practice: Explicit return of the iterator for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      45715,
      25161
    ],
    "start_token": 1317,
    "end_token": 1337,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      262,
      41313,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicit return of the iterator for clarity"
  },
  {
    "line": 448,
    "text": "                # - The entry script follow the example of  _RL learning example_ to be compatible with all kinds of",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with specific parameter types and return type hints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      532,
      383,
      5726,
      4226,
      1061,
      262,
      1672,
      286,
      220,
      4808,
      7836,
      4673,
      1672,
      62,
      284,
      307,
      11670,
      351,
      477,
      6982,
      286
    ],
    "start_token": 1337,
    "end_token": 1374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      2176,
      11507,
      3858,
      290,
      1441,
      2099,
      20269
    ],
    "label": "ml_signal",
    "reason": "Method signature with specific parameter types and return type hints"
  },
  {
    "line": 452,
    "text": "                #       by `yield from` and wait for the action from the policy",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over orders, indicating a pattern of processing multiple items",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      4600,
      88,
      1164,
      422,
      63,
      290,
      4043,
      329,
      262,
      2223,
      422,
      262,
      2450
    ],
    "start_token": 1374,
    "end_token": 1410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6266,
      11,
      12739,
      257,
      3912,
      286,
      7587,
      3294,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over orders, indicating a pattern of processing multiple items"
  },
  {
    "line": 462,
    "text": "                decision_list.append((_inner_trade_decision, *sub_cal.get_step_time()))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `deal_order` method is not handling inputs safely",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2551,
      62,
      4868,
      13,
      33295,
      19510,
      62,
      5083,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      1635,
      7266,
      62,
      9948,
      13,
      1136,
      62,
      9662,
      62,
      2435,
      3419,
      4008
    ],
    "start_token": 1410,
    "end_token": 1451,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      31769,
      62,
      2875,
      63,
      2446,
      318,
      407,
      9041,
      17311,
      11512
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `deal_order` method is not handling inputs safely"
  },
  {
    "line": 463,
    "text": "",
    "annotation": "\u2705 Best Practice: Using formatted strings for logging improves readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1451,
    "end_token": 1451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      39559,
      13042,
      329,
      18931,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using formatted strings for logging improves readability"
  },
  {
    "line": 477,
    "text": "                # do nothing and just step forward",
    "annotation": "\ud83e\udde0 ML Signal: Returning a tuple with a list and a dictionary, indicating structured data output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      466,
      2147,
      290,
      655,
      2239,
      2651
    ],
    "start_token": 1451,
    "end_token": 1473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      46545,
      351,
      257,
      1351,
      290,
      257,
      22155,
      11,
      12739,
      20793,
      1366,
      5072
    ],
    "label": "ml_signal",
    "reason": "Returning a tuple with a list and a dictionary, indicating structured data output"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Using __future__ import for annotations to support forward references in type hints,"[26486, 227, 6705, 19939, 25, 8554, 11593, 37443, 834, 1330, 329, 37647, 284, 1104, 2651, 10288, 287, 2099, 20269]",0.5,7,best_practice,2,Using __future__ import for annotations to support forward references in type hints,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Importing defaultdict for convenient dictionary initialization,"[26486, 227, 6705, 19939, 25, 17267, 278, 4277, 11600, 329, 11282, 22155, 37588]",0.5,7,best_practice,4,Importing defaultdict for convenient dictionary initialization,,7,,[]
‚úÖ Best Practice: Importing TYPE_CHECKING to avoid circular imports during type checking,"[26486, 227, 6705, 19939, 25, 17267, 278, 41876, 62, 50084, 2751, 284, 3368, 18620, 17944, 1141, 2099, 10627]",1.0,32,best_practice,6,Importing TYPE_CHECKING to avoid circular imports during type checking,,7,"from typing import TYPE_CHECKING, Any, Dict, List, Optional, Tuple, Type, Union, cast","[6738, 19720, 1330, 41876, 62, 50084, 2751, 11, 4377, 11, 360, 713, 11, 7343, 11, 32233, 11, 309, 29291, 11, 5994, 11, 4479, 11, 3350]"
‚úÖ Best Practice: Importing standard typing utilities for type annotations,"[26486, 227, 6705, 19939, 25, 17267, 278, 3210, 19720, 20081, 329, 2099, 37647]",0.5,32,best_practice,7,Importing standard typing utilities for type annotations,,32,,[]
‚ö†Ô∏è SAST Risk (Low): Importing random without seeding can lead to non-deterministic behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 4738, 1231, 384, 8228, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069]",1.0,32,sast_risk,12,Importing random without seeding can lead to non-deterministic behavior,Low,32,,[]
‚úÖ Best Practice: Importing numpy and pandas for numerical and data manipulation operations,"[26486, 227, 6705, 19939, 25, 17267, 278, 299, 32152, 290, 19798, 292, 329, 29052, 290, 1366, 17512, 4560]",0.5,37,best_practice,15,Importing numpy and pandas for numerical and data manipulation operations,,32,import numpy as np,"[11748, 299, 32152, 355, 45941]"
‚úÖ Best Practice: Using a logger for module-specific logging,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 329, 8265, 12, 11423, 18931]",0.5,37,best_practice,19,Using a logger for module-specific logging,,37,,[]
"‚ö†Ô∏è SAST Risk (Low): Missing import statement for 'pd', which could lead to runtime errors if 'pd' is not defined elsewhere.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25639, 1330, 2643, 329, 705, 30094, 3256, 543, 714, 1085, 284, 19124, 8563, 611, 705, 30094, 6, 318, 407, 5447, 8057, 13]",1.0,37,sast_risk,17,"Missing import statement for 'pd', which could lead to runtime errors if 'pd' is not defined elsewhere.",Low,37,,[]
üß† ML Signal: Type hinting with 'pd.DataFrame' suggests usage of pandas for data manipulation.,"[8582, 100, 254, 10373, 26484, 25, 5994, 9254, 278, 351, 705, 30094, 13, 6601, 19778, 6, 5644, 8748, 286, 19798, 292, 329, 1366, 17512, 13]",0.5,37,ml_signal,19,Type hinting with 'pd.DataFrame' suggests usage of pandas for data manipulation.,,37,,[]
"‚úÖ Best Practice: Docstring provides detailed parameter descriptions, improving code readability and maintainability.","[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 11507, 16969, 11, 10068, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,37,best_practice,37,"Docstring provides detailed parameter descriptions, improving code readability and maintainability.",,37,,[]
üß† ML Signal: Initialization of class attributes with default values can indicate typical usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 1398, 12608, 351, 4277, 3815, 460, 7603, 7226, 8748, 7572, 13]",1.0,63,ml_signal,113,Initialization of class attributes with default values can indicate typical usage patterns.,,37,"        :param min_cost:         min cost, default 5","[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 949, 62, 15805, 25, 220, 220, 220, 220, 220, 220, 220, 220, 949, 1575, 11, 4277, 642]"
‚ö†Ô∏è SAST Risk (Low): Using pop with a default value from kwargs can lead to unexpected behavior if the key is not present.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1461, 351, 257, 4277, 1988, 422, 479, 86, 22046, 460, 1085, 284, 10059, 4069, 611, 262, 1994, 318, 407, 1944, 13]",0.5,121,sast_risk,117,Using pop with a default value from kwargs can lead to unexpected behavior if the key is not present.,Low,63,                                            The limit indicates that the etf is tradable on a specific day.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 4179, 9217, 326, 262, 2123, 69, 318, 2083, 540, 319, 257, 2176, 1110, 13]"
‚ö†Ô∏è SAST Risk (Low): Raising a ValueError with user-provided input can expose internal logic.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 11052, 12331, 351, 2836, 12, 41279, 5128, 460, 15651, 5387, 9156, 13]",0.5,182,sast_risk,119,Raising a ValueError with user-provided input can expose internal logic.,Low,121,                                                $close is for calculating the total value at end of each day.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 720, 19836, 318, 329, 26019, 262, 2472, 1988, 379, 886, 286, 1123, 1110, 13]"
üß† ML Signal: Use of logging can indicate common debugging or information patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 18931, 460, 7603, 2219, 28769, 393, 1321, 7572, 13]",0.5,235,ml_signal,126,Use of logging can indicate common debugging or information patterns.,,182,                                                this target on this day).,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 428, 2496, 319, 428, 1110, 737]"
‚ö†Ô∏è SAST Risk (Low): Raising NotImplementedError can expose unhandled cases to the user.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 460, 15651, 555, 38788, 2663, 284, 262, 2836, 13]",0.5,255,sast_risk,142,Raising NotImplementedError can expose unhandled cases to the user.,Low,235,            deal_price = C.deal_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1730, 62, 20888, 796, 327, 13, 31769, 62, 20888]"
üß† ML Signal: Instantiation of objects with specific parameters can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 5563, 351, 2176, 10007, 460, 7603, 2219, 8748, 7572, 13]",1.0,291,ml_signal,162,Instantiation of objects with specific parameters can indicate common usage patterns.,,255,"            self.buy_price, self.sell_price = cast(Tuple[str, str], deal_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 17846, 62, 20888, 11, 2116, 13, 7255, 62, 20888, 796, 3350, 7, 51, 29291, 58, 2536, 11, 965, 4357, 1730, 62, 20888, 8]"
‚úÖ Best Practice: Check for empty list before processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 1351, 878, 7587]",0.5,317,best_practice,160,Check for empty list before processing,,291,            self.buy_price = self.sell_price = deal_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 17846, 62, 20888, 796, 2116, 13, 7255, 62, 20888, 796, 1730, 62, 20888]"
üß† ML Signal: Usage of external library function D.features,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 2163, 360, 13, 40890]",0.5,353,ml_signal,162,Usage of external library function D.features,,317,"            self.buy_price, self.sell_price = cast(Tuple[str, str], deal_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 17846, 62, 20888, 11, 2116, 13, 7255, 62, 20888, 796, 3350, 7, 51, 29291, 58, 2536, 11, 965, 4357, 1730, 62, 20888, 8]"
‚úÖ Best Practice: Explicitly setting DataFrame columns,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 15180]",0.5,370,best_practice,172,Explicitly setting DataFrame columns,,353,        # $factor is for rounding to the trading unit,"[220, 220, 220, 220, 220, 220, 220, 1303, 720, 31412, 318, 329, 38185, 284, 262, 7313, 4326]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing data handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 1366, 9041]",0.5,412,sast_risk,176,Potential for missing data handling,Low,370,"        self.buy_vol_limit, self.sell_vol_limit, vol_lt_fields = self._get_vol_limit(volume_threshold)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 17846, 62, 10396, 62, 32374, 11, 2116, 13, 7255, 62, 10396, 62, 32374, 11, 2322, 62, 2528, 62, 25747, 796, 2116, 13557, 1136, 62, 10396, 62, 32374, 7, 29048, 62, 400, 10126, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing data handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 1366, 9041]",0.5,434,sast_risk,179,Potential for missing data handling,Low,412,        if self.limit_type == self.LT_TP_EXP:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 32374, 62, 4906, 6624, 2116, 13, 27734, 62, 7250, 62, 49864, 25]"
‚úÖ Best Practice: Informative logging for missing data,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 4814, 1366]",0.5,457,best_practice,182,Informative logging for missing data,,434,                necessary_fields.add(exp),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3306, 62, 25747, 13, 2860, 7, 11201, 8]"
‚úÖ Best Practice: Informative logging for unsupported feature,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 24222, 3895]",0.5,473,best_practice,185,Informative logging for unsupported feature,,457,        self.all_fields = all_fields,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 439, 62, 25747, 796, 477, 62, 25747]"
üß† ML Signal: Custom method call for updating limits,"[8582, 100, 254, 10373, 26484, 25, 8562, 2446, 869, 329, 19698, 7095]",0.5,489,ml_signal,189,Custom method call for updating limits,,473,        self.min_cost = min_cost,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1084, 62, 15805, 796, 949, 62, 15805]"
‚ö†Ô∏è SAST Risk (Medium): Potential for missing critical data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 4814, 4688, 1366]",0.5,521,sast_risk,192,Potential for missing critical data,Medium,489,"        self.limit_threshold: Union[Tuple[str, str], float, None] = limit_threshold","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 32374, 62, 400, 10126, 25, 4479, 58, 51, 29291, 58, 2536, 11, 965, 4357, 12178, 11, 6045, 60, 796, 4179, 62, 400, 10126]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing data handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 1366, 9041]",0.5,535,sast_risk,197,Potential for missing data handling,Low,521,        # init quote by quote_df,"[220, 220, 220, 220, 220, 220, 220, 1303, 2315, 9577, 416, 9577, 62, 7568]"
‚úÖ Best Practice: Informative logging for default value usage,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 4277, 1988, 8748]",0.5,535,best_practice,200,Informative logging for default value usage,,535,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for missing data handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 1366, 9041]",0.5,549,sast_risk,202,Potential for missing data handling,Low,535,        # get stock data from qlib,"[220, 220, 220, 220, 220, 220, 220, 1303, 651, 4283, 1366, 422, 10662, 8019]"
‚úÖ Best Practice: Informative logging for default value usage,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 4277, 1988, 8748]",0.5,566,best_practice,205,Informative logging for default value usage,,549,        self.quote_df = D.features(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22708, 62, 7568, 796, 360, 13, 40890, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing data handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 1366, 9041]",0.5,583,sast_risk,207,Potential for missing data handling,Low,566,"            self.all_fields,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 439, 62, 25747, 11]"
‚úÖ Best Practice: Informative logging for default value usage,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 4277, 1988, 8748]",0.5,602,best_practice,210,Informative logging for default value usage,,583,"            freq=self.freq,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 28, 944, 13, 19503, 80, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for missing data handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4814, 1366, 9041]",0.5,610,sast_risk,212,Potential for missing data handling,Low,602,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Informative logging for default value usage,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 4277, 1988, 8748]",0.5,628,best_practice,215,Informative logging for default value usage,,610,        # check buy_price data and sell_price data,"[220, 220, 220, 220, 220, 220, 220, 1303, 2198, 2822, 62, 20888, 1366, 290, 3677, 62, 20888, 1366]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794]",0.5,654,sast_risk,217,Use of assert for runtime checks,Low,628,"            pstr = getattr(self, attr)  # price string","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 2536, 796, 651, 35226, 7, 944, 11, 708, 81, 8, 220, 1303, 2756, 4731]"
üß† ML Signal: Concatenation of DataFrames,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 341, 286, 6060, 35439]",0.5,689,ml_signal,219,Concatenation of DataFrames,,654,"                self.logger.warning(""{} field data contains nan."".format(pstr))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 43917, 7203, 90, 92, 2214, 1366, 4909, 15709, 526, 13, 18982, 7, 79, 2536, 4008]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,706,best_practice,205,Type hinting improves code readability and maintainability,,689,        self.quote_df = D.features(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22708, 62, 7568, 796, 360, 13, 40890, 7]"
üß† ML Signal: Use of isinstance to check types is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 3858, 318, 257, 2219, 3912]",1.0,723,ml_signal,208,Use of isinstance to check types is a common pattern,,706,"            self.start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 2435, 11]"
üß† ML Signal: Use of isinstance to check types is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 3858, 318, 257, 2219, 3912]",1.0,740,ml_signal,211,Use of isinstance to check types is a common pattern,,723,"            disk_cache=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11898, 62, 23870, 28, 17821, 11]"
üß† ML Signal: Checking for None is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 6045, 318, 257, 2219, 3912]",1.0,740,ml_signal,214,Checking for None is a common pattern,,740,,[]
‚ö†Ô∏è SAST Risk (Low): NotImplementedError could expose internal logic if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 714, 15651, 5387, 9156, 611, 407, 12118, 6105]",0.5,766,sast_risk,218,NotImplementedError could expose internal logic if not handled properly,Low,740,            if self.quote_df[pstr].isna().any():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 22708, 62, 7568, 58, 79, 2536, 4083, 271, 2616, 22446, 1092, 33529]"
"üß† ML Signal: Usage of DataFrame operations, which can be a pattern for data manipulation tasks.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 4560, 11, 543, 460, 307, 257, 3912, 329, 1366, 17512, 8861, 13]",1.0,788,ml_signal,216,"Usage of DataFrame operations, which can be a pattern for data manipulation tasks.",,766,"        for attr in (""buy_price"", ""sell_price""):","[220, 220, 220, 220, 220, 220, 220, 329, 708, 81, 287, 5855, 17846, 62, 20888, 1600, 366, 7255, 62, 20888, 1, 2599]"
"üß† ML Signal: Conditional logic based on a method call, indicating decision-making patterns.","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 2446, 869, 11, 12739, 2551, 12, 8601, 7572, 13]",1.0,814,ml_signal,218,"Conditional logic based on a method call, indicating decision-making patterns.",,788,            if self.quote_df[pstr].isna().any():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 22708, 62, 7568, 58, 79, 2536, 4083, 271, 2616, 22446, 1092, 33529]"
"üß† ML Signal: Assigning boolean values to DataFrame columns, a common data processing pattern.","[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 25131, 3815, 284, 6060, 19778, 15180, 11, 257, 2219, 1366, 7587, 3912, 13]",0.5,830,ml_signal,221,"Assigning boolean values to DataFrame columns, a common data processing pattern.",,814,        # update trade_w_adj_price,"[220, 220, 220, 220, 220, 220, 220, 1303, 4296, 3292, 62, 86, 62, 41255, 62, 20888]"
‚úÖ Best Practice: Use of type casting to ensure correct data type.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 13092, 284, 4155, 3376, 1366, 2099, 13]",1.0,852,best_practice,225,Use of type casting to ensure correct data type.,,830,            self.trade_w_adj_price = True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 25351, 62, 86, 62, 41255, 62, 20888, 796, 6407]"
"üß† ML Signal: Logical operations on DataFrame columns, indicating data filtering or transformation.","[8582, 100, 254, 10373, 26484, 25, 5972, 605, 4560, 319, 6060, 19778, 15180, 11, 12739, 1366, 25431, 393, 13389, 13]",1.0,873,ml_signal,227,"Logical operations on DataFrame columns, indicating data filtering or transformation.",,852,            if self.trade_unit is not None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 25351, 62, 20850, 318, 407, 6045, 25]"
‚úÖ Best Practice: Use of type casting to ensure correct data type.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 13092, 284, 4155, 3376, 1366, 2099, 13]",1.0,895,best_practice,232,Use of type casting to ensure correct data type.,,873,            self.trade_w_adj_price = False,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 25351, 62, 86, 62, 41255, 62, 20888, 796, 10352]"
"üß† ML Signal: Use of comparison operations on DataFrame columns, a pattern for threshold-based filtering.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7208, 4560, 319, 6060, 19778, 15180, 11, 257, 3912, 329, 11387, 12, 3106, 25431, 13]",1.0,905,ml_signal,233,"Use of comparison operations on DataFrame columns, a pattern for threshold-based filtering.",,895,        # update limit,"[220, 220, 220, 220, 220, 220, 220, 1303, 4296, 4179]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701]",1.0,935,sast_risk,262,Use of assert for runtime checks can be disabled with optimization flags,Low,905,"    def _get_limit_type(self, limit_threshold: Union[tuple, float, None]) -> str:","[220, 220, 220, 825, 4808, 1136, 62, 32374, 62, 4906, 7, 944, 11, 4179, 62, 400, 10126, 25, 4479, 58, 83, 29291, 11, 12178, 11, 6045, 12962, 4613, 965, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701]",1.0,954,sast_risk,265,Use of assert for runtime checks can be disabled with optimization flags,Low,935,            return self.LT_TP_EXP,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 27734, 62, 7250, 62, 49864]"
‚úÖ Best Practice: Docstring provides clear parameter and return value descriptions,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 290, 1441, 1988, 16969]",0.5,978,best_practice,277,Docstring provides clear parameter and return value descriptions,,954,        limit_type = self._get_limit_type(limit_threshold),"[220, 220, 220, 220, 220, 220, 220, 4179, 62, 4906, 796, 2116, 13557, 1136, 62, 32374, 62, 4906, 7, 32374, 62, 400, 10126, 8]"
üß† ML Signal: Usage of method chaining to access data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 284, 1895, 1366]",0.5,1017,ml_signal,295,Usage of method chaining to access data,,978,"    def _get_vol_limit(volume_threshold: Union[tuple, dict, None]) -> Tuple[Optional[list], Optional[list], set]:","[220, 220, 220, 825, 4808, 1136, 62, 10396, 62, 32374, 7, 29048, 62, 400, 10126, 25, 4479, 58, 83, 29291, 11, 8633, 11, 6045, 12962, 4613, 309, 29291, 58, 30719, 58, 4868, 4357, 32233, 58, 4868, 4357, 900, 5974]"
üß† ML Signal: Usage of method chaining to access data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 284, 1895, 1366]",0.5,1030,ml_signal,297,Usage of method chaining to access data,,1017,        preprocess the volume limit.,"[220, 220, 220, 220, 220, 220, 220, 662, 14681, 262, 6115, 4179, 13]"
üß† ML Signal: Usage of method chaining to access data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 284, 1895, 1366]",0.5,1038,ml_signal,300,Usage of method chaining to access data,,1030,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Usage of method chaining to access data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 284, 1895, 1366]",0.5,1057,ml_signal,303,Usage of method chaining to access data,,1038,            please refer to the doc of exchange.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3387, 3522, 284, 262, 2205, 286, 5163, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if direction is not recognized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 4571, 318, 407, 8018]",0.5,1077,sast_risk,307,Potential for ValueError if direction is not recognized,Low,1057,            the fields need to get from qlib.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 7032, 761, 284, 651, 422, 10662, 8019, 13]"
üß† ML Signal: Checks if a stock is in the list of all stocks,"[8582, 100, 254, 10373, 26484, 25, 47719, 611, 257, 4283, 318, 287, 262, 1351, 286, 477, 14420]",1.0,1097,ml_signal,310,Checks if a stock is in the list of all stocks,,1077,        sell_vol_limit: List[Tuple[str]],"[220, 220, 220, 220, 220, 220, 220, 3677, 62, 10396, 62, 32374, 25, 7343, 58, 51, 29291, 58, 2536, 11907]"
üß† ML Signal: Retrieves stock data for a given time range,"[8582, 100, 254, 10373, 26484, 25, 4990, 5034, 1158, 4283, 1366, 329, 257, 1813, 640, 2837]",1.0,1106,ml_signal,312,Retrieves stock data for a given time range,,1097,        Raises,"[220, 220, 220, 220, 220, 220, 220, 7567, 2696]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType dereference if close is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 1969, 318, 6045]",1.0,1115,sast_risk,314,Potential NoneType dereference if close is None,Low,1106,        ValueError,"[220, 220, 220, 220, 220, 220, 220, 11052, 12331]"
‚úÖ Best Practice: Use isinstance to check type before casting,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 2099, 878, 13092]",0.5,1130,best_practice,317,Use isinstance to check type before casting,,1115,        if volume_threshold is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 6115, 62, 400, 10126, 318, 6045, 25]"
‚úÖ Best Practice: Use cast for type hinting and clarity,"[26486, 227, 6705, 19939, 25, 5765, 3350, 329, 2099, 9254, 278, 290, 16287]",1.0,1130,best_practice,319,Use cast for type hinting and clarity,,1130,,[]
‚ö†Ô∏è SAST Risk (Low): np.isnan can raise TypeError if close is not a float,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45941, 13, 271, 12647, 460, 5298, 5994, 12331, 611, 1969, 318, 407, 257, 12178]",0.5,1141,sast_risk,320,np.isnan can raise TypeError if close is not a float,Low,1130,        fields = set(),"[220, 220, 220, 220, 220, 220, 220, 7032, 796, 900, 3419]"
‚úÖ Best Practice: Type hints improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1152,best_practice,320,Type hints improve code readability and maintainability,,1141,        fields = set(),"[220, 220, 220, 220, 220, 220, 220, 7032, 796, 900, 3419]"
üß† ML Signal: Function usage pattern for determining stock tradability,"[8582, 100, 254, 10373, 26484, 25, 15553, 8748, 3912, 329, 13213, 4283, 2083, 1799]",0.5,1173,ml_signal,327,Function usage pattern for determining stock tradability,,1152,"        for key, vol_limit in volume_threshold.items():","[220, 220, 220, 220, 220, 220, 220, 329, 1994, 11, 2322, 62, 32374, 287, 6115, 62, 400, 10126, 13, 23814, 33529]"
üß† ML Signal: Method call pattern for checking stock suspension,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 10627, 4283, 11461]",1.0,1194,ml_signal,331,Method call pattern for checking stock suspension,,1173,"            if key in (""buy"", ""all""):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1994, 287, 5855, 17846, 1600, 366, 439, 1, 2599]"
üß† ML Signal: Method call pattern for checking stock limit,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 10627, 4283, 4179]",1.0,1221,ml_signal,332,Method call pattern for checking stock limit,,1194,                buy_vol_limit.append(vol_limit),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2822, 62, 10396, 62, 32374, 13, 33295, 7, 10396, 62, 32374, 8]"
üß† ML Signal: Method signature and parameter types can be used to infer method behavior and usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 11507, 3858, 460, 307, 973, 284, 13249, 2446, 4069, 290, 8748, 7572]",1.0,1242,ml_signal,331,Method signature and parameter types can be used to infer method behavior and usage patterns,,1221,"            if key in (""buy"", ""all""):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1994, 287, 5855, 17846, 1600, 366, 439, 1, 2599]"
üß† ML Signal: Return statement with method call indicates delegation of responsibility,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 351, 2446, 869, 9217, 22635, 286, 5798]",1.0,1263,ml_signal,333,Return statement with method call indicates delegation of responsibility,,1242,"            if key in (""sell"", ""all""):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1994, 287, 5855, 7255, 1600, 366, 439, 1, 2599]"
‚úÖ Best Practice: Check for order validity before proceeding with processing.,"[26486, 227, 6705, 19939, 25, 6822, 329, 1502, 19648, 878, 18788, 351, 7587, 13]",1.0,1279,best_practice,349,Check for order validity before proceeding with processing.,,1263,        start_time: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Logging failure reasons can be useful for training models to predict order failures.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 5287, 3840, 460, 307, 4465, 329, 3047, 4981, 284, 4331, 1502, 15536, 13]",1.0,1296,ml_signal,352,Logging failure reasons can be useful for training models to predict order failures.,,1279,"            trade direction, by default None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 4571, 11, 416, 4277, 6045]"
‚ö†Ô∏è SAST Risk (Low): Potential logic error if both trade_account and position are provided.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 9156, 4049, 611, 1111, 3292, 62, 23317, 290, 2292, 389, 2810, 13]",1.0,1323,sast_risk,355,Potential logic error if both trade_account and position are provided.,Low,1296,"            - if direction == Order.SELL, check the sell limit for selling.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 611, 4571, 6624, 8284, 13, 5188, 3069, 11, 2198, 262, 3677, 4179, 329, 6301, 13]"
‚úÖ Best Practice: Check if trade_val is significant before updating accounts or positions.,"[26486, 227, 6705, 19939, 25, 6822, 611, 3292, 62, 2100, 318, 2383, 878, 19698, 5504, 393, 6116, 13]",1.0,1340,best_practice,363,Check if trade_val is significant before updating accounts or positions.,,1323,        # **all** is used when checking limitation.,"[220, 220, 220, 220, 220, 220, 220, 1303, 12429, 439, 1174, 318, 973, 618, 10627, 17385, 13]"
üß† ML Signal: Updating trade accounts can be a key feature for financial models.,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 3292, 5504, 460, 307, 257, 1994, 3895, 329, 3176, 4981, 13]",1.0,1361,ml_signal,366,Updating trade accounts can be a key feature for financial models.,,1340,            # The trading limitation is related to the trading direction,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 383, 7313, 17385, 318, 3519, 284, 262, 7313, 4571]"
üß† ML Signal: Updating positions can be a key feature for financial models.,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 6116, 460, 307, 257, 1994, 3895, 329, 3176, 4981, 13]",1.0,1382,ml_signal,366,Updating positions can be a key feature for financial models.,,1361,            # The trading limitation is related to the trading direction,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 383, 7313, 17385, 318, 3519, 284, 262, 7313, 4571]"
‚úÖ Best Practice: Type hints improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1403,best_practice,366,Type hints improve code readability and maintainability,,1382,            # The trading limitation is related to the trading direction,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 383, 7313, 17385, 318, 3519, 284, 262, 7313, 4571]"
üß† ML Signal: Method call pattern with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 351, 2176, 10007]",0.5,1412,ml_signal,375,Method call pattern with specific parameters,,1403,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Type hinting for parameters and return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1421,best_practice,375,Type hinting for parameters and return type improves code readability and maintainability,,1412,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Method usage pattern for fetching stock data,"[8582, 100, 254, 10373, 26484, 25, 11789, 8748, 3912, 329, 21207, 278, 4283, 1366]",0.5,1428,ml_signal,383,Method usage pattern for fetching stock data,,1421,    ) -> bool:,"[220, 220, 220, 1267, 4613, 20512, 25]"
‚úÖ Best Practice: Docstring provides a clear description of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 338, 4007, 290, 10007]",1.0,1444,best_practice,390,Docstring provides a clear description of the function's purpose and parameters,,1428,            if close is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1969, 318, 6045, 25]"
üß† ML Signal: Usage of method parameter to determine aggregation method,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 11507, 284, 5004, 46500, 2446]",1.0,1461,ml_signal,392,Usage of method parameter to determine aggregation method,,1444,                return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `method` is not validated against expected values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 24396, 63, 318, 407, 31031, 1028, 2938, 3815]",1.0,1478,sast_risk,392,Potential risk if `method` is not validated against expected values,Low,1461,                return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
‚úÖ Best Practice: Use of Enum for direction improves code readability and reduces errors,"[26486, 227, 6705, 19939, 25, 5765, 286, 2039, 388, 329, 4571, 19575, 2438, 1100, 1799, 290, 12850, 8563]",0.5,1487,best_practice,400,Use of Enum for direction improves code readability and reduces errors,,1478,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): NotImplementedError could expose internal logic if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 714, 15651, 5387, 9156, 611, 407, 12118, 6105]",0.5,1500,sast_risk,406,NotImplementedError could expose internal logic if not handled properly,Low,1487,"        stock_id: str,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 25, 965, 11]"
üß† ML Signal: Pattern of fetching data based on dynamic parameters,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 21207, 278, 1366, 1912, 319, 8925, 10007]",0.5,1517,ml_signal,408,Pattern of fetching data based on dynamic parameters,,1500,"        end_time: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11]"
"‚ö†Ô∏è SAST Risk (Low): Potential issue if deal_price is None or NaN, handled by logging and fallback","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 1730, 62, 20888, 318, 6045, 393, 11013, 45, 11, 12118, 416, 18931, 290, 2121, 1891]",0.5,1524,sast_risk,410,"Potential issue if deal_price is None or NaN, handled by logging and fallback",Low,1517,    ) -> bool:,"[220, 220, 220, 1267, 4613, 20512, 25]"
üß† ML Signal: Logging patterns for unexpected or edge-case values,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 7572, 329, 10059, 393, 5743, 12, 7442, 3815]",0.5,1534,ml_signal,412,Logging patterns for unexpected or edge-case values,,1524,        return not (,"[220, 220, 220, 220, 220, 220, 220, 1441, 407, 357]"
üß† ML Signal: Fallback mechanism for handling invalid data,"[8582, 100, 254, 10373, 26484, 25, 7218, 1891, 9030, 329, 9041, 12515, 1366]",0.5,1544,ml_signal,412,Fallback mechanism for handling invalid data,,1534,        return not (,"[220, 220, 220, 220, 220, 220, 220, 1441, 407, 357]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,1560,sast_risk,425,Use of assert for input validation can be bypassed if Python is run with optimizations,Low,1544,"        position: BasePosition | None = None,","[220, 220, 220, 220, 220, 220, 220, 2292, 25, 7308, 26545, 930, 6045, 796, 6045, 11]"
üß† ML Signal: Checking if an item exists in a collection before proceeding,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 2378, 7160, 287, 257, 4947, 878, 18788]",1.0,1574,ml_signal,427,Checking if an item exists in a collection before proceeding,,1560,"    ) -> Tuple[float, float, float]:","[220, 220, 220, 1267, 4613, 309, 29291, 58, 22468, 11, 12178, 11, 12178, 5974]"
üß† ML Signal: Returning data based on a method call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 42882, 1366, 1912, 319, 257, 2446, 869, 351, 2176, 10007]",1.0,1587,ml_signal,429,Returning data based on a method call with specific parameters,,1574,        Deal order when the actual transaction,"[220, 220, 220, 220, 220, 220, 220, 15138, 1502, 618, 262, 4036, 8611]"
‚úÖ Best Practice: Check if stock is tradable before proceeding with calculations,"[26486, 227, 6705, 19939, 25, 6822, 611, 4283, 318, 2083, 540, 878, 18788, 351, 16765]",1.0,1612,best_practice,450,Check if stock is tradable before proceeding with calculations,,1587,"            trade_account.current_position if trade_account else position,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 23317, 13, 14421, 62, 9150, 611, 3292, 62, 23317, 2073, 2292, 11]"
‚ö†Ô∏è SAST Risk (Low): Validate weight to ensure it's within the expected range,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3254, 20540, 3463, 284, 4155, 340, 338, 1626, 262, 2938, 2837]",1.0,1620,sast_risk,452,Validate weight to ensure it's within the expected range,Low,1612,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Validate total tradable weight to prevent logical errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3254, 20540, 2472, 2083, 540, 3463, 284, 2948, 12219, 8563]",1.0,1636,sast_risk,458,Validate total tradable weight to prevent logical errors,Low,1620,            if trade_account:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3292, 62, 23317, 25]"
‚úÖ Best Practice: Check if stock is tradable before calculating amount,"[26486, 227, 6705, 19939, 25, 6822, 611, 4283, 318, 2083, 540, 878, 26019, 2033]",1.0,1646,best_practice,465,Check if stock is tradable before calculating amount,,1636,    def get_quote_info(,"[220, 220, 220, 825, 651, 62, 22708, 62, 10951, 7]"
üß† ML Signal: Usage of division and floor division for financial calculations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7297, 290, 4314, 7297, 329, 3176, 16765]",0.5,1655,ml_signal,476,Usage of division and floor division for financial calculations,,1646,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚úÖ Best Practice: Type hints improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1672,best_practice,478,Type hints improve code readability and maintainability.,,1655,"        start_time: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11]"
üß† ML Signal: Usage of a custom rounding function could indicate domain-specific logic.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 38185, 2163, 714, 7603, 7386, 12, 11423, 9156, 13]",0.5,1690,ml_signal,490,Usage of a custom rounding function could indicate domain-specific logic.,,1672,"    ) -> Union[None, int, float, bool, IndexData]:","[220, 220, 220, 1267, 4613, 4479, 58, 14202, 11, 493, 11, 12178, 11, 20512, 11, 12901, 6601, 5974]"
üß† ML Signal: Usage of a custom rounding function could indicate domain-specific logic.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 38185, 2163, 714, 7603, 7386, 12, 11423, 9156, 13]",0.5,1707,ml_signal,498,Usage of a custom rounding function could indicate domain-specific logic.,,1690,"        end_time: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11]"
‚úÖ Best Practice: Seeding the random number generator ensures reproducibility,"[26486, 227, 6705, 19939, 25, 1001, 8228, 262, 4738, 1271, 17301, 19047, 8186, 66, 2247]",0.5,1716,best_practice,517,Seeding the random number generator ensures reproducibility,,1707,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚ö†Ô∏è SAST Risk (Low): Using random.shuffle can lead to non-deterministic behavior if not seeded,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4738, 13, 1477, 18137, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 611, 407, 48453]",0.5,1733,sast_risk,519,Using random.shuffle can lead to non-deterministic behavior if not seeded,Low,1716,"        start_time: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11]"
üß† ML Signal: Usage of a factor in calculations could indicate a pattern for ML models,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 5766, 287, 16765, 714, 7603, 257, 3912, 329, 10373, 4981]",1.0,1759,ml_signal,526,Usage of a factor in calculations could indicate a pattern for ML models,,1733,            `None`: if the stock is suspended `None` may be returned,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4600, 14202, 63, 25, 611, 262, 4283, 318, 9951, 4600, 14202, 63, 743, 307, 4504]"
üß† ML Signal: Calculating real deal amount based on current and target positions,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 1103, 1730, 2033, 1912, 319, 1459, 290, 2496, 6116]",1.0,1767,ml_signal,528,Calculating real deal amount based on current and target positions,,1759,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Returning a combined list of sell and buy orders,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 5929, 1351, 286, 3677, 290, 2822, 6266]",0.5,1786,ml_signal,551,Returning a combined list of sell and buy orders,,1767,        direction : the direction of the deal price for estimating the amount,"[220, 220, 220, 220, 220, 220, 220, 4571, 1058, 262, 4571, 286, 262, 1730, 2756, 329, 39539, 262, 2033]"
‚úÖ Best Practice: Docstring provides a clear explanation of parameters and function purpose,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 10007, 290, 2163, 4007]",0.5,1814,best_practice,559,Docstring provides a clear explanation of parameters and function purpose,,1786,                # weight_position must be greater than 0 and less than 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3463, 62, 9150, 1276, 307, 3744, 621, 657, 290, 1342, 621, 352]"
üß† ML Signal: Iterating over a dictionary to perform calculations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 284, 1620, 16765]",1.0,1814,ml_signal,568,Iterating over a dictionary to perform calculations,,1814,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect logic if check functions do not handle edge cases,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 9156, 611, 2198, 5499, 466, 407, 5412, 5743, 2663]",0.5,1837,sast_risk,572,Potential for incorrect logic if check functions do not handle edge cases,Low,1814,"                stock_id=stock_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 28, 13578, 62, 312, 11]"
üß† ML Signal: Multiplying deal price by amount to calculate value,"[8582, 100, 254, 10373, 26484, 25, 7854, 541, 3157, 1730, 2756, 416, 2033, 284, 15284, 1988]",1.0,1868,ml_signal,582,Multiplying deal price by amount to calculate value,,1837,"                        start_time=start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11]"
‚úÖ Best Practice: Check for None to handle default parameter values,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 5412, 4277, 11507, 3815]",0.5,1876,best_practice,590,Check for None to handle default parameter values,,1868,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Check for None to ensure required parameters are provided,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 4155, 2672, 10007, 389, 2810]",1.0,1889,best_practice,592,Check for None to ensure required parameters are provided,,1876,        :param current_amount:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 1459, 62, 17287, 25]"
üß† ML Signal: Usage of a method to retrieve a factor based on multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 19818, 257, 5766, 1912, 319, 3294, 10007]",1.0,1900,ml_signal,594,Usage of a method to retrieve a factor based on multiple parameters,,1889,        :param factor:,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 5766, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if inputs are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 17311, 389, 407, 31031]",0.5,1916,sast_risk,597,Potential for ValueError if inputs are not validated,Low,1900,        if current_amount == target_amount:,"[220, 220, 220, 220, 220, 220, 220, 611, 1459, 62, 17287, 6624, 2496, 62, 17287, 25]"
‚úÖ Best Practice: Use of assert to ensure factor is not None before returning,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 284, 4155, 5766, 318, 407, 6045, 878, 8024]",1.0,1932,best_practice,597,Use of assert to ensure factor is not None before returning,,1916,        if current_amount == target_amount:,"[220, 220, 220, 220, 220, 220, 220, 611, 1459, 62, 17287, 6624, 2496, 62, 17287, 25]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 10007]",1.0,1950,best_practice,604,Docstring provides a clear explanation of the method's purpose and parameters,,1932,            if target_amount == 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2496, 62, 17287, 6624, 657, 25]"
üß† ML Signal: Conditional logic based on instance attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4554, 12608]",1.0,1960,ml_signal,620,Conditional logic based on instance attributes,,1950,        Parameter:,"[220, 220, 220, 220, 220, 220, 220, 25139, 2357, 25]"
üß† ML Signal: Return value based on calculated factor,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 1912, 319, 10488, 5766]",0.5,1974,ml_signal,628,Return value based on calculated factor,,1960,        buy_order_list = [],"[220, 220, 220, 220, 220, 220, 220, 2822, 62, 2875, 62, 4868, 796, 17635]"
üß† ML Signal: Return None when conditions are not met,"[8582, 100, 254, 10373, 26484, 25, 8229, 6045, 618, 3403, 389, 407, 1138]",1.0,1988,ml_signal,629,Return None when conditions are not met,,1974,        sell_order_list = [],"[220, 220, 220, 220, 220, 220, 220, 3677, 62, 2875, 62, 4868, 796, 17635]"
‚úÖ Best Practice: Docstring provides a brief explanation of parameters and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 7468, 286, 10007, 290, 1441, 1988]",1.0,2021,best_practice,637,Docstring provides a brief explanation of parameters and return value,,1988,        sorted_ids = sorted(set(list(current_position.keys()) + list(target_position.keys()))),"[220, 220, 220, 220, 220, 220, 220, 23243, 62, 2340, 796, 23243, 7, 2617, 7, 4868, 7, 14421, 62, 9150, 13, 13083, 28955, 1343, 1351, 7, 16793, 62, 9150, 13, 13083, 3419, 22305]"
‚úÖ Best Practice: Check for conditions before proceeding with calculations,"[26486, 227, 6705, 19939, 25, 6822, 329, 3403, 878, 18788, 351, 16765]",1.0,2021,best_practice,644,Check for conditions before proceeding with calculations,,2021,,[]
üß† ML Signal: Pattern of using a helper function to get or validate a value,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 1262, 257, 31904, 2163, 284, 651, 393, 26571, 257, 1988]",0.5,2021,ml_signal,644,Pattern of using a helper function to get or validate a value,,2021,,[]
‚ö†Ô∏è SAST Risk (Low): Potential floating-point arithmetic issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12462, 12, 4122, 34768, 2428]",0.5,2039,sast_risk,653,Potential floating-point arithmetic issues,Low,2021,                # buy stock,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2822, 4283]"
üß† ML Signal: Conditional logic based on order direction,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1502, 4571]",0.5,2052,ml_signal,664,Conditional logic based on order direction,,2039,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking can be bypassed in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627, 460, 307, 17286, 276, 287, 3227]",0.5,2083,sast_risk,671,Use of assert for type checking can be bypassed in production,Low,2052,"                        start_time=start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11]"
üß† ML Signal: Data retrieval pattern for current limit,"[8582, 100, 254, 10373, 26484, 25, 6060, 45069, 3912, 329, 1459, 4179]",0.5,2092,ml_signal,680,Data retrieval pattern for current limit,,2083,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Data retrieval pattern for cumulative limit,"[8582, 100, 254, 10373, 26484, 25, 6060, 45069, 3912, 329, 23818, 4179]",0.5,2111,ml_signal,690,Data retrieval pattern for cumulative limit,,2092,        direction : the direction of the deal price for estimating the amount,"[220, 220, 220, 220, 220, 220, 220, 4571, 1058, 262, 4571, 286, 262, 1730, 2756, 329, 39539, 262, 2033]"
‚úÖ Best Practice: Use of max and min to ensure deal_amount is within valid range,"[26486, 227, 6705, 19939, 25, 5765, 286, 3509, 290, 949, 284, 4155, 1730, 62, 17287, 318, 1626, 4938, 2837]",1.0,2127,best_practice,696,Use of max and min to ensure deal_amount is within valid range,,2111,        for stock_id in amount_dict:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 62, 312, 287, 2033, 62, 11600, 25]"
üß† ML Signal: Logging pattern for clipped orders,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 3912, 329, 49305, 6266]",0.5,2147,ml_signal,697,Logging pattern for clipped orders,,2127,            if not only_tradable or (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 691, 62, 2213, 324, 540, 393, 357]"
‚úÖ Best Practice: Docstring provides clear explanation of parameters and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 7468, 286, 10007, 290, 1441, 1988]",1.0,2167,best_practice,697,Docstring provides clear explanation of parameters and return value,,2147,            if not only_tradable or (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 691, 62, 2213, 324, 540, 393, 357]"
‚úÖ Best Practice: Use of descriptive variable names like 'critical_price' improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 588, 705, 34666, 62, 20888, 6, 19575, 1100, 1799]",1.0,2167,best_practice,711,Use of descriptive variable names like 'critical_price' improves readability,,2167,,[]
üß† ML Signal: Pattern of calculating maximum trade amount based on cash and cost ratio,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26019, 5415, 3292, 2033, 1912, 319, 5003, 290, 1575, 8064]",1.0,2182,ml_signal,714,Pattern of calculating maximum trade amount based on cash and cost ratio,,2167,"        factor: float | None = None,","[220, 220, 220, 220, 220, 220, 220, 5766, 25, 12178, 930, 6045, 796, 6045, 11]"
üß† ML Signal: Pattern of calculating trade amount when cash is less than critical price,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26019, 3292, 2033, 618, 5003, 318, 1342, 621, 4688, 2756]",1.0,2201,ml_signal,716,Pattern of calculating trade amount when cash is less than critical price,,2182,"        start_time: pd.Timestamp = None,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823, 796, 6045, 11]"
‚úÖ Best Practice: Use of type casting to ensure trade_price is a float,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 13092, 284, 4155, 3292, 62, 20888, 318, 257, 12178]",1.0,2216,best_practice,730,Use of type casting to ensure trade_price is a float,,2201,"        factor: float | None = None,","[220, 220, 220, 220, 220, 220, 220, 5766, 25, 12178, 930, 6045, 796, 6045, 11]"
‚úÖ Best Practice: Use of type casting to ensure total_trade_val is a float,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 13092, 284, 4155, 2472, 62, 25351, 62, 2100, 318, 257, 12178]",1.0,2224,best_practice,735,Use of type casting to ensure total_trade_val is a float,,2216,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Encapsulation of logic in a helper function for clarity,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 9156, 287, 257, 31904, 2163, 329, 16287]",0.5,2232,best_practice,739,Encapsulation of logic in a helper function for clarity,,2224,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if total_trade_val is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2472, 62, 25351, 62, 2100, 318, 6632]",0.5,2246,sast_risk,742,Potential division by zero if total_trade_val is zero,Low,2232,            the adjusted factor,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 12328, 5766]"
‚ö†Ô∏è SAST Risk (Low): Potential floating-point precision issues with np.isclose,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12462, 12, 4122, 15440, 2428, 351, 45941, 13, 271, 19836]",0.5,2269,sast_risk,754,Potential floating-point precision issues with np.isclose,Low,2246,"                start_time=start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11]"
‚úÖ Best Practice: Encapsulation of logic in a helper function for clarity,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 9156, 287, 257, 31904, 2163, 329, 16287]",0.5,2292,best_practice,754,Encapsulation of logic in a helper function for clarity,,2269,"                start_time=start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential logic error if cash is insufficient,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 9156, 4049, 611, 5003, 318, 19022]",0.5,2292,sast_risk,760,Potential logic error if cash is insufficient,Low,2292,,[]
üß† ML Signal: Logging of specific events for debugging or analysis,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 2176, 2995, 329, 28769, 393, 3781]",0.5,2311,ml_signal,766,Logging of specific events for debugging or analysis,,2292,"        start_time: pd.Timestamp = None,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823, 796, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential logic error if cash is insufficient,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 9156, 4049, 611, 5003, 318, 19022]",0.5,2319,sast_risk,774,Potential logic error if cash is insufficient,Low,2311,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Logging of specific events for debugging or analysis,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 2176, 2995, 329, 28769, 393, 3781]",0.5,2346,ml_signal,776,Logging of specific events for debugging or analysis,,2319,            # the minimal amount is 1. Add 0.1 for solving precision problem.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 262, 10926, 2033, 318, 352, 13, 3060, 657, 13, 16, 329, 18120, 15440, 1917, 13]"
‚úÖ Best Practice: Encapsulation of logic in a helper function for clarity,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 9156, 287, 257, 31904, 2163, 329, 16287]",0.5,2365,best_practice,778,Encapsulation of logic in a helper function for clarity,,2346,"                factor=factor,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5766, 28, 31412, 11]"
üß† ML Signal: Logging of specific events for debugging or analysis,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 2176, 2995, 329, 28769, 393, 3781]",0.5,2365,ml_signal,785,Logging of specific events for debugging or analysis,,2365,,[]
‚úÖ Best Practice: Encapsulation of logic in a helper function for clarity,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 9156, 287, 257, 31904, 2163, 329, 16287]",0.5,2374,best_practice,788,Encapsulation of logic in a helper function for clarity,,2365,        NOTE:,"[220, 220, 220, 220, 220, 220, 220, 24550, 25]"
‚úÖ Best Practice: Encapsulation of logic in a helper function for clarity,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 9156, 287, 257, 31904, 2163, 329, 16287]",0.5,2399,best_practice,789,Encapsulation of logic in a helper function for clarity,,2374,            this function will change the order.deal_amount **inplace**,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 428, 2163, 481, 1487, 262, 1502, 13, 31769, 62, 17287, 12429, 259, 5372, 1174]"
‚ö†Ô∏è SAST Risk (Low): Use of NotImplementedError for unsupported order directions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1892, 3546, 1154, 12061, 12331, 329, 24222, 1502, 11678]",1.0,2424,sast_risk,789,Use of NotImplementedError for unsupported order directions,Low,2399,            this function will change the order.deal_amount **inplace**,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 428, 2163, 481, 1487, 262, 1502, 13, 31769, 62, 17287, 12429, 259, 5372, 1174]"
‚ö†Ô∏è SAST Risk (Low): Potential logic error if trade_val is too small,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 9156, 4049, 611, 3292, 62, 2100, 318, 1165, 1402]",0.5,2449,sast_risk,789,Potential logic error if trade_val is too small,Low,2424,            this function will change the order.deal_amount **inplace**,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 428, 2163, 481, 1487, 262, 1502, 13, 31769, 62, 17287, 12429, 259, 5372, 1174]"
‚úÖ Best Practice: Use of a helper method to encapsulate the logic for retrieving or creating an instance,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 31904, 2446, 284, 32652, 5039, 262, 9156, 329, 50122, 393, 4441, 281, 4554]",1.0,2481,best_practice,786,Use of a helper method to encapsulate the logic for retrieving or creating an instance,,2449,"    def _clip_amount_by_volume(self, order: Order, dealt_order_amount: dict) -> Optional[float]:","[220, 220, 220, 825, 4808, 15036, 62, 17287, 62, 1525, 62, 29048, 7, 944, 11, 1502, 25, 8284, 11, 11829, 62, 2875, 62, 17287, 25, 8633, 8, 4613, 32233, 58, 22468, 5974]"
‚úÖ Best Practice: Checking for attribute existence before accessing it,"[26486, 227, 6705, 19939, 25, 39432, 329, 11688, 6224, 878, 22534, 340]",1.0,2490,best_practice,788,Checking for attribute existence before accessing it,,2481,        NOTE:,"[220, 220, 220, 220, 220, 220, 220, 24550, 25]"
üß† ML Signal: Lazy initialization pattern for object creation,"[8582, 100, 254, 10373, 26484, 25, 406, 12582, 37588, 3912, 329, 2134, 6282]",1.0,2515,ml_signal,789,Lazy initialization pattern for object creation,,2490,            this function will change the order.deal_amount **inplace**,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 428, 2163, 481, 1487, 262, 1502, 13, 31769, 62, 17287, 12429, 259, 5372, 1174]"
üß† ML Signal: Caching pattern by storing the instance for future use,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 3912, 416, 23069, 262, 4554, 329, 2003, 779]",0.5,2540,ml_signal,789,Caching pattern by storing the instance for future use,,2515,            this function will change the order.deal_amount **inplace**,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 428, 2163, 481, 1487, 262, 1502, 13, 31769, 62, 17287, 12429, 259, 5372, 1174]"

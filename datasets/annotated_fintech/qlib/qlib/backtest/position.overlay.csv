annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Ensures compatibility with future Python versions for type annotations,"[26486, 227, 6705, 19939, 25, 48221, 942, 17764, 351, 2003, 11361, 6300, 329, 2099, 37647]",0.5,7,best_practice,2,Ensures compatibility with future Python versions for type annotations,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
✅ Best Practice: Using type hints improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 8554, 2099, 20269, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,13,best_practice,6,Using type hints improves code readability and maintainability,,7,from datetime import timedelta,"[6738, 4818, 8079, 1330, 28805, 12514]"
✅ Best Practice: Importing libraries with common aliases improves readability,"[26486, 227, 6705, 19939, 25, 17267, 278, 12782, 351, 2219, 47217, 19575, 1100, 1799]",0.5,18,best_practice,9,Importing libraries with common aliases improves readability,,13,import numpy as np,"[11748, 299, 32152, 355, 45941]"
⚠️ SAST Risk (Low): Relative imports can lead to issues in larger projects or when the module structure changes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2428, 287, 4025, 4493, 393, 618, 262, 8265, 4645, 2458]",0.5,24,sast_risk,13,Relative imports can lead to issues in larger projects or when the module structure changes,Low,18,from .decision import Order,"[6738, 764, 12501, 1166, 1330, 8284]"
⚠️ SAST Risk (Low): Relative imports can lead to issues in larger projects or when the module structure changes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2428, 287, 4025, 4493, 393, 618, 262, 8265, 4645, 2458]",0.5,28,sast_risk,16,Relative imports can lead to issues in larger projects or when the module structure changes,Low,24,class BasePosition:,"[4871, 7308, 26545, 25]"
✅ Best Practice: Consider adding methods or properties to this class to define its behavior or make it more useful.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5050, 393, 6608, 284, 428, 1398, 284, 8160, 663, 4069, 393, 787, 340, 517, 4465, 13]",0.5,34,best_practice,13,Consider adding methods or properties to this class to define its behavior or make it more useful.,,28,from .decision import Order,"[6738, 764, 12501, 1166, 1330, 8284]"
✅ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,34,best_practice,14,Initialize instance variables in the constructor for clarity and maintainability,,34,,[]
✅ Best Practice: Use type annotations for instance variables for better readability and type checking,"[26486, 227, 6705, 19939, 25, 5765, 2099, 37647, 329, 4554, 9633, 329, 1365, 1100, 1799, 290, 2099, 10627]",1.0,38,best_practice,16,Use type annotations for instance variables for better readability and type checking,,34,class BasePosition:,"[4871, 7308, 26545, 25]"
✅ Best Practice: Type hints for parameters and return value improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,42,best_practice,16,Type hints for parameters and return value improve code readability and maintainability,,38,class BasePosition:,"[4871, 7308, 26545, 25]"
✅ Best Practice: Method docstring provides a clear explanation of the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 1441, 1988]",1.0,55,best_practice,18,Method docstring provides a clear explanation of the method's purpose and return value,,42,    The Position wants to maintain the position like a dictionary,"[220, 220, 220, 383, 23158, 3382, 284, 5529, 262, 2292, 588, 257, 22155]"
✅ Best Practice: Returning a boolean value directly is clear and concise,"[26486, 227, 6705, 19939, 25, 42882, 257, 25131, 1988, 3264, 318, 1598, 290, 35327]",0.5,55,best_practice,28,Returning a boolean value directly is clear and concise,,55,,[]
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,68,best_practice,29,Use of type hints for function parameters and return type improves code readability and maintainability.,,55,    def skip_update(self) -> bool:,"[220, 220, 220, 825, 14267, 62, 19119, 7, 944, 8, 4613, 20512, 25]"
✅ Best Practice: Raising NotImplementedError is a clear way to indicate that a method is intended to be overridden.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 257, 2446, 318, 5292, 284, 307, 23170, 4651, 13]",0.5,87,best_practice,41,Raising NotImplementedError is a clear way to indicate that a method is intended to be overridden.,,68,"    def check_stock(self, stock_id: str) -> bool:","[220, 220, 220, 825, 2198, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 8, 4613, 20512, 25]"
✅ Best Practice: Type annotations are used for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 37647, 389, 973, 329, 2163, 10007, 290, 1441, 2099]",0.5,95,best_practice,42,Type annotations are used for function parameters and return type,,87,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"⚠️ SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,121,sast_risk,55,"Method is not implemented, which could lead to runtime errors if called",Low,95,"        raise NotImplementedError(f""Please implement the `check_stock` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 9122, 62, 13578, 63, 2446, 4943]"
✅ Best Practice: Type annotations for parameters and return value improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,121,best_practice,56,Type annotations for parameters and return value improve code readability and maintainability.,,121,,[]
"⚠️ SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444, 13]",1.0,133,sast_risk,67,"Method is not implemented, which could lead to runtime errors if called.",Low,121,        trade_price : float,"[220, 220, 220, 220, 220, 220, 220, 3292, 62, 20888, 1058, 12178]"
✅ Best Practice: Docstring provides a clear description of the method's purpose and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 1441, 2099]",0.5,151,best_practice,68,Docstring provides a clear description of the method's purpose and return type,,133,            the trade price of the dealing results,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 3292, 2756, 286, 262, 7219, 2482]"
"⚠️ SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",0.5,151,sast_risk,76,"Method is not implemented, which could lead to runtime errors if called",Low,151,,[]
✅ Best Practice: Use of NotImplementedError to indicate an abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446]",0.5,151,best_practice,76,Use of NotImplementedError to indicate an abstract method,,151,,[]
✅ Best Practice: Informative error message guiding the developer,"[26486, 227, 6705, 19939, 25, 45255, 876, 4049, 3275, 26727, 262, 8517]",0.5,160,best_practice,78,Informative error message guiding the developer,,151,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
✅ Best Practice: Method signature includes type hinting for return type,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 9254, 278, 329, 1441, 2099]",0.5,169,best_practice,78,Method signature includes type hinting for return type,,160,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
✅ Best Practice: Use of NotImplementedError to indicate an abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446]",1.0,177,best_practice,83,Use of NotImplementedError to indicate an abstract method,,169,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Type hinting for parameters and return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 290, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,203,best_practice,84,Type hinting for parameters and return value improves code readability and maintainability,,177,"        raise NotImplementedError(f""Please implement the `update stock price` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 19119, 4283, 2756, 63, 2446, 4943]"
"⚠️ SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",0.5,212,sast_risk,92,"Method is not implemented, which could lead to runtime errors if called",Low,203,        float:,"[220, 220, 220, 220, 220, 220, 220, 12178, 25]"
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,232,best_practice,93,Use of type hints for function parameters and return type improves code readability and maintainability.,,212,            the value(money) of all the stock,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 1988, 7, 26316, 8, 286, 477, 262, 4283]"
⚠️ SAST Risk (Low): Raising NotImplementedError without implementation can lead to runtime errors if the method is called.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 1231, 7822, 460, 1085, 284, 19124, 8563, 611, 262, 2446, 318, 1444, 13]",1.0,232,sast_risk,105,Raising NotImplementedError without implementation can lead to runtime errors if the method is called.,Low,232,,[]
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,251,best_practice,106,Use of type hints for function parameters and return type improves code readability and maintainability.,,232,"    def get_stock_price(self, code: str) -> float:","[220, 220, 220, 825, 651, 62, 13578, 62, 20888, 7, 944, 11, 2438, 25, 965, 8, 4613, 12178, 25]"
"⚠️ SAST Risk (Low): The method raises NotImplementedError, which is a placeholder and should be implemented to avoid runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 2446, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 318, 257, 46076, 290, 815, 307, 9177, 284, 3368, 19124, 8563, 13]",0.5,259,sast_risk,118,"The method raises NotImplementedError, which is a placeholder and should be implemented to avoid runtime errors.",Low,251,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,267,best_practice,118,Use of type hinting for return type improves code readability and maintainability,,259,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"⚠️ SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,275,sast_risk,127,"Method is not implemented, which could lead to runtime errors if called",Low,267,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,284,best_practice,128,Use of type hints for function parameters and return type improves code readability and maintainability.,,275,        float:,"[220, 220, 220, 220, 220, 220, 220, 12178, 25]"
⚠️ SAST Risk (Low): Using NotImplementedError without implementation can lead to runtime errors if the method is called.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1892, 3546, 1154, 12061, 12331, 1231, 7822, 460, 1085, 284, 19124, 8563, 611, 262, 2446, 318, 1444, 13]",0.5,293,sast_risk,143,Using NotImplementedError without implementation can lead to runtime errors if the method is called.,Low,284,        float:,"[220, 220, 220, 220, 220, 220, 220, 12178, 25]"
✅ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",0.5,302,best_practice,143,Use of type hints for function parameters and return type,,293,        float:,"[220, 220, 220, 220, 220, 220, 220, 12178, 25]"
✅ Best Practice: Use of NotImplementedError to indicate an abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446]",0.5,310,best_practice,152,Use of NotImplementedError to indicate an abstract method,,302,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
"⚠️ SAST Risk (Low): Method raises NotImplementedError, which could lead to runtime errors if not handled","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 12118]",1.0,318,sast_risk,156,"Method raises NotImplementedError, which could lead to runtime errors if not handled",Low,310,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Constants defined at the class level can indicate configuration or state management patterns,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 5447, 379, 262, 1398, 1241, 460, 7603, 8398, 393, 1181, 4542, 7572]",1.0,318,ml_signal,158,Constants defined at the class level can indicate configuration or state management patterns,,318,,[]
🧠 ML Signal: Constants defined at the class level can indicate configuration or state management patterns,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 5447, 379, 262, 1398, 1241, 460, 7603, 8398, 393, 1181, 4542, 7572]",1.0,326,ml_signal,160,Constants defined at the class level can indicate configuration or state management patterns,,318,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Docstring provides a clear explanation of the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 10007]",0.5,334,best_practice,160,Docstring provides a clear explanation of the method's purpose and parameters,,326,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"⚠️ SAST Risk (Low): Method raises NotImplementedError, which is a placeholder and should be implemented","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 318, 257, 46076, 290, 815, 307, 9177]",0.5,358,sast_risk,174,"Method raises NotImplementedError, which is a placeholder and should be implemented",Low,334,            {stock_id : value weight of stock in the position},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391, 13578, 62, 312, 1058, 1988, 3463, 286, 4283, 287, 262, 2292, 92]"
"✅ Best Practice: Method docstring is present, providing a brief description of the method.","[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 1944, 11, 4955, 257, 4506, 6764, 286, 262, 2446, 13]",0.5,382,best_practice,174,"Method docstring is present, providing a brief description of the method.",,358,            {stock_id : value weight of stock in the position},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391, 13578, 62, 312, 1058, 1988, 3463, 286, 4283, 287, 262, 2292, 92]"
✅ Best Practice: Docstring provides a brief description of the method's purpose.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007, 13]",0.5,390,best_practice,175,Docstring provides a brief description of the method's purpose.,,382,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"⚠️ SAST Risk (Low): Raising NotImplementedError is a common practice for abstract methods, but ensure this is replaced in concrete implementations.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 2219, 3357, 329, 12531, 5050, 11, 475, 4155, 428, 318, 6928, 287, 10017, 25504, 13]",0.5,409,sast_risk,180,"Raising NotImplementedError is a common practice for abstract methods, but ensure this is replaced in concrete implementations.",Low,390,        Will be called at the end of each bar on each level,"[220, 220, 220, 220, 220, 220, 220, 2561, 307, 1444, 379, 262, 886, 286, 1123, 2318, 319, 1123, 1241]"
✅ Best Practice: Use of __str__ method to provide a string representation of the object,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 2536, 834, 2446, 284, 2148, 257, 4731, 10552, 286, 262, 2134]",1.0,417,best_practice,179,Use of __str__ method to provide a string representation of the object,,409,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
⚠️ SAST Risk (Low): Exposing internal state via __dict__ may leak sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1475, 32927, 5387, 1181, 2884, 11593, 11600, 834, 743, 13044, 8564, 1321]",1.0,417,sast_risk,181,Exposing internal state via __dict__ may leak sensitive information,Low,417,,[]
✅ Best Practice: Using __dict__ for string conversion provides a quick way to see all attributes,"[26486, 227, 6705, 19939, 25, 8554, 11593, 11600, 834, 329, 4731, 11315, 3769, 257, 2068, 835, 284, 766, 477, 12608]",0.5,425,best_practice,182,Using __dict__ for string conversion provides a quick way to see all attributes,,417,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
✅ Best Practice: Use of __repr__ for providing a string representation of the object,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 260, 1050, 834, 329, 4955, 257, 4731, 10552, 286, 262, 2134]",0.5,425,best_practice,181,Use of __repr__ for providing a string representation of the object,,425,,[]
⚠️ SAST Risk (Low): Exposing internal state via __dict__ may leak sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1475, 32927, 5387, 1181, 2884, 11593, 11600, 834, 743, 13044, 8564, 1321]",1.0,433,sast_risk,182,Exposing internal state via __dict__ may leak sensitive information,Low,425,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
✅ Best Practice: Delegating to __dict__.__repr__ for dynamic attribute representation,"[26486, 227, 6705, 19939, 25, 1024, 1455, 803, 284, 11593, 11600, 834, 13, 834, 260, 1050, 834, 329, 8925, 11688, 10552]",0.5,442,best_practice,184,Delegating to __dict__.__repr__ for dynamic attribute representation,,433,        bar :,"[220, 220, 220, 220, 220, 220, 220, 2318, 1058]"
✅ Best Practice: Class docstring provides a clear description and example of the class usage,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 290, 1672, 286, 262, 1398, 8748]",1.0,451,best_practice,183,Class docstring provides a clear description and example of the class usage,,442,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
✅ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,459,best_practice,195,Use of type hints for function parameters improves code readability and maintainability.,,451,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Default mutable arguments should be avoided; use None and set default inside the function.,"[26486, 227, 6705, 19939, 25, 15161, 4517, 540, 7159, 815, 307, 13941, 26, 779, 6045, 290, 900, 4277, 2641, 262, 2163, 13]",0.5,487,best_practice,196,Default mutable arguments should be avoided; use None and set default inside the function.,,459,"        raise NotImplementedError(f""Please implement the `add_count_all` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 2860, 62, 9127, 62, 439, 63, 2446, 4943]"
✅ Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 286, 19552, 12608, 13]",1.0,511,best_practice,214,Calling the superclass's __init__ method ensures proper initialization of inherited attributes.,,487,            - TODO: other assets will be supported in the future.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 16926, 46, 25, 584, 6798, 481, 307, 4855, 287, 262, 2003, 13]"
🧠 ML Signal: Tracking initial cash and position can be useful for financial behavior modeling.,"[8582, 100, 254, 10373, 26484, 25, 37169, 4238, 5003, 290, 2292, 460, 307, 4465, 329, 3176, 4069, 21128, 13]",1.0,538,ml_signal,216,Tracking initial cash and position can be useful for financial behavior modeling.,,511,"        raise NotImplementedError(f""Please implement the `settle_conf` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 2617, 7100, 62, 10414, 63, 2446, 4943]"
✅ Best Practice: Using copy() to avoid modifying the original dictionary passed as an argument.,"[26486, 227, 6705, 19939, 25, 8554, 4866, 3419, 284, 3368, 30620, 262, 2656, 22155, 3804, 355, 281, 4578, 13]",1.0,551,best_practice,218,Using copy() to avoid modifying the original dictionary passed as an argument.,,538,    def settle_commit(self) -> None:,"[220, 220, 220, 825, 12259, 62, 41509, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Identifying stocks with integer values can indicate a pattern of stock management.,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 14420, 351, 18253, 3815, 460, 7603, 257, 3912, 286, 4283, 4542, 13]",0.5,560,ml_signal,220,Identifying stocks with integer values can indicate a pattern of stock management.,,551,        settlement commit,"[220, 220, 220, 220, 220, 220, 220, 9443, 4589]"
🧠 ML Signal: Storing cash in the position dictionary can be a pattern for financial data structures.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 5003, 287, 262, 2292, 22155, 460, 307, 257, 3912, 329, 3176, 1366, 8573, 13]",1.0,573,ml_signal,224,Storing cash in the position dictionary can be a pattern for financial data structures.,,560,    def __str__(self) -> str:,"[220, 220, 220, 825, 11593, 2536, 834, 7, 944, 8, 4613, 965, 25]"
🧠 ML Signal: Calculating account value at initialization can be a pattern for financial applications.,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 1848, 1988, 379, 37588, 460, 307, 257, 3912, 329, 3176, 5479, 13]",0.5,586,ml_signal,224,Calculating account value at initialization can be a pattern for financial applications.,,573,    def __str__(self) -> str:,"[220, 220, 220, 825, 11593, 2536, 834, 7, 944, 8, 4613, 965, 25]"
⚠️ SAST Risk (Low): Catching broad exceptions can hide other potential issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 584, 2785, 2428, 13]",0.5,593,sast_risk,234,Catching broad exceptions can hide other potential issues.,Low,586,    current state of position,"[220, 220, 220, 1459, 1181, 286, 2292]"
✅ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,593,best_practice,223,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,593,,[]
✅ Best Practice: Initialize variables close to where they are used to improve readability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 1969, 284, 810, 484, 389, 973, 284, 2987, 1100, 1799, 13]",0.5,602,best_practice,235,Initialize variables close to where they are used to improve readability.,,593,    a typical example is :{,"[220, 220, 220, 257, 7226, 1672, 318, 1058, 90]"
✅ Best Practice: Use isinstance to check types for better readability and error prevention.,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 3858, 329, 1365, 1100, 1799, 290, 4049, 14196, 13]",0.5,619,best_practice,238,Use isinstance to check types for better readability and error prevention.,,602,"        'amount': <the amount of the security>,","[220, 220, 220, 220, 220, 220, 220, 705, 17287, 10354, 1279, 1169, 2033, 286, 262, 2324, 22330]"
✅ Best Practice: Use get method with default value for dictionary access to avoid KeyError.,"[26486, 227, 6705, 19939, 25, 5765, 651, 2446, 351, 4277, 1988, 329, 22155, 1895, 284, 3368, 7383, 12331, 13]",0.5,625,best_practice,241,Use get method with default value for dictionary access to avoid KeyError.,,619,"      },","[220, 220, 220, 220, 220, 8964]"
✅ Best Practice: Convert start_time to pd.Timestamp to ensure consistent datetime operations.,"[26486, 227, 6705, 19939, 25, 38240, 923, 62, 2435, 284, 279, 67, 13, 14967, 27823, 284, 4155, 6414, 4818, 8079, 4560, 13]",0.5,667,best_practice,245,Convert start_time to pd.Timestamp to ensure consistent datetime operations.,,625,"    def __init__(self, cash: float = 0, position_dict: Dict[str, Union[Dict[str, float], float]] = {}) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 5003, 25, 12178, 796, 657, 11, 2292, 62, 11600, 25, 360, 713, 58, 2536, 11, 4479, 58, 35, 713, 58, 2536, 11, 12178, 4357, 12178, 11907, 796, 23884, 8, 4613, 6045, 25]"
✅ Best Practice: Use timedelta for date arithmetic for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 28805, 12514, 329, 3128, 34768, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,709,best_practice,245,Use timedelta for date arithmetic for better readability and maintainability.,,667,"    def __init__(self, cash: float = 0, position_dict: Dict[str, Union[Dict[str, float], float]] = {}) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 5003, 25, 12178, 796, 657, 11, 2292, 62, 11600, 25, 360, 713, 58, 2536, 11, 4479, 58, 35, 713, 58, 2536, 11, 12178, 4357, 12178, 11907, 796, 23884, 8, 4613, 6045, 25]"
"🧠 ML Signal: Usage of D.features indicates interaction with a data retrieval API, which is a common pattern in ML workflows.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 360, 13, 40890, 9217, 10375, 351, 257, 1366, 45069, 7824, 11, 543, 318, 257, 2219, 3912, 287, 10373, 670, 44041, 13]",0.5,740,ml_signal,253,"Usage of D.features indicates interaction with a data retrieval API, which is a common pattern in ML workflows.",,709,"                            stock_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 11]"
✅ Best Practice: Use groupby and tail to efficiently get the last entry for each group.,"[26486, 227, 6705, 19939, 25, 5765, 1448, 1525, 290, 7894, 284, 18306, 651, 262, 938, 5726, 329, 1123, 1448, 13]",0.5,775,best_practice,260,Use groupby and tail to efficiently get the last entry for each group.,,740,"            if there is no price key in the dict of stocks, it will be filled by _fill_stock_value.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 612, 318, 645, 2756, 1994, 287, 262, 8633, 286, 14420, 11, 340, 481, 307, 5901, 416, 4808, 20797, 62, 13578, 62, 8367, 13]"
⚠️ SAST Risk (Low): Potential information disclosure if lack_stock contains sensitive data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 611, 3092, 62, 13578, 4909, 8564, 1366, 13]",0.5,790,sast_risk,261,Potential information disclosure if lack_stock contains sensitive data.,Low,775,            by default {}.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 416, 4277, 23884, 13]"
✅ Best Practice: Directly update dictionary values to ensure data consistency.,"[26486, 227, 6705, 19939, 25, 4128, 306, 4296, 22155, 3815, 284, 4155, 1366, 15794, 13]",0.5,805,best_practice,272,Directly update dictionary values to ensure data consistency.,,790,"        self.position[""cash""] = cash","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 30350, 8973, 796, 5003]"
"🧠 ML Signal: Updating ""now_account_value"" suggests a pattern of maintaining state, common in financial ML models.","[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 366, 2197, 62, 23317, 62, 8367, 1, 5644, 257, 3912, 286, 10941, 1181, 11, 2219, 287, 3176, 10373, 4981, 13]",0.5,820,ml_signal,272,"Updating ""now_account_value"" suggests a pattern of maintaining state, common in financial ML models.",,805,"        self.position[""cash""] = cash","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 30350, 8973, 796, 5003]"
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,835,best_practice,261,Use of type hints for function parameters and return type improves code readability and maintainability.,,820,            by default {}.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 416, 4277, 23884, 13]"
🧠 ML Signal: Usage of dictionary to store structured data about stocks.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 20793, 1366, 546, 14420, 13]",0.5,835,ml_signal,273,Usage of dictionary to store structured data about stocks.,,835,,[]
"🧠 ML Signal: Tracking stock amount in a dictionary, useful for behavioral analysis.","[8582, 100, 254, 10373, 26484, 25, 37169, 4283, 2033, 287, 257, 22155, 11, 4465, 329, 17211, 3781, 13]",0.5,844,ml_signal,275,"Tracking stock amount in a dictionary, useful for behavioral analysis.",,835,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
"🧠 ML Signal: Tracking stock price in a dictionary, useful for behavioral analysis.","[8582, 100, 254, 10373, 26484, 25, 37169, 4283, 2756, 287, 257, 22155, 11, 4465, 329, 17211, 3781, 13]",0.5,855,ml_signal,277,"Tracking stock price in a dictionary, useful for behavioral analysis.",,844,        except KeyError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 7383, 12331, 25]"
"🧠 ML Signal: Tracking stock weight in a dictionary, useful for behavioral analysis.","[8582, 100, 254, 10373, 26484, 25, 37169, 4283, 3463, 287, 257, 22155, 11, 4465, 329, 17211, 3781, 13]",0.5,855,ml_signal,279,"Tracking stock weight in a dictionary, useful for behavioral analysis.",,855,,[]
✅ Best Practice: Use of descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 1100, 1799]",0.5,866,best_practice,277,Use of descriptive variable names for readability,,855,        except KeyError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 7383, 12331, 25]"
"🧠 ML Signal: Checks if a stock is already in the position, indicating a pattern of stock management","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 257, 4283, 318, 1541, 287, 262, 2292, 11, 12739, 257, 3912, 286, 4283, 4542]",0.5,866,ml_signal,279,"Checks if a stock is already in the position, indicating a pattern of stock management",,866,,[]
✅ Best Practice: Encapsulation of initialization logic in a separate method,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 37588, 9156, 287, 257, 4553, 2446]",0.5,891,best_practice,281,Encapsulation of initialization logic in a separate method,,866,"        """"""fill the stock value by the close price of latest last_days from qlib.","[220, 220, 220, 220, 220, 220, 220, 37227, 20797, 262, 4283, 1988, 416, 262, 1969, 2756, 286, 3452, 938, 62, 12545, 422, 10662, 8019, 13]"
"🧠 ML Signal: Updates existing stock position, indicating a pattern of stock management","[8582, 100, 254, 10373, 26484, 25, 28090, 4683, 4283, 2292, 11, 12739, 257, 3912, 286, 4283, 4542]",0.5,900,ml_signal,284,"Updates existing stock position, indicating a pattern of stock management",,891,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
⚠️ SAST Risk (Low): Potential for negative cash balance if not checked elsewhere,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 4633, 5003, 5236, 611, 407, 10667, 8057]",0.5,918,sast_risk,286,Potential for negative cash balance if not checked elsewhere,Low,900,            the start time of backtest.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 923, 640, 286, 736, 9288, 13]"
✅ Best Practice: Avoid magic numbers by defining a constant for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 24390, 5536, 3146, 416, 16215, 257, 6937, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,927,best_practice,284,Avoid magic numbers by defining a constant for better readability and maintainability,,918,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
⚠️ SAST Risk (Low): Potential KeyError if stock_id is not in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 312, 318, 407, 287, 2116, 13, 9150]",1.0,945,sast_risk,286,Potential KeyError if stock_id is not in self.position,Low,927,            the start time of backtest.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 923, 640, 286, 736, 9288, 13]"
🧠 ML Signal: Pattern of checking for approximate equality using np.isclose,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 329, 27665, 10537, 1262, 45941, 13, 271, 19836]",1.0,959,ml_signal,289,Pattern of checking for approximate equality using np.isclose,,945,"        last_days : int, optional","[220, 220, 220, 220, 220, 220, 220, 938, 62, 12545, 1058, 493, 11, 11902]"
🧠 ML Signal: Pattern of deleting an item from a collection,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 34817, 281, 2378, 422, 257, 4947]",0.5,971,ml_signal,292,Pattern of deleting an item from a collection,,959,        stock_list = [],"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 4868, 796, 17635]"
⚠️ SAST Risk (Low): Potential ValueError if position amount becomes negative,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 11052, 12331, 611, 2292, 2033, 4329, 4633]",1.0,989,sast_risk,293,Potential ValueError if position amount becomes negative,Low,971,"        for stock, value in self.position.items():","[220, 220, 220, 220, 220, 220, 220, 329, 4283, 11, 1988, 287, 2116, 13, 9150, 13, 23814, 33529]"
🧠 ML Signal: Pattern of conditional logic based on self._settle_type,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26340, 9156, 1912, 319, 2116, 13557, 2617, 7100, 62, 4906]",0.5,1004,ml_signal,306,Pattern of conditional logic based on self._settle_type,,989,        price_df = D.features(,"[220, 220, 220, 220, 220, 220, 220, 2756, 62, 7568, 796, 360, 13, 40890, 7]"
⚠️ SAST Risk (Low): Potential NotImplementedError if an unsupported settle type is used,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1892, 3546, 1154, 12061, 12331, 611, 281, 24222, 12259, 2099, 318, 973]",1.0,1021,sast_risk,312,Potential NotImplementedError if an unsupported settle type is used,Low,1004,"            disk_cache=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11898, 62, 23870, 28, 17821, 11]"
⚠️ SAST Risk (Medium): Directly deleting an item from a dictionary without checking if the key exists can raise a KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 34817, 281, 2378, 422, 257, 22155, 1231, 10627, 611, 262, 1994, 7160, 460, 5298, 257, 7383, 12331, 13]",0.5,1036,sast_risk,307,Directly deleting an item from a dictionary without checking if the key exists can raise a KeyError.,Medium,1021,"            stock_list,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 4868, 11]"
"🧠 ML Signal: Method for deleting an item from a dictionary, indicating dictionary manipulation patterns.","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 34817, 281, 2378, 422, 257, 22155, 11, 12739, 22155, 17512, 7572, 13]",0.5,1053,ml_signal,309,"Method for deleting an item from a dictionary, indicating dictionary manipulation patterns.",,1036,"            price_start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2756, 62, 9688, 62, 2435, 11]"
🧠 ML Signal: Method signature and return type can be used to infer method behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 1441, 2099, 460, 307, 973, 284, 13249, 2446, 4069]",0.5,1070,ml_signal,309,Method signature and return type can be used to infer method behavior,,1053,"            price_start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2756, 62, 9688, 62, 2435, 11]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1087,best_practice,310,Type hinting improves code readability and maintainability,,1070,"            price_end_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2756, 62, 437, 62, 2435, 11]"
🧠 ML Signal: Usage of 'in' keyword indicates a membership test pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 259, 6, 21179, 9217, 257, 9931, 1332, 3912]",0.5,1104,ml_signal,312,Usage of 'in' keyword indicates a membership test pattern,,1087,"            disk_cache=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11898, 62, 23870, 28, 17821, 11]"
⚠️ SAST Risk (Low): Potential KeyError if 'self.position' is not a dictionary or set,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 944, 13, 9150, 6, 318, 407, 257, 22155, 393, 900]",0.5,1115,sast_risk,313,Potential KeyError if 'self.position' is not a dictionary or set,Low,1104,        ).dropna(),"[220, 220, 220, 220, 220, 220, 220, 6739, 14781, 2616, 3419]"
✅ Best Practice: Check for valid order direction before proceeding with operations,"[26486, 227, 6705, 19939, 25, 6822, 329, 4938, 1502, 4571, 878, 18788, 351, 4560]",0.5,1132,best_practice,312,Check for valid order direction before proceeding with operations,,1115,"            disk_cache=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11898, 62, 23870, 28, 17821, 11]"
🧠 ML Signal: Pattern of handling BUY orders,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 20571, 56, 6266]",0.5,1173,ml_signal,314,Pattern of handling BUY orders,,1132,"        price_dict = price_df.groupby([""instrument""], group_keys=False).tail(1)[""$close""].to_dict()","[220, 220, 220, 220, 220, 220, 220, 2756, 62, 11600, 796, 2756, 62, 7568, 13, 8094, 1525, 7, 14692, 259, 43872, 33116, 1448, 62, 13083, 28, 25101, 737, 13199, 7, 16, 8, 14692, 3, 19836, 1, 4083, 1462, 62, 11600, 3419]"
🧠 ML Signal: Pattern of handling SELL orders,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 7946, 3069, 6266]",0.5,1201,ml_signal,317,Pattern of handling SELL orders,,1173,            lack_stock = set(stock_list) - set(price_dict),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3092, 62, 13578, 796, 900, 7, 13578, 62, 4868, 8, 532, 900, 7, 20888, 62, 11600, 8]"
⚠️ SAST Risk (Low): Potential for unhandled order directions leading to exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 1502, 11678, 3756, 284, 13269]",0.5,1215,sast_risk,320,Potential for unhandled order directions leading to exceptions,Low,1201,        for stock in stock_list:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 287, 4283, 62, 4868, 25]"
"🧠 ML Signal: Method for updating stock prices, useful for financial data models","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 19698, 4283, 4536, 11, 4465, 329, 3176, 1366, 4981]",1.0,1256,ml_signal,318,"Method for updating stock prices, useful for financial data models",,1215,"            raise ValueError(f""{lack_stock} doesn't have close price in qlib in the latest {last_days} days"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 90, 75, 441, 62, 13578, 92, 1595, 470, 423, 1969, 2756, 287, 10662, 8019, 287, 262, 3452, 1391, 12957, 62, 12545, 92, 1528, 4943]"
⚠️ SAST Risk (Low): Potential KeyError if stock_id does not exist in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 312, 857, 407, 2152, 287, 2116, 13, 9150]",0.5,1256,sast_risk,319,Potential KeyError if stock_id does not exist in self.position,Low,1256,,[]
✅ Best Practice: Consider checking if stock_id exists in self.position before updating,"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 4283, 62, 312, 7160, 287, 2116, 13, 9150, 878, 19698]",0.5,1270,best_practice,320,Consider checking if stock_id exists in self.position before updating,,1256,        for stock in stock_list:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 287, 4283, 62, 4868, 25]"
⚠️ SAST Risk (Low): Potential KeyError if stock_id does not exist in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 312, 857, 407, 2152, 287, 2116, 13, 9150]",0.5,1296,sast_risk,322,Potential KeyError if stock_id does not exist in self.position,Low,1270,"        self.position[""now_account_value""] = self.calculate_value()","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 2197, 62, 23317, 62, 8367, 8973, 796, 2116, 13, 9948, 3129, 378, 62, 8367, 3419]"
✅ Best Practice: Include a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",0.5,1310,best_practice,320,Include a docstring to describe the method's purpose and parameters,,1296,        for stock in stock_list:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 287, 4283, 62, 4868, 25]"
⚠️ SAST Risk (Low): Potential KeyError if stock_id or bar is not present in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 312, 393, 2318, 318, 407, 1944, 287, 2116, 13, 9150]",0.5,1336,sast_risk,322,Potential KeyError if stock_id or bar is not present in self.position,Low,1310,"        self.position[""now_account_value""] = self.calculate_value()","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 2197, 62, 23317, 62, 8367, 8973, 796, 2116, 13, 9948, 3129, 378, 62, 8367, 3419]"
🧠 ML Signal: Usage of dynamic keys in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 8251, 287, 257, 22155]",0.5,1336,ml_signal,323,Usage of dynamic keys in a dictionary,,1336,,[]
"🧠 ML Signal: Method for updating stock weights, indicating financial data manipulation","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 19698, 4283, 19590, 11, 12739, 3176, 1366, 17512]",1.0,1362,ml_signal,322,"Method for updating stock weights, indicating financial data manipulation",,1336,"        self.position[""now_account_value""] = self.calculate_value()","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 2197, 62, 23317, 62, 8367, 8973, 796, 2116, 13, 9948, 3129, 378, 62, 8367, 3419]"
⚠️ SAST Risk (Low): Potential KeyError if stock_id is not in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 312, 318, 407, 287, 2116, 13, 9150]",1.0,1394,sast_risk,324,Potential KeyError if stock_id is not in self.position,Low,1362,"    def _init_stock(self, stock_id: str, amount: float, price: float | None = None) -> None:","[220, 220, 220, 825, 4808, 15003, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 11, 2033, 25, 12178, 11, 2756, 25, 12178, 930, 6045, 796, 6045, 8, 4613, 6045, 25]"
✅ Best Practice: Consider checking if stock_id exists in self.position before updating,"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 4283, 62, 312, 7160, 287, 2116, 13, 9150, 878, 19698]",1.0,1402,best_practice,325,Consider checking if stock_id exists in self.position before updating,,1394,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Iterating over a list of stock IDs to calculate total value,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 4283, 32373, 284, 15284, 2472, 1988]",0.5,1415,ml_signal,326,Iterating over a list of stock IDs to calculate total value,,1402,        initialization the stock in current position,"[220, 220, 220, 220, 220, 220, 220, 37588, 262, 4283, 287, 1459, 2292]"
⚠️ SAST Risk (Low): Potential KeyError if stock_id is not in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 312, 318, 407, 287, 2116, 13, 9150]",1.0,1424,sast_risk,329,Potential KeyError if stock_id is not in self.position,Low,1415,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
✅ Best Practice: Include a docstring to describe the purpose and behavior of the function,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 2163]",0.5,1435,best_practice,330,Include a docstring to describe the purpose and behavior of the function,,1424,        stock_id :,"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 1058]"
🧠 ML Signal: Method call pattern on self object,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 319, 2116, 2134]",0.5,1445,ml_signal,332,Method call pattern on self object,,1435,        amount : float,"[220, 220, 220, 220, 220, 220, 220, 2033, 1058, 12178]"
🧠 ML Signal: Accessing dictionary with key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 1994]",0.5,1454,ml_signal,334,Accessing dictionary with key,,1445,        price :,"[220, 220, 220, 220, 220, 220, 220, 2756, 1058]"
🧠 ML Signal: Using get method with default value,"[8582, 100, 254, 10373, 26484, 25, 8554, 651, 2446, 351, 4277, 1988]",0.5,1473,ml_signal,335,Using get method with default value,,1454,             the price when buying the init stock,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 2756, 618, 7067, 262, 2315, 4283]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1482,best_practice,334,Type hinting improves code readability and maintainability,,1473,        price :,"[220, 220, 220, 220, 220, 220, 220, 2756, 1058]"
🧠 ML Signal: Usage of set to remove duplicates from a list,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 900, 284, 4781, 14184, 16856, 422, 257, 1351]",0.5,1490,ml_signal,336,Usage of set to remove duplicates from a list,,1482,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of dictionary keys to access specific elements,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 8251, 284, 1895, 2176, 4847]",0.5,1507,ml_signal,337,Usage of dictionary keys to access specific elements,,1490,        self.position[stock_id] = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 60, 796, 23884]"
✅ Best Practice: Using set operations to filter out unwanted keys,"[26486, 227, 6705, 19939, 25, 8554, 900, 4560, 284, 8106, 503, 19125, 8251]",0.5,1527,best_practice,338,Using set operations to filter out unwanted keys,,1507,"        self.position[stock_id][""amount""] = amount","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 17287, 8973, 796, 2033]"
🧠 ML Signal: Returning a list of strings,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 286, 13042]",0.5,1559,ml_signal,340,Returning a list of strings,,1527,"        self.position[stock_id][""weight""] = 0  # update the weight in the end of the trade date","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 6551, 8973, 796, 657, 220, 1303, 4296, 262, 3463, 287, 262, 886, 286, 262, 3292, 3128]"
🧠 ML Signal: Method for retrieving stock price by code,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 50122, 4283, 2756, 416, 2438]",1.0,1576,ml_signal,337,Method for retrieving stock price by code,,1559,        self.position[stock_id] = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 60, 796, 23884]"
✅ Best Practice: Type hinting for method return value,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2446, 1441, 1988]",0.5,1596,best_practice,338,Type hinting for method return value,,1576,"        self.position[stock_id][""amount""] = amount","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 17287, 8973, 796, 2033]"
⚠️ SAST Risk (Medium): Potential KeyError if code is not in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7383, 12331, 611, 2438, 318, 407, 287, 2116, 13, 9150]",1.0,1628,sast_risk,340,Potential KeyError if code is not in self.position,Medium,1596,"        self.position[stock_id][""weight""] = 0  # update the weight in the end of the trade date","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 6551, 8973, 796, 657, 220, 1303, 4296, 262, 3463, 287, 262, 886, 286, 262, 3292, 3128]"
✅ Best Practice: Type hinting for the method parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 2446, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1648,best_practice,339,Type hinting for the method parameters and return type improves code readability and maintainability.,,1628,"        self.position[stock_id][""price""] = price","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 20888, 8973, 796, 2756]"
🧠 ML Signal: Usage of dictionary access patterns can be used to train models on common data retrieval methods.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 1895, 7572, 460, 307, 973, 284, 4512, 4981, 319, 2219, 1366, 45069, 5050, 13]",0.5,1648,ml_signal,341,Usage of dictionary access patterns can be used to train models on common data retrieval methods.,,1648,,[]
"⚠️ SAST Risk (Low): Potential KeyError if 'code' is not in 'self.position', though handled with a conditional check.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 8189, 6, 318, 407, 287, 705, 944, 13, 9150, 3256, 996, 12118, 351, 257, 26340, 2198, 13]",1.0,1684,sast_risk,342,"Potential KeyError if 'code' is not in 'self.position', though handled with a conditional check.",Low,1648,"    def _buy_stock(self, stock_id: str, trade_val: float, cost: float, trade_price: float) -> None:","[220, 220, 220, 825, 4808, 17846, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 11, 3292, 62, 2100, 25, 12178, 11, 1575, 25, 12178, 11, 3292, 62, 20888, 25, 12178, 8, 4613, 6045, 25]"
✅ Best Practice: Docstring provides a brief description of the method's purpose,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007]",0.5,1720,best_practice,342,Docstring provides a brief description of the method's purpose,,1684,"    def _buy_stock(self, stock_id: str, trade_val: float, cost: float, trade_price: float) -> None:","[220, 220, 220, 825, 4808, 17846, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 11, 3292, 62, 2100, 25, 12178, 11, 1575, 25, 12178, 11, 3292, 62, 20888, 25, 12178, 8, 4613, 6045, 25]"
🧠 ML Signal: Accessing dictionary with dynamic keys based on input parameters,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 8925, 8251, 1912, 319, 5128, 10007]",1.0,1737,ml_signal,344,Accessing dictionary with dynamic keys based on input parameters,,1720,        if stock_id not in self.position:,"[220, 220, 220, 220, 220, 220, 220, 611, 4283, 62, 312, 407, 287, 2116, 13, 9150, 25]"
🧠 ML Signal: Returning a value from a dictionary based on dynamic key,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1988, 422, 257, 22155, 1912, 319, 8925, 1994]",0.5,1746,ml_signal,346,Returning a value from a dictionary based on dynamic key,,1737,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Explicitly returning 0 for cases where the key is not found,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 657, 329, 2663, 810, 262, 1994, 318, 407, 1043]",1.0,1746,best_practice,349,Explicitly returning 0 for cases where the key is not found,,1746,,[]
"🧠 ML Signal: Method for accessing stock weight by code, indicating usage of financial data structures","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 22534, 4283, 3463, 416, 2438, 11, 12739, 8748, 286, 3176, 1366, 8573]",0.5,1762,ml_signal,347,"Method for accessing stock weight by code, indicating usage of financial data structures",,1746,"            # exist, add amount","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2152, 11, 751, 2033]"
⚠️ SAST Risk (Low): Potential KeyError if 'code' is not in 'self.position',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 8189, 6, 318, 407, 287, 705, 944, 13, 9150, 6]",1.0,1762,sast_risk,349,Potential KeyError if 'code' is not in 'self.position',Low,1762,,[]
"🧠 ML Signal: Accessing dictionary with a key, indicating a pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 257, 1994, 11, 12739, 257, 3912, 286, 1366, 45069]",0.5,1781,ml_signal,350,"Accessing dictionary with a key, indicating a pattern of data retrieval",,1762,"        self.position[""cash""] -= trade_val + cost","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 30350, 8973, 48185, 3292, 62, 2100, 1343, 1575]"
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1781,best_practice,349,Use of type hints for function parameters and return type improves code readability and maintainability.,,1781,,[]
🧠 ML Signal: Accessing dictionary keys to retrieve values is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 8251, 284, 19818, 3815, 318, 257, 2219, 3912, 13]",0.5,1781,ml_signal,351,Accessing dictionary keys to retrieve values is a common pattern.,,1781,,[]
🧠 ML Signal: Conditional logic based on function parameters is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2163, 10007, 318, 257, 2219, 3912, 13]",0.5,1799,ml_signal,353,Conditional logic based on function parameters is a common pattern.,,1781,        trade_amount = trade_val / trade_price,"[220, 220, 220, 220, 220, 220, 220, 3292, 62, 17287, 796, 3292, 62, 2100, 1220, 3292, 62, 20888]"
🧠 ML Signal: Use of dictionary get method with default value is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 651, 2446, 351, 4277, 1988, 318, 257, 2219, 3912, 13]",0.5,1827,ml_signal,355,Use of dictionary get method with default value is a common pattern.,,1799,"            raise KeyError(""{} not in current position"".format(stock_id))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 7383, 12331, 7203, 90, 92, 407, 287, 1459, 2292, 1911, 18982, 7, 13578, 62, 312, 4008]"
🧠 ML Signal: Returning a value from a function is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1988, 422, 257, 2163, 318, 257, 2219, 3912, 13]",0.5,1859,ml_signal,357,Returning a value from a function is a common pattern.,,1827,"            if np.isclose(self.position[stock_id][""amount""], trade_amount):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 45941, 13, 271, 19836, 7, 944, 13, 9150, 58, 13578, 62, 312, 7131, 1, 17287, 33116, 3292, 62, 17287, 2599]"
✅ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,1876,best_practice,354,Include a docstring to describe the method's purpose,,1859,        if stock_id not in self.position:,"[220, 220, 220, 220, 220, 220, 220, 611, 4283, 62, 312, 407, 287, 2116, 13, 9150, 25]"
✅ Best Practice: Initialize variables at the start of the function,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163]",0.5,1908,best_practice,357,Initialize variables at the start of the function,,1876,"            if np.isclose(self.position[stock_id][""amount""], trade_amount):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 45941, 13, 271, 19836, 7, 944, 13, 9150, 58, 13578, 62, 312, 7131, 1, 17287, 33116, 3292, 62, 17287, 2599]"
"🧠 ML Signal: Calls a method to retrieve a list, indicating a pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2446, 284, 19818, 257, 1351, 11, 12739, 257, 3912, 286, 1366, 45069]",0.5,1954,ml_signal,359,"Calls a method to retrieve a list, indicating a pattern of data retrieval",,1908,                # we use np.isclose instead of abs(<the final amount>) <= 1e-5  because `np.isclose` consider both,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 356, 779, 45941, 13, 271, 19836, 2427, 286, 2352, 7, 27, 1169, 2457, 2033, 43734, 19841, 352, 68, 12, 20, 220, 780, 4600, 37659, 13, 271, 19836, 63, 2074, 1111]"
"🧠 ML Signal: Iterating over a list to build a dictionary, a common data processing pattern","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 1382, 257, 22155, 11, 257, 2219, 1366, 7587, 3912]",1.0,1992,ml_signal,361,"Iterating over a list to build a dictionary, a common data processing pattern",,1954,                # Using abs(<the final amount>) <= 1e-5 will result in error when the amount is large,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 8554, 2352, 7, 27, 1169, 2457, 2033, 43734, 19841, 352, 68, 12, 20, 481, 1255, 287, 4049, 618, 262, 2033, 318, 1588]"
🧠 ML Signal: Calls a method to retrieve data for each item in a list,"[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2446, 284, 19818, 1366, 329, 1123, 2378, 287, 257, 1351]",0.5,2017,ml_signal,362,Calls a method to retrieve data for each item in a list,,1992,                self._del_stock(stock_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12381, 62, 13578, 7, 13578, 62, 312, 8]"
✅ Best Practice: Return the constructed dictionary at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 262, 12006, 22155, 379, 262, 886, 286, 262, 2163]",0.5,2042,best_practice,362,Return the constructed dictionary at the end of the function,,2017,                self._del_stock(stock_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12381, 62, 13578, 7, 13578, 62, 312, 8]"
✅ Best Practice: Docstring provides a clear explanation of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 290, 10007]",0.5,2067,best_practice,362,Docstring provides a clear explanation of the function's purpose and parameters,,2042,                self._del_stock(stock_id),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12381, 62, 13578, 7, 13578, 62, 312, 8]"
🧠 ML Signal: Conditional logic based on a boolean parameter,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 11507]",0.5,2101,ml_signal,369,Conditional logic based on a boolean parameter,,2067,"                        ""only have {} {}, require {}"".format(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8807, 423, 23884, 1391, 5512, 2421, 23884, 1911, 18982, 7]"
🧠 ML Signal: Iterating over a list to build a dictionary,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 1382, 257, 22155]",0.5,2117,ml_signal,376,Iterating over a list to build a dictionary,,2101,        new_cash = trade_val - cost,"[220, 220, 220, 220, 220, 220, 220, 649, 62, 30350, 796, 3292, 62, 2100, 532, 1575]"
⚠️ SAST Risk (Low): Potential KeyError if stock_code is not in self.position,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4283, 62, 8189, 318, 407, 287, 2116, 13, 9150]",0.5,2140,sast_risk,378,Potential KeyError if stock_code is not in self.position,Low,2117,"            self.position[""cash_delay""] += new_cash","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 14692, 30350, 62, 40850, 8973, 15853, 649, 62, 30350]"
"🧠 ML Signal: Method name suggests a pattern of incrementing a count, useful for behavior modeling","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 3912, 286, 18703, 278, 257, 954, 11, 4465, 329, 4069, 21128]",0.5,2162,ml_signal,377,"Method name suggests a pattern of incrementing a count, useful for behavior modeling",,2140,        if self._settle_type == self.ST_CASH:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 2617, 7100, 62, 4906, 6624, 2116, 13, 2257, 62, 34, 11211, 25]"
"🧠 ML Signal: Usage of a method to retrieve a list, indicating a common pattern of data retrieval","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 19818, 257, 1351, 11, 12739, 257, 2219, 3912, 286, 1366, 45069]",0.5,2184,ml_signal,379,"Usage of a method to retrieve a list, indicating a common pattern of data retrieval",,2162,        elif self._settle_type == self.ST_NO:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13557, 2617, 7100, 62, 4906, 6624, 2116, 13, 2257, 62, 15285, 25]"
✅ Best Practice: Using 'in' to check for key existence is clear and Pythonic,"[26486, 227, 6705, 19939, 25, 8554, 705, 259, 6, 284, 2198, 329, 1994, 6224, 318, 1598, 290, 11361, 291]",0.5,2193,best_practice,381,Using 'in' to check for key existence is clear and Pythonic,,2184,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"🧠 ML Signal: Incrementing a counter, a common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 10791, 434, 278, 257, 3753, 11, 257, 2219, 3912, 287, 1366, 7587]",0.5,2213,ml_signal,384,"Incrementing a counter, a common pattern in data processing",,2193,"    def _del_stock(self, stock_id: str) -> None:","[220, 220, 220, 825, 4808, 12381, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 8, 4613, 6045, 25]"
✅ Best Practice: Initializing a counter when it doesn't exist ensures correct behavior,"[26486, 227, 6705, 19939, 25, 20768, 2890, 257, 3753, 618, 340, 1595, 470, 2152, 19047, 3376, 4069]",0.5,2232,best_practice,387,Initializing a counter when it doesn't exist ensures correct behavior,,2213,"    def check_stock(self, stock_id: str) -> bool:","[220, 220, 220, 825, 2198, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 8, 4613, 20512, 25]"
✅ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2252,best_practice,384,Use of type hint for return value improves code readability and maintainability,,2232,"    def _del_stock(self, stock_id: str) -> None:","[220, 220, 220, 825, 4808, 12381, 62, 13578, 7, 944, 11, 4283, 62, 312, 25, 965, 8, 4613, 6045, 25]"
🧠 ML Signal: Method call pattern to retrieve a dictionary of stock weights,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 284, 19818, 257, 22155, 286, 4283, 19590]",1.0,2252,ml_signal,386,Method call pattern to retrieve a dictionary of stock weights,,2252,,[]
🧠 ML Signal: Iterating over dictionary items to perform updates,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 284, 1620, 5992]",1.0,2267,ml_signal,388,Iterating over dictionary items to perform updates,,2252,        return stock_id in self.position,"[220, 220, 220, 220, 220, 220, 220, 1441, 4283, 62, 312, 287, 2116, 13, 9150]"
🧠 ML Signal: Method call pattern to update stock weight,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 284, 4296, 4283, 3463]",1.0,2300,ml_signal,390,Method call pattern to update stock weight,,2267,"    def update_order(self, order: Order, trade_val: float, cost: float, trade_price: float) -> None:","[220, 220, 220, 825, 4296, 62, 2875, 7, 944, 11, 1502, 25, 8284, 11, 3292, 62, 2100, 25, 12178, 11, 1575, 25, 12178, 11, 3292, 62, 20888, 25, 12178, 8, 4613, 6045, 25]"
⚠️ SAST Risk (Low): Use of assert for runtime checks can be disabled in optimized mode,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 287, 23392, 4235]",1.0,2300,sast_risk,389,Use of assert for runtime checks can be disabled in optimized mode,Low,2300,,[]
🧠 ML Signal: Conditional logic based on specific string values,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2176, 4731, 3815]",0.5,2317,ml_signal,392,Conditional logic based on specific string values,,2300,        if order.direction == Order.BUY:,"[220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 37295, 6624, 8284, 13, 19499, 56, 25]"
✅ Best Practice: Initialize or reset values explicitly,"[26486, 227, 6705, 19939, 25, 20768, 1096, 393, 13259, 3815, 11777]",0.5,2350,best_practice,394,Initialize or reset values explicitly,,2317,"            self._buy_stock(order.stock_id, trade_val, cost, trade_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 17846, 62, 13578, 7, 2875, 13, 13578, 62, 312, 11, 3292, 62, 2100, 11, 1575, 11, 3292, 62, 20888, 8]"
✅ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2383,best_practice,394,Use of type hint for return value improves code readability and maintainability,,2350,"            self._buy_stock(order.stock_id, trade_val, cost, trade_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 17846, 62, 13578, 7, 2875, 13, 13578, 62, 312, 11, 3292, 62, 2100, 11, 1575, 11, 3292, 62, 20888, 8]"
⚠️ SAST Risk (Low): Direct manipulation of dictionary keys without validation can lead to KeyError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 17512, 286, 22155, 8251, 1231, 21201, 460, 1085, 284, 7383, 12331]",0.5,2416,sast_risk,397,Direct manipulation of dictionary keys without validation can lead to KeyError,Low,2383,"            self._sell_stock(order.stock_id, trade_val, cost, trade_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7255, 62, 13578, 7, 2875, 13, 13578, 62, 312, 11, 3292, 62, 2100, 11, 1575, 11, 3292, 62, 20888, 8]"
⚠️ SAST Risk (Low): Deleting a key from a dictionary without checking its existence can lead to KeyError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42226, 889, 257, 1994, 422, 257, 22155, 1231, 10627, 663, 6224, 460, 1085, 284, 7383, 12331]",0.5,2447,sast_risk,399,Deleting a key from a dictionary without checking its existence can lead to KeyError,Low,2416,"            raise NotImplementedError(""do not support order direction {}"".format(order.direction))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 4598, 407, 1104, 1502, 4571, 23884, 1911, 18982, 7, 2875, 13, 37295, 4008]"
⚠️ SAST Risk (Low): Raising a generic NotImplementedError without additional context can make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 1892, 3546, 1154, 12061, 12331, 1231, 3224, 4732, 460, 787, 28769, 2408]",0.5,2467,sast_risk,402,Raising a generic NotImplementedError without additional context can make debugging difficult,Low,2447,"        self.position[stock_id][""price""] = price","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 20888, 8973, 796, 2756]"
🧠 ML Signal: Resetting state variables after an operation is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 1181, 9633, 706, 281, 4905, 318, 257, 2219, 3912]",0.5,2487,ml_signal,402,Resetting state variables after an operation is a common pattern,,2467,"        self.position[stock_id][""price""] = price","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 20888, 8973, 796, 2756]"
✅ Best Practice: Class docstring provides a clear description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 13]",1.0,2487,best_practice,406,Class docstring provides a clear description of the class purpose.,,2487,,[]
✅ Best Practice: Method docstring provides clarity on the method's purpose,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 16287, 319, 262, 2446, 338, 4007]",0.5,2487,best_practice,406,Method docstring provides clarity on the method's purpose,,2487,,[]
✅ Best Practice: Clear and concise docstring explaining the method's behavior,"[26486, 227, 6705, 19939, 25, 11459, 290, 35327, 2205, 8841, 11170, 262, 2446, 338, 4069]",0.5,2507,best_practice,408,Clear and concise docstring explaining the method's behavior,,2487,"        self.position[stock_id][""weight""] = weight","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9150, 58, 13578, 62, 312, 7131, 1, 6551, 8973, 796, 3463]"
"🧠 ML Signal: Method always returns a constant value, indicating a potential invariant behavior","[8582, 100, 254, 10373, 26484, 25, 11789, 1464, 5860, 257, 6937, 1988, 11, 12739, 257, 2785, 25275, 415, 4069]",0.5,2522,ml_signal,410,"Method always returns a constant value, indicating a potential invariant behavior",,2507,    def calculate_stock_value(self) -> float:,"[220, 220, 220, 825, 15284, 62, 13578, 62, 8367, 7, 944, 8, 4613, 12178, 25]"
✅ Best Practice: Method signature includes type annotations for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 37647, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,2522,best_practice,409,Method signature includes type annotations for better readability and maintainability,,2522,,[]
"🧠 ML Signal: Function returns a constant value, which may indicate a placeholder or incomplete implementation","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 6937, 1988, 11, 543, 743, 7603, 257, 46076, 393, 17503, 7822]",0.5,2541,ml_signal,411,"Function returns a constant value, which may indicate a placeholder or incomplete implementation",,2522,        stock_list = self.get_stock_list(),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 4868, 796, 2116, 13, 1136, 62, 13578, 62, 4868, 3419]"
✅ Best Practice: Method signature is clear and uses type annotations for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 11789, 9877, 318, 1598, 290, 3544, 2099, 37647, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,2560,best_practice,411,Method signature is clear and uses type annotations for better readability and maintainability,,2541,        stock_list = self.get_stock_list(),"[220, 220, 220, 220, 220, 220, 220, 4283, 62, 4868, 796, 2116, 13, 1136, 62, 13578, 62, 4868, 3419]"
🧠 ML Signal: Method signature with parameters indicating a potential update operation,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 10007, 12739, 257, 2785, 4296, 4905]",1.0,2576,ml_signal,413,Method signature with parameters indicating a potential update operation,,2560,        for stock_id in stock_list:,"[220, 220, 220, 220, 220, 220, 220, 329, 4283, 62, 312, 287, 4283, 62, 4868, 25]"
"⚠️ SAST Risk (Low): Method is not implemented, which may lead to unexpected behavior if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 743, 1085, 284, 10059, 4069, 611, 1444]",0.5,2585,sast_risk,415,"Method is not implemented, which may lead to unexpected behavior if called",Low,2576,        return value,"[220, 220, 220, 220, 220, 220, 220, 1441, 1988]"
"✅ Best Practice: Method docstring is provided, which improves code readability and maintainability","[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 2810, 11, 543, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2594,best_practice,415,"Method docstring is provided, which improves code readability and maintainability",,2585,        return value,"[220, 220, 220, 220, 220, 220, 220, 1441, 1988]"
⚠️ SAST Risk (Low): Returning np.inf might lead to unexpected behavior if not handled properly in the calling code,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 45941, 13, 10745, 1244, 1085, 284, 10059, 4069, 611, 407, 12118, 6105, 287, 262, 4585, 2438]",1.0,2632,sast_risk,423,Returning np.inf might lead to unexpected behavior if not handled properly in the calling code,Low,2594,"        stock_list = list(set(self.position.keys()) - {""cash"", ""now_account_value"", ""cash_delay""})","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 4868, 796, 1351, 7, 2617, 7, 944, 13, 9150, 13, 13083, 28955, 532, 19779, 30350, 1600, 366, 2197, 62, 23317, 62, 8367, 1600, 366, 30350, 62, 40850, 20662, 8]"
✅ Best Practice: Use of NotImplementedError to indicate an abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446]",1.0,2670,best_practice,423,Use of NotImplementedError to indicate an abstract method,,2632,"        stock_list = list(set(self.position.keys()) - {""cash"", ""now_account_value"", ""cash_delay""})","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 4868, 796, 1351, 7, 2617, 7, 944, 13, 9150, 13, 13083, 28955, 532, 19779, 30350, 1600, 366, 2197, 62, 23317, 62, 8367, 1600, 366, 30350, 62, 40850, 20662, 8]"
✅ Best Practice: Clear and informative error message for unsupported operation,"[26486, 227, 6705, 19939, 25, 11459, 290, 30304, 4049, 3275, 329, 24222, 4905]",0.5,2670,best_practice,425,Clear and informative error message for unsupported operation,,2670,,[]
✅ Best Practice: Use of NotImplementedError to indicate an unimplemented method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 28418, 1154, 12061, 2446]",1.0,2670,best_practice,425,Use of NotImplementedError to indicate an unimplemented method,,2670,,[]
✅ Best Practice: Clear and descriptive error message for unsupported operation,"[26486, 227, 6705, 19939, 25, 11459, 290, 35644, 4049, 3275, 329, 24222, 4905]",1.0,2687,best_practice,427,Clear and descriptive error message for unsupported operation,,2670,"        return self.position[code][""price""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 58, 8189, 7131, 1, 20888, 8973]"
✅ Best Practice: Method should have a docstring that clearly describes its purpose and parameters,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 326, 4084, 8477, 663, 4007, 290, 10007]",0.5,2704,best_practice,427,Method should have a docstring that clearly describes its purpose and parameters,,2687,"        return self.position[code][""price""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 58, 8189, 7131, 1, 20888, 8973]"
✅ Best Practice: Docstring should be capitalized and end with a period,"[26486, 227, 6705, 19939, 25, 14432, 8841, 815, 307, 3139, 1143, 290, 886, 351, 257, 2278]",0.5,2723,best_practice,429,Docstring should be capitalized and end with a period,,2704,"    def get_stock_amount(self, code: str) -> float:","[220, 220, 220, 825, 651, 62, 13578, 62, 17287, 7, 944, 11, 2438, 25, 965, 8, 4613, 12178, 25]"
⚠️ SAST Risk (Low): Returning np.nan might lead to unexpected behavior if not handled properly by the caller,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 45941, 13, 12647, 1244, 1085, 284, 10059, 4069, 611, 407, 12118, 6105, 416, 262, 24955]",0.5,2723,sast_risk,431,Returning np.nan might lead to unexpected behavior if not handled properly by the caller,Low,2723,,[]
✅ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2748,best_practice,430,Type hinting for the return value improves code readability and maintainability,,2723,"        return self.position[code][""amount""] if code in self.position else 0","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 58, 8189, 7131, 1, 17287, 8973, 611, 2438, 287, 2116, 13, 9150, 2073, 657]"
🧠 ML Signal: Returning a constant value like np.inf could indicate a placeholder or default behavior,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6937, 1988, 588, 45941, 13, 10745, 714, 7603, 257, 46076, 393, 4277, 4069]",1.0,2771,ml_signal,432,Returning a constant value like np.inf could indicate a placeholder or default behavior,,2748,"    def get_stock_count(self, code: str, bar: str) -> float:","[220, 220, 220, 825, 651, 62, 13578, 62, 9127, 7, 944, 11, 2438, 25, 965, 11, 2318, 25, 965, 8, 4613, 12178, 25]"
✅ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,2794,best_practice,432,Include a docstring to describe the function's purpose and parameters,,2771,"    def get_stock_count(self, code: str, bar: str) -> float:","[220, 220, 220, 825, 651, 62, 13578, 62, 9127, 7, 944, 11, 2438, 25, 965, 11, 2318, 25, 965, 8, 4613, 12178, 25]"
"🧠 ML Signal: Returns a constant value, which might indicate a placeholder or unimplemented logic","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 6937, 1988, 11, 543, 1244, 7603, 257, 46076, 393, 28418, 1154, 12061, 9156]",1.0,2815,ml_signal,434,"Returns a constant value, which might indicate a placeholder or unimplemented logic",,2794,"        if f""count_{bar}"" in self.position[code]:","[220, 220, 220, 220, 220, 220, 220, 611, 277, 1, 9127, 23330, 5657, 36786, 287, 2116, 13, 9150, 58, 8189, 5974]"
⚠️ SAST Risk (Low): Returning np.inf could lead to unexpected behavior if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 45941, 13, 10745, 714, 1085, 284, 10059, 4069, 611, 407, 12118, 6105]",0.5,2840,sast_risk,435,Returning np.inf could lead to unexpected behavior if not handled properly,Low,2815,"            return self.position[code][f""count_{bar}""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 58, 8189, 7131, 69, 1, 9127, 23330, 5657, 92, 8973]"
✅ Best Practice: Use of NotImplementedError to indicate an unimplemented method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 28418, 1154, 12061, 2446]",1.0,2861,best_practice,434,Use of NotImplementedError to indicate an unimplemented method,,2840,"        if f""count_{bar}"" in self.position[code]:","[220, 220, 220, 220, 220, 220, 220, 611, 277, 1, 9127, 23330, 5657, 36786, 287, 2116, 13, 9150, 58, 8189, 5974]"
✅ Best Practice: Clear error message indicating the method is not supported,"[26486, 227, 6705, 19939, 25, 11459, 4049, 3275, 12739, 262, 2446, 318, 407, 4855]",1.0,2870,best_practice,436,Clear error message indicating the method is not supported,,2861,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Use of type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2879,best_practice,436,Use of type hinting for function parameters and return type improves code readability and maintainability.,,2870,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Low): Raising NotImplementedError without handling may lead to unhandled exceptions if the method is called.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 1231, 9041, 743, 1085, 284, 555, 38788, 13269, 611, 262, 2446, 318, 1444, 13]",0.5,2879,sast_risk,438,Raising NotImplementedError without handling may lead to unhandled exceptions if the method is called.,Low,2879,,[]
✅ Best Practice: Use of NotImplementedError to indicate an unimplemented method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 28418, 1154, 12061, 2446]",1.0,2879,best_practice,438,Use of NotImplementedError to indicate an unimplemented method,,2879,,[]
✅ Best Practice: Informative error message indicating the method is not supported,"[26486, 227, 6705, 19939, 25, 45255, 876, 4049, 3275, 12739, 262, 2446, 318, 407, 4855]",0.5,2896,best_practice,440,Informative error message indicating the method is not supported,,2879,"        return self.position[code][""weight""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 58, 8189, 7131, 1, 6551, 8973]"
✅ Best Practice: Use of NotImplementedError to indicate an unimplemented method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 28418, 1154, 12061, 2446]",1.0,2913,best_practice,440,Use of NotImplementedError to indicate an unimplemented method,,2896,"        return self.position[code][""weight""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 58, 8189, 7131, 1, 6551, 8973]"
✅ Best Practice: Clear error message indicating the method is not supported,"[26486, 227, 6705, 19939, 25, 11459, 4049, 3275, 12739, 262, 2446, 318, 407, 4855]",0.5,2935,best_practice,442,Clear error message indicating the method is not supported,,2913,"    def get_cash(self, include_settle: bool = False) -> float:","[220, 220, 220, 825, 651, 62, 30350, 7, 944, 11, 2291, 62, 2617, 7100, 25, 20512, 796, 10352, 8, 4613, 12178, 25]"
✅ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2957,best_practice,442,Use of type hints for function parameters and return type improves code readability and maintainability.,,2935,"    def get_cash(self, include_settle: bool = False) -> float:","[220, 220, 220, 825, 651, 62, 30350, 7, 944, 11, 2291, 62, 2617, 7100, 25, 20512, 796, 10352, 8, 4613, 12178, 25]"
"✅ Best Practice: Method is defined with a clear name and type hint, even though it's not yet implemented","[26486, 227, 6705, 19939, 25, 11789, 318, 5447, 351, 257, 1598, 1438, 290, 2099, 9254, 11, 772, 996, 340, 338, 407, 1865, 9177]",0.5,2970,best_practice,444,"Method is defined with a clear name and type hint, even though it's not yet implemented",,2957,        if include_settle:,"[220, 220, 220, 220, 220, 220, 220, 611, 2291, 62, 2617, 7100, 25]"

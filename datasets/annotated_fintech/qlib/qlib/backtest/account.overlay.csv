annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,6,best_practice,3,Grouping imports from the same module together improves readability.,,0,from __future__ import annotations,"[6738, 11593, 37443, 834, 1330, 37647]"
üß† ML Signal: Importing specific functions or classes from a module can indicate which functionalities are frequently used.,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 7603, 543, 10345, 871, 389, 6777, 973, 13]",0.5,20,ml_signal,6,Importing specific functions or classes from a module can indicate which functionalities are frequently used.,,6,"from typing import Dict, List, Optional, Tuple, cast","[6738, 19720, 1330, 360, 713, 11, 7343, 11, 32233, 11, 309, 29291, 11, 3350]"
üß† ML Signal: Importing specific classes from a module can indicate which functionalities are frequently used.,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 460, 7603, 543, 10345, 871, 389, 6777, 973, 13]",0.5,26,ml_signal,8,Importing specific classes from a module can indicate which functionalities are frequently used.,,20,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Consider adding an __init__ method to initialize class attributes,"[26486, 227, 6705, 19939, 25, 12642, 4375, 281, 11593, 15003, 834, 2446, 284, 41216, 1398, 12608]",1.0,57,best_practice,30,Consider adding an __init__ method to initialize class attributes,,26,"        in the specific accomplishment for rtn, it does not consider cost, in other words, rtn - cost = earning","[220, 220, 220, 220, 220, 220, 220, 287, 262, 2176, 29340, 329, 374, 34106, 11, 340, 857, 407, 2074, 1575, 11, 287, 584, 2456, 11, 374, 34106, 532, 1575, 796, 13748]"
‚úÖ Best Practice: Use of __init__ method for initializing class instances,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 15003, 834, 2446, 329, 4238, 2890, 1398, 10245]",1.0,88,best_practice,30,Use of __init__ method for initializing class instances,,57,"        in the specific accomplishment for rtn, it does not consider cost, in other words, rtn - cost = earning","[220, 220, 220, 220, 220, 220, 220, 287, 262, 2176, 29340, 329, 374, 34106, 11, 340, 857, 407, 2074, 1575, 11, 287, 584, 2456, 11, 374, 34106, 532, 1575, 796, 13748]"
‚úÖ Best Practice: Encapsulating initialization logic in a separate method,"[26486, 227, 6705, 19939, 25, 14711, 1686, 8306, 37588, 9156, 287, 257, 4553, 2446]",1.0,89,best_practice,32,Encapsulating initialization logic in a separate method,,88,"""""""",[37811]
‚úÖ Best Practice: Initialize instance variables in a reset method to ensure consistent state,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 257, 13259, 2446, 284, 4155, 6414, 1181]",0.5,89,best_practice,33,Initialize instance variables in a reset method to ensure consistent state,,89,,[]
‚úÖ Best Practice: Initialize instance variables in a reset method to ensure consistent state,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 257, 13259, 2446, 284, 4155, 6414, 1181]",0.5,95,best_practice,35,Initialize instance variables in a reset method to ensure consistent state,,89,class AccumulatedInfo:,"[4871, 6366, 388, 4817, 12360, 25]"
‚úÖ Best Practice: Initialize instance variables in a reset method to ensure consistent state,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 257, 13259, 2446, 284, 4155, 6414, 1181]",0.5,110,best_practice,37,Initialize instance variables in a reset method to ensure consistent state,,95,"    accumulated trading info, including accumulated return/cost/turnover","[220, 220, 220, 22425, 7313, 7508, 11, 1390, 22425, 1441, 14, 15805, 14, 15344, 2502]"
‚úÖ Best Practice: Include a docstring to describe the purpose and usage of the method,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2446]",1.0,114,best_practice,36,Include a docstring to describe the purpose and usage of the method,,110,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Ensure 'self.rtn' is initialized in the class constructor,"[26486, 227, 6705, 19939, 25, 48987, 705, 944, 13, 17034, 77, 6, 318, 23224, 287, 262, 1398, 23772]",0.5,127,best_practice,38,Ensure 'self.rtn' is initialized in the class constructor,,114,    AccumulatedInfo should be shared across different levels,"[220, 220, 220, 6366, 388, 4817, 12360, 815, 307, 4888, 1973, 1180, 2974]"
üß† ML Signal: Usage of '+=' operator indicates accumulation pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 10, 11639, 10088, 9217, 24106, 3912]",0.5,131,ml_signal,39,Usage of '+=' operator indicates accumulation pattern,,127,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Type hint for 'value' improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 705, 8367, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,144,best_practice,38,Type hint for 'value' improves code readability and maintainability,,131,    AccumulatedInfo should be shared across different levels,"[220, 220, 220, 6366, 388, 4817, 12360, 815, 307, 4888, 1973, 1180, 2974]"
"üß† ML Signal: Method modifies an instance attribute, indicating a state change","[8582, 100, 254, 10373, 26484, 25, 11789, 953, 6945, 281, 4554, 11688, 11, 12739, 257, 1181, 1487]",1.0,144,ml_signal,40,"Method modifies an instance attribute, indicating a state change",,144,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for floating-point precision issues when adding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12462, 12, 4122, 15440, 2428, 618, 4375]",0.5,157,sast_risk,41,Potential for floating-point precision issues when adding,Low,144,    def __init__(self) -> None:,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Type hinting for 'value' and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 8367, 6, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,170,best_practice,41,Type hinting for 'value' and return type improves code readability and maintainability.,,157,    def __init__(self) -> None:,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 8, 4613, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying 'self.to' without validation could lead to unexpected behavior if 'value' is not as expected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 705, 944, 13, 1462, 6, 1231, 21201, 714, 1085, 284, 10059, 4069, 611, 705, 8367, 6, 318, 407, 355, 2938, 13]",1.0,170,sast_risk,43,Directly modifying 'self.to' without validation could lead to unexpected behavior if 'value' is not as expected.,Low,170,,[]
‚úÖ Best Practice: Using @property decorator for getter methods enhances encapsulation and provides a cleaner interface.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 329, 651, 353, 5050, 32479, 32652, 1741, 290, 3769, 257, 21723, 7071, 13]",0.5,181,best_practice,44,Using @property decorator for getter methods enhances encapsulation and provides a cleaner interface.,,170,    def reset(self) -> None:,"[220, 220, 220, 825, 13259, 7, 944, 8, 4613, 6045, 25]"
"‚úÖ Best Practice: Consider renaming the method to follow Python's naming conventions, such as `get_return_value`.","[26486, 227, 6705, 19939, 25, 12642, 8851, 3723, 262, 2446, 284, 1061, 11361, 338, 19264, 21396, 11, 884, 355, 4600, 1136, 62, 7783, 62, 8367, 44646]",0.5,192,best_practice,44,"Consider renaming the method to follow Python's naming conventions, such as `get_return_value`.",,181,    def reset(self) -> None:,"[220, 220, 220, 825, 13259, 7, 944, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Using @property decorator is a good practice for creating read-only attributes.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 318, 257, 922, 3357, 329, 4441, 1100, 12, 8807, 12608, 13]",0.5,212,best_practice,47,Using @property decorator is a good practice for creating read-only attributes.,,192,        self.to: float = 0.0  # accumulated turnover,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1462, 25, 12178, 796, 657, 13, 15, 220, 1303, 22425, 25079]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,232,best_practice,47,Use of type hint for return value improves code readability and maintainability,,212,        self.to: float = 0.0  # accumulated turnover,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1462, 25, 12178, 796, 657, 13, 15, 220, 1303, 22425, 25079]"
‚úÖ Best Practice: Use of @property decorator for getter method is a Pythonic way to access attributes,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446, 318, 257, 11361, 291, 835, 284, 1895, 12608]",1.0,245,best_practice,50,Use of @property decorator for getter method is a Pythonic way to access attributes,,232,        self.rtn += value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 17034, 77, 15853, 1988]"
‚úÖ Best Practice: Consider adding a docstring to describe the method's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 4069, 13]",1.0,258,best_practice,50,Consider adding a docstring to describe the method's purpose and behavior.,,245,        self.rtn += value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 17034, 77, 15853, 1988]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'self.to' is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 944, 13, 1462, 6, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",0.5,258,sast_risk,51,Potential risk if 'self.to' is not properly validated or sanitized.,Low,258,,[]
üß† ML Signal: Usage of class attributes in methods can indicate object-oriented design patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 12608, 287, 5050, 460, 7603, 2134, 12, 17107, 1486, 7572, 13]",0.5,275,ml_signal,52,Usage of class attributes in methods can indicate object-oriented design patterns.,,258,"    def add_cost(self, value: float) -> None:","[220, 220, 220, 825, 751, 62, 15805, 7, 944, 11, 1988, 25, 12178, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Class docstring provides context and explanation for the class usage and behavior.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 4732, 290, 7468, 329, 262, 1398, 8748, 290, 4069, 13]",0.5,280,best_practice,58,Class docstring provides context and explanation for the class usage and behavior.,,275,    @property,"[220, 220, 220, 2488, 26745]"
‚ö†Ô∏è SAST Risk (Low): Using mutable default arguments like {} can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4517, 540, 4277, 7159, 588, 23884, 460, 1085, 284, 10059, 4069, 13]",1.0,294,sast_risk,67,Using mutable default arguments like {} can lead to unexpected behavior.,Low,280,    def get_turnover(self) -> float:,"[220, 220, 220, 825, 651, 62, 15344, 2502, 7, 944, 8, 4613, 12178, 25]"
‚úÖ Best Practice: Use explicit type annotations for class attributes.,"[26486, 227, 6705, 19939, 25, 5765, 7952, 2099, 37647, 329, 1398, 12608, 13]",0.5,309,best_practice,84,Use explicit type annotations for class attributes.,,294,"        benchmark_config: dict = {},","[220, 220, 220, 220, 220, 220, 220, 18335, 62, 11250, 25, 8633, 796, 1391, 5512]"
‚úÖ Best Practice: Use explicit type annotations for class attributes.,"[26486, 227, 6705, 19939, 25, 5765, 7952, 2099, 37647, 329, 1398, 12608, 13]",0.5,316,best_practice,87,Use explicit type annotations for class attributes.,,309,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
"üß† ML Signal: Method call with multiple parameters, indicating a complex initialization pattern.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 3294, 10007, 11, 12739, 257, 3716, 37588, 3912, 13]",0.5,316,ml_signal,89,"Method call with multiple parameters, indicating a complex initialization pattern.",,316,,[]
‚úÖ Best Practice: Use of type annotations for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 2163, 10007, 290, 1441, 2099]",0.5,331,best_practice,88,Use of type annotations for function parameters and return type,,316,"        """"""the trade account of backtest.","[220, 220, 220, 220, 220, 220, 220, 37227, 1169, 3292, 1848, 286, 736, 9288, 13]"
üß† ML Signal: Initialization of a class attribute with a parameter value,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 1398, 11688, 351, 257, 11507, 1988]",0.5,331,ml_signal,89,Initialization of a class attribute with a parameter value,,331,,[]
üß† ML Signal: Use of a factory function to initialize an instance,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 8860, 2163, 284, 41216, 281, 4554]",0.5,350,ml_signal,101,Use of a factory function to initialize an instance,,331,"            initial stocks with parameters amount and price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4238, 14420, 351, 10007, 2033, 290, 2756, 11]"
üß† ML Signal: Initialization of a class attribute with a new instance,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 1398, 11688, 351, 257, 649, 4554]",0.5,365,ml_signal,103,Initialization of a class attribute with a new instance,,350,            by default {}.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 416, 4277, 23884, 13]"
‚úÖ Best Practice: Use of Optional for attributes that can be None,"[26486, 227, 6705, 19939, 25, 5765, 286, 32233, 329, 12608, 326, 460, 307, 6045]",0.5,373,best_practice,104,Use of Optional for attributes that can be None,,365,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of Dict with specific key and value types,"[26486, 227, 6705, 19939, 25, 5765, 286, 360, 713, 351, 2176, 1994, 290, 1988, 3858]",0.5,395,best_practice,107,Use of Dict with specific key and value types,,373,        self._port_metr_enabled = port_metr_enabled,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 634, 62, 4164, 81, 62, 25616, 796, 2493, 62, 4164, 81, 62, 25616]"
üß† ML Signal: Method call with keyword arguments,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 21179, 7159]",0.5,424,ml_signal,109,Method call with keyword arguments,,395,"        self.init_vars(init_cash, position_dict, freq, benchmark_config)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 85, 945, 7, 15003, 62, 30350, 11, 2292, 62, 11600, 11, 2030, 80, 11, 18335, 62, 11250, 8]"
‚úÖ Best Practice: Method name is descriptive and follows naming conventions,"[26486, 227, 6705, 19939, 25, 11789, 1438, 318, 35644, 290, 5679, 19264, 21396]",0.5,439,best_practice,103,Method name is descriptive and follows naming conventions,,424,            by default {}.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 416, 4277, 23884, 13]"
üß† ML Signal: Returns a boolean indicating a feature flag or configuration state,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 25131, 12739, 257, 3895, 6056, 393, 8398, 1181]",0.5,462,ml_signal,108,Returns a boolean indicating a feature flag or configuration state,,439,        self.benchmark_config: dict = {}  # avoid no attribute error,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 26968, 4102, 62, 11250, 25, 8633, 796, 23884, 220, 1303, 3368, 645, 11688, 4049]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType if self._port_metr_enabled is not initialized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 611, 2116, 13557, 634, 62, 4164, 81, 62, 25616, 318, 407, 23224]",0.5,491,sast_risk,109,Potential for NoneType if self._port_metr_enabled is not initialized,Low,462,"        self.init_vars(init_cash, position_dict, freq, benchmark_config)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 85, 945, 7, 15003, 62, 30350, 11, 2292, 62, 11600, 11, 2030, 80, 11, 18335, 62, 11250, 8]"
"üß† ML Signal: Method name suggests a reset operation, which is a common pattern in stateful systems.","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 13259, 4905, 11, 543, 318, 257, 2219, 3912, 287, 1181, 913, 3341, 13]",1.0,520,ml_signal,109,"Method name suggests a reset operation, which is a common pattern in stateful systems.",,491,"        self.init_vars(init_cash, position_dict, freq, benchmark_config)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 85, 945, 7, 15003, 62, 30350, 11, 2292, 62, 11600, 11, 2030, 80, 11, 18335, 62, 11250, 8]"
üß† ML Signal: Conditional logic based on a feature flag or configuration.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 3895, 6056, 393, 8398, 13]",1.0,557,ml_signal,111,Conditional logic based on a feature flag or configuration.,,520,"    def init_vars(self, init_cash: float, position_dict: dict, freq: str, benchmark_config: dict) -> None:","[220, 220, 220, 825, 2315, 62, 85, 945, 7, 944, 11, 2315, 62, 30350, 25, 12178, 11, 2292, 62, 11600, 25, 8633, 11, 2030, 80, 25, 965, 11, 18335, 62, 11250, 25, 8633, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Initializing or resetting a dictionary to clear previous state.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 393, 13259, 889, 257, 22155, 284, 1598, 2180, 1181, 13]",1.0,583,best_practice,113,Initializing or resetting a dictionary to clear previous state.,,557,        # - you will see a shallow copy instead of deepcopy in the NestedExecutor;,"[220, 220, 220, 220, 220, 220, 220, 1303, 532, 345, 481, 766, 257, 19337, 4866, 2427, 286, 2769, 30073, 287, 262, 399, 7287, 23002, 38409, 26]"
"‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if ""start_time"" is not in benchmark_config.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 366, 9688, 62, 2435, 1, 318, 407, 287, 18335, 62, 11250, 13]",1.0,607,sast_risk,115,"Potential for KeyError if ""start_time"" is not in benchmark_config.",Low,583,        self.current_position: BasePosition = init_instance_by_config(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 14421, 62, 9150, 25, 7308, 26545, 796, 2315, 62, 39098, 62, 1525, 62, 11250, 7]"
"üß† ML Signal: Use of a method to fill or update stock values, indicating data processing.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 6070, 393, 4296, 4283, 3815, 11, 12739, 1366, 7587, 13]",0.5,627,ml_signal,118,"Use of a method to fill or update stock values, indicating data processing.",,607,"                ""kwargs"": {","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 46265, 22046, 1298, 1391]"
‚úÖ Best Practice: Reinitializing an object to ensure a fresh state.,"[26486, 227, 6705, 19939, 25, 22299, 6847, 2890, 281, 2134, 284, 4155, 257, 4713, 1181, 13]",1.0,647,best_practice,118,Reinitializing an object to ensure a fresh state.,,627,"                ""kwargs"": {","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 46265, 22046, 1298, 1391]"
‚úÖ Best Practice: Check if 'freq' is not None before assignment to avoid unnecessary operations,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 19503, 80, 6, 318, 407, 6045, 878, 16237, 284, 3368, 13114, 4560]",1.0,664,best_practice,127,Check if 'freq' is not None before assignment to avoid unnecessary operations,,647,        # 2) following variables are not shared between layers,"[220, 220, 220, 220, 220, 220, 220, 1303, 362, 8, 1708, 9633, 389, 407, 4888, 1022, 11685]"
‚úÖ Best Practice: Check if 'benchmark_config' is not None before assignment to avoid unnecessary operations,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 26968, 4102, 62, 11250, 6, 318, 407, 6045, 878, 16237, 284, 3368, 13114, 4560]",1.0,690,best_practice,130,Check if 'benchmark_config' is not None before assignment to avoid unnecessary operations,,664,"        self.reset(freq=freq, benchmark_config=benchmark_config)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 42503, 7, 19503, 80, 28, 19503, 80, 11, 18335, 62, 11250, 28, 26968, 4102, 62, 11250, 8]"
‚úÖ Best Practice: Check if 'port_metr_enabled' is not None before assignment to avoid unnecessary operations,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 634, 62, 4164, 81, 62, 25616, 6, 318, 407, 6045, 878, 16237, 284, 3368, 13114, 4560]",1.0,698,best_practice,133,Check if 'port_metr_enabled' is not None before assignment to avoid unnecessary operations,,690,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Method call with instance variables, indicating a pattern of resetting or reinitializing state","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 4554, 9633, 11, 12739, 257, 3912, 286, 13259, 889, 393, 6865, 6847, 2890, 1181]",1.0,726,ml_signal,136,"Method call with instance variables, indicating a pattern of resetting or reinitializing state",,698,        return self._port_metr_enabled and not self.current_position.skip_update(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 634, 62, 4164, 81, 62, 25616, 290, 407, 2116, 13, 14421, 62, 9150, 13, 48267, 62, 19119, 3419]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",0.5,740,best_practice,134,Include a docstring to describe the method's purpose and return value,,726,        Is portfolio-based metrics enabled.,"[220, 220, 220, 220, 220, 220, 220, 1148, 15320, 12, 3106, 20731, 9343, 13]"
‚úÖ Best Practice: Consider using type hints for instance variables like `hist_positions`,"[26486, 227, 6705, 19939, 25, 12642, 1262, 2099, 20269, 329, 4554, 9633, 588, 4600, 10034, 62, 1930, 1756, 63]",0.5,768,best_practice,136,Consider using type hints for instance variables like `hist_positions`,,740,        return self._port_metr_enabled and not self.current_position.skip_update(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 634, 62, 4164, 81, 62, 25616, 290, 407, 2116, 13, 14421, 62, 9150, 13, 48267, 62, 19119, 3419]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,796,best_practice,136,Use of type hint for return value improves code readability and maintainability,,768,        return self._port_metr_enabled and not self.current_position.skip_update(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 634, 62, 4164, 81, 62, 25616, 290, 407, 2116, 13, 14421, 62, 9150, 13, 48267, 62, 19119, 3419]"
"üß† ML Signal: Method call on an object attribute, indicating object-oriented design","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11688, 11, 12739, 2134, 12, 17107, 1486]",0.5,820,ml_signal,138,"Method call on an object attribute, indicating object-oriented design",,796,"    def reset_report(self, freq: str, benchmark_config: dict) -> None:","[220, 220, 220, 825, 13259, 62, 13116, 7, 944, 11, 2030, 80, 25, 965, 11, 18335, 62, 11250, 25, 8633, 8, 4613, 6045, 25]"
"üß† ML Signal: Method updates internal state based on order details, useful for learning trading behavior","[8582, 100, 254, 10373, 26484, 25, 11789, 5992, 5387, 1181, 1912, 319, 1502, 3307, 11, 4465, 329, 4673, 7313, 4069]",1.0,831,ml_signal,139,"Method updates internal state based on order details, useful for learning trading behavior",,820,        # portfolio related metrics,"[220, 220, 220, 220, 220, 220, 220, 1303, 15320, 3519, 20731]"
"üß† ML Signal: Conditional logic based on a feature flag, indicating feature usage patterns","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 3895, 6056, 11, 12739, 3895, 8748, 7572]",1.0,845,ml_signal,141,"Conditional logic based on a feature flag, indicating feature usage patterns",,831,            # NOTE:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25]"
"üß† ML Signal: Tracking turnover, indicative of trading volume behavior","[8582, 100, 254, 10373, 26484, 25, 37169, 25079, 11, 29105, 286, 7313, 6115, 4069]",0.5,876,ml_signal,143,"Tracking turnover, indicative of trading volume behavior",,845,"            self.portfolio_metrics = PortfolioMetrics(freq, benchmark_config)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 634, 13652, 62, 4164, 10466, 796, 4347, 13652, 9171, 10466, 7, 19503, 80, 11, 18335, 62, 11250, 8]"
"üß† ML Signal: Tracking cost, indicative of transaction cost behavior","[8582, 100, 254, 10373, 26484, 25, 37169, 1575, 11, 29105, 286, 8611, 1575, 4069]",0.5,876,ml_signal,145,"Tracking cost, indicative of transaction cost behavior",,876,,[]
‚úÖ Best Practice: Calculate trade_amount once to avoid repeated calculations,"[26486, 227, 6705, 19939, 25, 27131, 378, 3292, 62, 17287, 1752, 284, 3368, 5100, 16765]",0.5,900,best_practice,147,Calculate trade_amount once to avoid repeated calculations,,876,            # The frequency of account may not align with the trading frequency.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 383, 8373, 286, 1848, 743, 407, 10548, 351, 262, 7313, 8373, 13]"
"üß† ML Signal: Different logic paths for buy/sell orders, useful for learning trading strategies","[8582, 100, 254, 10373, 26484, 25, 20615, 9156, 13532, 329, 2822, 14, 7255, 6266, 11, 4465, 329, 4673, 7313, 10064]",1.0,938,ml_signal,149,"Different logic paths for buy/sell orders, useful for learning trading strategies",,900,"            if isinstance(self.benchmark_config, dict) and ""start_time"" in self.benchmark_config:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 944, 13, 26968, 4102, 62, 11250, 11, 8633, 8, 290, 366, 9688, 62, 2435, 1, 287, 2116, 13, 26968, 4102, 62, 11250, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if trade_price is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 3292, 62, 20888, 318, 6632]",1.0,938,sast_risk,151,Potential division by zero if trade_price is zero,Low,938,,[]
"üß† ML Signal: Tracking profit for sell orders, indicative of trading outcome","[8582, 100, 254, 10373, 26484, 25, 37169, 7630, 329, 3677, 6266, 11, 29105, 286, 7313, 8055]",0.5,953,ml_signal,153,"Tracking profit for sell orders, indicative of trading outcome",,938,        self.indicator = Indicator(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 521, 26407, 796, 1423, 26407, 3419]"
"üß† ML Signal: Different logic paths for buy/sell orders, useful for learning trading strategies","[8582, 100, 254, 10373, 26484, 25, 20615, 9156, 13532, 329, 2822, 14, 7255, 6266, 11, 4465, 329, 4673, 7313, 10064]",1.0,953,ml_signal,154,"Different logic paths for buy/sell orders, useful for learning trading strategies",,953,,[]
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if trade_price is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 3292, 62, 20888, 318, 6632]",1.0,960,sast_risk,157,Potential division by zero if trade_price is zero,Low,953,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
"üß† ML Signal: Tracking profit for buy orders, indicative of trading outcome","[8582, 100, 254, 10373, 26484, 25, 37169, 7630, 329, 2822, 6266, 11, 29105, 286, 7313, 8055]",0.5,975,ml_signal,158,"Tracking profit for buy orders, indicative of trading outcome",,960,"        """"""reset freq and report of account","[220, 220, 220, 220, 220, 220, 220, 37227, 42503, 2030, 80, 290, 989, 286, 1848]"
üß† ML Signal: Method signature with specific types and return type can be used to infer method behavior.,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 2176, 3858, 290, 1441, 2099, 460, 307, 973, 284, 13249, 2446, 4069, 13]",0.5,1018,ml_signal,150,Method signature with specific types and return type can be used to infer method behavior.,,975,"                self.current_position.fill_stock_value(self.benchmark_config[""start_time""], self.freq)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 14421, 62, 9150, 13, 20797, 62, 13578, 62, 8367, 7, 944, 13, 26968, 4102, 62, 11250, 14692, 9688, 62, 2435, 33116, 2116, 13, 19503, 80, 8]"
üß† ML Signal: Conditional logic based on order direction can indicate trading strategy patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1502, 4571, 460, 7603, 7313, 4811, 7572, 13]",0.5,1018,ml_signal,154,Conditional logic based on order direction can indicate trading strategy patterns.,,1018,,[]
üß† ML Signal: Method call sequence can indicate order of operations in trading logic.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 8379, 460, 7603, 1502, 286, 4560, 287, 7313, 9156, 13]",0.5,1058,ml_signal,156,Method call sequence can indicate order of operations in trading logic.,,1018,"        self, freq: str | None = None, benchmark_config: dict | None = None, port_metr_enabled: bool | None = None","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 2030, 80, 25, 965, 930, 6045, 796, 6045, 11, 18335, 62, 11250, 25, 8633, 930, 6045, 796, 6045, 11, 2493, 62, 4164, 81, 62, 25616, 25, 20512, 930, 6045, 796, 6045]"
üß† ML Signal: Different method call sequence for different order directions can indicate strategy variations.,"[8582, 100, 254, 10373, 26484, 25, 20615, 2446, 869, 8379, 329, 1180, 1502, 11678, 460, 7603, 4811, 13991, 13]",0.5,1073,ml_signal,158,Different method call sequence for different order directions can indicate strategy variations.,,1058,"        """"""reset freq and report of account","[220, 220, 220, 220, 220, 220, 220, 37227, 42503, 2030, 80, 290, 989, 286, 1848]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701]",1.0,1081,sast_risk,167,Use of assert for runtime checks can be disabled with optimization flags,Low,1073,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Iterating over a list of stocks to update their positions,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 14420, 284, 4296, 511, 6116]",1.0,1096,ml_signal,170,Iterating over a list of stocks to update their positions,,1081,        if benchmark_config is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 18335, 62, 11250, 318, 407, 6045, 25]"
üß† ML Signal: Checking if a stock is suspended during a trade period,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 4283, 318, 9951, 1141, 257, 3292, 2278]",1.0,1122,ml_signal,173,Checking if a stock is suspended during a trade period,,1096,            self._port_metr_enabled = port_metr_enabled,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 634, 62, 4164, 81, 62, 25616, 796, 2493, 62, 4164, 81, 62, 25616]"
üß† ML Signal: Fetching and casting the closing price of a stock,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 290, 13092, 262, 9605, 2756, 286, 257, 4283]",1.0,1122,ml_signal,176,Fetching and casting the closing price of a stock,,1122,,[]
üß† ML Signal: Updating stock price in the current position,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 4283, 2756, 287, 262, 1459, 2292]",1.0,1136,ml_signal,178,Updating stock price in the current position,,1122,        return self.hist_positions,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 10034, 62, 1930, 1756]"
üß† ML Signal: Updating the count of all stocks in the current position,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 262, 954, 286, 477, 14420, 287, 262, 1459, 2292]",1.0,1149,ml_signal,180,Updating the count of all stocks in the current position,,1136,    def get_cash(self) -> float:,"[220, 220, 220, 825, 651, 62, 30350, 7, 944, 8, 4613, 12178, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701]",1.0,1163,sast_risk,178,Use of assert for runtime checks can be disabled with optimization flags,Low,1149,        return self.hist_positions,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 10034, 62, 1930, 1756]"
üß† ML Signal: Usage of method chaining to retrieve latest values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 284, 19818, 3452, 3815]",1.0,1177,ml_signal,185,Usage of method chaining to retrieve latest values,,1163,            # update turnover,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4296, 25079]"
üß† ML Signal: Calculation of current position value,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1459, 2292, 1988]",0.5,1177,ml_signal,189,Calculation of current position value,,1177,,[]
üß† ML Signal: Calculation of current stock value,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1459, 4283, 1988]",1.0,1199,ml_signal,191,Calculation of current stock value,,1177,            trade_amount = trade_val / trade_price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 17287, 796, 3292, 62, 2100, 1220, 3292, 62, 20888]"
üß† ML Signal: Calculation of earnings based on account value,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 12042, 1912, 319, 1848, 1988]",0.5,1225,ml_signal,192,Calculation of earnings based on account value,,1199,            if order.direction == Order.SELL:  # 0 for sell,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 37295, 6624, 8284, 13, 5188, 3069, 25, 220, 1303, 657, 329, 3677]"
üß† ML Signal: Calculation of cost difference,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1575, 3580]",1.0,1251,ml_signal,192,Calculation of cost difference,,1225,            if order.direction == Order.SELL:  # 0 for sell,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 37295, 6624, 8284, 13, 5188, 3069, 25, 220, 1303, 657, 329, 3677]"
üß† ML Signal: Calculation of turnover difference,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 25079, 3580]",1.0,1277,ml_signal,192,Calculation of turnover difference,,1251,            if order.direction == Order.SELL:  # 0 for sell,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1502, 13, 37295, 6624, 8284, 13, 5188, 3069, 25, 220, 1303, 657, 329, 3677]"
üß† ML Signal: Update of portfolio metrics with calculated values,"[8582, 100, 254, 10373, 26484, 25, 10133, 286, 15320, 20731, 351, 10488, 3815]",1.0,1311,ml_signal,199,Update of portfolio metrics with calculated values,,1277,                # profit in buy order is to make rtn is consistent with earning at the end of bar,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 7630, 287, 2822, 1502, 318, 284, 787, 374, 34106, 318, 6414, 351, 13748, 379, 262, 886, 286, 2318]"
üß† ML Signal: Accessing cash position,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 5003, 2292]",0.5,1329,ml_signal,204,Accessing cash position,,1311,        if self.current_position.skip_update():,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 14421, 62, 9150, 13, 48267, 62, 19119, 33529]"
üß† ML Signal: Calculation of return rate,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1441, 2494]",1.0,1348,ml_signal,206,Calculation of return rate,,1329,            # updating order for infinite position is meaningless,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 19698, 1502, 329, 15541, 2292, 318, 24513]"
üß† ML Signal: Use of total turnover in metrics update,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2472, 25079, 287, 20731, 4296]",0.5,1348,ml_signal,208,Use of total turnover in metrics update,,1348,,[]
üß† ML Signal: Calculation of turnover rate,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 25079, 2494]",1.0,1360,ml_signal,210,Calculation of turnover rate,,1348,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
üß† ML Signal: Use of total cost in metrics update,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2472, 1575, 287, 20731, 4296]",0.5,1372,ml_signal,210,Use of total cost in metrics update,,1360,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
üß† ML Signal: Calculation of cost rate,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1575, 2494]",1.0,1384,ml_signal,210,Calculation of cost rate,,1372,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
üß† ML Signal: Use of stock value in metrics update,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4283, 1988, 287, 20731, 4296]",0.5,1399,ml_signal,216,Use of stock value in metrics update,,1384,            # update current position,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4296, 1459, 2292]"
"üß† ML Signal: Method updates historical positions, indicating a pattern of tracking changes over time.","[8582, 100, 254, 10373, 26484, 25, 11789, 5992, 6754, 6116, 11, 12739, 257, 3912, 286, 9646, 2458, 625, 640, 13]",0.5,1418,ml_signal,206,"Method updates historical positions, indicating a pattern of tracking changes over time.",,1399,            # updating order for infinite position is meaningless,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 19698, 1502, 329, 15541, 2292, 318, 24513]"
‚úÖ Best Practice: Storing calculated value in a variable for reuse improves readability and efficiency.,"[26486, 227, 6705, 19939, 25, 520, 3255, 10488, 1988, 287, 257, 7885, 329, 32349, 19575, 1100, 1799, 290, 9332, 13]",0.5,1418,best_practice,208,Storing calculated value in a variable for reuse improves readability and efficiency.,,1418,,[]
üß† ML Signal: Updating a dictionary with calculated values shows a pattern of dynamic data management.,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 257, 22155, 351, 10488, 3815, 2523, 257, 3912, 286, 8925, 1366, 4542, 13]",0.5,1430,ml_signal,210,Updating a dictionary with calculated values shows a pattern of dynamic data management.,,1418,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
üß† ML Signal: Method call to update weights suggests a pattern of maintaining balanced positions.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 19590, 5644, 257, 3912, 286, 10941, 12974, 6116, 13]",0.5,1442,ml_signal,210,Method call to update weights suggests a pattern of maintaining balanced positions.,,1430,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
‚ö†Ô∏è SAST Risk (Low): Using deepcopy can be resource-intensive; ensure it's necessary for the use case.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2769, 30073, 460, 307, 8271, 12, 38096, 26, 4155, 340, 338, 3306, 329, 262, 779, 1339, 13]",0.5,1454,sast_risk,210,Using deepcopy can be resource-intensive; ensure it's necessary for the use case.,Low,1442,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
üß† ML Signal: Storing deep copies of positions indicates a pattern of preserving state over time.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2769, 9088, 286, 6116, 9217, 257, 3912, 286, 23934, 1181, 625, 640, 13]",0.5,1466,ml_signal,210,Storing deep copies of positions indicates a pattern of preserving state over time.,,1454,        # then update current position,"[220, 220, 220, 220, 220, 220, 220, 1303, 788, 4296, 1459, 2292]"
‚úÖ Best Practice: Docstring provides a brief description of the method's purpose,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007]",0.5,1484,best_practice,221,Docstring provides a brief description of the method's purpose,,1466,"            # deal order, then update state","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1730, 1502, 11, 788, 4296, 1181]"
‚úÖ Best Practice: Resetting state before processing ensures a clean slate,"[26486, 227, 6705, 19939, 25, 30027, 889, 1181, 878, 7587, 19047, 257, 3424, 27589]",1.0,1517,best_practice,223,Resetting state before processing ensures a clean slate,,1484,"            self._update_state_from_order(order, trade_val, cost, trade_price)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19119, 62, 5219, 62, 6738, 62, 2875, 7, 2875, 11, 3292, 62, 2100, 11, 1575, 11, 3292, 62, 20888, 8]"
üß† ML Signal: Conditional logic based on 'atomic' flag indicates different processing paths,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 47116, 6, 6056, 9217, 1180, 7587, 13532]",1.0,1526,ml_signal,226,Conditional logic based on 'atomic' flag indicates different processing paths,,1517,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Use of multiple parameters in method call indicates complex decision-making,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3294, 10007, 287, 2446, 869, 9217, 3716, 2551, 12, 8601]",0.5,1535,ml_signal,226,Use of multiple parameters in method call indicates complex decision-making,,1526,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Method call with multiple parameters suggests importance of these variables,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 3294, 10007, 5644, 6817, 286, 777, 9633]",0.5,1559,ml_signal,235,Method call with multiple parameters suggests importance of these variables,,1535,"        # NOTE: updating position does not only serve portfolio metrics, it also serve the strategy","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 19698, 2292, 857, 407, 691, 4691, 15320, 20731, 11, 340, 635, 4691, 262, 4811]"
‚úÖ Best Practice: Recording state or results at the end of processing,"[26486, 227, 6705, 19939, 25, 43905, 1181, 393, 2482, 379, 262, 886, 286, 7587]",0.5,1583,best_practice,235,Recording state or results at the end of processing,,1559,"        # NOTE: updating position does not only serve portfolio metrics, it also serve the strategy","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 19698, 2292, 857, 407, 691, 4691, 15320, 20731, 11, 340, 635, 4691, 262, 4811]"
‚úÖ Best Practice: Docstring provides detailed parameter descriptions and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 11507, 16969, 290, 8748, 13]",1.0,1613,best_practice,247,Docstring provides detailed parameter descriptions and usage.,,1583,"            # NOTE: updating bar_count does not only serve portfolio metrics, it also serve the strategy","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 19698, 2318, 62, 9127, 857, 407, 691, 4691, 15320, 20731, 11, 340, 635, 4691, 262, 4811]"
‚ö†Ô∏è SAST Risk (Low): Potential for None comparison issues with mutable default arguments.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 7208, 2428, 351, 4517, 540, 4277, 7159, 13]",1.0,1646,sast_risk,277,Potential for None comparison issues with mutable default arguments.,Low,1613,"        # and don't add init account state into portfolio_metrics, due to we don't have excess return in those days.","[220, 220, 220, 220, 220, 220, 220, 1303, 290, 836, 470, 751, 2315, 1848, 1181, 656, 15320, 62, 4164, 10466, 11, 2233, 284, 356, 836, 470, 423, 6992, 1441, 287, 883, 1528, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential for None comparison issues with mutable default arguments.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 7208, 2428, 351, 4517, 540, 4277, 7159, 13]",1.0,1669,sast_risk,280,Potential for None comparison issues with mutable default arguments.,Low,1646,"            trade_end_time=trade_end_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 437, 62, 2435, 28, 25351, 62, 437, 62, 2435, 11]"
"üß† ML Signal: Method call to update current position, indicating a state change.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 1459, 2292, 11, 12739, 257, 1181, 1487, 13]",1.0,1700,ml_signal,283,"Method call to update current position, indicating a state change.",,1669,"            return_rate=(now_earning + now_cost) / last_account_value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4873, 16193, 2197, 62, 451, 768, 1343, 783, 62, 15805, 8, 1220, 938, 62, 23317, 62, 8367, 11]"
"üß† ML Signal: Conditional check for enabling portfolio metrics, indicating feature usage.","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 15882, 15320, 20731, 11, 12739, 3895, 8748, 13]",0.5,1729,ml_signal,284,"Conditional check for enabling portfolio metrics, indicating feature usage.",,1700,"            # here use earning to calculate return, position's view, earning consider cost, true return","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 994, 779, 13748, 284, 15284, 1441, 11, 2292, 338, 1570, 11, 13748, 2074, 1575, 11, 2081, 1441]"
"üß† ML Signal: Method call to update portfolio metrics, indicating a state change.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 15320, 20731, 11, 12739, 257, 1181, 1487, 13]",1.0,1758,ml_signal,284,"Method call to update portfolio metrics, indicating a state change.",,1729,"            # here use earning to calculate return, position's view, earning consider cost, true return","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 994, 779, 13748, 284, 15284, 1441, 11, 2292, 338, 1570, 11, 13748, 2074, 1575, 11, 2081, 1441]"
"üß† ML Signal: Method call to update historical positions, indicating a state change.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 6754, 6116, 11, 12739, 257, 1181, 1487, 13]",1.0,1787,ml_signal,284,"Method call to update historical positions, indicating a state change.",,1758,"            # here use earning to calculate return, position's view, earning consider cost, true return","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 994, 779, 13748, 284, 15284, 1441, 11, 2292, 338, 1570, 11, 13748, 2074, 1575, 11, 2081, 1441]"
"üß† ML Signal: Method call to update indicators, indicating a state change.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 4296, 21337, 11, 12739, 257, 1181, 1487, 13]",1.0,1799,ml_signal,294,"Method call to update indicators, indicating a state change.",,1787,"        """"""update history position""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 19119, 2106, 2292, 37811]"
‚úÖ Best Practice: Check if the feature is enabled before proceeding,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 3895, 318, 9343, 878, 18788]",0.5,1815,best_practice,296,Check if the feature is enabled before proceeding,,1799,        # set now_account_value to position,"[220, 220, 220, 220, 220, 220, 220, 1303, 900, 783, 62, 23317, 62, 8367, 284, 2292]"
‚úÖ Best Practice: Use assertions to ensure critical assumptions,"[26486, 227, 6705, 19939, 25, 5765, 29965, 284, 4155, 4688, 14895]",0.5,1834,best_practice,298,Use assertions to ensure critical assumptions,,1815,        self.current_position.update_weight_all(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 14421, 62, 9150, 13, 19119, 62, 6551, 62, 439, 3419]"
"üß† ML Signal: Method call to generate a DataFrame, indicating data processing","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 7716, 257, 6060, 19778, 11, 12739, 1366, 7587]",0.5,1846,ml_signal,300,"Method call to generate a DataFrame, indicating data processing",,1834,        # note use deepcopy,"[220, 220, 220, 220, 220, 220, 220, 1303, 3465, 779, 2769, 30073]"
"üß† ML Signal: Method call to retrieve historical positions, indicating data retrieval","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 19818, 6754, 6116, 11, 12739, 1366, 45069]",0.5,1846,ml_signal,302,"Method call to retrieve historical positions, indicating data retrieval",,1846,,[]
‚ö†Ô∏è SAST Risk (Low): Raising a generic exception without additional context,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 6631, 1231, 3224, 4732]",1.0,1865,sast_risk,305,Raising a generic exception without additional context,Low,1846,"        trade_start_time: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9688, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and behavior,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 4069]",1.0,1874,best_practice,303,Include a docstring to describe the method's purpose and behavior,,1865,    def update_indicator(,"[220, 220, 220, 825, 4296, 62, 521, 26407, 7]"
"üß† ML Signal: Method returning an object attribute, indicating a getter pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 281, 2134, 11688, 11, 12739, 257, 651, 353, 3912]",1.0,1893,ml_signal,305,"Method returning an object attribute, indicating a getter pattern",,1874,"        trade_start_time: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9688, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports into standard, third-party, and local can improve readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 11, 2368, 12, 10608, 11, 290, 1957, 460, 2987, 1100, 1799, 13]",1.0,6,best_practice,4,"Grouping imports into standard, third-party, and local can improve readability.",,0,from __future__ import annotations,"[6738, 11593, 37443, 834, 1330, 37647]"
‚úÖ Best Practice: Importing specific modules or functions can help avoid namespace pollution.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 13103, 393, 5499, 460, 1037, 3368, 25745, 12231, 13]",0.5,28,best_practice,8,Importing specific modules or functions can help avoid namespace pollution.,,6,"from typing import Any, Dict, List, Optional, Text, Tuple, Type, Union, cast","[6738, 19720, 1330, 4377, 11, 360, 713, 11, 7343, 11, 32233, 11, 8255, 11, 309, 29291, 11, 5994, 11, 4479, 11, 3350]"
"üß† ML Signal: Class definition for financial metrics, useful for ML models in finance","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 329, 3176, 20731, 11, 4465, 329, 10373, 4981, 287, 9604]",1.0,41,ml_signal,29,"Class definition for financial metrics, useful for ML models in finance",,28,        daily portfolio metrics of the account,"[220, 220, 220, 220, 220, 220, 220, 4445, 15320, 20731, 286, 262, 1848]"
‚úÖ Best Practice: Docstring provides a clear explanation of the class purpose and implementation,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 1398, 4007, 290, 7822]",1.0,66,best_practice,30,Docstring provides a clear explanation of the class purpose and implementation,,41,"        contain those followings: return, cost, turnover, account, cash, bench, value","[220, 220, 220, 220, 220, 220, 220, 3994, 883, 1061, 654, 25, 1441, 11, 1575, 11, 25079, 11, 1848, 11, 5003, 11, 7624, 11, 1988]"
‚ö†Ô∏è SAST Risk (Low): Using a mutable default argument (dict) can lead to unexpected behavior if modified.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 4578, 357, 11600, 8, 460, 1085, 284, 10059, 4069, 611, 9518, 13]",1.0,91,sast_risk,30,Using a mutable default argument (dict) can lead to unexpected behavior if modified.,Low,66,"        contain those followings: return, cost, turnover, account, cash, bench, value","[220, 220, 220, 220, 220, 220, 220, 3994, 883, 1061, 654, 25, 1441, 11, 1575, 11, 25079, 11, 1848, 11, 5003, 11, 7624, 11, 1988]"
‚úÖ Best Practice: Initialize instance variables in a separate method for better organization.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 257, 4553, 2446, 329, 1365, 4009, 13]",0.5,131,best_practice,61,Initialize instance variables in a separate method for better organization.,,91,                            2017-01-10   -0.003350,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2177, 12, 486, 12, 940, 220, 220, 532, 15, 13, 405, 2091, 1120]"
üß† ML Signal: Method call with parameters indicating configuration or setup behavior.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 10007, 12739, 8398, 393, 9058, 4069, 13]",0.5,153,ml_signal,63,Method call with parameters indicating configuration or setup behavior.,,131,                    'bench'.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 26968, 4458]"
‚úÖ Best Practice: Use of type annotations for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",1.0,175,best_practice,63,Use of type annotations for better code readability and maintainability,,153,                    'bench'.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 26968, 4458]"
‚úÖ Best Practice: Use of Optional type hint for variables that can be None,"[26486, 227, 6705, 19939, 25, 5765, 286, 32233, 2099, 9254, 329, 9633, 326, 460, 307, 6045]",1.0,183,best_practice,73,Use of Optional type hint for variables that can be None,,175,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,183,best_practice,74,Use of type hints for function parameters and return type improves code readability and maintainability.,,183,,[]
"üß† ML Signal: Method call with instance variables and parameters, useful for understanding object state changes.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 4554, 9633, 290, 10007, 11, 4465, 329, 4547, 2134, 1181, 2458, 13]",0.5,183,ml_signal,77,"Method call with instance variables and parameters, useful for understanding object state changes.",,183,,[]
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,211,best_practice,79,Use of type hints for function parameters and return type improves code readability and maintainability.,,183,        self.accounts: dict = OrderedDict()  # account position value for each trade time,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 82, 25, 8633, 796, 14230, 1068, 35, 713, 3419, 220, 1303, 1848, 2292, 1988, 329, 1123, 3292, 640]"
üß† ML Signal: Use of default values in dictionary access patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 3815, 287, 22155, 1895, 7572, 13]",1.0,241,ml_signal,83,Use of default values in dictionary access patterns.,,211,        self.total_costs: dict = OrderedDict()  # total trade cost for each trade time,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23350, 62, 15805, 82, 25, 8633, 796, 14230, 1068, 35, 713, 3419, 220, 1303, 2472, 3292, 1575, 329, 1123, 3292, 640]"
üß† ML Signal: Type checking pattern for handling different data types.,"[8582, 100, 254, 10373, 26484, 25, 5994, 10627, 3912, 329, 9041, 1180, 1366, 3858, 13]",1.0,260,ml_signal,86,Type checking pattern for handling different data types.,,241,        self.cashes: dict = OrderedDict(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 66, 7465, 25, 8633, 796, 14230, 1068, 35, 713, 3419]"
üß† ML Signal: Use of default values in dictionary access patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 3815, 287, 22155, 1895, 7572, 13]",1.0,274,ml_signal,91,Use of default values in dictionary access patterns.,,260,        if freq is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2030, 80, 318, 407, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without additional context.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 3224, 4732, 13]",1.0,274,sast_risk,95,Raising a generic ValueError without additional context.,Low,274,,[]
üß† ML Signal: Type checking pattern for handling different data types.,"[8582, 100, 254, 10373, 26484, 25, 5994, 10627, 3912, 329, 9041, 1180, 1366, 3858, 13]",1.0,305,ml_signal,97,Type checking pattern for handling different data types.,,274,"    def _cal_benchmark(benchmark_config: Optional[dict], freq: str) -> Optional[pd.Series]:","[220, 220, 220, 825, 4808, 9948, 62, 26968, 4102, 7, 26968, 4102, 62, 11250, 25, 32233, 58, 11600, 4357, 2030, 80, 25, 965, 8, 4613, 32233, 58, 30094, 13, 27996, 5974]"
"üß† ML Signal: Function call with multiple parameters, indicating complex data processing.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 12739, 3716, 1366, 7587, 13]",0.5,330,ml_signal,100,"Function call with multiple parameters, indicating complex data processing.",,305,"        benchmark = benchmark_config.get(""benchmark"", CSI300_BENCH)","[220, 220, 220, 220, 220, 220, 220, 18335, 796, 18335, 62, 11250, 13, 1136, 7203, 26968, 4102, 1600, 49911, 6200, 62, 33, 1677, 3398, 8]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError with user-provided data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 351, 2836, 12, 41279, 1366, 13]",1.0,343,sast_risk,102,Raising a generic ValueError with user-provided data.,Low,330,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Use of pandas groupby and aggregation functions.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 1448, 1525, 290, 46500, 5499, 13]",0.5,356,ml_signal,102,Use of pandas groupby and aggregation functions.,,343,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Check for None to avoid AttributeError when accessing properties,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 3368, 3460, 4163, 12331, 618, 22534, 6608]",1.0,383,best_practice,108,Check for None to avoid AttributeError when accessing properties,,356,"            end_time = benchmark_config.get(""end_time"", None)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 796, 18335, 62, 11250, 13, 1136, 7203, 437, 62, 2435, 1600, 6045, 8]"
"‚úÖ Best Practice: Function definition should be at the top level, not indented, for better readability and maintainability.","[26486, 227, 6705, 19939, 25, 15553, 6770, 815, 307, 379, 262, 1353, 1241, 11, 407, 773, 4714, 11, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,400,best_practice,110,"Function definition should be at the top level, not indented, for better readability and maintainability.",,383,            if freq is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2030, 80, 318, 6045, 25]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,432,best_practice,112,Use of descriptive variable names improves code readability.,,400,"            _codes = benchmark if isinstance(benchmark, (list, dict)) else [benchmark]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 40148, 796, 18335, 611, 318, 39098, 7, 26968, 4102, 11, 357, 4868, 11, 8633, 4008, 2073, 685, 26968, 4102, 60]"
üß† ML Signal: Usage of a custom function as a method parameter indicates a higher-order function pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 355, 257, 2446, 11507, 9217, 257, 2440, 12, 2875, 2163, 3912, 13]",0.5,453,ml_signal,115,Usage of a custom function as a method parameter indicates a higher-order function pattern.,,432,            if len(_temp_result) == 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 28264, 29510, 62, 20274, 8, 6624, 657, 25]"
‚úÖ Best Practice: Use of a conditional expression for concise code.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 26340, 5408, 329, 35327, 2438, 13]",1.0,502,best_practice,118,Use of a conditional expression for concise code.,,453,"                _temp_result.groupby(level=""datetime"", group_keys=False)[_temp_result.columns.tolist()[0]]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 29510, 62, 20274, 13, 8094, 1525, 7, 5715, 2625, 19608, 8079, 1600, 1448, 62, 13083, 28, 25101, 8, 29795, 29510, 62, 20274, 13, 28665, 82, 13, 83, 349, 396, 3419, 58, 15, 11907]"
üß† ML Signal: Method to check if a collection is empty,"[8582, 100, 254, 10373, 26484, 25, 11789, 284, 2198, 611, 257, 4947, 318, 6565]",1.0,549,ml_signal,114,Method to check if a collection is empty,,502,"            _temp_result, _ = get_higher_eq_freq_feature(_codes, fields, start_time, end_time, freq=freq)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 29510, 62, 20274, 11, 4808, 796, 651, 62, 46503, 62, 27363, 62, 19503, 80, 62, 30053, 28264, 40148, 11, 7032, 11, 923, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 28, 19503, 80, 8]"
‚úÖ Best Practice: Using len() to check for emptiness is clear and concise,"[26486, 227, 6705, 19939, 25, 8554, 18896, 3419, 284, 2198, 329, 49333, 318, 1598, 290, 35327]",1.0,586,best_practice,116,Using len() to check for emptiness is clear and concise,,549,"                raise ValueError(f""The benchmark {_codes} does not exist. Please provide the right benchmark"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 464, 18335, 1391, 62, 40148, 92, 857, 407, 2152, 13, 4222, 2148, 262, 826, 18335, 4943]"
‚úÖ Best Practice: Include a docstring to describe the purpose and behavior of the method,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 2446]",1.0,623,best_practice,116,Include a docstring to describe the purpose and behavior of the method,,586,"                raise ValueError(f""The benchmark {_codes} does not exist. Please provide the right benchmark"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 464, 18335, 1391, 62, 40148, 92, 857, 407, 2152, 13, 4222, 2148, 262, 826, 18335, 4943]"
‚úÖ Best Practice: Ensure that the method returns a consistent type as indicated in the type hint,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2446, 5860, 257, 6414, 2099, 355, 8203, 287, 262, 2099, 9254]",0.5,672,best_practice,118,Ensure that the method returns a consistent type as indicated in the type hint,,623,"                _temp_result.groupby(level=""datetime"", group_keys=False)[_temp_result.columns.tolist()[0]]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 29510, 62, 20274, 13, 8094, 1525, 7, 5715, 2625, 19608, 8079, 1600, 1448, 62, 13083, 28, 25101, 8, 29795, 29510, 62, 20274, 13, 28665, 82, 13, 83, 349, 396, 3419, 58, 15, 11907]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and behavior,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 4069]",0.5,721,best_practice,118,Include a docstring to describe the method's purpose and behavior,,672,"                _temp_result.groupby(level=""datetime"", group_keys=False)[_temp_result.columns.tolist()[0]]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 29510, 62, 20274, 13, 8094, 1525, 7, 5715, 2625, 19608, 8079, 1600, 1448, 62, 13083, 28, 25101, 8, 29795, 29510, 62, 20274, 13, 28665, 82, 13, 83, 349, 396, 3419, 58, 15, 11907]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'latest_pm_time' is not a key in 'accounts',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 42861, 62, 4426, 62, 2435, 6, 318, 407, 257, 1994, 287, 705, 23317, 82, 6]",1.0,742,sast_risk,120,Potential KeyError if 'latest_pm_time' is not a key in 'accounts',Low,721,                .fillna(0),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 20797, 2616, 7, 15, 8]"
üß† ML Signal: Accessing dictionary with a dynamic key,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 257, 8925, 1994]",1.0,754,ml_signal,121,Accessing dictionary with a dynamic key,,742,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Method returning a value from a dictionary using a key,"[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1988, 422, 257, 22155, 1262, 257, 1994]",0.5,775,ml_signal,120,Method returning a value from a dictionary using a key,,754,                .fillna(0),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 20797, 2616, 7, 15, 8]"
‚úÖ Best Practice: Return statement is simple and clear,"[26486, 227, 6705, 19939, 25, 8229, 2643, 318, 2829, 290, 1598]",0.5,775,best_practice,122,Return statement is simple and clear,,775,,[]
üß† ML Signal: Method accessing a dictionary with a specific key pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 22534, 257, 22155, 351, 257, 2176, 1994, 3912]",1.0,775,ml_signal,122,Method accessing a dictionary with a specific key pattern,,775,,[]
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'latest_pm_time' is not in 'total_turnovers',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 42861, 62, 4426, 62, 2435, 6, 318, 407, 287, 705, 23350, 62, 15344, 13801, 6]",1.0,785,sast_risk,123,Potential KeyError if 'latest_pm_time' is not in 'total_turnovers',Low,775,    def _sample_benchmark(,"[220, 220, 220, 825, 4808, 39873, 62, 26968, 4102, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType errors if not all parameters are validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 8563, 611, 407, 477, 10007, 389, 31031]",0.5,798,sast_risk,138,Potential for NoneType errors if not all parameters are validated,Low,785,    def is_empty(self) -> bool:,"[220, 220, 220, 825, 318, 62, 28920, 7, 944, 8, 4613, 20512, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType errors if not all parameters are validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 8563, 611, 407, 477, 10007, 389, 31031]",0.5,807,sast_risk,154,Potential for NoneType errors if not all parameters are validated,Low,798,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Usage of a fallback mechanism when a parameter is None,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2121, 1891, 9030, 618, 257, 11507, 318, 6045]",0.5,822,ml_signal,158,Usage of a fallback mechanism when a parameter is None,,807,"        cash: float | None = None,","[220, 220, 220, 220, 220, 220, 220, 5003, 25, 12178, 930, 6045, 796, 6045, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,840,ml_signal,160,Pattern of storing metrics in a dictionary with timestamps as keys,,822,"        total_turnover: float | None = None,","[220, 220, 220, 220, 220, 220, 220, 2472, 62, 15344, 2502, 25, 12178, 930, 6045, 796, 6045, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,857,ml_signal,162,Pattern of storing metrics in a dictionary with timestamps as keys,,840,"        total_cost: float | None = None,","[220, 220, 220, 220, 220, 220, 220, 2472, 62, 15805, 25, 12178, 930, 6045, 796, 6045, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,874,ml_signal,164,Pattern of storing metrics in a dictionary with timestamps as keys,,857,"        stock_value: float | None = None,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 8367, 25, 12178, 930, 6045, 796, 6045, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,881,ml_signal,166,Pattern of storing metrics in a dictionary with timestamps as keys,,874,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,892,ml_signal,168,Pattern of storing metrics in a dictionary with timestamps as keys,,881,        if None in [,"[220, 220, 220, 220, 220, 220, 220, 611, 6045, 287, 685]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,907,ml_signal,170,Pattern of storing metrics in a dictionary with timestamps as keys,,892,"            account_value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1848, 62, 8367, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,922,ml_signal,172,Pattern of storing metrics in a dictionary with timestamps as keys,,907,"            return_rate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4873, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,937,ml_signal,174,Pattern of storing metrics in a dictionary with timestamps as keys,,922,"            turnover_rate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25079, 62, 4873, 11]"
üß† ML Signal: Pattern of storing metrics in a dictionary with timestamps as keys,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23069, 20731, 287, 257, 22155, 351, 4628, 395, 9430, 355, 8251]",0.5,952,ml_signal,176,Pattern of storing metrics in a dictionary with timestamps as keys,,937,"            cost_rate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1575, 62, 4873, 11]"
üß† ML Signal: Tracking the latest update time for portfolio metrics,"[8582, 100, 254, 10373, 26484, 25, 37169, 262, 3452, 4296, 640, 329, 15320, 20731]",1.0,961,ml_signal,178,Tracking the latest update time for portfolio metrics,,952,        ]:,"[220, 220, 220, 220, 220, 220, 220, 2361, 25]"
"üß† ML Signal: Method generates a DataFrame from multiple series, indicating a pattern of data aggregation","[8582, 100, 254, 10373, 26484, 25, 11789, 18616, 257, 6060, 19778, 422, 3294, 2168, 11, 12739, 257, 3912, 286, 1366, 46500]",0.5,971,ml_signal,167,"Method generates a DataFrame from multiple series, indicating a pattern of data aggregation",,961,        # check data,"[220, 220, 220, 220, 220, 220, 220, 1303, 2198, 1366]"
‚úÖ Best Practice: Initialize DataFrame before populating it with data,"[26486, 227, 6705, 19939, 25, 20768, 1096, 6060, 19778, 878, 1461, 8306, 340, 351, 1366]",0.5,988,best_practice,169,Initialize DataFrame before populating it with data,,971,"            trade_start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 9688, 62, 2435, 11]"
üß† ML Signal: Mapping account data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 1848, 1366, 284, 257, 6060, 19778, 5721]",0.5,1001,ml_signal,171,Mapping account data to a DataFrame column,,988,"            cash,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5003, 11]"
üß† ML Signal: Mapping return data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 1441, 1366, 284, 257, 6060, 19778, 5721]",0.5,1017,ml_signal,173,Mapping return data to a DataFrame column,,1001,"            total_turnover,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 15344, 2502, 11]"
üß† ML Signal: Mapping total turnover data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2472, 25079, 1366, 284, 257, 6060, 19778, 5721]",0.5,1032,ml_signal,175,Mapping total turnover data to a DataFrame column,,1017,"            total_cost,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 15805, 11]"
üß† ML Signal: Mapping turnover data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 25079, 1366, 284, 257, 6060, 19778, 5721]",0.5,1047,ml_signal,177,Mapping turnover data to a DataFrame column,,1032,"            stock_value,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 8367, 11]"
üß† ML Signal: Mapping total cost data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2472, 1575, 1366, 284, 257, 6060, 19778, 5721]",0.5,1062,ml_signal,179,Mapping total cost data to a DataFrame column,,1047,            raise ValueError(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7]"
üß† ML Signal: Mapping cost data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 1575, 1366, 284, 257, 6060, 19778, 5721]",0.5,1091,ml_signal,181,Mapping cost data to a DataFrame column,,1062,"                ""total_cost, cost_rate, stock_value]"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 23350, 62, 15805, 11, 1575, 62, 4873, 11, 4283, 62, 8367, 60, 1600]"
üß† ML Signal: Mapping value data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 1988, 1366, 284, 257, 6060, 19778, 5721]",0.5,1091,ml_signal,183,Mapping value data to a DataFrame column,,1091,,[]
üß† ML Signal: Mapping cash data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 5003, 1366, 284, 257, 6060, 19778, 5721]",0.5,1113,ml_signal,184,Mapping cash data to a DataFrame column,,1091,        if trade_end_time is None and bench_value is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 3292, 62, 437, 62, 2435, 318, 6045, 290, 7624, 62, 8367, 318, 6045, 25]"
üß† ML Signal: Mapping benchmark data to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 18335, 1366, 284, 257, 6060, 19778, 5721]",0.5,1135,ml_signal,184,Mapping benchmark data to a DataFrame column,,1113,        if trade_end_time is None and bench_value is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 3292, 62, 437, 62, 2435, 318, 6045, 290, 7624, 62, 8367, 318, 6045, 25]"
‚úÖ Best Practice: Setting the index name for better DataFrame readability,"[26486, 227, 6705, 19939, 25, 25700, 262, 6376, 1438, 329, 1365, 6060, 19778, 1100, 1799]",0.5,1157,best_practice,190,Setting the index name for better DataFrame readability,,1135,        self.accounts[trade_start_time] = account_value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 82, 58, 25351, 62, 9688, 62, 2435, 60, 796, 1848, 62, 8367]"
‚úÖ Best Practice: Return the DataFrame after all operations are complete,"[26486, 227, 6705, 19939, 25, 8229, 262, 6060, 19778, 706, 477, 4560, 389, 1844]",0.5,1179,best_practice,191,Return the DataFrame after all operations are complete,,1157,        self.returns[trade_start_time] = return_rate,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7783, 82, 58, 25351, 62, 9688, 62, 2435, 60, 796, 1441, 62, 4873]"
"üß† ML Signal: Method for saving data to a file, indicating file I/O operation","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 8914, 1366, 284, 257, 2393, 11, 12739, 2393, 314, 14, 46, 4905]",1.0,1208,ml_signal,181,"Method for saving data to a file, indicating file I/O operation",,1179,"                ""total_cost, cost_rate, stock_value]"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 23350, 62, 15805, 11, 1575, 62, 4873, 11, 4283, 62, 8367, 60, 1600]"
‚úÖ Best Practice: Type hinting for method parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2446, 10007, 290, 1441, 2099]",0.5,1220,best_practice,182,Type hinting for method parameters and return type,,1208,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of pandas DataFrame method to_csv for exporting data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 2446, 284, 62, 40664, 329, 39133, 1366]",1.0,1242,ml_signal,184,Usage of pandas DataFrame method to_csv for exporting data,,1220,        if trade_end_time is None and bench_value is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 3292, 62, 437, 62, 2435, 318, 6045, 290, 7624, 62, 8367, 318, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of overwriting existing files without warning,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 6993, 799, 278, 4683, 3696, 1231, 6509]",0.5,1264,sast_risk,184,Potential risk of overwriting existing files without warning,Low,1242,        if trade_end_time is None and bench_value is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 3292, 62, 437, 62, 2435, 318, 6045, 290, 7624, 62, 8367, 318, 6045, 25]"
‚úÖ Best Practice: Use of pathlib for file path handling is recommended for cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3108, 8019, 329, 2393, 3108, 9041, 318, 7151, 329, 3272, 12, 24254, 17764, 13]",0.5,1286,best_practice,190,Use of pathlib for file path handling is recommended for cross-platform compatibility.,,1264,        self.accounts[trade_start_time] = account_value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23317, 82, 58, 25351, 62, 9688, 62, 2435, 60, 796, 1848, 62, 8367]"
üß† ML Signal: Reading CSV files is a common operation that can be used to identify data loading patterns.,"[8582, 100, 254, 10373, 26484, 25, 11725, 44189, 3696, 318, 257, 2219, 4905, 326, 460, 307, 973, 284, 5911, 1366, 11046, 7572, 13]",0.5,1311,ml_signal,192,Reading CSV files is a common operation that can be used to identify data loading patterns.,,1286,        self.total_turnovers[trade_start_time] = total_turnover,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23350, 62, 15344, 13801, 58, 25351, 62, 9688, 62, 2435, 60, 796, 2472, 62, 15344, 2502]"
üß† ML Signal: Converting index to DatetimeIndex is a common preprocessing step for time series data.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6376, 284, 16092, 8079, 15732, 318, 257, 2219, 662, 36948, 2239, 329, 640, 2168, 1366, 13]",0.5,1335,ml_signal,194,Converting index to DatetimeIndex is a common preprocessing step for time series data.,,1311,        self.total_costs[trade_start_time] = total_cost,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23350, 62, 15805, 82, 58, 25351, 62, 9688, 62, 2435, 60, 796, 2472, 62, 15805]"
üß† ML Signal: Initialization of variables before a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 9633, 878, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,1356,ml_signal,196,Initialization of variables before a loop is a common pattern.,,1335,        self.values[trade_start_time] = stock_value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 27160, 58, 25351, 62, 9688, 62, 2435, 60, 796, 4283, 62, 8367]"
üß† ML Signal: Iterating over time series data is a common pattern in financial applications.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 640, 2168, 1366, 318, 257, 2219, 3912, 287, 3176, 5479, 13]",0.5,1377,ml_signal,196,Iterating over time series data is a common pattern in financial applications.,,1356,        self.values[trade_start_time] = stock_value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 27160, 58, 25351, 62, 9688, 62, 2435, 60, 796, 4283, 62, 8367]"
üß† ML Signal: Accessing DataFrame rows by index is a common data manipulation pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15274, 416, 6376, 318, 257, 2219, 1366, 17512, 3912, 13]",0.5,1398,ml_signal,196,Accessing DataFrame rows by index is a common data manipulation pattern.,,1377,        self.values[trade_start_time] = stock_value,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 27160, 58, 25351, 62, 9688, 62, 2435, 60, 796, 4283, 62, 8367]"
"üß† ML Signal: Class definition with detailed docstring, useful for understanding class purpose and usage","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 6496, 2205, 8841, 11, 4465, 329, 4547, 1398, 4007, 290, 8748]",0.5,1410,ml_signal,232,"Class definition with detailed docstring, useful for understanding class purpose and usage",,1398,        index = r.index,"[220, 220, 220, 220, 220, 220, 220, 6376, 796, 374, 13, 9630]"
‚úÖ Best Practice: Comprehensive docstring explaining class attributes and behavior,"[26486, 227, 6705, 19939, 25, 40917, 2205, 8841, 11170, 1398, 12608, 290, 4069]",0.5,1424,best_practice,233,Comprehensive docstring explaining class attributes and behavior,,1410,        self.init_vars(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 85, 945, 3419]"
‚úÖ Best Practice: Use of type annotations for constructor parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 23772, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1438,best_practice,233,Use of type annotations for constructor parameters improves code readability and maintainability.,,1424,        self.init_vars(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 85, 945, 3419]"
‚úÖ Best Practice: Initializing attributes in the constructor ensures they are always defined.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 12608, 287, 262, 23772, 19047, 484, 389, 1464, 5447, 13]",0.5,1461,best_practice,235,Initializing attributes in the constructor ensures they are always defined.,,1438,            self.update_portfolio_metrics_record(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19119, 62, 634, 13652, 62, 4164, 10466, 62, 22105, 7]"
‚úÖ Best Practice: Use of type annotations for attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1493,best_practice,237,Use of type annotations for attributes improves code readability and maintainability.,,1461,"                account_value=r.loc[trade_start_time][""account""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1848, 62, 8367, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 23317, 33116]"
‚úÖ Best Practice: Initializing attributes in the constructor ensures they are always defined.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 12608, 287, 262, 23772, 19047, 484, 389, 1464, 5447, 13]",0.5,1525,best_practice,239,Initializing attributes in the constructor ensures they are always defined.,,1493,"                return_rate=r.loc[trade_start_time][""return""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 4873, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 7783, 33116]"
‚úÖ Best Practice: Use of type annotations for attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1558,best_practice,241,Use of type annotations for attributes improves code readability and maintainability.,,1525,"                turnover_rate=r.loc[trade_start_time][""turnover""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25079, 62, 4873, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 15344, 2502, 33116]"
‚úÖ Best Practice: Initializing attributes in the constructor ensures they are always defined.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 12608, 287, 262, 23772, 19047, 484, 389, 1464, 5447, 13]",0.5,1590,best_practice,243,Initializing attributes in the constructor ensures they are always defined.,,1558,"                cost_rate=r.loc[trade_start_time][""cost""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1575, 62, 4873, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 15805, 33116]"
‚úÖ Best Practice: Use of type hinting for the return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1626,best_practice,240,Use of type hinting for the return type improves code readability and maintainability.,,1590,"                total_turnover=r.loc[trade_start_time][""total_turnover""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 15344, 2502, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 23350, 62, 15344, 2502, 33116]"
"üß† ML Signal: Instantiating an object using a class attribute, indicating a pattern of dynamic class usage.","[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 281, 2134, 1262, 257, 1398, 11688, 11, 12739, 257, 3912, 286, 8925, 1398, 8748, 13]",0.5,1660,ml_signal,242,"Instantiating an object using a class attribute, indicating a pattern of dynamic class usage.",,1626,"                total_cost=r.loc[trade_start_time][""total_cost""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 15805, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 23350, 62, 15805, 33116]"
üß† ML Signal: Use of OrderedDict suggests a pattern where order of elements is important.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 14230, 1068, 35, 713, 5644, 257, 3912, 810, 1502, 286, 4847, 318, 1593, 13]",0.5,1692,ml_signal,244,Use of OrderedDict suggests a pattern where order of elements is important.,,1660,"                stock_value=r.loc[trade_start_time][""value""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 8367, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 8367, 33116]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1726,best_practice,242,Type hinting improves code readability and maintainability,,1692,"                total_cost=r.loc[trade_start_time][""total_cost""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 15805, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 23350, 62, 15805, 33116]"
üß† ML Signal: Usage of dictionary to store historical data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 6754, 1366]",1.0,1758,ml_signal,244,Usage of dictionary to store historical data,,1726,"                stock_value=r.loc[trade_start_time][""value""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 8367, 28, 81, 13, 17946, 58, 25351, 62, 9688, 62, 2435, 7131, 1, 8367, 33116]"
üß† ML Signal: Usage of dictionary to store historical data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 284, 3650, 6754, 1366]",1.0,1770,ml_signal,246,Usage of dictionary to store historical data,,1758,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Initialize dictionaries to store trade information for each order,"[26486, 227, 6705, 19939, 25, 20768, 1096, 48589, 3166, 284, 3650, 3292, 1321, 329, 1123, 1502]",0.5,1782,best_practice,246,Initialize dictionaries to store trade information for each order,,1770,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Iterating over trade_info to extract and store trade details,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3292, 62, 10951, 284, 7925, 290, 3650, 3292, 3307]",0.5,1849,ml_signal,255,Iterating over trade_info to extract and store trade details,,1782,    | indicator    | desc.                                                        |,"[220, 220, 220, 930, 16916, 220, 220, 220, 930, 1715, 13, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 930]"
"‚úÖ Best Practice: Use a method to assign values to order_indicator, improving maintainability","[26486, 227, 6705, 19939, 25, 5765, 257, 2446, 284, 8333, 3815, 284, 1502, 62, 521, 26407, 11, 10068, 5529, 1799]",0.5,1903,best_practice,263,"Use a method to assign values to order_indicator, improving maintainability",,1849,    | trade_dir    | the trading direction                                        |,"[220, 220, 220, 930, 3292, 62, 15908, 220, 220, 220, 930, 262, 7313, 4571, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 930]"
‚úÖ Best Practice: Use of a private method to encapsulate functionality,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 2446, 284, 32652, 5039, 11244]",0.5,1903,best_practice,269,Use of a private method to encapsulate functionality,,1903,,[]
‚úÖ Best Practice: Use meaningful variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 11570, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1933,best_practice,271,Use meaningful variable names for better readability,,1903,    The `base_price` and `base_volume` can't be NaN when there are not trading on that step. Otherwise,"[220, 220, 220, 383, 4600, 8692, 62, 20888, 63, 290, 4600, 8692, 62, 29048, 63, 460, 470, 307, 11013, 45, 618, 612, 389, 407, 7313, 319, 326, 2239, 13, 15323]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'amount' contains zeros,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 17287, 6, 4909, 1976, 27498]",1.0,1933,sast_risk,273,Potential division by zero if 'amount' contains zeros,Low,1933,,[]
"üß† ML Signal: Custom function passed as an argument, indicating higher-order function usage","[8582, 100, 254, 10373, 26484, 25, 8562, 2163, 3804, 355, 281, 4578, 11, 12739, 2440, 12, 2875, 2163, 8748]",0.5,1937,ml_signal,276,"Custom function passed as an argument, indicating higher-order function usage",,1933,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Type hinting for method parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2446, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1937,best_practice,275,Type hinting for method parameters and return type improves code readability and maintainability.,,1937,,[]
"üß† ML Signal: Method call with a complex data structure as an argument, indicating a pattern of data handling.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 257, 3716, 1366, 4645, 355, 281, 4578, 11, 12739, 257, 3912, 286, 1366, 9041, 13]",0.5,1937,ml_signal,277,"Method call with a complex data structure as an argument, indicating a pattern of data handling.",,1937,,[]
"üß† ML Signal: Method call without arguments, indicating a pattern of internal state update.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 1231, 7159, 11, 12739, 257, 3912, 286, 5387, 1181, 4296, 13]",1.0,1961,ml_signal,279,"Method call without arguments, indicating a pattern of internal state update.",,1937,        self.order_indicator_cls = order_indicator_cls,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 62, 565, 82, 796, 1502, 62, 521, 26407, 62, 565, 82]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1996,best_practice,278,Type hinting for function parameters and return type improves code readability and maintainability,,1961,"    def __init__(self, order_indicator_cls: Type[BaseOrderIndicator] = NumpyOrderIndicator) -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1502, 62, 521, 26407, 62, 565, 82, 25, 5994, 58, 14881, 18743, 5497, 26407, 60, 796, 399, 32152, 18743, 5497, 26407, 8, 4613, 6045, 25]"
"üß† ML Signal: Iterating over a collection of indicators, which may be useful for pattern recognition in ML models","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 286, 21337, 11, 543, 743, 307, 4465, 329, 3912, 9465, 287, 10373, 4981]",0.5,2016,ml_signal,281,"Iterating over a collection of indicators, which may be useful for pattern recognition in ML models",,1996,        # order indicator is metrics for a single order for a specific step,"[220, 220, 220, 220, 220, 220, 220, 1303, 1502, 16916, 318, 20731, 329, 257, 2060, 1502, 329, 257, 2176, 2239]"
"üß† ML Signal: Use of a transfer method, indicating a transformation or mapping operation","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 4351, 2446, 11, 12739, 257, 13389, 393, 16855, 4905]",0.5,2045,ml_signal,283,"Use of a transfer method, indicating a transformation or mapping operation",,2016,        self.order_indicator: BaseOrderIndicator = self.order_indicator_cls(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 25, 7308, 18743, 5497, 26407, 796, 2116, 13, 2875, 62, 521, 26407, 62, 565, 82, 3419]"
"üß† ML Signal: Use of a list of metrics, which could be features in an ML model","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1351, 286, 20731, 11, 543, 714, 307, 3033, 287, 281, 10373, 2746]",0.5,2045,ml_signal,284,"Use of a list of metrics, which could be features in an ML model",,2045,,[]
"‚úÖ Best Practice: Use of a method to sum indicators, promoting code reuse and readability","[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2446, 284, 2160, 21337, 11, 11560, 2438, 32349, 290, 1100, 1799]",0.5,2045,best_practice,284,"Use of a method to sum indicators, promoting code reuse and readability",,2045,,[]
‚úÖ Best Practice: Consider checking if 'deal_amount' is a pandas Series before using 'replace',"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 705, 31769, 62, 17287, 6, 318, 257, 19798, 292, 7171, 878, 1262, 705, 33491, 6]",1.0,2064,best_practice,291,Consider checking if 'deal_amount' is a pandas Series before using 'replace',,2045,"    # def reset(self, trade_calendar: TradeCalendarManager):","[220, 220, 220, 1303, 825, 13259, 7, 944, 11, 3292, 62, 9948, 9239, 25, 9601, 9771, 9239, 13511, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'deal_amount' contains zeros not replaced by NaN,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 31769, 62, 17287, 6, 4909, 1976, 27498, 407, 6928, 416, 11013, 45]",1.0,2075,sast_risk,292,Potential division by zero if 'deal_amount' contains zeros not replaced by NaN,Low,2064,    def reset(self) -> None:,"[220, 220, 220, 825, 13259, 7, 944, 8, 4613, 6045, 25]"
"üß† ML Signal: Function returns a division result, which might be used for financial calculations","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 7297, 1255, 11, 543, 1244, 307, 973, 329, 3176, 16765]",1.0,2094,ml_signal,294,"Function returns a division result, which might be used for financial calculations",,2075,        self.trade_indicator = OrderedDict(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 25351, 62, 521, 26407, 796, 14230, 1068, 35, 713, 3419]"
üß† ML Signal: Usage of 'transfer' method indicates a pattern of applying transformations to data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 39437, 6, 2446, 9217, 257, 3912, 286, 11524, 38226, 284, 1366]",1.0,2094,ml_signal,296,Usage of 'transfer' method indicates a pattern of applying transformations to data,,2094,,[]
üß† ML Signal: Function definition with a single parameter,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2060, 11507]",0.5,2113,ml_signal,294,Function definition with a single parameter,,2094,        self.trade_indicator = OrderedDict(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 25351, 62, 521, 26407, 796, 14230, 1068, 35, 713, 3419]"
üß† ML Signal: Use of pandas apply function,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 4174, 2163]",0.5,2113,ml_signal,296,Use of pandas apply function,,2113,,[]
üß† ML Signal: Method call with a function and string argument,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 257, 2163, 290, 4731, 4578]",0.5,2145,ml_signal,298,Method call with a function and string argument,,2113,        self.order_indicator_his[trade_start_time] = self.get_order_indicator(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 62, 14363, 58, 25351, 62, 9688, 62, 2435, 60, 796, 2116, 13, 1136, 62, 2875, 62, 521, 26407, 3419]"
‚úÖ Best Practice: Type hinting for 'decision' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 705, 12501, 1166, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2177,best_practice,298,Type hinting for 'decision' improves code readability and maintainability.,,2145,        self.order_indicator_his[trade_start_time] = self.get_order_indicator(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 62, 14363, 58, 25351, 62, 9688, 62, 2435, 60, 796, 2116, 13, 1136, 62, 2875, 62, 521, 26407, 3419]"
‚úÖ Best Practice: Checking for an empty list before processing helps avoid unnecessary operations.,"[26486, 227, 6705, 19939, 25, 39432, 329, 281, 6565, 1351, 878, 7587, 5419, 3368, 13114, 4560, 13]",1.0,2177,best_practice,300,Checking for an empty list before processing helps avoid unnecessary operations.,,2177,,[]
üß† ML Signal: The use of 'assign' method with specific keys and values could indicate a pattern in data handling.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 705, 562, 570, 6, 2446, 351, 2176, 8251, 290, 3815, 714, 7603, 257, 3912, 287, 1366, 9041, 13]",0.5,2188,ml_signal,302,The use of 'assign' method with specific keys and values could indicate a pattern in data handling.,,2177,        amount = dict(),"[220, 220, 220, 220, 220, 220, 220, 2033, 796, 8633, 3419]"
üß† ML Signal: Dictionary comprehension usage can be a pattern for transforming data.,"[8582, 100, 254, 10373, 26484, 25, 28261, 35915, 8748, 460, 307, 257, 3912, 329, 25449, 1366, 13]",0.5,2201,ml_signal,303,Dictionary comprehension usage can be a pattern for transforming data.,,2188,        deal_amount = dict(),"[220, 220, 220, 220, 220, 220, 220, 1730, 62, 17287, 796, 8633, 3419]"
üß† ML Signal: Usage of configuration pattern with default values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 3912, 351, 4277, 3815]",0.5,2223,ml_signal,317,Usage of configuration pattern with default values,,2201,            # The PA in the innermost layer is meanless,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 383, 8147, 287, 262, 8434, 1712, 7679, 318, 1612, 1203]"
üß† ML Signal: Usage of configuration pattern with default values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 3912, 351, 4277, 3815]",0.5,2223,ml_signal,319,Usage of configuration pattern with default values,,2223,,[]
üß† ML Signal: Usage of time range clipping,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 2837, 45013]",0.5,2244,ml_signal,320,Usage of time range clipping,,2223,"        self.order_indicator.assign(""amount"", amount)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 13, 562, 570, 7203, 17287, 1600, 2033, 8]"
üß† ML Signal: Conditional API call based on configuration,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 7824, 869, 1912, 319, 8398]",0.5,2269,ml_signal,325,Conditional API call based on configuration,,2244,"        self.order_indicator.assign(""trade_value"", trade_value)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 13, 562, 570, 7203, 25351, 62, 8367, 1600, 3292, 62, 8367, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of NotImplementedError for unsupported cases,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1892, 3546, 1154, 12061, 12331, 329, 24222, 2663]",1.0,2291,sast_risk,337,Use of NotImplementedError for unsupported cases,Low,2269,"        self.order_indicator.transfer(func, ""ffr"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 13, 39437, 7, 20786, 11, 366, 487, 81, 4943]"
‚úÖ Best Practice: Encapsulation of scalar into SingleData,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 16578, 283, 656, 14206, 6601]",0.5,2291,best_practice,342,Encapsulation of scalar into SingleData,,2291,,[]
‚ö†Ô∏è SAST Risk (Low): Use of NotImplementedError for unsupported cases,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1892, 3546, 1154, 12061, 12331, 329, 24222, 2663]",1.0,2291,sast_risk,347,Use of NotImplementedError for unsupported cases,Low,2291,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627]",0.5,2317,sast_risk,349,Use of assert for type checking,Low,2291,"            indicator.transfer(trade_amount_func, ""trade_price"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16916, 13, 39437, 7, 25351, 62, 17287, 62, 20786, 11, 366, 25351, 62, 20888, 4943]"
‚úÖ Best Practice: Filtering data based on condition,"[26486, 227, 6705, 19939, 25, 7066, 20212, 1366, 1912, 319, 4006]",1.0,2333,best_practice,351,Filtering data based on condition,,2317,        # sum inner order indicators with same metric.,"[220, 220, 220, 220, 220, 220, 220, 1303, 2160, 8434, 1502, 21337, 351, 976, 18663, 13]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627]",0.5,2351,sast_risk,354,Use of assert for type checking,Low,2333,"            self.order_indicator,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 11]"
üß† ML Signal: Conditional logic based on aggregation method,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 46500, 2446]",0.5,2359,ml_signal,358,Conditional logic based on aggregation method,,2351,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Encapsulation of scalar into SingleData,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 16578, 283, 656, 14206, 6601]",0.5,2388,best_practice,361,Encapsulation of scalar into SingleData,,2359,            # trade_price is np.nan instead of inf when deal_amount is zero.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3292, 62, 20888, 318, 45941, 13, 12647, 2427, 286, 1167, 618, 1730, 62, 17287, 318, 6632, 13]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627]",0.5,2417,sast_risk,361,Use of assert for type checking,Low,2388,            # trade_price is np.nan instead of inf when deal_amount is zero.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3292, 62, 20888, 318, 45941, 13, 12647, 2427, 286, 1167, 618, 1730, 62, 17287, 318, 6632, 13]"
‚úÖ Best Practice: Reindexing data to match another dataset,"[26486, 227, 6705, 19939, 25, 797, 9630, 278, 1366, 284, 2872, 1194, 27039]",0.5,2440,best_practice,365,Reindexing data to match another dataset,,2417,"        self.order_indicator.transfer(func, ""trade_price"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 521, 26407, 13, 39437, 7, 20786, 11, 366, 25351, 62, 20888, 4943]"
üß† ML Signal: Conditional logic based on aggregation method,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 46500, 2446]",0.5,2464,ml_signal,368,Conditional logic based on aggregation method,,2440,            return trade_dir.apply(Order.parse_dir),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 15908, 13, 39014, 7, 18743, 13, 29572, 62, 15908, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of NotImplementedError for unsupported cases,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1892, 3546, 1154, 12061, 12331, 329, 24222, 2663]",1.0,2488,sast_risk,368,Use of NotImplementedError for unsupported cases,Low,2464,            return trade_dir.apply(Order.parse_dir),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 15908, 13, 39014, 7, 18743, 13, 29572, 62, 15908, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627]",0.5,2512,sast_risk,368,Use of assert for type checking,Low,2488,            return trade_dir.apply(Order.parse_dir),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 15908, 13, 39014, 7, 18743, 13, 29572, 62, 15908, 8]"
‚úÖ Best Practice: Calculation of aggregate values,"[26486, 227, 6705, 19939, 25, 2199, 14902, 286, 19406, 3815]",0.5,2536,best_practice,368,Calculation of aggregate values,,2512,            return trade_dir.apply(Order.parse_dir),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 15908, 13, 39014, 7, 18743, 13, 29572, 62, 15908, 8]"
‚úÖ Best Practice: Docstring provides clear parameter descriptions and expected types,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 2938, 3858]",1.0,2560,best_practice,368,Docstring provides clear parameter descriptions and expected types,,2536,            return trade_dir.apply(Order.parse_dir),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 15908, 13, 39014, 7, 18743, 13, 29572, 62, 15908, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for None values if _get_base_vol_pri returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 3815, 611, 4808, 1136, 62, 8692, 62, 10396, 62, 3448, 5860, 6045]",1.0,2568,sast_risk,393,Potential for None values if _get_base_vol_pri returns None,Low,2560,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Using idd.SingleData for consistent data handling,"[26486, 227, 6705, 19939, 25, 8554, 220, 1638, 13, 28008, 6601, 329, 6414, 1366, 9041]",1.0,2589,best_practice,408,Using idd.SingleData for consistent data handling,,2568,"                trade_end_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 437, 62, 2435, 11]"
‚úÖ Best Practice: Using idd.concat for efficient data concatenation,"[26486, 227, 6705, 19939, 25, 8554, 220, 1638, 13, 1102, 9246, 329, 6942, 1366, 1673, 36686, 341]",1.0,2617,best_practice,413,Using idd.concat for efficient data concatenation,,2589,"            raise NotImplementedError(f""This type of input is not supported"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 1212, 2099, 286, 5128, 318, 407, 4855, 4943]"
üß† ML Signal: Assigning calculated values to order_indicator,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 10488, 3815, 284, 1502, 62, 521, 26407]",1.0,2617,ml_signal,418,Assigning calculated values to order_indicator,,2617,,[]
üß† ML Signal: Calculating weighted average price,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 26356, 2811, 2756]",0.5,2642,ml_signal,419,Calculating weighted average price,,2617,"        if isinstance(price_s, (int, float, np.number)):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 20888, 62, 82, 11, 357, 600, 11, 12178, 11, 45941, 13, 17618, 8, 2599]"
‚úÖ Best Practice: Use of a private method to encapsulate functionality,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 2446, 284, 32652, 5039, 11244]",0.5,2642,best_practice,418,Use of a private method to encapsulate functionality,,2642,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,2667,best_practice,419,Consider adding a docstring to describe the function's purpose and parameters,,2642,"        if isinstance(price_s, (int, float, np.number)):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 20888, 62, 82, 11, 357, 600, 11, 12178, 11, 45941, 13, 17618, 8, 2599]"
üß† ML Signal: Usage of the 'empty' attribute to check for empty data structures,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 262, 705, 28920, 6, 11688, 284, 2198, 329, 6565, 1366, 8573]",1.0,2689,ml_signal,421,Usage of the 'empty' attribute to check for empty data structures,,2667,"        elif isinstance(price_s, idd.SingleData):","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 318, 39098, 7, 20888, 62, 82, 11, 220, 1638, 13, 28008, 6601, 2599]"
üß† ML Signal: Method chaining pattern with 'transfer' function,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 705, 39437, 6, 2163]",1.0,2698,ml_signal,423,Method chaining pattern with 'transfer' function,,2689,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Conditional check pattern,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 3912]",1.0,2698,ml_signal,425,Conditional check pattern,,2698,,[]
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,2726,best_practice,424,Use of descriptive variable names improves code readability.,,2698,"            raise NotImplementedError(f""This type of input is not supported"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 1212, 2099, 286, 5128, 318, 407, 4855, 4943]"
‚úÖ Best Practice: Clear mathematical operation for calculating 'sign'.,"[26486, 227, 6705, 19939, 25, 11459, 18069, 4905, 329, 26019, 705, 12683, 4458]",0.5,2751,best_practice,426,Clear mathematical operation for calculating 'sign'.,,2726,        # NOTE: there are some zeros in the trading price. These cases are known meaningless,"[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 612, 389, 617, 1976, 27498, 287, 262, 7313, 2756, 13, 2312, 2663, 389, 1900, 24513]"
‚úÖ Best Practice: Return statement is concise and clear.,"[26486, 227, 6705, 19939, 25, 8229, 2643, 318, 35327, 290, 1598, 13]",0.5,2765,best_practice,428,Return statement is concise and clear.,,2751,        # remove zero and negative values.,"[220, 220, 220, 220, 220, 220, 220, 1303, 4781, 6632, 290, 4633, 3815, 13]"
üß† ML Signal: Usage of a transfer method with a function and a string parameter.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 4351, 2446, 351, 257, 2163, 290, 257, 4731, 11507, 13]",0.5,2786,ml_signal,429,Usage of a transfer method with a function and a string parameter.,,2765,"        assert isinstance(price_s, idd.SingleData)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 20888, 62, 82, 11, 220, 1638, 13, 28008, 6601, 8]"
üß† ML Signal: Usage of an assign method with a string and dictionary parameter.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 281, 8333, 2446, 351, 257, 4731, 290, 22155, 11507, 13]",0.5,2807,ml_signal,429,Usage of an assign method with a string and dictionary parameter.,,2786,"        assert isinstance(price_s, idd.SingleData)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 20888, 62, 82, 11, 220, 1638, 13, 28008, 6601, 8]"
‚úÖ Best Practice: Type hints for parameters improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2828,best_practice,429,Type hints for parameters improve code readability and maintainability,,2807,"        assert isinstance(price_s, idd.SingleData)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 20888, 62, 82, 11, 220, 1638, 13, 28008, 6601, 8]"
üß† ML Signal: Method call pattern could be used to understand function behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 2163, 4069]",0.5,2849,ml_signal,438,Method call pattern could be used to understand function behavior,,2828,"        assert isinstance(price_s, idd.SingleData)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 20888, 62, 82, 11, 220, 1638, 13, 28008, 6601, 8]"
üß† ML Signal: Method call pattern could be used to understand function behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 2163, 4069]",0.5,2891,ml_signal,440,Method call pattern could be used to understand function behavior,,2849,"            volume_s = trade_exchange.get_volume(inst, trade_start_time, trade_end_time, method=None)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6115, 62, 82, 796, 3292, 62, 1069, 3803, 13, 1136, 62, 29048, 7, 8625, 11, 3292, 62, 9688, 62, 2435, 11, 3292, 62, 437, 62, 2435, 11, 2446, 28, 14202, 8]"
üß† ML Signal: Method call pattern could be used to understand function behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 2163, 4069]",0.5,2927,ml_signal,442,Method call pattern could be used to understand function behavior,,2891,"                volume_s = idd.SingleData(volume_s, [trade_start_time])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6115, 62, 82, 796, 220, 1638, 13, 28008, 6601, 7, 29048, 62, 82, 11, 685, 25351, 62, 9688, 62, 2435, 12962]"
‚úÖ Best Practice: Using get() with a default value prevents KeyError,"[26486, 227, 6705, 19939, 25, 8554, 651, 3419, 351, 257, 4277, 1988, 15174, 7383, 12331]",0.5,2955,best_practice,444,Using get() with a default value prevents KeyError,,2927,            volume_s = volume_s.reindex(price_s.index),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6115, 62, 82, 796, 6115, 62, 82, 13, 260, 9630, 7, 20888, 62, 82, 13, 9630, 8]"
üß† ML Signal: Method call pattern could be used to understand function behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 2163, 4069]",0.5,2970,ml_signal,445,Method call pattern could be used to understand function behavior,,2955,"        elif agg == ""twap"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 4194, 6624, 366, 4246, 499, 1298]"
üß† ML Signal: Method call pattern could be used to understand function behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 2163, 4069]",0.5,2998,ml_signal,448,Method call pattern could be used to understand function behavior,,2970,"            raise NotImplementedError(f""This type of input is not supported"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 1212, 2099, 286, 5128, 318, 407, 4855, 4943]"
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",1.0,3026,ml_signal,444,Use of default parameter values,,2998,            volume_s = volume_s.reindex(price_s.index),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6115, 62, 82, 796, 6115, 62, 82, 13, 260, 9630, 7, 20888, 62, 82, 13, 9630, 8]"
üß† ML Signal: Use of lambda functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499]",1.0,3041,ml_signal,445,Use of lambda functions,,3026,"        elif agg == ""twap"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 4194, 6624, 366, 4246, 499, 1298]"
üß† ML Signal: Use of lambda functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499]",1.0,3067,ml_signal,452,Use of lambda functions,,3041,        base_price = (price_s * volume_s).sum() / base_volume,"[220, 220, 220, 220, 220, 220, 220, 2779, 62, 20888, 796, 357, 20888, 62, 82, 1635, 6115, 62, 82, 737, 16345, 3419, 1220, 2779, 62, 29048]"
üß† ML Signal: Use of lambda functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499]",1.0,3088,ml_signal,457,Use of lambda functions,,3067,"        inner_order_indicators: List[BaseOrderIndicator],","[220, 220, 220, 220, 220, 220, 220, 8434, 62, 2875, 62, 521, 44549, 25, 7343, 58, 14881, 18743, 5497, 26407, 4357]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled exception if method is not supported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 6631, 611, 2446, 318, 407, 4855]",1.0,3095,sast_risk,461,Potential for unhandled exception if method is not supported,Low,3088,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
üß† ML Signal: Use of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815]",1.0,3109,ml_signal,459,Use of default parameter values,,3095,"        trade_exchange: Exchange,","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 1069, 3803, 25, 12516, 11]"
üß† ML Signal: Use of lambda functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499]",1.0,3116,ml_signal,461,Use of lambda functions,,3109,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
üß† ML Signal: Use of lambda functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499]",1.0,3141,ml_signal,465,Use of lambda functions,,3116,        # the correctness of the base_price relies on that the **same** exchange is used,"[220, 220, 220, 220, 220, 220, 220, 1303, 262, 29409, 286, 262, 2779, 62, 20888, 16507, 319, 326, 262, 12429, 31642, 1174, 5163, 318, 973]"
üß† ML Signal: Use of lambda functions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499]",1.0,3160,ml_signal,470,Use of lambda functions,,3141,            the indicators of account of inner executor,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 21337, 286, 1848, 286, 8434, 3121, 273]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled exception if method is not supported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 6631, 611, 2446, 318, 407, 4855]",1.0,3175,sast_risk,474,Potential for unhandled exception if method is not supported,Low,3160,            for retrieving trading price,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 50122, 7313, 2756]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3209,best_practice,471,Use of type hinting for return type improves code readability and maintainability,,3175,"        decision_list: List[Tuple[BaseTradeDecision, pd.Timestamp, pd.Timestamp]],","[220, 220, 220, 220, 220, 220, 220, 2551, 62, 4868, 25, 7343, 58, 51, 29291, 58, 14881, 35965, 10707, 1166, 11, 279, 67, 13, 14967, 27823, 11, 279, 67, 13, 14967, 27823, 60, 4357]"
üß† ML Signal: Use of lambda-like function for data transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 12, 2339, 2163, 329, 1366, 13389]",1.0,3222,ml_signal,473,Use of lambda-like function for data transformation,,3209,        trade_exchange : Exchange,"[220, 220, 220, 220, 220, 220, 220, 3292, 62, 1069, 3803, 1058, 12516]"
üß† ML Signal: Use of custom method 'transfer' for data processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2183, 2446, 705, 39437, 6, 329, 1366, 7587]",1.0,3234,ml_signal,475,Use of custom method 'transfer' for data processing,,3222,        pa_config : dict,"[220, 220, 220, 220, 220, 220, 220, 14187, 62, 11250, 1058, 8633]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and functionality of the method,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 11244, 286, 262, 2446]",0.5,3247,best_practice,476,Consider adding a docstring to describe the purpose and functionality of the method,,3234,            For example,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1114, 1672]"
"üß† ML Signal: Use of pandas-like operations (abs, sum) on data","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 12, 2339, 4560, 357, 8937, 11, 2160, 8, 319, 1366]",0.5,3259,ml_signal,477,"Use of pandas-like operations (abs, sum) on data",,3247,            {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1391]"
üß† ML Signal: Use of higher-order functions (passing a function as an argument),"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2440, 12, 2875, 5499, 357, 6603, 278, 257, 2163, 355, 281, 4578, 8]",0.5,3291,ml_signal,479,Use of higher-order functions (passing a function as an argument),,3259,"                ""price"": ""$close"",  # TODO: this is not supported now!!!!!","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 20888, 1298, 17971, 19836, 1600, 220, 1303, 16926, 46, 25, 428, 318, 407, 4855, 783, 50184]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3323,best_practice,479,Use of type hinting for return type improves code readability and maintainability,,3291,"                ""price"": ""$close"",  # TODO: this is not supported now!!!!!","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 20888, 1298, 17971, 19836, 1600, 220, 1303, 16926, 46, 25, 428, 318, 407, 4855, 783, 50184]"
üß† ML Signal: Use of method chaining with pandas-like operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2446, 442, 1397, 351, 19798, 292, 12, 2339, 4560]",0.5,3335,ml_signal,481,Use of method chaining with pandas-like operations,,3323,            },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse if `self.order_indicator` is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 611, 4600, 944, 13, 2875, 62, 521, 26407, 63, 318, 407, 31031]",0.5,3335,sast_risk,483,Potential misuse if `self.order_indicator` is not validated,Low,3335,,[]
‚úÖ Best Practice: Ensure `self.order_indicator` is initialized and valid,"[26486, 227, 6705, 19939, 25, 48987, 4600, 944, 13, 2875, 62, 521, 26407, 63, 318, 23224, 290, 4938]",0.5,3355,best_practice,484,Ensure `self.order_indicator` is initialized and valid,,3335,        # TODO: I think there are potentials to be optimized,"[220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 314, 892, 612, 389, 2785, 82, 284, 307, 23392]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3355,best_practice,483,Use of type hinting for return type improves code readability and maintainability,,3355,,[]
"üß† ML Signal: Function definition with a single parameter, common pattern in ML data processing","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2060, 11507, 11, 2219, 3912, 287, 10373, 1366, 7587]",0.5,3383,ml_signal,485,"Function definition with a single parameter, common pattern in ML data processing",,3355,"        trade_dir = self.order_indicator.get_index_data(""trade_dir"")","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 15908, 796, 2116, 13, 2875, 62, 521, 26407, 13, 1136, 62, 9630, 62, 7890, 7203, 25351, 62, 15908, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse if 'amount' is not a list or does not have a 'count' method,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 611, 705, 17287, 6, 318, 407, 257, 1351, 393, 857, 407, 423, 257, 705, 9127, 6, 2446]",0.5,3400,sast_risk,486,Potential misuse if 'amount' is not a list or does not have a 'count' method,Low,3383,        if len(trade_dir) > 0:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 25351, 62, 15908, 8, 1875, 657, 25]"
"üß† ML Signal: Use of higher-order function, passing a function as an argument","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2440, 12, 2875, 2163, 11, 6427, 257, 2163, 355, 281, 4578]",0.5,3424,ml_signal,487,"Use of higher-order function, passing a function as an argument",,3400,"            bp_all, bv_all = [], []","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 275, 79, 62, 439, 11, 275, 85, 62, 439, 796, 685, 4357, 17635]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'self.order_indicator.transfer' executes untrusted code,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 944, 13, 2875, 62, 521, 26407, 13, 39437, 6, 42985, 1418, 81, 8459, 2438]",0.5,3448,sast_risk,487,Potential risk if 'self.order_indicator.transfer' executes untrusted code,Low,3424,"            bp_all, bv_all = [], []","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 275, 79, 62, 439, 11, 275, 85, 62, 439, 796, 685, 4357, 17635]"
‚úÖ Best Practice: Consider adding error handling for robustness,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 12373, 1108]",1.0,3472,best_practice,487,Consider adding error handling for robustness,,3448,"            bp_all, bv_all = [], []","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 275, 79, 62, 439, 11, 275, 85, 62, 439, 796, 685, 4357, 17635]"
‚úÖ Best Practice: Use of get() method with default values for dictionary access,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 3419, 2446, 351, 4277, 3815, 329, 22155, 1895]",0.5,3500,best_practice,493,Use of get() method with default values for dictionary access,,3472,"                bp_new, bv_new = {}, {}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 275, 79, 62, 3605, 11, 275, 85, 62, 3605, 796, 1391, 5512, 23884]"
üß† ML Signal: Usage of method calls to calculate trade metrics,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 3848, 284, 15284, 3292, 20731]",0.5,3529,ml_signal,497,Usage of method calls to calculate trade metrics,,3500,"                            inst,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 916, 11]"
üß† ML Signal: Storing calculated indicators in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10488, 21337, 287, 257, 22155]",1.0,3553,ml_signal,504,Storing calculated indicators in a dictionary,,3529,                        ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through print statements,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 3601, 6299]",1.0,3553,sast_risk,509,Potential information disclosure through print statements,Low,3553,,[]
‚úÖ Best Practice: Include type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,3565,best_practice,522,Include type hints for function parameters and return type for better readability and maintainability,,3553,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of conditional return based on a boolean flag,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 1441, 1912, 319, 257, 25131, 6056]",0.5,3584,ml_signal,524,Usage of conditional return based on a boolean flag,,3565,    def _agg_order_price_advantage(self) -> None:,"[220, 220, 220, 825, 4808, 9460, 62, 2875, 62, 20888, 62, 13461, 496, 7, 944, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",0.5,3603,best_practice,524,Include a docstring to describe the method's purpose and return value,,3584,    def _agg_order_price_advantage(self) -> None:,"[220, 220, 220, 825, 4808, 9460, 62, 2875, 62, 20888, 62, 13461, 496, 7, 944, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Consider using a property decorator if this method is intended to be an attribute accessor,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 3119, 11705, 1352, 611, 428, 2446, 318, 5292, 284, 307, 281, 11688, 1895, 273]",0.5,3620,best_practice,526,Consider using a property decorator if this method is intended to be an attribute accessor,,3603,            return trade_price.empty,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 20888, 13, 28920]"
"üß† ML Signal: Method returns a DataFrame, indicating usage of pandas for data manipulation","[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 257, 6060, 19778, 11, 12739, 8748, 286, 19798, 292, 329, 1366, 17512]",0.5,3637,ml_signal,526,"Method returns a DataFrame, indicating usage of pandas for data manipulation",,3620,            return trade_price.empty,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 62, 20888, 13, 28920]"
"üß† ML Signal: Conversion of dictionary to DataFrame, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 22155, 284, 6060, 19778, 11, 2219, 287, 1366, 7587, 8861]",0.5,3637,ml_signal,527,"Conversion of dictionary to DataFrame, common in data processing tasks",,3637,,[]
"‚úÖ Best Practice: Use of 'from_dict' with 'orient=""index""' for clear DataFrame structure","[26486, 227, 6705, 19939, 25, 5765, 286, 705, 6738, 62, 11600, 6, 351, 705, 13989, 2625, 9630, 30543, 329, 1598, 6060, 19778, 4645]",0.5,3637,best_practice,527,"Use of 'from_dict' with 'orient=""index""' for clear DataFrame structure",,3637,,[]

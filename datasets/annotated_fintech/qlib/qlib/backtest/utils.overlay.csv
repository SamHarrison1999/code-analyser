annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Ensures compatibility with future Python versions for type annotations,"[26486, 227, 6705, 19939, 25, 48221, 942, 17764, 351, 2003, 11361, 6300, 329, 2099, 37647]",1.0,7,best_practice,2,Ensures compatibility with future Python versions for type annotations,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Use of abstractmethod to define abstract methods in base classes,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 24396, 284, 8160, 12531, 5050, 287, 2779, 6097]",0.5,7,best_practice,5,Use of abstractmethod to define abstract methods in base classes,,7,,[]
‚úÖ Best Practice: Use of typing module for type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 19720, 8265, 329, 2099, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,7,best_practice,8,Use of typing module for type hinting improves code readability and maintainability,,7,,[]
"üß† ML Signal: Importing numpy, a common library for numerical operations in ML","[8582, 100, 254, 10373, 26484, 25, 17267, 278, 299, 32152, 11, 257, 2219, 5888, 329, 29052, 4560, 287, 10373]",1.0,20,ml_signal,11,"Importing numpy, a common library for numerical operations in ML",,7,from qlib.utils.time import epsilon_change,"[6738, 10662, 8019, 13, 26791, 13, 2435, 1330, 304, 862, 33576, 62, 3803]"
"üß† ML Signal: Importing specific utility functions, indicating potential time series analysis","[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 10361, 5499, 11, 12739, 2785, 640, 2168, 3781]",1.0,20,ml_signal,12,"Importing specific utility functions, indicating potential time series analysis",,20,,[]
‚úÖ Best Practice: TYPE_CHECKING is used to avoid circular imports during runtime,"[26486, 227, 6705, 19939, 25, 41876, 62, 50084, 2751, 318, 973, 284, 3368, 18620, 17944, 1141, 19124]",1.0,22,best_practice,16,TYPE_CHECKING is used to avoid circular imports during runtime,,20,import warnings,"[11748, 14601]"
‚úÖ Best Practice: Importing warnings to handle or suppress warnings in the code,"[26486, 227, 6705, 19939, 25, 17267, 278, 14601, 284, 5412, 393, 18175, 14601, 287, 262, 2438]",1.0,22,best_practice,21,Importing warnings to handle or suppress warnings in the code,,22,,[]
"üß† ML Signal: Importing pandas, a common library for data manipulation in ML","[8582, 100, 254, 10373, 26484, 25, 17267, 278, 19798, 292, 11, 257, 2219, 5888, 329, 1366, 17512, 287, 10373]",1.0,28,ml_signal,23,"Importing pandas, a common library for data manipulation in ML",,22,class TradeCalendarManager:,"[4871, 9601, 9771, 9239, 13511, 25]"
‚ö†Ô∏è SAST Risk (Low): Relative imports can lead to issues in larger projects or when the module structure changes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2428, 287, 4025, 4493, 393, 618, 262, 8265, 4645, 2458]",1.0,34,sast_risk,23,Relative imports can lead to issues in larger projects or when the module structure changes,Low,28,class TradeCalendarManager:,"[4871, 9601, 9771, 9239, 13511, 25]"
‚úÖ Best Practice: Class docstring provides a brief description of the class and its usage,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 290, 663, 8748]",0.5,36,best_practice,16,Class docstring provides a brief description of the class and its usage,,34,import warnings,"[11748, 14601]"
‚úÖ Best Practice: Docstring provides clear parameter descriptions and default values,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 4277, 3815]",1.0,42,best_practice,23,Docstring provides clear parameter descriptions and default values,,36,class TradeCalendarManager:,"[4871, 9601, 9771, 9239, 13511, 25]"
üß† ML Signal: Usage of class attributes and method calls in __init__,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 12608, 290, 2446, 3848, 287, 11593, 15003, 834]",1.0,50,ml_signal,36,Usage of class attributes and method calls in __init__,,42,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Method call with parameters in constructor,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 10007, 287, 23772]",0.5,58,ml_signal,37,Method call with parameters in constructor,,50,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Method signature with default parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 4277, 10007]",1.0,58,ml_signal,50,Method signature with default parameters,,58,,[]
‚úÖ Best Practice: Explicitly setting instance variables,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 4554, 9633]",0.5,64,best_practice,51,Explicitly setting instance variables,,58,    def reset(,"[220, 220, 220, 825, 13259, 7]"
‚úÖ Best Practice: Using pd.Timestamp for consistent datetime handling,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 14967, 27823, 329, 6414, 4818, 8079, 9041]",1.0,76,best_practice,53,Using pd.Timestamp for consistent datetime handling,,64,"        freq: str,","[220, 220, 220, 220, 220, 220, 220, 2030, 80, 25, 965, 11]"
‚úÖ Best Practice: Using pd.Timestamp for consistent datetime handling,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 14967, 27823, 329, 6414, 4818, 8079, 9041]",1.0,100,best_practice,55,Using pd.Timestamp for consistent datetime handling,,76,"        end_time: Union[str, pd.Timestamp] = None,","[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 25, 4479, 58, 2536, 11, 279, 67, 13, 14967, 27823, 60, 796, 6045, 11]"
üß† ML Signal: Use of external calendar utility,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 11845, 10361]",0.5,108,ml_signal,57,Use of external calendar utility,,100,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking, which can be bypassed","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627, 11, 543, 460, 307, 17286, 276]",1.0,108,sast_risk,59,"Use of assert for type checking, which can be bypassed",Low,108,,[]
‚úÖ Best Practice: Explicitly setting instance variables,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 4554, 9633]",0.5,128,best_practice,61,Explicitly setting instance variables,,108,        - self.trade_len : The total count for trading step,"[220, 220, 220, 220, 220, 220, 220, 532, 2116, 13, 25351, 62, 11925, 1058, 383, 2472, 954, 329, 7313, 2239]"
üß† ML Signal: Use of external locate_index utility,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 17276, 62, 9630, 10361]",0.5,156,ml_signal,62,Use of external locate_index utility,,128,"        - self.trade_step : The number of trading step finished, self.trade_step can be","[220, 220, 220, 220, 220, 220, 220, 532, 2116, 13, 25351, 62, 9662, 1058, 383, 1271, 286, 7313, 2239, 5201, 11, 2116, 13, 25351, 62, 9662, 460, 307]"
‚úÖ Best Practice: Explicitly setting instance variables,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 4554, 9633]",0.5,184,best_practice,62,Explicitly setting instance variables,,156,"        - self.trade_step : The number of trading step finished, self.trade_step can be","[220, 220, 220, 220, 220, 220, 220, 532, 2116, 13, 25351, 62, 9662, 1058, 383, 1271, 286, 7313, 2239, 5201, 11, 2116, 13, 25351, 62, 9662, 460, 307]"
‚úÖ Best Practice: Explicitly setting instance variables,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 4554, 9633]",0.5,184,best_practice,68,Explicitly setting instance variables,,184,,[]
‚úÖ Best Practice: Calculating trade length based on indices,"[26486, 227, 6705, 19939, 25, 27131, 803, 3292, 4129, 1912, 319, 36525]",0.5,210,best_practice,69,Calculating trade length based on indices,,184,"        _calendar = Cal.calendar(freq=freq, future=True)","[220, 220, 220, 220, 220, 220, 220, 4808, 9948, 9239, 796, 2199, 13, 9948, 9239, 7, 19503, 80, 28, 19503, 80, 11, 2003, 28, 17821, 8]"
‚úÖ Best Practice: Initializing trade_step to zero,"[26486, 227, 6705, 19939, 25, 20768, 2890, 3292, 62, 9662, 284, 6632]",0.5,225,best_practice,71,Initializing trade_step to zero,,210,        self._calendar = _calendar,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9948, 9239, 796, 4808, 9948, 9239]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and behavior,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 4069]",1.0,253,best_practice,62,Docstring provides a clear explanation of the method's purpose and behavior,,225,"        - self.trade_step : The number of trading step finished, self.trade_step can be","[220, 220, 220, 220, 220, 220, 220, 532, 2116, 13, 25351, 62, 9662, 1058, 383, 1271, 286, 7313, 2239, 5201, 11, 2116, 13, 25351, 62, 9662, 460, 307]"
‚ö†Ô∏è SAST Risk (Low): Potential typo in the docstring with 'self.self.trade_len' instead of 'self.trade_len',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 46517, 287, 262, 2205, 8841, 351, 705, 944, 13, 944, 13, 25351, 62, 11925, 6, 2427, 286, 705, 944, 13, 25351, 62, 11925, 6]",1.0,279,sast_risk,69,Potential typo in the docstring with 'self.self.trade_len' instead of 'self.trade_len',Low,253,"        _calendar = Cal.calendar(freq=freq, future=True)","[220, 220, 220, 220, 220, 220, 220, 4808, 9948, 9239, 796, 2199, 13, 9948, 9239, 7, 19503, 80, 28, 19503, 80, 11, 2003, 28, 17821, 8]"
"üß† ML Signal: Method returns a boolean indicating completion status, useful for modeling process flow","[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 257, 25131, 12739, 11939, 3722, 11, 4465, 329, 21128, 1429, 5202]",0.5,294,ml_signal,71,"Method returns a boolean indicating completion status, useful for modeling process flow",,279,        self._calendar = _calendar,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9948, 9239, 796, 4808, 9948, 9239]"
‚úÖ Best Practice: Use of type hint for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,313,best_practice,70,Use of type hint for the return type improves code readability and maintainability,,294,"        assert isinstance(_calendar, np.ndarray)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 28264, 9948, 9239, 11, 45941, 13, 358, 18747, 8]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic RuntimeError without specific error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 43160, 12331, 1231, 2176, 4049, 9041]",1.0,359,sast_risk,72,Raising a generic RuntimeError without specific error handling,Low,313,"        _, _, _start_index, _end_index = Cal.locate_index(start_time, end_time, freq=freq, future=True)","[220, 220, 220, 220, 220, 220, 220, 4808, 11, 4808, 11, 4808, 9688, 62, 9630, 11, 4808, 437, 62, 9630, 796, 2199, 13, 75, 13369, 62, 9630, 7, 9688, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 28, 19503, 80, 11, 2003, 28, 17821, 8]"
"üß† ML Signal: Incrementing a counter variable, common in iterative processes","[8582, 100, 254, 10373, 26484, 25, 10791, 434, 278, 257, 3753, 7885, 11, 2219, 287, 11629, 876, 7767]",1.0,376,ml_signal,74,"Incrementing a counter variable, common in iterative processes",,359,        self.end_index = _end_index,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 62, 9630, 796, 4808, 437, 62, 9630]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,393,best_practice,73,Use of type hinting for return type improves code readability and maintainability,,376,        self.start_index = _start_index,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 9630, 796, 4808, 9688, 62, 9630]"
"üß† ML Signal: Method returning an attribute value, indicating a getter pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 281, 11688, 1988, 11, 12739, 257, 651, 353, 3912]",1.0,417,ml_signal,75,"Method returning an attribute value, indicating a getter pattern",,393,        self.trade_len = _end_index - _start_index + 1,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 25351, 62, 11925, 796, 4808, 437, 62, 9630, 532, 4808, 9688, 62, 9630, 1343, 352]"
‚úÖ Best Practice: Method docstring provides a clear description of the method's purpose,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007]",1.0,441,best_practice,75,Method docstring provides a clear description of the method's purpose,,417,        self.trade_len = _end_index - _start_index + 1,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 25351, 62, 11925, 796, 4808, 437, 62, 9630, 532, 4808, 9688, 62, 9630, 1343, 352]"
‚úÖ Best Practice: Type hinting for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,441,best_practice,77,Type hinting for return value improves code readability and maintainability,,441,,[]
"üß† ML Signal: Method returning an attribute value, indicating a getter pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 281, 11688, 1988, 11, 12739, 257, 651, 353, 3912]",1.0,449,ml_signal,79,"Method returning an attribute value, indicating a getter pattern",,441,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",1.0,460,best_practice,78,Include a docstring to describe the method's purpose and return value,,449,    def finished(self) -> bool:,"[220, 220, 220, 825, 5201, 7, 944, 8, 4613, 20512, 25]"
"üß† ML Signal: Method returning an attribute value, indicating a getter pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 281, 11688, 1988, 11, 12739, 257, 651, 353, 3912]",0.5,472,ml_signal,80,"Method returning an attribute value, indicating a getter pattern",,460,        Check if the trading finished,"[220, 220, 220, 220, 220, 220, 220, 6822, 611, 262, 7313, 5201]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,484,best_practice,80,Type hinting for function parameters and return type improves code readability and maintainability.,,472,        Check if the trading finished,"[220, 220, 220, 220, 220, 220, 220, 6822, 611, 262, 7313, 5201]"
‚úÖ Best Practice: Using a method to get a default value for trade_step increases flexibility.,"[26486, 227, 6705, 19939, 25, 8554, 257, 2446, 284, 651, 257, 4277, 1988, 329, 3292, 62, 9662, 5732, 13688, 13]",0.5,484,best_practice,101,Using a method to get a default value for trade_step increases flexibility.,,484,,[]
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if calendar_index is out of bounds for self._calendar.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 11845, 62, 9630, 318, 503, 286, 22303, 329, 2116, 13557, 9948, 9239, 13]",1.0,492,sast_risk,103,Potential IndexError if calendar_index is out of bounds for self._calendar.,Low,484,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if calendar_index + 1 is out of bounds for self._calendar.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 11845, 62, 9630, 1343, 352, 318, 503, 286, 22303, 329, 2116, 13557, 9948, 9239, 13]",1.0,515,sast_risk,104,Potential IndexError if calendar_index + 1 is out of bounds for self._calendar.,Low,492,        Get the left and right endpoints of the trade_step'th trading interval,"[220, 220, 220, 220, 220, 220, 220, 3497, 262, 1364, 290, 826, 886, 13033, 286, 262, 3292, 62, 9662, 470, 71, 7313, 16654]"
"‚ö†Ô∏è SAST Risk (Low): No validation on self.level_infra, could raise AttributeError if None","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 2116, 13, 5715, 62, 10745, 430, 11, 714, 5298, 3460, 4163, 12331, 611, 6045]",1.0,527,sast_risk,118,"No validation on self.level_infra, could raise AttributeError if None",Low,515,"        shift : int, optional","[220, 220, 220, 220, 220, 220, 220, 6482, 1058, 493, 11, 11902]"
‚úÖ Best Practice: Use pd.Timestamp to ensure consistent datetime handling,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 14967, 27823, 284, 4155, 6414, 4818, 8079, 9041]",1.0,527,best_practice,120,Use pd.Timestamp to ensure consistent datetime handling,,527,,[]
‚úÖ Best Practice: Use pd.Timedelta for clear and explicit time manipulation,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 14967, 276, 12514, 329, 1598, 290, 7952, 640, 17512]",1.0,535,best_practice,122,Use pd.Timedelta for clear and explicit time manipulation,,527,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""common_infra"" or ""trade_exchange"" keys are missing","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 11321, 62, 10745, 430, 1, 393, 366, 25351, 62, 1069, 3803, 1, 8251, 389, 4814]",0.5,557,sast_risk,124,"Potential KeyError if ""common_infra"" or ""trade_exchange"" keys are missing",Low,535,"            - If shift == 0, return the trading time range","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 1002, 6482, 6624, 657, 11, 1441, 262, 7313, 640, 2837]"
üß† ML Signal: Usage of Cal.locate_index indicates a pattern for locating indices in a calendar,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2199, 13, 75, 13369, 62, 9630, 9217, 257, 3912, 329, 42139, 36525, 287, 257, 11845]",1.0,584,ml_signal,126,Usage of Cal.locate_index indicates a pattern for locating indices in a calendar,,557,"            - If shift < 0, return the trading time range of the later shift bar","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 1002, 6482, 1279, 657, 11, 1441, 262, 7313, 640, 2837, 286, 262, 1568, 6482, 2318]"
üß† ML Signal: Conditional logic based on rtype can indicate different operational modes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 374, 4906, 460, 7603, 1180, 13919, 12881]",1.0,607,ml_signal,129,Conditional logic based on rtype can indicate different operational modes,,584,            trade_step = self.get_trade_step(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 9662, 796, 2116, 13, 1136, 62, 25351, 62, 9662, 3419]"
"üß† ML Signal: Different method call for ""step"" indicates a pattern for step-based operations","[8582, 100, 254, 10373, 26484, 25, 20615, 2446, 869, 329, 366, 9662, 1, 9217, 257, 3912, 329, 2239, 12, 3106, 4560]",0.5,607,ml_signal,132,"Different method call for ""step"" indicates a pattern for step-based operations",,607,,[]
‚ö†Ô∏è SAST Risk (Low): Error message could expose internal logic if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 714, 15651, 5387, 9156, 611, 407, 12118, 6105]",1.0,615,sast_risk,134,Error message could expose internal logic if not handled properly,Low,607,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Return a tuple for clear and structured data output,"[26486, 227, 6705, 19939, 25, 8229, 257, 46545, 329, 1598, 290, 20793, 1366, 5072]",1.0,623,best_practice,134,Return a tuple for clear and structured data output,,615,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Include type hints for return values to improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1441, 3815, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,645,best_practice,130,Include type hints for return values to improve code readability and maintainability,,623,        calendar_index = self.start_index + trade_step - shift,"[220, 220, 220, 220, 220, 220, 220, 11845, 62, 9630, 796, 2116, 13, 9688, 62, 9630, 1343, 3292, 62, 9662, 532, 6482]"
"üß† ML Signal: Method returning a tuple of timestamps, indicating a pattern of handling time ranges","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 46545, 286, 4628, 395, 9430, 11, 12739, 257, 3912, 286, 9041, 640, 16069]",1.0,675,ml_signal,133,"Method returning a tuple of timestamps, indicating a pattern of handling time ranges",,645,"    def get_data_cal_range(self, rtype: str = ""full"") -> Tuple[int, int]:","[220, 220, 220, 825, 651, 62, 7890, 62, 9948, 62, 9521, 7, 944, 11, 374, 4906, 25, 965, 796, 366, 12853, 4943, 4613, 309, 29291, 58, 600, 11, 493, 5974]"
‚úÖ Best Practice: Use of np.searchsorted for efficient searching in sorted arrays,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 12947, 82, 9741, 329, 6942, 10342, 287, 23243, 26515]",1.0,675,best_practice,145,Use of np.searchsorted for efficient searching in sorted arrays,,675,,[]
‚úÖ Best Practice: Use of np.searchsorted for efficient searching in sorted arrays,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 12947, 82, 9741, 329, 6942, 10342, 287, 23243, 26515]",1.0,683,best_practice,147,Use of np.searchsorted for efficient searching in sorted arrays,,675,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Adjusting indices based on start_index for correct range calculation,"[26486, 227, 6705, 19939, 25, 20292, 278, 36525, 1912, 319, 923, 62, 9630, 329, 3376, 2837, 17952]",1.0,691,best_practice,149,Adjusting indices based on start_index for correct range calculation,,683,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Adjusting indices based on start_index for correct range calculation,"[26486, 227, 6705, 19939, 25, 20292, 278, 36525, 1912, 319, 923, 62, 9630, 329, 3376, 2837, 17952]",1.0,708,best_practice,151,Adjusting indices based on start_index for correct range calculation,,691,        assert self.level_infra is not None,"[220, 220, 220, 220, 220, 220, 220, 6818, 2116, 13, 5715, 62, 10745, 430, 318, 407, 6045]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,716,best_practice,149,Type hinting for function parameters and return type improves code readability and maintainability.,,708,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Using min and max to constrain a value within a range is a common and efficient pattern.,"[26486, 227, 6705, 19939, 25, 8554, 949, 290, 3509, 284, 1500, 3201, 257, 1988, 1626, 257, 2837, 318, 257, 2219, 290, 6942, 3912, 13]",0.5,733,best_practice,151,Using min and max to constrain a value within a range is a common and efficient pattern.,,716,        assert self.level_infra is not None,"[220, 220, 220, 220, 220, 220, 220, 6818, 2116, 13, 5715, 62, 10745, 430, 318, 407, 6045]"
üß† ML Signal: Returning a tuple of function calls indicates a pattern of applying the same operation to multiple inputs.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 46545, 286, 2163, 3848, 9217, 257, 3912, 286, 11524, 262, 976, 4905, 284, 3294, 17311, 13]",0.5,758,ml_signal,153,Returning a tuple of function calls indicates a pattern of applying the same operation to multiple inputs.,,733,        day_start = pd.Timestamp(self.start_time.date()),"[220, 220, 220, 220, 220, 220, 220, 1110, 62, 9688, 796, 279, 67, 13, 14967, 27823, 7, 944, 13, 9688, 62, 2435, 13, 4475, 28955]"
‚úÖ Best Practice: Use of __repr__ for a clear and unambiguous string representation of the object,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 260, 1050, 834, 329, 257, 1598, 290, 42053, 29709, 4731, 10552, 286, 262, 2134]",1.0,758,best_practice,152,Use of __repr__ for a clear and unambiguous string representation of the object,,758,,[]
üß† ML Signal: Use of f-strings for string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 37336, 329, 4731, 33313]",1.0,783,ml_signal,153,Use of f-strings for string formatting,,758,        day_start = pd.Timestamp(self.start_time.date()),"[220, 220, 220, 220, 220, 220, 220, 1110, 62, 9688, 796, 279, 67, 13, 14967, 27823, 7, 944, 13, 9688, 62, 2435, 13, 4475, 28955]"
üß† ML Signal: Use of **kwargs indicates a flexible function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12429, 46265, 22046, 9217, 257, 12846, 2163, 9877]",0.5,798,ml_signal,160,Use of **kwargs indicates a flexible function signature,,783,"        elif rtype == ""step"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 374, 4906, 6624, 366, 9662, 1298]"
üß† ML Signal: Method call within constructor indicates initialization pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 1626, 23772, 9217, 37588, 3912]",0.5,807,ml_signal,162,Method call within constructor indicates initialization pattern,,798,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of @abstractmethod indicates this method must be overridden in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 397, 8709, 24396, 9217, 428, 2446, 1276, 307, 23170, 4651, 287, 850, 37724]",0.5,807,best_practice,164,Use of @abstractmethod indicates this method must be overridden in subclasses,,807,,[]
‚úÖ Best Practice: Method signature includes type hinting for return type,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 9254, 278, 329, 1441, 2099]",1.0,816,best_practice,162,Method signature includes type hinting for return type,,807,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of NotImplementedError to indicate an abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446]",1.0,816,best_practice,164,Use of NotImplementedError to indicate an abstract method,,816,,[]
üß† ML Signal: Use of dynamic attributes with setattr,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8925, 12608, 351, 900, 35226]",0.5,846,ml_signal,165,Use of dynamic attributes with setattr,,816,"        return start_idx - day_start_idx, end_index - day_start_idx","[220, 220, 220, 220, 220, 220, 220, 1441, 923, 62, 312, 87, 532, 1110, 62, 9688, 62, 312, 87, 11, 886, 62, 9630, 532, 1110, 62, 9688, 62, 312, 87]"
‚úÖ Best Practice: Check if key is in support_infra before setting attribute,"[26486, 227, 6705, 19939, 25, 6822, 611, 1994, 318, 287, 1104, 62, 10745, 430, 878, 4634, 11688]",0.5,866,best_practice,168,Check if key is in support_infra before setting attribute,,846,"        """"""Get the start_time and end_time for trading""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 3855, 262, 923, 62, 2435, 290, 886, 62, 2435, 329, 7313, 37811]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through warnings,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 14601]",0.5,907,sast_risk,172,Potential information disclosure through warnings,Low,866,"    def get_range_idx(self, start_time: pd.Timestamp, end_time: pd.Timestamp) -> Tuple[int, int]:","[220, 220, 220, 825, 651, 62, 9521, 62, 312, 87, 7, 944, 11, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11, 886, 62, 2435, 25, 279, 67, 13, 14967, 27823, 8, 4613, 309, 29291, 58, 600, 11, 493, 5974]"
‚úÖ Best Practice: Check if an attribute exists before accessing it to avoid AttributeError.,"[26486, 227, 6705, 19939, 25, 6822, 611, 281, 11688, 7160, 878, 22534, 340, 284, 3368, 3460, 4163, 12331, 13]",0.5,948,best_practice,172,Check if an attribute exists before accessing it to avoid AttributeError.,,907,"    def get_range_idx(self, start_time: pd.Timestamp, end_time: pd.Timestamp) -> Tuple[int, int]:","[220, 220, 220, 825, 651, 62, 9521, 62, 312, 87, 7, 944, 11, 923, 62, 2435, 25, 279, 67, 13, 14967, 27823, 11, 886, 62, 2435, 25, 279, 67, 13, 14967, 27823, 8, 4613, 309, 29291, 58, 600, 11, 493, 5974]"
üß† ML Signal: Usage of dynamic attribute access pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 11688, 1895, 3912, 13]",1.0,956,ml_signal,173,Usage of dynamic attribute access pattern.,,948,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through warnings.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 14601, 13]",0.5,965,sast_risk,177,Potential information disclosure through warnings.,Low,956,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,973,best_practice,176,Type hinting for the return value improves code readability and maintainability,,965,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Usage of 'in' keyword to check membership in a collection,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 259, 6, 21179, 284, 2198, 9931, 287, 257, 4947]",0.5,989,ml_signal,178,Usage of 'in' keyword to check membership in a collection,,973,        start_time : pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 1058, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Using 'in' for membership check is more readable and idiomatic,"[26486, 227, 6705, 19939, 25, 8554, 705, 259, 6, 329, 9931, 2198, 318, 517, 31744, 290, 46205, 13730]",0.5,1005,best_practice,179,Using 'in' for membership check is more readable and idiomatic,,989,        end_time : pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 1058, 279, 67, 13, 14967, 27823]"
‚ö†Ô∏è SAST Risk (Low): Potential for AttributeError if 'get_support_infra' is not defined or does not return an iterable,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3460, 4163, 12331, 611, 705, 1136, 62, 11284, 62, 10745, 430, 6, 318, 407, 5447, 393, 857, 407, 1441, 281, 11629, 540]",0.5,1005,sast_risk,180,Potential for AttributeError if 'get_support_infra' is not defined or does not return an iterable,Low,1005,,[]
üß† ML Signal: Usage of 'hasattr' to check for attribute existence,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 10134, 35226, 6, 284, 2198, 329, 11688, 6224]",1.0,1013,ml_signal,182,Usage of 'hasattr' to check for attribute existence,,1005,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
"‚ö†Ô∏è SAST Risk (Low): Potential for misuse if 'infra_name' is user-controlled, leading to unintended attribute access","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 29169, 611, 705, 10745, 430, 62, 3672, 6, 318, 2836, 12, 14401, 11, 3756, 284, 30261, 11688, 1895]",0.5,1027,sast_risk,183,"Potential for misuse if 'infra_name' is user-controlled, leading to unintended attribute access",Low,1013,"        Tuple[int, int]:","[220, 220, 220, 220, 220, 220, 220, 309, 29291, 58, 600, 11, 493, 5974]"
‚úÖ Best Practice: Consider adding type hints for `support_infra` for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 4600, 11284, 62, 10745, 430, 63, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1043,best_practice,179,Consider adding type hints for `support_infra` for better readability and maintainability.,,1027,        end_time : pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 1058, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Usage of dictionary comprehension to create a dictionary from object attributes.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 35915, 284, 2251, 257, 22155, 422, 2134, 12608, 13]",0.5,1051,ml_signal,181,Usage of dictionary comprehension to create a dictionary from object attributes.,,1043,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚ö†Ô∏è SAST Risk (Low): Potential AttributeError if `get_support_infra` returns non-iterable or invalid attribute names.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3460, 4163, 12331, 611, 4600, 1136, 62, 11284, 62, 10745, 430, 63, 5860, 1729, 12, 2676, 540, 393, 12515, 11688, 3891, 13]",1.0,1059,sast_risk,182,Potential AttributeError if `get_support_infra` returns non-iterable or invalid attribute names.,Low,1051,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Ensure `reset_infra` method is well-defined to handle dynamic keyword arguments.,"[26486, 227, 6705, 19939, 25, 48987, 4600, 42503, 62, 10745, 430, 63, 2446, 318, 880, 12, 23211, 284, 5412, 8925, 21179, 7159, 13]",0.5,1085,best_practice,184,Ensure `reset_infra` method is well-defined to handle dynamic keyword arguments.,,1059,            the index of the range.  **the left and right are closed**,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 6376, 286, 262, 2837, 13, 220, 12429, 1169, 1364, 290, 826, 389, 4838, 1174]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1099,best_practice,183,Use of type hinting for return type improves code readability and maintainability,,1085,"        Tuple[int, int]:","[220, 220, 220, 220, 220, 220, 220, 309, 29291, 58, 600, 11, 493, 5974]"
üß† ML Signal: Use of hardcoded return values can indicate fixed behavior or configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1327, 40976, 1441, 3815, 460, 7603, 5969, 4069, 393, 8398]",1.0,1107,ml_signal,185,Use of hardcoded return values can indicate fixed behavior or configuration,,1099,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Class docstring provides a description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 6764, 286, 262, 1398, 4007]",1.0,1140,best_practice,186,Class docstring provides a description of the class purpose,,1107,"        left = int(np.searchsorted(self._calendar, start_time, side=""right"") - 1)","[220, 220, 220, 220, 220, 220, 220, 1364, 796, 493, 7, 37659, 13, 12947, 82, 9741, 7, 944, 13557, 9948, 9239, 11, 923, 62, 2435, 11, 1735, 2625, 3506, 4943, 532, 352, 8]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1154,best_practice,188,Use of type hinting for return type improves code readability and maintainability,,1140,        left -= self.start_index,"[220, 220, 220, 220, 220, 220, 220, 1364, 48185, 2116, 13, 9688, 62, 9630]"
"üß† ML Signal: Returns a set of infrastructure components, indicating a pattern of infrastructure management","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 900, 286, 6884, 6805, 11, 12739, 257, 3912, 286, 6884, 4542]",1.0,1170,ml_signal,194,"Returns a set of infrastructure components, indicating a pattern of infrastructure management",,1154,"        return clip(left), clip(right)","[220, 220, 220, 220, 220, 220, 220, 1441, 10651, 7, 9464, 828, 10651, 7, 3506, 8]"
üß† ML Signal: Checks for the existence of a component before resetting or creating it,"[8582, 100, 254, 10373, 26484, 25, 47719, 329, 262, 6224, 286, 257, 7515, 878, 13259, 889, 393, 4441, 340]",0.5,1178,ml_signal,201,Checks for the existence of a component before resetting or creating it,,1170,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Retrieves and resets an existing component with new parameters,"[8582, 100, 254, 10373, 26484, 25, 4990, 5034, 1158, 290, 581, 1039, 281, 4683, 7515, 351, 649, 10007]",0.5,1178,ml_signal,202,Retrieves and resets an existing component with new parameters,,1178,,[]
üß† ML Signal: Initializes a new component if it doesn't exist,"[8582, 100, 254, 10373, 26484, 25, 20768, 4340, 257, 649, 7515, 611, 340, 1595, 470, 2152]",1.0,1178,ml_signal,207,Initializes a new component if it doesn't exist,,1178,,[]
‚úÖ Best Practice: Uses named parameters for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 36965, 3706, 10007, 329, 16287, 290, 5529, 1799]",1.0,1185,best_practice,208,Uses named parameters for clarity and maintainability,,1178,    @abstractmethod,"[220, 220, 220, 2488, 397, 8709, 24396]"
‚úÖ Best Practice: Use of type hints for method parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099]",0.5,1185,best_practice,207,Use of type hints for method parameters and return type,,1185,,[]
üß† ML Signal: Method that modifies internal state based on input parameter,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 953, 6945, 5387, 1181, 1912, 319, 5128, 11507]",0.5,1212,ml_signal,210,Method that modifies internal state based on input parameter,,1185,"        raise NotImplementedError(""`get_support_infra` is not implemented!"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 63, 1136, 62, 11284, 62, 10745, 430, 63, 318, 407, 9177, 2474, 8]"
‚úÖ Best Practice: Use of try-except block to handle potential NotImplementedError,"[26486, 227, 6705, 19939, 25, 5765, 286, 1949, 12, 16341, 2512, 284, 5412, 2785, 1892, 3546, 1154, 12061, 12331]",1.0,1242,best_practice,224,Use of try-except block to handle potential NotImplementedError,,1212,"            warnings.warn(f""infra {infra_name} is not found!"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14601, 13, 40539, 7, 69, 1, 10745, 430, 1391, 10745, 430, 62, 3672, 92, 318, 407, 1043, 2474, 8]"
"üß† ML Signal: Method call on an object, indicating object-oriented design","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11, 12739, 2134, 12, 17107, 1486]",1.0,1242,ml_signal,225,"Method call on an object, indicating object-oriented design",,1242,,[]
‚ö†Ô∏è SAST Risk (Low): Catching broad exception type NotImplementedError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 6631, 2099, 1892, 3546, 1154, 12061, 12331]",0.5,1275,sast_risk,227,Catching broad exception type NotImplementedError,Low,1242,"        return infra_name in self.get_support_infra() and hasattr(self, infra_name)","[220, 220, 220, 220, 220, 220, 220, 1441, 1167, 430, 62, 3672, 287, 2116, 13, 1136, 62, 11284, 62, 10745, 430, 3419, 290, 468, 35226, 7, 944, 11, 1167, 430, 62, 3672, 8]"
üß† ML Signal: Handling exceptions to provide default behavior,"[8582, 100, 254, 10373, 26484, 25, 49500, 13269, 284, 2148, 4277, 4069]",0.5,1308,ml_signal,227,Handling exceptions to provide default behavior,,1275,"        return infra_name in self.get_support_infra() and hasattr(self, infra_name)","[220, 220, 220, 220, 220, 220, 220, 1441, 1167, 430, 62, 3672, 287, 2116, 13, 1136, 62, 11284, 62, 10745, 430, 3419, 290, 468, 35226, 7, 944, 11, 1167, 430, 62, 3672, 8]"

[
  {
    "line": 13,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of utility function for instance initialization improves code maintainability and readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10361,
      2163,
      329,
      4554,
      37588,
      19575,
      2438,
      5529,
      1799,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of utility function for instance initialization improves code maintainability and readability."
  },
  {
    "line": 19,
    "text": "from ..config import C",
    "annotation": "\u2705 Best Practice: Using a logger for module-specific logging is a good practice for debugging and monitoring.",
    "confidence": 1.0,
    "tokens": [
      6738,
      11485,
      11250,
      1330,
      327
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      329,
      8265,
      12,
      11423,
      18931,
      318,
      257,
      922,
      3357,
      329,
      28769,
      290,
      9904,
      13
    ],
    "label": "best_practice",
    "reason": "Using a logger for module-specific logging is a good practice for debugging and monitoring."
  },
  {
    "line": 19,
    "text": "from ..config import C",
    "annotation": "\u2705 Best Practice: Consider using type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      11485,
      11250,
      1330,
      327
    ],
    "start_token": 5,
    "end_token": 10,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 33,
    "text": "def get_exchange(",
    "annotation": "\u2705 Best Practice: Provide a detailed docstring to describe the function's purpose, parameters, and return value.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      1069,
      3803,
      7
    ],
    "start_token": 10,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      6496,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      11,
      10007,
      11,
      290,
      1441,
      1988,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a detailed docstring to describe the function's purpose, parameters, and return value."
  },
  {
    "line": 72,
    "text": "    deal_price: Union[str, Tuple[str, str], List[str]]",
    "annotation": "\u2705 Best Practice: Check for None values to provide default behavior or handle missing data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1730,
      62,
      20888,
      25,
      4479,
      58,
      2536,
      11,
      309,
      29291,
      58,
      2536,
      11,
      965,
      4357,
      7343,
      58,
      2536,
      11907
    ],
    "start_token": 16,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      3815,
      284,
      2148,
      4277,
      4069,
      393,
      5412,
      4814,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Check for None values to provide default behavior or handle missing data."
  },
  {
    "line": 74,
    "text": "                - <deal_price> : str",
    "annotation": "\u2705 Best Practice: Use logging to provide information about the application's execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      1279,
      31769,
      62,
      20888,
      29,
      1058,
      965
    ],
    "start_token": 38,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      284,
      2148,
      1321,
      546,
      262,
      3586,
      338,
      9706,
      13
    ],
    "label": "best_practice",
    "reason": "Use logging to provide information about the application's execution."
  },
  {
    "line": 74,
    "text": "                - <deal_price> : str",
    "annotation": "\ud83e\udde0 ML Signal: The creation of a new Exchange object with specific parameters can be a signal for model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      1279,
      31769,
      62,
      20888,
      29,
      1058,
      965
    ],
    "start_token": 61,
    "end_token": 84,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      6282,
      286,
      257,
      649,
      12516,
      2134,
      351,
      2176,
      10007,
      460,
      307,
      257,
      6737,
      329,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "The creation of a new Exchange object with specific parameters can be a signal for model training."
  },
  {
    "line": 94,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that `init_instance_by_config` is safe and handles untrusted input properly.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      4600,
      15003,
      62,
      39098,
      62,
      1525,
      62,
      11250,
      63,
      318,
      3338,
      290,
      17105,
      1418,
      81,
      8459,
      5128,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that `init_instance_by_config` is safe and handles untrusted input properly."
  },
  {
    "line": 90,
    "text": "    if limit_threshold is None:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      4179,
      62,
      400,
      10126,
      318,
      6045,
      25
    ],
    "start_token": 84,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 127,
    "text": "        start time of the benchmark",
    "annotation": "\u2705 Best Practice: Use of isinstance to check variable type is a common and clear pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      640,
      286,
      262,
      18335
    ],
    "start_token": 95,
    "end_token": 107,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      7885,
      2099,
      318,
      257,
      2219,
      290,
      1598,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check variable type is a common and clear pattern."
  },
  {
    "line": 131,
    "text": "        the benchmark for reporting",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Popping \"cash\" from the account dictionary modifies the input data, which may lead to unexpected side effects.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      18335,
      329,
      6447
    ],
    "start_token": 107,
    "end_token": 118,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7695,
      2105,
      366,
      30350,
      1,
      422,
      262,
      1848,
      22155,
      953,
      6945,
      262,
      5128,
      1366,
      11,
      543,
      743,
      1085,
      284,
      10059,
      1735,
      3048,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Popping \"cash\" from the account dictionary modifies the input data, which may lead to unexpected side effects."
  },
  {
    "line": 134,
    "text": "                    {",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a ValueError provides feedback for incorrect input types, but consider more informative error messages.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1391
    ],
    "start_token": 118,
    "end_token": 138,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      11052,
      12331,
      3769,
      7538,
      329,
      11491,
      5128,
      3858,
      11,
      475,
      2074,
      517,
      30304,
      4049,
      6218,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a ValueError provides feedback for incorrect input types, but consider more informative error messages."
  },
  {
    "line": 148,
    "text": "            ...",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2644
    ],
    "start_token": 138,
    "end_token": 150,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 159,
    "text": "        raise ValueError(\"account must be in (int, float, dict)\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing within a function can lead to performance issues and is generally not recommended.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      23317,
      1276,
      307,
      287,
      357,
      600,
      11,
      12178,
      11,
      8633,
      8,
      4943
    ],
    "start_token": 150,
    "end_token": 173,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      1626,
      257,
      2163,
      460,
      1085,
      284,
      2854,
      2428,
      290,
      318,
      4143,
      407,
      7151,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing within a function can lead to performance issues and is generally not recommended."
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of creating an account instance with specific parameters.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 173,
    "end_token": 173,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4441,
      281,
      1848,
      4554,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of creating an account instance with specific parameters."
  },
  {
    "line": 170,
    "text": "                \"start_time\": start_time,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using mutable default arguments like dictionaries can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9688,
      62,
      2435,
      1298,
      923,
      62,
      2435,
      11
    ],
    "start_token": 173,
    "end_token": 197,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4517,
      540,
      4277,
      7159,
      588,
      48589,
      3166,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using mutable default arguments like dictionaries can lead to unexpected behavior."
  },
  {
    "line": 176,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of initializing an exchange with specific parameters.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4238,
      2890,
      281,
      5163,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of initializing an exchange with specific parameters."
  },
  {
    "line": 178,
    "text": "    start_time: Union[pd.Timestamp, str],",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of creating a common infrastructure for trading.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      4479,
      58,
      30094,
      13,
      14967,
      27823,
      11,
      965,
      4357
    ],
    "start_token": 197,
    "end_token": 213,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4441,
      257,
      2219,
      6884,
      329,
      7313,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of creating a common infrastructure for trading."
  },
  {
    "line": 179,
    "text": "    end_time: Union[pd.Timestamp, str],",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of initializing a strategy instance with specific configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      4479,
      58,
      30094,
      13,
      14967,
      27823,
      11,
      965,
      4357
    ],
    "start_token": 213,
    "end_token": 229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4238,
      2890,
      257,
      4811,
      4554,
      351,
      2176,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of initializing a strategy instance with specific configuration."
  },
  {
    "line": 179,
    "text": "    end_time: Union[pd.Timestamp, str],",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of resetting common infrastructure for a strategy.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      4479,
      58,
      30094,
      13,
      14967,
      27823,
      11,
      965,
      4357
    ],
    "start_token": 229,
    "end_token": 245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      13259,
      889,
      2219,
      6884,
      329,
      257,
      4811,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of resetting common infrastructure for a strategy."
  },
  {
    "line": 179,
    "text": "    end_time: Union[pd.Timestamp, str],",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of initializing an executor instance with specific configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      4479,
      58,
      30094,
      13,
      14967,
      27823,
      11,
      965,
      4357
    ],
    "start_token": 245,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4238,
      2890,
      281,
      3121,
      273,
      4554,
      351,
      2176,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of initializing an executor instance with specific configuration."
  },
  {
    "line": 186,
    "text": ") -> Tuple[BaseStrategy, BaseExecutor]:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of resetting common infrastructure for an executor.",
    "confidence": 0.5,
    "tokens": [
      8,
      4613,
      309,
      29291,
      58,
      14881,
      13290,
      4338,
      11,
      7308,
      23002,
      38409,
      5974
    ],
    "start_token": 261,
    "end_token": 274,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      13259,
      889,
      2219,
      6884,
      329,
      281,
      3121,
      273,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of resetting common infrastructure for an executor."
  },
  {
    "line": 189,
    "text": "    # - typing annotations is not reliable",
    "annotation": "\u2705 Best Practice: Returning a tuple of initialized objects is clear and concise.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      532,
      19720,
      37647,
      318,
      407,
      9314
    ],
    "start_token": 274,
    "end_token": 284,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      46545,
      286,
      23224,
      5563,
      318,
      1598,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a tuple of initialized objects is clear and concise."
  },
  {
    "line": 179,
    "text": "    end_time: Union[pd.Timestamp, str],",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      886,
      62,
      2435,
      25,
      4479,
      58,
      30094,
      13,
      14967,
      27823,
      11,
      965,
      4357
    ],
    "start_token": 284,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 189,
    "text": "    # - typing annotations is not reliable",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      532,
      19720,
      37647,
      318,
      407,
      9314
    ],
    "start_token": 300,
    "end_token": 310,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters."
  },
  {
    "line": 225,
    "text": "    pos_type: str = \"Position\",",
    "annotation": "\u2705 Best Practice: Descriptive variable names improve code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1426,
      62,
      4906,
      25,
      965,
      796,
      366,
      26545,
      1600
    ],
    "start_token": 310,
    "end_token": 322,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2935,
      6519,
      425,
      7885,
      3891,
      2987,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Descriptive variable names improve code readability."
  },
  {
    "line": 236,
    "text": "        closed end time for backtest",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern could be used to identify common backtesting workflows.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4838,
      886,
      640,
      329,
      736,
      9288
    ],
    "start_token": 322,
    "end_token": 335,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      714,
      307,
      973,
      284,
      5911,
      2219,
      736,
      33407,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call pattern could be used to identify common backtesting workflows."
  },
  {
    "line": 236,
    "text": "        closed end time for backtest",
    "annotation": "\ud83e\udde0 ML Signal: Function signature includes parameters that suggest time series data collection for ML training",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4838,
      886,
      640,
      329,
      736,
      9288
    ],
    "start_token": 335,
    "end_token": 348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      3407,
      10007,
      326,
      1950,
      640,
      2168,
      1366,
      4947,
      329,
      10373,
      3047
    ],
    "label": "ml_signal",
    "reason": "Function signature includes parameters that suggest time series data collection for ML training"
  },
  {
    "line": 236,
    "text": "        closed end time for backtest",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4838,
      886,
      640,
      329,
      736,
      9288
    ],
    "start_token": 348,
    "end_token": 361,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability"
  },
  {
    "line": 254,
    "text": "    pos_type : str",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential mutable default argument for `exchange_kwargs` can lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1426,
      62,
      4906,
      1058,
      965
    ],
    "start_token": 361,
    "end_token": 369,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      4517,
      540,
      4277,
      4578,
      329,
      4600,
      1069,
      3803,
      62,
      46265,
      22046,
      63,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential mutable default argument for `exchange_kwargs` can lead to unexpected behavior"
  },
  {
    "line": 268,
    "text": "        end_time,",
    "annotation": "\ud83e\udde0 ML Signal: Yielding trade decisions suggests this function is part of a reinforcement learning pipeline",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      11
    ],
    "start_token": 369,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      575,
      30449,
      3292,
      5370,
      5644,
      428,
      2163,
      318,
      636,
      286,
      257,
      37414,
      4673,
      11523
    ],
    "label": "ml_signal",
    "reason": "Yielding trade decisions suggests this function is part of a reinforcement learning pipeline"
  },
  {
    "line": 265,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Add import statements for List, Tuple, Union, Optional, and BaseTradeDecision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 380,
    "end_token": 384,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      1330,
      6299,
      329,
      7343,
      11,
      309,
      29291,
      11,
      4479,
      11,
      32233,
      11,
      290,
      7308,
      35965,
      10707,
      1166
    ],
    "label": "best_practice",
    "reason": "Add import statements for List, Tuple, Union, Optional, and BaseTradeDecision"
  },
  {
    "line": 295,
    "text": "    -------",
    "annotation": "\u2705 Best Practice: Use __all__ to define the public API of the module",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 384,
    "end_token": 388,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      439,
      834,
      284,
      8160,
      262,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Use __all__ to define the public API of the module"
  }
]
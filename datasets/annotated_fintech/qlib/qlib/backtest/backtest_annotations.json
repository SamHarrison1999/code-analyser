[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Importing annotations from __future__ for forward compatibility with type hints",
    "confidence": 1.0,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      37647,
      422,
      11593,
      37443,
      834,
      329,
      2651,
      17764,
      351,
      2099,
      20269
    ],
    "label": "best_practice",
    "reason": "Importing annotations from __future__ for forward compatibility with type hints"
  },
  {
    "line": 4,
    "text": "from __future__ import annotations",
    "annotation": "\u2705 Best Practice: Grouping standard library imports together",
    "confidence": 1.0,
    "tokens": [
      6738,
      11593,
      37443,
      834,
      1330,
      37647
    ],
    "start_token": 7,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3210,
      5888,
      17944,
      1978
    ],
    "label": "best_practice",
    "reason": "Grouping standard library imports together"
  },
  {
    "line": 6,
    "text": "from typing import Dict, TYPE_CHECKING, Generator, Optional, Tuple, Union, cast",
    "annotation": "\u2705 Best Practice: Grouping third-party library imports together",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      360,
      713,
      11,
      41876,
      62,
      50084,
      2751,
      11,
      35986,
      11,
      32233,
      11,
      309,
      29291,
      11,
      4479,
      11,
      3350
    ],
    "start_token": 13,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      2368,
      12,
      10608,
      5888,
      17944,
      1978
    ],
    "label": "best_practice",
    "reason": "Grouping third-party library imports together"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\u2705 Best Practice: Using TYPE_CHECKING to avoid circular imports and improve performance",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 34,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      41876,
      62,
      50084,
      2751,
      284,
      3368,
      18620,
      17944,
      290,
      2987,
      2854
    ],
    "label": "best_practice",
    "reason": "Using TYPE_CHECKING to avoid circular imports and improve performance"
  },
  {
    "line": 13,
    "text": "if TYPE_CHECKING:",
    "annotation": "\u2705 Best Practice: Grouping third-party library imports together",
    "confidence": 1.0,
    "tokens": [
      361,
      41876,
      62,
      50084,
      2751,
      25
    ],
    "start_token": 34,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      2368,
      12,
      10608,
      5888,
      17944,
      1978
    ],
    "label": "best_practice",
    "reason": "Grouping third-party library imports together"
  },
  {
    "line": 13,
    "text": "if TYPE_CHECKING:",
    "annotation": "\u2705 Best Practice: Relative import for internal module",
    "confidence": 0.5,
    "tokens": [
      361,
      41876,
      62,
      50084,
      2751,
      25
    ],
    "start_token": 40,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45344,
      1330,
      329,
      5387,
      8265
    ],
    "label": "best_practice",
    "reason": "Relative import for internal module"
  },
  {
    "line": 19,
    "text": "from ..utils.time import Freq",
    "annotation": "\u2705 Best Practice: Type alias for readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      6738,
      11485,
      26791,
      13,
      2435,
      1330,
      4848,
      80
    ],
    "start_token": 46,
    "end_token": 54,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      16144,
      329,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type alias for readability and maintainability"
  },
  {
    "line": 19,
    "text": "from ..utils.time import Freq",
    "annotation": "\u2705 Best Practice: Type alias for readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      6738,
      11485,
      26791,
      13,
      2435,
      1330,
      4848,
      80
    ],
    "start_token": 54,
    "end_token": 62,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      16144,
      329,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type alias for readability and maintainability"
  },
  {
    "line": 13,
    "text": "if TYPE_CHECKING:",
    "annotation": "\u2705 Best Practice: Type hints for function parameters and return type improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      361,
      41876,
      62,
      50084,
      2751,
      25
    ],
    "start_token": 62,
    "end_token": 68,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hints for function parameters and return type improve code readability and maintainability."
  },
  {
    "line": 29,
    "text": "    trade_strategy: BaseStrategy,",
    "annotation": "\u2705 Best Practice: Initializing return_value as a dictionary to store results from the loop.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3292,
      62,
      2536,
      4338,
      25,
      7308,
      13290,
      4338,
      11
    ],
    "start_token": 68,
    "end_token": 80,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      1441,
      62,
      8367,
      355,
      257,
      22155,
      284,
      3650,
      2482,
      422,
      262,
      9052,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing return_value as a dictionary to store results from the loop."
  },
  {
    "line": 31,
    "text": ") -> Tuple[PORT_METRIC, INDICATOR_METRIC]:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a data collection loop, which may indicate a pattern of data processing.",
    "confidence": 0.5,
    "tokens": [
      8,
      4613,
      309,
      29291,
      58,
      15490,
      62,
      47123,
      41132,
      11,
      24413,
      2149,
      25633,
      62,
      47123,
      41132,
      5974
    ],
    "start_token": 80,
    "end_token": 97,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1366,
      4947,
      9052,
      11,
      543,
      743,
      7603,
      257,
      3912,
      286,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a data collection loop, which may indicate a pattern of data processing."
  },
  {
    "line": 34,
    "text": "    please refer to the docs of `collect_data_loop`",
    "annotation": "\u2705 Best Practice: Using type casting to ensure the correct type is returned.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3387,
      3522,
      284,
      262,
      34165,
      286,
      4600,
      33327,
      62,
      7890,
      62,
      26268,
      63
    ],
    "start_token": 97,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      13092,
      284,
      4155,
      262,
      3376,
      2099,
      318,
      4504,
      13
    ],
    "label": "best_practice",
    "reason": "Using type casting to ensure the correct type is returned."
  },
  {
    "line": 34,
    "text": "    please refer to the docs of `collect_data_loop`",
    "annotation": "\u2705 Best Practice: Using type casting to ensure the correct type is returned.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3387,
      3522,
      284,
      262,
      34165,
      286,
      4600,
      33327,
      62,
      7890,
      62,
      26268,
      63
    ],
    "start_token": 113,
    "end_token": 129,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2099,
      13092,
      284,
      4155,
      262,
      3376,
      2099,
      318,
      4504,
      13
    ],
    "label": "best_practice",
    "reason": "Using type casting to ensure the correct type is returned."
  },
  {
    "line": 38,
    "text": "    portfolio_dict: PORT_METRIC",
    "annotation": "\u2705 Best Practice: Returning a tuple of the expected types as per the function's type hint.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15320,
      62,
      11600,
      25,
      350,
      9863,
      62,
      47123,
      41132
    ],
    "start_token": 129,
    "end_token": 141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      46545,
      286,
      262,
      2938,
      3858,
      355,
      583,
      262,
      2163,
      338,
      2099,
      9254,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a tuple of the expected types as per the function's type hint."
  },
  {
    "line": 34,
    "text": "    please refer to the docs of `collect_data_loop`",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3387,
      3522,
      284,
      262,
      34165,
      286,
      4600,
      33327,
      62,
      7890,
      62,
      26268,
      63
    ],
    "start_token": 141,
    "end_token": 157,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 63,
    "text": "    ----------",
    "annotation": "\u2705 Best Practice: Resetting the executor and strategy ensures a clean state before starting the loop.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 157,
    "end_token": 162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      262,
      3121,
      273,
      290,
      4811,
      19047,
      257,
      3424,
      1181,
      878,
      3599,
      262,
      9052,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting the executor and strategy ensures a clean state before starting the loop."
  },
  {
    "line": 66,
    "text": "        **NOTE**: This will be applied to the outmost executor's calendar.",
    "annotation": "\ud83e\udde0 ML Signal: Use of tqdm for progress tracking indicates a long-running process, useful for ML model training.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      16580,
      1174,
      25,
      770,
      481,
      307,
      5625,
      284,
      262,
      503,
      1712,
      3121,
      273,
      338,
      11845,
      13
    ],
    "start_token": 162,
    "end_token": 186,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646,
      9217,
      257,
      890,
      12,
      20270,
      1429,
      11,
      4465,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of tqdm for progress tracking indicates a long-running process, useful for ML model training."
  },
  {
    "line": 69,
    "text": "        **NOTE**: This will be applied to the outmost executor's calendar.",
    "annotation": "\ud83e\udde0 ML Signal: Looping until a condition is met is a common pattern in data collection and processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      16580,
      1174,
      25,
      770,
      481,
      307,
      5625,
      284,
      262,
      503,
      1712,
      3121,
      273,
      338,
      11845,
      13
    ],
    "start_token": 186,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6706,
      15816,
      1566,
      257,
      4006,
      318,
      1138,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      4947,
      290,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Looping until a condition is met is a common pattern in data collection and processing."
  },
  {
    "line": 71,
    "text": "    trade_strategy : BaseStrategy",
    "annotation": "\ud83e\udde0 ML Signal: Generating trade decisions in a loop is indicative of iterative decision-making processes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3292,
      62,
      2536,
      4338,
      1058,
      7308,
      13290,
      4338
    ],
    "start_token": 210,
    "end_token": 221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2980,
      803,
      3292,
      5370,
      287,
      257,
      9052,
      318,
      29105,
      286,
      11629,
      876,
      2551,
      12,
      8601,
      7767,
      13
    ],
    "label": "ml_signal",
    "reason": "Generating trade decisions in a loop is indicative of iterative decision-making processes."
  },
  {
    "line": 73,
    "text": "    trade_executor : BaseExecutor",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Yielding from a generator can lead to unexpected behavior if not properly handled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3292,
      62,
      18558,
      38409,
      1058,
      7308,
      23002,
      38409
    ],
    "start_token": 221,
    "end_token": 232,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      575,
      30449,
      422,
      257,
      17301,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      407,
      6105,
      12118,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Yielding from a generator can lead to unexpected behavior if not properly handled."
  },
  {
    "line": 79,
    "text": "    -------",
    "annotation": "\u2705 Best Practice: Using descriptive variable names like `all_executors` improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 232,
    "end_token": 236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      35644,
      7885,
      3891,
      588,
      4600,
      439,
      62,
      18558,
      315,
      669,
      63,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using descriptive variable names like `all_executors` improves code readability."
  },
  {
    "line": 83,
    "text": "    trade_executor.reset(start_time=start_time, end_time=end_time)",
    "annotation": "\u2705 Best Practice: Using `format` for string formatting is more readable and maintainable than concatenation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3292,
      62,
      18558,
      38409,
      13,
      42503,
      7,
      9688,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      8
    ],
    "start_token": 236,
    "end_token": 262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4600,
      18982,
      63,
      329,
      4731,
      33313,
      318,
      517,
      31744,
      290,
      5529,
      540,
      621,
      1673,
      36686,
      341,
      13
    ],
    "label": "best_practice",
    "reason": "Using `format` for string formatting is more readable and maintainable than concatenation."
  },
  {
    "line": 83,
    "text": "    trade_executor.reset(start_time=start_time, end_time=end_time)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Updating a mutable default argument can lead to unexpected behavior if reused.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3292,
      62,
      18558,
      38409,
      13,
      42503,
      7,
      9688,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      8
    ],
    "start_token": 262,
    "end_token": 288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3205,
      38734,
      257,
      4517,
      540,
      4277,
      4578,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      46823,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Updating a mutable default argument can lead to unexpected behavior if reused."
  }
]
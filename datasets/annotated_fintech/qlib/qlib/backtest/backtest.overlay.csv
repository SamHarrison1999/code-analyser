annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing annotations from __future__ for forward compatibility with type hints,"[26486, 227, 6705, 19939, 25, 17267, 278, 37647, 422, 11593, 37443, 834, 329, 2651, 17764, 351, 2099, 20269]",1.0,7,best_practice,2,Importing annotations from __future__ for forward compatibility with type hints,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Grouping standard library imports together,"[26486, 227, 6705, 19939, 25, 4912, 278, 3210, 5888, 17944, 1978]",1.0,13,best_practice,4,Grouping standard library imports together,,7,from __future__ import annotations,"[6738, 11593, 37443, 834, 1330, 37647]"
‚úÖ Best Practice: Grouping third-party library imports together,"[26486, 227, 6705, 19939, 25, 4912, 278, 2368, 12, 10608, 5888, 17944, 1978]",1.0,34,best_practice,6,Grouping third-party library imports together,,13,"from typing import Dict, TYPE_CHECKING, Generator, Optional, Tuple, Union, cast","[6738, 19720, 1330, 360, 713, 11, 41876, 62, 50084, 2751, 11, 35986, 11, 32233, 11, 309, 29291, 11, 4479, 11, 3350]"
‚úÖ Best Practice: Using TYPE_CHECKING to avoid circular imports and improve performance,"[26486, 227, 6705, 19939, 25, 8554, 41876, 62, 50084, 2751, 284, 3368, 18620, 17944, 290, 2987, 2854]",1.0,34,best_practice,12,Using TYPE_CHECKING to avoid circular imports and improve performance,,34,,[]
‚úÖ Best Practice: Grouping third-party library imports together,"[26486, 227, 6705, 19939, 25, 4912, 278, 2368, 12, 10608, 5888, 17944, 1978]",1.0,40,best_practice,13,Grouping third-party library imports together,,34,if TYPE_CHECKING:,"[361, 41876, 62, 50084, 2751, 25]"
‚úÖ Best Practice: Relative import for internal module,"[26486, 227, 6705, 19939, 25, 45344, 1330, 329, 5387, 8265]",0.5,46,best_practice,13,Relative import for internal module,,40,if TYPE_CHECKING:,"[361, 41876, 62, 50084, 2751, 25]"
‚úÖ Best Practice: Type alias for readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 16144, 329, 1100, 1799, 290, 5529, 1799]",1.0,54,best_practice,19,Type alias for readability and maintainability,,46,from ..utils.time import Freq,"[6738, 11485, 26791, 13, 2435, 1330, 4848, 80]"
‚úÖ Best Practice: Type alias for readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 16144, 329, 1100, 1799, 290, 5529, 1799]",1.0,62,best_practice,19,Type alias for readability and maintainability,,54,from ..utils.time import Freq,"[6738, 11485, 26791, 13, 2435, 1330, 4848, 80]"
‚úÖ Best Practice: Type hints for function parameters and return type improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 2163, 10007, 290, 1441, 2099, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,68,best_practice,13,Type hints for function parameters and return type improve code readability and maintainability.,,62,if TYPE_CHECKING:,"[361, 41876, 62, 50084, 2751, 25]"
‚úÖ Best Practice: Initializing return_value as a dictionary to store results from the loop.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 1441, 62, 8367, 355, 257, 22155, 284, 3650, 2482, 422, 262, 9052, 13]",1.0,80,best_practice,29,Initializing return_value as a dictionary to store results from the loop.,,68,"    trade_strategy: BaseStrategy,","[220, 220, 220, 3292, 62, 2536, 4338, 25, 7308, 13290, 4338, 11]"
"üß† ML Signal: Iterating over a data collection loop, which may indicate a pattern of data processing.","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1366, 4947, 9052, 11, 543, 743, 7603, 257, 3912, 286, 1366, 7587, 13]",0.5,97,ml_signal,31,"Iterating over a data collection loop, which may indicate a pattern of data processing.",,80,") -> Tuple[PORT_METRIC, INDICATOR_METRIC]:","[8, 4613, 309, 29291, 58, 15490, 62, 47123, 41132, 11, 24413, 2149, 25633, 62, 47123, 41132, 5974]"
‚úÖ Best Practice: Using type casting to ensure the correct type is returned.,"[26486, 227, 6705, 19939, 25, 8554, 2099, 13092, 284, 4155, 262, 3376, 2099, 318, 4504, 13]",0.5,113,best_practice,34,Using type casting to ensure the correct type is returned.,,97,    please refer to the docs of `collect_data_loop`,"[220, 220, 220, 3387, 3522, 284, 262, 34165, 286, 4600, 33327, 62, 7890, 62, 26268, 63]"
‚úÖ Best Practice: Using type casting to ensure the correct type is returned.,"[26486, 227, 6705, 19939, 25, 8554, 2099, 13092, 284, 4155, 262, 3376, 2099, 318, 4504, 13]",0.5,129,best_practice,34,Using type casting to ensure the correct type is returned.,,113,    please refer to the docs of `collect_data_loop`,"[220, 220, 220, 3387, 3522, 284, 262, 34165, 286, 4600, 33327, 62, 7890, 62, 26268, 63]"
‚úÖ Best Practice: Returning a tuple of the expected types as per the function's type hint.,"[26486, 227, 6705, 19939, 25, 42882, 257, 46545, 286, 262, 2938, 3858, 355, 583, 262, 2163, 338, 2099, 9254, 13]",1.0,141,best_practice,38,Returning a tuple of the expected types as per the function's type hint.,,129,    portfolio_dict: PORT_METRIC,"[220, 220, 220, 15320, 62, 11600, 25, 350, 9863, 62, 47123, 41132]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,157,best_practice,34,Use of type hints for function parameters and return type improves code readability and maintainability.,,141,    please refer to the docs of `collect_data_loop`,"[220, 220, 220, 3387, 3522, 284, 262, 34165, 286, 4600, 33327, 62, 7890, 62, 26268, 63]"
‚úÖ Best Practice: Resetting the executor and strategy ensures a clean state before starting the loop.,"[26486, 227, 6705, 19939, 25, 30027, 889, 262, 3121, 273, 290, 4811, 19047, 257, 3424, 1181, 878, 3599, 262, 9052, 13]",1.0,162,best_practice,63,Resetting the executor and strategy ensures a clean state before starting the loop.,,157,    ----------,"[220, 220, 220, 24200, 438]"
"üß† ML Signal: Use of tqdm for progress tracking indicates a long-running process, useful for ML model training.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 256, 80, 36020, 329, 4371, 9646, 9217, 257, 890, 12, 20270, 1429, 11, 4465, 329, 10373, 2746, 3047, 13]",1.0,186,ml_signal,66,"Use of tqdm for progress tracking indicates a long-running process, useful for ML model training.",,162,        **NOTE**: This will be applied to the outmost executor's calendar.,"[220, 220, 220, 220, 220, 220, 220, 12429, 16580, 1174, 25, 770, 481, 307, 5625, 284, 262, 503, 1712, 3121, 273, 338, 11845, 13]"
üß† ML Signal: Looping until a condition is met is a common pattern in data collection and processing.,"[8582, 100, 254, 10373, 26484, 25, 6706, 15816, 1566, 257, 4006, 318, 1138, 318, 257, 2219, 3912, 287, 1366, 4947, 290, 7587, 13]",1.0,210,ml_signal,69,Looping until a condition is met is a common pattern in data collection and processing.,,186,        **NOTE**: This will be applied to the outmost executor's calendar.,"[220, 220, 220, 220, 220, 220, 220, 12429, 16580, 1174, 25, 770, 481, 307, 5625, 284, 262, 503, 1712, 3121, 273, 338, 11845, 13]"
üß† ML Signal: Generating trade decisions in a loop is indicative of iterative decision-making processes.,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 3292, 5370, 287, 257, 9052, 318, 29105, 286, 11629, 876, 2551, 12, 8601, 7767, 13]",1.0,221,ml_signal,71,Generating trade decisions in a loop is indicative of iterative decision-making processes.,,210,    trade_strategy : BaseStrategy,"[220, 220, 220, 3292, 62, 2536, 4338, 1058, 7308, 13290, 4338]"
‚ö†Ô∏è SAST Risk (Low): Yielding from a generator can lead to unexpected behavior if not properly handled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 575, 30449, 422, 257, 17301, 460, 1085, 284, 10059, 4069, 611, 407, 6105, 12118, 13]",0.5,232,sast_risk,73,Yielding from a generator can lead to unexpected behavior if not properly handled.,Low,221,    trade_executor : BaseExecutor,"[220, 220, 220, 3292, 62, 18558, 38409, 1058, 7308, 23002, 38409]"
‚úÖ Best Practice: Using descriptive variable names like `all_executors` improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 588, 4600, 439, 62, 18558, 315, 669, 63, 19575, 2438, 1100, 1799, 13]",1.0,236,best_practice,79,Using descriptive variable names like `all_executors` improves code readability.,,232,    -------,"[220, 220, 220, 35656]"
‚úÖ Best Practice: Using `format` for string formatting is more readable and maintainable than concatenation.,"[26486, 227, 6705, 19939, 25, 8554, 4600, 18982, 63, 329, 4731, 33313, 318, 517, 31744, 290, 5529, 540, 621, 1673, 36686, 341, 13]",1.0,262,best_practice,83,Using `format` for string formatting is more readable and maintainable than concatenation.,,236,"    trade_executor.reset(start_time=start_time, end_time=end_time)","[220, 220, 220, 3292, 62, 18558, 38409, 13, 42503, 7, 9688, 62, 2435, 28, 9688, 62, 2435, 11, 886, 62, 2435, 28, 437, 62, 2435, 8]"
‚ö†Ô∏è SAST Risk (Low): Updating a mutable default argument can lead to unexpected behavior if reused.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3205, 38734, 257, 4517, 540, 4277, 4578, 460, 1085, 284, 10059, 4069, 611, 46823, 13]",0.5,288,sast_risk,83,Updating a mutable default argument can lead to unexpected behavior if reused.,Low,262,"    trade_executor.reset(start_time=start_time, end_time=end_time)","[220, 220, 220, 3292, 62, 18558, 38409, 13, 42503, 7, 9688, 62, 2435, 28, 9688, 62, 2435, 11, 886, 62, 2435, 28, 437, 62, 2435, 8]"

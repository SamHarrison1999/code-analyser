[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Use of type hints improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints improves code readability and maintainability."
  },
  {
    "line": 5,
    "text": "from qlib.typehint import Literal",
    "annotation": "\u2705 Best Practice: Importing specific classes or functions helps avoid namespace pollution.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      4906,
      71,
      600,
      1330,
      25659,
      1691
    ],
    "start_token": 7,
    "end_token": 17,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      393,
      5499,
      5419,
      3368,
      25745,
      12231,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific classes or functions helps avoid namespace pollution."
  },
  {
    "line": 8,
    "text": "from mlflow.exceptions import MlflowException",
    "annotation": "\ud83e\udde0 ML Signal: Importing mlflow indicates usage of ML experiment tracking.",
    "confidence": 0.5,
    "tokens": [
      6738,
      285,
      1652,
      9319,
      13,
      1069,
      11755,
      1330,
      337,
      1652,
      9319,
      16922
    ],
    "start_token": 17,
    "end_token": 29,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      285,
      1652,
      9319,
      9217,
      8748,
      286,
      10373,
      6306,
      9646,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing mlflow indicates usage of ML experiment tracking."
  },
  {
    "line": 10,
    "text": "from ..log import get_module_logger",
    "annotation": "\u2705 Best Practice: Importing specific classes or functions helps avoid namespace pollution.",
    "confidence": 0.5,
    "tokens": [
      6738,
      11485,
      6404,
      1330,
      651,
      62,
      21412,
      62,
      6404,
      1362
    ],
    "start_token": 29,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      393,
      5499,
      5419,
      3368,
      25745,
      12231,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific classes or functions helps avoid namespace pollution."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Importing specific exceptions allows for more precise error handling.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 39,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      13269,
      3578,
      329,
      517,
      7141,
      4049,
      9041,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific exceptions allows for more precise error handling."
  },
  {
    "line": 17,
    "text": "    This is the `Experiment` class for each experiment being run. The API is designed similar to mlflow.",
    "annotation": "\u2705 Best Practice: Importing specific classes or functions helps avoid namespace pollution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      4600,
      20468,
      3681,
      63,
      1398,
      329,
      1123,
      6306,
      852,
      1057,
      13,
      383,
      7824,
      318,
      3562,
      2092,
      284,
      285,
      1652,
      9319,
      13
    ],
    "start_token": 39,
    "end_token": 66,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      393,
      5499,
      5419,
      3368,
      25745,
      12231,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific classes or functions helps avoid namespace pollution."
  },
  {
    "line": 20,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of a logging utility function promotes consistent logging practices.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 66,
    "end_token": 66,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      18931,
      10361,
      2163,
      21068,
      6414,
      18931,
      6593,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a logging utility function promotes consistent logging practices."
  },
  {
    "line": 22,
    "text": "        self.id = id",
    "annotation": "\ud83e\udde0 ML Signal: Use of a logger suggests tracking of workflow execution details.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      312,
      796,
      4686
    ],
    "start_token": 66,
    "end_token": 78,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      49706,
      5644,
      9646,
      286,
      30798,
      9706,
      3307,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a logger suggests tracking of workflow execution details."
  },
  {
    "line": 24,
    "text": "        self.active_recorder = None  # only one recorder can run each time",
    "annotation": "\u2705 Best Practice: Using a logger instead of print statements is a best practice for production code.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      8344,
      2875,
      796,
      6045,
      220,
      1303,
      691,
      530,
      38156,
      460,
      1057,
      1123,
      640
    ],
    "start_token": 78,
    "end_token": 102,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      49706,
      2427,
      286,
      3601,
      6299,
      318,
      257,
      1266,
      3357,
      329,
      3227,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Using a logger instead of print statements is a best practice for production code."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class docstring provides context and usage pattern for ML model training",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 102,
    "end_token": 102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      2205,
      8841,
      3769,
      4732,
      290,
      8748,
      3912,
      329,
      10373,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Class docstring provides context and usage pattern for ML model training"
  },
  {
    "line": 15,
    "text": "class Experiment:",
    "annotation": "\ud83e\udde0 ML Signal: Constructor method for initializing object attributes",
    "confidence": 1.0,
    "tokens": [
      4871,
      29544,
      25
    ],
    "start_token": 102,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      273,
      2446,
      329,
      4238,
      2890,
      2134,
      12608
    ],
    "label": "ml_signal",
    "reason": "Constructor method for initializing object attributes"
  },
  {
    "line": 17,
    "text": "    This is the `Experiment` class for each experiment being run. The API is designed similar to mlflow.",
    "annotation": "\ud83e\udde0 ML Signal: Storing user or object identifiers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      4600,
      20468,
      3681,
      63,
      1398,
      329,
      1123,
      6306,
      852,
      1057,
      13,
      383,
      7824,
      318,
      3562,
      2092,
      284,
      285,
      1652,
      9319,
      13
    ],
    "start_token": 105,
    "end_token": 132,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2836,
      393,
      2134,
      42814
    ],
    "label": "ml_signal",
    "reason": "Storing user or object identifiers"
  },
  {
    "line": 19,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Initialize attributes in the constructor",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 132,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      12608,
      287,
      262,
      23772
    ],
    "label": "best_practice",
    "reason": "Initialize attributes in the constructor"
  },
  {
    "line": 21,
    "text": "    def __init__(self, id, name):",
    "annotation": "\u2705 Best Practice: Use of a private attribute with a leading underscore",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4686,
      11,
      1438,
      2599
    ],
    "start_token": 136,
    "end_token": 150,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2839,
      11688,
      351,
      257,
      3756,
      44810
    ],
    "label": "best_practice",
    "reason": "Use of a private attribute with a leading underscore"
  },
  {
    "line": 19,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use __repr__ for unambiguous object representation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 150,
    "end_token": 154,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      260,
      1050,
      834,
      329,
      42053,
      29709,
      2134,
      10552
    ],
    "label": "best_practice",
    "reason": "Use __repr__ for unambiguous object representation"
  },
  {
    "line": 21,
    "text": "    def __init__(self, id, name):",
    "annotation": "\u2705 Best Practice: Use format for string formatting for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4686,
      11,
      1438,
      2599
    ],
    "start_token": 154,
    "end_token": 168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      5794,
      329,
      4731,
      33313,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use format for string formatting for better readability"
  },
  {
    "line": 22,
    "text": "        self.id = id",
    "annotation": "\u2705 Best Practice: Use of __str__ method for string representation of objects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      312,
      796,
      4686
    ],
    "start_token": 168,
    "end_token": 180,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      2536,
      834,
      2446,
      329,
      4731,
      10552,
      286,
      5563
    ],
    "label": "best_practice",
    "reason": "Use of __str__ method for string representation of objects"
  },
  {
    "line": 25,
    "text": "        self._default_rec_name = \"abstract_recorder\"",
    "annotation": "\u2705 Best Practice: Use of @property decorator for getter method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      12286,
      62,
      8344,
      62,
      3672,
      796,
      366,
      397,
      8709,
      62,
      8344,
      2875,
      1
    ],
    "start_token": 180,
    "end_token": 202,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for getter method"
  },
  {
    "line": 25,
    "text": "        self._default_rec_name = \"abstract_recorder\"",
    "annotation": "\ud83e\udde0 ML Signal: Method to gather and return structured information about an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      12286,
      62,
      8344,
      62,
      3672,
      796,
      366,
      397,
      8709,
      62,
      8344,
      2875,
      1
    ],
    "start_token": 202,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      284,
      6431,
      290,
      1441,
      20793,
      1321,
      546,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method to gather and return structured information about an object"
  },
  {
    "line": 28,
    "text": "        return \"{name}(id={id}, info={info})\".format(name=self.__class__.__name__, id=self.id, info=self.info)",
    "annotation": "\u2705 Best Practice: Use of descriptive keys in the dictionary for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      45144,
      3672,
      92,
      7,
      312,
      34758,
      312,
      5512,
      7508,
      34758,
      10951,
      30072,
      1911,
      18982,
      7,
      3672,
      28,
      944,
      13,
      834,
      4871,
      834,
      13,
      834,
      3672,
      834,
      11,
      4686,
      28,
      944,
      13,
      312,
      11,
      7508,
      28,
      944,
      13,
      10951,
      8
    ],
    "start_token": 224,
    "end_token": 271,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      8251,
      287,
      262,
      22155,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of descriptive keys in the dictionary for clarity"
  },
  {
    "line": 30,
    "text": "    def __str__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Accessing object attributes to populate a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2536,
      834,
      7,
      944,
      2599
    ],
    "start_token": 271,
    "end_token": 281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2134,
      12608,
      284,
      48040,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Accessing object attributes to populate a dictionary"
  },
  {
    "line": 33,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Use of conditional expression for concise code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 281,
    "end_token": 286,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26340,
      5408,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of conditional expression for concise code"
  },
  {
    "line": 34,
    "text": "    def info(self):",
    "annotation": "\ud83e\udde0 ML Signal: Collecting keys from a dictionary to form a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      7508,
      7,
      944,
      2599
    ],
    "start_token": 286,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      8251,
      422,
      257,
      22155,
      284,
      1296,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Collecting keys from a dictionary to form a list"
  },
  {
    "line": 34,
    "text": "    def info(self):",
    "annotation": "\ud83e\udde0 ML Signal: Use of optional parameters with default values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7508,
      7,
      944,
      2599
    ],
    "start_token": 294,
    "end_token": 302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11902,
      10007,
      351,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of optional parameters with default values"
  },
  {
    "line": 49,
    "text": "        ----------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method not implemented, potential for misuse if not overridden",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 302,
    "end_token": 311,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      407,
      9177,
      11,
      2785,
      329,
      29169,
      611,
      407,
      23170,
      4651
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method not implemented, potential for misuse if not overridden"
  },
  {
    "line": 50,
    "text": "        recorder_id : str",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      312,
      1058,
      965
    ],
    "start_token": 311,
    "end_token": 323,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and parameters"
  },
  {
    "line": 58,
    "text": "        -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, indicating it's intended to be overridden, but could lead to runtime errors if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 323,
    "end_token": 331,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      12739,
      340,
      338,
      5292,
      284,
      307,
      23170,
      4651,
      11,
      475,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, indicating it's intended to be overridden, but could lead to runtime errors if not handled properly"
  },
  {
    "line": 59,
    "text": "        An active recorder.",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation of parameters and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1052,
      4075,
      38156,
      13
    ],
    "start_token": 331,
    "end_token": 342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation of parameters and return value"
  },
  {
    "line": 70,
    "text": "            the status the recorder to be set with when ending (SCHEDULED, RUNNING, FINISHED, FAILED).",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, indicating it's a placeholder and should be implemented",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      3722,
      262,
      38156,
      284,
      307,
      900,
      351,
      618,
      7464,
      357,
      50,
      3398,
      1961,
      6239,
      1961,
      11,
      32494,
      15871,
      11,
      33642,
      18422,
      1961,
      11,
      9677,
      4146,
      1961,
      737
    ],
    "start_token": 342,
    "end_token": 381,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      12739,
      340,
      338,
      257,
      46076,
      290,
      815,
      307,
      9177
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, indicating it's a placeholder and should be implemented"
  },
  {
    "line": 71,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of **kwargs indicates flexible function inputs, common in dynamic data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 381,
    "end_token": 389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      9217,
      12846,
      2163,
      17311,
      11,
      2219,
      287,
      8925,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of **kwargs indicates flexible function inputs, common in dynamic data processing"
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method not implemented, potential for misuse if called without implementation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 389,
    "end_token": 389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      407,
      9177,
      11,
      2785,
      329,
      29169,
      611,
      1444,
      1231,
      7822
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method not implemented, potential for misuse if called without implementation"
  },
  {
    "line": 83,
    "text": "        Returns",
    "annotation": "\u2705 Best Practice: Use of NotImplementedError to indicate abstract method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 389,
    "end_token": 397,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      12531,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of NotImplementedError to indicate abstract method"
  },
  {
    "line": 83,
    "text": "        Returns",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method and its parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 397,
    "end_token": 405,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method and its parameters"
  },
  {
    "line": 91,
    "text": "        Get a pandas DataFrame of records that fit the search criteria of the experiment.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3497,
      257,
      19798,
      292,
      6060,
      19778,
      286,
      4406,
      326,
      4197,
      262,
      2989,
      9987,
      286,
      262,
      6306,
      13
    ],
    "start_token": 405,
    "end_token": 429,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 92,
    "text": "        Inputs are the search criteria user want to apply.",
    "annotation": "\u2705 Best Practice: Docstring provides detailed explanation of method behavior and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      23412,
      82,
      389,
      262,
      2989,
      9987,
      2836,
      765,
      284,
      4174,
      13
    ],
    "start_token": 429,
    "end_token": 447,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      7468,
      286,
      2446,
      4069,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed explanation of method behavior and parameters"
  },
  {
    "line": 127,
    "text": "",
    "annotation": "\u2705 Best Practice: Checks for both recorder_id and recorder_name being None",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 447,
    "end_token": 447,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47719,
      329,
      1111,
      38156,
      62,
      312,
      290,
      38156,
      62,
      3672,
      852,
      6045
    ],
    "label": "best_practice",
    "reason": "Checks for both recorder_id and recorder_name being None"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\u2705 Best Practice: Returns active recorder if available",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 447,
    "end_token": 447,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16409,
      4075,
      38156,
      611,
      1695
    ],
    "label": "best_practice",
    "reason": "Returns active recorder if available"
  },
  {
    "line": 130,
    "text": "                * no id or name specified, create a new recorder.",
    "annotation": "\u2705 Best Practice: Assigns default recorder name if none provided",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      645,
      4686,
      393,
      1438,
      7368,
      11,
      2251,
      257,
      649,
      38156,
      13
    ],
    "start_token": 447,
    "end_token": 474,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      570,
      82,
      4277,
      38156,
      1438,
      611,
      4844,
      2810
    ],
    "label": "best_practice",
    "reason": "Assigns default recorder name if none provided"
  },
  {
    "line": 132,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on 'create' flag",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 474,
    "end_token": 474,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      705,
      17953,
      6,
      6056
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on 'create' flag"
  },
  {
    "line": 137,
    "text": "                * no id or name specified, return the active recorder.",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on 'create' flag",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      645,
      4686,
      393,
      1438,
      7368,
      11,
      1441,
      262,
      4075,
      38156,
      13
    ],
    "start_token": 474,
    "end_token": 501,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      705,
      17953,
      6,
      6056
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on 'create' flag"
  },
  {
    "line": 141,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on 'is_new' and 'start' flags",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 501,
    "end_token": 501,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      705,
      271,
      62,
      3605,
      6,
      290,
      705,
      9688,
      6,
      9701
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on 'is_new' and 'start' flags"
  },
  {
    "line": 145,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Use of try-except block to handle exceptions and ensure robustness.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 501,
    "end_token": 509,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1949,
      12,
      16341,
      2512,
      284,
      5412,
      13269,
      290,
      4155,
      12373,
      1108,
      13
    ],
    "label": "best_practice",
    "reason": "Use of try-except block to handle exceptions and ensure robustness."
  },
  {
    "line": 147,
    "text": "        recorder_id : str",
    "annotation": "\u2705 Best Practice: Check for both recorder_id and recorder_name being None to set a default name.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      312,
      1058,
      965
    ],
    "start_token": 509,
    "end_token": 521,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      1111,
      38156,
      62,
      312,
      290,
      38156,
      62,
      3672,
      852,
      6045,
      284,
      900,
      257,
      4277,
      1438,
      13
    ],
    "label": "best_practice",
    "reason": "Check for both recorder_id and recorder_name being None to set a default name."
  },
  {
    "line": 153,
    "text": "        start : boolean",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of retrieving an object by ID or name.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      1058,
      25131
    ],
    "start_token": 521,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      50122,
      281,
      2134,
      416,
      4522,
      393,
      1438,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of retrieving an object by ID or name."
  },
  {
    "line": 155,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching a broad exception type like ValueError without specific handling.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 531,
    "end_token": 531,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      257,
      3154,
      6631,
      2099,
      588,
      11052,
      12331,
      1231,
      2176,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching a broad exception type like ValueError without specific handling."
  },
  {
    "line": 157,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Ensure recorder_name is set to a default if not provided.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 531,
    "end_token": 539,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      38156,
      62,
      3672,
      318,
      900,
      284,
      257,
      4277,
      611,
      407,
      2810,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure recorder_name is set to a default if not provided."
  },
  {
    "line": 158,
    "text": "        A recorder object.",
    "annotation": "\ud83e\udde0 ML Signal: Logging information about object creation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      38156,
      2134,
      13
    ],
    "start_token": 539,
    "end_token": 550,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      546,
      2134,
      6282,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging information about object creation."
  },
  {
    "line": 158,
    "text": "        A recorder object.",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of creating a new object when retrieval fails.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      38156,
      2134,
      13
    ],
    "start_token": 550,
    "end_token": 561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4441,
      257,
      649,
      2134,
      618,
      45069,
      10143,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of creating a new object when retrieval fails."
  },
  {
    "line": 158,
    "text": "        A recorder object.",
    "annotation": "\u2705 Best Practice: Use of docstring to describe method functionality, parameters, and exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      38156,
      2134,
      13
    ],
    "start_token": 561,
    "end_token": 572,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      2446,
      11244,
      11,
      10007,
      11,
      290,
      13269
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe method functionality, parameters, and exceptions"
  },
  {
    "line": 175,
    "text": "            self.active_recorder.start_run()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      8344,
      2875,
      13,
      9688,
      62,
      5143,
      3419
    ],
    "start_token": 572,
    "end_token": 594,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 177,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants for data types, which could indicate a pattern in data handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 594,
    "end_token": 594,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      329,
      1366,
      3858,
      11,
      543,
      714,
      7603,
      257,
      3912,
      287,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of constants for data types, which could indicate a pattern in data handling"
  },
  {
    "line": 180,
    "text": "        Method for getting or creating a recorder. It will try to first get a valid recorder, if exception occurs, it will",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11789,
      329,
      1972,
      393,
      4441,
      257,
      38156,
      13,
      632,
      481,
      1949,
      284,
      717,
      651,
      257,
      4938,
      38156,
      11,
      611,
      6631,
      8833,
      11,
      340,
      481
    ],
    "start_token": 594,
    "end_token": 625,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The method is not implemented, which could lead to runtime errors if called.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 625,
    "end_token": 625,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      2446,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The method is not implemented, which could lead to runtime errors if called."
  },
  {
    "line": 199,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 625,
    "end_token": 625,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 200,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Call to superclass initializer ensures proper inheritance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 625,
    "end_token": 633,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      4238,
      7509,
      19047,
      1774,
      24155
    ],
    "label": "best_practice",
    "reason": "Call to superclass initializer ensures proper inheritance"
  },
  {
    "line": 202,
    "text": "        recorder_id :",
    "annotation": "\ud83e\udde0 ML Signal: Storing URI for MLflow tracking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      312,
      1058
    ],
    "start_token": 633,
    "end_token": 644,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      43975,
      329,
      10373,
      11125,
      9646
    ],
    "label": "ml_signal",
    "reason": "Storing URI for MLflow tracking"
  },
  {
    "line": 204,
    "text": "        recorder_name :",
    "annotation": "\ud83e\udde0 ML Signal: Default recorder name for MLflow experiments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      3672,
      1058
    ],
    "start_token": 644,
    "end_token": 655,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      38156,
      1438,
      329,
      10373,
      11125,
      10256
    ],
    "label": "ml_signal",
    "reason": "Default recorder name for MLflow experiments"
  },
  {
    "line": 206,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating MLflow client for tracking",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 655,
    "end_token": 655,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      10373,
      11125,
      5456,
      329,
      9646
    ],
    "label": "ml_signal",
    "reason": "Instantiating MLflow client for tracking"
  },
  {
    "line": 204,
    "text": "        recorder_name :",
    "annotation": "\u2705 Best Practice: Implementing __repr__ for better debugging and logging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      3672,
      1058
    ],
    "start_token": 655,
    "end_token": 666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      260,
      1050,
      834,
      329,
      1365,
      28769,
      290,
      18931
    ],
    "label": "best_practice",
    "reason": "Implementing __repr__ for better debugging and logging"
  },
  {
    "line": 206,
    "text": "",
    "annotation": "\u2705 Best Practice: Using format for string formatting improves readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 666,
    "end_token": 666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5794,
      329,
      4731,
      33313,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Using format for string formatting improves readability"
  },
  {
    "line": 207,
    "text": "        Returns",
    "annotation": "\ud83e\udde0 ML Signal: Logging experiment start can be used to track experiment lifecycle events.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 666,
    "end_token": 674,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      6306,
      923,
      460,
      307,
      973,
      284,
      2610,
      6306,
      3868,
      47510,
      2995,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging experiment start can be used to track experiment lifecycle events."
  },
  {
    "line": 210,
    "text": "            The searched recorder",
    "annotation": "\u2705 Best Practice: Use of default values for parameters improves function flexibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      16499,
      38156
    ],
    "start_token": 674,
    "end_token": 688,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      10007,
      19575,
      2163,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default values for parameters improves function flexibility."
  },
  {
    "line": 213,
    "text": "        ------",
    "annotation": "\u2705 Best Practice: Conditional logic for resuming or creating a recorder enhances functionality.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40103
    ],
    "start_token": 688,
    "end_token": 696,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      9156,
      329,
      581,
      12595,
      393,
      4441,
      257,
      38156,
      32479,
      11244,
      13
    ],
    "label": "best_practice",
    "reason": "Conditional logic for resuming or creating a recorder enhances functionality."
  },
  {
    "line": 217,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Tracking active recorder can be useful for monitoring and managing experiment states.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 696,
    "end_token": 696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      4075,
      38156,
      460,
      307,
      4465,
      329,
      9904,
      290,
      11149,
      6306,
      2585,
      13
    ],
    "label": "ml_signal",
    "reason": "Tracking active recorder can be useful for monitoring and managing experiment states."
  },
  {
    "line": 219,
    "text": "    RT_L = \"list\"  # return type list",
    "annotation": "\ud83e\udde0 ML Signal: Starting a recorder run is a key event in experiment management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11923,
      62,
      43,
      796,
      366,
      4868,
      1,
      220,
      1303,
      1441,
      2099,
      1351
    ],
    "start_token": 696,
    "end_token": 711,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17962,
      257,
      38156,
      1057,
      318,
      257,
      1994,
      1785,
      287,
      6306,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Starting a recorder run is a key event in experiment management."
  },
  {
    "line": 221,
    "text": "    def list_recorders(",
    "annotation": "\ud83e\udde0 ML Signal: Returning the active recorder allows for further interaction and monitoring.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1351,
      62,
      8344,
      6361,
      7
    ],
    "start_token": 711,
    "end_token": 720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      262,
      4075,
      38156,
      3578,
      329,
      2252,
      10375,
      290,
      9904,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning the active recorder allows for further interaction and monitoring."
  },
  {
    "line": 218,
    "text": "    RT_D = \"dict\"  # return type dict",
    "annotation": "\u2705 Best Practice: Check if active_recorder is not None before calling end_run",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      11923,
      62,
      35,
      796,
      366,
      11600,
      1,
      220,
      1303,
      1441,
      2099,
      8633
    ],
    "start_token": 720,
    "end_token": 735,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4075,
      62,
      8344,
      2875,
      318,
      407,
      6045,
      878,
      4585,
      886,
      62,
      5143
    ],
    "label": "best_practice",
    "reason": "Check if active_recorder is not None before calling end_run"
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call on an object attribute",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 735,
    "end_token": 735,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      319,
      281,
      2134,
      11688
    ],
    "label": "ml_signal",
    "reason": "Method call on an object attribute"
  },
  {
    "line": 222,
    "text": "        self, rtype: Literal[\"dict\", \"list\"] = RT_D, **flt_kwargs",
    "annotation": "\ud83e\udde0 ML Signal: Setting an object attribute to None",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11,
      374,
      4906,
      25,
      25659,
      1691,
      14692,
      11600,
      1600,
      366,
      4868,
      8973,
      796,
      11923,
      62,
      35,
      11,
      12429,
      69,
      2528,
      62,
      46265,
      22046
    ],
    "start_token": 735,
    "end_token": 766,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      281,
      2134,
      11688,
      284,
      6045
    ],
    "label": "ml_signal",
    "reason": "Setting an object attribute to None"
  },
  {
    "line": 221,
    "text": "    def list_recorders(",
    "annotation": "\u2705 Best Practice: Use of default parameter value for flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1351,
      62,
      8344,
      6361,
      7
    ],
    "start_token": 766,
    "end_token": 775,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value for flexibility"
  },
  {
    "line": 223,
    "text": "    ) -> Union[List[Recorder], Dict[str, Recorder]]:",
    "annotation": "\u2705 Best Practice: Check for None to assign a default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      4479,
      58,
      8053,
      58,
      6690,
      2875,
      4357,
      360,
      713,
      58,
      2536,
      11,
      3311,
      2875,
      60,
      5974
    ],
    "start_token": 775,
    "end_token": 796,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      8333,
      257,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Check for None to assign a default value"
  },
  {
    "line": 226,
    "text": "        If user want to use the method `R.list_recorders()`, please refer to the related API document in `QlibRecorder`.",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of MLflowRecorder with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1002,
      2836,
      765,
      284,
      779,
      262,
      2446,
      4600,
      49,
      13,
      4868,
      62,
      8344,
      6361,
      3419,
      47671,
      3387,
      3522,
      284,
      262,
      3519,
      7824,
      3188,
      287,
      4600,
      48,
      8019,
      6690,
      2875,
      44646
    ],
    "start_token": 796,
    "end_token": 833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      10373,
      11125,
      6690,
      2875,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Instantiation of MLflowRecorder with specific parameters"
  },
  {
    "line": 227,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning an instance of a recorder object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 833,
    "end_token": 833,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      281,
      4554,
      286,
      257,
      38156,
      2134
    ],
    "label": "ml_signal",
    "reason": "Returning an instance of a recorder object"
  },
  {
    "line": 233,
    "text": "        -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 833,
    "end_token": 841,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 239,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of MLflow client to get a run by ID",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 841,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10373,
      11125,
      5456,
      284,
      651,
      257,
      1057,
      416,
      4522
    ],
    "label": "ml_signal",
    "reason": "Usage of MLflow client to get a run by ID"
  },
  {
    "line": 240,
    "text": "        raise NotImplementedError(f\"Please implement the `list_recorders` method.\")",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of MLflowRecorder with a run",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      8344,
      6361,
      63,
      2446,
      19570
    ],
    "start_token": 849,
    "end_token": 876,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      10373,
      11125,
      6690,
      2875,
      351,
      257,
      1057
    ],
    "label": "ml_signal",
    "reason": "Instantiation of MLflowRecorder with a run"
  },
  {
    "line": 245,
    "text": "    Use mlflow to implement Experiment.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic ValueError without specific error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5765,
      285,
      1652,
      9319,
      284,
      3494,
      29544,
      13
    ],
    "start_token": 876,
    "end_token": 887,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      11052,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic ValueError without specific error handling"
  },
  {
    "line": 250,
    "text": "        self._uri = uri",
    "annotation": "\u2705 Best Practice: Logging a warning message for potential non-unique recorder names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      9900,
      796,
      2956,
      72
    ],
    "start_token": 887,
    "end_token": 900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      257,
      6509,
      3275,
      329,
      2785,
      1729,
      12,
      34642,
      38156,
      3891
    ],
    "label": "best_practice",
    "reason": "Logging a warning message for potential non-unique recorder names"
  },
  {
    "line": 254,
    "text": "    def __repr__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Listing recorders to find one by name",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      260,
      1050,
      834,
      7,
      944,
      2599
    ],
    "start_token": 900,
    "end_token": 911,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      278,
      1700,
      364,
      284,
      1064,
      530,
      416,
      1438
    ],
    "label": "ml_signal",
    "reason": "Listing recorders to find one by name"
  },
  {
    "line": 259,
    "text": "        # Get or create recorder",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic ValueError without specific error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3497,
      393,
      2251,
      38156
    ],
    "start_token": 911,
    "end_token": 923,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      11052,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic ValueError without specific error handling"
  },
  {
    "line": 254,
    "text": "    def __repr__(self):",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the method's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      260,
      1050,
      834,
      7,
      944,
      2599
    ],
    "start_token": 923,
    "end_token": 934,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the method's purpose and parameters."
  },
  {
    "line": 256,
    "text": "",
    "annotation": "\u2705 Best Practice: Use kwargs.get with a default value to handle missing keys gracefully.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 934,
    "end_token": 934,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      479,
      86,
      22046,
      13,
      1136,
      351,
      257,
      4277,
      1988,
      284,
      5412,
      4814,
      8251,
      11542,
      2759,
      13
    ],
    "label": "best_practice",
    "reason": "Use kwargs.get with a default value to handle missing keys gracefully."
  },
  {
    "line": 258,
    "text": "        logger.info(f\"Experiment {self.id} starts running ...\")",
    "annotation": "\u2705 Best Practice: Use kwargs.get with a default value to handle missing keys gracefully.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      20468,
      3681,
      1391,
      944,
      13,
      312,
      92,
      4940,
      2491,
      35713,
      8
    ],
    "start_token": 934,
    "end_token": 958,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      479,
      86,
      22046,
      13,
      1136,
      351,
      257,
      4277,
      1988,
      284,
      5412,
      4814,
      8251,
      11542,
      2759,
      13
    ],
    "label": "best_practice",
    "reason": "Use kwargs.get with a default value to handle missing keys gracefully."
  },
  {
    "line": 260,
    "text": "        if recorder_name is None:",
    "annotation": "\u2705 Best Practice: Use kwargs.get with a default value to handle missing keys gracefully.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      38156,
      62,
      3672,
      318,
      6045,
      25
    ],
    "start_token": 958,
    "end_token": 972,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      479,
      86,
      22046,
      13,
      1136,
      351,
      257,
      4277,
      1988,
      284,
      5412,
      4814,
      8251,
      11542,
      2759,
      13
    ],
    "label": "best_practice",
    "reason": "Use kwargs.get with a default value to handle missing keys gracefully."
  },
  {
    "line": 261,
    "text": "            recorder_name = self._default_rec_name",
    "annotation": "\u2705 Best Practice: Use kwargs.get to handle missing keys gracefully.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      3672,
      796,
      2116,
      13557,
      12286,
      62,
      8344,
      62,
      3672
    ],
    "start_token": 972,
    "end_token": 994,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      479,
      86,
      22046,
      13,
      1136,
      284,
      5412,
      4814,
      8251,
      11542,
      2759,
      13
    ],
    "label": "best_practice",
    "reason": "Use kwargs.get to handle missing keys gracefully."
  },
  {
    "line": 264,
    "text": "            recorder, _ = self._get_or_create_rec(recorder_id=recorder_id, recorder_name=recorder_name)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a client method to search records, indicating interaction with a data source.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      11,
      4808,
      796,
      2116,
      13557,
      1136,
      62,
      273,
      62,
      17953,
      62,
      8344,
      7,
      8344,
      2875,
      62,
      312,
      28,
      8344,
      2875,
      62,
      312,
      11,
      38156,
      62,
      3672,
      28,
      8344,
      2875,
      62,
      3672,
      8
    ],
    "start_token": 994,
    "end_token": 1038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      5456,
      2446,
      284,
      2989,
      4406,
      11,
      12739,
      10375,
      351,
      257,
      1366,
      2723,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a client method to search records, indicating interaction with a data source."
  },
  {
    "line": 265,
    "text": "        # create a new recorder",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for large data retrieval with high max_results value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2251,
      257,
      649,
      38156
    ],
    "start_token": 1038,
    "end_token": 1050,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      1588,
      1366,
      45069,
      351,
      1029,
      3509,
      62,
      43420,
      1988,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for large data retrieval with high max_results value."
  },
  {
    "line": 260,
    "text": "        if recorder_name is None:",
    "annotation": "\u2705 Best Practice: Use of assert for input validation ensures that at least one argument is provided.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      38156,
      62,
      3672,
      318,
      6045,
      25
    ],
    "start_token": 1050,
    "end_token": 1064,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      19047,
      326,
      379,
      1551,
      530,
      4578,
      318,
      2810,
      13
    ],
    "label": "best_practice",
    "reason": "Use of assert for input validation ensures that at least one argument is provided."
  },
  {
    "line": 261,
    "text": "            recorder_name = self._default_rec_name",
    "annotation": "\u2705 Best Practice: Assert statement provides a clear error message for invalid input.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      3672,
      796,
      2116,
      13557,
      12286,
      62,
      8344,
      62,
      3672
    ],
    "start_token": 1064,
    "end_token": 1086,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      2643,
      3769,
      257,
      1598,
      4049,
      3275,
      329,
      12515,
      5128,
      13
    ],
    "label": "best_practice",
    "reason": "Assert statement provides a clear error message for invalid input."
  },
  {
    "line": 268,
    "text": "        # Set up active recorder",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a client method to delete a run by ID.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5345,
      510,
      4075,
      38156
    ],
    "start_token": 1086,
    "end_token": 1098,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      5456,
      2446,
      284,
      12233,
      257,
      1057,
      416,
      4522,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a client method to delete a run by ID."
  },
  {
    "line": 271,
    "text": "        self.active_recorder.start_run()",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving a recorder by name before deletion.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      5275,
      62,
      8344,
      2875,
      13,
      9688,
      62,
      5143,
      3419
    ],
    "start_token": 1098,
    "end_token": 1116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      257,
      38156,
      416,
      1438,
      878,
      39948,
      13
    ],
    "label": "ml_signal",
    "reason": "Retrieving a recorder by name before deletion."
  },
  {
    "line": 273,
    "text": "        return self.active_recorder",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a client method to delete a run by recorder object.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5275,
      62,
      8344,
      2875
    ],
    "start_token": 1116,
    "end_token": 1130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      5456,
      2446,
      284,
      12233,
      257,
      1057,
      416,
      38156,
      2134,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a client method to delete a run by recorder object."
  },
  {
    "line": 275,
    "text": "    def end(self, recorder_status=Recorder.STATUS_S):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can mask other issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      886,
      7,
      944,
      11,
      38156,
      62,
      13376,
      28,
      6690,
      2875,
      13,
      35744,
      2937,
      62,
      50,
      2599
    ],
    "start_token": 1130,
    "end_token": 1150,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      9335,
      584,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can mask other issues."
  },
  {
    "line": 280,
    "text": "    def create_recorder(self, recorder_name=None):",
    "annotation": "\u2705 Best Practice: Constants should be defined in uppercase to distinguish them from variables.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2251,
      62,
      8344,
      2875,
      7,
      944,
      11,
      38156,
      62,
      3672,
      28,
      14202,
      2599
    ],
    "start_token": 1150,
    "end_token": 1167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      5447,
      287,
      334,
      39921,
      589,
      284,
      15714,
      606,
      422,
      9633,
      13
    ],
    "label": "best_practice",
    "reason": "Constants should be defined in uppercase to distinguish them from variables."
  },
  {
    "line": 282,
    "text": "            recorder_name = self._default_rec_name",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation for the function and its parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      38156,
      62,
      3672,
      796,
      2116,
      13557,
      12286,
      62,
      8344,
      62,
      3672
    ],
    "start_token": 1167,
    "end_token": 1189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      329,
      262,
      2163,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation for the function and its parameters"
  },
  {
    "line": 295,
    "text": "        assert (",
    "annotation": "\ud83e\udde0 ML Signal: Usage of search_runs method indicates interaction with MLflow for experiment tracking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      357
    ],
    "start_token": 1189,
    "end_token": 1198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2989,
      62,
      48381,
      2446,
      9217,
      10375,
      351,
      10373,
      11125,
      329,
      6306,
      9646
    ],
    "label": "ml_signal",
    "reason": "Usage of search_runs method indicates interaction with MLflow for experiment tracking"
  },
  {
    "line": 303,
    "text": "            except MlflowException as mlflow_exp:",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of MLflowRecorder suggests a pattern of wrapping MLflow runs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      337,
      1652,
      9319,
      16922,
      355,
      285,
      1652,
      9319,
      62,
      11201,
      25
    ],
    "start_token": 1198,
    "end_token": 1221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      10373,
      11125,
      6690,
      2875,
      5644,
      257,
      3912,
      286,
      27074,
      10373,
      11125,
      4539
    ],
    "label": "ml_signal",
    "reason": "Instantiation of MLflowRecorder suggests a pattern of wrapping MLflow runs"
  },
  {
    "line": 308,
    "text": "            logger.warning(",
    "annotation": "\u2705 Best Practice: Using dict and zip to create a dictionary from two lists",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7
    ],
    "start_token": 1221,
    "end_token": 1236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      8633,
      290,
      19974,
      284,
      2251,
      257,
      22155,
      422,
      734,
      8341
    ],
    "label": "best_practice",
    "reason": "Using dict and zip to create a dictionary from two lists"
  },
  {
    "line": 310,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of NotImplementedError for unsupported types is safe but could be more informative",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1236,
    "end_token": 1248,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      329,
      24222,
      3858,
      318,
      3338,
      475,
      714,
      307,
      517,
      30304
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of NotImplementedError for unsupported types is safe but could be more informative"
  }
]
[
  {
    "line": 19,
    "text": "from ..utils import fill_placeholder, flatten_dict, class_casting, get_date_by_shift",
    "annotation": "\u2705 Best Practice: Use of a logger for the module allows for better tracking and debugging of the code execution.",
    "confidence": 1.0,
    "tokens": [
      6738,
      11485,
      26791,
      1330,
      6070,
      62,
      5372,
      13829,
      11,
      27172,
      268,
      62,
      11600,
      11,
      1398,
      62,
      19913,
      11,
      651,
      62,
      4475,
      62,
      1525,
      62,
      30846
    ],
    "start_token": 0,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      49706,
      329,
      262,
      8265,
      3578,
      329,
      1365,
      9646,
      290,
      28769,
      286,
      262,
      2438,
      9706,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a logger for the module allows for better tracking and debugging of the code execution."
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\u2705 Best Practice: Class variables should be initialized with a default value or in the constructor.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 25,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      9633,
      815,
      307,
      23224,
      351,
      257,
      4277,
      1988,
      393,
      287,
      262,
      23772,
      13
    ],
    "label": "best_practice",
    "reason": "Class variables should be initialized with a default value or in the constructor."
  },
  {
    "line": 26,
    "text": "logger = get_module_logger(\"workflow\", logging.INFO)",
    "annotation": "\u2705 Best Practice: Class variables should be initialized with a default value or in the constructor.",
    "confidence": 1.0,
    "tokens": [
      6404,
      1362,
      796,
      651,
      62,
      21412,
      62,
      6404,
      1362,
      7203,
      1818,
      11125,
      1600,
      18931,
      13,
      10778,
      8
    ],
    "start_token": 25,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      9633,
      815,
      307,
      23224,
      351,
      257,
      4277,
      1988,
      393,
      287,
      262,
      23772,
      13
    ],
    "label": "best_practice",
    "reason": "Class variables should be initialized with a default value or in the constructor."
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of class method to encapsulate behavior related to the class",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 42,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      2446,
      284,
      32652,
      5039,
      4069,
      3519,
      284,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of class method to encapsulate behavior related to the class"
  },
  {
    "line": 30,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Initialize an empty list to collect path components",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 42,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      281,
      6565,
      1351,
      284,
      2824,
      3108,
      6805
    ],
    "label": "best_practice",
    "reason": "Initialize an empty list to collect path components"
  },
  {
    "line": 32,
    "text": "    backtest in a certain format.",
    "annotation": "\u2705 Best Practice: Check if class attribute is not None before appending",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      736,
      9288,
      287,
      257,
      1728,
      5794,
      13
    ],
    "start_token": 46,
    "end_token": 56,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      1398,
      11688,
      318,
      407,
      6045,
      878,
      598,
      1571
    ],
    "label": "best_practice",
    "reason": "Check if class attribute is not None before appending"
  },
  {
    "line": 35,
    "text": "    artifact_path = None",
    "annotation": "\u2705 Best Practice: Check if the provided path is not None before appending",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      24127,
      62,
      6978,
      796,
      6045
    ],
    "start_token": 56,
    "end_token": 64,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      2810,
      3108,
      318,
      407,
      6045,
      878,
      598,
      1571
    ],
    "label": "best_practice",
    "reason": "Check if the provided path is not None before appending"
  },
  {
    "line": 36,
    "text": "    depend_cls = None  # the dependant class of the record; the record will depend on the results generated by",
    "annotation": "\u2705 Best Practice: Use of join to construct a path string from list elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4745,
      62,
      565,
      82,
      796,
      6045,
      220,
      1303,
      262,
      4745,
      415,
      1398,
      286,
      262,
      1700,
      26,
      262,
      1700,
      481,
      4745,
      319,
      262,
      2482,
      7560,
      416
    ],
    "start_token": 64,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4654,
      284,
      5678,
      257,
      3108,
      4731,
      422,
      1351,
      4847
    ],
    "label": "best_practice",
    "reason": "Use of join to construct a path string from list elements"
  },
  {
    "line": 36,
    "text": "    depend_cls = None  # the dependant class of the record; the record will depend on the results generated by",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4745,
      62,
      565,
      82,
      796,
      6045,
      220,
      1303,
      262,
      4745,
      415,
      1398,
      286,
      262,
      1700,
      26,
      262,
      1700,
      481,
      4745,
      319,
      262,
      2482,
      7560,
      416
    ],
    "start_token": 92,
    "end_token": 120,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and usage."
  },
  {
    "line": 41,
    "text": "        names = []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self.get_path() indicates a pattern of retrieving paths, which can be useful for ML models to understand method interactions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 120,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      13,
      1136,
      62,
      6978,
      3419,
      9217,
      257,
      3912,
      286,
      50122,
      13532,
      11,
      543,
      460,
      307,
      4465,
      329,
      10373,
      4981,
      284,
      1833,
      2446,
      12213,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of self.get_path() indicates a pattern of retrieving paths, which can be useful for ML models to understand method interactions."
  },
  {
    "line": 44,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly checking for an empty string improves code readability and intent.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 130,
    "end_token": 130,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      10627,
      329,
      281,
      6565,
      4731,
      19575,
      2438,
      1100,
      1799,
      290,
      6824,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly checking for an empty string improves code readability and intent."
  },
  {
    "line": 45,
    "text": "        if path is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self.recorder.save_objects() shows a pattern of saving objects, which can be useful for ML models to understand method interactions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3108,
      318,
      407,
      6045,
      25
    ],
    "start_token": 130,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      13,
      8344,
      2875,
      13,
      21928,
      62,
      48205,
      3419,
      2523,
      257,
      3912,
      286,
      8914,
      5563,
      11,
      543,
      460,
      307,
      4465,
      329,
      10373,
      4981,
      284,
      1833,
      2446,
      12213,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of self.recorder.save_objects() shows a pattern of saving objects, which can be useful for ML models to understand method interactions."
  },
  {
    "line": 45,
    "text": "        if path is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of constructor to initialize object state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3108,
      318,
      407,
      6045,
      25
    ],
    "start_token": 143,
    "end_token": 156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      23772,
      284,
      41216,
      2134,
      1181
    ],
    "label": "ml_signal",
    "reason": "Use of constructor to initialize object state"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of private attribute naming convention",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 156,
    "end_token": 156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2839,
      11688,
      19264,
      9831
    ],
    "label": "ml_signal",
    "reason": "Use of private attribute naming convention"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @property decorator for encapsulation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 156,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      32652,
      1741
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for encapsulation"
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose and usage.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 156,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose and usage."
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for None before using an attribute to avoid unexpected errors.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 156,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      878,
      1262,
      281,
      11688,
      284,
      3368,
      10059,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Check for None before using an attribute to avoid unexpected errors."
  },
  {
    "line": 51,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without context can make debugging harder.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 156,
    "end_token": 164,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      4732,
      460,
      787,
      28769,
      7069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without context can make debugging harder."
  },
  {
    "line": 52,
    "text": "        It behaves the same as self.recorder.save_objects.",
    "annotation": "\u2705 Best Practice: Return the attribute directly if it exists.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      632,
      39341,
      262,
      976,
      355,
      2116,
      13,
      8344,
      2875,
      13,
      21928,
      62,
      48205,
      13
    ],
    "start_token": 164,
    "end_token": 185,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      262,
      11688,
      3264,
      611,
      340,
      7160,
      13
    ],
    "label": "best_practice",
    "reason": "Return the attribute directly if it exists."
  },
  {
    "line": 52,
    "text": "        It behaves the same as self.recorder.save_objects.",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      632,
      39341,
      262,
      976,
      355,
      2116,
      13,
      8344,
      2875,
      13,
      21928,
      62,
      48205,
      13
    ],
    "start_token": 185,
    "end_token": 206,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and parameters"
  },
  {
    "line": 61,
    "text": "        self._recorder = recorder",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      8344,
      2875,
      796,
      38156
    ],
    "start_token": 206,
    "end_token": 219,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 219,
    "end_token": 219,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters."
  },
  {
    "line": 78,
    "text": "        ------",
    "annotation": "\ud83e\udde0 ML Signal: Usage of try-except block indicates error handling pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40103
    ],
    "start_token": 219,
    "end_token": 227,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1949,
      12,
      16341,
      2512,
      9217,
      4049,
      9041,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of try-except block indicates error handling pattern."
  },
  {
    "line": 82,
    "text": "    def load(self, name: str, parents: bool = True):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide unexpected errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      7,
      944,
      11,
      1438,
      25,
      965,
      11,
      3397,
      25,
      20512,
      796,
      6407,
      2599
    ],
    "start_token": 227,
    "end_token": 245,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      10059,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide unexpected errors."
  },
  {
    "line": 85,
    "text": "        But it is an easier interface because users don't have to care about `get_path` and `artifact_path`",
    "annotation": "\ud83e\udde0 ML Signal: Use of context manager pattern with class_casting.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      887,
      340,
      318,
      281,
      4577,
      7071,
      780,
      2985,
      836,
      470,
      423,
      284,
      1337,
      546,
      4600,
      1136,
      62,
      6978,
      63,
      290,
      4600,
      433,
      29660,
      62,
      6978,
      63
    ],
    "start_token": 245,
    "end_token": 278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4732,
      4706,
      3912,
      351,
      1398,
      62,
      19913,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of context manager pattern with class_casting."
  },
  {
    "line": 93,
    "text": "            Each recorder has different `artifact_path`.",
    "annotation": "\u2705 Best Practice: Returning an empty list as a default value is clear and avoids potential NoneType errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5501,
      38156,
      468,
      1180,
      4600,
      433,
      29660,
      62,
      6978,
      44646
    ],
    "start_token": 278,
    "end_token": 299,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      281,
      6565,
      1351,
      355,
      257,
      4277,
      1988,
      318,
      1598,
      290,
      30940,
      2785,
      6045,
      6030,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Returning an empty list as a default value is clear and avoids potential NoneType errors."
  },
  {
    "line": 111,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Initialize variables at the start of the function for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 299,
    "end_token": 307,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      379,
      262,
      923,
      286,
      262,
      2163,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize variables at the start of the function for better readability and maintainability"
  },
  {
    "line": 114,
    "text": "",
    "annotation": "\u2705 Best Practice: Check if 'dirn' is in 'artifacts' before accessing it",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 307,
    "end_token": 307,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      15908,
      77,
      6,
      318,
      287,
      705,
      50179,
      6,
      878,
      22534,
      340
    ],
    "label": "best_practice",
    "reason": "Check if 'dirn' is in 'artifacts' before accessing it"
  },
  {
    "line": 116,
    "text": "        ------",
    "annotation": "\ud83e\udde0 ML Signal: Caching pattern for performance optimization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40103
    ],
    "start_token": 307,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      8103,
      3912,
      329,
      2854,
      23989
    ],
    "label": "ml_signal",
    "reason": "Caching pattern for performance optimization"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of items",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 315,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of items"
  },
  {
    "line": 123,
    "text": "        Check if the records is properly generated and saved.",
    "annotation": "\u2705 Best Practice: Use helper function to avoid code duplication",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6822,
      611,
      262,
      4406,
      318,
      6105,
      7560,
      290,
      7448,
      13
    ],
    "start_token": 315,
    "end_token": 332,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      31904,
      2163,
      284,
      3368,
      2438,
      50124
    ],
    "label": "best_practice",
    "reason": "Use helper function to avoid code duplication"
  },
  {
    "line": 125,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without a message",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 332,
    "end_token": 332,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      257,
      3275
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without a message"
  },
  {
    "line": 130,
    "text": "        ----------",
    "annotation": "\u2705 Best Practice: Use context manager for resource management",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 332,
    "end_token": 341,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4732,
      4706,
      329,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use context manager for resource management"
  },
  {
    "line": 131,
    "text": "        include_self : bool",
    "annotation": "\ud83e\udde0 ML Signal: Conditional method call based on class type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2291,
      62,
      944,
      1058,
      20512
    ],
    "start_token": 341,
    "end_token": 353,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2446,
      869,
      1912,
      319,
      1398,
      2099
    ],
    "label": "ml_signal",
    "reason": "Conditional method call based on class type"
  },
  {
    "line": 127,
    "text": "        - checking if the final files is completed",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and functionality of the class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      10627,
      611,
      262,
      2457,
      3696,
      318,
      5668
    ],
    "start_token": 353,
    "end_token": 368,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      11244,
      286,
      262,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and functionality of the class."
  },
  {
    "line": 131,
    "text": "        include_self : bool",
    "annotation": "\u2705 Best Practice: Call the superclass's __init__ method to ensure proper initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2291,
      62,
      944,
      1058,
      20512
    ],
    "start_token": 368,
    "end_token": 380,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      284,
      4155,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Call the superclass's __init__ method to ensure proper initialization"
  },
  {
    "line": 133,
    "text": "        parents : bool",
    "annotation": "\ud83e\udde0 ML Signal: Storing model and dataset as instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3397,
      1058,
      20512
    ],
    "start_token": 380,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2746,
      290,
      27039,
      355,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Storing model and dataset as instance variables"
  },
  {
    "line": 135,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing model and dataset as instance variables",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 390,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2746,
      290,
      27039,
      355,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Storing model and dataset as instance variables"
  },
  {
    "line": 136,
    "text": "        Raise",
    "annotation": "\u2705 Best Practice: Use of context manager for resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35123
    ],
    "start_token": 390,
    "end_token": 398,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4732,
      4706,
      329,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use of context manager for resource management"
  },
  {
    "line": 138,
    "text": "        FileNotFoundError",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to store parameters for function call",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9220,
      3673,
      21077,
      12331
    ],
    "start_token": 398,
    "end_token": 409,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3650,
      10007,
      329,
      2163,
      869
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to store parameters for function call"
  },
  {
    "line": 141,
    "text": "        if include_self:",
    "annotation": "\ud83e\udde0 ML Signal: Use of dynamic function call with unpacked parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2291,
      62,
      944,
      25
    ],
    "start_token": 409,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8925,
      2163,
      869,
      351,
      8593,
      6021,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of dynamic function call with unpacked parameters"
  },
  {
    "line": 144,
    "text": "            artifacts = {}",
    "annotation": "\u2705 Best Practice: Handling specific exception to modify parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20316,
      796,
      23884
    ],
    "start_token": 421,
    "end_token": 435,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      49500,
      2176,
      6631,
      284,
      13096,
      10007
    ],
    "label": "best_practice",
    "reason": "Handling specific exception to modify parameters"
  },
  {
    "line": 148,
    "text": "                    artifacts[dirn] = self.recorder.list_artifacts(dirn)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging exception message may expose sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20316,
      58,
      15908,
      77,
      60,
      796,
      2116,
      13,
      8344,
      2875,
      13,
      4868,
      62,
      50179,
      7,
      15908,
      77,
      8
    ],
    "start_token": 435,
    "end_token": 472,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6631,
      3275,
      743,
      15651,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging exception message may expose sensitive information"
  },
  {
    "line": 148,
    "text": "                    artifacts[dirn] = self.recorder.list_artifacts(dirn)",
    "annotation": "\ud83e\udde0 ML Signal: Use of model prediction on a dataset",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20316,
      58,
      15908,
      77,
      60,
      796,
      2116,
      13,
      8344,
      2875,
      13,
      4868,
      62,
      50179,
      7,
      15908,
      77,
      8
    ],
    "start_token": 472,
    "end_token": 509,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2746,
      17724,
      319,
      257,
      27039
    ],
    "label": "ml_signal",
    "reason": "Use of model prediction on a dataset"
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling prediction results as a pandas Series",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 509,
    "end_token": 509,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      17724,
      2482,
      355,
      257,
      19798,
      292,
      7171
    ],
    "label": "ml_signal",
    "reason": "Handling prediction results as a pandas Series"
  },
  {
    "line": 152,
    "text": "                ps = self.get_path(item).split(\"/\")",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of Series to DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26692,
      796,
      2116,
      13,
      1136,
      62,
      6978,
      7,
      9186,
      737,
      35312,
      7203,
      14,
      4943
    ],
    "start_token": 509,
    "end_token": 538,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      7171,
      284,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Conversion of Series to DataFrame"
  },
  {
    "line": 155,
    "text": "                    raise FileNotFoundError",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'save' method does not handle file overwriting securely",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      9220,
      3673,
      21077,
      12331
    ],
    "start_token": 538,
    "end_token": 562,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      21928,
      6,
      2446,
      857,
      407,
      5412,
      2393,
      6993,
      799,
      278,
      30835
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'save' method does not handle file overwriting securely"
  },
  {
    "line": 156,
    "text": "        if parents:",
    "annotation": "\u2705 Best Practice: Use of logging for tracking important events",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3397,
      25
    ],
    "start_token": 562,
    "end_token": 572,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18931,
      329,
      9646,
      1593,
      2995
    ],
    "label": "best_practice",
    "reason": "Use of logging for tracking important events"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of pprint for better readability of output",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 572,
    "end_token": 572,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      4798,
      329,
      1365,
      1100,
      1799,
      286,
      5072
    ],
    "label": "best_practice",
    "reason": "Use of pprint for better readability of output"
  },
  {
    "line": 162,
    "text": "class SignalRecord(RecordTemp):",
    "annotation": "\ud83e\udde0 ML Signal: Displaying the first few prediction results",
    "confidence": 0.5,
    "tokens": [
      4871,
      26484,
      23739,
      7,
      23739,
      30782,
      2599
    ],
    "start_token": 572,
    "end_token": 579,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16531,
      278,
      262,
      717,
      1178,
      17724,
      2482
    ],
    "label": "ml_signal",
    "reason": "Displaying the first few prediction results"
  },
  {
    "line": 164,
    "text": "    This is the Signal Record class that generates the signal prediction. This class inherits the ``RecordTemp`` class.",
    "annotation": "\ud83e\udde0 ML Signal: Checking if dataset is of a specific type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      26484,
      13266,
      1398,
      326,
      18616,
      262,
      6737,
      17724,
      13,
      770,
      1398,
      10639,
      896,
      262,
      7559,
      23739,
      30782,
      15506,
      1398,
      13
    ],
    "start_token": 579,
    "end_token": 605,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      27039,
      318,
      286,
      257,
      2176,
      2099
    ],
    "label": "ml_signal",
    "reason": "Checking if dataset is of a specific type"
  },
  {
    "line": 166,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Generating labels for a specific dataset type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 605,
    "end_token": 605,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2980,
      803,
      14722,
      329,
      257,
      2176,
      27039,
      2099
    ],
    "label": "ml_signal",
    "reason": "Generating labels for a specific dataset type"
  },
  {
    "line": 168,
    "text": "        super().__init__(recorder=recorder)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'save' method does not handle file overwriting securely",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      8344,
      2875,
      28,
      8344,
      2875,
      8
    ],
    "start_token": 605,
    "end_token": 624,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      21928,
      6,
      2446,
      857,
      407,
      5412,
      2393,
      6993,
      799,
      278,
      30835
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'save' method does not handle file overwriting securely"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose of the method",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 624,
    "end_token": 624,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2446
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose of the method"
  },
  {
    "line": 162,
    "text": "class SignalRecord(RecordTemp):",
    "annotation": "\ud83e\udde0 ML Signal: Returning a list of model-related filenames could indicate a pattern of model file management",
    "confidence": 0.5,
    "tokens": [
      4871,
      26484,
      23739,
      7,
      23739,
      30782,
      2599
    ],
    "start_token": 624,
    "end_token": 631,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1351,
      286,
      2746,
      12,
      5363,
      1226,
      268,
      1047,
      714,
      7603,
      257,
      3912,
      286,
      2746,
      2393,
      4542
    ],
    "label": "ml_signal",
    "reason": "Returning a list of model-related filenames could indicate a pattern of model file management"
  },
  {
    "line": 164,
    "text": "    This is the Signal Record class that generates the signal prediction. This class inherits the ``RecordTemp`` class.",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      26484,
      13266,
      1398,
      326,
      18616,
      262,
      6737,
      17724,
      13,
      770,
      1398,
      10639,
      896,
      262,
      7559,
      23739,
      30782,
      15506,
      1398,
      13
    ],
    "start_token": 631,
    "end_token": 657,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 165,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 657,
    "end_token": 661,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility"
  },
  {
    "line": 167,
    "text": "    def __init__(self, model=None, dataset=None, recorder=None):",
    "annotation": "\u2705 Best Practice: Explicit call to superclass initializer for proper inheritance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      2746,
      28,
      14202,
      11,
      27039,
      28,
      14202,
      11,
      38156,
      28,
      14202,
      2599
    ],
    "start_token": 661,
    "end_token": 683,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      869,
      284,
      2208,
      4871,
      4238,
      7509,
      329,
      1774,
      24155
    ],
    "label": "best_practice",
    "reason": "Explicit call to superclass initializer for proper inheritance"
  },
  {
    "line": 180,
    "text": "                # The argument number is not right",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exception without handling it properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      4578,
      1271,
      318,
      407,
      826
    ],
    "start_token": 683,
    "end_token": 705,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      6631,
      1231,
      9041,
      340,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exception without handling it properly"
  },
  {
    "line": 184,
    "text": "            except AttributeError as e:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if the result is a dictionary before saving",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      3460,
      4163,
      12331,
      355,
      304,
      25
    ],
    "start_token": 705,
    "end_token": 723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      262,
      1255,
      318,
      257,
      22155,
      878,
      8914
    ],
    "label": "ml_signal",
    "reason": "Checking if the result is a dictionary before saving"
  },
  {
    "line": 187,
    "text": "                logger.warning(f\"Exception: {e}\")",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      16922,
      25,
      1391,
      68,
      92,
      4943
    ],
    "start_token": 723,
    "end_token": 750,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability."
  },
  {
    "line": 193,
    "text": "        pred = self.model.predict(self.dataset)",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2747,
      796,
      2116,
      13,
      19849,
      13,
      79,
      17407,
      7,
      944,
      13,
      19608,
      292,
      316,
      8
    ],
    "start_token": 750,
    "end_token": 772,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      12531,
      5050,
      318,
      257,
      922,
      3357,
      284,
      4605,
      7822,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses."
  },
  {
    "line": 196,
    "text": "        self.save(**{\"pred.pkl\": pred})",
    "annotation": "\u2705 Best Practice: Class variables should be defined at the top of the class for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21928,
      7,
      1174,
      4895,
      28764,
      13,
      79,
      41582,
      1298,
      2747,
      30072
    ],
    "start_token": 772,
    "end_token": 792,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      9633,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Class variables should be defined at the top of the class for better readability."
  },
  {
    "line": 198,
    "text": "        logger.info(",
    "annotation": "\u2705 Best Practice: Class variables should be defined at the top of the class for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7
    ],
    "start_token": 792,
    "end_token": 803,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      9633,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Class variables should be defined at the top of the class for better readability."
  },
  {
    "line": 199,
    "text": "            f\"Signal record 'pred.pkl' has been saved as the artifact of the Experiment {self.recorder.experiment_id}\"",
    "annotation": "\u2705 Best Practice: Use of super() to initialize the parent class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      11712,
      282,
      1700,
      705,
      28764,
      13,
      79,
      41582,
      6,
      468,
      587,
      7448,
      355,
      262,
      24127,
      286,
      262,
      29544,
      1391,
      944,
      13,
      8344,
      2875,
      13,
      23100,
      3681,
      62,
      312,
      36786
    ],
    "start_token": 803,
    "end_token": 845,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of super() to initialize the parent class"
  },
  {
    "line": 203,
    "text": "        pprint(pred.head(5))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'calc_long_short_prec' handles unexpected data types or values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      4798,
      7,
      28764,
      13,
      2256,
      7,
      20,
      4008
    ],
    "start_token": 845,
    "end_token": 861,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      9948,
      66,
      62,
      6511,
      62,
      19509,
      62,
      3866,
      66,
      6,
      17105,
      10059,
      1366,
      3858,
      393,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'calc_long_short_prec' handles unexpected data types or values."
  },
  {
    "line": 205,
    "text": "        if isinstance(self.dataset, DatasetH):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'calc_ic' handles unexpected data types or values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      944,
      13,
      19608,
      292,
      316,
      11,
      16092,
      292,
      316,
      39,
      2599
    ],
    "start_token": 861,
    "end_token": 883,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      9948,
      66,
      62,
      291,
      6,
      17105,
      10059,
      1366,
      3858,
      393,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'calc_ic' handles unexpected data types or values."
  },
  {
    "line": 205,
    "text": "        if isinstance(self.dataset, DatasetH):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if 'ic.std()' is zero.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      944,
      13,
      19608,
      292,
      316,
      11,
      16092,
      292,
      316,
      39,
      2599
    ],
    "start_token": 883,
    "end_token": 905,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      705,
      291,
      13,
      19282,
      3419,
      6,
      318,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if 'ic.std()' is zero."
  },
  {
    "line": 213,
    "text": "class ACRecordTemp(RecordTemp):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if 'ric.std()' is zero.",
    "confidence": 0.5,
    "tokens": [
      4871,
      7125,
      23739,
      30782,
      7,
      23739,
      30782,
      2599
    ],
    "start_token": 905,
    "end_token": 913,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      705,
      1173,
      13,
      19282,
      3419,
      6,
      318,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if 'ric.std()' is zero."
  },
  {
    "line": 216,
    "text": "    def __init__(self, recorder, skip_existing=False):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'calc_long_short_return' handles unexpected data types or values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      38156,
      11,
      14267,
      62,
      25687,
      28,
      25101,
      2599
    ],
    "start_token": 913,
    "end_token": 931,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      9948,
      66,
      62,
      6511,
      62,
      19509,
      62,
      7783,
      6,
      17105,
      10059,
      1366,
      3858,
      393,
      3815,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'calc_long_short_return' handles unexpected data types or values."
  },
  {
    "line": 222,
    "text": "        if self.skip_existing:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if 'long_short_r.std()' is zero.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      48267,
      62,
      25687,
      25
    ],
    "start_token": 931,
    "end_token": 945,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      705,
      6511,
      62,
      19509,
      62,
      81,
      13,
      19282,
      3419,
      6,
      318,
      6632,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if 'long_short_r.std()' is zero."
  },
  {
    "line": 234,
    "text": "            logger.warning(\"The dependent data does not exists. Generation skipped.\")",
    "annotation": "\ud83e\udde0 ML Signal: Logging metrics can be used to track model performance over time.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7203,
      464,
      10795,
      1366,
      857,
      407,
      7160,
      13,
      16588,
      26684,
      19570
    ],
    "start_token": 945,
    "end_token": 970,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      20731,
      460,
      307,
      973,
      284,
      2610,
      2746,
      2854,
      625,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging metrics can be used to track model performance over time."
  },
  {
    "line": 234,
    "text": "            logger.warning(\"The dependent data does not exists. Generation skipped.\")",
    "annotation": "\ud83e\udde0 ML Signal: Saving objects can be used to track model outputs and states.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7203,
      464,
      10795,
      1366,
      857,
      407,
      7160,
      13,
      16588,
      26684,
      19570
    ],
    "start_token": 970,
    "end_token": 995,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      34689,
      5563,
      460,
      307,
      973,
      284,
      2610,
      2746,
      23862,
      290,
      2585,
      13
    ],
    "label": "ml_signal",
    "reason": "Saving objects can be used to track model outputs and states."
  },
  {
    "line": 238,
    "text": "            self.save(**artifact_dict)",
    "annotation": "\u2705 Best Practice: Use 'pprint' for better readability of the printed metrics.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21928,
      7,
      1174,
      433,
      29660,
      62,
      11600,
      8
    ],
    "start_token": 995,
    "end_token": 1016,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      381,
      22272,
      6,
      329,
      1365,
      1100,
      1799,
      286,
      262,
      10398,
      20731,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'pprint' for better readability of the printed metrics."
  },
  {
    "line": 231,
    "text": "        try:",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a list of filenames, indicating potential file handling or data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 1016,
    "end_token": 1025,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1351,
      286,
      1226,
      268,
      1047,
      11,
      12739,
      2785,
      2393,
      9041,
      393,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Method returning a list of filenames, indicating potential file handling or data processing"
  },
  {
    "line": 233,
    "text": "        except FileNotFoundError:",
    "annotation": "\ud83e\udde0 ML Signal: Returning a hardcoded list of filenames, which may indicate specific data processing tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      9220,
      3673,
      21077,
      12331,
      25
    ],
    "start_token": 1025,
    "end_token": 1038,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1327,
      40976,
      1351,
      286,
      1226,
      268,
      1047,
      11,
      543,
      743,
      7603,
      2176,
      1366,
      7587,
      8861
    ],
    "label": "ml_signal",
    "reason": "Returning a hardcoded list of filenames, which may indicate specific data processing tasks"
  },
  {
    "line": 238,
    "text": "            self.save(**artifact_dict)",
    "annotation": "\u2705 Best Practice: Class-level constants should be defined at the top of the class for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21928,
      7,
      1174,
      433,
      29660,
      62,
      11600,
      8
    ],
    "start_token": 1038,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12,
      5715,
      38491,
      815,
      307,
      5447,
      379,
      262,
      1353,
      286,
      262,
      1398,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Class-level constants should be defined at the top of the class for better readability."
  },
  {
    "line": 240,
    "text": "",
    "annotation": "\u2705 Best Practice: Defining dependencies as class attributes can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1059,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      3191,
      20086,
      355,
      1398,
      12608,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Defining dependencies as class attributes can improve code readability and maintainability."
  },
  {
    "line": 240,
    "text": "",
    "annotation": "\u2705 Best Practice: Constructor should initialize all attributes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1059,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      28407,
      273,
      815,
      41216,
      477,
      12608
    ],
    "label": "best_practice",
    "reason": "Constructor should initialize all attributes"
  },
  {
    "line": 242,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass constructor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1059,
    "end_token": 1067,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      23772
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass constructor"
  },
  {
    "line": 244,
    "text": "        The caller method will save the results to the recorder.",
    "annotation": "\ud83e\udde0 ML Signal: Storing configuration parameters for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      24955,
      2446,
      481,
      3613,
      262,
      2482,
      284,
      262,
      38156,
      13
    ],
    "start_token": 1067,
    "end_token": 1085,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8398,
      10007,
      329,
      1568,
      779
    ],
    "label": "ml_signal",
    "reason": "Storing configuration parameters for later use"
  },
  {
    "line": 246,
    "text": "        raise NotImplementedError(f\"Please implement the `_generate` method\")",
    "annotation": "\ud83e\udde0 ML Signal: Storing configuration parameters for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      62,
      8612,
      378,
      63,
      2446,
      4943
    ],
    "start_token": 1085,
    "end_token": 1111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8398,
      10007,
      329,
      1568,
      779
    ],
    "label": "ml_signal",
    "reason": "Storing configuration parameters for later use"
  },
  {
    "line": 246,
    "text": "        raise NotImplementedError(f\"Please implement the `_generate` method\")",
    "annotation": "\ud83e\udde0 ML Signal: Storing configuration parameters for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      62,
      8612,
      378,
      63,
      2446,
      4943
    ],
    "start_token": 1111,
    "end_token": 1137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8398,
      10007,
      329,
      1568,
      779
    ],
    "label": "ml_signal",
    "reason": "Storing configuration parameters for later use"
  },
  {
    "line": 252,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1137,
    "end_token": 1141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 255,
    "text": "    depend_cls = SignalRecord",
    "annotation": "\u2705 Best Practice: Loading default data when no input is provided.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4745,
      62,
      565,
      82,
      796,
      26484,
      23739
    ],
    "start_token": 1141,
    "end_token": 1151,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12320,
      4277,
      1366,
      618,
      645,
      5128,
      318,
      2810,
      13
    ],
    "label": "best_practice",
    "reason": "Loading default data when no input is provided."
  },
  {
    "line": 258,
    "text": "        super().__init__(recorder=recorder)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logging of sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      8344,
      2875,
      28,
      8344,
      2875,
      8
    ],
    "start_token": 1151,
    "end_token": 1170,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      18931,
      286,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logging of sensitive information."
  },
  {
    "line": 259,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of information coefficient (IC) and rank IC.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1170,
    "end_token": 1170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1321,
      35381,
      357,
      2149,
      8,
      290,
      4279,
      12460,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of information coefficient (IC) and rank IC."
  },
  {
    "line": 265,
    "text": "        metrics = {",
    "annotation": "\u2705 Best Practice: Use of a dictionary to store metrics for better organization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20731,
      796,
      1391
    ],
    "start_token": 1170,
    "end_token": 1180,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      20731,
      329,
      1365,
      4009,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to store metrics for better organization."
  },
  {
    "line": 268,
    "text": "            \"Rank IC\": ric.mean(),",
    "annotation": "\u2705 Best Practice: Use of a dictionary to store objects for better organization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      27520,
      12460,
      1298,
      12410,
      13,
      32604,
      22784
    ],
    "start_token": 1180,
    "end_token": 1199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      5563,
      329,
      1365,
      4009,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to store objects for better organization."
  },
  {
    "line": 276,
    "text": "        metrics.update(",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of long-short and long-average returns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20731,
      13,
      19119,
      7
    ],
    "start_token": 1199,
    "end_token": 1210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      890,
      12,
      19509,
      290,
      890,
      12,
      23913,
      5860,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of long-short and long-average returns."
  },
  {
    "line": 289,
    "text": "        self.save(**objects)",
    "annotation": "\u2705 Best Practice: Logging metrics for tracking and analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      21928,
      7,
      1174,
      48205,
      8
    ],
    "start_token": 1210,
    "end_token": 1224,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      20731,
      329,
      9646,
      290,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Logging metrics for tracking and analysis."
  },
  {
    "line": 291,
    "text": "",
    "annotation": "\u2705 Best Practice: Pretty printing for better readability of output.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1224,
    "end_token": 1224,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20090,
      13570,
      329,
      1365,
      1100,
      1799,
      286,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Pretty printing for better readability of output."
  },
  {
    "line": 286,
    "text": "            }",
    "annotation": "\ud83e\udde0 ML Signal: Method returns a list of file paths based on a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1224,
    "end_token": 1236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      5860,
      257,
      1351,
      286,
      2393,
      13532,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Method returns a list of file paths based on a condition"
  },
  {
    "line": 288,
    "text": "        self.recorder.log_metrics(**metrics)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic affects the returned list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      8344,
      2875,
      13,
      6404,
      62,
      4164,
      10466,
      7,
      1174,
      4164,
      10466,
      8
    ],
    "start_token": 1236,
    "end_token": 1257,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      10975,
      262,
      4504,
      1351
    ],
    "label": "ml_signal",
    "reason": "Conditional logic affects the returned list"
  },
  {
    "line": 290,
    "text": "        pprint(metrics)",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic list extension based on object state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      4798,
      7,
      4164,
      10466,
      8
    ],
    "start_token": 1257,
    "end_token": 1270,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      1351,
      7552,
      1912,
      319,
      2134,
      1181
    ],
    "label": "ml_signal",
    "reason": "Dynamic list extension based on object state"
  },
  {
    "line": 291,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicit return of the list for clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1270,
    "end_token": 1270,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      262,
      1351,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicit return of the list for clarity"
  },
  {
    "line": 298,
    "text": "    This is the Signal Analysis Record class that generates the analysis results such as IC and IR.",
    "annotation": "\u2705 Best Practice: Class-level constants improve readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      26484,
      14691,
      13266,
      1398,
      326,
      18616,
      262,
      3781,
      2482,
      884,
      355,
      12460,
      290,
      14826,
      13
    ],
    "start_token": 1270,
    "end_token": 1291,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12,
      5715,
      38491,
      2987,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Class-level constants improve readability and maintainability."
  },
  {
    "line": 300,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly defining dependencies improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1291,
    "end_token": 1295,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      16215,
      20086,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly defining dependencies improves code readability and maintainability."
  },
  {
    "line": 324,
    "text": "        ic, ric = calc_ic(pred.iloc[:, 0], label.iloc[:, self.label_col])",
    "annotation": "\u2705 Best Practice: Use of super() to initialize the parent class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14158,
      11,
      12410,
      796,
      42302,
      62,
      291,
      7,
      28764,
      13,
      346,
      420,
      58,
      45299,
      657,
      4357,
      6167,
      13,
      346,
      420,
      58,
      45299,
      2116,
      13,
      18242,
      62,
      4033,
      12962
    ],
    "start_token": 1295,
    "end_token": 1330,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of super() to initialize the parent class"
  },
  {
    "line": 347,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Use of deepcopy to avoid mutable default argument issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1330,
    "end_token": 1342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2769,
      30073,
      284,
      3368,
      4517,
      540,
      4277,
      4578,
      2428
    ],
    "label": "best_practice",
    "reason": "Use of deepcopy to avoid mutable default argument issues"
  },
  {
    "line": 358,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of get() method to provide a default value",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1342,
    "end_token": 1342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      651,
      3419,
      2446,
      284,
      2148,
      257,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Use of get() method to provide a default value"
  },
  {
    "line": 361,
    "text": "    This is the Portfolio Analysis Record class that generates the analysis results such as those of backtest. This class inherits the ``RecordTemp`` class.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to get report frequency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      4347,
      13652,
      14691,
      13266,
      1398,
      326,
      18616,
      262,
      3781,
      2482,
      884,
      355,
      883,
      286,
      736,
      9288,
      13,
      770,
      1398,
      10639,
      896,
      262,
      7559,
      23739,
      30782,
      15506,
      1398,
      13
    ],
    "start_token": 1342,
    "end_token": 1376,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      651,
      989,
      8373
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to get report frequency"
  },
  {
    "line": 364,
    "text": "",
    "annotation": "\u2705 Best Practice: Providing a default value when None",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1376,
    "end_token": 1376,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7518,
      2530,
      257,
      4277,
      1988,
      618,
      6045
    ],
    "label": "best_practice",
    "reason": "Providing a default value when None"
  },
  {
    "line": 367,
    "text": "        - The return report and detailed positions of the backtest, returned by `qlib/contrib/evaluate.py:backtest`",
    "annotation": "\u2705 Best Practice: Providing a default value when None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      383,
      1441,
      989,
      290,
      6496,
      6116,
      286,
      262,
      736,
      9288,
      11,
      4504,
      416,
      4600,
      80,
      8019,
      14,
      3642,
      822,
      14,
      49786,
      13,
      9078,
      25,
      1891,
      9288,
      63
    ],
    "start_token": 1376,
    "end_token": 1411,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7518,
      2530,
      257,
      4277,
      1988,
      618,
      6045
    ],
    "label": "best_practice",
    "reason": "Providing a default value when None"
  },
  {
    "line": 370,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensuring risk_analysis_freq is always a list",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1411,
    "end_token": 1411,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      870,
      2526,
      62,
      20930,
      62,
      19503,
      80,
      318,
      1464,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Ensuring risk_analysis_freq is always a list"
  },
  {
    "line": 373,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensuring indicator_analysis_freq is always a list",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1411,
    "end_token": 1411,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      870,
      16916,
      62,
      20930,
      62,
      19503,
      80,
      318,
      1464,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Ensuring indicator_analysis_freq is always a list"
  },
  {
    "line": 375,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Parsing frequency strings into a specific format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1411,
    "end_token": 1420,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23042,
      278,
      8373,
      13042,
      656,
      257,
      2176,
      5794
    ],
    "label": "ml_signal",
    "reason": "Parsing frequency strings into a specific format"
  },
  {
    "line": 379,
    "text": "        indicator_analysis_freq: Union[List, str] = None,",
    "annotation": "\ud83e\udde0 ML Signal: Parsing frequency strings into a specific format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16916,
      62,
      20930,
      62,
      19503,
      80,
      25,
      4479,
      58,
      8053,
      11,
      965,
      60,
      796,
      6045,
      11
    ],
    "start_token": 1420,
    "end_token": 1443,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23042,
      278,
      8373,
      13042,
      656,
      257,
      2176,
      5794
    ],
    "label": "ml_signal",
    "reason": "Parsing frequency strings into a specific format"
  },
  {
    "line": 375,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Initialize variables at the start of the function for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1443,
    "end_token": 1452,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      379,
      262,
      923,
      286,
      262,
      2163,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize variables at the start of the function for clarity."
  },
  {
    "line": 377,
    "text": "        config=None,",
    "annotation": "\ud83e\udde0 ML Signal: Checks for specific configuration keys, indicating feature usage patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4566,
      28,
      14202,
      11
    ],
    "start_token": 1452,
    "end_token": 1463,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      2176,
      8398,
      8251,
      11,
      12739,
      3895,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Checks for specific configuration keys, indicating feature usage patterns."
  },
  {
    "line": 379,
    "text": "        indicator_analysis_freq: Union[List, str] = None,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Freq.parse suggests a pattern of frequency parsing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16916,
      62,
      20930,
      62,
      19503,
      80,
      25,
      4479,
      58,
      8053,
      11,
      965,
      60,
      796,
      6045,
      11
    ],
    "start_token": 1463,
    "end_token": 1486,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4848,
      80,
      13,
      29572,
      5644,
      257,
      3912,
      286,
      8373,
      32096,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Freq.parse suggests a pattern of frequency parsing."
  },
  {
    "line": 381,
    "text": "        skip_existing=False,",
    "annotation": "\u2705 Best Practice: Use f-strings for better readability and performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14267,
      62,
      25687,
      28,
      25101,
      11
    ],
    "start_token": 1486,
    "end_token": 1499,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      37336,
      329,
      1365,
      1100,
      1799,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use f-strings for better readability and performance."
  },
  {
    "line": 383,
    "text": "    ):",
    "annotation": "\ud83e\udde0 ML Signal: Recursively checks for nested configurations, indicating complex configuration structures.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 1499,
    "end_token": 1503,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      1834,
      2280,
      8794,
      329,
      28376,
      25412,
      11,
      12739,
      3716,
      8398,
      8573,
      13
    ],
    "label": "ml_signal",
    "reason": "Recursively checks for nested configurations, indicating complex configuration structures."
  },
  {
    "line": 385,
    "text": "        config[\"strategy\"] : dict",
    "annotation": "\u2705 Best Practice: Use extend to add elements from another list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4566,
      14692,
      2536,
      4338,
      8973,
      1058,
      8633
    ],
    "start_token": 1503,
    "end_token": 1517,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      9117,
      284,
      751,
      4847,
      422,
      1194,
      1351,
      13
    ],
    "label": "best_practice",
    "reason": "Use extend to add elements from another list."
  },
  {
    "line": 387,
    "text": "        config[\"executor\"] : dict",
    "annotation": "\u2705 Best Practice: Return statements should be at the end of the function for clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4566,
      14692,
      18558,
      38409,
      8973,
      1058,
      8633
    ],
    "start_token": 1517,
    "end_token": 1531,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      6299,
      815,
      307,
      379,
      262,
      886,
      286,
      262,
      2163,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Return statements should be at the end of the function for clarity."
  },
  {
    "line": 382,
    "text": "        **kwargs,",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with dynamic arguments using **kwargs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      11
    ],
    "start_token": 1531,
    "end_token": 1542,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      8925,
      7159,
      1262,
      12429,
      46265,
      22046
    ],
    "label": "ml_signal",
    "reason": "Function definition with dynamic arguments using **kwargs"
  },
  {
    "line": 384,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Loading a pickle file can be unsafe if the file is from an untrusted source",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1542,
    "end_token": 1550,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12320,
      257,
      2298,
      293,
      2393,
      460,
      307,
      21596,
      611,
      262,
      2393,
      318,
      422,
      281,
      1418,
      81,
      8459,
      2723
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Loading a pickle file can be unsafe if the file is from an untrusted source"
  },
  {
    "line": 386,
    "text": "            define the strategy class as well as the kwargs.",
    "annotation": "\ud83e\udde0 ML Signal: Use of placeholder pattern for dynamic configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8160,
      262,
      4811,
      1398,
      355,
      880,
      355,
      262,
      479,
      86,
      22046,
      13
    ],
    "start_token": 1550,
    "end_token": 1573,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      46076,
      3912,
      329,
      8925,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of placeholder pattern for dynamic configuration"
  },
  {
    "line": 388,
    "text": "            define the executor class as well as the kwargs.",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over configuration attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8160,
      262,
      3121,
      273,
      1398,
      355,
      880,
      355,
      262,
      479,
      86,
      22046,
      13
    ],
    "start_token": 1573,
    "end_token": 1597,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      8398,
      12608
    ],
    "label": "ml_signal",
    "reason": "Iterating over configuration attributes"
  },
  {
    "line": 390,
    "text": "            define the backtest kwargs.",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic attribute setting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8160,
      262,
      736,
      9288,
      479,
      86,
      22046,
      13
    ],
    "start_token": 1597,
    "end_token": 1616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      11688,
      4634
    ],
    "label": "ml_signal",
    "reason": "Dynamic attribute setting"
  },
  {
    "line": 392,
    "text": "            risk analysis freq of report",
    "annotation": "\ud83e\udde0 ML Signal: Accessing index level values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2526,
      3781,
      2030,
      80,
      286,
      989
    ],
    "start_token": 1616,
    "end_token": 1633,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6376,
      1241,
      3815
    ],
    "label": "ml_signal",
    "reason": "Accessing index level values"
  },
  {
    "line": 393,
    "text": "        indicator_analysis_freq : str|List[str]",
    "annotation": "\u2705 Best Practice: Checking for None before assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16916,
      62,
      20930,
      62,
      19503,
      80,
      1058,
      965,
      91,
      8053,
      58,
      2536,
      60
    ],
    "start_token": 1633,
    "end_token": 1653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      878,
      16237
    ],
    "label": "best_practice",
    "reason": "Checking for None before assignment"
  },
  {
    "line": 397,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Checking for None before assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1653,
    "end_token": 1661,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      878,
      16237
    ],
    "label": "best_practice",
    "reason": "Checking for None before assignment"
  },
  {
    "line": 400,
    "text": "        if config is None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to store artifacts",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4566,
      318,
      6045,
      25
    ],
    "start_token": 1661,
    "end_token": 1673,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3650,
      20316
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to store artifacts"
  },
  {
    "line": 402,
    "text": "                \"strategy\": {",
    "annotation": "\ud83e\udde0 ML Signal: Function call with dynamic configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2536,
      4338,
      1298,
      1391
    ],
    "start_token": 1673,
    "end_token": 1693,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      8925,
      8398
    ],
    "label": "ml_signal",
    "reason": "Function call with dynamic configuration"
  },
  {
    "line": 404,
    "text": "                    \"module_path\": \"qlib.contrib.strategy\",",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      21412,
      62,
      6978,
      1298,
      366,
      80,
      8019,
      13,
      3642,
      822,
      13,
      2536,
      4338,
      1600
    ],
    "start_token": 1693,
    "end_token": 1727,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items"
  },
  {
    "line": 408,
    "text": "                    \"start_time\": None,",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic key-value updates in dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      9688,
      62,
      2435,
      1298,
      6045,
      11
    ],
    "start_token": 1727,
    "end_token": 1753,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      1994,
      12,
      8367,
      5992,
      287,
      22155
    ],
    "label": "ml_signal",
    "reason": "Dynamic key-value updates in dictionary"
  },
  {
    "line": 410,
    "text": "                    \"account\": 100000000,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      23317,
      1298,
      1802,
      10535,
      11
    ],
    "start_token": 1753,
    "end_token": 1778,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items"
  },
  {
    "line": 413,
    "text": "                        \"limit_threshold\": 0.095,",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic key-value updates in dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      32374,
      62,
      400,
      10126,
      1298,
      657,
      13,
      2931,
      20,
      11
    ],
    "start_token": 1778,
    "end_token": 1812,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      1994,
      12,
      8367,
      5992,
      287,
      22155
    ],
    "label": "ml_signal",
    "reason": "Dynamic key-value updates in dictionary"
  },
  {
    "line": 416,
    "text": "                        \"close_cost\": 0.0015,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of frequencies",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19836,
      62,
      15805,
      1298,
      657,
      13,
      405,
      1314,
      11
    ],
    "start_token": 1812,
    "end_token": 1845,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      19998
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of frequencies"
  },
  {
    "line": 418,
    "text": "                    },",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for presence in dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 1845,
    "end_token": 1865,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      4931,
      287,
      22155
    ],
    "label": "ml_signal",
    "reason": "Conditional check for presence in dictionary"
  },
  {
    "line": 420,
    "text": "            }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn for user notifications",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1865,
    "end_token": 1877,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      329,
      2836,
      19605
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn for user notifications"
  },
  {
    "line": 425,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary access and unpacking",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1877,
    "end_token": 1877,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      1895,
      290,
      8593,
      5430
    ],
    "label": "ml_signal",
    "reason": "Dictionary access and unpacking"
  },
  {
    "line": 427,
    "text": "        _default_executor_config = {",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary to store analysis results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      12286,
      62,
      18558,
      38409,
      62,
      11250,
      796,
      1391
    ],
    "start_token": 1877,
    "end_token": 1893,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      284,
      3650,
      3781,
      2482
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary to store analysis results"
  },
  {
    "line": 429,
    "text": "            \"module_path\": \"qlib.backtest.executor\",",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of excess return",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      21412,
      62,
      6978,
      1298,
      366,
      80,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1600
    ],
    "start_token": 1893,
    "end_token": 1919,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      6992,
      1441
    ],
    "label": "ml_signal",
    "reason": "Calculation of excess return"
  },
  {
    "line": 433,
    "text": "            },",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of excess return with cost",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 1919,
    "end_token": 1931,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      6992,
      1441,
      351,
      1575
    ],
    "label": "ml_signal",
    "reason": "Calculation of excess return with cost"
  },
  {
    "line": 437,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Concatenating dataframes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1931,
    "end_token": 1931,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      803,
      1366,
      37805
    ],
    "label": "ml_signal",
    "reason": "Concatenating dataframes"
  },
  {
    "line": 439,
    "text": "        if risk_analysis_freq is None:",
    "annotation": "\ud83e\udde0 ML Signal: Flattening dictionary for logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2526,
      62,
      20930,
      62,
      19503,
      80,
      318,
      6045,
      25
    ],
    "start_token": 1931,
    "end_token": 1948,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1610,
      1078,
      3101,
      22155,
      329,
      18931
    ],
    "label": "ml_signal",
    "reason": "Flattening dictionary for logging"
  },
  {
    "line": 441,
    "text": "        if indicator_analysis_freq is None:",
    "annotation": "\ud83e\udde0 ML Signal: Logging metrics with dynamic keys",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      16916,
      62,
      20930,
      62,
      19503,
      80,
      318,
      6045,
      25
    ],
    "start_token": 1948,
    "end_token": 1965,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      20731,
      351,
      8925,
      8251
    ],
    "label": "ml_signal",
    "reason": "Logging metrics with dynamic keys"
  },
  {
    "line": 444,
    "text": "        if isinstance(risk_analysis_freq, str):",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic key-value updates in dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      19121,
      62,
      20930,
      62,
      19503,
      80,
      11,
      965,
      2599
    ],
    "start_token": 1965,
    "end_token": 1985,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      1994,
      12,
      8367,
      5992,
      287,
      22155
    ],
    "label": "ml_signal",
    "reason": "Dynamic key-value updates in dictionary"
  },
  {
    "line": 445,
    "text": "            risk_analysis_freq = [risk_analysis_freq]",
    "annotation": "\ud83e\udde0 ML Signal: Logging information with dynamic content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2526,
      62,
      20930,
      62,
      19503,
      80,
      796,
      685,
      19121,
      62,
      20930,
      62,
      19503,
      80,
      60
    ],
    "start_token": 1985,
    "end_token": 2011,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging information with dynamic content"
  },
  {
    "line": 449,
    "text": "        self.risk_analysis_freq = [",
    "annotation": "\ud83e\udde0 ML Signal: Pretty printing analysis results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19121,
      62,
      20930,
      62,
      19503,
      80,
      796,
      685
    ],
    "start_token": 2011,
    "end_token": 2028,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20090,
      13570,
      3781,
      2482
    ],
    "label": "ml_signal",
    "reason": "Pretty printing analysis results"
  },
  {
    "line": 456,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of frequencies",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2028,
    "end_token": 2028,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      19998
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of frequencies"
  },
  {
    "line": 458,
    "text": "        ret_freq = []",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for presence in dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      62,
      19503,
      80,
      796,
      17635
    ],
    "start_token": 2028,
    "end_token": 2041,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      4931,
      287,
      22155
    ],
    "label": "ml_signal",
    "reason": "Conditional check for presence in dictionary"
  },
  {
    "line": 460,
    "text": "            _count, _freq = Freq.parse(executor_config[\"kwargs\"][\"time_per_step\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn for user notifications",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      9127,
      11,
      4808,
      19503,
      80,
      796,
      4848,
      80,
      13,
      29572,
      7,
      18558,
      38409,
      62,
      11250,
      14692,
      46265,
      22046,
      1,
      7131,
      1,
      2435,
      62,
      525,
      62,
      9662,
      8973,
      8
    ],
    "start_token": 2041,
    "end_token": 2081,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      329,
      2836,
      19605
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn for user notifications"
  },
  {
    "line": 463,
    "text": "            ret_freq.extend(self._get_report_freq(executor_config[\"kwargs\"][\"inner_executor\"]))",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary access",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      62,
      19503,
      80,
      13,
      2302,
      437,
      7,
      944,
      13557,
      1136,
      62,
      13116,
      62,
      19503,
      80,
      7,
      18558,
      38409,
      62,
      11250,
      14692,
      46265,
      22046,
      1,
      7131,
      1,
      5083,
      62,
      18558,
      38409,
      8973,
      4008
    ],
    "start_token": 2081,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      1895
    ],
    "label": "ml_signal",
    "reason": "Dictionary access"
  },
  {
    "line": 465,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional method selection",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2125,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2446,
      6356
    ],
    "label": "ml_signal",
    "reason": "Conditional method selection"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting dataframe to dictionary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2125,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1366,
      14535,
      284,
      22155
    ],
    "label": "ml_signal",
    "reason": "Converting dataframe to dictionary"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging metrics with dynamic keys",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2125,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      20731,
      351,
      8925,
      8251
    ],
    "label": "ml_signal",
    "reason": "Logging metrics with dynamic keys"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic key-value updates in dictionary",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2125,
    "end_token": 2125,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      1994,
      12,
      8367,
      5992,
      287,
      22155
    ],
    "label": "ml_signal",
    "reason": "Dynamic key-value updates in dictionary"
  },
  {
    "line": 481,
    "text": "        artifact_objects = {}",
    "annotation": "\ud83e\udde0 ML Signal: Logging information with dynamic content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24127,
      62,
      48205,
      796,
      23884
    ],
    "start_token": 2125,
    "end_token": 2137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      351,
      8925,
      2695
    ],
    "label": "ml_signal",
    "reason": "Logging information with dynamic content"
  },
  {
    "line": 481,
    "text": "        artifact_objects = {}",
    "annotation": "\ud83e\udde0 ML Signal: Pretty printing analysis results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24127,
      62,
      48205,
      796,
      23884
    ],
    "start_token": 2137,
    "end_token": 2149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20090,
      13570,
      3781,
      2482
    ],
    "label": "ml_signal",
    "reason": "Pretty printing analysis results"
  },
  {
    "line": 483,
    "text": "        portfolio_metric_dict, indicator_dict = normal_backtest(",
    "annotation": "\ud83e\udde0 ML Signal: Returning a dictionary of artifacts",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15320,
      62,
      4164,
      1173,
      62,
      11600,
      11,
      16916,
      62,
      11600,
      796,
      3487,
      62,
      1891,
      9288,
      7
    ],
    "start_token": 2149,
    "end_token": 2172,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      22155,
      286,
      20316
    ],
    "label": "ml_signal",
    "reason": "Returning a dictionary of artifacts"
  },
  {
    "line": 449,
    "text": "        self.risk_analysis_freq = [",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list to generate file paths based on frequency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19121,
      62,
      20930,
      62,
      19503,
      80,
      796,
      685
    ],
    "start_token": 2172,
    "end_token": 2189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      284,
      7716,
      2393,
      13532,
      1912,
      319,
      8373
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list to generate file paths based on frequency"
  },
  {
    "line": 450,
    "text": "            \"{0}{1}\".format(*Freq.parse(_analysis_freq)) for _analysis_freq in risk_analysis_freq",
    "annotation": "\ud83e\udde0 ML Signal: Using list.extend to add multiple items to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      45144,
      15,
      18477,
      16,
      92,
      1911,
      18982,
      46491,
      20366,
      80,
      13,
      29572,
      28264,
      20930,
      62,
      19503,
      80,
      4008,
      329,
      4808,
      20930,
      62,
      19503,
      80,
      287,
      2526,
      62,
      20930,
      62,
      19503,
      80
    ],
    "start_token": 2189,
    "end_token": 2231,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      1351,
      13,
      2302,
      437,
      284,
      751,
      3294,
      3709,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Using list.extend to add multiple items to a list"
  },
  {
    "line": 458,
    "text": "        ret_freq = []",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to append specific file paths based on frequency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      62,
      19503,
      80,
      796,
      17635
    ],
    "start_token": 2231,
    "end_token": 2244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      24443,
      2176,
      2393,
      13532,
      1912,
      319,
      8373
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to append specific file paths based on frequency"
  },
  {
    "line": 463,
    "text": "            ret_freq.extend(self._get_report_freq(executor_config[\"kwargs\"][\"inner_executor\"]))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn without specifying a category",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      62,
      19503,
      80,
      13,
      2302,
      437,
      7,
      944,
      13557,
      1136,
      62,
      13116,
      62,
      19503,
      80,
      7,
      18558,
      38409,
      62,
      11250,
      14692,
      46265,
      22046,
      1,
      7131,
      1,
      5083,
      62,
      18558,
      38409,
      8973,
      4008
    ],
    "start_token": 2244,
    "end_token": 2288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      1231,
      31577,
      257,
      6536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn without specifying a category"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn without specifying a category",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2288,
    "end_token": 2288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      1231,
      31577,
      257,
      6536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn without specifying a category"
  },
  {
    "line": 468,
    "text": "",
    "annotation": "\u2705 Best Practice: Return the constructed list at the end of the function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2288,
    "end_token": 2288,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      262,
      12006,
      1351,
      379,
      262,
      886,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Return the constructed list at the end of the function"
  },
  {
    "line": 481,
    "text": "        artifact_objects = {}",
    "annotation": "\ud83e\udde0 ML Signal: Inheritance from PortAnaRecord suggests a pattern of extending functionality",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24127,
      62,
      48205,
      796,
      23884
    ],
    "start_token": 2288,
    "end_token": 2300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47025,
      42942,
      422,
      4347,
      2025,
      64,
      23739,
      5644,
      257,
      3912,
      286,
      16610,
      11244
    ],
    "label": "ml_signal",
    "reason": "Inheritance from PortAnaRecord suggests a pattern of extending functionality"
  },
  {
    "line": 482,
    "text": "        # custom strategy and get backtest",
    "annotation": "\ud83e\udde0 ML Signal: Use of a class-level attribute to define dependencies",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2183,
      4811,
      290,
      651,
      736,
      9288
    ],
    "start_token": 2300,
    "end_token": 2314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1398,
      12,
      5715,
      11688,
      284,
      8160,
      20086
    ],
    "label": "ml_signal",
    "reason": "Use of a class-level attribute to define dependencies"
  },
  {
    "line": 483,
    "text": "        portfolio_metric_dict, indicator_dict = normal_backtest(",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameters can indicate common usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15320,
      62,
      4164,
      1173,
      62,
      11600,
      11,
      16916,
      62,
      11600,
      796,
      3487,
      62,
      1891,
      9288,
      7
    ],
    "start_token": 2314,
    "end_token": 2337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      10007,
      460,
      7603,
      2219,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of default parameters can indicate common usage patterns"
  },
  {
    "line": 483,
    "text": "        portfolio_metric_dict, indicator_dict = normal_backtest(",
    "annotation": "\u2705 Best Practice: Documenting parameters in the docstring improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15320,
      62,
      4164,
      1173,
      62,
      11600,
      11,
      16916,
      62,
      11600,
      796,
      3487,
      62,
      1891,
      9288,
      7
    ],
    "start_token": 2337,
    "end_token": 2360,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16854,
      278,
      10007,
      287,
      262,
      2205,
      8841,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Documenting parameters in the docstring improves code readability and maintainability"
  },
  {
    "line": 497,
    "text": "                    f\"the freq {_analysis_freq} report is not found, please set the corresponding env with `generate_portfolio_metrics=True`\"",
    "annotation": "\u2705 Best Practice: Using super() to call the parent class's __init__ method is a good practice for inheritance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      1169,
      2030,
      80,
      1391,
      62,
      20930,
      62,
      19503,
      80,
      92,
      989,
      318,
      407,
      1043,
      11,
      3387,
      900,
      262,
      11188,
      17365,
      351,
      4600,
      8612,
      378,
      62,
      634,
      13652,
      62,
      4164,
      10466,
      28,
      17821,
      63,
      1
    ],
    "start_token": 2360,
    "end_token": 2415,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446,
      318,
      257,
      922,
      3357,
      329,
      24155
    ],
    "label": "best_practice",
    "reason": "Using super() to call the parent class's __init__ method is a good practice for inheritance"
  },
  {
    "line": 499,
    "text": "            else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): deepcopy_basic_type might not handle all types correctly, ensure it's safe for the data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2415,
    "end_token": 2428,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2769,
      30073,
      62,
      35487,
      62,
      4906,
      1244,
      407,
      5412,
      477,
      3858,
      9380,
      11,
      4155,
      340,
      338,
      3338,
      329,
      262,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "deepcopy_basic_type might not handle all types correctly, ensure it's safe for the data"
  },
  {
    "line": 501,
    "text": "                analysis = dict()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Type checking with isinstance can be bypassed if the object is not of the expected type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3781,
      796,
      8633,
      3419
    ],
    "start_token": 2428,
    "end_token": 2447,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      10627,
      351,
      318,
      39098,
      460,
      307,
      17286,
      276,
      611,
      262,
      2134,
      318,
      407,
      286,
      262,
      2938,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Type checking with isinstance can be bypassed if the object is not of the expected type"
  },
  {
    "line": 504,
    "text": "                )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary keys without checking can lead to KeyError if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2447,
    "end_token": 2463,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      8251,
      1231,
      10627,
      460,
      1085,
      284,
      7383,
      12331,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary keys without checking can lead to KeyError if not handled properly"
  },
  {
    "line": 501,
    "text": "                analysis = dict()",
    "annotation": "\ud83e\udde0 ML Signal: Loading data from a file, which is a common pattern in ML workflows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3781,
      796,
      8633,
      3419
    ],
    "start_token": 2463,
    "end_token": 2482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      12320,
      1366,
      422,
      257,
      2393,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      670,
      44041
    ],
    "label": "ml_signal",
    "reason": "Loading data from a file, which is a common pattern in ML workflows"
  },
  {
    "line": 503,
    "text": "                    report_normal[\"return\"] - report_normal[\"bench\"], freq=_analysis_freq",
    "annotation": "\ud83e\udde0 ML Signal: Loading a DataFrame, which is a common operation in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      989,
      62,
      11265,
      14692,
      7783,
      8973,
      532,
      989,
      62,
      11265,
      14692,
      26968,
      33116,
      2030,
      80,
      28,
      62,
      20930,
      62,
      19503,
      80
    ],
    "start_token": 2482,
    "end_token": 2522,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      12320,
      257,
      6060,
      19778,
      11,
      543,
      318,
      257,
      2219,
      4905,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Loading a DataFrame, which is a common operation in data processing"
  },
  {
    "line": 505,
    "text": "                analysis[\"excess_return_with_cost\"] = risk_analysis(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing index levels, indicating multi-index DataFrame usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3781,
      14692,
      1069,
      919,
      62,
      7783,
      62,
      4480,
      62,
      15805,
      8973,
      796,
      2526,
      62,
      20930,
      7
    ],
    "start_token": 2522,
    "end_token": 2553,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6376,
      2974,
      11,
      12739,
      5021,
      12,
      9630,
      6060,
      19778,
      8748
    ],
    "label": "ml_signal",
    "reason": "Accessing index levels, indicating multi-index DataFrame usage"
  },
  {
    "line": 506,
    "text": "                    report_normal[\"return\"] - report_normal[\"bench\"] - report_normal[\"cost\"], freq=_analysis_freq",
    "annotation": "\ud83e\udde0 ML Signal: Converting configuration values to datetime, common in time series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      989,
      62,
      11265,
      14692,
      7783,
      8973,
      532,
      989,
      62,
      11265,
      14692,
      26968,
      8973,
      532,
      989,
      62,
      11265,
      14692,
      15805,
      33116,
      2030,
      80,
      28,
      62,
      20930,
      62,
      19503,
      80
    ],
    "start_token": 2553,
    "end_token": 2600,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      8398,
      3815,
      284,
      4818,
      8079,
      11,
      2219,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Converting configuration values to datetime, common in time series analysis"
  },
  {
    "line": 509,
    "text": "                analysis_df = pd.concat(analysis)  # type: pd.DataFrame",
    "annotation": "\u2705 Best Practice: Checking for None to handle missing configuration values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3781,
      62,
      7568,
      796,
      279,
      67,
      13,
      1102,
      9246,
      7,
      20930,
      8,
      220,
      1303,
      2099,
      25,
      279,
      67,
      13,
      6601,
      19778
    ],
    "start_token": 2600,
    "end_token": 2636,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      284,
      5412,
      4814,
      8398,
      3815
    ],
    "label": "best_practice",
    "reason": "Checking for None to handle missing configuration values"
  },
  {
    "line": 513,
    "text": "                # save results",
    "annotation": "\u2705 Best Practice: Filtering dates to ensure valid backtest start",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3613,
      2482
    ],
    "start_token": 2636,
    "end_token": 2654,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      9667,
      284,
      4155,
      4938,
      736,
      9288,
      923
    ],
    "label": "best_practice",
    "reason": "Filtering dates to ensure valid backtest start"
  },
  {
    "line": 515,
    "text": "                logger.info(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing DataFrame rows by index, common in data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7
    ],
    "start_token": 2654,
    "end_token": 2673,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6060,
      19778,
      15274,
      416,
      6376,
      11,
      2219,
      287,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Accessing DataFrame rows by index, common in data manipulation"
  },
  {
    "line": 517,
    "text": "                )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Shuffling data in place, which may lead to unintended side effects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2673,
    "end_token": 2689,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      911,
      1648,
      1359,
      1366,
      287,
      1295,
      11,
      543,
      743,
      1085,
      284,
      30261,
      1735,
      3048
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Shuffling data in place, which may lead to unintended side effects"
  },
  {
    "line": 519,
    "text": "                pprint(f\"The following are analysis results of benchmark return({_analysis_freq}).\")",
    "annotation": "\u2705 Best Practice: Using deepcopy to avoid modifying the original object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      4798,
      7,
      69,
      1,
      464,
      1708,
      389,
      3781,
      2482,
      286,
      18335,
      1441,
      15090,
      62,
      20930,
      62,
      19503,
      80,
      30072,
      19570
    ],
    "start_token": 2689,
    "end_token": 2725,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2769,
      30073,
      284,
      3368,
      30620,
      262,
      2656,
      2134
    ],
    "label": "best_practice",
    "reason": "Using deepcopy to avoid modifying the original object"
  },
  {
    "line": 521,
    "text": "                pprint(f\"The following are analysis results of the excess return without cost({_analysis_freq}).\")",
    "annotation": "\ud83e\udde0 ML Signal: Modifying strategy configuration, indicating dynamic strategy adjustments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      4798,
      7,
      69,
      1,
      464,
      1708,
      389,
      3781,
      2482,
      286,
      262,
      6992,
      1441,
      1231,
      1575,
      15090,
      62,
      20930,
      62,
      19503,
      80,
      30072,
      19570
    ],
    "start_token": 2725,
    "end_token": 2764,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3401,
      4035,
      4811,
      8398,
      11,
      12739,
      8925,
      4811,
      16895
    ],
    "label": "ml_signal",
    "reason": "Modifying strategy configuration, indicating dynamic strategy adjustments"
  },
  {
    "line": 516,
    "text": "                    f\"Portfolio analysis record 'port_analysis_{_analysis_freq}.pkl' has been saved as the artifact of the Experiment {self.recorder.experiment_id}\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a range with a counter variable",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      13924,
      13652,
      3781,
      1700,
      705,
      634,
      62,
      20930,
      23330,
      62,
      20930,
      62,
      19503,
      80,
      27422,
      79,
      41582,
      6,
      468,
      587,
      7448,
      355,
      262,
      24127,
      286,
      262,
      29544,
      1391,
      944,
      13,
      8344,
      2875,
      13,
      23100,
      3681,
      62,
      312,
      36786
    ],
    "start_token": 2764,
    "end_token": 2823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2837,
      351,
      257,
      3753,
      7885
    ],
    "label": "ml_signal",
    "reason": "Iterating over a range with a counter variable"
  },
  {
    "line": 519,
    "text": "                pprint(f\"The following are analysis results of benchmark return({_analysis_freq}).\")",
    "annotation": "\ud83e\udde0 ML Signal: Calling a superclass method with dynamic arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      4798,
      7,
      69,
      1,
      464,
      1708,
      389,
      3781,
      2482,
      286,
      18335,
      1441,
      15090,
      62,
      20930,
      62,
      19503,
      80,
      30072,
      19570
    ],
    "start_token": 2823,
    "end_token": 2859,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2208,
      4871,
      2446,
      351,
      8925,
      7159
    ],
    "label": "ml_signal",
    "reason": "Calling a superclass method with dynamic arguments"
  },
  {
    "line": 522,
    "text": "                pprint(analysis[\"excess_return_without_cost\"])",
    "annotation": "\ud83e\udde0 ML Signal: Using a dictionary to map frequencies to dataframes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      4798,
      7,
      20930,
      14692,
      1069,
      919,
      62,
      7783,
      62,
      19419,
      62,
      15805,
      8973,
      8
    ],
    "start_token": 2859,
    "end_token": 2889,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      22155,
      284,
      3975,
      19998,
      284,
      1366,
      37805
    ],
    "label": "ml_signal",
    "reason": "Using a dictionary to map frequencies to dataframes"
  },
  {
    "line": 525,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if key is not in single_run_artifacts",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2889,
    "end_token": 2889,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      1994,
      318,
      407,
      287,
      2060,
      62,
      5143,
      62,
      50179
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if key is not in single_run_artifacts"
  },
  {
    "line": 527,
    "text": "            if _analysis_freq not in indicator_dict:",
    "annotation": "\ud83e\udde0 ML Signal: Adding metadata to a dataframe",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4808,
      20930,
      62,
      19503,
      80,
      407,
      287,
      16916,
      62,
      11600,
      25
    ],
    "start_token": 2889,
    "end_token": 2912,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      20150,
      284,
      257,
      1366,
      14535
    ],
    "label": "ml_signal",
    "reason": "Adding metadata to a dataframe"
  },
  {
    "line": 533,
    "text": "                else:",
    "annotation": "\u2705 Best Practice: Use pd.concat to combine dataframes efficiently",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2912,
    "end_token": 2929,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      1366,
      37805,
      18306
    ],
    "label": "best_practice",
    "reason": "Use pd.concat to combine dataframes efficiently"
  },
  {
    "line": 533,
    "text": "                else:",
    "annotation": "\ud83e\udde0 ML Signal: Grouping and applying a function to a dataframe",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2929,
    "end_token": 2946,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      290,
      11524,
      257,
      2163,
      284,
      257,
      1366,
      14535
    ],
    "label": "ml_signal",
    "reason": "Grouping and applying a function to a dataframe"
  },
  {
    "line": 538,
    "text": "                # save results",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero in mean_std calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3613,
      2482
    ],
    "start_token": 2946,
    "end_token": 2964,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      287,
      1612,
      62,
      19282,
      17952
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero in mean_std calculation"
  },
  {
    "line": 545,
    "text": "        return artifact_objects",
    "annotation": "\u2705 Best Practice: Use pprint for better readability of data structures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      24127,
      62,
      48205
    ],
    "start_token": 2964,
    "end_token": 2975,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      4798,
      329,
      1365,
      1100,
      1799,
      286,
      1366,
      8573
    ],
    "label": "best_practice",
    "reason": "Use pprint for better readability of data structures"
  },
  {
    "line": 547,
    "text": "    def list(self):",
    "annotation": "\ud83e\udde0 ML Signal: Flattening a dictionary for logging purposes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1351,
      7,
      944,
      2599
    ],
    "start_token": 2975,
    "end_token": 2983,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1610,
      1078,
      3101,
      257,
      22155,
      329,
      18931,
      4959
    ],
    "label": "ml_signal",
    "reason": "Flattening a dictionary for logging purposes"
  },
  {
    "line": 554,
    "text": "                ]",
    "annotation": "\ud83e\udde0 ML Signal: Logging metrics using a recorder object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 2983,
    "end_token": 2999,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      20731,
      1262,
      257,
      38156,
      2134
    ],
    "label": "ml_signal",
    "reason": "Logging metrics using a recorder object"
  },
  {
    "line": 549,
    "text": "        for _freq in self.all_freq:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a class attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      19503,
      80,
      287,
      2116,
      13,
      439,
      62,
      19503,
      80,
      25
    ],
    "start_token": 2999,
    "end_token": 3018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1398,
      11688
    ],
    "label": "ml_signal",
    "reason": "Iterating over a class attribute"
  },
  {
    "line": 551,
    "text": "                [",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check against another class attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      685
    ],
    "start_token": 3018,
    "end_token": 3034,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      1028,
      1194,
      1398,
      11688
    ],
    "label": "ml_signal",
    "reason": "Conditional check against another class attribute"
  },
  {
    "line": 553,
    "text": "                    f\"positions_normal_{_freq}.pkl\",",
    "annotation": "\ud83e\udde0 ML Signal: Appending formatted strings to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      1930,
      1756,
      62,
      11265,
      23330,
      62,
      19503,
      80,
      27422,
      79,
      41582,
      1600
    ],
    "start_token": 3034,
    "end_token": 3067,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      39559,
      13042,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending formatted strings to a list"
  },
  {
    "line": 554,
    "text": "                ]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn without specifying a category",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 3067,
    "end_token": 3083,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      1231,
      31577,
      257,
      6536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn without specifying a category"
  },
  {
    "line": 554,
    "text": "                ]",
    "annotation": "\u2705 Best Practice: Return statement at the end of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 3083,
    "end_token": 3099,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      379,
      262,
      886,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Return statement at the end of the function"
  }
]
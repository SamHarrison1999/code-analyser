[
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports into standard, third-party, and local sections improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      9004,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard, third-party, and local sections improves readability."
  },
  {
    "line": 17,
    "text": "from qlib.utils.exceptions import LoadObjectError",
    "annotation": "\ud83e\udde0 ML Signal: Logging is often used in ML workflows for tracking experiments and debugging.",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      26791,
      13,
      1069,
      11755,
      1330,
      8778,
      10267,
      12331
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      318,
      1690,
      973,
      287,
      10373,
      670,
      44041,
      329,
      9646,
      10256,
      290,
      28769,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging is often used in ML workflows for tracking experiments and debugging."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Modifying MLflow's configuration can indicate custom experiment tracking behavior.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3401,
      4035,
      10373,
      11125,
      338,
      8398,
      460,
      7603,
      2183,
      6306,
      9646,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Modifying MLflow's configuration can indicate custom experiment tracking behavior."
  },
  {
    "line": 20,
    "text": "from ..log import TimeInspector, get_module_logger",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Changing default MLflow settings might lead to unexpected behavior if not documented.",
    "confidence": 0.5,
    "tokens": [
      6738,
      11485,
      6404,
      1330,
      3862,
      818,
      4443,
      273,
      11,
      651,
      62,
      21412,
      62,
      6404,
      1362
    ],
    "start_token": 12,
    "end_token": 27,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33680,
      4277,
      10373,
      11125,
      6460,
      1244,
      1085,
      284,
      10059,
      4069,
      611,
      407,
      12395,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Changing default MLflow settings might lead to unexpected behavior if not documented."
  },
  {
    "line": 25,
    "text": "mlflow.utils.validation.MAX_PARAM_VAL_LENGTH = 1000",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants for status values indicates a pattern for state management",
    "confidence": 0.5,
    "tokens": [
      76,
      1652,
      9319,
      13,
      26791,
      13,
      12102,
      341,
      13,
      22921,
      62,
      27082,
      2390,
      62,
      23428,
      62,
      43,
      49494,
      796,
      8576
    ],
    "start_token": 27,
    "end_token": 47,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      329,
      3722,
      3815,
      9217,
      257,
      3912,
      329,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Use of constants for status values indicates a pattern for state management"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants for status values indicates a pattern for state management",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 47,
    "end_token": 47,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      329,
      3722,
      3815,
      9217,
      257,
      3912,
      329,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Use of constants for status values indicates a pattern for state management"
  },
  {
    "line": 29,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants for status values indicates a pattern for state management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 47,
    "end_token": 51,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      329,
      3722,
      3815,
      9217,
      257,
      3912,
      329,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Use of constants for status values indicates a pattern for state management"
  },
  {
    "line": 31,
    "text": "    (The link: https://mlflow.org/docs/latest/python_api/mlflow.html)",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants for status values indicates a pattern for state management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      357,
      464,
      2792,
      25,
      3740,
      1378,
      76,
      1652,
      9319,
      13,
      2398,
      14,
      31628,
      14,
      42861,
      14,
      29412,
      62,
      15042,
      14,
      76,
      1652,
      9319,
      13,
      6494,
      8
    ],
    "start_token": 51,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      329,
      3722,
      3815,
      9217,
      257,
      3912,
      329,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Use of constants for status values indicates a pattern for state management"
  },
  {
    "line": 30,
    "text": "    This is the `Recorder` class for logging the experiments. The API is designed similar to mlflow.",
    "annotation": "\u2705 Best Practice: Initialize all instance variables in the constructor for clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      770,
      318,
      262,
      4600,
      6690,
      2875,
      63,
      1398,
      329,
      18931,
      262,
      10256,
      13,
      383,
      7824,
      318,
      3562,
      2092,
      284,
      285,
      1652,
      9319,
      13
    ],
    "start_token": 80,
    "end_token": 106,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      477,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize all instance variables in the constructor for clarity."
  },
  {
    "line": 36,
    "text": "    # status type",
    "annotation": "\u2705 Best Practice: Use class constants for status values to avoid magic strings.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      3722,
      2099
    ],
    "start_token": 106,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1398,
      38491,
      329,
      3722,
      3815,
      284,
      3368,
      5536,
      13042,
      13
    ],
    "label": "best_practice",
    "reason": "Use class constants for status values to avoid magic strings."
  },
  {
    "line": 36,
    "text": "    # status type",
    "annotation": "\u2705 Best Practice: Use __repr__ for unambiguous string representation of objects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      3722,
      2099
    ],
    "start_token": 112,
    "end_token": 118,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      260,
      1050,
      834,
      329,
      42053,
      29709,
      4731,
      10552,
      286,
      5563
    ],
    "label": "best_practice",
    "reason": "Use __repr__ for unambiguous string representation of objects"
  },
  {
    "line": 38,
    "text": "    STATUS_R = \"RUNNING\"",
    "annotation": "\u2705 Best Practice: Use format method for string formatting for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15486,
      2937,
      62,
      49,
      796,
      366,
      49,
      4944,
      15871,
      1
    ],
    "start_token": 118,
    "end_token": 131,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      5794,
      2446,
      329,
      4731,
      33313,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use format method for string formatting for better readability"
  },
  {
    "line": 38,
    "text": "    STATUS_R = \"RUNNING\"",
    "annotation": "\u2705 Best Practice: Implementing __str__ for user-friendly string representation of objects",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15486,
      2937,
      62,
      49,
      796,
      366,
      49,
      4944,
      15871,
      1
    ],
    "start_token": 131,
    "end_token": 144,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      2536,
      834,
      329,
      2836,
      12,
      13120,
      4731,
      10552,
      286,
      5563
    ],
    "label": "best_practice",
    "reason": "Implementing __str__ for user-friendly string representation of objects"
  },
  {
    "line": 40,
    "text": "    STATUS_FA = \"FAILED\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __str__ method to convert object to string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15486,
      2937,
      62,
      7708,
      796,
      366,
      7708,
      4146,
      1961,
      1
    ],
    "start_token": 144,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      2536,
      834,
      2446,
      284,
      10385,
      2134,
      284,
      4731
    ],
    "label": "ml_signal",
    "reason": "Usage of __str__ method to convert object to string"
  },
  {
    "line": 41,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a unique identifier for hashing ensures consistent and reliable hash values.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 157,
    "end_token": 157,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      3748,
      27421,
      329,
      49544,
      19047,
      6414,
      290,
      9314,
      12234,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Using a unique identifier for hashing ensures consistent and reliable hash values."
  },
  {
    "line": 43,
    "text": "        self.id = None",
    "annotation": "\u2705 Best Practice: Use of a method to encapsulate logic for creating a dictionary representation of the object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      312,
      796,
      6045
    ],
    "start_token": 157,
    "end_token": 169,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2446,
      284,
      32652,
      5039,
      9156,
      329,
      4441,
      257,
      22155,
      10552,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Use of a method to encapsulate logic for creating a dictionary representation of the object"
  },
  {
    "line": 45,
    "text": "        self.experiment_id = experiment_id",
    "annotation": "\u2705 Best Practice: Initializing a dictionary using dict() for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23100,
      3681,
      62,
      312,
      796,
      6306,
      62,
      312
    ],
    "start_token": 169,
    "end_token": 186,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      257,
      22155,
      1262,
      8633,
      3419,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Initializing a dictionary using dict() for clarity"
  },
  {
    "line": 47,
    "text": "        self.end_time = None",
    "annotation": "\ud83e\udde0 ML Signal: Storing class name in the output dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437,
      62,
      2435,
      796,
      6045
    ],
    "start_token": 186,
    "end_token": 200,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1398,
      1438,
      287,
      262,
      5072,
      22155
    ],
    "label": "ml_signal",
    "reason": "Storing class name in the output dictionary"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing object attributes in a dictionary for serialization or logging",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 200,
    "end_token": 200,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2134,
      12608,
      287,
      257,
      22155,
      329,
      11389,
      1634,
      393,
      18931
    ],
    "label": "ml_signal",
    "reason": "Storing object attributes in a dictionary for serialization or logging"
  },
  {
    "line": 56,
    "text": "    def __hash__(self) -> int:",
    "annotation": "\u2705 Best Practice: Returning a dictionary for easy conversion to JSON or other formats",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      17831,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 200,
    "end_token": 213,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      22155,
      329,
      2562,
      11315,
      284,
      19449,
      393,
      584,
      17519
    ],
    "label": "best_practice",
    "reason": "Returning a dictionary for easy conversion to JSON or other formats"
  },
  {
    "line": 53,
    "text": "    def __str__(self):",
    "annotation": "\u2705 Best Practice: Method name should be descriptive of its action",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2536,
      834,
      7,
      944,
      2599
    ],
    "start_token": 213,
    "end_token": 223,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      815,
      307,
      35644,
      286,
      663,
      2223
    ],
    "label": "best_practice",
    "reason": "Method name should be descriptive of its action"
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of 'self' indicates this is an instance method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 223,
    "end_token": 223,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      705,
      944,
      6,
      9217,
      428,
      318,
      281,
      4554,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of 'self' indicates this is an instance method"
  },
  {
    "line": 56,
    "text": "    def __hash__(self) -> int:",
    "annotation": "\ud83e\udde0 ML Signal: Setting an instance variable",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      17831,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 223,
    "end_token": 236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      281,
      4554,
      7885
    ],
    "label": "ml_signal",
    "reason": "Setting an instance variable"
  },
  {
    "line": 56,
    "text": "    def __hash__(self) -> int:",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      17831,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 236,
    "end_token": 249,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters."
  },
  {
    "line": 68,
    "text": "        output[\"status\"] = self.status",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5072,
      14692,
      13376,
      8973,
      796,
      2116,
      13,
      13376
    ],
    "start_token": 249,
    "end_token": 264,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called."
  },
  {
    "line": 69,
    "text": "        return output",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation of parameters and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      5072
    ],
    "start_token": 264,
    "end_token": 273,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation of parameters and return value"
  },
  {
    "line": 80,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 273,
    "end_token": 273,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 81,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 273,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and usage."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 281,
    "end_token": 281,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called."
  },
  {
    "line": 93,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 281,
    "end_token": 281,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the method's purpose"
  },
  {
    "line": 95,
    "text": "        ----------",
    "annotation": "\u2705 Best Practice: Use of NotImplementedError to indicate an abstract method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 281,
    "end_token": 290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      281,
      12531,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of NotImplementedError to indicate an abstract method"
  },
  {
    "line": 95,
    "text": "        ----------",
    "annotation": "\ud83e\udde0 ML Signal: Use of **kwargs indicates flexible parameter handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 290,
    "end_token": 299,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      9217,
      12846,
      11507,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of **kwargs indicates flexible parameter handling"
  },
  {
    "line": 103,
    "text": "        raise NotImplementedError(f\"Please implement the `load_object` method.\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): NotImplementedError should be handled to avoid runtime exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      2220,
      62,
      15252,
      63,
      2446,
      19570
    ],
    "start_token": 299,
    "end_token": 325,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1892,
      3546,
      1154,
      12061,
      12331,
      815,
      307,
      12118,
      284,
      3368,
      19124,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "NotImplementedError should be handled to avoid runtime exceptions"
  },
  {
    "line": 104,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the function and its parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 325,
    "end_token": 325,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the function and its parameters"
  },
  {
    "line": 112,
    "text": "        An active running object (e.g. mlflow.ActiveRun object).",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1052,
      4075,
      2491,
      2134,
      357,
      68,
      13,
      70,
      13,
      285,
      1652,
      9319,
      13,
      13739,
      10987,
      2134,
      737
    ],
    "start_token": 325,
    "end_token": 349,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 113,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides clear explanation of parameters and functionality",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 349,
    "end_token": 357,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      7468,
      286,
      10007,
      290,
      11244
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear explanation of parameters and functionality"
  },
  {
    "line": 123,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 357,
    "end_token": 365,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 124,
    "text": "        Log a batch of params for the current run.",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the method and its parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5972,
      257,
      15458,
      286,
      42287,
      329,
      262,
      1459,
      1057,
      13
    ],
    "start_token": 365,
    "end_token": 382,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      290,
      663,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the method and its parameters"
  },
  {
    "line": 132,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 382,
    "end_token": 382,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 133,
    "text": "    def log_metrics(self, step=None, **kwargs):",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with variable arguments indicates flexible input handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      2604,
      62,
      4164,
      10466,
      7,
      944,
      11,
      2239,
      28,
      14202,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 382,
    "end_token": 401,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      7885,
      7159,
      9217,
      12846,
      5128,
      9041
    ],
    "label": "ml_signal",
    "reason": "Method signature with variable arguments indicates flexible input handling"
  },
  {
    "line": 141,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method not implemented, potential for misuse if called unexpectedly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 401,
    "end_token": 409,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      407,
      9177,
      11,
      2785,
      329,
      29169,
      611,
      1444,
      25884
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method not implemented, potential for misuse if called unexpectedly"
  },
  {
    "line": 142,
    "text": "        raise NotImplementedError(f\"Please implement the `log_metrics` method.\")",
    "annotation": "\u2705 Best Practice: Use of NotImplementedError to indicate an unimplemented method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      6404,
      62,
      4164,
      10466,
      63,
      2446,
      19570
    ],
    "start_token": 409,
    "end_token": 436,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      281,
      28418,
      1154,
      12061,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of NotImplementedError to indicate an unimplemented method"
  },
  {
    "line": 142,
    "text": "        raise NotImplementedError(f\"Please implement the `log_metrics` method.\")",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      6404,
      62,
      4164,
      10466,
      63,
      2446,
      19570
    ],
    "start_token": 436,
    "end_token": 463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 153,
    "text": "            If provided, the directory in ``artifact_uri`` to write to.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1002,
      2810,
      11,
      262,
      8619,
      287,
      7559,
      433,
      29660,
      62,
      9900,
      15506,
      284,
      3551,
      284,
      13
    ],
    "start_token": 463,
    "end_token": 490,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called."
  },
  {
    "line": 154,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Type hints are used for function parameters and return type.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 490,
    "end_token": 498,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      389,
      973,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      13
    ],
    "label": "best_practice",
    "reason": "Type hints are used for function parameters and return type."
  },
  {
    "line": 172,
    "text": "        Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, indicating it's a stub.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 498,
    "end_token": 506,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      12739,
      340,
      338,
      257,
      17071,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, indicating it's a stub."
  },
  {
    "line": 173,
    "text": "        ----------",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 506,
    "end_token": 515,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 180,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using NotImplementedError without implementation can lead to runtime errors if not handled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 515,
    "end_token": 523,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      1892,
      3546,
      1154,
      12061,
      12331,
      1231,
      7822,
      460,
      1085,
      284,
      19124,
      8563,
      611,
      407,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using NotImplementedError without implementation can lead to runtime errors if not handled"
  },
  {
    "line": 187,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError is a clear way to indicate that this method should be overridden in subclasses.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 523,
    "end_token": 523,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      318,
      257,
      1598,
      835,
      284,
      7603,
      326,
      428,
      2446,
      815,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError is a clear way to indicate that this method should be overridden in subclasses."
  },
  {
    "line": 189,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 523,
    "end_token": 531,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 196,
    "text": "        Download an artifact file or directory from a run to a local directory if applicable,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10472,
      281,
      24127,
      2393,
      393,
      8619,
      422,
      257,
      1057,
      284,
      257,
      1957,
      8619,
      611,
      9723,
      11
    ],
    "start_token": 531,
    "end_token": 554,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      1444
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if called"
  },
  {
    "line": 209,
    "text": "        Returns",
    "annotation": "\u2705 Best Practice: Abstracting the logging backend allows for flexibility in changing implementations without affecting higher-level code.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 554,
    "end_token": 562,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27741,
      278,
      262,
      18931,
      30203,
      3578,
      329,
      13688,
      287,
      5609,
      25504,
      1231,
      13891,
      2440,
      12,
      5715,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Abstracting the logging backend allows for flexibility in changing implementations without affecting higher-level code."
  },
  {
    "line": 209,
    "text": "        Returns",
    "annotation": "\ud83e\udde0 ML Signal: Automatically logging uncommitted code indicates a pattern of tracking code changes for experiments.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 562,
    "end_token": 570,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17406,
      4142,
      18931,
      8820,
      3291,
      2438,
      9217,
      257,
      3912,
      286,
      9646,
      2438,
      2458,
      329,
      10256,
      13
    ],
    "label": "ml_signal",
    "reason": "Automatically logging uncommitted code indicates a pattern of tracking code changes for experiments."
  },
  {
    "line": 209,
    "text": "        Returns",
    "annotation": "\ud83e\udde0 ML Signal: Logging environment variables suggests a pattern of capturing runtime context for experiments.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 570,
    "end_token": 578,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      2858,
      9633,
      5644,
      257,
      3912,
      286,
      21430,
      19124,
      4732,
      329,
      10256,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging environment variables suggests a pattern of capturing runtime context for experiments."
  },
  {
    "line": 210,
    "text": "        -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging environment variables may inadvertently expose sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 578,
    "end_token": 586,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      2858,
      9633,
      743,
      29243,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging environment variables may inadvertently expose sensitive information."
  },
  {
    "line": 210,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Call to superclass constructor ensures proper initialization of inherited attributes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 586,
    "end_token": 594,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      23772,
      19047,
      1774,
      37588,
      286,
      19552,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass constructor ensures proper initialization of inherited attributes."
  },
  {
    "line": 214,
    "text": "        raise NotImplementedError(f\"Please implement the `list_artifacts` method.\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of mlflow.tracking.MlflowClient indicates interaction with MLflow tracking server.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      50179,
      63,
      2446,
      19570
    ],
    "start_token": 594,
    "end_token": 620,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      285,
      1652,
      9319,
      13,
      36280,
      13,
      44,
      1652,
      9319,
      11792,
      9217,
      10375,
      351,
      10373,
      11125,
      9646,
      4382,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of mlflow.tracking.MlflowClient indicates interaction with MLflow tracking server."
  },
  {
    "line": 217,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for type checking can be bypassed; consider using explicit type checks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 620,
    "end_token": 628,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      2099,
      10627,
      460,
      307,
      17286,
      276,
      26,
      2074,
      1262,
      7952,
      2099,
      8794,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for type checking can be bypassed; consider using explicit type checks."
  },
  {
    "line": 219,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing mlflow_run data and info suggests usage of MLflow run metadata.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 628,
    "end_token": 628,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      285,
      1652,
      9319,
      62,
      5143,
      1366,
      290,
      7508,
      5644,
      8748,
      286,
      10373,
      11125,
      1057,
      20150,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing mlflow_run data and info suggests usage of MLflow run metadata."
  },
  {
    "line": 224,
    "text": "        raise NotImplementedError(f\"Please implement the `list_metrics` method.\")",
    "annotation": "\u2705 Best Practice: Conversion of timestamps to human-readable format improves readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      4164,
      10466,
      63,
      2446,
      19570
    ],
    "start_token": 628,
    "end_token": 655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44101,
      286,
      4628,
      395,
      9430,
      284,
      1692,
      12,
      46155,
      5794,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Conversion of timestamps to human-readable format improves readability."
  },
  {
    "line": 231,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Implementing __repr__ for better debugging and logging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 655,
    "end_token": 663,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      260,
      1050,
      834,
      329,
      1365,
      28769,
      290,
      18931
    ],
    "label": "best_practice",
    "reason": "Implementing __repr__ for better debugging and logging"
  },
  {
    "line": 233,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class name in string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 663,
    "end_token": 671,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      1438,
      287,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Usage of class name in string formatting"
  },
  {
    "line": 234,
    "text": "        raise NotImplementedError(f\"Please implement the `list_params` method.\")",
    "annotation": "\u2705 Best Practice: Calculating space length for better formatted output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      37266,
      63,
      2446,
      19570
    ],
    "start_token": 671,
    "end_token": 697,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      803,
      2272,
      4129,
      329,
      1365,
      39559,
      5072
    ],
    "label": "best_practice",
    "reason": "Calculating space length for better formatted output"
  },
  {
    "line": 234,
    "text": "        raise NotImplementedError(f\"Please implement the `list_params` method.\")",
    "annotation": "\u2705 Best Practice: Using str.format for string formatting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      37266,
      63,
      2446,
      19570
    ],
    "start_token": 697,
    "end_token": 723,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      965,
      13,
      18982,
      329,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Using str.format for string formatting"
  },
  {
    "line": 241,
    "text": "        -------",
    "annotation": "\ud83e\udde0 ML Signal: Accessing instance attributes for representation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 723,
    "end_token": 731,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      4554,
      12608,
      329,
      10552
    ],
    "label": "ml_signal",
    "reason": "Accessing instance attributes for representation"
  },
  {
    "line": 242,
    "text": "        A dictionary of tags that being stored.",
    "annotation": "\u2705 Best Practice: Use of __hash__ method to make the object hashable, which is useful for using the object in sets or as dictionary keys.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      22155,
      286,
      15940,
      326,
      852,
      8574,
      13
    ],
    "start_token": 731,
    "end_token": 746,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      17831,
      834,
      2446,
      284,
      787,
      262,
      2134,
      12234,
      540,
      11,
      543,
      318,
      4465,
      329,
      1262,
      262,
      2134,
      287,
      5621,
      393,
      355,
      22155,
      8251,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __hash__ method to make the object hashable, which is useful for using the object in sets or as dictionary keys."
  },
  {
    "line": 244,
    "text": "        raise NotImplementedError(f\"Please implement the `list_tags` method.\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dictionary access pattern with a specific key.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      31499,
      63,
      2446,
      19570
    ],
    "start_token": 746,
    "end_token": 772,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      22155,
      1895,
      3912,
      351,
      257,
      2176,
      1994,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dictionary access pattern with a specific key."
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'id' key exists in self.info, which may raise a KeyError if not present.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 772,
    "end_token": 772,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      312,
      6,
      1994,
      7160,
      287,
      2116,
      13,
      10951,
      11,
      543,
      743,
      5298,
      257,
      7383,
      12331,
      611,
      407,
      1944,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'id' key exists in self.info, which may raise a KeyError if not present."
  },
  {
    "line": 244,
    "text": "        raise NotImplementedError(f\"Please implement the `list_tags` method.\")",
    "annotation": "\u2705 Best Practice: Use of type hinting for method parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      3494,
      262,
      4600,
      4868,
      62,
      31499,
      63,
      2446,
      19570
    ],
    "start_token": 772,
    "end_token": 798,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2446,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for method parameters and return type"
  },
  {
    "line": 246,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to check object type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 798,
    "end_token": 798,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2134,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check object type"
  },
  {
    "line": 247,
    "text": "class MLflowRecorder(Recorder):",
    "annotation": "\ud83e\udde0 ML Signal: Equality comparison based on a specific attribute",
    "confidence": 1.0,
    "tokens": [
      4871,
      10373,
      11125,
      6690,
      2875,
      7,
      6690,
      2875,
      2599
    ],
    "start_token": 798,
    "end_token": 807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      31428,
      7208,
      1912,
      319,
      257,
      2176,
      11688
    ],
    "label": "ml_signal",
    "reason": "Equality comparison based on a specific attribute"
  },
  {
    "line": 250,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a private attribute, indicating encapsulation pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 807,
    "end_token": 807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      2839,
      11688,
      11,
      12739,
      32652,
      1741,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning a private attribute, indicating encapsulation pattern"
  },
  {
    "line": 253,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of @property decorator, indicating a getter method pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 807,
    "end_token": 807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      11,
      12739,
      257,
      651,
      353,
      2446,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of @property decorator, indicating a getter method pattern"
  },
  {
    "line": 254,
    "text": "    Instead of using mlflow directly, we use another interface wrapping mlflow to log experiments.",
    "annotation": "\u2705 Best Practice: Use of @property for encapsulation and controlled access to attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5455,
      286,
      1262,
      285,
      1652,
      9319,
      3264,
      11,
      356,
      779,
      1194,
      7071,
      27074,
      285,
      1652,
      9319,
      284,
      2604,
      10256,
      13
    ],
    "start_token": 807,
    "end_token": 830,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      329,
      32652,
      1741,
      290,
      6856,
      1895,
      284,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of @property for encapsulation and controlled access to attributes"
  },
  {
    "line": 252,
    "text": "    use file manager to help maintain the objects in the project.",
    "annotation": "\u2705 Best Practice: Use of a getter method to access a private attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      779,
      2393,
      4706,
      284,
      1037,
      5529,
      262,
      5563,
      287,
      262,
      1628,
      13
    ],
    "start_token": 830,
    "end_token": 845,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      651,
      353,
      2446,
      284,
      1895,
      257,
      2839,
      11688
    ],
    "label": "best_practice",
    "reason": "Use of a getter method to access a private attribute"
  },
  {
    "line": 258,
    "text": "        - Automatically logging the uncommitted code",
    "annotation": "\u2705 Best Practice: Check if artifact_uri is not None before proceeding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      17406,
      4142,
      18931,
      262,
      8820,
      3291,
      2438
    ],
    "start_token": 845,
    "end_token": 860,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      24127,
      62,
      9900,
      318,
      407,
      6045,
      878,
      18788
    ],
    "label": "best_practice",
    "reason": "Check if artifact_uri is not None before proceeding"
  },
  {
    "line": 260,
    "text": "        - User can control several different runs by just creating different Recorder (in mlflow, you always have to switch artifact_uri and pass in run ids frequently)",
    "annotation": "\u2705 Best Practice: Use platform.system() to handle OS-specific logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      11787,
      460,
      1630,
      1811,
      1180,
      4539,
      416,
      655,
      4441,
      1180,
      3311,
      2875,
      357,
      259,
      285,
      1652,
      9319,
      11,
      345,
      1464,
      423,
      284,
      5078,
      24127,
      62,
      9900,
      290,
      1208,
      287,
      1057,
      220,
      2340,
      6777,
      8
    ],
    "start_token": 860,
    "end_token": 902,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      3859,
      13,
      10057,
      3419,
      284,
      5412,
      7294,
      12,
      11423,
      9156
    ],
    "label": "best_practice",
    "reason": "Use platform.system() to handle OS-specific logic"
  },
  {
    "line": 262,
    "text": "",
    "annotation": "\u2705 Best Practice: Use Path from pathlib for path manipulations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 902,
    "end_token": 902,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      422,
      3108,
      8019,
      329,
      3108,
      7704,
      5768
    ],
    "label": "best_practice",
    "reason": "Use Path from pathlib for path manipulations"
  },
  {
    "line": 265,
    "text": "        self._uri = uri",
    "annotation": "\u2705 Best Practice: Use Path from pathlib for path manipulations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      9900,
      796,
      2956,
      72
    ],
    "start_token": 902,
    "end_token": 915,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      422,
      3108,
      8019,
      329,
      3108,
      7704,
      5768
    ],
    "label": "best_practice",
    "reason": "Use Path from pathlib for path manipulations"
  },
  {
    "line": 267,
    "text": "        self.client = mlflow.tracking.MlflowClient(tracking_uri=self._uri)",
    "annotation": "\u2705 Best Practice: Convert Path object to string after resolving",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      16366,
      796,
      285,
      1652,
      9319,
      13,
      36280,
      13,
      44,
      1652,
      9319,
      11792,
      7,
      36280,
      62,
      9900,
      28,
      944,
      13557,
      9900,
      8
    ],
    "start_token": 915,
    "end_token": 945,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      10644,
      2134,
      284,
      4731,
      706,
      31038
    ],
    "label": "best_practice",
    "reason": "Convert Path object to string after resolving"
  },
  {
    "line": 269,
    "text": "        if mlflow_run is not None:",
    "annotation": "\u2705 Best Practice: Check if the directory exists before returning",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      285,
      1652,
      9319,
      62,
      5143,
      318,
      407,
      6045,
      25
    ],
    "start_token": 945,
    "end_token": 962,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      8619,
      7160,
      878,
      8024
    ],
    "label": "best_practice",
    "reason": "Check if the directory exists before returning"
  },
  {
    "line": 273,
    "text": "            self.status = mlflow_run.info.status",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic RuntimeError without specific error handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      13376,
      796,
      285,
      1652,
      9319,
      62,
      5143,
      13,
      10951,
      13,
      13376
    ],
    "start_token": 962,
    "end_token": 986,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      43160,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic RuntimeError without specific error handling"
  },
  {
    "line": 276,
    "text": "                if mlflow_run.info.start_time is not None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a ValueError without specific error handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      285,
      1652,
      9319,
      62,
      5143,
      13,
      10951,
      13,
      9688,
      62,
      2435,
      318,
      407,
      6045
    ],
    "start_token": 986,
    "end_token": 1016,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      11052,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a ValueError without specific error handling"
  },
  {
    "line": 273,
    "text": "            self.status = mlflow_run.info.status",
    "annotation": "\ud83e\udde0 ML Signal: Setting a tracking URI is a common pattern in ML experiment tracking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      13376,
      796,
      285,
      1652,
      9319,
      62,
      5143,
      13,
      10951,
      13,
      13376
    ],
    "start_token": 1016,
    "end_token": 1040,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      9646,
      43975,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      6306,
      9646
    ],
    "label": "ml_signal",
    "reason": "Setting a tracking URI is a common pattern in ML experiment tracking"
  },
  {
    "line": 275,
    "text": "                datetime.fromtimestamp(float(mlflow_run.info.start_time) / 1000.0).strftime(\"%Y-%m-%d %H:%M:%S\")",
    "annotation": "\ud83e\udde0 ML Signal: Starting a run is a key action in ML experiment management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4818,
      8079,
      13,
      6738,
      16514,
      27823,
      7,
      22468,
      7,
      76,
      1652,
      9319,
      62,
      5143,
      13,
      10951,
      13,
      9688,
      62,
      2435,
      8,
      1220,
      8576,
      13,
      15,
      737,
      2536,
      31387,
      7203,
      4,
      56,
      12,
      4,
      76,
      12,
      4,
      67,
      4064,
      39,
      25,
      4,
      44,
      25,
      4,
      50,
      4943
    ],
    "start_token": 1040,
    "end_token": 1101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17962,
      257,
      1057,
      318,
      257,
      1994,
      2223,
      287,
      10373,
      6306,
      4542
    ],
    "label": "ml_signal",
    "reason": "Starting a run is a key action in ML experiment management"
  },
  {
    "line": 277,
    "text": "                else None",
    "annotation": "\ud83e\udde0 ML Signal: Storing run ID for future reference is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      6045
    ],
    "start_token": 1101,
    "end_token": 1118,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1057,
      4522,
      329,
      2003,
      4941,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Storing run ID for future reference is a common pattern"
  },
  {
    "line": 279,
    "text": "            self.end_time = (",
    "annotation": "\ud83e\udde0 ML Signal: Storing artifact URI for accessing experiment outputs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437,
      62,
      2435,
      796,
      357
    ],
    "start_token": 1118,
    "end_token": 1136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      24127,
      43975,
      329,
      22534,
      6306,
      23862
    ],
    "label": "ml_signal",
    "reason": "Storing artifact URI for accessing experiment outputs"
  },
  {
    "line": 281,
    "text": "                if mlflow_run.info.end_time is not None",
    "annotation": "\ud83e\udde0 ML Signal: Recording start time is useful for tracking experiment duration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      285,
      1652,
      9319,
      62,
      5143,
      13,
      10951,
      13,
      437,
      62,
      2435,
      318,
      407,
      6045
    ],
    "start_token": 1136,
    "end_token": 1166,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      43905,
      923,
      640,
      318,
      4465,
      329,
      9646,
      6306,
      9478
    ],
    "label": "ml_signal",
    "reason": "Recording start time is useful for tracking experiment duration"
  },
  {
    "line": 283,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Setting status to running is a common state management pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1166,
    "end_token": 1178,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      3722,
      284,
      2491,
      318,
      257,
      2219,
      1181,
      4542,
      3912
    ],
    "label": "ml_signal",
    "reason": "Setting status to running is a common state management pattern"
  },
  {
    "line": 286,
    "text": "",
    "annotation": "\u2705 Best Practice: Using logging for information output instead of print",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1178,
    "end_token": 1178,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18931,
      329,
      1321,
      5072,
      2427,
      286,
      3601
    ],
    "label": "best_practice",
    "reason": "Using logging for information output instead of print"
  },
  {
    "line": 287,
    "text": "    def __repr__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Asynchronous logging can be used to improve performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      260,
      1050,
      834,
      7,
      944,
      2599
    ],
    "start_token": 1178,
    "end_token": 1189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1081,
      31301,
      18931,
      460,
      307,
      973,
      284,
      2987,
      2854
    ],
    "label": "ml_signal",
    "reason": "Asynchronous logging can be used to improve performance"
  },
  {
    "line": 288,
    "text": "        name = self.__class__.__name__",
    "annotation": "\ud83e\udde0 ML Signal: Logging uncommitted code helps in experiment reproducibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      796,
      2116,
      13,
      834,
      4871,
      834,
      13,
      834,
      3672,
      834
    ],
    "start_token": 1189,
    "end_token": 1207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8820,
      3291,
      2438,
      5419,
      287,
      6306,
      8186,
      66,
      2247
    ],
    "label": "ml_signal",
    "reason": "Logging uncommitted code helps in experiment reproducibility"
  },
  {
    "line": 292,
    "text": "            space=\" \" * space_length,",
    "annotation": "\ud83e\udde0 ML Signal: Logging command-line arguments is useful for experiment tracking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2272,
      2625,
      366,
      1635,
      2272,
      62,
      13664,
      11
    ],
    "start_token": 1207,
    "end_token": 1226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      3141,
      12,
      1370,
      7159,
      318,
      4465,
      329,
      6306,
      9646
    ],
    "label": "ml_signal",
    "reason": "Logging command-line arguments is useful for experiment tracking"
  },
  {
    "line": 292,
    "text": "            space=\" \" * space_length,",
    "annotation": "\ud83e\udde0 ML Signal: Logging environment variables can be useful for experiment context",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2272,
      2625,
      366,
      1635,
      2272,
      62,
      13664,
      11
    ],
    "start_token": 1226,
    "end_token": 1245,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      2858,
      9633,
      460,
      307,
      4465,
      329,
      6306,
      4732
    ],
    "label": "ml_signal",
    "reason": "Logging environment variables can be useful for experiment context"
  },
  {
    "line": 297,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Returning the run object allows further interaction with the run",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1245,
    "end_token": 1253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      262,
      1057,
      2134,
      3578,
      2252,
      10375,
      351,
      262,
      1057
    ],
    "label": "ml_signal",
    "reason": "Returning the run object allows further interaction with the run"
  },
  {
    "line": 292,
    "text": "            space=\" \" * space_length,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of tuples to execute commands and log results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2272,
      2625,
      366,
      1635,
      2272,
      62,
      13664,
      11
    ],
    "start_token": 1253,
    "end_token": 1272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      12777,
      2374,
      284,
      12260,
      9729,
      290,
      2604,
      2482
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of tuples to execute commands and log results"
  },
  {
    "line": 299,
    "text": "    def __hash__(self) -> int:",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of shell=True with subprocess.check_output can lead to shell injection vulnerabilities",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      17831,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 1272,
    "end_token": 1285,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      7582,
      28,
      17821,
      351,
      850,
      14681,
      13,
      9122,
      62,
      22915,
      460,
      1085,
      284,
      7582,
      16954,
      23805
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of shell=True with subprocess.check_output can lead to shell injection vulnerabilities"
  },
  {
    "line": 301,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging output of subprocess command to a client",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1285,
    "end_token": 1285,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      5072,
      286,
      850,
      14681,
      3141,
      284,
      257,
      5456
    ],
    "label": "ml_signal",
    "reason": "Logging output of subprocess command to a client"
  },
  {
    "line": 303,
    "text": "        if isinstance(o, MLflowRecorder):",
    "annotation": "\u2705 Best Practice: Logging exceptions provides insight into failures",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      78,
      11,
      10373,
      11125,
      6690,
      2875,
      2599
    ],
    "start_token": 1285,
    "end_token": 1303,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      13269,
      3769,
      11281,
      656,
      15536
    ],
    "label": "best_practice",
    "reason": "Logging exceptions provides insight into failures"
  },
  {
    "line": 303,
    "text": "        if isinstance(o, MLflowRecorder):",
    "annotation": "\ud83e\udde0 ML Signal: Use of assert for input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      78,
      11,
      10373,
      11125,
      6690,
      2875,
      2599
    ],
    "start_token": 1303,
    "end_token": 1321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      329,
      5128,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of assert for input validation"
  },
  {
    "line": 310,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of datetime for timestamping",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1321,
    "end_token": 1321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4818,
      8079,
      329,
      41033,
      278
    ],
    "label": "best_practice",
    "reason": "Use of datetime for timestamping"
  },
  {
    "line": 315,
    "text": "    def get_local_dir(self):",
    "annotation": "\u2705 Best Practice: Use of context manager for resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      12001,
      62,
      15908,
      7,
      944,
      2599
    ],
    "start_token": 1321,
    "end_token": 1333,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4732,
      4706,
      329,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use of context manager for resource management"
  },
  {
    "line": 319,
    "text": "        if self.artifact_uri is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Interaction with mlflow for experiment tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      433,
      29660,
      62,
      9900,
      318,
      407,
      6045,
      25
    ],
    "start_token": 1333,
    "end_token": 1351,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4225,
      2673,
      351,
      285,
      1652,
      9319,
      329,
      6306,
      9646
    ],
    "label": "ml_signal",
    "reason": "Interaction with mlflow for experiment tracking"
  },
  {
    "line": 318,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for control flow can be disabled with optimized execution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1351,
    "end_token": 1359,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      351,
      23392,
      9706
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for control flow can be disabled with optimized execution"
  },
  {
    "line": 322,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Check if path is a directory to decide logging method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1359,
    "end_token": 1372,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      3108,
      318,
      257,
      8619,
      284,
      5409,
      18931,
      2446
    ],
    "label": "best_practice",
    "reason": "Check if path is a directory to decide logging method"
  },
  {
    "line": 328,
    "text": "                raise RuntimeError(\"This recorder is not saved in the local file system.\")",
    "annotation": "\u2705 Best Practice: Use of tempfile for temporary directory creation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      43160,
      12331,
      7203,
      1212,
      38156,
      318,
      407,
      7448,
      287,
      262,
      1957,
      2393,
      1080,
      19570
    ],
    "start_token": 1372,
    "end_token": 1402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      20218,
      7753,
      329,
      8584,
      8619,
      6282
    ],
    "label": "best_practice",
    "reason": "Use of tempfile for temporary directory creation"
  },
  {
    "line": 332,
    "text": "                \"Please make sure the recorder has been created and started properly before getting artifact uri.\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Serializable.general_dump for data serialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      5492,
      787,
      1654,
      262,
      38156,
      468,
      587,
      2727,
      290,
      2067,
      6105,
      878,
      1972,
      24127,
      2956,
      72,
      526
    ],
    "start_token": 1402,
    "end_token": 1435,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      23283,
      13821,
      13,
      24622,
      62,
      39455,
      329,
      1366,
      11389,
      1634
    ],
    "label": "ml_signal",
    "reason": "Usage of Serializable.general_dump for data serialization"
  },
  {
    "line": 333,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if temp_dir is not properly managed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1435,
    "end_token": 1447,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      20218,
      62,
      15908,
      318,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if temp_dir is not properly managed"
  },
  {
    "line": 343,
    "text": "        self.start_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statement for runtime checks, which can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      2435,
      796,
      4818,
      8079,
      13,
      2197,
      22446,
      2536,
      31387,
      7203,
      4,
      56,
      12,
      4,
      76,
      12,
      4,
      67,
      4064,
      39,
      25,
      4,
      44,
      25,
      4,
      50,
      4943
    ],
    "start_token": 1447,
    "end_token": 1485,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      2643,
      329,
      19124,
      8794,
      11,
      543,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statement for runtime checks, which can be disabled with optimization flags."
  },
  {
    "line": 347,
    "text": "        # NOTE: making logging async.",
    "annotation": "\ud83e\udde0 ML Signal: Downloading artifacts, which is a common pattern in ML workflows.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      1642,
      18931,
      30351,
      13
    ],
    "start_token": 1485,
    "end_token": 1499,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10472,
      278,
      20316,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "Downloading artifacts, which is a common pattern in ML workflows."
  },
  {
    "line": 349,
    "text": "        # - The logging time may not be accurate",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Unpickling data can lead to arbitrary code execution if the source is untrusted.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      532,
      383,
      18931,
      640,
      743,
      407,
      307,
      7187
    ],
    "start_token": 1499,
    "end_token": 1515,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      791,
      27729,
      1359,
      1366,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      611,
      262,
      2723,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Unpickling data can lead to arbitrary code execution if the source is untrusted."
  },
  {
    "line": 354,
    "text": "        self._log_uncommitted_code()",
    "annotation": "\u2705 Best Practice: Raising a custom error with context for better error handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      6404,
      62,
      403,
      785,
      3291,
      62,
      8189,
      3419
    ],
    "start_token": 1515,
    "end_token": 1532,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      257,
      2183,
      4049,
      351,
      4732,
      329,
      1365,
      4049,
      9041,
      13
    ],
    "label": "best_practice",
    "reason": "Raising a custom error with context for better error handling."
  },
  {
    "line": 357,
    "text": "        self.log_params(",
    "annotation": "\u2705 Best Practice: Cleaning up resources in a finally block to ensure execution.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      6404,
      62,
      37266,
      7
    ],
    "start_token": 1532,
    "end_token": 1545,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5985,
      278,
      510,
      4133,
      287,
      257,
      3443,
      2512,
      284,
      4155,
      9706,
      13
    ],
    "label": "best_practice",
    "reason": "Cleaning up resources in a finally block to ensure execution."
  },
  {
    "line": 359,
    "text": "        )  # Log necessary environment variables",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of deleting unintended files if path is not correctly managed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      220,
      1303,
      5972,
      3306,
      2858,
      9633
    ],
    "start_token": 1545,
    "end_token": 1559,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      34817,
      30261,
      3696,
      611,
      3108,
      318,
      407,
      9380,
      5257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of deleting unintended files if path is not correctly managed."
  },
  {
    "line": 362,
    "text": "    def _log_uncommitted_code(self):",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators to handle asynchronous operations, common in ML logging.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      6404,
      62,
      403,
      785,
      3291,
      62,
      8189,
      7,
      944,
      2599
    ],
    "start_token": 1559,
    "end_token": 1574,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      284,
      5412,
      39354,
      4560,
      11,
      2219,
      287,
      10373,
      18931,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators to handle asynchronous operations, common in ML logging."
  },
  {
    "line": 358,
    "text": "            **{k: v for k, v in os.environ.items() if k.startswith(\"_QLIB_\")}",
    "annotation": "\ud83e\udde0 ML Signal: Use of **kwargs indicates dynamic parameter handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      90,
      74,
      25,
      410,
      329,
      479,
      11,
      410,
      287,
      28686,
      13,
      268,
      2268,
      13,
      23814,
      3419,
      611,
      479,
      13,
      9688,
      2032,
      342,
      7203,
      62,
      9711,
      9865,
      62,
      4943,
      92
    ],
    "start_token": 1574,
    "end_token": 1615,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      9217,
      8925,
      11507,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of **kwargs indicates dynamic parameter handling"
  },
  {
    "line": 359,
    "text": "        )  # Log necessary environment variables",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      220,
      1303,
      5972,
      3306,
      2858,
      9633
    ],
    "start_token": 1615,
    "end_token": 1629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items"
  },
  {
    "line": 361,
    "text": "",
    "annotation": "\u2705 Best Practice: Descriptive variable names improve readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1629,
    "end_token": 1629,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2935,
      6519,
      425,
      7885,
      3891,
      2987,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Descriptive variable names improve readability"
  },
  {
    "line": 363,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method call with multiple parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1629,
    "end_token": 1637,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call with multiple parameters"
  },
  {
    "line": 365,
    "text": "        So this tries to automatically to log them all.",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorator for asynchronous behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1406,
      428,
      8404,
      284,
      6338,
      284,
      2604,
      606,
      477,
      13
    ],
    "start_token": 1637,
    "end_token": 1654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      1352,
      329,
      39354,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of decorator for asynchronous behavior"
  },
  {
    "line": 365,
    "text": "        So this tries to automatically to log them all.",
    "annotation": "\u2705 Best Practice: Use of decorators for separation of concerns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1406,
      428,
      8404,
      284,
      6338,
      284,
      2604,
      606,
      477,
      13
    ],
    "start_token": 1654,
    "end_token": 1671,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11705,
      2024,
      329,
      14139,
      286,
      4786
    ],
    "label": "best_practice",
    "reason": "Use of decorators for separation of concerns"
  },
  {
    "line": 361,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of **kwargs allows for flexible function arguments",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1671,
    "end_token": 1671,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      3578,
      329,
      12846,
      2163,
      7159
    ],
    "label": "best_practice",
    "reason": "Use of **kwargs allows for flexible function arguments"
  },
  {
    "line": 363,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over kwargs to log metrics",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1671,
    "end_token": 1679,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      479,
      86,
      22046,
      284,
      2604,
      20731
    ],
    "label": "ml_signal",
    "reason": "Iterating over kwargs to log metrics"
  },
  {
    "line": 365,
    "text": "        So this tries to automatically to log them all.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data if 'data' contains sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1406,
      428,
      8404,
      284,
      6338,
      284,
      2604,
      606,
      477,
      13
    ],
    "start_token": 1679,
    "end_token": 1696,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      611,
      705,
      7890,
      6,
      4909,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data if 'data' contains sensitive information"
  },
  {
    "line": 365,
    "text": "        So this tries to automatically to log them all.",
    "annotation": "\u2705 Best Practice: Logging metrics with a client method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1406,
      428,
      8404,
      284,
      6338,
      284,
      2604,
      606,
      477,
      13
    ],
    "start_token": 1696,
    "end_token": 1713,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      20731,
      351,
      257,
      5456,
      2446
    ],
    "label": "best_practice",
    "reason": "Logging metrics with a client method"
  },
  {
    "line": 365,
    "text": "        So this tries to automatically to log them all.",
    "annotation": "\ud83e\udde0 ML Signal: Method for logging artifacts, useful for tracking usage patterns in ML workflows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1406,
      428,
      8404,
      284,
      6338,
      284,
      2604,
      606,
      477,
      13
    ],
    "start_token": 1713,
    "end_token": 1730,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      18931,
      20316,
      11,
      4465,
      329,
      9646,
      8748,
      7572,
      287,
      10373,
      670,
      44041
    ],
    "label": "ml_signal",
    "reason": "Method for logging artifacts, useful for tracking usage patterns in ML workflows"
  },
  {
    "line": 365,
    "text": "        So this tries to automatically to log them all.",
    "annotation": "\u2705 Best Practice: Use of Optional type hint for artifact_path improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1406,
      428,
      8404,
      284,
      6338,
      284,
      2604,
      606,
      477,
      13
    ],
    "start_token": 1730,
    "end_token": 1747,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      32233,
      2099,
      9254,
      329,
      24127,
      62,
      6978,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of Optional type hint for artifact_path improves code readability and maintainability"
  },
  {
    "line": 369,
    "text": "        for cmd, fname in [",
    "annotation": "\ud83e\udde0 ML Signal: Use of asynchronous decorator indicates a pattern of non-blocking operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      23991,
      11,
      277,
      3672,
      287,
      685
    ],
    "start_token": 1747,
    "end_token": 1761,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39354,
      11705,
      1352,
      9217,
      257,
      3912,
      286,
      1729,
      12,
      41938,
      4560
    ],
    "label": "ml_signal",
    "reason": "Use of asynchronous decorator indicates a pattern of non-blocking operations"
  },
  {
    "line": 370,
    "text": "            (\"git diff\", \"code_diff.txt\"),",
    "annotation": "\u2705 Best Practice: Decorator pattern used for adding asynchronous behavior, enhancing code modularity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      18300,
      814,
      1600,
      366,
      8189,
      62,
      26069,
      13,
      14116,
      12340
    ],
    "start_token": 1761,
    "end_token": 1783,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      3912,
      973,
      329,
      4375,
      39354,
      4069,
      11,
      27496,
      2438,
      26507,
      414
    ],
    "label": "best_practice",
    "reason": "Decorator pattern used for adding asynchronous behavior, enhancing code modularity"
  },
  {
    "line": 367,
    "text": "        # TODO: the sub-directories maybe git repos.",
    "annotation": "\u2705 Best Practice: Use of **kwargs allows for flexible function arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      16926,
      46,
      25,
      262,
      850,
      12,
      12942,
      1749,
      3863,
      17606,
      1128,
      418,
      13
    ],
    "start_token": 1783,
    "end_token": 1804,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      3578,
      329,
      12846,
      2163,
      7159
    ],
    "label": "best_practice",
    "reason": "Use of **kwargs allows for flexible function arguments"
  },
  {
    "line": 369,
    "text": "        for cmd, fname in [",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      23991,
      11,
      277,
      3672,
      287,
      685
    ],
    "start_token": 1804,
    "end_token": 1818,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items is a common pattern"
  },
  {
    "line": 371,
    "text": "            (\"git status\", \"code_status.txt\"),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if self.client.set_tag does not handle inputs safely",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      18300,
      3722,
      1600,
      366,
      8189,
      62,
      13376,
      13,
      14116,
      12340
    ],
    "start_token": 1818,
    "end_token": 1840,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      2116,
      13,
      16366,
      13,
      2617,
      62,
      12985,
      857,
      407,
      5412,
      17311,
      11512
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if self.client.set_tag does not handle inputs safely"
  },
  {
    "line": 371,
    "text": "            (\"git status\", \"code_status.txt\"),",
    "annotation": "\u2705 Best Practice: Iterating over variable arguments allows for flexible input handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      18300,
      3722,
      1600,
      366,
      8189,
      62,
      13376,
      13,
      14116,
      12340
    ],
    "start_token": 1840,
    "end_token": 1862,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40806,
      803,
      625,
      7885,
      7159,
      3578,
      329,
      12846,
      5128,
      9041,
      13
    ],
    "label": "best_practice",
    "reason": "Iterating over variable arguments allows for flexible input handling."
  },
  {
    "line": 373,
    "text": "        ]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a client object to perform operations, indicating a possible API interaction pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361,
      25
    ],
    "start_token": 1862,
    "end_token": 1871,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      5456,
      2134,
      284,
      1620,
      4560,
      11,
      12739,
      257,
      1744,
      7824,
      10375,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a client object to perform operations, indicating a possible API interaction pattern."
  },
  {
    "line": 374,
    "text": "            try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for improper handling of exceptions if the delete_tag method fails.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 1871,
    "end_token": 1884,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      18992,
      9041,
      286,
      13269,
      611,
      262,
      12233,
      62,
      12985,
      2446,
      10143,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for improper handling of exceptions if the delete_tag method fails."
  },
  {
    "line": 374,
    "text": "            try:",
    "annotation": "\u2705 Best Practice: Check for None to ensure the attribute is set before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 1884,
    "end_token": 1897,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      284,
      4155,
      262,
      11688,
      318,
      900,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Check for None to ensure the attribute is set before use"
  },
  {
    "line": 377,
    "text": "            except subprocess.CalledProcessError:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic ValueError without specific error handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      850,
      14681,
      13,
      34,
      4262,
      18709,
      12331,
      25
    ],
    "start_token": 1897,
    "end_token": 1917,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      11052,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic ValueError without specific error handling"
  },
  {
    "line": 381,
    "text": "        assert status in [",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled in optimized mode, leading to potential issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      3722,
      287,
      685
    ],
    "start_token": 1917,
    "end_token": 1928,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      287,
      23392,
      4235,
      11,
      3756,
      284,
      2785,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled in optimized mode, leading to potential issues."
  },
  {
    "line": 382,
    "text": "            Recorder.STATUS_S,",
    "annotation": "\u2705 Best Practice: Consider using exception handling instead of assert for better error management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3311,
      2875,
      13,
      35744,
      2937,
      62,
      50,
      11
    ],
    "start_token": 1928,
    "end_token": 1947,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      6631,
      9041,
      2427,
      286,
      6818,
      329,
      1365,
      4049,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using exception handling instead of assert for better error management."
  },
  {
    "line": 384,
    "text": "            Recorder.STATUS_FI,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a client to list artifacts, indicating interaction with an external system or service.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3311,
      2875,
      13,
      35744,
      2937,
      62,
      11674,
      11
    ],
    "start_token": 1947,
    "end_token": 1966,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      5456,
      284,
      1351,
      20316,
      11,
      12739,
      10375,
      351,
      281,
      7097,
      1080,
      393,
      2139,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a client to list artifacts, indicating interaction with an external system or service."
  },
  {
    "line": 386,
    "text": "        ], f\"The status type {status} is not supported.\"",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used to extract paths from artifacts, indicating data transformation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589,
      277,
      1,
      464,
      3722,
      2099,
      1391,
      13376,
      92,
      318,
      407,
      4855,
      526
    ],
    "start_token": 1966,
    "end_token": 1986,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      284,
      7925,
      13532,
      422,
      20316,
      11,
      12739,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "List comprehension used to extract paths from artifacts, indicating data transformation."
  },
  {
    "line": 384,
    "text": "            Recorder.STATUS_FI,",
    "annotation": "\ud83e\udde0 ML Signal: Method signature with type hints indicates expected input and output types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3311,
      2875,
      13,
      35744,
      2937,
      62,
      11674,
      11
    ],
    "start_token": 1986,
    "end_token": 2005,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      351,
      2099,
      20269,
      9217,
      2938,
      5128,
      290,
      5072,
      3858
    ],
    "label": "ml_signal",
    "reason": "Method signature with type hints indicates expected input and output types"
  },
  {
    "line": 385,
    "text": "            Recorder.STATUS_FA,",
    "annotation": "\u2705 Best Practice: Use of Optional for dst_path indicates that the parameter is not required",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3311,
      2875,
      13,
      35744,
      2937,
      62,
      7708,
      11
    ],
    "start_token": 2005,
    "end_token": 2024,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      32233,
      329,
      29636,
      62,
      6978,
      9217,
      326,
      262,
      11507,
      318,
      407,
      2672
    ],
    "label": "best_practice",
    "reason": "Use of Optional for dst_path indicates that the parameter is not required"
  },
  {
    "line": 387,
    "text": "        self.end_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")",
    "annotation": "\ud83e\udde0 ML Signal: Delegating functionality to another method (self.client.download_artifacts)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437,
      62,
      2435,
      796,
      4818,
      8079,
      13,
      2197,
      22446,
      2536,
      31387,
      7203,
      4,
      56,
      12,
      4,
      76,
      12,
      4,
      67,
      4064,
      39,
      25,
      4,
      44,
      25,
      4,
      50,
      4943
    ],
    "start_token": 2024,
    "end_token": 2062,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1024,
      1455,
      803,
      11244,
      284,
      1194,
      2446,
      357,
      944,
      13,
      16366,
      13,
      15002,
      62,
      50179,
      8
    ],
    "label": "ml_signal",
    "reason": "Delegating functionality to another method (self.client.download_artifacts)"
  },
  {
    "line": 388,
    "text": "        if self.status != Recorder.STATUS_S:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for improper handling of file paths leading to path traversal",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      13376,
      14512,
      3311,
      2875,
      13,
      35744,
      2937,
      62,
      50,
      25
    ],
    "start_token": 2062,
    "end_token": 2082,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      18992,
      9041,
      286,
      2393,
      13532,
      3756,
      284,
      3108,
      33038,
      282
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for improper handling of file paths leading to path traversal"
  },
  {
    "line": 386,
    "text": "        ], f\"The status type {status} is not supported.\"",
    "annotation": "\ud83e\udde0 ML Signal: Method accessing client to retrieve run data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589,
      277,
      1,
      464,
      3722,
      2099,
      1391,
      13376,
      92,
      318,
      407,
      4855,
      526
    ],
    "start_token": 2082,
    "end_token": 2102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22534,
      5456,
      284,
      19818,
      1057,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method accessing client to retrieve run data"
  },
  {
    "line": 388,
    "text": "        if self.status != Recorder.STATUS_S:",
    "annotation": "\ud83e\udde0 ML Signal: Client method call to get run by ID",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      13376,
      14512,
      3311,
      2875,
      13,
      35744,
      2937,
      62,
      50,
      25
    ],
    "start_token": 2102,
    "end_token": 2122,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20985,
      2446,
      869,
      284,
      651,
      1057,
      416,
      4522
    ],
    "label": "ml_signal",
    "reason": "Client method call to get run by ID"
  },
  {
    "line": 390,
    "text": "        if self.async_log is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing metrics from run data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      292,
      13361,
      62,
      6404,
      318,
      407,
      6045,
      25
    ],
    "start_token": 2122,
    "end_token": 2140,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      20731,
      422,
      1057,
      1366
    ],
    "label": "ml_signal",
    "reason": "Accessing metrics from run data"
  },
  {
    "line": 389,
    "text": "            self.status = status",
    "annotation": "\ud83e\udde0 ML Signal: Method accessing client to retrieve run data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      13376,
      796,
      3722
    ],
    "start_token": 2140,
    "end_token": 2156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22534,
      5456,
      284,
      19818,
      1057,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method accessing client to retrieve run data"
  },
  {
    "line": 391,
    "text": "            # Waiting Queue should go before mlflow.end_run. Otherwise mlflow will raise error",
    "annotation": "\ud83e\udde0 ML Signal: Accessing external client to get run information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      39669,
      4670,
      518,
      815,
      467,
      878,
      285,
      1652,
      9319,
      13,
      437,
      62,
      5143,
      13,
      15323,
      285,
      1652,
      9319,
      481,
      5298,
      4049
    ],
    "start_token": 2156,
    "end_token": 2189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      7097,
      5456,
      284,
      651,
      1057,
      1321
    ],
    "label": "ml_signal",
    "reason": "Accessing external client to get run information"
  },
  {
    "line": 393,
    "text": "                self.async_log.wait()",
    "annotation": "\ud83e\udde0 ML Signal: Returning parameters from run data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      292,
      13361,
      62,
      6404,
      13,
      17077,
      3419
    ],
    "start_token": 2189,
    "end_token": 2213,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      10007,
      422,
      1057,
      1366
    ],
    "label": "ml_signal",
    "reason": "Returning parameters from run data"
  },
  {
    "line": 392,
    "text": "            with TimeInspector.logt(\"waiting `async_log`\"):",
    "annotation": "\ud83e\udde0 ML Signal: Method accessing a client's run data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      3862,
      818,
      4443,
      273,
      13,
      6404,
      83,
      7203,
      10247,
      1780,
      4600,
      292,
      13361,
      62,
      6404,
      63,
      1,
      2599
    ],
    "start_token": 2213,
    "end_token": 2243,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22534,
      257,
      5456,
      338,
      1057,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method accessing a client's run data"
  },
  {
    "line": 394,
    "text": "        self.async_log = None",
    "annotation": "\ud83e\udde0 ML Signal: Fetching a run object using a client",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      292,
      13361,
      62,
      6404,
      796,
      6045
    ],
    "start_token": 2243,
    "end_token": 2258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      257,
      1057,
      2134,
      1262,
      257,
      5456
    ],
    "label": "ml_signal",
    "reason": "Fetching a run object using a client"
  },
  {
    "line": 394,
    "text": "        self.async_log = None",
    "annotation": "\ud83e\udde0 ML Signal: Accessing tags from run data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      292,
      13361,
      62,
      6404,
      796,
      6045
    ],
    "start_token": 2258,
    "end_token": 2273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      15940,
      422,
      1057,
      1366
    ],
    "label": "ml_signal",
    "reason": "Accessing tags from run data"
  }
]
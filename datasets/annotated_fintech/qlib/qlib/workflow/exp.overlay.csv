annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of type hints improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,7,best_practice,2,Use of type hints improves code readability and maintainability.,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Importing specific classes or functions helps avoid namespace pollution.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 393, 5499, 5419, 3368, 25745, 12231, 13]",0.5,17,best_practice,5,Importing specific classes or functions helps avoid namespace pollution.,,7,from qlib.typehint import Literal,"[6738, 10662, 8019, 13, 4906, 71, 600, 1330, 25659, 1691]"
üß† ML Signal: Importing mlflow indicates usage of ML experiment tracking.,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 285, 1652, 9319, 9217, 8748, 286, 10373, 6306, 9646, 13]",0.5,29,ml_signal,8,Importing mlflow indicates usage of ML experiment tracking.,,17,from mlflow.exceptions import MlflowException,"[6738, 285, 1652, 9319, 13, 1069, 11755, 1330, 337, 1652, 9319, 16922]"
‚úÖ Best Practice: Importing specific classes or functions helps avoid namespace pollution.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 393, 5499, 5419, 3368, 25745, 12231, 13]",0.5,39,best_practice,10,Importing specific classes or functions helps avoid namespace pollution.,,29,from ..log import get_module_logger,"[6738, 11485, 6404, 1330, 651, 62, 21412, 62, 6404, 1362]"
‚úÖ Best Practice: Importing specific exceptions allows for more precise error handling.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 13269, 3578, 329, 517, 7141, 4049, 9041, 13]",0.5,39,best_practice,14,Importing specific exceptions allows for more precise error handling.,,39,,[]
‚úÖ Best Practice: Importing specific classes or functions helps avoid namespace pollution.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 393, 5499, 5419, 3368, 25745, 12231, 13]",0.5,66,best_practice,17,Importing specific classes or functions helps avoid namespace pollution.,,39,    This is the `Experiment` class for each experiment being run. The API is designed similar to mlflow.,"[220, 220, 220, 770, 318, 262, 4600, 20468, 3681, 63, 1398, 329, 1123, 6306, 852, 1057, 13, 383, 7824, 318, 3562, 2092, 284, 285, 1652, 9319, 13]"
‚úÖ Best Practice: Use of a logging utility function promotes consistent logging practices.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 18931, 10361, 2163, 21068, 6414, 18931, 6593, 13]",0.5,66,best_practice,20,Use of a logging utility function promotes consistent logging practices.,,66,,[]
üß† ML Signal: Use of a logger suggests tracking of workflow execution details.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 49706, 5644, 9646, 286, 30798, 9706, 3307, 13]",0.5,78,ml_signal,22,Use of a logger suggests tracking of workflow execution details.,,66,        self.id = id,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 312, 796, 4686]"
‚úÖ Best Practice: Using a logger instead of print statements is a best practice for production code.,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 2427, 286, 3601, 6299, 318, 257, 1266, 3357, 329, 3227, 2438, 13]",0.5,102,best_practice,24,Using a logger instead of print statements is a best practice for production code.,,78,        self.active_recorder = None  # only one recorder can run each time,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 8344, 2875, 796, 6045, 220, 1303, 691, 530, 38156, 460, 1057, 1123, 640]"
üß† ML Signal: Class docstring provides context and usage pattern for ML model training,"[8582, 100, 254, 10373, 26484, 25, 5016, 2205, 8841, 3769, 4732, 290, 8748, 3912, 329, 10373, 2746, 3047]",1.0,102,ml_signal,14,Class docstring provides context and usage pattern for ML model training,,102,,[]
üß† ML Signal: Constructor method for initializing object attributes,"[8582, 100, 254, 10373, 26484, 25, 28407, 273, 2446, 329, 4238, 2890, 2134, 12608]",1.0,105,ml_signal,15,Constructor method for initializing object attributes,,102,class Experiment:,"[4871, 29544, 25]"
üß† ML Signal: Storing user or object identifiers,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2836, 393, 2134, 42814]",0.5,132,ml_signal,17,Storing user or object identifiers,,105,    This is the `Experiment` class for each experiment being run. The API is designed similar to mlflow.,"[220, 220, 220, 770, 318, 262, 4600, 20468, 3681, 63, 1398, 329, 1123, 6306, 852, 1057, 13, 383, 7824, 318, 3562, 2092, 284, 285, 1652, 9319, 13]"
‚úÖ Best Practice: Initialize attributes in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 12608, 287, 262, 23772]",1.0,136,best_practice,19,Initialize attributes in the constructor,,132,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of a private attribute with a leading underscore,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 11688, 351, 257, 3756, 44810]",0.5,150,best_practice,21,Use of a private attribute with a leading underscore,,136,"    def __init__(self, id, name):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4686, 11, 1438, 2599]"
‚úÖ Best Practice: Use __repr__ for unambiguous object representation,"[26486, 227, 6705, 19939, 25, 5765, 11593, 260, 1050, 834, 329, 42053, 29709, 2134, 10552]",0.5,154,best_practice,19,Use __repr__ for unambiguous object representation,,150,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use format for string formatting for better readability,"[26486, 227, 6705, 19939, 25, 5765, 5794, 329, 4731, 33313, 329, 1365, 1100, 1799]",1.0,168,best_practice,21,Use format for string formatting for better readability,,154,"    def __init__(self, id, name):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4686, 11, 1438, 2599]"
‚úÖ Best Practice: Use of __str__ method for string representation of objects,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 2536, 834, 2446, 329, 4731, 10552, 286, 5563]",1.0,180,best_practice,22,Use of __str__ method for string representation of objects,,168,        self.id = id,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 312, 796, 4686]"
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",1.0,202,best_practice,25,Use of @property decorator for getter method,,180,"        self._default_rec_name = ""abstract_recorder""","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12286, 62, 8344, 62, 3672, 796, 366, 397, 8709, 62, 8344, 2875, 1]"
üß† ML Signal: Method to gather and return structured information about an object,"[8582, 100, 254, 10373, 26484, 25, 11789, 284, 6431, 290, 1441, 20793, 1321, 546, 281, 2134]",0.5,224,ml_signal,25,Method to gather and return structured information about an object,,202,"        self._default_rec_name = ""abstract_recorder""","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12286, 62, 8344, 62, 3672, 796, 366, 397, 8709, 62, 8344, 2875, 1]"
‚úÖ Best Practice: Use of descriptive keys in the dictionary for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 8251, 287, 262, 22155, 329, 16287]",0.5,271,best_practice,28,Use of descriptive keys in the dictionary for clarity,,224,"        return ""{name}(id={id}, info={info})"".format(name=self.__class__.__name__, id=self.id, info=self.info)","[220, 220, 220, 220, 220, 220, 220, 1441, 45144, 3672, 92, 7, 312, 34758, 312, 5512, 7508, 34758, 10951, 30072, 1911, 18982, 7, 3672, 28, 944, 13, 834, 4871, 834, 13, 834, 3672, 834, 11, 4686, 28, 944, 13, 312, 11, 7508, 28, 944, 13, 10951, 8]"
üß† ML Signal: Accessing object attributes to populate a dictionary,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2134, 12608, 284, 48040, 257, 22155]",1.0,281,ml_signal,30,Accessing object attributes to populate a dictionary,,271,    def __str__(self):,"[220, 220, 220, 825, 11593, 2536, 834, 7, 944, 2599]"
‚úÖ Best Practice: Use of conditional expression for concise code,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 329, 35327, 2438]",0.5,286,best_practice,33,Use of conditional expression for concise code,,281,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Collecting keys from a dictionary to form a list,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 8251, 422, 257, 22155, 284, 1296, 257, 1351]",1.0,294,ml_signal,34,Collecting keys from a dictionary to form a list,,286,    def info(self):,"[220, 220, 220, 825, 7508, 7, 944, 2599]"
üß† ML Signal: Use of optional parameters with default values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11902, 10007, 351, 4277, 3815]",0.5,302,ml_signal,34,Use of optional parameters with default values,,294,    def info(self):,"[220, 220, 220, 825, 7508, 7, 944, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Method not implemented, potential for misuse if not overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 407, 9177, 11, 2785, 329, 29169, 611, 407, 23170, 4651]",0.5,311,sast_risk,49,"Method not implemented, potential for misuse if not overridden",Low,302,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",1.0,323,best_practice,50,Include a docstring to describe the method's purpose and parameters,,311,        recorder_id : str,"[220, 220, 220, 220, 220, 220, 220, 38156, 62, 312, 1058, 965]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, indicating it's intended to be overridden, but could lead to runtime errors if not handled properly","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 340, 338, 5292, 284, 307, 23170, 4651, 11, 475, 714, 1085, 284, 19124, 8563, 611, 407, 12118, 6105]",1.0,331,sast_risk,58,"Method raises NotImplementedError, indicating it's intended to be overridden, but could lead to runtime errors if not handled properly",Low,323,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Docstring provides clear documentation of parameters and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 10007, 290, 1441, 1988]",0.5,342,best_practice,59,Docstring provides clear documentation of parameters and return value,,331,        An active recorder.,"[220, 220, 220, 220, 220, 220, 220, 1052, 4075, 38156, 13]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, indicating it's a placeholder and should be implemented","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 340, 338, 257, 46076, 290, 815, 307, 9177]",0.5,381,sast_risk,70,"Method raises NotImplementedError, indicating it's a placeholder and should be implemented",Low,342,"            the status the recorder to be set with when ending (SCHEDULED, RUNNING, FINISHED, FAILED).","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 3722, 262, 38156, 284, 307, 900, 351, 618, 7464, 357, 50, 3398, 1961, 6239, 1961, 11, 32494, 15871, 11, 33642, 18422, 1961, 11, 9677, 4146, 1961, 737]"
"üß† ML Signal: Use of **kwargs indicates flexible function inputs, common in dynamic data processing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12429, 46265, 22046, 9217, 12846, 2163, 17311, 11, 2219, 287, 8925, 1366, 7587]",0.5,389,ml_signal,71,"Use of **kwargs indicates flexible function inputs, common in dynamic data processing",,381,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"‚ö†Ô∏è SAST Risk (Low): Method not implemented, potential for misuse if called without implementation","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 407, 9177, 11, 2785, 329, 29169, 611, 1444, 1231, 7822]",0.5,389,sast_risk,82,"Method not implemented, potential for misuse if called without implementation",Low,389,,[]
‚úÖ Best Practice: Use of NotImplementedError to indicate abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 12531, 2446]",0.5,397,best_practice,83,Use of NotImplementedError to indicate abstract method,,389,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚úÖ Best Practice: Docstring provides a clear description of the method and its parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 290, 663, 10007]",1.0,405,best_practice,83,Docstring provides a clear description of the method and its parameters,,397,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,429,sast_risk,91,"Method is not implemented, which could lead to runtime errors if called",Low,405,        Get a pandas DataFrame of records that fit the search criteria of the experiment.,"[220, 220, 220, 220, 220, 220, 220, 3497, 257, 19798, 292, 6060, 19778, 286, 4406, 326, 4197, 262, 2989, 9987, 286, 262, 6306, 13]"
‚úÖ Best Practice: Docstring provides detailed explanation of method behavior and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 7468, 286, 2446, 4069, 290, 10007]",1.0,447,best_practice,92,Docstring provides detailed explanation of method behavior and parameters,,429,        Inputs are the search criteria user want to apply.,"[220, 220, 220, 220, 220, 220, 220, 23412, 82, 389, 262, 2989, 9987, 2836, 765, 284, 4174, 13]"
‚úÖ Best Practice: Checks for both recorder_id and recorder_name being None,"[26486, 227, 6705, 19939, 25, 47719, 329, 1111, 38156, 62, 312, 290, 38156, 62, 3672, 852, 6045]",1.0,447,best_practice,127,Checks for both recorder_id and recorder_name being None,,447,,[]
‚úÖ Best Practice: Returns active recorder if available,"[26486, 227, 6705, 19939, 25, 16409, 4075, 38156, 611, 1695]",0.5,447,best_practice,129,Returns active recorder if available,,447,,[]
‚úÖ Best Practice: Assigns default recorder name if none provided,"[26486, 227, 6705, 19939, 25, 2195, 570, 82, 4277, 38156, 1438, 611, 4844, 2810]",0.5,474,best_practice,130,Assigns default recorder name if none provided,,447,"                * no id or name specified, create a new recorder.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1635, 645, 4686, 393, 1438, 7368, 11, 2251, 257, 649, 38156, 13]"
üß† ML Signal: Conditional logic based on 'create' flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 17953, 6, 6056]",1.0,474,ml_signal,132,Conditional logic based on 'create' flag,,474,,[]
üß† ML Signal: Conditional logic based on 'create' flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 17953, 6, 6056]",1.0,501,ml_signal,137,Conditional logic based on 'create' flag,,474,"                * no id or name specified, return the active recorder.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1635, 645, 4686, 393, 1438, 7368, 11, 1441, 262, 4075, 38156, 13]"
üß† ML Signal: Conditional logic based on 'is_new' and 'start' flags,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 271, 62, 3605, 6, 290, 705, 9688, 6, 9701]",1.0,501,ml_signal,141,Conditional logic based on 'is_new' and 'start' flags,,501,,[]
‚úÖ Best Practice: Use of try-except block to handle exceptions and ensure robustness.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1949, 12, 16341, 2512, 284, 5412, 13269, 290, 4155, 12373, 1108, 13]",1.0,509,best_practice,145,Use of try-except block to handle exceptions and ensure robustness.,,501,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Check for both recorder_id and recorder_name being None to set a default name.,"[26486, 227, 6705, 19939, 25, 6822, 329, 1111, 38156, 62, 312, 290, 38156, 62, 3672, 852, 6045, 284, 900, 257, 4277, 1438, 13]",0.5,521,best_practice,147,Check for both recorder_id and recorder_name being None to set a default name.,,509,        recorder_id : str,"[220, 220, 220, 220, 220, 220, 220, 38156, 62, 312, 1058, 965]"
üß† ML Signal: Pattern of retrieving an object by ID or name.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 50122, 281, 2134, 416, 4522, 393, 1438, 13]",0.5,531,ml_signal,153,Pattern of retrieving an object by ID or name.,,521,        start : boolean,"[220, 220, 220, 220, 220, 220, 220, 923, 1058, 25131]"
‚ö†Ô∏è SAST Risk (Low): Catching a broad exception type like ValueError without specific handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 257, 3154, 6631, 2099, 588, 11052, 12331, 1231, 2176, 9041, 13]",0.5,531,sast_risk,155,Catching a broad exception type like ValueError without specific handling.,Low,531,,[]
‚úÖ Best Practice: Ensure recorder_name is set to a default if not provided.,"[26486, 227, 6705, 19939, 25, 48987, 38156, 62, 3672, 318, 900, 284, 257, 4277, 611, 407, 2810, 13]",0.5,539,best_practice,157,Ensure recorder_name is set to a default if not provided.,,531,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
üß† ML Signal: Logging information about object creation.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 2134, 6282, 13]",1.0,550,ml_signal,158,Logging information about object creation.,,539,        A recorder object.,"[220, 220, 220, 220, 220, 220, 220, 317, 38156, 2134, 13]"
üß† ML Signal: Pattern of creating a new object when retrieval fails.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 257, 649, 2134, 618, 45069, 10143, 13]",0.5,561,ml_signal,158,Pattern of creating a new object when retrieval fails.,,550,        A recorder object.,"[220, 220, 220, 220, 220, 220, 220, 317, 38156, 2134, 13]"
"‚úÖ Best Practice: Use of docstring to describe method functionality, parameters, and exceptions","[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 2446, 11244, 11, 10007, 11, 290, 13269]",0.5,572,best_practice,158,"Use of docstring to describe method functionality, parameters, and exceptions",,561,        A recorder object.,"[220, 220, 220, 220, 220, 220, 220, 317, 38156, 2134, 13]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,594,sast_risk,175,"Method is not implemented, which could lead to runtime errors if called",Low,572,            self.active_recorder.start_run(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 8344, 2875, 13, 9688, 62, 5143, 3419]"
"üß† ML Signal: Use of constants for data types, which could indicate a pattern in data handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 329, 1366, 3858, 11, 543, 714, 7603, 257, 3912, 287, 1366, 9041]",0.5,594,ml_signal,177,"Use of constants for data types, which could indicate a pattern in data handling",,594,,[]
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,625,best_practice,180,Use of type hints for function parameters and return type improves code readability and maintainability.,,594,"        Method for getting or creating a recorder. It will try to first get a valid recorder, if exception occurs, it will","[220, 220, 220, 220, 220, 220, 220, 11789, 329, 1972, 393, 4441, 257, 38156, 13, 632, 481, 1949, 284, 717, 651, 257, 4938, 38156, 11, 611, 6631, 8833, 11, 340, 481]"
"‚ö†Ô∏è SAST Risk (Low): The method is not implemented, which could lead to runtime errors if called.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 2446, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444, 13]",1.0,625,sast_risk,195,"The method is not implemented, which could lead to runtime errors if called.",Low,625,,[]
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,625,best_practice,199,Class docstring provides a brief description of the class purpose.,,625,,[]
‚úÖ Best Practice: Call to superclass initializer ensures proper inheritance,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 24155]",1.0,633,best_practice,200,Call to superclass initializer ensures proper inheritance,,625,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Storing URI for MLflow tracking,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 43975, 329, 10373, 11125, 9646]",0.5,644,ml_signal,202,Storing URI for MLflow tracking,,633,        recorder_id :,"[220, 220, 220, 220, 220, 220, 220, 38156, 62, 312, 1058]"
üß† ML Signal: Default recorder name for MLflow experiments,"[8582, 100, 254, 10373, 26484, 25, 15161, 38156, 1438, 329, 10373, 11125, 10256]",1.0,655,ml_signal,204,Default recorder name for MLflow experiments,,644,        recorder_name :,"[220, 220, 220, 220, 220, 220, 220, 38156, 62, 3672, 1058]"
üß† ML Signal: Instantiating MLflow client for tracking,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 10373, 11125, 5456, 329, 9646]",1.0,655,ml_signal,206,Instantiating MLflow client for tracking,,655,,[]
‚úÖ Best Practice: Implementing __repr__ for better debugging and logging,"[26486, 227, 6705, 19939, 25, 48282, 278, 11593, 260, 1050, 834, 329, 1365, 28769, 290, 18931]",0.5,666,best_practice,204,Implementing __repr__ for better debugging and logging,,655,        recorder_name :,"[220, 220, 220, 220, 220, 220, 220, 38156, 62, 3672, 1058]"
‚úÖ Best Practice: Using format for string formatting improves readability,"[26486, 227, 6705, 19939, 25, 8554, 5794, 329, 4731, 33313, 19575, 1100, 1799]",1.0,666,best_practice,206,Using format for string formatting improves readability,,666,,[]
üß† ML Signal: Logging experiment start can be used to track experiment lifecycle events.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 6306, 923, 460, 307, 973, 284, 2610, 6306, 3868, 47510, 2995, 13]",1.0,674,ml_signal,207,Logging experiment start can be used to track experiment lifecycle events.,,666,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚úÖ Best Practice: Use of default values for parameters improves function flexibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 3815, 329, 10007, 19575, 2163, 13688, 13]",0.5,688,best_practice,210,Use of default values for parameters improves function flexibility.,,674,            The searched recorder,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 16499, 38156]"
‚úÖ Best Practice: Conditional logic for resuming or creating a recorder enhances functionality.,"[26486, 227, 6705, 19939, 25, 9724, 1859, 9156, 329, 581, 12595, 393, 4441, 257, 38156, 32479, 11244, 13]",0.5,696,best_practice,213,Conditional logic for resuming or creating a recorder enhances functionality.,,688,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
üß† ML Signal: Tracking active recorder can be useful for monitoring and managing experiment states.,"[8582, 100, 254, 10373, 26484, 25, 37169, 4075, 38156, 460, 307, 4465, 329, 9904, 290, 11149, 6306, 2585, 13]",0.5,696,ml_signal,217,Tracking active recorder can be useful for monitoring and managing experiment states.,,696,,[]
üß† ML Signal: Starting a recorder run is a key event in experiment management.,"[8582, 100, 254, 10373, 26484, 25, 17962, 257, 38156, 1057, 318, 257, 1994, 1785, 287, 6306, 4542, 13]",0.5,711,ml_signal,219,Starting a recorder run is a key event in experiment management.,,696,"    RT_L = ""list""  # return type list","[220, 220, 220, 11923, 62, 43, 796, 366, 4868, 1, 220, 1303, 1441, 2099, 1351]"
üß† ML Signal: Returning the active recorder allows for further interaction and monitoring.,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 4075, 38156, 3578, 329, 2252, 10375, 290, 9904, 13]",0.5,720,ml_signal,221,Returning the active recorder allows for further interaction and monitoring.,,711,    def list_recorders(,"[220, 220, 220, 825, 1351, 62, 8344, 6361, 7]"
‚úÖ Best Practice: Check if active_recorder is not None before calling end_run,"[26486, 227, 6705, 19939, 25, 6822, 611, 4075, 62, 8344, 2875, 318, 407, 6045, 878, 4585, 886, 62, 5143]",1.0,735,best_practice,218,Check if active_recorder is not None before calling end_run,,720,"    RT_D = ""dict""  # return type dict","[220, 220, 220, 11923, 62, 35, 796, 366, 11600, 1, 220, 1303, 1441, 2099, 8633]"
üß† ML Signal: Method call on an object attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11688]",1.0,735,ml_signal,220,Method call on an object attribute,,735,,[]
üß† ML Signal: Setting an object attribute to None,"[8582, 100, 254, 10373, 26484, 25, 25700, 281, 2134, 11688, 284, 6045]",1.0,766,ml_signal,222,Setting an object attribute to None,,735,"        self, rtype: Literal[""dict"", ""list""] = RT_D, **flt_kwargs","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 374, 4906, 25, 25659, 1691, 14692, 11600, 1600, 366, 4868, 8973, 796, 11923, 62, 35, 11, 12429, 69, 2528, 62, 46265, 22046]"
‚úÖ Best Practice: Use of default parameter value for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 13688]",1.0,775,best_practice,221,Use of default parameter value for flexibility,,766,    def list_recorders(,"[220, 220, 220, 825, 1351, 62, 8344, 6361, 7]"
‚úÖ Best Practice: Check for None to assign a default value,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 8333, 257, 4277, 1988]",0.5,796,best_practice,223,Check for None to assign a default value,,775,"    ) -> Union[List[Recorder], Dict[str, Recorder]]:","[220, 220, 220, 1267, 4613, 4479, 58, 8053, 58, 6690, 2875, 4357, 360, 713, 58, 2536, 11, 3311, 2875, 60, 5974]"
üß† ML Signal: Instantiation of MLflowRecorder with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 10373, 11125, 6690, 2875, 351, 2176, 10007]",0.5,833,ml_signal,226,Instantiation of MLflowRecorder with specific parameters,,796,"        If user want to use the method `R.list_recorders()`, please refer to the related API document in `QlibRecorder`.","[220, 220, 220, 220, 220, 220, 220, 1002, 2836, 765, 284, 779, 262, 2446, 4600, 49, 13, 4868, 62, 8344, 6361, 3419, 47671, 3387, 3522, 284, 262, 3519, 7824, 3188, 287, 4600, 48, 8019, 6690, 2875, 44646]"
üß† ML Signal: Returning an instance of a recorder object,"[8582, 100, 254, 10373, 26484, 25, 42882, 281, 4554, 286, 257, 38156, 2134]",0.5,833,ml_signal,227,Returning an instance of a recorder object,,833,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,841,sast_risk,233,Use of assert for input validation can be bypassed if Python is run with optimizations,Low,833,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
üß† ML Signal: Usage of MLflow client to get a run by ID,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10373, 11125, 5456, 284, 651, 257, 1057, 416, 4522]",0.5,849,ml_signal,239,Usage of MLflow client to get a run by ID,,841,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Instantiation of MLflowRecorder with a run,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 10373, 11125, 6690, 2875, 351, 257, 1057]",0.5,876,ml_signal,240,Instantiation of MLflowRecorder with a run,,849,"        raise NotImplementedError(f""Please implement the `list_recorders` method."")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 4868, 62, 8344, 6361, 63, 2446, 19570]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without specific error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 2176, 4049, 9041]",0.5,887,sast_risk,245,Raising a generic ValueError without specific error handling,Low,876,    Use mlflow to implement Experiment.,"[220, 220, 220, 5765, 285, 1652, 9319, 284, 3494, 29544, 13]"
‚úÖ Best Practice: Logging a warning message for potential non-unique recorder names,"[26486, 227, 6705, 19939, 25, 5972, 2667, 257, 6509, 3275, 329, 2785, 1729, 12, 34642, 38156, 3891]",0.5,900,best_practice,250,Logging a warning message for potential non-unique recorder names,,887,        self._uri = uri,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9900, 796, 2956, 72]"
üß† ML Signal: Listing recorders to find one by name,"[8582, 100, 254, 10373, 26484, 25, 7343, 278, 1700, 364, 284, 1064, 530, 416, 1438]",0.5,911,ml_signal,254,Listing recorders to find one by name,,900,    def __repr__(self):,"[220, 220, 220, 825, 11593, 260, 1050, 834, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without specific error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 2176, 4049, 9041]",0.5,923,sast_risk,259,Raising a generic ValueError without specific error handling,Low,911,        # Get or create recorder,"[220, 220, 220, 220, 220, 220, 220, 1303, 3497, 393, 2251, 38156]"
‚úÖ Best Practice: Consider adding a docstring to describe the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007, 13]",0.5,934,best_practice,254,Consider adding a docstring to describe the method's purpose and parameters.,,923,    def __repr__(self):,"[220, 220, 220, 825, 11593, 260, 1050, 834, 7, 944, 2599]"
‚úÖ Best Practice: Use kwargs.get with a default value to handle missing keys gracefully.,"[26486, 227, 6705, 19939, 25, 5765, 479, 86, 22046, 13, 1136, 351, 257, 4277, 1988, 284, 5412, 4814, 8251, 11542, 2759, 13]",0.5,934,best_practice,256,Use kwargs.get with a default value to handle missing keys gracefully.,,934,,[]
‚úÖ Best Practice: Use kwargs.get with a default value to handle missing keys gracefully.,"[26486, 227, 6705, 19939, 25, 5765, 479, 86, 22046, 13, 1136, 351, 257, 4277, 1988, 284, 5412, 4814, 8251, 11542, 2759, 13]",0.5,958,best_practice,258,Use kwargs.get with a default value to handle missing keys gracefully.,,934,"        logger.info(f""Experiment {self.id} starts running ..."")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 20468, 3681, 1391, 944, 13, 312, 92, 4940, 2491, 35713, 8]"
‚úÖ Best Practice: Use kwargs.get with a default value to handle missing keys gracefully.,"[26486, 227, 6705, 19939, 25, 5765, 479, 86, 22046, 13, 1136, 351, 257, 4277, 1988, 284, 5412, 4814, 8251, 11542, 2759, 13]",0.5,972,best_practice,260,Use kwargs.get with a default value to handle missing keys gracefully.,,958,        if recorder_name is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 38156, 62, 3672, 318, 6045, 25]"
‚úÖ Best Practice: Use kwargs.get to handle missing keys gracefully.,"[26486, 227, 6705, 19939, 25, 5765, 479, 86, 22046, 13, 1136, 284, 5412, 4814, 8251, 11542, 2759, 13]",0.5,994,best_practice,261,Use kwargs.get to handle missing keys gracefully.,,972,            recorder_name = self._default_rec_name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 38156, 62, 3672, 796, 2116, 13557, 12286, 62, 8344, 62, 3672]"
"üß† ML Signal: Usage of a client method to search records, indicating interaction with a data source.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 5456, 2446, 284, 2989, 4406, 11, 12739, 10375, 351, 257, 1366, 2723, 13]",0.5,1038,ml_signal,264,"Usage of a client method to search records, indicating interaction with a data source.",,994,"            recorder, _ = self._get_or_create_rec(recorder_id=recorder_id, recorder_name=recorder_name)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 38156, 11, 4808, 796, 2116, 13557, 1136, 62, 273, 62, 17953, 62, 8344, 7, 8344, 2875, 62, 312, 28, 8344, 2875, 62, 312, 11, 38156, 62, 3672, 28, 8344, 2875, 62, 3672, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for large data retrieval with high max_results value.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 1366, 45069, 351, 1029, 3509, 62, 43420, 1988, 13]",0.5,1050,sast_risk,265,Potential for large data retrieval with high max_results value.,Low,1038,        # create a new recorder,"[220, 220, 220, 220, 220, 220, 220, 1303, 2251, 257, 649, 38156]"
‚úÖ Best Practice: Use of assert for input validation ensures that at least one argument is provided.,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 329, 5128, 21201, 19047, 326, 379, 1551, 530, 4578, 318, 2810, 13]",1.0,1064,best_practice,260,Use of assert for input validation ensures that at least one argument is provided.,,1050,        if recorder_name is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 38156, 62, 3672, 318, 6045, 25]"
‚úÖ Best Practice: Assert statement provides a clear error message for invalid input.,"[26486, 227, 6705, 19939, 25, 2195, 861, 2643, 3769, 257, 1598, 4049, 3275, 329, 12515, 5128, 13]",1.0,1086,best_practice,261,Assert statement provides a clear error message for invalid input.,,1064,            recorder_name = self._default_rec_name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 38156, 62, 3672, 796, 2116, 13557, 12286, 62, 8344, 62, 3672]"
üß† ML Signal: Usage of a client method to delete a run by ID.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 5456, 2446, 284, 12233, 257, 1057, 416, 4522, 13]",1.0,1098,ml_signal,268,Usage of a client method to delete a run by ID.,,1086,        # Set up active recorder,"[220, 220, 220, 220, 220, 220, 220, 1303, 5345, 510, 4075, 38156]"
üß† ML Signal: Retrieving a recorder by name before deletion.,"[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 257, 38156, 416, 1438, 878, 39948, 13]",1.0,1116,ml_signal,271,Retrieving a recorder by name before deletion.,,1098,        self.active_recorder.start_run(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5275, 62, 8344, 2875, 13, 9688, 62, 5143, 3419]"
üß† ML Signal: Usage of a client method to delete a run by recorder object.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 5456, 2446, 284, 12233, 257, 1057, 416, 38156, 2134, 13]",1.0,1130,ml_signal,273,Usage of a client method to delete a run by recorder object.,,1116,        return self.active_recorder,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 5275, 62, 8344, 2875]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can mask other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 9335, 584, 2428, 13]",1.0,1150,sast_risk,275,Catching broad exceptions can mask other issues.,Low,1130,"    def end(self, recorder_status=Recorder.STATUS_S):","[220, 220, 220, 825, 886, 7, 944, 11, 38156, 62, 13376, 28, 6690, 2875, 13, 35744, 2937, 62, 50, 2599]"
‚úÖ Best Practice: Constants should be defined in uppercase to distinguish them from variables.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 287, 334, 39921, 589, 284, 15714, 606, 422, 9633, 13]",1.0,1167,best_practice,280,Constants should be defined in uppercase to distinguish them from variables.,,1150,"    def create_recorder(self, recorder_name=None):","[220, 220, 220, 825, 2251, 62, 8344, 2875, 7, 944, 11, 38156, 62, 3672, 28, 14202, 2599]"
‚úÖ Best Practice: Docstring provides clear documentation for the function and its parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 329, 262, 2163, 290, 663, 10007]",0.5,1189,best_practice,282,Docstring provides clear documentation for the function and its parameters,,1167,            recorder_name = self._default_rec_name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 38156, 62, 3672, 796, 2116, 13557, 12286, 62, 8344, 62, 3672]"
üß† ML Signal: Usage of search_runs method indicates interaction with MLflow for experiment tracking,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2989, 62, 48381, 2446, 9217, 10375, 351, 10373, 11125, 329, 6306, 9646]",0.5,1198,ml_signal,295,Usage of search_runs method indicates interaction with MLflow for experiment tracking,,1189,        assert (,"[220, 220, 220, 220, 220, 220, 220, 6818, 357]"
üß† ML Signal: Instantiation of MLflowRecorder suggests a pattern of wrapping MLflow runs,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 10373, 11125, 6690, 2875, 5644, 257, 3912, 286, 27074, 10373, 11125, 4539]",0.5,1221,ml_signal,303,Instantiation of MLflowRecorder suggests a pattern of wrapping MLflow runs,,1198,            except MlflowException as mlflow_exp:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 337, 1652, 9319, 16922, 355, 285, 1652, 9319, 62, 11201, 25]"
‚úÖ Best Practice: Using dict and zip to create a dictionary from two lists,"[26486, 227, 6705, 19939, 25, 8554, 8633, 290, 19974, 284, 2251, 257, 22155, 422, 734, 8341]",1.0,1236,best_practice,308,Using dict and zip to create a dictionary from two lists,,1221,            logger.warning(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7]"
‚ö†Ô∏è SAST Risk (Low): Use of NotImplementedError for unsupported types is safe but could be more informative,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1892, 3546, 1154, 12061, 12331, 329, 24222, 3858, 318, 3338, 475, 714, 307, 517, 30304]",0.5,1248,sast_risk,310,Use of NotImplementedError for unsupported types is safe but could be more informative,Low,1236,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"

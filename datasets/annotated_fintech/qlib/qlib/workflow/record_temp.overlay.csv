annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of a logger for the module allows for better tracking and debugging of the code execution.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 49706, 329, 262, 8265, 3578, 329, 1365, 9646, 290, 28769, 286, 262, 2438, 9706, 13]",1.0,25,best_practice,19,Use of a logger for the module allows for better tracking and debugging of the code execution.,,0,"from ..utils import fill_placeholder, flatten_dict, class_casting, get_date_by_shift","[6738, 11485, 26791, 1330, 6070, 62, 5372, 13829, 11, 27172, 268, 62, 11600, 11, 1398, 62, 19913, 11, 651, 62, 4475, 62, 1525, 62, 30846]"
‚úÖ Best Practice: Class variables should be initialized with a default value or in the constructor.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 23224, 351, 257, 4277, 1988, 393, 287, 262, 23772, 13]",1.0,25,best_practice,25,Class variables should be initialized with a default value or in the constructor.,,25,,[]
‚úÖ Best Practice: Class variables should be initialized with a default value or in the constructor.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 23224, 351, 257, 4277, 1988, 393, 287, 262, 23772, 13]",1.0,42,best_practice,26,Class variables should be initialized with a default value or in the constructor.,,25,"logger = get_module_logger(""workflow"", logging.INFO)","[6404, 1362, 796, 651, 62, 21412, 62, 6404, 1362, 7203, 1818, 11125, 1600, 18931, 13, 10778, 8]"
‚úÖ Best Practice: Use of class method to encapsulate behavior related to the class,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 284, 32652, 5039, 4069, 3519, 284, 262, 1398]",0.5,42,best_practice,28,Use of class method to encapsulate behavior related to the class,,42,,[]
‚úÖ Best Practice: Initialize an empty list to collect path components,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 1351, 284, 2824, 3108, 6805]",0.5,46,best_practice,30,Initialize an empty list to collect path components,,42,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Check if class attribute is not None before appending,"[26486, 227, 6705, 19939, 25, 6822, 611, 1398, 11688, 318, 407, 6045, 878, 598, 1571]",0.5,56,best_practice,32,Check if class attribute is not None before appending,,46,    backtest in a certain format.,"[220, 220, 220, 736, 9288, 287, 257, 1728, 5794, 13]"
‚úÖ Best Practice: Check if the provided path is not None before appending,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2810, 3108, 318, 407, 6045, 878, 598, 1571]",0.5,64,best_practice,35,Check if the provided path is not None before appending,,56,    artifact_path = None,"[220, 220, 220, 24127, 62, 6978, 796, 6045]"
‚úÖ Best Practice: Use of join to construct a path string from list elements,"[26486, 227, 6705, 19939, 25, 5765, 286, 4654, 284, 5678, 257, 3108, 4731, 422, 1351, 4847]",0.5,92,best_practice,36,Use of join to construct a path string from list elements,,64,    depend_cls = None  # the dependant class of the record; the record will depend on the results generated by,"[220, 220, 220, 4745, 62, 565, 82, 796, 6045, 220, 1303, 262, 4745, 415, 1398, 286, 262, 1700, 26, 262, 1700, 481, 4745, 319, 262, 2482, 7560, 416]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 8748, 13]",1.0,120,best_practice,36,Docstring provides a clear explanation of the method's purpose and usage.,,92,    depend_cls = None  # the dependant class of the record; the record will depend on the results generated by,"[220, 220, 220, 4745, 62, 565, 82, 796, 6045, 220, 1303, 262, 4745, 415, 1398, 286, 262, 1700, 26, 262, 1700, 481, 4745, 319, 262, 2482, 7560, 416]"
"üß† ML Signal: Usage of self.get_path() indicates a pattern of retrieving paths, which can be useful for ML models to understand method interactions.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 13, 1136, 62, 6978, 3419, 9217, 257, 3912, 286, 50122, 13532, 11, 543, 460, 307, 4465, 329, 10373, 4981, 284, 1833, 2446, 12213, 13]",0.5,130,ml_signal,41,"Usage of self.get_path() indicates a pattern of retrieving paths, which can be useful for ML models to understand method interactions.",,120,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
‚úÖ Best Practice: Explicitly checking for an empty string improves code readability and intent.,"[26486, 227, 6705, 19939, 25, 11884, 306, 10627, 329, 281, 6565, 4731, 19575, 2438, 1100, 1799, 290, 6824, 13]",0.5,130,best_practice,44,Explicitly checking for an empty string improves code readability and intent.,,130,,[]
"üß† ML Signal: Usage of self.recorder.save_objects() shows a pattern of saving objects, which can be useful for ML models to understand method interactions.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 13, 8344, 2875, 13, 21928, 62, 48205, 3419, 2523, 257, 3912, 286, 8914, 5563, 11, 543, 460, 307, 4465, 329, 10373, 4981, 284, 1833, 2446, 12213, 13]",0.5,143,ml_signal,45,"Usage of self.recorder.save_objects() shows a pattern of saving objects, which can be useful for ML models to understand method interactions.",,130,        if path is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 3108, 318, 407, 6045, 25]"
üß† ML Signal: Use of constructor to initialize object state,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23772, 284, 41216, 2134, 1181]",1.0,156,ml_signal,45,Use of constructor to initialize object state,,143,        if path is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 3108, 318, 407, 6045, 25]"
üß† ML Signal: Use of private attribute naming convention,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2839, 11688, 19264, 9831]",0.5,156,ml_signal,47,Use of private attribute naming convention,,156,,[]
‚úÖ Best Practice: Use of @property decorator for encapsulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 32652, 1741]",1.0,156,best_practice,49,Use of @property decorator for encapsulation,,156,,[]
‚úÖ Best Practice: Method should have a docstring explaining its purpose and usage.,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748, 13]",0.5,156,best_practice,47,Method should have a docstring explaining its purpose and usage.,,156,,[]
‚úÖ Best Practice: Check for None before using an attribute to avoid unexpected errors.,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 878, 1262, 281, 11688, 284, 3368, 10059, 8563, 13]",0.5,156,best_practice,49,Check for None before using an attribute to avoid unexpected errors.,,156,,[]
‚ö†Ô∏è SAST Risk (Low): Raising a generic exception without context can make debugging harder.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 6631, 1231, 4732, 460, 787, 28769, 7069, 13]",1.0,164,sast_risk,51,Raising a generic exception without context can make debugging harder.,Low,156,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Return the attribute directly if it exists.,"[26486, 227, 6705, 19939, 25, 8229, 262, 11688, 3264, 611, 340, 7160, 13]",0.5,185,best_practice,52,Return the attribute directly if it exists.,,164,        It behaves the same as self.recorder.save_objects.,"[220, 220, 220, 220, 220, 220, 220, 632, 39341, 262, 976, 355, 2116, 13, 8344, 2875, 13, 21928, 62, 48205, 13]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",1.0,206,best_practice,52,Include a docstring to describe the method's purpose and parameters,,185,        It behaves the same as self.recorder.save_objects.,"[220, 220, 220, 220, 220, 220, 220, 632, 39341, 262, 976, 355, 2116, 13, 8344, 2875, 13, 21928, 62, 48205, 13]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,219,sast_risk,61,"Method is not implemented, which could lead to runtime errors if called",Low,206,        self._recorder = recorder,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 8344, 2875, 796, 38156]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 10007, 13]",0.5,219,best_practice,62,Docstring provides a clear explanation of the method's purpose and parameters.,,219,,[]
üß† ML Signal: Usage of try-except block indicates error handling pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1949, 12, 16341, 2512, 9217, 4049, 9041, 3912, 13]",0.5,227,ml_signal,78,Usage of try-except block indicates error handling pattern.,,219,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide unexpected errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 10059, 8563, 13]",0.5,245,sast_risk,82,Catching broad exceptions can hide unexpected errors.,Low,227,"    def load(self, name: str, parents: bool = True):","[220, 220, 220, 825, 3440, 7, 944, 11, 1438, 25, 965, 11, 3397, 25, 20512, 796, 6407, 2599]"
üß† ML Signal: Use of context manager pattern with class_casting.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4732, 4706, 3912, 351, 1398, 62, 19913, 13]",0.5,278,ml_signal,85,Use of context manager pattern with class_casting.,,245,        But it is an easier interface because users don't have to care about `get_path` and `artifact_path`,"[220, 220, 220, 220, 220, 220, 220, 887, 340, 318, 281, 4577, 7071, 780, 2985, 836, 470, 423, 284, 1337, 546, 4600, 1136, 62, 6978, 63, 290, 4600, 433, 29660, 62, 6978, 63]"
‚úÖ Best Practice: Returning an empty list as a default value is clear and avoids potential NoneType errors.,"[26486, 227, 6705, 19939, 25, 42882, 281, 6565, 1351, 355, 257, 4277, 1988, 318, 1598, 290, 30940, 2785, 6045, 6030, 8563, 13]",0.5,299,best_practice,93,Returning an empty list as a default value is clear and avoids potential NoneType errors.,,278,            Each recorder has different `artifact_path`.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5501, 38156, 468, 1180, 4600, 433, 29660, 62, 6978, 44646]"
‚úÖ Best Practice: Initialize variables at the start of the function for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,307,best_practice,111,Initialize variables at the start of the function for better readability and maintainability,,299,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Check if 'dirn' is in 'artifacts' before accessing it,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 15908, 77, 6, 318, 287, 705, 50179, 6, 878, 22534, 340]",0.5,307,best_practice,114,Check if 'dirn' is in 'artifacts' before accessing it,,307,,[]
üß† ML Signal: Caching pattern for performance optimization,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 3912, 329, 2854, 23989]",0.5,315,ml_signal,116,Caching pattern for performance optimization,,307,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
üß† ML Signal: Iterating over a list of items,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 3709]",1.0,315,ml_signal,120,Iterating over a list of items,,315,,[]
‚úÖ Best Practice: Use helper function to avoid code duplication,"[26486, 227, 6705, 19939, 25, 5765, 31904, 2163, 284, 3368, 2438, 50124]",0.5,332,best_practice,123,Use helper function to avoid code duplication,,315,        Check if the records is properly generated and saved.,"[220, 220, 220, 220, 220, 220, 220, 6822, 611, 262, 4406, 318, 6105, 7560, 290, 7448, 13]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic exception without a message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 6631, 1231, 257, 3275]",1.0,332,sast_risk,125,Raising a generic exception without a message,Low,332,,[]
‚úÖ Best Practice: Use context manager for resource management,"[26486, 227, 6705, 19939, 25, 5765, 4732, 4706, 329, 8271, 4542]",1.0,341,best_practice,130,Use context manager for resource management,,332,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
üß† ML Signal: Conditional method call based on class type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2446, 869, 1912, 319, 1398, 2099]",0.5,353,ml_signal,131,Conditional method call based on class type,,341,        include_self : bool,"[220, 220, 220, 220, 220, 220, 220, 2291, 62, 944, 1058, 20512]"
‚úÖ Best Practice: Include a docstring to describe the purpose and functionality of the class.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 11244, 286, 262, 1398, 13]",1.0,368,best_practice,127,Include a docstring to describe the purpose and functionality of the class.,,353,        - checking if the final files is completed,"[220, 220, 220, 220, 220, 220, 220, 532, 10627, 611, 262, 2457, 3696, 318, 5668]"
‚úÖ Best Practice: Call the superclass's __init__ method to ensure proper initialization,"[26486, 227, 6705, 19939, 25, 4889, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588]",0.5,380,best_practice,131,Call the superclass's __init__ method to ensure proper initialization,,368,        include_self : bool,"[220, 220, 220, 220, 220, 220, 220, 2291, 62, 944, 1058, 20512]"
üß† ML Signal: Storing model and dataset as instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2746, 290, 27039, 355, 4554, 9633]",0.5,390,ml_signal,133,Storing model and dataset as instance variables,,380,        parents : bool,"[220, 220, 220, 220, 220, 220, 220, 3397, 1058, 20512]"
üß† ML Signal: Storing model and dataset as instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2746, 290, 27039, 355, 4554, 9633]",0.5,390,ml_signal,135,Storing model and dataset as instance variables,,390,,[]
‚úÖ Best Practice: Use of context manager for resource management,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 8271, 4542]",0.5,398,best_practice,136,Use of context manager for resource management,,390,        Raise,"[220, 220, 220, 220, 220, 220, 220, 35123]"
üß† ML Signal: Use of dictionary to store parameters for function call,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3650, 10007, 329, 2163, 869]",1.0,409,ml_signal,138,Use of dictionary to store parameters for function call,,398,        FileNotFoundError,"[220, 220, 220, 220, 220, 220, 220, 9220, 3673, 21077, 12331]"
üß† ML Signal: Use of dynamic function call with unpacked parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8925, 2163, 869, 351, 8593, 6021, 10007]",1.0,421,ml_signal,141,Use of dynamic function call with unpacked parameters,,409,        if include_self:,"[220, 220, 220, 220, 220, 220, 220, 611, 2291, 62, 944, 25]"
‚úÖ Best Practice: Handling specific exception to modify parameters,"[26486, 227, 6705, 19939, 25, 49500, 2176, 6631, 284, 13096, 10007]",0.5,435,best_practice,144,Handling specific exception to modify parameters,,421,            artifacts = {},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20316, 796, 23884]"
‚ö†Ô∏è SAST Risk (Low): Logging exception message may expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6631, 3275, 743, 15651, 8564, 1321]",0.5,472,sast_risk,148,Logging exception message may expose sensitive information,Low,435,                    artifacts[dirn] = self.recorder.list_artifacts(dirn),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20316, 58, 15908, 77, 60, 796, 2116, 13, 8344, 2875, 13, 4868, 62, 50179, 7, 15908, 77, 8]"
üß† ML Signal: Use of model prediction on a dataset,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2746, 17724, 319, 257, 27039]",1.0,509,ml_signal,148,Use of model prediction on a dataset,,472,                    artifacts[dirn] = self.recorder.list_artifacts(dirn),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20316, 58, 15908, 77, 60, 796, 2116, 13, 8344, 2875, 13, 4868, 62, 50179, 7, 15908, 77, 8]"
üß† ML Signal: Handling prediction results as a pandas Series,"[8582, 100, 254, 10373, 26484, 25, 49500, 17724, 2482, 355, 257, 19798, 292, 7171]",0.5,509,ml_signal,150,Handling prediction results as a pandas Series,,509,,[]
üß† ML Signal: Conversion of Series to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 7171, 284, 6060, 19778]",0.5,538,ml_signal,152,Conversion of Series to DataFrame,,509,"                ps = self.get_path(item).split(""/"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26692, 796, 2116, 13, 1136, 62, 6978, 7, 9186, 737, 35312, 7203, 14, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'save' method does not handle file overwriting securely,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 21928, 6, 2446, 857, 407, 5412, 2393, 6993, 799, 278, 30835]",0.5,562,sast_risk,155,Potential risk if 'save' method does not handle file overwriting securely,Low,538,                    raise FileNotFoundError,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 9220, 3673, 21077, 12331]"
‚úÖ Best Practice: Use of logging for tracking important events,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 1593, 2995]",0.5,572,best_practice,156,Use of logging for tracking important events,,562,        if parents:,"[220, 220, 220, 220, 220, 220, 220, 611, 3397, 25]"
‚úÖ Best Practice: Use of pprint for better readability of output,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 4798, 329, 1365, 1100, 1799, 286, 5072]",1.0,572,best_practice,160,Use of pprint for better readability of output,,572,,[]
üß† ML Signal: Displaying the first few prediction results,"[8582, 100, 254, 10373, 26484, 25, 16531, 278, 262, 717, 1178, 17724, 2482]",0.5,579,ml_signal,162,Displaying the first few prediction results,,572,class SignalRecord(RecordTemp):,"[4871, 26484, 23739, 7, 23739, 30782, 2599]"
üß† ML Signal: Checking if dataset is of a specific type,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 27039, 318, 286, 257, 2176, 2099]",0.5,605,ml_signal,164,Checking if dataset is of a specific type,,579,    This is the Signal Record class that generates the signal prediction. This class inherits the ``RecordTemp`` class.,"[220, 220, 220, 770, 318, 262, 26484, 13266, 1398, 326, 18616, 262, 6737, 17724, 13, 770, 1398, 10639, 896, 262, 7559, 23739, 30782, 15506, 1398, 13]"
üß† ML Signal: Generating labels for a specific dataset type,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 14722, 329, 257, 2176, 27039, 2099]",1.0,605,ml_signal,166,Generating labels for a specific dataset type,,605,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'save' method does not handle file overwriting securely,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 21928, 6, 2446, 857, 407, 5412, 2393, 6993, 799, 278, 30835]",0.5,624,sast_risk,168,Potential risk if 'save' method does not handle file overwriting securely,Low,605,        super().__init__(recorder=recorder),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 8344, 2875, 28, 8344, 2875, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose of the method,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 2446]",1.0,624,best_practice,160,Consider adding a docstring to describe the purpose of the method,,624,,[]
üß† ML Signal: Returning a list of model-related filenames could indicate a pattern of model file management,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 286, 2746, 12, 5363, 1226, 268, 1047, 714, 7603, 257, 3912, 286, 2746, 2393, 4542]",0.5,631,ml_signal,162,Returning a list of model-related filenames could indicate a pattern of model file management,,624,class SignalRecord(RecordTemp):,"[4871, 26484, 23739, 7, 23739, 30782, 2599]"
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007]",1.0,657,best_practice,164,Class docstring provides a brief description of the class purpose,,631,    This is the Signal Record class that generates the signal prediction. This class inherits the ``RecordTemp`` class.,"[220, 220, 220, 770, 318, 262, 26484, 13266, 1398, 326, 18616, 262, 6737, 17724, 13, 770, 1398, 10639, 896, 262, 7559, 23739, 30782, 15506, 1398, 13]"
‚úÖ Best Practice: Use of default parameter values for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688]",1.0,661,best_practice,165,Use of default parameter values for flexibility,,657,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Explicit call to superclass initializer for proper inheritance,"[26486, 227, 6705, 19939, 25, 11884, 869, 284, 2208, 4871, 4238, 7509, 329, 1774, 24155]",1.0,683,best_practice,167,Explicit call to superclass initializer for proper inheritance,,661,"    def __init__(self, model=None, dataset=None, recorder=None):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2746, 28, 14202, 11, 27039, 28, 14202, 11, 38156, 28, 14202, 2599]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exception without handling it properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 6631, 1231, 9041, 340, 6105]",0.5,705,sast_risk,180,Catching broad exception without handling it properly,Low,683,                # The argument number is not right,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 383, 4578, 1271, 318, 407, 826]"
üß† ML Signal: Checking if the result is a dictionary before saving,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 1255, 318, 257, 22155, 878, 8914]",0.5,723,ml_signal,184,Checking if the result is a dictionary before saving,,705,            except AttributeError as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 3460, 4163, 12331, 355, 304, 25]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,750,best_practice,187,Use of type hinting for return type improves code readability and maintainability.,,723,"                logger.warning(f""Exception: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 16922, 25, 1391, 68, 92, 4943]"
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 922, 3357, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,772,best_practice,193,Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,,750,        pred = self.model.predict(self.dataset),"[220, 220, 220, 220, 220, 220, 220, 2747, 796, 2116, 13, 19849, 13, 79, 17407, 7, 944, 13, 19608, 292, 316, 8]"
‚úÖ Best Practice: Class variables should be defined at the top of the class for better readability.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 5447, 379, 262, 1353, 286, 262, 1398, 329, 1365, 1100, 1799, 13]",1.0,792,best_practice,196,Class variables should be defined at the top of the class for better readability.,,772,"        self.save(**{""pred.pkl"": pred})","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 7, 1174, 4895, 28764, 13, 79, 41582, 1298, 2747, 30072]"
‚úÖ Best Practice: Class variables should be defined at the top of the class for better readability.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 5447, 379, 262, 1353, 286, 262, 1398, 329, 1365, 1100, 1799, 13]",1.0,803,best_practice,198,Class variables should be defined at the top of the class for better readability.,,792,        logger.info(,"[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7]"
‚úÖ Best Practice: Use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",1.0,845,best_practice,199,Use of super() to initialize the parent class,,803,"            f""Signal record 'pred.pkl' has been saved as the artifact of the Experiment {self.recorder.experiment_id}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 11712, 282, 1700, 705, 28764, 13, 79, 41582, 6, 468, 587, 7448, 355, 262, 24127, 286, 262, 29544, 1391, 944, 13, 8344, 2875, 13, 23100, 3681, 62, 312, 36786]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'calc_long_short_prec' handles unexpected data types or values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 9948, 66, 62, 6511, 62, 19509, 62, 3866, 66, 6, 17105, 10059, 1366, 3858, 393, 3815, 13]",0.5,861,sast_risk,203,Ensure 'calc_long_short_prec' handles unexpected data types or values.,Low,845,        pprint(pred.head(5)),"[220, 220, 220, 220, 220, 220, 220, 279, 4798, 7, 28764, 13, 2256, 7, 20, 4008]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'calc_ic' handles unexpected data types or values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 9948, 66, 62, 291, 6, 17105, 10059, 1366, 3858, 393, 3815, 13]",0.5,883,sast_risk,205,Ensure 'calc_ic' handles unexpected data types or values.,Low,861,"        if isinstance(self.dataset, DatasetH):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 944, 13, 19608, 292, 316, 11, 16092, 292, 316, 39, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'ic.std()' is zero.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 291, 13, 19282, 3419, 6, 318, 6632, 13]",0.5,905,sast_risk,205,Potential division by zero if 'ic.std()' is zero.,Low,883,"        if isinstance(self.dataset, DatasetH):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 944, 13, 19608, 292, 316, 11, 16092, 292, 316, 39, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'ric.std()' is zero.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 1173, 13, 19282, 3419, 6, 318, 6632, 13]",0.5,913,sast_risk,213,Potential division by zero if 'ric.std()' is zero.,Low,905,class ACRecordTemp(RecordTemp):,"[4871, 7125, 23739, 30782, 7, 23739, 30782, 2599]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'calc_long_short_return' handles unexpected data types or values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 9948, 66, 62, 6511, 62, 19509, 62, 7783, 6, 17105, 10059, 1366, 3858, 393, 3815, 13]",0.5,931,sast_risk,216,Ensure 'calc_long_short_return' handles unexpected data types or values.,Low,913,"    def __init__(self, recorder, skip_existing=False):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 38156, 11, 14267, 62, 25687, 28, 25101, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if 'long_short_r.std()' is zero.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 705, 6511, 62, 19509, 62, 81, 13, 19282, 3419, 6, 318, 6632, 13]",0.5,945,sast_risk,222,Potential division by zero if 'long_short_r.std()' is zero.,Low,931,        if self.skip_existing:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 48267, 62, 25687, 25]"
üß† ML Signal: Logging metrics can be used to track model performance over time.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 20731, 460, 307, 973, 284, 2610, 2746, 2854, 625, 640, 13]",1.0,970,ml_signal,234,Logging metrics can be used to track model performance over time.,,945,"            logger.warning(""The dependent data does not exists. Generation skipped."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7203, 464, 10795, 1366, 857, 407, 7160, 13, 16588, 26684, 19570]"
üß† ML Signal: Saving objects can be used to track model outputs and states.,"[8582, 100, 254, 10373, 26484, 25, 34689, 5563, 460, 307, 973, 284, 2610, 2746, 23862, 290, 2585, 13]",1.0,995,ml_signal,234,Saving objects can be used to track model outputs and states.,,970,"            logger.warning(""The dependent data does not exists. Generation skipped."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7203, 464, 10795, 1366, 857, 407, 7160, 13, 16588, 26684, 19570]"
‚úÖ Best Practice: Use 'pprint' for better readability of the printed metrics.,"[26486, 227, 6705, 19939, 25, 5765, 705, 381, 22272, 6, 329, 1365, 1100, 1799, 286, 262, 10398, 20731, 13]",0.5,1016,best_practice,238,Use 'pprint' for better readability of the printed metrics.,,995,            self.save(**artifact_dict),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 7, 1174, 433, 29660, 62, 11600, 8]"
"üß† ML Signal: Method returning a list of filenames, indicating potential file handling or data processing","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1351, 286, 1226, 268, 1047, 11, 12739, 2785, 2393, 9041, 393, 1366, 7587]",1.0,1025,ml_signal,231,"Method returning a list of filenames, indicating potential file handling or data processing",,1016,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
"üß† ML Signal: Returning a hardcoded list of filenames, which may indicate specific data processing tasks","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1327, 40976, 1351, 286, 1226, 268, 1047, 11, 543, 743, 7603, 2176, 1366, 7587, 8861]",0.5,1038,ml_signal,233,"Returning a hardcoded list of filenames, which may indicate specific data processing tasks",,1025,        except FileNotFoundError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 9220, 3673, 21077, 12331, 25]"
‚úÖ Best Practice: Class-level constants should be defined at the top of the class for better readability.,"[26486, 227, 6705, 19939, 25, 5016, 12, 5715, 38491, 815, 307, 5447, 379, 262, 1353, 286, 262, 1398, 329, 1365, 1100, 1799, 13]",1.0,1059,best_practice,238,Class-level constants should be defined at the top of the class for better readability.,,1038,            self.save(**artifact_dict),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 7, 1174, 433, 29660, 62, 11600, 8]"
‚úÖ Best Practice: Defining dependencies as class attributes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 2896, 3191, 20086, 355, 1398, 12608, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1059,best_practice,240,Defining dependencies as class attributes can improve code readability and maintainability.,,1059,,[]
‚úÖ Best Practice: Constructor should initialize all attributes,"[26486, 227, 6705, 19939, 25, 28407, 273, 815, 41216, 477, 12608]",0.5,1059,best_practice,240,Constructor should initialize all attributes,,1059,,[]
‚úÖ Best Practice: Explicitly calling the superclass constructor,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 23772]",0.5,1067,best_practice,242,Explicitly calling the superclass constructor,,1059,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Storing configuration parameters for later use,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 10007, 329, 1568, 779]",0.5,1085,ml_signal,244,Storing configuration parameters for later use,,1067,        The caller method will save the results to the recorder.,"[220, 220, 220, 220, 220, 220, 220, 383, 24955, 2446, 481, 3613, 262, 2482, 284, 262, 38156, 13]"
üß† ML Signal: Storing configuration parameters for later use,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 10007, 329, 1568, 779]",0.5,1111,ml_signal,246,Storing configuration parameters for later use,,1085,"        raise NotImplementedError(f""Please implement the `_generate` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 62, 8612, 378, 63, 2446, 4943]"
üß† ML Signal: Storing configuration parameters for later use,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 10007, 329, 1568, 779]",0.5,1137,ml_signal,246,Storing configuration parameters for later use,,1111,"        raise NotImplementedError(f""Please implement the `_generate` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 5492, 3494, 262, 4600, 62, 8612, 378, 63, 2446, 4943]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,1141,best_practice,252,Use of descriptive variable names improves code readability.,,1137,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Loading default data when no input is provided.,"[26486, 227, 6705, 19939, 25, 12320, 4277, 1366, 618, 645, 5128, 318, 2810, 13]",0.5,1151,best_practice,255,Loading default data when no input is provided.,,1141,    depend_cls = SignalRecord,"[220, 220, 220, 4745, 62, 565, 82, 796, 26484, 23739]"
‚ö†Ô∏è SAST Risk (Low): Potential logging of sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18931, 286, 8564, 1321, 13]",0.5,1170,sast_risk,258,Potential logging of sensitive information.,Low,1151,        super().__init__(recorder=recorder),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 8344, 2875, 28, 8344, 2875, 8]"
üß† ML Signal: Calculation of information coefficient (IC) and rank IC.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1321, 35381, 357, 2149, 8, 290, 4279, 12460, 13]",0.5,1170,ml_signal,259,Calculation of information coefficient (IC) and rank IC.,,1170,,[]
‚úÖ Best Practice: Use of a dictionary to store metrics for better organization.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 3650, 20731, 329, 1365, 4009, 13]",0.5,1180,best_practice,265,Use of a dictionary to store metrics for better organization.,,1170,        metrics = {,"[220, 220, 220, 220, 220, 220, 220, 20731, 796, 1391]"
‚úÖ Best Practice: Use of a dictionary to store objects for better organization.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 3650, 5563, 329, 1365, 4009, 13]",0.5,1199,best_practice,268,Use of a dictionary to store objects for better organization.,,1180,"            ""Rank IC"": ric.mean(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 27520, 12460, 1298, 12410, 13, 32604, 22784]"
üß† ML Signal: Calculation of long-short and long-average returns.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 890, 12, 19509, 290, 890, 12, 23913, 5860, 13]",0.5,1210,ml_signal,276,Calculation of long-short and long-average returns.,,1199,        metrics.update(,"[220, 220, 220, 220, 220, 220, 220, 20731, 13, 19119, 7]"
‚úÖ Best Practice: Logging metrics for tracking and analysis.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 20731, 329, 9646, 290, 3781, 13]",1.0,1224,best_practice,289,Logging metrics for tracking and analysis.,,1210,        self.save(**objects),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 7, 1174, 48205, 8]"
‚úÖ Best Practice: Pretty printing for better readability of output.,"[26486, 227, 6705, 19939, 25, 20090, 13570, 329, 1365, 1100, 1799, 286, 5072, 13]",0.5,1224,best_practice,291,Pretty printing for better readability of output.,,1224,,[]
üß† ML Signal: Method returns a list of file paths based on a condition,"[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 257, 1351, 286, 2393, 13532, 1912, 319, 257, 4006]",1.0,1236,ml_signal,286,Method returns a list of file paths based on a condition,,1224,            },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Conditional logic affects the returned list,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 10975, 262, 4504, 1351]",1.0,1257,ml_signal,288,Conditional logic affects the returned list,,1236,        self.recorder.log_metrics(**metrics),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 8344, 2875, 13, 6404, 62, 4164, 10466, 7, 1174, 4164, 10466, 8]"
üß† ML Signal: Dynamic list extension based on object state,"[8582, 100, 254, 10373, 26484, 25, 26977, 1351, 7552, 1912, 319, 2134, 1181]",1.0,1270,ml_signal,290,Dynamic list extension based on object state,,1257,        pprint(metrics),"[220, 220, 220, 220, 220, 220, 220, 279, 4798, 7, 4164, 10466, 8]"
‚úÖ Best Practice: Explicit return of the list for clarity,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 1351, 329, 16287]",1.0,1270,best_practice,291,Explicit return of the list for clarity,,1270,,[]
‚úÖ Best Practice: Class-level constants improve readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5016, 12, 5715, 38491, 2987, 1100, 1799, 290, 5529, 1799, 13]",0.5,1291,best_practice,298,Class-level constants improve readability and maintainability.,,1270,    This is the Signal Analysis Record class that generates the analysis results such as IC and IR.,"[220, 220, 220, 770, 318, 262, 26484, 14691, 13266, 1398, 326, 18616, 262, 3781, 2482, 884, 355, 12460, 290, 14826, 13]"
‚úÖ Best Practice: Explicitly defining dependencies improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 16215, 20086, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1295,best_practice,300,Explicitly defining dependencies improves code readability and maintainability.,,1291,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",0.5,1330,best_practice,324,Use of super() to initialize the parent class,,1295,"        ic, ric = calc_ic(pred.iloc[:, 0], label.iloc[:, self.label_col])","[220, 220, 220, 220, 220, 220, 220, 14158, 11, 12410, 796, 42302, 62, 291, 7, 28764, 13, 346, 420, 58, 45299, 657, 4357, 6167, 13, 346, 420, 58, 45299, 2116, 13, 18242, 62, 4033, 12962]"
‚úÖ Best Practice: Use of deepcopy to avoid mutable default argument issues,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 3368, 4517, 540, 4277, 4578, 2428]",1.0,1342,best_practice,347,Use of deepcopy to avoid mutable default argument issues,,1330,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of get() method to provide a default value,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 3419, 2446, 284, 2148, 257, 4277, 1988]",0.5,1342,best_practice,358,Use of get() method to provide a default value,,1342,,[]
üß† ML Signal: Usage of a method to get report frequency,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 651, 989, 8373]",0.5,1376,ml_signal,361,Usage of a method to get report frequency,,1342,    This is the Portfolio Analysis Record class that generates the analysis results such as those of backtest. This class inherits the ``RecordTemp`` class.,"[220, 220, 220, 770, 318, 262, 4347, 13652, 14691, 13266, 1398, 326, 18616, 262, 3781, 2482, 884, 355, 883, 286, 736, 9288, 13, 770, 1398, 10639, 896, 262, 7559, 23739, 30782, 15506, 1398, 13]"
‚úÖ Best Practice: Providing a default value when None,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 4277, 1988, 618, 6045]",0.5,1376,best_practice,364,Providing a default value when None,,1376,,[]
‚úÖ Best Practice: Providing a default value when None,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 4277, 1988, 618, 6045]",0.5,1411,best_practice,367,Providing a default value when None,,1376,"        - The return report and detailed positions of the backtest, returned by `qlib/contrib/evaluate.py:backtest`","[220, 220, 220, 220, 220, 220, 220, 532, 383, 1441, 989, 290, 6496, 6116, 286, 262, 736, 9288, 11, 4504, 416, 4600, 80, 8019, 14, 3642, 822, 14, 49786, 13, 9078, 25, 1891, 9288, 63]"
‚úÖ Best Practice: Ensuring risk_analysis_freq is always a list,"[26486, 227, 6705, 19939, 25, 48221, 870, 2526, 62, 20930, 62, 19503, 80, 318, 1464, 257, 1351]",0.5,1411,best_practice,370,Ensuring risk_analysis_freq is always a list,,1411,,[]
‚úÖ Best Practice: Ensuring indicator_analysis_freq is always a list,"[26486, 227, 6705, 19939, 25, 48221, 870, 16916, 62, 20930, 62, 19503, 80, 318, 1464, 257, 1351]",0.5,1411,best_practice,373,Ensuring indicator_analysis_freq is always a list,,1411,,[]
üß† ML Signal: Parsing frequency strings into a specific format,"[8582, 100, 254, 10373, 26484, 25, 23042, 278, 8373, 13042, 656, 257, 2176, 5794]",0.5,1420,ml_signal,375,Parsing frequency strings into a specific format,,1411,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
üß† ML Signal: Parsing frequency strings into a specific format,"[8582, 100, 254, 10373, 26484, 25, 23042, 278, 8373, 13042, 656, 257, 2176, 5794]",0.5,1443,ml_signal,379,Parsing frequency strings into a specific format,,1420,"        indicator_analysis_freq: Union[List, str] = None,","[220, 220, 220, 220, 220, 220, 220, 16916, 62, 20930, 62, 19503, 80, 25, 4479, 58, 8053, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Initialize variables at the start of the function for clarity.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287, 13]",0.5,1452,best_practice,375,Initialize variables at the start of the function for clarity.,,1443,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
"üß† ML Signal: Checks for specific configuration keys, indicating feature usage patterns.","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 2176, 8398, 8251, 11, 12739, 3895, 8748, 7572, 13]",0.5,1463,ml_signal,377,"Checks for specific configuration keys, indicating feature usage patterns.",,1452,"        config=None,","[220, 220, 220, 220, 220, 220, 220, 4566, 28, 14202, 11]"
üß† ML Signal: Usage of Freq.parse suggests a pattern of frequency parsing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4848, 80, 13, 29572, 5644, 257, 3912, 286, 8373, 32096, 13]",0.5,1486,ml_signal,379,Usage of Freq.parse suggests a pattern of frequency parsing.,,1463,"        indicator_analysis_freq: Union[List, str] = None,","[220, 220, 220, 220, 220, 220, 220, 16916, 62, 20930, 62, 19503, 80, 25, 4479, 58, 8053, 11, 965, 60, 796, 6045, 11]"
‚úÖ Best Practice: Use f-strings for better readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 37336, 329, 1365, 1100, 1799, 290, 2854, 13]",1.0,1499,best_practice,381,Use f-strings for better readability and performance.,,1486,"        skip_existing=False,","[220, 220, 220, 220, 220, 220, 220, 14267, 62, 25687, 28, 25101, 11]"
"üß† ML Signal: Recursively checks for nested configurations, indicating complex configuration structures.","[8582, 100, 254, 10373, 26484, 25, 3311, 1834, 2280, 8794, 329, 28376, 25412, 11, 12739, 3716, 8398, 8573, 13]",0.5,1503,ml_signal,383,"Recursively checks for nested configurations, indicating complex configuration structures.",,1499,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Use extend to add elements from another list.,"[26486, 227, 6705, 19939, 25, 5765, 9117, 284, 751, 4847, 422, 1194, 1351, 13]",0.5,1517,best_practice,385,Use extend to add elements from another list.,,1503,"        config[""strategy""] : dict","[220, 220, 220, 220, 220, 220, 220, 4566, 14692, 2536, 4338, 8973, 1058, 8633]"
‚úÖ Best Practice: Return statements should be at the end of the function for clarity.,"[26486, 227, 6705, 19939, 25, 8229, 6299, 815, 307, 379, 262, 886, 286, 262, 2163, 329, 16287, 13]",1.0,1531,best_practice,387,Return statements should be at the end of the function for clarity.,,1517,"        config[""executor""] : dict","[220, 220, 220, 220, 220, 220, 220, 4566, 14692, 18558, 38409, 8973, 1058, 8633]"
üß† ML Signal: Function definition with dynamic arguments using **kwargs,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 8925, 7159, 1262, 12429, 46265, 22046]",1.0,1542,ml_signal,382,Function definition with dynamic arguments using **kwargs,,1531,"        **kwargs,","[220, 220, 220, 220, 220, 220, 220, 12429, 46265, 22046, 11]"
‚ö†Ô∏è SAST Risk (Low): Loading a pickle file can be unsafe if the file is from an untrusted source,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12320, 257, 2298, 293, 2393, 460, 307, 21596, 611, 262, 2393, 318, 422, 281, 1418, 81, 8459, 2723]",1.0,1550,sast_risk,384,Loading a pickle file can be unsafe if the file is from an untrusted source,Low,1542,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Use of placeholder pattern for dynamic configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 46076, 3912, 329, 8925, 8398]",1.0,1573,ml_signal,386,Use of placeholder pattern for dynamic configuration,,1550,            define the strategy class as well as the kwargs.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8160, 262, 4811, 1398, 355, 880, 355, 262, 479, 86, 22046, 13]"
üß† ML Signal: Iterating over configuration attributes,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 8398, 12608]",1.0,1597,ml_signal,388,Iterating over configuration attributes,,1573,            define the executor class as well as the kwargs.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8160, 262, 3121, 273, 1398, 355, 880, 355, 262, 479, 86, 22046, 13]"
üß† ML Signal: Dynamic attribute setting,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 4634]",1.0,1616,ml_signal,390,Dynamic attribute setting,,1597,            define the backtest kwargs.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8160, 262, 736, 9288, 479, 86, 22046, 13]"
üß† ML Signal: Accessing index level values,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6376, 1241, 3815]",1.0,1633,ml_signal,392,Accessing index level values,,1616,            risk analysis freq of report,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2526, 3781, 2030, 80, 286, 989]"
‚úÖ Best Practice: Checking for None before assignment,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 878, 16237]",1.0,1653,best_practice,393,Checking for None before assignment,,1633,        indicator_analysis_freq : str|List[str],"[220, 220, 220, 220, 220, 220, 220, 16916, 62, 20930, 62, 19503, 80, 1058, 965, 91, 8053, 58, 2536, 60]"
‚úÖ Best Practice: Checking for None before assignment,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 878, 16237]",1.0,1661,best_practice,397,Checking for None before assignment,,1653,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Use of dictionary to store artifacts,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3650, 20316]",1.0,1673,ml_signal,400,Use of dictionary to store artifacts,,1661,        if config is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 4566, 318, 6045, 25]"
üß† ML Signal: Function call with dynamic configuration,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8925, 8398]",1.0,1693,ml_signal,402,Function call with dynamic configuration,,1673,"                ""strategy"": {","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 2536, 4338, 1298, 1391]"
üß† ML Signal: Iterating over dictionary items,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709]",1.0,1727,ml_signal,404,Iterating over dictionary items,,1693,"                    ""module_path"": ""qlib.contrib.strategy"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 21412, 62, 6978, 1298, 366, 80, 8019, 13, 3642, 822, 13, 2536, 4338, 1600]"
üß† ML Signal: Dynamic key-value updates in dictionary,"[8582, 100, 254, 10373, 26484, 25, 26977, 1994, 12, 8367, 5992, 287, 22155]",1.0,1753,ml_signal,408,Dynamic key-value updates in dictionary,,1727,"                    ""start_time"": None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9688, 62, 2435, 1298, 6045, 11]"
üß† ML Signal: Iterating over dictionary items,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709]",1.0,1778,ml_signal,410,Iterating over dictionary items,,1753,"                    ""account"": 100000000,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 23317, 1298, 1802, 10535, 11]"
üß† ML Signal: Dynamic key-value updates in dictionary,"[8582, 100, 254, 10373, 26484, 25, 26977, 1994, 12, 8367, 5992, 287, 22155]",1.0,1812,ml_signal,413,Dynamic key-value updates in dictionary,,1778,"                        ""limit_threshold"": 0.095,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 32374, 62, 400, 10126, 1298, 657, 13, 2931, 20, 11]"
üß† ML Signal: Iterating over a list of frequencies,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 19998]",1.0,1845,ml_signal,416,Iterating over a list of frequencies,,1812,"                        ""close_cost"": 0.0015,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19836, 62, 15805, 1298, 657, 13, 405, 1314, 11]"
üß† ML Signal: Conditional check for presence in dictionary,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 4931, 287, 22155]",0.5,1865,ml_signal,418,Conditional check for presence in dictionary,,1845,"                    },","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8964]"
‚ö†Ô∏è SAST Risk (Low): Use of warnings.warn for user notifications,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 14601, 13, 40539, 329, 2836, 19605]",0.5,1877,sast_risk,420,Use of warnings.warn for user notifications,Low,1865,            },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Dictionary access and unpacking,"[8582, 100, 254, 10373, 26484, 25, 28261, 1895, 290, 8593, 5430]",1.0,1877,ml_signal,425,Dictionary access and unpacking,,1877,,[]
üß† ML Signal: Use of dictionary to store analysis results,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3650, 3781, 2482]",1.0,1893,ml_signal,427,Use of dictionary to store analysis results,,1877,        _default_executor_config = {,"[220, 220, 220, 220, 220, 220, 220, 4808, 12286, 62, 18558, 38409, 62, 11250, 796, 1391]"
üß† ML Signal: Calculation of excess return,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6992, 1441]",0.5,1919,ml_signal,429,Calculation of excess return,,1893,"            ""module_path"": ""qlib.backtest.executor"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 21412, 62, 6978, 1298, 366, 80, 8019, 13, 1891, 9288, 13, 18558, 38409, 1600]"
üß† ML Signal: Calculation of excess return with cost,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6992, 1441, 351, 1575]",0.5,1931,ml_signal,433,Calculation of excess return with cost,,1919,"            },","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8964]"
üß† ML Signal: Concatenating dataframes,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 1366, 37805]",0.5,1931,ml_signal,437,Concatenating dataframes,,1931,,[]
üß† ML Signal: Flattening dictionary for logging,"[8582, 100, 254, 10373, 26484, 25, 1610, 1078, 3101, 22155, 329, 18931]",1.0,1948,ml_signal,439,Flattening dictionary for logging,,1931,        if risk_analysis_freq is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2526, 62, 20930, 62, 19503, 80, 318, 6045, 25]"
üß† ML Signal: Logging metrics with dynamic keys,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 20731, 351, 8925, 8251]",1.0,1965,ml_signal,441,Logging metrics with dynamic keys,,1948,        if indicator_analysis_freq is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 16916, 62, 20930, 62, 19503, 80, 318, 6045, 25]"
üß† ML Signal: Dynamic key-value updates in dictionary,"[8582, 100, 254, 10373, 26484, 25, 26977, 1994, 12, 8367, 5992, 287, 22155]",1.0,1985,ml_signal,444,Dynamic key-value updates in dictionary,,1965,"        if isinstance(risk_analysis_freq, str):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 19121, 62, 20930, 62, 19503, 80, 11, 965, 2599]"
üß† ML Signal: Logging information with dynamic content,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 351, 8925, 2695]",1.0,2011,ml_signal,445,Logging information with dynamic content,,1985,            risk_analysis_freq = [risk_analysis_freq],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2526, 62, 20930, 62, 19503, 80, 796, 685, 19121, 62, 20930, 62, 19503, 80, 60]"
üß† ML Signal: Pretty printing analysis results,"[8582, 100, 254, 10373, 26484, 25, 20090, 13570, 3781, 2482]",1.0,2028,ml_signal,449,Pretty printing analysis results,,2011,        self.risk_analysis_freq = [,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19121, 62, 20930, 62, 19503, 80, 796, 685]"
üß† ML Signal: Iterating over a list of frequencies,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 19998]",1.0,2028,ml_signal,456,Iterating over a list of frequencies,,2028,,[]
üß† ML Signal: Conditional check for presence in dictionary,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 4931, 287, 22155]",0.5,2041,ml_signal,458,Conditional check for presence in dictionary,,2028,        ret_freq = [],"[220, 220, 220, 220, 220, 220, 220, 1005, 62, 19503, 80, 796, 17635]"
‚ö†Ô∏è SAST Risk (Low): Use of warnings.warn for user notifications,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 14601, 13, 40539, 329, 2836, 19605]",0.5,2081,sast_risk,460,Use of warnings.warn for user notifications,Low,2041,"            _count, _freq = Freq.parse(executor_config[""kwargs""][""time_per_step""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9127, 11, 4808, 19503, 80, 796, 4848, 80, 13, 29572, 7, 18558, 38409, 62, 11250, 14692, 46265, 22046, 1, 7131, 1, 2435, 62, 525, 62, 9662, 8973, 8]"
üß† ML Signal: Dictionary access,"[8582, 100, 254, 10373, 26484, 25, 28261, 1895]",1.0,2125,ml_signal,463,Dictionary access,,2081,"            ret_freq.extend(self._get_report_freq(executor_config[""kwargs""][""inner_executor""]))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 62, 19503, 80, 13, 2302, 437, 7, 944, 13557, 1136, 62, 13116, 62, 19503, 80, 7, 18558, 38409, 62, 11250, 14692, 46265, 22046, 1, 7131, 1, 5083, 62, 18558, 38409, 8973, 4008]"
üß† ML Signal: Conditional method selection,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2446, 6356]",0.5,2125,ml_signal,465,Conditional method selection,,2125,,[]
üß† ML Signal: Converting dataframe to dictionary,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 14535, 284, 22155]",0.5,2125,ml_signal,468,Converting dataframe to dictionary,,2125,,[]
üß† ML Signal: Logging metrics with dynamic keys,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 20731, 351, 8925, 8251]",1.0,2125,ml_signal,468,Logging metrics with dynamic keys,,2125,,[]
üß† ML Signal: Dynamic key-value updates in dictionary,"[8582, 100, 254, 10373, 26484, 25, 26977, 1994, 12, 8367, 5992, 287, 22155]",1.0,2125,ml_signal,468,Dynamic key-value updates in dictionary,,2125,,[]
üß† ML Signal: Logging information with dynamic content,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 351, 8925, 2695]",1.0,2137,ml_signal,481,Logging information with dynamic content,,2125,        artifact_objects = {},"[220, 220, 220, 220, 220, 220, 220, 24127, 62, 48205, 796, 23884]"
üß† ML Signal: Pretty printing analysis results,"[8582, 100, 254, 10373, 26484, 25, 20090, 13570, 3781, 2482]",1.0,2149,ml_signal,481,Pretty printing analysis results,,2137,        artifact_objects = {},"[220, 220, 220, 220, 220, 220, 220, 24127, 62, 48205, 796, 23884]"
üß† ML Signal: Returning a dictionary of artifacts,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 22155, 286, 20316]",1.0,2172,ml_signal,483,Returning a dictionary of artifacts,,2149,"        portfolio_metric_dict, indicator_dict = normal_backtest(","[220, 220, 220, 220, 220, 220, 220, 15320, 62, 4164, 1173, 62, 11600, 11, 16916, 62, 11600, 796, 3487, 62, 1891, 9288, 7]"
üß† ML Signal: Iterating over a list to generate file paths based on frequency,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 7716, 2393, 13532, 1912, 319, 8373]",1.0,2189,ml_signal,449,Iterating over a list to generate file paths based on frequency,,2172,        self.risk_analysis_freq = [,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19121, 62, 20930, 62, 19503, 80, 796, 685]"
üß† ML Signal: Using list.extend to add multiple items to a list,"[8582, 100, 254, 10373, 26484, 25, 8554, 1351, 13, 2302, 437, 284, 751, 3294, 3709, 284, 257, 1351]",0.5,2231,ml_signal,450,Using list.extend to add multiple items to a list,,2189,"            ""{0}{1}"".format(*Freq.parse(_analysis_freq)) for _analysis_freq in risk_analysis_freq","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 45144, 15, 18477, 16, 92, 1911, 18982, 46491, 20366, 80, 13, 29572, 28264, 20930, 62, 19503, 80, 4008, 329, 4808, 20930, 62, 19503, 80, 287, 2526, 62, 20930, 62, 19503, 80]"
üß† ML Signal: Conditional logic to append specific file paths based on frequency,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 24443, 2176, 2393, 13532, 1912, 319, 8373]",0.5,2244,ml_signal,458,Conditional logic to append specific file paths based on frequency,,2231,        ret_freq = [],"[220, 220, 220, 220, 220, 220, 220, 1005, 62, 19503, 80, 796, 17635]"
‚ö†Ô∏è SAST Risk (Low): Use of warnings.warn without specifying a category,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 14601, 13, 40539, 1231, 31577, 257, 6536]",1.0,2288,sast_risk,463,Use of warnings.warn without specifying a category,Low,2244,"            ret_freq.extend(self._get_report_freq(executor_config[""kwargs""][""inner_executor""]))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 62, 19503, 80, 13, 2302, 437, 7, 944, 13557, 1136, 62, 13116, 62, 19503, 80, 7, 18558, 38409, 62, 11250, 14692, 46265, 22046, 1, 7131, 1, 5083, 62, 18558, 38409, 8973, 4008]"
‚ö†Ô∏è SAST Risk (Low): Use of warnings.warn without specifying a category,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 14601, 13, 40539, 1231, 31577, 257, 6536]",1.0,2288,sast_risk,468,Use of warnings.warn without specifying a category,Low,2288,,[]
‚úÖ Best Practice: Return the constructed list at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 262, 12006, 1351, 379, 262, 886, 286, 262, 2163]",1.0,2288,best_practice,468,Return the constructed list at the end of the function,,2288,,[]
üß† ML Signal: Inheritance from PortAnaRecord suggests a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 4347, 2025, 64, 23739, 5644, 257, 3912, 286, 16610, 11244]",1.0,2300,ml_signal,481,Inheritance from PortAnaRecord suggests a pattern of extending functionality,,2288,        artifact_objects = {},"[220, 220, 220, 220, 220, 220, 220, 24127, 62, 48205, 796, 23884]"
üß† ML Signal: Use of a class-level attribute to define dependencies,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1398, 12, 5715, 11688, 284, 8160, 20086]",1.0,2314,ml_signal,482,Use of a class-level attribute to define dependencies,,2300,        # custom strategy and get backtest,"[220, 220, 220, 220, 220, 220, 220, 1303, 2183, 4811, 290, 651, 736, 9288]"
üß† ML Signal: Use of default parameters can indicate common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 460, 7603, 2219, 8748, 7572]",0.5,2337,ml_signal,483,Use of default parameters can indicate common usage patterns,,2314,"        portfolio_metric_dict, indicator_dict = normal_backtest(","[220, 220, 220, 220, 220, 220, 220, 15320, 62, 4164, 1173, 62, 11600, 11, 16916, 62, 11600, 796, 3487, 62, 1891, 9288, 7]"
‚úÖ Best Practice: Documenting parameters in the docstring improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 16854, 278, 10007, 287, 262, 2205, 8841, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2360,best_practice,483,Documenting parameters in the docstring improves code readability and maintainability,,2337,"        portfolio_metric_dict, indicator_dict = normal_backtest(","[220, 220, 220, 220, 220, 220, 220, 15320, 62, 4164, 1173, 62, 11600, 11, 16916, 62, 11600, 796, 3487, 62, 1891, 9288, 7]"
‚úÖ Best Practice: Using super() to call the parent class's __init__ method is a good practice for inheritance,"[26486, 227, 6705, 19939, 25, 8554, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446, 318, 257, 922, 3357, 329, 24155]",0.5,2415,best_practice,497,Using super() to call the parent class's __init__ method is a good practice for inheritance,,2360,"                    f""the freq {_analysis_freq} report is not found, please set the corresponding env with `generate_portfolio_metrics=True`""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 1169, 2030, 80, 1391, 62, 20930, 62, 19503, 80, 92, 989, 318, 407, 1043, 11, 3387, 900, 262, 11188, 17365, 351, 4600, 8612, 378, 62, 634, 13652, 62, 4164, 10466, 28, 17821, 63, 1]"
"‚ö†Ô∏è SAST Risk (Low): deepcopy_basic_type might not handle all types correctly, ensure it's safe for the data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2769, 30073, 62, 35487, 62, 4906, 1244, 407, 5412, 477, 3858, 9380, 11, 4155, 340, 338, 3338, 329, 262, 1366]",0.5,2428,sast_risk,499,"deepcopy_basic_type might not handle all types correctly, ensure it's safe for the data",Low,2415,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Type checking with isinstance can be bypassed if the object is not of the expected type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5994, 10627, 351, 318, 39098, 460, 307, 17286, 276, 611, 262, 2134, 318, 407, 286, 262, 2938, 2099]",0.5,2447,sast_risk,501,Type checking with isinstance can be bypassed if the object is not of the expected type,Low,2428,                analysis = dict(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3781, 796, 8633, 3419]"
‚ö†Ô∏è SAST Risk (Low): Accessing dictionary keys without checking can lead to KeyError if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 22155, 8251, 1231, 10627, 460, 1085, 284, 7383, 12331, 611, 407, 12118, 6105]",0.5,2463,sast_risk,504,Accessing dictionary keys without checking can lead to KeyError if not handled properly,Low,2447,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Loading data from a file, which is a common pattern in ML workflows","[8582, 100, 254, 10373, 26484, 25, 12320, 1366, 422, 257, 2393, 11, 543, 318, 257, 2219, 3912, 287, 10373, 670, 44041]",0.5,2482,ml_signal,501,"Loading data from a file, which is a common pattern in ML workflows",,2463,                analysis = dict(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3781, 796, 8633, 3419]"
"üß† ML Signal: Loading a DataFrame, which is a common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 12320, 257, 6060, 19778, 11, 543, 318, 257, 2219, 4905, 287, 1366, 7587]",0.5,2522,ml_signal,503,"Loading a DataFrame, which is a common operation in data processing",,2482,"                    report_normal[""return""] - report_normal[""bench""], freq=_analysis_freq","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 989, 62, 11265, 14692, 7783, 8973, 532, 989, 62, 11265, 14692, 26968, 33116, 2030, 80, 28, 62, 20930, 62, 19503, 80]"
"üß† ML Signal: Accessing index levels, indicating multi-index DataFrame usage","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6376, 2974, 11, 12739, 5021, 12, 9630, 6060, 19778, 8748]",0.5,2553,ml_signal,505,"Accessing index levels, indicating multi-index DataFrame usage",,2522,"                analysis[""excess_return_with_cost""] = risk_analysis(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3781, 14692, 1069, 919, 62, 7783, 62, 4480, 62, 15805, 8973, 796, 2526, 62, 20930, 7]"
"üß† ML Signal: Converting configuration values to datetime, common in time series analysis","[8582, 100, 254, 10373, 26484, 25, 35602, 889, 8398, 3815, 284, 4818, 8079, 11, 2219, 287, 640, 2168, 3781]",0.5,2600,ml_signal,506,"Converting configuration values to datetime, common in time series analysis",,2553,"                    report_normal[""return""] - report_normal[""bench""] - report_normal[""cost""], freq=_analysis_freq","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 989, 62, 11265, 14692, 7783, 8973, 532, 989, 62, 11265, 14692, 26968, 8973, 532, 989, 62, 11265, 14692, 15805, 33116, 2030, 80, 28, 62, 20930, 62, 19503, 80]"
‚úÖ Best Practice: Checking for None to handle missing configuration values,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 284, 5412, 4814, 8398, 3815]",0.5,2636,best_practice,509,Checking for None to handle missing configuration values,,2600,                analysis_df = pd.concat(analysis)  # type: pd.DataFrame,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3781, 62, 7568, 796, 279, 67, 13, 1102, 9246, 7, 20930, 8, 220, 1303, 2099, 25, 279, 67, 13, 6601, 19778]"
‚úÖ Best Practice: Filtering dates to ensure valid backtest start,"[26486, 227, 6705, 19939, 25, 7066, 20212, 9667, 284, 4155, 4938, 736, 9288, 923]",0.5,2654,best_practice,513,Filtering dates to ensure valid backtest start,,2636,                # save results,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3613, 2482]"
"üß† ML Signal: Accessing DataFrame rows by index, common in data manipulation","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15274, 416, 6376, 11, 2219, 287, 1366, 17512]",0.5,2673,ml_signal,515,"Accessing DataFrame rows by index, common in data manipulation",,2654,                logger.info(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7]"
"‚ö†Ô∏è SAST Risk (Low): Shuffling data in place, which may lead to unintended side effects","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 911, 1648, 1359, 1366, 287, 1295, 11, 543, 743, 1085, 284, 30261, 1735, 3048]",1.0,2689,sast_risk,517,"Shuffling data in place, which may lead to unintended side effects",Low,2673,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Using deepcopy to avoid modifying the original object,"[26486, 227, 6705, 19939, 25, 8554, 2769, 30073, 284, 3368, 30620, 262, 2656, 2134]",1.0,2725,best_practice,519,Using deepcopy to avoid modifying the original object,,2689,"                pprint(f""The following are analysis results of benchmark return({_analysis_freq})."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 4798, 7, 69, 1, 464, 1708, 389, 3781, 2482, 286, 18335, 1441, 15090, 62, 20930, 62, 19503, 80, 30072, 19570]"
"üß† ML Signal: Modifying strategy configuration, indicating dynamic strategy adjustments","[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 4811, 8398, 11, 12739, 8925, 4811, 16895]",1.0,2764,ml_signal,521,"Modifying strategy configuration, indicating dynamic strategy adjustments",,2725,"                pprint(f""The following are analysis results of the excess return without cost({_analysis_freq})."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 4798, 7, 69, 1, 464, 1708, 389, 3781, 2482, 286, 262, 6992, 1441, 1231, 1575, 15090, 62, 20930, 62, 19503, 80, 30072, 19570]"
üß† ML Signal: Iterating over a range with a counter variable,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2837, 351, 257, 3753, 7885]",1.0,2823,ml_signal,516,Iterating over a range with a counter variable,,2764,"                    f""Portfolio analysis record 'port_analysis_{_analysis_freq}.pkl' has been saved as the artifact of the Experiment {self.recorder.experiment_id}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 13924, 13652, 3781, 1700, 705, 634, 62, 20930, 23330, 62, 20930, 62, 19503, 80, 27422, 79, 41582, 6, 468, 587, 7448, 355, 262, 24127, 286, 262, 29544, 1391, 944, 13, 8344, 2875, 13, 23100, 3681, 62, 312, 36786]"
üß† ML Signal: Calling a superclass method with dynamic arguments,"[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2208, 4871, 2446, 351, 8925, 7159]",0.5,2859,ml_signal,519,Calling a superclass method with dynamic arguments,,2823,"                pprint(f""The following are analysis results of benchmark return({_analysis_freq})."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 4798, 7, 69, 1, 464, 1708, 389, 3781, 2482, 286, 18335, 1441, 15090, 62, 20930, 62, 19503, 80, 30072, 19570]"
üß† ML Signal: Using a dictionary to map frequencies to dataframes,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 22155, 284, 3975, 19998, 284, 1366, 37805]",0.5,2889,ml_signal,522,Using a dictionary to map frequencies to dataframes,,2859,"                pprint(analysis[""excess_return_without_cost""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 4798, 7, 20930, 14692, 1069, 919, 62, 7783, 62, 19419, 62, 15805, 8973, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if key is not in single_run_artifacts,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 1994, 318, 407, 287, 2060, 62, 5143, 62, 50179]",1.0,2889,sast_risk,525,Potential KeyError if key is not in single_run_artifacts,Low,2889,,[]
üß† ML Signal: Adding metadata to a dataframe,"[8582, 100, 254, 10373, 26484, 25, 18247, 20150, 284, 257, 1366, 14535]",1.0,2912,ml_signal,527,Adding metadata to a dataframe,,2889,            if _analysis_freq not in indicator_dict:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 20930, 62, 19503, 80, 407, 287, 16916, 62, 11600, 25]"
‚úÖ Best Practice: Use pd.concat to combine dataframes efficiently,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 284, 12082, 1366, 37805, 18306]",0.5,2929,best_practice,533,Use pd.concat to combine dataframes efficiently,,2912,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Grouping and applying a function to a dataframe,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 11524, 257, 2163, 284, 257, 1366, 14535]",1.0,2946,ml_signal,533,Grouping and applying a function to a dataframe,,2929,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero in mean_std calculation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 287, 1612, 62, 19282, 17952]",0.5,2964,sast_risk,538,Potential division by zero in mean_std calculation,Low,2946,                # save results,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3613, 2482]"
‚úÖ Best Practice: Use pprint for better readability of data structures,"[26486, 227, 6705, 19939, 25, 5765, 279, 4798, 329, 1365, 1100, 1799, 286, 1366, 8573]",1.0,2975,best_practice,545,Use pprint for better readability of data structures,,2964,        return artifact_objects,"[220, 220, 220, 220, 220, 220, 220, 1441, 24127, 62, 48205]"
üß† ML Signal: Flattening a dictionary for logging purposes,"[8582, 100, 254, 10373, 26484, 25, 1610, 1078, 3101, 257, 22155, 329, 18931, 4959]",0.5,2983,ml_signal,547,Flattening a dictionary for logging purposes,,2975,    def list(self):,"[220, 220, 220, 825, 1351, 7, 944, 2599]"
üß† ML Signal: Logging metrics using a recorder object,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 20731, 1262, 257, 38156, 2134]",0.5,2999,ml_signal,554,Logging metrics using a recorder object,,2983,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Iterating over a class attribute,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1398, 11688]",0.5,3018,ml_signal,549,Iterating over a class attribute,,2999,        for _freq in self.all_freq:,"[220, 220, 220, 220, 220, 220, 220, 329, 4808, 19503, 80, 287, 2116, 13, 439, 62, 19503, 80, 25]"
üß† ML Signal: Conditional check against another class attribute,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 1028, 1194, 1398, 11688]",0.5,3034,ml_signal,551,Conditional check against another class attribute,,3018,                [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685]"
üß† ML Signal: Appending formatted strings to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 39559, 13042, 284, 257, 1351]",1.0,3067,ml_signal,553,Appending formatted strings to a list,,3034,"                    f""positions_normal_{_freq}.pkl"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 1930, 1756, 62, 11265, 23330, 62, 19503, 80, 27422, 79, 41582, 1600]"
‚ö†Ô∏è SAST Risk (Low): Use of warnings.warn without specifying a category,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 14601, 13, 40539, 1231, 31577, 257, 6536]",1.0,3083,sast_risk,554,Use of warnings.warn without specifying a category,Low,3067,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Return statement at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 2643, 379, 262, 886, 286, 262, 2163]",0.5,3099,best_practice,554,Return statement at the end of the function,,3083,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"

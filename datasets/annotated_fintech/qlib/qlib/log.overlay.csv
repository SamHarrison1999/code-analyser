annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Grouping imports by standard, third-party, and local modules improves readability.","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 416, 3210, 11, 2368, 12, 10608, 11, 290, 1957, 13103, 19575, 1100, 1799, 13]",0.5,7,best_practice,2,"Grouping imports by standard, third-party, and local modules improves readability.",,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Importing specific functions or classes can improve code clarity and reduce memory usage.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 16287, 290, 4646, 4088, 8748, 13]",0.5,9,best_practice,5,Importing specific functions or classes can improve code clarity and reduce memory usage.,,7,import logging,"[11748, 18931]"
‚úÖ Best Practice: Using context managers can help manage resources more efficiently.,"[26486, 227, 6705, 19939, 25, 8554, 4732, 11663, 460, 1037, 6687, 4133, 517, 18306, 13]",0.5,17,best_practice,8,Using context managers can help manage resources more efficiently.,,9,from logging import config as logging_config,"[6738, 18931, 1330, 4566, 355, 18931, 62, 11250]"
‚ö†Ô∏è SAST Risk (Low): Importing from a relative path can lead to module resolution issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 257, 3585, 3108, 460, 1085, 284, 8265, 6323, 2428, 13]",1.0,23,sast_risk,10,Importing from a relative path can lead to module resolution issues.,Low,17,from contextlib import contextmanager,"[6738, 4732, 8019, 1330, 4732, 37153]"
"üß† ML Signal: Use of metaclass pattern, which is an advanced Python feature","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1138, 330, 31172, 3912, 11, 543, 318, 281, 6190, 11361, 3895]",0.5,29,ml_signal,10,"Use of metaclass pattern, which is an advanced Python feature",,23,from contextlib import contextmanager,"[6738, 4732, 8019, 1330, 4732, 37153]"
‚úÖ Best Practice: Copying dictionary to avoid modifying the original,"[26486, 227, 6705, 19939, 25, 6955, 1112, 22155, 284, 3368, 30620, 262, 2656]",0.5,34,best_practice,12,Copying dictionary to avoid modifying the original,,29,from .config import C,"[6738, 764, 11250, 1330, 327]"
‚úÖ Best Practice: Checking for key existence before assignment to avoid overwriting,"[26486, 227, 6705, 19939, 25, 39432, 329, 1994, 6224, 878, 16237, 284, 3368, 6993, 799, 278]",1.0,41,best_practice,15,Checking for key existence before assignment to avoid overwriting,,34,class MetaLogger(type):,"[4871, 30277, 11187, 1362, 7, 4906, 2599]"
‚úÖ Best Practice: Using type.__new__ to create a new class instance,"[26486, 227, 6705, 19939, 25, 8554, 2099, 13, 834, 3605, 834, 284, 2251, 257, 649, 1398, 4554]",0.5,67,best_practice,19,Using type.__new__ to create a new class instance,,41,"            if key not in attrs and key != ""__reduce__"":","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1994, 407, 287, 708, 3808, 290, 1994, 14512, 366, 834, 445, 7234, 834, 1298]"
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",0.5,93,best_practice,19,Class docstring provides a brief description of the class purpose.,,67,"            if key not in attrs and key != ""__reduce__"":","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1994, 407, 287, 708, 3808, 290, 1994, 14512, 366, 834, 445, 7234, 834, 1298]"
üß† ML Signal: Initialization pattern for class with module_name attribute,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 3912, 329, 1398, 351, 8265, 62, 3672, 11688]",0.5,115,ml_signal,20,Initialization pattern for class with module_name attribute,,93,                attrs[key] = val,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 708, 3808, 58, 2539, 60, 796, 1188]"
üß† ML Signal: Private attribute pattern with double underscore,"[8582, 100, 254, 10373, 26484, 25, 15348, 11688, 3912, 351, 4274, 44810]",0.5,139,ml_signal,21,Private attribute pattern with double underscore,,115,"        return type.__new__(mcs, name, bases, attrs)","[220, 220, 220, 220, 220, 220, 220, 1441, 2099, 13, 834, 3605, 834, 7, 76, 6359, 11, 1438, 11, 12536, 11, 708, 3808, 8]"
‚úÖ Best Practice: Use of @property decorator for encapsulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 32652, 1741]",1.0,143,best_practice,25,Use of @property decorator for encapsulation,,139,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Method for creating or configuring a logger,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4441, 393, 4566, 870, 257, 49706]",1.0,143,ml_signal,23,Method for creating or configuring a logger,,143,,[]
üß† ML Signal: Usage of logging library to get a logger instance,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 18931, 5888, 284, 651, 257, 49706, 4554]",1.0,147,ml_signal,25,Usage of logging library to get a logger instance,,143,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Logger level set from a potentially mutable attribute,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 1362, 1241, 900, 422, 257, 6196, 4517, 540, 11688]",0.5,151,sast_risk,27,Logger level set from a potentially mutable attribute,Low,147,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Returning a configured logger instance,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 17839, 49706, 4554]",0.5,165,ml_signal,29,Returning a configured logger instance,,151,"    def __init__(self, module_name):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 8265, 62, 3672, 2599]"
‚úÖ Best Practice: Method names should follow snake_case naming convention in Python,"[26486, 227, 6705, 19939, 25, 11789, 3891, 815, 1061, 17522, 62, 7442, 19264, 9831, 287, 11361]",1.0,169,best_practice,27,Method names should follow snake_case naming convention in Python,,165,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Setting an attribute directly from a method parameter,"[8582, 100, 254, 10373, 26484, 25, 25700, 281, 11688, 3264, 422, 257, 2446, 11507]",0.5,183,ml_signal,29,Setting an attribute directly from a method parameter,,169,"    def __init__(self, module_name):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 8265, 62, 3672, 2599]"
‚úÖ Best Practice: Use of __getattr__ to handle attribute access dynamically,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 1136, 35226, 834, 284, 5412, 11688, 1895, 32366]",0.5,197,best_practice,29,Use of __getattr__ to handle attribute access dynamically,,183,"    def __init__(self, module_name):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 8265, 62, 3672, 2599]"
‚úÖ Best Practice: Use of a set for membership testing is efficient,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 900, 329, 9931, 4856, 318, 6942]",1.0,215,best_practice,31,Use of a set for membership testing is efficient,,197,        # this feature name conflicts with the attribute with Logger,"[220, 220, 220, 220, 220, 220, 220, 1303, 428, 3895, 1438, 12333, 351, 262, 11688, 351, 5972, 1362]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic AttributeError without a message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 3460, 4163, 12331, 1231, 257, 3275]",0.5,228,sast_risk,33,Raising a generic AttributeError without a message,Low,215,        self.__level = 0,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 834, 5715, 796, 657]"
üß† ML Signal: Delegating attribute access to another object's method,"[8582, 100, 254, 10373, 26484, 25, 1024, 1455, 803, 11688, 1895, 284, 1194, 2134, 338, 2446]",1.0,233,ml_signal,35,Delegating attribute access to another object's method,,228,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Initialize class attributes in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 1398, 12608, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,233,best_practice,34,Initialize class attributes in the constructor for clarity and maintainability,,233,,[]
‚úÖ Best Practice: Use of a method to retrieve or create a logger promotes encapsulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2446, 284, 19818, 393, 2251, 257, 49706, 21068, 32652, 1741]",0.5,250,best_practice,38,Use of a method to retrieve or create a logger promotes encapsulation,,233,        logger.setLevel(self.__level),"[220, 220, 220, 220, 220, 220, 220, 49706, 13, 2617, 4971, 7, 944, 13, 834, 5715, 8]"
üß† ML Signal: Pattern of checking existence before creating an object,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 6224, 878, 4441, 281, 2134]",0.5,250,ml_signal,40,Pattern of checking existence before creating an object,,250,,[]
üß† ML Signal: Pattern of creating and storing objects in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 290, 23069, 5563, 287, 257, 22155]",0.5,250,ml_signal,40,Pattern of creating and storing objects in a dictionary,,250,,[]
‚úÖ Best Practice: Separate method for creating a logger improves code readability and reusability,"[26486, 227, 6705, 19939, 25, 8621, 30748, 2446, 329, 4441, 257, 49706, 19575, 2438, 1100, 1799, 290, 302, 385, 1799]",0.5,270,best_practice,48,Separate method for creating a logger improves code readability and reusability,,250,        return self.logger.__getattribute__(name),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 6404, 1362, 13, 834, 1136, 42348, 834, 7, 3672, 8]"
‚úÖ Best Practice: Use of a consistent logger naming convention,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 6414, 49706, 19264, 9831]",0.5,270,best_practice,49,Use of a consistent logger naming convention,,270,,[]
üß† ML Signal: Pattern of setting logger level,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4634, 49706, 1241]",0.5,278,ml_signal,51,Pattern of setting logger level,,270,class _QLibLoggerManager:,"[4871, 4808, 9711, 571, 11187, 1362, 13511, 25]"
üß† ML Signal: Pattern of adding handlers to a logger,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4375, 32847, 284, 257, 49706]",0.5,291,ml_signal,53,Pattern of adding handlers to a logger,,278,        self._loggers = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 6404, 5355, 796, 23884]"
‚úÖ Best Practice: Use of StreamHandler for logging to console,"[26486, 227, 6705, 19939, 25, 5765, 286, 13860, 25060, 329, 18931, 284, 8624]",0.5,302,best_practice,55,Use of StreamHandler for logging to console,,291,"    def setLevel(self, level):","[220, 220, 220, 825, 900, 4971, 7, 944, 11, 1241, 2599]"
‚úÖ Best Practice: Use of a formatter for consistent log message format,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 1296, 1436, 329, 6414, 2604, 3275, 5794]",0.5,320,best_practice,57,Use of a formatter for consistent log message format,,302,            logger.setLevel(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 2617, 4971, 7, 5715, 8]"
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799, 13]",1.0,325,best_practice,35,Initialize instance variables in the constructor for clarity and maintainability.,,320,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Iterating over a collection to apply a method to each item,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 284, 4174, 257, 2446, 284, 1123, 2378]",0.5,346,ml_signal,37,Iterating over a collection to apply a method to each item,,325,        logger = logging.getLogger(self.module_name),"[220, 220, 220, 220, 220, 220, 220, 49706, 796, 18931, 13, 1136, 11187, 1362, 7, 944, 13, 21412, 62, 3672, 8]"
üß† ML Signal: Method call on an object within a loop,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 1626, 257, 9052]",0.5,355,ml_signal,39,Method call on an object within a loop,,346,        return logger,"[220, 220, 220, 220, 220, 220, 220, 1441, 49706]"
‚úÖ Best Practice: Delegating level setting to individual logger objects,"[26486, 227, 6705, 19939, 25, 1024, 1455, 803, 1241, 4634, 284, 1981, 49706, 5563]",0.5,355,best_practice,40,Delegating level setting to individual logger objects,,355,,[]
‚úÖ Best Practice: Using setdefault to retrieve or create a logger ensures a single instance per module.,"[26486, 227, 6705, 19939, 25, 8554, 900, 12286, 284, 19818, 393, 2251, 257, 49706, 19047, 257, 2060, 4554, 583, 8265, 13]",0.5,365,best_practice,52,Using setdefault to retrieve or create a logger ensures a single instance per module.,,355,    def __init__(self):,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 2599]"
üß† ML Signal: Adjusting logger levels dynamically can indicate different logging needs or environments.,"[8582, 100, 254, 10373, 26484, 25, 20292, 278, 49706, 2974, 32366, 460, 7603, 1180, 18931, 2476, 393, 12493, 13]",0.5,365,ml_signal,54,Adjusting logger levels dynamically can indicate different logging needs or environments.,,365,,[]
üß† ML Signal: Singleton pattern usage for logger management can be a useful feature for ML models to recognize.,"[8582, 100, 254, 10373, 26484, 25, 5573, 10565, 3912, 8748, 329, 49706, 4542, 460, 307, 257, 4465, 3895, 329, 10373, 4981, 284, 7564, 13]",0.5,383,ml_signal,57,Singleton pattern usage for logger management can be a useful feature for ML models to recognize.,,365,            logger.setLevel(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 2617, 4971, 7, 5715, 8]"
üß† ML Signal: Use of a logger indicates logging behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 49706, 9217, 18931, 4069]",1.0,401,ml_signal,57,Use of a logger indicates logging behavior,,383,            logger.setLevel(level),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 2617, 4971, 7, 5715, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive information through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1321, 832, 18931]",0.5,401,sast_risk,58,Potential exposure of sensitive information through logging,Low,401,,[]
üß† ML Signal: Use of a list to store time marks indicates time tracking behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1351, 284, 3650, 640, 8849, 9217, 640, 9646, 4069]",1.0,409,ml_signal,60,Use of a list to store time marks indicates time tracking behavior,,401,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Add a decorator to indicate this is a class method,"[26486, 227, 6705, 19939, 25, 3060, 257, 11705, 1352, 284, 7603, 428, 318, 257, 1398, 2446]",0.5,417,best_practice,60,Add a decorator to indicate this is a class method,,409,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Usage of time function to get current timestamp,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 2163, 284, 651, 1459, 41033]",1.0,425,ml_signal,68,Usage of time function to get current timestamp,,417,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Appending to a list, indicating stack-like behavior","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 257, 1351, 11, 12739, 8931, 12, 2339, 4069]",0.5,444,ml_signal,70,"Appending to a list, indicating stack-like behavior",,425,            level = C.logging_level,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 796, 327, 13, 6404, 2667, 62, 5715]"
‚ö†Ô∏è SAST Risk (Low): Popping from a list without checking if it's empty can raise an IndexError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7695, 2105, 422, 257, 1351, 1231, 10627, 611, 340, 338, 6565, 460, 5298, 281, 12901, 12331, 13]",1.0,487,sast_risk,74,Popping from a list without checking if it's empty can raise an IndexError.,Low,444,"            # If the module_name is already qlib.xxx, we do not format here. Otherwise, it will become qlib.qlib.xxx.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1002, 262, 8265, 62, 3672, 318, 1541, 10662, 8019, 13, 31811, 11, 356, 466, 407, 5794, 994, 13, 15323, 11, 340, 481, 1716, 10662, 8019, 13, 80, 8019, 13, 31811, 13]"
‚úÖ Best Practice: Use @classmethod decorator to indicate that the method is a class method.,"[26486, 227, 6705, 19939, 25, 5765, 2488, 4871, 24396, 11705, 1352, 284, 7603, 326, 262, 2446, 318, 257, 1398, 2446, 13]",0.5,487,best_practice,76,Use @classmethod decorator to indicate that the method is a class method.,,487,,[]
‚ö†Ô∏è SAST Risk (Low): Using pop() without checking if the list is empty can lead to an IndexError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1461, 3419, 1231, 10627, 611, 262, 1351, 318, 6565, 460, 1085, 284, 281, 12901, 12331, 13]",0.5,487,sast_risk,82,Using pop() without checking if the list is empty can lead to an IndexError.,Low,487,,[]
‚úÖ Best Practice: Consider adding type hints for the parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,487,best_practice,85,Consider adding type hints for the parameters and return type for better readability and maintainability.,,487,,[]
‚ö†Ô∏è SAST Risk (Low): Using pop() without checking if the list is empty can lead to an IndexError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1461, 3419, 1231, 10627, 611, 262, 1351, 318, 6565, 460, 1085, 284, 281, 12901, 12331, 13]",0.5,500,sast_risk,92,Using pop() without checking if the list is empty can lead to an IndexError.,Low,487,    def set_time_mark(cls):,"[220, 220, 220, 825, 900, 62, 2435, 62, 4102, 7, 565, 82, 2599]"
üß† ML Signal: Logging patterns can be used to train models to detect logging practices.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 7572, 460, 307, 973, 284, 4512, 4981, 284, 4886, 18931, 6593, 13]",1.0,511,ml_signal,95,Logging patterns can be used to train models to detect logging practices.,,500,        :return: float,"[220, 220, 220, 220, 220, 220, 220, 1058, 7783, 25, 12178]"
‚úÖ Best Practice: Provide a clear and concise docstring for the function.,"[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 13]",0.5,528,best_practice,96,Provide a clear and concise docstring for the function.,,511,            A timestamp for current time.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 317, 41033, 329, 1459, 640, 13]"
üß† ML Signal: Logging behavior can be used to understand how often and when functions are called.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4069, 460, 307, 973, 284, 1833, 703, 1690, 290, 618, 5499, 389, 1444, 13]",0.5,545,ml_signal,107,Logging behavior can be used to understand how often and when functions are called.,,528,        return cls.time_marks.pop(),"[220, 220, 220, 220, 220, 220, 220, 1441, 537, 82, 13, 2435, 62, 14306, 13, 12924, 3419]"
üß† ML Signal: Tracking time marks can be used to analyze performance patterns.,"[8582, 100, 254, 10373, 26484, 25, 37169, 640, 8849, 460, 307, 973, 284, 16602, 2854, 7572, 13]",0.5,551,ml_signal,109,Tracking time marks can be used to analyze performance patterns.,,545,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
"üß† ML Signal: Use of 'yield' indicates this function is a generator, which can be a pattern of interest.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 88, 1164, 6, 9217, 428, 2163, 318, 257, 17301, 11, 543, 460, 307, 257, 3912, 286, 1393, 13]",0.5,572,ml_signal,112,"Use of 'yield' indicates this function is a generator, which can be a pattern of interest.",,551,"        Get last time mark from stack, calculate time diff with current time.","[220, 220, 220, 220, 220, 220, 220, 3497, 938, 640, 1317, 422, 8931, 11, 15284, 640, 814, 351, 1459, 640, 13]"
üß† ML Signal: Logging completion times can be used to analyze function execution duration.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 11939, 1661, 460, 307, 973, 284, 16602, 2163, 9706, 9478, 13]",0.5,594,ml_signal,114,Logging completion times can be used to analyze function execution duration.,,572,            Time diff calculated by last time mark with current time.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3862, 814, 10488, 416, 938, 640, 1317, 351, 1459, 640, 13]"
‚úÖ Best Practice: Include type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,605,best_practice,113,Include type hints for function parameters and return type for better readability and maintainability,,594,        :return: float,"[220, 220, 220, 220, 220, 220, 220, 1058, 7783, 25, 12178]"
‚ö†Ô∏è SAST Risk (Medium): Directly using external input in logging configuration can lead to code execution if not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 1262, 7097, 5128, 287, 18931, 8398, 460, 1085, 284, 2438, 9706, 611, 407, 31031]",0.5,611,sast_risk,119,Directly using external input in logging configuration can lead to code execution if not validated,Medium,605,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,629,best_practice,120,Class should have a docstring explaining its purpose and usage,,611,"    def log_cost_time(cls, info=""Done""):","[220, 220, 220, 825, 2604, 62, 15805, 62, 2435, 7, 565, 82, 11, 7508, 2625, 45677, 1, 2599]"
‚úÖ Best Practice: Use of default parameter value for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 13688]",1.0,637,best_practice,121,Use of default parameter value for flexibility,,629,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Proper use of superclass initialization,"[26486, 227, 6705, 19939, 25, 45989, 779, 286, 2208, 4871, 37588]",1.0,665,best_practice,122,Proper use of superclass initialization,,637,"        Get last time mark from stack, calculate time diff with current time, and log time diff and info.","[220, 220, 220, 220, 220, 220, 220, 3497, 938, 640, 1317, 422, 8931, 11, 15284, 640, 814, 351, 1459, 640, 11, 290, 2604, 640, 814, 290, 7508, 13]"
üß† ML Signal: Storing parameter in instance variable for later use,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 11507, 287, 4554, 7885, 329, 1568, 779]",1.0,673,ml_signal,125,Storing parameter in instance variable for later use,,665,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,693,best_practice,124,Consider adding a docstring to describe the function's purpose and parameters,,673,            Info that will be logged into stdout.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14151, 326, 481, 307, 18832, 656, 14367, 448, 13]"
‚úÖ Best Practice: Initialize variables at the point of declaration,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 966, 286, 14305]",0.5,716,best_practice,126,Initialize variables at the point of declaration,,693,        cost_time = time() - cls.time_marks.pop(),"[220, 220, 220, 220, 220, 220, 220, 1575, 62, 2435, 796, 640, 3419, 532, 537, 82, 13, 2435, 62, 14306, 13, 12924, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Using re.match with user-controlled input can lead to ReDoS (Regular Expression Denial of Service),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 302, 13, 15699, 351, 2836, 12, 14401, 5128, 460, 1085, 284, 797, 46498, 357, 40164, 41986, 5601, 498, 286, 4809, 8]",0.5,716,sast_risk,128,Using re.match with user-controlled input can lead to ReDoS (Regular Expression Denial of Service),Medium,716,,[]
‚úÖ Best Practice: Catch specific exceptions instead of a generic Exception,"[26486, 227, 6705, 19939, 25, 25750, 2176, 13269, 2427, 286, 257, 14276, 35528]",0.5,727,best_practice,132,Catch specific exceptions instead of a generic Exception,,716,"        """"""logt.","[220, 220, 220, 220, 220, 220, 220, 37227, 6404, 83, 13]"
‚úÖ Best Practice: Explicitly return the boolean value,"[26486, 227, 6705, 19939, 25, 11884, 306, 1441, 262, 25131, 1988]",0.5,735,best_practice,135,Explicitly return the boolean value,,727,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Use isinstance to check the type of 'self.param',"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 262, 2099, 286, 705, 944, 13, 17143, 6]",1.0,735,best_practice,134,Use isinstance to check the type of 'self.param',,735,,[]
üß† ML Signal: Pattern of negating a boolean result,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 2469, 803, 257, 25131, 1255]",1.0,744,ml_signal,136,Pattern of negating a boolean result,,735,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use isinstance to check the type of 'self.param',"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 262, 2099, 286, 705, 944, 13, 17143, 6]",1.0,756,best_practice,138,Use isinstance to check the type of 'self.param',,744,            name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438]"
üß† ML Signal: Use of generator expression with any() for short-circuit evaluation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 17301, 5408, 351, 597, 3419, 329, 1790, 12, 21170, 5013, 12660]",1.0,770,ml_signal,140,Use of generator expression with any() for short-circuit evaluation,,756,            show_start,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 905, 62, 9688]"
‚úÖ Best Practice: Use of a dictionary to map handler levels for easy access and modification,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 3975, 21360, 2974, 329, 2562, 1895, 290, 17613]",0.5,784,best_practice,162,Use of a dictionary to map handler levels for easy access and modification,,770,"    def __init__(self, param=None):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 5772, 28, 14202, 2599]"
‚ö†Ô∏è SAST Risk (Low): Direct access to logging.root.manager.loggerDict can lead to unexpected behavior if not handled carefully,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 18931, 13, 15763, 13, 37153, 13, 6404, 1362, 35, 713, 460, 1085, 284, 10059, 4069, 611, 407, 12118, 7773]",1.0,796,sast_risk,164,Direct access to logging.root.manager.loggerDict can lead to unexpected behavior if not handled carefully,Low,784,        self.param = param,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 17143, 796, 5772]"
üß† ML Signal: Iterating over logger handlers to modify their levels,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 49706, 32847, 284, 13096, 511, 2974]",0.5,806,ml_signal,168,Iterating over logger handlers to modify their levels,,796,        match = False,"[220, 220, 220, 220, 220, 220, 220, 2872, 796, 10352]"
‚úÖ Best Practice: Conditional return to provide flexibility in function output,"[26486, 227, 6705, 19939, 25, 9724, 1859, 1441, 284, 2148, 13688, 287, 2163, 5072]",0.5,824,best_practice,171,Conditional return to provide flexibility in function output,,806,                match = True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2872, 796, 6407]"
‚úÖ Best Practice: Using a context manager to manage resource setup and teardown,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 284, 6687, 8271, 9058, 290, 573, 446, 593]",0.5,824,best_practice,192,Using a context manager to manage resource setup and teardown,,824,,[]
‚úÖ Best Practice: Ensuring resources are cleaned up in a finally block,"[26486, 227, 6705, 19939, 25, 48221, 870, 4133, 389, 20750, 510, 287, 257, 3443, 2512]",0.5,828,best_practice,197,Ensuring resources are cleaned up in a finally block,,824,    ---------,"[220, 220, 220, 45337]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying handler levels could lead to misconfigured logging if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 21360, 2974, 714, 1085, 284, 2984, 11250, 1522, 18931, 611, 407, 12118, 6105]",0.5,832,sast_risk,197,Directly modifying handler levels could lead to misconfigured logging if not handled properly,Low,828,    ---------,"[220, 220, 220, 45337]"

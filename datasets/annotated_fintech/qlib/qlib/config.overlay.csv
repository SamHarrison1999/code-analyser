annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of TYPE_CHECKING to avoid circular imports and improve performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 41876, 62, 50084, 2751, 284, 3368, 18620, 17944, 290, 2987, 2854]",1.0,2,best_practice,19,Use of TYPE_CHECKING to avoid circular imports and improve performance,,0,import platform,"[11748, 3859]"
üß† ML Signal: Use of default values for class attributes,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 3815, 329, 1398, 12608]",1.0,9,ml_signal,23,Use of default values for class attributes,,2,from typing import TYPE_CHECKING,"[6738, 19720, 1330, 41876, 62, 50084, 2751]"
‚úÖ Best Practice: Use of BaseSettings for configuration management,"[26486, 227, 6705, 19939, 25, 5765, 286, 7308, 26232, 329, 8398, 4542]",1.0,9,best_practice,24,Use of BaseSettings for configuration management,,9,,[]
üß† ML Signal: Use of default URI for MLflow tracking,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 43975, 329, 10373, 11125, 9646]",1.0,9,ml_signal,26,Use of default URI for MLflow tracking,,9,,[]
‚úÖ Best Practice: Use of os and Path to construct file paths,"[26486, 227, 6705, 19939, 25, 5765, 286, 28686, 290, 10644, 284, 5678, 2393, 13532]",1.0,15,best_practice,27,Use of os and Path to construct file paths,,9,if TYPE_CHECKING:,"[361, 41876, 62, 50084, 2751, 25]"
üß† ML Signal: Use of default experiment name,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 6306, 1438]",1.0,21,ml_signal,27,Use of default experiment name,,15,if TYPE_CHECKING:,"[361, 41876, 62, 50084, 2751, 25]"
üß† ML Signal: Use of a settings class to manage configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6460, 1398, 284, 6687, 8398]",0.5,21,ml_signal,37,Use of a settings class to manage configuration,,21,,[]
‚úÖ Best Practice: Type hinting for class attributes improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,28,best_practice,38,Type hinting for class attributes improves code readability and maintainability,,21,class QSettings(BaseSettings):,"[4871, 1195, 26232, 7, 14881, 26232, 2599]"
üß† ML Signal: Use of environment variables for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2858, 9633, 329, 8398]",0.5,35,ml_signal,38,Use of environment variables for configuration,,28,class QSettings(BaseSettings):,"[4871, 1195, 26232, 7, 14881, 26232, 2599]"
‚úÖ Best Practice: Use of a configuration dictionary to manage environment settings,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 8398, 22155, 284, 6687, 2858, 6460]",0.5,53,best_practice,41,Use of a configuration dictionary to manage environment settings,,35,    It tries to provide a default settings for most of Qlib's components.,"[220, 220, 220, 632, 8404, 284, 2148, 257, 4277, 6460, 329, 749, 286, 1195, 8019, 338, 6805, 13]"
üß† ML Signal: Singleton pattern for settings instance,"[8582, 100, 254, 10373, 26484, 25, 5573, 10565, 3912, 329, 6460, 4554]",0.5,82,ml_signal,46,Singleton pattern for settings instance,,53,"        - Actively passed-in settings, like `qlib.init(provider_uri=...)`","[220, 220, 220, 220, 220, 220, 220, 532, 2191, 2280, 3804, 12, 259, 6460, 11, 588, 4600, 80, 8019, 13, 15003, 7, 15234, 1304, 62, 9900, 28, 23029, 63]"
‚úÖ Best Practice: Use of deepcopy to avoid mutable default argument issues,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 3368, 4517, 540, 4277, 4578, 2428]",1.0,91,best_practice,45,Use of deepcopy to avoid mutable default argument issues,,82,    - The priority of settings is,"[220, 220, 220, 532, 383, 8475, 286, 6460, 318]"
‚úÖ Best Practice: Encapsulation of initialization logic in a separate method,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 37588, 9156, 287, 257, 4553, 2446]",0.5,102,best_practice,47,Encapsulation of initialization logic in a separate method,,91,        - The default settings,"[220, 220, 220, 220, 220, 220, 220, 532, 383, 4277, 6460]"
‚úÖ Best Practice: Use of double underscore for method name indicates a special method in Python,"[26486, 227, 6705, 19939, 25, 5765, 286, 4274, 44810, 329, 2446, 1438, 9217, 257, 2041, 2446, 287, 11361]",0.5,113,best_practice,47,Use of double underscore for method name indicates a special method in Python,,102,        - The default settings,"[220, 220, 220, 220, 220, 220, 220, 532, 383, 4277, 6460]"
üß† ML Signal: Accessing dictionary elements using keys,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 4847, 1262, 8251]",0.5,117,ml_signal,49,Accessing dictionary elements using keys,,113,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Direct access to internal dictionary may expose internal structure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 5387, 22155, 743, 15651, 5387, 4645]",0.5,117,sast_risk,50,Direct access to internal dictionary may expose internal structure,Low,117,,[]
‚úÖ Best Practice: Use of __getattr__ to dynamically handle attribute access,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 1136, 35226, 834, 284, 32366, 5412, 11688, 1895]",1.0,121,best_practice,49,Use of __getattr__ to dynamically handle attribute access,,117,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Checks if an attribute exists in a specific dictionary,"[8582, 100, 254, 10373, 26484, 25, 47719, 611, 281, 11688, 7160, 287, 257, 2176, 22155]",1.0,136,ml_signal,51,Checks if an attribute exists in a specific dictionary,,121,    mlflow: MLflowSettings = MLflowSettings(),"[220, 220, 220, 285, 1652, 9319, 25, 10373, 11125, 26232, 796, 10373, 11125, 26232, 3419]"
üß† ML Signal: Accessing dictionary values using dynamic keys,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 3815, 1262, 8925, 8251]",1.0,148,ml_signal,53,Accessing dictionary values using dynamic keys,,136,    model_config = SettingsConfigDict(,"[220, 220, 220, 2746, 62, 11250, 796, 16163, 16934, 35, 713, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of internal attribute names in error messages,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 5387, 11688, 3891, 287, 4049, 6218]",1.0,166,sast_risk,55,Potential exposure of internal attribute names in error messages,Low,148,"        env_nested_delimiter=""_"",","[220, 220, 220, 220, 220, 220, 220, 17365, 62, 77, 7287, 62, 12381, 320, 2676, 2625, 62, 1600]"
‚úÖ Best Practice: Consider adding a docstring to describe the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007, 13]",1.0,178,best_practice,53,Consider adding a docstring to describe the method's purpose and parameters.,,166,    model_config = SettingsConfigDict(,"[220, 220, 220, 2746, 62, 11250, 796, 16163, 16934, 35, 713, 7]"
üß† ML Signal: Accessing dictionary-like objects with a get method is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 12, 2339, 5563, 351, 257, 651, 2446, 318, 257, 2219, 3912, 13]",1.0,196,ml_signal,55,Accessing dictionary-like objects with a get method is a common pattern.,,178,"        env_nested_delimiter=""_"",","[220, 220, 220, 220, 220, 220, 220, 17365, 62, 77, 7287, 62, 12381, 320, 2676, 2625, 62, 1600]"
‚ö†Ô∏è SAST Risk (Low): Directly accessing private attributes may lead to maintenance challenges.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 22534, 2839, 12608, 743, 1085, 284, 9262, 6459, 13]",1.0,200,sast_risk,56,Directly accessing private attributes may lead to maintenance challenges.,Low,196,    ),"[220, 220, 220, 1267]"
‚úÖ Best Practice: Use of __setitem__ allows object to behave like a dictionary,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 2617, 9186, 834, 3578, 2134, 284, 17438, 588, 257, 22155]",1.0,218,best_practice,55,Use of __setitem__ allows object to behave like a dictionary,,200,"        env_nested_delimiter=""_"",","[220, 220, 220, 220, 220, 220, 220, 17365, 62, 77, 7287, 62, 12381, 320, 2676, 2625, 62, 1600]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying __dict__ can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 11593, 11600, 834, 460, 1085, 284, 10059, 4069]",1.0,218,sast_risk,57,Directly modifying __dict__ can lead to unexpected behavior,Low,218,,[]
‚ö†Ô∏è SAST Risk (Medium): Directly modifying __dict__ can lead to unexpected behavior and security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 30620, 11593, 11600, 834, 460, 1085, 284, 10059, 4069, 290, 2324, 2428, 13]",1.0,218,sast_risk,57,Directly modifying __dict__ can lead to unexpected behavior and security issues.,Medium,218,,[]
‚úÖ Best Practice: Consider using a setter method or property to encapsulate attribute setting logic.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 900, 353, 2446, 393, 3119, 284, 32652, 5039, 11688, 4634, 9156, 13]",1.0,218,best_practice,58,Consider using a setter method or property to encapsulate attribute setting logic.,,218,,[]
"‚ö†Ô∏è SAST Risk (Medium): Modifying a protected member like ""_config"" can lead to unintended side effects.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 3401, 4035, 257, 6861, 2888, 588, 45434, 11250, 1, 460, 1085, 284, 30261, 1735, 3048, 13]",0.5,218,sast_risk,60,"Modifying a protected member like ""_config"" can lead to unintended side effects.",Medium,218,,[]
üß† ML Signal: Custom attribute setting logic indicates a pattern for dynamic attribute management.,"[8582, 100, 254, 10373, 26484, 25, 8562, 11688, 4634, 9156, 9217, 257, 3912, 329, 8925, 11688, 4542, 13]",0.5,218,ml_signal,61,Custom attribute setting logic indicates a pattern for dynamic attribute management.,,218,,[]
‚úÖ Best Practice: Use of double underscores for method name indicates a special method in Python,"[26486, 227, 6705, 19939, 25, 5765, 286, 4274, 41731, 329, 2446, 1438, 9217, 257, 2041, 2446, 287, 11361]",0.5,226,best_practice,59,Use of double underscores for method name indicates a special method in Python,,218,QSETTINGS = QSettings(),"[48, 28480, 51, 20754, 796, 1195, 26232, 3419]"
üß† ML Signal: Accessing dictionary directly within a method,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 3264, 1626, 257, 2446]",0.5,226,ml_signal,61,Accessing dictionary directly within a method,,226,,[]
‚ö†Ô∏è SAST Risk (Low): Direct access to internal dictionary may expose internal state,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 5387, 22155, 743, 15651, 5387, 1181]",0.5,229,sast_risk,62,Direct access to internal dictionary may expose internal state,Low,226,class Config:,"[4871, 17056, 25]"
‚úÖ Best Practice: Implementing __getstate__ for custom pickling behavior,"[26486, 227, 6705, 19939, 25, 48282, 278, 11593, 1136, 5219, 834, 329, 2183, 2298, 1359, 4069]",1.0,229,best_practice,61,Implementing __getstate__ for custom pickling behavior,,229,,[]
"‚ö†Ô∏è SAST Risk (Low): Returning self.__dict__ can expose internal state, consider filtering sensitive data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 2116, 13, 834, 11600, 834, 460, 15651, 5387, 1181, 11, 2074, 25431, 8564, 1366]",1.0,243,sast_risk,63,"Returning self.__dict__ can expose internal state, consider filtering sensitive data",Low,229,"    def __init__(self, default_conf):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4277, 62, 10414, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Directly updating the object's __dict__ with external state can lead to security issues if the state is not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 19698, 262, 2134, 338, 11593, 11600, 834, 351, 7097, 1181, 460, 1085, 284, 2324, 2428, 611, 262, 1181, 318, 407, 6105, 31031, 13]",1.0,257,sast_risk,63,Directly updating the object's __dict__ with external state can lead to security issues if the state is not properly validated.,Medium,243,"    def __init__(self, default_conf):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4277, 62, 10414, 2599]"
üß† ML Signal: Usage of __setstate__ indicates custom deserialization logic.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 2617, 5219, 834, 9217, 2183, 748, 48499, 1634, 9156, 13]",0.5,268,ml_signal,65,Usage of __setstate__ indicates custom deserialization logic.,,257,        self.reset(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 42503, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Updating the object's __dict__ without validation can lead to arbitrary code execution if the state is tampered with.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 3205, 38734, 262, 2134, 338, 11593, 11600, 834, 1231, 21201, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 1181, 318, 21885, 13653, 351, 13]",0.5,268,sast_risk,66,Updating the object's __dict__ without validation can lead to arbitrary code execution if the state is tampered with.,Medium,268,,[]
‚úÖ Best Practice: Implementing __str__ method for better string representation of the object,"[26486, 227, 6705, 19939, 25, 48282, 278, 11593, 2536, 834, 2446, 329, 1365, 4731, 10552, 286, 262, 2134]",1.0,279,best_practice,65,Implementing __str__ method for better string representation of the object,,268,        self.reset(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 42503, 3419]"
‚ö†Ô∏è SAST Risk (Low): Directly accessing and converting internal dictionary to string may expose sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 22534, 290, 23202, 5387, 22155, 284, 4731, 743, 15651, 8564, 1366]",1.0,292,sast_risk,67,Directly accessing and converting internal dictionary to string may expose sensitive data,Low,279,"    def __getitem__(self, key):","[220, 220, 220, 825, 11593, 1136, 9186, 834, 7, 944, 11, 1994, 2599]"
‚úÖ Best Practice: Use __repr__ to provide an unambiguous string representation of the object,"[26486, 227, 6705, 19939, 25, 5765, 11593, 260, 1050, 834, 284, 2148, 281, 42053, 29709, 4731, 10552, 286, 262, 2134]",0.5,305,best_practice,67,Use __repr__ to provide an unambiguous string representation of the object,,292,"    def __getitem__(self, key):","[220, 220, 220, 825, 11593, 1136, 9186, 834, 7, 944, 11, 1994, 2599]"
‚ö†Ô∏è SAST Risk (Low): Directly accessing and converting internal dictionary to string may expose sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 22534, 290, 23202, 5387, 22155, 284, 4731, 743, 15651, 8564, 1366]",0.5,325,sast_risk,68,Directly accessing and converting internal dictionary to string may expose sensitive data,Low,305,"        return self.__dict__[""_config""][key]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 7131, 2539, 60]"
üß† ML Signal: Accessing internal dictionary for representation,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 5387, 22155, 329, 10552]",0.5,339,ml_signal,70,Accessing internal dictionary for representation,,325,"    def __getattr__(self, attr):","[220, 220, 220, 825, 11593, 1136, 35226, 834, 7, 944, 11, 708, 81, 2599]"
‚úÖ Best Practice: Use of deepcopy to ensure a complete copy of the default configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 4155, 257, 1844, 4866, 286, 262, 4277, 8398]",1.0,339,best_practice,69,Use of deepcopy to ensure a complete copy of the default configuration,,339,,[]
üß† ML Signal: Accessing and modifying the internal dictionary of an object,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 290, 30620, 262, 5387, 22155, 286, 281, 2134]",1.0,360,ml_signal,71,Accessing and modifying the internal dictionary of an object,,339,"        if attr in self.__dict__[""_config""]:","[220, 220, 220, 220, 220, 220, 220, 611, 708, 81, 287, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 5974]"
‚ö†Ô∏è SAST Risk (Low): Direct manipulation of __dict__ can lead to unexpected behavior if not handled carefully,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 17512, 286, 11593, 11600, 834, 460, 1085, 284, 10059, 4069, 611, 407, 12118, 7773]",1.0,384,sast_risk,72,Direct manipulation of __dict__ can lead to unexpected behavior if not handled carefully,Low,360,"            return self.__dict__[""_config""][attr]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 7131, 35226, 60]"
üß† ML Signal: Use of dynamic argument unpacking with *args and **kwargs,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8925, 4578, 8593, 5430, 351, 1635, 22046, 290, 12429, 46265, 22046]",1.0,405,ml_signal,71,Use of dynamic argument unpacking with *args and **kwargs,,384,"        if attr in self.__dict__[""_config""]:","[220, 220, 220, 220, 220, 220, 220, 611, 708, 81, 287, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 5974]"
‚ö†Ô∏è SAST Risk (Low): Directly updating internal dictionary with external input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 19698, 5387, 22155, 351, 7097, 5128]",1.0,429,sast_risk,72,Directly updating internal dictionary with external input,Low,405,"            return self.__dict__[""_config""][attr]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 7131, 35226, 60]"
‚ö†Ô∏è SAST Risk (Low): Accessing and modifying a private attribute directly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 290, 30620, 257, 2839, 11688, 3264]",0.5,455,sast_risk,74,Accessing and modifying a private attribute directly,Low,429,"        raise AttributeError(f""No such `{attr}` in self._config"")","[220, 220, 220, 220, 220, 220, 220, 5298, 3460, 4163, 12331, 7, 69, 1, 2949, 884, 4600, 90, 35226, 92, 63, 287, 2116, 13557, 11250, 4943]"
üß† ML Signal: Method that updates object state from another object's dictionary,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5992, 2134, 1181, 422, 1194, 2134, 338, 22155]",1.0,481,ml_signal,74,Method that updates object state from another object's dictionary,,455,"        raise AttributeError(f""No such `{attr}` in self._config"")","[220, 220, 220, 220, 220, 220, 220, 5298, 3460, 4163, 12331, 7, 69, 1, 2949, 884, 4600, 90, 35226, 92, 63, 287, 2116, 13557, 11250, 4943]"
‚ö†Ô∏è SAST Risk (Low): Directly accessing and updating with another object's private dictionary,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 22534, 290, 19698, 351, 1194, 2134, 338, 2839, 22155]",1.0,507,sast_risk,74,Directly accessing and updating with another object's private dictionary,Low,481,"        raise AttributeError(f""No such `{attr}` in self._config"")","[220, 220, 220, 220, 220, 220, 220, 5298, 3460, 4163, 12331, 7, 69, 1, 2949, 884, 4600, 90, 35226, 92, 63, 287, 2116, 13557, 11250, 4943]"
‚úÖ Best Practice: Importing inside a function can reduce initial load time and avoid circular imports.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2641, 257, 2163, 460, 4646, 4238, 3440, 640, 290, 3368, 18620, 17944, 13]",1.0,531,best_practice,77,Importing inside a function can reduce initial load time and avoid circular imports.,,507,"        return self.__dict__[""_config""].get(key, default)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 4083, 1136, 7, 2539, 11, 4277, 8]"
‚úÖ Best Practice: Early return pattern improves readability by reducing nesting.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 3912, 19575, 1100, 1799, 416, 8868, 46282, 13]",1.0,546,best_practice,79,Early return pattern improves readability by reducing nesting.,,531,"    def __setitem__(self, key, value):","[220, 220, 220, 825, 11593, 2617, 9186, 834, 7, 944, 11, 1994, 11, 1988, 2599]"
‚úÖ Best Practice: Conditional logging setup allows for flexible configuration.,"[26486, 227, 6705, 19939, 25, 9724, 1859, 18931, 9058, 3578, 329, 12846, 8398, 13]",1.0,567,best_practice,83,Conditional logging setup allows for flexible configuration.,,546,"        self.__dict__[""_config""][attr] = value","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 834, 11600, 834, 14692, 62, 11250, 1, 7131, 35226, 60, 796, 1988]"
üß† ML Signal: Constants like PROTOCOL_VERSION can be used to track versioning in ML models.,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 588, 48006, 4503, 3535, 62, 43717, 460, 307, 973, 284, 2610, 2196, 278, 287, 10373, 4981, 13]",1.0,567,ml_signal,87,Constants like PROTOCOL_VERSION can be used to track versioning in ML models.,,567,,[]
üß† ML Signal: NUM_USABLE_CPU can be used to optimize resource allocation in ML tasks.,"[8582, 100, 254, 10373, 26484, 25, 36871, 62, 2937, 17534, 62, 36037, 460, 307, 973, 284, 27183, 8271, 20157, 287, 10373, 8861, 13]",1.0,580,ml_signal,89,NUM_USABLE_CPU can be used to optimize resource allocation in ML tasks.,,567,        return self.__dict__,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 834, 11600, 834]"
üß† ML Signal: Caching strategies can be important for performance in ML systems.,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 10064, 460, 307, 1593, 329, 2854, 287, 10373, 3341, 13]",1.0,580,ml_signal,90,Caching strategies can be important for performance in ML systems.,,580,,[]
üß† ML Signal: Number of CPU cores can influence parallel processing in ML tasks.,"[8582, 100, 254, 10373, 26484, 25, 7913, 286, 9135, 21758, 460, 4588, 10730, 7587, 287, 10373, 8861, 13]",1.0,580,ml_signal,90,Number of CPU cores can influence parallel processing in ML tasks.,,580,,[]
üß† ML Signal: Logging levels can be used to control verbosity in ML applications.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 2974, 460, 307, 973, 284, 1630, 15942, 16579, 287, 10373, 5479, 13]",1.0,580,ml_signal,90,Logging levels can be used to control verbosity in ML applications.,,580,,[]
‚úÖ Best Practice: Using Path objects for file paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 8554, 10644, 5563, 329, 2393, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,654,best_practice,190,Using Path objects for file paths improves cross-platform compatibility.,,580,"                ""format"": ""[%(process)s:%(threadName)s](%(asctime)s) %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 18982, 1298, 12878, 4, 7, 14681, 8, 82, 25, 4, 7, 16663, 5376, 8, 82, 16151, 4, 7, 292, 310, 524, 8, 82, 8, 4064, 7, 5715, 3672, 8, 82, 532, 4064, 7, 3672, 8, 82, 532, 685, 4, 7, 34345, 8, 82, 25, 4, 7, 2815, 23397, 8, 67, 60, 532, 4064, 7, 20500, 8, 82, 1]"
‚úÖ Best Practice: Using Path objects for file paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 8554, 10644, 5563, 329, 2393, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,728,best_practice,190,Using Path objects for file paths improves cross-platform compatibility.,,654,"                ""format"": ""[%(process)s:%(threadName)s](%(asctime)s) %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 18982, 1298, 12878, 4, 7, 14681, 8, 82, 25, 4, 7, 16663, 5376, 8, 82, 16151, 4, 7, 292, 310, 524, 8, 82, 8, 4064, 7, 5715, 3672, 8, 82, 532, 4064, 7, 3672, 8, 82, 532, 685, 4, 7, 34345, 8, 82, 25, 4, 7, 2815, 23397, 8, 67, 60, 532, 4064, 7, 20500, 8, 82, 1]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,745,best_practice,214,Constants are defined in uppercase to indicate immutability.,,728,"        ""disable_existing_loggers"": False,","[220, 220, 220, 220, 220, 220, 220, 366, 40223, 62, 25687, 62, 6404, 5355, 1298, 10352, 11]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,754,best_practice,216,Constants are defined in uppercase to indicate immutability.,,745,    # Default config for experiment manager,"[220, 220, 220, 1303, 15161, 4566, 329, 6306, 4706]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,770,best_practice,218,Constants are defined in uppercase to indicate immutability.,,754,"        ""class"": ""MLflowExpManager"",","[220, 220, 220, 220, 220, 220, 220, 366, 4871, 1298, 366, 5805, 11125, 16870, 13511, 1600]"
‚úÖ Best Practice: Call to super() ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398]",1.0,786,best_practice,218,Call to super() ensures proper initialization of the base class,,770,"        ""class"": ""MLflowExpManager"",","[220, 220, 220, 220, 220, 220, 220, 366, 4871, 1298, 366, 5805, 11125, 16870, 13511, 1600]"
‚úÖ Best Practice: Use of a leading underscore in _registered indicates intended private use,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3756, 44810, 287, 4808, 33736, 9217, 5292, 2839, 779]",1.0,798,best_practice,220,Use of a leading underscore in _registered indicates intended private use,,786,"        ""kwargs"": {","[220, 220, 220, 220, 220, 220, 220, 366, 46265, 22046, 1298, 1391]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,815,best_practice,227,Use of type hints for function parameters improves code readability and maintainability.,,798,"        ""period"": ""I"",  # uint32","[220, 220, 220, 220, 220, 220, 220, 366, 41007, 1298, 366, 40, 1600, 220, 1303, 20398, 2624]"
üß† ML Signal: Storing input parameters as instance variables is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 5128, 10007, 355, 4554, 9633, 318, 257, 2219, 3912, 13]",0.5,827,ml_signal,233,Storing input parameters as instance variables is a common pattern.,,815,"        ""period"": 0,","[220, 220, 220, 220, 220, 220, 220, 366, 41007, 1298, 657, 11]"
üß† ML Signal: Storing input parameters as instance variables is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 5128, 10007, 355, 4554, 9633, 318, 257, 2219, 3912, 13]",0.5,831,ml_signal,236,Storing input parameters as instance variables is a common pattern.,,827,"    },","[220, 220, 220, 8964]"
"‚ö†Ô∏è SAST Risk (Low): No validation for the contents of provider_uri, which could lead to unexpected behavior if malicious input is provided.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 329, 262, 10154, 286, 10131, 62, 9900, 11, 543, 714, 1085, 284, 10059, 4069, 611, 17412, 5128, 318, 2810, 13]",1.0,835,sast_risk,236,"No validation for the contents of provider_uri, which could lead to unexpected behavior if malicious input is provided.",Low,831,"    },","[220, 220, 220, 8964]"
‚úÖ Best Practice: Check for valid types before processing to ensure robustness.,"[26486, 227, 6705, 19939, 25, 6822, 329, 4938, 3858, 878, 7587, 284, 4155, 12373, 1108, 13]",1.0,858,best_practice,239,Check for valid types before processing to ensure robustness.,,835,"        ""task_url"": ""mongodb://localhost:27017/"",","[220, 220, 220, 220, 220, 220, 220, 366, 35943, 62, 6371, 1298, 366, 31059, 375, 65, 1378, 36750, 25, 1983, 29326, 14, 1600]"
‚úÖ Best Practice: Convert non-dict input to a dict for consistent processing.,"[26486, 227, 6705, 19939, 25, 38240, 1729, 12, 11600, 5128, 284, 257, 8633, 329, 6414, 7587, 13]",1.0,875,best_practice,242,Convert non-dict input to a dict for consistent processing.,,858,"    # Shift minute for highfreq minute data, used in backtest","[220, 220, 220, 1303, 15576, 5664, 329, 1029, 19503, 80, 5664, 1366, 11, 973, 287, 736, 9288]"
"‚ö†Ô∏è SAST Risk (Low): Error message reveals the type of the input, which could be used for information disclosure.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 10069, 262, 2099, 286, 262, 5128, 11, 543, 714, 307, 973, 329, 1321, 13019, 13]",1.0,887,sast_risk,245,"Error message reveals the type of the input, which could be used for information disclosure.",Low,875,"    ""min_data_shift"": 0,","[220, 220, 220, 366, 1084, 62, 7890, 62, 30846, 1298, 657, 11]"
üß† ML Signal: Usage of QlibConfig and DataPathManager indicates a pattern for managing data paths.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1195, 8019, 16934, 290, 6060, 15235, 13511, 9217, 257, 3912, 329, 11149, 1366, 13532, 13]",0.5,893,ml_signal,248,Usage of QlibConfig and DataPathManager indicates a pattern for managing data paths.,,887,MODE_CONF = {,"[49058, 62, 10943, 37, 796, 1391]"
‚úÖ Best Practice: Use Path's expanduser and resolve for handling file paths safely.,"[26486, 227, 6705, 19939, 25, 5765, 10644, 338, 4292, 7220, 290, 10568, 329, 9041, 2393, 13532, 11512, 13]",0.5,909,best_practice,250,Use Path's expanduser and resolve for handling file paths safely.,,893,        # config it in qlib.init(),"[220, 220, 220, 220, 220, 220, 220, 1303, 4566, 340, 287, 10662, 8019, 13, 15003, 3419]"
‚úÖ Best Practice: Consider adding type hints for the return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,915,best_practice,248,Consider adding type hints for the return type for better readability and maintainability.,,909,MODE_CONF = {,"[49058, 62, 10943, 37, 796, 1391]"
‚úÖ Best Practice: Use isinstance for type checking to ensure the correct type is being handled.,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 329, 2099, 10627, 284, 4155, 262, 3376, 2099, 318, 852, 12118, 13]",0.5,931,best_practice,250,Use isinstance for type checking to ensure the correct type is being handled.,,915,        # config it in qlib.init(),"[220, 220, 220, 220, 220, 220, 220, 1303, 4566, 340, 287, 10662, 8019, 13, 15003, 3419]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 460, 307, 5789, 26, 4155, 5128, 318, 5336, 36951, 611, 2406, 422, 281, 1418, 81, 8459, 2723, 13]",1.0,941,sast_risk,252,Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source.,Low,931,        # redis,"[220, 220, 220, 220, 220, 220, 220, 1303, 2266, 271]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 460, 307, 5789, 26, 4155, 5128, 318, 5336, 36951, 611, 2406, 422, 281, 1418, 81, 8459, 2723, 13]",1.0,963,sast_risk,253,Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source.,Low,941,"        ""redis_host"": ""127.0.0.1"",","[220, 220, 220, 220, 220, 220, 220, 366, 445, 271, 62, 4774, 1298, 366, 16799, 13, 15, 13, 15, 13, 16, 1600]"
üß† ML Signal: Conditional logic based on regex matches can indicate patterns in URI types.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 40364, 7466, 460, 7603, 7572, 287, 43975, 3858, 13]",0.5,972,ml_signal,256,Conditional logic based on regex matches can indicate patterns in URI types.,,963,        # cache,"[220, 220, 220, 220, 220, 220, 220, 1303, 12940]"
‚úÖ Best Practice: Convert freq to string to ensure consistent type handling,"[26486, 227, 6705, 19939, 25, 38240, 2030, 80, 284, 4731, 284, 4155, 6414, 2099, 9041]",0.5,986,best_practice,260,Convert freq to string to ensure consistent type handling,,972,"        ""mount_path"": None,","[220, 220, 220, 220, 220, 220, 220, 366, 14948, 62, 6978, 1298, 6045, 11]"
‚úÖ Best Practice: Use default frequency if freq is None or not in provider_uri,"[26486, 227, 6705, 19939, 25, 5765, 4277, 8373, 611, 2030, 80, 318, 6045, 393, 407, 287, 10131, 62, 9900]",0.5,1001,best_practice,263,Use default frequency if freq is None or not in provider_uri,,986,        # config it in user's own code,"[220, 220, 220, 220, 220, 220, 220, 1303, 4566, 340, 287, 2836, 338, 898, 2438]"
üß† ML Signal: Checking URI type to determine path handling,"[8582, 100, 254, 10373, 26484, 25, 39432, 43975, 2099, 284, 5004, 3108, 9041]",0.5,1020,ml_signal,267,Checking URI type to determine path handling,,1001,        # Disable cache by default. Avoid introduce advanced features for beginners,"[220, 220, 220, 220, 220, 220, 220, 1303, 31529, 12940, 416, 4277, 13, 24390, 10400, 6190, 3033, 329, 31729]"
üß† ML Signal: Platform-specific path handling for Windows,"[8582, 100, 254, 10373, 26484, 25, 19193, 12, 11423, 3108, 9041, 329, 3964]",1.0,1030,ml_signal,271,Platform-specific path handling for Windows,,1020,        # client config,"[220, 220, 220, 220, 220, 220, 220, 1303, 5456, 4566]"
‚ö†Ô∏è SAST Risk (Low): Potential issue with path handling on Windows,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 351, 3108, 9041, 319, 3964]",1.0,1051,sast_risk,274,Potential issue with path handling on Windows,Low,1030,        # The nfs should be auto-mounted by qlib on other,"[220, 220, 220, 220, 220, 220, 220, 1303, 383, 299, 9501, 815, 307, 8295, 12, 29728, 416, 10662, 8019, 319, 584]"
‚ö†Ô∏è SAST Risk (Low): NotImplementedError could expose internal logic,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 714, 15651, 5387, 9156]",0.5,1068,sast_risk,277,NotImplementedError could expose internal logic,Low,1051,"        ""logging_level"": logging.INFO,","[220, 220, 220, 220, 220, 220, 220, 366, 6404, 2667, 62, 5715, 1298, 18931, 13, 10778, 11]"
"üß† ML Signal: Method that sets a mode, indicating a state change pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5621, 257, 4235, 11, 12739, 257, 1181, 1487, 3912]",1.0,1089,ml_signal,274,"Method that sets a mode, indicating a state change pattern",,1068,        # The nfs should be auto-mounted by qlib on other,"[220, 220, 220, 220, 220, 220, 220, 1303, 383, 299, 9501, 815, 307, 8295, 12, 29728, 416, 10662, 8019, 319, 584]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'mode' is not validated and MODE_CONF is not properly defined,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 14171, 6, 318, 407, 31031, 290, 337, 16820, 62, 10943, 37, 318, 407, 6105, 5447]",0.5,1112,sast_risk,275,Potential risk if 'mode' is not validated and MODE_CONF is not properly defined,Low,1089,        # serversS(such as PAI) [auto_mount:True],"[220, 220, 220, 220, 220, 220, 220, 1303, 9597, 50, 7, 10508, 355, 8147, 40, 8, 685, 23736, 62, 14948, 25, 17821, 60]"
"üß† ML Signal: Accessing a configuration dictionary with a key, indicating a common pattern of configuration management","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 8398, 22155, 351, 257, 1994, 11, 12739, 257, 2219, 3912, 286, 8398, 4542]",0.5,1129,ml_signal,277,"Accessing a configuration dictionary with a key, indicating a common pattern of configuration management",,1112,"        ""logging_level"": logging.INFO,","[220, 220, 220, 220, 220, 220, 220, 366, 6404, 2667, 62, 5715, 1298, 18931, 13, 10778, 11]"
‚ö†Ô∏è SAST Risk (Low): Risk of KeyError if 'mode' is not a valid key in MODE_CONF,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 19602, 286, 7383, 12331, 611, 705, 14171, 6, 318, 407, 257, 4938, 1994, 287, 337, 16820, 62, 10943, 37]",1.0,1146,sast_risk,277,Risk of KeyError if 'mode' is not a valid key in MODE_CONF,Low,1129,"        ""logging_level"": logging.INFO,","[220, 220, 220, 220, 220, 220, 220, 366, 6404, 2667, 62, 5715, 1298, 18931, 13, 10778, 11]"
üß† ML Signal: Method that updates configuration based on region,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5992, 8398, 1912, 319, 3814]",1.0,1163,ml_signal,277,Method that updates configuration based on region,,1146,"        ""logging_level"": logging.INFO,","[220, 220, 220, 220, 220, 220, 220, 366, 6404, 2667, 62, 5715, 1298, 18931, 13, 10778, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk if region input is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 3814, 5128, 318, 407, 31031]",0.5,1180,sast_risk,277,Potential risk if region input is not validated,Medium,1163,"        ""logging_level"": logging.INFO,","[220, 220, 220, 220, 220, 220, 220, 366, 6404, 2667, 62, 5715, 1298, 18931, 13, 10778, 11]"
üß† ML Signal: Function checks membership in a global or external list,"[8582, 100, 254, 10373, 26484, 25, 15553, 8794, 9931, 287, 257, 3298, 393, 7097, 1351]",1.0,1204,ml_signal,280,Function checks membership in a global or external list,,1180,        # each element of custom_ops should be Type[ExpressionOps] or dict,"[220, 220, 220, 220, 220, 220, 220, 1303, 1123, 5002, 286, 2183, 62, 2840, 815, 307, 5994, 58, 16870, 2234, 41472, 60, 393, 8633]"
"üß† ML Signal: Method returning an instance of a class, indicating a factory or builder pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 281, 4554, 286, 257, 1398, 11, 12739, 257, 8860, 393, 27098, 3912]",1.0,1242,ml_signal,282,"Method returning an instance of a class, indicating a factory or builder pattern",,1204,"        # if element of custom_ops is dict, it represents the config of custom operator and should include `class` and `module_path` keys.","[220, 220, 220, 220, 220, 220, 220, 1303, 611, 5002, 286, 2183, 62, 2840, 318, 8633, 11, 340, 6870, 262, 4566, 286, 2183, 10088, 290, 815, 2291, 4600, 4871, 63, 290, 4600, 21412, 62, 6978, 63, 8251, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive data if provider_uri or mount_path contains sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1366, 611, 10131, 62, 9900, 393, 3817, 62, 6978, 4909, 8564, 1321]",0.5,1246,sast_risk,284,Potential exposure of sensitive data if provider_uri or mount_path contains sensitive information,Low,1242,"    },","[220, 220, 220, 8964]"
"üß† ML Signal: Accessing dictionary keys, indicating a pattern of configuration or settings retrieval","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 8251, 11, 12739, 257, 3912, 286, 8398, 393, 6460, 45069]",0.5,1247,ml_signal,285,"Accessing dictionary keys, indicating a pattern of configuration or settings retrieval",,1246,},[92]
"üß† ML Signal: Usage of a custom method to format a URI, indicating a pattern for data handling","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2446, 284, 5794, 257, 43975, 11, 12739, 257, 3912, 329, 1366, 9041]",0.5,1247,ml_signal,286,"Usage of a custom method to format a URI, indicating a pattern for data handling",,1247,,[]
‚úÖ Best Practice: Checking if _mount_path is a dictionary to ensure correct data structure,"[26486, 227, 6705, 19939, 25, 39432, 611, 4808, 14948, 62, 6978, 318, 257, 22155, 284, 4155, 3376, 1366, 4645]",1.0,1274,best_practice,288,Checking if _mount_path is a dictionary to ensure correct data structure,,1247,"    ""provider_uri"": ""~/.qlib/qlib_data/cn_data_1min"",","[220, 220, 220, 366, 15234, 1304, 62, 9900, 1298, 366, 93, 11757, 80, 8019, 14, 80, 8019, 62, 7890, 14, 31522, 62, 7890, 62, 16, 1084, 1600]"
üß† ML Signal: Pattern of converting a single value to a dictionary for uniform access,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 23202, 257, 2060, 1988, 284, 257, 22155, 329, 8187, 1895]",1.0,1288,ml_signal,290,Pattern of converting a single value to a dictionary for uniform access,,1274,"    ""expression_cache"": ""DiskExpressionCache"",","[220, 220, 220, 366, 38011, 62, 23870, 1298, 366, 40961, 16870, 2234, 30562, 1600]"
‚úÖ Best Practice: Using set operations to find missing frequencies,"[26486, 227, 6705, 19939, 25, 8554, 900, 4560, 284, 1064, 4814, 19998]",0.5,1289,best_practice,292,Using set operations to find missing frequencies,,1288,},[92]
"‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks, which can be disabled in optimized mode","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 11, 543, 460, 307, 10058, 287, 23392, 4235]",1.0,1297,sast_risk,295,"Use of assert for runtime checks, which can be disabled in optimized mode",Low,1289,    REG_CN: {,"[220, 220, 220, 23337, 62, 44175, 25, 1391]"
‚úÖ Best Practice: Using Path.expanduser() to handle user directories in paths,"[26486, 227, 6705, 19939, 25, 8554, 10644, 13, 11201, 392, 7220, 3419, 284, 5412, 2836, 29196, 287, 13532]",1.0,1315,best_practice,297,Using Path.expanduser() to handle user directories in paths,,1297,"        ""limit_threshold"": 0.095,","[220, 220, 220, 220, 220, 220, 220, 366, 32374, 62, 400, 10126, 1298, 657, 13, 2931, 20, 11]"
üß† ML Signal: Updating instance attributes with processed data,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 4554, 12608, 351, 13686, 1366]",0.5,1330,ml_signal,298,Updating instance attributes with processed data,,1315,"        ""deal_price"": ""close"",","[220, 220, 220, 220, 220, 220, 220, 366, 31769, 62, 20888, 1298, 366, 19836, 1600]"
üß† ML Signal: Use of default parameters and **kwargs for flexible function calls,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 290, 12429, 46265, 22046, 329, 12846, 2163, 3848]",0.5,1345,ml_signal,298,Use of default parameters and **kwargs for flexible function calls,,1330,"        ""deal_price"": ""close"",","[220, 220, 220, 220, 220, 220, 220, 366, 31769, 62, 20888, 1298, 366, 19836, 1600]"
‚úÖ Best Practice: Resetting state before applying new configuration,"[26486, 227, 6705, 19939, 25, 30027, 889, 1181, 878, 11524, 649, 8398]",0.5,1352,best_practice,313,Resetting state before applying new configuration,,1345,class QlibConfig(Config):,"[4871, 1195, 8019, 16934, 7, 16934, 2599]"
‚úÖ Best Practice: Using a utility function to set logging configuration,"[26486, 227, 6705, 19939, 25, 8554, 257, 10361, 2163, 284, 900, 18931, 8398]",0.5,1371,best_practice,317,Using a utility function to set logging configuration,,1352,"    DEFAULT_FREQ = ""__DEFAULT_FREQ""","[220, 220, 220, 5550, 38865, 62, 37, 2200, 48, 796, 366, 834, 7206, 38865, 62, 37, 2200, 48, 1]"
‚úÖ Best Practice: Using a utility function to get a logger,"[26486, 227, 6705, 19939, 25, 8554, 257, 10361, 2163, 284, 651, 257, 49706]",0.5,1385,best_practice,319,Using a utility function to get a logger,,1371,"    def __init__(self, default_conf):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4277, 62, 10414, 2599]"
‚úÖ Best Practice: Using a method to set mode based on configuration,"[26486, 227, 6705, 19939, 25, 8554, 257, 2446, 284, 900, 4235, 1912, 319, 8398]",0.5,1385,best_practice,322,Using a method to set mode based on configuration,,1385,,[]
‚úÖ Best Practice: Using a method to set region with a default fallback,"[26486, 227, 6705, 19939, 25, 8554, 257, 2446, 284, 900, 3814, 351, 257, 4277, 2121, 1891]",0.5,1393,best_practice,324,Using a method to set region with a default fallback,,1385,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Logging unrecognized configuration keys,"[26486, 227, 6705, 19939, 25, 5972, 2667, 43483, 1143, 8398, 8251]",0.5,1401,best_practice,328,Logging unrecognized configuration keys,,1393,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Resolving paths after setting configuration,"[26486, 227, 6705, 19939, 25, 1874, 10890, 13532, 706, 4634, 8398]",0.5,1413,best_practice,331,Resolving paths after setting configuration,,1401,"            """"""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive information in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1321, 287, 17259]",0.5,1441,sast_risk,343,Potential exposure of sensitive information in logs,Low,1413,"            if isinstance(provider_uri, (str, dict, Path)):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 15234, 1304, 62, 9900, 11, 357, 2536, 11, 8633, 11, 10644, 8, 2599]"
"üß† ML Signal: Function call to register operations, indicating a setup or initialization pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 7881, 4560, 11, 12739, 257, 9058, 393, 37588, 3912]",1.0,1480,ml_signal,345,"Function call to register operations, indicating a setup or initialization pattern",,1441,                    provider_uri = {QlibConfig.DEFAULT_FREQ: provider_uri},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 62, 9900, 796, 1391, 48, 8019, 16934, 13, 7206, 38865, 62, 37, 2200, 48, 25, 10131, 62, 9900, 92]"
"üß† ML Signal: Function call to register data wrappers, indicating a setup or initialization pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 7881, 1366, 7917, 11799, 11, 12739, 257, 9058, 393, 37588, 3912]",1.0,1517,ml_signal,347,"Function call to register data wrappers, indicating a setup or initialization pattern",,1480,"                raise TypeError(f""provider_uri does not support {type(provider_uri)}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 5994, 12331, 7, 69, 1, 15234, 1304, 62, 9900, 857, 407, 1104, 1391, 4906, 7, 15234, 1304, 62, 9900, 38165, 4943]"
"üß† ML Signal: Initialization of an experiment manager, indicating a setup or configuration pattern","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 281, 6306, 4706, 11, 12739, 257, 9058, 393, 8398, 3912]",1.0,1559,ml_signal,349,"Initialization of an experiment manager, indicating a setup or configuration pattern",,1517,                if QlibConfig.DataPathManager.get_uri_type(_uri) == QlibConfig.LOCAL_URI:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1195, 8019, 16934, 13, 6601, 15235, 13511, 13, 1136, 62, 9900, 62, 4906, 28264, 9900, 8, 6624, 1195, 8019, 16934, 13, 29701, 1847, 62, 47269, 25]"
"üß† ML Signal: Recorder initialization, indicating a logging or tracking pattern","[8582, 100, 254, 10373, 26484, 25, 3311, 2875, 37588, 11, 12739, 257, 18931, 393, 9646, 3912]",1.0,1574,ml_signal,351,"Recorder initialization, indicating a logging or tracking pattern",,1559,            return provider_uri,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 10131, 62, 9900]"
"üß† ML Signal: Registration of a recorder, indicating a logging or tracking pattern","[8582, 100, 254, 10373, 26484, 25, 24610, 286, 257, 38156, 11, 12739, 257, 18931, 393, 9646, 3912]",1.0,1584,ml_signal,353,"Registration of a recorder, indicating a logging or tracking pattern",,1574,        @staticmethod,"[220, 220, 220, 220, 220, 220, 220, 2488, 12708, 24396]"
"üß† ML Signal: Experiment exit handling, indicating a cleanup or finalization pattern","[8582, 100, 254, 10373, 26484, 25, 29544, 8420, 9041, 11, 12739, 257, 27425, 393, 2457, 1634, 3912]",1.0,1620,ml_signal,355,"Experiment exit handling, indicating a cleanup or finalization pattern",,1584,"            uri = uri if isinstance(uri, str) else str(uri.expanduser().resolve())","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2956, 72, 796, 2956, 72, 611, 318, 39098, 7, 9900, 11, 965, 8, 2073, 965, 7, 9900, 13, 11201, 392, 7220, 22446, 411, 6442, 28955]"
"üß† ML Signal: Version reset, indicating a state management pattern","[8582, 100, 254, 10373, 26484, 25, 10628, 13259, 11, 12739, 257, 1181, 4542, 3912]",0.5,1656,ml_signal,357,"Version reset, indicating a state management pattern",,1620,            # such as 'host:/data/'   (User may define short hostname by themselves or use localhost),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 884, 355, 705, 4774, 14079, 7890, 14, 6, 220, 220, 357, 12982, 743, 8160, 1790, 2583, 3672, 416, 2405, 393, 779, 1957, 4774, 8]"
‚úÖ Best Practice: Explicitly setting a flag to indicate registration status,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 257, 6056, 284, 7603, 9352, 3722]",0.5,1656,best_practice,359,Explicitly setting a flag to indicate registration status,,1656,,[]
‚úÖ Best Practice: Consider importing at the top of the file for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 379, 262, 1353, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1692,best_practice,355,Consider importing at the top of the file for better readability and maintainability.,,1656,"            uri = uri if isinstance(uri, str) else str(uri.expanduser().resolve())","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2956, 72, 796, 2956, 72, 611, 318, 39098, 7, 9900, 11, 965, 8, 2073, 965, 7, 9900, 13, 11201, 392, 7220, 22446, 411, 6442, 28955]"
üß† ML Signal: Accessing configuration or settings using a key-value pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 8398, 393, 6460, 1262, 257, 1994, 12, 8367, 3912, 13]",1.0,1728,ml_signal,357,Accessing configuration or settings using a key-value pattern.,,1692,            # such as 'host:/data/'   (User may define short hostname by themselves or use localhost),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 884, 355, 705, 4774, 14079, 7890, 14, 6, 220, 220, 357, 12982, 743, 8160, 1790, 2583, 3672, 416, 2405, 393, 779, 1957, 4774, 8]"
‚ö†Ô∏è SAST Risk (High): Modifying a library's internal version attribute can lead to unexpected behavior or compatibility issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 3401, 4035, 257, 5888, 338, 5387, 2196, 11688, 460, 1085, 284, 10059, 4069, 393, 17764, 2428, 13]",1.0,1754,sast_risk,360,Modifying a library's internal version attribute can lead to unexpected behavior or compatibility issues.,High,1728,            if is_nfs_or_win and not is_win:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 62, 77, 9501, 62, 273, 62, 5404, 290, 407, 318, 62, 5404, 25]"
‚ö†Ô∏è SAST Risk (High): Using a backup version attribute without validation can lead to inconsistencies or errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 257, 11559, 2196, 11688, 1231, 21201, 460, 1085, 284, 40467, 393, 8563, 13]",1.0,1778,sast_risk,363,Using a backup version attribute without validation can lead to inconsistencies or errors.,High,1754,                return QlibConfig.LOCAL_URI,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1195, 8019, 16934, 13, 29701, 1847, 62, 47269]"
‚úÖ Best Practice: Check if 'kernels' is callable before invoking it,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 74, 44930, 6, 318, 869, 540, 878, 39744, 340]",1.0,1791,best_practice,362,Check if 'kernels' is callable before invoking it,,1778,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",0.5,1803,best_practice,366,Method should have a docstring explaining its purpose,,1791,"            """"""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Consider using a property decorator for getter methods,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 3119, 11705, 1352, 329, 651, 353, 5050]",0.5,1815,best_practice,368,Consider using a property decorator for getter methods,,1803,"            """"""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Direct instantiation of a class without context or error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 9113, 3920, 286, 257, 1398, 1231, 4732, 393, 4049, 9041]",0.5,1827,sast_risk,368,Direct instantiation of a class without context or error handling,Low,1815,"            """"""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37227]"

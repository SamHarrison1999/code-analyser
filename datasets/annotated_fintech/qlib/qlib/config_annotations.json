[
  {
    "line": 19,
    "text": "import platform",
    "annotation": "\u2705 Best Practice: Use of TYPE_CHECKING to avoid circular imports and improve performance",
    "confidence": 1.0,
    "tokens": [
      11748,
      3859
    ],
    "start_token": 0,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      41876,
      62,
      50084,
      2751,
      284,
      3368,
      18620,
      17944,
      290,
      2987,
      2854
    ],
    "label": "best_practice",
    "reason": "Use of TYPE_CHECKING to avoid circular imports and improve performance"
  },
  {
    "line": 23,
    "text": "from typing import TYPE_CHECKING",
    "annotation": "\ud83e\udde0 ML Signal: Use of default values for class attributes",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      41876,
      62,
      50084,
      2751
    ],
    "start_token": 2,
    "end_token": 9,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      1398,
      12608
    ],
    "label": "ml_signal",
    "reason": "Use of default values for class attributes"
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of BaseSettings for configuration management",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      7308,
      26232,
      329,
      8398,
      4542
    ],
    "label": "best_practice",
    "reason": "Use of BaseSettings for configuration management"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of default URI for MLflow tracking",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      43975,
      329,
      10373,
      11125,
      9646
    ],
    "label": "ml_signal",
    "reason": "Use of default URI for MLflow tracking"
  },
  {
    "line": 27,
    "text": "if TYPE_CHECKING:",
    "annotation": "\u2705 Best Practice: Use of os and Path to construct file paths",
    "confidence": 1.0,
    "tokens": [
      361,
      41876,
      62,
      50084,
      2751,
      25
    ],
    "start_token": 9,
    "end_token": 15,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      28686,
      290,
      10644,
      284,
      5678,
      2393,
      13532
    ],
    "label": "best_practice",
    "reason": "Use of os and Path to construct file paths"
  },
  {
    "line": 27,
    "text": "if TYPE_CHECKING:",
    "annotation": "\ud83e\udde0 ML Signal: Use of default experiment name",
    "confidence": 1.0,
    "tokens": [
      361,
      41876,
      62,
      50084,
      2751,
      25
    ],
    "start_token": 15,
    "end_token": 21,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      6306,
      1438
    ],
    "label": "ml_signal",
    "reason": "Use of default experiment name"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a settings class to manage configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 21,
    "end_token": 21,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      6460,
      1398,
      284,
      6687,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of a settings class to manage configuration"
  },
  {
    "line": 38,
    "text": "class QSettings(BaseSettings):",
    "annotation": "\u2705 Best Practice: Type hinting for class attributes improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      4871,
      1195,
      26232,
      7,
      14881,
      26232,
      2599
    ],
    "start_token": 21,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for class attributes improves code readability and maintainability"
  },
  {
    "line": 38,
    "text": "class QSettings(BaseSettings):",
    "annotation": "\ud83e\udde0 ML Signal: Use of environment variables for configuration",
    "confidence": 0.5,
    "tokens": [
      4871,
      1195,
      26232,
      7,
      14881,
      26232,
      2599
    ],
    "start_token": 28,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2858,
      9633,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of environment variables for configuration"
  },
  {
    "line": 41,
    "text": "    It tries to provide a default settings for most of Qlib's components.",
    "annotation": "\u2705 Best Practice: Use of a configuration dictionary to manage environment settings",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      632,
      8404,
      284,
      2148,
      257,
      4277,
      6460,
      329,
      749,
      286,
      1195,
      8019,
      338,
      6805,
      13
    ],
    "start_token": 35,
    "end_token": 53,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      8398,
      22155,
      284,
      6687,
      2858,
      6460
    ],
    "label": "best_practice",
    "reason": "Use of a configuration dictionary to manage environment settings"
  },
  {
    "line": 46,
    "text": "        - Actively passed-in settings, like `qlib.init(provider_uri=...)`",
    "annotation": "\ud83e\udde0 ML Signal: Singleton pattern for settings instance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      2191,
      2280,
      3804,
      12,
      259,
      6460,
      11,
      588,
      4600,
      80,
      8019,
      13,
      15003,
      7,
      15234,
      1304,
      62,
      9900,
      28,
      23029,
      63
    ],
    "start_token": 53,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5573,
      10565,
      3912,
      329,
      6460,
      4554
    ],
    "label": "ml_signal",
    "reason": "Singleton pattern for settings instance"
  },
  {
    "line": 45,
    "text": "    - The priority of settings is",
    "annotation": "\u2705 Best Practice: Use of deepcopy to avoid mutable default argument issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      532,
      383,
      8475,
      286,
      6460,
      318
    ],
    "start_token": 82,
    "end_token": 91,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2769,
      30073,
      284,
      3368,
      4517,
      540,
      4277,
      4578,
      2428
    ],
    "label": "best_practice",
    "reason": "Use of deepcopy to avoid mutable default argument issues"
  },
  {
    "line": 47,
    "text": "        - The default settings",
    "annotation": "\u2705 Best Practice: Encapsulation of initialization logic in a separate method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      383,
      4277,
      6460
    ],
    "start_token": 91,
    "end_token": 102,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      37588,
      9156,
      287,
      257,
      4553,
      2446
    ],
    "label": "best_practice",
    "reason": "Encapsulation of initialization logic in a separate method"
  },
  {
    "line": 47,
    "text": "        - The default settings",
    "annotation": "\u2705 Best Practice: Use of double underscore for method name indicates a special method in Python",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      383,
      4277,
      6460
    ],
    "start_token": 102,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4274,
      44810,
      329,
      2446,
      1438,
      9217,
      257,
      2041,
      2446,
      287,
      11361
    ],
    "label": "best_practice",
    "reason": "Use of double underscore for method name indicates a special method in Python"
  },
  {
    "line": 49,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary elements using keys",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 113,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      4847,
      1262,
      8251
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary elements using keys"
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to internal dictionary may expose internal structure",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      5387,
      22155,
      743,
      15651,
      5387,
      4645
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to internal dictionary may expose internal structure"
  },
  {
    "line": 49,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of __getattr__ to dynamically handle attribute access",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 117,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      1136,
      35226,
      834,
      284,
      32366,
      5412,
      11688,
      1895
    ],
    "label": "best_practice",
    "reason": "Use of __getattr__ to dynamically handle attribute access"
  },
  {
    "line": 51,
    "text": "    mlflow: MLflowSettings = MLflowSettings()",
    "annotation": "\ud83e\udde0 ML Signal: Checks if an attribute exists in a specific dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      285,
      1652,
      9319,
      25,
      10373,
      11125,
      26232,
      796,
      10373,
      11125,
      26232,
      3419
    ],
    "start_token": 121,
    "end_token": 136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      611,
      281,
      11688,
      7160,
      287,
      257,
      2176,
      22155
    ],
    "label": "ml_signal",
    "reason": "Checks if an attribute exists in a specific dictionary"
  },
  {
    "line": 53,
    "text": "    model_config = SettingsConfigDict(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary values using dynamic keys",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2746,
      62,
      11250,
      796,
      16163,
      16934,
      35,
      713,
      7
    ],
    "start_token": 136,
    "end_token": 148,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      3815,
      1262,
      8925,
      8251
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary values using dynamic keys"
  },
  {
    "line": 55,
    "text": "        env_nested_delimiter=\"_\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of internal attribute names in error messages",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17365,
      62,
      77,
      7287,
      62,
      12381,
      320,
      2676,
      2625,
      62,
      1600
    ],
    "start_token": 148,
    "end_token": 166,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      5387,
      11688,
      3891,
      287,
      4049,
      6218
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of internal attribute names in error messages"
  },
  {
    "line": 53,
    "text": "    model_config = SettingsConfigDict(",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the method's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2746,
      62,
      11250,
      796,
      16163,
      16934,
      35,
      713,
      7
    ],
    "start_token": 166,
    "end_token": 178,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the method's purpose and parameters."
  },
  {
    "line": 55,
    "text": "        env_nested_delimiter=\"_\",",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary-like objects with a get method is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17365,
      62,
      77,
      7287,
      62,
      12381,
      320,
      2676,
      2625,
      62,
      1600
    ],
    "start_token": 178,
    "end_token": 196,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      12,
      2339,
      5563,
      351,
      257,
      651,
      2446,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary-like objects with a get method is a common pattern."
  },
  {
    "line": 56,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing private attributes may lead to maintenance challenges.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 196,
    "end_token": 200,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      2839,
      12608,
      743,
      1085,
      284,
      9262,
      6459,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing private attributes may lead to maintenance challenges."
  },
  {
    "line": 55,
    "text": "        env_nested_delimiter=\"_\",",
    "annotation": "\u2705 Best Practice: Use of __setitem__ allows object to behave like a dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17365,
      62,
      77,
      7287,
      62,
      12381,
      320,
      2676,
      2625,
      62,
      1600
    ],
    "start_token": 200,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      2617,
      9186,
      834,
      3578,
      2134,
      284,
      17438,
      588,
      257,
      22155
    ],
    "label": "best_practice",
    "reason": "Use of __setitem__ allows object to behave like a dictionary"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying __dict__ can lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 218,
    "end_token": 218,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      11593,
      11600,
      834,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying __dict__ can lead to unexpected behavior"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly modifying __dict__ can lead to unexpected behavior and security issues.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 218,
    "end_token": 218,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      30620,
      11593,
      11600,
      834,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly modifying __dict__ can lead to unexpected behavior and security issues."
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using a setter method or property to encapsulate attribute setting logic.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 218,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      900,
      353,
      2446,
      393,
      3119,
      284,
      32652,
      5039,
      11688,
      4634,
      9156,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a setter method or property to encapsulate attribute setting logic."
  },
  {
    "line": 60,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Modifying a protected member like \"_config\" can lead to unintended side effects.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 218,
    "end_token": 218,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      3401,
      4035,
      257,
      6861,
      2888,
      588,
      45434,
      11250,
      1,
      460,
      1085,
      284,
      30261,
      1735,
      3048,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Modifying a protected member like \"_config\" can lead to unintended side effects."
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Custom attribute setting logic indicates a pattern for dynamic attribute management.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 218,
    "end_token": 218,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      11688,
      4634,
      9156,
      9217,
      257,
      3912,
      329,
      8925,
      11688,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Custom attribute setting logic indicates a pattern for dynamic attribute management."
  },
  {
    "line": 59,
    "text": "QSETTINGS = QSettings()",
    "annotation": "\u2705 Best Practice: Use of double underscores for method name indicates a special method in Python",
    "confidence": 0.5,
    "tokens": [
      48,
      28480,
      51,
      20754,
      796,
      1195,
      26232,
      3419
    ],
    "start_token": 218,
    "end_token": 226,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4274,
      41731,
      329,
      2446,
      1438,
      9217,
      257,
      2041,
      2446,
      287,
      11361
    ],
    "label": "best_practice",
    "reason": "Use of double underscores for method name indicates a special method in Python"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary directly within a method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 226,
    "end_token": 226,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      3264,
      1626,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary directly within a method"
  },
  {
    "line": 62,
    "text": "class Config:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to internal dictionary may expose internal state",
    "confidence": 0.5,
    "tokens": [
      4871,
      17056,
      25
    ],
    "start_token": 226,
    "end_token": 229,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      5387,
      22155,
      743,
      15651,
      5387,
      1181
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to internal dictionary may expose internal state"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u2705 Best Practice: Implementing __getstate__ for custom pickling behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 229,
    "end_token": 229,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      1136,
      5219,
      834,
      329,
      2183,
      2298,
      1359,
      4069
    ],
    "label": "best_practice",
    "reason": "Implementing __getstate__ for custom pickling behavior"
  },
  {
    "line": 63,
    "text": "    def __init__(self, default_conf):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning self.__dict__ can expose internal state, consider filtering sensitive data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4277,
      62,
      10414,
      2599
    ],
    "start_token": 229,
    "end_token": 243,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      2116,
      13,
      834,
      11600,
      834,
      460,
      15651,
      5387,
      1181,
      11,
      2074,
      25431,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning self.__dict__ can expose internal state, consider filtering sensitive data"
  },
  {
    "line": 63,
    "text": "    def __init__(self, default_conf):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly updating the object's __dict__ with external state can lead to security issues if the state is not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4277,
      62,
      10414,
      2599
    ],
    "start_token": 243,
    "end_token": 257,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      19698,
      262,
      2134,
      338,
      11593,
      11600,
      834,
      351,
      7097,
      1181,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      262,
      1181,
      318,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly updating the object's __dict__ with external state can lead to security issues if the state is not properly validated."
  },
  {
    "line": 65,
    "text": "        self.reset()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __setstate__ indicates custom deserialization logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      42503,
      3419
    ],
    "start_token": 257,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      2617,
      5219,
      834,
      9217,
      2183,
      748,
      48499,
      1634,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of __setstate__ indicates custom deserialization logic."
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Updating the object's __dict__ without validation can lead to arbitrary code execution if the state is tampered with.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 268,
    "end_token": 268,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      3205,
      38734,
      262,
      2134,
      338,
      11593,
      11600,
      834,
      1231,
      21201,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      611,
      262,
      1181,
      318,
      21885,
      13653,
      351,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Updating the object's __dict__ without validation can lead to arbitrary code execution if the state is tampered with."
  },
  {
    "line": 65,
    "text": "        self.reset()",
    "annotation": "\u2705 Best Practice: Implementing __str__ method for better string representation of the object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      42503,
      3419
    ],
    "start_token": 268,
    "end_token": 279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      2536,
      834,
      2446,
      329,
      1365,
      4731,
      10552,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Implementing __str__ method for better string representation of the object"
  },
  {
    "line": 67,
    "text": "    def __getitem__(self, key):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing and converting internal dictionary to string may expose sensitive data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      9186,
      834,
      7,
      944,
      11,
      1994,
      2599
    ],
    "start_token": 279,
    "end_token": 292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      290,
      23202,
      5387,
      22155,
      284,
      4731,
      743,
      15651,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing and converting internal dictionary to string may expose sensitive data"
  },
  {
    "line": 67,
    "text": "    def __getitem__(self, key):",
    "annotation": "\u2705 Best Practice: Use __repr__ to provide an unambiguous string representation of the object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      9186,
      834,
      7,
      944,
      11,
      1994,
      2599
    ],
    "start_token": 292,
    "end_token": 305,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      11593,
      260,
      1050,
      834,
      284,
      2148,
      281,
      42053,
      29709,
      4731,
      10552,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Use __repr__ to provide an unambiguous string representation of the object"
  },
  {
    "line": 68,
    "text": "        return self.__dict__[\"_config\"][key]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing and converting internal dictionary to string may expose sensitive data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      7131,
      2539,
      60
    ],
    "start_token": 305,
    "end_token": 325,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      290,
      23202,
      5387,
      22155,
      284,
      4731,
      743,
      15651,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing and converting internal dictionary to string may expose sensitive data"
  },
  {
    "line": 70,
    "text": "    def __getattr__(self, attr):",
    "annotation": "\ud83e\udde0 ML Signal: Accessing internal dictionary for representation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      35226,
      834,
      7,
      944,
      11,
      708,
      81,
      2599
    ],
    "start_token": 325,
    "end_token": 339,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      5387,
      22155,
      329,
      10552
    ],
    "label": "ml_signal",
    "reason": "Accessing internal dictionary for representation"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of deepcopy to ensure a complete copy of the default configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 339,
    "end_token": 339,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2769,
      30073,
      284,
      4155,
      257,
      1844,
      4866,
      286,
      262,
      4277,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of deepcopy to ensure a complete copy of the default configuration"
  },
  {
    "line": 71,
    "text": "        if attr in self.__dict__[\"_config\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing and modifying the internal dictionary of an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      708,
      81,
      287,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      5974
    ],
    "start_token": 339,
    "end_token": 360,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      290,
      30620,
      262,
      5387,
      22155,
      286,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Accessing and modifying the internal dictionary of an object"
  },
  {
    "line": 72,
    "text": "            return self.__dict__[\"_config\"][attr]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct manipulation of __dict__ can lead to unexpected behavior if not handled carefully",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      7131,
      35226,
      60
    ],
    "start_token": 360,
    "end_token": 384,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      17512,
      286,
      11593,
      11600,
      834,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      407,
      12118,
      7773
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct manipulation of __dict__ can lead to unexpected behavior if not handled carefully"
  },
  {
    "line": 71,
    "text": "        if attr in self.__dict__[\"_config\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Use of dynamic argument unpacking with *args and **kwargs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      708,
      81,
      287,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      5974
    ],
    "start_token": 384,
    "end_token": 405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8925,
      4578,
      8593,
      5430,
      351,
      1635,
      22046,
      290,
      12429,
      46265,
      22046
    ],
    "label": "ml_signal",
    "reason": "Use of dynamic argument unpacking with *args and **kwargs"
  },
  {
    "line": 72,
    "text": "            return self.__dict__[\"_config\"][attr]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly updating internal dictionary with external input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      7131,
      35226,
      60
    ],
    "start_token": 405,
    "end_token": 429,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      19698,
      5387,
      22155,
      351,
      7097,
      5128
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly updating internal dictionary with external input"
  },
  {
    "line": 74,
    "text": "        raise AttributeError(f\"No such `{attr}` in self._config\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing and modifying a private attribute directly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      3460,
      4163,
      12331,
      7,
      69,
      1,
      2949,
      884,
      4600,
      90,
      35226,
      92,
      63,
      287,
      2116,
      13557,
      11250,
      4943
    ],
    "start_token": 429,
    "end_token": 455,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      290,
      30620,
      257,
      2839,
      11688,
      3264
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing and modifying a private attribute directly"
  },
  {
    "line": 74,
    "text": "        raise AttributeError(f\"No such `{attr}` in self._config\")",
    "annotation": "\ud83e\udde0 ML Signal: Method that updates object state from another object's dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      3460,
      4163,
      12331,
      7,
      69,
      1,
      2949,
      884,
      4600,
      90,
      35226,
      92,
      63,
      287,
      2116,
      13557,
      11250,
      4943
    ],
    "start_token": 455,
    "end_token": 481,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      5992,
      2134,
      1181,
      422,
      1194,
      2134,
      338,
      22155
    ],
    "label": "ml_signal",
    "reason": "Method that updates object state from another object's dictionary"
  },
  {
    "line": 74,
    "text": "        raise AttributeError(f\"No such `{attr}` in self._config\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing and updating with another object's private dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      3460,
      4163,
      12331,
      7,
      69,
      1,
      2949,
      884,
      4600,
      90,
      35226,
      92,
      63,
      287,
      2116,
      13557,
      11250,
      4943
    ],
    "start_token": 481,
    "end_token": 507,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      290,
      19698,
      351,
      1194,
      2134,
      338,
      2839,
      22155
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing and updating with another object's private dictionary"
  },
  {
    "line": 77,
    "text": "        return self.__dict__[\"_config\"].get(key, default)",
    "annotation": "\u2705 Best Practice: Importing inside a function can reduce initial load time and avoid circular imports.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      4083,
      1136,
      7,
      2539,
      11,
      4277,
      8
    ],
    "start_token": 507,
    "end_token": 531,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2641,
      257,
      2163,
      460,
      4646,
      4238,
      3440,
      640,
      290,
      3368,
      18620,
      17944,
      13
    ],
    "label": "best_practice",
    "reason": "Importing inside a function can reduce initial load time and avoid circular imports."
  },
  {
    "line": 79,
    "text": "    def __setitem__(self, key, value):",
    "annotation": "\u2705 Best Practice: Early return pattern improves readability by reducing nesting.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      2617,
      9186,
      834,
      7,
      944,
      11,
      1994,
      11,
      1988,
      2599
    ],
    "start_token": 531,
    "end_token": 546,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12556,
      1441,
      3912,
      19575,
      1100,
      1799,
      416,
      8868,
      46282,
      13
    ],
    "label": "best_practice",
    "reason": "Early return pattern improves readability by reducing nesting."
  },
  {
    "line": 83,
    "text": "        self.__dict__[\"_config\"][attr] = value",
    "annotation": "\u2705 Best Practice: Conditional logging setup allows for flexible configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      834,
      11600,
      834,
      14692,
      62,
      11250,
      1,
      7131,
      35226,
      60,
      796,
      1988
    ],
    "start_token": 546,
    "end_token": 567,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      18931,
      9058,
      3578,
      329,
      12846,
      8398,
      13
    ],
    "label": "best_practice",
    "reason": "Conditional logging setup allows for flexible configuration."
  },
  {
    "line": 87,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Constants like PROTOCOL_VERSION can be used to track versioning in ML models.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 567,
    "end_token": 567,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4757,
      1187,
      588,
      48006,
      4503,
      3535,
      62,
      43717,
      460,
      307,
      973,
      284,
      2610,
      2196,
      278,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Constants like PROTOCOL_VERSION can be used to track versioning in ML models."
  },
  {
    "line": 89,
    "text": "        return self.__dict__",
    "annotation": "\ud83e\udde0 ML Signal: NUM_USABLE_CPU can be used to optimize resource allocation in ML tasks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      834,
      11600,
      834
    ],
    "start_token": 567,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36871,
      62,
      2937,
      17534,
      62,
      36037,
      460,
      307,
      973,
      284,
      27183,
      8271,
      20157,
      287,
      10373,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "NUM_USABLE_CPU can be used to optimize resource allocation in ML tasks."
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Caching strategies can be important for performance in ML systems.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 580,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      8103,
      10064,
      460,
      307,
      1593,
      329,
      2854,
      287,
      10373,
      3341,
      13
    ],
    "label": "ml_signal",
    "reason": "Caching strategies can be important for performance in ML systems."
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Number of CPU cores can influence parallel processing in ML tasks.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 580,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7913,
      286,
      9135,
      21758,
      460,
      4588,
      10730,
      7587,
      287,
      10373,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Number of CPU cores can influence parallel processing in ML tasks."
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging levels can be used to control verbosity in ML applications.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 580,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      2974,
      460,
      307,
      973,
      284,
      1630,
      15942,
      16579,
      287,
      10373,
      5479,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging levels can be used to control verbosity in ML applications."
  },
  {
    "line": 190,
    "text": "                \"format\": \"[%(process)s:%(threadName)s](%(asctime)s) %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s\"",
    "annotation": "\u2705 Best Practice: Using Path objects for file paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      18982,
      1298,
      12878,
      4,
      7,
      14681,
      8,
      82,
      25,
      4,
      7,
      16663,
      5376,
      8,
      82,
      16151,
      4,
      7,
      292,
      310,
      524,
      8,
      82,
      8,
      4064,
      7,
      5715,
      3672,
      8,
      82,
      532,
      4064,
      7,
      3672,
      8,
      82,
      532,
      685,
      4,
      7,
      34345,
      8,
      82,
      25,
      4,
      7,
      2815,
      23397,
      8,
      67,
      60,
      532,
      4064,
      7,
      20500,
      8,
      82,
      1
    ],
    "start_token": 580,
    "end_token": 654,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10644,
      5563,
      329,
      2393,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Using Path objects for file paths improves cross-platform compatibility."
  },
  {
    "line": 190,
    "text": "                \"format\": \"[%(process)s:%(threadName)s](%(asctime)s) %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s\"",
    "annotation": "\u2705 Best Practice: Using Path objects for file paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      18982,
      1298,
      12878,
      4,
      7,
      14681,
      8,
      82,
      25,
      4,
      7,
      16663,
      5376,
      8,
      82,
      16151,
      4,
      7,
      292,
      310,
      524,
      8,
      82,
      8,
      4064,
      7,
      5715,
      3672,
      8,
      82,
      532,
      4064,
      7,
      3672,
      8,
      82,
      532,
      685,
      4,
      7,
      34345,
      8,
      82,
      25,
      4,
      7,
      2815,
      23397,
      8,
      67,
      60,
      532,
      4064,
      7,
      20500,
      8,
      82,
      1
    ],
    "start_token": 654,
    "end_token": 728,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10644,
      5563,
      329,
      2393,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Using Path objects for file paths improves cross-platform compatibility."
  },
  {
    "line": 214,
    "text": "        \"disable_existing_loggers\": False,",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      40223,
      62,
      25687,
      62,
      6404,
      5355,
      1298,
      10352,
      11
    ],
    "start_token": 728,
    "end_token": 745,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 216,
    "text": "    # Default config for experiment manager",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      15161,
      4566,
      329,
      6306,
      4706
    ],
    "start_token": 745,
    "end_token": 754,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 218,
    "text": "        \"class\": \"MLflowExpManager\",",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4871,
      1298,
      366,
      5805,
      11125,
      16870,
      13511,
      1600
    ],
    "start_token": 754,
    "end_token": 770,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 218,
    "text": "        \"class\": \"MLflowExpManager\",",
    "annotation": "\u2705 Best Practice: Call to super() ensures proper initialization of the base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4871,
      1298,
      366,
      5805,
      11125,
      16870,
      13511,
      1600
    ],
    "start_token": 770,
    "end_token": 786,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Call to super() ensures proper initialization of the base class"
  },
  {
    "line": 220,
    "text": "        \"kwargs\": {",
    "annotation": "\u2705 Best Practice: Use of a leading underscore in _registered indicates intended private use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      46265,
      22046,
      1298,
      1391
    ],
    "start_token": 786,
    "end_token": 798,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      3756,
      44810,
      287,
      4808,
      33736,
      9217,
      5292,
      2839,
      779
    ],
    "label": "best_practice",
    "reason": "Use of a leading underscore in _registered indicates intended private use"
  },
  {
    "line": 227,
    "text": "        \"period\": \"I\",  # uint32",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      41007,
      1298,
      366,
      40,
      1600,
      220,
      1303,
      20398,
      2624
    ],
    "start_token": 798,
    "end_token": 815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 233,
    "text": "        \"period\": 0,",
    "annotation": "\ud83e\udde0 ML Signal: Storing input parameters as instance variables is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      41007,
      1298,
      657,
      11
    ],
    "start_token": 815,
    "end_token": 827,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      5128,
      10007,
      355,
      4554,
      9633,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing input parameters as instance variables is a common pattern."
  },
  {
    "line": 236,
    "text": "    },",
    "annotation": "\ud83e\udde0 ML Signal: Storing input parameters as instance variables is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      8964
    ],
    "start_token": 827,
    "end_token": 831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      5128,
      10007,
      355,
      4554,
      9633,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing input parameters as instance variables is a common pattern."
  },
  {
    "line": 236,
    "text": "    },",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation for the contents of provider_uri, which could lead to unexpected behavior if malicious input is provided.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      8964
    ],
    "start_token": 831,
    "end_token": 835,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      329,
      262,
      10154,
      286,
      10131,
      62,
      9900,
      11,
      543,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      17412,
      5128,
      318,
      2810,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation for the contents of provider_uri, which could lead to unexpected behavior if malicious input is provided."
  },
  {
    "line": 239,
    "text": "        \"task_url\": \"mongodb://localhost:27017/\",",
    "annotation": "\u2705 Best Practice: Check for valid types before processing to ensure robustness.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      35943,
      62,
      6371,
      1298,
      366,
      31059,
      375,
      65,
      1378,
      36750,
      25,
      1983,
      29326,
      14,
      1600
    ],
    "start_token": 835,
    "end_token": 858,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      4938,
      3858,
      878,
      7587,
      284,
      4155,
      12373,
      1108,
      13
    ],
    "label": "best_practice",
    "reason": "Check for valid types before processing to ensure robustness."
  },
  {
    "line": 242,
    "text": "    # Shift minute for highfreq minute data, used in backtest",
    "annotation": "\u2705 Best Practice: Convert non-dict input to a dict for consistent processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      15576,
      5664,
      329,
      1029,
      19503,
      80,
      5664,
      1366,
      11,
      973,
      287,
      736,
      9288
    ],
    "start_token": 858,
    "end_token": 875,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      1729,
      12,
      11600,
      5128,
      284,
      257,
      8633,
      329,
      6414,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Convert non-dict input to a dict for consistent processing."
  },
  {
    "line": 245,
    "text": "    \"min_data_shift\": 0,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Error message reveals the type of the input, which could be used for information disclosure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      1084,
      62,
      7890,
      62,
      30846,
      1298,
      657,
      11
    ],
    "start_token": 875,
    "end_token": 887,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13047,
      3275,
      10069,
      262,
      2099,
      286,
      262,
      5128,
      11,
      543,
      714,
      307,
      973,
      329,
      1321,
      13019,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Error message reveals the type of the input, which could be used for information disclosure."
  },
  {
    "line": 248,
    "text": "MODE_CONF = {",
    "annotation": "\ud83e\udde0 ML Signal: Usage of QlibConfig and DataPathManager indicates a pattern for managing data paths.",
    "confidence": 0.5,
    "tokens": [
      49058,
      62,
      10943,
      37,
      796,
      1391
    ],
    "start_token": 887,
    "end_token": 893,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1195,
      8019,
      16934,
      290,
      6060,
      15235,
      13511,
      9217,
      257,
      3912,
      329,
      11149,
      1366,
      13532,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of QlibConfig and DataPathManager indicates a pattern for managing data paths."
  },
  {
    "line": 250,
    "text": "        # config it in qlib.init()",
    "annotation": "\u2705 Best Practice: Use Path's expanduser and resolve for handling file paths safely.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4566,
      340,
      287,
      10662,
      8019,
      13,
      15003,
      3419
    ],
    "start_token": 893,
    "end_token": 909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      338,
      4292,
      7220,
      290,
      10568,
      329,
      9041,
      2393,
      13532,
      11512,
      13
    ],
    "label": "best_practice",
    "reason": "Use Path's expanduser and resolve for handling file paths safely."
  },
  {
    "line": 248,
    "text": "MODE_CONF = {",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      49058,
      62,
      10943,
      37,
      796,
      1391
    ],
    "start_token": 909,
    "end_token": 915,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the return type for better readability and maintainability."
  },
  {
    "line": 250,
    "text": "        # config it in qlib.init()",
    "annotation": "\u2705 Best Practice: Use isinstance for type checking to ensure the correct type is being handled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4566,
      340,
      287,
      10662,
      8019,
      13,
      15003,
      3419
    ],
    "start_token": 915,
    "end_token": 931,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      329,
      2099,
      10627,
      284,
      4155,
      262,
      3376,
      2099,
      318,
      852,
      12118,
      13
    ],
    "label": "best_practice",
    "reason": "Use isinstance for type checking to ensure the correct type is being handled."
  },
  {
    "line": 252,
    "text": "        # redis",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2266,
      271
    ],
    "start_token": 931,
    "end_token": 941,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      14700,
      460,
      307,
      5789,
      26,
      4155,
      5128,
      318,
      5336,
      36951,
      611,
      2406,
      422,
      281,
      1418,
      81,
      8459,
      2723,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source."
  },
  {
    "line": 253,
    "text": "        \"redis_host\": \"127.0.0.1\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      445,
      271,
      62,
      4774,
      1298,
      366,
      16799,
      13,
      15,
      13,
      15,
      13,
      16,
      1600
    ],
    "start_token": 941,
    "end_token": 963,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      14700,
      460,
      307,
      5789,
      26,
      4155,
      5128,
      318,
      5336,
      36951,
      611,
      2406,
      422,
      281,
      1418,
      81,
      8459,
      2723,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expressions can be expensive; ensure input is sanitized if coming from an untrusted source."
  },
  {
    "line": 256,
    "text": "        # cache",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on regex matches can indicate patterns in URI types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      12940
    ],
    "start_token": 963,
    "end_token": 972,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      40364,
      7466,
      460,
      7603,
      7572,
      287,
      43975,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on regex matches can indicate patterns in URI types."
  },
  {
    "line": 260,
    "text": "        \"mount_path\": None,",
    "annotation": "\u2705 Best Practice: Convert freq to string to ensure consistent type handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      14948,
      62,
      6978,
      1298,
      6045,
      11
    ],
    "start_token": 972,
    "end_token": 986,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      2030,
      80,
      284,
      4731,
      284,
      4155,
      6414,
      2099,
      9041
    ],
    "label": "best_practice",
    "reason": "Convert freq to string to ensure consistent type handling"
  },
  {
    "line": 263,
    "text": "        # config it in user's own code",
    "annotation": "\u2705 Best Practice: Use default frequency if freq is None or not in provider_uri",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4566,
      340,
      287,
      2836,
      338,
      898,
      2438
    ],
    "start_token": 986,
    "end_token": 1001,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4277,
      8373,
      611,
      2030,
      80,
      318,
      6045,
      393,
      407,
      287,
      10131,
      62,
      9900
    ],
    "label": "best_practice",
    "reason": "Use default frequency if freq is None or not in provider_uri"
  },
  {
    "line": 267,
    "text": "        # Disable cache by default. Avoid introduce advanced features for beginners",
    "annotation": "\ud83e\udde0 ML Signal: Checking URI type to determine path handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      31529,
      12940,
      416,
      4277,
      13,
      24390,
      10400,
      6190,
      3033,
      329,
      31729
    ],
    "start_token": 1001,
    "end_token": 1020,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      43975,
      2099,
      284,
      5004,
      3108,
      9041
    ],
    "label": "ml_signal",
    "reason": "Checking URI type to determine path handling"
  },
  {
    "line": 271,
    "text": "        # client config",
    "annotation": "\ud83e\udde0 ML Signal: Platform-specific path handling for Windows",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5456,
      4566
    ],
    "start_token": 1020,
    "end_token": 1030,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19193,
      12,
      11423,
      3108,
      9041,
      329,
      3964
    ],
    "label": "ml_signal",
    "reason": "Platform-specific path handling for Windows"
  },
  {
    "line": 274,
    "text": "        # The nfs should be auto-mounted by qlib on other",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue with path handling on Windows",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      299,
      9501,
      815,
      307,
      8295,
      12,
      29728,
      416,
      10662,
      8019,
      319,
      584
    ],
    "start_token": 1030,
    "end_token": 1051,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      351,
      3108,
      9041,
      319,
      3964
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue with path handling on Windows"
  },
  {
    "line": 277,
    "text": "        \"logging_level\": logging.INFO,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): NotImplementedError could expose internal logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      6404,
      2667,
      62,
      5715,
      1298,
      18931,
      13,
      10778,
      11
    ],
    "start_token": 1051,
    "end_token": 1068,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1892,
      3546,
      1154,
      12061,
      12331,
      714,
      15651,
      5387,
      9156
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "NotImplementedError could expose internal logic"
  },
  {
    "line": 274,
    "text": "        # The nfs should be auto-mounted by qlib on other",
    "annotation": "\ud83e\udde0 ML Signal: Method that sets a mode, indicating a state change pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      383,
      299,
      9501,
      815,
      307,
      8295,
      12,
      29728,
      416,
      10662,
      8019,
      319,
      584
    ],
    "start_token": 1068,
    "end_token": 1089,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      5621,
      257,
      4235,
      11,
      12739,
      257,
      1181,
      1487,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method that sets a mode, indicating a state change pattern"
  },
  {
    "line": 275,
    "text": "        # serversS(such as PAI) [auto_mount:True]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'mode' is not validated and MODE_CONF is not properly defined",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      9597,
      50,
      7,
      10508,
      355,
      8147,
      40,
      8,
      685,
      23736,
      62,
      14948,
      25,
      17821,
      60
    ],
    "start_token": 1089,
    "end_token": 1112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      14171,
      6,
      318,
      407,
      31031,
      290,
      337,
      16820,
      62,
      10943,
      37,
      318,
      407,
      6105,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'mode' is not validated and MODE_CONF is not properly defined"
  },
  {
    "line": 277,
    "text": "        \"logging_level\": logging.INFO,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a configuration dictionary with a key, indicating a common pattern of configuration management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      6404,
      2667,
      62,
      5715,
      1298,
      18931,
      13,
      10778,
      11
    ],
    "start_token": 1112,
    "end_token": 1129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      8398,
      22155,
      351,
      257,
      1994,
      11,
      12739,
      257,
      2219,
      3912,
      286,
      8398,
      4542
    ],
    "label": "ml_signal",
    "reason": "Accessing a configuration dictionary with a key, indicating a common pattern of configuration management"
  },
  {
    "line": 277,
    "text": "        \"logging_level\": logging.INFO,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Risk of KeyError if 'mode' is not a valid key in MODE_CONF",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      6404,
      2667,
      62,
      5715,
      1298,
      18931,
      13,
      10778,
      11
    ],
    "start_token": 1129,
    "end_token": 1146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      19602,
      286,
      7383,
      12331,
      611,
      705,
      14171,
      6,
      318,
      407,
      257,
      4938,
      1994,
      287,
      337,
      16820,
      62,
      10943,
      37
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Risk of KeyError if 'mode' is not a valid key in MODE_CONF"
  },
  {
    "line": 277,
    "text": "        \"logging_level\": logging.INFO,",
    "annotation": "\ud83e\udde0 ML Signal: Method that updates configuration based on region",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      6404,
      2667,
      62,
      5715,
      1298,
      18931,
      13,
      10778,
      11
    ],
    "start_token": 1146,
    "end_token": 1163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      5992,
      8398,
      1912,
      319,
      3814
    ],
    "label": "ml_signal",
    "reason": "Method that updates configuration based on region"
  },
  {
    "line": 277,
    "text": "        \"logging_level\": logging.INFO,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk if region input is not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      6404,
      2667,
      62,
      5715,
      1298,
      18931,
      13,
      10778,
      11
    ],
    "start_token": 1163,
    "end_token": 1180,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      611,
      3814,
      5128,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk if region input is not validated"
  },
  {
    "line": 280,
    "text": "        # each element of custom_ops should be Type[ExpressionOps] or dict",
    "annotation": "\ud83e\udde0 ML Signal: Function checks membership in a global or external list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1123,
      5002,
      286,
      2183,
      62,
      2840,
      815,
      307,
      5994,
      58,
      16870,
      2234,
      41472,
      60,
      393,
      8633
    ],
    "start_token": 1180,
    "end_token": 1204,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8794,
      9931,
      287,
      257,
      3298,
      393,
      7097,
      1351
    ],
    "label": "ml_signal",
    "reason": "Function checks membership in a global or external list"
  },
  {
    "line": 282,
    "text": "        # if element of custom_ops is dict, it represents the config of custom operator and should include `class` and `module_path` keys.",
    "annotation": "\ud83e\udde0 ML Signal: Method returning an instance of a class, indicating a factory or builder pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      611,
      5002,
      286,
      2183,
      62,
      2840,
      318,
      8633,
      11,
      340,
      6870,
      262,
      4566,
      286,
      2183,
      10088,
      290,
      815,
      2291,
      4600,
      4871,
      63,
      290,
      4600,
      21412,
      62,
      6978,
      63,
      8251,
      13
    ],
    "start_token": 1204,
    "end_token": 1242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      281,
      4554,
      286,
      257,
      1398,
      11,
      12739,
      257,
      8860,
      393,
      27098,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning an instance of a class, indicating a factory or builder pattern"
  },
  {
    "line": 284,
    "text": "    },",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data if provider_uri or mount_path contains sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      8964
    ],
    "start_token": 1242,
    "end_token": 1246,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      611,
      10131,
      62,
      9900,
      393,
      3817,
      62,
      6978,
      4909,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data if provider_uri or mount_path contains sensitive information"
  },
  {
    "line": 285,
    "text": "}",
    "annotation": "\ud83e\udde0 ML Signal: Accessing dictionary keys, indicating a pattern of configuration or settings retrieval",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 1246,
    "end_token": 1247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      22155,
      8251,
      11,
      12739,
      257,
      3912,
      286,
      8398,
      393,
      6460,
      45069
    ],
    "label": "ml_signal",
    "reason": "Accessing dictionary keys, indicating a pattern of configuration or settings retrieval"
  },
  {
    "line": 286,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom method to format a URI, indicating a pattern for data handling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1247,
    "end_token": 1247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2446,
      284,
      5794,
      257,
      43975,
      11,
      12739,
      257,
      3912,
      329,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom method to format a URI, indicating a pattern for data handling"
  },
  {
    "line": 288,
    "text": "    \"provider_uri\": \"~/.qlib/qlib_data/cn_data_1min\",",
    "annotation": "\u2705 Best Practice: Checking if _mount_path is a dictionary to ensure correct data structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      15234,
      1304,
      62,
      9900,
      1298,
      366,
      93,
      11757,
      80,
      8019,
      14,
      80,
      8019,
      62,
      7890,
      14,
      31522,
      62,
      7890,
      62,
      16,
      1084,
      1600
    ],
    "start_token": 1247,
    "end_token": 1274,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      611,
      4808,
      14948,
      62,
      6978,
      318,
      257,
      22155,
      284,
      4155,
      3376,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Checking if _mount_path is a dictionary to ensure correct data structure"
  },
  {
    "line": 290,
    "text": "    \"expression_cache\": \"DiskExpressionCache\",",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of converting a single value to a dictionary for uniform access",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      366,
      38011,
      62,
      23870,
      1298,
      366,
      40961,
      16870,
      2234,
      30562,
      1600
    ],
    "start_token": 1274,
    "end_token": 1288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      23202,
      257,
      2060,
      1988,
      284,
      257,
      22155,
      329,
      8187,
      1895
    ],
    "label": "ml_signal",
    "reason": "Pattern of converting a single value to a dictionary for uniform access"
  },
  {
    "line": 292,
    "text": "}",
    "annotation": "\u2705 Best Practice: Using set operations to find missing frequencies",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 1288,
    "end_token": 1289,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      4560,
      284,
      1064,
      4814,
      19998
    ],
    "label": "best_practice",
    "reason": "Using set operations to find missing frequencies"
  },
  {
    "line": 295,
    "text": "    REG_CN: {",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks, which can be disabled in optimized mode",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      23337,
      62,
      44175,
      25,
      1391
    ],
    "start_token": 1289,
    "end_token": 1297,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      11,
      543,
      460,
      307,
      10058,
      287,
      23392,
      4235
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks, which can be disabled in optimized mode"
  },
  {
    "line": 297,
    "text": "        \"limit_threshold\": 0.095,",
    "annotation": "\u2705 Best Practice: Using Path.expanduser() to handle user directories in paths",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      32374,
      62,
      400,
      10126,
      1298,
      657,
      13,
      2931,
      20,
      11
    ],
    "start_token": 1297,
    "end_token": 1315,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10644,
      13,
      11201,
      392,
      7220,
      3419,
      284,
      5412,
      2836,
      29196,
      287,
      13532
    ],
    "label": "best_practice",
    "reason": "Using Path.expanduser() to handle user directories in paths"
  },
  {
    "line": 298,
    "text": "        \"deal_price\": \"close\",",
    "annotation": "\ud83e\udde0 ML Signal: Updating instance attributes with processed data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      31769,
      62,
      20888,
      1298,
      366,
      19836,
      1600
    ],
    "start_token": 1315,
    "end_token": 1330,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      4554,
      12608,
      351,
      13686,
      1366
    ],
    "label": "ml_signal",
    "reason": "Updating instance attributes with processed data"
  },
  {
    "line": 298,
    "text": "        \"deal_price\": \"close\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameters and **kwargs for flexible function calls",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      31769,
      62,
      20888,
      1298,
      366,
      19836,
      1600
    ],
    "start_token": 1330,
    "end_token": 1345,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      10007,
      290,
      12429,
      46265,
      22046,
      329,
      12846,
      2163,
      3848
    ],
    "label": "ml_signal",
    "reason": "Use of default parameters and **kwargs for flexible function calls"
  },
  {
    "line": 313,
    "text": "class QlibConfig(Config):",
    "annotation": "\u2705 Best Practice: Resetting state before applying new configuration",
    "confidence": 0.5,
    "tokens": [
      4871,
      1195,
      8019,
      16934,
      7,
      16934,
      2599
    ],
    "start_token": 1345,
    "end_token": 1352,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      1181,
      878,
      11524,
      649,
      8398
    ],
    "label": "best_practice",
    "reason": "Resetting state before applying new configuration"
  },
  {
    "line": 317,
    "text": "    DEFAULT_FREQ = \"__DEFAULT_FREQ\"",
    "annotation": "\u2705 Best Practice: Using a utility function to set logging configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5550,
      38865,
      62,
      37,
      2200,
      48,
      796,
      366,
      834,
      7206,
      38865,
      62,
      37,
      2200,
      48,
      1
    ],
    "start_token": 1352,
    "end_token": 1371,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      10361,
      2163,
      284,
      900,
      18931,
      8398
    ],
    "label": "best_practice",
    "reason": "Using a utility function to set logging configuration"
  },
  {
    "line": 319,
    "text": "    def __init__(self, default_conf):",
    "annotation": "\u2705 Best Practice: Using a utility function to get a logger",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4277,
      62,
      10414,
      2599
    ],
    "start_token": 1371,
    "end_token": 1385,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      10361,
      2163,
      284,
      651,
      257,
      49706
    ],
    "label": "best_practice",
    "reason": "Using a utility function to get a logger"
  },
  {
    "line": 322,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a method to set mode based on configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1385,
    "end_token": 1385,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      2446,
      284,
      900,
      4235,
      1912,
      319,
      8398
    ],
    "label": "best_practice",
    "reason": "Using a method to set mode based on configuration"
  },
  {
    "line": 324,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Using a method to set region with a default fallback",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1385,
    "end_token": 1393,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      2446,
      284,
      900,
      3814,
      351,
      257,
      4277,
      2121,
      1891
    ],
    "label": "best_practice",
    "reason": "Using a method to set region with a default fallback"
  },
  {
    "line": 328,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Logging unrecognized configuration keys",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1393,
    "end_token": 1401,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      43483,
      1143,
      8398,
      8251
    ],
    "label": "best_practice",
    "reason": "Logging unrecognized configuration keys"
  },
  {
    "line": 331,
    "text": "            \"\"\"",
    "annotation": "\u2705 Best Practice: Resolving paths after setting configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1401,
    "end_token": 1413,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1874,
      10890,
      13532,
      706,
      4634,
      8398
    ],
    "label": "best_practice",
    "reason": "Resolving paths after setting configuration"
  },
  {
    "line": 343,
    "text": "            if isinstance(provider_uri, (str, dict, Path)):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive information in logs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      15234,
      1304,
      62,
      9900,
      11,
      357,
      2536,
      11,
      8633,
      11,
      10644,
      8,
      2599
    ],
    "start_token": 1413,
    "end_token": 1441,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive information in logs"
  },
  {
    "line": 345,
    "text": "                    provider_uri = {QlibConfig.DEFAULT_FREQ: provider_uri}",
    "annotation": "\ud83e\udde0 ML Signal: Function call to register operations, indicating a setup or initialization pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      62,
      9900,
      796,
      1391,
      48,
      8019,
      16934,
      13,
      7206,
      38865,
      62,
      37,
      2200,
      48,
      25,
      10131,
      62,
      9900,
      92
    ],
    "start_token": 1441,
    "end_token": 1480,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      7881,
      4560,
      11,
      12739,
      257,
      9058,
      393,
      37588,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function call to register operations, indicating a setup or initialization pattern"
  },
  {
    "line": 347,
    "text": "                raise TypeError(f\"provider_uri does not support {type(provider_uri)}\")",
    "annotation": "\ud83e\udde0 ML Signal: Function call to register data wrappers, indicating a setup or initialization pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      5994,
      12331,
      7,
      69,
      1,
      15234,
      1304,
      62,
      9900,
      857,
      407,
      1104,
      1391,
      4906,
      7,
      15234,
      1304,
      62,
      9900,
      38165,
      4943
    ],
    "start_token": 1480,
    "end_token": 1517,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      7881,
      1366,
      7917,
      11799,
      11,
      12739,
      257,
      9058,
      393,
      37588,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function call to register data wrappers, indicating a setup or initialization pattern"
  },
  {
    "line": 349,
    "text": "                if QlibConfig.DataPathManager.get_uri_type(_uri) == QlibConfig.LOCAL_URI:",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of an experiment manager, indicating a setup or configuration pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1195,
      8019,
      16934,
      13,
      6601,
      15235,
      13511,
      13,
      1136,
      62,
      9900,
      62,
      4906,
      28264,
      9900,
      8,
      6624,
      1195,
      8019,
      16934,
      13,
      29701,
      1847,
      62,
      47269,
      25
    ],
    "start_token": 1517,
    "end_token": 1559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      281,
      6306,
      4706,
      11,
      12739,
      257,
      9058,
      393,
      8398,
      3912
    ],
    "label": "ml_signal",
    "reason": "Initialization of an experiment manager, indicating a setup or configuration pattern"
  },
  {
    "line": 351,
    "text": "            return provider_uri",
    "annotation": "\ud83e\udde0 ML Signal: Recorder initialization, indicating a logging or tracking pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      10131,
      62,
      9900
    ],
    "start_token": 1559,
    "end_token": 1574,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      2875,
      37588,
      11,
      12739,
      257,
      18931,
      393,
      9646,
      3912
    ],
    "label": "ml_signal",
    "reason": "Recorder initialization, indicating a logging or tracking pattern"
  },
  {
    "line": 353,
    "text": "        @staticmethod",
    "annotation": "\ud83e\udde0 ML Signal: Registration of a recorder, indicating a logging or tracking pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 1574,
    "end_token": 1584,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24610,
      286,
      257,
      38156,
      11,
      12739,
      257,
      18931,
      393,
      9646,
      3912
    ],
    "label": "ml_signal",
    "reason": "Registration of a recorder, indicating a logging or tracking pattern"
  },
  {
    "line": 355,
    "text": "            uri = uri if isinstance(uri, str) else str(uri.expanduser().resolve())",
    "annotation": "\ud83e\udde0 ML Signal: Experiment exit handling, indicating a cleanup or finalization pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2956,
      72,
      796,
      2956,
      72,
      611,
      318,
      39098,
      7,
      9900,
      11,
      965,
      8,
      2073,
      965,
      7,
      9900,
      13,
      11201,
      392,
      7220,
      22446,
      411,
      6442,
      28955
    ],
    "start_token": 1584,
    "end_token": 1620,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29544,
      8420,
      9041,
      11,
      12739,
      257,
      27425,
      393,
      2457,
      1634,
      3912
    ],
    "label": "ml_signal",
    "reason": "Experiment exit handling, indicating a cleanup or finalization pattern"
  },
  {
    "line": 357,
    "text": "            # such as 'host:/data/'   (User may define short hostname by themselves or use localhost)",
    "annotation": "\ud83e\udde0 ML Signal: Version reset, indicating a state management pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      884,
      355,
      705,
      4774,
      14079,
      7890,
      14,
      6,
      220,
      220,
      357,
      12982,
      743,
      8160,
      1790,
      2583,
      3672,
      416,
      2405,
      393,
      779,
      1957,
      4774,
      8
    ],
    "start_token": 1620,
    "end_token": 1656,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10628,
      13259,
      11,
      12739,
      257,
      1181,
      4542,
      3912
    ],
    "label": "ml_signal",
    "reason": "Version reset, indicating a state management pattern"
  },
  {
    "line": 359,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly setting a flag to indicate registration status",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1656,
    "end_token": 1656,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      257,
      6056,
      284,
      7603,
      9352,
      3722
    ],
    "label": "best_practice",
    "reason": "Explicitly setting a flag to indicate registration status"
  },
  {
    "line": 355,
    "text": "            uri = uri if isinstance(uri, str) else str(uri.expanduser().resolve())",
    "annotation": "\u2705 Best Practice: Consider importing at the top of the file for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2956,
      72,
      796,
      2956,
      72,
      611,
      318,
      39098,
      7,
      9900,
      11,
      965,
      8,
      2073,
      965,
      7,
      9900,
      13,
      11201,
      392,
      7220,
      22446,
      411,
      6442,
      28955
    ],
    "start_token": 1656,
    "end_token": 1692,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33332,
      379,
      262,
      1353,
      286,
      262,
      2393,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider importing at the top of the file for better readability and maintainability."
  },
  {
    "line": 357,
    "text": "            # such as 'host:/data/'   (User may define short hostname by themselves or use localhost)",
    "annotation": "\ud83e\udde0 ML Signal: Accessing configuration or settings using a key-value pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      884,
      355,
      705,
      4774,
      14079,
      7890,
      14,
      6,
      220,
      220,
      357,
      12982,
      743,
      8160,
      1790,
      2583,
      3672,
      416,
      2405,
      393,
      779,
      1957,
      4774,
      8
    ],
    "start_token": 1692,
    "end_token": 1728,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      8398,
      393,
      6460,
      1262,
      257,
      1994,
      12,
      8367,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing configuration or settings using a key-value pattern."
  },
  {
    "line": 360,
    "text": "            if is_nfs_or_win and not is_win:",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Modifying a library's internal version attribute can lead to unexpected behavior or compatibility issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      62,
      77,
      9501,
      62,
      273,
      62,
      5404,
      290,
      407,
      318,
      62,
      5404,
      25
    ],
    "start_token": 1728,
    "end_token": 1754,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      3401,
      4035,
      257,
      5888,
      338,
      5387,
      2196,
      11688,
      460,
      1085,
      284,
      10059,
      4069,
      393,
      17764,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Modifying a library's internal version attribute can lead to unexpected behavior or compatibility issues."
  },
  {
    "line": 363,
    "text": "                return QlibConfig.LOCAL_URI",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using a backup version attribute without validation can lead to inconsistencies or errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1195,
      8019,
      16934,
      13,
      29701,
      1847,
      62,
      47269
    ],
    "start_token": 1754,
    "end_token": 1778,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      257,
      11559,
      2196,
      11688,
      1231,
      21201,
      460,
      1085,
      284,
      40467,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using a backup version attribute without validation can lead to inconsistencies or errors."
  },
  {
    "line": 362,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Check if 'kernels' is callable before invoking it",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1778,
    "end_token": 1791,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      74,
      44930,
      6,
      318,
      869,
      540,
      878,
      39744,
      340
    ],
    "label": "best_practice",
    "reason": "Check if 'kernels' is callable before invoking it"
  },
  {
    "line": 366,
    "text": "            \"\"\"",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1791,
    "end_token": 1803,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose"
  },
  {
    "line": 368,
    "text": "            \"\"\"",
    "annotation": "\u2705 Best Practice: Consider using a property decorator for getter methods",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1803,
    "end_token": 1815,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      3119,
      11705,
      1352,
      329,
      651,
      353,
      5050
    ],
    "label": "best_practice",
    "reason": "Consider using a property decorator for getter methods"
  },
  {
    "line": 368,
    "text": "            \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct instantiation of a class without context or error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1815,
    "end_token": 1827,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      9113,
      3920,
      286,
      257,
      1398,
      1231,
      4732,
      393,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct instantiation of a class without context or error handling"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Relative imports can lead to issues if the module is executed as a standalone script.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2428, 611, 262, 8265, 318, 10945, 355, 257, 27669, 4226, 13]",1.0,0,sast_risk,6,Relative imports can lead to issues if the module is executed as a standalone script.,Low,0,,[]
‚ö†Ô∏è SAST Risk (Low): Relative imports can lead to issues if the module is executed as a standalone script.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2428, 611, 262, 8265, 318, 10945, 355, 257, 27669, 4226, 13]",1.0,4,sast_risk,8,Relative imports can lead to issues if the module is executed as a standalone script.,Low,0,from .. import init,"[6738, 11485, 1330, 2315]"
‚ö†Ô∏è SAST Risk (Low): Relative imports can lead to issues if the module is executed as a standalone script.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2428, 611, 262, 8265, 318, 10945, 355, 257, 27669, 4226, 13]",1.0,16,sast_risk,10,Relative imports can lead to issues if the module is executed as a standalone script.,Low,4,from qlib.data.filter import NameDFilter,"[6738, 10662, 8019, 13, 7890, 13, 24455, 1330, 6530, 8068, 346, 353]"
‚ö†Ô∏è SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 12782, 460, 10400, 2324, 7476, 611, 262, 5888, 318, 19066, 13]",0.5,30,sast_risk,12,Importing from external libraries can introduce security risks if the library is compromised.,Low,16,"from qlib.data.data import Cal, DatasetD","[6738, 10662, 8019, 13, 7890, 13, 7890, 1330, 2199, 11, 16092, 292, 316, 35]"
‚ö†Ô∏è SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 12782, 460, 10400, 2324, 7476, 611, 262, 5888, 318, 19066, 13]",0.5,30,sast_risk,14,Importing from external libraries can introduce security risks if the library is compromised.,Low,30,,[]
‚ö†Ô∏è SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 12782, 460, 10400, 2324, 7476, 611, 262, 5888, 318, 19066, 13]",0.5,42,sast_risk,16,Importing from external libraries can introduce security risks if the library is compromised.,Low,30,class TestAutoData(unittest.TestCase):,"[4871, 6208, 27722, 6601, 7, 403, 715, 395, 13, 14402, 20448, 2599]"
‚ö†Ô∏è SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 7097, 12782, 460, 10400, 2324, 7476, 611, 262, 5888, 318, 19066, 13]",0.5,52,sast_risk,17,Importing from external libraries can introduce security risks if the library is compromised.,Low,42,    _setup_kwargs = {},"[220, 220, 220, 4808, 40406, 62, 46265, 22046, 796, 23884]"
üß† ML Signal: Use of class variables for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 9633, 329, 8398]",1.0,52,ml_signal,14,Use of class variables for configuration,,52,,[]
üß† ML Signal: Use of class variables for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 9633, 329, 8398]",1.0,64,ml_signal,16,Use of class variables for configuration,,52,class TestAutoData(unittest.TestCase):,"[4871, 6208, 27722, 6601, 7, 403, 715, 395, 13, 14402, 20448, 2599]"
üß† ML Signal: Use of class variables for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 9633, 329, 8398]",1.0,74,ml_signal,17,Use of class variables for configuration,,64,    _setup_kwargs = {},"[220, 220, 220, 4808, 40406, 62, 46265, 22046, 796, 23884]"
üß† ML Signal: Use of class variables for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 9633, 329, 8398]",1.0,102,ml_signal,20,Use of class variables for configuration,,74,"    provider_uri_1min = ""~/.qlib/qlib_data/cn_data_1min""","[220, 220, 220, 10131, 62, 9900, 62, 16, 1084, 796, 366, 93, 11757, 80, 8019, 14, 80, 8019, 62, 7890, 14, 31522, 62, 7890, 62, 16, 1084, 1]"
üß† ML Signal: Use of class method for setup indicates a pattern for initializing class-level resources,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 2446, 329, 9058, 9217, 257, 3912, 329, 4238, 2890, 1398, 12, 5715, 4133]",1.0,130,ml_signal,20,Use of class method for setup indicates a pattern for initializing class-level resources,,102,"    provider_uri_1min = ""~/.qlib/qlib_data/cn_data_1min""","[220, 220, 220, 10131, 62, 9900, 62, 16, 1084, 796, 366, 93, 11757, 80, 8019, 14, 80, 8019, 62, 7890, 14, 31522, 62, 7890, 62, 16, 1084, 1]"
‚ö†Ô∏è SAST Risk (Low): Use of NotImplementedError could expose internal logic if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1892, 3546, 1154, 12061, 12331, 714, 15651, 5387, 9156, 611, 407, 12118, 6105]",1.0,153,sast_risk,28,Use of NotImplementedError could expose internal logic if not handled properly,Low,130,"            name_day = ""qlib_data_simple""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 62, 820, 796, 366, 80, 8019, 62, 7890, 62, 36439, 1]"
üß† ML Signal: Use of external data fetching method indicates a pattern for data initialization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 1366, 21207, 278, 2446, 9217, 257, 3912, 329, 1366, 37588]",0.5,176,ml_signal,28,Use of external data fetching method indicates a pattern for data initialization,,153,"            name_day = ""qlib_data_simple""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 62, 820, 796, 366, 80, 8019, 62, 7890, 62, 36439, 1]"
üß† ML Signal: Conditional data fetching based on configuration indicates a pattern for dynamic data setup,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 1366, 21207, 278, 1912, 319, 8398, 9217, 257, 3912, 329, 8925, 1366, 9058]",0.5,193,ml_signal,37,Conditional data fetching based on configuration indicates a pattern for dynamic data setup,,176,"            region=REG_CN,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3814, 28, 31553, 62, 44175, 11]"
üß† ML Signal: Use of initialization function with dynamic parameters indicates a pattern for flexible setup,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37588, 2163, 351, 8925, 10007, 9217, 257, 3912, 329, 12846, 9058]",0.5,214,ml_signal,50,Use of initialization function with dynamic parameters indicates a pattern for flexible setup,,193,"                delete_old=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12233, 62, 727, 28, 25101, 11]"
‚úÖ Best Practice: Use of @classmethod for methods that operate on the class rather than instance,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 329, 5050, 326, 8076, 319, 262, 1398, 2138, 621, 4554]",1.0,214,best_practice,53,Use of @classmethod for methods that operate on the class rather than instance,,214,,[]
‚úÖ Best Practice: Use of setUpClass for initializing resources before tests,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 4933, 9487, 329, 4238, 2890, 4133, 878, 5254]",1.0,236,best_practice,56,Use of setUpClass for initializing resources before tests,,214,"            provider_uri=provider_uri_map,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10131, 62, 9900, 28, 15234, 1304, 62, 9900, 62, 8899, 11]"
üß† ML Signal: Instantiating a class within a setup method,"[8582, 100, 254, 10373, 26484, 25, 2262, 17096, 803, 257, 1398, 1626, 257, 9058, 2446]",0.5,253,ml_signal,58,Instantiating a class within a setup method,,236,"            expression_cache=None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5408, 62, 23870, 28, 14202, 11]"
‚úÖ Best Practice: Storing instance as a class attribute for reuse in tests,"[26486, 227, 6705, 19939, 25, 520, 3255, 4554, 355, 257, 1398, 11688, 329, 32349, 287, 5254]",0.5,270,best_practice,59,Storing instance as a class attribute for reuse in tests,,253,"            dataset_cache=None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27039, 62, 23870, 28, 14202, 11]"
‚úÖ Best Practice: Test method name clearly indicates the purpose of the test,"[26486, 227, 6705, 19939, 25, 6208, 2446, 1438, 4084, 9217, 262, 4007, 286, 262, 1332]",0.5,270,best_practice,62,Test method name clearly indicates the purpose of the test,,270,,[]
üß† ML Signal: Checking if an object is not None,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 2134, 318, 407, 6045]",1.0,280,ml_signal,64,Checking if an object is not None,,270,class TestOperatorData(TestAutoData):,"[4871, 6208, 18843, 1352, 6601, 7, 14402, 27722, 6601, 2599]"
‚úÖ Best Practice: Use of assertIsNotNone to verify object initialization,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 3792, 3673, 14202, 284, 11767, 2134, 37588]",0.5,286,best_practice,65,Use of assertIsNotNone to verify object initialization,,280,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Test method name clearly indicates the purpose of the test,"[26486, 227, 6705, 19939, 25, 6208, 2446, 1438, 4084, 9217, 262, 4007, 286, 262, 1332]",0.5,311,best_practice,68,Test method name clearly indicates the purpose of the test,,286,"        super().setUpClass(enable_1d_type, enable_1min)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 4933, 9487, 7, 21633, 62, 16, 67, 62, 4906, 11, 7139, 62, 16, 1084, 8]"
üß† ML Signal: Calling a method with specific arguments,"[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2446, 351, 2176, 7159]",0.5,339,ml_signal,70,Calling a method with specific arguments,,311,"        instruments = D.instruments(""csi300"", filter_pipe=[nameDFilter])","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 360, 13, 259, 2536, 2886, 7203, 6359, 72, 6200, 1600, 8106, 62, 34360, 41888, 3672, 8068, 346, 353, 12962]"
‚úÖ Best Practice: Storing method result in a variable for clarity,"[26486, 227, 6705, 19939, 25, 520, 3255, 2446, 1255, 287, 257, 7885, 329, 16287]",0.5,367,best_practice,70,Storing method result in a variable for clarity,,339,"        instruments = D.instruments(""csi300"", filter_pipe=[nameDFilter])","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 360, 13, 259, 2536, 2886, 7203, 6359, 72, 6200, 1600, 8106, 62, 34360, 41888, 3672, 8068, 346, 353, 12962]"
üß† ML Signal: Asserting expected output of a method,"[8582, 100, 254, 10373, 26484, 25, 2195, 861, 278, 2938, 5072, 286, 257, 2446]",0.5,395,ml_signal,70,Asserting expected output of a method,,367,"        instruments = D.instruments(""csi300"", filter_pipe=[nameDFilter])","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 360, 13, 259, 2536, 2886, 7203, 6359, 72, 6200, 1600, 8106, 62, 34360, 41888, 3672, 8068, 346, 353, 12962]"
‚úÖ Best Practice: Use of assertEqual to verify method functionality,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 36, 13255, 284, 11767, 2446, 11244]",0.5,423,best_practice,70,Use of assertEqual to verify method functionality,,395,"        instruments = D.instruments(""csi300"", filter_pipe=[nameDFilter])","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 360, 13, 259, 2536, 2886, 7203, 6359, 72, 6200, 1600, 8106, 62, 34360, 41888, 3672, 8068, 346, 353, 12962]"
‚úÖ Best Practice: Use of class method setUpClass for setting up test fixtures,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 900, 4933, 9487, 329, 4634, 510, 1332, 34609]",0.5,432,best_practice,55,Use of class method setUpClass for setting up test fixtures,,423,        init(,"[220, 220, 220, 220, 220, 220, 220, 2315, 7]"
‚úÖ Best Practice: Calling superclass method to ensure proper setup,"[26486, 227, 6705, 19939, 25, 32677, 2208, 4871, 2446, 284, 4155, 1774, 9058]",1.0,449,best_practice,57,Calling superclass method to ensure proper setup,,432,"            region=REG_CN,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3814, 28, 31553, 62, 44175, 11]"
"üß† ML Signal: Use of regex for filtering, indicating pattern matching","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 40364, 329, 25431, 11, 12739, 3912, 12336]",0.5,466,ml_signal,59,"Use of regex for filtering, indicating pattern matching",,449,"            dataset_cache=None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27039, 62, 23870, 28, 14202, 11]"
üß† ML Signal: Use of filtering in data retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 25431, 287, 1366, 45069]",1.0,474,ml_signal,61,Use of filtering in data retrieval,,466,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of frequency in data retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8373, 287, 1366, 45069]",1.0,504,ml_signal,66,Use of frequency in data retrieval,,474,"    def setUpClass(cls, enable_1d_type=""simple"", enable_1min=False) -> None:","[220, 220, 220, 825, 900, 4933, 9487, 7, 565, 82, 11, 7139, 62, 16, 67, 62, 4906, 2625, 36439, 1600, 7139, 62, 16, 1084, 28, 25101, 8, 4613, 6045, 25]"
üß† ML Signal: Use of calendar for time range,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11845, 329, 640, 2837]",0.5,531,ml_signal,69,Use of calendar for time range,,504,"        nameDFilter = NameDFilter(name_rule_re=""SH600110"")","[220, 220, 220, 220, 220, 220, 220, 1438, 8068, 346, 353, 796, 6530, 8068, 346, 353, 7, 3672, 62, 25135, 62, 260, 2625, 9693, 8054, 11442, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded data in the code, consider externalizing","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 1366, 287, 262, 2438, 11, 2074, 7097, 2890]",0.5,559,sast_risk,70,"Hardcoded data in the code, consider externalizing",Low,531,"        instruments = D.instruments(""csi300"", filter_pipe=[nameDFilter])","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 360, 13, 259, 2536, 2886, 7203, 6359, 72, 6200, 1600, 8106, 62, 34360, 41888, 3672, 8068, 346, 353, 12962]"
üß† ML Signal: Use of **kwargs indicates flexible function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12429, 46265, 22046, 9217, 12846, 2163, 9877]",1.0,599,ml_signal,149,Use of **kwargs indicates flexible function signature,,559,"8591,1101,2022-02-11 00:00:00,day,6841.0,47.3,47.55,47.15,47.55","[23, 48952, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1157, 3571, 25, 405, 25, 405, 11, 820, 11, 3104, 3901, 13, 15, 11, 2857, 13, 18, 11, 2857, 13, 2816, 11, 2857, 13, 1314, 11, 2857, 13, 2816]"
üß† ML Signal: Assignment of a mock dataframe suggests testing or placeholder data,"[8582, 100, 254, 10373, 26484, 25, 50144, 286, 257, 15290, 1366, 14535, 5644, 4856, 393, 46076, 1366]",0.5,639,ml_signal,151,Assignment of a mock dataframe suggests testing or placeholder data,,599,"8593,1101,2022-02-15 00:00:00,day,5444.0,47.05,47.1,46.8,47.0","[23, 49051, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1314, 3571, 25, 405, 25, 405, 11, 820, 11, 20, 30272, 13, 15, 11, 2857, 13, 2713, 11, 2857, 13, 16, 11, 3510, 13, 23, 11, 2857, 13, 15]"
‚úÖ Best Practice: Class definition should include a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",1.0,679,best_practice,151,Class definition should include a docstring explaining its purpose and usage,,639,"8593,1101,2022-02-15 00:00:00,day,5444.0,47.05,47.1,46.8,47.0","[23, 49051, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1314, 3571, 25, 405, 25, 405, 11, 820, 11, 20, 30272, 13, 15, 11, 2857, 13, 2713, 11, 2857, 13, 16, 11, 3510, 13, 23, 11, 2857, 13, 15]"
‚úÖ Best Practice: Use of **kwargs allows for flexible and extensible function signatures,"[26486, 227, 6705, 19939, 25, 5765, 286, 12429, 46265, 22046, 3578, 329, 12846, 290, 1070, 27339, 2163, 17239]",0.5,719,best_practice,152,Use of **kwargs allows for flexible and extensible function signatures,,679,"8594,1101,2022-02-16 00:00:00,day,8751.0,47.0,47.15,47.0,47.0","[23, 46438, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1433, 3571, 25, 405, 25, 405, 11, 820, 11, 31360, 16, 13, 15, 11, 2857, 13, 15, 11, 2857, 13, 1314, 11, 2857, 13, 15, 11, 2857, 13, 15]"
üß† ML Signal: Use of sorted() indicates a need for ordered data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23243, 3419, 9217, 257, 761, 329, 6149, 1366]",0.5,759,ml_signal,153,Use of sorted() indicates a need for ordered data,,719,"8595,1101,2022-02-17 00:00:00,day,10662.0,47.15,47.55,47.1,47.45","[23, 35124, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1558, 3571, 25, 405, 25, 405, 11, 820, 11, 940, 39380, 13, 15, 11, 2857, 13, 1314, 11, 2857, 13, 2816, 11, 2857, 13, 16, 11, 2857, 13, 2231]"
‚úÖ Best Practice: Use of @property for encapsulation and controlled access to class attributes,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 329, 32652, 1741, 290, 6856, 1895, 284, 1398, 12608]",0.5,799,best_practice,157,Use of @property for encapsulation and controlled access to class attributes,,759,"8599,1101,2022-02-23 00:00:00,day,8040.0,47.7,47.85,47.45,47.65","[5332, 2079, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1954, 3571, 25, 405, 25, 405, 11, 820, 11, 1795, 1821, 13, 15, 11, 2857, 13, 22, 11, 2857, 13, 5332, 11, 2857, 13, 2231, 11, 2857, 13, 2996]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,839,best_practice,155,Use of type hinting for return type improves code readability and maintainability,,799,"8597,1101,2022-02-21 00:00:00,day,8201.0,47.35,47.75,47.15,47.6","[23, 43239, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 2481, 3571, 25, 405, 25, 405, 11, 820, 11, 23, 1264, 13, 15, 11, 2857, 13, 2327, 11, 2857, 13, 2425, 11, 2857, 13, 1314, 11, 2857, 13, 21]"
"üß† ML Signal: Accessor method for a private attribute, indicating encapsulation pattern","[8582, 100, 254, 10373, 26484, 25, 8798, 273, 2446, 329, 257, 2839, 11688, 11, 12739, 32652, 1741, 3912]",0.5,879,ml_signal,157,"Accessor method for a private attribute, indicating encapsulation pattern",,839,"8599,1101,2022-02-23 00:00:00,day,8040.0,47.7,47.85,47.45,47.65","[5332, 2079, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1954, 3571, 25, 405, 25, 405, 11, 820, 11, 1795, 1821, 13, 15, 11, 2857, 13, 22, 11, 2857, 13, 5332, 11, 2857, 13, 2231, 11, 2857, 13, 2996]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,919,best_practice,157,Type hinting improves code readability and maintainability,,879,"8599,1101,2022-02-23 00:00:00,day,8040.0,47.7,47.85,47.45,47.65","[5332, 2079, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1954, 3571, 25, 405, 25, 405, 11, 820, 11, 1795, 1821, 13, 15, 11, 2857, 13, 22, 11, 2857, 13, 5332, 11, 2857, 13, 2231, 11, 2857, 13, 2996]"
üß† ML Signal: Usage of __getitem__ indicates the class behaves like a container,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 1136, 9186, 834, 9217, 262, 1398, 39341, 588, 257, 9290]",1.0,959,ml_signal,159,Usage of __getitem__ indicates the class behaves like a container,,919,"8601,1101,2022-02-25 00:00:00,day,14556.0,47.2,47.5,46.9,47.35","[4521, 486, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1495, 3571, 25, 405, 25, 405, 11, 820, 11, 1415, 37864, 13, 15, 11, 2857, 13, 17, 11, 2857, 13, 20, 11, 3510, 13, 24, 11, 2857, 13, 2327]"
‚úÖ Best Practice: Type hinting for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,999,best_practice,159,Type hinting for return value improves code readability and maintainability,,959,"8601,1101,2022-02-25 00:00:00,day,14556.0,47.2,47.5,46.9,47.35","[4521, 486, 11, 1157, 486, 11, 1238, 1828, 12, 2999, 12, 1495, 3571, 25, 405, 25, 405, 11, 820, 11, 1415, 37864, 13, 15, 11, 2857, 13, 17, 11, 2857, 13, 20, 11, 3510, 13, 24, 11, 2857, 13, 2327]"
üß† ML Signal: Usage of __len__ method indicates implementation of a container-like class,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 11925, 834, 2446, 9217, 7822, 286, 257, 9290, 12, 2339, 1398]",1.0,999,ml_signal,161,Usage of __len__ method indicates implementation of a container-like class,,999,,[]
‚úÖ Best Practice: Class definition should be followed by a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 307, 3940, 416, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,999,best_practice,161,Class definition should be followed by a docstring explaining its purpose and usage,,999,,[]
üß† ML Signal: Iterating over grouped data is a common pattern in data processing tasks.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 32824, 1366, 318, 257, 2219, 3912, 287, 1366, 7587, 8861, 13]",1.0,1004,ml_signal,165,Iterating over grouped data is a common pattern in data processing tasks.,,999,class MockStorageBase:,"[4871, 44123, 31425, 14881, 25]"
üß† ML Signal: Accessing the first and last elements of a DataFrame column is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 717, 290, 938, 4847, 286, 257, 6060, 19778, 5721, 318, 257, 2219, 3912, 13]",1.0,1019,ml_signal,167,Accessing the first and last elements of a DataFrame column is a common pattern.,,1004,        self.df = MOCK_DF,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7568, 796, 337, 11290, 62, 8068]"
üß† ML Signal: Storing data in a dictionary with keys and tuple values is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1366, 287, 257, 22155, 351, 8251, 290, 46545, 3815, 318, 257, 2219, 3912, 13]",0.5,1019,ml_signal,169,Storing data in a dictionary with keys and tuple values is a common pattern.,,1019,,[]
‚úÖ Best Practice: Storing processed data in an instance variable for later use.,"[26486, 227, 6705, 19939, 25, 520, 3255, 13686, 1366, 287, 281, 4554, 7885, 329, 1568, 779, 13]",1.0,1032,best_practice,172,Storing processed data in an instance variable for later use.,,1019,        super().__init__(),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 3419]"
‚úÖ Best Practice: Use of type hints for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1046,best_practice,171,Use of type hints for return type improves code readability and maintainability,,1032,"    def __init__(self, **kwargs):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 12429, 46265, 22046, 2599]"
"üß† ML Signal: Accessor method for a private attribute, indicating encapsulation pattern","[8582, 100, 254, 10373, 26484, 25, 8798, 273, 2446, 329, 257, 2839, 11688, 11, 12739, 32652, 1741, 3912]",1.0,1069,ml_signal,173,"Accessor method for a private attribute, indicating encapsulation pattern",,1046,"        self._data = sorted(self.df[""datetime""].unique())","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 23243, 7, 944, 13, 7568, 14692, 19608, 8079, 1, 4083, 34642, 28955]"
‚úÖ Best Practice: Type hints are used for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 20269, 389, 973, 329, 2163, 10007, 290, 1441, 2099]",0.5,1092,best_practice,173,Type hints are used for function parameters and return type,,1069,"        self._data = sorted(self.df[""datetime""].unique())","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 23243, 7, 944, 13, 7568, 14692, 19608, 8079, 1, 4083, 34642, 28955]"
üß† ML Signal: Accessing elements using the __getitem__ method,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 4847, 1262, 262, 11593, 1136, 9186, 834, 2446]",0.5,1097,ml_signal,175,Accessing elements using the __getitem__ method,,1092,    @property,"[220, 220, 220, 2488, 26745]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'k' is not in 'self.data',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 74, 6, 318, 407, 287, 705, 944, 13, 7890, 6]",0.5,1111,sast_risk,176,Potential KeyError if 'k' is not in 'self.data',Low,1097,    def data(self) -> List[CalVT]:,"[220, 220, 220, 825, 1366, 7, 944, 8, 4613, 7343, 58, 9771, 36392, 5974]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1116,best_practice,175,Type hinting improves code readability and maintainability,,1111,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Usage of __len__ indicates implementation of a container-like class,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 11925, 834, 9217, 7822, 286, 257, 9290, 12, 2339, 1398]",1.0,1127,ml_signal,177,Usage of __len__ indicates implementation of a container-like class,,1116,        return self._data,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 7890]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748]",0.5,1138,best_practice,177,Class definition should include a docstring to describe its purpose and usage,,1127,        return self._data,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 7890]"
‚úÖ Best Practice: Use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",1.0,1169,best_practice,179,Use of super() to initialize the parent class,,1138,"    def __getitem__(self, i: Union[int, slice]) -> Union[CalVT, List[CalVT]]:","[220, 220, 220, 825, 11593, 1136, 9186, 834, 7, 944, 11, 1312, 25, 4479, 58, 600, 11, 16416, 12962, 4613, 4479, 58, 9771, 36392, 11, 7343, 58, 9771, 36392, 60, 5974]"
üß† ML Signal: Use of unique() to get distinct values from a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3748, 3419, 284, 651, 7310, 3815, 422, 257, 6060, 19778, 5721]",1.0,1182,ml_signal,182,Use of unique() to get distinct values from a DataFrame column,,1169,    def __len__(self) -> int:,"[220, 220, 220, 825, 11593, 11925, 834, 7, 944, 8, 4613, 493, 25]"
üß† ML Signal: Creating a DataFrame from a list and setting an index,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 422, 257, 1351, 290, 4634, 281, 6376]",1.0,1182,ml_signal,184,Creating a DataFrame from a list and setting an index,,1182,,[]
üß† ML Signal: Filtering a DataFrame based on a condition,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 257, 6060, 19778, 1912, 319, 257, 4006]",1.0,1182,ml_signal,185,Filtering a DataFrame based on a condition,,1182,,[]
üß† ML Signal: Slicing a DataFrame based on index conditions,"[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 257, 6060, 19778, 1912, 319, 6376, 3403]",1.0,1192,ml_signal,189,Slicing a DataFrame based on index conditions,,1182,        instruments = {},"[220, 220, 220, 220, 220, 220, 220, 12834, 796, 23884]"
üß† ML Signal: Setting a DataFrame index,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 6060, 19778, 6376]",1.0,1214,ml_signal,193,Setting a DataFrame index,,1192,"            instruments[symbol] = [(start, end)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12834, 58, 1837, 23650, 60, 796, 47527, 9688, 11, 886, 15437]"
üß† ML Signal: Reindexing a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 797, 9630, 278, 257, 6060, 19778]",1.0,1214,ml_signal,195,Reindexing a DataFrame,,1214,,[]
üß† ML Signal: Getting the location of a value in an index,"[8582, 100, 254, 10373, 26484, 25, 18067, 262, 4067, 286, 257, 1988, 287, 281, 6376]",1.0,1219,ml_signal,196,Getting the location of a value in an index,,1214,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Resetting a DataFrame index,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 257, 6060, 19778, 6376]",1.0,1219,ml_signal,199,Resetting a DataFrame index,,1219,,[]
üß† ML Signal: Modifying a DataFrame index,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 257, 6060, 19778, 6376]",1.0,1233,ml_signal,201,Modifying a DataFrame index,,1219,        return self.data[k],"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 58, 74, 60]"
‚úÖ Best Practice: Storing processed data in an instance variable,"[26486, 227, 6705, 19939, 25, 520, 3255, 13686, 1366, 287, 281, 4554, 7885]",1.0,1246,best_practice,203,Storing processed data in an instance variable,,1233,    def __len__(self) -> int:,"[220, 220, 220, 825, 11593, 11925, 834, 7, 944, 8, 4613, 493, 25]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1246,best_practice,195,Use of type hinting for return type improves code readability and maintainability,,1246,,[]
"üß† ML Signal: Accessing a private attribute, which may indicate encapsulation usage patterns","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2839, 11688, 11, 543, 743, 7603, 32652, 1741, 8748, 7572]",0.5,1251,ml_signal,196,"Accessing a private attribute, which may indicate encapsulation usage patterns",,1246,    @property,"[220, 220, 220, 2488, 26745]"
"‚ö†Ô∏è SAST Risk (Low): Directly accessing private attribute _data, consider using a getter method","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 22534, 2839, 11688, 4808, 7890, 11, 2074, 1262, 257, 651, 353, 2446]",0.5,1251,sast_risk,199,"Directly accessing private attribute _data, consider using a getter method",Low,1251,,[]
"‚ö†Ô∏è SAST Risk (Low): Directly accessing private attribute _data, consider using a getter method","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 22534, 2839, 11688, 4808, 7890, 11, 2074, 1262, 257, 651, 353, 2446]",0.5,1265,sast_risk,201,"Directly accessing private attribute _data, consider using a getter method",Low,1251,        return self.data[k],"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 58, 74, 60]"
‚úÖ Best Practice: Use of @property decorator for creating a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 4441, 257, 1100, 12, 8807, 11688]",0.5,1265,best_practice,205,Use of @property decorator for creating a read-only attribute,,1265,,[]
‚úÖ Best Practice: Specify the return type using Union for better type hinting,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 1262, 4479, 329, 1365, 2099, 9254, 278]",1.0,1278,best_practice,203,Specify the return type using Union for better type hinting,,1265,    def __len__(self) -> int:,"[220, 220, 220, 825, 11593, 11925, 834, 7, 944, 8, 4613, 493, 25]"
‚úÖ Best Practice: Check for empty data to prevent index errors,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 1366, 284, 2948, 6376, 8563]",0.5,1278,best_practice,205,Check for empty data to prevent index errors,,1278,,[]
"üß† ML Signal: Accessing the last element of an index, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 938, 5002, 286, 281, 6376, 11, 2219, 3912, 287, 1366, 7587]",1.0,1318,ml_signal,208,"Accessing the last element of an index, common pattern in data processing",,1278,"    def __init__(self, instrument: str, field: str, freq: str, db_region: str = None, **kwargs):  # type: ignore","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 8875, 25, 965, 11, 2214, 25, 965, 11, 2030, 80, 25, 965, 11, 20613, 62, 36996, 25, 965, 796, 6045, 11, 12429, 46265, 22046, 2599, 220, 1303, 2099, 25, 8856]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if 'i' is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 705, 72, 6, 318, 503, 286, 22303]",1.0,1341,sast_risk,213,Potential IndexError if 'i' is out of bounds,Low,1318,"        df = self.df[self.df[""symbol""] == instrument]","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13, 7568, 58, 944, 13, 7568, 14692, 1837, 23650, 8973, 6624, 8875, 60]"
"üß† ML Signal: Accessing data by index, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1366, 416, 6376, 11, 2219, 3912, 287, 1366, 7587]",1.0,1357,ml_signal,215,"Accessing data by index, common pattern in data processing",,1341,        cal_df = df_calendar[,"[220, 220, 220, 220, 220, 220, 220, 2386, 62, 7568, 796, 47764, 62, 9948, 9239, 58]"
‚úÖ Best Practice: Use default values for slice start and stop,"[26486, 227, 6705, 19939, 25, 5765, 4277, 3815, 329, 16416, 923, 290, 2245]",1.0,1379,best_practice,219,Use default values for slice start and stop,,1357,        df_data = df.reindex(cal_df.index),"[220, 220, 220, 220, 220, 220, 220, 47764, 62, 7890, 796, 47764, 13, 260, 9630, 7, 9948, 62, 7568, 13, 9630, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for returning an empty Series if conditions are not met,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 8024, 281, 6565, 7171, 611, 3403, 389, 407, 1138]",1.0,1393,sast_risk,223,Potential for returning an empty Series if conditions are not met,Low,1379,        self._data = df_data,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 47764, 62, 7890]"
"üß† ML Signal: Slicing data, common pattern in data manipulation","[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 1366, 11, 2219, 3912, 287, 1366, 17512]",1.0,1407,ml_signal,226,"Slicing data, common pattern in data manipulation",,1393,    def data(self) -> pd.Series:,"[220, 220, 220, 825, 1366, 7, 944, 8, 4613, 279, 67, 13, 27996, 25]"
‚ö†Ô∏è SAST Risk (Low): TypeError if 'i' is neither int nor slice,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5994, 12331, 611, 705, 72, 6, 318, 6159, 493, 4249, 16416]",1.0,1424,sast_risk,230,TypeError if 'i' is neither int nor slice,Low,1407,"    def start_index(self) -> Union[int, None]:","[220, 220, 220, 825, 923, 62, 9630, 7, 944, 8, 4613, 4479, 58, 600, 11, 6045, 5974]"
‚úÖ Best Practice: Use of __len__ method to define object length,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 11925, 834, 2446, 284, 8160, 2134, 4129]",0.5,1440,best_practice,227,Use of __len__ method to define object length,,1424,        return self._data[self.field],"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 7890, 58, 944, 13, 3245, 60]"
üß† ML Signal: Accessing an attribute of the object,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 281, 11688, 286, 262, 2134]",0.5,1445,ml_signal,229,Accessing an attribute of the object,,1440,    @property,"[220, 220, 220, 2488, 26745]"
"üß† ML Signal: Use of unittest framework for testing, indicating a pattern for automated testing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 555, 715, 395, 9355, 329, 4856, 11, 12739, 257, 3912, 329, 16359, 4856]",1.0,1462,ml_signal,230,"Use of unittest framework for testing, indicating a pattern for automated testing",,1445,"    def start_index(self) -> Union[int, None]:","[220, 220, 220, 825, 923, 62, 9630, 7, 944, 8, 4613, 4479, 58, 600, 11, 6045, 5974]"
‚úÖ Best Practice: Use of setUpClass for class-level setup in unit tests,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 4933, 9487, 329, 1398, 12, 5715, 9058, 287, 4326, 5254]",0.5,1497,best_practice,248,Use of setUpClass for class-level setup in unit tests,,1462,"                raise IndexError(f""{i}: start index is {storage_start_index}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 12901, 12331, 7, 69, 1, 90, 72, 38362, 923, 6376, 318, 1391, 35350, 62, 9688, 62, 9630, 92, 4943]"
üß† ML Signal: Hardcoded string values can indicate configuration or environment settings,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 4731, 3815, 460, 7603, 8398, 393, 2858, 6460]",0.5,1512,ml_signal,250,Hardcoded string values can indicate configuration or environment settings,,1497,"            return i, data","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1312, 11, 1366]"
‚ö†Ô∏è SAST Risk (Low): Use of **kwargs can lead to unexpected arguments being passed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 12429, 46265, 22046, 460, 1085, 284, 10059, 7159, 852, 3804]",0.5,1527,sast_risk,250,Use of **kwargs can lead to unexpected arguments being passed,Low,1512,"            return i, data","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1312, 11, 1366]"
‚úÖ Best Practice: Explicitly passing parameters to improve readability and maintainability,"[26486, 227, 6705, 19939, 25, 11884, 306, 6427, 10007, 284, 2987, 1100, 1799, 290, 5529, 1799]",1.0,1542,best_practice,250,Explicitly passing parameters to improve readability and maintainability,,1527,"            return i, data","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1312, 11, 1366]"

[
  {
    "line": 6,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Relative imports can lead to issues if the module is executed as a standalone script.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      45344,
      17944,
      460,
      1085,
      284,
      2428,
      611,
      262,
      8265,
      318,
      10945,
      355,
      257,
      27669,
      4226,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Relative imports can lead to issues if the module is executed as a standalone script."
  },
  {
    "line": 8,
    "text": "from .. import init",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Relative imports can lead to issues if the module is executed as a standalone script.",
    "confidence": 1.0,
    "tokens": [
      6738,
      11485,
      1330,
      2315
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      45344,
      17944,
      460,
      1085,
      284,
      2428,
      611,
      262,
      8265,
      318,
      10945,
      355,
      257,
      27669,
      4226,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Relative imports can lead to issues if the module is executed as a standalone script."
  },
  {
    "line": 10,
    "text": "from qlib.data.filter import NameDFilter",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Relative imports can lead to issues if the module is executed as a standalone script.",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      13,
      24455,
      1330,
      6530,
      8068,
      346,
      353
    ],
    "start_token": 4,
    "end_token": 16,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      45344,
      17944,
      460,
      1085,
      284,
      2428,
      611,
      262,
      8265,
      318,
      10945,
      355,
      257,
      27669,
      4226,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Relative imports can lead to issues if the module is executed as a standalone script."
  },
  {
    "line": 12,
    "text": "from qlib.data.data import Cal, DatasetD",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      13,
      7890,
      1330,
      2199,
      11,
      16092,
      292,
      316,
      35
    ],
    "start_token": 16,
    "end_token": 30,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      12782,
      460,
      10400,
      2324,
      7476,
      611,
      262,
      5888,
      318,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external libraries can introduce security risks if the library is compromised."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 30,
    "end_token": 30,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      12782,
      460,
      10400,
      2324,
      7476,
      611,
      262,
      5888,
      318,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external libraries can introduce security risks if the library is compromised."
  },
  {
    "line": 16,
    "text": "class TestAutoData(unittest.TestCase):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.",
    "confidence": 0.5,
    "tokens": [
      4871,
      6208,
      27722,
      6601,
      7,
      403,
      715,
      395,
      13,
      14402,
      20448,
      2599
    ],
    "start_token": 30,
    "end_token": 42,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      12782,
      460,
      10400,
      2324,
      7476,
      611,
      262,
      5888,
      318,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external libraries can introduce security risks if the library is compromised."
  },
  {
    "line": 17,
    "text": "    _setup_kwargs = {}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from external libraries can introduce security risks if the library is compromised.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      40406,
      62,
      46265,
      22046,
      796,
      23884
    ],
    "start_token": 42,
    "end_token": 52,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      7097,
      12782,
      460,
      10400,
      2324,
      7476,
      611,
      262,
      5888,
      318,
      19066,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from external libraries can introduce security risks if the library is compromised."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class variables for configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 52,
    "end_token": 52,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class variables for configuration"
  },
  {
    "line": 16,
    "text": "class TestAutoData(unittest.TestCase):",
    "annotation": "\ud83e\udde0 ML Signal: Use of class variables for configuration",
    "confidence": 1.0,
    "tokens": [
      4871,
      6208,
      27722,
      6601,
      7,
      403,
      715,
      395,
      13,
      14402,
      20448,
      2599
    ],
    "start_token": 52,
    "end_token": 64,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class variables for configuration"
  },
  {
    "line": 17,
    "text": "    _setup_kwargs = {}",
    "annotation": "\ud83e\udde0 ML Signal: Use of class variables for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4808,
      40406,
      62,
      46265,
      22046,
      796,
      23884
    ],
    "start_token": 64,
    "end_token": 74,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class variables for configuration"
  },
  {
    "line": 20,
    "text": "    provider_uri_1min = \"~/.qlib/qlib_data/cn_data_1min\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of class variables for configuration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      62,
      9900,
      62,
      16,
      1084,
      796,
      366,
      93,
      11757,
      80,
      8019,
      14,
      80,
      8019,
      62,
      7890,
      14,
      31522,
      62,
      7890,
      62,
      16,
      1084,
      1
    ],
    "start_token": 74,
    "end_token": 102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class variables for configuration"
  },
  {
    "line": 20,
    "text": "    provider_uri_1min = \"~/.qlib/qlib_data/cn_data_1min\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of class method for setup indicates a pattern for initializing class-level resources",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10131,
      62,
      9900,
      62,
      16,
      1084,
      796,
      366,
      93,
      11757,
      80,
      8019,
      14,
      80,
      8019,
      62,
      7890,
      14,
      31522,
      62,
      7890,
      62,
      16,
      1084,
      1
    ],
    "start_token": 102,
    "end_token": 130,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      2446,
      329,
      9058,
      9217,
      257,
      3912,
      329,
      4238,
      2890,
      1398,
      12,
      5715,
      4133
    ],
    "label": "ml_signal",
    "reason": "Use of class method for setup indicates a pattern for initializing class-level resources"
  },
  {
    "line": 28,
    "text": "            name_day = \"qlib_data_simple\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of NotImplementedError could expose internal logic if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      62,
      820,
      796,
      366,
      80,
      8019,
      62,
      7890,
      62,
      36439,
      1
    ],
    "start_token": 130,
    "end_token": 153,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      714,
      15651,
      5387,
      9156,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of NotImplementedError could expose internal logic if not handled properly"
  },
  {
    "line": 28,
    "text": "            name_day = \"qlib_data_simple\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of external data fetching method indicates a pattern for data initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      62,
      820,
      796,
      366,
      80,
      8019,
      62,
      7890,
      62,
      36439,
      1
    ],
    "start_token": 153,
    "end_token": 176,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      1366,
      21207,
      278,
      2446,
      9217,
      257,
      3912,
      329,
      1366,
      37588
    ],
    "label": "ml_signal",
    "reason": "Use of external data fetching method indicates a pattern for data initialization"
  },
  {
    "line": 37,
    "text": "            region=REG_CN,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional data fetching based on configuration indicates a pattern for dynamic data setup",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3814,
      28,
      31553,
      62,
      44175,
      11
    ],
    "start_token": 176,
    "end_token": 193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      1366,
      21207,
      278,
      1912,
      319,
      8398,
      9217,
      257,
      3912,
      329,
      8925,
      1366,
      9058
    ],
    "label": "ml_signal",
    "reason": "Conditional data fetching based on configuration indicates a pattern for dynamic data setup"
  },
  {
    "line": 50,
    "text": "                delete_old=False,",
    "annotation": "\ud83e\udde0 ML Signal: Use of initialization function with dynamic parameters indicates a pattern for flexible setup",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12233,
      62,
      727,
      28,
      25101,
      11
    ],
    "start_token": 193,
    "end_token": 214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37588,
      2163,
      351,
      8925,
      10007,
      9217,
      257,
      3912,
      329,
      12846,
      9058
    ],
    "label": "ml_signal",
    "reason": "Use of initialization function with dynamic parameters indicates a pattern for flexible setup"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @classmethod for methods that operate on the class rather than instance",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 214,
    "end_token": 214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      4871,
      24396,
      329,
      5050,
      326,
      8076,
      319,
      262,
      1398,
      2138,
      621,
      4554
    ],
    "label": "best_practice",
    "reason": "Use of @classmethod for methods that operate on the class rather than instance"
  },
  {
    "line": 56,
    "text": "            provider_uri=provider_uri_map,",
    "annotation": "\u2705 Best Practice: Use of setUpClass for initializing resources before tests",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10131,
      62,
      9900,
      28,
      15234,
      1304,
      62,
      9900,
      62,
      8899,
      11
    ],
    "start_token": 214,
    "end_token": 236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      4933,
      9487,
      329,
      4238,
      2890,
      4133,
      878,
      5254
    ],
    "label": "best_practice",
    "reason": "Use of setUpClass for initializing resources before tests"
  },
  {
    "line": 58,
    "text": "            expression_cache=None,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiating a class within a setup method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5408,
      62,
      23870,
      28,
      14202,
      11
    ],
    "start_token": 236,
    "end_token": 253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2262,
      17096,
      803,
      257,
      1398,
      1626,
      257,
      9058,
      2446
    ],
    "label": "ml_signal",
    "reason": "Instantiating a class within a setup method"
  },
  {
    "line": 59,
    "text": "            dataset_cache=None,",
    "annotation": "\u2705 Best Practice: Storing instance as a class attribute for reuse in tests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27039,
      62,
      23870,
      28,
      14202,
      11
    ],
    "start_token": 253,
    "end_token": 270,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      4554,
      355,
      257,
      1398,
      11688,
      329,
      32349,
      287,
      5254
    ],
    "label": "best_practice",
    "reason": "Storing instance as a class attribute for reuse in tests"
  },
  {
    "line": 62,
    "text": "",
    "annotation": "\u2705 Best Practice: Test method name clearly indicates the purpose of the test",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 270,
    "end_token": 270,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6208,
      2446,
      1438,
      4084,
      9217,
      262,
      4007,
      286,
      262,
      1332
    ],
    "label": "best_practice",
    "reason": "Test method name clearly indicates the purpose of the test"
  },
  {
    "line": 64,
    "text": "class TestOperatorData(TestAutoData):",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an object is not None",
    "confidence": 1.0,
    "tokens": [
      4871,
      6208,
      18843,
      1352,
      6601,
      7,
      14402,
      27722,
      6601,
      2599
    ],
    "start_token": 270,
    "end_token": 280,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      2134,
      318,
      407,
      6045
    ],
    "label": "ml_signal",
    "reason": "Checking if an object is not None"
  },
  {
    "line": 65,
    "text": "    @classmethod",
    "annotation": "\u2705 Best Practice: Use of assertIsNotNone to verify object initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 280,
    "end_token": 286,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      3792,
      3673,
      14202,
      284,
      11767,
      2134,
      37588
    ],
    "label": "best_practice",
    "reason": "Use of assertIsNotNone to verify object initialization"
  },
  {
    "line": 68,
    "text": "        super().setUpClass(enable_1d_type, enable_1min)",
    "annotation": "\u2705 Best Practice: Test method name clearly indicates the purpose of the test",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      2617,
      4933,
      9487,
      7,
      21633,
      62,
      16,
      67,
      62,
      4906,
      11,
      7139,
      62,
      16,
      1084,
      8
    ],
    "start_token": 286,
    "end_token": 311,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6208,
      2446,
      1438,
      4084,
      9217,
      262,
      4007,
      286,
      262,
      1332
    ],
    "label": "best_practice",
    "reason": "Test method name clearly indicates the purpose of the test"
  },
  {
    "line": 70,
    "text": "        instruments = D.instruments(\"csi300\", filter_pipe=[nameDFilter])",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method with specific arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      796,
      360,
      13,
      259,
      2536,
      2886,
      7203,
      6359,
      72,
      6200,
      1600,
      8106,
      62,
      34360,
      41888,
      3672,
      8068,
      346,
      353,
      12962
    ],
    "start_token": 311,
    "end_token": 339,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      351,
      2176,
      7159
    ],
    "label": "ml_signal",
    "reason": "Calling a method with specific arguments"
  },
  {
    "line": 70,
    "text": "        instruments = D.instruments(\"csi300\", filter_pipe=[nameDFilter])",
    "annotation": "\u2705 Best Practice: Storing method result in a variable for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      796,
      360,
      13,
      259,
      2536,
      2886,
      7203,
      6359,
      72,
      6200,
      1600,
      8106,
      62,
      34360,
      41888,
      3672,
      8068,
      346,
      353,
      12962
    ],
    "start_token": 339,
    "end_token": 367,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      2446,
      1255,
      287,
      257,
      7885,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Storing method result in a variable for clarity"
  },
  {
    "line": 70,
    "text": "        instruments = D.instruments(\"csi300\", filter_pipe=[nameDFilter])",
    "annotation": "\ud83e\udde0 ML Signal: Asserting expected output of a method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      796,
      360,
      13,
      259,
      2536,
      2886,
      7203,
      6359,
      72,
      6200,
      1600,
      8106,
      62,
      34360,
      41888,
      3672,
      8068,
      346,
      353,
      12962
    ],
    "start_token": 367,
    "end_token": 395,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      278,
      2938,
      5072,
      286,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Asserting expected output of a method"
  },
  {
    "line": 70,
    "text": "        instruments = D.instruments(\"csi300\", filter_pipe=[nameDFilter])",
    "annotation": "\u2705 Best Practice: Use of assertEqual to verify method functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      796,
      360,
      13,
      259,
      2536,
      2886,
      7203,
      6359,
      72,
      6200,
      1600,
      8106,
      62,
      34360,
      41888,
      3672,
      8068,
      346,
      353,
      12962
    ],
    "start_token": 395,
    "end_token": 423,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      36,
      13255,
      284,
      11767,
      2446,
      11244
    ],
    "label": "best_practice",
    "reason": "Use of assertEqual to verify method functionality"
  },
  {
    "line": 55,
    "text": "        init(",
    "annotation": "\u2705 Best Practice: Use of class method setUpClass for setting up test fixtures",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2315,
      7
    ],
    "start_token": 423,
    "end_token": 432,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      2446,
      900,
      4933,
      9487,
      329,
      4634,
      510,
      1332,
      34609
    ],
    "label": "best_practice",
    "reason": "Use of class method setUpClass for setting up test fixtures"
  },
  {
    "line": 57,
    "text": "            region=REG_CN,",
    "annotation": "\u2705 Best Practice: Calling superclass method to ensure proper setup",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3814,
      28,
      31553,
      62,
      44175,
      11
    ],
    "start_token": 432,
    "end_token": 449,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      2208,
      4871,
      2446,
      284,
      4155,
      1774,
      9058
    ],
    "label": "best_practice",
    "reason": "Calling superclass method to ensure proper setup"
  },
  {
    "line": 59,
    "text": "            dataset_cache=None,",
    "annotation": "\ud83e\udde0 ML Signal: Use of regex for filtering, indicating pattern matching",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27039,
      62,
      23870,
      28,
      14202,
      11
    ],
    "start_token": 449,
    "end_token": 466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      40364,
      329,
      25431,
      11,
      12739,
      3912,
      12336
    ],
    "label": "ml_signal",
    "reason": "Use of regex for filtering, indicating pattern matching"
  },
  {
    "line": 61,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of filtering in data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 466,
    "end_token": 474,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      25431,
      287,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of filtering in data retrieval"
  },
  {
    "line": 66,
    "text": "    def setUpClass(cls, enable_1d_type=\"simple\", enable_1min=False) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of frequency in data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      4933,
      9487,
      7,
      565,
      82,
      11,
      7139,
      62,
      16,
      67,
      62,
      4906,
      2625,
      36439,
      1600,
      7139,
      62,
      16,
      1084,
      28,
      25101,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 474,
    "end_token": 504,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8373,
      287,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of frequency in data retrieval"
  },
  {
    "line": 69,
    "text": "        nameDFilter = NameDFilter(name_rule_re=\"SH600110\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of calendar for time range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      8068,
      346,
      353,
      796,
      6530,
      8068,
      346,
      353,
      7,
      3672,
      62,
      25135,
      62,
      260,
      2625,
      9693,
      8054,
      11442,
      4943
    ],
    "start_token": 504,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11845,
      329,
      640,
      2837
    ],
    "label": "ml_signal",
    "reason": "Use of calendar for time range"
  },
  {
    "line": 70,
    "text": "        instruments = D.instruments(\"csi300\", filter_pipe=[nameDFilter])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded data in the code, consider externalizing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      796,
      360,
      13,
      259,
      2536,
      2886,
      7203,
      6359,
      72,
      6200,
      1600,
      8106,
      62,
      34360,
      41888,
      3672,
      8068,
      346,
      353,
      12962
    ],
    "start_token": 531,
    "end_token": 559,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      1366,
      287,
      262,
      2438,
      11,
      2074,
      7097,
      2890
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded data in the code, consider externalizing"
  },
  {
    "line": 149,
    "text": "8591,1101,2022-02-11 00:00:00,day,6841.0,47.3,47.55,47.15,47.55",
    "annotation": "\ud83e\udde0 ML Signal: Use of **kwargs indicates flexible function signature",
    "confidence": 1.0,
    "tokens": [
      23,
      48952,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1157,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      3104,
      3901,
      13,
      15,
      11,
      2857,
      13,
      18,
      11,
      2857,
      13,
      2816,
      11,
      2857,
      13,
      1314,
      11,
      2857,
      13,
      2816
    ],
    "start_token": 559,
    "end_token": 599,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      9217,
      12846,
      2163,
      9877
    ],
    "label": "ml_signal",
    "reason": "Use of **kwargs indicates flexible function signature"
  },
  {
    "line": 151,
    "text": "8593,1101,2022-02-15 00:00:00,day,5444.0,47.05,47.1,46.8,47.0",
    "annotation": "\ud83e\udde0 ML Signal: Assignment of a mock dataframe suggests testing or placeholder data",
    "confidence": 0.5,
    "tokens": [
      23,
      49051,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1314,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      20,
      30272,
      13,
      15,
      11,
      2857,
      13,
      2713,
      11,
      2857,
      13,
      16,
      11,
      3510,
      13,
      23,
      11,
      2857,
      13,
      15
    ],
    "start_token": 599,
    "end_token": 639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50144,
      286,
      257,
      15290,
      1366,
      14535,
      5644,
      4856,
      393,
      46076,
      1366
    ],
    "label": "ml_signal",
    "reason": "Assignment of a mock dataframe suggests testing or placeholder data"
  },
  {
    "line": 151,
    "text": "8593,1101,2022-02-15 00:00:00,day,5444.0,47.05,47.1,46.8,47.0",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring explaining its purpose and usage",
    "confidence": 1.0,
    "tokens": [
      23,
      49051,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1314,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      20,
      30272,
      13,
      15,
      11,
      2857,
      13,
      2713,
      11,
      2857,
      13,
      16,
      11,
      3510,
      13,
      23,
      11,
      2857,
      13,
      15
    ],
    "start_token": 639,
    "end_token": 679,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring explaining its purpose and usage"
  },
  {
    "line": 152,
    "text": "8594,1101,2022-02-16 00:00:00,day,8751.0,47.0,47.15,47.0,47.0",
    "annotation": "\u2705 Best Practice: Use of **kwargs allows for flexible and extensible function signatures",
    "confidence": 0.5,
    "tokens": [
      23,
      46438,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1433,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      31360,
      16,
      13,
      15,
      11,
      2857,
      13,
      15,
      11,
      2857,
      13,
      1314,
      11,
      2857,
      13,
      15,
      11,
      2857,
      13,
      15
    ],
    "start_token": 679,
    "end_token": 719,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12429,
      46265,
      22046,
      3578,
      329,
      12846,
      290,
      1070,
      27339,
      2163,
      17239
    ],
    "label": "best_practice",
    "reason": "Use of **kwargs allows for flexible and extensible function signatures"
  },
  {
    "line": 153,
    "text": "8595,1101,2022-02-17 00:00:00,day,10662.0,47.15,47.55,47.1,47.45",
    "annotation": "\ud83e\udde0 ML Signal: Use of sorted() indicates a need for ordered data",
    "confidence": 0.5,
    "tokens": [
      23,
      35124,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1558,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      940,
      39380,
      13,
      15,
      11,
      2857,
      13,
      1314,
      11,
      2857,
      13,
      2816,
      11,
      2857,
      13,
      16,
      11,
      2857,
      13,
      2231
    ],
    "start_token": 719,
    "end_token": 759,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      23243,
      3419,
      9217,
      257,
      761,
      329,
      6149,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of sorted() indicates a need for ordered data"
  },
  {
    "line": 157,
    "text": "8599,1101,2022-02-23 00:00:00,day,8040.0,47.7,47.85,47.45,47.65",
    "annotation": "\u2705 Best Practice: Use of @property for encapsulation and controlled access to class attributes",
    "confidence": 0.5,
    "tokens": [
      5332,
      2079,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1954,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      1795,
      1821,
      13,
      15,
      11,
      2857,
      13,
      22,
      11,
      2857,
      13,
      5332,
      11,
      2857,
      13,
      2231,
      11,
      2857,
      13,
      2996
    ],
    "start_token": 759,
    "end_token": 799,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      329,
      32652,
      1741,
      290,
      6856,
      1895,
      284,
      1398,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of @property for encapsulation and controlled access to class attributes"
  },
  {
    "line": 155,
    "text": "8597,1101,2022-02-21 00:00:00,day,8201.0,47.35,47.75,47.15,47.6",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      23,
      43239,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      2481,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      23,
      1264,
      13,
      15,
      11,
      2857,
      13,
      2327,
      11,
      2857,
      13,
      2425,
      11,
      2857,
      13,
      1314,
      11,
      2857,
      13,
      21
    ],
    "start_token": 799,
    "end_token": 839,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 157,
    "text": "8599,1101,2022-02-23 00:00:00,day,8040.0,47.7,47.85,47.45,47.65",
    "annotation": "\ud83e\udde0 ML Signal: Accessor method for a private attribute, indicating encapsulation pattern",
    "confidence": 0.5,
    "tokens": [
      5332,
      2079,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1954,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      1795,
      1821,
      13,
      15,
      11,
      2857,
      13,
      22,
      11,
      2857,
      13,
      5332,
      11,
      2857,
      13,
      2231,
      11,
      2857,
      13,
      2996
    ],
    "start_token": 839,
    "end_token": 879,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      273,
      2446,
      329,
      257,
      2839,
      11688,
      11,
      12739,
      32652,
      1741,
      3912
    ],
    "label": "ml_signal",
    "reason": "Accessor method for a private attribute, indicating encapsulation pattern"
  },
  {
    "line": 157,
    "text": "8599,1101,2022-02-23 00:00:00,day,8040.0,47.7,47.85,47.45,47.65",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      5332,
      2079,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1954,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      1795,
      1821,
      13,
      15,
      11,
      2857,
      13,
      22,
      11,
      2857,
      13,
      5332,
      11,
      2857,
      13,
      2231,
      11,
      2857,
      13,
      2996
    ],
    "start_token": 879,
    "end_token": 919,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 159,
    "text": "8601,1101,2022-02-25 00:00:00,day,14556.0,47.2,47.5,46.9,47.35",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __getitem__ indicates the class behaves like a container",
    "confidence": 1.0,
    "tokens": [
      4521,
      486,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1495,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      1415,
      37864,
      13,
      15,
      11,
      2857,
      13,
      17,
      11,
      2857,
      13,
      20,
      11,
      3510,
      13,
      24,
      11,
      2857,
      13,
      2327
    ],
    "start_token": 919,
    "end_token": 959,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      1136,
      9186,
      834,
      9217,
      262,
      1398,
      39341,
      588,
      257,
      9290
    ],
    "label": "ml_signal",
    "reason": "Usage of __getitem__ indicates the class behaves like a container"
  },
  {
    "line": 159,
    "text": "8601,1101,2022-02-25 00:00:00,day,14556.0,47.2,47.5,46.9,47.35",
    "annotation": "\u2705 Best Practice: Type hinting for return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      4521,
      486,
      11,
      1157,
      486,
      11,
      1238,
      1828,
      12,
      2999,
      12,
      1495,
      3571,
      25,
      405,
      25,
      405,
      11,
      820,
      11,
      1415,
      37864,
      13,
      15,
      11,
      2857,
      13,
      17,
      11,
      2857,
      13,
      20,
      11,
      3510,
      13,
      24,
      11,
      2857,
      13,
      2327
    ],
    "start_token": 959,
    "end_token": 999,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 161,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __len__ method indicates implementation of a container-like class",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 999,
    "end_token": 999,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      11925,
      834,
      2446,
      9217,
      7822,
      286,
      257,
      9290,
      12,
      2339,
      1398
    ],
    "label": "ml_signal",
    "reason": "Usage of __len__ method indicates implementation of a container-like class"
  },
  {
    "line": 161,
    "text": "",
    "annotation": "\u2705 Best Practice: Class definition should be followed by a docstring explaining its purpose and usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 999,
    "end_token": 999,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      307,
      3940,
      416,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class definition should be followed by a docstring explaining its purpose and usage"
  },
  {
    "line": 165,
    "text": "class MockStorageBase:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over grouped data is a common pattern in data processing tasks.",
    "confidence": 1.0,
    "tokens": [
      4871,
      44123,
      31425,
      14881,
      25
    ],
    "start_token": 999,
    "end_token": 1004,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      32824,
      1366,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over grouped data is a common pattern in data processing tasks."
  },
  {
    "line": 167,
    "text": "        self.df = MOCK_DF",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the first and last elements of a DataFrame column is a common pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7568,
      796,
      337,
      11290,
      62,
      8068
    ],
    "start_token": 1004,
    "end_token": 1019,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      717,
      290,
      938,
      4847,
      286,
      257,
      6060,
      19778,
      5721,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing the first and last elements of a DataFrame column is a common pattern."
  },
  {
    "line": 169,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing data in a dictionary with keys and tuple values is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1019,
    "end_token": 1019,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      287,
      257,
      22155,
      351,
      8251,
      290,
      46545,
      3815,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing data in a dictionary with keys and tuple values is a common pattern."
  },
  {
    "line": 172,
    "text": "        super().__init__()",
    "annotation": "\u2705 Best Practice: Storing processed data in an instance variable for later use.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      3419
    ],
    "start_token": 1019,
    "end_token": 1032,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      13686,
      1366,
      287,
      281,
      4554,
      7885,
      329,
      1568,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Storing processed data in an instance variable for later use."
  },
  {
    "line": 171,
    "text": "    def __init__(self, **kwargs):",
    "annotation": "\u2705 Best Practice: Use of type hints for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      12429,
      46265,
      22046,
      2599
    ],
    "start_token": 1032,
    "end_token": 1046,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for return type improves code readability and maintainability"
  },
  {
    "line": 173,
    "text": "        self._data = sorted(self.df[\"datetime\"].unique())",
    "annotation": "\ud83e\udde0 ML Signal: Accessor method for a private attribute, indicating encapsulation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      23243,
      7,
      944,
      13,
      7568,
      14692,
      19608,
      8079,
      1,
      4083,
      34642,
      28955
    ],
    "start_token": 1046,
    "end_token": 1069,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      273,
      2446,
      329,
      257,
      2839,
      11688,
      11,
      12739,
      32652,
      1741,
      3912
    ],
    "label": "ml_signal",
    "reason": "Accessor method for a private attribute, indicating encapsulation pattern"
  },
  {
    "line": 173,
    "text": "        self._data = sorted(self.df[\"datetime\"].unique())",
    "annotation": "\u2705 Best Practice: Type hints are used for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      23243,
      7,
      944,
      13,
      7568,
      14692,
      19608,
      8079,
      1,
      4083,
      34642,
      28955
    ],
    "start_token": 1069,
    "end_token": 1092,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      389,
      973,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type hints are used for function parameters and return type"
  },
  {
    "line": 175,
    "text": "    @property",
    "annotation": "\ud83e\udde0 ML Signal: Accessing elements using the __getitem__ method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 1092,
    "end_token": 1097,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      4847,
      1262,
      262,
      11593,
      1136,
      9186,
      834,
      2446
    ],
    "label": "ml_signal",
    "reason": "Accessing elements using the __getitem__ method"
  },
  {
    "line": 176,
    "text": "    def data(self) -> List[CalVT]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'k' is not in 'self.data'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1366,
      7,
      944,
      8,
      4613,
      7343,
      58,
      9771,
      36392,
      5974
    ],
    "start_token": 1097,
    "end_token": 1111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      74,
      6,
      318,
      407,
      287,
      705,
      944,
      13,
      7890,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'k' is not in 'self.data'"
  },
  {
    "line": 175,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 1111,
    "end_token": 1116,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 177,
    "text": "        return self._data",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __len__ indicates implementation of a container-like class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      7890
    ],
    "start_token": 1116,
    "end_token": 1127,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      11925,
      834,
      9217,
      7822,
      286,
      257,
      9290,
      12,
      2339,
      1398
    ],
    "label": "ml_signal",
    "reason": "Usage of __len__ indicates implementation of a container-like class"
  },
  {
    "line": 177,
    "text": "        return self._data",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring to describe its purpose and usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      7890
    ],
    "start_token": 1127,
    "end_token": 1138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      284,
      6901,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring to describe its purpose and usage"
  },
  {
    "line": 179,
    "text": "    def __getitem__(self, i: Union[int, slice]) -> Union[CalVT, List[CalVT]]:",
    "annotation": "\u2705 Best Practice: Use of super() to initialize the parent class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      9186,
      834,
      7,
      944,
      11,
      1312,
      25,
      4479,
      58,
      600,
      11,
      16416,
      12962,
      4613,
      4479,
      58,
      9771,
      36392,
      11,
      7343,
      58,
      9771,
      36392,
      60,
      5974
    ],
    "start_token": 1138,
    "end_token": 1169,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of super() to initialize the parent class"
  },
  {
    "line": 182,
    "text": "    def __len__(self) -> int:",
    "annotation": "\ud83e\udde0 ML Signal: Use of unique() to get distinct values from a DataFrame column",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 1169,
    "end_token": 1182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3748,
      3419,
      284,
      651,
      7310,
      3815,
      422,
      257,
      6060,
      19778,
      5721
    ],
    "label": "ml_signal",
    "reason": "Use of unique() to get distinct values from a DataFrame column"
  },
  {
    "line": 184,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame from a list and setting an index",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1182,
    "end_token": 1182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      422,
      257,
      1351,
      290,
      4634,
      281,
      6376
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame from a list and setting an index"
  },
  {
    "line": 185,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Filtering a DataFrame based on a condition",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1182,
    "end_token": 1182,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      257,
      6060,
      19778,
      1912,
      319,
      257,
      4006
    ],
    "label": "ml_signal",
    "reason": "Filtering a DataFrame based on a condition"
  },
  {
    "line": 189,
    "text": "        instruments = {}",
    "annotation": "\ud83e\udde0 ML Signal: Slicing a DataFrame based on index conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      796,
      23884
    ],
    "start_token": 1182,
    "end_token": 1192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      677,
      278,
      257,
      6060,
      19778,
      1912,
      319,
      6376,
      3403
    ],
    "label": "ml_signal",
    "reason": "Slicing a DataFrame based on index conditions"
  },
  {
    "line": 193,
    "text": "            instruments[symbol] = [(start, end)]",
    "annotation": "\ud83e\udde0 ML Signal: Setting a DataFrame index",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      58,
      1837,
      23650,
      60,
      796,
      47527,
      9688,
      11,
      886,
      15437
    ],
    "start_token": 1192,
    "end_token": 1214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      6060,
      19778,
      6376
    ],
    "label": "ml_signal",
    "reason": "Setting a DataFrame index"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Reindexing a DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1214,
    "end_token": 1214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      797,
      9630,
      278,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Reindexing a DataFrame"
  },
  {
    "line": 196,
    "text": "    @property",
    "annotation": "\ud83e\udde0 ML Signal: Getting the location of a value in an index",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 1214,
    "end_token": 1219,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18067,
      262,
      4067,
      286,
      257,
      1988,
      287,
      281,
      6376
    ],
    "label": "ml_signal",
    "reason": "Getting the location of a value in an index"
  },
  {
    "line": 199,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Resetting a DataFrame index",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1219,
    "end_token": 1219,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30027,
      889,
      257,
      6060,
      19778,
      6376
    ],
    "label": "ml_signal",
    "reason": "Resetting a DataFrame index"
  },
  {
    "line": 201,
    "text": "        return self.data[k]",
    "annotation": "\ud83e\udde0 ML Signal: Modifying a DataFrame index",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7890,
      58,
      74,
      60
    ],
    "start_token": 1219,
    "end_token": 1233,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3401,
      4035,
      257,
      6060,
      19778,
      6376
    ],
    "label": "ml_signal",
    "reason": "Modifying a DataFrame index"
  },
  {
    "line": 203,
    "text": "    def __len__(self) -> int:",
    "annotation": "\u2705 Best Practice: Storing processed data in an instance variable",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 1233,
    "end_token": 1246,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      13686,
      1366,
      287,
      281,
      4554,
      7885
    ],
    "label": "best_practice",
    "reason": "Storing processed data in an instance variable"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1246,
    "end_token": 1246,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 196,
    "text": "    @property",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a private attribute, which may indicate encapsulation usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 1246,
    "end_token": 1251,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2839,
      11688,
      11,
      543,
      743,
      7603,
      32652,
      1741,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Accessing a private attribute, which may indicate encapsulation usage patterns"
  },
  {
    "line": 199,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing private attribute _data, consider using a getter method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1251,
    "end_token": 1251,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      2839,
      11688,
      4808,
      7890,
      11,
      2074,
      1262,
      257,
      651,
      353,
      2446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing private attribute _data, consider using a getter method"
  },
  {
    "line": 201,
    "text": "        return self.data[k]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly accessing private attribute _data, consider using a getter method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7890,
      58,
      74,
      60
    ],
    "start_token": 1251,
    "end_token": 1265,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      22534,
      2839,
      11688,
      4808,
      7890,
      11,
      2074,
      1262,
      257,
      651,
      353,
      2446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly accessing private attribute _data, consider using a getter method"
  },
  {
    "line": 205,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @property decorator for creating a read-only attribute",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1265,
    "end_token": 1265,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      4441,
      257,
      1100,
      12,
      8807,
      11688
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for creating a read-only attribute"
  },
  {
    "line": 203,
    "text": "    def __len__(self) -> int:",
    "annotation": "\u2705 Best Practice: Specify the return type using Union for better type hinting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 1265,
    "end_token": 1278,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      1441,
      2099,
      1262,
      4479,
      329,
      1365,
      2099,
      9254,
      278
    ],
    "label": "best_practice",
    "reason": "Specify the return type using Union for better type hinting"
  },
  {
    "line": 205,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for empty data to prevent index errors",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1278,
    "end_token": 1278,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6565,
      1366,
      284,
      2948,
      6376,
      8563
    ],
    "label": "best_practice",
    "reason": "Check for empty data to prevent index errors"
  },
  {
    "line": 208,
    "text": "    def __init__(self, instrument: str, field: str, freq: str, db_region: str = None, **kwargs):  # type: ignore",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the last element of an index, common pattern in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      8875,
      25,
      965,
      11,
      2214,
      25,
      965,
      11,
      2030,
      80,
      25,
      965,
      11,
      20613,
      62,
      36996,
      25,
      965,
      796,
      6045,
      11,
      12429,
      46265,
      22046,
      2599,
      220,
      1303,
      2099,
      25,
      8856
    ],
    "start_token": 1278,
    "end_token": 1318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      938,
      5002,
      286,
      281,
      6376,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Accessing the last element of an index, common pattern in data processing"
  },
  {
    "line": 213,
    "text": "        df = self.df[self.df[\"symbol\"] == instrument]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if 'i' is out of bounds",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13,
      7568,
      58,
      944,
      13,
      7568,
      14692,
      1837,
      23650,
      8973,
      6624,
      8875,
      60
    ],
    "start_token": 1318,
    "end_token": 1341,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      705,
      72,
      6,
      318,
      503,
      286,
      22303
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if 'i' is out of bounds"
  },
  {
    "line": 215,
    "text": "        cal_df = df_calendar[",
    "annotation": "\ud83e\udde0 ML Signal: Accessing data by index, common pattern in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2386,
      62,
      7568,
      796,
      47764,
      62,
      9948,
      9239,
      58
    ],
    "start_token": 1341,
    "end_token": 1357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1366,
      416,
      6376,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Accessing data by index, common pattern in data processing"
  },
  {
    "line": 219,
    "text": "        df_data = df.reindex(cal_df.index)",
    "annotation": "\u2705 Best Practice: Use default values for slice start and stop",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      7890,
      796,
      47764,
      13,
      260,
      9630,
      7,
      9948,
      62,
      7568,
      13,
      9630,
      8
    ],
    "start_token": 1357,
    "end_token": 1379,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4277,
      3815,
      329,
      16416,
      923,
      290,
      2245
    ],
    "label": "best_practice",
    "reason": "Use default values for slice start and stop"
  },
  {
    "line": 223,
    "text": "        self._data = df_data",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for returning an empty Series if conditions are not met",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      47764,
      62,
      7890
    ],
    "start_token": 1379,
    "end_token": 1393,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      8024,
      281,
      6565,
      7171,
      611,
      3403,
      389,
      407,
      1138
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for returning an empty Series if conditions are not met"
  },
  {
    "line": 226,
    "text": "    def data(self) -> pd.Series:",
    "annotation": "\ud83e\udde0 ML Signal: Slicing data, common pattern in data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1366,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 1393,
    "end_token": 1407,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      677,
      278,
      1366,
      11,
      2219,
      3912,
      287,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Slicing data, common pattern in data manipulation"
  },
  {
    "line": 230,
    "text": "    def start_index(self) -> Union[int, None]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): TypeError if 'i' is neither int nor slice",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      923,
      62,
      9630,
      7,
      944,
      8,
      4613,
      4479,
      58,
      600,
      11,
      6045,
      5974
    ],
    "start_token": 1407,
    "end_token": 1424,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      12331,
      611,
      705,
      72,
      6,
      318,
      6159,
      493,
      4249,
      16416
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "TypeError if 'i' is neither int nor slice"
  },
  {
    "line": 227,
    "text": "        return self._data[self.field]",
    "annotation": "\u2705 Best Practice: Use of __len__ method to define object length",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      7890,
      58,
      944,
      13,
      3245,
      60
    ],
    "start_token": 1424,
    "end_token": 1440,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      11925,
      834,
      2446,
      284,
      8160,
      2134,
      4129
    ],
    "label": "best_practice",
    "reason": "Use of __len__ method to define object length"
  },
  {
    "line": 229,
    "text": "    @property",
    "annotation": "\ud83e\udde0 ML Signal: Accessing an attribute of the object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 1440,
    "end_token": 1445,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      281,
      11688,
      286,
      262,
      2134
    ],
    "label": "ml_signal",
    "reason": "Accessing an attribute of the object"
  },
  {
    "line": 230,
    "text": "    def start_index(self) -> Union[int, None]:",
    "annotation": "\ud83e\udde0 ML Signal: Use of unittest framework for testing, indicating a pattern for automated testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      923,
      62,
      9630,
      7,
      944,
      8,
      4613,
      4479,
      58,
      600,
      11,
      6045,
      5974
    ],
    "start_token": 1445,
    "end_token": 1462,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      555,
      715,
      395,
      9355,
      329,
      4856,
      11,
      12739,
      257,
      3912,
      329,
      16359,
      4856
    ],
    "label": "ml_signal",
    "reason": "Use of unittest framework for testing, indicating a pattern for automated testing"
  },
  {
    "line": 248,
    "text": "                raise IndexError(f\"{i}: start index is {storage_start_index}\")",
    "annotation": "\u2705 Best Practice: Use of setUpClass for class-level setup in unit tests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      12901,
      12331,
      7,
      69,
      1,
      90,
      72,
      38362,
      923,
      6376,
      318,
      1391,
      35350,
      62,
      9688,
      62,
      9630,
      92,
      4943
    ],
    "start_token": 1462,
    "end_token": 1497,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      4933,
      9487,
      329,
      1398,
      12,
      5715,
      9058,
      287,
      4326,
      5254
    ],
    "label": "best_practice",
    "reason": "Use of setUpClass for class-level setup in unit tests"
  },
  {
    "line": 250,
    "text": "            return i, data",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded string values can indicate configuration or environment settings",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1312,
      11,
      1366
    ],
    "start_token": 1497,
    "end_token": 1512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4731,
      3815,
      460,
      7603,
      8398,
      393,
      2858,
      6460
    ],
    "label": "ml_signal",
    "reason": "Hardcoded string values can indicate configuration or environment settings"
  },
  {
    "line": 250,
    "text": "            return i, data",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of **kwargs can lead to unexpected arguments being passed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1312,
      11,
      1366
    ],
    "start_token": 1512,
    "end_token": 1527,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      12429,
      46265,
      22046,
      460,
      1085,
      284,
      10059,
      7159,
      852,
      3804
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of **kwargs can lead to unexpected arguments being passed"
  },
  {
    "line": 250,
    "text": "            return i, data",
    "annotation": "\u2705 Best Practice: Explicitly passing parameters to improve readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1312,
      11,
      1366
    ],
    "start_token": 1527,
    "end_token": 1542,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      6427,
      10007,
      284,
      2987,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly passing parameters to improve readability and maintainability"
  }
]
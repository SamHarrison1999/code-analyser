annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,7,best_practice,2,Importing specific functions or classes can improve code readability and maintainability.,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,10,best_practice,4,Importing specific functions or classes can improve code readability and maintainability.,,7,import threading,"[11748, 4704, 278]"
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,15,best_practice,6,Importing specific functions or classes can improve code readability and maintainability.,,10,from threading import Thread,"[6738, 4704, 278, 1330, 14122]"
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,15,best_practice,8,Importing specific functions or classes can improve code readability and maintainability.,,15,,[]
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,22,best_practice,10,Importing specific functions or classes can improve code readability and maintainability.,,15,"from joblib import Parallel, delayed","[6738, 1693, 8019, 1330, 42945, 11, 11038]"
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,28,best_practice,12,Importing specific functions or classes can improve code readability and maintainability.,,22,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,35,best_practice,14,Importing specific functions or classes can improve code readability and maintainability.,,28,"from queue import Empty, Queue","[6738, 16834, 1330, 33523, 11, 4670, 518]"
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,35,best_practice,16,Importing specific functions or classes can improve code readability and maintainability.,,35,,[]
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,35,best_practice,18,Importing specific functions or classes can improve code readability and maintainability.,,35,,[]
‚úÖ Best Practice: Importing specific functions or classes can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,42,best_practice,20,Importing specific functions or classes can improve code readability and maintainability.,,35,class ParallelExt(Parallel):,"[4871, 42945, 11627, 7, 10044, 29363, 2599]"
"‚úÖ Best Practice: Class docstring is missing, consider adding one for better documentation.","[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 318, 4814, 11, 2074, 4375, 530, 329, 1365, 10314, 13]",0.5,42,best_practice,13,"Class docstring is missing, consider adding one for better documentation.",,42,,[]
üß† ML Signal: Use of super() to call parent class constructor,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2208, 3419, 284, 869, 2560, 1398, 23772]",1.0,44,ml_signal,15,Use of super() to call parent class constructor,,42,import concurrent,"[11748, 24580]"
‚úÖ Best Practice: Check if the backend is an instance of a specific class,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 30203, 318, 281, 4554, 286, 257, 2176, 1398]",1.0,55,best_practice,17,Check if the backend is an instance of a specific class,,44,"from qlib.config import C, QlibConfig","[6738, 10662, 8019, 13, 11250, 1330, 327, 11, 1195, 8019, 16934]"
üß† ML Signal: Conditional logic based on version checking,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2196, 10627]",0.5,55,ml_signal,18,Conditional logic based on version checking,,55,,[]
‚úÖ Best Practice: Use of dictionary to store configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 284, 3650, 8398]",0.5,72,best_practice,21,Use of dictionary to store configuration,,55,"    def __init__(self, *args, **kwargs):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Use of dictionary to store configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 284, 3650, 8398]",0.5,96,best_practice,24,Use of dictionary to store configuration,,72,"        if isinstance(self._backend, MultiprocessingBackend):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 944, 13557, 1891, 437, 11, 7854, 541, 305, 919, 278, 7282, 437, 2599]"
‚úÖ Best Practice: Consider adding type hints for the `df` parameter for better code clarity and type checking.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 4600, 7568, 63, 11507, 329, 1365, 2438, 16287, 290, 2099, 10627, 13]",0.5,110,best_practice,44,Consider adding type hints for the `df` parameter for better code clarity and type checking.,,96,        apply_func for processing the data,"[220, 220, 220, 220, 220, 220, 220, 4174, 62, 20786, 329, 7587, 262, 1366]"
"‚úÖ Best Practice: Consider using more descriptive parameter names for `axis`, `level`, and `n_jobs` for better readability.","[26486, 227, 6705, 19939, 25, 12642, 1262, 517, 35644, 11507, 3891, 329, 4600, 22704, 47671, 4600, 5715, 47671, 290, 4600, 77, 62, 43863, 63, 329, 1365, 1100, 1799, 13]",0.5,132,best_practice,45,"Consider using more descriptive parameter names for `axis`, `level`, and `n_jobs` for better readability.",,110,"        if a string is given, then it is treated as naive pandas function","[220, 220, 220, 220, 220, 220, 220, 611, 257, 4731, 318, 1813, 11, 788, 340, 318, 5716, 355, 24354, 19798, 292, 2163]"
‚úÖ Best Practice: Use of docstring to describe the function and its parameters improves code maintainability and readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2163, 290, 663, 10007, 19575, 2438, 5529, 1799, 290, 1100, 1799, 13]",0.5,137,best_practice,46,Use of docstring to describe the function and its parameters improves code maintainability and readability.,,132,    axis :,"[220, 220, 220, 16488, 1058]"
"üß† ML Signal: The use of `apply_func` as a parameter indicates a higher-order function pattern, which is useful for ML models to learn about function composition.","[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 4600, 39014, 62, 20786, 63, 355, 257, 11507, 9217, 257, 2440, 12, 2875, 2163, 3912, 11, 543, 318, 4465, 329, 10373, 4981, 284, 2193, 546, 2163, 11742, 13]",0.5,152,ml_signal,47,"The use of `apply_func` as a parameter indicates a higher-order function pattern, which is useful for ML models to learn about function composition.",,137,        which axis is the datetime level located,"[220, 220, 220, 220, 220, 220, 220, 543, 16488, 318, 262, 4818, 8079, 1241, 5140]"
"‚ö†Ô∏è SAST Risk (Low): If `apply_func` is user-controlled, it could lead to code execution vulnerabilities. Ensure proper validation and sanitization.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1002, 4600, 39014, 62, 20786, 63, 318, 2836, 12, 14401, 11, 340, 714, 1085, 284, 2438, 9706, 23805, 13, 48987, 1774, 21201, 290, 5336, 270, 1634, 13]",0.5,157,sast_risk,48,"If `apply_func` is user-controlled, it could lead to code execution vulnerabilities. Ensure proper validation and sanitization.",Low,152,    level :,"[220, 220, 220, 1241, 1058]"
"‚úÖ Best Practice: Default values for parameters like `axis`, `level`, `resample_rule`, and `n_jobs` provide flexibility and ease of use.","[26486, 227, 6705, 19939, 25, 15161, 3815, 329, 10007, 588, 4600, 22704, 47671, 4600, 5715, 47671, 4600, 411, 1403, 62, 25135, 47671, 290, 4600, 77, 62, 43863, 63, 2148, 13688, 290, 10152, 286, 779, 13]",0.5,171,best_practice,49,"Default values for parameters like `axis`, `level`, `resample_rule`, and `n_jobs` provide flexibility and ease of use.",,157,        which level is the datetime level,"[220, 220, 220, 220, 220, 220, 220, 543, 1241, 318, 262, 4818, 8079, 1241]"
üß† ML Signal: Use of isinstance to check the type of apply_func,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 262, 2099, 286, 4174, 62, 20786]",1.0,193,ml_signal,45,Use of isinstance to check the type of apply_func,,171,"        if a string is given, then it is treated as naive pandas function","[220, 220, 220, 220, 220, 220, 220, 611, 257, 4731, 318, 1813, 11, 788, 340, 318, 5716, 355, 24354, 19798, 292, 2163]"
‚ö†Ô∏è SAST Risk (Low): getattr with user-controlled input could lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 651, 35226, 351, 2836, 12, 14401, 5128, 714, 1085, 284, 10059, 4069]",1.0,208,sast_risk,47,getattr with user-controlled input could lead to unexpected behavior,Low,193,        which axis is the datetime level located,"[220, 220, 220, 220, 220, 220, 220, 543, 16488, 318, 262, 4818, 8079, 1241, 5140]"
üß† ML Signal: Use of groupby and apply pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1448, 1525, 290, 4174, 3912]",0.5,222,ml_signal,49,Use of groupby and apply pattern,,208,        which level is the datetime level,"[220, 220, 220, 220, 220, 220, 220, 543, 1241, 318, 262, 4818, 8079, 1241]"
üß† ML Signal: Use of parallel processing with n_jobs,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10730, 7587, 351, 299, 62, 43863]",0.5,229,ml_signal,52,Use of parallel processing with n_jobs,,222,    n_jobs :,"[220, 220, 220, 299, 62, 43863, 1058]"
üß† ML Signal: Use of ParallelExt and delayed for parallel execution,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 42945, 11627, 290, 11038, 329, 10730, 9706]",1.0,236,ml_signal,52,Use of ParallelExt and delayed for parallel execution,,229,    n_jobs :,"[220, 220, 220, 299, 62, 43863, 1058]"
üß† ML Signal: Use of resample method on DataFrame,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 581, 1403, 2446, 319, 6060, 19778]",0.5,248,ml_signal,55,Use of resample method on DataFrame,,236,        pd.DataFrame,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778]"
‚úÖ Best Practice: Use of pd.concat to combine DataFrames,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 284, 12082, 6060, 35439]",1.0,252,best_practice,56,Use of pd.concat to combine DataFrames,,248,"    """"""","[220, 220, 220, 37227]"
"üß† ML Signal: Use of a special marker to indicate stopping, which can be a pattern for async operations","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2041, 18364, 284, 7603, 12225, 11, 543, 460, 307, 257, 3912, 329, 30351, 4560]",0.5,252,ml_signal,62,"Use of a special marker to indicate stopping, which can be a pattern for async operations",,252,,[]
‚úÖ Best Practice: Use of private attributes to encapsulate class internals,"[26486, 227, 6705, 19939, 25, 5765, 286, 2839, 12608, 284, 32652, 5039, 1398, 1788, 874]",0.5,273,best_practice,64,Use of private attributes to encapsulate class internals,,252,        dfs = ParallelExt(n_jobs=n_jobs)(,"[220, 220, 220, 220, 220, 220, 220, 288, 9501, 796, 42945, 11627, 7, 77, 62, 43863, 28, 77, 62, 43863, 5769]"
‚úÖ Best Practice: Use of private attributes to encapsulate class internals,"[26486, 227, 6705, 19939, 25, 5765, 286, 2839, 12608, 284, 32652, 5039, 1398, 1788, 874]",0.5,281,best_practice,66,Use of private attributes to encapsulate class internals,,273,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of private attributes to encapsulate class internals,"[26486, 227, 6705, 19939, 25, 5765, 286, 2839, 12608, 284, 32652, 5039, 1398, 1788, 874]",0.5,286,best_practice,68,Use of private attributes to encapsulate class internals,,281,    else:,"[220, 220, 220, 2073, 25]"
üß† ML Signal: Starting a thread in the constructor indicates asynchronous behavior,"[8582, 100, 254, 10373, 26484, 25, 17962, 257, 4704, 287, 262, 23772, 9217, 39354, 4069]",1.0,286,ml_signal,70,Starting a thread in the constructor indicates asynchronous behavior,,286,,[]
‚úÖ Best Practice: Method definition should have a docstring explaining its purpose.,"[26486, 227, 6705, 19939, 25, 11789, 6770, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 13]",0.5,291,best_practice,68,Method definition should have a docstring explaining its purpose.,,286,    else:,"[220, 220, 220, 2073, 25]"
"üß† ML Signal: Usage of a queue to signal stopping, which is a common pattern in concurrent programming.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 16834, 284, 6737, 12225, 11, 543, 318, 257, 2219, 3912, 287, 24580, 8300, 13]",0.5,291,ml_signal,70,"Usage of a queue to signal stopping, which is a common pattern in concurrent programming.",,291,,[]
‚úÖ Best Practice: Check if the main thread is alive to determine if the loop should continue.,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 1388, 4704, 318, 6776, 284, 5004, 611, 262, 9052, 815, 2555, 13]",1.0,295,best_practice,73,Check if the main thread is alive to determine if the loop should continue.,,291,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Usage of a queue to get data with a timeout.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 16834, 284, 651, 1366, 351, 257, 26827, 13]",1.0,318,ml_signal,76,Usage of a queue to get data with a timeout.,,295,"    Currently, it is used in MLflowRecorder to make functions like `log_params` async","[220, 220, 220, 16888, 11, 340, 318, 973, 287, 10373, 11125, 6690, 2875, 284, 787, 5499, 588, 4600, 6404, 62, 37266, 63, 30351]"
"‚úÖ Best Practice: Continue the loop if the queue is empty, allowing for non-blocking behavior.","[26486, 227, 6705, 19939, 25, 10054, 262, 9052, 611, 262, 16834, 318, 6565, 11, 5086, 329, 1729, 12, 41938, 4069, 13]",1.0,322,best_practice,80,"Continue the loop if the queue is empty, allowing for non-blocking behavior.",,318,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of a specific marker to determine when to stop processing.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 18364, 284, 5004, 618, 284, 2245, 7587, 13]",0.5,335,ml_signal,82,Use of a specific marker to determine when to stop processing.,,322,"    STOP_MARK = ""__STOP""","[220, 220, 220, 44934, 62, 44, 14175, 796, 366, 834, 2257, 3185, 1]"
‚ö†Ô∏è SAST Risk (Medium): Executing a callable object from a queue without validation can lead to code execution vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8393, 15129, 257, 869, 540, 2134, 422, 257, 16834, 1231, 21201, 460, 1085, 284, 2438, 9706, 23805, 13]",0.5,349,sast_risk,85,Executing a callable object from a queue without validation can lead to code execution vulnerabilities.,Medium,335,        self._q = Queue(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 80, 796, 4670, 518, 3419]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the __call__ method,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 11593, 13345, 834, 2446]",1.0,362,best_practice,82,Consider adding a docstring to describe the purpose and usage of the __call__ method,,349,"    STOP_MARK = ""__STOP""","[220, 220, 220, 44934, 62, 44, 14175, 796, 366, 834, 2257, 3185, 1]"
üß† ML Signal: Usage of partial function application,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 13027, 2163, 3586]",0.5,375,ml_signal,84,Usage of partial function application,,362,    def __init__(self) -> None:,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 8, 4613, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the function and arguments being passed do not lead to unintended execution or side effects,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 2163, 290, 7159, 852, 3804, 466, 407, 1085, 284, 30261, 9706, 393, 1735, 3048]",1.0,389,sast_risk,85,Ensure that the function and arguments being passed do not lead to unintended execution or side effects,Low,375,        self._q = Queue(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 80, 796, 4670, 518, 3419]"
üß† ML Signal: Method with a boolean parameter that alters behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 351, 257, 25131, 11507, 326, 40866, 4069]",0.5,403,ml_signal,85,Method with a boolean parameter that alters behavior,,389,        self._q = Queue(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 80, 796, 4670, 518, 3419]"
üß† ML Signal: Conditional logic based on method parameters,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2446, 10007]",1.0,422,ml_signal,87,Conditional logic based on method parameters,,403,        self._t = Thread(target=self.run),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 83, 796, 14122, 7, 16793, 28, 944, 13, 5143, 8]"
üß† ML Signal: Use of threading or concurrency,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4704, 278, 393, 1673, 13382]",1.0,422,ml_signal,89,Use of threading or concurrency,,422,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",1.0,422,best_practice,89,Consider adding a docstring to describe the purpose and usage of the function,,422,,[]
‚úÖ Best Practice: Use descriptive function names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 2163, 3891, 329, 1365, 1100, 1799]",1.0,430,best_practice,90,Use descriptive function names for better readability,,422,    def close(self):,"[220, 220, 220, 825, 1969, 7, 944, 2599]"
‚úÖ Best Practice: Use of isinstance to check if an object is callable,"[26486, 227, 6705, 19939, 25, 5765, 286, 318, 39098, 284, 2198, 611, 281, 2134, 318, 869, 540]",1.0,430,best_practice,92,Use of isinstance to check if an object is callable,,430,,[]
üß† ML Signal: Dynamic method invocation pattern,"[8582, 100, 254, 10373, 26484, 25, 26977, 2446, 43219, 3912]",1.0,438,ml_signal,93,Dynamic method invocation pattern,,430,    def run(self):,"[220, 220, 220, 825, 1057, 7, 944, 2599]"
üß† ML Signal: Fallback to default function execution,"[8582, 100, 254, 10373, 26484, 25, 7218, 1891, 284, 4277, 2163, 9706]",1.0,469,ml_signal,97,Fallback to default function execution,,438,            # So the child-threading should actively watch the status of main threading to stop itself.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1406, 262, 1200, 12, 16663, 278, 815, 10630, 2342, 262, 3722, 286, 1388, 4704, 278, 284, 2245, 2346, 13]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",1.0,485,best_practice,100,Include a docstring to describe the method's purpose,,469,                break,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2270]"
‚ö†Ô∏è SAST Risk (Low): Raising NotImplementedError without implementation can lead to runtime errors if not handled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 1231, 7822, 460, 1085, 284, 19124, 8563, 611, 407, 12118]",1.0,512,sast_risk,104,Raising NotImplementedError without implementation can lead to runtime errors if not handled,Low,485,                # NOTE: avoid deadlock. make checking main thread possible,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 3368, 2636, 5354, 13, 787, 10627, 1388, 4704, 1744]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",1.0,528,best_practice,105,Include a docstring to describe the method's purpose and parameters,,512,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
"üß† ML Signal: Method that sets an attribute, indicating a common pattern of state mutation","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5621, 281, 11688, 11, 12739, 257, 2219, 3912, 286, 1181, 15148]",0.5,528,ml_signal,112,"Method that sets an attribute, indicating a common pattern of state mutation",,528,,[]
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that this method should be overridden in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 428, 2446, 815, 307, 23170, 4651, 287, 850, 37724, 13]",1.0,538,best_practice,114,Raising NotImplementedError is a clear way to indicate that this method should be overridden in subclasses.,,528,        if close:,"[220, 220, 220, 220, 220, 220, 220, 611, 1969, 25]"
‚úÖ Best Practice: Inheriting from a base class promotes code reuse and consistency,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 257, 2779, 1398, 21068, 2438, 32349, 290, 15794]",0.5,553,best_practice,115,Inheriting from a base class promotes code reuse and consistency,,538,            self.close(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 19836, 3419]"
"üß† ML Signal: Constructor method, common pattern for class initialization","[8582, 100, 254, 10373, 26484, 25, 28407, 273, 2446, 11, 2219, 3912, 329, 1398, 37588]",0.5,553,ml_signal,117,"Constructor method, common pattern for class initialization",,553,,[]
‚úÖ Best Practice: Initialize instance variables in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772]",1.0,565,best_practice,119,Initialize instance variables in the constructor,,553,    def async_dec(ac_attr):,"[220, 220, 220, 825, 30351, 62, 12501, 7, 330, 62, 35226, 2599]"
‚úÖ Best Practice: Initialize instance variables in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772]",1.0,588,best_practice,121,Initialize instance variables in the constructor,,565,"            def wrapper(self, *args, **kwargs):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 825, 29908, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",1.0,600,best_practice,119,Method should have a docstring explaining its purpose,,588,    def async_dec(ac_attr):,"[220, 220, 220, 825, 30351, 62, 12501, 7, 330, 62, 35226, 2599]"
"üß† ML Signal: Accessing an instance variable, indicating a getter method pattern","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 281, 4554, 7885, 11, 12739, 257, 651, 353, 2446, 3912]",0.5,623,ml_signal,121,"Accessing an instance variable, indicating a getter method pattern",,600,"            def wrapper(self, *args, **kwargs):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 825, 29908, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose and return value,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 1441, 1988]",1.0,646,best_practice,121,Method should have a docstring explaining its purpose and return value,,623,"            def wrapper(self, *args, **kwargs):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 825, 29908, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Consider using a more descriptive attribute name than 'res',"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 11688, 1438, 621, 705, 411, 6]",0.5,686,best_practice,123,Consider using a more descriptive attribute name than 'res',,646,"                    return getattr(self, ac_attr)(func, self, *args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 651, 35226, 7, 944, 11, 936, 62, 35226, 5769, 20786, 11, 2116, 11, 1635, 22046, 11, 12429, 46265, 22046, 8]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 8748, 13]",1.0,726,best_practice,123,Class docstring provides a clear description of the class purpose and usage.,,686,"                    return getattr(self, ac_attr)(func, self, *args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 651, 35226, 7, 944, 11, 936, 62, 35226, 5769, 20786, 11, 2116, 11, 1635, 22046, 11, 12429, 46265, 22046, 8]"
üß† ML Signal: Initialization of instance variables,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633]",0.5,734,ml_signal,133,Initialization of instance variables,,726,# The code are for implementing following workflow,"[2, 383, 2438, 389, 329, 15427, 1708, 30798]"
üß† ML Signal: Initialization of instance variables,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633]",0.5,773,ml_signal,135,Initialization of instance variables,,734,"#      - For example,  {""job"": [<delayed_joblib_task>,  {""1"": <delayed_joblib_task>}]}","[2, 220, 220, 220, 220, 220, 532, 1114, 1672, 11, 220, 19779, 21858, 1298, 685, 27, 12381, 16548, 62, 21858, 8019, 62, 35943, 22330, 220, 19779, 16, 1298, 1279, 12381, 16548, 62, 21858, 8019, 62, 35943, 29, 92, 48999]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",1.0,812,best_practice,135,Method should have a docstring explaining its purpose,,773,"#      - For example,  {""job"": [<delayed_joblib_task>,  {""1"": <delayed_joblib_task>}]}","[2, 220, 220, 220, 220, 220, 532, 1114, 1672, 11, 220, 19779, 21858, 1298, 685, 27, 12381, 16548, 62, 21858, 8019, 62, 35943, 22330, 220, 19779, 16, 1298, 1279, 12381, 16548, 62, 21858, 8019, 62, 35943, 29, 92, 48999]"
‚úÖ Best Practice: Use of 'self' indicates this is an instance method,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 944, 6, 9217, 428, 318, 281, 4554, 2446]",0.5,812,best_practice,137,Use of 'self' indicates this is an instance method,,812,,[]
‚úÖ Best Practice: Use of zip to combine two lists into a dictionary is efficient and readable,"[26486, 227, 6705, 19939, 25, 5765, 286, 19974, 284, 12082, 734, 8341, 656, 257, 22155, 318, 6942, 290, 31744]",1.0,812,best_practice,137,Use of zip to combine two lists into a dictionary is efficient and readable,,812,,[]
"üß† ML Signal: Method returns a dictionary created from two lists, indicating a pattern of data transformation","[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 257, 22155, 2727, 422, 734, 8341, 11, 12739, 257, 3912, 286, 1366, 13389]",0.5,812,ml_signal,139,"Method returns a dictionary created from two lists, indicating a pattern of data transformation",,812,,[]
‚úÖ Best Practice: Use of isinstance for type checking is a good practice for readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 318, 39098, 329, 2099, 10627, 318, 257, 922, 3357, 329, 1100, 1799, 290, 5529, 1799, 13]",1.0,824,best_practice,149,Use of isinstance for type checking is a good practice for readability and maintainability.,,812,"        """"""set_res.","[220, 220, 220, 220, 220, 220, 220, 37227, 2617, 62, 411, 13]"
‚úÖ Best Practice: Checking the length of the tuple ensures the expected structure.,"[26486, 227, 6705, 19939, 25, 39432, 262, 4129, 286, 262, 46545, 19047, 262, 2938, 4645, 13]",1.0,832,best_practice,151,Checking the length of the tuple ensures the expected structure.,,824,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Using callable to check if the first element is a function enhances code reliability.,"[26486, 227, 6705, 19939, 25, 8554, 869, 540, 284, 2198, 611, 262, 717, 5002, 318, 257, 2163, 32479, 2438, 17843, 13]",0.5,840,best_practice,151,Using callable to check if the first element is a function enhances code reliability.,,832,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Medium): Potential infinite loop if complex_iter contains circular references.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 15541, 9052, 611, 3716, 62, 2676, 4909, 18620, 10288, 13]",1.0,851,sast_risk,158,Potential infinite loop if complex_iter contains circular references.,Medium,840,    def get_replacement(self):,"[220, 220, 220, 825, 651, 62, 35666, 5592, 7, 944, 2599]"
üß† ML Signal: Usage of custom type checking with is_delayed_tuple function.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 2099, 10627, 351, 318, 62, 12381, 16548, 62, 83, 29291, 2163, 13]",0.5,851,ml_signal,162,Usage of custom type checking with is_delayed_tuple function.,,851,,[]
üß† ML Signal: Recursive function call pattern.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 13]",1.0,851,ml_signal,170,Recursive function call pattern.,,851,,[]
üß† ML Signal: Recursive function call pattern.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 13]",1.0,858,ml_signal,179,Recursive function call pattern.,,851,    - constructing a dict,"[220, 220, 220, 532, 30580, 257, 8633]"
‚úÖ Best Practice: Add type hints for function parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,878,best_practice,182,Add type hints for function parameters and return type for better readability and maintainability,,858,        - AND ALL the values are calculated in a SINGLE function,"[220, 220, 220, 220, 220, 220, 220, 532, 5357, 11096, 262, 3815, 389, 10488, 287, 257, 311, 2751, 2538, 2163]"
‚ö†Ô∏è SAST Risk (Medium): Potential infinite loop if complex_iter contains circular references,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 15541, 9052, 611, 3716, 62, 2676, 4909, 18620, 10288]",1.0,889,sast_risk,192,Potential infinite loop if complex_iter contains circular references,Medium,878,    def get_replacement(self):,"[220, 220, 220, 825, 651, 62, 35666, 5592, 7, 944, 2599]"
üß† ML Signal: Usage of custom class method get_replacement,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 1398, 2446, 651, 62, 35666, 5592]",0.5,889,ml_signal,194,Usage of custom class method get_replacement,,889,,[]
üß† ML Signal: Recursive function pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3912]",0.5,903,ml_signal,196,Recursive function pattern,,889,def is_delayed_tuple(obj) -> bool:,"[4299, 318, 62, 12381, 16548, 62, 83, 29291, 7, 26801, 8, 4613, 20512, 25]"
üß† ML Signal: Recursive function pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3912]",0.5,908,ml_signal,200,Recursive function pattern,,903,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Descriptive function name _replace_and_get_dt suggests its purpose,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 2163, 1438, 4808, 33491, 62, 392, 62, 1136, 62, 28664, 5644, 663, 4007]",0.5,913,best_practice,217,Descriptive function name _replace_and_get_dt suggests its purpose,,908,    ----------,"[220, 220, 220, 24200, 438]"
üß† ML Signal: Usage of parallel processing with joblib's Parallel,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10730, 7587, 351, 1693, 8019, 338, 42945]",1.0,923,ml_signal,219,Usage of parallel processing with joblib's Parallel,,913,        complex_iter,"[220, 220, 220, 220, 220, 220, 220, 3716, 62, 2676]"
‚úÖ Best Practice: Descriptive method name set_res suggests its purpose,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 2446, 1438, 900, 62, 411, 5644, 663, 4007]",0.5,938,best_practice,221,Descriptive method name set_res suggests its purpose,,923,"    if isinstance(complex_iter, DelayedTask):","[220, 220, 220, 611, 318, 39098, 7, 41887, 62, 2676, 11, 4216, 16548, 25714, 2599]"
‚úÖ Best Practice: Descriptive function name _recover_dt suggests its purpose,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 2163, 1438, 4808, 260, 9631, 62, 28664, 5644, 663, 4007]",0.5,952,best_practice,223,Descriptive function name _recover_dt suggests its purpose,,938,"        return dt, [dt]","[220, 220, 220, 220, 220, 220, 220, 1441, 288, 83, 11, 685, 28664, 60]"
‚úÖ Best Practice: Docstring provides a clear explanation of the class purpose and implementation details,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 1398, 4007, 290, 7822, 3307]",0.5,965,best_practice,229,Docstring provides a clear explanation of the class purpose and implementation details,,952,        dt_all = [],"[220, 220, 220, 220, 220, 220, 220, 288, 83, 62, 439, 796, 17635]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,978,best_practice,229,Use of type hints for function parameters improves code readability and maintainability,,965,        dt_all = [],"[220, 220, 220, 220, 220, 220, 220, 288, 83, 62, 439, 796, 17635]"
üß† ML Signal: Storing function references in objects can indicate patterns of dynamic behavior,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2163, 10288, 287, 5563, 460, 7603, 7572, 286, 8925, 4069]",1.0,994,ml_signal,242,Storing function references in objects can indicate patterns of dynamic behavior,,978,"        return new_ci, dt_all","[220, 220, 220, 220, 220, 220, 220, 1441, 649, 62, 979, 11, 288, 83, 62, 439]"
üß† ML Signal: Optional configuration objects can indicate patterns of flexible or customizable behavior,"[8582, 100, 254, 10373, 26484, 25, 32233, 8398, 5563, 460, 7603, 7572, 286, 12846, 393, 38322, 4069]",1.0,1007,ml_signal,244,Optional configuration objects can indicate patterns of flexible or customizable behavior,,994,"        return complex_iter, []","[220, 220, 220, 220, 220, 220, 220, 1441, 3716, 62, 2676, 11, 17635]"
‚úÖ Best Practice: Use of docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",1.0,1012,best_practice,243,Use of docstring to describe the function's purpose,,1007,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Check if qlib_config is not None before using it,"[26486, 227, 6705, 19939, 25, 6822, 611, 10662, 8019, 62, 11250, 318, 407, 6045, 878, 1262, 340]",1.0,1012,best_practice,246,Check if qlib_config is not None before using it,,1012,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if qlib_config contains untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 10662, 8019, 62, 11250, 4909, 1418, 81, 8459, 1366]",0.5,1022,sast_risk,248,Potential risk if qlib_config contains untrusted data,Low,1012,"    """"""_recover_dt.","[220, 220, 220, 37227, 62, 260, 9631, 62, 28664, 13]"
üß† ML Signal: Pattern of modifying a function's behavior with additional initialization,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30620, 257, 2163, 338, 4069, 351, 3224, 37588]",0.5,1045,ml_signal,250,Pattern of modifying a function's behavior with additional initialization,,1022,    replace all the DelayedTask in the `complex_iter` with its `.res` value,"[220, 220, 220, 6330, 477, 262, 4216, 16548, 25714, 287, 262, 4600, 41887, 62, 2676, 63, 351, 663, 4600, 13, 411, 63, 1988]"
‚úÖ Best Practice: Use of __call__ method to make instances callable,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 13345, 834, 2446, 284, 787, 10245, 869, 540]",0.5,1055,best_practice,248,Use of __call__ method to make instances callable,,1045,"    """"""_recover_dt.","[220, 220, 220, 37227, 62, 260, 9631, 62, 28664, 13]"
‚úÖ Best Practice: Use of ProcessPoolExecutor for parallel execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 10854, 27201, 23002, 38409, 329, 10730, 9706]",1.0,1078,best_practice,250,Use of ProcessPoolExecutor for parallel execution,,1055,    replace all the DelayedTask in the `complex_iter` with its `.res` value,"[220, 220, 220, 6330, 477, 262, 4216, 16548, 25714, 287, 262, 4600, 41887, 62, 2676, 63, 351, 663, 4600, 13, 411, 63, 1988]"
‚ö†Ô∏è SAST Risk (Medium): Potential deadlock if self._func_mod is blocking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2636, 5354, 611, 2116, 13557, 20786, 62, 4666, 318, 12013]",1.0,1101,sast_risk,250,Potential deadlock if self._func_mod is blocking,Medium,1078,    replace all the DelayedTask in the `complex_iter` with its `.res` value,"[220, 220, 220, 6330, 477, 262, 4216, 16548, 25714, 287, 262, 4600, 41887, 62, 2676, 63, 351, 663, 4600, 13, 411, 63, 1988]"
üß† ML Signal: Use of ProcessPoolExecutor for parallel processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10854, 27201, 23002, 38409, 329, 10730, 7587]",0.5,1124,ml_signal,250,Use of ProcessPoolExecutor for parallel processing,,1101,    replace all the DelayedTask in the `complex_iter` with its `.res` value,"[220, 220, 220, 6330, 477, 262, 4216, 16548, 25714, 287, 262, 4600, 41887, 62, 2676, 63, 351, 663, 4600, 13, 411, 63, 1988]"

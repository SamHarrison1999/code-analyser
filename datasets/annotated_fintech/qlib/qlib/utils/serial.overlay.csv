annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
⚠️ SAST Risk (Medium): Importing 'dill' can lead to security risks if used to deserialize untrusted data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 17267, 278, 705, 67, 359, 6, 460, 1085, 284, 2324, 7476, 611, 973, 284, 748, 48499, 1096, 1418, 81, 8459, 1366, 13]",0.5,0,sast_risk,3,Importing 'dill' can lead to security risks if used to deserialize untrusted data.,Medium,0,,[]
⚠️ SAST Risk (Low): Relative imports can lead to potential issues in module resolution.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45344, 17944, 460, 1085, 284, 2785, 2428, 287, 8265, 6323, 13]",0.5,5,sast_risk,6,Relative imports can lead to potential issues in module resolution.,Low,0,from pathlib import Path,"[6738, 3108, 8019, 1330, 10644]"
⚠️ SAST Risk (Medium): Deserializing data from untrusted sources can lead to arbitrary code execution.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 2935, 48499, 2890, 1366, 422, 1418, 81, 8459, 4237, 460, 1085, 284, 14977, 2438, 9706, 13]",0.5,9,sast_risk,7,Deserializing data from untrusted sources can lead to arbitrary code execution.,Medium,5,from typing import Union,"[6738, 19720, 1330, 4479]"
✅ Best Practice: Use 'Path' for file path operations for better cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 705, 15235, 6, 329, 2393, 3108, 4560, 329, 1365, 3272, 12, 24254, 17764, 13]",0.5,13,best_practice,7,Use 'Path' for file path operations for better cross-platform compatibility.,,9,from typing import Union,"[6738, 19720, 1330, 4479]"
✅ Best Practice: Check if the file exists before attempting to open it.,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2393, 7160, 878, 9361, 284, 1280, 340, 13]",0.5,17,best_practice,7,Check if the file exists before attempting to open it.,,13,from typing import Union,"[6738, 19720, 1330, 4479]"
✅ Best Practice: Use 'with' statement for file operations to ensure proper resource management.,"[26486, 227, 6705, 19939, 25, 5765, 705, 4480, 6, 2643, 329, 2393, 4560, 284, 4155, 1774, 8271, 4542, 13]",0.5,33,best_practice,19,Use 'with' statement for file operations to ensure proper resource management.,,17,        - in the exclude attribute list -> always dropped,"[220, 220, 220, 220, 220, 220, 220, 532, 287, 262, 19607, 11688, 1351, 4613, 1464, 5710]"
⚠️ SAST Risk (Medium): Using 'dill' for deserialization can execute arbitrary code if the input is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 705, 67, 359, 6, 329, 748, 48499, 1634, 460, 12260, 14977, 2438, 611, 262, 5128, 318, 1418, 81, 8459, 13]",1.0,50,sast_risk,20,Using 'dill' for deserialization can execute arbitrary code if the input is untrusted.,Medium,33,        - name not starts with `_` -> kept,"[220, 220, 220, 220, 220, 220, 220, 532, 1438, 407, 4940, 351, 4600, 62, 63, 4613, 4030]"
⚠️ SAST Risk (Medium): Using 'pickle' for deserialization can execute arbitrary code if the input is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 705, 27729, 293, 6, 329, 748, 48499, 1634, 460, 12260, 14977, 2438, 611, 262, 5128, 318, 1418, 81, 8459, 13]",1.0,69,sast_risk,23,Using 'pickle' for deserialization can execute arbitrary code if the input is untrusted.,Medium,50,    It provides a syntactic sugar for distinguish the attributes which user doesn't want.,"[220, 220, 220, 632, 3769, 257, 7419, 12009, 7543, 329, 15714, 262, 12608, 543, 2836, 1595, 470, 765, 13]"
"🧠 ML Signal: Function to load serialized objects, indicating usage patterns for data persistence.","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 3440, 11389, 1143, 5563, 11, 12739, 8748, 7572, 329, 1366, 30802, 13]",0.5,69,ml_signal,26,"Function to load serialized objects, indicating usage patterns for data persistence.",,69,,[]
✅ Best Practice: Use 'Path' for file path operations for better cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 705, 15235, 6, 329, 2393, 3108, 4560, 329, 1365, 3272, 12, 24254, 17764, 13]",0.5,85,best_practice,28,Use 'Path' for file path operations for better cross-platform compatibility.,,69,    default_dump_all = False  # if dump all things,"[220, 220, 220, 4277, 62, 39455, 62, 439, 796, 10352, 220, 1303, 611, 10285, 477, 1243]"
✅ Best Practice: Use 'with' statement for file operations to ensure proper resource management.,"[26486, 227, 6705, 19939, 25, 5765, 705, 4480, 6, 2643, 329, 2393, 4560, 284, 4155, 1774, 8271, 4542, 13]",0.5,107,best_practice,31,Use 'with' statement for file operations to ensure proper resource management.,,85,    include_attr = []  # include_attr have lower priorities then `self._include`,"[220, 220, 220, 2291, 62, 35226, 796, 17635, 220, 1303, 2291, 62, 35226, 423, 2793, 15369, 788, 4600, 944, 13557, 17256, 63]"
🧠 ML Signal: Choice of serialization library (dill) for saving objects.,"[8582, 100, 254, 10373, 26484, 25, 18502, 286, 11389, 1634, 5888, 357, 67, 359, 8, 329, 8914, 5563, 13]",0.5,117,ml_signal,34,Choice of serialization library (dill) for saving objects.,,107,    def __init__(self):,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 2599]"
🧠 ML Signal: Choice of serialization library (pickle) for saving objects.,"[8582, 100, 254, 10373, 26484, 25, 18502, 286, 11389, 1634, 5888, 357, 27729, 293, 8, 329, 8914, 5563, 13]",0.5,117,ml_signal,37,Choice of serialization library (pickle) for saving objects.,,117,,[]
✅ Best Practice: Use of class variables for default settings and configurations,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4277, 6460, 290, 25412]",1.0,133,best_practice,19,Use of class variables for default settings and configurations,,117,        - in the exclude attribute list -> always dropped,"[220, 220, 220, 220, 220, 220, 220, 532, 287, 262, 19607, 11688, 1351, 4613, 1464, 5710]"
✅ Best Practice: Use of class variables for default settings and configurations,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4277, 6460, 290, 25412]",1.0,159,best_practice,21,Use of class variables for default settings and configurations,,133,        - name starts with `_` -> kept if `dump_all` is true else dropped,"[220, 220, 220, 220, 220, 220, 220, 532, 1438, 4940, 351, 4600, 62, 63, 4613, 4030, 611, 4600, 39455, 62, 439, 63, 318, 2081, 2073, 5710]"
✅ Best Practice: Use of class variables for default settings and configurations,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4277, 6460, 290, 25412]",1.0,178,best_practice,23,Use of class variables for default settings and configurations,,159,    It provides a syntactic sugar for distinguish the attributes which user doesn't want.,"[220, 220, 220, 632, 3769, 257, 7419, 12009, 7543, 329, 15714, 262, 12608, 543, 2836, 1595, 470, 765, 13]"
✅ Best Practice: Use of class variables for default settings and configurations,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4277, 6460, 290, 25412]",1.0,182,best_practice,25,Use of class variables for default settings and configurations,,178,"    """"""","[220, 220, 220, 37227]"
✅ Best Practice: Use of class variables for default settings and configurations,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4277, 6460, 290, 25412]",1.0,214,best_practice,27,Use of class variables for default settings and configurations,,182,"    pickle_backend = ""pickle""  # another optional value is ""dill"" which can pickle more things of python.","[220, 220, 220, 2298, 293, 62, 1891, 437, 796, 366, 27729, 293, 1, 220, 1303, 1194, 11902, 1988, 318, 366, 67, 359, 1, 543, 460, 2298, 293, 517, 1243, 286, 21015, 13]"
✅ Best Practice: Use of class variables for default settings and configurations,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 9633, 329, 4277, 6460, 290, 25412]",1.0,229,best_practice,29,Use of class variables for default settings and configurations,,214,"    config_attr = [""_include"", ""_exclude""]","[220, 220, 220, 4566, 62, 35226, 796, 14631, 62, 17256, 1600, 45434, 1069, 9152, 8973]"
✅ Best Practice: Initialize instance variables in the constructor for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799, 13]",1.0,229,best_practice,26,Initialize instance variables in the constructor for clarity and maintainability.,,229,,[]
✅ Best Practice: Use of a leading underscore in variable names indicates intended private access.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3756, 44810, 287, 7885, 3891, 9217, 5292, 2839, 1895, 13]",0.5,245,best_practice,28,Use of a leading underscore in variable names indicates intended private access.,,229,    default_dump_all = False  # if dump all things,"[220, 220, 220, 4277, 62, 39455, 62, 439, 796, 10352, 220, 1303, 611, 10285, 477, 1243]"
"🧠 ML Signal: Method checks membership in lists, indicating filtering logic","[8582, 100, 254, 10373, 26484, 25, 11789, 8794, 9931, 287, 8341, 11, 12739, 25431, 9156]",0.5,260,ml_signal,29,"Method checks membership in lists, indicating filtering logic",,245,"    config_attr = [""_include"", ""_exclude""]","[220, 220, 220, 4566, 62, 35226, 796, 14631, 62, 17256, 1600, 45434, 1069, 9152, 8973]"
"🧠 ML Signal: Checks for inclusion in a list, indicating a whitelist pattern","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 14900, 287, 257, 1351, 11, 12739, 257, 20542, 46331, 3912]",0.5,276,ml_signal,32,"Checks for inclusion in a list, indicating a whitelist pattern",,260,"    FLAG_KEY = ""_qlib_serial_flag""","[220, 220, 220, 9977, 4760, 62, 20373, 796, 45434, 80, 8019, 62, 46911, 62, 32109, 1]"
"🧠 ML Signal: Checks for exclusion in a list, indicating a blacklist pattern","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 19328, 287, 257, 1351, 11, 12739, 257, 38810, 3912]",0.5,296,ml_signal,35,"Checks for exclusion in a list, indicating a blacklist pattern",,276,        self._dump_all = self.default_dump_all,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 39455, 62, 439, 796, 2116, 13, 12286, 62, 39455, 62, 439]"
🧠 ML Signal: Uses a flag and string method to determine behavior,"[8582, 100, 254, 10373, 26484, 25, 36965, 257, 6056, 290, 4731, 2446, 284, 5004, 4069]",0.5,309,ml_signal,38,Uses a flag and string method to determine behavior,,296,"    def _is_kept(self, key):","[220, 220, 220, 825, 4808, 271, 62, 45089, 7, 944, 11, 1994, 2599]"
✅ Best Practice: Use of dictionary comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 35915, 329, 35327, 290, 31744, 2438]",1.0,336,best_practice,36,Use of dictionary comprehension for concise and readable code,,309,        self._exclude = None  # this attribute have higher priorities than `exclude_attr`,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 1069, 9152, 796, 6045, 220, 1303, 428, 11688, 423, 2440, 15369, 621, 4600, 1069, 9152, 62, 35226, 63]"
🧠 ML Signal: Custom serialization logic for object state,"[8582, 100, 254, 10373, 26484, 25, 8562, 11389, 1634, 9156, 329, 2134, 1181]",1.0,349,ml_signal,38,Custom serialization logic for object state,,336,"    def _is_kept(self, key):","[220, 220, 220, 825, 4808, 271, 62, 45089, 7, 944, 11, 1994, 2599]"
✅ Best Practice: Filtering dictionary items using a method for clarity and encapsulation,"[26486, 227, 6705, 19939, 25, 7066, 20212, 22155, 3709, 1262, 257, 2446, 329, 16287, 290, 32652, 1741]",0.5,365,best_practice,39,Filtering dictionary items using a method for clarity and encapsulation,,349,        if key in self.config_attr:,"[220, 220, 220, 220, 220, 220, 220, 611, 1994, 287, 2116, 13, 11250, 62, 35226, 25]"
⚠️ SAST Risk (Medium): Directly updating the object's __dict__ can lead to security issues if the state contains malicious data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 19698, 262, 2134, 338, 11593, 11600, 834, 460, 1085, 284, 2324, 2428, 611, 262, 1181, 4909, 17412, 1366, 13]",1.0,378,sast_risk,38,Directly updating the object's __dict__ can lead to security issues if the state contains malicious data.,Medium,365,"    def _is_kept(self, key):","[220, 220, 220, 825, 4808, 271, 62, 45089, 7, 944, 11, 1994, 2599]"
⚠️ SAST Risk (Medium): Updating the object's __dict__ without validation can lead to unexpected behavior or security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 3205, 38734, 262, 2134, 338, 11593, 11600, 834, 1231, 21201, 460, 1085, 284, 10059, 4069, 393, 2324, 2428, 13]",0.5,394,sast_risk,39,Updating the object's __dict__ without validation can lead to unexpected behavior or security issues.,Medium,378,        if key in self.config_attr:,"[220, 220, 220, 220, 220, 220, 220, 611, 1994, 287, 2116, 13, 11250, 62, 35226, 25]"
✅ Best Practice: Add a docstring that clearly describes the method's purpose and behavior,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 326, 4084, 8477, 262, 2446, 338, 4007, 290, 4069]",1.0,407,best_practice,42,Add a docstring that clearly describes the method's purpose and behavior,,394,            return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
✅ Best Practice: Consider renaming the method to better reflect its functionality,"[26486, 227, 6705, 19939, 25, 12642, 8851, 3723, 262, 2446, 284, 1365, 4079, 663, 11244]",1.0,407,best_practice,46,Consider renaming the method to better reflect its functionality,,407,,[]
🧠 ML Signal: Usage of getattr to access object attributes dynamically,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 651, 35226, 284, 1895, 2134, 12608, 32366]",1.0,421,ml_signal,47,Usage of getattr to access object attributes dynamically,,407,    def __getstate__(self) -> dict:,"[220, 220, 220, 825, 11593, 1136, 5219, 834, 7, 944, 8, 4613, 8633, 25]"
"⚠️ SAST Risk (Low): Potential for attribute access issues if ""_dump_all"" is not defined","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11688, 1895, 2428, 611, 45434, 39455, 62, 439, 1, 318, 407, 5447]",0.5,435,sast_risk,47,"Potential for attribute access issues if ""_dump_all"" is not defined",Low,421,    def __getstate__(self) -> dict:,"[220, 220, 220, 825, 11593, 1136, 5219, 834, 7, 944, 8, 4613, 8633, 25]"
✅ Best Practice: Docstring provides a clear description of parameters and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 10007, 290, 1441, 2099]",1.0,449,best_practice,47,Docstring provides a clear description of parameters and return type,,435,    def __getstate__(self) -> dict:,"[220, 220, 220, 825, 11593, 1136, 5219, 834, 7, 944, 8, 4613, 8633, 25]"
✅ Best Practice: Using hasattr to check for attribute existence before accessing it,"[26486, 227, 6705, 19939, 25, 8554, 468, 35226, 284, 2198, 329, 11688, 6224, 878, 22534, 340]",1.0,469,best_practice,58,Using hasattr to check for attribute existence before accessing it,,449,"        return getattr(self, ""_dump_all"", False)","[220, 220, 220, 220, 220, 220, 220, 1441, 651, 35226, 7, 944, 11, 45434, 39455, 62, 439, 1600, 10352, 8]"
🧠 ML Signal: Dynamic attribute access pattern using getattr,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 3912, 1262, 651, 35226]",1.0,492,ml_signal,60,Dynamic attribute access pattern using getattr,,469,"    def _get_attr_list(self, attr_type: str) -> list:","[220, 220, 220, 825, 4808, 1136, 62, 35226, 62, 4868, 7, 944, 11, 708, 81, 62, 4906, 25, 965, 8, 4613, 1351, 25]"
🧠 ML Signal: Fallback to class-level attribute if instance-level attribute is not found,"[8582, 100, 254, 10373, 26484, 25, 7218, 1891, 284, 1398, 12, 5715, 11688, 611, 4554, 12, 5715, 11688, 318, 407, 1043]",0.5,492,ml_signal,63,Fallback to class-level attribute if instance-level attribute is not found,,492,,[]
✅ Best Practice: Returning an empty list instead of None for consistency,"[26486, 227, 6705, 19939, 25, 42882, 281, 6565, 1351, 2427, 286, 6045, 329, 15794]",1.0,501,best_practice,65,Returning an empty list instead of None for consistency,,492,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
⚠️ SAST Risk (Low): Raising a KeyError with user-provided input can expose internal logic.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 7383, 12331, 351, 2836, 12, 41279, 5128, 460, 15651, 5387, 9156, 13]",1.0,509,sast_risk,85,Raising a KeyError with user-provided input can expose internal logic.,Low,501,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
⚠️ SAST Risk (Low): Modifying self.__dict__ directly can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 2116, 13, 834, 11600, 834, 3264, 460, 1085, 284, 10059, 4069, 13]",1.0,525,sast_risk,89,Modifying self.__dict__ directly can lead to unexpected behavior.,Low,509,            dump_all : bool,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10285, 62, 439, 1058, 20512]"
"🧠 ML Signal: Checks for instance type, indicating polymorphic behavior.","[8582, 100, 254, 10373, 26484, 25, 47719, 329, 4554, 2099, 11, 12739, 34196, 291, 4069, 13]",0.5,539,ml_signal,91,"Checks for instance type, indicating polymorphic behavior.",,525,            exclude : list,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19607, 1058, 1351]"
🧠 ML Signal: Recursive function call pattern.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 13]",0.5,553,ml_signal,93,Recursive function call pattern.,,539,            include : list,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2291, 1058, 1351]"
⚠️ SAST Risk (Low): Directly deleting from self.__dict__ can lead to errors if FLAG_KEY is not present.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 34817, 422, 2116, 13, 834, 11600, 834, 460, 1085, 284, 8563, 611, 9977, 4760, 62, 20373, 318, 407, 1944, 13]",1.0,567,sast_risk,93,Directly deleting from self.__dict__ can lead to errors if FLAG_KEY is not present.,Low,553,            include : list,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2291, 1058, 1351]"
✅ Best Practice: Configuring the object with kwargs allows for flexible behavior.,"[26486, 227, 6705, 19939, 25, 17056, 870, 262, 2134, 351, 479, 86, 22046, 3578, 329, 12846, 4069, 13]",1.0,580,best_practice,104,Configuring the object with kwargs allows for flexible behavior.,,567,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Medium): Using pickle can lead to arbitrary code execution if loading untrusted data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 2298, 293, 460, 1085, 284, 14977, 2438, 9706, 611, 11046, 1418, 81, 8459, 1366, 13]",1.0,580,sast_risk,106,Using pickle can lead to arbitrary code execution if loading untrusted data.,Medium,580,,[]
🧠 ML Signal: Usage of a backend to handle serialization.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 30203, 284, 5412, 11389, 1634, 13]",0.5,602,ml_signal,108,Usage of a backend to handle serialization.,,580,            for obj in self.__dict__.values():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 26181, 287, 2116, 13, 834, 11600, 834, 13, 27160, 33529]"
⚠️ SAST Risk (Medium): Ensure the backend's dump method is secure and does not introduce vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 262, 30203, 338, 10285, 2446, 318, 5713, 290, 857, 407, 10400, 23805, 13]",0.5,624,sast_risk,109,Ensure the backend's dump method is secure and does not introduce vulnerabilities.,Medium,602,                # set flag to prevent endless loop,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 900, 6056, 284, 2948, 13079, 9052]"
✅ Best Practice: Use 'with' statement for file operations to ensure proper resource management,"[26486, 227, 6705, 19939, 25, 5765, 705, 4480, 6, 2643, 329, 2393, 4560, 284, 4155, 1774, 8271, 4542]",1.0,624,best_practice,118,Use 'with' statement for file operations to ensure proper resource management,,624,,[]
🧠 ML Signal: Usage of a custom backend for loading objects,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 30203, 329, 11046, 5563]",1.0,624,ml_signal,120,Usage of a custom backend for loading objects,,624,,[]
✅ Best Practice: Check type of object before returning to ensure correct usage,"[26486, 227, 6705, 19939, 25, 6822, 2099, 286, 2134, 878, 8024, 284, 4155, 3376, 8748]",0.5,638,best_practice,121,Check type of object before returning to ensure correct usage,,624,        kwargs may include following keys,"[220, 220, 220, 220, 220, 220, 220, 479, 86, 22046, 743, 2291, 1708, 8251]"
⚠️ SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",1.0,659,sast_risk,126,Potential information disclosure in error message,Low,638,                What attribute will not be dumped,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1867, 11688, 481, 407, 307, 24105]"
✅ Best Practice: Use @classmethod decorator for methods that operate on the class itself,"[26486, 227, 6705, 19939, 25, 5765, 2488, 4871, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 262, 1398, 2346]",1.0,680,best_practice,126,Use @classmethod decorator for methods that operate on the class itself,,659,                What attribute will not be dumped,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1867, 11688, 481, 407, 307, 24105]"
⚠️ SAST Risk (Medium): Potential for code injection if cls.pickle_backend is manipulated externally,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 2438, 16954, 611, 537, 82, 13, 27729, 293, 62, 1891, 437, 318, 25036, 45107]",0.5,699,sast_risk,131,Potential for code injection if cls.pickle_backend is manipulated externally,Medium,680,"        with Path(path).open(""wb"") as f:","[220, 220, 220, 220, 220, 220, 220, 351, 10644, 7, 6978, 737, 9654, 7203, 39346, 4943, 355, 277, 25]"
🧠 ML Signal: Usage of conditional logic to select a module,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 9156, 284, 2922, 257, 8265]",0.5,734,ml_signal,133,Usage of conditional logic to select a module,,699,"            self.get_backend().dump(self, f, protocol=C.dump_protocol_version)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1136, 62, 1891, 437, 22446, 39455, 7, 944, 11, 277, 11, 8435, 28, 34, 13, 39455, 62, 11235, 4668, 62, 9641, 8]"
🧠 ML Signal: Usage of conditional logic to select a module,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 9156, 284, 2922, 257, 8265]",0.5,746,ml_signal,136,Usage of conditional logic to select a module,,734,"    def load(cls, filepath):","[220, 220, 220, 825, 3440, 7, 565, 82, 11, 2393, 6978, 2599]"
✅ Best Practice: Raising a specific exception for invalid input,"[26486, 227, 6705, 19939, 25, 7567, 1710, 257, 2176, 6631, 329, 12515, 5128]",0.5,746,best_practice,139,Raising a specific exception for invalid input,,746,,[]
✅ Best Practice: Include type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",1.0,763,best_practice,138,Include type hints for function parameters and return type,,746,        Load the serializable class from a filepath.,"[220, 220, 220, 220, 220, 220, 220, 8778, 262, 11389, 13821, 1398, 422, 257, 2393, 6978, 13]"
✅ Best Practice: Convert path to Path object to ensure consistent handling of file paths,"[26486, 227, 6705, 19939, 25, 38240, 3108, 284, 10644, 2134, 284, 4155, 6414, 9041, 286, 2393, 13532]",1.0,782,best_practice,149,Convert path to Path object to ensure consistent handling of file paths,,763,"        with open(filepath, ""rb"") as f:","[220, 220, 220, 220, 220, 220, 220, 351, 1280, 7, 7753, 6978, 11, 366, 26145, 4943, 355, 277, 25]"
🧠 ML Signal: Checking if an object is serializable before dumping,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 2134, 318, 11389, 13821, 878, 30231]",0.5,807,ml_signal,150,Checking if an object is serializable before dumping,,782,            object = cls.get_backend().load(f),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2134, 796, 537, 82, 13, 1136, 62, 1891, 437, 22446, 2220, 7, 69, 8]"
🧠 ML Signal: Using a method specific to the object's class for serialization,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2446, 2176, 284, 262, 2134, 338, 1398, 329, 11389, 1634]",0.5,816,ml_signal,153,Using a method specific to the object's class for serialization,,807,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Medium): Opening files without exception handling can lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25522, 3696, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269]",0.5,825,sast_risk,153,Opening files without exception handling can lead to unhandled exceptions,Medium,816,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
⚠️ SAST Risk (Medium): Using pickle for serialization can lead to arbitrary code execution if loading untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 2298, 293, 329, 11389, 1634, 460, 1085, 284, 14977, 2438, 9706, 611, 11046, 1418, 81, 8459, 1366]",1.0,834,sast_risk,153,Using pickle for serialization can lead to arbitrary code execution if loading untrusted data,Medium,825,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing specific classes or functions from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 393, 5499, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,5,best_practice,18,Importing specific classes or functions from a module can improve code readability and maintainability.,,0,from types import ModuleType,"[6738, 3858, 1330, 19937, 6030]"
‚úÖ Best Practice: Add type hinting for the function return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 3060, 2099, 9254, 278, 329, 262, 2163, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,19,best_practice,19,Add type hinting for the function return type for better readability and maintainability,,5,"from typing import Any, Dict, List, Tuple, Union","[6738, 19720, 1330, 4377, 11, 360, 713, 11, 7343, 11, 309, 29291, 11, 4479]"
"‚ö†Ô∏è SAST Risk (Low): No validation on the type of module_path, which could lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 262, 2099, 286, 8265, 62, 6978, 11, 543, 714, 1085, 284, 10059, 4069]",0.5,26,sast_risk,26,"No validation on the type of module_path, which could lead to unexpected behavior",Low,19,"    """"""Load module path","[220, 220, 220, 37227, 8912, 8265, 3108]"
‚ö†Ô∏è SAST Risk (Low): Using re.sub without escaping user input can lead to ReDoS if module_path is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 302, 13, 7266, 1231, 25071, 2836, 5128, 460, 1085, 284, 797, 46498, 611, 8265, 62, 6978, 318, 2836, 12, 14401]",0.5,36,sast_risk,32,Using re.sub without escaping user input can lead to ReDoS if module_path is user-controlled,Low,26,    if module_path is None:,"[220, 220, 220, 611, 8265, 62, 6978, 318, 6045, 25]"
üß† ML Signal: Pattern of sanitizing and transforming file paths,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 5336, 270, 2890, 290, 25449, 2393, 13532]",0.5,36,ml_signal,34,Pattern of sanitizing and transforming file paths,,36,,[]
"‚úÖ Best Practice: Use importlib.util to dynamically load modules, which is more secure than exec","[26486, 227, 6705, 19939, 25, 5765, 1330, 8019, 13, 22602, 284, 32366, 3440, 13103, 11, 543, 318, 517, 5713, 621, 2452]",0.5,50,best_practice,35,"Use importlib.util to dynamically load modules, which is more secure than exec",,36,"    if isinstance(module_path, ModuleType):","[220, 220, 220, 611, 318, 39098, 7, 21412, 62, 6978, 11, 19937, 6030, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Directly modifying sys.modules can lead to module hijacking if not handled carefully,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 30620, 25064, 13, 18170, 460, 1085, 284, 8265, 16836, 5430, 611, 407, 12118, 7773]",0.5,117,sast_risk,39,Directly modifying sys.modules can lead to module hijacking if not handled carefully,Medium,50,"            module_name = re.sub(""^[^a-zA-Z_]+"", """", re.sub(""[^0-9a-zA-Z_]"", """", module_path[:-3].replace(""/"", ""_"")))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8265, 62, 3672, 796, 302, 13, 7266, 7203, 61, 58, 61, 64, 12, 89, 32, 12, 57, 62, 48688, 1600, 366, 1600, 302, 13, 7266, 7203, 58, 61, 15, 12, 24, 64, 12, 89, 32, 12, 57, 62, 60, 1600, 366, 1600, 8265, 62, 6978, 58, 21912, 18, 4083, 33491, 7203, 14, 1600, 45434, 1, 22305]"
‚ö†Ô∏è SAST Risk (Medium): exec_module can execute arbitrary code if module_spec is not trusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 2452, 62, 21412, 460, 12260, 14977, 2438, 611, 8265, 62, 16684, 318, 407, 13467]",0.5,153,sast_risk,40,exec_module can execute arbitrary code if module_spec is not trusted,Medium,117,"            module_spec = importlib.util.spec_from_file_location(module_name, module_path)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8265, 62, 16684, 796, 1330, 8019, 13, 22602, 13, 16684, 62, 6738, 62, 7753, 62, 24886, 7, 21412, 62, 3672, 11, 8265, 62, 6978, 8]"
‚ö†Ô∏è SAST Risk (Low): importlib.import_module can execute arbitrary code if module_path is not trusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1330, 8019, 13, 11748, 62, 21412, 460, 12260, 14977, 2438, 611, 8265, 62, 6978, 318, 407, 13467]",0.5,189,sast_risk,40,importlib.import_module can execute arbitrary code if module_path is not trusted,Low,153,"            module_spec = importlib.util.spec_from_file_location(module_name, module_path)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8265, 62, 16684, 796, 1330, 8019, 13, 22602, 13, 16684, 62, 6738, 62, 7753, 62, 24886, 7, 21412, 62, 3672, 11, 8265, 62, 6978, 8]"
‚úÖ Best Practice: Use of type hints for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099]",0.5,256,best_practice,39,Use of type hints for function parameters and return type,,189,"            module_name = re.sub(""^[^a-zA-Z_]+"", """", re.sub(""[^0-9a-zA-Z_]"", """", module_path[:-3].replace(""/"", ""_"")))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8265, 62, 3672, 796, 302, 13, 7266, 7203, 61, 58, 61, 64, 12, 89, 32, 12, 57, 62, 48688, 1600, 366, 1600, 302, 13, 7266, 7203, 58, 61, 15, 12, 24, 64, 12, 89, 32, 12, 57, 62, 60, 1600, 366, 1600, 8265, 62, 6978, 58, 21912, 18, 4083, 33491, 7203, 14, 1600, 45434, 1, 22305]"
‚ö†Ô∏è SAST Risk (Medium): Unpacking from a split operation can lead to ValueError if the input is not formatted as expected,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 41291, 422, 257, 6626, 4905, 460, 1085, 284, 11052, 12331, 611, 262, 5128, 318, 407, 39559, 355, 2938]",0.5,256,sast_risk,51,Unpacking from a split operation can lead to ValueError if the input is not formatted as expected,Medium,256,,[]
‚úÖ Best Practice: Joining the module path for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 5302, 3191, 262, 8265, 3108, 329, 16287, 290, 5529, 1799]",0.5,261,best_practice,53,Joining the module path for clarity and maintainability,,256,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Check if config is a dictionary to handle different input types,"[26486, 227, 6705, 19939, 25, 6822, 611, 4566, 318, 257, 22155, 284, 5412, 1180, 5128, 3858]",1.0,271,best_practice,73,Check if config is a dictionary to handle different input types,,261,"    config : [dict, str]","[220, 220, 220, 4566, 1058, 685, 11600, 11, 965, 60]"
‚úÖ Best Practice: Use of ternary operator for concise code,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 2438]",1.0,291,best_practice,75,Use of ternary operator for concise code,,271,        please refer to the doc of init_instance_by_config,"[220, 220, 220, 220, 220, 220, 220, 3387, 3522, 284, 262, 2205, 286, 2315, 62, 39098, 62, 1525, 62, 11250]"
‚úÖ Best Practice: Check if the key in config is a string,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 1994, 287, 4566, 318, 257, 4731]",1.0,302,best_practice,77,Check if the key in config is a string,,291,    default_module : Python module or str,"[220, 220, 220, 4277, 62, 21412, 1058, 11361, 8265, 393, 965]"
üß† ML Signal: Usage of split_module_path function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6626, 62, 21412, 62, 6978, 2163]",1.0,324,ml_signal,79,Usage of split_module_path function,,302,        This function will load class from the config['module_path'] first.,"[220, 220, 220, 220, 220, 220, 220, 770, 2163, 481, 3440, 1398, 422, 262, 4566, 17816, 21412, 62, 6978, 20520, 717, 13]"
‚úÖ Best Practice: Use of default value if m_path is empty,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 1988, 611, 285, 62, 6978, 318, 6565]",0.5,352,best_practice,80,Use of default value if m_path is empty,,324,"        If config['module_path'] doesn't exists, it will load the class from default_module.","[220, 220, 220, 220, 220, 220, 220, 1002, 4566, 17816, 21412, 62, 6978, 20520, 1595, 470, 7160, 11, 340, 481, 3440, 262, 1398, 422, 4277, 62, 21412, 13]"
üß† ML Signal: Usage of get_module_by_module_path function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 651, 62, 21412, 62, 1525, 62, 21412, 62, 6978, 2163]",1.0,360,ml_signal,84,Usage of get_module_by_module_path function,,352,"    (type, dict):","[220, 220, 220, 357, 4906, 11, 8633, 2599]"
‚ö†Ô∏è SAST Risk (Low): getattr can be unsafe if module is not trusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 651, 35226, 460, 307, 21596, 611, 8265, 318, 407, 13467]",0.5,360,sast_risk,86,getattr can be unsafe if module is not trusted,Low,360,,[]
‚úÖ Best Practice: Use of get method to provide default value,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 2446, 284, 2148, 4277, 1988]",1.0,364,best_practice,90,Use of get method to provide default value,,360,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Check if config is a string to handle different input types,"[26486, 227, 6705, 19939, 25, 6822, 611, 4566, 318, 257, 4731, 284, 5412, 1180, 5128, 3858]",1.0,386,best_practice,92,Check if config is a string to handle different input types,,364,"        key = ""class"" if ""class"" in config else ""func""","[220, 220, 220, 220, 220, 220, 220, 1994, 796, 366, 4871, 1, 611, 366, 4871, 1, 287, 4566, 2073, 366, 20786, 1]"
üß† ML Signal: Usage of split_module_path function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6626, 62, 21412, 62, 6978, 2163]",1.0,403,ml_signal,93,Usage of split_module_path function,,386,"        if isinstance(config[key], str):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 11250, 58, 2539, 4357, 965, 2599]"
üß† ML Signal: Usage of get_module_by_module_path function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 651, 62, 21412, 62, 1525, 62, 21412, 62, 6978, 2163]",1.0,420,ml_signal,93,Usage of get_module_by_module_path function,,403,"        if isinstance(config[key], str):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 11250, 58, 2539, 4357, 965, 2599]"
‚ö†Ô∏è SAST Risk (Low): getattr can be unsafe if module is not trusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 651, 35226, 460, 307, 21596, 611, 8265, 318, 407, 13467]",0.5,438,sast_risk,98,getattr can be unsafe if module is not trusted,Low,420,"            if m_path == """":","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 285, 62, 6978, 6624, 366, 1298]"
‚ö†Ô∏è SAST Risk (Low): NotImplementedError can expose internal logic,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 460, 15651, 5387, 9156]",0.5,465,sast_risk,100,NotImplementedError can expose internal logic,Low,438,            module = get_module_by_module_path(m_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8265, 796, 651, 62, 21412, 62, 1525, 62, 21412, 62, 6978, 7, 76, 62, 6978, 8]"
‚úÖ Best Practice: Alias function for readability and maintainability,"[26486, 227, 6705, 19939, 25, 978, 4448, 2163, 329, 1100, 1799, 290, 5529, 1799]",0.5,492,best_practice,100,Alias function for readability and maintainability,,465,            module = get_module_by_module_path(m_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8265, 796, 651, 62, 21412, 62, 1525, 62, 21412, 62, 6978, 7, 76, 62, 6978, 8]"
"üß† ML Signal: Use of isinstance to check type, common pattern in dynamic typing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 11, 2219, 3912, 287, 8925, 19720]",0.5,492,ml_signal,121,"Use of isinstance to check type, common pattern in dynamic typing",,492,,[]
"üß† ML Signal: Use of isinstance to check type, common pattern in dynamic typing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 11, 2219, 3912, 287, 8925, 19720]",0.5,501,ml_signal,124,"Use of isinstance to check type, common pattern in dynamic typing",,492,"    default_module=None,","[220, 220, 220, 4277, 62, 21412, 28, 14202, 11]"
"üß† ML Signal: Use of isinstance to check type, common pattern in dynamic typing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 2099, 11, 2219, 3912, 287, 8925, 19720]",0.5,514,ml_signal,126,"Use of isinstance to check type, common pattern in dynamic typing",,501,"    try_kwargs: Dict = {},","[220, 220, 220, 1949, 62, 46265, 22046, 25, 360, 713, 796, 1391, 5512]"
‚úÖ Best Practice: Use of urlparse to handle URL parsing,"[26486, 227, 6705, 19939, 25, 5765, 286, 19016, 29572, 284, 5412, 10289, 32096]",0.5,518,best_practice,128,Use of urlparse to handle URL parsing,,514,) -> Any:,"[8, 4613, 4377, 25]"
üß† ML Signal: Checking for specific URL scheme,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 10289, 7791]",0.5,526,ml_signal,130,Checking for specific URL scheme,,518,    get initialized instance with config,"[220, 220, 220, 651, 23224, 4554, 351, 4566]"
üß† ML Signal: Checking for non-empty netloc in URL,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 1729, 12, 28920, 2010, 17946, 287, 10289]",0.5,530,ml_signal,132,Checking for non-empty netloc in URL,,526,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Use of os.path.join for path manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 28686, 13, 6978, 13, 22179, 329, 3108, 17512]",0.5,539,best_practice,136,Use of os.path.join for path manipulation,,530,    default_module : Python module,"[220, 220, 220, 4277, 62, 21412, 1058, 11361, 8265]"
‚ö†Ô∏è SAST Risk (Medium): Potential security risk with loading pickle files,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2324, 2526, 351, 11046, 2298, 293, 3696]",0.5,562,sast_risk,138,Potential security risk with loading pickle files,Medium,539,"        NOTE: the ""module_path"" will be override by `module` arguments","[220, 220, 220, 220, 220, 220, 220, 24550, 25, 262, 366, 21412, 62, 6978, 1, 481, 307, 20957, 416, 4600, 21412, 63, 7159]"
‚ö†Ô∏è SAST Risk (Medium): Potential security risk with loading pickle files,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2324, 2526, 351, 11046, 2298, 293, 3696]",0.5,562,sast_risk,142,Potential security risk with loading pickle files,Medium,562,,[]
‚úÖ Best Practice: Separation of concerns by using a helper function,"[26486, 227, 6705, 19939, 25, 8621, 10186, 286, 4786, 416, 1262, 257, 31904, 2163]",0.5,578,best_practice,143,Separation of concerns by using a helper function,,562,"    accept_types: Union[type, Tuple[type]]","[220, 220, 220, 2453, 62, 19199, 25, 4479, 58, 4906, 11, 309, 29291, 58, 4906, 11907]"
‚úÖ Best Practice: Use of try-except block for error handling,"[26486, 227, 6705, 19939, 25, 5765, 286, 1949, 12, 16341, 2512, 329, 4049, 9041]",0.5,594,best_practice,143,Use of try-except block for error handling,,578,"    accept_types: Union[type, Tuple[type]]","[220, 220, 220, 2453, 62, 19199, 25, 4479, 58, 4906, 11, 309, 29291, 58, 4906, 11907]"
‚úÖ Best Practice: Use of context manager for resource management,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 8271, 4542]",1.0,599,best_practice,153,Use of context manager for resource management,,594,    object:,"[220, 220, 220, 2134, 25]"
‚ö†Ô∏è SAST Risk (Medium): Directly modifying the __class__ attribute can lead to unexpected behavior and is generally unsafe.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4128, 306, 30620, 262, 11593, 4871, 834, 11688, 460, 1085, 284, 10059, 4069, 290, 318, 4143, 21596, 13]",1.0,614,sast_risk,154,Directly modifying the __class__ attribute can lead to unexpected behavior and is generally unsafe.,Medium,599,        An initialized object based on the config info,"[220, 220, 220, 220, 220, 220, 220, 1052, 23224, 2134, 1912, 319, 262, 4566, 7508]"
"üß† ML Signal: Usage of yield indicates a generator pattern, which can be used to train models on generator usage.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7800, 9217, 257, 17301, 3912, 11, 543, 460, 307, 973, 284, 4512, 4981, 319, 17301, 8748, 13]",0.5,627,ml_signal,156,"Usage of yield indicates a generator pattern, which can be used to train models on generator usage.",,614,"    if isinstance(config, accept_types):","[220, 220, 220, 611, 318, 39098, 7, 11250, 11, 2453, 62, 19199, 2599]"
"‚ö†Ô∏è SAST Risk (Medium): Restoring the original class type is necessary to prevent persistent state changes, but the initial modification is still risky.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8324, 3255, 262, 2656, 1398, 2099, 318, 3306, 284, 2948, 16218, 1181, 2458, 11, 475, 262, 4238, 17613, 318, 991, 17564, 13]",0.5,627,sast_risk,158,"Restoring the original class type is necessary to prevent persistent state changes, but the initial modification is still risky.",Medium,627,,[]
‚úÖ Best Practice: Check if module_path is already a ModuleType to avoid unnecessary import,"[26486, 227, 6705, 19939, 25, 6822, 611, 8265, 62, 6978, 318, 1541, 257, 19937, 6030, 284, 3368, 13114, 1330]",1.0,650,best_practice,167,Check if module_path is already a ModuleType to avoid unnecessary import,,627,"                if pr.netloc != """":","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 778, 13, 3262, 17946, 14512, 366, 1298]"
‚ö†Ô∏è SAST Risk (Low): Potential ImportError if module_path is invalid,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 17267, 12331, 611, 8265, 62, 6978, 318, 12515]",1.0,685,sast_risk,171,Potential ImportError if module_path is invalid,Low,650,"                with open(os.path.normpath(pr_path), ""rb"") as f:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 1280, 7, 418, 13, 6978, 13, 27237, 6978, 7, 1050, 62, 6978, 828, 366, 26145, 4943, 355, 277, 25]"
‚úÖ Best Practice: Initialize an empty list to store classes,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 1351, 284, 3650, 6097]",1.0,694,best_practice,173,Initialize an empty list to store classes,,685,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Check if 'obj' is a type and a subclass of 'cls' before appending,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 26801, 6, 318, 257, 2099, 290, 257, 47611, 286, 705, 565, 82, 6, 878, 598, 1571]",0.5,703,best_practice,173,Check if 'obj' is a type and a subclass of 'cls' before appending,,694,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Avoid duplicates by checking if 'cls' is not already in 'cls_list',"[26486, 227, 6705, 19939, 25, 24390, 14184, 16856, 416, 10627, 611, 705, 565, 82, 6, 318, 407, 1541, 287, 705, 565, 82, 62, 4868, 6]",0.5,726,best_practice,175,Avoid duplicates by checking if 'cls' is not already in 'cls_list',,703,                return pickle.load(f),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2298, 293, 13, 2220, 7, 69, 8]"
üß† ML Signal: Iterating over module attributes to find classes,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 8265, 12608, 284, 1064, 6097]",1.0,756,ml_signal,177,Iterating over module attributes to find classes,,726,"    klass, cls_kwargs = get_callable_kwargs(config, default_module=default_module)","[220, 220, 220, 479, 31172, 11, 537, 82, 62, 46265, 22046, 796, 651, 62, 13345, 540, 62, 46265, 22046, 7, 11250, 11, 4277, 62, 21412, 28, 12286, 62, 21412, 8]"
üß† ML Signal: Using getattr to dynamically access module attributes,"[8582, 100, 254, 10373, 26484, 25, 8554, 651, 35226, 284, 32366, 1895, 8265, 12608]",0.5,761,ml_signal,179,Using getattr to dynamically access module attributes,,756,    try:,"[220, 220, 220, 1949, 25]"
üß† ML Signal: Checking if module has a __path__ attribute to identify packages,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 8265, 468, 257, 11593, 6978, 834, 11688, 284, 5911, 10392]",0.5,770,ml_signal,181,Checking if module has a __path__ attribute to identify packages,,761,"    except (TypeError,):","[220, 220, 220, 2845, 357, 6030, 12331, 11, 2599]"
üß† ML Signal: Iterating over submodules using pkgutil,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 850, 18170, 1262, 279, 10025, 22602]",0.5,784,ml_signal,182,Iterating over submodules using pkgutil,,770,        # TypeError for handling errors like,"[220, 220, 220, 220, 220, 220, 220, 1303, 5994, 12331, 329, 9041, 8563, 588]"
üß† ML Signal: Dynamically importing submodules,"[8582, 100, 254, 10373, 26484, 25, 14970, 1146, 33332, 850, 18170]",1.0,798,ml_signal,182,Dynamically importing submodules,,784,        # TypeError for handling errors like,"[220, 220, 220, 220, 220, 220, 220, 1303, 5994, 12331, 329, 9041, 8563, 588]"
üß† ML Signal: Recursively finding all classes in submodules,"[8582, 100, 254, 10373, 26484, 25, 3311, 1834, 2280, 4917, 477, 6097, 287, 850, 18170]",0.5,812,ml_signal,182,Recursively finding all classes in submodules,,798,        # TypeError for handling errors like,"[220, 220, 220, 220, 220, 220, 220, 1303, 5994, 12331, 329, 9041, 8563, 588]"
üß† ML Signal: Returning a list of classes found in the module and its submodules,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 286, 6097, 1043, 287, 262, 8265, 290, 663, 850, 18170]",0.5,826,ml_signal,182,Returning a list of classes found in the module and its submodules,,812,        # TypeError for handling errors like,"[220, 220, 220, 220, 220, 220, 220, 1303, 5994, 12331, 329, 9041, 8563, 588]"

[
  {
    "line": 3,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Importing 'dill' can lead to security risks if used to deserialize untrusted data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      17267,
      278,
      705,
      67,
      359,
      6,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      973,
      284,
      748,
      48499,
      1096,
      1418,
      81,
      8459,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Importing 'dill' can lead to security risks if used to deserialize untrusted data."
  },
  {
    "line": 6,
    "text": "from pathlib import Path",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Relative imports can lead to potential issues in module resolution.",
    "confidence": 0.5,
    "tokens": [
      6738,
      3108,
      8019,
      1330,
      10644
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      45344,
      17944,
      460,
      1085,
      284,
      2785,
      2428,
      287,
      8265,
      6323,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Relative imports can lead to potential issues in module resolution."
  },
  {
    "line": 7,
    "text": "from typing import Union",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Deserializing data from untrusted sources can lead to arbitrary code execution.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      4479
    ],
    "start_token": 5,
    "end_token": 9,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      2935,
      48499,
      2890,
      1366,
      422,
      1418,
      81,
      8459,
      4237,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Deserializing data from untrusted sources can lead to arbitrary code execution."
  },
  {
    "line": 7,
    "text": "from typing import Union",
    "annotation": "\u2705 Best Practice: Use 'Path' for file path operations for better cross-platform compatibility.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      4479
    ],
    "start_token": 9,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      15235,
      6,
      329,
      2393,
      3108,
      4560,
      329,
      1365,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'Path' for file path operations for better cross-platform compatibility."
  },
  {
    "line": 7,
    "text": "from typing import Union",
    "annotation": "\u2705 Best Practice: Check if the file exists before attempting to open it.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      4479
    ],
    "start_token": 13,
    "end_token": 17,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      2393,
      7160,
      878,
      9361,
      284,
      1280,
      340,
      13
    ],
    "label": "best_practice",
    "reason": "Check if the file exists before attempting to open it."
  },
  {
    "line": 19,
    "text": "        - in the exclude attribute list -> always dropped",
    "annotation": "\u2705 Best Practice: Use 'with' statement for file operations to ensure proper resource management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      287,
      262,
      19607,
      11688,
      1351,
      4613,
      1464,
      5710
    ],
    "start_token": 17,
    "end_token": 33,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      284,
      4155,
      1774,
      8271,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'with' statement for file operations to ensure proper resource management."
  },
  {
    "line": 20,
    "text": "        - name not starts with `_` -> kept",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using 'dill' for deserialization can execute arbitrary code if the input is untrusted.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      1438,
      407,
      4940,
      351,
      4600,
      62,
      63,
      4613,
      4030
    ],
    "start_token": 33,
    "end_token": 50,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      705,
      67,
      359,
      6,
      329,
      748,
      48499,
      1634,
      460,
      12260,
      14977,
      2438,
      611,
      262,
      5128,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using 'dill' for deserialization can execute arbitrary code if the input is untrusted."
  },
  {
    "line": 23,
    "text": "    It provides a syntactic sugar for distinguish the attributes which user doesn't want.",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using 'pickle' for deserialization can execute arbitrary code if the input is untrusted.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      632,
      3769,
      257,
      7419,
      12009,
      7543,
      329,
      15714,
      262,
      12608,
      543,
      2836,
      1595,
      470,
      765,
      13
    ],
    "start_token": 50,
    "end_token": 69,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      705,
      27729,
      293,
      6,
      329,
      748,
      48499,
      1634,
      460,
      12260,
      14977,
      2438,
      611,
      262,
      5128,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using 'pickle' for deserialization can execute arbitrary code if the input is untrusted."
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to load serialized objects, indicating usage patterns for data persistence.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 69,
    "end_token": 69,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      3440,
      11389,
      1143,
      5563,
      11,
      12739,
      8748,
      7572,
      329,
      1366,
      30802,
      13
    ],
    "label": "ml_signal",
    "reason": "Function to load serialized objects, indicating usage patterns for data persistence."
  },
  {
    "line": 28,
    "text": "    default_dump_all = False  # if dump all things",
    "annotation": "\u2705 Best Practice: Use 'Path' for file path operations for better cross-platform compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4277,
      62,
      39455,
      62,
      439,
      796,
      10352,
      220,
      1303,
      611,
      10285,
      477,
      1243
    ],
    "start_token": 69,
    "end_token": 85,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      15235,
      6,
      329,
      2393,
      3108,
      4560,
      329,
      1365,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'Path' for file path operations for better cross-platform compatibility."
  },
  {
    "line": 31,
    "text": "    include_attr = []  # include_attr have lower priorities then `self._include`",
    "annotation": "\u2705 Best Practice: Use 'with' statement for file operations to ensure proper resource management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2291,
      62,
      35226,
      796,
      17635,
      220,
      1303,
      2291,
      62,
      35226,
      423,
      2793,
      15369,
      788,
      4600,
      944,
      13557,
      17256,
      63
    ],
    "start_token": 85,
    "end_token": 107,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      284,
      4155,
      1774,
      8271,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'with' statement for file operations to ensure proper resource management."
  },
  {
    "line": 34,
    "text": "    def __init__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Choice of serialization library (dill) for saving objects.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      2599
    ],
    "start_token": 107,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18502,
      286,
      11389,
      1634,
      5888,
      357,
      67,
      359,
      8,
      329,
      8914,
      5563,
      13
    ],
    "label": "ml_signal",
    "reason": "Choice of serialization library (dill) for saving objects."
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Choice of serialization library (pickle) for saving objects.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18502,
      286,
      11389,
      1634,
      5888,
      357,
      27729,
      293,
      8,
      329,
      8914,
      5563,
      13
    ],
    "label": "ml_signal",
    "reason": "Choice of serialization library (pickle) for saving objects."
  },
  {
    "line": 19,
    "text": "        - in the exclude attribute list -> always dropped",
    "annotation": "\u2705 Best Practice: Use of class variables for default settings and configurations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      287,
      262,
      19607,
      11688,
      1351,
      4613,
      1464,
      5710
    ],
    "start_token": 117,
    "end_token": 133,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4277,
      6460,
      290,
      25412
    ],
    "label": "best_practice",
    "reason": "Use of class variables for default settings and configurations"
  },
  {
    "line": 21,
    "text": "        - name starts with `_` -> kept if `dump_all` is true else dropped",
    "annotation": "\u2705 Best Practice: Use of class variables for default settings and configurations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      1438,
      4940,
      351,
      4600,
      62,
      63,
      4613,
      4030,
      611,
      4600,
      39455,
      62,
      439,
      63,
      318,
      2081,
      2073,
      5710
    ],
    "start_token": 133,
    "end_token": 159,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4277,
      6460,
      290,
      25412
    ],
    "label": "best_practice",
    "reason": "Use of class variables for default settings and configurations"
  },
  {
    "line": 23,
    "text": "    It provides a syntactic sugar for distinguish the attributes which user doesn't want.",
    "annotation": "\u2705 Best Practice: Use of class variables for default settings and configurations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      632,
      3769,
      257,
      7419,
      12009,
      7543,
      329,
      15714,
      262,
      12608,
      543,
      2836,
      1595,
      470,
      765,
      13
    ],
    "start_token": 159,
    "end_token": 178,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4277,
      6460,
      290,
      25412
    ],
    "label": "best_practice",
    "reason": "Use of class variables for default settings and configurations"
  },
  {
    "line": 25,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of class variables for default settings and configurations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 178,
    "end_token": 182,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4277,
      6460,
      290,
      25412
    ],
    "label": "best_practice",
    "reason": "Use of class variables for default settings and configurations"
  },
  {
    "line": 27,
    "text": "    pickle_backend = \"pickle\"  # another optional value is \"dill\" which can pickle more things of python.",
    "annotation": "\u2705 Best Practice: Use of class variables for default settings and configurations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2298,
      293,
      62,
      1891,
      437,
      796,
      366,
      27729,
      293,
      1,
      220,
      1303,
      1194,
      11902,
      1988,
      318,
      366,
      67,
      359,
      1,
      543,
      460,
      2298,
      293,
      517,
      1243,
      286,
      21015,
      13
    ],
    "start_token": 182,
    "end_token": 214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4277,
      6460,
      290,
      25412
    ],
    "label": "best_practice",
    "reason": "Use of class variables for default settings and configurations"
  },
  {
    "line": 29,
    "text": "    config_attr = [\"_include\", \"_exclude\"]",
    "annotation": "\u2705 Best Practice: Use of class variables for default settings and configurations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4566,
      62,
      35226,
      796,
      14631,
      62,
      17256,
      1600,
      45434,
      1069,
      9152,
      8973
    ],
    "start_token": 214,
    "end_token": 229,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      9633,
      329,
      4277,
      6460,
      290,
      25412
    ],
    "label": "best_practice",
    "reason": "Use of class variables for default settings and configurations"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize instance variables in the constructor for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 229,
    "end_token": 229,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in the constructor for clarity and maintainability."
  },
  {
    "line": 28,
    "text": "    default_dump_all = False  # if dump all things",
    "annotation": "\u2705 Best Practice: Use of a leading underscore in variable names indicates intended private access.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4277,
      62,
      39455,
      62,
      439,
      796,
      10352,
      220,
      1303,
      611,
      10285,
      477,
      1243
    ],
    "start_token": 229,
    "end_token": 245,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      3756,
      44810,
      287,
      7885,
      3891,
      9217,
      5292,
      2839,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a leading underscore in variable names indicates intended private access."
  },
  {
    "line": 29,
    "text": "    config_attr = [\"_include\", \"_exclude\"]",
    "annotation": "\ud83e\udde0 ML Signal: Method checks membership in lists, indicating filtering logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4566,
      62,
      35226,
      796,
      14631,
      62,
      17256,
      1600,
      45434,
      1069,
      9152,
      8973
    ],
    "start_token": 245,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8794,
      9931,
      287,
      8341,
      11,
      12739,
      25431,
      9156
    ],
    "label": "ml_signal",
    "reason": "Method checks membership in lists, indicating filtering logic"
  },
  {
    "line": 32,
    "text": "    FLAG_KEY = \"_qlib_serial_flag\"",
    "annotation": "\ud83e\udde0 ML Signal: Checks for inclusion in a list, indicating a whitelist pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9977,
      4760,
      62,
      20373,
      796,
      45434,
      80,
      8019,
      62,
      46911,
      62,
      32109,
      1
    ],
    "start_token": 260,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      14900,
      287,
      257,
      1351,
      11,
      12739,
      257,
      20542,
      46331,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checks for inclusion in a list, indicating a whitelist pattern"
  },
  {
    "line": 35,
    "text": "        self._dump_all = self.default_dump_all",
    "annotation": "\ud83e\udde0 ML Signal: Checks for exclusion in a list, indicating a blacklist pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      39455,
      62,
      439,
      796,
      2116,
      13,
      12286,
      62,
      39455,
      62,
      439
    ],
    "start_token": 276,
    "end_token": 296,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      19328,
      287,
      257,
      1351,
      11,
      12739,
      257,
      38810,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checks for exclusion in a list, indicating a blacklist pattern"
  },
  {
    "line": 38,
    "text": "    def _is_kept(self, key):",
    "annotation": "\ud83e\udde0 ML Signal: Uses a flag and string method to determine behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      271,
      62,
      45089,
      7,
      944,
      11,
      1994,
      2599
    ],
    "start_token": 296,
    "end_token": 309,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      36965,
      257,
      6056,
      290,
      4731,
      2446,
      284,
      5004,
      4069
    ],
    "label": "ml_signal",
    "reason": "Uses a flag and string method to determine behavior"
  },
  {
    "line": 36,
    "text": "        self._exclude = None  # this attribute have higher priorities than `exclude_attr`",
    "annotation": "\u2705 Best Practice: Use of dictionary comprehension for concise and readable code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      1069,
      9152,
      796,
      6045,
      220,
      1303,
      428,
      11688,
      423,
      2440,
      15369,
      621,
      4600,
      1069,
      9152,
      62,
      35226,
      63
    ],
    "start_token": 309,
    "end_token": 336,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      35915,
      329,
      35327,
      290,
      31744,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of dictionary comprehension for concise and readable code"
  },
  {
    "line": 38,
    "text": "    def _is_kept(self, key):",
    "annotation": "\ud83e\udde0 ML Signal: Custom serialization logic for object state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      271,
      62,
      45089,
      7,
      944,
      11,
      1994,
      2599
    ],
    "start_token": 336,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      11389,
      1634,
      9156,
      329,
      2134,
      1181
    ],
    "label": "ml_signal",
    "reason": "Custom serialization logic for object state"
  },
  {
    "line": 39,
    "text": "        if key in self.config_attr:",
    "annotation": "\u2705 Best Practice: Filtering dictionary items using a method for clarity and encapsulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1994,
      287,
      2116,
      13,
      11250,
      62,
      35226,
      25
    ],
    "start_token": 349,
    "end_token": 365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      22155,
      3709,
      1262,
      257,
      2446,
      329,
      16287,
      290,
      32652,
      1741
    ],
    "label": "best_practice",
    "reason": "Filtering dictionary items using a method for clarity and encapsulation"
  },
  {
    "line": 38,
    "text": "    def _is_kept(self, key):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Directly updating the object's __dict__ can lead to security issues if the state contains malicious data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      271,
      62,
      45089,
      7,
      944,
      11,
      1994,
      2599
    ],
    "start_token": 365,
    "end_token": 378,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4128,
      306,
      19698,
      262,
      2134,
      338,
      11593,
      11600,
      834,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      262,
      1181,
      4909,
      17412,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Directly updating the object's __dict__ can lead to security issues if the state contains malicious data."
  },
  {
    "line": 39,
    "text": "        if key in self.config_attr:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Updating the object's __dict__ without validation can lead to unexpected behavior or security issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1994,
      287,
      2116,
      13,
      11250,
      62,
      35226,
      25
    ],
    "start_token": 378,
    "end_token": 394,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      3205,
      38734,
      262,
      2134,
      338,
      11593,
      11600,
      834,
      1231,
      21201,
      460,
      1085,
      284,
      10059,
      4069,
      393,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Updating the object's __dict__ without validation can lead to unexpected behavior or security issues."
  },
  {
    "line": 42,
    "text": "            return True",
    "annotation": "\u2705 Best Practice: Add a docstring that clearly describes the method's purpose and behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6407
    ],
    "start_token": 394,
    "end_token": 407,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      326,
      4084,
      8477,
      262,
      2446,
      338,
      4007,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Add a docstring that clearly describes the method's purpose and behavior"
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider renaming the method to better reflect its functionality",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 407,
    "end_token": 407,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8851,
      3723,
      262,
      2446,
      284,
      1365,
      4079,
      663,
      11244
    ],
    "label": "best_practice",
    "reason": "Consider renaming the method to better reflect its functionality"
  },
  {
    "line": 47,
    "text": "    def __getstate__(self) -> dict:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of getattr to access object attributes dynamically",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      5219,
      834,
      7,
      944,
      8,
      4613,
      8633,
      25
    ],
    "start_token": 407,
    "end_token": 421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      651,
      35226,
      284,
      1895,
      2134,
      12608,
      32366
    ],
    "label": "ml_signal",
    "reason": "Usage of getattr to access object attributes dynamically"
  },
  {
    "line": 47,
    "text": "    def __getstate__(self) -> dict:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for attribute access issues if \"_dump_all\" is not defined",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      5219,
      834,
      7,
      944,
      8,
      4613,
      8633,
      25
    ],
    "start_token": 421,
    "end_token": 435,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11688,
      1895,
      2428,
      611,
      45434,
      39455,
      62,
      439,
      1,
      318,
      407,
      5447
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for attribute access issues if \"_dump_all\" is not defined"
  },
  {
    "line": 47,
    "text": "    def __getstate__(self) -> dict:",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      1136,
      5219,
      834,
      7,
      944,
      8,
      4613,
      8633,
      25
    ],
    "start_token": 435,
    "end_token": 449,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of parameters and return type"
  },
  {
    "line": 58,
    "text": "        return getattr(self, \"_dump_all\", False)",
    "annotation": "\u2705 Best Practice: Using hasattr to check for attribute existence before accessing it",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      651,
      35226,
      7,
      944,
      11,
      45434,
      39455,
      62,
      439,
      1600,
      10352,
      8
    ],
    "start_token": 449,
    "end_token": 469,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      468,
      35226,
      284,
      2198,
      329,
      11688,
      6224,
      878,
      22534,
      340
    ],
    "label": "best_practice",
    "reason": "Using hasattr to check for attribute existence before accessing it"
  },
  {
    "line": 60,
    "text": "    def _get_attr_list(self, attr_type: str) -> list:",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic attribute access pattern using getattr",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      35226,
      62,
      4868,
      7,
      944,
      11,
      708,
      81,
      62,
      4906,
      25,
      965,
      8,
      4613,
      1351,
      25
    ],
    "start_token": 469,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      11688,
      1895,
      3912,
      1262,
      651,
      35226
    ],
    "label": "ml_signal",
    "reason": "Dynamic attribute access pattern using getattr"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Fallback to class-level attribute if instance-level attribute is not found",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 492,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7218,
      1891,
      284,
      1398,
      12,
      5715,
      11688,
      611,
      4554,
      12,
      5715,
      11688,
      318,
      407,
      1043
    ],
    "label": "ml_signal",
    "reason": "Fallback to class-level attribute if instance-level attribute is not found"
  },
  {
    "line": 65,
    "text": "        ----------",
    "annotation": "\u2705 Best Practice: Returning an empty list instead of None for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 492,
    "end_token": 501,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      281,
      6565,
      1351,
      2427,
      286,
      6045,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Returning an empty list instead of None for consistency"
  },
  {
    "line": 85,
    "text": "        Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a KeyError with user-provided input can expose internal logic.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 501,
    "end_token": 509,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      7383,
      12331,
      351,
      2836,
      12,
      41279,
      5128,
      460,
      15651,
      5387,
      9156,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a KeyError with user-provided input can expose internal logic."
  },
  {
    "line": 89,
    "text": "            dump_all : bool",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Modifying self.__dict__ directly can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10285,
      62,
      439,
      1058,
      20512
    ],
    "start_token": 509,
    "end_token": 525,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3401,
      4035,
      2116,
      13,
      834,
      11600,
      834,
      3264,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Modifying self.__dict__ directly can lead to unexpected behavior."
  },
  {
    "line": 91,
    "text": "            exclude : list",
    "annotation": "\ud83e\udde0 ML Signal: Checks for instance type, indicating polymorphic behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19607,
      1058,
      1351
    ],
    "start_token": 525,
    "end_token": 539,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      329,
      4554,
      2099,
      11,
      12739,
      34196,
      291,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Checks for instance type, indicating polymorphic behavior."
  },
  {
    "line": 93,
    "text": "            include : list",
    "annotation": "\ud83e\udde0 ML Signal: Recursive function call pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2291,
      1058,
      1351
    ],
    "start_token": 539,
    "end_token": 553,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      2163,
      869,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Recursive function call pattern."
  },
  {
    "line": 93,
    "text": "            include : list",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly deleting from self.__dict__ can lead to errors if FLAG_KEY is not present.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2291,
      1058,
      1351
    ],
    "start_token": 553,
    "end_token": 567,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      34817,
      422,
      2116,
      13,
      834,
      11600,
      834,
      460,
      1085,
      284,
      8563,
      611,
      9977,
      4760,
      62,
      20373,
      318,
      407,
      1944,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly deleting from self.__dict__ can lead to errors if FLAG_KEY is not present."
  },
  {
    "line": 104,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Configuring the object with kwargs allows for flexible behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 567,
    "end_token": 580,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17056,
      870,
      262,
      2134,
      351,
      479,
      86,
      22046,
      3578,
      329,
      12846,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Configuring the object with kwargs allows for flexible behavior."
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using pickle can lead to arbitrary code execution if loading untrusted data.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 580,
    "end_token": 580,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      2298,
      293,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      611,
      11046,
      1418,
      81,
      8459,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using pickle can lead to arbitrary code execution if loading untrusted data."
  },
  {
    "line": 108,
    "text": "            for obj in self.__dict__.values():",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a backend to handle serialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      26181,
      287,
      2116,
      13,
      834,
      11600,
      834,
      13,
      27160,
      33529
    ],
    "start_token": 580,
    "end_token": 602,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      30203,
      284,
      5412,
      11389,
      1634,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a backend to handle serialization."
  },
  {
    "line": 109,
    "text": "                # set flag to prevent endless loop",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure the backend's dump method is secure and does not introduce vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      900,
      6056,
      284,
      2948,
      13079,
      9052
    ],
    "start_token": 602,
    "end_token": 624,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      262,
      30203,
      338,
      10285,
      2446,
      318,
      5713,
      290,
      857,
      407,
      10400,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure the backend's dump method is secure and does not introduce vulnerabilities."
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u2705 Best Practice: Use 'with' statement for file operations to ensure proper resource management",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 624,
    "end_token": 624,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      284,
      4155,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Use 'with' statement for file operations to ensure proper resource management"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom backend for loading objects",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 624,
    "end_token": 624,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      30203,
      329,
      11046,
      5563
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom backend for loading objects"
  },
  {
    "line": 121,
    "text": "        kwargs may include following keys",
    "annotation": "\u2705 Best Practice: Check type of object before returning to ensure correct usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      86,
      22046,
      743,
      2291,
      1708,
      8251
    ],
    "start_token": 624,
    "end_token": 638,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      2099,
      286,
      2134,
      878,
      8024,
      284,
      4155,
      3376,
      8748
    ],
    "label": "best_practice",
    "reason": "Check type of object before returning to ensure correct usage"
  },
  {
    "line": 126,
    "text": "                What attribute will not be dumped",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure in error message",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1867,
      11688,
      481,
      407,
      307,
      24105
    ],
    "start_token": 638,
    "end_token": 659,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      287,
      4049,
      3275
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure in error message"
  },
  {
    "line": 126,
    "text": "                What attribute will not be dumped",
    "annotation": "\u2705 Best Practice: Use @classmethod decorator for methods that operate on the class itself",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1867,
      11688,
      481,
      407,
      307,
      24105
    ],
    "start_token": 659,
    "end_token": 680,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2488,
      4871,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      8076,
      319,
      262,
      1398,
      2346
    ],
    "label": "best_practice",
    "reason": "Use @classmethod decorator for methods that operate on the class itself"
  },
  {
    "line": 131,
    "text": "        with Path(path).open(\"wb\") as f:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for code injection if cls.pickle_backend is manipulated externally",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      10644,
      7,
      6978,
      737,
      9654,
      7203,
      39346,
      4943,
      355,
      277,
      25
    ],
    "start_token": 680,
    "end_token": 699,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      2438,
      16954,
      611,
      537,
      82,
      13,
      27729,
      293,
      62,
      1891,
      437,
      318,
      25036,
      45107
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for code injection if cls.pickle_backend is manipulated externally"
  },
  {
    "line": 133,
    "text": "            self.get_backend().dump(self, f, protocol=C.dump_protocol_version)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of conditional logic to select a module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1136,
      62,
      1891,
      437,
      22446,
      39455,
      7,
      944,
      11,
      277,
      11,
      8435,
      28,
      34,
      13,
      39455,
      62,
      11235,
      4668,
      62,
      9641,
      8
    ],
    "start_token": 699,
    "end_token": 734,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      26340,
      9156,
      284,
      2922,
      257,
      8265
    ],
    "label": "ml_signal",
    "reason": "Usage of conditional logic to select a module"
  },
  {
    "line": 136,
    "text": "    def load(cls, filepath):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of conditional logic to select a module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      7,
      565,
      82,
      11,
      2393,
      6978,
      2599
    ],
    "start_token": 734,
    "end_token": 746,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      26340,
      9156,
      284,
      2922,
      257,
      8265
    ],
    "label": "ml_signal",
    "reason": "Usage of conditional logic to select a module"
  },
  {
    "line": 139,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising a specific exception for invalid input",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 746,
    "end_token": 746,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      257,
      2176,
      6631,
      329,
      12515,
      5128
    ],
    "label": "best_practice",
    "reason": "Raising a specific exception for invalid input"
  },
  {
    "line": 138,
    "text": "        Load the serializable class from a filepath.",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8778,
      262,
      11389,
      13821,
      1398,
      422,
      257,
      2393,
      6978,
      13
    ],
    "start_token": 746,
    "end_token": 763,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type"
  },
  {
    "line": 149,
    "text": "        with open(filepath, \"rb\") as f:",
    "annotation": "\u2705 Best Practice: Convert path to Path object to ensure consistent handling of file paths",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      1280,
      7,
      7753,
      6978,
      11,
      366,
      26145,
      4943,
      355,
      277,
      25
    ],
    "start_token": 763,
    "end_token": 782,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3108,
      284,
      10644,
      2134,
      284,
      4155,
      6414,
      9041,
      286,
      2393,
      13532
    ],
    "label": "best_practice",
    "reason": "Convert path to Path object to ensure consistent handling of file paths"
  },
  {
    "line": 150,
    "text": "            object = cls.get_backend().load(f)",
    "annotation": "\ud83e\udde0 ML Signal: Checking if an object is serializable before dumping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2134,
      796,
      537,
      82,
      13,
      1136,
      62,
      1891,
      437,
      22446,
      2220,
      7,
      69,
      8
    ],
    "start_token": 782,
    "end_token": 807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      281,
      2134,
      318,
      11389,
      13821,
      878,
      30231
    ],
    "label": "ml_signal",
    "reason": "Checking if an object is serializable before dumping"
  },
  {
    "line": 153,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Using a method specific to the object's class for serialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 807,
    "end_token": 816,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      2446,
      2176,
      284,
      262,
      2134,
      338,
      1398,
      329,
      11389,
      1634
    ],
    "label": "ml_signal",
    "reason": "Using a method specific to the object's class for serialization"
  },
  {
    "line": 153,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Opening files without exception handling can lead to unhandled exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 816,
    "end_token": 825,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25522,
      3696,
      1231,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      13269
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Opening files without exception handling can lead to unhandled exceptions"
  },
  {
    "line": 153,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using pickle for serialization can lead to arbitrary code execution if loading untrusted data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 825,
    "end_token": 834,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      2298,
      293,
      329,
      11389,
      1634,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      611,
      11046,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using pickle for serialization can lead to arbitrary code execution if loading untrusted data"
  }
]
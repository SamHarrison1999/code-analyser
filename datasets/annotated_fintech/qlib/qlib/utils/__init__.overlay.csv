annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of pathlib for file system paths is recommended for better readability and functionality.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3108, 8019, 329, 2393, 1080, 13532, 318, 7151, 329, 1365, 1100, 1799, 290, 11244, 13]",0.5,3,best_practice,18,Use of pathlib for file system paths is recommended for better readability and functionality.,,0,import hashlib,"[11748, 12234, 8019]"
‚úÖ Best Practice: Type hints improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,5,best_practice,20,Type hints improve code readability and maintainability.,,3,import requests,"[11748, 7007]"
‚úÖ Best Practice: Use of version parsing to handle version comparisons is a good practice.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2196, 32096, 284, 5412, 2196, 17909, 318, 257, 922, 3357, 13]",0.5,10,best_practice,22,Use of version parsing to handle version comparisons is a good practice.,,5,import numpy as np,"[11748, 299, 32152, 355, 45941]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,15,best_practice,28,Grouping imports from the same module together improves readability.,,10,from .file import (,"[6738, 764, 7753, 1330, 357]"
‚úÖ Best Practice: Consistent logging setup is a good practice for debugging and monitoring.,"[26486, 227, 6705, 19939, 25, 3515, 7609, 18931, 9058, 318, 257, 922, 3357, 329, 28769, 290, 9904, 13]",0.5,20,best_practice,34,Consistent logging setup is a good practice for debugging and monitoring.,,15,from ..config import C,"[6738, 11485, 11250, 1330, 327]"
‚úÖ Best Practice: Using a logger instead of print statements is a good practice for production code.,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 2427, 286, 3601, 6299, 318, 257, 922, 3357, 329, 3227, 2438, 13]",0.5,25,best_practice,34,Using a logger instead of print statements is a good practice for production code.,,20,from ..config import C,"[6738, 11485, 11250, 1330, 327]"
üß† ML Signal: Checking for deprecated features can indicate code maintenance patterns.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 39224, 3033, 460, 7603, 2438, 9262, 7572, 13]",0.5,48,ml_signal,38,Checking for deprecated features can indicate code maintenance patterns.,,25,# MultiIndex.is_lexsorted() is a deprecated method in Pandas 1.3.0.,"[2, 15237, 15732, 13, 271, 62, 2588, 82, 9741, 3419, 318, 257, 39224, 2446, 287, 16492, 292, 352, 13, 18, 13, 15, 13]"
"üß† ML Signal: Function to get a Redis connection, indicating usage of Redis in the application","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 651, 257, 2297, 271, 4637, 11, 12739, 8748, 286, 2297, 271, 287, 262, 3586]",1.0,61,ml_signal,32,"Function to get a Redis connection, indicating usage of Redis in the application",,48,"    get_tmp_file_with_buffer,","[220, 220, 220, 651, 62, 22065, 62, 7753, 62, 4480, 62, 22252, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potential exposure of sensitive information if C.redis_password is not securely managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7111, 286, 8564, 1321, 611, 327, 13, 445, 271, 62, 28712, 318, 407, 30835, 5257]",1.0,62,sast_risk,33,Potential exposure of sensitive information if C.redis_password is not securely managed,Medium,61,),[8]
‚úÖ Best Practice: Use of a function to encapsulate the creation of a Redis connection for reusability,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2163, 284, 32652, 5039, 262, 6282, 286, 257, 2297, 271, 4637, 329, 302, 385, 1799]",0.5,67,best_practice,34,Use of a function to encapsulate the creation of a Redis connection for reusability,,62,from ..config import C,"[6738, 11485, 11250, 1330, 327]"
"‚úÖ Best Practice: Import statements for Union, Path, np, and pd are missing, which can lead to NameError.","[26486, 227, 6705, 19939, 25, 17267, 6299, 329, 4479, 11, 10644, 11, 45941, 11, 290, 279, 67, 389, 4814, 11, 543, 460, 1085, 284, 6530, 12331, 13]",0.5,67,best_practice,40,"Import statements for Union, Path, np, and pd are missing, which can lead to NameError.",,67,,[]
‚úÖ Best Practice: Ensure file_path is a Path object for consistent path operations.,"[26486, 227, 6705, 19939, 25, 48987, 2393, 62, 6978, 318, 257, 10644, 2134, 329, 6414, 3108, 4560, 13]",0.5,73,best_practice,42,Ensure file_path is a Path object for consistent path operations.,,67,#################### Server ####################,"[14468, 4242, 9652, 1303, 14468, 21017]"
‚úÖ Best Practice: Use 'with' statement for file operations to ensure proper resource management.,"[26486, 227, 6705, 19939, 25, 5765, 705, 4480, 6, 2643, 329, 2393, 4560, 284, 4155, 1774, 8271, 4542, 13]",1.0,84,best_practice,44,Use 'with' statement for file operations to ensure proper resource management.,,73,"    """"""get redis connection instance.""""""","[220, 220, 220, 37227, 1136, 2266, 271, 4637, 4554, 526, 15931]"
"‚ö†Ô∏è SAST Risk (Low): Assumes the file contains at least 4 bytes, which may not be the case.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 2393, 4909, 379, 1551, 604, 9881, 11, 543, 743, 407, 307, 262, 1339, 13]",1.0,100,sast_risk,46,"Assumes the file contains at least 4 bytes, which may not be the case.",Low,84,"        host=C.redis_host,","[220, 220, 220, 220, 220, 220, 220, 2583, 28, 34, 13, 445, 271, 62, 4774, 11]"
‚úÖ Best Practice: Use max to ensure start index is within valid range.,"[26486, 227, 6705, 19939, 25, 5765, 3509, 284, 4155, 923, 6376, 318, 1626, 4938, 2837, 13]",1.0,118,best_practice,48,Use max to ensure start index is within valid range.,,100,"        db=C.redis_task_db,","[220, 220, 220, 220, 220, 220, 220, 20613, 28, 34, 13, 445, 271, 62, 35943, 62, 9945, 11]"
‚úÖ Best Practice: Return an empty Series with specified dtype for consistency.,"[26486, 227, 6705, 19939, 25, 8229, 281, 6565, 7171, 351, 7368, 288, 4906, 329, 15794, 13]",1.0,118,best_practice,51,Return an empty Series with specified dtype for consistency.,,118,,[]
‚úÖ Best Practice: Calculate the correct position to seek in the file.,"[26486, 227, 6705, 19939, 25, 27131, 378, 262, 3376, 2292, 284, 5380, 287, 262, 2393, 13]",0.5,124,best_practice,53,Calculate the correct position to seek in the file.,,118,#################### Data ####################,"[14468, 4242, 6060, 1303, 14468, 21017]"
‚úÖ Best Practice: Calculate the number of elements to read.,"[26486, 227, 6705, 19939, 25, 27131, 378, 262, 1271, 286, 4847, 284, 1100, 13]",1.0,130,best_practice,53,Calculate the number of elements to read.,,124,#################### Data ####################,"[14468, 4242, 6060, 1303, 14468, 21017]"
‚ö†Ô∏è SAST Risk (Low): Assumes the file contains enough data for the requested count.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 2393, 4909, 1576, 1366, 329, 262, 9167, 954, 13]",0.5,136,sast_risk,53,Assumes the file contains enough data for the requested count.,Low,130,#################### Data ####################,"[14468, 4242, 6060, 1303, 14468, 21017]"
‚úÖ Best Practice: Create a Series with a specified index for clarity.,"[26486, 227, 6705, 19939, 25, 13610, 257, 7171, 351, 257, 7368, 6376, 329, 16287, 13]",0.5,142,best_practice,53,Create a Series with a specified index for clarity.,,136,#################### Data ####################,"[14468, 4242, 6060, 1303, 14468, 21017]"
‚úÖ Best Practice: Include type hints for the return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 262, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,142,best_practice,52,Include type hints for the return type for better readability and maintainability,,142,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,170,sast_risk,66,Use of assert for input validation can be bypassed if Python is run with optimizations,Low,142,"        data = np.frombuffer(f.read(4 * count), dtype=""<f"")","[220, 220, 220, 220, 220, 220, 220, 1366, 796, 45941, 13, 6738, 22252, 7, 69, 13, 961, 7, 19, 1635, 954, 828, 288, 4906, 2625, 27, 69, 4943]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,201,sast_risk,67,Use of assert for input validation can be bypassed if Python is run with optimizations,Low,170,"        series = pd.Series(data, index=pd.RangeIndex(si, si + len(data)))","[220, 220, 220, 220, 220, 220, 220, 2168, 796, 279, 67, 13, 27996, 7, 7890, 11, 6376, 28, 30094, 13, 17257, 15732, 7, 13396, 11, 33721, 1343, 18896, 7, 7890, 22305]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,205,sast_risk,72,Use of assert for input validation can be bypassed if Python is run with optimizations,Low,201,"    """"""","[220, 220, 220, 37227]"
"üß† ML Signal: Iterating over a range of years and quarters, a common pattern in financial or time-series data processing","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2837, 286, 812, 290, 13620, 11, 257, 2219, 3912, 287, 3176, 393, 640, 12, 25076, 1366, 7587]",0.5,205,ml_signal,75,"Iterating over a range of years and quarters, a common pattern in financial or time-series data processing",,205,,[]
üß† ML Signal: Function with conditional logic based on a boolean flag,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 26340, 9156, 1912, 319, 257, 25131, 6056]",1.0,211,ml_signal,78,Function with conditional logic based on a boolean flag,,205,    quarterly : bool,"[220, 220, 220, 27868, 1058, 20512]"
‚úÖ Best Practice: Use of integer division and modulus for calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 18253, 7297, 290, 953, 23515, 329, 16765]",1.0,227,best_practice,79,Use of integer division and modulus for calculations,,211,        will it return quarterly index or yearly index.,"[220, 220, 220, 220, 220, 220, 220, 481, 340, 1441, 27868, 6376, 393, 24169, 6376, 13]"
‚úÖ Best Practice: Use of constants for data types and NaN values improves maintainability and readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 38491, 329, 1366, 3858, 290, 11013, 45, 3815, 19575, 5529, 1799, 290, 1100, 1799, 13]",1.0,227,best_practice,107,Use of constants for data types and NaN values improves maintainability and readability.,,227,,[]
‚ö†Ô∏è SAST Risk (Low): Opening files without exception handling can lead to unhandled exceptions if the file does not exist.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 3696, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 611, 262, 2393, 857, 407, 2152, 13]",1.0,231,sast_risk,121,Opening files without exception handling can lead to unhandled exceptions if the file does not exist.,Low,227,    Parameters,"[220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Low): Unpacking without validation can lead to errors if the file content is not as expected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 791, 41291, 1231, 21201, 460, 1085, 284, 8563, 611, 262, 2393, 2695, 318, 407, 355, 2938, 13]",0.5,237,sast_risk,123,Unpacking without validation can lead to errors if the file content is not as expected.,Low,231,    period: int,"[220, 220, 220, 2278, 25, 493]"
‚ö†Ô∏è SAST Risk (Low): Using np.fromfile can lead to issues if the file is not properly formatted or if there are I/O errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 45941, 13, 6738, 7753, 460, 1085, 284, 2428, 611, 262, 2393, 318, 407, 6105, 39559, 393, 611, 612, 389, 314, 14, 46, 8563, 13]",0.5,264,sast_risk,124,Using np.fromfile can lead to issues if the file is not properly formatted or if there are I/O errors.,Low,237,"        date period represented by interger, e.g. 201901 corresponds to the first quarter in 2019","[220, 220, 220, 220, 220, 220, 220, 3128, 2278, 7997, 416, 987, 1362, 11, 304, 13, 70, 13, 13130, 486, 24866, 284, 262, 717, 3860, 287, 13130]"
üß† ML Signal: Use of a function to calculate period offset indicates a pattern for time-series data processing.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2163, 284, 15284, 2278, 11677, 9217, 257, 3912, 329, 640, 12, 25076, 1366, 7587, 13]",0.5,274,ml_signal,127,Use of a function to calculate period offset indicates a pattern for time-series data processing.,,264,    last_period_index: int,"[220, 220, 220, 938, 62, 41007, 62, 9630, 25, 493]"
‚ö†Ô∏è SAST Risk (Low): Opening files without exception handling can lead to unhandled exceptions if the file does not exist.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 3696, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 611, 262, 2393, 857, 407, 2152, 13]",1.0,278,sast_risk,134,Opening files without exception handling can lead to unhandled exceptions if the file does not exist.,Low,274,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Seeking and reading from a file without validation can lead to errors if the file content is not as expected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48160, 290, 3555, 422, 257, 2393, 1231, 21201, 460, 1085, 284, 8563, 611, 262, 2393, 2695, 318, 407, 355, 2938, 13]",0.5,299,sast_risk,137,Seeking and reading from a file without validation can lead to errors if the file content is not as expected.,Low,278,"            C.pit_record_type[""date""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 327, 13, 15544, 62, 22105, 62, 4906, 14692, 4475, 33116]"
‚ö†Ô∏è SAST Risk (Low): Unpacking without validation can lead to errors if the file content is not as expected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 791, 41291, 1231, 21201, 460, 1085, 284, 8563, 611, 262, 2393, 2695, 318, 407, 355, 2938, 13]",0.5,320,sast_risk,139,Unpacking without validation can lead to errors if the file content is not as expected.,Low,299,"            C.pit_record_type[""value""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 327, 13, 15544, 62, 22105, 62, 4906, 14692, 8367, 33116]"
üß† ML Signal: Returning a tuple of values is a common pattern for functions that need to provide multiple outputs.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 46545, 286, 3815, 318, 257, 2219, 3912, 329, 5499, 326, 761, 284, 2148, 3294, 23862, 13]",0.5,338,ml_signal,147,Returning a tuple of values is a common pattern for functions that need to provide multiple outputs.,,320,"    NAN_VALUE = C.pit_record_nan[""value""]","[220, 220, 220, 399, 1565, 62, 39488, 796, 327, 13, 15544, 62, 22105, 62, 12647, 14692, 8367, 8973]"
‚úÖ Best Practice: Include import statement for numpy to ensure np is defined,"[26486, 227, 6705, 19939, 25, 40348, 1330, 2643, 329, 299, 32152, 284, 4155, 45941, 318, 5447]",1.0,359,best_practice,139,Include import statement for numpy to ensure np is defined,,338,"            C.pit_record_type[""value""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 327, 13, 15544, 62, 22105, 62, 4906, 14692, 8367, 33116]"
üß† ML Signal: Use of numpy for array manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 7177, 17512]",1.0,378,ml_signal,148,Use of numpy for array manipulation,,359,"    NAN_INDEX = C.pit_record_nan[""index""]","[220, 220, 220, 399, 1565, 62, 12115, 6369, 796, 327, 13, 15544, 62, 22105, 62, 12647, 14692, 9630, 8973]"
üß† ML Signal: Use of numpy for boolean indexing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 25131, 6376, 278]",1.0,389,ml_signal,150,Use of numpy for boolean indexing,,378,    # find the first index of linked revisions,"[220, 220, 220, 1303, 1064, 262, 717, 6376, 286, 6692, 33315]"
üß† ML Signal: Use of numpy for in-place operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 287, 12, 5372, 4560]",1.0,409,ml_signal,152,Use of numpy for in-place operations,,389,"        with open(index_path, ""rb"") as fi:","[220, 220, 220, 220, 220, 220, 220, 351, 1280, 7, 9630, 62, 6978, 11, 366, 26145, 4943, 355, 25912, 25]"
üß† ML Signal: Use of numpy for advanced indexing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 6190, 6376, 278]",1.0,432,ml_signal,155,Use of numpy for advanced indexing,,409,"        offset = get_period_offset(first_year, period, quarterly)","[220, 220, 220, 220, 220, 220, 220, 11677, 796, 651, 62, 41007, 62, 28968, 7, 11085, 62, 1941, 11, 2278, 11, 27868, 8]"
‚úÖ Best Practice: Initialize variables at the start of the function for clarity.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287, 13]",1.0,455,best_practice,155,Initialize variables at the start of the function for clarity.,,432,"        offset = get_period_offset(first_year, period, quarterly)","[220, 220, 220, 220, 220, 220, 220, 11677, 796, 651, 62, 41007, 62, 28968, 7, 11085, 62, 1941, 11, 2278, 11, 27868, 8]"
‚úÖ Best Practice: Use a while loop for binary search to improve efficiency.,"[26486, 227, 6705, 19939, 25, 5765, 257, 981, 9052, 329, 13934, 2989, 284, 2987, 9332, 13]",1.0,470,best_practice,158,Use a while loop for binary search to improve efficiency.,,455,        _next = last_period_index,"[220, 220, 220, 220, 220, 220, 220, 4808, 19545, 796, 938, 62, 41007, 62, 9630]"
‚úÖ Best Practice: Use integer division for calculating mid to avoid float results.,"[26486, 227, 6705, 19939, 25, 5765, 18253, 7297, 329, 26019, 3095, 284, 3368, 12178, 2482, 13]",1.0,483,best_practice,160,Use integer division for calculating mid to avoid float results.,,470,    # load data following the `_next` link,"[220, 220, 220, 1303, 3440, 1366, 1708, 262, 4600, 62, 19545, 63, 2792]"
üß† ML Signal: Pattern for binary search in a list of tuples or lists.,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 13934, 2989, 287, 257, 1351, 286, 12777, 2374, 393, 8341, 13]",1.0,492,ml_signal,162,Pattern for binary search in a list of tuples or lists.,,483,    prev_next = _next,"[220, 220, 220, 8654, 62, 19545, 796, 4808, 19545]"
üß† ML Signal: Returning the index of the lower bound in a sorted list.,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 6376, 286, 262, 2793, 5421, 287, 257, 23243, 1351, 13]",0.5,512,ml_signal,168,Returning the index of the lower bound in a sorted list.,,492,            if date > cur_date_int:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3128, 1875, 1090, 62, 4475, 62, 600, 25]"
‚úÖ Best Practice: Initialize variables at the start of the function for clarity.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287, 13]",1.0,532,best_practice,168,Initialize variables at the start of the function for clarity.,,512,            if date > cur_date_int:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3128, 1875, 1090, 62, 4475, 62, 600, 25]"
‚úÖ Best Practice: Use a while loop for binary search to improve efficiency.,"[26486, 227, 6705, 19939, 25, 5765, 257, 981, 9052, 329, 13934, 2989, 284, 2987, 9332, 13]",1.0,549,best_practice,171,Use a while loop for binary search to improve efficiency.,,532,            _next = new_next,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 19545, 796, 649, 62, 19545]"
‚úÖ Best Practice: Use integer division for calculating mid to avoid float results.,"[26486, 227, 6705, 19939, 25, 5765, 18253, 7297, 329, 26019, 3095, 284, 3368, 12178, 2482, 13]",1.0,560,best_practice,173,Use integer division for calculating mid to avoid float results.,,549,"    return prev_value, prev_next","[220, 220, 220, 1441, 8654, 62, 8367, 11, 8654, 62, 19545]"
üß† ML Signal: Pattern of binary search algorithm.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 13934, 2989, 11862, 13]",1.0,560,ml_signal,175,Pattern of binary search algorithm.,,560,,[]
‚úÖ Best Practice: Return the result after the loop for a clear exit point.,"[26486, 227, 6705, 19939, 25, 8229, 262, 1255, 706, 262, 9052, 329, 257, 1598, 8420, 966, 13]",0.5,564,best_practice,180,Return the result after the loop for a clear exit point.,,560,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,568,best_practice,177,Consider adding type hints for function parameters and return type for better readability and maintainability.,,564,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Usage of a retry mechanism indicates a pattern for handling network instability.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1005, 563, 9030, 9217, 257, 3912, 329, 9041, 3127, 24842, 13]",0.5,568,ml_signal,179,Usage of a retry mechanism indicates a pattern for handling network instability.,,568,,[]
"‚ö†Ô∏è SAST Risk (Medium): No validation on the 'url' parameter, which could lead to SSRF (Server-Side Request Forgery) if user-controlled.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 319, 262, 705, 6371, 6, 11507, 11, 543, 714, 1085, 284, 6723, 32754, 357, 10697, 12, 24819, 19390, 1114, 7076, 8, 611, 2836, 12, 14401, 13]",0.5,581,sast_risk,183,"No validation on the 'url' parameter, which could lead to SSRF (Server-Side Request Forgery) if user-controlled.",Medium,568,        Input numpy 1D array,"[220, 220, 220, 220, 220, 220, 220, 23412, 299, 32152, 352, 35, 7177]"
"‚ö†Ô∏è SAST Risk (Low): The timeout is set to a low value, which might not be suitable for all network conditions.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 26827, 318, 900, 284, 257, 1877, 1988, 11, 543, 1244, 407, 307, 11080, 329, 477, 3127, 3403, 13]",0.5,594,sast_risk,183,"The timeout is set to a low value, which might not be suitable for all network conditions.",Low,581,        Input numpy 1D array,"[220, 220, 220, 220, 220, 220, 220, 23412, 299, 32152, 352, 35, 7177]"
"‚ö†Ô∏è SAST Risk (Low): Using assert for runtime checks can be disabled with optimization flags, leading to potential logic errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 11, 3756, 284, 2785, 9156, 8563, 13]",1.0,623,sast_risk,185,"Using assert for runtime checks can be disabled with optimization flags, leading to potential logic errors.",Low,594,    mask = np.isnan(arr.astype(float))  # np.isnan only works on np.float,"[220, 220, 220, 9335, 796, 45941, 13, 271, 12647, 7, 3258, 13, 459, 2981, 7, 22468, 4008, 220, 1303, 45941, 13, 271, 12647, 691, 2499, 319, 45941, 13, 22468]"
‚úÖ Best Practice: Use logging instead of print statements for better control over log levels and outputs.,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 6299, 329, 1365, 1630, 625, 2604, 2974, 290, 23862, 13]",0.5,629,best_practice,192,Use logging instead of print statements for better control over log levels and outputs.,,623,#################### Search ####################,"[14468, 4242, 11140, 1303, 14468, 21017]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic TimeoutError without specific context may make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 3862, 448, 12331, 1231, 2176, 4732, 743, 787, 28769, 2408, 13]",0.5,629,sast_risk,195,Raising a generic TimeoutError without specific context may make debugging difficult.,Low,629,,[]
‚úÖ Best Practice: Function name is descriptive and indicates its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 9217, 663, 4007]",0.5,629,best_practice,190,Function name is descriptive and indicates its purpose,,629,,[]
‚úÖ Best Practice: Checking the type of 'config' ensures the function handles different input types,"[26486, 227, 6705, 19939, 25, 39432, 262, 2099, 286, 705, 11250, 6, 19047, 262, 2163, 17105, 1180, 5128, 3858]",0.5,635,best_practice,192,Checking the type of 'config' ensures the function handles different input types,,629,#################### Search ####################,"[14468, 4242, 11140, 1303, 14468, 21017]"
‚úÖ Best Practice: Using 'safe' mode in YAML parsing to avoid executing arbitrary code,"[26486, 227, 6705, 19939, 25, 8554, 705, 21230, 6, 4235, 287, 575, 2390, 43, 32096, 284, 3368, 23710, 14977, 2438]",0.5,635,best_practice,195,Using 'safe' mode in YAML parsing to avoid executing arbitrary code,,635,,[]
‚ö†Ô∏è SAST Risk (Low): Potential path traversal if 'config' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 705, 11250, 6, 318, 2836, 12, 14401]",1.0,639,sast_risk,197,Potential path traversal if 'config' is user-controlled,Low,635,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Opening files without specifying encoding can lead to issues on different systems,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 3696, 1231, 31577, 21004, 460, 1085, 284, 2428, 319, 1180, 3341]",0.5,645,sast_risk,198,Opening files without specifying encoding can lead to issues on different systems,Low,639,    left = 0,"[220, 220, 220, 1364, 796, 657]"
‚úÖ Best Practice: Catching a broad exception and re-raising a more specific one improves error handling,"[26486, 227, 6705, 19939, 25, 327, 19775, 257, 3154, 6631, 290, 302, 12, 32741, 257, 517, 2176, 530, 19575, 4049, 9041]",0.5,654,best_practice,204,Catching a broad exception and re-raising a more specific one improves error handling,,645,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Function for preprocessing data by removing NaN values based on target variable,"[8582, 100, 254, 10373, 26484, 25, 15553, 329, 662, 36948, 1366, 416, 10829, 11013, 45, 3815, 1912, 319, 2496, 7885]",0.5,670,ml_signal,201,Function for preprocessing data by removing NaN values based on target variable,,654,        mid = (left + right) // 2,"[220, 220, 220, 220, 220, 220, 220, 3095, 796, 357, 9464, 1343, 826, 8, 3373, 362]"
üß† ML Signal: Identifying rows with NaN values in the target variable,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 15274, 351, 11013, 45, 3815, 287, 262, 2496, 7885]",0.5,684,ml_signal,203,Identifying rows with NaN values in the target variable,,670,            right = mid,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 826, 796, 3095]"
‚úÖ Best Practice: Apply the same mask to both x and y to ensure alignment,"[26486, 227, 6705, 19939, 25, 27967, 262, 976, 9335, 284, 1111, 2124, 290, 331, 284, 4155, 19114]",0.5,700,best_practice,205,Apply the same mask to both x and y to ensure alignment,,684,            left = mid + 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1364, 796, 3095, 1343, 352]"
‚úÖ Best Practice: Apply the same mask to both x and y to ensure alignment,"[26486, 227, 6705, 19939, 25, 27967, 262, 976, 9335, 284, 1111, 2124, 290, 331, 284, 4155, 19114]",0.5,700,best_practice,207,Apply the same mask to both x and y to ensure alignment,,700,,[]
‚úÖ Best Practice: Check if weight is not None before applying the mask,"[26486, 227, 6705, 19939, 25, 6822, 611, 3463, 318, 407, 6045, 878, 11524, 262, 9335]",0.5,713,best_practice,209,Check if weight is not None before applying the mask,,700,"def upper_bound(data, val, level=0):","[4299, 6727, 62, 7784, 7, 7890, 11, 1188, 11, 1241, 28, 15, 2599]"
‚úÖ Best Practice: Apply the same mask to weight if it is provided,"[26486, 227, 6705, 19939, 25, 27967, 262, 976, 9335, 284, 3463, 611, 340, 318, 2810]",0.5,713,best_practice,211,Apply the same mask to weight if it is provided,,713,,[]
‚úÖ Best Practice: Return all modified variables to maintain function consistency,"[26486, 227, 6705, 19939, 25, 8229, 477, 9518, 9633, 284, 5529, 2163, 15794]",0.5,717,best_practice,213,Return all modified variables to maintain function consistency,,713,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Consider importing only the necessary functions from a module to improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 33332, 691, 262, 3306, 5499, 422, 257, 8265, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,717,best_practice,208,Consider importing only the necessary functions from a module to improve code readability and maintainability,,717,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure that the json module is imported to avoid runtime errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 33918, 8265, 318, 17392, 284, 3368, 19124, 8563]",0.5,730,sast_risk,209,Ensure that the json module is imported to avoid runtime errors,Low,717,"def upper_bound(data, val, level=0):","[4299, 6727, 62, 7784, 7, 7890, 11, 1188, 11, 1241, 28, 15, 2599]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the hashlib module is imported to avoid runtime errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 12234, 8019, 8265, 318, 17392, 284, 3368, 19124, 8563]",0.5,730,sast_risk,211,Ensure that the hashlib module is imported to avoid runtime errors,Low,730,,[]
‚ö†Ô∏è SAST Risk (Medium): MD5 is not cryptographically secure and should not be used for security-sensitive purposes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10670, 20, 318, 407, 8194, 33145, 5713, 290, 815, 407, 307, 973, 329, 2324, 12, 30176, 4959]",0.5,748,sast_risk,212,MD5 is not cryptographically secure and should not be used for security-sensitive purposes,Medium,730,    for single field list use `bisect.bisect_right` instead,"[220, 220, 220, 329, 2060, 2214, 1351, 779, 4600, 41907, 478, 13, 41907, 478, 62, 3506, 63, 2427]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",0.5,748,best_practice,211,Consider adding a docstring to describe the function's purpose and parameters.,,748,,[]
‚úÖ Best Practice: Check for type before conversion to ensure correct data type handling.,"[26486, 227, 6705, 19939, 25, 6822, 329, 2099, 878, 11315, 284, 4155, 3376, 1366, 2099, 9041, 13]",0.5,752,best_practice,213,Check for type before conversion to ensure correct data type handling.,,748,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use raw string for regex patterns to avoid issues with escape sequences.,"[26486, 227, 6705, 19939, 25, 5765, 8246, 4731, 329, 40364, 7572, 284, 3368, 2428, 351, 6654, 16311, 13]",1.0,761,best_practice,215,Use raw string for regex patterns to avoid issues with escape sequences.,,752,    right = len(data),"[220, 220, 220, 826, 796, 18896, 7, 7890, 8]"
üß† ML Signal: Iterating over patterns and replacements indicates a transformation process.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 7572, 290, 36205, 9217, 257, 13389, 1429, 13]",0.5,770,ml_signal,215,Iterating over patterns and replacements indicates a transformation process.,,761,    right = len(data),"[220, 220, 220, 826, 796, 18896, 7, 7890, 8]"
üß† ML Signal: Use of regex with special characters suggests pattern matching.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 40364, 351, 2041, 3435, 5644, 3912, 12336, 13]",0.5,770,ml_signal,223,Use of regex with special characters suggests pattern matching.,,770,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure 're' module is imported to avoid runtime errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 260, 6, 8265, 318, 17392, 284, 3368, 19124, 8563, 13]",0.5,789,sast_risk,226,Ensure 're' module is imported to avoid runtime errors.,Low,770,"def requests_with_retry(url, retry=5, **kwargs):","[4299, 7007, 62, 4480, 62, 1186, 563, 7, 6371, 11, 1005, 563, 28, 20, 11, 12429, 46265, 22046, 2599]"
"‚úÖ Best Practice: Include a detailed docstring explaining the function's purpose, parameters, and return value.","[26486, 227, 6705, 19939, 25, 40348, 257, 6496, 2205, 8841, 11170, 262, 2163, 338, 4007, 11, 10007, 11, 290, 1441, 1988, 13]",0.5,808,best_practice,226,"Include a detailed docstring explaining the function's purpose, parameters, and return value.",,789,"def requests_with_retry(url, retry=5, **kwargs):","[4299, 7007, 62, 4480, 62, 1186, 563, 7, 6371, 11, 1005, 563, 28, 20, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Inheriting from json.JSONEncoder to customize JSON encoding,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 33918, 13, 40386, 27195, 12342, 284, 24184, 19449, 21004]",1.0,831,best_practice,231,Inheriting from json.JSONEncoder to customize JSON encoding,,808,"            assert res.status_code in {200, 206}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6818, 581, 13, 13376, 62, 8189, 287, 1391, 2167, 11, 27253, 92]"
‚úÖ Best Practice: Use isinstance for type checking to handle multiple types,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 329, 2099, 10627, 284, 5412, 3294, 3858]",0.5,844,best_practice,233,Use isinstance for type checking to handle multiple types,,831,        except AssertionError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 2195, 861, 295, 12331, 25]"
‚úÖ Best Practice: Call the superclass method for unhandled types,"[26486, 227, 6705, 19939, 25, 4889, 262, 2208, 4871, 2446, 329, 555, 38788, 3858]",0.5,868,best_practice,236,Call the superclass method for unhandled types,,844,"            log.warning(""exception encountered {}"".format(e))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2604, 13, 43917, 7203, 1069, 4516, 12956, 23884, 1911, 18982, 7, 68, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential data exposure if src_data contains sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 7111, 611, 12351, 62, 7890, 4909, 8564, 1321]",0.5,882,sast_risk,238,Potential data exposure if src_data contains sensitive information,Low,868,"    raise TimeoutError(""ERROR: requests failed!"")","[220, 220, 220, 5298, 3862, 448, 12331, 7203, 24908, 25, 7007, 4054, 2474, 8]"
üß† ML Signal: Usage of json.dumps with custom encoder,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 33918, 13, 67, 8142, 351, 2183, 2207, 12342]",0.5,882,ml_signal,239,Usage of json.dumps with custom encoder,,882,,[]
‚ö†Ô∏è SAST Risk (Low): Potential data exposure if dst_data contains sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 7111, 611, 29636, 62, 7890, 4909, 8564, 1321]",0.5,889,sast_risk,241,Potential data exposure if dst_data contains sensitive information,Low,882,#################### Parse ####################,"[14468, 4242, 2547, 325, 1303, 14468, 21017]"
üß† ML Signal: Usage of json.dumps with custom encoder,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 33918, 13, 67, 8142, 351, 2183, 2207, 12342]",0.5,896,ml_signal,242,Usage of json.dumps with custom encoder,,889,def parse_config(config):,"[4299, 21136, 62, 11250, 7, 11250, 2599]"
üß† ML Signal: Usage of difflib.ndiff to compute differences between strings,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 814, 8019, 13, 358, 733, 284, 24061, 5400, 1022, 13042]",1.0,903,ml_signal,242,Usage of difflib.ndiff to compute differences between strings,,896,def parse_config(config):,"[4299, 21136, 62, 11250, 7, 11250, 2599]"
‚úÖ Best Practice: List comprehension for filtering specific lines,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 25431, 2176, 3951]",0.5,912,best_practice,246,List comprehension for filtering specific lines,,903,    # Check whether config is file,"[220, 220, 220, 1303, 6822, 1771, 4566, 318, 2393]"
‚úÖ Best Practice: Return statement at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 2643, 379, 262, 886, 286, 262, 2163]",0.5,925,best_practice,248,Return statement at the end of the function,,912,    if os.path.exists(config):,"[220, 220, 220, 611, 28686, 13, 6978, 13, 1069, 1023, 7, 11250, 2599]"
‚úÖ Best Practice: Use of deepcopy to avoid modifying the original list,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 3368, 30620, 262, 2656, 1351]",0.5,934,best_practice,246,Use of deepcopy to avoid modifying the original list,,925,    # Check whether config is file,"[220, 220, 220, 1303, 6822, 1771, 4566, 318, 2393]"
‚úÖ Best Practice: Use of set to remove duplicates,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 4781, 14184, 16856]",1.0,947,best_practice,248,Use of set to remove duplicates,,934,    if os.path.exists(config):,"[220, 220, 220, 611, 28686, 13, 6978, 13, 1069, 1023, 7, 11250, 2599]"
"üß† ML Signal: Sorting based on original order, indicating importance of order","[8582, 100, 254, 10373, 26484, 25, 311, 24707, 1912, 319, 2656, 1502, 11, 12739, 6817, 286, 1502]",0.5,966,ml_signal,250,"Sorting based on original order, indicating importance of order",,947,            return yaml.load(f),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 331, 43695, 13, 2220, 7, 69, 8]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,985,best_practice,250,Add a docstring to describe the function's purpose and parameters,,966,            return yaml.load(f),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 331, 43695, 13, 2220, 7, 69, 8]"
‚úÖ Best Practice: Use isinstance to check the type of 'fields',"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 262, 2099, 286, 705, 25747, 6]",1.0,1006,best_practice,255,Use isinstance to check the type of 'fields',,985,"        raise ValueError(""cannot parse config!"") from base_exp","[220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 66, 34574, 21136, 4566, 2474, 8, 422, 2779, 62, 11201]"
‚úÖ Best Practice: Use str.replace to remove spaces from a string,"[26486, 227, 6705, 19939, 25, 5765, 965, 13, 33491, 284, 4781, 9029, 422, 257, 4731]",1.0,1006,best_practice,257,Use str.replace to remove spaces from a string,,1006,,[]
‚úÖ Best Practice: List comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 35327, 290, 31744, 2438]",1.0,1012,best_practice,258,List comprehension for concise and readable code,,1006,#################### Other ####################,"[14468, 4242, 3819, 1303, 14468, 21017]"
‚úÖ Best Practice: Use isinstance to check the type of each element in 'fields',"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 2198, 262, 2099, 286, 1123, 5002, 287, 705, 25747, 6]",1.0,1018,best_practice,258,Use isinstance to check the type of each element in 'fields',,1012,#################### Other ####################,"[14468, 4242, 3819, 1303, 14468, 21017]"
‚úÖ Best Practice: Use type hinting with List and Tuple from typing module for better readability and type checking,"[26486, 227, 6705, 19939, 25, 5765, 2099, 9254, 278, 351, 7343, 290, 309, 29291, 422, 19720, 8265, 329, 1365, 1100, 1799, 290, 2099, 10627]",1.0,1024,best_practice,258,Use type hinting with List and Tuple from typing module for better readability and type checking,,1018,#################### Other ####################,"[14468, 4242, 3819, 1303, 14468, 21017]"
"üß† ML Signal: Function returns a sorted list, indicating a pattern of data normalization","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 23243, 1351, 11, 12739, 257, 3912, 286, 1366, 3487, 1634]",1.0,1038,ml_signal,263,"Function returns a sorted list, indicating a pattern of data normalization",,1024,"    # Get related rows from x, y, weight.","[220, 220, 220, 1303, 3497, 3519, 15274, 422, 2124, 11, 331, 11, 3463, 13]"
‚úÖ Best Practice: Check for multiple types using isinstance for flexibility and readability,"[26486, 227, 6705, 19939, 25, 6822, 329, 3294, 3858, 1262, 318, 39098, 329, 13688, 290, 1100, 1799]",0.5,1051,best_practice,267,Check for multiple types using isinstance for flexibility and readability,,1038,        weight = weight[mask],"[220, 220, 220, 220, 220, 220, 220, 3463, 796, 3463, 58, 27932, 60]"
‚úÖ Best Practice: Convert to list before sorting to ensure compatibility,"[26486, 227, 6705, 19939, 25, 38240, 284, 1351, 878, 29407, 284, 4155, 17764]",0.5,1060,best_practice,268,Convert to list before sorting to ensure compatibility,,1051,"    return x, y, weight","[220, 220, 220, 1441, 2124, 11, 331, 11, 3463]"
‚úÖ Best Practice: Use of 'in' to check for key existence in dictionary,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 259, 6, 284, 2198, 329, 1994, 6224, 287, 22155]",0.5,1067,best_practice,271,Use of 'in' to check for key existence in dictionary,,1060,def hash_args(*args):,"[4299, 12234, 62, 22046, 46491, 22046, 2599]"
‚úÖ Best Practice: Dictionary comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 28261, 35915, 329, 35327, 290, 31744, 2438]",0.5,1067,best_practice,276,Dictionary comprehension for concise and readable code,,1067,,[]
‚úÖ Best Practice: Import statements should be at the top of the file.,"[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 379, 262, 1353, 286, 262, 2393, 13]",0.5,1087,best_practice,281,Import statements should be at the top of the file.,,1067,"    # - $open+$close -> Feature(""open"")+Feature(""close"")","[220, 220, 220, 1303, 532, 720, 9654, 10, 3, 19836, 4613, 27018, 7203, 9654, 4943, 10, 38816, 7203, 19836, 4943]"
üß† ML Signal: Usage of date comparison to determine tradability.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3128, 7208, 284, 5004, 2083, 1799, 13]",1.0,1106,ml_signal,283,Usage of date comparison to determine tradability.,,1087,"    # - $close@5min -> Feature(""close"", ""5min"")","[220, 220, 220, 1303, 532, 720, 19836, 31, 20, 1084, 4613, 27018, 7203, 19836, 1600, 366, 20, 1084, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues when converting dates to strings.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 618, 23202, 9667, 284, 13042, 13]",0.5,1106,sast_risk,284,Potential timezone issues when converting dates to strings.,Low,1106,,[]
‚úÖ Best Practice: Importing modules inside functions can reduce memory usage and improve startup time,"[26486, 227, 6705, 19939, 25, 17267, 278, 13103, 2641, 5499, 460, 4646, 4088, 8748, 290, 2987, 13693, 640]",0.5,1136,best_practice,292,Importing modules inside functions can reduce memory usage and improve startup time,,1106,"    chinese_punctuation_regex = r""\u3001\uff1a\uff08\uff09""","[220, 220, 220, 442, 3762, 62, 79, 16260, 2288, 62, 260, 25636, 796, 374, 1, 59, 84, 6200, 16, 59, 1648, 16, 64, 59, 1648, 2919, 59, 1648, 2931, 1]"
üß† ML Signal: Usage of a function to calculate a date based on a shift value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 15284, 257, 3128, 1912, 319, 257, 6482, 1988]",0.5,1144,ml_signal,294,Usage of a function to calculate a date based on a shift value,,1136,        (,"[220, 220, 220, 220, 220, 220, 220, 357]"
üß† ML Signal: Usage of a function to calculate a date based on a shift value,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 15284, 257, 3128, 1912, 319, 257, 6482, 1988]",0.5,1164,ml_signal,296,Usage of a function to calculate a date based on a shift value,,1144,"            r'PFeature(""\1"")',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 374, 6, 47, 38816, 7203, 59, 16, 4943, 3256]"
üß† ML Signal: Usage of a calendar function to generate a date range,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 11845, 2163, 284, 7716, 257, 3128, 2837]",0.5,1179,ml_signal,297,Usage of a calendar function to generate a date range,,1164,"        ),  # $$ must be before $","[220, 220, 220, 220, 220, 220, 220, 10612, 220, 1303, 32382, 1276, 307, 878, 720]"
‚úÖ Best Practice: Importing modules at the top of the file is a best practice for readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 13103, 379, 262, 1353, 286, 262, 2393, 318, 257, 1266, 3357, 329, 1100, 1799, 290, 5529, 1799, 13]",1.0,1217,best_practice,318,Importing modules at the top of the file is a best practice for readability and maintainability.,,1179,"                return o.strftime(""%Y-%m-%d %H:%M:%S"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 267, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4064, 39, 25, 4, 44, 25, 4, 50, 4943]"
"üß† ML Signal: Conversion of input to a specific type (e.g., pandas.Timestamp) can be a signal for data preprocessing.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 5128, 284, 257, 2176, 2099, 357, 68, 13, 70, 1539, 19798, 292, 13, 14967, 27823, 8, 460, 307, 257, 6737, 329, 1366, 662, 36948, 13]",1.0,1217,ml_signal,320,"Conversion of input to a specific type (e.g., pandas.Timestamp) can be a signal for data preprocessing.",,1217,,[]
"‚ö†Ô∏è SAST Risk (Low): Potentially raises a ValueError if trading_date is not in cal, which could be handled more gracefully.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 12073, 257, 11052, 12331, 611, 7313, 62, 4475, 318, 407, 287, 2386, 11, 543, 714, 307, 12118, 517, 11542, 2759, 13]",0.5,1248,sast_risk,324,"Potentially raises a ValueError if trading_date is not in cal, which could be handled more gracefully.",Low,1217,"    changes = [line for line in diff if line.startswith(""+ "") or line.startswith(""- "")]","[220, 220, 220, 2458, 796, 685, 1370, 329, 1627, 287, 814, 611, 1627, 13, 9688, 2032, 342, 7203, 10, 366, 8, 393, 1627, 13, 9688, 2032, 342, 7203, 12, 366, 15437]"
üß† ML Signal: Use of bisect to find index positions can indicate patterns in data access or manipulation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 47457, 478, 284, 1064, 6376, 6116, 460, 7603, 7572, 287, 1366, 1895, 393, 17512, 13]",1.0,1248,ml_signal,326,Use of bisect to find index positions can indicate patterns in data access or manipulation.,,1248,,[]
"‚ö†Ô∏è SAST Risk (Low): Raises a ValueError for unsupported align values, which could be validated earlier.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 257, 11052, 12331, 329, 24222, 10548, 3815, 11, 543, 714, 307, 31031, 2961, 13]",0.5,1252,sast_risk,333,"Raises a ValueError for unsupported align values, which could be validated earlier.",Low,1248,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of np.clip to handle out-of-bound indices can be a signal for data boundary management.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 15036, 284, 5412, 503, 12, 1659, 12, 7784, 36525, 460, 307, 257, 6737, 329, 1366, 18645, 4542, 13]",0.5,1252,ml_signal,338,Use of np.clip to handle out-of-bound indices can be a signal for data boundary management.,,1252,,[]
"‚ö†Ô∏è SAST Risk (Low): Raises an IndexError if shift_index is out of range, which could be handled more gracefully.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 281, 12901, 12331, 611, 6482, 62, 9630, 318, 503, 286, 2837, 11, 543, 714, 307, 12118, 517, 11542, 2759, 13]",0.5,1261,sast_risk,343,"Raises an IndexError if shift_index is out of range, which could be handled more gracefully.",Low,1252,    :return: list or str,"[220, 220, 220, 1058, 7783, 25, 1351, 393, 965]"
‚úÖ Best Practice: Docstring should match the function signature and describe all parameters accurately,"[26486, 227, 6705, 19939, 25, 14432, 8841, 815, 2872, 262, 2163, 9877, 290, 6901, 477, 10007, 14351]",0.5,1261,best_practice,338,Docstring should match the function signature and describe all parameters accurately,,1261,,[]
"üß† ML Signal: Function returns a value based on input parameters, useful for learning patterns in date manipulation","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 1988, 1912, 319, 5128, 10007, 11, 4465, 329, 4673, 7572, 287, 3128, 17512]",0.5,1265,ml_signal,344,"Function returns a value based on input parameters, useful for learning patterns in date manipulation",,1261,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Docstring should match the function parameters for clarity,"[26486, 227, 6705, 19939, 25, 14432, 8841, 815, 2872, 262, 2163, 10007, 329, 16287]",0.5,1276,best_practice,345,Docstring should match the function parameters for clarity,,1265,"    if isinstance(fields, str):","[220, 220, 220, 611, 318, 39098, 7, 25747, 11, 965, 2599]"
"üß† ML Signal: Function calls another function, indicating a dependency or relationship","[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 1194, 2163, 11, 12739, 257, 20203, 393, 2776]",0.5,1284,ml_signal,351,"Function calls another function, indicating a dependency or relationship",,1276,"    """"""normalize cache fields","[220, 220, 220, 37227, 11265, 1096, 12940, 7032]"
‚úÖ Best Practice: Import statements should be at the top of the file for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 379, 262, 1353, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1284,best_practice,361,Import statements should be at the top of the file for better readability and maintainability.,,1284,,[]
"üß† ML Signal: Usage of a calendar function to get trading days, which could be a feature for financial models.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 11845, 2163, 284, 651, 7313, 1528, 11, 543, 714, 307, 257, 3895, 329, 3176, 4981, 13]",0.5,1288,ml_signal,363,"Usage of a calendar function to get trading days, which could be a feature for financial models.",,1284,"    """"""","[220, 220, 220, 37227]"
"‚ö†Ô∏è SAST Risk (Low): Potential risk if `end_date` is not a valid date string, which could cause `pd.Timestamp` to raise an error.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 437, 62, 4475, 63, 318, 407, 257, 4938, 3128, 4731, 11, 543, 714, 2728, 4600, 30094, 13, 14967, 27823, 63, 284, 5298, 281, 4049, 13]",0.5,1315,sast_risk,364,"Potential risk if `end_date` is not a valid date string, which could cause `pd.Timestamp` to raise an error.",Low,1288,"    if isinstance(instruments, (list, tuple, pd.Index, np.ndarray)):","[220, 220, 220, 611, 318, 39098, 7, 259, 2536, 2886, 11, 357, 4868, 11, 46545, 11, 279, 67, 13, 15732, 11, 45941, 13, 358, 18747, 8, 2599]"
‚ö†Ô∏è SAST Risk (Low): Use of `log.warning` without checking if `log` is properly configured could lead to unlogged warnings.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4600, 6404, 13, 43917, 63, 1231, 10627, 611, 4600, 6404, 63, 318, 6105, 17839, 714, 1085, 284, 555, 6404, 2004, 14601, 13]",0.5,1329,sast_risk,368,Use of `log.warning` without checking if `log` is properly configured could lead to unlogged warnings.,Low,1315,"        if ""market"" in instruments:","[220, 220, 220, 220, 220, 220, 220, 611, 366, 10728, 1, 287, 12834, 25]"
‚úÖ Best Practice: Add import statement for re module,"[26486, 227, 6705, 19939, 25, 3060, 1330, 2643, 329, 302, 8265]",1.0,1338,best_practice,370,Add import statement for re module,,1329,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use raw string for regex patterns to avoid potential escape sequence issues,"[26486, 227, 6705, 19939, 25, 5765, 8246, 4731, 329, 40364, 7572, 284, 3368, 2785, 6654, 8379, 2428]",0.5,1347,best_practice,379,Use raw string for regex patterns to avoid potential escape sequence issues,,1338,        current date,"[220, 220, 220, 220, 220, 220, 220, 1459, 3128]"
‚ö†Ô∏è SAST Risk (Medium): Potential AttributeError if re.search returns None and group() is called,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 3460, 4163, 12331, 611, 302, 13, 12947, 5860, 6045, 290, 1448, 3419, 318, 1444]",0.5,1366,sast_risk,381,Potential AttributeError if re.search returns None and group() is called,Medium,1347,    from ..data import D  # pylint: disable=C0415,"[220, 220, 220, 422, 11485, 7890, 1330, 360, 220, 1303, 279, 2645, 600, 25, 15560, 28, 34, 3023, 1314]"
"üß† ML Signal: Function returns a specific pattern extracted from input, useful for pattern recognition models","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 2176, 3912, 21242, 422, 5128, 11, 4465, 329, 3912, 9465, 4981]",0.5,1366,ml_signal,382,"Function returns a specific pattern extracted from input, useful for pattern recognition models",,1366,,[]
‚ö†Ô∏è SAST Risk (Low): Potential misuse of function if both parameters are None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 2163, 611, 1111, 10007, 389, 6045]",0.5,1366,sast_risk,397,Potential misuse of function if both parameters are None,Low,1366,,[]
üß† ML Signal: Usage of datetime index for time series data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4818, 8079, 6376, 329, 640, 2168, 1366]",0.5,1366,ml_signal,399,Usage of datetime index for time series data,,1366,,[]
üß† ML Signal: Conversion of dates to pd.Timestamp for consistency,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 9667, 284, 279, 67, 13, 14967, 27823, 329, 15794]",1.0,1392,ml_signal,401,Conversion of dates to pd.Timestamp for consistency,,1366,"    end = get_date_by_shift(trading_date, right_shift, future=future)","[220, 220, 220, 886, 796, 651, 62, 4475, 62, 1525, 62, 30846, 7, 2213, 4980, 62, 4475, 11, 826, 62, 30846, 11, 2003, 28, 37443, 8]"
‚úÖ Best Practice: Clear variable naming for date boundaries,"[26486, 227, 6705, 19939, 25, 11459, 7885, 19264, 329, 3128, 13215]",0.5,1410,best_practice,403,Clear variable naming for date boundaries,,1392,"    calendar = D.calendar(start, end, future=future)","[220, 220, 220, 11845, 796, 360, 13, 9948, 9239, 7, 9688, 11, 886, 11, 2003, 28, 37443, 8]"
üß† ML Signal: Handling of date conversion and arithmetic,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 3128, 11315, 290, 34768]",0.5,1415,ml_signal,409,Handling of date conversion and arithmetic,,1410,"    shift,","[220, 220, 220, 6482, 11]"
‚úÖ Best Practice: Use of bisect for efficient index finding,"[26486, 227, 6705, 19939, 25, 5765, 286, 47457, 478, 329, 6942, 6376, 4917]",0.5,1436,best_practice,416,Use of bisect for efficient index finding,,1415,"        e.g. : shift == 1,  return next trading date","[220, 220, 220, 220, 220, 220, 220, 304, 13, 70, 13, 1058, 6482, 6624, 352, 11, 220, 1441, 1306, 7313, 3128]"
‚úÖ Best Practice: Sorting index for predictable slicing,"[26486, 227, 6705, 19939, 25, 311, 24707, 6376, 329, 20039, 49289]",0.5,1441,best_practice,418,Sorting index for predictable slicing,,1436,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use of loc for slicing with multi-index,"[26486, 227, 6705, 19939, 25, 5765, 286, 1179, 329, 49289, 351, 5021, 12, 9630]",0.5,1446,best_practice,418,Use of loc for slicing with multi-index,,1441,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Include necessary imports for Union and pd.Timestamp,"[26486, 227, 6705, 19939, 25, 40348, 3306, 17944, 329, 4479, 290, 279, 67, 13, 14967, 27823]",1.0,1469,best_practice,417,Include necessary imports for Union and pd.Timestamp,,1446,"               shift == -1, return previous trading date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6482, 6624, 532, 16, 11, 1441, 2180, 7313, 3128]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 't' is not a valid date string or timestamp,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 83, 6, 318, 407, 257, 4938, 3128, 4731, 393, 41033]",1.0,1500,sast_risk,434,Potential risk if 't' is not a valid date string or timestamp,Low,1469,"            raise ValueError(""{} is not trading day!"".format(str(trading_date)))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 90, 92, 318, 407, 7313, 1110, 48220, 18982, 7, 2536, 7, 2213, 4980, 62, 4475, 22305]"
‚úÖ Best Practice: Initialize variables at the start of the function for clarity.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287, 13]",1.0,1531,best_practice,434,Initialize variables at the start of the function for clarity.,,1500,"            raise ValueError(""{} is not trading day!"".format(str(trading_date)))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 90, 92, 318, 407, 7313, 1110, 48220, 18982, 7, 2536, 7, 2213, 4980, 62, 4475, 22305]"
üß† ML Signal: Usage of external service connection (Redis) can indicate caching behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2139, 4637, 357, 7738, 271, 8, 460, 7603, 40918, 4069, 13]",1.0,1557,ml_signal,437,Usage of external service connection (Redis) can indicate caching behavior.,,1531,"        _index = bisect.bisect_right(cal, trading_date) - 1","[220, 220, 220, 220, 220, 220, 220, 4808, 9630, 796, 47457, 478, 13, 41907, 478, 62, 3506, 7, 9948, 11, 7313, 62, 4475, 8, 532, 352]"
üß† ML Signal: Attempting to use a client method on a Redis connection.,"[8582, 100, 254, 10373, 26484, 25, 25770, 278, 284, 779, 257, 5456, 2446, 319, 257, 2297, 271, 4637, 13]",1.0,1562,ml_signal,440,Attempting to use a client method on a Redis connection.,,1557,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Handling specific exceptions can prevent application crashes but may hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 49500, 2176, 13269, 460, 2948, 3586, 17616, 475, 743, 7808, 584, 2428, 13]",1.0,1580,sast_risk,443,Handling specific exceptions can prevent application crashes but may hide other issues.,Low,1562,    if shift_index < 0 or shift_index >= len(cal):,"[220, 220, 220, 611, 6482, 62, 9630, 1279, 657, 393, 6482, 62, 9630, 18189, 18896, 7, 9948, 2599]"
‚úÖ Best Practice: Ensure resources are released by closing connections in a finally block.,"[26486, 227, 6705, 19939, 25, 48987, 4133, 389, 2716, 416, 9605, 8787, 287, 257, 3443, 2512, 13]",1.0,1589,best_practice,446,Ensure resources are released by closing connections in a finally block.,,1580,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Consider importing Path from pathlib at the top of the file for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 10644, 422, 3108, 8019, 379, 262, 1353, 286, 262, 2393, 329, 16287, 13]",1.0,1601,best_practice,444,Consider importing Path from pathlib at the top of the file for clarity.,,1589,        if clip_shift:,"[220, 220, 220, 220, 220, 220, 220, 611, 10651, 62, 30846, 25]"
‚úÖ Best Practice: Using Path().expanduser() is a good practice to handle user directories.,"[26486, 227, 6705, 19939, 25, 8554, 10644, 22446, 11201, 392, 7220, 3419, 318, 257, 922, 3357, 284, 5412, 2836, 29196, 13]",0.5,1610,best_practice,446,Using Path().expanduser() is a good practice to handle user directories.,,1601,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Using joinpath for path concatenation improves readability.,"[26486, 227, 6705, 19939, 25, 8554, 4654, 6978, 329, 3108, 1673, 36686, 341, 19575, 1100, 1799, 13]",0.5,1610,best_practice,450,Using joinpath for path concatenation improves readability.,,1610,,[]
‚ö†Ô∏è SAST Risk (Low): Checking if a directory exists and is not empty could be prone to TOCTOU race conditions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 39432, 611, 257, 8619, 7160, 290, 318, 407, 6565, 714, 307, 17592, 284, 5390, 4177, 2606, 3234, 3403, 13]",0.5,1619,sast_risk,455,Checking if a directory exists and is not empty could be prone to TOCTOU race conditions.,Low,1610,        current date,"[220, 220, 220, 220, 220, 220, 220, 1459, 3128]"
"‚úÖ Best Practice: Using ""_future"" in _calendar.name is a clear and readable condition.","[26486, 227, 6705, 19939, 25, 8554, 45434, 37443, 1, 287, 4808, 9948, 9239, 13, 3672, 318, 257, 1598, 290, 31744, 4006, 13]",0.5,1619,best_practice,459,"Using ""_future"" in _calendar.name is a clear and readable condition.",,1619,,[]
üß† ML Signal: Use of lambda functions indicates functional programming patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 9217, 10345, 8300, 7572, 13]",0.5,1627,ml_signal,461,Use of lambda functions indicates functional programming patterns.,,1619,"    """"""get previous trading date","[220, 220, 220, 37227, 1136, 2180, 7313, 3128]"
‚ö†Ô∏è SAST Risk (Low): Reading files without validation can lead to potential security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 3696, 1231, 21201, 460, 1085, 284, 2785, 2324, 7476, 13]",1.0,1635,sast_risk,461,Reading files without validation can lead to potential security risks.,Low,1627,"    """"""get previous trading date","[220, 220, 220, 37227, 1136, 2180, 7313, 3128]"
üß† ML Signal: Use of lambda functions indicates functional programming patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 9217, 10345, 8300, 7572, 13]",0.5,1649,ml_signal,498,Use of lambda functions indicates functional programming patterns.,,1635,            date : str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 1058, 965]"
‚úÖ Best Practice: Consider importing Path from pathlib at the top of the file for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 10644, 422, 3108, 8019, 379, 262, 1353, 286, 262, 2393, 329, 16287, 13]",0.5,1654,best_practice,495,Consider importing Path from pathlib at the top of the file for clarity.,,1649,    Parameter,"[220, 220, 220, 25139, 2357]"
‚úÖ Best Practice: Consider importing pd (pandas) at the top of the file for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 279, 67, 357, 79, 392, 292, 8, 379, 262, 1353, 286, 262, 2393, 329, 16287, 13]",0.5,1670,best_practice,496,Consider importing pd (pandas) at the top of the file for clarity.,,1654,            file_name : str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2393, 62, 3672, 1058, 965]"
‚úÖ Best Practice: Use Path from pathlib for file path manipulations for better cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 10644, 422, 3108, 8019, 329, 2393, 3108, 7704, 5768, 329, 1365, 3272, 12, 24254, 17764, 13]",1.0,1684,best_practice,498,Use Path from pathlib for file path manipulations for better cross-platform compatibility.,,1670,            date : str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 1058, 965]"
üß† ML Signal: Iterating over files in a directory is a common pattern for data processing tasks.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3696, 287, 257, 8619, 318, 257, 2219, 3912, 329, 1366, 7587, 8861, 13]",1.0,1698,ml_signal,498,Iterating over files in a directory is a common pattern for data processing tasks.,,1684,            date : str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 1058, 965]"
"‚ö†Ô∏è SAST Risk (Low): Using assert for runtime checks can be disabled with optimization flags, potentially hiding errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 11, 6196, 11816, 8563, 13]",1.0,1717,sast_risk,502,"Using assert for runtime checks can be disabled with optimization flags, potentially hiding errors.",Low,1698,"    date = re.search(pattern, str(file_name)).group()","[220, 220, 220, 3128, 796, 302, 13, 12947, 7, 33279, 11, 965, 7, 7753, 62, 3672, 29720, 8094, 3419]"
‚úÖ Best Practice: Use explicit exception handling instead of assert for better error management.,"[26486, 227, 6705, 19939, 25, 5765, 7952, 6631, 9041, 2427, 286, 6818, 329, 1365, 4049, 4542, 13]",0.5,1722,best_practice,503,Use explicit exception handling instead of assert for better error management.,,1717,    return date,"[220, 220, 220, 1441, 3128]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,1748,best_practice,518,Use of ternary operator for concise conditional assignment,,1722,"        pred_right : pd.DataFrame (index:<instrument, datetime>)","[220, 220, 220, 220, 220, 220, 220, 2747, 62, 3506, 1058, 279, 67, 13, 6601, 19778, 357, 9630, 25, 27, 259, 43872, 11, 4818, 8079, 43734]"
‚úÖ Best Practice: Use of parentheses for clarity in complex conditions,"[26486, 227, 6705, 19939, 25, 5765, 286, 46672, 329, 16287, 287, 3716, 3403]",0.5,1766,best_practice,519,Use of parentheses for clarity in complex conditions,,1748,            The second part of original score file,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 1218, 636, 286, 2656, 4776, 2393]"
‚ö†Ô∏è SAST Risk (Low): Potential performance issue with sort_index on large DataFrames,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2854, 2071, 351, 3297, 62, 9630, 319, 1588, 6060, 35439]",0.5,1783,sast_risk,527,Potential performance issue with sort_index on large DataFrames,Low,1766,        date_right_begin = dates[number],"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3506, 62, 27471, 796, 9667, 58, 17618, 60]"
"üß† ML Signal: Use of a constant variable, which might indicate a specific pattern or configuration","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6937, 7885, 11, 543, 1244, 7603, 257, 2176, 3912, 393, 8398]",0.5,1804,ml_signal,530,"Use of a constant variable, which might indicate a specific pattern or configuration",,1783,        split_date = pd.Timestamp(split_date),"[220, 220, 220, 220, 220, 220, 220, 6626, 62, 4475, 796, 279, 67, 13, 14967, 27823, 7, 35312, 62, 4475, 8]"
‚úÖ Best Practice: Initialize an empty list to collect items for the flattened dictionary.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 1351, 284, 2824, 3709, 329, 262, 45096, 22155, 13]",0.5,1804,best_practice,543,Initialize an empty list to collect items for the flattened dictionary.,,1804,,[]
"üß† ML Signal: Iterating over dictionary items, a common pattern in data processing.","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 11, 257, 2219, 3912, 287, 1366, 7587, 13]",0.5,1808,ml_signal,545,"Iterating over dictionary items, a common pattern in data processing.",,1804,"    """"""","[220, 220, 220, 37227]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined variable FLATTEN_TUPLE, which could lead to NameError.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 7885, 9977, 17139, 1677, 62, 51, 8577, 2538, 11, 543, 714, 1085, 284, 6530, 12331, 13]",0.5,1826,sast_risk,546,"Use of undefined variable FLATTEN_TUPLE, which could lead to NameError.",Low,1808,    Time slicing in Qlib or Pandas is a frequently-used action.,"[220, 220, 220, 3862, 49289, 287, 1195, 8019, 393, 16492, 292, 318, 257, 6777, 12, 1484, 2223, 13]"
‚úÖ Best Practice: Use of tuple for keys when FLATTEN_TUPLE is specified.,"[26486, 227, 6705, 19939, 25, 5765, 286, 46545, 329, 8251, 618, 9977, 17139, 1677, 62, 51, 8577, 2538, 318, 7368, 13]",1.0,1826,best_practice,549,Use of tuple for keys when FLATTEN_TUPLE is specified.,,1826,,[]
‚úÖ Best Practice: Concatenating keys with a separator for readability.,"[26486, 227, 6705, 19939, 25, 1482, 9246, 268, 803, 8251, 351, 257, 2880, 1352, 329, 1100, 1799, 13]",0.5,1843,best_practice,552,Concatenating keys with a separator for readability.,,1826,"    t : Union[None, str, pd.Timestamp]","[220, 220, 220, 256, 1058, 4479, 58, 14202, 11, 965, 11, 279, 67, 13, 14967, 27823, 60]"
‚úÖ Best Practice: Check if the value is a dictionary to decide on recursion.,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 1988, 318, 257, 22155, 284, 5409, 319, 664, 24197, 13]",0.5,1843,best_practice,554,Check if the value is a dictionary to decide on recursion.,,1843,,[]
"üß† ML Signal: Recursive function call, a common pattern in algorithms.","[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 11, 257, 2219, 3912, 287, 16113, 13]",1.0,1847,ml_signal,555,"Recursive function call, a common pattern in algorithms.",,1843,    Returns,"[220, 220, 220, 16409]"
‚úÖ Best Practice: Append non-dictionary items directly to the list.,"[26486, 227, 6705, 19939, 25, 2034, 437, 1729, 12, 67, 14188, 3709, 3264, 284, 262, 1351, 13]",0.5,1851,best_practice,555,Append non-dictionary items directly to the list.,,1847,    Returns,"[220, 220, 220, 16409]"
‚úÖ Best Practice: Convert list of tuples to dictionary before returning.,"[26486, 227, 6705, 19939, 25, 38240, 1351, 286, 12777, 2374, 284, 22155, 878, 8024, 13]",0.5,1855,best_practice,555,Convert list of tuples to dictionary before returning.,,1851,    Returns,"[220, 220, 220, 16409]"
üß† ML Signal: Iterating over a split string to traverse a nested structure,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 6626, 4731, 284, 38138, 257, 28376, 4645]",1.0,1879,ml_signal,588,Iterating over a split string to traverse a nested structure,,1855,        if not (_dir.exists() and list(_dir.iterdir())):,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 44104, 15908, 13, 1069, 1023, 3419, 290, 1351, 28264, 15908, 13, 2676, 15908, 28955, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'k' is not in 'cur_cfg',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 74, 6, 318, 407, 287, 705, 22019, 62, 37581, 6]",1.0,1886,sast_risk,590,Potential KeyError if 'k' is not in 'cur_cfg',Low,1879,    # check calendar bin,"[220, 220, 220, 1303, 2198, 11845, 9874]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if 'k' is out of range,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 705, 74, 6, 318, 503, 286, 2837]",1.0,1908,sast_risk,592,Potential IndexError if 'k' is out of range,Low,1886,"        if (""_future"" not in _calendar.name) and (","[220, 220, 220, 220, 220, 220, 220, 611, 5855, 62, 37443, 1, 407, 287, 4808, 9948, 9239, 13, 3672, 8, 290, 357]"
‚ö†Ô∏è SAST Risk (Low): Raises ValueError which might not be handled by caller,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 11052, 12331, 543, 1244, 407, 307, 12118, 416, 24955]",1.0,1908,sast_risk,596,Raises ValueError which might not be handled by caller,Low,1908,,[]
‚úÖ Best Practice: Iterating over keys of a dictionary is a common pattern,"[26486, 227, 6705, 19939, 25, 40806, 803, 625, 8251, 286, 257, 22155, 318, 257, 2219, 3912]",0.5,1930,best_practice,616,Iterating over keys of a dictionary is a common pattern,,1908,"                    ""-nan"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27444, 12647, 1600]"
‚ö†Ô∏è SAST Risk (Low): Using assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,1956,sast_risk,618,Using assert for input validation can be bypassed if Python is run with optimizations,Low,1930,"                    ""1.#QNAN"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 16, 32535, 48, 45, 1565, 1600]"
üß† ML Signal: Use of queue data structure for iterative processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 16834, 1366, 4645, 329, 11629, 876, 7587]",0.5,1978,ml_signal,622,Use of queue data structure for iterative processing,,1956,"                    ""None"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 14202, 1600]"
üß† ML Signal: Pattern of checking and replacing placeholders in strings,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 290, 13586, 1295, 10476, 287, 13042]",0.5,2000,ml_signal,622,Pattern of checking and replacing placeholders in strings,,1978,"                    ""None"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 14202, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential for ReDoS if 'value' is user-controlled and complex,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 797, 46498, 611, 705, 8367, 6, 318, 2836, 12, 14401, 290, 3716]",0.5,2016,sast_risk,626,Potential for ReDoS if 'value' is user-controlled and complex,Low,2000,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Usage of exception handling for control flow,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6631, 9041, 329, 1630, 5202]",0.5,2030,ml_signal,630,Usage of exception handling for control flow,,2016,        .apply(str.lower),"[220, 220, 220, 220, 220, 220, 220, 764, 39014, 7, 2536, 13, 21037, 8]"
‚úÖ Best Practice: Logging provides insight into placeholder resolution issues,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 11281, 656, 46076, 6323, 2428]",0.5,2039,best_practice,633,Logging provides insight into placeholder resolution issues,,2030,        return False,"[220, 220, 220, 220, 220, 220, 220, 1441, 10352]"
üß† ML Signal: Pattern of iterating over lists and dictionaries,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 11629, 803, 625, 8341, 290, 48589, 3166]",0.5,2075,ml_signal,642,Pattern of iterating over lists and dictionaries,,2039,"            f""\nThe {str(_p.resolve())} of qlib data is not equal to 3 columns:""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 59, 77, 464, 1391, 2536, 28264, 79, 13, 411, 6442, 28955, 92, 286, 10662, 8019, 1366, 318, 407, 4961, 284, 513, 15180, 11097]"
üß† ML Signal: Recursive pattern of processing nested structures,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 3912, 286, 7587, 28376, 8573]",0.5,2101,ml_signal,650,Recursive pattern of processing nested structures,,2075,"def lazy_sort_index(df: pd.DataFrame, axis=0) -> pd.DataFrame:","[4299, 16931, 62, 30619, 62, 9630, 7, 7568, 25, 279, 67, 13, 6601, 19778, 11, 16488, 28, 15, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Use of type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2101,best_practice,649,Use of type hinting for function parameters and return type improves code readability and maintainability.,,2101,,[]
üß† ML Signal: Usage of inspect.getfullargspec to introspect function arguments,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10104, 13, 1136, 12853, 853, 16684, 284, 18951, 4443, 2163, 7159]",0.5,2119,ml_signal,666,Usage of inspect.getfullargspec to introspect function arguments,,2101,    idx = df.index if axis == 0 else df.columns,"[220, 220, 220, 4686, 87, 796, 47764, 13, 9630, 611, 16488, 6624, 657, 2073, 47764, 13, 28665, 82]"
‚úÖ Best Practice: Check if the function accepts variable keyword arguments,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2163, 18178, 7885, 21179, 7159]",0.5,2139,best_practice,670,Check if the function accepts variable keyword arguments,,2119,"        and isinstance(idx, pd.MultiIndex)","[220, 220, 220, 220, 220, 220, 220, 290, 318, 39098, 7, 312, 87, 11, 279, 67, 13, 29800, 15732, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential information leakage through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 47988, 832, 18931]",1.0,2157,sast_risk,671,Potential information leakage through logging,Low,2139,        and not idx.is_lexsorted(),"[220, 220, 220, 220, 220, 220, 220, 290, 407, 4686, 87, 13, 271, 62, 2588, 82, 9741, 3419]"
üß† ML Signal: Pattern of filtering and passing arguments to another function,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 25431, 290, 6427, 7159, 284, 1194, 2163]",0.5,2157,ml_signal,677,Pattern of filtering and passing arguments to another function,,2157,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the class,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398]",0.5,2174,best_practice,678,Consider adding a docstring to describe the purpose and usage of the class,,2157,"FLATTEN_TUPLE = ""_FLATTEN_TUPLE""","[3697, 17139, 1677, 62, 51, 8577, 2538, 796, 45434, 3697, 17139, 1677, 62, 51, 8577, 2538, 1]"
‚úÖ Best Practice: Initialize instance variables in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772]",1.0,2174,best_practice,679,Initialize instance variables in the constructor,,2174,,[]
üß† ML Signal: Method for setting or updating a provider attribute,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4634, 393, 19698, 257, 10131, 11688]",1.0,2174,ml_signal,680,Method for setting or updating a provider attribute,,2174,,[]
‚úÖ Best Practice: Use of a private attribute to encapsulate provider data,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 11688, 284, 32652, 5039, 10131, 1366]",1.0,2178,best_practice,682,Use of a private attribute to encapsulate provider data,,2174,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of __repr__ for a clear and unambiguous string representation of the object,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 260, 1050, 834, 329, 257, 1598, 290, 42053, 29709, 4731, 10552, 286, 262, 2134]",1.0,2182,best_practice,682,Use of __repr__ for a clear and unambiguous string representation of the object,,2178,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Using format method for string formatting improves readability,"[26486, 227, 6705, 19939, 25, 8554, 5794, 2446, 329, 4731, 33313, 19575, 1100, 1799]",1.0,2182,best_practice,684,Using format method for string formatting improves readability,,2182,,[]
‚úÖ Best Practice: Use of __getattr__ to handle attribute access dynamically,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 1136, 35226, 834, 284, 5412, 11688, 1895, 32366]",1.0,2182,best_practice,684,Use of __getattr__ to handle attribute access dynamically,,2182,,[]
‚úÖ Best Practice: Checking for None to ensure _provider is initialized,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 284, 4155, 4808, 15234, 1304, 318, 23224]",1.0,2231,best_practice,686,Checking for None to ensure _provider is initialized,,2182,"        >>> {'a': 1, 'c.a': 2, 'c.b.x': 5, 'd': [1, 2, 3], 'c.b.y': 10}","[220, 220, 220, 220, 220, 220, 220, 13163, 1391, 6, 64, 10354, 352, 11, 705, 66, 13, 64, 10354, 362, 11, 705, 66, 13, 65, 13, 87, 10354, 642, 11, 705, 67, 10354, 685, 16, 11, 362, 11, 513, 4357, 705, 66, 13, 65, 13, 88, 10354, 838, 92]"
‚ö†Ô∏è SAST Risk (Low): Error message may expose internal implementation details,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 743, 15651, 5387, 7822, 3307]",1.0,2295,sast_risk,688,Error message may expose internal implementation details,Low,2231,"        >>> flatten_dict({'a': 1, 'c': {'a': 2, 'b': {'x': 5, 'y' : 10}}, 'd': [1, 2, 3]}, sep=FLATTEN_TUPLE)","[220, 220, 220, 220, 220, 220, 220, 13163, 27172, 268, 62, 11600, 15090, 6, 64, 10354, 352, 11, 705, 66, 10354, 1391, 6, 64, 10354, 362, 11, 705, 65, 10354, 1391, 6, 87, 10354, 642, 11, 705, 88, 6, 1058, 838, 92, 5512, 705, 67, 10354, 685, 16, 11, 362, 11, 513, 60, 5512, 41767, 28, 3697, 17139, 1677, 62, 51, 8577, 2538, 8]"
üß† ML Signal: Delegating attribute access to another object,"[8582, 100, 254, 10373, 26484, 25, 1024, 1455, 803, 11688, 1895, 284, 1194, 2134]",1.0,2347,ml_signal,689,Delegating attribute access to another object,,2295,"        >>> {'a': 1, ('c','a'): 2, ('c','b','x'): 5, 'd': [1, 2, 3], ('c','b','y'): 10}","[220, 220, 220, 220, 220, 220, 220, 13163, 1391, 6, 64, 10354, 352, 11, 19203, 66, 41707, 64, 6, 2599, 362, 11, 19203, 66, 41707, 65, 41707, 87, 6, 2599, 642, 11, 705, 67, 10354, 685, 16, 11, 362, 11, 513, 4357, 19203, 66, 41707, 65, 41707, 88, 6, 2599, 838, 92]"
‚úÖ Best Practice: Check if cls_or_obj is a string to handle different input types,"[26486, 227, 6705, 19939, 25, 6822, 611, 537, 82, 62, 273, 62, 26801, 318, 257, 4731, 284, 5412, 1180, 5128, 3858]",0.5,2379,best_practice,693,Check if cls_or_obj is a string to handle different input types,,2347,"        parent_key (str, optional): the parent key, will be a prefix in new key. Defaults to """".","[220, 220, 220, 220, 220, 220, 220, 2560, 62, 2539, 357, 2536, 11, 11902, 2599, 262, 2560, 1994, 11, 481, 307, 257, 21231, 287, 649, 1994, 13, 2896, 13185, 284, 366, 1911]"
‚ö†Ô∏è SAST Risk (Medium): Potential security risk if module_path is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2324, 2526, 611, 8265, 62, 6978, 318, 2836, 12, 14401]",1.0,2379,sast_risk,695,Potential security risk if module_path is user-controlled,Medium,2379,,[]
‚ö†Ô∏è SAST Risk (Medium): getattr can be dangerous if cls_or_obj is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 651, 35226, 460, 307, 4923, 611, 537, 82, 62, 273, 62, 26801, 318, 2836, 12, 14401]",1.0,2391,sast_risk,697,getattr can be dangerous if cls_or_obj is user-controlled,Medium,2379,        dict: flatten dict,"[220, 220, 220, 220, 220, 220, 220, 8633, 25, 27172, 268, 8633]"
‚úÖ Best Practice: Use isinstance to determine if cls_or_obj is a type for instantiation,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 284, 5004, 611, 537, 82, 62, 273, 62, 26801, 318, 257, 2099, 329, 9113, 3920]",0.5,2397,best_practice,699,Use isinstance to determine if cls_or_obj is a type for instantiation,,2391,    items = [],"[220, 220, 220, 3709, 796, 17635]"
üß† ML Signal: Registering objects can indicate plugin or extension patterns,"[8582, 100, 254, 10373, 26484, 25, 17296, 278, 5563, 460, 7603, 13877, 393, 7552, 7572]",0.5,2415,ml_signal,701,Registering objects can indicate plugin or extension patterns,,2397,        if sep == FLATTEN_TUPLE:,"[220, 220, 220, 220, 220, 220, 220, 611, 41767, 6624, 9977, 17139, 1677, 62, 51, 8577, 2538, 25]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,2419,best_practice,698,Consider adding type hints for function parameters and return type for better readability and maintainability.,,2415,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Checking if an object is a DataFrame can indicate a pattern of handling different data types.,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 281, 2134, 318, 257, 6060, 19778, 460, 7603, 257, 3912, 286, 9041, 1180, 1366, 3858, 13]",1.0,2437,ml_signal,701,Checking if an object is a DataFrame can indicate a pattern of handling different data types.,,2419,        if sep == FLATTEN_TUPLE:,"[220, 220, 220, 220, 220, 220, 220, 611, 41767, 6624, 9977, 17139, 1677, 62, 51, 8577, 2538, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for path traversal if `path_or_obj` is user-controlled. Validate or sanitize input.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3108, 33038, 282, 611, 4600, 6978, 62, 273, 62, 26801, 63, 318, 2836, 12, 14401, 13, 3254, 20540, 393, 5336, 270, 1096, 5128, 13]",0.5,2465,sast_risk,704,Potential for path traversal if `path_or_obj` is user-controlled. Validate or sanitize input.,Low,2437,            new_key = parent_key + sep + k if parent_key else k,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 2539, 796, 2560, 62, 2539, 1343, 41767, 1343, 479, 611, 2560, 62, 2539, 2073, 479]"
üß† ML Signal: Splitting file path to get the extension is a common pattern for handling different file types.,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 2393, 3108, 284, 651, 262, 7552, 318, 257, 2219, 3912, 329, 9041, 1180, 2393, 3858, 13]",0.5,2474,ml_signal,707,Splitting file path to get the extension is a common pattern for handling different file types.,,2465,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Reading HDF files is a specific pattern that can be used to identify data handling in ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 11725, 5572, 37, 3696, 318, 257, 2176, 3912, 326, 460, 307, 973, 284, 5911, 1366, 9041, 287, 10373, 670, 44041, 13]",0.5,2474,ml_signal,710,Reading HDF files is a specific pattern that can be used to identify data handling in ML workflows.,,2474,,[]
üß† ML Signal: Reading pickle files is a specific pattern that can be used to identify data handling in ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 11725, 2298, 293, 3696, 318, 257, 2176, 3912, 326, 460, 307, 973, 284, 5911, 1366, 9041, 287, 10373, 670, 44041, 13]",0.5,2478,ml_signal,713,Reading pickle files is a specific pattern that can be used to identify data handling in ML workflows.,,2474,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Reading CSV files is a common pattern in data processing and ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 11725, 44189, 3696, 318, 257, 2219, 3912, 287, 1366, 7587, 290, 10373, 670, 44041, 13]",0.5,2478,ml_signal,718,Reading CSV files is a common pattern in data processing and ML workflows.,,2478,,[]
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without logging can make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 18931, 460, 787, 28769, 2408, 13]",0.5,2478,sast_risk,718,Raising a generic ValueError without logging can make debugging difficult.,Low,2478,,[]
‚úÖ Best Practice: Use of list comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 35327, 290, 31744, 2438]",0.5,2478,best_practice,718,Use of list comprehension for concise and readable code,,2478,,[]
‚úÖ Best Practice: Use of list comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 35327, 290, 31744, 2438]",0.5,2483,best_practice,720,Use of list comprehension for concise and readable code,,2478,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use of list comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 35327, 290, 31744, 2438]",0.5,2494,best_practice,722,Use of list comprehension for concise and readable code,,2483,        e.g.,"[220, 220, 220, 220, 220, 220, 220, 304, 13, 70, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential case sensitivity issue if file system is case-sensitive,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1339, 14233, 2071, 611, 2393, 1080, 318, 1339, 12, 30176]",1.0,2543,sast_risk,725,Potential case sensitivity issue if file system is case-sensitive,Low,2494,"                                 'kwargs': {'end_time': '2020-08-01',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 46265, 22046, 10354, 1391, 6, 437, 62, 2435, 10354, 705, 42334, 12, 2919, 12, 486, 3256]"
üß† ML Signal: Returns a modified or original code based on conditions,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 9518, 393, 2656, 2438, 1912, 319, 3403]",1.0,2610,ml_signal,726,Returns a modified or original code based on conditions,,2543,"                                            'fit_end_time': '<dataset.kwargs.segments.train.1>',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 11147, 62, 437, 62, 2435, 10354, 705, 27, 19608, 292, 316, 13, 46265, 22046, 13, 325, 11726, 13, 27432, 13, 16, 29, 3256]"
‚úÖ Best Practice: Use of str.startswith() for checking prefix is efficient and clear.,"[26486, 227, 6705, 19939, 25, 5765, 286, 965, 13, 9688, 2032, 342, 3419, 329, 10627, 21231, 318, 6942, 290, 1598, 13]",1.0,2667,best_practice,732,Use of str.startswith() for checking prefix is efficient and clear.,,2610,"                                           Timestamp('2019-04-08 00:00:00')),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5045, 27823, 10786, 23344, 12, 3023, 12, 2919, 3571, 25, 405, 25, 405, 11537, 828]"
‚úÖ Best Practice: Use of str.lstrip() to remove a specific prefix is clear and concise.,"[26486, 227, 6705, 19939, 25, 5765, 286, 965, 13, 75, 36311, 3419, 284, 4781, 257, 2176, 21231, 318, 1598, 290, 35327, 13]",1.0,2725,best_practice,734,Use of str.lstrip() to remove a specific prefix is clear and concise.,,2667,"                                            Timestamp('2014-12-31 00:00:00')),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5045, 27823, 10786, 4967, 12, 1065, 12, 3132, 3571, 25, 405, 25, 405, 11537, 828]"
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,2776,best_practice,735,Grouping imports from the same module together improves readability.,,2725,"                                  'valid': (Timestamp('2015-01-05 00:00:00'),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 12102, 10354, 357, 14967, 27823, 10786, 4626, 12, 486, 12, 2713, 3571, 25, 405, 25, 405, 33809]"
‚úÖ Best Practice: Use of __all__ to define public API of the module is a good practice for maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 318, 257, 922, 3357, 329, 5529, 1799, 13]",1.0,2780,best_practice,743,Use of __all__ to define public API of the module is a good practice for maintainability.,,2776,    -------,"[220, 220, 220, 35656]"

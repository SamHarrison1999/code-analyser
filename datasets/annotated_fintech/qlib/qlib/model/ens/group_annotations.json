[
  {
    "line": 1,
    "text": "# Copyright (c) Microsoft Corporation.",
    "annotation": "\u2705 Best Practice: Consider adding a module-level docstring to describe the purpose and usage of the module.",
    "confidence": 0.5,
    "tokens": [
      2,
      15069,
      357,
      66,
      8,
      5413,
      10501,
      13
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      8265,
      12,
      5715,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a module-level docstring to describe the purpose and usage of the module."
  },
  {
    "line": 11,
    "text": "reduce: {(A,B): {C1: object, C2: object}} -> {(A,B): object}",
    "annotation": "\u2705 Best Practice: Import only necessary components to avoid unnecessary dependencies.",
    "confidence": 0.5,
    "tokens": [
      445,
      7234,
      25,
      1391,
      7,
      32,
      11,
      33,
      2599,
      1391,
      34,
      16,
      25,
      2134,
      11,
      327,
      17,
      25,
      2134,
      11709,
      4613,
      1391,
      7,
      32,
      11,
      33,
      2599,
      2134,
      92
    ],
    "start_token": 8,
    "end_token": 37,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      691,
      3306,
      6805,
      284,
      3368,
      13114,
      20086,
      13
    ],
    "label": "best_practice",
    "reason": "Import only necessary components to avoid unnecessary dependencies."
  },
  {
    "line": 13,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Import only necessary components to avoid unnecessary dependencies.",
    "confidence": 0.5,
    "tokens": [
      37811
    ],
    "start_token": 37,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      691,
      3306,
      6805,
      284,
      3368,
      13114,
      20086,
      13
    ],
    "label": "best_practice",
    "reason": "Import only necessary components to avoid unnecessary dependencies."
  },
  {
    "line": 13,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the purpose of the class",
    "confidence": 0.5,
    "tokens": [
      37811
    ],
    "start_token": 38,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the purpose of the class"
  },
  {
    "line": 22,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 39,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 24,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hints for 'ens' parameter improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 39,
    "end_token": 47,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      705,
      641,
      6,
      11507,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for 'ens' parameter improves code readability and maintainability."
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to check if _group_func is a Callable ensures type safety.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 47,
    "end_token": 47,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      611,
      4808,
      8094,
      62,
      20786,
      318,
      257,
      4889,
      540,
      19047,
      2099,
      3747,
      13
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check if _group_func is a Callable ensures type safety."
  },
  {
    "line": 32,
    "text": "            Defaults to None.",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic function calls using instance attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2896,
      13185,
      284,
      6045,
      13
    ],
    "start_token": 47,
    "end_token": 63,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2163,
      3848,
      1262,
      4554,
      12608,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic function calls using instance attributes."
  },
  {
    "line": 36,
    "text": "        self._group_func = group_func",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of f-string for exception message could expose internal attribute names.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      8094,
      62,
      20786,
      796,
      1448,
      62,
      20786
    ],
    "start_token": 63,
    "end_token": 79,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      277,
      12,
      8841,
      329,
      6631,
      3275,
      714,
      15651,
      5387,
      11688,
      3891,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of f-string for exception message could expose internal attribute names."
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of isinstance to check if an attribute is a Callable",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 79,
    "end_token": 79,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      611,
      281,
      11688,
      318,
      257,
      4889,
      540
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check if an attribute is a Callable"
  },
  {
    "line": 43,
    "text": "        For example: {(A,B,C1): object, (A,B,C2): object} -> {(A,B): {C1: object, C2: object}}",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic function execution pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1114,
      1672,
      25,
      1391,
      7,
      32,
      11,
      33,
      11,
      34,
      16,
      2599,
      2134,
      11,
      357,
      32,
      11,
      33,
      11,
      34,
      17,
      2599,
      2134,
      92,
      4613,
      1391,
      7,
      32,
      11,
      33,
      2599,
      1391,
      34,
      16,
      25,
      2134,
      11,
      327,
      17,
      25,
      2134,
      11709
    ],
    "start_token": 79,
    "end_token": 128,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2163,
      9706,
      3912
    ],
    "label": "ml_signal",
    "reason": "Dynamic function execution pattern"
  },
  {
    "line": 47,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of NotImplementedError for unimplemented functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 128,
    "end_token": 136,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      329,
      28418,
      1154,
      12061,
      11244
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of NotImplementedError for unimplemented functionality"
  },
  {
    "line": 47,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 136,
    "end_token": 144,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters."
  },
  {
    "line": 62,
    "text": "        if isinstance(getattr(self, \"_ens_func\", None), Callable):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of delayed function for parallel processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      1136,
      35226,
      7,
      944,
      11,
      45434,
      641,
      62,
      20786,
      1600,
      6045,
      828,
      4889,
      540,
      2599
    ],
    "start_token": 144,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11038,
      2163,
      329,
      10730,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of delayed function for parallel processing."
  },
  {
    "line": 64,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Parallel processing with n_jobs and verbose parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 170,
    "end_token": 179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      42945,
      7587,
      351,
      299,
      62,
      43863,
      290,
      15942,
      577,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of Parallel processing with n_jobs and verbose parameters."
  },
  {
    "line": 65,
    "text": "            raise NotImplementedError(f\"Please specify valid `_ens_func`.\")",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      7,
      69,
      1,
      5492,
      11986,
      4938,
      4600,
      62,
      641,
      62,
      20786,
      63,
      19570
    ],
    "start_token": 179,
    "end_token": 209,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 75,
    "text": "            dict: grouped_dict like {G1: object, G2: object}",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items is a common pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      25,
      32824,
      62,
      11600,
      588,
      1391,
      38,
      16,
      25,
      2134,
      11,
      402,
      17,
      25,
      2134,
      92
    ],
    "start_token": 209,
    "end_token": 237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items is a common pattern"
  },
  {
    "line": 76,
    "text": "            n_jobs: how many progress you need.",
    "annotation": "\ud83e\udde0 ML Signal: Checking if a key is a tuple is a specific usage pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      62,
      43863,
      25,
      703,
      867,
      4371,
      345,
      761,
      13
    ],
    "start_token": 237,
    "end_token": 258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      257,
      1994,
      318,
      257,
      46545,
      318,
      257,
      2176,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checking if a key is a tuple is a specific usage pattern"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\u2705 Best Practice: Using setdefault to handle dictionary initialization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 258,
    "end_token": 258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      900,
      12286,
      284,
      5412,
      22155,
      37588
    ],
    "label": "best_practice",
    "reason": "Using setdefault to handle dictionary initialization"
  },
  {
    "line": 81,
    "text": "        # Because the `Serializable` will affect the behaviors of pickle",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a TypeError with user-provided data could expose internal logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4362,
      262,
      4600,
      32634,
      13821,
      63,
      481,
      2689,
      262,
      14301,
      286,
      2298,
      293
    ],
    "start_token": 258,
    "end_token": 279,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      5994,
      12331,
      351,
      2836,
      12,
      41279,
      1366,
      714,
      15651,
      5387,
      9156
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a TypeError with user-provided data could expose internal logic"
  },
  {
    "line": 81,
    "text": "        # Because the `Serializable` will affect the behaviors of pickle",
    "annotation": "\ud83e\udde0 ML Signal: Use of default mutable arguments can lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4362,
      262,
      4600,
      32634,
      13821,
      63,
      481,
      2689,
      262,
      14301,
      286,
      2298,
      293
    ],
    "start_token": 279,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      4517,
      540,
      7159,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of default mutable arguments can lead to unexpected behavior"
  },
  {
    "line": 81,
    "text": "        # Because the `Serializable` will affect the behaviors of pickle",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Default mutable argument can lead to shared state issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4362,
      262,
      4600,
      32634,
      13821,
      63,
      481,
      2689,
      262,
      14301,
      286,
      2298,
      293
    ],
    "start_token": 300,
    "end_token": 321,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      15161,
      4517,
      540,
      4578,
      460,
      1085,
      284,
      4888,
      1181,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Default mutable argument can lead to shared state issues"
  },
  {
    "line": 81,
    "text": "        # Because the `Serializable` will affect the behaviors of pickle",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass initializer improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4362,
      262,
      4600,
      32634,
      13821,
      63,
      481,
      2689,
      262,
      14301,
      286,
      2298,
      293
    ],
    "start_token": 321,
    "end_token": 342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      4238,
      7509,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass initializer improves code readability"
  }
]
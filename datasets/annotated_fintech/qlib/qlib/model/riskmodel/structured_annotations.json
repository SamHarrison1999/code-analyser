[
  {
    "line": 4,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Grouping imports from the same library together improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5888,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same library together improves readability."
  },
  {
    "line": 29,
    "text": "    In this implementation we use latent factor models to specify `F`.",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants for model types indicates a pattern for model selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      554,
      428,
      7822,
      356,
      779,
      41270,
      5766,
      4981,
      284,
      11986,
      4600,
      37,
      44646
    ],
    "start_token": 5,
    "end_token": 21,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      329,
      2746,
      3858,
      9217,
      257,
      3912,
      329,
      2746,
      6356
    ],
    "label": "ml_signal",
    "reason": "Use of class constants for model types indicates a pattern for model selection"
  },
  {
    "line": 31,
    "text": "        - `pca`: Principal Component Analysis",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants for model types indicates a pattern for model selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      4600,
      79,
      6888,
      63,
      25,
      32641,
      35100,
      14691
    ],
    "start_token": 21,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      329,
      2746,
      3858,
      9217,
      257,
      3912,
      329,
      2746,
      6356
    ],
    "label": "ml_signal",
    "reason": "Use of class constants for model types indicates a pattern for model selection"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants for default options indicates a pattern for handling missing data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 37,
    "end_token": 37,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      329,
      4277,
      3689,
      9217,
      257,
      3912,
      329,
      9041,
      4814,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of class constants for default options indicates a pattern for handling missing data"
  },
  {
    "line": 39,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if DEFAULT_NAN_OPTION is not defined in the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 37,
    "end_token": 41,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      5550,
      38865,
      62,
      45,
      1565,
      62,
      3185,
      24131,
      318,
      407,
      5447,
      287,
      262,
      1398
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if DEFAULT_NAN_OPTION is not defined in the class"
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for argument validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 41,
    "end_token": 41,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      4578,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for argument validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 46,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if DEFAULT_NAN_OPTION is not defined in the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 41,
    "end_token": 49,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      5550,
      38865,
      62,
      45,
      1565,
      62,
      3185,
      24131,
      318,
      407,
      5447,
      287,
      262,
      1398
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if DEFAULT_NAN_OPTION is not defined in the class"
  },
  {
    "line": 46,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Explicitly call the superclass's __init__ method to ensure proper initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 49,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      869,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      284,
      4155,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Explicitly call the superclass's __init__ method to ensure proper initialization"
  },
  {
    "line": 50,
    "text": "            kwargs: see `RiskModel` for more information",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for argument validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      86,
      22046,
      25,
      766,
      4600,
      49,
      1984,
      17633,
      63,
      329,
      517,
      1321
    ],
    "start_token": 57,
    "end_token": 81,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      4578,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for argument validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 53,
    "text": "            assert kwargs[\"nan_option\"] in [self.DEFAULT_NAN_OPTION], \"nan_option={} is not supported\".format(",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to select a model based on input parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      479,
      86,
      22046,
      14692,
      12647,
      62,
      18076,
      8973,
      287,
      685,
      944,
      13,
      7206,
      38865,
      62,
      45,
      1565,
      62,
      3185,
      24131,
      4357,
      366,
      12647,
      62,
      18076,
      34758,
      92,
      318,
      407,
      4855,
      1911,
      18982,
      7
    ],
    "start_token": 81,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      2922,
      257,
      2746,
      1912,
      319,
      5128,
      10007
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to select a model based on input parameters"
  },
  {
    "line": 53,
    "text": "            assert kwargs[\"nan_option\"] in [self.DEFAULT_NAN_OPTION], \"nan_option={} is not supported\".format(",
    "annotation": "\ud83e\udde0 ML Signal: Storing the number of factors, which may influence model complexity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      479,
      86,
      22046,
      14692,
      12647,
      62,
      18076,
      8973,
      287,
      685,
      944,
      13,
      7206,
      38865,
      62,
      45,
      1565,
      62,
      3185,
      24131,
      4357,
      366,
      12647,
      62,
      18076,
      34758,
      92,
      318,
      407,
      4855,
      1911,
      18982,
      7
    ],
    "start_token": 126,
    "end_token": 171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      262,
      1271,
      286,
      5087,
      11,
      543,
      743,
      4588,
      2746,
      13357
    ],
    "label": "ml_signal",
    "reason": "Storing the number of factors, which may influence model complexity"
  },
  {
    "line": 53,
    "text": "            assert kwargs[\"nan_option\"] in [self.DEFAULT_NAN_OPTION], \"nan_option={} is not supported\".format(",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose, arguments, and return values.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      479,
      86,
      22046,
      14692,
      12647,
      62,
      18076,
      8973,
      287,
      685,
      944,
      13,
      7206,
      38865,
      62,
      45,
      1565,
      62,
      3185,
      24131,
      4357,
      366,
      12647,
      62,
      18076,
      34758,
      92,
      318,
      407,
      4855,
      1911,
      18982,
      7
    ],
    "start_token": 171,
    "end_token": 216,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      11,
      7159,
      11,
      290,
      1441,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose, arguments, and return values."
  },
  {
    "line": 62,
    "text": "            self.FACTOR_MODEL_PCA,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a solver model to fit data, indicating a machine learning pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      37,
      10659,
      1581,
      62,
      33365,
      3698,
      62,
      5662,
      32,
      11
    ],
    "start_token": 216,
    "end_token": 239,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1540,
      332,
      2746,
      284,
      4197,
      1366,
      11,
      12739,
      257,
      4572,
      4673,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a solver model to fit data, indicating a machine learning pattern."
  },
  {
    "line": 64,
    "text": "        ], \"factor_model={} is not supported\".format(factor_model)",
    "annotation": "\ud83e\udde0 ML Signal: Extraction of components from a fitted model, common in dimensionality reduction techniques.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589,
      366,
      31412,
      62,
      19849,
      34758,
      92,
      318,
      407,
      4855,
      1911,
      18982,
      7,
      31412,
      62,
      19849,
      8
    ],
    "start_token": 239,
    "end_token": 263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      7861,
      286,
      6805,
      422,
      257,
      18235,
      2746,
      11,
      2219,
      287,
      15793,
      1483,
      7741,
      7605,
      13
    ],
    "label": "ml_signal",
    "reason": "Extraction of components from a fitted model, common in dimensionality reduction techniques."
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Transformation of data using a fitted model, indicating a prediction or transformation step.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 263,
    "end_token": 263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49127,
      286,
      1366,
      1262,
      257,
      18235,
      2746,
      11,
      12739,
      257,
      17724,
      393,
      13389,
      2239,
      13
    ],
    "label": "ml_signal",
    "reason": "Transformation of data using a fitted model, indicating a prediction or transformation step."
  },
  {
    "line": 68,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of matrix operations for efficient computation.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 263,
    "end_token": 263,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      17593,
      4560,
      329,
      6942,
      29964,
      13
    ],
    "label": "best_practice",
    "reason": "Use of matrix operations for efficient computation."
  },
  {
    "line": 70,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of numpy's covariance function for statistical computation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 263,
    "end_token": 271,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      338,
      44829,
      590,
      2163,
      329,
      13905,
      29964,
      13
    ],
    "label": "best_practice",
    "reason": "Use of numpy's covariance function for statistical computation."
  },
  {
    "line": 70,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of numpy's variance function for statistical computation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 271,
    "end_token": 279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      338,
      24198,
      2163,
      329,
      13905,
      29964,
      13
    ],
    "label": "best_practice",
    "reason": "Use of numpy's variance function for statistical computation."
  },
  {
    "line": 70,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Returning multiple values as a tuple for clarity and flexibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 279,
    "end_token": 287,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      3294,
      3815,
      355,
      257,
      46545,
      329,
      16287,
      290,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Returning multiple values as a tuple for clarity and flexibility."
  },
  {
    "line": 70,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of matrix operations for efficient computation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 287,
    "end_token": 295,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      17593,
      4560,
      329,
      6942,
      29964,
      13
    ],
    "label": "best_practice",
    "reason": "Use of matrix operations for efficient computation."
  }
]
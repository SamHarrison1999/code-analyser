[
  {
    "line": 2,
    "text": "",
    "annotation": "\u2705 Best Practice: Import only necessary components to reduce memory usage and improve readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      691,
      3306,
      6805,
      284,
      4646,
      4088,
      8748,
      290,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Import only necessary components to reduce memory usage and improve readability."
  },
  {
    "line": 10,
    "text": "        [1] Fan, J., Liao, Y., & Mincheva, M. (2013). Large covariance estimation by thresholding principal orthogonal complements.",
    "annotation": "\u2705 Best Practice: Constants are defined at the class level for easy reference and modification.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      685,
      16,
      60,
      13836,
      11,
      449,
      1539,
      406,
      13481,
      11,
      575,
      1539,
      1222,
      1855,
      2395,
      6862,
      11,
      337,
      13,
      357,
      6390,
      737,
      13601,
      44829,
      590,
      31850,
      416,
      11387,
      278,
      10033,
      29617,
      519,
      20996,
      1224,
      902,
      13
    ],
    "start_token": 0,
    "end_token": 43,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      379,
      262,
      1398,
      1241,
      329,
      2562,
      4941,
      290,
      17613,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined at the class level for easy reference and modification."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hints for function arguments improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 43,
    "end_token": 43,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      7159,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function arguments improves code readability and maintainability."
  },
  {
    "line": 26,
    "text": "                - 'hard': hard thresholding.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      705,
      10424,
      10354,
      1327,
      11387,
      278,
      13
    ],
    "start_token": 43,
    "end_token": 66,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 29,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 66,
    "end_token": 74,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 34,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 74,
    "end_token": 74,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations."
  },
  {
    "line": 36,
    "text": "        self.thresh = thresh",
    "annotation": "\ud83e\udde0 ML Signal: Use of numpy for matrix operations, common in ML algorithms",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      400,
      3447,
      796,
      294,
      3447
    ],
    "start_token": 74,
    "end_token": 88,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      32152,
      329,
      17593,
      4560,
      11,
      2219,
      287,
      10373,
      16113
    ],
    "label": "ml_signal",
    "reason": "Use of numpy for matrix operations, common in ML algorithms"
  },
  {
    "line": 40,
    "text": "            self.THRESH_SOFT,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential numerical instability in eigen decomposition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      4221,
      19535,
      39,
      62,
      15821,
      9792,
      11
    ],
    "start_token": 88,
    "end_token": 108,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29052,
      24842,
      287,
      304,
      9324,
      26969,
      9150
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential numerical instability in eigen decomposition"
  },
  {
    "line": 55,
    "text": "            Lowrank = np.asarray(LamPCA.dot(LamPCA.T))",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Inversion of potentially singular matrix",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7754,
      43027,
      796,
      45941,
      13,
      292,
      18747,
      7,
      43,
      321,
      5662,
      32,
      13,
      26518,
      7,
      43,
      321,
      5662,
      32,
      13,
      51,
      4008
    ],
    "start_token": 108,
    "end_token": 141,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      554,
      9641,
      286,
      6196,
      18032,
      17593
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Inversion of potentially singular matrix"
  }
]
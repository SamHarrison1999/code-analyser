annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Import only necessary components to reduce memory usage and improve readability.,"[26486, 227, 6705, 19939, 25, 17267, 691, 3306, 6805, 284, 4646, 4088, 8748, 290, 2987, 1100, 1799, 13]",1.0,0,best_practice,2,Import only necessary components to reduce memory usage and improve readability.,,0,,[]
‚úÖ Best Practice: Constants are defined at the class level for easy reference and modification.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 379, 262, 1398, 1241, 329, 2562, 4941, 290, 17613, 13]",1.0,43,best_practice,10,Constants are defined at the class level for easy reference and modification.,,0,"        [1] Fan, J., Liao, Y., & Mincheva, M. (2013). Large covariance estimation by thresholding principal orthogonal complements.","[220, 220, 220, 220, 220, 220, 220, 685, 16, 60, 13836, 11, 449, 1539, 406, 13481, 11, 575, 1539, 1222, 1855, 2395, 6862, 11, 337, 13, 357, 6390, 737, 13601, 44829, 590, 31850, 416, 11387, 278, 10033, 29617, 519, 20996, 1224, 902, 13]"
‚úÖ Best Practice: Use of type hints for function arguments improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 7159, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,43,best_practice,14,Use of type hints for function arguments improves code readability and maintainability.,,43,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,66,sast_risk,26,Use of assert for input validation can be bypassed if Python is run with optimizations.,Low,43,                - 'hard': hard thresholding.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 705, 10424, 10354, 1327, 11387, 278, 13]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,74,sast_risk,29,Use of assert for input validation can be bypassed if Python is run with optimizations.,Low,66,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",1.0,74,sast_risk,34,Use of assert for input validation can be bypassed if Python is run with optimizations.,Low,74,,[]
"üß† ML Signal: Use of numpy for matrix operations, common in ML algorithms","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 17593, 4560, 11, 2219, 287, 10373, 16113]",0.5,88,ml_signal,36,"Use of numpy for matrix operations, common in ML algorithms",,74,        self.thresh = thresh,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 400, 3447, 796, 294, 3447]"
‚ö†Ô∏è SAST Risk (Low): Potential numerical instability in eigen decomposition,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29052, 24842, 287, 304, 9324, 26969, 9150]",0.5,108,sast_risk,40,Potential numerical instability in eigen decomposition,Low,88,"            self.THRESH_SOFT,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 4221, 19535, 39, 62, 15821, 9792, 11]"
‚ö†Ô∏è SAST Risk (Medium): Inversion of potentially singular matrix,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 554, 9641, 286, 6196, 18032, 17593]",0.5,141,sast_risk,55,Inversion of potentially singular matrix,Medium,108,            Lowrank = np.asarray(LamPCA.dot(LamPCA.T)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7754, 43027, 796, 45941, 13, 292, 18747, 7, 43, 321, 5662, 32, 13, 26518, 7, 43, 321, 5662, 32, 13, 51, 4008]"

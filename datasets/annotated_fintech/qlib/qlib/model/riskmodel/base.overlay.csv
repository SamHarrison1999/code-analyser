annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Constants are defined in uppercase to indicate they are not meant to be changed.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 484, 389, 407, 4001, 284, 307, 3421, 13]",1.0,0,best_practice,10,Constants are defined in uppercase to indicate they are not meant to be changed.,,0,,[]
‚úÖ Best Practice: Constants are defined in uppercase to indicate they are not meant to be changed.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 484, 389, 407, 4001, 284, 307, 3421, 13]",1.0,7,best_practice,12,Constants are defined in uppercase to indicate they are not meant to be changed.,,0,class RiskModel(BaseModel):,"[4871, 19602, 17633, 7, 14881, 17633, 2599]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate they are not meant to be changed.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 484, 389, 407, 4001, 284, 307, 3421, 13]",1.0,7,best_practice,14,Constants are defined in uppercase to indicate they are not meant to be changed.,,7,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 5128, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446]",1.0,19,sast_risk,20,Use of assert for input validation can be bypassed if Python is run with optimizations,Low,7,"    IGNORE_NAN = ""ignore""","[220, 220, 220, 28730, 6965, 62, 45, 1565, 796, 366, 46430, 1]"
‚úÖ Best Practice: Store constructor parameters as instance variables for later use,"[26486, 227, 6705, 19939, 25, 9363, 23772, 10007, 355, 4554, 9633, 329, 1568, 779]",0.5,45,best_practice,26,Store constructor parameters as instance variables for later use,,19,            assume_centered (bool): whether the data is assumed to be centered.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7048, 62, 38050, 357, 30388, 2599, 1771, 262, 1366, 318, 9672, 284, 307, 19254, 13]"
‚úÖ Best Practice: Store constructor parameters as instance variables for later use,"[26486, 227, 6705, 19939, 25, 9363, 23772, 10007, 355, 4554, 9633, 329, 1568, 779]",0.5,53,best_practice,28,Store constructor parameters as instance variables for later use,,45,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Store constructor parameters as instance variables for later use,"[26486, 227, 6705, 19939, 25, 9363, 23772, 10007, 355, 4554, 9633, 329, 1568, 779]",0.5,61,best_practice,28,Store constructor parameters as instance variables for later use,,53,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Using assert for argument validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 4578, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",0.5,79,sast_risk,45,Using assert for argument validation can be bypassed if Python is run with optimizations.,Low,61,"        return_decomposed_components=False,","[220, 220, 220, 220, 220, 220, 220, 1441, 62, 12501, 3361, 1335, 62, 5589, 3906, 28, 25101, 11]"
‚ö†Ô∏è SAST Risk (Low): Using assert for feature support validation can be bypassed if Python is run with optimizations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 6818, 329, 3895, 1104, 21201, 460, 307, 17286, 276, 611, 11361, 318, 1057, 351, 41446, 13]",0.5,104,sast_risk,66,Using assert for feature support validation can be bypassed if Python is run with optimizations.,Low,79,"            if isinstance(X.index, pd.MultiIndex):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 55, 13, 9630, 11, 279, 67, 13, 29800, 15732, 2599]"
‚úÖ Best Practice: Method docstring provides a clear description of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 8748, 13]",1.0,114,best_practice,81,Method docstring provides a clear description of the method's purpose and usage.,,104,        # scale return,"[220, 220, 220, 220, 220, 220, 220, 1303, 5046, 1441]"
‚úÖ Best Practice: Docstring includes parameter and return type information.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3407, 11507, 290, 1441, 2099, 1321, 13]",1.0,128,best_practice,82,Docstring includes parameter and return type information.,,114,        if self.scale_return:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 9888, 62, 7783, 25]"
"üß† ML Signal: Use of matrix operations, common in ML algorithms.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 17593, 4560, 11, 2219, 287, 10373, 16113, 13]",1.0,157,ml_signal,92,"Use of matrix operations, common in ML algorithms.",,128,"            ), ""This risk model does not support return decomposed components of the covariance matrix ""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10612, 366, 1212, 2526, 2746, 857, 407, 1104, 1441, 38237, 1335, 6805, 286, 262, 44829, 590, 17593, 366]"
"üß† ML Signal: Use of dataset size, often relevant in ML contexts.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 27039, 2546, 11, 1690, 5981, 287, 10373, 26307, 13]",0.5,207,ml_signal,94,"Use of dataset size, often relevant in ML contexts.",,157,"            F, cov_b, var_u = self._predict(X, return_decomposed_components=True)  # pylint: disable=E1123","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 376, 11, 39849, 62, 65, 11, 1401, 62, 84, 796, 2116, 13557, 79, 17407, 7, 55, 11, 1441, 62, 12501, 3361, 1335, 62, 5589, 3906, 28, 17821, 8, 220, 1303, 279, 2645, 600, 25, 15560, 28, 36, 16, 10163]"
‚ö†Ô∏è SAST Risk (Low): Potential type confusion if X is not a numpy array or masked array.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2099, 10802, 611, 1395, 318, 407, 257, 299, 32152, 7177, 393, 29229, 7177, 13]",0.5,207,sast_risk,96,Potential type confusion if X is not a numpy array or masked array.,Low,207,,[]
"üß† ML Signal: Handling of masked arrays, indicating robustness to missing data.","[8582, 100, 254, 10373, 26484, 25, 49500, 286, 29229, 26515, 11, 12739, 12373, 1108, 284, 4814, 1366, 13]",1.0,218,ml_signal,97,"Handling of masked arrays, indicating robustness to missing data.",,207,        # estimate covariance,"[220, 220, 220, 220, 220, 220, 220, 1303, 8636, 44829, 590]"
üß† ML Signal: Use of matrix operations with masked data.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 17593, 4560, 351, 29229, 1366, 13]",0.5,231,ml_signal,101,Use of matrix operations with masked data.,,218,        if return_corr:,"[220, 220, 220, 220, 220, 220, 220, 611, 1441, 62, 10215, 81, 25]"
"üß† ML Signal: Return of a covariance matrix, a common operation in statistical ML models.","[8582, 100, 254, 10373, 26484, 25, 8229, 286, 257, 44829, 590, 17593, 11, 257, 2219, 4905, 287, 13905, 10373, 4981, 13]",1.0,257,ml_signal,102,"Return of a covariance matrix, a common operation in statistical ML models.",,231,            vola = np.sqrt(np.diag(S)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2322, 64, 796, 45941, 13, 31166, 17034, 7, 37659, 13, 10989, 363, 7, 50, 4008]"
"üß† ML Signal: Use of np.nan_to_num indicates handling of NaN values, which is a common preprocessing step in ML.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 12647, 62, 1462, 62, 22510, 9217, 9041, 286, 11013, 45, 3815, 11, 543, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 13]",0.5,270,ml_signal,101,"Use of np.nan_to_num indicates handling of NaN values, which is a common preprocessing step in ML.",,257,        if return_corr:,"[220, 220, 220, 220, 220, 220, 220, 611, 1441, 62, 10215, 81, 25]"
"üß† ML Signal: Use of np.ma.masked_invalid indicates handling of NaN values with masking, which is a common preprocessing step in ML.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 2611, 13, 27932, 276, 62, 259, 12102, 9217, 9041, 286, 11013, 45, 3815, 351, 9335, 278, 11, 543, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 13]",0.5,286,ml_signal,104,"Use of np.ma.masked_invalid indicates handling of NaN values with masking, which is a common preprocessing step in ML.",,270,            if columns is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 15180, 318, 6045, 25]"
üß† ML Signal: Centering data by subtracting the mean is a common preprocessing step in ML.,"[8582, 100, 254, 10373, 26484, 25, 1979, 1586, 1366, 416, 34128, 278, 262, 1612, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 13]",1.0,286,ml_signal,107,Centering data by subtracting the mean is a common preprocessing step in ML.,,286,,[]

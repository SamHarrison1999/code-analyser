[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\ud83e\udde0 ML Signal: Importing Dataset from torch.utils.data indicates usage of PyTorch for machine learning tasks",
    "confidence": 1.0,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      16092,
      292,
      316,
      422,
      28034,
      13,
      26791,
      13,
      7890,
      9217,
      8748,
      286,
      9485,
      15884,
      354,
      329,
      4572,
      4673,
      8861
    ],
    "label": "ml_signal",
    "reason": "Importing Dataset from torch.utils.data indicates usage of PyTorch for machine learning tasks"
  },
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Inheriting from Dataset indicates this class is intended for data handling, which is a clear design choice.",
    "confidence": 0.5,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 7,
    "end_token": 14,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      16092,
      292,
      316,
      9217,
      428,
      1398,
      318,
      5292,
      329,
      1366,
      9041,
      11,
      543,
      318,
      257,
      1598,
      1486,
      3572,
      13
    ],
    "label": "best_practice",
    "reason": "Inheriting from Dataset indicates this class is intended for data handling, which is a clear design choice."
  },
  {
    "line": 4,
    "text": "from torch.utils.data import Dataset",
    "annotation": "\ud83e\udde0 ML Signal: Use of *args to accept a variable number of arguments",
    "confidence": 1.0,
    "tokens": [
      6738,
      28034,
      13,
      26791,
      13,
      7890,
      1330,
      16092,
      292,
      316
    ],
    "start_token": 14,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1635,
      22046,
      284,
      2453,
      257,
      7885,
      1271,
      286,
      7159
    ],
    "label": "ml_signal",
    "reason": "Use of *args to accept a variable number of arguments"
  },
  {
    "line": 6,
    "text": "",
    "annotation": "\u2705 Best Practice: Storing datasets in an instance variable for later use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      40522,
      287,
      281,
      4554,
      7885,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Storing datasets in an instance variable for later use"
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of __getitem__ method to allow object indexing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 24,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      1136,
      9186,
      834,
      2446,
      284,
      1249,
      2134,
      6376,
      278
    ],
    "label": "best_practice",
    "reason": "Use of __getitem__ method to allow object indexing"
  },
  {
    "line": 7,
    "text": "class ConcatDataset(Dataset):",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection of datasets",
    "confidence": 0.5,
    "tokens": [
      4871,
      1482,
      9246,
      27354,
      292,
      316,
      7,
      27354,
      292,
      316,
      2599
    ],
    "start_token": 24,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      286,
      40522
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection of datasets"
  },
  {
    "line": 8,
    "text": "    def __init__(self, *datasets):",
    "annotation": "\u2705 Best Practice: Use of tuple comprehension for concise and efficient tuple creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      1635,
      19608,
      292,
      1039,
      2599
    ],
    "start_token": 35,
    "end_token": 50,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      46545,
      35915,
      329,
      35327,
      290,
      6942,
      46545,
      6282
    ],
    "label": "best_practice",
    "reason": "Use of tuple comprehension for concise and efficient tuple creation"
  },
  {
    "line": 7,
    "text": "class ConcatDataset(Dataset):",
    "annotation": "\u2705 Best Practice: Implementing __len__ allows the object to be used with len()",
    "confidence": 1.0,
    "tokens": [
      4871,
      1482,
      9246,
      27354,
      292,
      316,
      7,
      27354,
      292,
      316,
      2599
    ],
    "start_token": 50,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      11925,
      834,
      3578,
      262,
      2134,
      284,
      307,
      973,
      351,
      18896,
      3419
    ],
    "label": "best_practice",
    "reason": "Implementing __len__ allows the object to be used with len()"
  },
  {
    "line": 9,
    "text": "        self.datasets = datasets",
    "annotation": "\ud83e\udde0 ML Signal: Usage of min() function to determine the length",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19608,
      292,
      1039,
      796,
      40522
    ],
    "start_token": 61,
    "end_token": 75,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      949,
      3419,
      2163,
      284,
      5004,
      262,
      4129
    ],
    "label": "ml_signal",
    "reason": "Usage of min() function to determine the length"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over self.datasets to calculate length",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 75,
    "end_token": 75,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      2116,
      13,
      19608,
      292,
      1039,
      284,
      15284,
      4129
    ],
    "label": "ml_signal",
    "reason": "Iterating over self.datasets to calculate length"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize class attributes in the constructor for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 75,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      1398,
      12608,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize class attributes in the constructor for clarity and maintainability"
  },
  {
    "line": 12,
    "text": "        return tuple(d[i] for d in self.datasets)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class constructor to initialize with data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      46545,
      7,
      67,
      58,
      72,
      60,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 75,
    "end_token": 98,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      23772,
      284,
      41216,
      351,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of class constructor to initialize with data"
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\u2705 Best Practice: Use of a method to encapsulate functionality for sampling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 98,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2446,
      284,
      32652,
      5039,
      11244,
      329,
      19232
    ],
    "label": "best_practice",
    "reason": "Use of a method to encapsulate functionality for sampling"
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No input validation for 'n', could lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 121,
    "end_token": 144,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      5128,
      21201,
      329,
      705,
      77,
      3256,
      714,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No input validation for 'n', could lead to unexpected behavior"
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\ud83e\udde0 ML Signal: Sampling pattern from a dataset",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 144,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3409,
      11347,
      3912,
      422,
      257,
      27039
    ],
    "label": "ml_signal",
    "reason": "Sampling pattern from a dataset"
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\u2705 Best Practice: Importing modules at the top of the file is preferred",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 167,
    "end_token": 190,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      13103,
      379,
      262,
      1353,
      286,
      262,
      2393,
      318,
      9871
    ],
    "label": "best_practice",
    "reason": "Importing modules at the top of the file is preferred"
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\u2705 Best Practice: Method to get the size of the data, improving encapsulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 190,
    "end_token": 213,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      284,
      651,
      262,
      2546,
      286,
      262,
      1366,
      11,
      10068,
      32652,
      1741
    ],
    "label": "best_practice",
    "reason": "Method to get the size of the data, improving encapsulation"
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\ud83e\udde0 ML Signal: Access pattern to determine the size of a dataset",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 213,
    "end_token": 236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      3912,
      284,
      5004,
      262,
      2546,
      286,
      257,
      27039
    ],
    "label": "ml_signal",
    "reason": "Access pattern to determine the size of a dataset"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Constructor should initialize all attributes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 236,
    "end_token": 236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      28407,
      273,
      815,
      41216,
      477,
      12608
    ],
    "label": "best_practice",
    "reason": "Constructor should initialize all attributes"
  },
  {
    "line": 12,
    "text": "        return tuple(d[i] for d in self.datasets)",
    "annotation": "\ud83e\udde0 ML Signal: Storing a parameter as an instance attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      46545,
      7,
      67,
      58,
      72,
      60,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 236,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      11507,
      355,
      281,
      4554,
      11688
    ],
    "label": "ml_signal",
    "reason": "Storing a parameter as an instance attribute"
  },
  {
    "line": 12,
    "text": "        return tuple(d[i] for d in self.datasets)",
    "annotation": "\u2705 Best Practice: Type hinting for the parameter improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      46545,
      7,
      67,
      58,
      72,
      60,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 259,
    "end_token": 282,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      11507,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the parameter improves code readability and maintainability"
  },
  {
    "line": 14,
    "text": "    def __len__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __getitem__ suggests this class might be used like a list or dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      2599
    ],
    "start_token": 282,
    "end_token": 292,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      1136,
      9186,
      834,
      5644,
      428,
      1398,
      1244,
      307,
      973,
      588,
      257,
      1351,
      393,
      22155
    ],
    "label": "ml_signal",
    "reason": "Usage of __getitem__ suggests this class might be used like a list or dictionary"
  },
  {
    "line": 14,
    "text": "    def __len__(self):",
    "annotation": "\u2705 Best Practice: Implementing __len__ allows the object to be used with len(), improving usability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      2599
    ],
    "start_token": 292,
    "end_token": 302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      11925,
      834,
      3578,
      262,
      2134,
      284,
      307,
      973,
      351,
      18896,
      22784,
      10068,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Implementing __len__ allows the object to be used with len(), improving usability."
  },
  {
    "line": 15,
    "text": "        return min(len(d) for d in self.datasets)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of len() on custom objects can indicate object size or count properties.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      949,
      7,
      11925,
      7,
      67,
      8,
      329,
      288,
      287,
      2116,
      13,
      19608,
      292,
      1039,
      8
    ],
    "start_token": 302,
    "end_token": 325,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      18896,
      3419,
      319,
      2183,
      5563,
      460,
      7603,
      2134,
      2546,
      393,
      954,
      6608,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of len() on custom objects can indicate object size or count properties."
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,5,best_practice,13,Importing specific functions or classes from a module can improve code readability and maintainability.,,0,import numpy as np,"[11748, 299, 32152, 355, 45941]"
‚úÖ Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,32,best_practice,18,Importing specific functions or classes from a module can improve code readability and maintainability.,,5,"from qlib.backtest import INDICATOR_METRIC, collect_data_loop, get_strategy_executor","[6738, 10662, 8019, 13, 1891, 9288, 1330, 24413, 2149, 25633, 62, 47123, 41132, 11, 2824, 62, 7890, 62, 26268, 11, 651, 62, 2536, 4338, 62, 18558, 38409]"
‚úÖ Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,45,best_practice,20,Importing specific functions or classes from a module can improve code readability and maintainability.,,32,from qlib.backtest.executor import SimulatorExecutor,"[6738, 10662, 8019, 13, 1891, 9288, 13, 18558, 38409, 1330, 13942, 23002, 38409]"
‚úÖ Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,70,best_practice,22,Importing specific functions or classes from a module can improve code readability and maintainability.,,45,from qlib.rl.contrib.naive_config_parser import get_backtest_config_fromfile,"[6738, 10662, 8019, 13, 45895, 13, 3642, 822, 13, 2616, 425, 62, 11250, 62, 48610, 1330, 651, 62, 1891, 9288, 62, 11250, 62, 6738, 7753]"
‚úÖ Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,95,best_practice,22,Importing specific functions or classes from a module can improve code readability and maintainability.,,70,from qlib.rl.contrib.naive_config_parser import get_backtest_config_fromfile,"[6738, 10662, 8019, 13, 45895, 13, 3642, 822, 13, 2616, 425, 62, 11250, 62, 48610, 1330, 651, 62, 1891, 9288, 62, 11250, 62, 6738, 7753]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,95,best_practice,28,Use of type hints for function parameters and return type improves code readability and maintainability.,,95,,[]
‚ö†Ô∏è SAST Risk (Low): Potential misuse of SimulatorExecutor attributes if not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 13942, 23002, 38409, 12608, 611, 407, 6105, 31031, 13]",1.0,118,sast_risk,39,Potential misuse of SimulatorExecutor attributes if not properly validated.,Low,95,"            ""time_per_step"": data_granularity,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 2435, 62, 525, 62, 9662, 1298, 1366, 62, 46324, 33737, 11]"
üß† ML Signal: Sorting strategy configuration keys indicates a pattern of prioritizing certain frequencies.,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 4811, 8398, 8251, 9217, 257, 3912, 286, 19086, 2890, 1728, 19998, 13]",0.5,139,ml_signal,42,Sorting strategy configuration keys indicates a pattern of prioritizing certain frequencies.,,118,"            ""generate_report"": generate_report,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8612, 378, 62, 13116, 1298, 7716, 62, 13116, 11]"
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,155,best_practice,53,Type hinting for the return value improves code readability and maintainability.,,139,"            ""kwargs"": {","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 46265, 22046, 1298, 1391]"
üß† ML Signal: Checking the type of value_dict can indicate dynamic type handling patterns.,"[8582, 100, 254, 10373, 26484, 25, 39432, 262, 2099, 286, 1988, 62, 11600, 460, 7603, 8925, 2099, 9041, 7572, 13]",0.5,177,ml_signal,57,Checking the type of value_dict can indicate dynamic type handling patterns.,,155,"                ""track_data"": True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11659, 62, 7890, 1298, 6407, 11]"
üß† ML Signal: Usage of method chaining with to_series() can indicate common data transformation patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 351, 284, 62, 25076, 3419, 460, 7603, 2219, 1366, 13389, 7572, 13]",0.5,185,ml_signal,59,Usage of method chaining with to_series() can indicate common data transformation patterns.,,177,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
‚ö†Ô∏è SAST Risk (Low): Deep copying can be resource-intensive; ensure it's necessary.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10766, 23345, 460, 307, 8271, 12, 38096, 26, 4155, 340, 338, 3306, 13]",1.0,193,sast_risk,61,Deep copying can be resource-intensive; ensure it's necessary.,Low,185,    return executor_config,"[220, 220, 220, 1441, 3121, 273, 62, 11250]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide unexpected errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 10059, 8563, 13]",1.0,213,sast_risk,67,Catching broad exceptions can hide unexpected errors.,Low,193,"        if isinstance(value_dict, BaseOrderIndicator):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 8367, 62, 11600, 11, 7308, 18743, 5497, 26407, 2599]"
üß† ML Signal: Converting data to DataFrame is a common pattern in data processing tasks.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 284, 6060, 19778, 318, 257, 2219, 3912, 287, 1366, 7587, 8861, 13]",1.0,236,ml_signal,69,Converting data to DataFrame is a common pattern in data processing tasks.,,213,            value_dict = value_dict.to_series(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1988, 62, 11600, 796, 1988, 62, 11600, 13, 1462, 62, 25076, 3419]"
‚úÖ Best Practice: Using pd.concat with axis=0 is more readable than using 0 directly.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 351, 16488, 28, 15, 318, 517, 31744, 621, 1262, 657, 3264, 13]",0.5,257,best_practice,76,Using pd.concat with axis=0 is more readable than using 0 directly.,,236,        value_dict = pd.DataFrame(value_dict),"[220, 220, 220, 220, 220, 220, 220, 1988, 62, 11600, 796, 279, 67, 13, 6601, 19778, 7, 8367, 62, 11600, 8]"
üß† ML Signal: Setting a multi-index is a common pattern in time-series data processing.,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 5021, 12, 9630, 318, 257, 2219, 3912, 287, 640, 12, 25076, 1366, 7587, 13]",1.0,278,ml_signal,76,Setting a multi-index is a common pattern in time-series data processing.,,257,        value_dict = pd.DataFrame(value_dict),"[220, 220, 220, 220, 220, 220, 220, 1988, 62, 11600, 796, 279, 67, 13, 6601, 19778, 7, 8367, 62, 11600, 8]"
‚úÖ Best Practice: Add type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 3060, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,300,best_practice,72,Add type hints for function parameters and return type for better readability and maintainability.,,278,"            if value_dict[""ffr""].empty:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1988, 62, 11600, 14692, 487, 81, 1, 4083, 28920, 25]"
‚úÖ Best Practice: Use type hints for local variables for better code readability.,"[26486, 227, 6705, 19939, 25, 5765, 2099, 20269, 329, 1957, 9633, 329, 1365, 2438, 1100, 1799, 13]",1.0,300,best_practice,87,Use type hints for local variables for better code readability.,,300,,[]
üß† ML Signal: Appending to lists in a loop can indicate data aggregation patterns.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 8341, 287, 257, 9052, 460, 7603, 1366, 46500, 7572, 13]",0.5,309,ml_signal,92,Appending to lists in a loop can indicate data aggregation patterns.,,300,"    """"""Generate backtest reports","[220, 220, 220, 37227, 8645, 378, 736, 9288, 3136]"
üß† ML Signal: Using list comprehensions to filter and transform data.,"[8582, 100, 254, 10373, 26484, 25, 8554, 1351, 8569, 507, 284, 8106, 290, 6121, 1366, 13]",0.5,314,ml_signal,96,Using list comprehensions to filter and transform data.,,309,    decisions:,"[220, 220, 220, 5370, 25]"
üß† ML Signal: Concatenating dataframes can indicate data merging or aggregation patterns.,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 1366, 37805, 460, 7603, 1366, 35981, 393, 46500, 7572, 13]",0.5,326,ml_signal,99,Concatenating dataframes can indicate data merging or aggregation patterns.,,314,        List of indicator reports.,"[220, 220, 220, 220, 220, 220, 220, 7343, 286, 16916, 3136, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'freq' is not present in decision_details.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 19503, 80, 6, 318, 407, 1944, 287, 2551, 62, 36604, 13]",0.5,326,sast_risk,102,Potential KeyError if 'freq' is not present in decision_details.,Low,326,,[]
‚ö†Ô∏è SAST Risk (Low): Popping 'freq' without checking if it exists can lead to KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7695, 2105, 705, 19503, 80, 6, 1231, 10627, 611, 340, 7160, 460, 1085, 284, 7383, 12331, 13]",0.5,330,sast_risk,103,Popping 'freq' without checking if it exists can lead to KeyError.,Low,326,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Joining dataframes can indicate data integration patterns.,"[8582, 100, 254, 10373, 26484, 25, 5302, 3191, 1366, 37805, 460, 7603, 1366, 11812, 7572, 13]",0.5,344,ml_signal,107,Joining dataframes can indicate data integration patterns.,,330,    for report_indicator in report_indicators:,"[220, 220, 220, 329, 989, 62, 521, 26407, 287, 989, 62, 521, 44549, 25]"
‚úÖ Best Practice: Initialize external dependencies at the start of the function.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 7097, 20086, 379, 262, 923, 286, 262, 2163, 13]",0.5,355,best_practice,132,Initialize external dependencies at the start of the function.,,344,"    generate_report: bool = False,","[220, 220, 220, 7716, 62, 13116, 25, 20512, 796, 10352, 11]"
üß† ML Signal: Usage of unique to extract distinct elements from a DataFrame column.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3748, 284, 7925, 7310, 4847, 422, 257, 6060, 19778, 5721, 13]",0.5,383,ml_signal,134,Usage of unique to extract distinct elements from a DataFrame column.,,355,"    """"""Run backtest in a single thread with SingleAssetOrderExecution simulator. The orders will be executed day by day.","[220, 220, 220, 37227, 10987, 736, 9288, 287, 257, 2060, 4704, 351, 14206, 45869, 18743, 23002, 1009, 35375, 13, 383, 6266, 481, 307, 10945, 1110, 416, 1110, 13]"
üß† ML Signal: Iterating over DataFrame rows using iterrows.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15274, 1262, 11629, 8516, 13]",1.0,388,ml_signal,138,Iterating over DataFrame rows using iterrows.,,383,    ----------,"[220, 220, 220, 24200, 438]"
üß† ML Signal: Conversion of string to Timestamp for date manipulation.,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4731, 284, 5045, 27823, 329, 3128, 17512, 13]",0.5,398,ml_signal,140,Conversion of string to Timestamp for date manipulation.,,388,        Backtest config,"[220, 220, 220, 220, 220, 220, 220, 5157, 9288, 4566]"
üß† ML Signal: Usage of replace to modify date components.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6330, 284, 13096, 3128, 6805, 13]",0.5,408,ml_signal,140,Usage of replace to modify date components.,,398,        Backtest config,"[220, 220, 220, 220, 220, 220, 220, 5157, 9288, 4566]"
‚úÖ Best Practice: Use of named arguments for clarity.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3706, 7159, 329, 16287, 13]",1.0,412,best_practice,147,Use of named arguments for clarity.,,408,    split,"[220, 220, 220, 6626]"
‚úÖ Best Practice: Encapsulation of configuration logic in a separate function.,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 8398, 9156, 287, 257, 4553, 2163, 13]",0.5,412,best_practice,153,Encapsulation of configuration logic in a separate function.,,412,,[]
‚úÖ Best Practice: Use of deepcopy to avoid mutating the original configuration.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 3368, 4517, 803, 262, 2656, 8398, 13]",1.0,428,best_practice,160,Use of deepcopy to avoid mutating the original configuration.,,412,    stocks = orders.instrument.unique().tolist(),"[220, 220, 220, 14420, 796, 6266, 13, 259, 43872, 13, 34642, 22446, 83, 349, 396, 3419]"
‚úÖ Best Practice: Use of update for dictionary modifications.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4296, 329, 22155, 19008, 13]",0.5,444,best_practice,160,Use of update for dictionary modifications.,,428,    stocks = orders.instrument.unique().tolist(),"[220, 220, 220, 14420, 796, 6266, 13, 259, 43872, 13, 34642, 22446, 83, 349, 396, 3419]"
‚úÖ Best Practice: Clear instantiation of objects with relevant configurations.,"[26486, 227, 6705, 19939, 25, 11459, 9113, 3920, 286, 5563, 351, 5981, 25412, 13]",0.5,464,best_practice,169,Clear instantiation of objects with relevant configurations.,,444,"            stock_id=row[""instrument""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 28, 808, 14692, 259, 43872, 33116]"
üß† ML Signal: Appending results to a list for later processing.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 2482, 284, 257, 1351, 329, 1568, 7587, 13]",0.5,488,ml_signal,177,Appending results to a list for later processing.,,464,"            strategy_config=backtest_config[""strategies""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4811, 62, 11250, 28, 1891, 9288, 62, 11250, 14692, 2536, 2397, 444, 33116]"
üß† ML Signal: List comprehension for extracting specific data from a list of dictionaries.,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 329, 37895, 2176, 1366, 422, 257, 1351, 286, 48589, 3166, 13]",1.0,514,ml_signal,180,List comprehension for extracting specific data from a list of dictionaries.,,488,"            data_granularity=backtest_config[""data_granularity""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 46324, 33737, 28, 1891, 9288, 62, 11250, 14692, 7890, 62, 46324, 33737, 33116]"
üß† ML Signal: Dictionary comprehension for data transformation.,"[8582, 100, 254, 10373, 26484, 25, 28261, 35915, 329, 1366, 13389, 13]",0.5,522,ml_signal,181,Dictionary comprehension for data transformation.,,514,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Conversion of data to DataFrame for structured data handling.,"[26486, 227, 6705, 19939, 25, 44101, 286, 1366, 284, 6060, 19778, 329, 20793, 1366, 9041, 13]",1.0,535,best_practice,184,Conversion of data to DataFrame for structured data handling.,,522,        exchange_config.update(,"[220, 220, 220, 220, 220, 220, 220, 5163, 62, 11250, 13, 19119, 7]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks, which can be disabled in optimized mode.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 11, 543, 460, 307, 10058, 287, 23392, 4235, 13]",0.5,548,sast_risk,184,"Use of assert for runtime checks, which can be disabled in optimized mode.",Low,535,        exchange_config.update(,"[220, 220, 220, 220, 220, 220, 220, 5163, 62, 11250, 13, 19119, 7]"
‚úÖ Best Practice: Encapsulation of report generation logic in a separate function.,"[26486, 227, 6705, 19939, 25, 14711, 1686, 1741, 286, 989, 5270, 9156, 287, 257, 4553, 2163, 13]",0.5,556,best_practice,189,Encapsulation of report generation logic in a separate function.,,548,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Accessing DataFrame elements using iloc.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 4847, 1262, 4229, 420, 13]",1.0,571,ml_signal,191,Accessing DataFrame elements using iloc.,,556,        simulator = SingleAssetOrderExecution(,"[220, 220, 220, 220, 220, 220, 220, 35375, 796, 14206, 45869, 18743, 23002, 1009, 7]"
‚úÖ Best Practice: Return consistent data structures based on conditions.,"[26486, 227, 6705, 19939, 25, 8229, 6414, 1366, 8573, 1912, 319, 3403, 13]",0.5,586,best_practice,191,Return consistent data structures based on conditions.,,571,        simulator = SingleAssetOrderExecution(,"[220, 220, 220, 220, 220, 220, 220, 35375, 796, 14206, 45869, 18743, 23002, 1009, 7]"
‚úÖ Best Practice: Initialize external dependencies or configurations at the start of the function.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 7097, 20086, 393, 25412, 379, 262, 923, 286, 262, 2163, 13]",0.5,607,best_practice,212,Initialize external dependencies or configurations at the start of the function.,,586,            report = {stock_id: _report},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 989, 796, 1391, 13578, 62, 312, 25, 4808, 13116, 92]"
"üß† ML Signal: Extracting min and max datetime from orders, indicating time range of interest.","[8582, 100, 254, 10373, 26484, 25, 29677, 278, 949, 290, 3509, 4818, 8079, 422, 6266, 11, 12739, 640, 2837, 286, 1393, 13]",0.5,629,ml_signal,214,"Extracting min and max datetime from orders, indicating time range of interest.",,607,            day = orders.iloc[0].datetime,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1110, 796, 6266, 13, 346, 420, 58, 15, 4083, 19608, 8079]"
"üß† ML Signal: Extracting unique instruments from orders, indicating assets of interest.","[8582, 100, 254, 10373, 26484, 25, 29677, 278, 3748, 12834, 422, 6266, 11, 12739, 6798, 286, 1393, 13]",0.5,629,ml_signal,216,"Extracting unique instruments from orders, indicating assets of interest.",,629,,[]
‚úÖ Best Practice: Use deepcopy to avoid modifying the original configuration.,"[26486, 227, 6705, 19939, 25, 5765, 2769, 30073, 284, 3368, 30620, 262, 2656, 8398, 13]",1.0,639,best_practice,234,Use deepcopy to avoid modifying the original configuration.,,629,        Backtest config,"[220, 220, 220, 220, 220, 220, 220, 5157, 9288, 4566]"
"üß† ML Signal: Collecting data in a loop, indicating iterative processing of time-series data.","[8582, 100, 254, 10373, 26484, 25, 9745, 278, 1366, 287, 257, 9052, 11, 12739, 11629, 876, 7587, 286, 640, 12, 25076, 1366, 13]",0.5,656,ml_signal,255,"Collecting data in a loop, indicating iterative processing of time-series data.",,639,"    trade_start_time = orders[""datetime""].min()","[220, 220, 220, 3292, 62, 9688, 62, 2435, 796, 6266, 14692, 19608, 8079, 1, 4083, 1084, 3419]"
"‚ö†Ô∏è SAST Risk (Low): Potential for NaN values in records, which could lead to runtime errors if not handled.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11013, 45, 3815, 287, 4406, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 12118, 13]",0.5,664,sast_risk,259,"Potential for NaN values in records, which could lead to runtime errors if not handled.",Low,656,    strategy_config = {,"[220, 220, 220, 4811, 62, 11250, 796, 1391]"
"üß† ML Signal: Using the first order's instrument to generate a report, indicating a focus on specific assets.","[8582, 100, 254, 10373, 26484, 25, 8554, 262, 717, 1502, 338, 8875, 284, 7716, 257, 989, 11, 12739, 257, 2962, 319, 2176, 6798, 13]",0.5,680,ml_signal,263,"Using the first order's instrument to generate a report, indicating a focus on specific assets.",,664,"            ""file"": orders,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 7753, 1298, 6266, 11]"
"üß† ML Signal: Using the first order's datetime to generate a report, indicating a focus on specific time periods.","[8582, 100, 254, 10373, 26484, 25, 8554, 262, 717, 1502, 338, 4818, 8079, 284, 7716, 257, 989, 11, 12739, 257, 2962, 319, 2176, 640, 9574, 13]",0.5,688,ml_signal,268,"Using the first order's datetime to generate a report, indicating a focus on specific time periods.",,680,"        },","[220, 220, 220, 220, 220, 220, 220, 8964]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""order_file"" is not in backtest_config","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 2875, 62, 7753, 1, 318, 407, 287, 736, 9288, 62, 11250]",0.5,700,sast_risk,267,"Potential KeyError if ""order_file"" is not in backtest_config",Low,688,"            ),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10612]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""exchange"" or ""cash_limit"" is not in backtest_config","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 1069, 3803, 1, 393, 366, 30350, 62, 32374, 1, 318, 407, 287, 736, 9288, 62, 11250]",0.5,704,sast_risk,269,"Potential KeyError if ""exchange"" or ""cash_limit"" is not in backtest_config",Low,700,    },"[220, 220, 220, 1782]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""generate_report"" is not in backtest_config","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 8612, 378, 62, 13116, 1, 318, 407, 287, 736, 9288, 62, 11250]",0.5,724,sast_risk,271,"Potential KeyError if ""generate_report"" is not in backtest_config",Low,704,    executor_config = _get_multi_level_executor_config(,"[220, 220, 220, 3121, 273, 62, 11250, 796, 4808, 1136, 62, 41684, 62, 5715, 62, 18558, 38409, 62, 11250, 7]"
üß† ML Signal: Conditional logic based on a boolean flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 6056]",1.0,746,ml_signal,275,Conditional logic based on a boolean flag,,724,"        data_granularity=backtest_config[""data_granularity""],","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 46324, 33737, 28, 1891, 9288, 62, 11250, 14692, 7890, 62, 46324, 33737, 33116]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""concurrency"" is not in backtest_config","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 1102, 34415, 1, 318, 407, 287, 736, 9288, 62, 11250]",0.5,768,sast_risk,275,"Potential KeyError if ""concurrency"" is not in backtest_config",Low,746,"        data_granularity=backtest_config[""data_granularity""],","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 46324, 33737, 28, 1891, 9288, 62, 11250, 14692, 7890, 62, 46324, 33737, 33116]"
‚úÖ Best Practice: Setting the number of threads for torch to 1 for consistent performance,"[26486, 227, 6705, 19939, 25, 25700, 262, 1271, 286, 14390, 329, 28034, 284, 352, 329, 6414, 2854]",0.5,790,best_practice,275,Setting the number of threads for torch to 1 for consistent performance,,768,"        data_granularity=backtest_config[""data_granularity""],","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 46324, 33737, 28, 1891, 9288, 62, 11250, 14692, 7890, 62, 46324, 33737, 33116]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""output_dir"" is not in backtest_config","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 22915, 62, 15908, 1, 318, 407, 287, 736, 9288, 62, 11250]",0.5,801,sast_risk,291,"Potential KeyError if ""output_dir"" is not in backtest_config",Low,790,"        benchmark=None,","[220, 220, 220, 220, 220, 220, 220, 18335, 28, 14202, 11]"
‚ö†Ô∏è SAST Risk (Low): Pickle can be unsafe if loading untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12346, 293, 460, 307, 21596, 611, 11046, 1418, 81, 8459, 1366]",0.5,835,sast_risk,298,Pickle can be unsafe if loading untrusted data,Low,801,"    decisions = list(collect_data_loop(trade_start_time, trade_end_time, strategy, executor, report_dict))","[220, 220, 220, 5370, 796, 1351, 7, 33327, 62, 7890, 62, 26268, 7, 25351, 62, 9688, 62, 2435, 11, 3292, 62, 437, 62, 2435, 11, 4811, 11, 3121, 273, 11, 989, 62, 11600, 4008]"
‚úÖ Best Practice: Using pd.concat with axis specified for clarity,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 351, 16488, 7368, 329, 16287]",0.5,862,best_practice,300,Using pd.concat with axis specified for clarity,,835,"    indicator_dict = cast(INDICATOR_METRIC, report_dict.get(""indicator_dict""))","[220, 220, 220, 16916, 62, 11600, 796, 3350, 7, 12115, 2149, 25633, 62, 47123, 41132, 11, 989, 62, 11600, 13, 1136, 7203, 521, 26407, 62, 11600, 48774]"
‚ö†Ô∏è SAST Risk (Low): Potential race condition if multiple processes try to create the directory,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 611, 3294, 7767, 1949, 284, 2251, 262, 8619]",0.5,870,sast_risk,304,Potential race condition if multiple processes try to create the directory,Low,862,    if generate_report:,"[220, 220, 220, 611, 7716, 62, 13116, 25]"
‚úÖ Best Practice: Suppressing specific warnings for cleaner output,"[26486, 227, 6705, 19939, 25, 8105, 11697, 2176, 14601, 329, 21723, 5072]",1.0,879,best_practice,314,Suppressing specific warnings for cleaner output,,870,        return records,"[220, 220, 220, 220, 220, 220, 220, 1441, 4406]"
‚úÖ Best Practice: Providing help messages for command-line arguments,"[26486, 227, 6705, 19939, 25, 7518, 2530, 1037, 6218, 329, 3141, 12, 1370, 7159]",1.0,906,best_practice,317,Providing help messages for command-line arguments,,879,"def backtest(backtest_config: dict, with_simulator: bool = False) -> pd.DataFrame:","[4299, 736, 9288, 7, 1891, 9288, 62, 11250, 25, 8633, 11, 351, 62, 14323, 8927, 25, 20512, 796, 10352, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if config_path does not exist or is invalid,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 4566, 62, 6978, 857, 407, 2152, 393, 318, 12515]",0.5,929,sast_risk,318,Potential issue if config_path does not exist or is invalid,Low,906,"    order_df = read_order_file(backtest_config[""order_file""])","[220, 220, 220, 1502, 62, 7568, 796, 1100, 62, 2875, 62, 7753, 7, 1891, 9288, 62, 11250, 14692, 2875, 62, 7753, 8973, 8]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,2,best_practice,8,Grouping imports from the same package together improves readability.,,0,import sys,"[11748, 25064]"
✅ Best Practice: Importing specific classes or functions can improve code readability and reduce memory usage.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 393, 5499, 460, 2987, 2438, 1100, 1799, 290, 4646, 4088, 8748, 13]",0.5,7,best_practice,10,Importing specific classes or functions can improve code readability and reduce memory usage.,,2,from pathlib import Path,"[6738, 3108, 8019, 1330, 10644]"
✅ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,13,best_practice,15,Grouping imports from the same package together improves readability.,,7,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
✅ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,26,best_practice,27,Grouping imports from the same package together improves readability.,,13,from qlib.utils import init_instance_by_config,"[6738, 10662, 8019, 13, 26791, 1330, 2315, 62, 39098, 62, 1525, 62, 11250]"
🧠 ML Signal: Function to set random seed for reproducibility in ML experiments,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 900, 4738, 9403, 329, 8186, 66, 2247, 287, 10373, 10256]",1.0,39,ml_signal,26,Function to set random seed for reproducibility in ML experiments,,26,from qlib.rl.utils.log import CsvWriter,"[6738, 10662, 8019, 13, 45895, 13, 26791, 13, 6404, 1330, 327, 21370, 34379]"
🧠 ML Signal: Setting seed for PyTorch CPU operations,"[8582, 100, 254, 10373, 26484, 25, 25700, 9403, 329, 9485, 15884, 354, 9135, 4560]",0.5,48,ml_signal,28,Setting seed for PyTorch CPU operations,,39,from tianshou.policy import BasePolicy,"[6738, 256, 1547, 15710, 13, 30586, 1330, 7308, 36727]"
🧠 ML Signal: Setting seed for all CUDA devices for PyTorch,"[8582, 100, 254, 10373, 26484, 25, 25700, 9403, 329, 477, 29369, 5631, 4410, 329, 9485, 15884, 354]",0.5,48,ml_signal,30,Setting seed for all CUDA devices for PyTorch,,48,,[]
🧠 ML Signal: Setting seed for NumPy random number generation,"[8582, 100, 254, 10373, 26484, 25, 25700, 9403, 329, 31835, 20519, 4738, 1271, 5270]",0.5,60,ml_signal,32,Setting seed for NumPy random number generation,,48,def seed_everything(seed: int) -> None:,"[4299, 9403, 62, 37814, 7, 28826, 25, 493, 8, 4613, 6045, 25]"
🧠 ML Signal: Setting seed for Python's built-in random module,"[8582, 100, 254, 10373, 26484, 25, 25700, 9403, 329, 11361, 338, 3170, 12, 259, 4738, 8265]",0.5,77,ml_signal,34,Setting seed for Python's built-in random module,,60,    torch.cuda.manual_seed_all(seed),"[220, 220, 220, 28034, 13, 66, 15339, 13, 805, 723, 62, 28826, 62, 439, 7, 28826, 8]"
🧠 ML Signal: Ensuring deterministic behavior in PyTorch's cuDNN backend,"[8582, 100, 254, 10373, 26484, 25, 48221, 870, 2206, 49228, 4069, 287, 9485, 15884, 354, 338, 18912, 35, 6144, 30203]",1.0,86,ml_signal,36,Ensuring deterministic behavior in PyTorch's cuDNN backend,,77,    random.seed(seed),"[220, 220, 220, 4738, 13, 28826, 7, 28826, 8]"
"⚠️ SAST Risk (Medium): os.path.isfile can be susceptible to TOCTOU (Time of Check, Time of Use) race conditions.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 28686, 13, 6978, 13, 4468, 576, 460, 307, 22084, 284, 5390, 4177, 2606, 357, 7575, 286, 6822, 11, 3862, 286, 5765, 8, 3234, 3403, 13]",0.5,98,sast_risk,32,"os.path.isfile can be susceptible to TOCTOU (Time of Check, Time of Use) race conditions.",Medium,86,def seed_everything(seed: int) -> None:,"[4299, 9403, 62, 37814, 7, 28826, 25, 493, 8, 4613, 6045, 25]"
⚠️ SAST Risk (Low): Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2298, 293, 329, 748, 48499, 1634, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 2723, 318, 1418, 81, 8459, 13]",0.5,115,sast_risk,34,Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted.,Low,98,    torch.cuda.manual_seed_all(seed),"[220, 220, 220, 28034, 13, 66, 15339, 13, 805, 723, 62, 28826, 62, 439, 7, 28826, 8]"
✅ Best Practice: Consider using a more descriptive variable name than 'file' for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 7885, 1438, 621, 705, 7753, 6, 329, 16287, 13]",0.5,115,best_practice,38,Consider using a more descriptive variable name than 'file' for clarity.,,115,,[]
⚠️ SAST Risk (Low): Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2298, 293, 329, 748, 48499, 1634, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 2723, 318, 1418, 81, 8459, 13]",0.5,134,sast_risk,40,Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted.,Low,115,def _read_orders(order_dir: Path) -> pd.DataFrame:,"[4299, 4808, 961, 62, 6361, 7, 2875, 62, 15908, 25, 10644, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
🧠 ML Signal: Appending to a list in a loop is a common pattern that can be used to identify data aggregation.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 257, 1351, 287, 257, 9052, 318, 257, 2219, 3912, 326, 460, 307, 973, 284, 5911, 1366, 46500, 13]",0.5,154,ml_signal,42,Appending to a list in a loop is a common pattern that can be used to identify data aggregation.,,134,        return pd.read_pickle(order_dir),"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 961, 62, 27729, 293, 7, 2875, 62, 15908, 8]"
🧠 ML Signal: Concatenating a list of DataFrames is a common pattern in data processing tasks.,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 257, 1351, 286, 6060, 35439, 318, 257, 2219, 3912, 287, 1366, 7587, 8861, 13]",0.5,174,ml_signal,42,Concatenating a list of DataFrames is a common pattern in data processing tasks.,,154,        return pd.read_pickle(order_dir),"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 961, 62, 27729, 293, 7, 2875, 62, 15908, 8]"
"✅ Best Practice: Class should inherit from object explicitly in Python 2.x for consistency, but in Python 3.x it's optional as all classes implicitly inherit from object.","[26486, 227, 6705, 19939, 25, 5016, 815, 16955, 422, 2134, 11777, 287, 11361, 362, 13, 87, 329, 15794, 11, 475, 287, 11361, 513, 13, 87, 340, 338, 11902, 355, 477, 6097, 31821, 16955, 422, 2134, 13]",0.5,194,best_practice,42,"Class should inherit from object explicitly in Python 2.x for consistency, but in Python 3.x it's optional as all classes implicitly inherit from object.",,174,        return pd.read_pickle(order_dir),"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 961, 62, 27729, 293, 7, 2875, 62, 15908, 8]"
✅ Best Practice: Use of private variables to encapsulate class attributes,"[26486, 227, 6705, 19939, 25, 5765, 286, 2839, 9633, 284, 32652, 5039, 1398, 12608]",0.5,194,best_practice,49,Use of private variables to encapsulate class attributes,,194,,[]
✅ Best Practice: Use of private variables to encapsulate class attributes,"[26486, 227, 6705, 19939, 25, 5765, 286, 2839, 9633, 284, 32652, 5039, 1398, 12608]",0.5,206,best_practice,51,Use of private variables to encapsulate class attributes,,194,class LazyLoadDataset(Dataset):,"[4871, 406, 12582, 8912, 27354, 292, 316, 7, 27354, 292, 316, 2599]"
"🧠 ML Signal: Reading and resetting index of a DataFrame, common data processing pattern","[8582, 100, 254, 10373, 26484, 25, 11725, 290, 13259, 889, 6376, 286, 257, 6060, 19778, 11, 2219, 1366, 7587, 3912]",1.0,215,ml_signal,53,"Reading and resetting index of a DataFrame, common data processing pattern",,206,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
✅ Best Practice: Type hinting for optional attributes improves code readability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 11902, 12608, 19575, 2438, 1100, 1799]",0.5,230,best_practice,55,Type hinting for optional attributes improves code readability,,215,"        order_file_path: Path,","[220, 220, 220, 220, 220, 220, 220, 1502, 62, 7753, 62, 6978, 25, 10644, 11]"
✅ Best Practice: Use of Path object for file paths enhances cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 2134, 329, 2393, 13532, 32479, 3272, 12, 24254, 17764]",1.0,247,best_practice,57,Use of Path object for file paths enhances cross-platform compatibility,,230,"        default_end_time_index: int,","[220, 220, 220, 220, 220, 220, 220, 4277, 62, 437, 62, 2435, 62, 9630, 25, 493, 11]"
✅ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,260,best_practice,54,Type hinting improves code readability and maintainability,,247,"        data_dir: str,","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 15908, 25, 965, 11]"
🧠 ML Signal: Usage of __len__ indicates implementation of a container-like class,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 11925, 834, 9217, 7822, 286, 257, 9290, 12, 2339, 1398]",0.5,277,ml_signal,56,Usage of __len__ indicates implementation of a container-like class,,260,"        default_start_time_index: int,","[220, 220, 220, 220, 220, 220, 220, 4277, 62, 9688, 62, 2435, 62, 9630, 25, 493, 11]"
✅ Best Practice: Use of type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,294,best_practice,57,Use of type hinting for function parameters and return type improves code readability and maintainability.,,277,"        default_end_time_index: int,","[220, 220, 220, 220, 220, 220, 220, 4277, 62, 437, 62, 2435, 62, 9630, 25, 493, 11]"
⚠️ SAST Risk (Low): Direct access to DataFrame using iloc can lead to IndexError if index is out of bounds.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 1895, 284, 6060, 19778, 1262, 4229, 420, 460, 1085, 284, 12901, 12331, 611, 6376, 318, 503, 286, 22303, 13]",1.0,318,sast_risk,59,Direct access to DataFrame using iloc can lead to IndexError if index is out of bounds.,Low,294,        self._default_start_time_index = default_start_time_index,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12286, 62, 9688, 62, 2435, 62, 9630, 796, 4277, 62, 9688, 62, 2435, 62, 9630]"
🧠 ML Signal: Conditional logic based on None value can indicate lazy loading or initialization patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 6045, 1988, 460, 7603, 16931, 11046, 393, 37588, 7572, 13]",0.5,342,ml_signal,60,Conditional logic based on None value can indicate lazy loading or initialization patterns.,,318,        self._default_end_time_index = default_end_time_index,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12286, 62, 437, 62, 2435, 62, 9630, 796, 4277, 62, 437, 62, 2435, 62, 9630]"
🧠 ML Signal: Use of list comprehension to transform data can indicate data preprocessing patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 284, 6121, 1366, 460, 7603, 1366, 662, 36948, 7572, 13]",0.5,362,ml_signal,70,Use of list comprehension to transform data can indicate data preprocessing patterns.,,342,        row = self._order_df.iloc[index],"[220, 220, 220, 220, 220, 220, 220, 5752, 796, 2116, 13557, 2875, 62, 7568, 13, 346, 420, 58, 9630, 60]"
⚠️ SAST Risk (Low): Potential risk of IndexError if _default_start_time_index is out of bounds.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 12901, 12331, 611, 4808, 12286, 62, 9688, 62, 2435, 62, 9630, 318, 503, 286, 22303, 13]",0.5,388,sast_risk,78,Potential risk of IndexError if _default_start_time_index is out of bounds.,Low,362,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
⚠️ SAST Risk (Low): Potential risk of IndexError if _default_end_time_index is out of bounds.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 12901, 12331, 611, 4808, 12286, 62, 437, 62, 2435, 62, 9630, 318, 503, 286, 22303, 13]",1.0,414,sast_risk,78,Potential risk of IndexError if _default_end_time_index is out of bounds.,Low,388,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
🧠 ML Signal: Function signature indicates a pattern for configuring and running ML training and testing,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 9217, 257, 3912, 329, 4566, 870, 290, 2491, 10373, 3047, 290, 4856]",1.0,440,ml_signal,78,Function signature indicates a pattern for configuring and running ML training and testing,,414,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
✅ Best Practice: Type hints for parameters improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,466,best_practice,78,Type hints for parameters improve code readability and maintainability,,440,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
⚠️ SAST Risk (Low): Accessing dictionary keys without validation can lead to KeyError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 22155, 8251, 1231, 21201, 460, 1085, 284, 7383, 12331]",0.5,492,sast_risk,78,Accessing dictionary keys without validation can lead to KeyError,Low,466,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
✅ Best Practice: Using .get() with a default value prevents KeyError and improves code robustness,"[26486, 227, 6705, 19939, 25, 8554, 764, 1136, 3419, 351, 257, 4277, 1988, 15174, 7383, 12331, 290, 19575, 2438, 12373, 1108]",0.5,518,best_practice,78,Using .get() with a default value prevents KeyError and improves code robustness,,492,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
✅ Best Practice: Use of a factory function to encapsulate object creation logic,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 8860, 2163, 284, 32652, 5039, 2134, 6282, 9156]",0.5,543,best_practice,92,Use of a factory function to encapsulate object creation logic,,518,"            direction=OrderDir(int(row[""order_type""])),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4571, 28, 18743, 35277, 7, 600, 7, 808, 14692, 2875, 62, 4906, 8973, 36911]"
"⚠️ SAST Risk (Low): Use of assert for runtime checks, which can be disabled with optimization flags","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 11, 543, 460, 307, 10058, 351, 23989, 9701]",0.5,552,sast_risk,103,"Use of assert for runtime checks, which can be disabled with optimization flags",Low,543,"    trainer_config: dict,","[220, 220, 220, 21997, 62, 11250, 25, 8633, 11]"
"⚠️ SAST Risk (Low): Use of assert for runtime checks, which can be disabled with optimization flags","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 11, 543, 460, 307, 10058, 351, 23989, 9701]",0.5,566,sast_risk,105,"Use of assert for runtime checks, which can be disabled with optimization flags",Low,552,"    state_interpreter: StateInterpreter,","[220, 220, 220, 1181, 62, 3849, 3866, 353, 25, 1812, 9492, 3866, 353, 11]"
🧠 ML Signal: Conditional logic to determine if training should be run,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5004, 611, 3047, 815, 307, 1057]",0.5,580,ml_signal,105,Conditional logic to determine if training should be run,,566,"    state_interpreter: StateInterpreter,","[220, 220, 220, 1181, 62, 3849, 3866, 353, 25, 1812, 9492, 3866, 353, 11]"
🧠 ML Signal: Use of LazyLoadDataset for efficient data handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 406, 12582, 8912, 27354, 292, 316, 329, 6942, 1366, 9041]",0.5,594,ml_signal,105,Use of LazyLoadDataset for efficient data handling,,580,"    state_interpreter: StateInterpreter,","[220, 220, 220, 1181, 62, 3849, 3866, 353, 25, 1812, 9492, 3866, 353, 11]"
✅ Best Practice: Use of type hints for better code readability and maintenance,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 9262]",0.5,609,best_practice,117,Use of type hints for better code readability and maintenance,,594,        return SingleAssetOrderExecutionSimple(,"[220, 220, 220, 220, 220, 220, 220, 1441, 14206, 45869, 18743, 23002, 1009, 26437, 7]"
🧠 ML Signal: Conditional logic to add callbacks based on configuration,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 751, 869, 10146, 1912, 319, 8398]",0.5,634,ml_signal,124,Conditional logic to add callbacks based on configuration,,609,"            vol_threshold=simulator_config[""vol_limit""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2322, 62, 400, 10126, 28, 14323, 8927, 62, 11250, 14692, 10396, 62, 32374, 33116]"
🧠 ML Signal: Conditional logic to add early stopping based on configuration,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 751, 1903, 12225, 1912, 319, 8398]",0.5,654,ml_signal,131,Conditional logic to add early stopping based on configuration,,634,"        train_dataset, valid_dataset = [","[220, 220, 220, 220, 220, 220, 220, 4512, 62, 19608, 292, 316, 11, 4938, 62, 19608, 292, 316, 796, 685]"
🧠 ML Signal: Invocation of a training function with various parameters,"[8582, 100, 254, 10373, 26484, 25, 10001, 5040, 286, 257, 3047, 2163, 351, 2972, 10007]",0.5,674,ml_signal,131,Invocation of a training function with various parameters,,654,"        train_dataset, valid_dataset = [","[220, 220, 220, 220, 220, 220, 220, 4512, 62, 19608, 292, 316, 11, 4938, 62, 19608, 292, 316, 796, 685]"
🧠 ML Signal: Conditional logic to determine if backtesting should be run,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5004, 611, 736, 33407, 815, 307, 1057]",1.0,697,ml_signal,161,Conditional logic to determine if backtesting should be run,,674,"            state_interpreter=state_interpreter,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1181, 62, 3849, 3866, 353, 28, 5219, 62, 3849, 3866, 353, 11]"
🧠 ML Signal: Use of LazyLoadDataset for efficient data handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 406, 12582, 8912, 27354, 292, 316, 329, 6942, 1366, 9041]",0.5,720,ml_signal,161,Use of LazyLoadDataset for efficient data handling,,697,"            state_interpreter=state_interpreter,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1181, 62, 3849, 3866, 353, 28, 5219, 62, 3849, 3866, 353, 11]"
🧠 ML Signal: Invocation of a backtesting function with various parameters,"[8582, 100, 254, 10373, 26484, 25, 10001, 5040, 286, 257, 736, 33407, 2163, 351, 2972, 10007]",0.5,732,ml_signal,172,Invocation of a backtesting function with various parameters,,720,"            },","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8964]"
⚠️ SAST Risk (Low): Dynamic import paths can lead to code execution risks if paths are not controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 26977, 1330, 13532, 460, 1085, 284, 2438, 9706, 7476, 611, 13532, 389, 407, 6856, 13]",0.5,744,sast_risk,180,Dynamic import paths can lead to code execution risks if paths are not controlled.,Low,732,"            },","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8964]"
⚠️ SAST Risk (Medium): Ensure that the policy object is safe to execute on CUDA to prevent GPU-related vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 326, 262, 2450, 2134, 318, 3338, 284, 12260, 319, 29369, 5631, 284, 2948, 11362, 12, 5363, 23805, 13]",0.5,770,sast_risk,199,Ensure that the policy object is safe to execute on CUDA to prevent GPU-related vulnerabilities.,Medium,744,"            finite_env_type=env_config[""parallel_mode""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27454, 62, 24330, 62, 4906, 28, 24330, 62, 11250, 14692, 1845, 29363, 62, 14171, 33116]"
⚠️ SAST Risk (Low): Ignoring warnings can hide potential issues that need attention.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 16583, 3255, 14601, 460, 7808, 2785, 2428, 326, 761, 3241, 13]",0.5,801,sast_risk,216,Ignoring warnings can hide potential issues that need attention.,Low,770,"    action_interpreter: ActionInterpreter = init_instance_by_config(config[""action_interpreter""])","[220, 220, 220, 2223, 62, 3849, 3866, 353, 25, 7561, 9492, 3866, 353, 796, 2315, 62, 39098, 62, 1525, 62, 11250, 7, 11250, 14692, 2673, 62, 3849, 3866, 353, 8973, 8]"
⚠️ SAST Risk (Low): Ensure the YAML file is from a trusted source to prevent YAML deserialization attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 575, 2390, 43, 2393, 318, 422, 257, 13467, 2723, 284, 2948, 575, 2390, 43, 748, 48499, 1634, 3434, 13]",0.5,805,sast_risk,222,Ensure the YAML file is from a trusted source to prevent YAML deserialization attacks.,Low,801,    },"[220, 220, 220, 1782]"
🧠 ML Signal: The use of command-line arguments to control training and backtesting workflows.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 3141, 12, 1370, 7159, 284, 1630, 3047, 290, 736, 33407, 670, 44041, 13]",0.5,809,ml_signal,222,The use of command-line arguments to control training and backtesting workflows.,,805,    },"[220, 220, 220, 1782]"

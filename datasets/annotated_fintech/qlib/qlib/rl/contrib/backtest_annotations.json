[
  {
    "line": 13,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes from a module can improve code readability and maintainability."
  },
  {
    "line": 18,
    "text": "from qlib.backtest import INDICATOR_METRIC, collect_data_loop, get_strategy_executor",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      1330,
      24413,
      2149,
      25633,
      62,
      47123,
      41132,
      11,
      2824,
      62,
      7890,
      62,
      26268,
      11,
      651,
      62,
      2536,
      4338,
      62,
      18558,
      38409
    ],
    "start_token": 5,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes from a module can improve code readability and maintainability."
  },
  {
    "line": 20,
    "text": "from qlib.backtest.executor import SimulatorExecutor",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1330,
      13942,
      23002,
      38409
    ],
    "start_token": 32,
    "end_token": 45,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes from a module can improve code readability and maintainability."
  },
  {
    "line": 22,
    "text": "from qlib.rl.contrib.naive_config_parser import get_backtest_config_fromfile",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      3642,
      822,
      13,
      2616,
      425,
      62,
      11250,
      62,
      48610,
      1330,
      651,
      62,
      1891,
      9288,
      62,
      11250,
      62,
      6738,
      7753
    ],
    "start_token": 45,
    "end_token": 70,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes from a module can improve code readability and maintainability."
  },
  {
    "line": 22,
    "text": "from qlib.rl.contrib.naive_config_parser import get_backtest_config_fromfile",
    "annotation": "\u2705 Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      3642,
      822,
      13,
      2616,
      425,
      62,
      11250,
      62,
      48610,
      1330,
      651,
      62,
      1891,
      9288,
      62,
      11250,
      62,
      6738,
      7753
    ],
    "start_token": 70,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      393,
      6097,
      422,
      257,
      8265,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific functions or classes from a module can improve code readability and maintainability."
  },
  {
    "line": 28,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 95,
    "end_token": 95,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 39,
    "text": "            \"time_per_step\": data_granularity,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential misuse of SimulatorExecutor attributes if not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2435,
      62,
      525,
      62,
      9662,
      1298,
      1366,
      62,
      46324,
      33737,
      11
    ],
    "start_token": 95,
    "end_token": 118,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      29169,
      286,
      13942,
      23002,
      38409,
      12608,
      611,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential misuse of SimulatorExecutor attributes if not properly validated."
  },
  {
    "line": 42,
    "text": "            \"generate_report\": generate_report,",
    "annotation": "\ud83e\udde0 ML Signal: Sorting strategy configuration keys indicates a pattern of prioritizing certain frequencies.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8612,
      378,
      62,
      13116,
      1298,
      7716,
      62,
      13116,
      11
    ],
    "start_token": 118,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      4811,
      8398,
      8251,
      9217,
      257,
      3912,
      286,
      19086,
      2890,
      1728,
      19998,
      13
    ],
    "label": "ml_signal",
    "reason": "Sorting strategy configuration keys indicates a pattern of prioritizing certain frequencies."
  },
  {
    "line": 53,
    "text": "            \"kwargs\": {",
    "annotation": "\u2705 Best Practice: Type hinting for the return value improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      46265,
      22046,
      1298,
      1391
    ],
    "start_token": 139,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return value improves code readability and maintainability."
  },
  {
    "line": 57,
    "text": "                \"track_data\": True,",
    "annotation": "\ud83e\udde0 ML Signal: Checking the type of value_dict can indicate dynamic type handling patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      11659,
      62,
      7890,
      1298,
      6407,
      11
    ],
    "start_token": 155,
    "end_token": 177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      262,
      2099,
      286,
      1988,
      62,
      11600,
      460,
      7603,
      8925,
      2099,
      9041,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking the type of value_dict can indicate dynamic type handling patterns."
  },
  {
    "line": 59,
    "text": "        }",
    "annotation": "\ud83e\udde0 ML Signal: Usage of method chaining with to_series() can indicate common data transformation patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 177,
    "end_token": 185,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2446,
      442,
      1397,
      351,
      284,
      62,
      25076,
      3419,
      460,
      7603,
      2219,
      1366,
      13389,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of method chaining with to_series() can indicate common data transformation patterns."
  },
  {
    "line": 61,
    "text": "    return executor_config",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Deep copying can be resource-intensive; ensure it's necessary.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      3121,
      273,
      62,
      11250
    ],
    "start_token": 185,
    "end_token": 193,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10766,
      23345,
      460,
      307,
      8271,
      12,
      38096,
      26,
      4155,
      340,
      338,
      3306,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Deep copying can be resource-intensive; ensure it's necessary."
  },
  {
    "line": 67,
    "text": "        if isinstance(value_dict, BaseOrderIndicator):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide unexpected errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      8367,
      62,
      11600,
      11,
      7308,
      18743,
      5497,
      26407,
      2599
    ],
    "start_token": 193,
    "end_token": 213,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      10059,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide unexpected errors."
  },
  {
    "line": 69,
    "text": "            value_dict = value_dict.to_series()",
    "annotation": "\ud83e\udde0 ML Signal: Converting data to DataFrame is a common pattern in data processing tasks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1988,
      62,
      11600,
      796,
      1988,
      62,
      11600,
      13,
      1462,
      62,
      25076,
      3419
    ],
    "start_token": 213,
    "end_token": 236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1366,
      284,
      6060,
      19778,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting data to DataFrame is a common pattern in data processing tasks."
  },
  {
    "line": 76,
    "text": "        value_dict = pd.DataFrame(value_dict)",
    "annotation": "\u2705 Best Practice: Using pd.concat with axis=0 is more readable than using 0 directly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1988,
      62,
      11600,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      8367,
      62,
      11600,
      8
    ],
    "start_token": 236,
    "end_token": 257,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      351,
      16488,
      28,
      15,
      318,
      517,
      31744,
      621,
      1262,
      657,
      3264,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.concat with axis=0 is more readable than using 0 directly."
  },
  {
    "line": 76,
    "text": "        value_dict = pd.DataFrame(value_dict)",
    "annotation": "\ud83e\udde0 ML Signal: Setting a multi-index is a common pattern in time-series data processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1988,
      62,
      11600,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      8367,
      62,
      11600,
      8
    ],
    "start_token": 257,
    "end_token": 278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      5021,
      12,
      9630,
      318,
      257,
      2219,
      3912,
      287,
      640,
      12,
      25076,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting a multi-index is a common pattern in time-series data processing."
  },
  {
    "line": 72,
    "text": "            if value_dict[\"ffr\"].empty:",
    "annotation": "\u2705 Best Practice: Add type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1988,
      62,
      11600,
      14692,
      487,
      81,
      1,
      4083,
      28920,
      25
    ],
    "start_token": 278,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Add type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 87,
    "text": "",
    "annotation": "\u2705 Best Practice: Use type hints for local variables for better code readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 300,
    "end_token": 300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      20269,
      329,
      1957,
      9633,
      329,
      1365,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use type hints for local variables for better code readability."
  },
  {
    "line": 92,
    "text": "    \"\"\"Generate backtest reports",
    "annotation": "\ud83e\udde0 ML Signal: Appending to lists in a loop can indicate data aggregation patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      8645,
      378,
      736,
      9288,
      3136
    ],
    "start_token": 300,
    "end_token": 309,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      8341,
      287,
      257,
      9052,
      460,
      7603,
      1366,
      46500,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to lists in a loop can indicate data aggregation patterns."
  },
  {
    "line": 96,
    "text": "    decisions:",
    "annotation": "\ud83e\udde0 ML Signal: Using list comprehensions to filter and transform data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5370,
      25
    ],
    "start_token": 309,
    "end_token": 314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      1351,
      8569,
      507,
      284,
      8106,
      290,
      6121,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Using list comprehensions to filter and transform data."
  },
  {
    "line": 99,
    "text": "        List of indicator reports.",
    "annotation": "\ud83e\udde0 ML Signal: Concatenating dataframes can indicate data merging or aggregation patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7343,
      286,
      16916,
      3136,
      13
    ],
    "start_token": 314,
    "end_token": 326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      803,
      1366,
      37805,
      460,
      7603,
      1366,
      35981,
      393,
      46500,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Concatenating dataframes can indicate data merging or aggregation patterns."
  },
  {
    "line": 102,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if 'freq' is not present in decision_details.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 326,
    "end_token": 326,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      705,
      19503,
      80,
      6,
      318,
      407,
      1944,
      287,
      2551,
      62,
      36604,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if 'freq' is not present in decision_details."
  },
  {
    "line": 103,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Popping 'freq' without checking if it exists can lead to KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 326,
    "end_token": 330,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7695,
      2105,
      705,
      19503,
      80,
      6,
      1231,
      10627,
      611,
      340,
      7160,
      460,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Popping 'freq' without checking if it exists can lead to KeyError."
  },
  {
    "line": 107,
    "text": "    for report_indicator in report_indicators:",
    "annotation": "\ud83e\udde0 ML Signal: Joining dataframes can indicate data integration patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      989,
      62,
      521,
      26407,
      287,
      989,
      62,
      521,
      44549,
      25
    ],
    "start_token": 330,
    "end_token": 344,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5302,
      3191,
      1366,
      37805,
      460,
      7603,
      1366,
      11812,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Joining dataframes can indicate data integration patterns."
  },
  {
    "line": 132,
    "text": "    generate_report: bool = False,",
    "annotation": "\u2705 Best Practice: Initialize external dependencies at the start of the function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7716,
      62,
      13116,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 344,
    "end_token": 355,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      7097,
      20086,
      379,
      262,
      923,
      286,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize external dependencies at the start of the function."
  },
  {
    "line": 134,
    "text": "    \"\"\"Run backtest in a single thread with SingleAssetOrderExecution simulator. The orders will be executed day by day.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of unique to extract distinct elements from a DataFrame column.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      10987,
      736,
      9288,
      287,
      257,
      2060,
      4704,
      351,
      14206,
      45869,
      18743,
      23002,
      1009,
      35375,
      13,
      383,
      6266,
      481,
      307,
      10945,
      1110,
      416,
      1110,
      13
    ],
    "start_token": 355,
    "end_token": 383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3748,
      284,
      7925,
      7310,
      4847,
      422,
      257,
      6060,
      19778,
      5721,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of unique to extract distinct elements from a DataFrame column."
  },
  {
    "line": 138,
    "text": "    ----------",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows using iterrows.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 383,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      1262,
      11629,
      8516,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows using iterrows."
  },
  {
    "line": 140,
    "text": "        Backtest config",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of string to Timestamp for date manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5157,
      9288,
      4566
    ],
    "start_token": 388,
    "end_token": 398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4731,
      284,
      5045,
      27823,
      329,
      3128,
      17512,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of string to Timestamp for date manipulation."
  },
  {
    "line": 140,
    "text": "        Backtest config",
    "annotation": "\ud83e\udde0 ML Signal: Usage of replace to modify date components.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5157,
      9288,
      4566
    ],
    "start_token": 398,
    "end_token": 408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      6330,
      284,
      13096,
      3128,
      6805,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of replace to modify date components."
  },
  {
    "line": 147,
    "text": "    split",
    "annotation": "\u2705 Best Practice: Use of named arguments for clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6626
    ],
    "start_token": 408,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3706,
      7159,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use of named arguments for clarity."
  },
  {
    "line": 153,
    "text": "",
    "annotation": "\u2705 Best Practice: Encapsulation of configuration logic in a separate function.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 412,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      8398,
      9156,
      287,
      257,
      4553,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Encapsulation of configuration logic in a separate function."
  },
  {
    "line": 160,
    "text": "    stocks = orders.instrument.unique().tolist()",
    "annotation": "\u2705 Best Practice: Use of deepcopy to avoid mutating the original configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      14420,
      796,
      6266,
      13,
      259,
      43872,
      13,
      34642,
      22446,
      83,
      349,
      396,
      3419
    ],
    "start_token": 412,
    "end_token": 428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2769,
      30073,
      284,
      3368,
      4517,
      803,
      262,
      2656,
      8398,
      13
    ],
    "label": "best_practice",
    "reason": "Use of deepcopy to avoid mutating the original configuration."
  },
  {
    "line": 160,
    "text": "    stocks = orders.instrument.unique().tolist()",
    "annotation": "\u2705 Best Practice: Use of update for dictionary modifications.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      14420,
      796,
      6266,
      13,
      259,
      43872,
      13,
      34642,
      22446,
      83,
      349,
      396,
      3419
    ],
    "start_token": 428,
    "end_token": 444,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4296,
      329,
      22155,
      19008,
      13
    ],
    "label": "best_practice",
    "reason": "Use of update for dictionary modifications."
  },
  {
    "line": 169,
    "text": "            stock_id=row[\"instrument\"],",
    "annotation": "\u2705 Best Practice: Clear instantiation of objects with relevant configurations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      28,
      808,
      14692,
      259,
      43872,
      33116
    ],
    "start_token": 444,
    "end_token": 464,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      9113,
      3920,
      286,
      5563,
      351,
      5981,
      25412,
      13
    ],
    "label": "best_practice",
    "reason": "Clear instantiation of objects with relevant configurations."
  },
  {
    "line": 177,
    "text": "            strategy_config=backtest_config[\"strategies\"],",
    "annotation": "\ud83e\udde0 ML Signal: Appending results to a list for later processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4811,
      62,
      11250,
      28,
      1891,
      9288,
      62,
      11250,
      14692,
      2536,
      2397,
      444,
      33116
    ],
    "start_token": 464,
    "end_token": 488,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      2482,
      284,
      257,
      1351,
      329,
      1568,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending results to a list for later processing."
  },
  {
    "line": 180,
    "text": "            data_granularity=backtest_config[\"data_granularity\"],",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension for extracting specific data from a list of dictionaries.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737,
      28,
      1891,
      9288,
      62,
      11250,
      14692,
      7890,
      62,
      46324,
      33737,
      33116
    ],
    "start_token": 488,
    "end_token": 514,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      329,
      37895,
      2176,
      1366,
      422,
      257,
      1351,
      286,
      48589,
      3166,
      13
    ],
    "label": "ml_signal",
    "reason": "List comprehension for extracting specific data from a list of dictionaries."
  },
  {
    "line": 181,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary comprehension for data transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 514,
    "end_token": 522,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      35915,
      329,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Dictionary comprehension for data transformation."
  },
  {
    "line": 184,
    "text": "        exchange_config.update(",
    "annotation": "\u2705 Best Practice: Conversion of data to DataFrame for structured data handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      62,
      11250,
      13,
      19119,
      7
    ],
    "start_token": 522,
    "end_token": 535,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44101,
      286,
      1366,
      284,
      6060,
      19778,
      329,
      20793,
      1366,
      9041,
      13
    ],
    "label": "best_practice",
    "reason": "Conversion of data to DataFrame for structured data handling."
  },
  {
    "line": 184,
    "text": "        exchange_config.update(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks, which can be disabled in optimized mode.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      62,
      11250,
      13,
      19119,
      7
    ],
    "start_token": 535,
    "end_token": 548,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      11,
      543,
      460,
      307,
      10058,
      287,
      23392,
      4235,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks, which can be disabled in optimized mode."
  },
  {
    "line": 189,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Encapsulation of report generation logic in a separate function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 548,
    "end_token": 556,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      1686,
      1741,
      286,
      989,
      5270,
      9156,
      287,
      257,
      4553,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Encapsulation of report generation logic in a separate function."
  },
  {
    "line": 191,
    "text": "        simulator = SingleAssetOrderExecution(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing DataFrame elements using iloc.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35375,
      796,
      14206,
      45869,
      18743,
      23002,
      1009,
      7
    ],
    "start_token": 556,
    "end_token": 571,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6060,
      19778,
      4847,
      1262,
      4229,
      420,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing DataFrame elements using iloc."
  },
  {
    "line": 191,
    "text": "        simulator = SingleAssetOrderExecution(",
    "annotation": "\u2705 Best Practice: Return consistent data structures based on conditions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35375,
      796,
      14206,
      45869,
      18743,
      23002,
      1009,
      7
    ],
    "start_token": 571,
    "end_token": 586,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      6414,
      1366,
      8573,
      1912,
      319,
      3403,
      13
    ],
    "label": "best_practice",
    "reason": "Return consistent data structures based on conditions."
  },
  {
    "line": 212,
    "text": "            report = {stock_id: _report}",
    "annotation": "\u2705 Best Practice: Initialize external dependencies or configurations at the start of the function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      989,
      796,
      1391,
      13578,
      62,
      312,
      25,
      4808,
      13116,
      92
    ],
    "start_token": 586,
    "end_token": 607,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      7097,
      20086,
      393,
      25412,
      379,
      262,
      923,
      286,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize external dependencies or configurations at the start of the function."
  },
  {
    "line": 214,
    "text": "            day = orders.iloc[0].datetime",
    "annotation": "\ud83e\udde0 ML Signal: Extracting min and max datetime from orders, indicating time range of interest.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1110,
      796,
      6266,
      13,
      346,
      420,
      58,
      15,
      4083,
      19608,
      8079
    ],
    "start_token": 607,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      949,
      290,
      3509,
      4818,
      8079,
      422,
      6266,
      11,
      12739,
      640,
      2837,
      286,
      1393,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracting min and max datetime from orders, indicating time range of interest."
  },
  {
    "line": 216,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Extracting unique instruments from orders, indicating assets of interest.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 629,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      3748,
      12834,
      422,
      6266,
      11,
      12739,
      6798,
      286,
      1393,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracting unique instruments from orders, indicating assets of interest."
  },
  {
    "line": 234,
    "text": "        Backtest config",
    "annotation": "\u2705 Best Practice: Use deepcopy to avoid modifying the original configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5157,
      9288,
      4566
    ],
    "start_token": 629,
    "end_token": 639,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2769,
      30073,
      284,
      3368,
      30620,
      262,
      2656,
      8398,
      13
    ],
    "label": "best_practice",
    "reason": "Use deepcopy to avoid modifying the original configuration."
  },
  {
    "line": 255,
    "text": "    trade_start_time = orders[\"datetime\"].min()",
    "annotation": "\ud83e\udde0 ML Signal: Collecting data in a loop, indicating iterative processing of time-series data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3292,
      62,
      9688,
      62,
      2435,
      796,
      6266,
      14692,
      19608,
      8079,
      1,
      4083,
      1084,
      3419
    ],
    "start_token": 639,
    "end_token": 656,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      1366,
      287,
      257,
      9052,
      11,
      12739,
      11629,
      876,
      7587,
      286,
      640,
      12,
      25076,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Collecting data in a loop, indicating iterative processing of time-series data."
  },
  {
    "line": 259,
    "text": "    strategy_config = {",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NaN values in records, which could lead to runtime errors if not handled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4811,
      62,
      11250,
      796,
      1391
    ],
    "start_token": 656,
    "end_token": 664,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11013,
      45,
      3815,
      287,
      4406,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      407,
      12118,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NaN values in records, which could lead to runtime errors if not handled."
  },
  {
    "line": 263,
    "text": "            \"file\": orders,",
    "annotation": "\ud83e\udde0 ML Signal: Using the first order's instrument to generate a report, indicating a focus on specific assets.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      7753,
      1298,
      6266,
      11
    ],
    "start_token": 664,
    "end_token": 680,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      262,
      717,
      1502,
      338,
      8875,
      284,
      7716,
      257,
      989,
      11,
      12739,
      257,
      2962,
      319,
      2176,
      6798,
      13
    ],
    "label": "ml_signal",
    "reason": "Using the first order's instrument to generate a report, indicating a focus on specific assets."
  },
  {
    "line": 268,
    "text": "        },",
    "annotation": "\ud83e\udde0 ML Signal: Using the first order's datetime to generate a report, indicating a focus on specific time periods.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 680,
    "end_token": 688,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      262,
      717,
      1502,
      338,
      4818,
      8079,
      284,
      7716,
      257,
      989,
      11,
      12739,
      257,
      2962,
      319,
      2176,
      640,
      9574,
      13
    ],
    "label": "ml_signal",
    "reason": "Using the first order's datetime to generate a report, indicating a focus on specific time periods."
  },
  {
    "line": 267,
    "text": "            ),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"order_file\" is not in backtest_config",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 688,
    "end_token": 700,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      2875,
      62,
      7753,
      1,
      318,
      407,
      287,
      736,
      9288,
      62,
      11250
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"order_file\" is not in backtest_config"
  },
  {
    "line": 269,
    "text": "    }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"exchange\" or \"cash_limit\" is not in backtest_config",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 700,
    "end_token": 704,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      1069,
      3803,
      1,
      393,
      366,
      30350,
      62,
      32374,
      1,
      318,
      407,
      287,
      736,
      9288,
      62,
      11250
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"exchange\" or \"cash_limit\" is not in backtest_config"
  },
  {
    "line": 271,
    "text": "    executor_config = _get_multi_level_executor_config(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"generate_report\" is not in backtest_config",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3121,
      273,
      62,
      11250,
      796,
      4808,
      1136,
      62,
      41684,
      62,
      5715,
      62,
      18558,
      38409,
      62,
      11250,
      7
    ],
    "start_token": 704,
    "end_token": 724,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      8612,
      378,
      62,
      13116,
      1,
      318,
      407,
      287,
      736,
      9288,
      62,
      11250
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"generate_report\" is not in backtest_config"
  },
  {
    "line": 275,
    "text": "        data_granularity=backtest_config[\"data_granularity\"],",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a boolean flag",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737,
      28,
      1891,
      9288,
      62,
      11250,
      14692,
      7890,
      62,
      46324,
      33737,
      33116
    ],
    "start_token": 724,
    "end_token": 746,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      25131,
      6056
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a boolean flag"
  },
  {
    "line": 275,
    "text": "        data_granularity=backtest_config[\"data_granularity\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"concurrency\" is not in backtest_config",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737,
      28,
      1891,
      9288,
      62,
      11250,
      14692,
      7890,
      62,
      46324,
      33737,
      33116
    ],
    "start_token": 746,
    "end_token": 768,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      1102,
      34415,
      1,
      318,
      407,
      287,
      736,
      9288,
      62,
      11250
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"concurrency\" is not in backtest_config"
  },
  {
    "line": 275,
    "text": "        data_granularity=backtest_config[\"data_granularity\"],",
    "annotation": "\u2705 Best Practice: Setting the number of threads for torch to 1 for consistent performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737,
      28,
      1891,
      9288,
      62,
      11250,
      14692,
      7890,
      62,
      46324,
      33737,
      33116
    ],
    "start_token": 768,
    "end_token": 790,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      262,
      1271,
      286,
      14390,
      329,
      28034,
      284,
      352,
      329,
      6414,
      2854
    ],
    "label": "best_practice",
    "reason": "Setting the number of threads for torch to 1 for consistent performance"
  },
  {
    "line": 291,
    "text": "        benchmark=None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"output_dir\" is not in backtest_config",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      18335,
      28,
      14202,
      11
    ],
    "start_token": 790,
    "end_token": 801,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      22915,
      62,
      15908,
      1,
      318,
      407,
      287,
      736,
      9288,
      62,
      11250
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"output_dir\" is not in backtest_config"
  },
  {
    "line": 298,
    "text": "    decisions = list(collect_data_loop(trade_start_time, trade_end_time, strategy, executor, report_dict))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Pickle can be unsafe if loading untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5370,
      796,
      1351,
      7,
      33327,
      62,
      7890,
      62,
      26268,
      7,
      25351,
      62,
      9688,
      62,
      2435,
      11,
      3292,
      62,
      437,
      62,
      2435,
      11,
      4811,
      11,
      3121,
      273,
      11,
      989,
      62,
      11600,
      4008
    ],
    "start_token": 801,
    "end_token": 835,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12346,
      293,
      460,
      307,
      21596,
      611,
      11046,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Pickle can be unsafe if loading untrusted data"
  },
  {
    "line": 300,
    "text": "    indicator_dict = cast(INDICATOR_METRIC, report_dict.get(\"indicator_dict\"))",
    "annotation": "\u2705 Best Practice: Using pd.concat with axis specified for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      16916,
      62,
      11600,
      796,
      3350,
      7,
      12115,
      2149,
      25633,
      62,
      47123,
      41132,
      11,
      989,
      62,
      11600,
      13,
      1136,
      7203,
      521,
      26407,
      62,
      11600,
      48774
    ],
    "start_token": 835,
    "end_token": 862,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      351,
      16488,
      7368,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using pd.concat with axis specified for clarity"
  },
  {
    "line": 304,
    "text": "    if generate_report:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential race condition if multiple processes try to create the directory",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      7716,
      62,
      13116,
      25
    ],
    "start_token": 862,
    "end_token": 870,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3234,
      4006,
      611,
      3294,
      7767,
      1949,
      284,
      2251,
      262,
      8619
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential race condition if multiple processes try to create the directory"
  },
  {
    "line": 314,
    "text": "        return records",
    "annotation": "\u2705 Best Practice: Suppressing specific warnings for cleaner output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4406
    ],
    "start_token": 870,
    "end_token": 879,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8105,
      11697,
      2176,
      14601,
      329,
      21723,
      5072
    ],
    "label": "best_practice",
    "reason": "Suppressing specific warnings for cleaner output"
  },
  {
    "line": 317,
    "text": "def backtest(backtest_config: dict, with_simulator: bool = False) -> pd.DataFrame:",
    "annotation": "\u2705 Best Practice: Providing help messages for command-line arguments",
    "confidence": 1.0,
    "tokens": [
      4299,
      736,
      9288,
      7,
      1891,
      9288,
      62,
      11250,
      25,
      8633,
      11,
      351,
      62,
      14323,
      8927,
      25,
      20512,
      796,
      10352,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 879,
    "end_token": 906,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7518,
      2530,
      1037,
      6218,
      329,
      3141,
      12,
      1370,
      7159
    ],
    "label": "best_practice",
    "reason": "Providing help messages for command-line arguments"
  },
  {
    "line": 318,
    "text": "    order_df = read_order_file(backtest_config[\"order_file\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if config_path does not exist or is invalid",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1502,
      62,
      7568,
      796,
      1100,
      62,
      2875,
      62,
      7753,
      7,
      1891,
      9288,
      62,
      11250,
      14692,
      2875,
      62,
      7753,
      8973,
      8
    ],
    "start_token": 906,
    "end_token": 929,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      4566,
      62,
      6978,
      857,
      407,
      2152,
      393,
      318,
      12515
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if config_path does not exist or is invalid"
  }
]
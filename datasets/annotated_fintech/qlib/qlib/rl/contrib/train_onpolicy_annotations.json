[
  {
    "line": 8,
    "text": "import sys",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      25064
    ],
    "start_token": 0,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 10,
    "text": "from pathlib import Path",
    "annotation": "\u2705 Best Practice: Importing specific classes or functions can improve code readability and reduce memory usage.",
    "confidence": 0.5,
    "tokens": [
      6738,
      3108,
      8019,
      1330,
      10644
    ],
    "start_token": 2,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      393,
      5499,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      4646,
      4088,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific classes or functions can improve code readability and reduce memory usage."
  },
  {
    "line": 15,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 7,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 27,
    "text": "from qlib.utils import init_instance_by_config",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      26791,
      1330,
      2315,
      62,
      39098,
      62,
      1525,
      62,
      11250
    ],
    "start_token": 13,
    "end_token": 26,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 26,
    "text": "from qlib.rl.utils.log import CsvWriter",
    "annotation": "\ud83e\udde0 ML Signal: Function to set random seed for reproducibility in ML experiments",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      26791,
      13,
      6404,
      1330,
      327,
      21370,
      34379
    ],
    "start_token": 26,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      900,
      4738,
      9403,
      329,
      8186,
      66,
      2247,
      287,
      10373,
      10256
    ],
    "label": "ml_signal",
    "reason": "Function to set random seed for reproducibility in ML experiments"
  },
  {
    "line": 28,
    "text": "from tianshou.policy import BasePolicy",
    "annotation": "\ud83e\udde0 ML Signal: Setting seed for PyTorch CPU operations",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      1547,
      15710,
      13,
      30586,
      1330,
      7308,
      36727
    ],
    "start_token": 39,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      9403,
      329,
      9485,
      15884,
      354,
      9135,
      4560
    ],
    "label": "ml_signal",
    "reason": "Setting seed for PyTorch CPU operations"
  },
  {
    "line": 30,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Setting seed for all CUDA devices for PyTorch",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 48,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      9403,
      329,
      477,
      29369,
      5631,
      4410,
      329,
      9485,
      15884,
      354
    ],
    "label": "ml_signal",
    "reason": "Setting seed for all CUDA devices for PyTorch"
  },
  {
    "line": 32,
    "text": "def seed_everything(seed: int) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Setting seed for NumPy random number generation",
    "confidence": 0.5,
    "tokens": [
      4299,
      9403,
      62,
      37814,
      7,
      28826,
      25,
      493,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 48,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      9403,
      329,
      31835,
      20519,
      4738,
      1271,
      5270
    ],
    "label": "ml_signal",
    "reason": "Setting seed for NumPy random number generation"
  },
  {
    "line": 34,
    "text": "    torch.cuda.manual_seed_all(seed)",
    "annotation": "\ud83e\udde0 ML Signal: Setting seed for Python's built-in random module",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      28034,
      13,
      66,
      15339,
      13,
      805,
      723,
      62,
      28826,
      62,
      439,
      7,
      28826,
      8
    ],
    "start_token": 60,
    "end_token": 77,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      9403,
      329,
      11361,
      338,
      3170,
      12,
      259,
      4738,
      8265
    ],
    "label": "ml_signal",
    "reason": "Setting seed for Python's built-in random module"
  },
  {
    "line": 36,
    "text": "    random.seed(seed)",
    "annotation": "\ud83e\udde0 ML Signal: Ensuring deterministic behavior in PyTorch's cuDNN backend",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4738,
      13,
      28826,
      7,
      28826,
      8
    ],
    "start_token": 77,
    "end_token": 86,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      48221,
      870,
      2206,
      49228,
      4069,
      287,
      9485,
      15884,
      354,
      338,
      18912,
      35,
      6144,
      30203
    ],
    "label": "ml_signal",
    "reason": "Ensuring deterministic behavior in PyTorch's cuDNN backend"
  },
  {
    "line": 32,
    "text": "def seed_everything(seed: int) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): os.path.isfile can be susceptible to TOCTOU (Time of Check, Time of Use) race conditions.",
    "confidence": 0.5,
    "tokens": [
      4299,
      9403,
      62,
      37814,
      7,
      28826,
      25,
      493,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 86,
    "end_token": 98,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      28686,
      13,
      6978,
      13,
      4468,
      576,
      460,
      307,
      22084,
      284,
      5390,
      4177,
      2606,
      357,
      7575,
      286,
      6822,
      11,
      3862,
      286,
      5765,
      8,
      3234,
      3403,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "os.path.isfile can be susceptible to TOCTOU (Time of Check, Time of Use) race conditions."
  },
  {
    "line": 34,
    "text": "    torch.cuda.manual_seed_all(seed)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      28034,
      13,
      66,
      15339,
      13,
      805,
      723,
      62,
      28826,
      62,
      439,
      7,
      28826,
      8
    ],
    "start_token": 98,
    "end_token": 115,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      2298,
      293,
      329,
      748,
      48499,
      1634,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      611,
      262,
      2723,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted."
  },
  {
    "line": 38,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive variable name than 'file' for clarity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 115,
    "end_token": 115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      7885,
      1438,
      621,
      705,
      7753,
      6,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive variable name than 'file' for clarity."
  },
  {
    "line": 40,
    "text": "def _read_orders(order_dir: Path) -> pd.DataFrame:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      961,
      62,
      6361,
      7,
      2875,
      62,
      15908,
      25,
      10644,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 115,
    "end_token": 134,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      2298,
      293,
      329,
      748,
      48499,
      1634,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      611,
      262,
      2723,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using pickle for deserialization can lead to arbitrary code execution if the source is untrusted."
  },
  {
    "line": 42,
    "text": "        return pd.read_pickle(order_dir)",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list in a loop is a common pattern that can be used to identify data aggregation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      7,
      2875,
      62,
      15908,
      8
    ],
    "start_token": 134,
    "end_token": 154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      326,
      460,
      307,
      973,
      284,
      5911,
      1366,
      46500,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to a list in a loop is a common pattern that can be used to identify data aggregation."
  },
  {
    "line": 42,
    "text": "        return pd.read_pickle(order_dir)",
    "annotation": "\ud83e\udde0 ML Signal: Concatenating a list of DataFrames is a common pattern in data processing tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      7,
      2875,
      62,
      15908,
      8
    ],
    "start_token": 154,
    "end_token": 174,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      803,
      257,
      1351,
      286,
      6060,
      35439,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Concatenating a list of DataFrames is a common pattern in data processing tasks."
  },
  {
    "line": 42,
    "text": "        return pd.read_pickle(order_dir)",
    "annotation": "\u2705 Best Practice: Class should inherit from object explicitly in Python 2.x for consistency, but in Python 3.x it's optional as all classes implicitly inherit from object.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      7,
      2875,
      62,
      15908,
      8
    ],
    "start_token": 174,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      2134,
      11777,
      287,
      11361,
      362,
      13,
      87,
      329,
      15794,
      11,
      475,
      287,
      11361,
      513,
      13,
      87,
      340,
      338,
      11902,
      355,
      477,
      6097,
      31821,
      16955,
      422,
      2134,
      13
    ],
    "label": "best_practice",
    "reason": "Class should inherit from object explicitly in Python 2.x for consistency, but in Python 3.x it's optional as all classes implicitly inherit from object."
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of private variables to encapsulate class attributes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 194,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2839,
      9633,
      284,
      32652,
      5039,
      1398,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of private variables to encapsulate class attributes"
  },
  {
    "line": 51,
    "text": "class LazyLoadDataset(Dataset):",
    "annotation": "\u2705 Best Practice: Use of private variables to encapsulate class attributes",
    "confidence": 0.5,
    "tokens": [
      4871,
      406,
      12582,
      8912,
      27354,
      292,
      316,
      7,
      27354,
      292,
      316,
      2599
    ],
    "start_token": 194,
    "end_token": 206,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2839,
      9633,
      284,
      32652,
      5039,
      1398,
      12608
    ],
    "label": "best_practice",
    "reason": "Use of private variables to encapsulate class attributes"
  },
  {
    "line": 53,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Reading and resetting index of a DataFrame, common data processing pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 206,
    "end_token": 215,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      290,
      13259,
      889,
      6376,
      286,
      257,
      6060,
      19778,
      11,
      2219,
      1366,
      7587,
      3912
    ],
    "label": "ml_signal",
    "reason": "Reading and resetting index of a DataFrame, common data processing pattern"
  },
  {
    "line": 55,
    "text": "        order_file_path: Path,",
    "annotation": "\u2705 Best Practice: Type hinting for optional attributes improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      62,
      7753,
      62,
      6978,
      25,
      10644,
      11
    ],
    "start_token": 215,
    "end_token": 230,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      11902,
      12608,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for optional attributes improves code readability"
  },
  {
    "line": 57,
    "text": "        default_end_time_index: int,",
    "annotation": "\u2705 Best Practice: Use of Path object for file paths enhances cross-platform compatibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4277,
      62,
      437,
      62,
      2435,
      62,
      9630,
      25,
      493,
      11
    ],
    "start_token": 230,
    "end_token": 247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      2134,
      329,
      2393,
      13532,
      32479,
      3272,
      12,
      24254,
      17764
    ],
    "label": "best_practice",
    "reason": "Use of Path object for file paths enhances cross-platform compatibility"
  },
  {
    "line": 54,
    "text": "        data_dir: str,",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15908,
      25,
      965,
      11
    ],
    "start_token": 247,
    "end_token": 260,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 56,
    "text": "        default_start_time_index: int,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __len__ indicates implementation of a container-like class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4277,
      62,
      9688,
      62,
      2435,
      62,
      9630,
      25,
      493,
      11
    ],
    "start_token": 260,
    "end_token": 277,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      11925,
      834,
      9217,
      7822,
      286,
      257,
      9290,
      12,
      2339,
      1398
    ],
    "label": "ml_signal",
    "reason": "Usage of __len__ indicates implementation of a container-like class"
  },
  {
    "line": 57,
    "text": "        default_end_time_index: int,",
    "annotation": "\u2705 Best Practice: Use of type hinting for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4277,
      62,
      437,
      62,
      2435,
      62,
      9630,
      25,
      493,
      11
    ],
    "start_token": 277,
    "end_token": 294,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 59,
    "text": "        self._default_start_time_index = default_start_time_index",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct access to DataFrame using iloc can lead to IndexError if index is out of bounds.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      12286,
      62,
      9688,
      62,
      2435,
      62,
      9630,
      796,
      4277,
      62,
      9688,
      62,
      2435,
      62,
      9630
    ],
    "start_token": 294,
    "end_token": 318,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      1895,
      284,
      6060,
      19778,
      1262,
      4229,
      420,
      460,
      1085,
      284,
      12901,
      12331,
      611,
      6376,
      318,
      503,
      286,
      22303,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct access to DataFrame using iloc can lead to IndexError if index is out of bounds."
  },
  {
    "line": 60,
    "text": "        self._default_end_time_index = default_end_time_index",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on None value can indicate lazy loading or initialization patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      12286,
      62,
      437,
      62,
      2435,
      62,
      9630,
      796,
      4277,
      62,
      437,
      62,
      2435,
      62,
      9630
    ],
    "start_token": 318,
    "end_token": 342,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      6045,
      1988,
      460,
      7603,
      16931,
      11046,
      393,
      37588,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on None value can indicate lazy loading or initialization patterns."
  },
  {
    "line": 70,
    "text": "        row = self._order_df.iloc[index]",
    "annotation": "\ud83e\udde0 ML Signal: Use of list comprehension to transform data can indicate data preprocessing patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5752,
      796,
      2116,
      13557,
      2875,
      62,
      7568,
      13,
      346,
      420,
      58,
      9630,
      60
    ],
    "start_token": 342,
    "end_token": 362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      35915,
      284,
      6121,
      1366,
      460,
      7603,
      1366,
      662,
      36948,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of list comprehension to transform data can indicate data preprocessing patterns."
  },
  {
    "line": 78,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of IndexError if _default_start_time_index is out of bounds.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 362,
    "end_token": 388,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      12901,
      12331,
      611,
      4808,
      12286,
      62,
      9688,
      62,
      2435,
      62,
      9630,
      318,
      503,
      286,
      22303,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of IndexError if _default_start_time_index is out of bounds."
  },
  {
    "line": 78,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of IndexError if _default_end_time_index is out of bounds.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 388,
    "end_token": 414,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      12901,
      12331,
      611,
      4808,
      12286,
      62,
      437,
      62,
      2435,
      62,
      9630,
      318,
      503,
      286,
      22303,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of IndexError if _default_end_time_index is out of bounds."
  },
  {
    "line": 78,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\ud83e\udde0 ML Signal: Function signature indicates a pattern for configuring and running ML training and testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 414,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      9217,
      257,
      3912,
      329,
      4566,
      870,
      290,
      2491,
      10373,
      3047,
      290,
      4856
    ],
    "label": "ml_signal",
    "reason": "Function signature indicates a pattern for configuring and running ML training and testing"
  },
  {
    "line": 78,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\u2705 Best Practice: Type hints for parameters improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 440,
    "end_token": 466,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      329,
      10007,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hints for parameters improve code readability and maintainability"
  },
  {
    "line": 78,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary keys without validation can lead to KeyError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 466,
    "end_token": 492,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      8251,
      1231,
      21201,
      460,
      1085,
      284,
      7383,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary keys without validation can lead to KeyError"
  },
  {
    "line": 78,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\u2705 Best Practice: Using .get() with a default value prevents KeyError and improves code robustness",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 492,
    "end_token": 518,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      764,
      1136,
      3419,
      351,
      257,
      4277,
      1988,
      15174,
      7383,
      12331,
      290,
      19575,
      2438,
      12373,
      1108
    ],
    "label": "best_practice",
    "reason": "Using .get() with a default value prevents KeyError and improves code robustness"
  },
  {
    "line": 92,
    "text": "            direction=OrderDir(int(row[\"order_type\"])),",
    "annotation": "\u2705 Best Practice: Use of a factory function to encapsulate object creation logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      28,
      18743,
      35277,
      7,
      600,
      7,
      808,
      14692,
      2875,
      62,
      4906,
      8973,
      36911
    ],
    "start_token": 518,
    "end_token": 543,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      8860,
      2163,
      284,
      32652,
      5039,
      2134,
      6282,
      9156
    ],
    "label": "best_practice",
    "reason": "Use of a factory function to encapsulate object creation logic"
  },
  {
    "line": 103,
    "text": "    trainer_config: dict,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks, which can be disabled with optimization flags",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      21997,
      62,
      11250,
      25,
      8633,
      11
    ],
    "start_token": 543,
    "end_token": 552,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      11,
      543,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks, which can be disabled with optimization flags"
  },
  {
    "line": 105,
    "text": "    state_interpreter: StateInterpreter,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks, which can be disabled with optimization flags",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1181,
      62,
      3849,
      3866,
      353,
      25,
      1812,
      9492,
      3866,
      353,
      11
    ],
    "start_token": 552,
    "end_token": 566,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      11,
      543,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks, which can be disabled with optimization flags"
  },
  {
    "line": 105,
    "text": "    state_interpreter: StateInterpreter,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine if training should be run",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1181,
      62,
      3849,
      3866,
      353,
      25,
      1812,
      9492,
      3866,
      353,
      11
    ],
    "start_token": 566,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      611,
      3047,
      815,
      307,
      1057
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine if training should be run"
  },
  {
    "line": 105,
    "text": "    state_interpreter: StateInterpreter,",
    "annotation": "\ud83e\udde0 ML Signal: Use of LazyLoadDataset for efficient data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1181,
      62,
      3849,
      3866,
      353,
      25,
      1812,
      9492,
      3866,
      353,
      11
    ],
    "start_token": 580,
    "end_token": 594,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      406,
      12582,
      8912,
      27354,
      292,
      316,
      329,
      6942,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of LazyLoadDataset for efficient data handling"
  },
  {
    "line": 117,
    "text": "        return SingleAssetOrderExecutionSimple(",
    "annotation": "\u2705 Best Practice: Use of type hints for better code readability and maintenance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      14206,
      45869,
      18743,
      23002,
      1009,
      26437,
      7
    ],
    "start_token": 594,
    "end_token": 609,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      9262
    ],
    "label": "best_practice",
    "reason": "Use of type hints for better code readability and maintenance"
  },
  {
    "line": 124,
    "text": "            vol_threshold=simulator_config[\"vol_limit\"],",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to add callbacks based on configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2322,
      62,
      400,
      10126,
      28,
      14323,
      8927,
      62,
      11250,
      14692,
      10396,
      62,
      32374,
      33116
    ],
    "start_token": 609,
    "end_token": 634,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      751,
      869,
      10146,
      1912,
      319,
      8398
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to add callbacks based on configuration"
  },
  {
    "line": 131,
    "text": "        train_dataset, valid_dataset = [",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to add early stopping based on configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4512,
      62,
      19608,
      292,
      316,
      11,
      4938,
      62,
      19608,
      292,
      316,
      796,
      685
    ],
    "start_token": 634,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      751,
      1903,
      12225,
      1912,
      319,
      8398
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to add early stopping based on configuration"
  },
  {
    "line": 131,
    "text": "        train_dataset, valid_dataset = [",
    "annotation": "\ud83e\udde0 ML Signal: Invocation of a training function with various parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4512,
      62,
      19608,
      292,
      316,
      11,
      4938,
      62,
      19608,
      292,
      316,
      796,
      685
    ],
    "start_token": 654,
    "end_token": 674,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10001,
      5040,
      286,
      257,
      3047,
      2163,
      351,
      2972,
      10007
    ],
    "label": "ml_signal",
    "reason": "Invocation of a training function with various parameters"
  },
  {
    "line": 161,
    "text": "            state_interpreter=state_interpreter,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine if backtesting should be run",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1181,
      62,
      3849,
      3866,
      353,
      28,
      5219,
      62,
      3849,
      3866,
      353,
      11
    ],
    "start_token": 674,
    "end_token": 697,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      611,
      736,
      33407,
      815,
      307,
      1057
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine if backtesting should be run"
  },
  {
    "line": 161,
    "text": "            state_interpreter=state_interpreter,",
    "annotation": "\ud83e\udde0 ML Signal: Use of LazyLoadDataset for efficient data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1181,
      62,
      3849,
      3866,
      353,
      28,
      5219,
      62,
      3849,
      3866,
      353,
      11
    ],
    "start_token": 697,
    "end_token": 720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      406,
      12582,
      8912,
      27354,
      292,
      316,
      329,
      6942,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of LazyLoadDataset for efficient data handling"
  },
  {
    "line": 172,
    "text": "            },",
    "annotation": "\ud83e\udde0 ML Signal: Invocation of a backtesting function with various parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 720,
    "end_token": 732,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10001,
      5040,
      286,
      257,
      736,
      33407,
      2163,
      351,
      2972,
      10007
    ],
    "label": "ml_signal",
    "reason": "Invocation of a backtesting function with various parameters"
  },
  {
    "line": 180,
    "text": "            },",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Dynamic import paths can lead to code execution risks if paths are not controlled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 732,
    "end_token": 744,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      26977,
      1330,
      13532,
      460,
      1085,
      284,
      2438,
      9706,
      7476,
      611,
      13532,
      389,
      407,
      6856,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Dynamic import paths can lead to code execution risks if paths are not controlled."
  },
  {
    "line": 199,
    "text": "            finite_env_type=env_config[\"parallel_mode\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the policy object is safe to execute on CUDA to prevent GPU-related vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27454,
      62,
      24330,
      62,
      4906,
      28,
      24330,
      62,
      11250,
      14692,
      1845,
      29363,
      62,
      14171,
      33116
    ],
    "start_token": 744,
    "end_token": 770,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      2450,
      2134,
      318,
      3338,
      284,
      12260,
      319,
      29369,
      5631,
      284,
      2948,
      11362,
      12,
      5363,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the policy object is safe to execute on CUDA to prevent GPU-related vulnerabilities."
  },
  {
    "line": 216,
    "text": "    action_interpreter: ActionInterpreter = init_instance_by_config(config[\"action_interpreter\"])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ignoring warnings can hide potential issues that need attention.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2223,
      62,
      3849,
      3866,
      353,
      25,
      7561,
      9492,
      3866,
      353,
      796,
      2315,
      62,
      39098,
      62,
      1525,
      62,
      11250,
      7,
      11250,
      14692,
      2673,
      62,
      3849,
      3866,
      353,
      8973,
      8
    ],
    "start_token": 770,
    "end_token": 801,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      16583,
      3255,
      14601,
      460,
      7808,
      2785,
      2428,
      326,
      761,
      3241,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ignoring warnings can hide potential issues that need attention."
  },
  {
    "line": 222,
    "text": "    }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the YAML file is from a trusted source to prevent YAML deserialization attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 801,
    "end_token": 805,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      575,
      2390,
      43,
      2393,
      318,
      422,
      257,
      13467,
      2723,
      284,
      2948,
      575,
      2390,
      43,
      748,
      48499,
      1634,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the YAML file is from a trusted source to prevent YAML deserialization attacks."
  },
  {
    "line": 222,
    "text": "    }",
    "annotation": "\ud83e\udde0 ML Signal: The use of command-line arguments to control training and backtesting workflows.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1782
    ],
    "start_token": 805,
    "end_token": 809,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      779,
      286,
      3141,
      12,
      1370,
      7159,
      284,
      1630,
      3047,
      290,
      736,
      33407,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "The use of command-line arguments to control training and backtesting workflows."
  }
]
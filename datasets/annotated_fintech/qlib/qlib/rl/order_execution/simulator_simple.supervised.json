[
  {
    "line": 6,
    "text": "from typing import Any, cast, List, Optional",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      4377,
      11,
      3350,
      11,
      7343,
      11,
      32233
    ],
    "start_token": 0,
    "end_token": 10,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 14,
    "text": "from qlib.rl.data.base import BaseIntradayBacktestData",
    "annotation": "\u2705 Best Practice: Relative imports can make the code more modular and easier to refactor.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      7890,
      13,
      8692,
      1330,
      7308,
      5317,
      6335,
      323,
      7282,
      9288,
      6601
    ],
    "start_token": 10,
    "end_token": 27,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45344,
      17944,
      460,
      787,
      262,
      2438,
      517,
      26507,
      290,
      4577,
      284,
      1006,
      11218,
      13
    ],
    "label": "best_practice",
    "reason": "Relative imports can make the code more modular and easier to refactor."
  },
  {
    "line": 16,
    "text": "from qlib.rl.data.pickle_styled import load_simple_intraday_backtest_data",
    "annotation": "\u2705 Best Practice: Using __all__ to define public API of the module.",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      7890,
      13,
      27729,
      293,
      62,
      34365,
      992,
      1330,
      3440,
      62,
      36439,
      62,
      600,
      6335,
      323,
      62,
      1891,
      9288,
      62,
      7890
    ],
    "start_token": 27,
    "end_token": 53,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      11593,
      439,
      834,
      284,
      8160,
      1171,
      7824,
      286,
      262,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Using __all__ to define public API of the module."
  },
  {
    "line": 42,
    "text": "        Path to load backtest data.",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10644,
      284,
      3440,
      736,
      9288,
      1366,
      13
    ],
    "start_token": 53,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 47,
    "text": "    data_granularity",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737
    ],
    "start_token": 67,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 52,
    "text": "        Maximum execution volume (divided by market execution volume).",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      22246,
      9706,
      6115,
      357,
      7146,
      1384,
      416,
      1910,
      9706,
      6115,
      737
    ],
    "start_token": 74,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 55,
    "text": "    history_exec: pd.DataFrame",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2106,
      62,
      18558,
      25,
      279,
      67,
      13,
      6601,
      19778
    ],
    "start_token": 92,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 59,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 104,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 59,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type annotations for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 104,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for class attributes improves code readability and maintainability."
  },
  {
    "line": 69,
    "text": "    \"\"\"This price is used to compute price advantage.",
    "annotation": "\u2705 Best Practice: Call to superclass constructor ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      1212,
      2756,
      318,
      973,
      284,
      24061,
      2756,
      4621,
      13
    ],
    "start_token": 104,
    "end_token": 117,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      23772,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass constructor ensures proper initialization of the base class."
  },
  {
    "line": 71,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags."
  },
  {
    "line": 75,
    "text": "    ticks_for_order: pd.DatetimeIndex",
    "annotation": "\ud83e\udde0 ML Signal: Use of feature columns indicates feature engineering for ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      36066,
      62,
      1640,
      62,
      2875,
      25,
      279,
      67,
      13,
      27354,
      8079,
      15732
    ],
    "start_token": 117,
    "end_token": 132,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3895,
      15180,
      9217,
      3895,
      8705,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of feature columns indicates feature engineering for ML models."
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of feature columns indicates feature engineering for ML models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 132,
    "end_token": 132,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3895,
      15180,
      9217,
      3895,
      8705,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of feature columns indicates feature engineering for ML models."
  },
  {
    "line": 81,
    "text": "        data_dir: Path,",
    "annotation": "\ud83e\udde0 ML Signal: Loading backtest data suggests simulation or model evaluation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      15908,
      25,
      10644,
      11
    ],
    "start_token": 132,
    "end_token": 145,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      12320,
      736,
      9288,
      1366,
      5644,
      18640,
      393,
      2746,
      12660,
      13
    ],
    "label": "ml_signal",
    "reason": "Loading backtest data suggests simulation or model evaluation."
  },
  {
    "line": 87,
    "text": "    ) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of average price could be used as a feature or target in ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 145,
    "end_token": 152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2811,
      2756,
      714,
      307,
      973,
      355,
      257,
      3895,
      393,
      2496,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculation of average price could be used as a feature or target in ML models."
  },
  {
    "line": 90,
    "text": "        assert ticks_per_step % data_granularity == 0",
    "annotation": "\ud83e\udde0 ML Signal: Use of metric keys suggests tracking or evaluation of model performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      36066,
      62,
      525,
      62,
      9662,
      4064,
      1366,
      62,
      46324,
      33737,
      6624,
      657
    ],
    "start_token": 152,
    "end_token": 172,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      18663,
      8251,
      5644,
      9646,
      393,
      12660,
      286,
      2746,
      2854,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of metric keys suggests tracking or evaluation of model performance."
  },
  {
    "line": 92,
    "text": "        self.order = order",
    "annotation": "\u2705 Best Practice: Use of pandas DataFrame for structured data storage and manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      796,
      1502
    ],
    "start_token": 172,
    "end_token": 184,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      6143,
      290,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pandas DataFrame for structured data storage and manipulation."
  },
  {
    "line": 93,
    "text": "        self.data_dir = data_dir",
    "annotation": "\u2705 Best Practice: Use of pandas DataFrame for structured data storage and manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      62,
      15908,
      796,
      1366,
      62,
      15908
    ],
    "start_token": 184,
    "end_token": 200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      6143,
      290,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pandas DataFrame for structured data storage and manipulation."
  },
  {
    "line": 102,
    "text": "        # Get time index available for trading",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a data loading function with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3497,
      640,
      6376,
      1695,
      329,
      7313
    ],
    "start_token": 200,
    "end_token": 214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1366,
      11046,
      2163,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of a data loading function with specific parameters"
  },
  {
    "line": 104,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Broad exception handling may hide other issues",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 214,
    "end_token": 214,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9765,
      6631,
      9041,
      743,
      7808,
      584,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Broad exception handling may hide other issues"
  },
  {
    "line": 104,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider logging the exception for better traceability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 214,
    "end_token": 214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      18931,
      262,
      6631,
      329,
      1365,
      12854,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider logging the exception for better traceability"
  },
  {
    "line": 118,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for runtime checks can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 214,
    "end_token": 214,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for runtime checks can be disabled with optimization flags."
  },
  {
    "line": 121,
    "text": "        self.market_vol_limit: Optional[np.ndarray] = None",
    "annotation": "\ud83e\udde0 ML Signal: Splitting execution volume could indicate a strategy pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      10728,
      62,
      10396,
      62,
      32374,
      25,
      32233,
      58,
      37659,
      13,
      358,
      18747,
      60,
      796,
      6045
    ],
    "start_token": 214,
    "end_token": 238,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      9706,
      6115,
      714,
      7603,
      257,
      4811,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Splitting execution volume could indicate a strategy pattern."
  },
  {
    "line": 123,
    "text": "    def get_backtest_data(self) -> BaseIntradayBacktestData:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for runtime checks can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      1891,
      9288,
      62,
      7890,
      7,
      944,
      8,
      4613,
      7308,
      5317,
      6335,
      323,
      7282,
      9288,
      6601,
      25
    ],
    "start_token": 238,
    "end_token": 260,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for runtime checks can be disabled with optimization flags."
  },
  {
    "line": 125,
    "text": "            data = load_handler_intraday_processed_data(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements for runtime checks can be disabled with optimization flags.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      3440,
      62,
      30281,
      62,
      600,
      6335,
      323,
      62,
      14681,
      276,
      62,
      7890,
      7
    ],
    "start_token": 260,
    "end_token": 286,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements for runtime checks can be disabled with optimization flags."
  },
  {
    "line": 127,
    "text": "                stock_id=self.order.stock_id,",
    "annotation": "\ud83e\udde0 ML Signal: Tracking position changes could indicate trading behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      28,
      944,
      13,
      2875,
      13,
      13578,
      62,
      312,
      11
    ],
    "start_token": 286,
    "end_token": 313,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      2292,
      2458,
      714,
      7603,
      7313,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Tracking position changes could indicate trading behavior."
  },
  {
    "line": 130,
    "text": "                feature_columns_yesterday=self.feature_columns_yesterday,",
    "annotation": "\u2705 Best Practice: Use a constant for small value comparisons to improve readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3895,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      28,
      944,
      13,
      30053,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      11
    ],
    "start_token": 313,
    "end_token": 346,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      6937,
      329,
      1402,
      1988,
      17909,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a constant for small value comparisons to improve readability."
  },
  {
    "line": 130,
    "text": "                feature_columns_yesterday=self.feature_columns_yesterday,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for negative execution volumes, which may be unintended.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3895,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      28,
      944,
      13,
      30053,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      11
    ],
    "start_token": 346,
    "end_token": 379,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      4633,
      9706,
      15343,
      11,
      543,
      743,
      307,
      30261,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for negative execution volumes, which may be unintended."
  },
  {
    "line": 130,
    "text": "                feature_columns_yesterday=self.feature_columns_yesterday,",
    "annotation": "\ud83e\udde0 ML Signal: Appending to history could indicate a pattern of tracking past actions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3895,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      28,
      944,
      13,
      30053,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      11
    ],
    "start_token": 379,
    "end_token": 412,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      2106,
      714,
      7603,
      257,
      3912,
      286,
      9646,
      1613,
      4028,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to history could indicate a pattern of tracking past actions."
  },
  {
    "line": 156,
    "text": "        assert not self.done()",
    "annotation": "\ud83e\udde0 ML Signal: Collecting metrics could indicate a pattern of performance evaluation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      407,
      2116,
      13,
      28060,
      3419
    ],
    "start_token": 412,
    "end_token": 425,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      20731,
      714,
      7603,
      257,
      3912,
      286,
      2854,
      12660,
      13
    ],
    "label": "ml_signal",
    "reason": "Collecting metrics could indicate a pattern of performance evaluation."
  },
  {
    "line": 163,
    "text": "        ticks_position = self.position - np.cumsum(exec_vol)",
    "annotation": "\ud83e\udde0 ML Signal: Checking for completion could indicate a pattern of iterative processes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      9150,
      796,
      2116,
      13,
      9150,
      532,
      45941,
      13,
      66,
      5700,
      388,
      7,
      18558,
      62,
      10396,
      8
    ],
    "start_token": 425,
    "end_token": 450,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      11939,
      714,
      7603,
      257,
      3912,
      286,
      11629,
      876,
      7767,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for completion could indicate a pattern of iterative processes."
  },
  {
    "line": 164,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging history could indicate a pattern of tracking and analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 450,
    "end_token": 450,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      2106,
      714,
      7603,
      257,
      3912,
      286,
      9646,
      290,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging history could indicate a pattern of tracking and analysis."
  },
  {
    "line": 172,
    "text": "        time_index = self._get_ticks_slice(self.cur_time, self._next_time())",
    "annotation": "\ud83e\udde0 ML Signal: Logging metrics could indicate a pattern of performance tracking.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      9630,
      796,
      2116,
      13557,
      1136,
      62,
      83,
      3378,
      62,
      48369,
      7,
      944,
      13,
      22019,
      62,
      2435,
      11,
      2116,
      13557,
      19545,
      62,
      2435,
      28955
    ],
    "start_token": 450,
    "end_token": 482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      20731,
      714,
      7603,
      257,
      3912,
      286,
      2854,
      9646,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging metrics could indicate a pattern of performance tracking."
  },
  {
    "line": 171,
    "text": "        # Get time index available for this step",
    "annotation": "\ud83e\udde0 ML Signal: Method returning an object with multiple attributes, indicating a complex state representation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      3497,
      640,
      6376,
      1695,
      329,
      428,
      2239
    ],
    "start_token": 482,
    "end_token": 497,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      281,
      2134,
      351,
      3294,
      12608,
      11,
      12739,
      257,
      3716,
      1181,
      10552
    ],
    "label": "ml_signal",
    "reason": "Method returning an object with multiple attributes, indicating a complex state representation"
  },
  {
    "line": 172,
    "text": "        time_index = self._get_ticks_slice(self.cur_time, self._next_time())",
    "annotation": "\ud83e\udde0 ML Signal: Returning an instance of a class, which may be used for state management or serialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      9630,
      796,
      2116,
      13557,
      1136,
      62,
      83,
      3378,
      62,
      48369,
      7,
      944,
      13,
      22019,
      62,
      2435,
      11,
      2116,
      13557,
      19545,
      62,
      2435,
      28955
    ],
    "start_token": 497,
    "end_token": 529,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      281,
      4554,
      286,
      257,
      1398,
      11,
      543,
      743,
      307,
      973,
      329,
      1181,
      4542,
      393,
      11389,
      1634
    ],
    "label": "ml_signal",
    "reason": "Returning an instance of a class, which may be used for state management or serialization"
  },
  {
    "line": 172,
    "text": "        time_index = self._get_ticks_slice(self.cur_time, self._next_time())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      9630,
      796,
      2116,
      13557,
      1136,
      62,
      83,
      3378,
      62,
      48369,
      7,
      944,
      13,
      22019,
      62,
      2435,
      11,
      2116,
      13557,
      19545,
      62,
      2435,
      28955
    ],
    "start_token": 529,
    "end_token": 561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 172,
    "text": "        time_index = self._get_ticks_slice(self.cur_time, self._next_time())",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      9630,
      796,
      2116,
      13557,
      1136,
      62,
      83,
      3378,
      62,
      48369,
      7,
      944,
      13,
      22019,
      62,
      2435,
      11,
      2116,
      13557,
      19545,
      62,
      2435,
      28955
    ],
    "start_token": 561,
    "end_token": 593,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 179,
    "text": "                # Some values could be vectorized (e.g., exec_vol).",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2773,
      3815,
      714,
      307,
      15879,
      1143,
      357,
      68,
      13,
      70,
      1539,
      2452,
      62,
      10396,
      737
    ],
    "start_token": 593,
    "end_token": 624,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 181,
    "text": "                datetime=time_index,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4818,
      8079,
      28,
      2435,
      62,
      9630,
      11
    ],
    "start_token": 624,
    "end_token": 646,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 183,
    "text": "                market_volume=self.market_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1910,
      62,
      29048,
      28,
      944,
      13,
      10728,
      62,
      10396,
      11
    ],
    "start_token": 646,
    "end_token": 671,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 185,
    "text": "                amount=exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2033,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 671,
    "end_token": 692,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 187,
    "text": "                deal_amount=exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1730,
      62,
      17287,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 692,
    "end_token": 715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 189,
    "text": "                trade_value=self.market_price * exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      944,
      13,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 715,
    "end_token": 744,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 191,
    "text": "                ffr=exec_vol / self.order.amount,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      8310,
      28,
      18558,
      62,
      10396,
      1220,
      2116,
      13,
      2875,
      13,
      17287,
      11
    ],
    "start_token": 744,
    "end_token": 772,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 193,
    "text": "            ),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 772,
    "end_token": 784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self attributes to construct a state object",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 784,
    "end_token": 784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      12608,
      284,
      5678,
      257,
      1181,
      2134
    ],
    "label": "ml_signal",
    "reason": "Usage of self attributes to construct a state object"
  },
  {
    "line": 185,
    "text": "                amount=exec_vol,",
    "annotation": "\u2705 Best Practice: Type hinting for the return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2033,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 784,
    "end_token": 805,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return value improves code readability and maintainability"
  },
  {
    "line": 187,
    "text": "                deal_amount=exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of comparison operators to determine a boolean condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1730,
      62,
      17287,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 805,
    "end_token": 828,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7208,
      12879,
      284,
      5004,
      257,
      25131,
      4006
    ],
    "label": "ml_signal",
    "reason": "Usage of comparison operators to determine a boolean condition"
  },
  {
    "line": 188,
    "text": "                trade_price=self.market_price,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if EPS is not defined or is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      28,
      944,
      13,
      10728,
      62,
      20888,
      11
    ],
    "start_token": 828,
    "end_token": 853,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      47013,
      318,
      407,
      5447,
      393,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if EPS is not defined or is user-controlled"
  },
  {
    "line": 189,
    "text": "                trade_value=self.market_price * exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas index location to determine the next time step",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      944,
      13,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 853,
    "end_token": 882,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6376,
      4067,
      284,
      5004,
      262,
      1306,
      640,
      2239
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas index location to determine the next time step"
  },
  {
    "line": 191,
    "text": "                ffr=exec_vol / self.order.amount,",
    "annotation": "\ud83e\udde0 ML Signal: Incrementing index location by a fixed step size",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      8310,
      28,
      18558,
      62,
      10396,
      1220,
      2116,
      13,
      2875,
      13,
      17287,
      11
    ],
    "start_token": 882,
    "end_token": 910,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10791,
      434,
      278,
      6376,
      4067,
      416,
      257,
      5969,
      2239,
      2546
    ],
    "label": "ml_signal",
    "reason": "Incrementing index location by a fixed step size"
  },
  {
    "line": 193,
    "text": "            ),",
    "annotation": "\u2705 Best Practice: Aligning next_loc to the nearest step boundary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 910,
    "end_token": 922,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      978,
      38944,
      1306,
      62,
      17946,
      284,
      262,
      16936,
      2239,
      18645
    ],
    "label": "best_practice",
    "reason": "Aligning next_loc to the nearest step boundary"
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential index out of bounds if next_loc is not validated",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 922,
    "end_token": 922,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6376,
      503,
      286,
      22303,
      611,
      1306,
      62,
      17946,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential index out of bounds if next_loc is not validated"
  },
  {
    "line": 196,
    "text": "        self.history_steps = self._dataframe_append(",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      20214,
      796,
      2116,
      13557,
      7890,
      14535,
      62,
      33295,
      7
    ],
    "start_token": 922,
    "end_token": 942,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 199,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of subtraction operation on datetime objects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 942,
    "end_token": 950,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      13284,
      7861,
      4905,
      319,
      4818,
      8079,
      5563
    ],
    "label": "ml_signal",
    "reason": "Use of subtraction operation on datetime objects"
  },
  {
    "line": 204,
    "text": "                self.env.logger.add_any(\"history_exec\", self.history_exec, loglevel=LogLevel.DEBUG)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time-based volume splitting strategy (TWAP) for trading",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24330,
      13,
      6404,
      1362,
      13,
      2860,
      62,
      1092,
      7203,
      23569,
      62,
      18558,
      1600,
      2116,
      13,
      23569,
      62,
      18558,
      11,
      300,
      2467,
      626,
      28,
      11187,
      4971,
      13,
      30531,
      8
    ],
    "start_token": 950,
    "end_token": 995,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      12,
      3106,
      6115,
      26021,
      4811,
      357,
      34551,
      2969,
      8,
      329,
      7313
    ],
    "label": "ml_signal",
    "reason": "Usage of time-based volume splitting strategy (TWAP) for trading"
  },
  {
    "line": 206,
    "text": "            self.metrics = self._metrics_collect(",
    "annotation": "\ud83e\udde0 ML Signal: Accessing historical market volume data for decision making",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      4164,
      10466,
      796,
      2116,
      13557,
      4164,
      10466,
      62,
      33327,
      7
    ],
    "start_token": 995,
    "end_token": 1018,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6754,
      1910,
      6115,
      1366,
      329,
      2551,
      1642
    ],
    "label": "ml_signal",
    "reason": "Accessing historical market volume data for decision making"
  },
  {
    "line": 208,
    "text": "                self.history_exec[\"market_volume\"],",
    "annotation": "\ud83e\udde0 ML Signal: Accessing historical market price data for decision making",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      14692,
      10728,
      62,
      29048,
      33116
    ],
    "start_token": 1018,
    "end_token": 1043,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6754,
      1910,
      2756,
      1366,
      329,
      2551,
      1642
    ],
    "label": "ml_signal",
    "reason": "Accessing historical market price data for decision making"
  },
  {
    "line": 210,
    "text": "                self.history_steps[\"amount\"].sum(),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assert statements can be disabled in production, leading to potential issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      20214,
      14692,
      17287,
      1,
      4083,
      16345,
      22784
    ],
    "start_token": 1043,
    "end_token": 1069,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      6299,
      460,
      307,
      10058,
      287,
      3227,
      11,
      3756,
      284,
      2785,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assert statements can be disabled in production, leading to potential issues"
  },
  {
    "line": 212,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Repeating execution volume based on market price length",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1069,
    "end_token": 1081,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      803,
      9706,
      6115,
      1912,
      319,
      1910,
      2756,
      4129
    ],
    "label": "ml_signal",
    "reason": "Repeating execution volume based on market price length"
  },
  {
    "line": 214,
    "text": "            # NOTE (yuge): It looks to me that it's the \"correct\" decision to",
    "annotation": "\ud83e\udde0 ML Signal: Applying volume threshold constraints to execution volume",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      357,
      88,
      2217,
      2599,
      632,
      3073,
      284,
      502,
      326,
      340,
      338,
      262,
      366,
      30283,
      1,
      2551,
      284
    ],
    "start_token": 1081,
    "end_token": 1111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      6115,
      11387,
      17778,
      284,
      9706,
      6115
    ],
    "label": "ml_signal",
    "reason": "Applying volume threshold constraints to execution volume"
  },
  {
    "line": 215,
    "text": "            # put all the logs here, because only components like simulators themselves",
    "annotation": "\ud83e\udde0 ML Signal: Adjusting execution volume based on market volume limits",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1234,
      477,
      262,
      17259,
      994,
      11,
      780,
      691,
      6805,
      588,
      985,
      24325,
      2405
    ],
    "start_token": 1111,
    "end_token": 1136,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      278,
      9706,
      6115,
      1912,
      319,
      1910,
      6115,
      7095
    ],
    "label": "ml_signal",
    "reason": "Adjusting execution volume based on market volume limits"
  },
  {
    "line": 215,
    "text": "            # put all the logs here, because only components like simulators themselves",
    "annotation": "\u2705 Best Practice: Handling edge case when next_time exceeds order end time",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1234,
      477,
      262,
      17259,
      994,
      11,
      780,
      691,
      6805,
      588,
      985,
      24325,
      2405
    ],
    "start_token": 1136,
    "end_token": 1161,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      49500,
      5743,
      1339,
      618,
      1306,
      62,
      2435,
      21695,
      1502,
      886,
      640
    ],
    "label": "best_practice",
    "reason": "Handling edge case when next_time exceeds order end time"
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Adjusting final execution volume to match position",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1161,
    "end_token": 1161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20292,
      278,
      2457,
      9706,
      6115,
      284,
      2872,
      2292
    ],
    "label": "ml_signal",
    "reason": "Adjusting final execution volume to match position"
  },
  {
    "line": 223,
    "text": "                    if isinstance(value, float):",
    "annotation": "\ud83e\udde0 ML Signal: Reapplying volume constraints after adjustment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      8367,
      11,
      12178,
      2599
    ],
    "start_token": 1161,
    "end_token": 1188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      797,
      1324,
      3157,
      6115,
      17778,
      706,
      15068
    ],
    "label": "ml_signal",
    "reason": "Reapplying volume constraints after adjustment"
  },
  {
    "line": 224,
    "text": "                        self.env.logger.add_scalar(key, value)",
    "annotation": "\ud83e\udde0 ML Signal: Returning the calculated execution volumes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24330,
      13,
      6404,
      1362,
      13,
      2860,
      62,
      1416,
      282,
      283,
      7,
      2539,
      11,
      1988,
      8
    ],
    "start_token": 1188,
    "end_token": 1228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      262,
      10488,
      9706,
      15343
    ],
    "label": "ml_signal",
    "reason": "Returning the calculated execution volumes"
  },
  {
    "line": 223,
    "text": "                    if isinstance(value, float):",
    "annotation": "\u2705 Best Practice: Use of assert to ensure input arrays have the same length",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      8367,
      11,
      12178,
      2599
    ],
    "start_token": 1228,
    "end_token": 1255,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      4155,
      5128,
      26515,
      423,
      262,
      976,
      4129
    ],
    "label": "best_practice",
    "reason": "Use of assert to ensure input arrays have the same length"
  },
  {
    "line": 225,
    "text": "                    else:",
    "annotation": "\u2705 Best Practice: Use of EPS to handle floating-point precision issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1255,
    "end_token": 1276,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      47013,
      284,
      5412,
      12462,
      12,
      4122,
      15440,
      2428
    ],
    "label": "best_practice",
    "reason": "Use of EPS to handle floating-point precision issues"
  },
  {
    "line": 229,
    "text": "        self.cur_step += 1",
    "annotation": "\u2705 Best Practice: Use of numpy average with weights for calculating weighted average",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      22019,
      62,
      9662,
      15853,
      352
    ],
    "start_token": 1276,
    "end_token": 1290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2811,
      351,
      19590,
      329,
      26019,
      26356,
      2811
    ],
    "label": "best_practice",
    "reason": "Use of numpy average with weights for calculating weighted average"
  },
  {
    "line": 230,
    "text": "",
    "annotation": "\u2705 Best Practice: Check if exec_avg_price has 'item' method to convert numpy scalar to Python float",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2452,
      62,
      615,
      70,
      62,
      20888,
      468,
      705,
      9186,
      6,
      2446,
      284,
      10385,
      299,
      32152,
      16578,
      283,
      284,
      11361,
      12178
    ],
    "label": "best_practice",
    "reason": "Check if exec_avg_price has 'item' method to convert numpy scalar to Python float"
  },
  {
    "line": 230,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.order attributes indicates a pattern of accessing order-related data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      2875,
      12608,
      9217,
      257,
      3912,
      286,
      22534,
      1502,
      12,
      5363,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of self.order attributes indicates a pattern of accessing order-related data"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.order attributes indicates a pattern of accessing order-related data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      2875,
      12608,
      9217,
      257,
      3912,
      286,
      22534,
      1502,
      12,
      5363,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of self.order attributes indicates a pattern of accessing order-related data"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of numpy sum for efficient array summation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      329,
      6942,
      7177,
      30114,
      341
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum for efficient array summation"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of numpy mean for efficient array averaging",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      1612,
      329,
      6942,
      7177,
      20430
    ],
    "label": "best_practice",
    "reason": "Use of numpy mean for efficient array averaging"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of numpy sum for efficient array summation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1290,
    "end_token": 1290,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      329,
      6942,
      7177,
      30114,
      341
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum for efficient array summation"
  },
  {
    "line": 247,
    "text": "        return self.position < EPS or self.cur_time >= self.order.end_time",
    "annotation": "\u2705 Best Practice: Use of numpy sum for efficient array summation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      9150,
      1279,
      47013,
      393,
      2116,
      13,
      22019,
      62,
      2435,
      18189,
      2116,
      13,
      2875,
      13,
      437,
      62,
      2435
    ],
    "start_token": 1290,
    "end_token": 1317,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      329,
      6942,
      7177,
      30114,
      341
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum for efficient array summation"
  },
  {
    "line": 250,
    "text": "        \"\"\"The \"current time\" (``cur_time``) for next step.\"\"\"",
    "annotation": "\u2705 Best Practice: Use of numpy sum and element-wise multiplication for efficient computation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      366,
      14421,
      640,
      1,
      357,
      15506,
      22019,
      62,
      2435,
      15506,
      8,
      329,
      1306,
      2239,
      526,
      15931
    ],
    "start_token": 1317,
    "end_token": 1342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      290,
      5002,
      12,
      3083,
      48473,
      329,
      6942,
      29964
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum and element-wise multiplication for efficient computation"
  },
  {
    "line": 252,
    "text": "        current_loc = self.ticks_index.get_loc(self.cur_time)",
    "annotation": "\ud83e\udde0 ML Signal: Use of self.position indicates a pattern of accessing position-related data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      17946,
      796,
      2116,
      13,
      83,
      3378,
      62,
      9630,
      13,
      1136,
      62,
      17946,
      7,
      944,
      13,
      22019,
      62,
      2435,
      8
    ],
    "start_token": 1342,
    "end_token": 1370,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2116,
      13,
      9150,
      9217,
      257,
      3912,
      286,
      22534,
      2292,
      12,
      5363,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of self.position indicates a pattern of accessing position-related data"
  },
  {
    "line": 254,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if self.order.amount is zero",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1370,
    "end_token": 1370,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      2116,
      13,
      2875,
      13,
      17287,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if self.order.amount is zero"
  },
  {
    "line": 254,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of price_advantage function indicates a pattern of calculating price advantage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1370,
    "end_token": 1370,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2756,
      62,
      13461,
      496,
      2163,
      9217,
      257,
      3912,
      286,
      26019,
      2756,
      4621
    ],
    "label": "ml_signal",
    "reason": "Use of price_advantage function indicates a pattern of calculating price advantage"
  },
  {
    "line": 246,
    "text": "    def done(self) -> bool:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1760,
      7,
      944,
      8,
      4613,
      20512,
      25
    ],
    "start_token": 1370,
    "end_token": 1381,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 248,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if EPS_T is not defined or not a valid timedelta, which could lead to runtime errors.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1381,
    "end_token": 1381,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      47013,
      62,
      51,
      318,
      407,
      5447,
      393,
      407,
      257,
      4938,
      28805,
      12514,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if EPS_T is not defined or not a valid timedelta, which could lead to runtime errors."
  },
  {
    "line": 251,
    "text": "        # Look for next time on time index",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas' slice_indexer method indicates a pattern of working with time series data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6803,
      329,
      1306,
      640,
      319,
      640,
      6376
    ],
    "start_token": 1381,
    "end_token": 1396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      6,
      16416,
      62,
      9630,
      263,
      2446,
      9217,
      257,
      3912,
      286,
      1762,
      351,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas' slice_indexer method indicates a pattern of working with time series data."
  },
  {
    "line": 253,
    "text": "        next_loc = current_loc + self.ticks_per_step",
    "annotation": "\u2705 Best Practice: Use of @staticmethod decorator indicates that the method does not modify class state, improving code clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      17946,
      796,
      1459,
      62,
      17946,
      1343,
      2116,
      13,
      83,
      3378,
      62,
      525,
      62,
      9662
    ],
    "start_token": 1396,
    "end_token": 1419,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      12708,
      24396,
      11705,
      1352,
      9217,
      326,
      262,
      2446,
      857,
      407,
      13096,
      1398,
      1181,
      11,
      10068,
      2438,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @staticmethod decorator indicates that the method does not modify class state, improving code clarity."
  },
  {
    "line": 250,
    "text": "        \"\"\"The \"current time\" (``cur_time``) for next step.\"\"\"",
    "annotation": "\u2705 Best Practice: Type hint for 'df' parameter improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      366,
      14421,
      640,
      1,
      357,
      15506,
      22019,
      62,
      2435,
      15506,
      8,
      329,
      1306,
      2239,
      526,
      15931
    ],
    "start_token": 1419,
    "end_token": 1444,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      705,
      7568,
      6,
      11507,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hint for 'df' parameter improves code readability and maintainability"
  },
  {
    "line": 251,
    "text": "        # Look for next time on time index",
    "annotation": "\u2705 Best Practice: Type hint for 'other' parameter improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6803,
      329,
      1306,
      640,
      319,
      640,
      6376
    ],
    "start_token": 1444,
    "end_token": 1459,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      705,
      847,
      6,
      11507,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hint for 'other' parameter improves code readability and maintainability"
  },
  {
    "line": 253,
    "text": "        next_loc = current_loc + self.ticks_per_step",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of 'other' to DataFrame indicates dynamic data handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      17946,
      796,
      1459,
      62,
      17946,
      1343,
      2116,
      13,
      83,
      3378,
      62,
      525,
      62,
      9662
    ],
    "start_token": 1459,
    "end_token": 1482,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      705,
      847,
      6,
      284,
      6060,
      19778,
      9217,
      8925,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Conversion of 'other' to DataFrame indicates dynamic data handling"
  },
  {
    "line": 254,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly setting index name improves code clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1482,
    "end_token": 1482,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      6376,
      1438,
      19575,
      2438,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly setting index name improves code clarity"
  },
  {
    "line": 257,
    "text": "        # as long as ticks_per_step is a multiple of something, each step won't cross morning and afternoon.",
    "annotation": "\ud83e\udde0 ML Signal: Use of pd.concat suggests data aggregation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      355,
      890,
      355,
      36066,
      62,
      525,
      62,
      9662,
      318,
      257,
      3294,
      286,
      1223,
      11,
      1123,
      2239,
      1839,
      470,
      3272,
      3329,
      290,
      6672,
      13
    ],
    "start_token": 1482,
    "end_token": 1513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      5644,
      1366,
      46500,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of pd.concat suggests data aggregation pattern"
  },
  {
    "line": 260,
    "text": "        if next_loc < len(self.ticks_index) and self.ticks_index[next_loc] < self.order.end_time:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Division by zero check, but returning zero might not be appropriate for all contexts.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1306,
      62,
      17946,
      1279,
      18896,
      7,
      944,
      13,
      83,
      3378,
      62,
      9630,
      8,
      290,
      2116,
      13,
      83,
      3378,
      62,
      9630,
      58,
      19545,
      62,
      17946,
      60,
      1279,
      2116,
      13,
      2875,
      13,
      437,
      62,
      2435,
      25
    ],
    "start_token": 1513,
    "end_token": 1555,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7458,
      416,
      6632,
      2198,
      11,
      475,
      8024,
      6632,
      1244,
      407,
      307,
      5035,
      329,
      477,
      26307,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Division by zero check, but returning zero might not be appropriate for all contexts."
  },
  {
    "line": 266,
    "text": "        \"\"\"The \"duration\" of this step (step that is about to happen).\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calculating percentage advantage for BUY orders.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      464,
      366,
      32257,
      1,
      286,
      428,
      2239,
      357,
      9662,
      326,
      318,
      546,
      284,
      1645,
      21387,
      15931
    ],
    "start_token": 1555,
    "end_token": 1579,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      26019,
      5873,
      4621,
      329,
      20571,
      56,
      6266,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of calculating percentage advantage for BUY orders."
  },
  {
    "line": 269,
    "text": "    def _split_exec_vol(self, exec_vol_sum: float) -> np.ndarray:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calculating percentage advantage for SELL orders.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      35312,
      62,
      18558,
      62,
      10396,
      7,
      944,
      11,
      2452,
      62,
      10396,
      62,
      16345,
      25,
      12178,
      8,
      4613,
      45941,
      13,
      358,
      18747,
      25
    ],
    "start_token": 1579,
    "end_token": 1606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      26019,
      5873,
      4621,
      329,
      7946,
      3069,
      6266,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of calculating percentage advantage for SELL orders."
  },
  {
    "line": 272,
    "text": "        This follows TWAP strategy.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unhandled order directions leading to exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      770,
      5679,
      17306,
      2969,
      4811,
      13
    ],
    "start_token": 1606,
    "end_token": 1619,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      555,
      38788,
      1502,
      11678,
      3756,
      284,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unhandled order directions leading to exceptions."
  },
  {
    "line": 274,
    "text": "        next_time = self._next_time()",
    "annotation": "\u2705 Best Practice: Use of np.nan_to_num to handle NaN values in calculations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      2435,
      796,
      2116,
      13557,
      19545,
      62,
      2435,
      3419
    ],
    "start_token": 1619,
    "end_token": 1636,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      45941,
      13,
      12647,
      62,
      1462,
      62,
      22510,
      284,
      5412,
      11013,
      45,
      3815,
      287,
      16765,
      13
    ],
    "label": "best_practice",
    "reason": "Use of np.nan_to_num to handle NaN values in calculations."
  },
  {
    "line": 274,
    "text": "        next_time = self._next_time()",
    "annotation": "\u2705 Best Practice: Use of item() to convert single-element arrays to scalar.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      2435,
      796,
      2116,
      13557,
      19545,
      62,
      2435,
      3419
    ],
    "start_token": 1636,
    "end_token": 1653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2378,
      3419,
      284,
      10385,
      2060,
      12,
      30854,
      26515,
      284,
      16578,
      283,
      13
    ],
    "label": "best_practice",
    "reason": "Use of item() to convert single-element arrays to scalar."
  },
  {
    "line": 274,
    "text": "        next_time = self._next_time()",
    "annotation": "\u2705 Best Practice: Use of cast for type hinting and clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      2435,
      796,
      2116,
      13557,
      19545,
      62,
      2435,
      3419
    ],
    "start_token": 1653,
    "end_token": 1670,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3350,
      329,
      2099,
      9254,
      278,
      290,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use of cast for type hinting and clarity."
  }
]
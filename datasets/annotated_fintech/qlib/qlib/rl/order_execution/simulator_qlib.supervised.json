[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Using future annotations for forward compatibility and type hinting improvements",
    "confidence": 0.5,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2003,
      37647,
      329,
      2651,
      17764,
      290,
      2099,
      9254,
      278,
      8561
    ],
    "label": "best_practice",
    "reason": "Using future annotations for forward compatibility and type hinting improvements"
  },
  {
    "line": 4,
    "text": "from __future__ import annotations",
    "annotation": "\u2705 Best Practice: Importing specific types from typing for better code clarity and type checking",
    "confidence": 0.5,
    "tokens": [
      6738,
      11593,
      37443,
      834,
      1330,
      37647
    ],
    "start_token": 7,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      3858,
      422,
      19720,
      329,
      1365,
      2438,
      16287,
      290,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Importing specific types from typing for better code clarity and type checking"
  },
  {
    "line": 6,
    "text": "from typing import Generator, List, Optional",
    "annotation": "\u2705 Best Practice: Importing pandas for data manipulation, a common and efficient library for such tasks",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      35986,
      11,
      7343,
      11,
      32233
    ],
    "start_token": 13,
    "end_token": 21,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      19798,
      292,
      329,
      1366,
      17512,
      11,
      257,
      2219,
      290,
      6942,
      5888,
      329,
      884,
      8861
    ],
    "label": "best_practice",
    "reason": "Importing pandas for data manipulation, a common and efficient library for such tasks"
  },
  {
    "line": 8,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Importing specific functions for clarity and to avoid namespace pollution",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 21,
    "end_token": 27,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific functions for clarity and to avoid namespace pollution"
  },
  {
    "line": 10,
    "text": "from qlib.backtest import collect_data_loop, get_strategy_executor",
    "annotation": "\u2705 Best Practice: Importing specific classes for clarity and to avoid namespace pollution",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      1330,
      2824,
      62,
      7890,
      62,
      26268,
      11,
      651,
      62,
      2536,
      4338,
      62,
      18558,
      38409
    ],
    "start_token": 27,
    "end_token": 47,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific classes for clarity and to avoid namespace pollution"
  },
  {
    "line": 12,
    "text": "from qlib.backtest.executor import NestedExecutor",
    "annotation": "\u2705 Best Practice: Importing specific classes for clarity and to avoid namespace pollution",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1330,
      399,
      7287,
      23002,
      38409
    ],
    "start_token": 47,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific classes for clarity and to avoid namespace pollution"
  },
  {
    "line": 12,
    "text": "from qlib.backtest.executor import NestedExecutor",
    "annotation": "\u2705 Best Practice: Importing specific functions for clarity and to avoid namespace pollution",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1330,
      399,
      7287,
      23002,
      38409
    ],
    "start_token": 61,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      5499,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific functions for clarity and to avoid namespace pollution"
  },
  {
    "line": 12,
    "text": "from qlib.backtest.executor import NestedExecutor",
    "annotation": "\u2705 Best Practice: Importing specific classes for clarity and to avoid namespace pollution",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1330,
      399,
      7287,
      23002,
      38409
    ],
    "start_token": 75,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      6097,
      329,
      16287,
      290,
      284,
      3368,
      25745,
      12231
    ],
    "label": "best_practice",
    "reason": "Importing specific classes for clarity and to avoid namespace pollution"
  },
  {
    "line": 12,
    "text": "from qlib.backtest.executor import NestedExecutor",
    "annotation": "\u2705 Best Practice: Relative imports for modules within the same package for better modularity",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1330,
      399,
      7287,
      23002,
      38409
    ],
    "start_token": 89,
    "end_token": 103,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45344,
      17944,
      329,
      13103,
      1626,
      262,
      976,
      5301,
      329,
      1365,
      26507,
      414
    ],
    "label": "best_practice",
    "reason": "Relative imports for modules within the same package for better modularity"
  },
  {
    "line": 26,
    "text": "    executor_config",
    "annotation": "\u2705 Best Practice: Relative imports for modules within the same package for better modularity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3121,
      273,
      62,
      11250
    ],
    "start_token": 103,
    "end_token": 110,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      45344,
      17944,
      329,
      13103,
      1626,
      262,
      976,
      5301,
      329,
      1365,
      26507,
      414
    ],
    "label": "best_practice",
    "reason": "Relative imports for modules within the same package for better modularity"
  },
  {
    "line": 26,
    "text": "    executor_config",
    "annotation": "\ud83e\udde0 ML Signal: Class docstring provides structured information about parameters, useful for ML models to understand code context.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3121,
      273,
      62,
      11250
    ],
    "start_token": 110,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      2205,
      8841,
      3769,
      20793,
      1321,
      546,
      10007,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      1833,
      2438,
      4732,
      13
    ],
    "label": "ml_signal",
    "reason": "Class docstring provides structured information about parameters, useful for ML models to understand code context."
  },
  {
    "line": 26,
    "text": "    executor_config",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation of class purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3121,
      273,
      62,
      11250
    ],
    "start_token": 117,
    "end_token": 124,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      286,
      1398,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation of class purpose and parameters."
  },
  {
    "line": 34,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Call to superclass constructor ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 124,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      4871,
      23772,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Call to superclass constructor ensures proper initialization of the base class."
  },
  {
    "line": 36,
    "text": "    def __init__(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 128,
    "end_token": 136,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags."
  },
  {
    "line": 44,
    "text": "        super().__init__(initial=order)",
    "annotation": "\ud83e\udde0 ML Signal: Use of time-based trade range could indicate time-sensitive trading strategies.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      7,
      36733,
      28,
      2875,
      8
    ],
    "start_token": 136,
    "end_token": 153,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      640,
      12,
      3106,
      3292,
      2837,
      714,
      7603,
      640,
      12,
      30176,
      7313,
      10064,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of time-based trade range could indicate time-sensitive trading strategies."
  },
  {
    "line": 46,
    "text": "        assert order.start_time.date() == order.end_time.date(), \"Start date and end date must be the same.\"",
    "annotation": "\u2705 Best Practice: Type hinting for _collect_data_loop improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      1502,
      13,
      9688,
      62,
      2435,
      13,
      4475,
      3419,
      6624,
      1502,
      13,
      437,
      62,
      2435,
      13,
      4475,
      22784,
      366,
      10434,
      3128,
      290,
      886,
      3128,
      1276,
      307,
      262,
      976,
      526
    ],
    "start_token": 153,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      4808,
      33327,
      62,
      7890,
      62,
      26268,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for _collect_data_loop improves code readability and maintainability."
  },
  {
    "line": 46,
    "text": "        assert order.start_time.date() == order.end_time.date(), \"Start date and end date must be the same.\"",
    "annotation": "\ud83e\udde0 ML Signal: Resetting with various configurations suggests dynamic strategy adjustments.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      1502,
      13,
      9688,
      62,
      2435,
      13,
      4475,
      3419,
      6624,
      1502,
      13,
      437,
      62,
      2435,
      13,
      4475,
      22784,
      366,
      10434,
      3128,
      290,
      886,
      3128,
      1276,
      307,
      262,
      976,
      526
    ],
    "start_token": 189,
    "end_token": 225,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30027,
      889,
      351,
      2972,
      25412,
      5644,
      8925,
      4811,
      16895,
      13
    ],
    "label": "ml_signal",
    "reason": "Resetting with various configurations suggests dynamic strategy adjustments."
  },
  {
    "line": 55,
    "text": "        }",
    "annotation": "\u2705 Best Practice: Check if qlib_config is not None before calling init_qlib",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 225,
    "end_token": 233,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      10662,
      8019,
      62,
      11250,
      318,
      407,
      6045,
      878,
      4585,
      2315,
      62,
      80,
      8019
    ],
    "label": "best_practice",
    "reason": "Check if qlib_config is not None before calling init_qlib"
  },
  {
    "line": 57,
    "text": "        self._collect_data_loop: Optional[Generator] = None",
    "annotation": "\ud83e\udde0 ML Signal: Usage of get_strategy_executor function with multiple parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      33327,
      62,
      7890,
      62,
      26268,
      25,
      32233,
      58,
      8645,
      1352,
      60,
      796,
      6045
    ],
    "start_token": 233,
    "end_token": 255,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      651,
      62,
      2536,
      4338,
      62,
      18558,
      38409,
      2163,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of get_strategy_executor function with multiple parameters"
  },
  {
    "line": 69,
    "text": "        if qlib_config is not None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for type checking, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      10662,
      8019,
      62,
      11250,
      318,
      407,
      6045,
      25
    ],
    "start_token": 255,
    "end_token": 271,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      2099,
      10627,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for type checking, which can be disabled in production"
  },
  {
    "line": 70,
    "text": "            init_qlib(qlib_config)",
    "annotation": "\u2705 Best Practice: Initialize report_dict as an empty dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2315,
      62,
      80,
      8019,
      7,
      80,
      8019,
      62,
      11250,
      8
    ],
    "start_token": 271,
    "end_token": 292,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      989,
      62,
      11600,
      355,
      281,
      6565,
      22155
    ],
    "label": "best_practice",
    "reason": "Initialize report_dict as an empty dictionary"
  },
  {
    "line": 70,
    "text": "            init_qlib(qlib_config)",
    "annotation": "\u2705 Best Practice: Initialize decisions as an empty list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2315,
      62,
      80,
      8019,
      7,
      80,
      8019,
      62,
      11250,
      8
    ],
    "start_token": 292,
    "end_token": 313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      5370,
      355,
      281,
      6565,
      1351
    ],
    "label": "best_practice",
    "reason": "Initialize decisions as an empty list"
  },
  {
    "line": 77,
    "text": "            benchmark=order.stock_id,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of collect_data_loop function with multiple parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      18335,
      28,
      2875,
      13,
      13578,
      62,
      312,
      11
    ],
    "start_token": 313,
    "end_token": 332,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2824,
      62,
      7890,
      62,
      26268,
      2163,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of collect_data_loop function with multiple parameters"
  },
  {
    "line": 83,
    "text": "        assert isinstance(self._executor, NestedExecutor)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for type checking, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      944,
      13557,
      18558,
      38409,
      11,
      399,
      7287,
      23002,
      38409,
      8
    ],
    "start_token": 332,
    "end_token": 353,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      2099,
      10627,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for type checking, which can be disabled in production"
  },
  {
    "line": 85,
    "text": "        self.report_dict: dict = {}",
    "annotation": "\ud83e\udde0 ML Signal: Calling step function with action=None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      13116,
      62,
      11600,
      25,
      8633,
      796,
      23884
    ],
    "start_token": 353,
    "end_token": 369,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      2239,
      2163,
      351,
      2223,
      28,
      14202
    ],
    "label": "ml_signal",
    "reason": "Calling step function with action=None"
  },
  {
    "line": 87,
    "text": "        self._collect_data_loop = collect_data_loop(",
    "annotation": "\u2705 Best Practice: Assign order to self._order for later use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      33327,
      62,
      7890,
      62,
      26268,
      796,
      2824,
      62,
      7890,
      62,
      26268,
      7
    ],
    "start_token": 369,
    "end_token": 390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      570,
      1502,
      284,
      2116,
      13557,
      2875,
      329,
      1568,
      779
    ],
    "label": "best_practice",
    "reason": "Assign order to self._order for later use"
  },
  {
    "line": 81,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 390,
    "end_token": 398,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability."
  },
  {
    "line": 83,
    "text": "        assert isinstance(self._executor, NestedExecutor)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary with a key that might not exist can lead to KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      944,
      13557,
      18558,
      38409,
      11,
      399,
      7287,
      23002,
      38409,
      8
    ],
    "start_token": 398,
    "end_token": 419,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      351,
      257,
      1994,
      326,
      1244,
      407,
      2152,
      460,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary with a key that might not exist can lead to KeyError."
  },
  {
    "line": 85,
    "text": "        self.report_dict: dict = {}",
    "annotation": "\u2705 Best Practice: Use of @property decorator for creating a read-only property.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      13116,
      62,
      11600,
      25,
      8633,
      796,
      23884
    ],
    "start_token": 419,
    "end_token": 435,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      4441,
      257,
      1100,
      12,
      8807,
      3119,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for creating a read-only property."
  },
  {
    "line": 83,
    "text": "        assert isinstance(self._executor, NestedExecutor)",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      944,
      13557,
      18558,
      38409,
      11,
      399,
      7287,
      23002,
      38409,
      8
    ],
    "start_token": 435,
    "end_token": 456,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 85,
    "text": "        self.report_dict: dict = {}",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern with adapter design pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      13116,
      62,
      11600,
      25,
      8633,
      796,
      23884
    ],
    "start_token": 456,
    "end_token": 472,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      351,
      21302,
      1486,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern with adapter design pattern"
  },
  {
    "line": 87,
    "text": "        self._collect_data_loop = collect_data_loop(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements can be disabled in production, leading to potential issues if _collect_data_loop is None.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      33327,
      62,
      7890,
      62,
      26268,
      796,
      2824,
      62,
      7890,
      62,
      26268,
      7
    ],
    "start_token": 472,
    "end_token": 493,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      460,
      307,
      10058,
      287,
      3227,
      11,
      3756,
      284,
      2785,
      2428,
      611,
      4808,
      33327,
      62,
      7890,
      62,
      26268,
      318,
      6045,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements can be disabled in production, leading to potential issues if _collect_data_loop is None."
  },
  {
    "line": 89,
    "text": "            end_time=order.date,",
    "annotation": "\ud83e\udde0 ML Signal: Use of generator pattern with next() and send() indicates advanced control flow.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      28,
      2875,
      13,
      4475,
      11
    ],
    "start_token": 493,
    "end_token": 512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      17301,
      3912,
      351,
      1306,
      3419,
      290,
      3758,
      3419,
      9217,
      6190,
      1630,
      5202,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of generator pattern with next() and send() indicates advanced control flow."
  },
  {
    "line": 92,
    "text": "            return_value=self.report_dict,",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list based on type check indicates dynamic data collection.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      62,
      8367,
      28,
      944,
      13,
      13116,
      62,
      11600,
      11
    ],
    "start_token": 512,
    "end_token": 533,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      1912,
      319,
      2099,
      2198,
      9217,
      8925,
      1366,
      4947,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to a list based on type check indicates dynamic data collection."
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Repeated use of generator pattern with next() and send().",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 533,
    "end_token": 533,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      779,
      286,
      17301,
      3912,
      351,
      1306,
      3419,
      290,
      3758,
      22446
    ],
    "label": "ml_signal",
    "reason": "Repeated use of generator pattern with next() and send()."
  },
  {
    "line": 96,
    "text": "        self.step(action=None)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements can be disabled in production, leading to potential issues if obj is not SAOEStrategy.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9662,
      7,
      2673,
      28,
      14202,
      8
    ],
    "start_token": 533,
    "end_token": 548,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      460,
      307,
      10058,
      287,
      3227,
      11,
      3756,
      284,
      2785,
      2428,
      611,
      26181,
      318,
      407,
      14719,
      27799,
      13290,
      4338,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements can be disabled in production, leading to potential issues if obj is not SAOEStrategy."
  },
  {
    "line": 102,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 548,
    "end_token": 548,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      779,
      286,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      351,
      23392,
      9706,
      13841,
      46,
      828,
      6196,
      17286,
      278,
      428,
      2198,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check."
  },
  {
    "line": 104,
    "text": "    def twap_price(self) -> float:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of try-except block to handle StopIteration exception.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      665,
      499,
      62,
      20888,
      7,
      944,
      8,
      4613,
      12178,
      25
    ],
    "start_token": 548,
    "end_token": 562,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1949,
      12,
      16341,
      2512,
      284,
      5412,
      13707,
      29993,
      341,
      6631,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of try-except block to handle StopIteration exception."
  },
  {
    "line": 109,
    "text": "        assert self._collect_data_loop is not None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      2116,
      13557,
      33327,
      62,
      7890,
      62,
      26268,
      318,
      407,
      6045
    ],
    "start_token": 562,
    "end_token": 580,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      779,
      286,
      6818,
      329,
      1630,
      5202,
      460,
      307,
      10058,
      351,
      23392,
      9706,
      13841,
      46,
      828,
      6196,
      17286,
      278,
      428,
      2198,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check."
  },
  {
    "line": 108,
    "text": "        \"\"\"Iterate the _collect_data_loop until we get the next yield SAOEStrategy.\"\"\"",
    "annotation": "\u2705 Best Practice: Type hinting for the return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      29993,
      378,
      262,
      4808,
      33327,
      62,
      7890,
      62,
      26268,
      1566,
      356,
      651,
      262,
      1306,
      7800,
      14719,
      27799,
      13290,
      4338,
      526,
      15931
    ],
    "start_token": 580,
    "end_token": 609,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      262,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for the return value improves code readability and maintainability"
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining pattern with _get_adapter() and saoe_state",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 609,
    "end_token": 609,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      3912,
      351,
      4808,
      1136,
      62,
      324,
      3429,
      3419,
      290,
      473,
      2577,
      62,
      5219
    ],
    "label": "ml_signal",
    "reason": "Method chaining pattern with _get_adapter() and saoe_state"
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 609,
    "end_token": 609,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 111,
    "text": "        obj = next(self._collect_data_loop) if action is None else self._collect_data_loop.send(action)",
    "annotation": "\ud83e\udde0 ML Signal: Method delegation to another object's method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      26181,
      796,
      1306,
      7,
      944,
      13557,
      33327,
      62,
      7890,
      62,
      26268,
      8,
      611,
      2223,
      318,
      6045,
      2073,
      2116,
      13557,
      33327,
      62,
      7890,
      62,
      26268,
      13,
      21280,
      7,
      2673,
      8
    ],
    "start_token": 609,
    "end_token": 645,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22635,
      284,
      1194,
      2134,
      338,
      2446
    ],
    "label": "ml_signal",
    "reason": "Method delegation to another object's method"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,10,best_practice,6,Grouping imports from the same package together improves readability.,,0,"from typing import Any, cast, List, Optional","[6738, 19720, 1330, 4377, 11, 3350, 11, 7343, 11, 32233]"
‚úÖ Best Practice: Relative imports can make the code more modular and easier to refactor.,"[26486, 227, 6705, 19939, 25, 45344, 17944, 460, 787, 262, 2438, 517, 26507, 290, 4577, 284, 1006, 11218, 13]",0.5,27,best_practice,14,Relative imports can make the code more modular and easier to refactor.,,10,from qlib.rl.data.base import BaseIntradayBacktestData,"[6738, 10662, 8019, 13, 45895, 13, 7890, 13, 8692, 1330, 7308, 5317, 6335, 323, 7282, 9288, 6601]"
‚úÖ Best Practice: Using __all__ to define public API of the module.,"[26486, 227, 6705, 19939, 25, 8554, 11593, 439, 834, 284, 8160, 1171, 7824, 286, 262, 8265, 13]",1.0,53,best_practice,16,Using __all__ to define public API of the module.,,27,from qlib.rl.data.pickle_styled import load_simple_intraday_backtest_data,"[6738, 10662, 8019, 13, 45895, 13, 7890, 13, 27729, 293, 62, 34365, 992, 1330, 3440, 62, 36439, 62, 600, 6335, 323, 62, 1891, 9288, 62, 7890]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,67,best_practice,42,Use of type annotations for class attributes improves code readability and maintainability.,,53,        Path to load backtest data.,"[220, 220, 220, 220, 220, 220, 220, 10644, 284, 3440, 736, 9288, 1366, 13]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,74,best_practice,47,Use of type annotations for class attributes improves code readability and maintainability.,,67,    data_granularity,"[220, 220, 220, 1366, 62, 46324, 33737]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,92,best_practice,52,Use of type annotations for class attributes improves code readability and maintainability.,,74,        Maximum execution volume (divided by market execution volume).,"[220, 220, 220, 220, 220, 220, 220, 22246, 9706, 6115, 357, 7146, 1384, 416, 1910, 9706, 6115, 737]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,104,best_practice,55,Use of type annotations for class attributes improves code readability and maintainability.,,92,    history_exec: pd.DataFrame,"[220, 220, 220, 2106, 62, 18558, 25, 279, 67, 13, 6601, 19778]"
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,104,best_practice,59,Use of type annotations for class attributes improves code readability and maintainability.,,104,,[]
‚úÖ Best Practice: Use of type annotations for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,104,best_practice,59,Use of type annotations for class attributes improves code readability and maintainability.,,104,,[]
‚úÖ Best Practice: Call to superclass constructor ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 23772, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,117,best_practice,69,Call to superclass constructor ensures proper initialization of the base class.,,104,"    """"""This price is used to compute price advantage.","[220, 220, 220, 37227, 1212, 2756, 318, 973, 284, 24061, 2756, 4621, 13]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 13]",1.0,117,sast_risk,71,Use of assert for runtime checks can be disabled with optimization flags.,Low,117,,[]
üß† ML Signal: Use of feature columns indicates feature engineering for ML models.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3895, 15180, 9217, 3895, 8705, 329, 10373, 4981, 13]",0.5,132,ml_signal,75,Use of feature columns indicates feature engineering for ML models.,,117,    ticks_for_order: pd.DatetimeIndex,"[220, 220, 220, 36066, 62, 1640, 62, 2875, 25, 279, 67, 13, 27354, 8079, 15732]"
üß† ML Signal: Use of feature columns indicates feature engineering for ML models.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3895, 15180, 9217, 3895, 8705, 329, 10373, 4981, 13]",0.5,132,ml_signal,77,Use of feature columns indicates feature engineering for ML models.,,132,,[]
üß† ML Signal: Loading backtest data suggests simulation or model evaluation.,"[8582, 100, 254, 10373, 26484, 25, 12320, 736, 9288, 1366, 5644, 18640, 393, 2746, 12660, 13]",0.5,145,ml_signal,81,Loading backtest data suggests simulation or model evaluation.,,132,"        data_dir: Path,","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 15908, 25, 10644, 11]"
üß† ML Signal: Calculation of average price could be used as a feature or target in ML models.,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2811, 2756, 714, 307, 973, 355, 257, 3895, 393, 2496, 287, 10373, 4981, 13]",0.5,152,ml_signal,87,Calculation of average price could be used as a feature or target in ML models.,,145,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
üß† ML Signal: Use of metric keys suggests tracking or evaluation of model performance.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 18663, 8251, 5644, 9646, 393, 12660, 286, 2746, 2854, 13]",0.5,172,ml_signal,90,Use of metric keys suggests tracking or evaluation of model performance.,,152,        assert ticks_per_step % data_granularity == 0,"[220, 220, 220, 220, 220, 220, 220, 6818, 36066, 62, 525, 62, 9662, 4064, 1366, 62, 46324, 33737, 6624, 657]"
‚úÖ Best Practice: Use of pandas DataFrame for structured data storage and manipulation.,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 6060, 19778, 329, 20793, 1366, 6143, 290, 17512, 13]",0.5,184,best_practice,92,Use of pandas DataFrame for structured data storage and manipulation.,,172,        self.order = order,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 796, 1502]"
‚úÖ Best Practice: Use of pandas DataFrame for structured data storage and manipulation.,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 6060, 19778, 329, 20793, 1366, 6143, 290, 17512, 13]",0.5,200,best_practice,93,Use of pandas DataFrame for structured data storage and manipulation.,,184,        self.data_dir = data_dir,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 62, 15908, 796, 1366, 62, 15908]"
üß† ML Signal: Usage of a data loading function with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1366, 11046, 2163, 351, 2176, 10007]",1.0,214,ml_signal,102,Usage of a data loading function with specific parameters,,200,        # Get time index available for trading,"[220, 220, 220, 220, 220, 220, 220, 1303, 3497, 640, 6376, 1695, 329, 7313]"
‚ö†Ô∏è SAST Risk (Low): Broad exception handling may hide other issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9765, 6631, 9041, 743, 7808, 584, 2428]",1.0,214,sast_risk,104,Broad exception handling may hide other issues,Low,214,,[]
‚úÖ Best Practice: Consider logging the exception for better traceability,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 6631, 329, 1365, 12854, 1799]",0.5,214,best_practice,104,Consider logging the exception for better traceability,,214,,[]
‚ö†Ô∏è SAST Risk (Low): Use of assert statements for runtime checks can be disabled with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 13]",1.0,214,sast_risk,118,Use of assert statements for runtime checks can be disabled with optimization flags.,Low,214,,[]
üß† ML Signal: Splitting execution volume could indicate a strategy pattern.,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 9706, 6115, 714, 7603, 257, 4811, 3912, 13]",1.0,238,ml_signal,121,Splitting execution volume could indicate a strategy pattern.,,214,        self.market_vol_limit: Optional[np.ndarray] = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 10728, 62, 10396, 62, 32374, 25, 32233, 58, 37659, 13, 358, 18747, 60, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Use of assert statements for runtime checks can be disabled with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 13]",1.0,260,sast_risk,123,Use of assert statements for runtime checks can be disabled with optimization flags.,Low,238,    def get_backtest_data(self) -> BaseIntradayBacktestData:,"[220, 220, 220, 825, 651, 62, 1891, 9288, 62, 7890, 7, 944, 8, 4613, 7308, 5317, 6335, 323, 7282, 9288, 6601, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of assert statements for runtime checks can be disabled with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 13]",1.0,286,sast_risk,125,Use of assert statements for runtime checks can be disabled with optimization flags.,Low,260,            data = load_handler_intraday_processed_data(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 3440, 62, 30281, 62, 600, 6335, 323, 62, 14681, 276, 62, 7890, 7]"
üß† ML Signal: Tracking position changes could indicate trading behavior.,"[8582, 100, 254, 10373, 26484, 25, 37169, 2292, 2458, 714, 7603, 7313, 4069, 13]",1.0,313,ml_signal,127,Tracking position changes could indicate trading behavior.,,286,"                stock_id=self.order.stock_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 28, 944, 13, 2875, 13, 13578, 62, 312, 11]"
‚úÖ Best Practice: Use a constant for small value comparisons to improve readability.,"[26486, 227, 6705, 19939, 25, 5765, 257, 6937, 329, 1402, 1988, 17909, 284, 2987, 1100, 1799, 13]",1.0,346,best_practice,130,Use a constant for small value comparisons to improve readability.,,313,"                feature_columns_yesterday=self.feature_columns_yesterday,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3895, 62, 28665, 82, 62, 8505, 6432, 28, 944, 13, 30053, 62, 28665, 82, 62, 8505, 6432, 11]"
"‚ö†Ô∏è SAST Risk (Medium): Potential for negative execution volumes, which may be unintended.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 4633, 9706, 15343, 11, 543, 743, 307, 30261, 13]",1.0,379,sast_risk,130,"Potential for negative execution volumes, which may be unintended.",Medium,346,"                feature_columns_yesterday=self.feature_columns_yesterday,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3895, 62, 28665, 82, 62, 8505, 6432, 28, 944, 13, 30053, 62, 28665, 82, 62, 8505, 6432, 11]"
üß† ML Signal: Appending to history could indicate a pattern of tracking past actions.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 2106, 714, 7603, 257, 3912, 286, 9646, 1613, 4028, 13]",0.5,412,ml_signal,130,Appending to history could indicate a pattern of tracking past actions.,,379,"                feature_columns_yesterday=self.feature_columns_yesterday,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3895, 62, 28665, 82, 62, 8505, 6432, 28, 944, 13, 30053, 62, 28665, 82, 62, 8505, 6432, 11]"
üß† ML Signal: Collecting metrics could indicate a pattern of performance evaluation.,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 20731, 714, 7603, 257, 3912, 286, 2854, 12660, 13]",0.5,425,ml_signal,156,Collecting metrics could indicate a pattern of performance evaluation.,,412,        assert not self.done(),"[220, 220, 220, 220, 220, 220, 220, 6818, 407, 2116, 13, 28060, 3419]"
üß† ML Signal: Checking for completion could indicate a pattern of iterative processes.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 11939, 714, 7603, 257, 3912, 286, 11629, 876, 7767, 13]",0.5,450,ml_signal,163,Checking for completion could indicate a pattern of iterative processes.,,425,        ticks_position = self.position - np.cumsum(exec_vol),"[220, 220, 220, 220, 220, 220, 220, 36066, 62, 9150, 796, 2116, 13, 9150, 532, 45941, 13, 66, 5700, 388, 7, 18558, 62, 10396, 8]"
üß† ML Signal: Logging history could indicate a pattern of tracking and analysis.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 2106, 714, 7603, 257, 3912, 286, 9646, 290, 3781, 13]",0.5,450,ml_signal,164,Logging history could indicate a pattern of tracking and analysis.,,450,,[]
üß† ML Signal: Logging metrics could indicate a pattern of performance tracking.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 20731, 714, 7603, 257, 3912, 286, 2854, 9646, 13]",1.0,482,ml_signal,172,Logging metrics could indicate a pattern of performance tracking.,,450,"        time_index = self._get_ticks_slice(self.cur_time, self._next_time())","[220, 220, 220, 220, 220, 220, 220, 640, 62, 9630, 796, 2116, 13557, 1136, 62, 83, 3378, 62, 48369, 7, 944, 13, 22019, 62, 2435, 11, 2116, 13557, 19545, 62, 2435, 28955]"
"üß† ML Signal: Method returning an object with multiple attributes, indicating a complex state representation","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 281, 2134, 351, 3294, 12608, 11, 12739, 257, 3716, 1181, 10552]",0.5,497,ml_signal,171,"Method returning an object with multiple attributes, indicating a complex state representation",,482,        # Get time index available for this step,"[220, 220, 220, 220, 220, 220, 220, 1303, 3497, 640, 6376, 1695, 329, 428, 2239]"
"üß† ML Signal: Returning an instance of a class, which may be used for state management or serialization","[8582, 100, 254, 10373, 26484, 25, 42882, 281, 4554, 286, 257, 1398, 11, 543, 743, 307, 973, 329, 1181, 4542, 393, 11389, 1634]",0.5,529,ml_signal,172,"Returning an instance of a class, which may be used for state management or serialization",,497,"        time_index = self._get_ticks_slice(self.cur_time, self._next_time())","[220, 220, 220, 220, 220, 220, 220, 640, 62, 9630, 796, 2116, 13557, 1136, 62, 83, 3378, 62, 48369, 7, 944, 13, 22019, 62, 2435, 11, 2116, 13557, 19545, 62, 2435, 28955]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,561,ml_signal,172,Usage of self attributes to construct a state object,,529,"        time_index = self._get_ticks_slice(self.cur_time, self._next_time())","[220, 220, 220, 220, 220, 220, 220, 640, 62, 9630, 796, 2116, 13557, 1136, 62, 83, 3378, 62, 48369, 7, 944, 13, 22019, 62, 2435, 11, 2116, 13557, 19545, 62, 2435, 28955]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,593,ml_signal,172,Usage of self attributes to construct a state object,,561,"        time_index = self._get_ticks_slice(self.cur_time, self._next_time())","[220, 220, 220, 220, 220, 220, 220, 640, 62, 9630, 796, 2116, 13557, 1136, 62, 83, 3378, 62, 48369, 7, 944, 13, 22019, 62, 2435, 11, 2116, 13557, 19545, 62, 2435, 28955]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,624,ml_signal,179,Usage of self attributes to construct a state object,,593,"                # Some values could be vectorized (e.g., exec_vol).","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2773, 3815, 714, 307, 15879, 1143, 357, 68, 13, 70, 1539, 2452, 62, 10396, 737]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,646,ml_signal,181,Usage of self attributes to construct a state object,,624,"                datetime=time_index,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4818, 8079, 28, 2435, 62, 9630, 11]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,671,ml_signal,183,Usage of self attributes to construct a state object,,646,"                market_volume=self.market_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1910, 62, 29048, 28, 944, 13, 10728, 62, 10396, 11]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,692,ml_signal,185,Usage of self attributes to construct a state object,,671,"                amount=exec_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2033, 28, 18558, 62, 10396, 11]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,715,ml_signal,187,Usage of self attributes to construct a state object,,692,"                deal_amount=exec_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1730, 62, 17287, 28, 18558, 62, 10396, 11]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,744,ml_signal,189,Usage of self attributes to construct a state object,,715,"                trade_value=self.market_price * exec_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 8367, 28, 944, 13, 10728, 62, 20888, 1635, 2452, 62, 10396, 11]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,772,ml_signal,191,Usage of self attributes to construct a state object,,744,"                ffr=exec_vol / self.order.amount,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 8310, 28, 18558, 62, 10396, 1220, 2116, 13, 2875, 13, 17287, 11]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,784,ml_signal,193,Usage of self attributes to construct a state object,,772,"            ),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10612]"
üß† ML Signal: Usage of self attributes to construct a state object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 284, 5678, 257, 1181, 2134]",1.0,784,ml_signal,195,Usage of self attributes to construct a state object,,784,,[]
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,805,best_practice,185,Type hinting for the return value improves code readability and maintainability,,784,"                amount=exec_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2033, 28, 18558, 62, 10396, 11]"
üß† ML Signal: Usage of comparison operators to determine a boolean condition,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7208, 12879, 284, 5004, 257, 25131, 4006]",1.0,828,ml_signal,187,Usage of comparison operators to determine a boolean condition,,805,"                deal_amount=exec_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1730, 62, 17287, 28, 18558, 62, 10396, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if EPS is not defined or is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 47013, 318, 407, 5447, 393, 318, 2836, 12, 14401]",0.5,853,sast_risk,188,Potential risk if EPS is not defined or is user-controlled,Low,828,"                trade_price=self.market_price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 20888, 28, 944, 13, 10728, 62, 20888, 11]"
üß† ML Signal: Usage of pandas index location to determine the next time step,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6376, 4067, 284, 5004, 262, 1306, 640, 2239]",0.5,882,ml_signal,189,Usage of pandas index location to determine the next time step,,853,"                trade_value=self.market_price * exec_vol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3292, 62, 8367, 28, 944, 13, 10728, 62, 20888, 1635, 2452, 62, 10396, 11]"
üß† ML Signal: Incrementing index location by a fixed step size,"[8582, 100, 254, 10373, 26484, 25, 10791, 434, 278, 6376, 4067, 416, 257, 5969, 2239, 2546]",0.5,910,ml_signal,191,Incrementing index location by a fixed step size,,882,"                ffr=exec_vol / self.order.amount,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 8310, 28, 18558, 62, 10396, 1220, 2116, 13, 2875, 13, 17287, 11]"
‚úÖ Best Practice: Aligning next_loc to the nearest step boundary,"[26486, 227, 6705, 19939, 25, 978, 38944, 1306, 62, 17946, 284, 262, 16936, 2239, 18645]",0.5,922,best_practice,193,Aligning next_loc to the nearest step boundary,,910,"            ),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10612]"
‚ö†Ô∏è SAST Risk (Low): Potential index out of bounds if next_loc is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6376, 503, 286, 22303, 611, 1306, 62, 17946, 318, 407, 31031]",1.0,922,sast_risk,195,Potential index out of bounds if next_loc is not validated,Low,922,,[]
‚úÖ Best Practice: Include type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",1.0,942,best_practice,196,Include type hints for better code readability and maintainability,,922,        self.history_steps = self._dataframe_append(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23569, 62, 20214, 796, 2116, 13557, 7890, 14535, 62, 33295, 7]"
üß† ML Signal: Use of subtraction operation on datetime objects,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 13284, 7861, 4905, 319, 4818, 8079, 5563]",0.5,950,ml_signal,199,Use of subtraction operation on datetime objects,,942,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of time-based volume splitting strategy (TWAP) for trading,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 12, 3106, 6115, 26021, 4811, 357, 34551, 2969, 8, 329, 7313]",0.5,995,ml_signal,204,Usage of time-based volume splitting strategy (TWAP) for trading,,950,"                self.env.logger.add_any(""history_exec"", self.history_exec, loglevel=LogLevel.DEBUG)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 24330, 13, 6404, 1362, 13, 2860, 62, 1092, 7203, 23569, 62, 18558, 1600, 2116, 13, 23569, 62, 18558, 11, 300, 2467, 626, 28, 11187, 4971, 13, 30531, 8]"
üß† ML Signal: Accessing historical market volume data for decision making,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6754, 1910, 6115, 1366, 329, 2551, 1642]",1.0,1018,ml_signal,206,Accessing historical market volume data for decision making,,995,            self.metrics = self._metrics_collect(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 4164, 10466, 796, 2116, 13557, 4164, 10466, 62, 33327, 7]"
üß† ML Signal: Accessing historical market price data for decision making,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6754, 1910, 2756, 1366, 329, 2551, 1642]",1.0,1043,ml_signal,208,Accessing historical market price data for decision making,,1018,"                self.history_exec[""market_volume""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 23569, 62, 18558, 14692, 10728, 62, 29048, 33116]"
"‚ö†Ô∏è SAST Risk (Low): Assert statements can be disabled in production, leading to potential issues","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 6299, 460, 307, 10058, 287, 3227, 11, 3756, 284, 2785, 2428]",0.5,1069,sast_risk,210,"Assert statements can be disabled in production, leading to potential issues",Low,1043,"                self.history_steps[""amount""].sum(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 23569, 62, 20214, 14692, 17287, 1, 4083, 16345, 22784]"
üß† ML Signal: Repeating execution volume based on market price length,"[8582, 100, 254, 10373, 26484, 25, 30558, 803, 9706, 6115, 1912, 319, 1910, 2756, 4129]",1.0,1081,ml_signal,212,Repeating execution volume based on market price length,,1069,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Applying volume threshold constraints to execution volume,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 6115, 11387, 17778, 284, 9706, 6115]",1.0,1111,ml_signal,214,Applying volume threshold constraints to execution volume,,1081,"            # NOTE (yuge): It looks to me that it's the ""correct"" decision to","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24550, 357, 88, 2217, 2599, 632, 3073, 284, 502, 326, 340, 338, 262, 366, 30283, 1, 2551, 284]"
üß† ML Signal: Adjusting execution volume based on market volume limits,"[8582, 100, 254, 10373, 26484, 25, 20292, 278, 9706, 6115, 1912, 319, 1910, 6115, 7095]",1.0,1136,ml_signal,215,Adjusting execution volume based on market volume limits,,1111,"            # put all the logs here, because only components like simulators themselves","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1234, 477, 262, 17259, 994, 11, 780, 691, 6805, 588, 985, 24325, 2405]"
‚úÖ Best Practice: Handling edge case when next_time exceeds order end time,"[26486, 227, 6705, 19939, 25, 49500, 5743, 1339, 618, 1306, 62, 2435, 21695, 1502, 886, 640]",0.5,1161,best_practice,215,Handling edge case when next_time exceeds order end time,,1136,"            # put all the logs here, because only components like simulators themselves","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1234, 477, 262, 17259, 994, 11, 780, 691, 6805, 588, 985, 24325, 2405]"
üß† ML Signal: Adjusting final execution volume to match position,"[8582, 100, 254, 10373, 26484, 25, 20292, 278, 2457, 9706, 6115, 284, 2872, 2292]",0.5,1161,ml_signal,220,Adjusting final execution volume to match position,,1161,,[]
üß† ML Signal: Reapplying volume constraints after adjustment,"[8582, 100, 254, 10373, 26484, 25, 797, 1324, 3157, 6115, 17778, 706, 15068]",1.0,1188,ml_signal,223,Reapplying volume constraints after adjustment,,1161,"                    if isinstance(value, float):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 8367, 11, 12178, 2599]"
üß† ML Signal: Returning the calculated execution volumes,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 10488, 9706, 15343]",0.5,1228,ml_signal,224,Returning the calculated execution volumes,,1188,"                        self.env.logger.add_scalar(key, value)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 24330, 13, 6404, 1362, 13, 2860, 62, 1416, 282, 283, 7, 2539, 11, 1988, 8]"
‚úÖ Best Practice: Use of assert to ensure input arrays have the same length,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 284, 4155, 5128, 26515, 423, 262, 976, 4129]",1.0,1255,best_practice,223,Use of assert to ensure input arrays have the same length,,1228,"                    if isinstance(value, float):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 8367, 11, 12178, 2599]"
‚úÖ Best Practice: Use of EPS to handle floating-point precision issues,"[26486, 227, 6705, 19939, 25, 5765, 286, 47013, 284, 5412, 12462, 12, 4122, 15440, 2428]",0.5,1276,best_practice,225,Use of EPS to handle floating-point precision issues,,1255,                    else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of numpy average with weights for calculating weighted average,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 2811, 351, 19590, 329, 26019, 26356, 2811]",1.0,1290,best_practice,229,Use of numpy average with weights for calculating weighted average,,1276,        self.cur_step += 1,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22019, 62, 9662, 15853, 352]"
‚úÖ Best Practice: Check if exec_avg_price has 'item' method to convert numpy scalar to Python float,"[26486, 227, 6705, 19939, 25, 6822, 611, 2452, 62, 615, 70, 62, 20888, 468, 705, 9186, 6, 2446, 284, 10385, 299, 32152, 16578, 283, 284, 11361, 12178]",1.0,1290,best_practice,230,Check if exec_avg_price has 'item' method to convert numpy scalar to Python float,,1290,,[]
üß† ML Signal: Use of self.order attributes indicates a pattern of accessing order-related data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 2875, 12608, 9217, 257, 3912, 286, 22534, 1502, 12, 5363, 1366]",1.0,1290,ml_signal,230,Use of self.order attributes indicates a pattern of accessing order-related data,,1290,,[]
üß† ML Signal: Use of self.order attributes indicates a pattern of accessing order-related data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 2875, 12608, 9217, 257, 3912, 286, 22534, 1502, 12, 5363, 1366]",1.0,1290,ml_signal,245,Use of self.order attributes indicates a pattern of accessing order-related data,,1290,,[]
‚úÖ Best Practice: Use of numpy sum for efficient array summation,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 2160, 329, 6942, 7177, 30114, 341]",1.0,1290,best_practice,245,Use of numpy sum for efficient array summation,,1290,,[]
‚úÖ Best Practice: Use of numpy mean for efficient array averaging,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 1612, 329, 6942, 7177, 20430]",1.0,1290,best_practice,245,Use of numpy mean for efficient array averaging,,1290,,[]
‚úÖ Best Practice: Use of numpy sum for efficient array summation,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 2160, 329, 6942, 7177, 30114, 341]",1.0,1290,best_practice,245,Use of numpy sum for efficient array summation,,1290,,[]
‚úÖ Best Practice: Use of numpy sum for efficient array summation,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 2160, 329, 6942, 7177, 30114, 341]",1.0,1317,best_practice,247,Use of numpy sum for efficient array summation,,1290,        return self.position < EPS or self.cur_time >= self.order.end_time,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9150, 1279, 47013, 393, 2116, 13, 22019, 62, 2435, 18189, 2116, 13, 2875, 13, 437, 62, 2435]"
‚úÖ Best Practice: Use of numpy sum and element-wise multiplication for efficient computation,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 2160, 290, 5002, 12, 3083, 48473, 329, 6942, 29964]",1.0,1342,best_practice,250,Use of numpy sum and element-wise multiplication for efficient computation,,1317,"        """"""The ""current time"" (``cur_time``) for next step.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 366, 14421, 640, 1, 357, 15506, 22019, 62, 2435, 15506, 8, 329, 1306, 2239, 526, 15931]"
üß† ML Signal: Use of self.position indicates a pattern of accessing position-related data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 9150, 9217, 257, 3912, 286, 22534, 2292, 12, 5363, 1366]",1.0,1370,ml_signal,252,Use of self.position indicates a pattern of accessing position-related data,,1342,        current_loc = self.ticks_index.get_loc(self.cur_time),"[220, 220, 220, 220, 220, 220, 220, 1459, 62, 17946, 796, 2116, 13, 83, 3378, 62, 9630, 13, 1136, 62, 17946, 7, 944, 13, 22019, 62, 2435, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if self.order.amount is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2116, 13, 2875, 13, 17287, 318, 6632]",1.0,1370,sast_risk,254,Potential division by zero if self.order.amount is zero,Low,1370,,[]
üß† ML Signal: Use of price_advantage function indicates a pattern of calculating price advantage,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2756, 62, 13461, 496, 2163, 9217, 257, 3912, 286, 26019, 2756, 4621]",0.5,1370,ml_signal,254,Use of price_advantage function indicates a pattern of calculating price advantage,,1370,,[]
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1381,best_practice,246,Use of type hints for function parameters and return type improves code readability and maintainability.,,1370,    def done(self) -> bool:,"[220, 220, 220, 825, 1760, 7, 944, 8, 4613, 20512, 25]"
"‚ö†Ô∏è SAST Risk (Low): Potential issue if EPS_T is not defined or not a valid timedelta, which could lead to runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 47013, 62, 51, 318, 407, 5447, 393, 407, 257, 4938, 28805, 12514, 11, 543, 714, 1085, 284, 19124, 8563, 13]",0.5,1381,sast_risk,248,"Potential issue if EPS_T is not defined or not a valid timedelta, which could lead to runtime errors.",Low,1381,,[]
üß† ML Signal: Usage of pandas' slice_indexer method indicates a pattern of working with time series data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6, 16416, 62, 9630, 263, 2446, 9217, 257, 3912, 286, 1762, 351, 640, 2168, 1366, 13]",0.5,1396,ml_signal,251,Usage of pandas' slice_indexer method indicates a pattern of working with time series data.,,1381,        # Look for next time on time index,"[220, 220, 220, 220, 220, 220, 220, 1303, 6803, 329, 1306, 640, 319, 640, 6376]"
"‚úÖ Best Practice: Use of @staticmethod decorator indicates that the method does not modify class state, improving code clarity.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 12708, 24396, 11705, 1352, 9217, 326, 262, 2446, 857, 407, 13096, 1398, 1181, 11, 10068, 2438, 16287, 13]",0.5,1419,best_practice,253,"Use of @staticmethod decorator indicates that the method does not modify class state, improving code clarity.",,1396,        next_loc = current_loc + self.ticks_per_step,"[220, 220, 220, 220, 220, 220, 220, 1306, 62, 17946, 796, 1459, 62, 17946, 1343, 2116, 13, 83, 3378, 62, 525, 62, 9662]"
‚úÖ Best Practice: Type hint for 'df' parameter improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 705, 7568, 6, 11507, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1444,best_practice,250,Type hint for 'df' parameter improves code readability and maintainability,,1419,"        """"""The ""current time"" (``cur_time``) for next step.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 366, 14421, 640, 1, 357, 15506, 22019, 62, 2435, 15506, 8, 329, 1306, 2239, 526, 15931]"
‚úÖ Best Practice: Type hint for 'other' parameter improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 705, 847, 6, 11507, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1459,best_practice,251,Type hint for 'other' parameter improves code readability and maintainability,,1444,        # Look for next time on time index,"[220, 220, 220, 220, 220, 220, 220, 1303, 6803, 329, 1306, 640, 319, 640, 6376]"
üß† ML Signal: Conversion of 'other' to DataFrame indicates dynamic data handling,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 705, 847, 6, 284, 6060, 19778, 9217, 8925, 1366, 9041]",1.0,1482,ml_signal,253,Conversion of 'other' to DataFrame indicates dynamic data handling,,1459,        next_loc = current_loc + self.ticks_per_step,"[220, 220, 220, 220, 220, 220, 220, 1306, 62, 17946, 796, 1459, 62, 17946, 1343, 2116, 13, 83, 3378, 62, 525, 62, 9662]"
‚úÖ Best Practice: Explicitly setting index name improves code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6376, 1438, 19575, 2438, 16287]",1.0,1482,best_practice,254,Explicitly setting index name improves code clarity,,1482,,[]
üß† ML Signal: Use of pd.concat suggests data aggregation pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 279, 67, 13, 1102, 9246, 5644, 1366, 46500, 3912]",0.5,1513,ml_signal,257,Use of pd.concat suggests data aggregation pattern,,1482,"        # as long as ticks_per_step is a multiple of something, each step won't cross morning and afternoon.","[220, 220, 220, 220, 220, 220, 220, 1303, 355, 890, 355, 36066, 62, 525, 62, 9662, 318, 257, 3294, 286, 1223, 11, 1123, 2239, 1839, 470, 3272, 3329, 290, 6672, 13]"
"‚ö†Ô∏è SAST Risk (Medium): Division by zero check, but returning zero might not be appropriate for all contexts.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7458, 416, 6632, 2198, 11, 475, 8024, 6632, 1244, 407, 307, 5035, 329, 477, 26307, 13]",1.0,1555,sast_risk,260,"Division by zero check, but returning zero might not be appropriate for all contexts.",Medium,1513,        if next_loc < len(self.ticks_index) and self.ticks_index[next_loc] < self.order.end_time:,"[220, 220, 220, 220, 220, 220, 220, 611, 1306, 62, 17946, 1279, 18896, 7, 944, 13, 83, 3378, 62, 9630, 8, 290, 2116, 13, 83, 3378, 62, 9630, 58, 19545, 62, 17946, 60, 1279, 2116, 13, 2875, 13, 437, 62, 2435, 25]"
üß† ML Signal: Pattern of calculating percentage advantage for BUY orders.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26019, 5873, 4621, 329, 20571, 56, 6266, 13]",0.5,1579,ml_signal,266,Pattern of calculating percentage advantage for BUY orders.,,1555,"        """"""The ""duration"" of this step (step that is about to happen).""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 366, 32257, 1, 286, 428, 2239, 357, 9662, 326, 318, 546, 284, 1645, 21387, 15931]"
üß† ML Signal: Pattern of calculating percentage advantage for SELL orders.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26019, 5873, 4621, 329, 7946, 3069, 6266, 13]",0.5,1606,ml_signal,269,Pattern of calculating percentage advantage for SELL orders.,,1579,"    def _split_exec_vol(self, exec_vol_sum: float) -> np.ndarray:","[220, 220, 220, 825, 4808, 35312, 62, 18558, 62, 10396, 7, 944, 11, 2452, 62, 10396, 62, 16345, 25, 12178, 8, 4613, 45941, 13, 358, 18747, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for unhandled order directions leading to exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 1502, 11678, 3756, 284, 13269, 13]",0.5,1619,sast_risk,272,Potential for unhandled order directions leading to exceptions.,Low,1606,        This follows TWAP strategy.,"[220, 220, 220, 220, 220, 220, 220, 770, 5679, 17306, 2969, 4811, 13]"
‚úÖ Best Practice: Use of np.nan_to_num to handle NaN values in calculations.,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 12647, 62, 1462, 62, 22510, 284, 5412, 11013, 45, 3815, 287, 16765, 13]",1.0,1636,best_practice,274,Use of np.nan_to_num to handle NaN values in calculations.,,1619,        next_time = self._next_time(),"[220, 220, 220, 220, 220, 220, 220, 1306, 62, 2435, 796, 2116, 13557, 19545, 62, 2435, 3419]"
‚úÖ Best Practice: Use of item() to convert single-element arrays to scalar.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2378, 3419, 284, 10385, 2060, 12, 30854, 26515, 284, 16578, 283, 13]",0.5,1653,best_practice,274,Use of item() to convert single-element arrays to scalar.,,1636,        next_time = self._next_time(),"[220, 220, 220, 220, 220, 220, 220, 1306, 62, 2435, 796, 2116, 13557, 19545, 62, 2435, 3419]"
‚úÖ Best Practice: Use of cast for type hinting and clarity.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3350, 329, 2099, 9254, 278, 290, 16287, 13]",0.5,1670,best_practice,274,Use of cast for type hinting and clarity.,,1653,        next_time = self._next_time(),"[220, 220, 220, 220, 220, 220, 220, 1306, 62, 2435, 796, 2116, 13557, 19545, 62, 2435, 3419]"

[
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 11,
    "text": "import numpy as np",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 13,
    "text": "import torch",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      11748,
      28034
    ],
    "start_token": 5,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 15,
    "text": "from tianshou.policy import BasePolicy",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      1547,
      15710,
      13,
      30586,
      1330,
      7308,
      36727
    ],
    "start_token": 7,
    "end_token": 16,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 17,
    "text": "from qlib.backtest import CommonInfrastructure, Order",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      1330,
      8070,
      18943,
      6410,
      11,
      8284
    ],
    "start_token": 16,
    "end_token": 28,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 19,
    "text": "from qlib.backtest.exchange import Exchange",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      1069,
      3803,
      1330,
      12516
    ],
    "start_token": 28,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 21,
    "text": "from qlib.backtest.utils import LevelInfrastructure, get_start_end_idx",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      26791,
      1330,
      5684,
      18943,
      6410,
      11,
      651,
      62,
      9688,
      62,
      437,
      62,
      312,
      87
    ],
    "start_token": 39,
    "end_token": 60,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 23,
    "text": "from qlib.rl.data.native import IntradayBacktestData, load_backtest_data",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      7890,
      13,
      30191,
      1330,
      2558,
      6335,
      323,
      7282,
      9288,
      6601,
      11,
      3440,
      62,
      1891,
      9288,
      62,
      7890
    ],
    "start_token": 60,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 25,
    "text": "from qlib.rl.order_execution.state import SAOEMetrics, SAOEState",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      13,
      5219,
      1330,
      14719,
      46,
      3620,
      316,
      10466,
      11,
      14719,
      27799,
      9012
    ],
    "start_token": 83,
    "end_token": 105,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 25,
    "text": "from qlib.rl.order_execution.state import SAOEMetrics, SAOEState",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      13,
      5219,
      1330,
      14719,
      46,
      3620,
      316,
      10466,
      11,
      14719,
      27799,
      9012
    ],
    "start_token": 105,
    "end_token": 127,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 29,
    "text": "from qlib.utils.index_data import IndexData",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      26791,
      13,
      9630,
      62,
      7890,
      1330,
      12901,
      6601
    ],
    "start_token": 127,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 31,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 33,
    "text": "def _get_all_timestamps(",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      439,
      62,
      16514,
      395,
      9430,
      7
    ],
    "start_token": 139,
    "end_token": 149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 35,
    "text": "    end: pd.Timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      886,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 149,
    "end_token": 160,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 37,
    "text": "    include_end: bool = True,",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2291,
      62,
      437,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 160,
    "end_token": 171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 39,
    "text": "    ret = []",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1005,
      796,
      17635
    ],
    "start_token": 171,
    "end_token": 177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 25,
    "text": "from qlib.rl.order_execution.state import SAOEMetrics, SAOEState",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      13,
      5219,
      1330,
      14719,
      46,
      3620,
      316,
      10466,
      11,
      14719,
      27799,
      9012
    ],
    "start_token": 177,
    "end_token": 199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 33,
    "text": "def _get_all_timestamps(",
    "annotation": "\ud83e\udde0 ML Signal: Use of a while loop to iterate over a range of timestamps.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      439,
      62,
      16514,
      395,
      9430,
      7
    ],
    "start_token": 199,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      981,
      9052,
      284,
      11629,
      378,
      625,
      257,
      2837,
      286,
      4628,
      395,
      9430,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a while loop to iterate over a range of timestamps."
  },
  {
    "line": 37,
    "text": "    include_end: bool = True,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if 'ret' is empty; ensure 'ret' is not empty before accessing ret[-1].",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2291,
      62,
      437,
      25,
      20512,
      796,
      6407,
      11
    ],
    "start_token": 209,
    "end_token": 220,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      705,
      1186,
      6,
      318,
      6565,
      26,
      4155,
      705,
      1186,
      6,
      318,
      407,
      6565,
      878,
      22534,
      1005,
      58,
      12,
      16,
      4083
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if 'ret' is empty; ensure 'ret' is not empty before accessing ret[-1]."
  },
  {
    "line": 40,
    "text": "    while start <= end:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if 'ret' is empty; ensure 'ret' is not empty before accessing ret[-1].",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      981,
      923,
      19841,
      886,
      25
    ],
    "start_token": 220,
    "end_token": 228,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      705,
      1186,
      6,
      318,
      6565,
      26,
      4155,
      705,
      1186,
      6,
      318,
      407,
      6565,
      878,
      22534,
      1005,
      58,
      12,
      16,
      4083
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if 'ret' is empty; ensure 'ret' is not empty before accessing ret[-1]."
  },
  {
    "line": 44,
    "text": "    if ret[-1] > end:",
    "annotation": "\u2705 Best Practice: Returning a pd.DatetimeIndex from a list of timestamps for better performance and functionality.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      1005,
      58,
      12,
      16,
      60,
      1875,
      886,
      25
    ],
    "start_token": 228,
    "end_token": 240,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      279,
      67,
      13,
      27354,
      8079,
      15732,
      422,
      257,
      1351,
      286,
      4628,
      395,
      9430,
      329,
      1365,
      2854,
      290,
      11244,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a pd.DatetimeIndex from a list of timestamps for better performance and functionality."
  },
  {
    "line": 40,
    "text": "    while start <= end:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      981,
      923,
      19841,
      886,
      25
    ],
    "start_token": 240,
    "end_token": 248,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 56,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using np.nan_to_num with a dynamic fill value could lead to unexpected results if fill_method is not carefully controlled.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 248,
    "end_token": 248,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      45941,
      13,
      12647,
      62,
      1462,
      62,
      22510,
      351,
      257,
      8925,
      6070,
      1988,
      714,
      1085,
      284,
      10059,
      2482,
      611,
      6070,
      62,
      24396,
      318,
      407,
      7773,
      6856,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using np.nan_to_num with a dynamic fill value could lead to unexpected results if fill_method is not carefully controlled."
  },
  {
    "line": 57,
    "text": "    Parameters",
    "annotation": "\u2705 Best Practice: Using np.nan_to_num to handle NaN values is a common and efficient approach.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 248,
    "end_token": 252,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      45941,
      13,
      12647,
      62,
      1462,
      62,
      22510,
      284,
      5412,
      11013,
      45,
      3815,
      318,
      257,
      2219,
      290,
      6942,
      3164,
      13
    ],
    "label": "best_practice",
    "reason": "Using np.nan_to_num to handle NaN values is a common and efficient approach."
  },
  {
    "line": 67,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Class docstring provides detailed usage pattern and example",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 252,
    "end_token": 256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      2205,
      8841,
      3769,
      6496,
      8748,
      3912,
      290,
      1672
    ],
    "label": "ml_signal",
    "reason": "Class docstring provides detailed usage pattern and example"
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing initial state and parameters for an object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 256,
    "end_token": 256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4238,
      1181,
      290,
      10007,
      329,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Storing initial state and parameters for an object"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing initial state and parameters for an object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 256,
    "end_token": 256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4238,
      1181,
      290,
      10007,
      329,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Storing initial state and parameters for an object"
  },
  {
    "line": 81,
    "text": "        adapter.update(...)",
    "annotation": "\ud83e\udde0 ML Signal: Storing initial state and parameters for an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      21302,
      13,
      19119,
      7,
      23029
    ],
    "start_token": 256,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4238,
      1181,
      290,
      10007,
      329,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Storing initial state and parameters for an object"
  },
  {
    "line": 83,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Storing initial state and parameters for an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 268,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4238,
      1181,
      290,
      10007,
      329,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Storing initial state and parameters for an object"
  },
  {
    "line": 85,
    "text": "    def __init__(",
    "annotation": "\ud83e\udde0 ML Signal: Storing initial state and parameters for an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 272,
    "end_token": 280,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4238,
      1181,
      290,
      10007,
      329,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Storing initial state and parameters for an object"
  },
  {
    "line": 87,
    "text": "        order: Order,",
    "annotation": "\ud83e\udde0 ML Signal: Calculating start index based on trade calendar and decision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      25,
      8284,
      11
    ],
    "start_token": 280,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      923,
      6376,
      1912,
      319,
      3292,
      11845,
      290,
      2551
    ],
    "label": "ml_signal",
    "reason": "Calculating start index based on trade calendar and decision"
  },
  {
    "line": 89,
    "text": "        executor: BaseExecutor,",
    "annotation": "\ud83e\udde0 ML Signal: Calculating mean deal price from backtest data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3121,
      273,
      25,
      7308,
      23002,
      38409,
      11
    ],
    "start_token": 291,
    "end_token": 305,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      1612,
      1730,
      2756,
      422,
      736,
      9288,
      1366
    ],
    "label": "ml_signal",
    "reason": "Calculating mean deal price from backtest data"
  },
  {
    "line": 91,
    "text": "        ticks_per_step: int,",
    "annotation": "\ud83e\udde0 ML Signal: Initializing DataFrame with specific columns for metrics",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      525,
      62,
      9662,
      25,
      493,
      11
    ],
    "start_token": 305,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      6060,
      19778,
      351,
      2176,
      15180,
      329,
      20731
    ],
    "label": "ml_signal",
    "reason": "Initializing DataFrame with specific columns for metrics"
  },
  {
    "line": 93,
    "text": "        data_granularity: int = 1,",
    "annotation": "\ud83e\udde0 ML Signal: Initializing DataFrame for execution history",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737,
      25,
      493,
      796,
      352,
      11
    ],
    "start_token": 320,
    "end_token": 336,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      6060,
      19778,
      329,
      9706,
      2106
    ],
    "label": "ml_signal",
    "reason": "Initializing DataFrame for execution history"
  },
  {
    "line": 95,
    "text": "        self.position = order.amount",
    "annotation": "\ud83e\udde0 ML Signal: Initializing DataFrame for step history",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9150,
      796,
      1502,
      13,
      17287
    ],
    "start_token": 336,
    "end_token": 350,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      6060,
      19778,
      329,
      2239,
      2106
    ],
    "label": "ml_signal",
    "reason": "Initializing DataFrame for step history"
  },
  {
    "line": 96,
    "text": "        self.order = order",
    "annotation": "\ud83e\udde0 ML Signal: Initializing optional metrics attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      796,
      1502
    ],
    "start_token": 350,
    "end_token": 362,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      11902,
      20731,
      11688
    ],
    "label": "ml_signal",
    "reason": "Initializing optional metrics attribute"
  },
  {
    "line": 100,
    "text": "        self.start_idx, _ = get_start_end_idx(self.executor.trade_calendar, trade_decision)",
    "annotation": "\ud83e\udde0 ML Signal: Determining current time based on order and backtest data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      312,
      87,
      11,
      4808,
      796,
      651,
      62,
      9688,
      62,
      437,
      62,
      312,
      87,
      7,
      944,
      13,
      18558,
      38409,
      13,
      25351,
      62,
      9948,
      9239,
      11,
      3292,
      62,
      12501,
      1166,
      8
    ],
    "start_token": 362,
    "end_token": 402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      13221,
      278,
      1459,
      640,
      1912,
      319,
      1502,
      290,
      736,
      9288,
      1366
    ],
    "label": "ml_signal",
    "reason": "Determining current time based on order and backtest data"
  },
  {
    "line": 100,
    "text": "        self.start_idx, _ = get_start_end_idx(self.executor.trade_calendar, trade_decision)",
    "annotation": "\ud83e\udde0 ML Signal: Storing ticks per step parameter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      312,
      87,
      11,
      4808,
      796,
      651,
      62,
      9688,
      62,
      437,
      62,
      312,
      87,
      7,
      944,
      13,
      18558,
      38409,
      13,
      25351,
      62,
      9948,
      9239,
      11,
      3292,
      62,
      12501,
      1166,
      8
    ],
    "start_token": 402,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      36066,
      583,
      2239,
      11507
    ],
    "label": "ml_signal",
    "reason": "Storing ticks per step parameter"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing data granularity parameter",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 442,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      19468,
      33737,
      11507
    ],
    "label": "ml_signal",
    "reason": "Storing data granularity parameter"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation, which can be disabled in production",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 442,
    "end_token": 442,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation, which can be disabled in production"
  },
  {
    "line": 93,
    "text": "        data_granularity: int = 1,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pandas to handle time series data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      46324,
      33737,
      25,
      493,
      796,
      352,
      11
    ],
    "start_token": 442,
    "end_token": 458,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      19798,
      292,
      284,
      5412,
      640,
      2168,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of pandas to handle time series data"
  },
  {
    "line": 95,
    "text": "        self.position = order.amount",
    "annotation": "\u2705 Best Practice: Use of integer division for clarity and to avoid float results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9150,
      796,
      1502,
      13,
      17287
    ],
    "start_token": 458,
    "end_token": 472,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18253,
      7297,
      329,
      16287,
      290,
      284,
      3368,
      12178,
      2482
    ],
    "label": "best_practice",
    "reason": "Use of integer division for clarity and to avoid float results"
  },
  {
    "line": 96,
    "text": "        self.order = order",
    "annotation": "\u2705 Best Practice: Ensures next_loc aligns with data granularity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      796,
      1502
    ],
    "start_token": 472,
    "end_token": 484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      942,
      1306,
      62,
      17946,
      10548,
      82,
      351,
      1366,
      19468,
      33737
    ],
    "label": "best_practice",
    "reason": "Ensures next_loc aligns with data granularity"
  },
  {
    "line": 100,
    "text": "        self.start_idx, _ = get_start_end_idx(self.executor.trade_calendar, trade_decision)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential index out of range if next_loc is not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      62,
      312,
      87,
      11,
      4808,
      796,
      651,
      62,
      9688,
      62,
      437,
      62,
      312,
      87,
      7,
      944,
      13,
      18558,
      38409,
      13,
      25351,
      62,
      9948,
      9239,
      11,
      3292,
      62,
      12501,
      1166,
      8
    ],
    "start_token": 484,
    "end_token": 524,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6376,
      503,
      286,
      2837,
      611,
      1306,
      62,
      17946,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential index out of range if next_loc is not validated"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine next time step",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 524,
    "end_token": 524,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      1306,
      640,
      2239
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine next time step"
  },
  {
    "line": 108,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Handling edge case by returning end_time",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 524,
    "end_token": 524,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      5743,
      1339,
      416,
      8024,
      886,
      62,
      2435
    ],
    "label": "ml_signal",
    "reason": "Handling edge case by returning end_time"
  },
  {
    "line": 112,
    "text": "        assert self.ticks_per_step % self.data_granularity == 0",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over execute_result to process orders",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      2116,
      13,
      83,
      3378,
      62,
      525,
      62,
      9662,
      4064,
      2116,
      13,
      7890,
      62,
      46324,
      33737,
      6624,
      657
    ],
    "start_token": 524,
    "end_token": 549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      12260,
      62,
      20274,
      284,
      1429,
      6266
    ],
    "label": "ml_signal",
    "reason": "Iterating over execute_result to process orders"
  },
  {
    "line": 116,
    "text": "        next_loc = current_loc + (self.ticks_per_step // self.data_granularity)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential floating-point precision issues with exec_vol.sum()",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      17946,
      796,
      1459,
      62,
      17946,
      1343,
      357,
      944,
      13,
      83,
      3378,
      62,
      525,
      62,
      9662,
      3373,
      2116,
      13,
      7890,
      62,
      46324,
      33737,
      8
    ],
    "start_token": 549,
    "end_token": 581,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12462,
      12,
      4122,
      15440,
      2428,
      351,
      2452,
      62,
      10396,
      13,
      16345,
      3419
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential floating-point precision issues with exec_vol.sum()"
  },
  {
    "line": 117,
    "text": "        next_loc = next_loc - next_loc % (self.ticks_per_step // self.data_granularity)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn without specifying a category",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1306,
      62,
      17946,
      796,
      1306,
      62,
      17946,
      532,
      1306,
      62,
      17946,
      4064,
      357,
      944,
      13,
      83,
      3378,
      62,
      525,
      62,
      9662,
      3373,
      2116,
      13,
      7890,
      62,
      46324,
      33737,
      8
    ],
    "start_token": 581,
    "end_token": 617,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      1231,
      31577,
      257,
      6536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn without specifying a category"
  },
  {
    "line": 145,
    "text": "                    f\"All execution volume is scaled down linearly to ensure that their sum does not position.\"",
    "annotation": "\u2705 Best Practice: Ensure data is in the correct format and shape",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      3237,
      9706,
      6115,
      318,
      27464,
      866,
      9493,
      11458,
      284,
      4155,
      326,
      511,
      2160,
      857,
      407,
      2292,
      526
    ],
    "start_token": 617,
    "end_token": 655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      1366,
      318,
      287,
      262,
      3376,
      5794,
      290,
      5485
    ],
    "label": "best_practice",
    "reason": "Ensure data is in the correct format and shape"
  },
  {
    "line": 147,
    "text": "            exec_vol *= self.position / (exec_vol.sum())",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      1635,
      28,
      2116,
      13,
      9150,
      1220,
      357,
      18558,
      62,
      10396,
      13,
      16345,
      28955
    ],
    "start_token": 655,
    "end_token": 682,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks"
  },
  {
    "line": 147,
    "text": "            exec_vol *= self.position / (exec_vol.sum())",
    "annotation": "\ud83e\udde0 ML Signal: Generating trade indicators dataframe",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      1635,
      28,
      2116,
      13,
      9150,
      1220,
      357,
      18558,
      62,
      10396,
      13,
      16345,
      28955
    ],
    "start_token": 682,
    "end_token": 709,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2980,
      803,
      3292,
      21337,
      1366,
      14535
    ],
    "label": "ml_signal",
    "reason": "Generating trade indicators dataframe"
  },
  {
    "line": 177,
    "text": "            self.history_exec,",
    "annotation": "\ud83e\udde0 ML Signal: Updating position based on executed volume",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      11
    ],
    "start_token": 709,
    "end_token": 726,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      2292,
      1912,
      319,
      10945,
      6115
    ],
    "label": "ml_signal",
    "reason": "Updating position based on executed volume"
  },
  {
    "line": 177,
    "text": "            self.history_exec,",
    "annotation": "\ud83e\udde0 ML Signal: Updating current time to the next time step",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      11
    ],
    "start_token": 726,
    "end_token": 743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      1459,
      640,
      284,
      262,
      1306,
      640,
      2239
    ],
    "label": "ml_signal",
    "reason": "Updating current time to the next time step"
  },
  {
    "line": 177,
    "text": "            self.history_exec,",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests a post-execution metric generation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      11
    ],
    "start_token": 743,
    "end_token": 760,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      257,
      1281,
      12,
      18558,
      1009,
      18663,
      5270,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name suggests a post-execution metric generation pattern"
  },
  {
    "line": 177,
    "text": "            self.history_exec,",
    "annotation": "\ud83e\udde0 ML Signal: Collecting metrics based on historical execution data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      11
    ],
    "start_token": 760,
    "end_token": 777,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      20731,
      1912,
      319,
      6754,
      9706,
      1366
    ],
    "label": "ml_signal",
    "reason": "Collecting metrics based on historical execution data"
  },
  {
    "line": 177,
    "text": "            self.history_exec,",
    "annotation": "\ud83e\udde0 ML Signal: Using the first tick index for metric calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      11
    ],
    "start_token": 777,
    "end_token": 794,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      262,
      717,
      4378,
      6376,
      329,
      18663,
      17952
    ],
    "label": "ml_signal",
    "reason": "Using the first tick index for metric calculation"
  },
  {
    "line": 183,
    "text": "                market_vol=market_volume,",
    "annotation": "\ud83e\udde0 ML Signal: Market volume is a key feature for metric calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1910,
      62,
      10396,
      28,
      10728,
      62,
      29048,
      11
    ],
    "start_token": 794,
    "end_token": 817,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5991,
      6115,
      318,
      257,
      1994,
      3895,
      329,
      18663,
      17952
    ],
    "label": "ml_signal",
    "reason": "Market volume is a key feature for metric calculation"
  },
  {
    "line": 185,
    "text": "                exec_vol=exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Market price is a key feature for metric calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 817,
    "end_token": 840,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5991,
      2756,
      318,
      257,
      1994,
      3895,
      329,
      18663,
      17952
    ],
    "label": "ml_signal",
    "reason": "Market price is a key feature for metric calculation"
  },
  {
    "line": 185,
    "text": "                exec_vol=exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Summing historical step amounts for metric calculation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 840,
    "end_token": 863,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5060,
      2229,
      6754,
      2239,
      6867,
      329,
      18663,
      17952
    ],
    "label": "ml_signal",
    "reason": "Summing historical step amounts for metric calculation"
  },
  {
    "line": 185,
    "text": "                exec_vol=exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Deal amount is a key feature for metric calculation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      28,
      18558,
      62,
      10396,
      11
    ],
    "start_token": 863,
    "end_token": 886,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15138,
      2033,
      318,
      257,
      1994,
      3895,
      329,
      18663,
      17952
    ],
    "label": "ml_signal",
    "reason": "Deal amount is a key feature for metric calculation"
  },
  {
    "line": 194,
    "text": "                    self.order,",
    "annotation": "\u2705 Best Practice: Returning a well-defined data structure (SAOEMetrics) improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      11
    ],
    "start_token": 886,
    "end_token": 909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      880,
      12,
      23211,
      1366,
      4645,
      357,
      4090,
      46,
      3620,
      316,
      10466,
      8,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a well-defined data structure (SAOEMetrics) improves code readability and maintainability."
  },
  {
    "line": 194,
    "text": "                    self.order,",
    "annotation": "\ud83e\udde0 ML Signal: Using order attributes like stock_id and direction can indicate trading behavior patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      11
    ],
    "start_token": 909,
    "end_token": 932,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      1502,
      12608,
      588,
      4283,
      62,
      312,
      290,
      4571,
      460,
      7603,
      7313,
      4069,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Using order attributes like stock_id and direction can indicate trading behavior patterns."
  },
  {
    "line": 209,
    "text": "    def generate_metrics_after_done(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Multiplying arrays without validation could lead to unexpected results if dimensions mismatch.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7716,
      62,
      4164,
      10466,
      62,
      8499,
      62,
      28060,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 932,
    "end_token": 950,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7854,
      541,
      3157,
      26515,
      1231,
      21201,
      714,
      1085,
      284,
      10059,
      2482,
      611,
      15225,
      46318,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Multiplying arrays without validation could lead to unexpected results if dimensions mismatch."
  },
  {
    "line": 209,
    "text": "    def generate_metrics_after_done(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using np.cumsum without validation could lead to incorrect calculations if exec_vol is not properly formatted.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7716,
      62,
      4164,
      10466,
      62,
      8499,
      62,
      28060,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 950,
    "end_token": 968,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      45941,
      13,
      66,
      5700,
      388,
      1231,
      21201,
      714,
      1085,
      284,
      11491,
      16765,
      611,
      2452,
      62,
      10396,
      318,
      407,
      6105,
      39559,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using np.cumsum without validation could lead to incorrect calculations if exec_vol is not properly formatted."
  },
  {
    "line": 209,
    "text": "    def generate_metrics_after_done(self) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division without checking for zero in order.amount could lead to division by zero errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      7716,
      62,
      4164,
      10466,
      62,
      8499,
      62,
      28060,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 968,
    "end_token": 986,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      1231,
      10627,
      329,
      6632,
      287,
      1502,
      13,
      17287,
      714,
      1085,
      284,
      7297,
      416,
      6632,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division without checking for zero in order.amount could lead to division by zero errors."
  },
  {
    "line": 218,
    "text": "            self.history_exec[\"deal_amount\"],",
    "annotation": "\u2705 Best Practice: Use of assert to ensure input arrays have the same length",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      23569,
      62,
      18558,
      14692,
      31769,
      62,
      17287,
      33116
    ],
    "start_token": 986,
    "end_token": 1007,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      4155,
      5128,
      26515,
      423,
      262,
      976,
      4129
    ],
    "label": "best_practice",
    "reason": "Use of assert to ensure input arrays have the same length"
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if exec_vol is empty or sums to zero",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1007,
    "end_token": 1007,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      2452,
      62,
      10396,
      318,
      6565,
      393,
      21784,
      284,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if exec_vol is empty or sums to zero"
  },
  {
    "line": 224,
    "text": "        datetime: pd.DatetimeIndex,",
    "annotation": "\u2705 Best Practice: Use of numpy average with weights for calculating average price",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4818,
      8079,
      25,
      279,
      67,
      13,
      27354,
      8079,
      15732,
      11
    ],
    "start_token": 1007,
    "end_token": 1024,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2811,
      351,
      19590,
      329,
      26019,
      2811,
      2756
    ],
    "label": "best_practice",
    "reason": "Use of numpy average with weights for calculating average price"
  },
  {
    "line": 226,
    "text": "        market_price: np.ndarray,",
    "annotation": "\u2705 Best Practice: Check if exec_avg_price has an item method and use it",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1910,
      62,
      20888,
      25,
      45941,
      13,
      358,
      18747,
      11
    ],
    "start_token": 1024,
    "end_token": 1040,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2452,
      62,
      615,
      70,
      62,
      20888,
      468,
      281,
      2378,
      2446,
      290,
      779,
      340
    ],
    "label": "best_practice",
    "reason": "Check if exec_avg_price has an item method and use it"
  },
  {
    "line": 226,
    "text": "        market_price: np.ndarray,",
    "annotation": "\u2705 Best Practice: Use of numpy sum for efficient summation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1910,
      62,
      20888,
      25,
      45941,
      13,
      358,
      18747,
      11
    ],
    "start_token": 1040,
    "end_token": 1056,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      329,
      6942,
      30114,
      341
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum for efficient summation"
  },
  {
    "line": 226,
    "text": "        market_price: np.ndarray,",
    "annotation": "\ud83e\udde0 ML Signal: Collecting metrics for a single order, useful for model training",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1910,
      62,
      20888,
      25,
      45941,
      13,
      358,
      18747,
      11
    ],
    "start_token": 1056,
    "end_token": 1072,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      20731,
      329,
      257,
      2060,
      1502,
      11,
      4465,
      329,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Collecting metrics for a single order, useful for model training"
  },
  {
    "line": 242,
    "text": "            trade_price=market_price,",
    "annotation": "\u2705 Best Practice: Use of numpy sum for efficient summation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      28,
      10728,
      62,
      20888,
      11
    ],
    "start_token": 1072,
    "end_token": 1091,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      329,
      6942,
      30114,
      341
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum for efficient summation"
  },
  {
    "line": 242,
    "text": "            trade_price=market_price,",
    "annotation": "\u2705 Best Practice: Use of numpy mean for calculating average price",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      28,
      10728,
      62,
      20888,
      11
    ],
    "start_token": 1091,
    "end_token": 1110,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      1612,
      329,
      26019,
      2811,
      2756
    ],
    "label": "best_practice",
    "reason": "Use of numpy mean for calculating average price"
  },
  {
    "line": 243,
    "text": "            trade_value=market_price * exec_vol,",
    "annotation": "\u2705 Best Practice: Use of numpy sum for efficient calculation of trade value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 1110,
    "end_token": 1133,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      2160,
      329,
      6942,
      17952,
      286,
      3292,
      1988
    ],
    "label": "best_practice",
    "reason": "Use of numpy sum for efficient calculation of trade value"
  },
  {
    "line": 243,
    "text": "            trade_value=market_price * exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Tracking position changes, useful for model training",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 1133,
    "end_token": 1156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      2292,
      2458,
      11,
      4465,
      329,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Tracking position changes, useful for model training"
  },
  {
    "line": 243,
    "text": "            trade_value=market_price * exec_vol,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if order.amount is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 1156,
    "end_token": 1179,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      1502,
      13,
      17287,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if order.amount is zero"
  },
  {
    "line": 250,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Calculating price advantage, useful for model training",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1179,
    "end_token": 1188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      2756,
      4621,
      11,
      4465,
      329,
      2746,
      3047
    ],
    "label": "ml_signal",
    "reason": "Calculating price advantage, useful for model training"
  },
  {
    "line": 242,
    "text": "            trade_price=market_price,",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a state object, useful for state representation learning",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      28,
      10728,
      62,
      20888,
      11
    ],
    "start_token": 1188,
    "end_token": 1207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1181,
      2134,
      11,
      4465,
      329,
      1181,
      10552,
      4673
    ],
    "label": "ml_signal",
    "reason": "Method returning a state object, useful for state representation learning"
  },
  {
    "line": 243,
    "text": "            trade_value=market_price * exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of a state object, indicating a pattern of state management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 1207,
    "end_token": 1230,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      257,
      1181,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Instantiation of a state object, indicating a pattern of state management"
  },
  {
    "line": 243,
    "text": "            trade_value=market_price * exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 1230,
    "end_token": 1253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 243,
    "text": "            trade_value=market_price * exec_vol,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      8367,
      28,
      10728,
      62,
      20888,
      1635,
      2452,
      62,
      10396,
      11
    ],
    "start_token": 1253,
    "end_token": 1276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 250,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of current step, useful for temporal pattern analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1276,
    "end_token": 1285,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      1459,
      2239,
      11,
      4465,
      329,
      21964,
      3912,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculation of current step, useful for temporal pattern analysis"
  },
  {
    "line": 252,
    "text": "        datetime: pd.Timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4818,
      8079,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 1285,
    "end_token": 1301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 254,
    "text": "        market_price: np.ndarray,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1910,
      62,
      20888,
      25,
      45941,
      13,
      358,
      18747,
      11
    ],
    "start_token": 1301,
    "end_token": 1317,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 256,
    "text": "        exec_vol: np.ndarray,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      25,
      45941,
      13,
      358,
      18747,
      11
    ],
    "start_token": 1317,
    "end_token": 1333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 258,
    "text": "        assert len(market_vol) == len(market_price) == len(exec_vol)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      18896,
      7,
      10728,
      62,
      10396,
      8,
      6624,
      18896,
      7,
      10728,
      62,
      20888,
      8,
      6624,
      18896,
      7,
      18558,
      62,
      10396,
      8
    ],
    "start_token": 1333,
    "end_token": 1361,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 258,
    "text": "        assert len(market_vol) == len(market_price) == len(exec_vol)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      18896,
      7,
      10728,
      62,
      10396,
      8,
      6624,
      18896,
      7,
      10728,
      62,
      20888,
      8,
      6624,
      18896,
      7,
      18558,
      62,
      10396,
      8
    ],
    "start_token": 1361,
    "end_token": 1389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 258,
    "text": "        assert len(market_vol) == len(market_price) == len(exec_vol)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      18896,
      7,
      10728,
      62,
      10396,
      8,
      6624,
      18896,
      7,
      10728,
      62,
      20888,
      8,
      6624,
      18896,
      7,
      18558,
      62,
      10396,
      8
    ],
    "start_token": 1389,
    "end_token": 1417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 264,
    "text": "            if hasattr(exec_avg_price, \"item\"):  # could be numpy scalar",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      468,
      35226,
      7,
      18558,
      62,
      615,
      70,
      62,
      20888,
      11,
      366,
      9186,
      1,
      2599,
      220,
      1303,
      714,
      307,
      299,
      32152,
      16578,
      283
    ],
    "start_token": 1417,
    "end_token": 1451,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 267,
    "text": "        exec_sum = exec_vol.sum()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to construct state, indicating feature selection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      16345,
      796,
      2452,
      62,
      10396,
      13,
      16345,
      3419
    ],
    "start_token": 1451,
    "end_token": 1468,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5678,
      1181,
      11,
      12739,
      3895,
      6356
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to construct state, indicating feature selection"
  },
  {
    "line": 257,
    "text": "    ) -> SAOEMetrics:",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      14719,
      46,
      3620,
      316,
      10466,
      25
    ],
    "start_token": 1468,
    "end_token": 1479,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 267,
    "text": "        exec_sum = exec_vol.sum()",
    "annotation": "\u2705 Best Practice: Use of super() to initialize the parent class ensures proper inheritance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      16345,
      796,
      2452,
      62,
      10396,
      13,
      16345,
      3419
    ],
    "start_token": 1479,
    "end_token": 1496,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398,
      19047,
      1774,
      24155,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to initialize the parent class ensures proper inheritance."
  },
  {
    "line": 275,
    "text": "            inner_amount=exec_sum,",
    "annotation": "\ud83e\udde0 ML Signal: Storing data granularity could indicate a pattern of data processing frequency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8434,
      62,
      17287,
      28,
      18558,
      62,
      16345,
      11
    ],
    "start_token": 1496,
    "end_token": 1515,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      19468,
      33737,
      714,
      7603,
      257,
      3912,
      286,
      1366,
      7587,
      8373,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing data granularity could indicate a pattern of data processing frequency."
  },
  {
    "line": 277,
    "text": "            trade_price=exec_avg_price,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to store adapters suggests a pattern of dynamic state management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      28,
      18558,
      62,
      615,
      70,
      62,
      20888,
      11
    ],
    "start_token": 1515,
    "end_token": 1537,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      46363,
      5644,
      257,
      3912,
      286,
      8925,
      1181,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to store adapters suggests a pattern of dynamic state management."
  },
  {
    "line": 277,
    "text": "            trade_price=exec_avg_price,",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the last step range could be used to model sequential decision-making.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      20888,
      28,
      18558,
      62,
      615,
      70,
      62,
      20888,
      11
    ],
    "start_token": 1537,
    "end_token": 1559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      938,
      2239,
      2837,
      714,
      307,
      973,
      284,
      2746,
      35582,
      2551,
      12,
      8601,
      13
    ],
    "label": "ml_signal",
    "reason": "Tracking the last step range could be used to model sequential decision-making."
  },
  {
    "line": 283,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function involves creating an adapter for backtesting, indicating a pattern of preparing data for simulation or analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1559,
    "end_token": 1559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9018,
      4441,
      281,
      21302,
      329,
      736,
      33407,
      11,
      12739,
      257,
      3912,
      286,
      10629,
      1366,
      329,
      18640,
      393,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Function involves creating an adapter for backtesting, indicating a pattern of preparing data for simulation or analysis."
  },
  {
    "line": 284,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Using a dedicated adapter class (SAOEStateAdapter) for backtesting promotes modularity and separation of concerns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 1559,
    "end_token": 1564,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      7256,
      21302,
      1398,
      357,
      4090,
      27799,
      9012,
      47307,
      8,
      329,
      736,
      33407,
      21068,
      26507,
      414,
      290,
      14139,
      286,
      4786,
      13
    ],
    "label": "best_practice",
    "reason": "Using a dedicated adapter class (SAOEStateAdapter) for backtesting promotes modularity and separation of concerns."
  },
  {
    "line": 293,
    "text": "            metrics=self.metrics,",
    "annotation": "\u2705 Best Practice: Using pd.Timedelta for time calculations ensures clarity and correctness in time-related operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20731,
      28,
      944,
      13,
      4164,
      10466,
      11
    ],
    "start_token": 1564,
    "end_token": 1582,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      14967,
      276,
      12514,
      329,
      640,
      16765,
      19047,
      16287,
      290,
      29409,
      287,
      640,
      12,
      5363,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Using pd.Timedelta for time calculations ensures clarity and correctness in time-related operations."
  },
  {
    "line": 294,
    "text": "            backtest_data=self.backtest_data,",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass method ensures proper initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      62,
      7890,
      28,
      944,
      13,
      1891,
      9288,
      62,
      7890,
      11
    ],
    "start_token": 1582,
    "end_token": 1605,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass method ensures proper initialization."
  },
  {
    "line": 296,
    "text": "            ticks_index=self.backtest_data.ticks_index,",
    "annotation": "\u2705 Best Practice: Initializing adapter_dict to an empty dictionary for clarity and to avoid potential KeyErrors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      9630,
      28,
      944,
      13,
      1891,
      9288,
      62,
      7890,
      13,
      83,
      3378,
      62,
      9630,
      11
    ],
    "start_token": 1605,
    "end_token": 1632,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      21302,
      62,
      11600,
      284,
      281,
      6565,
      22155,
      329,
      16287,
      290,
      284,
      3368,
      2785,
      7383,
      9139,
      5965,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing adapter_dict to an empty dictionary for clarity and to avoid potential KeyErrors."
  },
  {
    "line": 298,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Initializing _last_step_range to a default value for clarity and consistency.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1632,
    "end_token": 1640,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      4808,
      12957,
      62,
      9662,
      62,
      9521,
      284,
      257,
      4277,
      1988,
      329,
      16287,
      290,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing _last_step_range to a default value for clarity and consistency."
  },
  {
    "line": 301,
    "text": "class SAOEStrategy(RLStrategy):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if trade_range is None, though assert mitigates this.",
    "confidence": 0.5,
    "tokens": [
      4871,
      14719,
      27799,
      13290,
      4338,
      7,
      7836,
      13290,
      4338,
      2599
    ],
    "start_token": 1640,
    "end_token": 1650,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      3292,
      62,
      9521,
      318,
      6045,
      11,
      996,
      6818,
      10255,
      328,
      689,
      428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if trade_range is None, though assert mitigates this."
  },
  {
    "line": 303,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using assert for runtime checks can be bypassed if Python is run with optimizations.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1650,
    "end_token": 1650,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using assert for runtime checks can be bypassed if Python is run with optimizations."
  },
  {
    "line": 305,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Re-initializing adapter_dict to ensure no stale data is present.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1650,
    "end_token": 1659,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      797,
      12,
      36733,
      2890,
      21302,
      62,
      11600,
      284,
      4155,
      645,
      39985,
      1366,
      318,
      1944,
      13
    ],
    "label": "best_practice",
    "reason": "Re-initializing adapter_dict to ensure no stale data is present."
  },
  {
    "line": 307,
    "text": "        outer_trade_decision: BaseTradeDecision | None = None,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over decisions could indicate a pattern of processing multiple trade decisions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      25,
      7308,
      35965,
      10707,
      1166,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 1659,
    "end_token": 1682,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5370,
      714,
      7603,
      257,
      3912,
      286,
      7587,
      3294,
      3292,
      5370,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over decisions could indicate a pattern of processing multiple trade decisions."
  },
  {
    "line": 309,
    "text": "        common_infra: CommonInfrastructure | None = None,",
    "annotation": "\ud83e\udde0 ML Signal: Casting decision to Order type suggests a pattern of handling specific object types.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      62,
      10745,
      430,
      25,
      8070,
      18943,
      6410,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 1682,
    "end_token": 1702,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39285,
      2551,
      284,
      8284,
      2099,
      5644,
      257,
      3912,
      286,
      9041,
      2176,
      2134,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Casting decision to Order type suggests a pattern of handling specific object types."
  },
  {
    "line": 311,
    "text": "        **kwargs: Any,",
    "annotation": "\ud83e\udde0 ML Signal: Storing adapters in a dictionary keyed by day indicates a pattern of organizing data by time.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      25,
      4377,
      11
    ],
    "start_token": 1702,
    "end_token": 1715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      46363,
      287,
      257,
      22155,
      1994,
      276,
      416,
      1110,
      9217,
      257,
      3912,
      286,
      16924,
      1366,
      416,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing adapters in a dictionary keyed by day indicates a pattern of organizing data by time."
  },
  {
    "line": 306,
    "text": "        policy: BasePolicy,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a dictionary using a key derived from an object's attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2450,
      25,
      7308,
      36727,
      11
    ],
    "start_token": 1715,
    "end_token": 1727,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      22155,
      1262,
      257,
      1994,
      10944,
      422,
      281,
      2134,
      338,
      11688
    ],
    "label": "ml_signal",
    "reason": "Accessing a dictionary using a key derived from an object's attribute"
  },
  {
    "line": 307,
    "text": "        outer_trade_decision: BaseTradeDecision | None = None,",
    "annotation": "\u2705 Best Practice: Use of type hints for return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      25,
      7308,
      35965,
      10707,
      1166,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 1727,
    "end_token": 1750,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for return type improves code readability and maintainability"
  },
  {
    "line": 309,
    "text": "        common_infra: CommonInfrastructure | None = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if order.key_by_day is not in adapter_dict",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      62,
      10745,
      430,
      25,
      8070,
      18943,
      6410,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 1750,
    "end_token": 1770,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      1502,
      13,
      2539,
      62,
      1525,
      62,
      820,
      318,
      407,
      287,
      21302,
      62,
      11600
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if order.key_by_day is not in adapter_dict"
  },
  {
    "line": 309,
    "text": "        common_infra: CommonInfrastructure | None = None,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary's values to perform operations on each item",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      62,
      10745,
      430,
      25,
      8070,
      18943,
      6410,
      930,
      6045,
      796,
      6045,
      11
    ],
    "start_token": 1770,
    "end_token": 1790,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      338,
      3815,
      284,
      1620,
      4560,
      319,
      1123,
      2378
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary's values to perform operations on each item"
  },
  {
    "line": 311,
    "text": "        **kwargs: Any,",
    "annotation": "\ud83e\udde0 ML Signal: Calling a method on each item in a collection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      25,
      4377,
      11
    ],
    "start_token": 1790,
    "end_token": 1803,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      257,
      2446,
      319,
      1123,
      2378,
      287,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Calling a method on each item in a collection"
  },
  {
    "line": 316,
    "text": "            level_infra=level_infra,",
    "annotation": "\u2705 Best Practice: Use of defaultdict to handle missing keys gracefully",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      62,
      10745,
      430,
      28,
      5715,
      62,
      10745,
      430,
      11
    ],
    "start_token": 1803,
    "end_token": 1824,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11600,
      284,
      5412,
      4814,
      8251,
      11542,
      2759
    ],
    "label": "best_practice",
    "reason": "Use of defaultdict to handle missing keys gracefully"
  },
  {
    "line": 320,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of results to categorize them",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1824,
    "end_token": 1824,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      2482,
      284,
      17851,
      1096,
      606
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of results to categorize them"
  },
  {
    "line": 322,
    "text": "        self.adapter_dict: Dict[tuple, SAOEStateAdapter] = {}",
    "annotation": "\ud83e\udde0 ML Signal: Updating adapters with categorized results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      324,
      3429,
      62,
      11600,
      25,
      360,
      713,
      58,
      83,
      29291,
      11,
      14719,
      27799,
      9012,
      47307,
      60,
      796,
      23884
    ],
    "start_token": 1824,
    "end_token": 1851,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      46363,
      351,
      37661,
      2482
    ],
    "label": "ml_signal",
    "reason": "Updating adapters with categorized results"
  },
  {
    "line": 333,
    "text": "        return SAOEStateAdapter(",
    "annotation": "\u2705 Best Practice: Updating internal state before generating a decision ensures consistency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      14719,
      27799,
      9012,
      47307,
      7
    ],
    "start_token": 1851,
    "end_token": 1864,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3205,
      38734,
      5387,
      1181,
      878,
      15453,
      257,
      2551,
      19047,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Updating internal state before generating a decision ensures consistency."
  },
  {
    "line": 335,
    "text": "            trade_decision=trade_decision,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of delegating decision logic to a private method for subclass customization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      12501,
      1166,
      28,
      25351,
      62,
      12501,
      1166,
      11
    ],
    "start_token": 1864,
    "end_token": 1885,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      8570,
      803,
      2551,
      9156,
      284,
      257,
      2839,
      2446,
      329,
      47611,
      31344,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of delegating decision logic to a private method for subclass customization."
  },
  {
    "line": 337,
    "text": "            exchange=self.trade_exchange,",
    "annotation": "\u2705 Best Practice: Handling generator types allows for flexible decision generation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      28,
      944,
      13,
      25351,
      62,
      1069,
      3803,
      11
    ],
    "start_token": 1885,
    "end_token": 1905,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      49500,
      17301,
      3858,
      3578,
      329,
      12846,
      2551,
      5270,
      13
    ],
    "label": "best_practice",
    "reason": "Handling generator types allows for flexible decision generation."
  },
  {
    "line": 338,
    "text": "            ticks_per_step=int(pd.Timedelta(self.trade_calendar.get_freq()) / ONE_MIN),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using 'yield from' can lead to unexpected behavior if not properly managed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      525,
      62,
      9662,
      28,
      600,
      7,
      30094,
      13,
      14967,
      276,
      12514,
      7,
      944,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      19503,
      80,
      28955,
      1220,
      16329,
      62,
      23678,
      828
    ],
    "start_token": 1905,
    "end_token": 1947,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      705,
      88,
      1164,
      422,
      6,
      460,
      1085,
      284,
      10059,
      4069,
      611,
      407,
      6105,
      5257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using 'yield from' can lead to unexpected behavior if not properly managed."
  },
  {
    "line": 338,
    "text": "            ticks_per_step=int(pd.Timedelta(self.trade_calendar.get_freq()) / ONE_MIN),",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      525,
      62,
      9662,
      28,
      600,
      7,
      30094,
      13,
      14967,
      276,
      12514,
      7,
      944,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      19503,
      80,
      28955,
      1220,
      16329,
      62,
      23678,
      828
    ],
    "start_token": 1947,
    "end_token": 1989,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 343,
    "text": "    def reset(self, outer_trade_decision: BaseTradeDecision | None = None, **kwargs: Any) -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The use of NotImplementedError is generally safe, but ensure that this method is properly implemented in subclasses to avoid runtime errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      13259,
      7,
      944,
      11,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      25,
      7308,
      35965,
      10707,
      1166,
      930,
      6045,
      796,
      6045,
      11,
      12429,
      46265,
      22046,
      25,
      4377,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 1989,
    "end_token": 2022,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      779,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      318,
      4143,
      3338,
      11,
      475,
      4155,
      326,
      428,
      2446,
      318,
      6105,
      9177,
      287,
      850,
      37724,
      284,
      3368,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The use of NotImplementedError is generally safe, but ensure that this method is properly implemented in subclasses to avoid runtime errors."
  },
  {
    "line": 349,
    "text": "        if outer_trade_decision is not None and not outer_trade_decision.empty():",
    "annotation": "\ud83e\udde0 ML Signal: The class is designed to delegate decision-making, which is a pattern that could be used to train models on decision delegation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      318,
      407,
      6045,
      290,
      407,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      13,
      28920,
      33529
    ],
    "start_token": 2022,
    "end_token": 2050,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      1398,
      318,
      3562,
      284,
      23191,
      2551,
      12,
      8601,
      11,
      543,
      318,
      257,
      3912,
      326,
      714,
      307,
      973,
      284,
      4512,
      4981,
      319,
      2551,
      22635,
      13
    ],
    "label": "ml_signal",
    "reason": "The class is designed to delegate decision-making, which is a pattern that could be used to train models on decision delegation."
  },
  {
    "line": 349,
    "text": "        if outer_trade_decision is not None and not outer_trade_decision.empty():",
    "annotation": "\u2705 Best Practice: The docstring provides a clear explanation of the class's purpose and behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      318,
      407,
      6045,
      290,
      407,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      13,
      28920,
      33529
    ],
    "start_token": 2050,
    "end_token": 2078,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      383,
      2205,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      1398,
      338,
      4007,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "The docstring provides a clear explanation of the class's purpose and behavior."
  },
  {
    "line": 356,
    "text": "                self.adapter_dict[order.key_by_day] = self._create_qlib_backtest_adapter(",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      324,
      3429,
      62,
      11600,
      58,
      2875,
      13,
      2539,
      62,
      1525,
      62,
      820,
      60,
      796,
      2116,
      13557,
      17953,
      62,
      80,
      8019,
      62,
      1891,
      9288,
      62,
      324,
      3429,
      7
    ],
    "start_token": 2078,
    "end_token": 2122,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 357,
    "text": "                    order, outer_trade_decision, trade_range",
    "annotation": "\u2705 Best Practice: Default values for parameters allow for more flexible function calls.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      11,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      3292,
      62,
      9521
    ],
    "start_token": 2122,
    "end_token": 2153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      3815,
      329,
      10007,
      1249,
      329,
      517,
      12846,
      2163,
      3848,
      13
    ],
    "label": "best_practice",
    "reason": "Default values for parameters allow for more flexible function calls."
  },
  {
    "line": 359,
    "text": "",
    "annotation": "\u2705 Best Practice: Calling the superclass's __init__ method ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2153,
    "end_token": 2153,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Calling the superclass's __init__ method ensures proper initialization of the base class."
  },
  {
    "line": 358,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Use of generator function to yield and return values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2153,
    "end_token": 2169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      17301,
      2163,
      284,
      7800,
      290,
      1441,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of generator function to yield and return values"
  },
  {
    "line": 360,
    "text": "    def get_saoe_state_by_order(self, order: Order) -> SAOEState:",
    "annotation": "\ud83e\udde0 ML Signal: Interaction with trade_exchange to get order helper",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      11400,
      2577,
      62,
      5219,
      62,
      1525,
      62,
      2875,
      7,
      944,
      11,
      1502,
      25,
      8284,
      8,
      4613,
      14719,
      27799,
      9012,
      25
    ],
    "start_token": 2169,
    "end_token": 2195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4225,
      2673,
      351,
      3292,
      62,
      1069,
      3803,
      284,
      651,
      1502,
      31904
    ],
    "label": "ml_signal",
    "reason": "Interaction with trade_exchange to get order helper"
  },
  {
    "line": 362,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Creation of an order using order helper",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2195,
    "end_token": 2195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      281,
      1502,
      1262,
      1502,
      31904
    ],
    "label": "ml_signal",
    "reason": "Creation of an order using order helper"
  },
  {
    "line": 364,
    "text": "        for adapter in self.adapter_dict.values():",
    "annotation": "\ud83e\udde0 ML Signal: Returning a TradeDecisionWO object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      21302,
      287,
      2116,
      13,
      324,
      3429,
      62,
      11600,
      13,
      27160,
      33529
    ],
    "start_token": 2195,
    "end_token": 2214,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      9601,
      10707,
      1166,
      54,
      46,
      2134
    ],
    "label": "ml_signal",
    "reason": "Returning a TradeDecisionWO object"
  },
  {
    "line": 363,
    "text": "    def post_upper_level_exe_step(self) -> None:",
    "annotation": "\u2705 Best Practice: Use of type hinting for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1281,
      62,
      45828,
      62,
      5715,
      62,
      13499,
      62,
      9662,
      7,
      944,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 2214,
    "end_token": 2233,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function parameters and return type"
  },
  {
    "line": 365,
    "text": "            adapter.generate_metrics_after_done()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for type checking can be bypassed; consider using explicit type checks or exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      21302,
      13,
      8612,
      378,
      62,
      4164,
      10466,
      62,
      8499,
      62,
      28060,
      3419
    ],
    "start_token": 2233,
    "end_token": 2256,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      2099,
      10627,
      460,
      307,
      17286,
      276,
      26,
      2074,
      1262,
      7952,
      2099,
      8794,
      393,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for type checking can be bypassed; consider using explicit type checks or exceptions"
  },
  {
    "line": 368,
    "text": "        last_step_length = self._last_step_range[1] - self._last_step_range[0]",
    "annotation": "\ud83e\udde0 ML Signal: Checking for None before accessing attributes is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      938,
      62,
      9662,
      62,
      13664,
      796,
      2116,
      13557,
      12957,
      62,
      9662,
      62,
      9521,
      58,
      16,
      60,
      532,
      2116,
      13557,
      12957,
      62,
      9662,
      62,
      9521,
      58,
      15,
      60
    ],
    "start_token": 2256,
    "end_token": 2290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      6045,
      878,
      22534,
      12608,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Checking for None before accessing attributes is a common pattern"
  },
  {
    "line": 370,
    "text": "            assert not execute_result",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for length check can be bypassed; consider using explicit checks or exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      407,
      12260,
      62,
      20274
    ],
    "start_token": 2290,
    "end_token": 2306,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      4129,
      2198,
      460,
      307,
      17286,
      276,
      26,
      2074,
      1262,
      7952,
      8794,
      393,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for length check can be bypassed; consider using explicit checks or exceptions"
  },
  {
    "line": 371,
    "text": "            return",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the first element of a list is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 2306,
    "end_token": 2318,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      717,
      5002,
      286,
      257,
      1351,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Accessing the first element of a list is a common pattern"
  },
  {
    "line": 370,
    "text": "            assert not execute_result",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      407,
      12260,
      62,
      20274
    ],
    "start_token": 2318,
    "end_token": 2334,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 382,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 2334,
    "end_token": 2343,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4585,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly calling the superclass's __init__ method ensures proper initialization."
  },
  {
    "line": 389,
    "text": "        In other words, all subclass of `SAOEStrategy` should overwrite `_generate_trade_decision()` instead of",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a state interpreter suggests a pattern for state management in ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      554,
      584,
      2456,
      11,
      477,
      47611,
      286,
      4600,
      4090,
      27799,
      13290,
      4338,
      63,
      815,
      49312,
      4600,
      62,
      8612,
      378,
      62,
      25351,
      62,
      12501,
      1166,
      3419,
      63,
      2427,
      286
    ],
    "start_token": 2343,
    "end_token": 2378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      1181,
      28846,
      5644,
      257,
      3912,
      329,
      1181,
      4542,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a state interpreter suggests a pattern for state management in ML models."
  },
  {
    "line": 393,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of an action interpreter suggests a pattern for action management in ML models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2378,
    "end_token": 2378,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      281,
      2223,
      28846,
      5644,
      257,
      3912,
      329,
      2223,
      4542,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of an action interpreter suggests a pattern for action management in ML models."
  },
  {
    "line": 400,
    "text": "    def _generate_trade_decision(",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Assertion without exception handling can lead to crashes if the condition is not met.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      8612,
      378,
      62,
      25351,
      62,
      12501,
      1166,
      7
    ],
    "start_token": 2378,
    "end_token": 2391,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      2195,
      861,
      295,
      1231,
      6631,
      9041,
      460,
      1085,
      284,
      17616,
      611,
      262,
      4006,
      318,
      407,
      1138,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Assertion without exception handling can lead to crashes if the condition is not met."
  },
  {
    "line": 405,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Updating network configuration with observation space indicates dynamic model configuration.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2391,
    "end_token": 2391,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      3127,
      8398,
      351,
      13432,
      2272,
      9217,
      8925,
      2746,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Updating network configuration with observation space indicates dynamic model configuration."
  },
  {
    "line": 408,
    "text": "    \"\"\"Proxy strategy that uses SAOEState. It is called a 'proxy' strategy because it does not make any decisions",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic instance creation from configuration is a common pattern in ML frameworks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      44148,
      4811,
      326,
      3544,
      14719,
      27799,
      9012,
      13,
      632,
      318,
      1444,
      257,
      705,
      36436,
      6,
      4811,
      780,
      340,
      857,
      407,
      787,
      597,
      5370
    ],
    "start_token": 2391,
    "end_token": 2418,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      4554,
      6282,
      422,
      8398,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      29251,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic instance creation from configuration is a common pattern in ML frameworks."
  },
  {
    "line": 415,
    "text": "        self,",
    "annotation": "\ud83e\udde0 ML Signal: Updating policy configuration with observation and action spaces indicates dynamic model configuration.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 2418,
    "end_token": 2427,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      2450,
      8398,
      351,
      13432,
      290,
      2223,
      9029,
      9217,
      8925,
      2746,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Updating policy configuration with observation and action spaces indicates dynamic model configuration."
  },
  {
    "line": 422,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic instance creation from configuration is a common pattern in ML frameworks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2427,
    "end_token": 2427,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      4554,
      6282,
      422,
      8398,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      29251,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic instance creation from configuration is a common pattern in ML frameworks."
  },
  {
    "line": 427,
    "text": "        # level strategy through this way.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic ValueError without specific handling can lead to ungraceful error management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1241,
      4811,
      832,
      428,
      835,
      13
    ],
    "start_token": 2427,
    "end_token": 2441,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      11052,
      12331,
      1231,
      2176,
      9041,
      460,
      1085,
      284,
      555,
      2164,
      558,
      913,
      4049,
      4542,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic ValueError without specific handling can lead to ungraceful error management."
  },
  {
    "line": 428,
    "text": "        exec_vol = yield self",
    "annotation": "\ud83e\udde0 ML Signal: Calling eval() on a policy indicates a pattern for setting models to evaluation mode.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      796,
      7800,
      2116
    ],
    "start_token": 2441,
    "end_token": 2454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      5418,
      3419,
      319,
      257,
      2450,
      9217,
      257,
      3912,
      329,
      4634,
      4981,
      284,
      12660,
      4235,
      13
    ],
    "label": "ml_signal",
    "reason": "Calling eval() on a policy indicates a pattern for setting models to evaluation mode."
  },
  {
    "line": 422,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for parameters and return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2454,
    "end_token": 2454,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      10007,
      290,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for parameters and return value improves code readability and maintainability"
  },
  {
    "line": 424,
    "text": "        # Once the following line is executed, this ProxySAOEStrategy (self) will be yielded to the outside",
    "annotation": "\u2705 Best Practice: Using super() to call the parent class method is a good practice for code maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4874,
      262,
      1708,
      1627,
      318,
      10945,
      11,
      428,
      38027,
      4090,
      27799,
      13290,
      4338,
      357,
      944,
      8,
      481,
      307,
      26403,
      284,
      262,
      2354
    ],
    "start_token": 2454,
    "end_token": 2484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      2446,
      318,
      257,
      922,
      3357,
      329,
      2438,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Using super() to call the parent class method is a good practice for code maintainability"
  },
  {
    "line": 425,
    "text": "        # of the entire executor, and the execution will be suspended. When the execution is resumed by `send()`,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on 'act' and 'exec_vols' input types or lengths",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      286,
      262,
      2104,
      3121,
      273,
      11,
      290,
      262,
      9706,
      481,
      307,
      9951,
      13,
      1649,
      262,
      9706,
      318,
      28291,
      416,
      4600,
      21280,
      3419,
      47671
    ],
    "start_token": 2484,
    "end_token": 2515,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      705,
      529,
      6,
      290,
      705,
      18558,
      62,
      85,
      10220,
      6,
      5128,
      3858,
      393,
      20428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on 'act' and 'exec_vols' input types or lengths"
  },
  {
    "line": 427,
    "text": "        # level strategy through this way.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No exception handling for attribute access",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1241,
      4811,
      832,
      428,
      835,
      13
    ],
    "start_token": 2515,
    "end_token": 2529,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      6631,
      9041,
      329,
      11688,
      1895
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No exception handling for attribute access"
  },
  {
    "line": 428,
    "text": "        exec_vol = yield self",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'order_list' has more elements than 'act' or 'exec_vols'",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2452,
      62,
      10396,
      796,
      7800,
      2116
    ],
    "start_token": 2529,
    "end_token": 2542,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      2875,
      62,
      4868,
      6,
      468,
      517,
      4847,
      621,
      705,
      529,
      6,
      393,
      705,
      18558,
      62,
      85,
      10220,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'order_list' has more elements than 'act' or 'exec_vols'"
  },
  {
    "line": 436,
    "text": "        super().reset(outer_trade_decision=outer_trade_decision, **kwargs)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on 'o.stock_id' existence or type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      42503,
      7,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      28,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 2542,
    "end_token": 2571,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      705,
      78,
      13,
      13578,
      62,
      312,
      6,
      6224,
      393,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on 'o.stock_id' existence or type"
  },
  {
    "line": 436,
    "text": "        super().reset(outer_trade_decision=outer_trade_decision, **kwargs)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No exception handling for 'get_step_time' method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      42503,
      7,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      28,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 2571,
    "end_token": 2600,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      6631,
      9041,
      329,
      705,
      1136,
      62,
      9662,
      62,
      2435,
      6,
      2446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No exception handling for 'get_step_time' method"
  },
  {
    "line": 438,
    "text": "        assert isinstance(outer_trade_decision, TradeDecisionWO)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No exception handling for 'get_freq' method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      318,
      39098,
      7,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      9601,
      10707,
      1166,
      54,
      46,
      8
    ],
    "start_token": 2600,
    "end_token": 2624,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      6631,
      9041,
      329,
      705,
      1136,
      62,
      19503,
      80,
      6,
      2446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No exception handling for 'get_freq' method"
  },
  {
    "line": 443,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for None before assigning to avoid KeyError",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2624,
    "end_token": 2624,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      6045,
      878,
      38875,
      284,
      3368,
      7383,
      12331
    ],
    "label": "best_practice",
    "reason": "Check for None before assigning to avoid KeyError"
  },
  {
    "line": 446,
    "text": "    \"\"\"(SAOE)state based strategy with (Int)preters.\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on the structure of 'trade_details' before DataFrame creation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      13538,
      18109,
      4090,
      27799,
      8,
      5219,
      1912,
      4811,
      351,
      357,
      5317,
      8,
      3866,
      1010,
      526,
      15931
    ],
    "start_token": 2624,
    "end_token": 2643,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      262,
      4645,
      286,
      705,
      25351,
      62,
      36604,
      6,
      878,
      6060,
      19778,
      6282
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on the structure of 'trade_details' before DataFrame creation"
  },
  {
    "line": 448,
    "text": "    def __init__(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of torch.no_grad() suppresses gradient tracking, ensure it's intended",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 2643,
    "end_token": 2651,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      28034,
      13,
      3919,
      62,
      9744,
      3419,
      802,
      16746,
      31312,
      9646,
      11,
      4155,
      340,
      338,
      5292
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of torch.no_grad() suppresses gradient tracking, ensure it's intended"
  },
  {
    "line": 450,
    "text": "        policy: dict | BasePolicy,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure act is properly validated before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2450,
      25,
      8633,
      930,
      7308,
      36727,
      11
    ],
    "start_token": 2651,
    "end_token": 2665,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      719,
      318,
      6105,
      31031,
      878,
      779
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure act is properly validated before use"
  },
  {
    "line": 452,
    "text": "        action_interpreter: dict | ActionInterpreter,",
    "annotation": "\ud83e\udde0 ML Signal: Use of interpreters for actions and states",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2223,
      62,
      3849,
      3866,
      353,
      25,
      8633,
      930,
      7561,
      9492,
      3866,
      353,
      11
    ],
    "start_token": 2665,
    "end_token": 2685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      16795,
      1010,
      329,
      4028,
      290,
      2585
    ],
    "label": "ml_signal",
    "reason": "Use of interpreters for actions and states"
  },
  {
    "line": 457,
    "text": "        **kwargs: Any,",
    "annotation": "\u2705 Best Practice: Returning a well-structured object with details",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      25,
      4377,
      11
    ],
    "start_token": 2685,
    "end_token": 2698,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      880,
      12,
      7249,
      1522,
      2134,
      351,
      3307
    ],
    "label": "best_practice",
    "reason": "Returning a well-structured object with details"
  }
]